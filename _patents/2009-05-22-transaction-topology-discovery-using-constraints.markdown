---
title: Transaction topology discovery using constraints
abstract: Determining a transaction topology of a network through generating and solving an adjacency matrix. A transaction is performed in a network and a list of statistics generated by the transaction is collected. The statistics provide a calculation of the number of inbound transactions and the number of outbound transactions for each node. A matrix structure is composed with the statistic. Constraints are applied to the matrix structure and a solution set of topology structures for the network is determined. The solution set of topology structures may be refined as needed with application of additional constraints.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08134935&OS=08134935&RS=08134935
owner: International Business Machines Corporation
number: 08134935
owner_city: Armonk
owner_country: US
publication_date: 20090522
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","This disclosure relates generally to network flow in a data processing transactional environment and more specifically to determining a transaction topology of a network through the application of constraints.","2. Description of the Related Art","Monitoring the processing of transactions within a network structure may provide information about the components in the network and the overall efficiency of the network. For example, the information may identify bottlenecks or blockages in a particular transaction flow that cause one or more components or applications in the system to process slowly or inefficiently. Identifying these problem areas may allow solutions for optimizing transaction flow to be determined.","One way to track a particular message or event that may be part of a transaction processed in a network is to specifically identify the destination of a message. For example, a message may need to be sent between a point A and a point B in a network. The transaction that may potentially occur between point A and point B must be specifically defined or declared. The history of the network may be referenced at some later point in time to determine whether the transaction actually occurred.","Another technique to track the processing of a particular event in a network may involve maintaining a state or context that relates the messages in a network. For example, a value or identifier may be attached to messages that are used in a transaction in a system. The components having the same or matching identifiers are determined to interact with or be part of the network for the particular transaction.","The disclosure describes a new approach to determining a topology structure of a transaction. A number of respective inbound and outbound transactions or messages to and from each component in a system network may be automatically tallied. A matrix is formed from the tallying. Solutions to the matrix may be automatically generated to represent possible topologies of the network. The solutions may be refined manually or through an interactive process by an application of additional constraints.","According to one embodiment, a computer implemented method of determining a topology of a transaction in a network is provided. The method includes generating statistics of a transaction processed by a network. The network may comprise a plurality of nodes or components. The method determines a data structure that is mathematical and is created from the statistics generated in processing the transaction. A number of constraints may be applied to the mathematical data structure to calculate a solution for the mathematical data structure.","According to one embodiment, a computer program product comprising a recordable medium tangibly embodying executable program code in a memory includes computer executable program code collecting and reporting on statistics of a transaction processed by a network, the network comprising a plurality of nodes; computer executable program code determining a data structure that is mathematical, the mathematical data structure being created from the reported statistics generated in processing the transaction; computer executable program code applying a number of constraints to the determined mathematical data structure; computer executable program code calculating all possible solutions for the mathematical data structure; and computer executable program code discovering a topology based on the calculated solution.","According to one embodiment, an apparatus that discovers a topology for a transaction is provided. The apparatus comprises means for generating a data structure that is mathematical with statistics tallied from processing a transaction through a network; means for applying a number of constraints to the generated mathematical data structure; means for calculating a solution for the mathematical data structure using the constraints and the tallied statistics; and means for determining a topology based on the calculated solution.","The embodiments of the disclosed processes and systems provide the advantage of determining the interrelationships or hierarchy of components that may be invoked in a transaction in a network without having to explicitly mark or identify each transaction with a signature or other identifier to determine the source or the destination of the transaction.","The embodiments of the disclosed processes and systems may also advantageously include the ability to further refine the set of topologies that may be generated by manual introduction of additional constraints and thereby increase the accuracy of the results.","Embodiments of the disclosed processes and systems may further provide the advantage of determining the interrelationships or hierarchy of components offline or subsequent to processing a transaction in a network. This is distinct from current technologies that may require online or in-process correlation of messages being processed by components.","The embodiments of the disclosed processes and systems may also advantageously include the ability to incorporate or augment existing technologies that use different transaction tracking techniques. For example, an existing technology may not be able to determine a complete topology structure or all the components in an entire structure. Therefore, the existing technology may work in conjunction with disclosed embodiments to provide a complete topology. These and other advantages will be more clearly understood from the detailed description taken in conjunction with the accompanying drawings and claims.","Although an illustrative implementation of one or more embodiments are provided below, the disclosed systems and\/or methods may be implemented using any number of techniques. This disclosure should in no way be limited to the illustrative implementations, drawings, and techniques illustrated below, including the exemplary designs and implementations illustrated and described herein, but may be modified within the scope of the appended claims along with their full scope of equivalents.","As will be appreciated by one skilled in the art, the present disclosure may be embodied as a system, method or computer program product. Accordingly, the present disclosure may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule,\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product tangibly embodied in any medium of expression with computer usable program code embodied in the medium.","Computer program code for carrying out operations of the present disclosure may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u2122, Smalltalk, C++, or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. Java and all Java-based trademarks and logos are trademarks of Sun Microsystems, Inc., in the United States, other countries or both. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present disclosure is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus, systems, and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions.","These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","In embodiments of this disclosure, solutions to a mathematical matrix describe possible topologies that may represent a transaction performed in a network or enterprise. A transaction is executed in a network. The number of inbound and outbound messages used for the transaction at each node or component in the network is automatically tallied. A list of statistics may be generated and collected into a matrix structure. Mathematical constraints are applied to refine the matrix. The matrix is solved using the constraints to determine the possible layouts or topologies. The number of possible topologies may be further refined by the addition of further constraints by a user.","In embodiments of this disclosure, the network may be comprised of a number of components or nodes within an area network. The area network may be a local type of network, such as a local area network (LAN), a cluster area network (CAN), a server area network (SAN), or other type of local area network recognized by one skilled in the art. The area network may also be a wide area network (WAN) such as the Internet, a metropolitan area network (MAN), or other type of wide area network recognized by one skilled in the art. The area network may be wired or wireless.","Turning now to , a diagram of a data processing system is depicted in accordance with an illustrative embodiment. In this illustrative example, data processing system  includes communications fabric , which provides communications between processor unit , memory , persistent storage , communications unit , input\/output (I\/O) unit , and display .","Processor unit  serves to execute instructions for software that may be loaded into memory . Processor unit  may be a set of one or more processors or may be a multi-processor core, depending on the particular implementation. Further, processor unit  may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit  may be a symmetric multi-processor system containing multiple processors of the same type.","Memory  and persistent storage  are examples of storage devices . A storage device is any piece of hardware that is capable of storing information, such as, for example without limitation, data, program code in functional form, and\/or other suitable information either on a temporary basis and\/or a permanent basis. Memory , in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage  may take various forms depending on the particular implementation. For example, persistent storage  may contain one or more components or devices. For example, persistent storage  may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage  also may be removable. For example, a removable hard drive may be used for persistent storage .","Communications unit , in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit  is a network interface card. Communications unit  may provide communications through the use of either or both physical and wireless communications links.","Input\/output unit  allows for input and output of data with other devices that may be connected to data processing system . For example, input\/output unit  may provide a connection for user input through a keyboard, a mouse, and\/or some other suitable input device. Further, input\/output unit  may send output to a printer. Display  provides a mechanism to display information to a user.","Instructions for the operating system, applications and\/or programs may be located in storage devices , which are in communication with processor unit  through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory  for execution by processor unit . The processes of the different embodiments may be performed by processor unit  using computer implemented instructions, which may be located in a memory, such as memory .","These instructions are referred to as program code, computer usable program code, or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media, such as memory  or persistent storage .","Program code  is located in a functional form on computer readable media  that is selectively removable and may be loaded onto or transferred to data processing system  for execution by processor unit . Program code  and computer readable media  form computer program product  in these examples. In one example, computer readable media  may be in a tangible form, such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage  for transfer onto a storage device, such as a hard drive that is part of persistent storage . In a tangible form, computer readable media  also may take the form of a persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system . The tangible form of computer readable media  is also referred to as computer recordable storage media. In some instances, computer readable media  may not be removable.","Alternatively, program code  may be transferred to data processing system  from computer readable media  through a communications link to communications unit  and\/or through a connection to input\/output unit . The communications link and\/or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non-tangible media, such as communications links or wireless transmissions containing the program code.","In some illustrative embodiments, program code  may be downloaded over a network to persistent storage  from another device or data processing system for use within data processing system . For instance, program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code  may be a server computer, a client computer, or some other device capable of storing and transmitting program code .","The different components illustrated for data processing system  are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in  can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example, the data processing system may include organic components integrated with inorganic components and\/or may be comprised entirely of organic components excluding a human being. For example, a storage device may be comprised of an organic semiconductor.","As another example, a storage device in data processing system  may be any hardware apparatus that may store data. Memory , persistent storage  and computer readable media  are examples of storage devices in a tangible form.","In another example, a bus system may be used to implement communications fabric  and may be comprised of one or more buses, such as a system bus or an input\/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory  or a cache such as found in an interface and memory controller hub that may be present in communications fabric .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 2","b":["200","210","210","230"]},"A set of constraints  may be determined as inputs to topology engine . Constraints  represent mathematical requirements. Constraints  may include a base set of constraints. The base constraints  represent the minimum set of constraints that must be input to the topology engine  to enable operations. Additional constraints  may be added as inputs to the topology engine  to enable a more accurate output from the topology engine . The additional constraints  may be added as initial inputs with the base constraints. Additional constraints  may also be added between an iterative processing by the topology engine .","Topology engine  processes inputs to determine the interrelationships of components in a network transaction. The topology engine  may include an application programming interface that receives information, such as a set of statistics  and constraints , for a particular transaction and translates the information to a format that may be required by the topology engine  for processing. Topology engine  mathematically processes the statistics  and the constraints  and outputs a number of topology candidates . One or more topology candidates  may be generated by the topology engine  processing. The topology candidates  may be stored in a database or some other storage means for later use. In an embodiment, topology candidates  may be output to a graphical user interface  of display . A graphical user interface  of display  may display the components used in the transactions and the possible existing interconnections among all the nodes.","The number of topology candidates  may be further refined for increased accuracy through an iterative processing of results that may be generated by topology engine . For example, the topology candidates  may be modified and returned to the topology engine  by a return path  for additional processing. Return path  is not intended to represent an actual physical structure. Rather, return path  is meant to illustrate that there may be computer program code implemented to perform an iteration of the processing of topology engine  after the topology candidates  are generated. Additional constraints  may be added to topology candidates that are modified prior to further processing by the topology engine . The additional processing by topology engine  may result in a decreased number of topology candidate  outputs. The additional processing may also result in more accurate candidate topologies being generated. The number of iterations of the topology engine may be pre-determined or may vary depending on the requirements of a particular enterprise.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 3","b":["300","310","312","314"]},"The statistics  may be input to the topology engine  to be used as part of a mathematical algorithm that determines the specific interconnections or layout of the network components involved in the transaction. Topology engine  includes matrixgen  and topology generator . The mathematical processing may be performed by a matrixgen . Matrixgen  may use the statistics  to generate a mathematical matrix structure having a number of rows and an equal number of columns corresponding to the rows. In one embodiment, the number of components or nodes of the network involved in the transaction represent an upper numerical bound on the number of respective rows and columns of the matrix. For example, if the number of components involved in the transaction equals four, matrixgen  would generate a matrix structure having 4 rows and 4 columns or a 4\u00d74 matrix.","Matrixgen  also receives constraints . Matrixgen  may use constraints  to define the structure or form that must be used by a matrix in representing a topology. Constraints  may comprise a base set of constraints  that represent a minimum set of constraints to operate matrixgen . Additional constraints  may also be input to matrixgen  to produce more accurate results. In some embodiments, the constraints may enable matrixgen  to generate a topology solution faster. The constraints may take the format of a mathematical expression or other mathematical form that can be processed by matrixgen . The additional constraints  may include, for example, time or a restriction (such as a specified range) on the values of the elements in the matrix. Matrixgen  may generate a matrix. The matrix generated by matrixgen  may be input to topology generator . Topology generator  may input the matrix and generate potential solutions or topology candidates  that represent all possible topologies of a network for a specific transaction based on the constraints. The topology candidates  may be output to a storage or file for processing at a later time.","In an alternative and optional embodiment illustrated in block , the topology candidates  may be input to a renderer ; possible topologies represent topology candidates  that may be graphically displayed on a graphical user interface  through renderer . Renderer  may be a software application that inputs the topology candidates  generated by topology generator  and outputs corresponding graphical images representative of each of the topology candidates  to a graphical user interface  of display . The graphical format of the topology candidates  may be examined or reviewed for the accuracy of the layout of its components and the interrelationships between the components. It may be determined that the topology does not accurately represent the layout of the components in a particular transaction. In such cases, additional constraints , in a mathematical format, may be applied to the processes of the topology engine  to enable the generating of additional and more accurate topology candidates .","Turning now to  of diagram , matrixgen  includes statistics  that may comprise a number of the inbound messages and outbound messages counted or tallied for each node in a transaction. The statistics  may be processed to generate the variables for a matrix structure . The variables may represent the elements  of matrix structure . For example, the elements  of matrix structure  may include, without necessarily being limited to, matrix rows, matrix columns, and matrix entries.","Matrix structure  may represent a data structure of a tabular format suitable for processing by matrixgen . The data structure may be any kind of storage or retrieval structure. For example, in one embodiment, matrix structure  may be, but is in no way limited to, an array of multiple or n-dimensions, where n represents a positive integer. In other embodiments, matrix structure  may be a vector array. In another embodiment, matrix structure  may represent a relational database. In yet another embodiment, matrix structure  may be an indexed storage. Matrix structure  may also be considered to represent an adjacency matrix. Other embodiments may be possible as would be recognized by one skilled in the art.","In  of diagram , topology generator  includes an input of a matrix structure  that may be generated by matrixgen  of . Constraints  may be also be required as inputs to topology generator  in order to discover solutions to the matrix structure. The constraints  may be a basic set of constraints required for operation applied to matrix structure . Constraints  may provide a restriction on the values of the matrix structure . The number of constraints  may also provide a limit on the possible number of solutions that may be generated by constraint solver . For example, a particular transaction may produce a solution that generates one hundred topologies. One way to reduce the number of solutions generated may be to introduce an additional constraint, such as time or clock skew between components in a transaction. Constraint solver  may then be rerun to determine a number of topologies that may be reduced to a number that is less than one hundred topologies because of the additional constraint.","Topology generator  may input matrix structure  and constraints  to a constraint solver . Constraint solver  may generate one or more solutions for the matrix structure  depending on the constraints  applied to the matrix structure . It must be noted that each solution that may be generated by constraint solver  corresponds to a separate topology. Constraint solver  may produce solutions for matrix structure  using constraint programming techniques that may be recognized by one skilled in the art. In the constraint programming of the topology generator, a model or matrix structure  is established. Mathematical constraints including upper and lower bounds may be expressed and input to the constraint solver  to determine solutions to the matrix structure .","Turning now to , network  represents a generic layout that interconnects components that may be part of a transaction process according to an embodiment of the invention. The components of the network may be a system, a computer, a server, or some other processing entity or node. In network , the components include node a , b , f , n , e , d , c , and node V . It is important to note that network  is exemplary and is in no way indicative of an exact number of nodes that may exist in a network. In network , the letter n may represent any positive integer number that is zero or greater. The letter V may represent the total number of nodes that may be involved in a transaction executed in the network. In some embodiments, the number of components or nodes in a network may be transaction dependent. In other embodiments, the number of components or nodes may be system dependent. A transaction may be input to the network  for processing.","One such transaction may be, for example, a banking transaction that involves a transfer of funds from one bank account to another. It must be noted that the present disclosure should not be limited to banking transactions and may involve any number of different types of transactions that may occur within a network, as would readily suggest themselves to one skilled in the art. As the transaction executes, the participation of a number of components may be required. For example, inbound messages may be received for processing by a node. Nodes may process inbound messages and send outbound messages to other nodes. In this example, each message may relate to the transfer of funds. The number of inbound messages and outbound messages processed at each node may be tallied or counted. The tally may be performed by an aggregator . Aggregator  may represent a hardware or software component that captures the statistics of each node involved in a transaction. The statistics may include factors of time, direction of message, clock consideration and other variable constraints. The aggregator  may reside at each node to collect the statistics of each node or may be a node or other element of the network specifically dedicated for that purpose.","The statistics stored by the aggregator may be input to matrixgen . Matrixgen  may use the statistics collected by aggregator  to mathematically define and construct the structure of a matrix . Matrix  represents a generic matrix structure, also known as an adjacency matrix that accounts for the interactions of each node to every other node within the matrix . The various elements of the matrix , a, represents interactions between the row node and the column node. If there are V nodes that participated in the transaction, the matrix  will be of size V\u00d7V. Each row of the matrix  specifies the number of outbound messages of the node to the respective column node. Each column of the matrix  specifies the number of inbound messages of the node from the respective row node.","In , diagram  represents a more detailed view of a possible network that processes a transaction. Using the banking transaction referenced in , an administrator  or other entity may input, for example, a request for network  to process a transfer of funds from one account to another. It must be noted that network  is not in any way limited to the representation depicted herein. Network  may comprise one or more networks. Examples of a network environment include, but are in no way limited to, one or more network types including types of wide area networks (WANs), local area network (LAN), wireless LAN (WLAN). In some embodiments, for example, the transaction may occur between elements within a single component.","The components of the network may be connected by a bus . Other types of connections may be possible. For example, a wireless, optical or other connection may be used as would be obvious to one skilled in the art. An aggregator  may tally, for each component, the number of inbound and outbound messages. The components may be a computer, server or other type of processing element as may be obvious to one skilled in the art. Network  includes components , , , , , , , ,  and . However, any number of components may be used in a single transaction. Aggregator  outputs the statistics at statistics  for processing in matrixgen . The statistics may include time functions and other constraints that may be obvious to one skilled in the art.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7","b":["700","720","704","1","1","706","2","2","710","712","720","720","708"]},"An input transaction  may be sent to network  for processing. A number of the nodes in network  may be involved in the processing of the transaction. However, the topology or interconnections of the nodes in the network is indeterminable. The aggregator  tracks and collects the inbound messages received or outgoing message sent between the nodes in network . In an embodiment, the aggregator  may also track and collect the time that each node in network  receives or sends out messages. The information collected by aggregator  represents statistics  that may be stored or collated for input to topology engine . The statistics  may be used by the topology engine  to provide the structure for matrix . Topology engine  also uses constraints to generate a number of matrices that represent possible topology candidates.","Topology engine  generates a number of possible solutions for the matrix output from matrixgen. Matrix  represents one solution generated by topology engine  based on the transaction network . Matrix  represents the input and output interconnections that may exist between each of the nodes. The rows of the matrix represent outbound connections. The columns of the matrix represent inbound connections. For example, row ra of matrix  Web Server (WS) has an entry of one under column cb. This indicates that Application Server  (APS) has a connection to the Web Server (WS) and the connection is inbound to the APS from the WS. Similarly, row rb of matrix  features three entries that contains values of one. In row rb, the entry of one under column ca indicates that a connection to WS from APS exists. In row rb, the entry of one under column cc indicates that connection from Application Server  (APS) to APS exists. Similarly, in row , row rb, the entry of one under column cd indicates that a connection to the database (DB) from APS exists. Row rc features a value of one under column APS. This indicates an inbound connection from APS to APS. Row rd has all zero entries which signify that no outbound connections exist between DB and any other component or node in network .","Turning now to the columns, column ca includes a value of one in row rb. This indicates an inbound connection to WS from APS. Similarly, in column cb, the one in row ra and row rc represents the existence of inbound connections to APS from WS and APS, respectively. In column cc, there is an outbound connection to APS from APS signified by the one value in row rb. Finally, in column cd, there is an inbound connection to the DB from APS as designated by the one value in row rb.","Matrix  represents a solution generated by topology engine . The solution may be output to a storage device. It may also be printed. In an optional embodiment , the solution may be transformed into a graphical representation through renderer . Renderer  may transform matrix  into a graphical image representation illustrated by topology . Topology  graphically displays all the nodes of network  and the precise input and output interconnections or relationships that may exist between each element or node of the network. For example, the matrix solution  indicated that there was one inbound connection to APS from WS and one outbound connection from APS to WS. Accordingly, topology  features a bidirectional connection between the WS node  and the APS node . Similarly, based on the matrix solution  that illustrates a zero in row rd, a zero in column cb, a one in column cd, and a one in row rb, there is only an outgoing connection that exists from APS  to DB . Additionally the matrix solution illustrates that a bidirectional connection exists between APS  and APS .","Topology  may be graphically displayed on, for example, a graphical user interface of a display. The topology may also be refined for accuracy. In one embodiment, the refining may include additional constraints and solve for the matrices in the topology engine. In another embodiment, the positions of the network elements may be manually adjusted. For example, it could be that the position of Application Server  is manually swapped with the position of WS through a user interface to the display. This action by the user would create the constraint that the Application Server  is the first node in the topology.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 8","FIG. 5","FIG. 5","FIG. 10"],"b":["800","800","560","540","800","800","802","810","560","1060"],"sub":"v,u "},"At , the constraint \u03b1\u22670; \u2200v,u\u03b5V states that for every node u and every node v inside the set of V, element \u03b1must be greater than or equal to zero. This means that each element or node in a network must receive at least zero messages, or zero inbound and outbound events. Given constraint , the number of messages processed by each node in a network cannot be a negative value. Each node must have received an event in order for it to be represented in the topology. If the node does not receive any events, the node may be present in the matrix, but will not be represented in the topology.","Constraint  \u03b1=0; \u2200v\u03b5V states that for each element or node a \u03b1in the network, \u03b1, is equal to zero. This means that a node in the network may not send inbound and outbound events or messages to itself. A transaction that involves message processing must be represented as occurring between individual nodes. If a node or component could send and receive messages to itself, the component would be represented as many distinct nodes, where the number of nodes is equal to the number of distinct messages the component sends to itself.","Constraint ",{"@attributes":{"id":"p-0077","num":"0076"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mi":"v","mrow":{"mo":["\uf603","\uf604"],"mi":"V"}},"mo":"\u2062","msub":{"mi":"a","mrow":{"mi":["v","k"],"mo":","}}},{"mrow":{"mi":"indegree","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mo":"=","msub":{"mi":["I","k"]}}],"mo":"="}}},"br":{},"sub":"k"},"Constraint ",{"@attributes":{"id":"p-0079","num":"0078"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mi":"v","mrow":{"mo":["\uf603","\uf604"],"mi":"V"}},"mo":"\u2062","msub":{"mi":"\u03b1","mrow":{"mi":["k","v"],"mo":","}}},{"mrow":{"mi":"outdegree","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"k"}},"mo":"=","msub":{"mi":["O","k"]}}],"mo":"="}}},"br":{},"sub":"k"},"Constraint ",{"@attributes":{"id":"p-0081","num":"0080"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"munderover":{"mo":"\u2211","mi":"v","mrow":{"mo":["\uf603","\uf604"],"mi":"V"}},"mo":"\u2062","mrow":{"msub":{"mi":"\u03b1","mrow":{"mi":["k","v"],"mo":","}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mi":"v","mrow":{"mo":["\uf603","\uf604"],"mi":"V"}},"mo":"\u2062","msub":{"mi":"a","mrow":{"mi":["v","k"],"mo":","}}}}},{"msub":[{"mi":["O","k"]},{"mi":["I","k"]}],"mo":"\u2062"}],"mo":"="}}},"br":{},"sub":["k","k"]},"Other constraints may be used to further restrict the solutions generated by the topology generator. In an embodiment, a constraint may restrict the value of a matrix to the larger or maximum value of the number of inbound events or the number of outbound events. The restriction on the values that each entry in a matrix may have limits on the number of possible topologies that may be generated by the matrix. This constraint may be represented as 0\u2266\u03b1\u2266max(I,O). Literally, this expression states that for each node in a network, the value must be greater than or equal to zero, and must be less than or equal to the maximum value of Inbound message events and Outbound message events for the node. A constraint may include a partial topology definition provided by the user or an existing transaction tracking technology.","In an embodiment, a constraint may include the time that each event occurred at a node. For example, an assumption regarding the clock skew between any two nodes may be made. If it is assumed that between any two nodes the clock skew threshold value is less than some threshold value t, a further constraint may be provided. The clock skew assumption may be used to limit the values of the entries in the matrix and limit the number of possible resulting topologies. To further describe the details of this constraint, the set of INBOUND events for a node v may be represented as I={t, . . . , t} where each element corresponds to the time of a message or event. Similarly, the set of OUTBOUND events for a node v may be represented as O={t, . . . t}. A clock skew limiting constraint may then be defined by finding the intersection between Iand Owhereby a constant difference exists between the elements. The size of the intersection may be a bound on a value in the adjacency matrix to limit the set of candidate topologies. The clock skew threshold may be used to increase or decrease the size of the intersection. The threshold should be an approximation on the actual time skew between each node. The time included with each event may be in Greenwich Mean Time if the machines are located in different time zones. The constraint may be written as",{"@attributes":{"id":"p-0084","num":"0083"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mn":"0","mo":["\u2264","\u2264"],"msub":{"mi":"\u03b1","mrow":{"mi":["i","j"],"mo":","}},"mrow":{"munder":{"mi":["max","k"]},"mo":"\u2062","mrow":{"mrow":{"mo":["(",")"],"mrow":{"mo":["\uf603","\uf604"],"mrow":{"msub":{"mi":["I","j"]},"mo":"\u22c2","mrow":{"mo":["{","}"],"mrow":{"msub":{"mi":["O","i"]},"mo":"+","mi":"k"}}}}},"mo":"."}}}}},"br":{}},"Referring now to , pseudocode  may be developed to implement features of the disclosed embodiments. The pseudocode comprises code sections or snippets that may be used to further develop a program in any programming language such a Java\u2122, C++, Pascal, or any other programming language known to one skilled in the art. In pseudocode , code snippet  provides an explanation of the meaning of the variables used in the pseudocode. Code snippet  provides the parameters used in the pseudocode.","Inbound [k] is the same as indegree (k), I(k), in constraint  of , and represents the array of INBOUND events that have been tallied at a node k. Outbound [k] is the same as outdegree(k), O(k), in constraint  of , and represents the array of OUTBOUND events that have been tallied at node k and threshold is a limit on clock skew between any two nodes. Code snippet  and code snippet  of the pseudocode applies the base set of constraints referenced in , i.e. -. For example, each occurrence of the variable C referenced in  contains all the constraints applied to that point in the code. The set of constraints may increase in size as the algorithm progresses. Although the base set of constraints are required, other constraints in addition to the base set of constraints are possible and may be applied to discover a topology for a particular transaction. For example, in the banking transaction used earlier in the disclosure, a first bank may process a transaction and include a specific constraint so that a first specific topology result may be included or excluded. A second bank may run the same transaction as the first bank and exclude the specific constraint included by the first bank or may include several other constraints so that a second topology different from the first topology may be included or excluded. Again, it must be noted that the banking transaction is exemplary and the disclosure may be applicable to any number of different types of transactions, remote or local, as may be known by one skilled in the art.","The constraints, C, may be parsed and added to the code one constraint at a time. Other constraints may be possible, depending on a particular application, transaction, or enterprise configuration. For example, code snippet  of the pseudocode provides constraints that may be based on time and time differentials. In section , the code may use the time information tallied with each of the INBOUND and OUTBOUND events or messages. If the time information is recorded, a constraint that limits the time change between any two nodes, during the period the time information is tallied, may be included. The time constraint may further reduce the number of possible topologies that may be found by the algorithm. The time constraint may also result in faster processing. Other advantages may be evident to one skilled in the art.","During the collection of statistics in a network, the Greenwich Mean Time (GMT) time between any two hosts or components of the network may be assumed to be within some constant threshold. The international time or Greenwich Mean Time (GMT) may be used to record the time to enable the time at each component or node within a network to be independent of the local time zone in which the component or node of the network may be located. For example, a set of INBOUND events at a node j and a set of OUTBOUND events at a node i are compared, where i and j represent any positive integer value. The largest number of events that have, at most, a constant threshold difference between every INBOUND and OUTBOUND for nodes j and i, respectively, is used as the upper bound on a value for the matrix at a location A(i,j), where A is a variable that represents an array such as an adjacency matrix or other tabular structure.","For example, if a node I sends several messages to a node J, the time difference between the OUTBOUND events from I and the corresponding INBOUND events to J may be assumed to be within a certain threshold value. Node I may receive inbound event at times 5, 10, and 15, that is INBOUND[I]={5, 10, 15}. Outbound events to J may occur at times 1, 6, and 11, that is, OUTBOUND [J]={1, 6, 11}. The number of events between node I and node j that have a constant difference between them may be calculated by taking the differences between the events. In this example, the best case is that node I and node J are 4 time units apart. The threshold may then be set to a value of 4. If the time difference that is stored along with the events is in the form 0+GMT, the use of this threshold may be reasonable as it may be assumed that as the number of inbound messages and outbound messages are being tallied for each node, the clocks that may be on each component are relatively constant.","Still referring to section , the code snippet illustrates that if timing information is not recorded, the upper bound on the value for the adjacency matrix A(i,j) is simply the maximum of the number of INBOUND events for node j and the number of OUTBOUND events for node i.","Code snippet  may apply a linear solver or Integer programming solver to the final set of constraints accumulated by constraint variable C. The linear solver may be an integer programming solver or other constraint programming tool. The solutions returned by the linear solver may produce one or more matrix structures representing possible topologies.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 10","FIG. 10"],"b":["1002","1020","1020","1004","1014","1008","1006","1012","1020","1020","1010"]},"One or more of the nodes in network  may be involved in the processing of the transaction. However, the topology or interconnections of the nodes in the network  is indeterminable. The aggregator  tracks and collects the inbound messages received or outgoing messages sent between the nodes in network . In an embodiment, the aggregator  may also track and collect the time that each node in network  receives or sends out messages. The information collected by aggregator  represents statistics such as statistics  that may be stored or collated at a central point or at each node.","The statistics, or statistics , are used by matrixgen  in a topology engine (not shown) to generate the structure of a matrix. For example, matrix  represents one matrix structure that may be generated by matrixgen  based on the exemplary network statistics  stored for network . The number of rows and number of columns of matrix  is structured to correspond to the number of network nodes that participate in the transaction processing. For example, there are five nodes that are involved in the transaction processing. Therefore, there are five columns and five rows for the matrix. The statistics  provide the number of inbound and outbound messages or events that are processed by each component or node of the matrix. All other matrix values are unknown. A topology generator  in the topology engine (not shown) may solve a mathematical equation using constraints that are input to the topology engine. One or more solutions may be generated and configured into a matrix structure. Each matrix solution may describe a topology candidate or layout. For example, there may be two matrix solutions generated for matrix  by topology generator . The solutions may be input to renderer .","Renderer  may include an option to display the solution in a matrix format, such as is illustrated in , or a graphical format that illustrates the connections between the components. For example, the solutions to matrix  may be graphically displayed as candidate solution A  and candidate solution B . Candidate solution A  illustrates the potential interconnections and path of input transaction . In candidate solution A , the incoming flow of the transaction path may be from web server  to application server A , to application server B , to database A , then back to database B . There is no path or flow from database B  to application server B . The transaction flow may also continue from application server B  to application server A  to web server .","Candidate solution B  differs from candidate solution A  and features a reversal of the positions of the web server  and the database A . In candidate solution B, component Database A  is the first node in the topology instead of the component web server . Candidate solution B  may also be a valid candidate solution as is shown by the matrix table  that illustrates the tally of inbounds and outbounds for web server  and database A  being equal.","The topologies or layouts represented by candidate solution A  and candidate solution B  may be stored, printed or displayed graphically. The topologies may also be further refined for accuracy. For example, additional constraints may be added so that the topology generator computes only one solution to one matrix instead of multiple solutions. The more constraints that are added to the topology generator , the more likely it may be that the candidate solutions that are generated actually represent the physical transaction path. Further, the correct topology or candidate solution or solutions may be achieved more quickly.","It may also be possible to manually refine the candidate solution A  and candidate solution B  topologies. For example, in the example of  featured above, an additional constraint may be manually added to restrict web server  to being the first node or component in the topology. This added constraint would eliminate the possibility of candidate solution B  and restrict the solution to the topology of candidate solution A  only.","Referring now to , matrix  represents a solution that may be generated by topology generator  based on the input matrix  of . Renderer  may generate candidate solution A  from matrix . In , matrix  represents a solution that may be generated by topology generator  in , based on the input matrix . Matrix  may be stored or optionally may be rendered to a display by renderer  in  to visually display candidate solution B . It must be noted that each solution generated by topology generator  for a matrix may correspond to a separate topology.","In , flowchart  details the process of the invention. The process may start  when a transaction is processed by a network. The network may include a number of nodes or processing elements. The network may include components that are part of a local area network or within a wide area network. In some embodiments, the components may be connected through wired means. In other embodiments, the components may be communicatively coupled through wireless connections or a combination of wired and wireless connections.","The processing of a transaction may involve messages or events being processed by one or more nodes. At a block , the number of inbound messages processed by each node may be tabulated for each node. The tabulation may occur at each respective node or at a central node. For example, there may be a hardware device or software component resident at each node or in a central node of the network that collects the information on number of messages processed. Similarly, at a block , the number of outbound messages processed by each node may also be tabulated. The number of inbound and outbound messages provides no information on where the messages may be going within the network. For example, the source and or destination of each message processed by the node may not be determined or recorded. In some embodiments, time may be also tabulated. For example, in one embodiment, the arrival or inbound time of each message to a node may be tabulated. Also, a tabulation of the departure or outbound time of a message from each node may be tabulated and recorded. In other embodiments, the time it takes for a node to process an event may be tabulated.","The processing of the transaction completes and at a block , a matrix structure is created with the tabulated inbound and outbound messages. Other information that may be tabulated may be included as part of additional constraints.","At a block , constraints may be applied to the matrix in order to generate a solution. The constraints are used to control the generation of realistic transactional structures. For example, one constraint may be that a negative number may not exist in a matrix because it cannot be physically interpreted. Another constraint may be that each outbound or outgoing message may require a corresponding inbound or incoming message. A minimum set of constraints is used in order for operational purposes. The minimum set of constraints enables the operation of the process. Additional constraints may be added to refine the set of topological structures generated into a set more representative of the actual network.","At a block , a set of one or more matrices may be determined as solution topologies. At a block , the solutions may be rendered on a graphical user interface. The graphical user interface will graphically display the interconnections between the elements. Further refinement may be required to achieve a more representative solution. In some embodiments, the refinement may reduce the number of candidate solution topologies generated. In some embodiments, the refinement may increase the accuracy of the interconnections or topology. At a block , further refinement may be required. In one embodiment, the system may require additional refinement. In another embodiment, a user may choose to add constraints to explore whether different sets of topologies are possible. The additional constraints may be applied at a block  and another set of candidate solutions may be determined at a block . If it is determined at a block  that no further refinement of the solution set is required, the process may end at .","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing a specified logical function. It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","The invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, and other software media that may be recognized by one skilled in the art.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems, and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["For a more complete understanding of this disclosure, reference is now made to the following brief description, taken in conjunction with the accompanying drawings and detailed description, wherein like reference numerals represent like parts.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIGS. 4A and 4B","FIG. 3"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 11A and 11B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
