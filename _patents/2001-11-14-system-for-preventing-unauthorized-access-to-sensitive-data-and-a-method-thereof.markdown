---
title: System for preventing unauthorized access to sensitive data and a method thereof
abstract: A method and system for prevention of unauthorized access to multimedia data are disclosed herein. A tamper-resistant system having a software driver, a peripheral device, and a system memory is used to encrypt sensitive routines used by the software driver. The software driver is used to interface between one component of the system, such as a processor, and a peripheral device, such as a graphics chip. The driver incorporates one or more sensitive routines, that if divulged, could possibly allow an unauthorized party access to data processed by the software driver. Accordingly, in one embodiment, the sensitive routines are stored in an encrypted format with the driver. To access a sensitive routine, the driver submits the associated encrypted routine to the peripheral device, as well as a decryption method, if desired, where it is decrypted and stored in a plaintext format in a location, such as system memory, accessible to both the driver and the peripheral device. The driver can then use the plaintext routine to process the data. When finished processing the data, the plaintext routine can be re-encrypted using one or more of a variety of encryption methods and stored with the driver. Any remaining copies of the plaintext routine can be removed from the system. By encrypting the sensitive routines at all times other than when in immediate use, the system can effectively prevent an unauthorized party from accessing data based on knowledge about the sensitive routine. In addition, the use of the hardware of the peripheral device to encrypt/decrypt the sensitive routines provides an additional barrier to an unauthorized party.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07594265&OS=07594265&RS=07594265
owner: ATI Technologies, Inc.
number: 07594265
owner_city: Thornhill, Ontario
owner_country: CA
publication_date: 20011114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE DISCLOSURE","BACKGROUND","DETAILED DESCRIPTION OF THE FIGURES"],"p":["The present invention relates generally to securing data and more particularly to the prevention of unauthorized access to confidential data.","Protection of confidential or copyrighted data is of vital importance in a number of industries. As a result, a number of ways to prevent unauthorized access to the confidential data have been developed. One common method to prevent access is to encrypt some or all of the confidential data, thereby making it useless to unauthorized parties. For example, video data from a digital versatile disc (DVD) played on a DVD drive in a personal computer is often encrypted or encoded between a graphics chip and its associated software driver. Once received by the graphics chip, the video data is decoded or decrypted and formatted for display. Since the data output from the graphics chip often requires more storage space than the corresponding video data transmitted between the driver and the graphics chip, an unauthorized party generally prefers to gain access to the smaller set of data. However, since some or all of the data between the software driver and the graphics chip is encrypted, it is useless to an unauthorized party in its encrypted form.","Although the confidential data may be encrypted or otherwise encoded to make it indecipherable to unauthorized parties, methods exist to defeat the encryption. One method used to defeat the encryption is for an unauthorized party to gain access to the sensitive data encryption routine used by the software driver to encrypt confidential data. By reverse engineering of the data encryption routine, the unauthorized party can \u201ccrack\u201d the encryption, thereby decrypting the confidential data. Accordingly, conventional methods of preventing an unauthorized party from obtaining a sensitive encryption routine of the software driver include encrypting the encryption routine when it is not in use. However, these conventional methods are inefficient, as they generally use a central processing unit or other heavily-used processor to perform the encryption of the encryption routine. This often results in overloading the central processing unit, thereby reducing system performance.","Given this limitation, as discussed, it is apparent that a way to more effectively prevent unauthorized access to confidential data would be beneficial.","In accordance with at least one embodiment of the present invention, a first encrypted routine of a software driver is sent to a peripheral device, wherein the software driver is to interface with the peripheral device. The first encrypted routine is decrypted at the peripheral device to generate a plaintext routine. The plaintext routine is then provided to the software driver. One advantage of one embodiment of the present invention is that unauthorized access to confidential or copyrighted data can be more effectively prevented. Another advantage is that processing resources may be used more efficiently.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 1-5"},"Referring now to , a system and method for preventing access to sensitive data are illustrated according to at least one embodiment of the present invention. Tamper-resistant system  includes application , peripheral device , and system memory . Application  can include a software or hardware application to interface with a peripheral device (such as peripheral device ), and can be implemented as a sub-set of instructions of a software application, as a separate software application, as a hardware component such as an application specific integrated circuit, and the like. For example, application  could include a software driver, an operating system kernel, a memory controller, and the like. Although application  can include a software application, a hardware application, or a combination thereof, embodiments wherein application  includes a software application are discussed herein for purpose of discussion. In one embodiment, application  is stored as a set of executable instructions in system memory  and made available for processing by central processing unit .","Peripheral device  can include any device or system accessible and\/or utilized by application . For example, application  could include a software driver to control peripheral device  and peripheral device  could include a graphics chip, graphics accelerator card, or sound card of a personal computer, a network chip, a modem card, and the like. System memory , in one embodiment, is accessible to both application  and peripheral device . For example, peripheral device , and system memory  (where application  can be stored) could reside together on the motherboard of a computer. System memory  can include random access memory (RAM), flash memory, a frame buffer, a storage device, such as a hard drive, and the like. Note that the terms \u201cencryption\u201d and \u201cencoding\u201d are similar in nature, and therefore may be used interchangeably unless otherwise noted, as may the terms \u201cdecryption\u201d and \u201cdecoding\u201d.","Application , in one embodiment, includes one or more sensitive data  utilized by application . For example, sensitive data  could include a device identification (ID), a chip ID, authentication data such as a private encryption key, and the like. Additionally, in at least one embodiment, includes sensitive data  includes a routine or method implemented as software or executable code. For example, in this embodiment, sensitive data  can include one or more sensitive subroutines, function calls, Java Applets, hypertext markup language (HTML) tags, script routines, functions, and the like. Sensitive data  (as a software routine or method) can be implemented as a high-level computer language, machine level code, etc. Embodiments wherein sensitive data  includes routines or methods are discussed in greater detail with reference to .","Sensitive data  is generally deemed sensitive when, if divulged to an unauthorized party such as a hacker, the unauthorized party could gain access to confidential data or information using the divulged sensitive data . For example, if sensitive data  includes a private encryption\/decryption key, and a hacker was to obtain the private encryption\/decryption key, the hacker could decrypt sensitive information encrypted using the private encryption\/decryption key using reverse engineering or other methods. Note that, in at least one embodiment, sensitive data  is not stored in plaintext form, since this would allow an unauthorized party to use it. Instead, in one embodiment, an encrypted version (encrypted data ) of sensitive data  is stored in a location accessible by application , such as in system memory , as discussed in greater detail subsequently. In at least one embodiment wherein sensitive data  includes a sensitive routine, a plurality of the sensitive routines, each being functionally equivalent but having different formats or coding styles, is used by application . In this case, one or more encrypted versions of the subroutines (encrypted data ) may be stored with application  in place of each of the plurality of sensitive routines.","In at least one embodiment, application  further includes one or more decryption codes  and\/or encryption codes . Decryption code  and\/or encryption code  can include a variety of implementations of an encryption\/decryption algorithm, such as binary code, a script, a JavaScript, or other encryption\/decryption methods executable by peripheral component. Decryption code  and\/or encryption code , in one embodiment, are provided by a third-party vendor, such as a manufacturer of peripheral device . Decryption code  and\/or encryption code  can be implemented as part of command information .","A method for using tamper-resistant system  to prevent access to sensitive data , herein referred to as tamper-resistant method , initiates in step , where application  submits an encrypted copy (encrypted data ) of sensitive data  to peripheral device . Sensitive data  can be encrypted to generate encrypted data  using a variety of methods. For example, sensitive data  could be encrypted at the time of creation of sensitive data . Alternately, sensitive data  is encrypted to generate encrypted data  using one of the embodiments of the present invention as discussed subsequently with reference to plaintext data . Recall that a number of different versions of sensitive data , such as versions of a sensitive routine that are not functional and act as decoys to unauthorized access, may be stored with application . In this case, application  also selects and submits an encrypted routine from one or more encrypted routines (encrypted data ) associated with the desired sensitive routine.","In addition to encrypted data , application , in one embodiment, submits command and control information (command information ) to peripheral device . Command information  can include authentication information, index values used to determine properties of an encryption method, one or more memory address references (memory location ), a value referencing a decryption method to use, key  and\/or key , etc. Command information , in one embodiment, also includes one or more decryption codes  and\/or encryption codes , such as an encryption method in binary code form. Peripheral device , in one embodiment, uses a decryption method or algorithm (such as decryption code  provided with command information ) to decrypt encrypted data  to generate a plaintext version (plaintext data ) of sensitive data  in step . Although the decryption routine used by peripheral device , in one embodiment, is provided by application , in other embodiments, peripheral device  utilizes a decryption method provided otherwise, such as a decryption method hard-coded into the circuitry of a component of peripheral device . For example, in one embodiment, peripheral device  uses a pre-defined encode\/decode method (encoding\/decoding method ), such as DCT\/IDCT or MPEG encoding\/decoding, normally used to encode and decode data sent between application  and peripheral device  to decrypt (or decode) encrypted data . A native command set associated with peripheral device  may be used for encoding and decoding. Encryption\/decryption algorithms (decryption code  and\/or encryption code ) used by peripheral device  can include, but are not limited to, pretty good privacy (PGP), data encryption standard (DES), Rivest-Shamir-Adleman (RSA), elliptic curve encryption, etc. In at least one embodiment, the encryption and\/or decryption routine includes an encryption algorithm based on an encryption\/decryption key (keys , ), herein referred to as a \u201ckey\u201d.","Plaintext data , in at least one embodiment, is a copy or version of sensitive data . For example, plaintext data  could be an exact replica of sensitive data , or plaintext data  could be a modified version in cases where one or more data structures associated with plaintext data  are modified. The term \u201cplaintext\u201d, as used herein, refers to the decrypted, or unencrypted, copy of an encrypted object. For example, if an original message was to be encrypted to generate an encrypted message which can be decrypted to generate a plaintext message, where the plaintext message, in general, is an exact replica or duplicate of the original image. Accordingly, unless otherwise noted, reference to plaintext data  also applies to sensitive data  and vice versa.","In step , peripheral device , in one embodiment, stores plaintext data  in system memory  in a location known to application . It will be appreciated that since a version of sensitive data  is stored as plaintext (plaintext data ) in system memory , it is generally desirable to prevent an unauthorized party from obtaining plaintext data  by obscuring its location in system memory . Accordingly, the location in system memory  can be indicated by memory location  (transmitted from application  as part of command information ) or predetermined using an algorithm known to application  and peripheral device , such as a seeded psuedo-random number generator, and the like.","In step , application  utilizes plaintext data  stored in system memory . For example, plaintext data  could include an encryption routine used to encrypt audio signals going from application  to a sound card (peripheral device ) in order to prevent a hacker from obtaining the audio signal data between application  and peripheral device . Likewise, in another example, sensitive data  could include a device ID used for authentication purposes. In this example, the device ID of peripheral device  could be stored in system memory  in an encrypted form (encrypted data ) and retrieved by application . Application  could submit the encrypted device ID to peripheral device  for decryption, as discussed previously in steps -. The plaintext version of the device ID (plaintext data ) could then be used by application  to authenticate peripheral device .","Alternately, in another embodiment, plaintext data  can be provided to another application (not shown) for its use. For example, plaintext data  could include a private encryption\/decryption key for use by another encryption\/decryption program that is better protected from unauthorized access than the application . In this case, sensitive data  could be stored with application  (in encrypted form as encrypted data ). When needed by the other application, the other application could contact application  and request sensitive data . Upon receiving the request, application  can submit encrypted data  to peripheral device  for decryption. After decrypting encrypted data  to generate plaintext data , peripheral device  or application  could provide plaintext data  to the other application for its use.","Plaintext data , in one embodiment, includes a data structure associated with it that would be necessary the next time plaintext data  is utilized by application . For example, plaintext data  could include a variable used to count the total number of bytes transmitted by peripheral device  to another device or system. In this case, the sum of the bytes should be retained for the next time plaintext data  is called. Accordingly, in at least one embodiment, plaintext data  is re-encrypted to generate modified encrypted data  in step , where modified encrypted data  is a similar, but not exact, version of encrypted data  as a result of the modified data structure associated with plaintext data . In one embodiment, plaintext data  is encrypted by peripheral device  using encryption code  provided by application . In another embodiment, peripheral device  encrypts (or encodes) plaintext data  by using a pre-determined encoding\/encryption algorithm (encode\/decode routine ) normally used to encode other types of data, such as a DCT transform or MPEG encoding. In at least one embodiment, more than one encryption iteration is performed on plaintext data . In this case, plaintext data  could be encrypted by one element of peripheral device , then the encrypted output of the one element could then be encrypted by another element of peripheral device . Note that in embodiments where plaintext data  is not altered or where no information associated with plaintext data  needs to be retained, step  may be omitted.","In step , modified encrypted data , in one embodiment, is stored with in system memory  for access by application . Modified encrypted data , in one embodiment, is transmitted directly from peripheral device  to the memory location of application . In another embodiment, modified encrypted data  is stored separately in system memory . In this case, modified encrypted data  should be stored in a location known to application  so that application  can access modified encrypted data  for subsequent use. Plaintext data , in one embodiment, is removed from system memory  and\/or peripheral device  in step  to prevent unauthorized access. Plaintext data  may be removed by overwriting plaintext data  in memory (system memory ) with other data, removing reference to plaintext data  from a memory manager associated with system memory , and the like.","Note that, in at least one embodiment, sensitive data , encrypted data , modified encrypted data , and plaintext data  are all versions of a same routine. For example, encrypted data  could include an encrypted version of an encryption routine, where the encryption routine is represented by sensitive data . As a result of decrypting encrypted data , plaintext data  may be generated, where plaintext data  is a similar or exact duplicate of sensitive data . In the event that plaintext data  is modified, such as by modifying a data structure associated with plaintext data , plaintext data  can be encrypted, thereby generating modified encrypted data . In this case, modified encrypted data  and encrypted data  are encrypted versions of two sets of data that are essentially similar, but where the property of one of the sets of data (plaintext data ) has been modified before being encrypted.","Multimedia systems, such as video display systems, are especially prone to unauthorized attempts at access of data and information processed by the systems. For example, hackers often attempt to produce unauthorized copies of a digital versatile disc (DVD) by using doctored or modified DVD players to capture data from the DVD in an encoded form. Accordingly, a specific implementation of tamper-resistant system  wherein sensitive data to be protected includes one or more sensitive routines is illustrated according to at least one embodiment of the present invention with reference to .","Video display system  (one embodiment of tamper-resistant system , ) includes video application , video processing system , bus , graphics chip , and display . Video application  can include video applications such as DVD player software, a digital television tuner, an application programming interface (API), video decoding software or hardware, and the like. Video processing system  (a particular implementation of system memory  and central processing unit  referenced in ) includes graphics driver  (one embodiment of application ), central processing unit , and system memory . Graphics driver , in one embodiment, includes a set of instructions or software stored in system memory  and executed on central processing unit (CPU) . Video processing system  can include various processing systems, such as a desktop computer, a DVD player, etc. Video processing system , in one embodiment, is connected to graphics chip  via bus . Bus  can include a bus, such as a peripheral component interconnect (PCI) bus or accelerated graphics port (AGP). Bus  can also include a serial connection, a parallel connection, a network, a universal serial bus (USB), FireWire, and the like.","Graphics chip  (a particular implementation of peripheral device  referenced in ) can include various graphics processing systems, such as a graphics chip, a graphics accelerator card, a video card, and the like. Graphics chip  includes video memory , graphics processor , dedicated hardware , three-dimensional (3-D) pipe , and\/or inverse discrete cosine transform (IDCT) module . The functions of elements of graphics chip  are discussed in greater detail with reference to video display method  (). Display  can include a variety of display devices, such as a television, liquid crystal display (LCD), a computer monitor, and the like.","Video display system , in one embodiment, processes video content (video data ) from video application  using video processing system  and\/or graphics chip  to generate display data  for display on display . In one embodiment, some or all of data sent between graphics driver  and graphics chip  is encrypted\/encoded to protect the video content represented. Accordingly, graphics chip  should decrypt the encrypted content before it is processed by respective components. Since the encryption and decryption routines used by graphics driver  and\/or graphics chip  to encrypt and decrypt the video content (video data ) could be used by an unauthorized party to gain access to the video content of the encrypted data sent between graphics driver  and graphics chip , in at least one embodiment, video tamper-resistant method  is utilized to protect the data.","Video tamper-resistant method  initiates in step , wherein video data  is transmitted from video application  to video processing system . In one embodiment, video application  can include an application programming interface (API) or a device driver interface (DDI), such as a DirectX Video Acceleration API\/DDI. In this case, video application  could transmit data from a software application (not shown) that interfaces with video application . For example, a software application that processes Motion Picture Experts Group (MPEG) files could interface with an API (video application ) to transmit video data  to video processing system . Video data  can include video content data in a \u201craw\u201d format, such as bit-map frame data, or in an encoded or processed form. For example, video data  can include transform coefficients generated by a forward discrete cosine transform (FDCT) and motion compensation vector information derived from captured video frame information.","In step , graphics driver  determines a sensitive routine  (one embodiment of sensitive data , ), wherein sensitive routine  includes a sensitive encryption routine to be used to encrypt video data . A variety of different encryption methods or algorithms can be used to encrypt video data , such as PGP or DES. As discussed previously, a number of different, but functionally equivalent, sensitive routines  may be used by or available to application . In this case, application  could select in step  the encryption routine (sensitive routine ) appropriate to the type of encryption desired, the size of the data to be encrypted, the capabilities of graphics chip , etc.","As discussed previously, in at least one embodiment, an encrypted version (encrypted routine ) of the encryption routine (sensitive routine ) is implemented by graphics driver  to protect against unauthorized access. In this case, encrypted routine  (one embodiment of encrypted data , ) can be decrypted in step  by graphics chip  to generate plaintext routine  (one embodiment of plaintext data, ) for use by graphics driver . Command information , as discussed previously, can be used in the decryption of encrypted routine . For example, command information  could include a memory address (memory location , ), an index value used to select an encryption method or key, and the like. As discussed previously, command information  can also include one or more decryption codes  and\/or encryption codes , where codes ,  are implementations of one or more encryption\/decryption methods executable by graphics chip , such as a DES algorithm implemented as binary code. In this case, graphics chip  could use decryption code  to decrypt encrypted routine  to generate plaintext routine . Recall that plaintext routine , in one embodiment, is stored in system memory  in a location known to graphics driver . Alternately, plaintext routine  can be stored in video memory , which can include RAM, flash memory, a frame buffer, a storage device, and the like.","The decryption of encrypted routine  to generate plaintext routine  in step  can be performed by a number of elements of graphics chip . In one embodiment, 3D pipe , conventionally used by graphics chip  to process 3D commands from graphics driver , also is used to decrypt encrypted routine . 3D pipe  often is capable of complex calculations, and therefore could perform complex encryption\/decryption routines. As discussed further with reference to , a map, such as a texture map, could be used for the generation of keys used in the encryption\/decryption routines. Similarly, in another embodiment, graphics processor  is used to decrypt encrypted routine . Graphics processor  is used by graphics chip  to render some or all of the data to be displayed on display . Accordingly, like 3D pipe , graphics processor  is often capable of complex calculations, allowing for complex encryption\/decryption methods.","IDCT component , in one embodiment, is used to decrypt encrypted routine . IDCT component  can be used to perform an inverse discrete cosine transform on data that has previously undergone a discrete cosine transform (DCT). In this case, encrypted routine  could have been previously encrypted using a DCT, and subsequently decrypted by passing encrypted routine  through IDCT component . However, in some implementations, additional processing effort and storage may be needed to decrypt encrypted routine than with other methods. For example, a DCT component (not shown) may only accept 9-bit values and output 12-bit values, whereas IDCT component  may accept 12-bit values and output 9-bit values. In this case, the byte values of sensitive routine  submitted to the DCT component should be shifted to ensure that the least significant bit is not used. As a result, the output (encrypted routine ) could require more storage space, because each byte then would have 12 bits, rather than 8. To decrypt encrypted routine , IDCT component  would need to shift back the results to generate plaintext routine . However, there may be no guarantee that the least significant bits are accurately recovered, thereby possibly affecting the subsequent execution of plaintext routine .","As discussed previously, in at least one embodiment, a pre-defined decoding algorithm, such as a native command set, normally used by a component of graphics chip  to encode other types of data may be used to decode\/decrypt encrypted routine  to generate plaintext routine . For example, 3-D pipe  could implement an encoding\/decoding algorithm (encode\/decode routine , ), such as MPEG, to decode encoded data received from graphics driver . In this case, 3-D pipe  could use this encoding\/decoding algorithm to decode encrypted routine , as well as encode plaintext routine  to generate modified encrypted routine .","Instead of using a component of graphics chip  that is also used for actual graphics processing, in one embodiment, dedicated hardware  is used for encryption and\/or decryption. Dedicated hardware  can include hardware dedicated to encryption\/decryption processes, such as a programmable logic array chip, combinational logic, embedded circuitry, a state machine, and the like. It will be appreciated that by using dedicated hardware , it should make it more difficult for an unauthorized party to reverse engineer the encryption and\/or decryption routines since the exact functioning of dedicated hardware  may not be known to the unauthorized party, unlike the functioning of other standard elements of graphics chip . In one embodiment, combinations of components -, in series, are used for sequentially decoding encrypted routine . For example, encrypted routine  may be sent to IDCT component  to be decoded into a second encrypted routine. The second encrypted routine is in turn decoded by 3D-pipe  into plaintext routine .","In step , plaintext routine  is used to encrypt video data , generating encrypted data . Encrypted data  is then transmitted via bus  to graphic chip . Since encrypted data  has been transmitted using plaintext routine , unauthorized parties should find it difficult, or impossible, to decrypt encrypted data  to obtain the video content (video data ) without knowing the encryption method and\/or key (key , ) used. Recall that, in one embodiment, plaintext routine  can be provided to another software driver for its use, such as encrypting video data. In step , graphics chip  decrypts encrypted data . In at least one embodiment, a decryption method or routine compatible with the encryption routine used in step  is used to decrypt encrypted data . In step , the results of the decryption of encrypted data  are processed further by graphics chip  to generate display data . For example, display  could include a video graphics array (VGA) monitor. In this case, graphics chip  could render the results of the decryption of decrypted data  and convert the rendered data from a digital format to an analog format compatible with display  to generate display data . In step , display data  is displayed on display .","Previous, during, or subsequent to steps -, the security risk posed by having an unencrypted version of sensitive routine  should be minimized or eliminated. Accordingly, in step , plaintext routine , in one embodiment, is encrypted (or re-encrypted) by graphics chip  to generate modified encrypted routine  (one embodiment of modified encrypted data , ). Plaintext routine  can be encrypted using the same component of graphics chip  that decrypted encrypted routine  in step . For example, if dedicated hardware  decrypted encrypted routine  to generate plaintext routine  in step , dedicated hardware  can re-encrypt plaintext routine  in step .","Note that, in one embodiment, decryption code  (provided as part of command information ) is used by graphics chip  to decrypt encrypted routine , regardless of the actual component (such as 3D pipe ) used for decryption. Similarly, plaintext routine  can be encrypted by graphics chip  using encryption code , regardless of the actual component used for encryption. Note that encryption and decryption can be implemented using different components of graphics chip . In addition, different encryption methods can be used to encrypt plaintext routine  than the encryption method used to encrypt encrypted routine . Recall that one or more data structures associated with plaintext routine  can be encrypted with plaintext routine  in step  should the data structures be needed during subsequent uses of plaintext routine  (as a version of sensitive routine ). Note that a different encryption method may be used to encrypt plaintext routine  in step  than the decryption method used in step . In at least one embodiment, a plurality of components of graphics chip  is used to sequentially encrypt plaintext routine . For example, plaintext routine  could be encrypted by 3D pipe  using a first encryption algorithm to produce a first encrypted version of plaintext routine . The first encrypted version of plaintext routine  could then be encrypted again by graphics processor  to generate modified encrypted routine . Encryption methods are discussed in greater detail with reference to .","In step , modified encrypted routine  is stored for later access by graphics driver . Modified encrypted routine , in one embodiment, is transmitted by graphics chip  to video processing system  via bus  and stored in system memory . Modified encrypted routine  can be stored together, or as part of, graphics driver , as a separate set of instructions, and the like. In step , plaintext routine  is removed from video display system . Plaintext routine  may be removed by overwriting the data in system memory  representative of plaintext routine , by destroying the file structure of plaintext routine  in system memory , etc. As a result of steps -, the plaintext version (plaintext routine ) of the encryption routine (sensitive routine ) used temporarily in step  to encrypt video data is re-encrypted and removed from video display system , thereby preventing unauthorized parties from obtaining a version of the encryption routine and using it to obtain video data  and\/or a decrypted version of encrypted data .","Although one embodiment of method  wherein a sensitive routine  is decrypted an used by video display system  has been discussed herein, in at least one embodiment, method  is applied to other types of sensitive data. For example, in one embodiment, sensitive data  () could include an authentication value, such as a chip ID, or an encryption\/decryption key. In this case, an encrypted version of sensitive data  could be submitted to graphics chip  for decryption. The decrypted version of sensitive data  could then be used to authenticate driver  to graphics chip , or vice versa.","Referring now to , encryption\/decryption system  to encrypt data and\/or sensitive data is illustrated according to at least one embodiment of the present invention. As discussed previously, any appropriate encryption method may be used to encrypt\/decrypt sensitive data , encrypted data , and\/or plaintext data  (). Many of these encryption\/decryption methods use encryption\/decryption keys (key ) in the process of encryption and\/or decryption. Accordingly, in at least one embodiment, key generator  is used by one or more components of graphics chip  () or peripheral device  () to generate key . Key generator  can be implemented as a set of executable instructions, combinational logic, a state machine, embedded circuitry, and the like.","In one embodiment, index  is supplied to key generator  to generate key . Index  can originate from video processing system  () as part of graphics commands  () or otherwise, or from a component of graphics chip , such as 3D pipe  (). Index  can be used as an index for a lookup table, where the value referenced in the lookup table is output by key generator  as key . Alternately, index  could be modified, such as by adding values, shifting values left or right, applying a logical operator, etc. Index  could also be output without modification by key generator .","In another embodiment, random value  is supplied to key generator  to generate key . Random value  can be generated using a random-number (or psuedo-random number) generator located on either video processing system  or graphics chip  (). Random value  can be used by key generator  as an index for a lookup table, modified by key generator , output by key generator  without modification, and the like.","It will be appreciated that, in general, the more complex (i.e. random and\/or long) key  used in an encryption method is, the more difficult it is for an unauthorized party to break the encryption method. For example, a 128-bit encryption methods are often much more difficult than 56-bit encryption methods to crack using brute-force methods. Accordingly, in one embodiment, map  is submitted to key generator  to generate key . Map  can include a matrix of values having multiple dimensions. In one embodiment, map  could include a two-dimensional texture map, as illustrated. Key generator  could use the entire texture map (map ) to generate key . Alternately, key generator  could select one or more portions of map  to generate key . For example, key generator  could randomly select one or more matrix elements  and use their associated values as part of key , as illustrated by key primitive . Alternately, key generator  could used a predefined sequence, defined either by graphics driver  or an element of graphics chip  (), to select matrix elements  for use in generation of key , such as key primitives , .","Key generator  may use one or more of key primitives - to generate key  by using the key primitive as an index value for a lookup table, by applying a modification method, or by outputting the one or more key primitives unmodified as key . Since map  could include a relatively large number of matrix elements  and since the method used to select a portion or all of map  can be chosen to generate key  can be obscured, it should prove difficult, if not impossible, for an unauthorized party to determine the key (key ) used by encryption\/decryption method . Note that in at least one embodiment, multiple instances of map are stored and\/or used by key generator  to further increase the robustness of key generation.","After key generator  generates key , key  is submitted to either encryption machine  or decryption machine  depending on whether key  is to be used for encryption or decryption. Encryption machine  and\/or decryption machine , in one embodiment, are implemented in the hardware of one or more elements of graphics chip , such as 3D pipe , as discussed previously with reference to . If a plaintext data  is to be encrypted (as discussed with reference to step  of  or step  of ), plaintext data  and key  are submitted to encryption machine . Using key , encryption machine  applies one or more encryption methods, such as RSA or DES, to plaintext data  to generate modified encrypted data . If encryption code  is to be used, encryption code  is also submitted to encryption machine  for use in encrypting plaintext data .","Alternately, if encrypted data  is to be decrypted (as discussed with reference to step  of  or step  of ), encrypted data  and key  are submitted to decryption machine . Additionally, decryption code , if used, can be submitted to decryption machine . Decryption machine  can use key  to decrypt encrypted data  (using decryption code , for example) to generate plaintext data . In at least one embodiment, different encryption methods may be used for different instances of encryption or decryption of plaintext data  and\/or encrypted data . Note, however, that for many encryption\/decryption methods, the decryption method and\/or key (key ) are based on the key (key ) and\/or method used to encrypt. Note that in other embodiments, encryption methods that do not implement encryption\/decryption keys are used to encrypt plaintext data  and\/or decrypt encrypted data  as appropriate. Recall that, in at least one embodiment, the encryption routine used by encryption machine  includes a predefined encoding method normally utilized by a component of graphics chip  () (or peripheral device , ) to encode other types of data, such as video data. Likewise, the decryption routine used by decryption machine  includes a pre-defined decoding method normally used to decode other types of data. Also recall that, in at least one embodiment, a number of encryption\/decryption iterations can be performed by different components (or the same component using different encryption\/decryption routines) on data to be encrypted or decrypted.","The various functions and components in the present application may be implemented using an information handling machine such as a data processor, or a plurality of processing devices. Such a data processor may be a microprocessor, microcontroller, microcomputer, digital signal processor, state machine, logic circuitry, and\/or any device that manipulates digital information based on operational instruction, or in a predefined manner. Generally, the various functions, and systems represented by block diagrams are readily implemented by one of ordinary skill in the art using one or more of the implementation techniques listed herein. When a data processor for issuing instructions is used, the instruction may be stored in memory. Such a memory may be a single memory device or a plurality of memory devices. Such a memory device may be read-only memory device, random access memory device, magnetic tape memory, floppy disk memory, hard drive memory, external tape, and\/or any device that stores digital information. Note that when the data processor implements one or more of its functions via a state machine or logic circuitry, the memory storing the corresponding instructions may be embedded within the circuitry that includes a state machine and\/or logic circuitry, or it may be unnecessary because the function is performed using combinational logic. Such an information handling machine may be a system, or part of a system, such as a computer, a personal digital assistant (PDA), a hand held computing device, a cable set-top box, a game console, an Internet capable device, such as a cellular phone, and the like.","One of the implementations of the invention is as sets of computer readable instructions resident in the random access memory of one or more processing systems configured generally as described in . Until required by the processing system, the set of instructions may be stored in another computer readable memory, for example, in a hard disk drive or in a removable memory such as an optical disc for eventual use in a CD drive or DVD drive or a floppy disk for eventual use in a floppy disk drive. Further, the set of instructions can be stored in the memory of another image processing system and transmitted over a local area network or a wide area network, such as the Internet, where the transmitted signal could be a signal propagated through a medium such as an ISDN line, or the signal may be propagated through an air medium and received by a local satellite to be transferred to the processing system. Such a signal may be a composite signal comprising a carrier signal, and contained within the carrier signal is the desired information containing at least one computer program instruction implementing the invention, and may be downloaded as such when desired by the user. One skilled in the art would appreciate that the physical storage and\/or transfer of the sets of instructions physically changes the medium upon which it is stored electrically, magnetically, or chemically so that the medium carries computer readable information. The preceding detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","In the preceding detailed description of the figures, reference has been made to the accompanying drawings which form a part thereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that logical, mechanical, chemical and electrical changes may be made without departing from the spirit or scope of the invention. To avoid detail not necessary to enable those skilled in the art to practice the invention, the description may omit certain information known to those skilled in the art. Furthermore, many other varied embodiments that incorporate the teachings of the invention may be easily constructed by those skilled in the art. Accordingly, the present invention is not intended to be limited to the specific form set forth herein, but on the contrary, it is intended to cover such alternatives, modifications, and equivalents, as can be reasonably included within the spirit and scope of the invention. The preceding detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various objects, advantages, features and characteristics of the present invention, as well as methods, operation and functions of related elements of structure, and the combination of parts and economies of manufacture, will become apparent upon consideration of the following description and claims with reference to the accompanying drawings, all of which form a part of this specification.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
