---
title: Method and computer program product for realizing a system specification which is described in a system description language
abstract: A system design support system is disclosed, which handles specifications at system level, e.g., a specification of software executed by a computer, specification of hardware implemented by combining semiconductor devices and the like, a specification of an incorporated system implemented by combining software and hardware, and a specification of a business process such as a workflow. This apparatus searches for an advertisement in accordance with an query specification. The apparatus also creates a communication procedure between the query specification and a specification of an advertisement part obtained by a search.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06980941&OS=06980941&RS=06980941
owner: Kabushiki Kaisha Toshiba
number: 06980941
owner_city: Tokyo
owner_country: JP
publication_date: 20020131
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is based upon and claims the benefit of priority from the prior Japanese Patent Application No. 2001-024889, filed Jan. 31, 2001, the entire contents of which are incorporated herein by reference.","1. Field of the Invention","The present invention relates to design support for hardware such as a computer and electronic device, software, and a system including a combination of hardware and software.","2. Description of the Related Art","Recently, a system specification description language for describing a specification at system level without discrimination between hardware and software has been developed. With this development of the language, an environment for consistent specification description from a specification at system level to specified software or hardware specifications based on the same specification format has been improving. A rapid prototyping tool (Rapid or BetterState) is known, which provides a design environment in an upstream stage of system design while checking a system specification. See \u201cRapid-plus, White Paper\u201d, http:\/\/www.e-sim.com\/pdf\/whtpaper.pdf as a reference for Rapid.","A characteristic feature of such a rapid prototyping tool is that system analysis and design can be seamlessly and quickly performed by using hierarchical state transition diagrams. From the viewpoint of specification design at system level at which a specification implementation method is not clear, this tool has a merit of allowing efficient design by hierarchically combining interrupt execution, sequential execution, and parallel execution.","In order to efficiently perform system design in an upstream stage of design, i.e., a stage where no architecture is determined, a technique of forming a specification at system level into parts and reusing them is indispensable. With a system specification language, the contents (operation) of a system can be described according to a formal specification description rule instead of a natural language. However, no mechanism has been provided, which searches the contents of a specification part on the basis of a specification description at system level so as to reuse it.","The techniques of forming software into parts in the conventional software engineering provide parts designed in detail, i.e., so-called parts at implementation level, and provide users with API (Application Programming Interface) function specifications of parts. The techniques of part formation in consideration of reuse can be used for only predetermined architectures. For example, JavaBeans in a program described in the Java language defines a specification for part formation in a Java execution environment, and hence parts can be reused only within the range of this defined part formation specification. See \u201cJava programming JavaBeans\u2014component framework\u201d, Science, (Dec. 1, 1997), ISBN: 4781908624 as a reference for JavaBeans.","According to such conventional techniques associated with formation of software parts, descriptions and classification indexes (indexes) of parts are provided in advance in a natural language, and part search and reuse are realized by searching for parts. However, these technique are not configured to realize part search and reuse in consideration of the contents of software other than those in a natural language.","Demands have arisen for a mechanism for forming a specification at system level, which is created in a system specification description language in the above manner, into parts and reusing them.","It is an object of the present invention to provide a mechanism for forming a specification created in a system specification description language into parts in advance, searching for appropriate parts in a system-level design stage before detailed design, and effectively reusing the parts upon incorporating them into a specification.","According to one aspect of the present invention, there is provided a method for realizing a system specification which is described in a system description language and of which an execution order constraint is defined, by using a plurality of system specification components, the method comprising: retrieving a first system specification component which meets a part of the system specification from the plurality of system specification components; generating another part of the system specification in consideration of the retrieved first system specification component; retrieving a second system specification component which meets the another part of the system specification from the plurality of system specification components; integrating the first system specification component and the second system specification component so that the execution order constraint defined in the system specification is satisfied; and replacing the first system specification component and the second system specification component with the system specification.","An embodiment of the present invention will be described below with reference to the views of the accompanying drawing.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},"A system design support apparatus  shown in  is comprised of a specification model description section , system specification recording section , architecture search section , communication synthesizing section , hardware specification creation section , part formation\/reuse section , and software specification creation section .","The system design support apparatus  of this embodiment handles at system level, e.g., a specification for software executed by a computer, a specification for hardware combined with semiconductor devices and the like, a specification for an incorporated system constituted by a combination of software and hardware, and a specification for a business process such as a work flow.","The specification model description section , which is used to design a specification model comprised of specifications for calculation and communication in such specifications at system level, is a section for supporting a designer to describe specifications. When the designer describes specifications for calculation contents and communication contents according to a predetermined specification description form, a specification description model is created. This specification description model includes a specification structure to be described later. Examples of the specification description form are a structured text form represented by a structured programming language, a structural chart form using graphs, and a table form using tables.","The architecture search section  divides a partial structure of a supplied specification description model into elements and distributing the elements to architecture elements while maintaining the contents of the specification in consideration of an architecture (the arrangement of a hardware\/software implementation environment). More specifically, parts (the constituent elements of a specification description model) constituting specifications for calculation contents and communication contents designed by the specification model description section  are assigned to architecture elements (creation of an architecture model).","The communication synthesizing section  synthesizes communication procedures between specification elements on an architecture. More specifically, the communication synthesizing section  inserts a communication procedure (protocol) between communication specification elements distributed by the architecture search section  and performs protocol conversion (rearrangement of a communication procedure) to match with a communication procedure in which the communication content specification is inserted (creation of a communication model).","The system specification recording section  associates the specification model created by the specification model description section , the architecture model created by the architecture search section , and the communication model created by the communication synthesizing section  with each other, and records the resultant data as a system specification.","The hardware specification creation section  creates a hardware specification from the system specification recorded on the system specification recording section . The software specification creation section  creates a software specification from the system specification recorded on the system specification recording section .","The part formation\/reuse section  forms the system specification recorded on the system specification recording section  into parts and provides them for reuse in design processes in the specification model description section , architecture search section , and communication synthesizing section .","The system design support apparatus  of this embodiment includes at least description elements for describing \u201csequential execution\u201d, \u201crepetitive execution\u201d, \u201cinterrupt end\u201d, \u201cinterrupt pause\u201d, and \u201cparallel execution\u201d, and can describe an overall system specification by hierarchically combining these description elements.","System specification description schemes include StateChart for graphically describing specifications, SpecC (Specification description language based on C) language that expresses specifications in characters as a structural language, and the like. SpecC is described in detail in, for example, Daniel D. Gajski, \u201cSpecC: Specification Language and Methodology\u201d, Kluwer Academic Publishers, Dordrecht, ISBNO-7923-7822-9.","In this embodiment, a system specification description scheme will be described below with reference to a description form based on the SpecC language. However, the present invention is not limited to the SpecC language.","<Structure of Specification>","In this embodiment, a specification is comprised of a plurality of basic units called \u201cbehaviors\u201d. A behavior can have a hierarchical structure. That is, one behavior can have a plurality of other behaviors as lower-level behaviors. A behavior corresponds to a function or class in a software specification; an LSI block in a hardware specification; and a job or task in a business process specification.","\u201cStructure of specification\u201d defines the structure of a specification constituted by behaviors, and is comprised of a hierarchical structure associated with the execution order of behaviors and a hierarchical structure associated with data communication paths between the behaviors. The structure associated with the execution order and the structure associated with the communication paths have the same structure from the hierarchical viewpoint. More specifically, if behavior A is hierarchically higher than behavior B in terms of execution order, behavior A is also hierarchically higher than behavior B in terms of communication paths.","Depending on the structure of a specification, a specification dividing method for an architecture can also be defined. For example, with regard to an incorporated system, the manner in which a specification is divided into portions corresponding to hardware and software is structured and described as a specification.","<Format of Specification>","Of the specification of a specification, a structure associated with an execution order is expressed as a hierarchical structure using at least four classifications of syntactic elements, namely \u201csequential execution and repetitive execution\u201d (fsm), \u201cparallel execution\u201d (par), \u201csynchronous execution\u201d (fork, join, start, end), and \u201cinterrupt execution\u201d (try, trap, itrp). Note that fsm is an abbreviation for finite state machine.","For example,\n\n","The hierarchical specification, fsm{a, par{b, c}, d}, expresses a specification stating that\n\n","In addition, try{a} trap(e){b} as a specification associated with \u201cinterrupt execution\u201d expresses a specification stating that\n\n","\u201cSequential execution and repetitive execution\u201d, \u201cparallel execution\u201d, \u201csynchronous execution\u201d, and \u201cinterrupt execution\u201d are necessary minimum elements as means for execution control method definition which are used to describe software, hardware, and business process specifications. A so-called system specification is described by hierarchically combining these elements.","A structure associated with communication paths defines the exchange of data between behaviors. Assume that communication paths are expressed by parts called variables and channels. Variables and channels are defined as parts immediately subordinate to higher-level behaviors in a hierarchical relationship in a specification, and the higher-level behaviors are connected to lower-level behaviors through connection ports called ports, thereby allowing the lower-level behaviors to communicate with each other through communication path.","A communication path corresponds to a variable or a function for communication in a software specification and to an interconnection for connecting LSIs in a hardware specification. A port is an input\/output port for communication, which corresponds to an argument in a software specification and to a terminal for connecting parts through an interconnection in a hardware specification. A channel is a part for receiving a command specially prepared to transmit\/receive data. For example, commands such as \u201cput (data)\u201d and \u201cget( )\u201d are conceivable. A variable can be regarded as a kind of channel having a write \u201cwrite(data)\u201d command and read \u201cread( )\u201d command.","Simple syntactic elements and rules of the SpecC language will be described below.\n\n","In the behavior description sample {i, j, k, fsm{A(i), B(i, j), C(k)}, , , and  are local variables, and A, B, and C are lower-level behaviors, each having a port, which is connected to a local variable.\n\n","This processing content sample indicates that A, B, and C are concurrently executed.\n\n","In this case, each element of fsm is formed by any one of","{label, processing content, {condition: transition upon establishment of condition}, . . . },","{label, processing content, transition upon completion of processing, . . . },","{label, processing content} and","processing content","These elements are sequentially executed from the left unless otherwise specified. If there is no transition label item, {label, processing content} executes the next fsm element upon completion of the processing content. Assume that label=1 or the leftmost fsm element is executed first. A transition is expressed by \u201cgoto(x): X is label number\u201d. For example, goto(1) indicates that the flow returns to the first fsm element.","The above case indicates the following operation. When A is executed and completed, B is executed. When B is completed, A is executed if the value of the variable flg is 3, and B is executed if the value is 1.","As in the following example, an element without any label can be regarded as a simplified form of given execution control using a label.","fsm{A, B, C}=fsm{{1, A, goto(2)}, {2, B, goto(3)}, {3, C, . . . }, . . . }\u2022","try{A}trap(ev1) {B}itrp (ev2) {C} . . .","In the case of this language element, A is executed first. If event ev occurs during execution of A, A is forcibly ended, and B is executed. If event ev2 occurs during execution of A, A is paused, and C is executed. When C is completed, A is resumed.","Note that each of trap(e){X} and itrp(e2){Y} may be more than one.\n\n","This is synchronous processing which waits for the occurrence of event ev.\n\n","This is synchronous processing that causes event ev.\n\n","This is a substitution of a value into variable flg.\n\n","This is condition determination.\n\n","This is synchronous processing I; start and fork are synchronous executed.\n\n","This is synchronous processing II; end and join are synchronous executed.","The following is a specification sample conforming to the format enumerated above and having a hierarchical structure:","(Example: ex0)","A:={i, par{B(i), g(i)}}","B(i):={j, k, fsm{a(j), b(k, i), C(k)}>}","C(k):={par{d, e, f(k)}}","This expresses the following specification:","\u201cBehavior A is constituted by sub-behaviors B, C, , , , , and , and behavior A is constituted by lower levels B and . B and g are concurrently executed. B, which is hierarchically lower than A, is constituted by lower-level elements , , and C, which are sequentially executed. C, which is hierarchically lower than B, is constituted by lower-level elements , , and , which are concurrently executed. A has communication path , and port  of B and is connected to port  of  through . B has communication paths  and , port  of lower-level element  is connected to communication path . Port  of  is connected to communication path , port  of  is connected to port  of B, port  of C is connected to communication path , and port  of C is connected to port  of . That is, a behavior  and behaviors ,  and  are connected through communication lines, respectively, to exchange data across hierarchical levels.\u201d","For the sake of descriptive convenience, consider a case where communication paths and a hierarchical relationship are simplified in consideration of the execution order. When, for example, the above specification example (ex0) is simplified in consideration of the execution order, a specification can be described as follows:","A:=par{fsm{a, b, par{d, e, f}}, g}","For the sake of descriptive convenience, consider a case where the execution order is simplified in consideration of communication paths and a connection relationship. When the above specification example (ex0) is simplified in consideration of the communication paths and connection relationship, a specification can be described as follows:","A:={i, bh{B(i), g(i)}}","B(k):={i, j, bh{a, (i), b(i, j), C(j)}>}","C(j):={bh{d, e, f(j)}}","Pairs of fork(x) and start(x), and end(x) and join(x) represent a synchronization constraint and define that these elements are always executed in pairs (in this case,  represents an id number, and a pair having identical id numbers are synchronously executed)","For example, the following specification:","par{fsm{1, fork(2), join(2), 3},","fsm{start(2), 2, end(2), 4}}","hierarchically indicates that sequential executions (fsm) 1 to 3 and 2 to 4 are concurrently executed (par). Obviously, however, sequential execution 2 is executed between sequential executions 1 and 3 according to the synchronous relationship between for, join, start, and end.","With regard to the structure of communication paths, the above specification example (ex0) indicates that  and  can exchange data with each other through communication path  of B, and , , and  can exchange data with each other through communication path  of A.",{"@attributes":{"id":"p-0086","num":"0107"},"figref":"FIG. 2"},"A specification replacement section  according to this embodiment collates a query specification  described in the system specification description form with a part advertisement  stored in a part database (DB) , creates a new query on the basis of the collation result, and makes a search. In addition, the specification replacement section  performs communication synthesis to synthesize a communication procedure  that satisfies an execution order constraint, and incorporates it in the query specification , thereby obtaining an integrated specification. This makes it possible to reuse specification parts.",{"@attributes":{"id":"p-0088","num":"0109"},"figref":["FIG. 3","FIG. 4"]},"As shown in , the specification replacement section  of this embodiment includes a search section , collation section , query creation section , communication synthesizing section , and incorporating section .","The search section  searches the part database  for a system specification description satisfying a received query (step S). Collation is performed on the basis of the search result (step S). If part of the query is satisfied, the corresponding portion is subtracted from the original query to create a new query (step S). The search section  further makes a search, and performs control to sequentially repeat search, collation, and query creation until the initial query specification is finally satisfied (until YES is obtained in step S).","Upon reception of system specification A and system specification B, the collation section  calculates whether one specification satisfies the other specification (step S). When specification A and specification B are received, and specification B satisfies part of specification A, the query creation section  creates new specification A\u2032 by removing a portion corresponding to specification B from specification A (step S). If there is a combination of more than one system specification part which satisfies a query, the communication synthesizing section  creates a communication procedure for linking these parts to the original query. In this embodiment, this operation will be called \u201ccommunication synthesis\u201d (step S).","The incorporating section  performs communication synthesis (step S), and then synthesizes the specification parts obtained by searches with the communication procedure created by the communication synthesizing section , thereby performing replacement in the original query specification (step S).","The specification replacement section  also has a portion for recording\/holding \u201cquery\u201d  of a system-level specification based on the existing specification (system specification recording section ) shown in  and a portion for recording\/holding \u201cadvertisement\u201d  of a part at system level, which is provided from the database , (its description) on a part basis.","<System Specification>","In this specification, a \u201c(system) specification\u201d indicates a specification description for determining the operation of the system at an upstream stage of design at which no implementation method is determined. Assume that the parts of an existing design product are recorded\/held, together with a specification at a system design stage corresponding to the parts, and system design is performed while parts are searched out by using them and incorporated in a query specification.","<Extraction of Execution Order from Specification in SpecC Language>","If a specification is structurally described according to the SpecC language, a calculation can be made from information included in the specification to check whether two arbitrary specifications are equivalent according to a criterion. Various criteria are conceivable depending on applications. For example, whether to satisfy an execution order constraint on the tasks included in a specification can be presented as a criterion.","In the SpecC language, a clear order constraint on an execution order is defined as language semantics. On the basis of the language semantics, a graph can be extracted, which expresses an execution order constraint task of an overall specification as a node and an order constraint as an edge. This graph will be called an ETG (Extended Task Graph).","According to an ETG, in addition to an edge associated with an order constraint, a special edge (fork\/join) associated with parallel operations is prepared to express parallel operations. Parallel operations according to an ETG indicate that specifications are not described as those that should concurrently move, but it does not matter which moves first.","An ETG can be uniquely extracted from a specification described in the SpecC language. Since parallel operations (par) mean that \u201cit does not matter which moves first\u201d, a constraint associated with fork\/join does not define an execution order. In consideration of this, in this embodiment, an execution order constraint is expressed by using a pseudo-order relationship \u201c<\u201d (a<b:  is executed after ).  shows the relationship between the system specification description described in the SpecC language, the ETG description, and the execution order constraint.","<Sufficiency Relationship on Execution Order>","In general, in engineering design, as the design process proceeds, the specification is detailed. With regard to specifications described as parallel operations in design at system level, the parallel operations are scheduled in detailed design to perform detailing such that the operations are sequentially executed in the optimal sequence for implementation. Assume that there are specification A described as parallel operation at system level, and specification B as sequential operation. This specification B is a strong constraint relative to specification A in terms of execution order. This state is defined as \u201cspecification B satisfies specification A\u201d. That is, \u201cspecification B satisfies specification A\u201d is defined as \u201can execution order constraint on all the tasks included in specification A is also included in the execution order in specification B\u201d.","If, for example, an execution order constraint is described with a pseudo-relationship \u201c<\u201d,","with respect to","specification A=par{a, fsm{b, c}}","specification B=fsm{a, b, c}","an execution order constraint on specification A is","Aseiyaku=\u201cb<c\u201d","An execution order constraint on specification A is","Bseiyaku=\u201ca<b, b<c\u201d","In this case, since \u201ca<b, b<c\u201d includes \u201cb<c\u201d, specification B satisfies specification A.","Likewise, fsm{b, a, c} and fsm{b, c, a} also satisfies specification A.","<Partial sufficiency>","\u201cA partial set of execution order constraints on tasks contained in specification A is contained in an execution order in specification B\u201d is defined as \u201cspecification B partially satisfies specification A\u201d. For example, with respect to","specification A=par{a, fsm{b, c}}","specification B=fsm{a, c} partially satisfies specification A.","<\u201cAdvertisement\u201d and \u201cGuery\u201d>","A system specification description based on the SpecC language is used for a search as well as a description of the contents of specification parts. With respect to a past design accomplishment having undergone detailed design, a system-level specification is recorded\/held as a database (parts). A specification as a search index (index) for each part in this database will be called \u201cadvertisement\u201d. An advertisement recording section records\/holds the descriptions of \u201cadvertisement\u201d at system specification level on a part basis.","If a specification has been designed to a certain degree before detailed design in a design stage for a system specification, this specification under design is used as a search expression. A query recording section records\/holds \u201cquery\u201d at system specification level.","These \u201cquery\u201d and \u201cadvertisement\u201d are described on the basis of execution order constraints between tasks. Each task has an attribute associated with feasibility, and the presence\/absence of a means for realizing the task is recorded.","In this embodiment, a task with a realization means will be expressed as \u201ca\u201d, and a task without any realization means will be expressed as \u201ca\u201d with the symbol \u201c\u02dc\u201d being added. In the drawing, a task surrounded by a dashed line indicates a task without any realization means.","A typical description of \u201cquery\u201d is formed by a task without any realization means for all contained tasks, and a typical description of \u201cadvertisement\u201d is formed by a task with a realization means for all contained tasks. However, this does not apply to all cases. Such descriptions may include a description in which tasks are partly realized in a query and a description in which tasks are not partly realized in an advertisement.","<Collation>","If the collation section  receives specifications A and B and has specification C that partly satisfies both specifications A and B, the collation section  determines that specifications A and B are replaceable. In contrast to this, if there is not specification C that partly satisfies both specifications A and B, the collation section  determines that \u201cspecifications A and B are not replaceable\u201d.","If, for example,","specification A=fsm{par{e, b}, d}","specification B=fsm{b, par{d, e}}are provided, since specification C that satisfies both specifications A and B is present","specification C =fsm{b, e, d}","specifications A and B are replaceable.","As a method of calculating a specification that satisfies two specifications provided, for example, a method of calculating the sum of order constraints contained in the two specifications is available.","In the above case, for example,","the execution order constraint contained in specification A is","{e<d, b<d}","The execution order constraint contained in specification B is","{b<d, b<e}","The sum of these constraints is","{e<d, b<d, b<e}","In this case, according to the property of pseudo-order relationship <, since the following transitivity rule holds","\u201cif b<e and e<d, then b<d\u201d","{e<d, b<d, b<e} can be simplified into {b<e, e<d}.","If this is expressed in the SpecC description, then specification C=fsm{b, e, d}.","A case where when order constraints are summed, an inconsistency arises from the viewpoint of above constraints is a case where specifications are not replaceable. Although this embodiment has exemplified the case where a calculation is performed by using a set operation using order constraints, the present invention is not limited to this. For example, a similar calculation may be performed by using a graph theory.","<Subtraction of Execution Order Constraints>","Assume that the query creation section  receives specifications A and B, specification A contains unrealized task, and a query is to be created on the basis of specification A. In this case, the query creation section  removes realized tasks from specification B, and adds tasks that are not contained in specification A, contained in specification B, and not realized in specification B, thereby creating new query specification A\u2032.","Consider an example of the creation of such a query. If, for example, there is advertisement specification B","B=fsm{c, a}","with respect to the following query specification A","A=fsm{par{a, fsm{b, c}}, d}","then the query creation section  subtracts advertisement specification B from query specification A to create new query specification C","C=fsm{b, d}","Subtraction of a specification in creating a query can be realized by using a set operation for order constraints.","In the above example, execution order constraints can be expressed by pseudo-order relationship \u201c<\u201d as follows:","Aseiyaku={a<d, c<d, b<c}","Bseiyaku={c<a}","Since advertisement specification B contains tasks  and  with respect to tasks a and c tasks c and a are deleted from query specification A.","If \u201cc\u201d is subtracted from \u201cc<d, b<c\u201d with attention being given to retain an execution order in query specification A, \u201cb<d\u201d is obtained.","Finally, therefore, a constraint of specification C, i.e.,","Cseiyaku{b<d}","is obtained.","<Search Algorithm>","The search section  searches for a specification description that satisfies a provided query specification. If the search result satisfies part of the query specification, the query creation section  subtracts the corresponding portion from the original specification to create a new query. The search section  further makes a search, and performs control to sequentially repeat \u201csearch\u201d, \u201ccollation\u201d, and \u201cquery creation\u201d until the query is finally satisfied.","<Communication Synthesis>","If there is a combination of one or more system specification parts that satisfy \u201cquery\u201d, the communication synthesizing section  creates a communication procedure (protocol) required to combine these parts with the original query. More specifically, the communication synthesizing section  assembles a communication procedure on the basis of the part searches and collation calculation result log made by the search section  and collation section .","A communication procedure is assembled by using the above set operation for order constraints.","Assume that with respect to","A=fsm{par{a, fsm(b, c}}, d}","advertisement specification B","B=fsm{e, c, a} exists, and is searched out by the search section , the query creation section  subtracts advertisement specification B from query specification A to create","C=fsm{par{e, b}, d}","In this case, the communication synthesizing section  adds order constraints of two specifications A and B","Aseiyaku={a<d, c<d, b<c}","Bseiyaku={e<c, c<a}","with tasks \u201ca, c\u201d in specification A being replaced with \u201ca, c\u201d to obtain","{a<d, c<d, b<c, e<c, c<a}","Since the above element \u201cc<d\u201d can be calculated by the transitivity rule and is not necessary, this element is deleted to obtain","{a<d, b<c, c<a, e<c}","This order constraint corresponds to an execution order. That is, in order to realize query specification A, specification advertisement part B and part X that realizes , , and  that have not been searched out yet are prepared, and the following communication procedure is created: \u201cafter tasks b and  in part X are executed, tasks  and  in specification B are executed in the order of c<a, and task  in part X is finally executed\u201d. In this case, since part X has not been searched out yet, part X is searched out, and the communication synthesizing section  corrects the above communication procedure.","<Incorporation of Communication Procedure>","When a final search for a query is completed, the incorporating section  combines each part searched out by the search section  with the original query through the communication procedure created by the communication synthesizing section , and replaces the original query specification with the combined specification.","Note that the part database (DB)  may not always be able to provide all the specification parts that satisfies the query. In this case, an embodiment may be configured such that the specification exchange apparatus provides an environment for forming the specification part which is needed.","The needed specification part may be, for example, the specification part that satisfies newly generated query. The specification part also satisfies an execution order constraint defined in the newly generated query. Forming the specification part may be performed when it is determined that the specification part is actually needed as result of the query(retrieval) directed to the advertisements. Otherwise, the specification part may be formed out of relation to the query. That is, the specification part may initially be formed without the query.","An embodiment of reuse of specification parts based on a query will be described in detail below with reference to .","As shown in , assuming that","with respect to","query specification =fsm{par{a, fsm{b, c}}, d},","the following two parts are prepared as advertisements:","advertisement of part =fsm{e, c, a}","advertisement of part \u02dcfsm{b, par{d, e}}","The search section  searches the advertisement recording section for a specification satisfying query specification  (step S in ). The search section  then determines that the advertisement of part  is partly satisfied (step S).","In this case, as shown in , the query creation section  subtracts the advertisement of part  from query specification  to create the following new query specification  (step S).","query specification =fsm{par{e, b), d}",{"@attributes":{"id":"p-0167","num":"0188"},"figref":"FIG. 7","b":"2"},"At this time, the communication synthesizing section  obtains communication procedure ","communication procedure ={a<d, b<c, c<a, e<c}for incorporating part  in query specification  (step S).","When the search section  makes a search, the collation section  determines that the advertisement of part  satisfies query specification  (see the lower portion in ). As a result, all the tasks contained in query specification  are satisfied, and the search section  terminates the search (YES in step S).","The communication synthesizing section  updates communication procedure  and creates communication procedure , i.e.,","communication procedure ={b<e, e<c, c<a, a<d}for incorporating parts  and  in query specification  (step S) (see ). This communication procedure  is a communication procedure (protocol) for incorporating parts  and , i.e., \u201crealizing query  by preparing parts  and  and invoking the functions of parts  and  in the order of  of part ,  of part ,  of part ,  of part , and  of part \u201d. This communication procedure is implemented as the channels shown in . The channels are means for sequentially invoking the constituent elements of parts (parts for executing a protocol). Such channels may have a hierarchical structure. That is, a given channel may include a channel as its constituent element and may be reused as a part.","Finally, the incorporating section  replaces parts  and  with query specification  by using the channels of communication procedure  (step S). Reuse of parts is realized by the above procedure.","As has been described above, according to the specification replacement apparatus according to this embodiment, a specification created in the system specification description language is formed into parts in advance, and appropriate parts are searched out in a design stage at system level before detailed design and incorporated in the specification, thereby allowing reuse of the parts.","<Interrupt>","The above case has not exemplified a case where the structure of a specification includes a description (try\/trap\/intrp) associated with an interrupt. This is because a description associated with an interrupt is localized in advance, and the localized partial structure can be handled as an individual behavior to allow the description to have a hierarchical structure constituted by only par and fsm with an interrupt structure being omitted as a whole.","For example, the following behavior","try{fsm{a, b, c}}trap(e){fsm{d}}indicates a specification stating that \u201cIf event  occurs during sequential execution of , , and , the execution of , , and  are stopped, and d is executed. If  does not occur, the processing is ended when  is ended.\u201d By moving the try\/trap structure to a lower level, the structure can be converted into an equivalent specification structure as follows:","par{fsm{try{a}trap(e){flg=1, end(a)},\n\n","In this case, the original order constraint is maintained by a synchronous mechanism and the value of the flg flag.","In addition, try\/trap can be concealed from a structural viewpoint by creating a macro.","Each function described above can be implemented as software.","In addition, this embodiment can be practiced as a program for causing a computer to execute predetermined means (or causing the computer to function as predetermined means or to realize predetermined functions) or a computer-readable recording medium on which the program is recorded.","Additional advantages and modifications will readily occur to those skilled in the art. Therefore, the invention in its broader aspects is not limited to the specific details and representative embodiments shown and described herein. Accordingly, various modifications may be made without departing from the spirit or scope of the general inventive concept as defined by the appended claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
