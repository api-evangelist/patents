---
title: Centralized access and management for multiple, disparate data repositories
abstract: Systems and techniques to access data in a computer system provide centralized data storage management for facilitating access to a plurality of different data repositories. In general, in one implementation, the technique includes sending a data access request to a data storage manager and identifying at least one of a plurality of repositories for satisfying the data access request. The repositories may be of different types. In addition, data may be partitioned among the repositories according to data object types and/or attribute characteristics. Once an appropriate repository is identified, the data access request is fulfilled using the identified repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07599959&OS=07599959&RS=07599959
owner: SAP AG
number: 07599959
owner_city: Walldorf
owner_country: DE
publication_date: 20021202
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The following description relates to data management in a computer storage system, for example, centralized access to and management of multiple, disparate data repositories.","Computer systems in an enterprise environment typically represent a plurality of different applications, information, and services that may have varying degrees of interaction and integration. The various components generally use their own information bases, but there may be a significant degree of overlap of information and resources used by the different components. In such a case, a common storage medium can be used to store information that is shared among several applications.","For example, user-specific information may be used by multiple different applications. Such user-specific information may be stored in a single Lightweight Directory Access Protocol (LDAP) repository, which acts as a centralized directory for common information, much like a company-wide address book. The information in the common storage medium may then be accessed by a variety of different applications or platforms using a standard protocol. The use of a centralized directory simplifies maintenance, reduces inconsistency, and avoids redundancy.","The following description teaches systems and techniques for accessing data in a computer system using centralized data storage management of a plurality of data repositories. The present inventors recognized that conventional data storage techniques require that data reside within a single data repository to be accessible across multiple, disparate, yet interconnected systems or applications. Accordingly, the inventors developed data storage systems and techniques that allow different applications and\/or systems to access data distributed among multiple repositories through a centralized data storage manager. As a result, the multiple repositories may be of different types and\/or may allow data to be partitioned according to the type of data object with which the data is associated and\/or according to characteristics of an attribute that the data represents.","In one aspect, the techniques involve a method for accessing data in a computer system. A data access request is sent to a data storage manager. At least one repository from a plurality of repositories is identified for satisfying the data access request. Data is selectively partitioned among the repositories, and the plurality of repositories includes repositories of at least two different types that store information relating to data objects. The data access request is then fulfilled using the at least one identified repository.","In some embodiments, data relating to different data objects may be selectively partitioned among the repositories according to characteristics of the data objects. Attributes may also be associated with each data object, and data relating to different attributes may be selectively partitioned among the repositories according to characteristics of the attributes. The identifying of at least one repository may involve identifying a subset of the plurality of repositories based on information stored in the data storage manager and determining which of the subset of repositories store the requested data based on information stored in an adapter associated with each repository. Data defining the existence of different data objects may be stored in different repositories. Data relating to different attributes of the same data object may also be stored in different repositories. The data objects and attributes stored in the plurality of repositories may relate to user management data. The types of repositories may be differentiated based on differences in at least one of: protocols used to access data, the manner in which data is organized, and the technology upon which the repositories are based. The data access request may relate to creating a data object, writing data, reading data, or searching data.","In another aspect, the techniques involve a method for facilitating data storage across multiple repositories. A plurality of data objects are created. For each data object, a home repository of a plurality of repositories for indicating whether the data object exists is identified. The home repository is identified based on selected characteristics of the data object. Data relating to each data object is stored in the respective home repository, and a plurality of applications are enabled to access to the data stored in the plurality of repositories through a centralized data storage manager.","In some embodiments, the selected characteristics of each data object may comprise a set of attributes and the set of attributes may be stored in the respective home repository. An additional attribute, for a data object may also be defined, and a repository from the plurality of repositories for storing the additional attribute may be identified based on a type of information represented by the attribute. The plurality of repositories may include at least one database repository and at least one LDAP repository.","In yet another aspect, the techniques involve a method of facilitating data storage across multiple repositories. A plurality of data objects are created, with each data object having a plurality of associated attributes. A first subset of the attributes for each data object are stored in a first repository, and a second subset of the attributes for each data object are stored in a second repository. Access to the data stored in the first repository and the second repository by a plurality of applications is provided through a centralized data storage manager.","In some embodiments, the first repository may define whether a particular data object exists. The second subset of attributes for the particular data object may supplement information stored in the first subset of attributes for the particular data object. Access to the data stored in the first repository and the second repository may be provided such that the difference between the repositories are transparent to the plurality of applications.","In another aspect, a data storage system for a computer system includes a plurality of data repositories for storing data, a plurality of applications, and a data storage manager. Data is partitioned among the data repositories based on characteristics of the data. The data storage manager is operable to receive a data access request from one of the applications, to identify an appropriate data repository for fulfilling the data access request, and to access the requested data in accordance with the request.","In some embodiments, the plurality of data repositories may include at least two different types of data repositories. The plurality of repositories may store information relating to a plurality of data objects, and data may be partitioned among the repositories according to data object types and\/or attribute types. The system may include at least one application program interface for interfacing the applications with the data storage manager. An adapter may also be associated with each repository for interfacing the data storage manager with the repositories. The data storage manager may store adapter information relating to which adapters are available and what types of data are handled by each of the adapters. The data storage manager may use the adapter information to identify the appropriate data repository for fulfilling the data access request. The data storage manager may further contact at least one adapter and use information received from the adapter to identify the appropriate data repository. Each adapter may store information identifying data types handled by the adapter and may map data between the data storage manager and the data repository.","In yet another aspect, an article comprising a machine-readable medium may store instructions operable to cause one or more machines to perform certain operations, including receiving a data access request, identifying at least one repository from a plurality of repositories for satisfying the data access request, and fulfilling the data access request using the at least one identified repository. The plurality of repositories can include at least two different types of repositories and data is selectively partitioned among the repositories.","Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages may be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.","The systems and techniques described here relate to centralized access to and management of multiple, disparate data repositories in a computer system. For example, user management data, such as user and group information, may often be shared between many applications. Accordingly, in one implementation, a user management engine can handle cross-platform user identity management and may facilitate the creation, reading, writing, and searching of user-specific data across different servers. The user-specific data may relate to user identities, group identities, role identities, and\/or their respective assignments. In this manner, information that is distributed across a variety of data repositories on different servers can be combined into a single logical whole for purposes of managing user data and allowing, for example, single sign-on access to multiple, disparate systems or platforms. The user management engine may also be designed so that the location where information is read from or written to is easily configurable.","Prior to these techniques, user management data that was to be used to regulate access to, or to be accessible across, multiple disparate, yet interconnected systems had to reside within a single data store, such as an LDAP repository. Contrary to prior techniques, the techniques described here do not require data that already exists in other data stores to be moved or copied to a single data store. In other words, they do not require the creation of a new data repository instead of or in addition to repositories that already exist. In addition, the described techniques allow different types of repositories (e.g., that use different proprietary or standardized protocols) to be combined into a single logical whole. From the perspective of applications that write or otherwise access the stored data, the described techniques combine the different repositories such that they appear to be one central storage. Moreover, different data repositories can be used to provide vertical (e.g., attribute-based) or horizontal (e.g., user-based) partitioning. For example, information can be stored or read from different repositories based on the attributes and\/or the users with which the information is associated.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","105","110","105","115","1","115","115","110","165","170","175","180","110","120","125","130","135","105","120","125","130","135","120","125","130","135","120","125","130","135"],"i":"x"},"The user management core layer  includes a collection of application programming interfaces (APIs) , , , and  and a data storage manager . When an application  needs to access data in the data storage repositories , the application  sends a request to the data storage manager  using an appropriate API , , , and . For example, depending on the type of data to be accessed, the application  may select a user API , a user account API , a group API , or a role API . The user API  may generally handle information requests relating to the user himself (e.g., name, address, salary, position, and the like), while the user account API  handles technical information associated with the user's access to the computer system (e.g., the user's computer system password, days remaining until the current password expires, time of last login, the user's voicemail password, and the like. The group API  and role API  may generally handle access requests that relate to information associated with a group or role. In one implementation, the APIs , , , and  represent a JAVA-based interface between the applications  and the data storage manager .","Upon receiving an access request from an application , the data storage manager  determines which user management adapter(s) , , , and\/or  to invoke and invokes the appropriate user management adapter(s) , , , and\/or . As used herein, the term \u201cinvoke\u201d is intended to refer to the process of contacting the user management adapter(s) , , , and\/or  in preparation for creating, reading, writing, or searching data in the collection of repositories , , , and . For example, when attempting to perform a write data operation, the data storage manager  may contact multiple user management adapters , , , and  to identify which one is appropriate for storing the data to be written. The data storage manager  may invoke all of the user management adapters , , , and  or a subset of them depending on the information provided in the access request.","In this regard, the data storage manager  is pre-configured with knowledge of which user management adapters , , , and  exist, how to invoke the user management adapters , , , and , and which user management adapters , , , and  handle which types of data. For example, during a configuration process, the data storage manager  may read one or more extensible mark-up language (XML) documents that contain a description of the user management adapters , , , and . Part of the configuration data may include a set of rules that help to minimize the number of user management adapters , , , and\/or  that are invoked. The set of rules may be used to determine which user management adapter , , , or  or which subset thereof to invoke, and this determination may be based on the configuration data loaded into the data storage manager  and\/or on run time information obtained from the user management adapters , , , and .","Each of the user management adapters , , , and  knows its respective responsibilities (i.e., which types of data are stored in the repository , , , or  that corresponds to the user management adapter , , , or ). Upon being invoked by the data storage manager , the user management adapter , , , or  determines if the corresponding repository , , , or  has any information that may be needed (e.g., in the case of a read or search operation) or if corresponding repository , , , or  represents the appropriate location for information to be stored (e.g., in the case of a write or create operation). If so, the user management adapter , , , or  executes the appropriate read, write, create, or search operation on the corresponding repository , , , or . Generally, however, the main logic for controlling the user management system  resides in the data storage manager .","The user management system  may provide flexible support for different types of repositories , , , and . The repositories may be differentiated by type based on the protocol used to access data, the way in which data is organized, the standardized and\/or proprietary technology used, and the like. For example, the data storage manager  may be used to coordinate access to database repositories  (e.g., SQL Server, Oracle Database, and SAP DB or DB); LDAP repositories  (e.g., provided by iPlanet, Novell, or ADS); SAP R\/3 , which is an application that stores user information; or a text file repository , which can be used for testing where no database or LDAP repository  or  is required. The data storage manager  may also be used to access other types of repositories. When integrating the applications and data storage components of a computer system, companies frequently have an existing type of repository that stores particular types of data or want to use a preferred type of repository so that they can easily implement software products from a particular vendor. A database repository  may be used in situations where the company does not have or does not want to have an LDAP repository  and also for application private data. An LDAP repository  may be used for public user and group attributes.","Each type of repository , , , or  has a corresponding type of user management adapter , , , or . Thus, the user management system  may include a database adapter , an LDAP adapter , an SAP R\/3 adapter , and\/or a text file adapter  for supporting and interfacing with one or more of the different types of repositories , , , and . In addition, the system  may include additional types of user management adapters for supporting other types of repositories.","The system  may also include multiple repositories of the same type. In the illustrated example, two database repositories () and (), two LDAP repositories () and (), and two SAP R\/3 repositories () and () are shown. Each repository , , , or  has a corresponding instance of a user management adapter , , , or . Different user management adapter instances of the same type may share the same code but have different configuration data, which corresponds to the role of their respective repositories. For example, a first database repository () may be accessed by the data storage manager  using a first instance of the database adapter () that is configured to have knowledge of the types of data stored in the first database repository (), while a second database repository () may be accessed using a second instance of the database adapter () that is configured to have knowledge of the types of data stored in the second database repository (). Each database adapter , , , or  may be configured using an XML file to map data to the proper location in the respective repository , , , or .","The techniques of the present invention can be used to support centralized access to horizontally and\/or vertically partitioned repositories. In horizontal partitioning, objects are selectively segregated between different repositories based on certain characteristics of the objects. For example, the user management system  can be configured to use different repositories for different sets of users, groups, roles, or assignments, with each user, group, role, and\/or assignment representing an object. As a more specific example, an enterprise that has multiple regional locations (e.g., a European division and a U.S. division) can, and typically will, maintain different user management data repositories. The U.S. division will have a repository that stores user management data for U.S. employees, and the European division will have a separate repository that stores user management data for European employees. Rather than having to combine and reconcile the different repositories into a single repository, the techniques described here can be used to treat the separate repositories as a logical whole, even though the repositories are partitioned from each other and even though they may be of disparate types. These techniques may be used to create, read, write, or search user objects from applications that have no knowledge of the different repositories. In other words, a single application might create user objects for both divisions by sending the user data to the data storage manager , which then identifies which repository is appropriate and stores the user object in the identified repository.","In another possible scenario, different departments within the enterprise may maintain different user data repositories. The Human Resources (HR) department might maintain a user management repository for employees and one or more separate user management repositories for suppliers, partner companies, and independent contractors working on site. By logically combining the repositories, it may be possible to search both repositories and otherwise treat both repositories as a single logical whole.","In vertical partitioning, object attributes stored (e.g., user management data concerning a particular user, group, role, or assignment) in a second repository supplement object attributes (e.g., user management data concerning that same user, group, role, or assignment) in a first repository. Thus, the user management system  can be configured so that different attributes are written to different repositories. For example, an enterprise may have several different departments, each of which maintains a separate user management data repository. The HR department might maintain a first repository that stores employee names, addresses, position, salary, and other factual data, while another department maintains the company directory. The latter department can maintain a second repository that supplements the user data in the first repository. Thus, the second repository might store an employee's picture, current work projects, and the like. The described user management techniques may allow the company directory system to treat the first and second repositories as a logical whole and draw user management information from both repositories to more fully define a particular user, role, group, or assignment. Similarly, companies may want to limit what attributes are written to a corporate LDAP (e.g., they do not want application specific data written to the corporate LDAP). The techniques described here can be used to facilitate storing such attributes in different repositories while allowing them to be easily accessible in a manner that is undetectable by the requesting application.","In connection with the partitioning of data in two dimensions, certain rules may be implemented to define where information is stored. In one implementation, every object has only one home adapter\/repository that defines whether the object exists. As a result, objects with the same identifier cannot exist in different adapters\/repositories (e.g., the system does not support situations where the same user ID is stored in two different LDAP repositories). When an object is created, the home adapter\/repository is determined based on some of the object's attributes. For example, when a new user object is created, the home adapter\/repository may be selected based on the division for which the user works. For reading and searching, the adapters\/repositories are searched in a fixed order and the first adapter\/repository returning the object is determined to be the home adapter\/repository (i.e., it is assumed that there is only one match). The use of a home adapter\/repository relates to horizontal partitioning. Vertical partitioning, on the other hand, is supported by assigning different attributes to different adapters\/repositories. Thus, for each attribute, it may be specified where the attribute data is stored. Once an object is created in the home adapter\/repository, additional attributes that relate to the object may be stored in other repositories.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["200","205","125","1","120","1","125","2","120","2","130","1","130","2"]},"Vertical partitioning may be accomplished by assigning different attributes for the same object to different repositories. In particular, attributes  are vertically partitioned into different repositories. In the illustrated example, each employee's name, address, and position are stored in the European LDAP repository () for European users and in the U.S. database repository () for U.S. users. In addition, each employee's picture and a list of current projects are stored in the European SAP R\/3 repository () for European users and in the U.S. SAP R\/3 repository () for U.S. users. For independent contractors, each user's name, address, position, and current projects are stored in an external LDAP repository (). Finally, the group name, the current projects, and group members for each group are stored in a corporate database repository ().",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["300","305","115","115","160","310","115","115","155"]},"After receiving the data access request, the data storage manager  identifies one or more adapters that may be associated with a repository that stores data associated with the data access request (step ). The identification of the appropriate adapter or adapters may be based on configuration information stored in the data storage manager  and\/or on information obtained from the adapters themselves. Referring again to the example discussed in connection with , if an application sends a request to the data storage manager  to create a user object, the data storage manager  might consult configuration information indicating that user objects are created in a European LDAP repository (), a U.S. database repository (), or an external LDAP repository (). Accordingly, the data storage manager  would identify the user management adapters (), (), and () that correspond to the appropriate repositories (), (), and ().","The identified adapters (), (), and () would then be contacted by the data storage manager  (step ) by, for example, forwarding the request received from the application . As a result, each identified adapter (), (), or () could determine if its associated repository is the appropriate location for the data referenced in the data access request (step ). In some cases, the data that is responsive to the data access request may reside in more than one repository. In such a case, the requested data access may involve accessing data in more than one repository. For example, if an application requests information on a particular employee name, phone number, and department may be stored in one repository while a picture of the employee is stored in another. Thus, the requested information may be retrieved from more than one repository. The requested data access can then be completed and a response sent to the requesting application , if necessary (step ).","Various implementations of the data storage manager  and user management adapters , , , and  described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software Applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the term \u201cmachine-readable medium\u201d refers to any computer program product, apparatus and\/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor.","The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), and the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","Although only a few embodiments have been described in detail above, other modifications are possible. Portions of this disclosure discuss use of the systems and techniques in connection with user management data, but the systems and techniques can also be applied in connection with other types of data.","Other embodiments may be within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other aspects will now be described in detail with reference to the following drawings.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
