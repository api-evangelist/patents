---
title: Hosted application sandbox model
abstract: An application host (such as a web application server) may execute a set of applications on behalf of a set of users. Such applications may not be fully trusted, and a two-way isolation of the distributed resources of an application (e.g., the executing application, the application user interface on the user's computer, and server- and client-side stored resources) from other applications may be desirable. This isolation may be promoted utilizing the cross-domain restriction policies of each user's computer by allocating a distinct subdomain of the application host for each application. The routing of network requests to a large number of distinct subdomains may be economized by mapping all distinct subdomains to the address of the domain of the application host. Moreover, the application user interfaces may be embedded in an isolation construct (e.g., an IFRAME HTML element) to promote two-way isolation among application user interfaces and client-side application resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09197417&OS=09197417&RS=09197417
owner: Microsoft Technology Licensing, LLC
number: 09197417
owner_city: Redmond
owner_country: US
publication_date: 20090424
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["In the field of computing, an application may be executed by an application host, such as a web application executed by a web application server and communicating with a user through web pages rendered in a web browser. The application host may offer several such applications, and may embed several applications in the same web page. Each application may be configured to access a particular set of resources on the application host, including application resources (e.g., application binaries and configuration information), application programming interfaces and libraries provided by the application host, and data objects generated by the user and accessible to the application host.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","An application host may be configured to execute a variety of applications, including applications that are developed by third parties. Such third parties may be untrusted or even unknown, and the applications generated thereby may contain faulty or malicious operations that steal a user's data objects, corrupt the application host, and\/or waste resources. Such applications may also be capable of interfering with other applications executing on the application host, or with applications executing on the user's computer. For example, if a web page embeds two applications that execute in a user's web browser, the first application might (through misconfiguration or malicious design) interfere with the execution of the second application by querying for and operating on document elements associated with the second application, by interacting with the cookies of the second application stored in the user's web browser, or by monitoring or altering the communication of the second application with the application host of the second application.","In order to reduce vulnerabilities of hosted applications, an application host may utilize a cross-domain restriction policy implemented on the client, such as a same-origin policy implemented by the web browser of the computer. Such restrictions restrict an application to accessing resources associated with the subdomain to which the application belongs. For example, an application may only access remote resources that are hosted within the particular subdomain, and a web application may only access elements within the web document that are associated with the particular subdomain.","An application host may utilize these client-side policies in order to promote the isolation of hosted applications, both at the server (such as receiving and processing requested operations and granting access to server-side resources) and at the client (such as restricting the interaction of the application with other applications hosted by the same application host and embedded in the same web page.) One such technique involves allocating a distinct subdomain for each hosted application, such as \u201capp1.host.com\u201d and \u201capp2.host.com,\u201d so that the cross-domain restrictions may effectively isolate these applications while executing on the client. However, it may be difficult for the application host (such as routing hardware) to contend with a large number of subdomains, particularly where the application host offers dozens or hundreds of hosted applications. Therefore, the application host may also map all of the distinct subdomains to a single network address, so that the requests may be similarly routed to the application server even if identified by different subdomains. Additional techniques may also be utilized, such as rendering an embedded web application within an isolation construct (e.g., a HyperText Markup Language [HTML] IFRAME element) that promotes the application of cross-domain restrictions by the user's computer (such as the client-side web browser), and by implementing a permission token mechanism (such as a cryptographically signed cookie) that indicates the permissions that a user may have authorized for the application to access his or her data at the application host.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.","In the field of computing, an application may be hosted by an application host to be executed on behalf of a user of a computer in a server-client arrangement. As one example, a web application may be provided by an application web server that generates one or more web pages that are delivered to the computer to be rendered and displayed for the user within a web browser. As another example, an application server may remotely execute an application and may send instructions to the computer to render a user interface for the user that accepts input and displays output. Each computer may have a network address, and communication therebetween may be arranged according to various protocols (which may comprise, e.g., one or more implementations of various layers of a network stack.) The execution of the application may be allocated in various ways over the computing resources of the application host and the user's computer, and possibly over those of other computers. For example, a thin-client architecture may allocate a large portion of the application processing to the application host and may allocate to the client only basic input and output functions. Alternatively, the application may involve some client-side processing, wherein I\/O pre- or post-processing or portions of business-logic processing may be performed by the user's computer. The application host and the user's computer are often connected over a network, such as the internet or a local area network.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["10","12","16","20","22","12","22","12","16","14","12","12","22","24","12","22","26","28","12","22","24","20","30","12","24","16","16","16","20","34","22","20","16","12","22","20","16","34","22","32","24","34","34","20","32","16","22","16","22","12","10","16","12","20","22"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2","b":["40","46","42","44","46","56","50","22","20","46","54","50","52","20","46","42","46","48","52","46","42","46","56","54","50","50","54","56","20","42","46","50","46","58","42","56","62","60","50","46","50"]},"In more complex scenarios, an application host  may host more than one application , such as an email application and a chat application. Moreover, these applications may be executed concurrently on the application host , and the application user interfaces  may be combined into a user interface that is presented to the user . For example, a web page  may embed both an email application and a chat application that may be presented to the user  in an application user interface , such as an HTML document embedding elements of each application . In addition, the application host  may concurrently and\/or consecutively execute one or more applications  on behalf of multiple users, such as a set of web visitors that each wish to execute a particular application . Moreover, an application  may interact with a particular set of resources, such as a database hosted by the application host . In even more complex scenarios, respective applications  may interface with distinct sets of application resources, and perhaps even resources exclusive to one or more applications  and\/or users . For example, an application  may interact with a particular application resource stored on the application host , included in the application user interface  (e.g., a control embedded in a web page ), and\/or stored on the computer  (e.g., an application cookie  specific to the application .) It may be desirable to restrict other users , computers, and applications  from accessing such application resources. For example, an application  may store on the application host  a private data set, such as an email mailbox; may present the private data to the user  through a protected control in the application user interface , such as an email interface; and may store on the computer  private data of the user  for the application , such as authentication credentials to login to the application . The security of this application  and the associated user data may be compromised if other users , other applications , or even other instances of the same application  (e.g., other instances of an email client operated by other users ) are able to access the private data stored on the application host  or the computer  or eavesdrop on the protected control within the application user interface .",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 1"],"b":["70","72","74","76","78","14","80","80","78","76","82","72","84","74","78","76","86","88","90","76","92","94","72","96","74","98","98","100","94","102","96","104"]},"The computers of the users may be configured to present the applications executing on behalf of the users within respective application user interfaces. For example, the first computer  may present an application user interface  embodying both a first application user interface  of the first application  (which may render the data stored in the first user resource  of the first application ) and a second application user interface  (which may render the data stored in the first user resource  of the second application .) Moreover, these application user interfaces may be configured to store various data objects on the computer  (e.g., as cookies stored in a browser cache of a web browser executing on the respective computers); such data objects may comprise, e.g., a first local user resource  generated by the first application  and a first local user resource  generated by the second application . Similarly, the second computer  may render and present to the second user  an application user interface  comprising a first application interface  corresponding to the first application  (which may render the second user resource  of the first application ) and a second application interface  for the second application  (which may render the second user resource  of the second application ); and, again, such application user interfaces may be configured to store local application resources on the second computer  a second local user resource  belonging to the first application , and a second local user resource  belonging to the second application .","Finally, the first user  and the second user  may also interact with a third application  hosted by a second application host . This third application  may be stored in an application store  of the second application host , along with a first user resource  and a second user resource  respectively associated with the first user  and the second user . Again, the application store  of the second application host  might resemble the application store  of , and may be similarly configured in various aspects. The second application host  may also render (e.g., by an application rendering component  of the second application host ) a third application user interface for the third application  that may be included in the application user interface  of the first computer  and the application user interface  of the second computer , which may be transmitted to the first computer  and the second computer  over the network  (e.g., by sending the respective application user interfaces to the first computer network address  and the second computer network address  from a second application host network address .) Although not expressly illustrated in , it may be appreciated that the third application user interface of the third application  may be combined with the first application user interface  and the second application user interface  in respective application user interfaces. Additionally, although also not so illustrated in , the third application  may store local application resources for respective users on the first computer  and the second computer .","In this manner, the computers of the respective users may assemble a composite application user interface, comprising application user interfaces for three distinct applications (two hosted on the first application host  and one hosted on the second application host .) Moreover, each application user interface may render private data for the respective users stored on the respective application hosts, and may be permitted to store data objects locally (such as cookies in the browser caches of the respective machines) in order to persist data over instances of the respective applications and the web browsers.  illustrates an exemplary scenario  of a web page  rendered in a web browser  on behalf of a user  and comprising a web application interface embedding a first application user interface  of a first web application, a second application user interface  of a second web application, and a third application user interface  of a third web application. Moreover, each application user interface may render private data of the user , which may be stored remotely (e.g., by the application host) or locally (e.g., as a cookie stored in the browser cache of the web browser , a file stored in a file system of the computer , a registry key stored in a system registry of the computer , or an application resource stored in an offline browser application cache implemented according to the HTML 5 standard), thereby presenting a personalized application experience. However, such web applications may be hosted by different application hosts; e.g., a first application host  may host the first web application and the second web application, and may transmit to the web browser  the first application user interface  and the second application user interface , while a second application host  may host the third web application and may present the third application user interface . Despite the various hosting sources of the applications, the transmitted application user interfaces may be combined in the web page  and rendered together by the web browser  to present an application user interface to the user . The application user interface may present the applications in visual and\/or functional isolation (e.g., within separate visual containers and configured to function independently), or with degrees of interoperation (e.g., as related visual components of a single composite application, or functionally cooperating to achieve a desired result.)","However, in complex scenarios such as the exemplary scenario  of , a great number and variety of security risks may arise. As a first example, a first application  might permit a first user  to access the second user resource , comprising the private data of the second user  hosted on the first application host , thereby exposing the private data of the second user  to the first user . As a second example, the first application  may be permitted to access the first user resource  of the second application  stored on the first application host , and\/or the first local user resource  of the second application  stored on the first computer , thereby interfering with the execution of the second application  and potentially leaking private data that the first user  expected to be restricted to the second application  into the first application . As a third example, the first application user interface  of the first application  executing within the application user interface  on the first computer  may be permitted to access the second application user interface  of the second application  (e.g., by accessing HTML document elements belonging to the second application  that are embedded in the composite web page), thereby permitting the first application  to monitor and\/or interfere with the proper execution of the second application user interface  on the first computer . As a fourth example, the third application  executing on the second application host  may be permitted to access various resources of the first application host  (such as the user resources stored in the application store  of the first application host ) and\/or features of applications hosted by the first application host  but executing on the first computer  of the first user  (e.g., a third application user interface may be permitted to interact with the application user interfaces of the applications hosted by the first application host  or the locally stored user resources of such applications.) As a fifth example, an application user interface executing on the first computer  may be able to gain access to aspects of the second computer , e.g., by sharing the second computer network address  and allowing the user interfaces of an application executing on the respective computers to communicate and share the data of the second user  with the first user . It may be appreciated that many scenarios in the field of computing may be as complex or more complex as the exemplary scenario  of  (e.g., peer-to-peer distributed computing applications), and many types of vulnerabilities may be identified and exploited by malfunctioning or maliciously designed applications and computers.","Some of these vulnerabilities may be reduced by the implementation of cross-domain restriction policies, whereby an application (such as a web application) identifies a domain to which it belongs, and is restricted to accessing resources belonging to the same domain. A computer may, upon receiving or creating a resource on behalf of an application, associate such actions and data objects with the domain from whence the application was received. The application may thereafter be restricted to accessing resources associated with the same domain, and precluded from accessing resources associated with other domains. Cross-domain restriction policies are often implemented on computers in the context of executing untrusted applications. In particular, web browsers often implement a same origin policy that examines the domains associated with various web requests of executing applications and restricts applications to interacting with resources and servers within the same domain. The same origin policy is utilized by comparing the protocol, subdomain, and domain of a requested web resource with the protocol, subdomain, and domain of the requesting application in order to determine whether to permit or restrict the request.","For example, in , the first application  and the second application  are received from the first application host , which likely specifies a particular domain (e.g., \u201chost1.com\u201d), while the third application  is received from the second application host  that likely specifies a different particular domain (e.g., \u201chost2.com\u201d). For example, when the first application user interface  is received from the first application host  on behalf of the first application , the first application user interface  is associated with the domain of the first application host  (e.g., \u201chost1.com\u201d), and the resources of the first application , including the first user resource  and the first local user resource , are also associated with the same domain. When the first application user interface  attempts to access such resources, the first computer  may examine the associated domains and permit the operation. However, if the third application , which is associated with the domain of the second application host  (e.g., \u201chost2.com\u201d) or an application user interface of the third application  attempts to access these resources of the first application , the first computer  may examine the associated domains, identify a mismatch, and restrict the accessing.","However, the configuration of the applications may vary the degree to which security issues may be reduced by cross-domain restriction policies. Again referring to , the first application host  may be configured to host various applications (including the first application  and the second application ) at different addresses (such as URLs) within the same domain. For example, if the first application host  comprises the \u201chost1.com\u201d domain, the first application  may be located at a first location within the domain, such as \u201chttp:\/\/host1.com\/app1\u201d, while the second application  may be located at a second location within the domain, such as \u201chttp:\/\/host1.com\/app2\u201d. This configuration may reflect a logical arrangement of the applications on the first application host ; e.g., the organization of the URLs may reflect the organization of corresponding files within the file system of the first application host  as a webserver, or to a first server (hosting the first application ) and a second server (hosting the second application ) in a distributed server configuration. Because these applications are hosted by the first application host , the resources of such applications (both stored on the first application host  and on various computers, such as the local user resources stored on first computer ) are protected by cross-domain restriction policies from interference from applications hosted by other application hosts, such as the second application host . However, because the applications are hosted within the same domain (\u201chost1.com\u201d), and also within the same subdomain and accessible through the same protocol (in this example, HTTP), the applications may be able to interact with each other. For example, cross-domain restriction policies, such as the same origin policy implemented on web browsers, do not preclude the first application  executing on the first application host  from accessing the second application  hosted on the application host  or the application user resources of the second application  (such as the first user resource  of the second application .) Such policies also do not restrict the first application user interface  executing on the first computer  from interfering with the second application user interface , or accessing the first local user resource  of the second application  stored on the first computer .","Techniques may be developed to promote the isolation of an application  hosted by an application host  and interfacing with a user  through an application user interface  of a computer . Such techniques may be particularly useful, e.g., where an application host  is configured to host applications received from third parties, which may not be as fully trusted as applications developed by the administrators of the application host . For example, a website may serve as an application platform that allows users to install and utilize a set of web applications , potentially including web applications  received from third parties (either directly received by the web application host  and offered to users , or received from a user  who may wish to use the web application .) It may be desirable to configure the web application host  to isolate an application from accessing the resources of other applications, including on the web application host , within the web browser  (such as accessing HTML elements of other applications embedded in the same web page ), and elsewhere within the computer  (such as cookies of other web applications  stored in the browser cache .) Moreover, it may be advantageous to utilize currently implemented security mechanisms of the various components of this distributed system (such as may be implemented the application host , the application store , the computer  of the user , the web browser , and the browser cache ) instead of depending on new security mechanisms that may be partially, inconsistently, or less than ubiquitously implemented. In particular, it may be advantageous to base such techniques on cross-domain restriction policies that extend to several aspects of such applications  (e.g., the elements of an application within an HTML document, the process hosting the application  on the computer , client-side resources of the application  such as application cookies , the application hosts  that the application  is permitted to contact, and the resources of an application host  that the application  is permitted to utilize.) Security models based on this model may apply to the entire set of resources utilized by an application , and may permit the application  to access this broad set of resources associated with the domain while restricting access to unrelated resources, thereby providing pervasive, two-way isolation of the application .","One such technique relates to the association of domains with the set of applications  hosted by an application host . An application host  may expose applications  at various locations associated with the application host , but in a manner that takes advantage of the cross-domain restriction policies to promote the isolation of an application  from other applications  stored on the same application host  (as well as applications  stored on other application hosts  and locally executed on the computer .) Specifically, the application host  may be configured to allocate a subdomain of the domain of the application host  for an application . For example, with reference to , if the first application host  is associated with the \u201chost1.com\u201d domain, the first application  may be associated with the subdomain \u201capp1.host1.com\u201d, and the second application  may be associated with the subdomain \u201capp2.host1.com\u201d. If a subdomain is allocated for respective applications , then an application  (including all of its associated resources on the application host  and on the computer , such as the application user interface , elements of the application  embedded in a web page , and application resources stored on the computer , such as application cookies  stored in a browser cache ) may be isolated from access by other applications , even those hosted on the same application host  but at a different subdomain, due to the cross-domain restriction policies implemented in various systems of the application host  and the computer . Moreover, distinct subdomains may be generated for different instances of the same application , such as a first instance executing on behalf of a first user  and a second instance executing on behalf of a second user .","However, this technique may raise difficulties with network management, because the number of subdomains associated with a particular domain of an application host  may grow to an unmanageable number and\/or may change with an unmanageable frequency. For example, if an application host  hosts and executes one hundred applications  on behalf of one hundred users , and if each instance of an application  on behalf of each user  is allocated a distinct subdomain, the domain of the application host  may contain 10,000 subdomains. Routing hardware servicing the application host  may have considerable difficulty tracking the use of such subdomains; e.g., the routing tables used by such routing hardware may become significantly encumbered, thereby utilizing more computing resources and\/or providing lower-quality service while contending with the vast number of subdomains. In view of this potential difficulty, this application isolation technique may also involve unifying the routing of the subdomains. For example, a single domain name server (DNS) entry may be created that maps all subdomains (e.g., \u201c*.host1.com\u201d) to the network address  of the application host . This mapping may permit routing hardware to handle the wide variety of subdomain accesses to hosted applications  in an efficient manner. Moreover, new subdomains may be generated (e.g., a new subdomain for a new application , or for a new instance of an application ) and may be properly routed without having to update the DNS entry mapping all subdomains to the same application host . Other advantages may also flow from this technique (e.g., if two applications  happen to utilize the same resource, e.g., \u201capp1.host1.com\/SharedResource\u201d and \u201capp2.host1.com\/SharedResource\u201d), the translation of both subdomains to the same network address (such as the IP address of host1.com) may permit the computer  to identify that a resource was previously accessed by another application , and to refer to a copy of the resource in a local cache.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"b":["150","12","16","20","22","12","24","16","12","12","24","20","12","20","14","158","80","160","86","12","150","12","152","152","14","20","80","154","86","156","14","162","14","14","14","164","20","22","16","14","20"]},"In the exemplary scenario  of , the exemplary system  functions in the following manner. When an application  is registered with the application host , such as when the application resources of the first application  (including a first application executable  and a first application resource), the application registering component  allocates for the first application  a distinct subdomain of the domain of the application host . For example, if the application host  services the \u201chost1.com\u201d domain, the first application  may be allocated the \u201capp1.host1.com\u201d subdomain, and may be accessible at http:\/\/app1.host1.com. Moreover, the application registering component  maps this distinct subdomain to the same IP address as the domain of the application host , e.g., 207.46.30.34. Similarly, when the second application  is received and stored in the application store , the application registering component  allocates the \u201capp2.host1.com\u201d distinct subdomain for the second application , which is also mapped to the same IP address as the domain of the application host . In this exemplary scenario , a user  of a computer  may thereafter request to execute both applications, along with a third application hosted by a different application host, such as by directing a web browser executing on the computer  to access a web page embedding the application user interfaces of all three hosted applications. For example, when the user  invokes the first application , the computer  sends a request to the application host  over the network  to execute the first application . The application executing component  thereby generates an executing instance of the first application  and sends to the computer  over the network  a first application user interface . Similarly, upon receiving a request to execute the second application , the application executing component  may instantiate and begin executing an instance of the second application , and may deliver to the computer  a second application interface . A third application interface  may also be received from another application host, and may be presented to the user  alongside the application user interfaces of the first application  and the second application  (e.g., within a web page embedding all three application user interfaces.) Moreover, the application interfaces are associated with the distinct subdomains allocated by the application registering component ; e.g., the first application user interface  is associated with the \u201capp1.host1.com\u201d distinct subdomain, while the second application interface  is associated with the \u201capp2.host1.com\u201d distinct subdomain.","Thereafter, the computer  may issue various requests to the respective applications  of respective application hosts  to perform certain operations; e.g., the user  may, through the first application user interface , request the first application  executing on the application host  to perform an operation, such as accessing a user resource stored on the application host . Accordingly, the computer  may generate and send to respective application hosts  various requests to be handled by the applications  executing thereupon. Due to the allocation of distinct subdomains by the application registering component , such requests may be handled in an expedient manner that promotes two-way isolation of the applications . For example, a first request  may be generated by the first application user interface  to be executed by the first application executable . Because the first request  is generated by the first application user interface , it is associated with the same subdomain as associated with the first application user interface , i.e., the \u201capp1.host1.com\u201d subdomain. The computer  thereby implements a cross-domain restriction policy check of the first request , and because the first request  is directed to an application  associated with the same distinct subdomain, the computer  permits the first request  to issue. The first request  is thereby delivered over the network , whereby the addressing of the first request  is translated by a domain name service (DNS). Due to the mapping of the distinct subdomain by the application registering component , the first request  is delivered to the same IP address as the application host , i.e., 207.46.30.34, and is accordingly routed to the first application host . Upon receiving the first request , the application host  may determine that the first request  was addressed to the \u201capp1.host1.com\u201d subdomain, and may deliver it to the first application  for execution. The first request  is therefore permitted by the cross-domain restriction policy of the computer . Moreover, this first request  may be efficiently routed to the application host  in the absence of a specific DNS entry corresponding to the distinct subdomain of the first application .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["14","108","170","86","170","86","108","22","170","108","86","110","172","86","22","86","24","176","172","12","166","174","12","174","22","174","24","12","80","86","166","22","152","16","16","16","162"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 6","FIG. 6","FIG. 5"],"b":["180","152","5","182","184","184","186","12","80","14","20","22","180","186","192","194","196","198","200","186","16","14","16","162","158","16","164","16","16","158"]},"The techniques discussed herein may be devised with variations in many aspects, and some variations may present additional advantages and\/or reduce disadvantages with respect to other variations of these and other techniques. Moreover, some variations may be implemented in combination, and some combinations may feature additional advantages and\/or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments (e.g., the exemplary system  of ) to confer individual and\/or synergistic advantages upon such embodiments.","A first aspect that may vary among embodiments of these techniques relates to the configuration of the components of an exemplary system (such as the exemplary system  of ) that implement the techniques presented herein. As a first example of this first aspect, the application store  may be configured in many ways to store the application. In a first such embodiment, the application store  comprises a portion of a filesystem of the application host , such as an assembly cache that is configured to store application executables (such as scripts, binaries, and application configuration information) and application resources (such as media objects, documentation, and data sources consumed by the application.) In a second such embodiment, the application store  comprises a portion of volatile or non-volatile system memory configured to store applications  that are currently executing on the application host , that are available for execution on the application host , and\/or that have recently been executed on the application host .","As a second example of this first aspect, the application registering component  may be configured in many ways to allocate distinct subdomains for respective applications  that are mapped to the network address of an application server . In a first such embodiment, the application registering component  may fulfill the application of subdomains mapped to the application host  by communicating with a domain name service (DNS) provided by a domain name service server disposed on the network over which requests to access such applications  might be received. Upon receiving a request to make a new application  available on the application host , the application registering component  may send a request to the DNS server to create an entry in the DNS routing table that maps the subdomain to the network address of the application host . Subsequent requests to access the application  may then be handled by the domain name service server according to routing services. In one particular embodiment, the application registering component  might configure the domain name service server to route all subdomains matching a particular pattern (e.g., \u201capp*.host.com\u201d) to the application host . This technique might be advantageous by reducing the per-application registration of subdomains by the application registering component  and by reducing the complexity of the routing rules of the domain name service server , thereby economizing the computing resources thereof. However, this technique might disadvantageously permit the routing of invalid requests to the application host , e.g., requests specifying subdomains that do not correspond to available applications .","In a second embodiment of this second example, the application registering component  may operate according to network address translation (NAT) principles for translating requests received over a network accessible to the application host . For example, the application registering component  may maintain an internal list of distinct subdomains allocated for applications  that are available on the application host . When the application host  receives a request to make a new application  available, this application registering component  may allocate to the application  a distinctive domain and may create a new entry in the list for the application . When the application registering component  later receives a request over the network referencing a subdomain that might correspond to an application , the application registering component  may attempt to locate the subdomain within the internal list. If the subdomain is located, the application registering component  might return a network address (e.g., the IP address) of the application host  hosting the application ; but if the subdomain is not located in the internal list, the application registering component  might refuse the request (e.g., by returning an HTTP 404 error message.) In this manner, the application registering component  may satisfy the allocation of domains according to network address translation techniques. While this embodiment may more correctly route requests for particular applications  and may reject requests for unallocated subdomains, this approach might impose a greater computational burden on the domain name service server , such as by expanding the number of routing rules in the routing table utilized by the domain name service server .","As a third example of this first aspect, the application executing component  may comprise many components on the application host  that execute the application  on behalf of the user  and\/or the computer  of the user . In a first such embodiment, the application executing component  may comprise a runtime on the application host  that is configured to load and execute one or more executables that specify the logic of the application. In a second such embodiment, the application executing component  may comprise a script interpreter that executes server-side scripts comprising the application , e.g., a JavaScript parser or Perl interpreter. In a third such embodiment, the application executing component  may comprise a virtual machine configured to execute the application , such as a Java virtual machine within which a Java-based application  may be executed in a safe manner. Those of ordinary skill in the art may devise many configurations of the components of systems that implement the techniques discussed herein.","A second aspect that may vary among embodiments of these techniques relates to additional security and access techniques that may supplement the exemplary system  of . While the exemplary system  promotes the isolation of an application  from other applications , this isolation may be further promoted with additional configuration of an implementation of these techniques. As a first example, additional measures may be taken to promote the isolation of an application user interface  from tampering by other applications. In one such scenario, an application user interface  of an application  may be embedded in a web page , such as a series of references specified in various elements of the document object model of the web page . Other applications embedded in the same web page  or executing concurrently within the web browser  may attempt to interact with the elements of the web page  comprising the application user interface  of the application  (e.g., detecting the state of controls, detecting or modifying the contents of variables, or interfering with the contents or execution of scripts.) In order to promote the isolation of the application , the application executing component  may be configured to present the element of the application user interface  within an isolation construct that is configured to isolate such elements from other applications . As one such example, the elements of a web application may be specified within an IFRAME HTML element that is associated with the distinct subdomain that has been allocated for the application  by the application registering component . The IFRAME HTML element may therefore be treated by the web browser  rendering the web page  in accordance with a cross-domain restriction policy (such as the same origin policy) that limits access to such elements to the application  associated with the distinct subdomain. Other scenarios may feature similar isolation constructs provided in accordance with other programming languages, platforms, and computing technologies (e.g., a protected memory section that is accessible only to a particular process, or similar element isolation mechanisms that may be available in other application user interface models, such as XAML.)","As a second example of this second aspect, the application registering component  may apply other criteria in the allocation of distinct subdomains for applications . In the exemplary scenario  of , it may be appreciated that while the allocation of distinct subdomains on a per-application basis may promote two-way isolation of the first application  from the second application , it might not promote an isolation among instances of a particular application . As a first example, a user  may wish to execute multiple instances of the application  (either concurrently or consecutively), and it may be advantageous to isolate a particular instance of the application  from other instances of the same application . As a second example, it may be desirable to implement two-way isolation of a first instance of an application  executed by a first user from a second instance of the application  executed on the same computer by a second user. This may be relevant, e.g., where two users of the same computer system concurrently access the application , thereby leading to two executing processes on the computer  that may be able to interact, potentially creating a security issue. Accordingly, the application registering component  may be configured to allocate a first distinct subdomain of the application host  for a first instance of the application , and a second distinct subdomain of the application host  for a second instance of the application . Distinct subdomains may be allocated in many ways, such as per user of the application (e.g., user1.app1.host1.com), per computer on which the application user interface is presented (e.g., computer1.app1.host1.com), and\/or per instance of the application executed by any user (e.g., instance1.app1.host1.com). Moreover, the application executing component  may be configured to associate the first instance of the application  with the first distinct subdomain, and to associate the second instance of the application  with the second distinct subdomain, etc. This variation may promote the two-way isolation of various instances of the application .","As a third example of this second aspect, an application executing component  may be configured to, upon receiving a request to execute an application , perform some authentication before executing the application . In one such variation, the application host  may endeavor to authenticate the identity of the user  on whose behalf the application  is executed, such as according to at least one user authentication credential received from the user  (e.g., a username, password, shared secret, cryptographic authentication, biometric measurement, etc.) In one such set of embodiments, the computer  of the user  may be configured to store an authentication token that has been issued by an authenticating service upon authenticating the identity of the user . In one such embodiment, the application host  might fulfill this role by soliciting user authentication credentials from the user , e.g., by presenting to the user  a user login interface configured to receive from the user  at least one user login credential (such as a username and password.) Upon verifying the user authentication credentials, the application host  might generate at least one user authentication credential and send it to the computer , such as an authentication token issued by the application host  to verify the identity of the user . This authentication token might then be provided by the computer  with each request submitted to the application host , such as executing the application . The application host  may then verify the user authentication token before executing the application . In a second variation, the application host  may endeavor to authenticate the application  according to at least one application authentication credential received from the application . As a first example, the application host  may be able to access a binary hashcode provided by the application developer that verifies the identity of the application  and confirms that its contents have not been modified. As a second example, the application host  may authenticate an application user interface  executing on the computer  before fulfilling requests received therefrom, e.g., according to a shared-secret system or challenge\/response asymmetric key system, whereby only the application user interface  having access to the shared secret or private key may be able to provide a correct response that authenticates the application . Those of ordinary skill in the art may devise many techniques for promoting the authentication of the user , computer , application , etc., and the addition of other isolation and security features, while implementing the techniques discussed herein.","A third aspect that may vary among embodiments of these techniques relates to the interaction of the application  with a computing environment of the user . While some primitive applications  (such as some web applications ) may execute in complete isolation of the computing environment of the user , other applications  may desirably interact with some aspects of the computing environment. As a first example, a user  may wish to author a document with an office productivity application, and may wish to save the document in the local filesystem of the computer for access by other applications; accordingly, the application  may be permitted to access the local filesystem to store the data object. As a second example, an application  may interact with various components of the computer, such as devices (e.g., a media application accessing a portable media device), hardware components (e.g., a high-quality graphics application accessing a display adapter), software APIs (e.g., an enterprise application interacting with distributed resources), locally represented user accounts, application and operating system configuration information, etc.","Moreover, the nature of the computing environment may differ significantly among embodiments of these techniques. As one such example, the computing environment may exist only on the computer, which may also operate as the computing environment host. Alternatively, the computing environment may be distributed across several computers and devices in an uncoordinated or peer-to-peer manner; e.g., the application may execute within a virtual environment on a first computer, but may access a portion of the computing environment stored on another computer. As another alternative, the computing environment may represent a deployable computing environment that is deployed to a set of computers and devices and centrally managed by a computing environment host. In order to reduce the complex variety and decentralization of the data objects comprising a contemporary computing environment, a deployable representation of the computing environment may be devised, where the data objects comprising the computing environment are organized in a data object hierarchy, which may be hosted by a computing environment host. If the data objects are represented in a uniform manner and managed in a consistent way by a data object system, a set of services may be devised to apply to all data objects of the computing environment. The data object hierarchy may be delivered to various devices to represent the same computing environment (including the same user profiles, applications, data files, etc.), and each device may render the computing environment in a consistent manner but customized based on the capabilities of the device (e.g., a hard keyboard interface for receiving data entry from a keyboard device attached to a workstation, and a touchscreen software keyboard interface for receiving data entry from a cellphone device.) It may also be advantageous to configure at least one server to manage one or more data objects within the representation, and to accept operations sets (e.g., sets of Create, Read, Update, and Delete operations) to be applied to such data objects. A user of the deployable computing environment may therefore interact with the deployable computing environment in a platform- and device-independent manner.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["210","212","214","212","214","216","220","224","222","218","216","88","226","224","214","212"]},"The various devices illustrated in  may also cooperate by sharing locally stored data with other devices, and by controlling or being controlled by other devices. Hence, the computing environment may therefore be devised and presented as a cloud computing architecture, comprising a device-independent representation (a \u201ccloud\u201d) expressed as a consistent rendering across all devices (\u201cclients\u201d) that form a mesh of cooperating application user interfaces (with device-specific properties) to the same computing environment. Specifically with respect to the applications of the computing environment, the deployable computing environment  may include a representation of the application set, the application resources, and the data objects created thereby. Moreover, the computing environment host  may apply services to the various objects comprising the deployable computing environment , and the common format in which the data objects are stored in the deployable computing environment  may facilitate consistent availability and application of the services regardless of the nature of the data objects applied thereto. However, those of ordinary skill in the art may devise many types of computing environments and computing environment hosts that may be incorporated in the techniques discussed herein.","Where these techniques are utilized in regard to applications  that may access a computing environment (whether or not administered by a computing environment host ), additional advantages may be achieved by configuring the techniques in view of such accesses. As a first example, the exemplary system  may be configured to permit users  to specify the permissions of an application  to interact with the computing environment, and to enforce such permissions by verifying the permission credentials of an application  before fulfilling any access request. In one such embodiment, the application  may comprise at least one operation applicable to the computing environment of the user  according to at least one permission (e.g., a permission authorized by the user  for the application  to access one or more data object, such as read-only access to a particular file in the filesystem or read\/write access to a particular set of data objects or to a particular location.) The computer  of the user  may be configured to store permission tokens that respectively represent a permission to apply the operation(s) of the application  to the computing environment of the user , and the application executing component  may be configured to validate the permission token before applying the operation to the computing environment of the user . For example, a user  may possess a private key in an asymmetric key pair system. Upon authorizing an application  to perform a particular type of operation accessing the computing environment, the computer  of the user  may generate and store a permission token indicating the authorization of this permission, and may cryptographically sign this permission token with the private key of the user . Later, when the application executing component  receives a request from the application  to apply the operation to the computing environment, the application executing component  may receive the permission token from the application  (e.g., from the computer  hosting the application user interface  of the application ), and may validate the permission token before applying the operation to the computing environment of the user . In one such embodiment, the permission token may comprise a permission cookie, which may be stored in a browser cache  of a web browser  that may be delivered to the application host  along with any request issued by the user  to the application  through the application user interface . Additionally, the application host  may be involved in the permission token model, e.g., by receiving from the user an authorization of the permission to apply the operation of the application  to the computing environment, and in response generating the permission token indicating such permissions and sending such permission tokens to the computer .","As a second example of this third aspect, the application host  may permit the user  to create a computing environment by selecting applications  to be installed, and may install the applications  within the computing environment for presentation within an aggregated application user interface, such as a desktop that includes separate application user interfaces for separate applications  that may execute concurrently on the application host . In this set of examples, the exemplary system  may include an application installing component, which may be configured to, upon receiving a request from the user  to install an application , install the application  within the computing environment of the user . Alternatively or additionally, the exemplary system  may include an application cataloging component, which may be configured to present to the user  at least one application  stored in the application store  and installable within the computing environment of the user  (e.g., a set of applications  that the application host  permits the user to select for installation and execution within the user's computing environment.) Alternatively or additionally, the exemplary system  may include an application receiving component, which may be configured to, upon receiving an application  from an application developer, store the application  in the application store , and to invoke the application registering component  to allocate the distinct subdomain of the application host  for the application . Moreover, upon receiving this application, the application receiving component  might also issue to the application  at least one application authentication credential, which might be provided by the application  (e.g., the application user interface  executing on the computer ) in order to authenticate the application . Alternatively or additionally, the application host  might be configured to promote the authorization of the application  to access the computing environment. For example, if an application involves at least one operation applicable to the computing environment of the user  that may be performed only with the permission of the user , the application host  might identify such permissions upon installing the application , and may query the user  to authorize such permissions. In one such embodiment, the application installing component might be configured, while installing the application , to present to the user  at least one permission request query requesting an authorization of the permission of the application , and upon receiving the authorization from the user, to store the authorization (e.g., as a permission token stored in a browser cache of a web browser on the computer .) Those of ordinary skill in the art may devise many ways of configuring the application host  to interact with the computing environment of a user on behalf of applications  according to the techniques discussed herein.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 8","FIG. 8"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 8","FIG. 5"],"b":["230","232","232","236","238","152","238","238","14","152","234"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media. The communication connection(s)  may be involved, e.g., in the network communication of the application host  with users  and computers  operated thereby; in the receipt of applications  to be made available on the application host ; and\/or in the allocation of subdomains mapped to the network address of the application host .","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
