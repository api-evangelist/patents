---
title: Operator lock-out in batch process control systems
abstract: A process control system includes module-level attributes that may be used to control access for writing information to unit module objects and module objects. A security check process examines the module-level attributes, which may include OPERMODE and OPERLOCK attributes, the values of which determine whether information may be written to unit module objects or module objects. The values of the module-level attributes may be controlled based on whether a particular module object is being used by the process control system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08671460&OS=08671460&RS=08671460
owner: Fisher-Rosemount Systems, Inc.
number: 08671460
owner_city: Round Rock
owner_country: US
publication_date: 20000925
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates generally to process control networks and, more specifically, to preventing operators from modifying module objects or equipment for use in a process, such as a batch process, during a run of the process.","Process control networks, such as those used in chemical, petroleum or other processes, generally include a centralized process controller communicatively coupled to one or more field devices which may be, for example, valve positioners, switches, sensors (such as temperature, pressure and flow rate sensors), etc. These field devices may perform physical control functions within the process (such as opening or closing a valve), may take measurements within the process for use in controlling the operation of the process or may perform any other desired function within the process. Process controllers have historically been connected to field devices via one or more analog signal lines or buses which may carry, for example, 4-20 milliampere (mA) signals to and from the field devices. More recently, however, the process control industry has developed a number of standard, open, digital or combined digital and analog communication protocols such as the FOUNDATION\u2122 FIELDBUS (hereinafter \u201cFieldbus\u201d), HART\u00ae, PROFIBUS\u00ae, WORLDFIP\u00ae, Device-Net\u00ae and CAN protocols which can be used to implement communications between a controller and field devices. Generally speaking, the process controller receives signals indicative of measurements made by one or more field devices and\/or other information pertaining to the field devices, uses this information to implement a typically complex control routine and generates control signals which are sent via the signal lines or buses to the field devices to thereby control the operation of the process.","Certain types of process control networks, such as those used in batch processes, typically include multiple sets of replicated equipment designed to have the same or similar equipment that performs essentially the same function within the processes. Thus, for example, a cookie manufacturing plant may have multiple sets of mixing equipment (i.e., mixing units), multiple sets of baking equipment (i.e., baking units), and multiple sets of packaging equipment (i.e., packaging units), with some or all of the mixing units, being capable of operating in parallel and of being connected to operate in series with some or all of the baking units and the packaging units.","Typically, a batch process performs a number of different phases or steps in sequence, finishing the first stage before beginning the second stage. Thus, in the cookie manufacturing plant described above, the batch process may run a first phase or step to control the mixing unit, may then run a second phase to run the baking unit on the product made by the mixing equipment and may then run a third phase that controls the packaging unit to package the product produced by the baking unit. Typically, each unit has an associated unit module object, which may be software adapted to represent the state of a unit (e.g., a hardware component). Unit module objects may be algorithms embodied in software instructions that are optimized to coordinate the execution of lower-level modules (hereinafter the lower-level modules will be referred to simply as \u201cmodule objects\u201d). Module objects, as described in further detail hereinafter, may include a variable portion and an algorithm portion. Typically, a module object is designed to carry out a single logical function such as, for example, opening a valve or filling a tank. In short, module objects are used to change the state of a hardware component.","Although the foregoing exemplary batch process for making cookies indicates that each phase operates on one particular unit, this is not necessarily always the case. Depending on the number of steps of each phase, multiple units of equipment may be used to carry out a particular phase. For example, if instead of a batch process being written and used for cookie making, cookie making may be a single phase of a larger batch process, such a phase could control mixing, baking and packaging units.","Each unit (and its associated unit module object) may have one or more module objects associated therewith. Typically, when a unit module object has subordinate module objects, the unit module object may be said to \u201cown\u201d the subordinate module objects. For example, a mixing unit module object may own a number of valves for dispensing ingredients into a mixer, each one of the number of valves may have an associated module object for controlling the position of a particular valve. A module object may include input, processing and output portions. In operation the input portion may receive a signal from a sensor and pass the received signal to the processing portion for processing. The processing portion may compare the received signal to a set point and generate an output based on the difference between the two signals. The output signal from the processing portion is passed to the output portion, which produces an output used to control a piece of hardware (e.g., a valve). For example, during a mixing phase, a valve module object may receive and indication of the volume of milk in the mixer. The processing portion of the module object may compare the milk volume indication to a set point representative of the desired volume of milk in the mixer using a proportional-integral-differential (PID) control routine to determine if additional milk needs to be added to the mixer. Based on the results of the comparison between the milk volume indication and the set point, the module object may control a valve to increase, decrease or stop the flow of milk into the mixer.","In the foregoing example, an additional module object associated with an output valve may be used to control the flow of cookie dough from the mixer by opening a valve during a mixing phase. Individual module objects may be used by different phases in a batch process. Additionally, an operator may desire to change the programming of a particular module object. For example, an operator may change a set point of a module object while cleaning the mixing unit. While changing the programming of a module object may allow an operator to perform necessary functions such as cleaning, maintenance, repair and the like, changing the programming of a module object during the execution of a batch process or phase using that module object may disrupt the operation of that batch process or phase.","Accordingly, operators must be very careful to ensure that a particular module object is not currently in use or scheduled to be used before changing the programming of that module object. For example, an operator may desire to change parameters such as set points, flow rates, timing or other parameters of a particular module object. However, no matter how careful an operator may be, inadvertent reprogramming of module object may occur and may disrupt the execution of a batch process or phase, thereby potentially causing loss or contamination of product (e.g., cookie dough).","In applications other than manufacturing, inadvertent reprogramming of a module object may have more serious consequences. For example, in a module object used in a batch process or phase used to control a nuclear power plant, inadvertent reprogramming may cause a catastrophic accident.","A process control system includes module level parameters contained in unit module objects and module objects. Such parameters may be used to control module object access to prevent inadvertent module object reprogramming. Module object access may be controlled individually on a module-by-module basis or may be hierarchically controlled based on the module objects owned by a unit module object or used by a phase. In particular, module object access may be locked, unlocked or restricted. When a module object is locked, parameters or programming of that module object may not be changed (e.g., information may not be written to that module object). Conversely, when a module object is unlocked, parameters or programming of that module object may be changed (e.g., information may be written to that module object). Restricted access is a combination of both locked and unlocked states, wherein the module object is unlocked for an operator having a proper access code, but is locked for an operator not having the proper access code. The module object level parameters may prevent operators from inadvertently modifying a module object that is or will be used by a batch process or phase, thereby preventing the batch process or phase from inadvertently being disrupted.","According to a first embodiment, the present invention may be a method of controlling access for writing information to a module object for use in a process control system having a unit module object representative of a state of a hardware component, wherein the module object is associated with the unit module object and used to change the state of the hardware component, wherein the unit module object has a unit module object mode attribute having a value. The method may include the steps of determining the value of the unit module object mode attribute and selectively allowing access for writing information to the module object based on the value of the unit module object mode attribute.","In some embodiments, the step of selectively allowing access for writing information to the module object may include a step of allowing access for writing information to the module object when the value of the unit module object mode attribute is in an unlocked state. Additionally, the step of selectively allowing access for writing information to the module object may include a step of not allowing access for writing information to the module object when the value of the unit module object mode attribute is in a locked state. Further, the step of selectively allowing access for writing information to the module object may include a step of determining whether a user has authorization to write information to the module object.","In other embodiments, the module object may include a module object mode attribute having a value and wherein the step of selectively allowing access for writing information to the module object may include a step of controlling access for writing information to the module object based on the value of the unit module object mode attribute and based on the value of the module object mode attribute.","In other embodiments, the unit module object may include a unit module object lock attribute having a value and wherein the step of selectively allowing access for writing information to the module object may include a step of controlling access for writing information to the module object based on the value of the unit module object lock attribute. Additionally, the process control system may include a phase and the step of selectively allowing access for writing information to the module object may include a step of determining the value of the unit module object lock attribute by determining if the unit module object is being used by the phase.","Additionally, the process control system may include a phase including an operator lockout and wherein the step of selectively allowing access for writing information to the module object may include a step of determining the value of the unit module object lock attribute by determining if the operator lockout has been set for the phase using the unit module object. Further, the unit module object may include a unit module object lock attribute having a value and the process control system may include a plurality of module objects that are associated with the unit module object, and wherein the step of selectively allowing access for writing information to the module object includes a step of controlling access for writing information to the plurality of module objects based on the value of the unit module object lock attribute.","According to a second embodiment, the invention may be an access control system for controlling access for writing information to a module object for use in a process control system having a processor and a unit module object representative of a state of a hardware component, wherein the module object is associated with the unit module object and used to change the state of the hardware component, wherein the unit module object has a unit module object mode attribute having a value. The access control system may include a memory, a first routine stored on the memory for causing the processor to determine the value of the unit module mode attribute and a second routine stored on the memory for causing the processor to selectively allow access for writing information to the module object based on the value of the unit module object mode attribute.","According to a third embodiment, the invention may be a method of controlling access for writing information to a module object for use in a process control system having a unit module object representative of a state of a hardware component, wherein the module object is associated with the unit module object and used to change the state of the hardware component, wherein the module object has a module object mode attribute having a value. In such an embodiment, the method may include the steps of determining the value of the module object mode attribute and selectively allowing access for writing information to the module object based on the value of the module object mode attribute.","According to a fourth embodiment, the present invention may be a process control system including process control equipment and a module object associated with the process control equipment, wherein the module object includes a parameter used to control the operation of the process control equipment and wherein the module object includes a module object mode attribute for selectively allowing access for writing information to the parameter of the module object.","The invention itself, together with further objects and attendant advantages, will be best understood by one having ordinary skill in the art by reference to the following detailed description, taken in conjunction with the accompanying drawings.","Referring now to , a process control network  includes a process controller  coupled to numerous workstations  via, for example, an Ethernet connection . The controller  is also coupled to devices or equipment within a process (generally designated by the reference numeral ) via an input\/output (I\/O) device (not shown) and a set of communication lines or a bus . The controller , which may be by way of example only, the DeltaV\u2122 controller sold by Fisher-Rosemont Systems, Inc., is capable of communicating with control elements, such as field devices and function blocks within field devices distributed throughout the process  to perform one or more process control routines to thereby implement desired control of the process . These process control routines may be continuous or batch process control routines or procedures. The workstations  (which may be, for example, personal computers) may be used by one or more engineers or operators to design process control routines to be executed by the controller , to communicate with the controller  so as to download such process control routines, to receive and display information pertaining to the process  during operation of the process  and to otherwise interact with the process control routines executed by the controller . Each of the workstations  includes a memory  for storing applications, such as configuration design applications, and for storing data, such as configuration data pertaining to the configuration of the process . Each of the workstations  also includes a processor  that executes the applications to enable a user to design process control routines and to download these process control routines to the controller . Likewise, the controller  includes a memory  for storing configuration data and process control routines to be used to control the process  and includes a processor  that executes the process control routines to implement a process control strategy. If the controller  is a DeltaV controller, it may provide a graphical depiction of the process control routines within the controller  to a user via one of the workstations  illustrating the control elements within the process control routine and the manner in which these control elements are configured to provide control of the process .","In the example process control network  illustrated in , the controller  is communicatively connected via the bus  to two sets of similarly configured equipment, each set having a reactor unit referred to herein as Reactor01 (R1) or Reactor02 (R2), a filter unit referred to herein as Filter01 (F1) or Filter02 (F2) and a dryer unit referred to herein as Dryer01 (D1) or Dryer02 (D2). Reactor01 includes a reactor vessel , two input valves  and  connected so as to control fluid inlet lines providing fluid from, for example, a headtank (not shown) into the reactor vessel  and an output valve  connected so as to control fluid flow out of the reactor vessel  via an outlet fluid line. A device , which may be a sensor, such as a temperature sensor, a pressure sensor, a fluid level meter, etc. or some other equipment such as an electrical heater or a steam heater, is disposed in or near the reactor vessel . The Reactor01 is coupled, via the valve , to the Filter01 having filter equipment  which, in turn, is coupled to the Dryer01 having dryer equipment . Similarly, the second set of equipment includes the Reactor02 that has a reactor vessel , two input valves  and , an output valve  and a device . The Reactor02 is coupled to the Filter02 having filter equipment  which, in turn, is coupled to the Dryer02 which has dryer equipment . The filter equipment  and  and the dryer equipment  and  may have additional control elements (such as heaters, conveyor belts and the like), sensors, etc. associated therewith.","As illustrated in , the controller  is communicatively coupled to the valves -, -, to the devices , , to the filters ,  and to the dryers  and  (and to the other equipment associated therewith) via the bus  to control the operation of these elements to perform one or more operations with respect to these units. Such operations may include, for example, filling the reactor vessels, or dryers, heating the material within the reactor vessels or dryers, dumping the reactor vessels or dryers, cleaning the reactor vessels or dryers, operating the filters, etc.","The valves, sensors and other equipment illustrated in  may be any desired kind or type of equipment including, for example, Fieldbus devices, standard 4-20 mA devices, HART devices, etc. and may communicate with the controller  using any known or desired communication protocol such as the Fieldbus protocol, the HART protocol, the 4-20 mA analog protocol, etc. Still further, other types of devices may be connected to and be controlled by the controller . Also, other controllers may be connected to the controller  and to the workstations  via the Ethernet communication line  to control other devices or areas associated with the process  and the operation of such additional controllers may be coordinated with the operation of the controller  illustrated in  in any desired manner.","Generally speaking, the process control system of  may be used to implement batch processes in which, for example, one of the workstations  or the controller  executes a batch executive routine or a batch procedure. The batch procedure (which is typically run in one of the workstations ) is a high level control routine that directs the operation of one or more unit procedures, which are sub-routines or processes that operate on a single unit, such as one of the reactor units, the filter units, the dryer units, or other equipment. Each unit procedure (which is also generally run on the workstation ) may perform a series of operations, each of which may perform one or more phases on a unit having an associated unit module. For this discussion, a phase is the lowest level action or step performed on a unit and is typically implemented or executed in one of the controllers , an operation is a set of phases that performs a particular function on the unit and is typically implemented or executed on one of the workstations  by calling a series of phases, while a unit procedure is a series of one or more operations performed on a single unit and is typically implemented as a set of operation calls. As a result, any unit procedure can include one or more phases and\/or one or more operations. In this manner, the batch executive routine performs different steps or stages (i.e., unit procedures) needed to produce a product, such as a food product, a drug, etc.","To implement different unit procedures, operations and phases, the batch procedure uses what is commonly referred to as a recipe that specifies the steps to be performed, the amounts and times associated with the steps and the order of the steps. Steps for one recipe might include, for example, filling a reactor vessel with the appropriate materials or ingredients, mixing the materials within the reactor vessel, heating the materials within the reactor vessel to a certain temperature for a certain amount of time, emptying the reactor vessel and then cleaning the reactor vessel to prepare for the next batch run, running a filter to filter the output of a reactor and then running a dryer to dry the product created in the reactor vessel. Each of the series of steps associated with a different unit defines a unit procedure of the batch run and the batch executive routine or batch procedure within the controller  will execute a different control algorithm for each one of these unit procedures. Of course, the specific materials, amounts of materials, heating temperatures and times, etc. may be different for different recipes and, consequently, these parameters may change from batch run to batch run depending on the product being manufactured or produced and the recipe being used. Those skilled in the art will understand that, while control routines and configurations are described herein for batch runs in the reactor units, the filter units and the dryer units illustrated in , control routines may be used to control other desired devices to perform any other desired batch process runs or to perform continuous process runs, if so desired.","As will also be understood by those having ordinary skill in the art, the same phases, operations or unit procedures of a batch process can be implemented on each of the different reactor units of  at the same or at different times. Furthermore, because the reactor units of  generally include the same number of and types of equipment (i.e., they belong to the same unit class), the same generic phase control routine for a particular phase may be used to control each of the different reactor units, except that this generic phase control routine has to be modified to control the different hardware or equipment associated with the different reactor units. For example, to implement a fill phase for Reactor01 (wherein the reactor unit is filled), a fill control routine will open one or more of the input valves  or  for a certain amount of time, for example, until the fluid level meter  senses that the vessel  is full. However, this same control routine may be used to implement a fill phase for Reactor02 by merely changing the designation of the input valve(s) to be the valves  or  instead of the valves  or  and by changing the designation of the fluid level meter to be the fluid level meter  instead of the fluid level meter .","The object structure or tree of  illustrates specific objects within boxes while general categories of objects (or object types) are indicated above the objects in the tree with no box. As illustrated in , the process control network  includes one or more areas which may be, for example, buildings or other geographical area designations within a plant. In the object tree of , the process has two area objects named Building01 and Building02. Each area object may be divided into process cells, each of which identifies a different aspect of the process being performed in the area or a set of interconnected equipment in the area. The Building01 area object of  is illustrated as including at least two process cell objects designated Cell01 and Cell02. Each cell object may include zero, one or more unit classes, which identify different categories or groupings of hardware used in the process cell.","A unit class is a named object that holds a common configuration of a set of replicated equipment and, more particularly, is a collection of units that have very similar, if not identical, process instrumentation, each of which performs a very similar, if not identical, function within a process. Unit class objects are typically named to describe the types of units within the process control system to which they belong.  illustrates a HeadTank unit class, a Reactor unit class, a Filter unit class and a Dryer unit class associated with the Cell01 object. Similar unit classes would be found in Cell02 while other groupings of units could be associated with other cells. Of course, in most process control networks, many other types of unit classes will be provided or defined as well.","As illustrated for the Reactor unit class of , each unit class object may have unit module objects and phase class objects (i.e., phases) associated therewith. Unit module objects generally specify certain instances of replicated hardware within the named unit class while phase classes generally specify the phases that can be applied to the unit module objects associated with the unit class. More particularly, a unit module object may be a named software object that holds all of the variables and unit phases for a single process unit and is typically named to identify specific process equipment. For example, the Reactor unit class of Cell01 of  has the R1 and R2 phase objects, which correspond to the Reactor01 and Reactor02 unit modules illustrated in . The HeadTank unit class of Cell01 includes the single unit module of HT1. Similarly, Filter unit class of Cell01 has the specific filter module F1 while the Dryer unit class of Cell01 has the dryer units of D1 and D2 associated therewith. Similarly, the Cell02 will have unit classes of a HeadTank (having a single unit module of HT1), a Reactor (having a single reactor unit module of R3), a Filter (having filter unit modules F2 and F3).","As shown in , each unit phase object may have one or more associated module objects, each of which may include input, processing and output portions as well as a portion that may monitor a set point (which may or may not be included within the processing portion). For example, the unit phase object 1 (which may be considered to be a unit module object) may own module objects 1 and 2. Additionally, unit phase object 2 (which may also be considered to be a unit module object) may own module object 2. As will be appreciated by those having ordinary skill in the art, module objects may be associated with one or more different unit module objects or unit phase objects. Generally, although a particular module object is associated with two or more different unit module objects, only one of those unit module objects may use the particular module object at a given time. Any module object that is associated with a unit module object may be referred to as being owned by that unit module object.","Phase classes are named objects that hold the common configuration for a phase that can run on the multiple units belonging to the same unit class and, if desired, on multiple different unit classes. In essence, each phase class is a different control routine that is created and is used by the controller  to control unit modules within the same or different unit classes. Typically, each phase class is named in accordance with the verb that describes an action performed on a unit module. For example, as illustrated in , the Reactor unit class has a Fill phase class which is used to fill any one of the reactor vessels  or  of , a Heat phase class which is used to heat any one of the reactor vessels  or  of , a Dump phase class which is used to empty any one of the reactor vessels  or  of , and a Clean phase class which is used to clean any one of the reactor vessels  or  of . Of course there can be any other phase classes associated with this or any other unit class. While no specific phase classes are illustrated in  for the HeadTank, Filter and Dryer unit classes, at least one phase class exists for each and is used by a batch procedure to implement a part of a batch process, unit procedure or operation using the unit module object with which the phase class is associated.","A phase class may generally be thought of as a subroutine to be called by an operation of a unit procedure (all within a batch executive routine) to perform some function needed in an overall batch process, as defined by the recipe for that batch process. A phase class may include zero or more phase input parameters, which are basically the inputs provided to the phase class subroutine from the batch executive routine or another phase class, zero or more phase output parameters which are basically the outputs of the phase class subroutine passed back to the batch executive routine or to another phase class, zero or more phase messages, which may be messages to be displayed to the user regarding the operation of the phase class, information related to other phase classes with which this phase class is associated in some manner, and zero or more phase algorithm parameters which cause parameters to be created in phase logic modules or unit phases based on this phase class. (Unit phases are simply the instantiated versions of the phase class for a particular unit.) These phase algorithm parameters are used as temporary storage locations or variables during the execution of the phase and are not necessarily visible to the user or to the batch executive routine. Each phase includes one or more phase algorithm definitions (PADs) which, generally speaking, are the control routines used to implement the phase. Also, each phase class has a list of associations to zero, one, two or more unit classes, and this list defines the unit classes for which this phase class and, consequently, the PAD of the phase class, can be applied. Thus, the same phase class can be associated with the same unit classes of different process cells or with different unit classes of the same or different process cells or equipment trains.","Referring again to the unit modules in , each unit module object includes zero or more unit tag objects (UT) or parameters having initial values. The UT objects are illustrated only for the R1 and R2 modules in . These parameters may correspond to settings and configuration parameters of the equipment associated with the unit module. These unit tags may define, for example, the capacity of the unit, the materials of which the unit is made, the unit manufacturer, or any other data or parameters associated with the unit. This data can be fixed, such as manufacturing data, or variable, such as the last time the unit was used, the last process or material placed in the unit, etc. Still further, each unit module object may have alarms, resource identifications, a control display (such as a human-machine interface picture), a list of the resources that this unit module requires, process cell information, etc. associated therewith.","As is known, a batch control routine or batch procedure is created to perform a particular batch process on a group or set of equipment which may include, for example, any of the reactor units (R1, R2, R3, R4), the filter units (F1, F2, F3) and the dryers (D1, D2, D3). Generally, such a batch procedure will call or implement one or more unit procedures or unit module objects, each of which may be associated with a particular unit and which may own one or more module objects, when that unit procedure needs to be executed during the overall batch procedure. However, instead of specifying the particular units to be used in each of the different unit procedures when the batch procedure is written or first started to be executed, the batch procedure may include a dynamic selection routine that selects a unit to be used for each particular unit procedure or stage of a batch procedure when that unit procedure or stage is to be performed. The timing of this selection may be long after the batch procedure is written and first started to run. In fact, in some instances, the dynamic unit selection for later stages of a batch procedure may occur hours or even days after a batch procedure is first started.","Generally speaking, a batch procedure will be written to call different unit procedures or unit modules associated with different sets (or sometimes the same set) of units or equipment. When written, the batch procedure can specify a certain or particular process cell for which it is to be run, or it can be written to allow a user or operator to select a process cell to be used at the start of the batch procedure. However, once a particular process cell is selected and the batch procedure is started, the batch procedure is limited to using equipment or unit modules associated with the selected process cell.","Of course, when creating or writing the batch procedure, an engineer may simply have the batch procedure call the dynamic unit selection routine whenever a new unit procedure is to be performed. The engineer may create a unit allocation table object for each unit procedure, unit class, unit object, etc. to be used by the selection routine to dynamically select units. This unit allocation table may, for example, include a suitability expression and a priority expression to be implemented for the associated unit procedure, unit classes, unit modules, etc. The engineer must also assure that the unit tags for each unit module includes the unit parameters needed by the selection routine. The engineer can then download the batch procedure, the selection routine, the unit allocation tables and the unit tags to the appropriate databases within the appropriate controller  and\/or workstation , at which time the batch procedure can be executed.","Referring now to , a depiction of a user interface  may include a phase diagram graphical depiction  in flowchart form including various boxes representative of the steps of a phase. Such a user interface  may be similar to a user interface that may be displayed on a video display of a workstation (e.g., ) while an operator designs or monitors a phase or batch process. The steps represented by the various boxes in the phase diagram may be carried out using various unit module objects and\/or module objects.","The user interface  may also include an operator lockout check box , representative of a parameter that allows a user to enable and disable locking features of unit module objects and\/or module objects when the unit module objects and\/or module objects are used by the phase represented by the flow diagram  shown on the user interface . As used herein, the term \u201clocked\u201d means information may not be written to a unit module object or module object and \u201cunlocked\u201d means information may be written to a unit module object or a module object. Information to be written to module objects may include, but is not limited to, parameters such as set points, flow rates, timing or other parameters. For the purposes of this disclosure, a particular unit module object and\/or a module object is referred to as owned by a particular phase when that phase uses that particular unit module object and\/or module object during execution of the phase. In particular, to prevent the disruption of phase operation, access to unit module objects and\/or their associated module objects may be advantageously controlled through the use of the check box . For example, when an operator designing or modifying a phase enables the lockout feature through the use of the check box , the unit module objects and\/or module objects owned by a particular phase may be locked when that phase is active. A phase may have various modes of operation during which the phase may be considered active. For example, a phase may be considered active when the phase is running, holding, stopping, aborting or restarting. When a phase is idle, complete, stopped or aborted, module objects owned by its unit module objects may not be locked. Alternatively, unit object and\/or module objects may be locked even when a phase is not operating.","As shown in , a unit module object  may include an OPERLOCK attribute, parameter or field  and a OPERMODE attribute, parameter or field , each of which represent attributes that may be used to control operator access to unit module objects and\/or module objects owned by unit module objects. The OPERLOCK attribute is a module-level name set parameter included in each unit module object and the OPERMODE attribute is a module-level name set parameter included in each unit module object and\/or module object. The OPERMODE and OPERLOCK fields ,  may have pull down menus that may be used by a user to fill the fields ,  with different values. Alternatively, the OPERMODE and OPERLOCK fields ,  may be operated on (i.e., locked, unlocked, etc.) by portions of software. Also shown in  are three module objects , ,  that are owned by the unit module object . Each of the module objects , ,  has an OPERMODE field . Values entered in the OPERLOCK and OPERMODE fields ,  control the state of a unit module object and\/or module object. For example, a unit module object or module object may be locked or unlocked based on the values entered in the OPERLOCK and OPERMODE fields , . Further detail regarding operator access and how it may be controlled using the OPERLOCK and OPERMODE fields , , will be provided with respect to , A and B and their accompanying description provided below.","The OPERLOCK field  may have pull down menu items that may include LOCKED, UNLOCKED and RESTRICTED values , , , respectively, which may be selected by an operator. For example, an operator may use a mouse, a keyboard or some other input device at a workstation  to select a value from the pull down menus. Alternatively, the value of the OPERLOCK field  may calculated or evaluated based on the operator lockout check box  () and the value of the OPERMODE field , which will be described in further detail below. For example, when an operator edits or creates a phase, if the operator selects the operator lockout check box , the OPERLOCK field  of the unit module object  may be filled in with the LOCKED value when a phase using that unit module object  begins. Alternatively, the OPERLOCK field  of the unit module object  may be controlled independently of whether or not a phase using the unit module object  is running or may track the state of the OPERMODE field . If the OPERMODE field  of the unit module object  and the modules , ,  are properly set (as described in detail below), the OPERLOCK field  may be used to control access to the unit module  and the modules , , . Accordingly, the OPERLOCK field  may be advantageously used to prevent an operator from disrupting a phase by changing the software or attributes of the unit module object  or the module objects , , . The operation of the OPERLOCK field  and its evaluation will be described below in further detail with respect to .","The OPERMODE field , which may be included in the unit module object  and\/or the module objects , , , may include pull down menus including values of LOCKED, UNLOCKED, RESTRICTED or AUTOMATIC as represented by reference numerals , ,  and , respectively, in . If the OPERMODE field  has a value of LOCKED, all write attempts to that unit module object and\/or a module object owned by that unit module object will be prevented. Therefore, an operator is prevented from making changes to a unit module object or module object having an OPERMODE field  specifying a value of LOCKED. Conversely, if the OPERMODE field  has a value of UNLOCKED, writes may be made to the unit module object or module object (possibly subject to a standard security check). If a unit module object or module object has an OPERMODE field  having a value of RESTRICTED, that unit module or module may only be changed if the operator seeking to make the changes has an appropriate authorization code. For example, an operator may need to enter a valid code, personal identification number (PIN) or password into a workstation  before the operator will be allowed to make changes to restricted objects or modules.","The OPERMODE field  of unit module objects and module objects may also have a value of AUTOMATIC. While operation of the OPERMODE field  having values of LOCKED, UNLOCKED and RESTRICTED may be substantially similar between the unit module object and module objects (e.g., changes may be allowed, prevented or based on restricted access), an OPERMODE field  value of AUTOMATIC may function slightly differently depending on whether the OPERMODE field  is located in a unit module object  or in a module object , , .","If the OPERMODE field  for the unit module object  has a value of AUTOMATIC, the unit module object  will be either locked or unlocked depending on the OPERLOCK state of the unit module object . Detail regarding the evaluation of the OPERLOCK state is provided below in conjunction with the description of . For example, if the OPERMODE field  of the unit module object  has a value of AUTOMATIC and the OPERLOCK field  has a value of LOCKED, the unit module object  will be locked and, therefore, an operator will be prevented from making changes to the unit module object . In instances in which the OPERMODE field  of the unit module object is set to AUTOMATIC, the value of the OPERLOCK field  may be determined based on whether a phase using the module object is operating. Conversely, if the OPERMODE field  has a value of AUTOMATIC and the OPERLOCK field  has a value of UNLOCKED, an operator will be able to make changes to the unit module object .","If the OPERMODE field  in a module object (e.g., the module object ) has a value of AUTOMATIC, the state of the module object  (e.g., locked, unlocked or restricted) is determined based upon the OPERMODE field  value of the unit module object  that owns the module object . For example, referring to , if the OPERMODE field  of the module object  has a value of AUTOMATIC, the module object  will determine its state by evaluating the OPERLOCK field . Accordingly, access to module objects may be controlled hierarchically by controlling access to the unit module objects that own various module objects.","When both of the OPERMODE fields  of the unit module object  and the module object  have a value of AUTOMATIC, the state of the module object  will be controlled by the OPERLOCK field  of the unit module object . For example, if the OPERLOCK field  has a value of LOCKED, the module object  will be locked. Conversely, if the OPERLOCK field  of the unit module object  has a value of UNLOCKED, the module object  will be unlocked.","Because both OPERLOCK and OPERMODE are module-level parameters, multiple phases could coordinate their operation to change OPERLOCK and OPERMODE parameters of various module objects and\/or unit module objects. For example, a phase could lock a module object by writing a LOCK value to the OPERMODE of the module object at the beginning of the phase and could place the module object back into automatic mode by writing an AUTOMATIC value to the OPERMODE of the after the phase has substantially completed.","Turning now to , a unit module object OPERLOCK determination function  includes various steps or procedures that are represented by various blocks. The steps or procedures shown in  may be carried out using software instructions written in a suitable language, wherein the software instructions may be executed on a processor such as may be included in the controller  or the workstations . A unit module object may periodically determine a value of its OPERLOCK attribute so that the OPERLOCK attribute of the unit module object may be read by various other portions of software including the security check process software that will be described in connection with .","Generally, for unit module object OPERMODE field values of LOCK, UNLOCK and RESTRICTED, the OPERLOCK attribute tracks the value of the OPERMODE field  of the unit module object  (). However, when the OPERMODE field  of the unit module object  has a value of AUTOMATIC, the value of the OPERLOCK attribute is determined based on whether the unit module object is in use by a phase and whether the operator lockout check box  () of that phase is selected.","Referring again to , at a block , the process  determines if the OPERMODE attribute of the unit module object  has a value of LOCKED. If the OPERMODE attribute has a value of LOCKED, control passes from the block  to a block , which sets the OPERLOCK attribute of the unit module object  equal to LOCKED (i.e., the same value as the OPERMODE attribute) and passes control to a block  to end the process . If, however, the OPERMODE attribute does not have a value of LOCKED, the block  passes control a block .","The block  determines if the value of the OPERMODE attribute is set to UNLOCKED. If the block  determines that the OPERMODE attribute is set to UNLOCKED, control passes from the block  to a block , which sets the OPERLOCK attribute to UNLOCKED (i.e., the same state as the OPERMODE attribute). After block  completes its execution, the block  passes control to a block , which ends the process . If the block  determines that the OPERMODE attribute of the unit module object  is not set to UNLOCKED, control passes from the block  to a block .","Like blocks  and , the block  tests the value of the OPERMODE attribute. The block , however, tests to determine if the OPERMODE attribute is set to RESTRICTED. If the block  determines that the OPERMODE attribute is set to RESTRICTED, control passes from the block  to a block , which sets the value of the OPERLOCK attribute equal to RESTRICTED. After execution of the block  is complete, control passes to a block , which ends execution of the process .","If the answers to the queries set forth in blocks ,  and  are all \u201cno,\u201d control will eventually pass to a block . Because blocks ,  and  test for the unit module object OPERMODE attribute to be equal to LOCKED, UNLOCK and RESTRICTED, respectively, if execution of the process  reaches block , the OPERMODE attribute must be equal to AUTOMATIC. The block  determines if a phase is currently using the unit module object  and, if the unit module object is currently being used, if the operator lockout check box  () for the phase using the unit module object  is selected. This is possible because each module knows the identities of the unit modules that own it. If the unit module object  is in use and the operator lockout check box  of the phase using the unit module object  is selected, control passes to a block . The block  sets the OPERLOCK attribute equal to LOCKED and passes control to a block , which ends execution of the process .","While the process  shown in  is illustrated as having the queries shown as blocks , ,  and  in a particular order, those having ordinary skill in the art will readily recognize that the ordering of the queries may be changed. For example, the query performed by the block  may be performed after either of the queries performed by the blocks  or . As a further example of how the queries may be rearranged in , consider that if the answers to the queries performed by blocks ,  and  are all \u201cno\u201d, the block  assumes that the OPERMODE is in an AUTOMATIC mode. Such an assumption may be made because the OPERMODE has been tested by blocks ,  and  before the execution of block . Accordingly, instead of the last query assuming the OPERMODE is AUTOMATIC, queries may be added or reordered to allow a last query to assume that the OPERMODE is, for example, LOCKED. For example, if the block  of  was changed to test if the OPERMODE is AUTOMATIC instead of LOCKED, when execution of the process  reached the block , the block  could assume that the OPERMODE was LOCKED because the queries performed by the blocks ,  and  all had an answer of \u201cno.\u201d","Returning now to the block , if either the unit module object  is not currently being used by a phase or the operator lockout check box  of a phase using the unit module object  is not selected, control passes from the block  to a block . The block  sets the OPERLOCK attribute equal to UNLOCKED before passing control to a block , which ends the process .","As will be appreciated by the foregoing description of , when the OPERMODE attribute of the unit module object  is set to AUTOMATIC, the blocks - function to automatically set the OPERLOCK attribute either to LOCKED or UNLOCKED based on whether the unit module object  is in use by a phase and whether the operator lockout check box  lockout is selected. As will be described with respect to the security check process  shown in , the OPERLOCK attribute is useful in preventing operator access to unit module objects and\/or module objects during phase operation.","To prevent an operator from inadvertently writing information or parameters such as set points, flow rates, and the like to a unit module object and\/or a module object, a security check process , as shown in  is carried out when an operator desires to write information to a unit module object and\/or a module object. Additional or other security checks may be performed in addition to the process shown in . For ease of description, it will be assumed that a module object to which information is to be written is called a target module object, because it is the target of information that is to be written. Information that is to be written to a unit module object and\/or a module object may have an address thereon, wherein the address may include a parameter name and a field name. A parameter name may be used to identify a data structure into which information is to be written. A field name may be used to identify a particular location within a data structure into which information is to be written. Accordingly, the field name and the parameter names may act as an address for information to be written to the target module.","As will be highlighted in the subsequent description, an operator will have the ability to write information to a target module object based on the OPERMODE attributes of the target module object and the unit module object that owns the target module object. Additionally, the ability to write information to the target module object may depend on the value of the OPERLOCK attribute of the unit module object that owns the target module object.","Returning to , when the process  begins, a block  determines if the field into which the information is to be written is subject to security conditions. If the information to be written to the target module object is not subject to security conditions, control passes to a block , which enables writing to the target module object. After block  is completed, the security check process  ends at block . If, however, the field into which the information is to be written is subject to security conditions, control passes from the block  to a block , which determines if the parameter that is to be written into the target module object is subject to security conditions. If the parameter that is to be written into the target module object is not subject to security conditions, control passes to a block , which enables writing to the target module object and passes control to a block , thereby ending the security check process . Whether a field or a parameter is subject to security conditions may merely be a design choice. For example, acknowledgment of alarms or other status conditions may not be subject to security conditions because an operator may always need to respond to alarms, status conditions and the like. If the information that is to be written to the target module object is a parameter subject to security conditions, block  passes control to a block  which reads the OPERMODE of the target module object.","After the OPERMODE of the target module object has been read at the block , control passes to a block . If the OPERMODE of the target module object is LOCKED, the block  passes control to a block , which disables writing to the target module object and may inform the operator that the target module object is locked. After the block  completes, control passes to a block  at which the security check  ends. If the OPERMODE of the target module object is not locked, the block  passes control to a block  which determines if the OPERMODE of the target module object is RESTRICTED. If the OPERMODE is RESTRICTED, control passes from the block  to a block , which determines whether the operator has a proper key to enable the operator to write information to the target module object. The proper key may consist of a personal identification number (PIN), an operator name, a password or any other suitable piece of information that may be used to identify an operator. If the operator does not have the proper key, the block  passes control to a block , which disables writing to the target module object and may inform the user that he or she does not have access to write to the target module object. After the block  executes, control passes to a block , which ends execution of the security check process . If, however, the operator does have an appropriate key, the block  passes control to a block  that enables information to be written to the target module object and which further passes control to a block , which ends the security process .","If the OPERMODE of the target module is not LOCKED and is not RESTRICTED, control passes from the block  to a block , which determines if the OPERMODE is AUTOMATIC. If the OPERMODE is not set to AUTOMATIC, OPERMODE must be set to UNLOCKED and the block  passes control to block , which enables information to be written to the target module. After the block  completes execution, control passes to a block , which ends the security check process .","If, however, the block  determines that the OPERMODE is set to AUTOMATIC, control passes to a block , which determines the unit module object that owns the target module object. For example, referring back to , if the OPERMODE of the module object  is set to AUTOMATIC, the block  of  would determine that the module object  is owned by the unit module object . This is possible because each module knows the identities of the unit modules that own it. After the unit module that owns the target module object is determined, control passes from the block  to a block , which reads the OPERLOCK of the unit module object. As described in connection with , OPERLOCK is an attribute that may be determined by the OPERMODE of the unit module object and\/or may be based on whether a unit module object is in use by a phase and whether the operator lockout feature of the phase is enabled.","After the OPERLOCK of the unit module object is read by the block , a block  determines whether the OPERLOCK of the unit module object is set to LOCKED. If the OPERLOCK of the unit module object is set to LOCKED, control passes from the block  to a block , which disables information to be written to the target module object. After execution of the block  is complete, control passes to a block , which ends execution of the process .","If the OPERLOCK of the unit module object is not set to LOCKED, the block  passes control to a block , which determines if the OPERLOCK of the unit module object is set to RESTRICTED. If the OPERLOCK of the unit module object is set to RESTRICTED, control passes from the block  to a block , which selectively passes control to either a block  and a block  or to a block  and a block . Collectively, the blocks - perform the functions of determining if an operator has a proper key and\/or password to enable the operator to have access to restricted module objects and enabling or disabling writing ability of the operator based on the key. Blocks - function substantially similarly to block - described hereinbefore.","If the block  determines that the OPERLOCK of the unit module object is not RESTRICTED, the OPERLOCK of the unit module object must be UNLOCKED and control passes to a block , which enables information to be written to the target module object. After the block  is complete, control passes to a block , which ends execution of the process .","As will be appreciated by those having ordinary skill in the art, as with , the blocks within the process  may be rearranged while maintaining the functions needed to carry out the process . For example, the block  may be carried out before the block . Additionally, the blocks ,  and  may be arranged in any order or blocks  and  may be arranged in any order.","As will be appreciated by those having ordinary skill in the art, the security check , as shown in , allows for hierarchal locking of unit module objects and\/or module objects. For example, the OPERMODE of each module object may be LOCKED, UNLOCKED or RESTRICTED, thereby allowing individual control of each module object. Alternatively, the OPERMODE of multiple module objects may be set to AUTOMATIC, whereby access to those module objects may be controlled by the OPERMODE of the unit module object that owns the those module objects. Further, the OPERMODE of the unit module object that owns unit module objects may be set to AUTOMATIC, whereby the OPERLOCK of the unit module object then controls access to the module objects owned by the unit module object having an OPERMODE that is set to AUTOMATIC. When OPERMODE is set to AUTOMATIC, OPERLOCK is controlled by phases using the module and thus, the phases may control writing to the modules owned by a unit module.","It will be understood that process control routines, such as batch procedures, using access control can be used and implemented within any desired process control programming environment, and may be used in any process control system using any desired type of process control communication protocol and, further, may be used to perform any type of function with respect to any type of device(s) or sub-units of device(s). Accordingly, the functions shown in the flowcharts described herein are not necessarily limited to being implemented as shown and, as one having ordinary skill in the art will readily appreciate, may be implemented in a variety of ways. Process control routines using access control as described herein are preferably implemented in software stored in, for example, a controller or other process control device. However, these routines may alternatively or additionally be implemented in hardware, firmware, application specific integrated circuits, programmable logic circuits, etc., as desired. If implemented in software, the process control routines may be stored in any computer readable memory such as on a magnetic disk, an optical disk, or other storage medium, in a random access memory (RAM) or a read only memory (ROM) of a computer, controller, field device, a programmed logic device, etc. Further, such software may be stored in an uncompressed state or in a compressed state, wherein such software must be installed to be operational. Likewise, this software may be delivered to a user or a device via any known or desired delivery method including, for example, over a communication channel such as a wireless link, a telephone line, the Internet, on a transportable medium, such as a computer-readable disk, etc.","While the present invention has been described with reference to specific examples, which are intended to be illustrative only and not to be limiting of the invention, it will be apparent to those of ordinary skill in the art that changes, additions or deletions may be made to the disclosed embodiments without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 6A and 6B"}]},"DETDESC":[{},{}]}
