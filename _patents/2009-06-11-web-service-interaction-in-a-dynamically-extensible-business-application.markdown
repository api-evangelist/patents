---
title: Web service interaction in a dynamically extensible business application
abstract: A method of binding a web service to a business application includes dynamically extending the executable code of the business application while the business application is being executed by a networked web service client device. The dynamic extension of the business application creates a persistent customizable web service interaction between the business application and a selected web service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09253020&OS=09253020&RS=09253020
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09253020
owner_city: Armonk
owner_country: US
publication_date: 20090611
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["Packaged business applications are prevalent in modern information technology. Packaged business applications provide a computer-based user interface that users utilize to perform business functions (e.g., create a ticket, approve a purchase order, update a work order, etc). Many such business applications use business objects to pass data back and forth between a user interface and a persistence layer (e.g., a relational database or XML repository) where data is stored beyond the current session. The business objects of a business application enforce business rules that determine what can or cannot be done with the data embodied within the business objects. The user interface of a business application enables users to perform specific tasks and read or manipulate the data embodied within the business objects.","It is also often necessary for business applications to retrieve, display and consume data that is not normally managed by the native business application. Such data is resident in external applications and can be retrieved using data synchronization, data integration, Application Programming Interfaces (API) or web services.","A web service is a software resource available to a client machine over a network. In a typical scenario, a client machine will invoke a web service by transmitting a request over the network to a server hosting the web service. The server will then execute the web service according to the request made by the client machine, and may transmit a response back to the client machine.","One or more Web services may be used to enrich a business application by integrating data that is external to the application. Nevertheless, developer resources, dedicated development tools, and the authoring of code are traditionally required to design an interface between a packaged business application and a web service.","A method includes dynamically extending a business application while the business application is being executed by a networked web service client device. The extension creates a persistent customizable web service interaction between the business application and a selected web service.","A web service client device includes a processor and memory communicatively coupled to the processor and configured to store executable code for a business application, wherein the executable code for the business application is dynamically extensible at run time by the processor to create a persistent customized web service interaction between the business application and a selected web service available to the web service client device over a network.","A computer program product includes a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code includes computer readable program code configured to dynamically extend a business application while the business application is being executed by a networked web service client device. The extension creates a persistent customized web service interaction between the business application and a selected web service.","Throughout the drawings, identical reference numbers designate similar, but not necessarily identical, elements.","The present specification discloses methods and systems of dynamically extending a business application at run time to create a persistent web service interaction between the business application and a selected web service. The web service interaction may create a policy-based, on-demand, optimized, and context-based integration of the web service into the business application. Advantageously, this web service interaction-based extension may be created by a user during runtime without the use of code.","As used in the present specification and in the appended claims, the term \u201cweb service\u201d refers to a software system designed to support interoperable machine-to-machine interaction over a network.","As used in the present specification and in the appended claims, the terms \u201cextend,\u201d \u201cextensible,\u201d and \u201cextension\u201d refer to the act, ability, and product, respectively, of dynamically modifying a business application during its execution.","As used in the present specification and in the appended claims, the term \u201cweb service interaction\u201d refers to a software interface between a business application and a web service.","As used in the present specification and in the appended claims, the term \u201cbusiness application\u201d refers broadly to any software program directed to managing operations or data of an organization.","As used in the present specification and in the appended claims, the term \u201cbusiness object\u201d refers broadly to a software object that is supported by a business application.","As will be appreciated by one skilled in the art, the present invention may be embodied as a method, system, or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product on a computer-usable storage medium having computer-usable program code embodied in the medium.","Any suitable computer usable or computer readable medium may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to the Internet, wireline, optical fiber cable, RF, etc.","Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java, Smalltalk, C++ or the like. However, the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","With reference now to , a block diagram is shown of an illustrative web service system (). The system () includes a web service client device () in communication with a web service host server () through a network (). Each of the web service client device () and the web service host server () may include a processor, memory communicatively coupled to the processor, and an I\/O module configured to manage communications with external devices. The memory associated with the Web service client device () may store executable code corresponding to a business application (). Hence, the Web service client device () may run the business application () when its processor executes the code in its memory associated with the business application (). Likewise, the Web service host server () may run the Web service () by executing the code in its memory associated with the Web service ().","As described above, Web services can be used to enrich business applications () by integrating data that is external to the application. However, the wide variety of web services available, the inherent differences in protocol used to invoke and read the Web services, and the constant creation of new Web services make it very difficult to establish an \u201cout-of-the-box\u201d software interface between a business application () and any Web service providing data or services that may be useful to the business application ().","For example, the Web service () implemented by the Web service host server () shown in  may be configured to communicate with external processes in the transmission and receipt of XML messages (, ), conforming to a format specified in the Web Services Description Language (WSDL) associated with the Web service (). Despite the potential utility of the Web service () to the business application (), the business application () may not have the native ability to consume the Web service (). Traditionally, business applications () are customized to interact with selected web services by a developer who authors code that must be deployed to the device implementing the business application. Often, this process consumes developer resources, dedicated development tools, and may impact the availability of the business application.","Advantageously, the business application () of the present example may be extended at run-time to create a customized web service interaction module () that generates and recognizes the web service interaction objects associated with the web service () such that the web service () can be exposed to the business application (). As such, the business application () may be seamlessly extended to interact with any web service. Particularly, the principles of the present specification describe a dynamically extensible business application () that enables automatic generation of all artifacts (including user interfaces) to support interaction with a selected web service (), automatic optimization of the schema underlying the selected web service () based on configurable policies, seamlessly binding an invocation of the selected web service into the business application () without any manual application customization, and complete context-based interactions with the selected web service (). Notably, this extension of the business application () can be accomplished by a non-developer user in a single session without restarting the business application () or terminating a current session of the business application ().","Referring now to , a block diagram of an illustrative development sequence () of a web service interaction extension of a business application (, ) is shown. As presented in , the development sequence () may be divided into a design stage () and an execution stage (). Both stages may be carried out during run-time (while the business application (, ) is being executed). A single user () may facilitate completion of both the design stage () and the execution stage (). However, once the web service interaction extension has been designed and persistence within the business application (, ) established, any user (, ) of the business application (, ) may execute the interaction in a run-time environment and derive the benefits thereof. Additionally or alternatively, the business application (, ) may be configured to execute the web service interaction autonomously as needed after the design stage ().","The execution of the web service interaction may involve querying the web service, processing the response from the web service, and applying the returned data into the application. At its core, the interaction is a web service invocation. While a raw web service invocation and processing response data can be performed easily, what is non-trivial is the invocation in a business context. With the interaction of the present specification, the web service invocation is initiated from an enhanced application user interface, parameters from the application can be passed in, the request constructed, the service invoked, the response processed and response data displayed in the user interface. Further, the response data can be applied (inserted\/updated) into the business application from which the interaction was launched.","Referring now to , a block diagram is shown of an illustrative interaction blueprint (IBP) () for a web service interaction extension of a business application (, ). The process of interaction design (, ) may include generating an interaction blueprint () for at least one identified operation of the web service specified in the WSDL and underlying schema. The IBP () is a design-time artifact that represents the collection of all the software entities (, , , , ) of the business application (, ) that must work together to execute the interaction at run-time and their relationship to each other. An optimized object blue print (OBP) () artifact represents an optimized form of the web service schemas and is the foundation on which the interaction is built. An optimized object blue print (OBP) () comprises a representation of request and response in the form of a hierarchy of web service interaction objects (WSIO) and web service interaction attributes. The WSIO is an encapsulated representation of the web service schema element. An invocation end point artifact () may be configured to initiate communication with the web service (, ). An application binding structure artifact () may represent the binding between the business objects of the application (, ) and the optimized object blueprint (), thereby enabling the interaction to be launched and applied from the business application (, ). An application data mapping artifact () may be between attributes of a recognized business object of the business application (, ) and elements of the web service request and response schemas. User interface artifacts () may include all of the user interface components for executing the interaction, such as a launch menu item or button, an interaction dialog, a tab, and other useful user interface controls.","Referring now to , a block diagram is shown of an illustrative design process () for a web service interaction. As previously described, the design process () may be carried out at run-time of the business application (, ) to adapt the business application (, ) to invoke a selected web service (, ) and interpret the response from the web service (, ). The design process () may be performed using a combination of user input and data obtained from the web service description language (WSDL) of the selected web service.","As will be recognized by those having ordinary skill in the art, the WSDL of a web service (, ) is typically an XML-based document following a standardized form that describes the web service (, ) and how it is accessed. Generally the WSDL will include one or more XML schema related to specific operations of the web service (, ).","Accordingly, the WSDL of the selected web service may be parsed and analyzed by a schema processor () to locate the services available from the web service (, ). Each service may be associated with multiple ports, each of which in turn points to the protocol binding. Each binding points to a service interface (also known as PortType), which lists the available operations for the service endpoint. When an operation is selected, the request and response schema elements for the operation are interpreted and optimized by the schema processor () in preparation for generating the Object Blue Print (OBP). The generated Object Blue Print (OBP) will be comprised of a hierarchy of WSIOs. Each WSIO may include attributes (WSIOATTRIBUTE) and a set of children WSIOs. The construction and optimization of this hierachy of WSIOs and WSIOATTRIBUTEs may be performed by applying applicable optimization rules.","It should be noted that in the present example, the schema processor () is explained in the context of XML schema conforming to the W3C recommendation, which is well-known in the art and is available at http:\/\/www.w3.org. Other schema standards for web services exist which may also be applied to the principles of the present specification.","In certain embodiments, the schema processor () may categorize and process schema elements as follows: Any Element (AE), Simple Element (SE), Complex Element (CE), Complex Element with Complex Content (CECC), Complex Element with Mixed Content (CEMC), Complex Element with Simple Content (CESC), and Complex Element with Empty Content (CEEC). Exemplary schema processing and optimization rules for simple elements (SE) found in a schema are described below in Table 1. Each rule is given a name for identification purposes (e.g., SER01). The rules enumerated below are merely illustrative. In alternative embodiments, this rule set may be modified or replaced with an alternate set of processing rules.","In certain embodiments, the schema processor () may categorize and process schema elements as follows: Any Element (AE), Simple Element (SE), Complex Element (CE), Complex Element with Complex Content (CECC), Complex Element with Mixed Content (CEMC), Complex Element with Simple Content (CESC), and Complex Element with Empty Content (CEEC). Exemplary schema processing and optimization rules for simple elements (SE) found in a schema are described below in Table 1. Each rule is given a name for identification purposes (e.g., SER01). The rules enumerated below are merely illustrative. In alternative embodiments, this rule set may be modified or replaced with an alternate set of processing rules.",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Simple Element Rules"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[SER01]"},{"entry":"Any SE with maxOccurs = 1 and is a child to a CE is considered a WSIOATTRIBUTE. If"},{"entry":"minOccurs = 1 the SE is considered a required attribute and if minOccurs = 0 the SE is"},{"entry":"considered optional. The data type for the WSIOATTRIBUTE is dictated by the data type"},{"entry":"of the SE."},{"entry":"[SER02]"},{"entry":"Any SE with maxOccurs = unbounded is considered as a WSIO with itself as the only"},{"entry":"WSIOATTRIBUTE. The data type for the WSIOATTRIBUTE is dictated by the data"},{"entry":"type of the SE."},{"entry":"[SER03]"},{"entry":"Any SE with maxOccurs = N where N represents a positive integer (bounded) is managed"},{"entry":"using the occurrence threshold policy [IOTP]. This policy specifies the value of N above"},{"entry":"which an SE will be considered as a WSIO and less-than-equal to which it will be"},{"entry":"considered to represent N unique WSIOATTRIBUTE each with unique names. The data"},{"entry":"type for the WSIOATTRIBUTE is dictated by the data type of the SE."},{"entry":"[SER04]"},{"entry":"Any SE which represents the document root (root element for the operation request or"},{"entry":"response) is considered as a WSIO with itself as the only WSIOATTRIBUTE. The data"},{"entry":"type for the WSIOATTRIBUTE is dictated by the data type of the SE."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A WSIO which corresponds to a SE will never have any children WSIO."}]}}]}}},"Similarly, exemplary schema processing and optimization rules for complex elements (SE) found in a schema are described below in Table 2:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Complex Element Rules"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[CESCR01]"},{"entry":"Any CESC which has maxOccurs = 1 and which is a child to a CE will be de-"},{"entry":"normalized to N + 1 WSIOATTRIBUTEs of the parent WSIO where N is the number"},{"entry":"of XML attributes the CESC contains. Each CESC attribute will be represented by a"},{"entry":"WSIOATTRIBUTE, the type of which will be dictated by the schema attributes type."},{"entry":"The actual element value is represented by another WSIOATTRIBUTE. The type of"},{"entry":"this latter WSIOATTRIBUTE is dictated by the type of the simple content. If"},{"entry":"minOccurs = 0 then CESC content WSIOATTRIBUTE and the WSIOATTRIBUTEs"},{"entry":"generated from the CESC optional attributes are considered as optional. The"},{"entry":"WSIOATTRIBUTEs generated from the CESC required attributes are considered"},{"entry":"optional with the \u201cdepends\u201d attribute set to the WSIOATTRIBUTE name"},{"entry":"representing the CESC content. If minOccurs = 1 then the WSIOATTRIBUTE which"},{"entry":"represents the CESC content is considered as required. All WSIOATTRIBUTEs with"},{"entry":"corresponding CESC attributes with use = optional will be considered as optional. All"},{"entry":"WSIOATTRIBUTEs with corresponding element attributes with use = required will"},{"entry":"be considered as required."},{"entry":"[CESCR02]"},{"entry":"Any CESC with maxOccurs = unbounded will be considered as a WSIO with N + 1"},{"entry":"WSIOATTRIBUTEs where N is the number of XML attributes the CESC contains."},{"entry":"Each of the CESC attribute will be represented by a WSIOATTRIBUTE, the type of"},{"entry":"which will be dictated by the attributes type. The actual element value is represented"},{"entry":"by another WSIOATTRIBUTE. The type of this WSIOATTRIBUTE is dictated by"},{"entry":"the type of the simple content. The occurrence indicator for the CESC has no role to"},{"entry":"play for determining whether a WSIOATRRIBUTE is required or optional."},{"entry":"WSIOATTRIBUTEs mapped from CESC attributes with use = optional are"},{"entry":"considered optional and those with use = required are considered required. For the"},{"entry":"WSIOATTRIBUTE representing the simple content for CESC the schema analyzer"},{"entry":"looks for the simple content type to determine if it is required or optional. For"},{"entry":"example, a Boolean type would indicate that the WSIOATRIBUTE is required."},{"entry":"[CESCR03]"},{"entry":"Any CESC with maxOccurs = N where N represents a positive integer (bounded) is"},{"entry":"driven by the occurrence threshold policy (IOTP). This policy will dictate the value of"},{"entry":"N above which a CESC will be considered as a WSIO and less-than-equal to which it"},{"entry":"will be considered to represent N unique set of CESC with maxOccurs = 1 which will"},{"entry":"be de-normalized based on the previous policy."},{"entry":"[CESCR04]"},{"entry":"Any CESC which represents the document root [root element for the operation"},{"entry":"request or response] is considered as a WSIO with N + 1 WSIOATTRIBUTEs where"},{"entry":"(N is the number of XML attributes the CESC contains (as per rule CESC 02) and the"},{"entry":"actual element value is represented by another WSIOATTRIBUTE) + 1."},{"entry":"A WSIO which corresponds to a CESC will never have any children WSIO."},{"entry":"[CEECR01]"},{"entry":"Any CEEC will follow all the rules for CESC with the exception that the"},{"entry":"WSIOATTRIBUTE to represent the content of the CE would be a read-only attribute"},{"entry":"with a default value of null (as it has empty content). This is a generated"},{"entry":"WSIOATTRIBUTE and would have no value for the xmlLocation attribute (as it does"},{"entry":"not map to any element\/attribute in the XML document)"},{"entry":"A WSIO which corresponds to a CEEC will never have any children WSIO."},{"entry":"[CECCR01]"},{"entry":"Any CECC is considered as a WSIO. The attributes of the CECC are considered to be"},{"entry":"WSIOATTRIBUTEs of the WSIO. The WSIO may have other WSIOATTRIBUTEs"},{"entry":"generated from applying the SE, CESC and CEEC rules."},{"entry":"A WSIO which corresponds to a CECC may or may not have children WSIOs."},{"entry":"[CEMCR01]"},{"entry":"Any CEMC is considered as a WSIO. The attributes of the CECC are considered to"},{"entry":"be WSIOATTRIBUTEs of the WSIO. An extra WSIOATTRIBUTE [text data type]"},{"entry":"is created to correspond to the simple content of the CEMC. The WSIO may have"},{"entry":"other WSIOATTRIBUTEs generated from applying the SE, CESC and CEEC rules."},{"entry":"[AER01]"},{"entry":"Any elements and attributes are handled through the Any Element Policy [IAEP]"},{"entry":"which allows users to specify a schema for that element. The policy can be used to"},{"entry":"specify the XPath location of the any element in the schema document (for the WSDL"},{"entry":"service operation) and the schema element definition that will be used to substitute"},{"entry":"this any element in that location. The processor first resolves these Any Elements"},{"entry":"based on the IAEP and then follows the SE* and the CE* rules to generate the"},{"entry":"WSIOs\/WSIOATTRIBUTEs. Any attributes will be resolved the exact same way. If"},{"entry":"the processor finds no policy for the any element or the any attribute the processor"},{"entry":"would:"},{"entry":"1. Ignore if any element or the any attribute they are optional."},{"entry":"2. Throw an error if the any element or the any attribute is required"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The WSIO hierarchy can be further optimized by the schema processor () by applying the following exemplary rules:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Rules for Optimization"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"There cannot be any WSIO which has a 1:1 relationship with its parent WSIO"},{"entry":"implemented by WSIOR01:"},{"entry":"[WSIOR01]"},{"entry":"Any child WSIO having maxoccurs = 1 should merge-up with its parent WSIO. The"},{"entry":"merge-up operation is performed by moving all the WSIOATTRIBUTEs of the WSIO to"},{"entry":"its parent WSIO and making all the direct children of the WSIO direct children of the"},{"entry":"parent WSIO. This operation results in the child WSIO having no WSIOATTRIBUTEs"},{"entry":"and no children WSIOs eventually leading to the removal of the child WSIO."},{"entry":"There cannot be any WSIO with 0 WSIOATTRIBUTEs. The following rules would"},{"entry":"address how the processor handles those WSIOs with no attributes of its own"},{"entry":"implemented by WSIOR02, WSIOR03 and WSIOR04:"},{"entry":"[WSIOR02]"},{"entry":"If the WSIO root has no attributes and only one WSIO child then the child is merged up"},{"entry":"to the parent effectively removing the root WSIO."},{"entry":"[WSIOR03]"},{"entry":"If the root WSIO has no WSIOATTRIBUTEs and only WSIO children [>1] then the"},{"entry":"processor will add a read-only WSIOATTRIBUTE for the WSIO with a default value of"},{"entry":"null."},{"entry":"[WSIOR04]"},{"entry":"For any non-root WSIO with maxOccurs = unbounded having only WSIO children and no"},{"entry":"WSIOATTRIBUTE the processor will add a read-only WSIOATTRIBUTE for the WSIO"},{"entry":"with a default value of null."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"These rules enumerated in Table 3 may be applied recursively until the optimized WSIO hierarchy is obtained.","The application of these rules to the underlying request and response schemas of the desired web service operation will minimize the number of WSIOs in preparation for the generation of an OBP which arranges the WSIOs into a hierarchical structure.","The schemas may be further optimized by applying policies (, ), or design-time declarations. Policies (, ) may be defined globally so that they apply to all web service interactions of a business application (, ). Additionally or alternatively, policies (, ) may be defined for specific web service interactions. Examples of policies (, ) that may be applied to the OBP are displayed below in Table 4. It should be understood that the policies (, ) summarized in Table 4 are merely exemplary, and other policies may also be applied as may suit a particular application of the principles described herein.",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Policies"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Policy","Purpose"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Interaction Object-","Object Attribute naming policy (IOANP) dictates how the XML element"]},{"entry":["Attribute Naming","and attribute names in the schema are mapped to the WSIO and"]},{"entry":["Policy (IOANP)","WSIOATTRIBUTE name. This policy can be used to specify the"]},{"entry":[{},"maximum allowed length for an attribute name as well as the prefix for"]},{"entry":[{},"WSIO and WSIOATTRIBUTE names derived from XML elements and"]},{"entry":[{},"attributes."]},{"entry":["Interaction","Attribute exclusion policy (IATEP) dictates which XML attributes can"]},{"entry":["Attribute","be excluded from the OBP. By default all attributes are included as"]},{"entry":["Exclusion Policy","WSIOATTRIBUTEs in the OBP. This policy can be used to ignore all"]},{"entry":["(IATEP)","attributes which are not required as per the schema or just those"]},{"entry":[{},"attributes that are not required for the interaction and have a default"]},{"entry":[{},"value. The policy does not apply to required attributes."]},{"entry":["Interaction Data","Data typing policy [IDTP] dictates how data types are assigned to each"]},{"entry":["Typing Policy","WSIOATTRIBUTE. The default policy maps schema data types to"]},{"entry":["(IDTP)","entity attribute data types using JAXB standard data type mapping. For"]},{"entry":[{},"example, an xsd:integer and xsd:positiveInteger would both map to"]},{"entry":[{},"WSIOATTRIBUTE data type Integer. This policy can be used to make"]},{"entry":[{},"the system recognize xsd:positiveInteger as a WSIOATTRIBUTE"]},{"entry":[{},"separate type than xsd:integer. This can be effectively used for those"]},{"entry":[{},"systems that support stricter data typing."]},{"entry":["Interaction","A customizable policy that dictates how a distinction will be made"]},{"entry":["Occurrence","whether a schema simple type will remain a WSIA or be promoted to a"]},{"entry":["Threshold Policy","WSIO"]},{"entry":"(IOTP)"},{"entry":["Interaction Any","Any element policy [IAEP] handles any element and attributes. This"]},{"entry":["Element Policy","policy allows users to specify a schema for that element. The policy can"]},{"entry":["(IAEP)","be used to specify the XPath location of the any element in the schema"]},{"entry":[{},"document (for the WSDL service operation) and the schema element"]},{"entry":[{},"definition that will be used to substitute this any element in that location."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"After the schema processor () has been executed on the schema in the WSDL of the web service (, ), a user configuration () of the web service interaction may occur. This user configuration may be optional in certain embodiments. In this step of the design process (), a user may consciously discard optional elements of the request or response schema if they are irrelevant to the interaction being designed. The removal of these elements may simplify the interaction as well as help the user focus on key data from the web service (, ).","Following the optional user configuration step () of the process (), a schema optimizer () may further reduce and optimize the WSIOs of the schemas. In certain embodiments, this optimization may be carried out in a series of three passes, each of which applies a specific type of optimization to the structure of the OBP. For example, the first pass may apply Rule WSIOR01 of Table 3 to the WSIOs, the second pass may apply Rules WSIOR02 and WSIOR03 to the WSIOs, and the third pass may apply Rule WSIOR03 to the WSIOs. Thus, the schema optimizer () may further reduce and optimize the WSIO hierarchy of the OBP.","Once the WSIOs have reached their final, optimized number and hierarchy, flow may move to an artifact generation stage (), where each of the artifacts of the interaction blueprint (, ) is generated, including the business objects and user interfaces native to the business application (, ).","Binding routines () may be run on the artifacts. Binding is the mechanism by which the interaction with the web service is glued to the business application (, ) in a fully usable manner. Binding is characterized by the choice of business application and the launch point of the interaction from within the chosen business application (, ).","Mapping may be between a set of related WSIOs that represent the web service (, ) and a set of business objects native to the business application (, ). Every business object and WSIO object includes attributes, and the mapping is configured at the attribute level. In certain embodiments, the mapping may be performed interactively by a user through a user interface.","In a request mapping routine (), one or more business object is mapped to a WSIO of the OBP. A business object of the business application (, ) may be designated as the Interaction Root which is used as a starting object for the request and response mapping. All other source business objects should be related to the root business object. In mapping, cardinality may be driven by the request WSIO root object. Thus, if the cardinality of the request WSIO root object is unbounded, a user may have the choice of either mapping a single application primary business object to a single instance of the WSIO object or to a set of WSIO objects. If the cardinality of the WSIO root object is single, then only one WSIO object can exist for each application primary object.","Table 5 below provides exemplary rules that may be applied during a request binding routine ():",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Request Mapping Rules"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[REQMR01]"},{"entry":"There can be only one source object for a Request WSIO in OBP. "},{"entry":"The mapping is driven by cardinality of source object; that is, the"},{"entry":"number of WSIO records will be the same as the number of records"},{"entry":"in the Source Object."},{"entry":"[REQMR02]"},{"entry":"Source Object for a WSIO can be the same as Source Object for"},{"entry":"that WSIO's parent. For a WSIO and its parent sharing the same"},{"entry":"Source Object, only one WSIO record will be created for each such"},{"entry":"WSIO parent record."},{"entry":"[REQMR03]"},{"entry":"Source Object for a WSIO should be related to Source Object for that"},{"entry":"WSIO's parent. The number of WSIO records will be equal to number"},{"entry":"of records in Source Object set."},{"entry":"[REQMR04]"},{"entry":"All attributes in the Source Object are available for mapping."},{"entry":"[REQMR05]"},{"entry":"Any related object (from current source object) attribute can be mapped"},{"entry":"to current WSIO attribute."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In a response mapping routine (), the mapping occurs between at least one WSIO received from the web service (, ) and at least one target business object of the business application (, ). A business object of the business application (, ) may be designated as an Interaction Root, used as a starting object to apply the data from the WSIO back to the business application (, ). In certain embodiments, the Interaction Root may be a Primary Object of the business application. In such cases, all WSIO objects received from the web service (, ) may be added to the Primary Object. Alternately, a business object related to an application Primary Object may be the Interaction Root. In this case, all keys of the Interaction Root will be mapped to the corresponding attributes of the WSIO in the response OBP.","Table 6 below provides exemplary rules that may be applied during a response binding routine ():",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Response Mapping Rules"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[RESMR01]"},{"entry":"The can be only one WSIO in Response OBP for a Target Object."},{"entry":"Driven by cardinality of WSIO: number of records in Target Object"},{"entry":"will be the same as number of records in the WSIO Response OBP."},{"entry":"[RESMR02]"},{"entry":"One WSIO in Response OBP can be mapped to multiple related Target"},{"entry":"Objects. For Target Source Object and its parent sharing the same WSIO"},{"entry":"in Response OBP, only one Target record will be created for each such"},{"entry":"Target parent record."},{"entry":"[RESMR03]"},{"entry":"Target Object for a WSIO in Response OBP should be related to Target"},{"entry":"Object for that WSIO's parent. Number of records in Target Object Set"},{"entry":"will be equal number of WSIO records."},{"entry":"[RESMR04]"},{"entry":"All attributes in the WSIO in Response OBP are available for mapping"},{"entry":"[RESMR05]"},{"entry":"Any related object [from current WSIO] attribute can be mapped to"},{"entry":"current Target Object attribute."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 5","FIG. 6","FIG. 1","FIG. 1","FIG. 1"],"b":["125","120","125"]},"Returning to , once the request and response bindings have been configured, the persistence of the web service interaction extension artifacts may be established in the business application (, ) to allow the interaction to be executed as needed in the future. The persistence may be generated automatically without additional user intervention.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 7","FIG. 1","FIG. 3"],"b":["120","305","310","315","320","325"]},"In the present example, a business application container or host environment () hosts several business applications (, , , ). The web service interaction execution sequence is shown for a purchase order business application (). In the sequence, the purchase order business application () launches an interaction through a user interface () automatically generated without user intervention in the business application (). The user interface may have been originally configured when the interaction was designed. Accordingly, the request binding artifact is executed to bind data from one or more business objects of the business application () to one or more WSIO request objects. A request object is initialized () and OBP-based XML () is generated and transmitted by the service endpoint artifact () to the web service (), which responds with Service Invocation Response XML (). The Service Invocation Response XML data is stored in an initialized response WSIO object (), which is mapped by the response binding artifact to one or more business objects of the business application ().","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","Having thus described the invention of the present application in detail and by reference to embodiments thereof, it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The accompanying drawings illustrate various embodiments of the principles described herein and are a part of the specification. The illustrated embodiments are merely examples and do not limit the scope of the claims.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
