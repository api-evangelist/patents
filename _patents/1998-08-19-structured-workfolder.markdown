---
title: Structured workfolder
abstract: A structured WorkFolder for organizing electronic documents in a self-contained data repository comprising sections for grouping related documents, and placeholders for indicating documents expected to be placed in the WorkFolder. The WorkFolder allows users of local or distributed data environments to gather and organize a collection of documents and supporting meta-data in a single data object that can be simultaneously accessed and updated by multiple users. The WorkFolder may also contain one or more task entries that are used to track the progress of work related to a WorkFolder. Additionally, supporting meta-data in the form of tasks, information fields, threaded discussions, as well as a detailed history log of all changes made to the WorkFolder can be stored in the WorkFolder.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07447712&OS=07447712&RS=07447712
owner: Global 360, Inc.
number: 07447712
owner_city: Dallas
owner_country: US
publication_date: 19980819
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims priority under 35 U.S.C. \u00a7 119 from U.S. Provisional Application Ser. No. 60\/060,225 entitled \u201cStructured Workfolder\u201d, filed on Sep. 28, 1997, the contents of which are hereby incorporated by reference.","This invention relates in general to organizing documents and in particular to a structured WorkFolder for organizing electronic documents.","In many business transactions, it is often necessary to assemble a complex set of documents in order to complete the transaction. Folders are a common way of organizing such documents. Some of the documents may be available from inception of the transaction, while others may be received or created as the transaction progresses. Certain documents may need to be available prior to commencing work on various transaction-related tasks. In addition, a number of people may need to work on the transaction simultaneously, all of whom need concurrent access to the transaction information. It is necessary that all the documents relating to a single transaction be tracked, and that none of the documents required for completion of the transaction be missing.","Using a conventional electronic file system, documents may be organized using a hierarchical arrangement of named folders or directories into which other folders or documents may be placed. Typically, the directories are arranged to group documents by common criteria such as subject matter or a customer ID. The documents may then be accessed directly by users with basic tools such as File Manager, a program that allows a user to navigate a directory tree and select a desired document.","A significant drawback to using a hierarchical file system to organize documents is that the transaction folder is not a separate entity, but is tightly linked to the storage hierarchy of the electronic storage device. This precludes distributing the folder to users who may be outside the organization. It also complicates sharing transaction documents among multiple users in situations where all users do not have access to the same electronic storage devices, as in a distributed processing environment. A further drawback is that file system folders are relatively unstructured, making it difficult to ensure process consistency from transaction to transaction.","Several programs provide for shared structured data objects for use in a collaborative environment. For example, Lotus Notes organizes information as \u201cforms\u201d, where each form is made up of fields that may be of particular data types such as text, number, time, and rich text. Electronic documents can be attached to a Notes form either as embedded or linked documents. However, Lotus Notes does not provide a mechanism to allow users to specify in advance not only where documents of a specific type are to be stored, but also to identify documents specifically expected to be created in the future. Further, Lotus Notes does not provide for a structure flexible enough for optimally organizing and managing collections of transaction documents.","It is an object of the invention to provide a data environment where all documents, supporting data, and history related to a unit of work are grouped together.","It is another object of the invention to provide a data environment where all data associated with a unit of work is easily accessible to many different users.","A further object of the invention is to provide a data environment that provides varying degrees of control or guidance related to process management and data flow.","The above and other objects are accomplished by providing a structured WorkFolder for organizing electronic documents comprising sections for grouping related documents, and placeholders for indicating documents expected to be placed in the WorkFolder. The WorkFolder allows users to gather and organize a collection of documents and supporting meta-data in a single data object that can be simultaneously accessed and updated by multiple users.","According to the invention, documents in a WorkFolder may be images, word processing files, spreadsheets, electronic forms, voice, video, or any other type of format. A document may be attached to a WorkFolder and its contents stored within the WorkFolder, or the WorkFolder may be linked to an \u201cexternal\u201d document via a file system reference, an Open Document Management Application Program Interface (ODMA) link to a document management system, a universal resource locator (URL) address to a Web-based repository, or by any other mechanism that supports links to external data sources.","The WorkFolder may also contain one or more task entries that are used to track the progress of work related to a WorkFolder. Additionally, supporting meta-data in the form of information fields, threaded discussions, as well as a detailed history log of all changes made to the WorkFolder can be stored in the WorkFolder. The WorkFolder provides process-related functionality by keeping track of tasks, including assignments and deadlines, by executing scripted macros either on demand or in response to various events, and by providing for reconciliation of conflicting data updates when more then one user updates the same WorkFolder.","The WorkFolder is implemented as a specialized data object that can be organized, configured, and accessed by the user with the aid of a program user interface as well as by third party applications through the use of an automation interface. The computing environment may be a single computer or many computers connected by one or more networks, including local area networks (LANs), intranets, and the Internet, where the computers are continuously or intermittently interconnected. Preferably, the WorkFolder program is implemented in a conventional operating system such as Microsoft Windows with a user interface based on conventional graphical user interface (GUI) elements and with an automation interface that is based on conventional standards such as object linking and embedding (OLE) Automation or common object model (COM). The WorkFolder data object is stored persistently in such a manner that it can be stored, forwarded, and distributed across a network and be accessed and modified by software running on a variety of different platforms. A preferred persistent representation would be one conforming to widely accepted messaging standards.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["5","10","10","12","10","14","16","18","20","22","12","10"]},"The Contents node  serves as a base to which structural elements of the WorkFolder  are linked. There are three primary elements that may be linked to the Contents node : Documents , Placeholders , and Sections . By adding and configuring these elements, a user can form a WorkFolder data object with a structure appropriate for managing and storing documents related to a wide variety of different business transactions.","A Document element  is either an attached document or a link to a document that is external to the WorkFolder . Because work is accomplished using a variety of document types stored in different locations, the WorkFolder program places no restrictions on document types that can be contained within a WorkFolder, or on the location in which they are stored. In other words, all document files are treated the same by the WorkFolder. Documents  may therefore be images, word processing files, spreadsheets, voice or video, or any other type of data format.","When a document is attached to the Contents node , a document element  is created that contains the document contents as embedded file data. Thus, the document and its contents become a part of the WorkFolder . Alternately, a document element  can be a link to an external document. The link may be any type of file address that is recognized by the computing environment. Typically supported file addresses include a reference to a document stored in a local or networked file system, an ODMA document identifier for an item stored within a document management system, or a URL address for a web-based intranet or Internet document repository. Other locations may also be supported, depending on the computing platform and its configuration.","When the document is later accessed by the user, the document data is either extracted from the Document element  by the WorkFolder program or the document link is passed to the operating system which then retrieves the file from the appropriate storage area. After a document has been extracted or retrieved, the WorkFolder program passes the document to the operating system, which then determines the document type and executes the appropriate application to process the document.","The second major element that can be attached to the Contents node , and a primary aspect of the present invention, is a Placeholder . A Placeholder  is a slot that has been reserved for one or more specific documents not yet created or received. One or more Placeholders  can be linked to the Contents node  and preferably, the Placeholders  are linked to the Contents node  as an ordered list. When the WorkFolder is used to organize documents for a given work item, the presence of Placeholders  within the WorkFolder indicates to the user that specific documents are expected to be created and stored there.","An illustration of the structure of the Placeholder data element  is shown in . Each Placeholder  has a Name , indicating the data content of the document to be placed in the Placeholder , and a File Object hook  to which an actual file can later be attached or linked. When placeholders are implemented as an ordered list, a Placeholder  may also have a position  indicating where in the list that particular Placeholder  is located. Further, depending on the programming environment, a Placeholder  may have a unique internal identifier .","In a preferred embodiment of the present invention, any type of document may fill the File Object hook . In an alternative embodiment, a Placeholder  may be restricted to a particular file name and\/or type designated by the user. A Placeholder  is \u201cfilled\u201d by attaching a document (embedded or linked) to the File Object hook  in a manner similar to adding a document element , discussed above. In the preferred embodiment, a Placeholder  is reserved for only a single document. However, a Placeholder  may be implemented to allow for a collection of documents to be attached, i.e., by adding additional File Object hooks  as documents are attached or linked.","A variety of additional data items can also be linked to a Placeholder . In the preferred embodiment, a Placeholder  contains a Status element , which may be used to indicate to the user the status of the document filling placeholder . Status  includes conditions assigned meanings such as \u201cnot started,\u201d \u201cin progress,\u201d and \u201ccomplete.\u201d A Placeholder may also be assigned to a particular user by storing a unique user ID (such as an e-mail address) in the assignment element . In the preferred embodiment, the assignment of a Placeholder  to a user generates a program event which then generates and sends e-mail to notify that assigned user about the assignment. In a more preferred embodiment, the notification message contains a link to the specific WorkFolder  at issue and information about the assigned placeholder.","A Placeholder  can also contain a Comment element  which may be used to provide additional free-form information regarding the placeholder. In addition, a Placeholder  may contain a Deadline element  which indicates a triggering condition and a time period by which the deadline must be satisfied. Deadlines are discussed in more detail in conjunction with Tasks, below.","The third major element that can be attached to the Contents node  is a Section element . A Section  serves as an anchor point for additional Placeholders  and Documents  and, in an alternate embodiment, may contain further sub-sections. Section elements  serve as structural elements that allow contents  of the WorkFolder  to be organized according to broad categories. Each Section element  has a Name that indicates its designated contents. In the preferred embodiment, Documents  and Placeholders  located within a Section  are stored as ordered list elements.","As another aspect of the invention, the WorkFolder  has a Tasks data element  that contains tasks defining the set of steps required to complete a unit of work, each of which can be assigned to a user and have a deadline. Each task stored within the Tasks data element  has a name, which indicates the task to be performed and a status. Preferably, the status is selected from a group that includes the conditions defined to mean \u201cstarted,\u201d \u201cin progress,\u201d and \u201ccomplete.\u201d","In addition, each task within the Task data element  preferably has attributes that include a task assignee, a comment field, and a deadline. A deadline for a task, as well as a deadline for a placeholder , discussed above, can be either an absolute expiration date or a period of time relative to a triggering event. Specifying a relative date indicates that the deadline clock does not start running until the trigger condition has been met. Expiration of a deadline fires an expiration event that can be processed using a conventional Event Handler routine as is known to those of skill in the art. In the preferred embodiment, triggering conditions can be any addition, deletion, or modification of WorkFolder data, including the filling of a placeholder, the completion of a task, the assignment of a task or placeholder, as well as the expiration of a task or placeholder deadline. Event setting and handling are discussed with reference to and , below.","In addition to the primary Contents node  and the Tasks data element , the WorkFolder may also contain several additional meta-data elements. According to one aspect of the invention, a History data element  is located within the WorkFolder . The History data element  contains a log of additions, modifications, and deletions made to any other data element within that WorkFolder . The history is generated by the WorkFolder program automatically as changes are made either through the user interface or the automation interface. Preferably, each history entry includes information such as when the change was made, by whom, what type of change was made, as well as the value of the data element before and after the change. Periodically, the WorkFolder may send a copy of the latest history entries to a centralized repository for consolidated reporting. In the preferred embodiment this is done by sending the history via e-mail to a known location whenever the WorkFolder is saved. It should be noted that because the WorkFolder  is independent of the software used to create and modify documents stored in or linked by the WorkFolder , the history of changes to documents would not generally include details about the substance of changes to documents.","History data can be used to track the evolution of a work item and to derive critical information about the work process. It can also be used as a source to measure and monitor performance, to identify and correct bottlenecks, and to help organizations continuously improve their overall business processes. Preferably, each entry in the history log is keyed to a particular node or data element such as a Placeholder , Section , or Document  and the entries are stored as a single threaded list. Accordingly, the history log may be viewed for the entire WorkFolder . Alternately, the history of a single object within the WorkFolder , such as a Placeholder , may be viewed. In this situation, the WorkFolder program presents a subset of the history log showing only the information related to the desired object.","In the preferred embodiment, the WorkFolder  also contains a Fields data element  that houses user-definable meta-data relating to one or more properties of a WorkFolder. In the preferred embodiment, the Fields element contains conventional forms processing data elements that are defined with a user interface that allows a user to insert, delete, reorder, and assign various properties to form data elements. Each data element has a name, a data type (such as date, currency, or text string), and may contain an appropriate data value. Preferably, the Fields  are defined at the WorkFolder  level. However, they may also be defined at lower levels, e.g., within each Section , Placeholder , or Document . As fields are added, edited, and\/or deleted, the history log maintained in the History data element  is updated accordingly.","According to one aspect of the invention, some or all of the data contents of the Fields data element  are exposed to the operating system and through it, to other application programs via standard mechanisms. In the preferred embodiment this is done by representing public data fields as MAPI (\u201cmessaging application programming interface\u201d) named properties. The specific mechanism utilized depends on the operating environment. Thus, the data stored within the Fields data element  can be searched with third party search engines and browsed from outside the WorkFolder program.","According to another aspect of the invention, a Discussion data item  is stored within the WorkFolder . The Discussion data item  provides a location for ongoing communication regarding any number of topics related to the work-in-progress. In the preferred embodiment, comments include a subject identifier describing the subject of the comment text as well as data identifying who wrote the comment and when. For ease of use, comments may be sorted into a conventional threaded discussion tree and processed in a manner similar to discussions maintained by the Internet USENET bulletin board system.","An additional data element, which is preferably linked to the WorkFolder , is the Scripts data element . According to an aspect of the invention, the WorkFolder program includes a scripting interface that allows the user to extend the functionality of the WorkFolder. The Scripts data element  provides a location in which one or more user scripts are embedded within the WorkFolder . Each script can be executed on demand and may be written in any scripting language supported by an accessible script engine. Typically supported script languages include VBScript and JavaScript. In one embodiment of the invention, scripts may modify the contents and structure of the WorkFolder itself and also communicate with other application software through an OLE Automation interface. Preferably, the Scripts data element  is used in conjunction with an Event Handler. In a preferred embodiment, the Scripts data element  contains a master event script which tells what events should be monitored by the Event Handler and which scripts to execute in response to various triggering events. The master event script can contain additional script code or, in its simplest form, is simply a script dispatcher.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIGS. 3","FIG. 3"],"i":["a ","b ","a "],"b":["3","250","252","254","256","258","260"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 3","i":"b ","b":["262","264","266","268"]},"According to a further aspect of the invention, once the user has defined a suitable structure and arrangement of placeholder , section , and document  elements in a WorkFolder , the WorkFolder  can be published as a WorkFolder template. The template preserves the structure of the WorkFolder , including the name and ordering of the placeholders  and sections  in the contents node , as well as embedded tasks , fields , and scripts . Preferably, when a WorkFolder is published as a template, the user has the option of retaining or deleting specific data such as embedded or linked files, and field values, as desired. Existing discussion  and history  data is dropped since it pertains to the specific WorkFolder object , and not the newly created template. (A history log related to the template itself will be created if the user proceeds to edit the template as described below). Once a template is created, it may be used to create multiple WorkFolder object instances having the same structure as the template, but addressed to specific work items.","As part of the WorkFolder program initialization data, a basic WorkFolder template is provided which contains the contents node  and preferably the Tasks , Discussion , History , Fields , and Scripts  data elements. The contents node  of the basic template contains no predefined Placeholders , Sections,  or Documents  and the data elements - are empty. This WorkFolder template serves as a starting point from which the user may create a customized WorkFolder by adding placeholder , section , and document  data elements, as well as various tasks , scripts  and fields  as discussed above.","Thus, according to the present invention a WorkFolder  is a self-contained data repository of all data related to a specific work item (except for externally linked documents) which is stored and processed as a single data file. The structure of the WorkFolder  is defined by specifically ordered Placeholder elements , Section elements , and Documents , all stored under the contents node . In the preferred embodiment, the entire WorkFolder is accessible to other programs within the operating environment. The WorkFolder can be manipulated through the WorkFolder user interface, discussed below, or by other programs through an automation interface.","A structured WorkFolder environment can be created on a stand-alone computer platform but preferably, the structured WorkFolders and WorkFolder program are implemented on a networked system.  is a basic diagram of a networked computer environment utilizing shared WorkFolders according to the present invention. The WorkFolders and WorkFolder templates are maintained on an electronic storage device  connected to a network  and thereby to a plurality of users -. A user terminal may be a stand-alone computer (user ), a terminal connected to a local processor  (user ), a dumb terminal (user ) which is connected to a remote processor , or a \u201cWeb-Browser\u201d (user ) connected to an Internet server . Network  may also provide access to one or more \u201cexternal\u201d document repositories . It is recognized that the data connections between elements illustrated in  includes both physical connections and remote data links, e.g, through wireless technology such as cellular modems.","Although the WorkFolder storage  is shown as a separate shared hardware element, those skilled in the art will recognize that it is immaterial whether this storage element is a physically separate entity or is housed within a local or remote processor connected to the network, or is a distributed storage system. All that is required is that the storage area  be accessible to each of the users. It is also recognized that the network  may be of any configuration, and in particular may be a conventional LAN, intranet, the Internet, or any combination of different network configurations. The electronic document repository  may be one or more of a local document management system, a data archive such as CD-ROM jukebox, or any other accessible data server, such as an Internet server accessible through its URL address.","According to a further aspect of the invention, a WorkFolder environment may be established in a mobile data environment. Thus, it is necessary that one or more users be able to download a WorkFolder to a remote or mobile computer that may later be disconnected from the network and be able to access not only the data within the WorkFolder, but also the contents of remotely linked files According to the present invention, a WorkFolder is initially transferred from a central storage area to a remote storage area using conventional network file transfer protocols. The remote unit is configured to initiate the WorkFolder when it detects that a WorkFolder is being transferred. The WorkFolder program running on the remote unit then extracts all links in the WorkFolder which point to external documents. The WorkFolder then initiates a fetch from the network of some or all of the linked documents. The fetched documents are stored in a designated area on the remote system. The document links in the remote copy of the WorkFolder are then changed so that they point to the fetched files on the remote system and not the files on the network. When the remote user transfers a WorkFolder back to the main system, the process is performed in reverse. Conflict checking may also be performed as required.","In a specifically preferred embodiment, a WorkFolder environment, entitled WFX, containing and supporting one or more WorkFolders operates in a Microsoft Windows 95 or Windows NT 4.0 environment in conjunction with a Microsoft Exchange Messaging infrastructure. The Exchange Messaging infrastructure provides ready support for a multi-user environment, including functions such as shared message repositories known as Public Folders, a globally accessible address book and the ability to send any message to any user in the global address book. The Microsoft Exchange Messaging infrastructure is defined in the Microsoft BackOffice Software Development Kit (SDK), and specifically in the Microsoft Exchange Software Development Kit and the MAPI (industry-standard Messaging API) Software Development Kit, both available from Microsoft Corporation, of Redmond, Washington, USA. Significant supporting documentation is found in technical articles in the Microsoft Developers' Network library. However, all of these functions may also be incorporated directly in the WFX program if required.","Preferably, the hardware environment comprises a high end network server running Microsoft Exchange Server 5.0 or above and one or more client workstations running Microsoft Windows 95 or Microsoft Windows NT 4.0 or above and a Microsoft Exchange or Microsoft Outlook client. The WFX WorkFolder program is written in the C++programming language, although it is recognized that other programming languages may also be used.","In a specifically preferred embodiment, the WFX program is a MAPI (industry-standard Messaging API) form handler, which is registered in the Exchange environment as the viewing application for a set of MAPI message classes. This registration process consists of the WFX program making convcntional MAPI function calls which instruct Exchange from that point onward to always invoke the WFX program when the user attempts to view any message in a certain set of WFX-derived message classes. Once invoked, the WFX program makes additional MAPI function calls to load the actual WorkFolder data, which is stored in a MAPI message on a Microsoft Exchange server. After the user changes or adds various data elements to the WorkFolder and requests to save the WorkFolder, the WFX program makes additional MAPI function calls to write the WorkFolder back as a MAPI message to the Microsoft Exchange server.","There are additional instances where the WFX program interacts with Exchange as the user works with a WorkFolder message. These include the Assignment feature, the Deadline feature, the History export feature, Send and Move To Folder features and the Reconciliation feature, all of which are preferably included in the WFX program, and are discussed below. In all cases mentioned above and below, the WFX program uses conventional MAPI function calls and\/or Microsoft Exchange Software Development Kit function calls that are known to programmers skilled in the art.","In this specific embodiment of the invention, WFX has several built in (i.e., predefined) event scripts which increase the functionality of the WorkFolder. An Assignment feature is provided to detect when a placeholder or task has been assigned to a user. In response to this event, an e-mail message is generated and sent to the assignee to inform them of the assignment. A Deadline feature is provided which detects when a WorkFolder deadline is calculated or changed. In response, an e-mail message is generated and then sent to a predefined e-mail address (such as a Microsoft Exchange mailbox). Similarly, when the expiration of a deadline is detected, an e-mail message is generated by the WFX program and sent to one or more predefined users (i.e., the assignee of the expired task or placeholder) informing them of the expiration.","A History export feature may be provided which accumulates the WorkFolder history and formats it for exporting, preferably as an e-mail message which may be sent to a predefined user address. Preferably, the message is formatted such that the accumulated history can then be imported into a database for centralized reporting and statistics gathering.","A Send feature may also be provided to allow one user to deliver a WorkFolder to another user as an e-mail message. The WorkFolder contents may be embedded in the e-mail message or the message may simply include a link to the WorkFolder so that it may be retrieved more easily.","Preferably, these features are implemented using the Microsoft Exchange e-mail subsystem to send e-mail messages of differing content to known mailbox addresses in the Microsoft Exchange global address book. In all cases, conventional MAPI function calls are used to accomplish these features.","The Send to Folder feature allows the user to move the WorkFolder to another location within the Microsoft Exchange message store. This is accomplished through conventional function calls which are detailed in the Microsoft Exchange Software Development Kit.","In a specifically preferred embodiment, WorkFolder templates are implemented as Microsoft Exchange forms which can be stored anywhere in the Microsoft Exchange forms subsystem, including Organization and Personal forms libraries, as well as any folder forms library. Any WorkFolder message can become a WorkFolder template by publishing it as a Microsoft Exchange form in a user-specified forms library using mechanisms implemented in the WFX program. These mechanisms make function calls to thc Microsoft Exchange Software, as described in the Development Kit, in order to take the WorkFolder data that currently exists in the WorkFolder message and create a new Microsoft Exchange form that users can use as a template for new WorkFolder messages.","As the form is published to Microsoft Exchange, any WorkFolder Fields that the user marked as \u201cpublic\u201d become Named Properties in the Microsoft Exchange environment. This is accomplished by supplying these field names and data types to Microsoft Exchange during the course of publishing the form and indicating that they are to be public. Once the form is published and the Fields become Named Properties, they arc then searchable by third party applications and can be displayed and used to group, filter and sort WorkFolder messages in the user's Microsoft Exchange client.","The WFX WorkFolder program can also be used to view and edit WorkFolder-based Microsoft Exchange forms directly, in the absence of any WorkFolder message. This is referred to as Template Editing Mode. Rather than loading a WorkFolder message through the mechanism described above, the WFX WorkFolder program makes Microsoft Exchange Software function calls to load a user-specified WorkFolder-based form directly for editing. Once loaded, the save and publish functions available in the WFX program will republish the form to the same or a different location in the Microsoft Exchange forms subsystem, also through the use of Microsoft Exchange Software function calls.","In this specific embodiment, the WFX program formats each WorkFolder as an Exchange message. Therefore, WorkFolders can be placed in an Exchange Public Folder so that multiple users can simultaneously access and work on the same WorkFolder. WFX utilizes the Exchange mail infrastructure to distribute and process work. Thus, a WorkFolder can also be sent directly from one user to another. The fields data elements are made available to third party applications by defining them as Exchange named properties. WorkFolder templates are stored within the Exchange Forms subsystem. Each WorkFolder template is tagged with application data that instructs Exchange to call the WFX program when the user creates a document using a WorkFolder template.","In the preferred embodiment of the invention, the Reconciliation feature described above has a server-side implementation and a client-side implementation. Both components use a combination of Microsoft Exchange Software function calls and MAPI function calls in order to (1) detect that a WorkFolder message has generated an Exchange conflict message, (2) extract and present conflict information to a user, and (3) resolve the conflict. Since the WorkFolder will preferably reconcile conflicts, it is necessary to override the standard Microsoft Exchange conflict handling mechanisms. This may be easily accomplished using standard features of the Microsoft Exchange and MAPI Software Development Kits which will be apparent to those of skill in the art.","The specifically preferred embodiment will be discussed with respect to  which show various computer screen displays that are generated by the WFX program. In general, the WFX program presents the WorkFolder information to the user through a conventional Microsoft Windows GUI protocol with pull-down menus and tool bars. A WorkFolder may be created and edited using standard commands such as insert, delete, copy, cut, and paste.","The preferred embodiment supports an undo operation that allows a user to correct erroneous changes to the WorkFolder. Undo functions are well known in the art. It should be noted, however, that when a modification of a WorkFolder is undone, the history log within that WorkFolder must also be updated to remove reference to the undone modification. Preferably, only one level of undo functionality is supported, however more than one level may be provided with increased coding complexity.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 5","FIG. 5"],"b":["100","102","104","102","12","10","102"]},"The tabs pane  is used to present information which is stored in the fields , tasks , discussion , and history  data objects stored in the WorkFolder . The contents of each data object - is accessed by selecting the appropriate fields, tasks, discussion, or history tab -. In addition, the basic WorkFolder screen  has conventional pull-down menu items  and icon-driven toolbars . Data objects such as documents , sections , and placeholders  may be added by the user through appropriate \u201cinsert\u201d or \u201cnew object\u201d commands selected from the menu system or via a sequence of mouse clicks.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 6","b":["10","102","10","26","120","102","120","26"]},"Within each section  are a number of placeholders . Empty placeholders are represented as empty trays  next to the placeholder name . Filled placeholders  are represented as a tray containing an icon  representing the document type which has been stored in the placeholder  or to which the placeholder points. A user can fill a placeholder by selecting the appropriate placeholder and indicating the appropriate document to add, e.g, by typing the document address, selecting the document from a file manager application, or via cut-and-paste. When a placeholder is filled, the appropriate icon image is extracted by the operating system through conventional means. In addition, the document location and document type information is provided in a status line, i.e., , , following the placeholder name.","In this example, placeholder  contains a URL link to an external Internet document and placeholder  contains a pointer to a Microsoft word document located on the user's \u201cC\u201d drive. The number of unfilled Placeholders  is indicated in a status line  at the bottom of the WorkFolder window .","Thus, according to one aspect of the invention, the WFX program provides a visual distinction between unfilled placeholders, filled placeholders, and documents not in a placeholder, which are represented as icons unconnected to a placeholder \u201cbasket.\u201d (not shown). A visual distinction between WorkFolder elements imported from a template and \u201ccustomized\u201d elements is also provided by representing these items in different colors.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 7","b":["104","106","20","136"]},"In addition,  shows that placeholder  has been filed with an attached bitmap image as indicated in the status line . Further, the status line for the \u201cDraft Application\u201d placeholder  indicates the placeholder status  (here \u201ccompleted\u201d), that the placeholder has been assigned to a user , and the deadline for filling the placeholder .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 8","FIG. 8"],"b":["104","108","148","150","148","150","148","152"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 9","b":["104","110","156","158","154","158","156","160","162"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 10","b":["104","112","10","18","112","164","164","166"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 11","FIG. 12","FIG. 11"],"b":["168","22"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 13","b":["170","1","2","1","2","170","172","174","176","178","180"]},"Alternatively, conflict mediation can be deferred. This deferred conflict reconciliation is preferably implemented when WorkFolders are automatically replicated across various mirror sites in a networked environment. In this environment, conflicts may be detected during replication, when the affected users are not available to participate in an immediate conflict mediation dialog. In this situation, the conflicting items are saved as alternate sub-items and identified as being in conflict. When the WorkFolder is accessed, the items in conflict are identified so that the user may select which change to preserve.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 14","b":["184","186","182","184","186"]},"The invention has been described in detail with particular reference to certain preferred embodiments thereof, but it will be understood that variations and modifications can be effected within the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other features of the present invention will be more readily apparent from the following detailed description and drawings of illustrative embodiments of the invention in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 3","i":["a ","b "],"b":"3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
