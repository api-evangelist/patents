---
title: Multiple trusted computing environments
abstract: A computing platform  provides multiple computing environments  each containing a guest operating system  provided by a virtual machine application Optionally, each computing environment  is formed in a compartment  of a compartmented host operating system . A trusted device  verifies that the host operating system  and each guest operating system  operates in a secure and trusted manner by forming integrity metrics which can be interrogated by a user . Each computing environment is isolated and secure, and can be verified as trustworthy independent of any other computing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865876&OS=07865876&RS=07865876
owner: Hewlett-Packard Development Company, L.P.
number: 07865876
owner_city: Houston
owner_country: US
publication_date: 20020618
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":"CROSS REFERENCE TO RELATED APPLICATIONS","p":["The subject matter of the present application may also be related to the following U.S. Patent Applications: \u201cOperation of Trusted State in Computing Platform,\u201d Ser. No. 09\/728,827, filed Nov. 28, 2000; \u201cPerformance of a Service on a Computing Platform,\u201d Ser. No. 09\/920,554, filed Aug. 1, 2001; \u201cSecure E-Mail Handling Using a Compartmented Operating System,\u201d Ser. No. 10\/075,444, filed Feb. 15, 2002; \u201cElectronic Communication,\u201d Ser. No. 10\/080,466, filed Feb. 22, 2002; \u201cDemonstrating Integrity of a Compartment of a Compartmented Operating System,\u201d Ser. No. 10\/165,840, filed Jun. 7, 2002; \u201cMultiple Trusted Computing Environments with Verifiable Environment Entities,\u201d Ser. No. 10\/175,183, filed Jun. 18, 2002; \u201cRenting a Computing Environment on a Trusted Computing Platform,\u201d Ser. No. 10\/175,185, filed Jun. 18, 2002; \u201cInteraction with Electronic Services and Markets,\u201d Ser. No. 10\/175,395, filed Jun. 18, 2002; \u201cPerforming Secure and Insecure Computing Operations in a Compartmented Operating System,\u201d Ser. No. 10\/175,553, filed Jun. 18, 2002; \u201cPrivacy of Data on a Computer Platform,\u201d Ser. No. 10\/206,812, filed Jul. 26, 2002; \u201cTrusted Operating System,\u201d Ser. No. 10\/240,137, filed Sep. 26, 2002; \u201cTrusted Gateway System,\u201d Ser. No. 10\/240,139, filed Sep. 26, 2002; and \u201cApparatus and Method for Creating a Trusted Environment,\u201d Ser. No. 10\/303,690, filed Nov. 21, 2002.","The present invention relates in general to a method for providing multiple computing environments running on a single host computing platform, and relates to a method for verifying integrity of the computing environments.","It is desired to run multiple applications on a single host computing platform such as a server. It is known to provide a separate logically distinct computing environment for each application. However, a problem arises when one application or its environment is incompatible with another application, or is not considered trusted by another application.","An aim of the present invention is to provide a method that allows multiple computing environments to be provided on a single host computing platform. A preferred aim is to provide a high degree of isolation between the multiple computing environments. Another preferred aim is to provide a method for verifying integrity of one computing environment independently of any other of the computing environments, such that each environment is independently trustworthy.","According to a first aspect of the present invention there is provided a method for providing a trusted computing environment, comprising the steps of: (a) providing a host operating system; (b) obtaining an integrity metric for the host operating system; (c) providing a computing environment including a guest operating system; and (d) obtaining an integrity metric for the computing environment.","Preferably, the step (b) includes obtaining the integrity metric during boot of the host operating system. Preferably, the step (b) includes obtaining an integrity metric for a BIOS and\/or an OS loader and\/or an operating system software of the host operating system. Preferably, the step (b) includes obtaining the integrity metric by performing data event logging, and\/or by performing a hash function to all or selected data files associated with the host operating system. Preferably, the step (b) comprises updating at least part of the integrity metric for the host operating system.","Additionally, the step (d) comprises obtaining an integrity metric of the guest operating system. Suitably, the step (c) comprises providing a virtual machine application running on the host operating system for providing the guest operating system. Preferably, the step (d) comprises obtaining an integrity metric of the virtual machine application. Further, the step (c) comprises providing a process running on the guest operating system. Preferably, the step (d) comprises obtaining an integrity metric of the process.","In the preferred embodiments of the invention, the step (c) comprises providing the computing environment in a compartment of the host operating system. Preferably, the host operating system is a compartmented operating system. Suitably, the compartment confines the guest operating system. It is preferred that the step (d) comprises obtaining an integrity metric from a history of all processes launched in the compartment.","Preferably, the step (d) comprises updating at least part of the integrity metric for the computing environment. Preferably, the step (b) comprises storing the integrity metric for the host operating system, and\/or the step (d) comprises storing the integrity metric for the computing environment. Preferably, the integrity metric for the computing environment is stored associated with an identity of the computing environment.","Preferably, the step (b) and\/or the step (d) comprises obtaining the integrity metric using a trusted device, and storing the integrity metric in a platform configuration register of the trusted device. Preferably, the integrity metric for the computing environment is stored in a platform configuration register or group of platform configuration registers associated with the computing environment.","Additionally, the method preferably comprises the step of verifying the trusted computing environment including the steps of: (e) identifying the computing environment; (f) supplying the integrity metric for the host operating system; and (g) supplying the integrity metric for the computing environment.","Although the present invention has been introduced above in terms of a single computing environment, preferably a plurality of computing environments are provided on a single host computing platform. Suitably, the step (c) comprises providing a plurality of computing environments each including a guest operating system, and the step (d) comprises obtaining an integrity metric of each computing environment.","According to a second aspect of the present invention there is provided a method for verifying integrity of a trusted computing environment amongst many on a single host computing platform running a host operating system, each computing environment comprising a guest operating system running on the host operating system, the method comprising the steps of: (a) identifying the computing environment; (b) supplying an integrity metric of the host operating system; and (c) supplying an integrity metric associated with the identified computing environment.","Preferably, the step (a) comprises receiving identity information associated with the computing environment, such as receiving information about a process running in a computing environment, and determining the computing environment which contains that process.","According to a third aspect of the present invention there is provided a computing platform, comprising: a host operating system; a plurality of computing environments each comprising a guest operating system running on the host operating system; and a trusted device for obtaining an integrity metric of the host operating system and an integrity metric of each computing environment.","Preferably, the trusted device stores the integrity metric for the host operating system and the integrity metric for each guest operating system. Preferably, the trusted device stores each integrity metric in a platform configuration register or a group of platform configuration registers. Preferably, the trusted device allocates a platform configuration register or group of platform configuration registers to each computing environment.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["20","20","21","22","21","211","21","212"]},"In the preferred embodiment the hardware  includes a trusted device . The trusted device  is suitably a physical component such as an application specific integrated circuit (ASIC). Preferably the trusted device is mounted within a tamper-resistant housing. The trusted device  is coupled to the computing unit , and ideally to the local user interface unit . The trusted device  is preferably mounted on a motherboard of the computing unit . The trusted device  functions to bind the identity of the computing platform  to reliably measured data that provides an integrity metric of the platform.","Preferably, the trusted device  performs a secure boot process when the computing platform  is reset to ensure that the host operating system  of the platform  is running properly and in a secure manner. During the secure boot process, the trusted device  acquires an integrity metric (or a group of integrity metrics) of the computing platform , such as by examining operation of the computing unit  and the local user interface unit . The integrity metrics are then available for a user to determine whether to trust the computing platform to operate is a predicted manner. In particular, a trusted computing platform is expected not to be subject to subversion such as by a virus or by unauthorised access. The user includes a local user of the computing platform, or a remote user communicating with the computing platform by networking (including LAN, WAN, internet and other forms of networking).","WO 00\/48063 (Hewlett-Packard) discloses an example computing platform suitable for use in preferred embodiments of the present invention. In this example the trusted device  acquires a hash of a BIOS memory of the computing unit  after reset. The trusted device  receives memory read signals from the main processor and returns instructions for the main processor to form the hash. The hash is stored in the trusted device , which then returns an instruction that calls the BIOS program and a boot procedure continues as normal.","Preferably, the trusted device  controls the local user interface  such that a local user can trust the display of data provided on a visual display unit. WO 00\/73913 (Hewlett-Packard) discloses an example system for providing a trustworthy user interface by locating a driver for the visual display unit within the trusted device .","The hardware  may also comprise a trusted user interface for performing secure communication with a user device such as a smart card held by the user. The trusted user interface allows the user to perform trusted communications with the trusted device  in order to verify the integrity of the computing platform . The use of a smart card or other token for trusted user interaction is described in more detail in WO 00\/54125 (Hewlett-Packard) and WO 00\/54126 (Hewlett-Packard).",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["10","20","30","30","20","10","10","20","213"]},"The computing platform  provides a computing environment  which gives access to resources of the computing platform, such as processor time, memory area, and filespace. Preferably, a plurality of discrete computing environments  are provided. Each computing environment is logically distinct, but shares access to at least some of the resources of the computing platform with other computing environments.","Suitably, the computing environment  comprises a compartment. The actions or privileges within a compartment are constrained, particularly to restrict the ability of a process to execute methods and operations which have effect outside the compartment, such as methods that request network access or access to files outside of the compartment. Also, operation of the process within the compartment is performed with a high level of isolation from interference and prying by outside influences.","Preferably, the compartment is an operating system compartment controlled by a kernel of the host operating system . This is also referred to as a compartmented operating system or a trusted operating system.","Compartmented operating systems have been available for several years in a form designed for handling and processing classified (military) information, using a containment mechanism enforced by a kernel of the operating system with mandatory access controls to resources of the computing platform such as files, processes and network connections. The operating system attaches labels to the resources and enforces a policy which governs the allowed interaction between these resources based on their label values. Most compartmented operating systems apply a policy based on the Bell-LaPadula model discussed in the paper \u201cApplying Military Grade Security to the Internet\u201d by C I Dalton and J F Griffin published in Computer Networks and ISDN Systems 29 (1997) 1799-1808.","The preferred embodiment of the present invention adopts a simple and convenient form of operating system compartment. Each resource of the computing platform which it is desired to protect is given a label indicating the compartment to which that resource belongs. Mandatory access controls are performed by the kernel of the host operating system to ensure that resources from one compartment cannot interfere with resources from another compartment. Access controls can follow relatively simple rules, such as requiring an exact match of the label.","Examples of resources include data structures describing individual processes, shared memory segments, semaphores, message queues, sockets, network packets, network interfaces and routing table entries.","Communication between compartments is provided using narrow kernel level controlled interfaces to a transport mechanism such as TCP\/UDP. Access to these communication interfaces is governed by rules specified on a compartment by compartment basis. At appropriate points in the kernel, access control checks are performed such as through the use of hooks to a dynamically loadable security module that consults a table of rules indicating which compartments are allowed to access the resources of another compartment. In the absence of a rule explicitly allowing a cross compartment access to take place, an access attempt is denied by the kernel. The rules enforce mandatory segmentation across individual compartments, except for those compartments that have been explicitly allowed to access another compartment's resources. Communication between a compartment and a network resource is provided in a similar manner. In the absence of an explicit rule, access between a compartment and a network resource is denied.","Suitably, each compartment is allocated an individual section of a file system of the computing platform. For example, the section is a chroot of the main file system. Processes running within a particular compartment only have access to that section of the file system. Through kernel controls, the process is restricted to the predetermined section of file system and cannot escape. In particular, access to the root of the file system is denied.","Advantageously, a compartment provides a high level of containment, whilst reducing implementation costs and changes required in order to implement an existing application within the compartment.","Referring to , it is desired to run a process  in one of the computing environments . In practical embodiments, many processes run on the computing platform simultaneously. Some processes are grouped together to form an application or service. For simplicity, a single process will be described first, and the invention can then be applied to many processes and to groups of processes.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2","b":["24","23"]},"The process  runs on a guest operating system . The guest operating system  is suitably provided by a virtual machine application . The virtual machine application  runs on the host operating system  and provides an image of a computing platform, or at least appropriate parts thereof. The virtual machine application  provides the virtual guest operating system  such that, as far as the process  is concerned, the process  runs on the guest operating system  equivalent to running on a host operating system . For the purposes of the present invention, the guest operating system  is preferably a replica of the host operating system, or at least necessary parts thereof. However, it is equally possible for the virtual machine application  to provide a different emulated software or hardware environment, such as a different operating system type or version. An example virtual machine application is sold under the trade mark VMware by VMware, Inc of Palo Alto, Calif., USA.","The virtual machine application  assists security by isolating the process  from the remainder of the computing platform. Should problems occur during running of the process  or as a result thereof, the host operating system  can safely shut down the guest operating system  provided by the virtual machine application . Also, the virtual machine application  protects the host operating system  and hardware resources  from direct access by the process . Therefore, it is very difficult for the process  to subvert the host operating system . Further, the process  accesses resources of the computing platform made available through the virtual machine application . Each process  only sees resources of the computing platform allocated through the virtual machine application , such that a process  can be restricted to an appropriate share of the resource of the computing platform and cannot stop other processes having their allocated share.","Preferably, the virtual machine application  providing the guest operating system  runs in a compartment  of the host operating system . The compartment confines communications and data access of the virtual machine application. The compartment  provides secure separation between applications, such that processes are inhibited from communicating with each other, accessing each others status, or interfering with each other, except in accordance with strictly enforced access controls. In particular, a compartment assists the virtual machine application in resisting subversion by a process running in that computing environment.","Referring again to , the process  runs in the computing environment . It is desired to confirm the integrity of this computing environment. Also, many similar computing environments can be provided on the computing platform simultaneously, and it is desired to confirm the integrity of one selected computing environment independently of the integrity of any other computing environment. That is, it is desired that the multiple computing environments are independently trustworthy. Advantageously, the use of a guest operating system , preferably in combination with a compartment , provides a high degree of isolation between computing environments, such that the integrity of one computing environment is not affected by activity in any other computing environment.","As described above, the trusted device  is arranged to form an integrity metric (or a group of integrity metrics) of the host operating system . Also, in the preferred embodiments of the present invention, the trusted device  is arranged to obtain an integrity metric (or a group of integrity metrics) for each computing environment . Preferably, the trusted device  obtains an integrity metric of the guest operating system . Further, the trusted device preferably obtains an integrity metric of the virtual machine application . Each integrity metric suitably comprises one or more separate integrity metric values.","In the preferred configuration the host operating system  has direct access to the trusted device . However, to improve security, processes (i.e. applications) running on the host operating system  do not have direct access to the trusted device . Therefore, a trusted device driver  is provided, suitably as part of the host operating system . The trusted device driver  provides an interface available to applications running on the host operating system , including allowing results to be reported to the trusted device , and allowing stored integrity metric values to be obtained from the trusted device .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3","b":["213","213","231","230","221","24","213"],"sub":["\u2014","\u2014"]},"The stored integrity metric value  preferably represents a sequence of integrity metric values obtained, for example, by examination of the host platform  periodically or in response to relevant events. The old stored integrity metric value is combined with a new integrity metric value to produce a new updated digest of the sequence of values.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4"},"In step , the host operating system  is provided. Suitably, this includes the steps of starting a BIOS, starting an OS loader, and starting the host operating system as will be familiar to the skilled person.","In step , a group of integrity metrics  for the host operating system  are measured and reported to the trusted device . Preferably, the trusted device  obtains an integrity metric for the BIOS, and preferably also obtains an integrity metric for the OS loader and the operating system software. Preferably, integrity metric values relevant to the host operating system are stored in a group of PCRs (or other addressable storage) such that the integrity metrics  for the host operating system are available later. Steps  and  are shown separately for clarity. In practical embodiments of the invention it will be appreciated that the integrity metrics  are obtained concurrently with providing the host OS .","Optionally, at step  additional integrity metrics are obtained relevant to other selected elements of the computing platform. For example, the trusted device  performs data event logging as described in WO 00\/73880 (Hewlett-Packard). Also, the trusted device  may produce a digest by applying a hash function to all or selected data files stored on the computing platform, as described in WO 00\/73904 (Hewlett-Packard). Preferably, at least some of the integrity metrics obtained in step  or step  are updated periodically or in response to relevant events to confirm the current integrity status of the host operating system and related components of the computing platform.","In step , a guest operating system  is provided, to form a new computing environment . Suitably, step  includes providing a virtual machine application  which provides the guest operating system .","Preferably, the step  includes providing the guest operating system  in a compartment  of the host operating system . Also, the step  preferably includes providing a history of all processes (applications) launched in the compartment. Here, it is desired to record whether any other applications have been launched alongside the virtual machine application  which provides the guest operating system .","In step , the trusted device  obtains an integrity metric for the computing environment . In particular, the trusted device  obtains an integrity metric or group of integrity metrics  for the guest operating system , and preferably the virtual machine application . The corresponding integrity metric values  are stored in a PCR or group of PCRs allocated to that computing environment. Also, the step  preferably includes obtaining an integrity metric for the or each process  in the computing environment. Suitably, each integrity metric is obtained by forming a digest (hash value) of program code of a process. As will be familiar to the skilled person, the term integrity metric can refer to a single data item, or can refer to a metric formed from two or more parts each of which themselves can be considered an integrity metric.","Preferably, step  is repeated such that a current integrity status of the computing environment is available and history information is updated, periodically or in response to a relevant event.","When it is desired to create or update a stored integrity metric for a particular computing environment, a result is reported to the trusted device driver  along with information identifying that particular computing environment, such as an arbitrary label. In one preferred embodiment a process ID of the virtual machine application  is used to identify the computing environment. In another embodiment each logical computing environment is supplied with a secret, e.g. a secret is supplied to the virtual machine application  by the trusted device driver , and then the secret is subsequently used to identify the computing environment. Suitably the computing environment label, such as a secret, is supplied by the host OS  when the virtual machine application  is launched.","Referring to , a preferred method for verifying a computing environment will now be described.","Optionally, in step  a secure channel is established for communicating with the computing platform . For a local user , a secure channel is provided such as by using a trustworthy user interface and\/or by using a token such as a smart card. A remote user  establishes a secure channel  such as by performing authentication of the computing platform, ideally using a signature from the trusted device . Here again, the user optionally employs trusted hardware, such as the user's own client platform, a PDA, mobile phone or other device, optionally in co-operation with a smart card or other token. Preferably, the step  includes establishing the authentication and authorisation of the user.","In step , the user  requests demonstration of the integrity of a computing environment . For example, the user  issues an integrity challenge. To avoid a re-play attack, the challenge suitably includes a random number sequence (nonce). More detailed background information is provided in \u201cTCPA Specification Version 1.0\u201d published by the Trusted Computing Platform Alliance.","In step  the trusted device  supplies integrity metrics associated with the host operating system . Suitably, these integrity metrics include integrity metrics for the BIOS, operating system loader and host operating system, and integrity metrics formed by periodic or event-driven checks on the host operating system and related components of the computing platform.","In step , the trusted device  supplies an integrity metric associated with the selected computing environment. Preferably, the step  includes supplying integrity metrics associated with the virtual machine application , the guest operating system , the process , and a history of periodic or event-driven checks made on the integrity status of the computing environment .","The step  preferably includes supplying a history of any applications launched by the host operating system in the same compartment as the guest operating system, i.e. alongside the virtual machine application .","Preferably, in step  the integrity metric for the host operating system  and the computing environment  are compared against expected values, such as by using a certificate issued by a trusted party that is prepared to vouch for the integrity of the computing platform. If the comparison is successful, the computing environment is considered to be a trusted computing environment.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 6","FIG. 2","FIG. 5"],"b":["10","502","10","24"]},"In a first example, the integrity challenge is issued direct to a component of the host operating system , such as the trusted device driver . In this embodiment, the integrity challenge includes information previously given to the user , such as an arbitrary label, which allows the trusted device driver  to establish the relevant computing environment . The external computing environment identity label given to the user  may be the same as, or complementary to, any information held internally identifying the computing environment. Suitably, the external identity information supplied as part of the integrity challenge is matched against a list of computing environments currently provided on the host operating system, this step ideally being performed by the trusted device driver . Suitably, there is a one to one relationship between the compartment identity label as given to the user , and any compartment identity label used internally in the host computing platform . In step  the trusted device  supplies an integrity metric or group of integrity metrics  associated with the identified computing environment .","In a second preferred example, the integrity challenge is issued from the user  and is received by a component of the relevant computing environment , such as the process  which suitably forms part of an application running in that computing environment . The integrity challenge is passed from the computing environment  to the trusted device driver . In this case, the trusted device driver  can readily establish the identity of the computing environment  passing the integrity challenge. In one example embodiment the computing environment  supplies an internal computing environment identity label such as a process ID of the virtual machine application , or a secret previously given to the virtual machine application  by the host operating system . In step  the trusted device  supplies integrity metrics associated with that computing environment .","In a further preferred aspect that can be applied to any of the methods described herein, the guest operating system  is itself a compartmented operating system. Multiple applications can be run on the guest operating system , each within a separate compartment of the guest operating system. This embodiment enables each computing environment  to be subdivided, and the method described above is applied to the subdivided computing environments.","Advantageously, a trusted computing environment is provided by using a trusted device to verify that a guest operating system has booted in a trusted manner. By repeating this process and running multiple guest operating systems, multiple trusted computing environments are provided. A first application can run in a first of the computing environments, whilst a second application can run in a second of the computing environments, where the first and second applications are mutually incompatible or one does not trust the other. The preferred implementation using a virtual machine application in combination with a compartment allows each computing environment to be independently trusted.","It is very difficult for a process running in one computing environment to affect the integrity of any other computing environment. Advantageously, a user can verify the integrity of one computing environment without reference to the integrity of any other computing environment. In the preferred implementation each computing environment has an associated set of one or more integrity metrics which do not include or depend on information about any other computing environment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["For a better understanding of the invention, and to show how embodiments of the same may be carried into effect, reference will now be made, by way of example, to the accompanying diagrammatic drawings in which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
