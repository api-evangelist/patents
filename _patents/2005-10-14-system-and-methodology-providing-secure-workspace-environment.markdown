---
title: System and methodology providing secure workspace environment
abstract: System and methodology providing a secure workspace environment is described. In one embodiment, for example, in a computer system, a method is described for creating a secured workspace within an existing operating system for allowing users to run applications in a secured manner, the method comprises steps of: creating a policy for configuring the secured workspace, the policy specifying how information created during operation of the applications may be accessed; hooking particular functions of the operating system in order to obtain control over the information created during operation of the applications; during operation of the applications, encrypting the information to prevent unauthorized access; in response to a request for access to the information, determining whether the request complies with the policy; and if the request complies with the policy, satisfying the request by providing access to a decrypted copy of the information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07725737&OS=07725737&RS=07725737
owner: Check Point Software Technologies, Inc.
number: 07725737
owner_city: Redwood City
owner_country: US
publication_date: 20051014
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT STATEMENT","APPENDIX DATA","BACKGROUND OF INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Computer Program Listing Appendix under Sec. 1.52(e): This application includes a transmittal under 37 C.F.R. Sec. 1.52(e) of a Computer Program Listing Appendix. The Appendix, which comprises text file(s) that are IBM-PC machine and Microsoft Windows Operating System compatible, includes the below-listed file(s). All of the material disclosed in the Computer Program Listing Appendix can be found at the U.S. Patent and Trademark Office archives and is hereby incorporated by reference into the present application.","Object Description: SourceCode.txt, size: 269762 Bytes, created: Sep. 13, 2005 11:28:32 AM; Object ID: File No. 1; Object Contents: Source code.","1. Field of the Invention","The present invention relates generally to computers and data processing applications and, more particularly, to system and methodology providing a secure workspace environment.","2. Description of the Background Art","Growth of Internet-based remote access technologies has lead to an increasing number of users working in unprotected or untrusted environments. Home users connect to their corporate networks via different VPN clients. People on vacations check their emails via public kiosks. Sales agents connect to their databases via wireless services in airports. Large networks now are not just broadband lines that connect offices in several states or countries, they are far more complicated and far less controlled at the end-points (e.g., at individual personal computers). As the number of mobile users grows, the number of potential threats also grows. Potential threads include, but are not limited to, phishing attacks, identity theft, trade secrets theft, and the like.","A network of the typical large organization can be protected with various tools. For example, a firewall is installed to protect a company's gateway. Anti-virus software is installed on the company's mail server to scan incoming and outgoing email. Anti-virus software can be also installed on individual end user computers. For remote users, SSL VPN or IPSEC VPN is available to connect to the company's network from remote sites. For managing these environments, IT departments typically develop and deploy a set of security rules (security policy) to endpoints. Notwithstanding the availability of these foregoing tools, corporate IT departments still face a complex problem: how to ensure confidentiality of the sessions when users connect to their corporate networks from untrusted end-points, end-points that cannot be controlled by IT departments.","Consider VPN, for instance. Existing VPN solutions provide a mechanism to encrypt the traffic between a given end-point and corporate gateway. However, these schemes can be easily broken on the end-point, thus providing the attacker with access to the end-point computer before, during, or after the session. For example, the attacker can install keyboard monitoring (keylogger) software and monitor all user activities. The attacker is then able to spoof the user's credentials (user name and password). Also, the attacker may analyze the cache of the user's web browser, and thus retrieve information about what sites were visited by the user and reveal all other session information. The attacker may also analyze the files that remain after the session is complete. For example, the attacker may analyze files used by the user's computer operating system (e.g., Microsoft Windows), including analyzing the user's profile present in temporary folders. Similarly, the attacker may analyze files used by various applications, such as Microsoft Word, Microsoft Excel, and Adobe Acrobat\u2014files that were left by the user after the session completed. All told, the basic problem that remains today is how to create a secure environment within untrusted end-points, such as web kiosks or home computers.","There have been some attempts to try to address this problem. For convenience, they can be divided into several categories from an architectural and technological point of view: (1) Policy enforcement; (2) Virtual operating system (OS); and (3) Secure environment within existing OS. Each will be examined in greater detail.","Policy Enforcement","Before the secure session between the end-point and company gateway is established, a small application, let us call it the \u201cEnforcement Agent\u201d (EA), is downloaded to the end-point computer. The EA can be implemented as an Active X component that can be launched by the Internet Explorer browser, or it can be a java application, or even a tiny executable (e.g., downloaded to the user's computer). In operation, the EA checks the endpoint computer for compliance with a policy. A typical policy can be, for example, include requirements that the end-point (requesting a session) must have Windows XP or newer Microsoft Operating system installed, must have ZoneAlarm\u00ae firewall installed, must have antivirus installed (e.g., McAfee or Norton), and must have no known malware installed. If the end-point does not comply with these policy requirements, the EA reports to the gateway that the given end-point is not compliant and the user will not be able to login to the company's network. In such a case, the user must install the requisite software or find another computer that meets the policy requirements.","Virtual OS","A virtual OS (operating system) solution attempts to create a virtual, more-secure operating system inside an untrusted operating system on the end-point. A typical solution would be to create a portable USB device with preinstalled and preconfigured Linux OS. Linux is booted from the USB device and all session data and temporary files are saved to the USB device. The preconfigured Linux USB device has all necessary software installed: VPN client, email client, spreadsheet application and word processor, for example.","Secure Environment","The goal of this solution is to create a secure environment using the underlying operating system or an application. For example, an Internet Explorer browser plug-in (so-called \u201cBHO\u201d) could conceivably be developed that is able to encrypt all Internet Explorer session data, including cookie, cache, and temporary files. In this case, when the user accesses web sites or web applications from such protected browser, all session data is encrypted and not accessible to the attacker.","Each attempt described above provides a real world solution that poses serious barriers for the attacker, and thus there are many commercial products that utilize these concepts. However, each of the attempts, while it provides a serious barrier for the attacker, either can be bypassed or has serious drawbacks. For example, although policy enforcement is a must-have solution for every end-point, it is not sustainable to targeted attacks. An attacker can take popular keylogger software and modify it so that popular antivirus or antispyware products will not be able to detect it. Another significant drawback of policy enforcement is that it does not delete temporary session data that can be analyzed by the attacker afterwards.","The virtual OS solution is inconvenient at best, as it does not give the user a chance to work with the applications that he or she normally works with: Internet Explorer, Microsoft Word, Excel, or Adobe Acrobat. As a result, the solution incurs a significant learning curve for the user and an increased amount of troubleshooting and support for IT departments. Furthermore, the physical requirements of the approach are problematic. Not all kiosks will allow access to plug-in USB devices or boot from them.","Currently, all existing prior art solutions for providing a secure environment either can be easily bypassed or are oriented to provide only limited protection (e.g., of certain application, such as a plug-in for Internet Explorer). Accordingly, a better solution is sought.","System and methodology providing a secure workspace environment is described. In one embodiment, for example, in a computer system, a method of the present invention is described for creating a secured workspace within an existing operating system for allowing users to run applications in a secured manner, the method comprises steps of: creating a policy for configuring the secured workspace, the policy specifying how information created during operation of the applications may be accessed; hooking particular functions of the operating system in order to obtain control over the information created during operation of the applications; during operation of the applications, encrypting the information to prevent unauthorized access; in response to a request for access to the information, determining whether the request complies with the policy; and if the request complies with the policy, satisfying the request by providing access to a decrypted copy of the information.","In another embodiment, for example, a computer system of the present invention providing a secured workspace for allowing users to run applications in a secured manner is described that comprises: a computer running under control of an existing operating system; a policy for configuring the secured workspace, the policy specifying how information created during operation of the applications may be accessed; a module for intercepting particular functions of the existing operating system in order to allow the secured workspace to run under the existing operating system, the module permitting the secured workspace to obtain control over the information created during operation of the applications; an encryption module for preventing unauthorized access to the information; and a decryption module for providing authorized access to the information, in response to receiving a request that complies with the policy.","In yet another embodiment, for example, a system of the present invention providing a secured desktop environment that allows users to run application software securely is described that comprises: a computer running under an operating system, the computer including application software for use by users; and a secured desktop environment comprising: a configurable policy specifying permitted operations of the application software and specifying permitted access to information created during operation of the application software; a hooks engine for intercepting particular calls to the operating system, thereby allowing the secured desktop environment to control operations of the application software and control access to information created during operation of the application software; and a module, operating in conjunction with the policy and the hooks engine, for preventing any operation of the application software that is not permitted and\/or any access to the information that is not permitted.","In another embodiment, for example, a method of the present invention is described for securing software programs that run under control of a computer operating system, the method comprises steps of: defining a configurable security policy that specifies operations of the software programs that are permitted; patching certain files of the computer operating system, so that interactions between the software programs and the computer operating system may be monitored for compliance with the security policy; and controlling operations of the software programs to prevent violation of the security policy.","In still another embodiment, for example, a system of the present invention for securing software programs that run under control of a computer operating system is described that comprises: a configurable security policy that specifies operations of the software programs that are permitted; means for patching certain files of the computer operating system, so that interactions between the software programs and the computer operating system may be monitored for compliance with the security policy; and means for controlling operations of the software programs to prevent violation of the security policy.","In another embodiment, for example, an improved desktop environment for use with an existing operating system is described, wherein the improvement comprises: a policy specifying behavior of computer programs that is permitted; injectable program code that intercepts interactions between the computer programs and the existing operating system, so that the computer programs may be monitored for compliance with the policy; and wherein the desktop environment blocks any attempted behavior by the computer programs that would violate the policy.","Glossary","The following definitions are offered for purposes of illustration, not limitation, in order to assist with understanding the discussion that follows.","Firewall: A firewall is a set of related programs, typically located at a network gateway server, that protects the resources of a private network from other networks by controlling access into and out of the private network. (The term also implies the security policy that is used with the programs.) A firewall, working closely with a router program, examines each network packet to determine whether to forward it toward its destination. A firewall may also include or work with a proxy server that makes network requests on behalf of users. A firewall is often installed in a specially designated computer separate from the rest of the network so that no incoming request directly accesses private network resources.","HTTP: HTTP is the acronym for HyperText Transfer Protocol, which is the underlying communication protocol used by the World Wide Web on the Internet. HTTP defines how messages are formatted and transmitted, and what actions Web servers and browsers should take in response to various commands. For example, when a user enters a URL in his or her browser, this actually sends a HTTP command to the Web server directing it to fetch and transmit the requested Web page. Further description of HTTP is available in \u201cRFC 2616: Hypertext Transfer Protocol\u2014HTTP\/1.1,\u201d the disclosure of which is hereby incorporated by reference. RFC 2616 is available from the World Wide Web Consortium (W3C), and is available via the Internet (e.g., currently at www.w3.org\/Protocols\/). Additional description of HTTP is available in the technical and trade literature, see e.g., Stallings, W., \u201cThe Backbone of the Web,\u201d BYTE, October 1996, the disclosure of which is hereby incorporated by reference.","Network: A network is a group of two or more systems linked together. There are many types of computer networks, including local area networks (LANs), virtual private networks (VPNs), metropolitan area networks (MANs), campus area networks (CANs), and wide area networks (WANs) including the Internet. As used herein, the term \u201cnetwork\u201d refers broadly to any group of two or more computer systems or devices that are linked together from time to time (or permanently).","Portal: A portal provides an individualized or personalized view of multiple resources (e.g., Web sites) and services. A portal typically offers a single access point (e.g., browser page) providing access to a range of information and applications. A portal assembles information from a number of different sources (e.g., Web sites and applications) enabling a user to quickly receive information without having to navigate to a number of different Web sites. A portal also typically enables a user to obtain a personalized view of information and applications by organizing and grouping information and services for presentation to users.","TCP\/IP: TCP\/IP stands for Transmission Control Protocol\/Internet Protocol, the suite of communications protocols used to connect hosts on the Internet. TCP\/IP uses several protocols, the two main ones being TCP and IP. TCP\/IP is built into the UNIX operating system and is used by the Internet, making it the de facto standard for transmitting data over networks. For an introduction to TCP\/IP, see e.g., \u201cRFC 1180: A TCP\/IP Tutorial\u201d, the disclosure of which is hereby incorporated by reference. A copy of RFC 1180 is available via the Internet (e.g., currently at www.ietf.org\/rfc\/rfc1180.txt).","Thread: A thread refers to a single sequential flow of control within a program. Operating systems that support multi-threading enable programmers to design programs whose threaded parts can execute concurrently. In some systems, there is a one-to-one relationship between the task and the program, but a multi-threaded system allows a program to be divided into multiple tasks. Multi-threaded programs may have several threads running through different code paths simultaneously.","URL: URL is an abbreviation of Uniform Resource Locator, the global address of documents and other resources on the World Wide Web. The first part of the address indicates what protocol to use, and the second part specifies the IP address or the domain name where the resource is located.","Winsock: Windows Sockets 2 (Winsock) is a Microsoft-provided interface that enables programmers to create advanced Internet, intranet, and other network-capable applications to transmit application data across the wire, independent of the network protocol being used. With Winsock, programmers are provided access to advanced Microsoft Windows networking capabilities such as multicast and Quality of Service (QOS). Winsock follows the Windows Open System Architecture (WOSA) model; it defines a standard service provider interface (SPI) between the application programming interface (API), with its exported functions and the protocol stacks. It uses the sockets paradigm that was first popularized by Berkeley Software Distribution (BSD) UNIX. It was later adapted for Windows in Windows Sockets 1.1, with which Windows Sockets 2 applications are backward compatible. Winsock programming was previously centered around TCP\/IP. Some programming practices that worked with TCP\/IP do not work with every protocol. As a result, the Windows Sockets 2 API adds functions where necessary to handle several protocols. For further information regarding Winsock, see e.g., \u201cWinsock Reference\u201d, available from Microsoft Corporation, the disclosure of which is hereby incorporated by reference. A copy of this documentation is available via the Internet (e.g., currently at msdn.microsoft.com\/library\/default.asp?url=\/library\/en-us\/winsock\/winsock\/winsock_reference.asp).","XML: XML stands for Extensible Markup Language, a specification developed by the World Wide Web Consortium (W3C). XML is a pared-down version of the Standard Generalized Markup Language (SGML), a system for organizing and tagging elements of a document. XML is designed especially for Web documents. It allows designers to create their own customized tags, enabling the definition, transmission, validation, and interpretation of data between applications and between organizations. For further description of XML, see e.g., \u201cExtensible Markup Language (XML) 1.0\u201d, (2nd Edition, Oct. 6, 2000) a recommended specification from the W3C, the disclosure of which is hereby incorporated by reference. A copy of this specification is available via the Internet (e.g., currently at www.w3.org\/TR\/REC-xml).","Introduction","Referring to the figures, exemplary embodiments of the invention will now be described. The following description will focus on the presently preferred embodiment of the present invention, which is implemented in desktop and\/or server software (e.g., driver, application, or the like) operating in an Internet-connected environment running under an operating system, such as the Microsoft Windows operating system. The present invention, however, is not limited to any one particular application or any particular environment. Instead, those skilled in the art will find that the system and methods of the present invention may be advantageously embodied on a variety of different platforms, including Macintosh, Linux, Solaris, UNIX, FreeBSD, and the like. Therefore, the description of the exemplary embodiments that follows is for purposes of illustration and not limitation. The exemplary embodiments are primarily described with reference to block diagrams or flowcharts. As to the flowcharts, each block within the flowcharts represents both a method step and an apparatus element for performing the method step. Depending upon the implementation, the corresponding apparatus element may be configured in hardware, software, firmware, or combinations thereof.","Computer-based Implementation","Basic System Hardware and Software (e.g., for Desktop and Server Computers)","The present invention may be implemented on a conventional or general-purpose computer system, such as an IBM-compatible personal computer (PC) or server computer.  is a very general block diagram of a computer system (e.g., an IBM-compatible system) in which software-implemented processes of the present invention may be embodied. As shown, system  comprises a central processing unit(s) (CPU) or processor(s)  coupled to a random-access memory (RAM) , a read-only memory (ROM) , a keyboard , a printer , a pointing device , a display or video adapter  connected to a display device , a removable (mass) storage device  (e.g., floppy disk, CD-ROM, CD-R, CD-RW, DVD, or the like), a fixed (mass) storage device  (e.g., hard disk), a communication (COMM) port(s) or interface(s) , a modem , and a network interface card (NIC) or controller  (e.g., Ethernet). Although not shown separately, a real time system clock is included with the system , in a conventional manner.","CPU  comprises a processor of the Intel Pentium family of microprocessors. However, any other suitable processor may be utilized for implementing the present invention. The CPU  communicates with other components of the system via a bi-directional system bus (including any necessary input\/output (I\/O) controller circuitry and other \u201cglue\u201d logic). The bus, which includes address lines for addressing system memory, provides data transfer between and among the various components. Description of Pentium-class microprocessors and their instruction set, bus architecture, and control lines is available from Intel Corporation of Santa Clara, Calif. Random-access memory  serves as the working memory for the CPU . In a typical configuration, RAM of sixty-four megabytes or more is employed. More or less memory may be used without departing from the scope of the present invention. The read-only memory (ROM)  contains the basic input\/output system code (BIOS)\u2014a set of low-level routines in the ROM that application programs and the operating systems can use to interact with the hardware, including reading characters from the keyboard, outputting characters to printers, and so forth.","Mass storage devices ,  provide persistent storage on fixed and removable media, such as magnetic, optical or magnetic-optical storage systems, flash memory, or any other available mass storage technology. The mass storage may be shared on a network, or it may be a dedicated mass storage. As shown in , fixed storage  stores a body of program and data for directing operation of the computer system, including an operating system, user application programs, driver and other support files, as well as other data files of all sorts. Typically, the fixed storage  serves as the main hard disk for the system.","In basic operation, program logic (including that which implements methodology of the present invention described below) is loaded from the removable storage  or fixed storage  into the main (RAM) memory , for execution by the CPU . During operation of the program logic, the system  accepts user input from a keyboard  and pointing device , as well as speech-based input from a voice recognition system (not shown). The keyboard  permits selection of application programs, entry of keyboard-based input or data, and selection and manipulation of individual data objects displayed on the screen or display device . Likewise, the pointing device , such as a mouse, track ball, pen device, or the like, permits selection and manipulation of objects on the display device. In this manner, these input devices support manual user input for any process running on the system.","The computer system  displays text and\/or graphic images and other data on the display device . The video adapter , which is interposed between the display  and the system's bus, drives the display device . The video adapter , which includes video memory accessible to the CPU , provides circuitry that converts pixel data stored in the video memory to a raster signal suitable for use by a cathode ray tube (CRT) raster or liquid crystal display (LCD) monitor. A hard copy of the displayed information, or other information within the system , may be obtained from the printer , or other output device. Printer  may include, for instance, an HP LaserJet printer (available from Hewlett Packard of Palo Alto, Calif.), for creating hard copy images of output of the system.","The system itself communicates with other devices (e.g., other computers) via the network interface card (NIC)  connected to a network (e.g., Ethernet network, Bluetooth wireless network, or the like), and\/or modem  (e.g., 56K baud, ISDN, DSL, or cable modem), examples of which are available from 3Com of Santa Clara, Calif. The system  may also communicate with local occasionally-connected devices (e.g., serial cable-linked devices) via the communication (COMM) interface , which may include a RS-232 serial port, a Universal Serial Bus (USB) interface, or the like. Devices that will be commonly connected locally to the interface  include laptop computers, handheld organizers, digital cameras, and the like.","IBM-compatible personal computers and server computers are available from a variety of vendors. Representative vendors include Dell Computers of Round Rock, Tex., Hewlett-Packard of Palo Alto, Calif., and IBM of Armonk, N.Y. Other suitable computers include Apple-compatible computers (e.g., Macintosh), which are available from Apple Computer of Cupertino, Calif., and Sun Solaris workstations, which are available from Sun Microsystems of Mountain View, Calif.","A software system is typically provided for controlling the operation of the computer system . The software system, which is usually stored in system memory (RAM)  and on fixed storage (e.g., hard disk) , includes a kernel or operating system (OS) which manages low-level aspects of computer operation, including managing execution of processes, memory allocation, file input and output (I\/O), and device I\/O. The OS can be provided by a conventional operating system, such as Microsoft Windows 9x, Microsoft Windows NT, Microsoft Windows 2000, Microsoft Windows XP, or Microsoft Windows Vista (all available from Microsoft Corporation of Redmond, Wash.) or an alternative operating system, such as the previously mentioned operating systems. Typically, the OS operates in conjunction with device drivers (e.g., \u201cWinsock\u201d driver\u2014Windows' implementation of a TCP\/IP stack) and the system BIOS microcode (i.e., ROM-based microcode), particularly when interfacing with peripheral devices. One or more application(s), such as client application software or \u201cprograms\u201d (i.e., set of processor-executable instructions), may also be provided for execution by the computer system . The application(s) or other software intended for use on the computer system may be \u201cloaded\u201d into memory  from fixed storage  or may be downloaded from an Internet location (e.g., Web server). A graphical user interface (GUI) is generally provided for receiving user commands and data in a graphical (e.g., \u201cpoint-and-click\u201d) fashion. These inputs, in turn, may be acted upon by the computer system in accordance with instructions from OS and\/or application(s). The graphical user interface also serves to display the results of operation from the OS and application(s).","The above-described computer hardware and software are presented for purposes of illustrating the basic underlying desktop and server computer components that may be employed for implementing the present invention. For purposes of discussion, the following description will present examples in which it will be assumed that there exists at least one computer that communicates with other computers over a network, such as one or more \u201cclients\u201d (e.g., desktop computers) that communicate with various \u201cservers\u201d (e.g., Web servers) over the Internet. The present invention, however, is not limited to any particular environment or device configuration. In particular, a client\/server distinction is not necessary to the invention, but is used to provide a framework for discussion. Instead, the present invention may be implemented in any type of system architecture or processing environment capable of supporting the methodologies of the present invention presented in detail below.","Overview","In accordance with the present invention, a fully secured environment is provided in the framework of the user's usual operating system (host OS, such as Microsoft Windows). The main Input\/Output (I\/O) functions of the host OS are hooked or intercepted so that all information, including session information that applications save to disk, is really stored in encrypted form to prevent unauthorized access. In this manner, unauthorized or malicious users, even those that have full access to the host OS, are prevented from accessing the information or data created in the secured environment.","This process occurs in a fashion that is fully transparently for both applications and users. Applications think that they are working with usual OS functions and that they are storing information to usual storages. The user sees the secured environment as a \u201cvirtual desktop,\u201d a Secured Desktop. The user can easily switch between secured and not secured (usual) desktops, for example by hotkeys or GUI elements. By intercepting all (relevant) OS functions, the approach of the present invention can control all applications running on the Secured Desktop, allowing or denying them the ability to do any specified action. This approach is used in conjunction with a configurable security policy that specifies behavior or actions of software programs that are, or are not, permitted. For example, it is possible to specify what applications can be run on the virtual desktop at all. In this manner, the present invention may prevent the launching of any noncompliant software (i.e., computer programs that would violate the policy), including banning malicious software (e.g., spyware and computer viruses) that can steal information or even damage the system.","In the currently preferred embodiment, a Secure Workspace System (SWS) is provided that gives the user a secured area for web sessions, with a clear visual separation from non-secure areas. The workspace protects sensitive session information while a given session is active and performs total clean up after the session is finished. The workspace enables protection in user space mode, without developing device drivers (guest user rights are needed to run the Secure Workspace System). The workspace performs API hooking at the lowest possible level in the user space (e.g., native Windows NT API (NTDLL)), so that applications that work directly with this layer will not bypass the hooking mechanism.","System Components","The Secure Workspace System (SWS) works at the application level on the client side and prevents unauthorized access to a user's confidential information. The SWS creates a new secured, virtual desktop, which the user can work on, and intercepts file\/registry operations for all applications started on this desktop. The system saves all sensitive user data on the user's local machine in encrypted form and deletes it when the session is terminated.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 2A","b":["200","210","220","225","227","227","227"]},"During operation, the manager  starts a usual Windows shell (e.g., explorer.exe) with an injection of the hooks engine  (cpsws.dll) on the created desktop. The injected hooks engine  in turn hooks \u201cprocess creation\u201d routines and automatically injects itself into all newly created processes. In this manner, each application  on the secure desktop receives a workspace hook . In the Microsoft Windows environment, for example, the injected DLL hooks API calls (invocations) by overwriting hooked NTDLL routines entry points with JMP instructions, thus redirecting them to code inside the cpsws.dll. In this fashion, the system can be assured that any kind of call to NTDLL API (including from Win32 DLL, and from the application itself with GetProcAddress or import table) will be first intercepted by the SWS. This allows the SWS  to control each application's interaction with the underlying operating system , including the operating system's information storage  (e.g., Windows' registry, file system, and Clipboard).","In the currently preferred embodiment, the hooks engine  monitors the following API functions:",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ZwClose"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ZwQueryObject"]},{"entry":[{},"ZwQueryVolumeInformationFile"]},{"entry":[{},"ZwSetVolumeInformationFile"]},{"entry":[{},"ZwQueryQuotaInformationFile"]},{"entry":[{},"ZwSetQuotaInformationFile"]},{"entry":[{},"ZwDuplicateObject"]},{"entry":[{},"ZwCreateFile"]},{"entry":[{},"ZwOpenFile"]},{"entry":[{},"ZwDeleteFile"]},{"entry":[{},"ZwFlushBuffersFile"]},{"entry":[{},"ZwCancelIoFile"]},{"entry":[{},"ZwReadFile"]},{"entry":[{},"ZwReadFileScatter"]},{"entry":[{},"ZwWriteFile"]},{"entry":[{},"ZwWriteFileGather"]},{"entry":[{},"ZwLockFile"]},{"entry":[{},"ZwUnlockFile"]},{"entry":[{},"ZwQueryAttributesFile"]},{"entry":[{},"ZwQueryFullAttributesFile"]},{"entry":[{},"ZwQueryInformationFile"]},{"entry":[{},"ZwSetInformationFile"]},{"entry":[{},"ZwQueryDirectoryFile"]},{"entry":[{},"ZwNotifyChangeDirectoryFile"]},{"entry":[{},"ZwFsControlFile"]},{"entry":[{},"ZwQueryEaFile"]},{"entry":[{},"ZwSetEaFile"]},{"entry":[{},"ZwCreateSection"]},{"entry":[{},"ZwOpenSection"]},{"entry":[{},"ZwQuerySection"]},{"entry":[{},"ZwExtendSection"]},{"entry":[{},"ZwMapViewOfSection"]},{"entry":[{},"ZwUnmapViewOfSection"]},{"entry":[{},"ZwAreMappedFilesTheSame"]},{"entry":[{},"ZwCreateProcess"]},{"entry":[{},"ZwOpenProcess"]},{"entry":[{},"ZwTerminateProcess"]},{"entry":[{},"ZwCreateMutant"]},{"entry":[{},"ZwOpenMutant"]},{"entry":[{},"ZwCreateSemaphore"]},{"entry":[{},"ZwOpenSemaphore"]},{"entry":[{},"ZwCreateEvent"]},{"entry":[{},"ZwOpenEvent"]},{"entry":[{},"CreateProcessW"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CreateProcessA"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WinExec"]},{"entry":[{},"ExitWindowsEx"]},{"entry":[{},"StartDocA"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"StartDocW"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ZwCreateKey"]},{"entry":[{},"ZwOpenKey."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CoGetClassObject"]},{"entry":[{},"CoLoadLibrary"]},{"entry":[{},"CoCreateInstance"]},{"entry":[{},"CoCreateInstanceEx"]},{"entry":[{},"SetClipboardData"]},{"entry":[{},"GetClipboardData"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Access to different system resources are allowed or denied based on the policy (cpsws.xml). The hooks engine  allows applications started on the secure desktop to create files and registry keys only inside a secure user profile. These items will be encrypted on the host file system and will be deleted when the given session is terminated.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 2B","FIG. 2A","FIG. 2A","FIG. 2B"],"b":["210","225","227"]},"As illustrated in the diagram, every loaded in-process module, including usual system modules such as kernel32.dll, shell32.dll, and the like (even main application executable), can communicate with the NT kernel via ntdll.dll calls. Use of the mechanism of ntdll.dll hooking allows maximum possible in user-space control of all data flows between a given secured application and hardware persistent storage. In this manner, the cpsws.dll can dispatch all files-related functions, including those used by the application. The cpsws.dll encrypts all data on-the-fly, and stores it to the target persistent storage in encrypted form.","The cpsws.dll also controls creation of out-of-process COM objects. It does this by hooking the particular ole32.dll functions that are used for object creation. It intercepts creating out-of-process COM servers and creates their processes itself. Some user32.dll functions, such as SetClipboardData and GetClipboardData, also may be hooked to allow on-the-fly encryption of data copied to clipboard by secured applications. In the currently preferred embodiment, additional kernel32.dll and shell32.dll functions are hooked to control process creation and file operations at a higher level. In this manner, the SWS may, for example, show user alert messages about rejected operations, including denied program startup, denied saving files to non-secured locations, and the like.","Initializing the Secure Desktop\/Workspace",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIGS. 3A-B","b":["300","301","227"]},"\/url=\u201cmain_page_url\u201d\u2014URL, that will be opened in default browser after secured desktop starts;","\/cookie=\u201cserver;cookiename=cookievalue\u201d\u2014secured cookie, that will be inserted into each HTTP(-S) request to the defined server; and","\/shell=\u201cshell_id\u201d\u2014shell identifier; refers to corresponding tag in the secured workspace policy; defines a shell that will be started on secure desktop (explorer.exe by default).","The policy file (cpsws.xml) may now be loaded, at step . At step , the secure workspace manager (cpsws.exe) creates a pipe server that will listen and dispatch requests from injected applications. The pipe server uses a secure cookie as an authorization password on every client connect, so only processes that started with the SWS's dll can use this pipe. Next, at step , the hooks engine  (cpsws.dll) is loaded into the SWS; this process is referred to herein as \u201cself-injection.\u201d The hooks engine (cpsws.dll) hooks all necessary API (for example, for Windows: ntdll.dll, kernel32.dll, ole32.dll, user32.dll, and the like), and also injects itself into every child process that is created by an already-injected process. This is illustrated at step .","As shown at step , the method proceeds to create a virtual user profile (according to the policy), as follows:\n\n","At step , the method creates a virtual desktop, for example, via Windows' CreateDesktop( ) WinAPI function. The method proceeds, at step , to create and initialize an empty Discretionary Access Control List (DACL) security descriptor and assign it to the new desktop. This disallows any other application from starting or installing input hooks on the secure desktop. Any additional initialization may now be performed (e.g., get current wallpaper), as indicated at step . The machine's shell (e.g., explorer.exe) is started on the created virtual desktop, at step . Since injection occurred via the hooks engine (cpsws.dll), the shell (explorer.exe) will be injected by the hooks engine (cpsws.dll) on startup. This allows the system of the present invention to control applications that will be started on the virtual desktop. Finally, at step , the method  switches operation of the machine to the just-created desktop, if all preceding operations have succeeded.","API hooks","(a) API Hooks Initialization (dll)","During processing of a Windows' DllMain function (i.e., the optional entry point into a Windows dynamic-link library (DLL)), the hooks engine (cpsws.dll) hooks to a list of functions of ntdll.dll, kernel32.dll, ole32.dll, and user32.dll (i.e., operating system applications programming interface (API) executable files). Then it waits while the parent process writes a secure cookie to its memory (e.g., using WriteMemory API). This allows the system of the present invention to further distinguish pipe clients in the SWS.","(b) API Hooks Processing (dll)","The API hooks processing proceeds as follows. Every created thread of the already-secured application is switched to the secure desktop. The desktop handle is retrieved from the hooks engine (cpsws.dll) using Windows DLL thread attachment program logic (i.e., specifying the Windows DLL_THREAD_ATTACH flag). The \u201cprocess creation\u201d functions (e.g., Windows' CreateProcessW, CreateProcessA functions) are hooked to allow injection of cpsws.dll at the point when a new process is going to start. When such a new process has been created, the hooks engine (cpsws.dll) writes a secure token to its memory. A child process may use this as an authorization password for the pipe server.","File functions are intercepted to allow \u201cvirtualization\u201d and encryption of the file system, as follows. When an application asks the system to create file, the hooks engine (cpsws.dll) checks the file path in order to determine if creating a file in this directory is allowed by policy. If it is allowed, the secure workspace manager (cpsws.exe) generates a random string that will correspond to requested file name, thus allowing the file to be physically created with a secure name.","On write operation, the hooks engine (cpsws.dll) checks the user's rights to change files in the given target directory, according to the policy file. If sufficient rights exist, the SWS encrypts all data \u201con-the-fly\u201d and writes it to a real file in secure form. Additional information is written to file, including for example encryption algorithm ID and real size of file (recorded as housekeeping information, for use with encryption algorithms that can encrypt data only by blocks with constant length). This additional data is not visible to the application, but is instead used by the hooks engine (cpsws.dll) internally.","On read operation, the hooks engine (cpsws.dll) reads information from the file header, and reads a corresponding fragment of data from the file (which can be larger than requests, due to block encryption). The file information may now be decrypted and returned as decrypted data to the requesting application. In response to a \u201cfiles listing\u201d request, the hooks engine (cpsws.dll) checks the user's rights to list the particular directory. If the user has sufficient rights, the SWS reads corresponding information from the file headers and returns the real filename and size (which recall was written as a field of the file header).","When an application creates a memory-mapped section of a file, the SWS creates a corresponding in-memory section, with size of file. The system may now read decrypted content of the file to this section and give the calling application (caller) a corresponding handle to this section. If an application specifies a \u201csection name\u201d in the call, the hooks engine (cpsws.dll) can change the name to separate sections created on the respective secure and default desktops. Desired behavior is preferably configured in the policy file (cpsws.xml). When an application calls usual ReadFile (Windows API function to read data from a file) or WriteFile (Windows API function to write data to a file) functions for files that are mapped to memory, the SWS satisfies the calls with simple read\/write of data from section memory. When an application requests closing of the section, data stored in the section is flushed to the corresponding file and the section is closed.","De-Initialization of the Secure Desktop\/Workspace","In response to a proper request, the SWS of the present invention may be shutdown. Before closing, it optionally queries all running applications for shutdown, terminates all secured application(s), and then deletes all secured data from local storages, to prevent information leaks and quits. (Specific method steps for effecting de-initialization are described in detail below.)","Security Analysis","The prevention of information leaks from the SWS will now be discussed.","System Swap File","The underlying operating system (OS) may save memory pages of applications running on secure desktop into a global system swap file. The SWS itself does not presently solve this problem in the currently preferred embodiment. However, the issue may be addressed by changes elsewhere. For example, the swap file itself may be written to an OS-supported volume encryption (e.g., Microsoft Windows Vista Windows full volume encryption). Additionally, in those deployments already employing large amounts of physical memory (RAM), the amount of data paged to disk for virtual memory management (VMM) may constitute a rather insignificant amount of application data. Further, those skilled in the art will appreciate that the SWS may be designed to include kernel-level logic to supplant the OS's native swap file with an encrypted one.","Registry Keys","In the currently preferred embodiment, the SWS does not encrypt registry entries created by applications on the secure desktop. These are deleted when a given session is terminated. However, it is possible that during unexpected session termination sensitive data will be left in the current user file (ntuser.dat). The issue may be addressed by encrypting registry items in the same way as files.","Analyzing Secure User Profile","Content and names of files created on the secure desktop are encrypted on the host file system. However, the corresponding encryption\/decryption key is stored in memory (subject to swapping via the swap file); similarly, the directory structure is potentially visible outside the secure desktop. In embodiments contemplating use of electronic codebook (ECB) mode, there is the potential disadvantage that identical plaintext blocks are encrypted to identical ciphertext blocks; the approach does not hide data patterns. The issue may be addressed by using cipher-block chaining (CBC) mode. In the cipher-block chaining (CBC) mode, each block of plaintext is XORed with the previous ciphertext block before being encrypted. This way, each ciphertext block is dependent on all plaintext blocks up to that point. Further, use of a fully-virtual file system without correlation with host PC real file system provides additional protection.","Leaks Through Non-controlled API","Applications running on the secure desktop can exchange sensitive data through non-controlled API with non-secured applications on the default desktop (e.g., non-hooked out-of-process COM servers started by main system SVCHOST.EXE service). This issue may be addressed by hooking all API calls that can exchange sensitive information. In this manner, the SWS does not allow applications that can leak information to be started on the secure desktop.","Detailed Internal Operation","The following description presents method steps\/program logic that may be implemented using processor-executable instructions, for directing operation of a device under processor control. The processor-executable instructions may be stored on a computer-readable medium, such as CD, DVD, flash memory, or the like. The processor-executable instructions may also be stored as a set of downloadable processor-executable instructions, for example, for downloading and installation from an Internet location (e.g., Web server).","Additional DLL Loader","The present invention includes an additional DLL loader that provides a mechanism to start new processes with forced loading of an additional DLL in the address space of the new process. This is done by creating a new process in suspended state, allocating a small memory location in its address space, and writing to it the code that loads the necessary DLL and that jumps to beginning of process execution code. The context of the main thread of the created process is then changed, so that the computer processor's instruction pointer register (e.g., Intel x86 Extended Instruction Pointer (EIP) register) points to this created code. The thread is now resumed. After resuming, the process' thread executes code that loads the necessary DLL into the process (space) and continues usual processing of executable code. This may be implemented as follows (e.g., illustrated by the following pseudocode snippets):",{"@attributes":{"id":"p-0097","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1: typedef struct DLL_LOADER"},{"entry":"2: {"},{"entry":"3: unsigned char LoaderCode[LOADER_CODE_SIZE];"},{"entry":"4: char DllPathName[MAX_PATH];"},{"entry":"5: }DLL_LOADER, *PDLL_LOADER;"},{"entry":"6:"},{"entry":"7: void"},{"entry":"8: AddAsmInstruction"},{"entry":"9: (PBYTE &pTemp, int InstructionId, int InstructionOperand)"},{"entry":"10: {"},{"entry":"11: memcpy(pTemp, asm_instruction_code_table[InstructionId],"},{"entry":"asm_instruction_code_size[InstructionId]);"},{"entry":"12: pTemp += asm_instruction_code_size[InstructionId]"},{"entry":"13: memcpy(pTemp, &InstructionOperand,sizeof(int));"},{"entry":"14: pTemp += sizeof(int);"},{"entry":"15: }"},{"entry":"16:"},{"entry":"17: void"},{"entry":"18: StartProcessWithDll"},{"entry":"19: (LPTCSTR pszProcessImage, LPTCSTR pszDllPathName)"},{"entry":"20: {"},{"entry":"21: STARTUPINFO si;"},{"entry":"22: PROCESS_INFORMATION pi;"},{"entry":"23: CreateProcess(pszProcessImage, pszProcessImage, NULL, NULL,"},{"entry":"FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi);"},{"entry":"24: CONTEXT context;"},{"entry":"25: GetThreadContext(pi.hThread, &context);"},{"entry":"26: PVOID pDllLoaderRemote=VirtualAllocEx(pi.hProcess, NULL,"},{"entry":"sizeof(DLL_LOADER), NEW_CODE,"},{"entry":"PAGE_EXECUTE_READWRITE);"},{"entry":"27: DLL_LOADER DllLoaderLocal;"},{"entry":"28: strcpy(DllLoaderLocal.DllPathName,pszDllPathName);"},{"entry":"29: PBYTE pTemp=(PBYTE)&pDllLoaderLocal;"},{"entry":"30: AddAsmInstruction(pTemp, ASM_PUSH, pDllLoaderRemote +"},{"entry":"LOADER_CODE_SIZE);\/\/push pointer to DllPathName to stack"},{"entry":"31: AddAsmInstruction(pTemp, ASM_CALL, &LoadLibrary);\/\/call"},{"entry":"LoadLibrary with pushed parameter"},{"entry":"32: AddAsmInstruction(pTemp, ASM_JMP, context.eip);\/\/jmp to original"},{"entry":"process code"},{"entry":"33: WriteProcessMemory(pi.hProcess, pDllLoaderRemote,"},{"entry":"&pDllLoaderLocal, sizeof(pDllLoaderLocal), NULL);"},{"entry":"34: context.eip = pDllLoaderRemote;"},{"entry":"35: ResumeThread(pi.hThread);"},{"entry":"36: }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Of particular interest, the AddAsmInstruction (helper) method call at line 30 serves to push a pointer to the DLL path name onto the current stack (e.g., x86 stack). Now, the helper method is again invoked at line 31 for purposes of calling the LoadLibrary (Windows API call) with the pushed parameter, thereby forcing the loading of the DLL (whose name is referenced at line 30). Then, at line 32, the helper method is invoked for purposes of effecting a jump (JMP instruction) back to the original process code.","Hooks Engine","The hooks engine provides a generic DLL that functions as an interception mechanism in its own processes. The basic approach is to overwrite part of the DLL code in memory, so that a given target function instead calls wrapper code immediately upon execution. Here, the start of the target DLL function is disassembled, with its old (original) code being saved in a newly allocated memory block. The original site of this code is overwritten with a simple jump (JMP) instruction that calls the wrapper function. In this manner, the wrapper function gains control, and can process the API call itself or call the original DLL function with optionally changed input parameters. Core functionality of the hooks engine may be implemented as follows (e.g., illustrated by the following pseudocode snippets):",{"@attributes":{"id":"p-0101","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1: typedef struct ORIGINAL_CALL"},{"entry":"2: {"},{"entry":"3: unsigned char OriginalCode[MAX_ORIGINAL_CODE_SIZE];"},{"entry":"4: unsigned char"},{"entry":"JmpToOtherOriginalCode[asm_instruction_code_size[ASM_JMP]+sizeof(int)]"},{"entry":"5: }ORIGINAL_CALL, *PORIGINAL_CALL;"},{"entry":"6:"},{"entry":"7: #define NOP_CODE 0x90"},{"entry":"8:"},{"entry":"9: void"},{"entry":"10: HookDllFunction(LPTCSTR pszDllName, LPTCSTR pszFunctionName, PVOID"},{"entry":"pFunctionWrapper, PVOID &pOriginalCall)"},{"entry":"11: {"},{"entry":"12: HMODULE hDll = GetModuleHandle(pszDllName);"},{"entry":"13: PBYTE pFunction = GetProcAddress(hDll, pszFunctionName);"},{"entry":"14: pOriginalCall = VirtualAlloc(NULL, sizeof(ORIGINAL_CALL), MEM_COMMIT,"},{"entry":"PAGE_EXECUTE_READWRITE);"},{"entry":"15:"},{"entry":"16: int NeedSize = sizeof(ORIGINAL_CALL);"},{"entry":"17: int ReplacedSize ="},{"entry":"DisasmAndCalculateAsmIntstructionsSize(pOriginalCall, NeedSize);"},{"entry":"18: memcpy(&pOriginalCall.OriginalCode,pFunction,ReplacedSize);\/\/replaced"},{"entry":"piece of instruction"},{"entry":"19: memset(&pOriginalCall.OriginalCode + ReplacedSize, NOP_CODE,"},{"entry":"MAX_ORIGINAL_CODE_SIZE \u2212 ReplacedSize);\/\/fill not used space with NOP"},{"entry":"instructions"},{"entry":"20: AddAsmInstruction(&pOriginalCall.JmpToOtherOriginalCode, ASM_JMP,"},{"entry":"pFunction + ReplacedSize);\/\/generate jump to other real function code"},{"entry":"21:"},{"entry":"22: AddAsmInstruction(pFunction, ASM_JMP, pFunctionWrapper); \/\/generate"},{"entry":"jump to hook code in the beginning of DLL exported function"},{"entry":"23: }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As shown, at line 18, the code performs a memory copy (memcpy) operation for overwriting the original code as described above. Unused byte locations are padded out with NOP (no operation) instructions (e.g., 0x90 bytes), as shown at line 19. At line 20, the AddAsmInstruction helper function is again invoked for generating a jump (instruction) to the other real function code, and at line 22 the helper function is invoked for generating a jump to hook code at the beginning of the DLL (exported) function.","File System Processing Engine","A file system processing engine of the present invention provides a mechanism for serving file system calls, such as files and directories enumeration, creating and deleting files, and reading and writing file data. When a secured application tries to read or write a user's profile files, it serves I\/O requests, allowing on-the-fly encryption of file names and content. When the application tries to write to any restricted location (e.g., specified in policy), the engine prevents any unauthorized write or even access operations, returning an \u201cAccess Denied\u201d error; in this manner, the SWS ensures that no private data is left on the system after the SWS is closed down. File content encryption is designed for use with block-ciphers in ECB mode, with the option of including salt (i.e., additional piece of information added to the hash) that can be dependent of data-offset. Private user's file names are similarly secured in a manner to allow both good security and fast accessing directories tree. When a given application creates a file (which must be secured), the engine parses the path, splits it into corresponding names components, and generates a random character string (corresponding to real names). The file is physically stored by path, which is combined from random-names components. When the application opens this file or tries to enumerate names of the secured file, the engine extracts the corresponding logical file names from an internal look-up table that is stored only in memory.","Memory-mapped file sections support can be considered as additional sub-functionality of the file system processing engine. When an application tries to create a file section in a secured file, the engine creates memory-stored section with corresponding attributes and decrypts the file's content to it. If the application specifies a section name during creation or opens an existing section by name, the engine can optionally change the section name to divide sections opened by applications on default and secured desktops. The particular section names that should be changed can be specified in policy. On every subsequent read\/write request of the file, the engine performs simple copy of memory data from section memory to I\/O buffer. Flushing of the section to physical storage occurs on closing the file's handle. The below two pseudocode samples illustrate program logic implementing file processing features.","The first sample illustrates program code from a ZwCreateFile wrapper that changes file name or analyzes requested access rights:",{"@attributes":{"id":"p-0107","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1:","NTSTATUS _stdcall _wrapperZwCreateFile("]},{"entry":["2:","\u2003PHANDLE FileHandle,"]},{"entry":["3:","\u2003ACCESS_MASK DesiredAccess,"]},{"entry":["4:","\u2003POBJECT_ATTRIBUTES ObjectAttributes,"]},{"entry":["5:","\u2003PIO_STATUS_BLOCK IoStatusBlock,"]},{"entry":["6:","\u2003PLARGE_INTEGER AllocationSize,"]},{"entry":["7:","\u2003ULONG FileAttributes,"]},{"entry":["8:","\u2003ULONG ShareAccess,"]},{"entry":["9:","\u2003ULONG CreateDisposition,"]},{"entry":["10:","\u2003ULONG CreateOptions,"]},{"entry":["11:","\u2003PVOID EaBuffer,"]},{"entry":["12:","\u2003ULONG EaLength)"]},{"entry":["13:","\u2002{"]},{"entry":["14:","\u2003NTSTATUS rv=STATUS_SUCCESS;"]},{"entry":["15:","\u2003bool need_original=true;"]},{"entry":["16:","\u2003if(_threads_lock.EnterThread(_LINE_))"]},{"entry":["17:","\u2003{"]},{"entry":"18:"},{"entry":["19:","\/\/Extract file path name from ObjectAttribute structure, with"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"conversion of it to a long form if necessary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["20:","\u2003\u2003std::string strFileName ="]},{"entry":[{},"\u2003\u2003ExtractLongPathName(ObjectAttributes);"]},{"entry":"21:"},{"entry":["22:","\/\/Check is protection is enabled for current application"]},{"entry":["23:","\u2003\u2003if(_Module::g_ProtectedApplication != paUnknown)"]},{"entry":["24:","\u2003\u2003{"]},{"entry":["25:","\/\/Check for denied file path."]},{"entry":"26:"},{"entry":["27:","\u2003\u2003\u2003if"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(g_module.get_protection( ).CheckForbiddenLocation(strFileName))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["28:","\u2003\u2003\u2003{"]},{"entry":["29:","\u2003\u2003\u2003\u2003_threads_lock.LeaveThread(0);"]},{"entry":["30:","\u2003\u2003\u2003\u2003return STATUS_ACCESS_DENIED;"]},{"entry":["31:","\u2003\u2003\u2003}"]},{"entry":"32:"},{"entry":["33:","\u2003\u2003std::string virtualFileName(strFileName);"]},{"entry":["34:","\/\/Check is this file should be secured (encrypted), with converting"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"its file path to the secured form if necessary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["35:",{}]},{"entry":["36:","\u2003\u2003if(g_module.get_protection( ).IsProtectedFile(strFileName))"]},{"entry":["37:","\u2003\u2003{"]},{"entry":["38:","\u2003\u2003\u2003need_original=false;"]},{"entry":["39:","\u2003\u2003\u2003POBJECT_ATTRIBUTES"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"OurObjectAttributes=NameInitObjectAttributes(ObjectAttributes,"},{"entry":"strFileName);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["40:",{}]},{"entry":["41:","\/\/Call original ZwCreateFile with encrypted file path and some"]},{"entry":[{},"flags"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"modified (we always need read access to the file)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["42:","\u2003\u2003\u2003rv = _originalZwCreateFile("]},{"entry":["43:","\u2003\u2003\u2003\u2003FileHandle,"]},{"entry":"44:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DesiredAccess=="},{"entry":"FILE_ALL_ACCESS?DesiredAccess:DesiredAccess|"},{"entry":"FILE_READ_DATA,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["45:","\u2003\u2003\u2003\u2003OurObjectAttributes,"]},{"entry":["46:","\u2003\u2003\u2003\u2003IoStatusBlock,"]},{"entry":["47:","\u2003\u2003\u2003\u2003AllocationSize,"]},{"entry":["48:","\u2003\u2003\u2003\u2003FileAttributes,"]},{"entry":"49:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"FILE_SHARE_READ|FILE_SHARE_WRITE|"},{"entry":"FILE_SHARE_DELETE,\/\/ShareAccess,\/\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["50:","\u2003\u2003\u2003\u2003CreateDisposition,"]},{"entry":["51:","\u2003\u2003\u2003\u2003CreateOptions,"]},{"entry":["52:","\u2003\u2003\u2003\u2003EaBuffer,"]},{"entry":["53:","\u2003\u2003\u2003\u2003EaLength);"]},{"entry":"54:"},{"entry":"55:"},{"entry":"56:"},{"entry":["57:","\u2003\u2003\u2003NameFreeObjectAttributes(OurObjectAttributes);"]},{"entry":["58:","\u2003\u2003\u2003if(rv==STATUS_SUCCESS)"]},{"entry":["59:","\u2003\u2003\u2003{"]},{"entry":["60:","\/\/Call CryptedFile::PostOpenInitalize routine, that perfoms"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"initialization encryption header of file, if it doesn't have header"},{"entry":"yet"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["61:",{}]},{"entry":["62:","\u2003\u2003\u2003\u2003CryptedFile::PostOpenInitalize(*FileHandle,"]},{"entry":[{},"\u2003\u2003\u2003\u2003strFileName);"]},{"entry":["63:","\u2003\u2003\u2003\u2003OurHandles::HNDINFO info;"]},{"entry":["64:","\u2003\u2003\u2003\u2003info.Flags=0;"]},{"entry":["65:","\u2003\u2003\u2003\u2003info.RefCnt=1;"]},{"entry":["66:","\u2003\u2003\u2003\u2003info.Name=StdStrToLower(virtualFileName);"]},{"entry":["67:","\/\/Store opened handle in our handles cache"]},{"entry":["68:","\u2003\u2003\u2003\u2003OurHandles::PutHandle(*FileHandle,info);"]},{"entry":["69:","\u2003\u2003\u2003}"]},{"entry":["70:","\u2003\u2003}else"]},{"entry":["71:","\u2003\u2003{"]},{"entry":["72:","\/\/if file is not encrypted, but can be opened for write by app then"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"simple pass call to original ZwCreateFile"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["73:","\u2003\u2003\u2003if"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(g_module.get_protection( ).CheckWritablePath(strFileName))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["74:","\u2003\u2003\u2003{"]},{"entry":"75:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SWSUtils::EnsurePathExists(strFileName.substr(4,strFileName.size("},{"entry":")\u22124));"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["76:","\u2003\u2003\u2003\u2003rv = _originalZwCreateFile("]},{"entry":["77:","\u2003\u2003\u2003\u2003\u2003FileHandle,"]},{"entry":["78:","\u2003\u2003\u2003\u2003\u2003DesiredAccess,"]},{"entry":["79:","\u2003\u2003\u2003\u2003\u2003ObjectAttributes,"]},{"entry":["80:","\u2003\u2003\u2003\u2003\u2003IoStatusBlock,"]},{"entry":["81:","\u2003\u2003\u2003\u2003\u2003AllocationSize,"]},{"entry":["82:","\u2003\u2003\u2003\u2003\u2003FileAttributes,"]},{"entry":["83:","\u2003\u2003\u2003\u2003\u2003ShareAccess,"]},{"entry":["84:","\u2003\u2003\u2003\u2003\u2003CreateDisposition,"]},{"entry":["85:","\u2003\u2003\u2003\u2003\u2003CreateOptions,"]},{"entry":["86:","\u2003\u2003\u2003\u2003\u2003EaBuffer,"]},{"entry":["87:","\u2003\u2003\u2003\u2003\u2003EaLength);"]},{"entry":["88:","\u2003\u2003\u2003\u2003need_original=false;"]},{"entry":["89:","\u2003\u2003\u2003}else"]},{"entry":["90:","\u2003\u2003\u2003{"]},{"entry":["91:","\/\/if app tried to create file in read-only location, pass FILE_OPEN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"flag to ZwCreateFile routine to check if file already exist and"},{"entry":"return STATUS_OBJECT_NAME_COLLISION if this case or"},{"entry":"STATUS_ACCESS_DENIED, signaling app file is not exists, but app"},{"entry":"has no write access to specified location"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["92:","\u2003\u2003\u2003if(CreateDisposition==FILE_CREATE)"]},{"entry":["93:","\u2003\u2003\u2003{"]},{"entry":["94:","\u2003\u2003\u2003\u2003rv = _originalZwCreateFile("]},{"entry":["95:","\u2003\u2003\u2003\u2003\u2003FileHandle,"]},{"entry":["96:","\u2003\u2003\u2003\u2003\u2003DesiredAccess,"]},{"entry":["97:","\u2003\u2003\u2003\u2003\u2003ObjectAttributes,"]},{"entry":["98:","\u2003\u2003\u2003\u2003\u2003IoStatusBlock,"]},{"entry":["99:","\u2003\u2003\u2003\u2003\u2003AllocationSize,"]},{"entry":["100:","\u2003\u2003\u2003\u2003\u2003\u2003FileAttributes,"]},{"entry":["101:","\u2003\u2003\u2003\u2003\u2003\u2003ShareAccess,"]},{"entry":["102:","\u2003\u2003\u2003\u2003\u2003\u2003FILE_OPEN,"]},{"entry":["103:","\u2003\u2003\u2003\u2003\u2003\u2003CreateOptions,"]},{"entry":["104:","\u2003\u2003\u2003\u2003\u2003\u2003EaBuffer,"]},{"entry":["105:","\u2003\u2003\u2003\u2003\u2003\u2003EaLength);"]},{"entry":["106:","\u2003\u2003\u2003\u2003\u2003if(rv==STATUS_SUCCESS)"]},{"entry":["107:","\u2003\u2003\u2003\u2003\u2003{"]},{"entry":["108:","\u2003\u2003\u2003\u2003\u2003\u2003_originalZwClose(*FileHandle);"]},{"entry":"109:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"rv=IoStatusBlock->Status=STATUS_OBJECT_NAME_COLLISION;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["110:","\u2003\u2003\u2003\u2003\u2003}else"]},{"entry":["111:","\u2003\u2003\u2003\u2003\u2003{"]},{"entry":["112:","\u2003\u2003\u2003\u2003\u2003\u2003g_logger->LogInfo(\u201c_wrapperZwCreateFile"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003FILE_CREATE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"access denied for \u2018%s\u2019\u201d,strFileName.c_str( ));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["113:","\u2003\u2003\u2003\u2003\u2003\u2003rv=IoStatusBlock->Status="]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003STATUS_ACCESS_DENIED;"]},{"entry":["114:","\u2003\u2003\u2003\u2003\u2003}"]},{"entry":["115:","\u2003\u2003\u2003\u2003\u2003need_original=false;"]},{"entry":["116:","\u2003\u2003\u2003\u2003}else"]},{"entry":["117:","\u2003\u2003\u2003\u2003{"]},{"entry":["118:","\u2003\u2003\u2003\u2003\u2003CreateDisposition=FILE_OPEN;"]},{"entry":"119:"},{"entry":["120:","\/\/If app simple opens file, then adjust access rights as specified in"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"policy"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["121:","DesiredAccess=GetMaxAccess(strFileName,CreateOptions,"]},{"entry":[{},"DesiredAccess);"]},{"entry":["122:","\u2003\u2003\u2003\u2003}"]},{"entry":["123:","\u2003\u2003\u2003}"]},{"entry":"124:"},{"entry":["125:","\u2003\u2003}"]},{"entry":["126:","\u2003}"]},{"entry":"127:"},{"entry":["128:","\u2003_threads_lock.LeaveThread(0);"]},{"entry":"129:"},{"entry":["130:","}"]},{"entry":"131:"},{"entry":["132:","if(need_original)"]},{"entry":["133:","\u2003\u2003rv = _originalZwCreateFile("]},{"entry":["134:","\u2003\u2003FileHandle,"]},{"entry":["135:","\u2003\u2003DesiredAccess,"]},{"entry":["136:","\u2003\u2003ObjectAttributes,"]},{"entry":["137:","\u2003\u2003IoStatusBlock,"]},{"entry":["138:","\u2003\u2003AllocationSize,"]},{"entry":["139:","\u2003\u2003FileAttributes,"]},{"entry":["140:","\u2003\u2003ShareAccess,"]},{"entry":["141:","\u2003\u2003CreateDisposition,"]},{"entry":["142:","\u2003\u2003CreateOptions,"]},{"entry":["143:","\u2003\u2003EaBuffer,"]},{"entry":["144:","\u2003\u2003EaLength);"]},{"entry":"145:"},{"entry":["146:","\u2003return rv;"]},{"entry":["147:","}"]},{"entry":"148:"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The second sample illustrates the processing of ZwWriteFile calls:",{"@attributes":{"id":"p-0109","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1:","\/\/ Sample code that processes ZwWriteFile call (also from SWS):"]},{"entry":["2:","\u2003NTSTATUS _stdcall _wrapperZwWriteFile("]},{"entry":["3:","\u2003\u2003HANDLE FileHandle,"]},{"entry":["4:","\u2003\u2003HANDLE Event,"]},{"entry":["5:","\u2003\u2003PIO_APC_ROUTINE ApcRoutine,"]},{"entry":["6:","\u2003\u2003PVOID ApcContext,"]},{"entry":["7:","\u2003\u2003PIO_STATUS_BLOCK IoStatusBlock,"]},{"entry":["8:","\u2003\u2003PVOID Buffer,"]},{"entry":["9:","\u2003\u2003ULONG Length,"]},{"entry":["10:","\u2003\u2003\u2009PLARGE_INTEGER ByteOffset,"]},{"entry":["11:","\u2003\u2003PULONG Key)"]},{"entry":["12:","\u2003{"]},{"entry":["13:","\u2003\u2003OurHandles::HNDINFO info;"]},{"entry":["14:","\/\/check is specified handle is stored in our handles cache, retrieve"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"some info about it if so"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["15:","\u2003\u2003if(OurHandles::IsOurHandle(FileHandle,info))"]},{"entry":["16:","\u2003\u2003{"]},{"entry":["17:","\/\/check if memory-mapping section object was opened for this file, if"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"so then copy data also to section address space"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["18:","HANDLE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SectionHandle="},{"entry":"OurSectionByName(SectionNameByFileName(info.Name), false);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["19:","\u2003\u2003\u2003NTSTATUS rv;"]},{"entry":["20:","\u2003\u2003\u2003SyncUtils::WaitMutant(sect_mtx,INFINITE);"]},{"entry":["21:","\u2003\u2003\u2003if(SectionHandle)"]},{"entry":["22:","\u2003\u2003\u2003{"]},{"entry":["23:","\u2003\u2003\u2003\u2003OurHandles::HNDINFO sectioninfo;"]},{"entry":["24:","\u2003\u2003\u2003\u2003if(OurHandles::IsOurHandle(SectionHandle,sectioninfo))"]},{"entry":["25:","\u2003\u2003\u2003\u2003{"]},{"entry":["26:","\u2003\u2003\u2003\u2003\u2003IO_STATUS_BLOCK isb;"]},{"entry":["27:","\u2003\u2003\u2003\u2003\u2003FILE_POSITION_INFORMATION fpi={0,0};"]},{"entry":"28:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"_originalZwQueryInformationFile(FileHandle,&isb,&fpi,sizeof(fpi),"},{"entry":"FilePositionInformation);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["29:",{}]},{"entry":["30:","\u2003\u2003\u2003\u2003\u2003if(fpi.CurrentByteOffset.QuadPart<sectioninfo.ViewSize)"]},{"entry":["31:","\u2003\u2003\u2003\u2003\u2003{"]},{"entry":["32:","\u2003\u2003\u2003\u2003\u2003\u2003DWORD"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"pos=ByteOffset?fpi.CurrentByteOffset.LowPart\u2212sizeof("},{"entry":"VD_CRYPT_HEADER):ByteOffset->LowPart,len=Length;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["33:","\u2003\u2003\u2003\u2003\u2003\u2003if(len>(sectioninfo.ViewSize\u2212pos))"]},{"entry":["34:","\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":["35:","\u2003\u2003\u2003\u2003\u2003\u2003\u2003len=(DWORD)sectioninfo.ViewSize\u2212pos;"]},{"entry":["36:","\u2003\u2003\u2003\u2003\u2003\u2003}"]},{"entry":["37:","\u2003\u2003\u2003\u2003\u2003\u2003memcpy(((unsigned char"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*)sectioninfo.PrimaryMapView)+pos,Buffer,len);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["38:",{}]},{"entry":["39:","\u2003\u2003\u2003\u2003\u2003}"]},{"entry":["40:","\u2003\u2003\u2003\u2003}"]},{"entry":["41:","\u2003\u2003\u2003}"]},{"entry":"42:"},{"entry":["43:","\u2003\u2003\u2003LARGE_INTEGER WriteOffset;"]},{"entry":["44:","\u2003\u2003\u2003if(!ByteOffset)"]},{"entry":["45:","\u2003\u2003\u2003{"]},{"entry":["46:","\u2003\u2003\u2003\u2003IO_STATUS_BLOCK isb;"]},{"entry":["47:","\u2003\u2003\u2003\u2003FILE_POSITION_INFORMATION fpi={0,0};"]},{"entry":"48:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"_originalZwQueryInformationFile(FileHandle,&isb,&fpi,sizeof(fpi),"},{"entry":"FilePositionInformation);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["49:","\u2003\u2003\u2003\u2003WriteOffset=fpi.CurrentByteOffset;"]},{"entry":["50:","\u2003\u2003\u2003}else"]},{"entry":"51:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"WriteOffset.QuadPart="},{"entry":"ByteOffset->QuadPart+sizeof(VD_CRYPT_HEADER);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["52:",{}]},{"entry":["53:","\/\/call CryptedFile::WriteFile to perfom writing content with"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"encryption to physical file"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["54:","\u2003\u2003\u2003rv=CryptedFile::WriteFile(FileHandle, IoStatusBlock, Buffer,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Length,&WriteOffset,Key);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["55:","\u2003\u2003\u2003\/\/\/\/\/\/\/\/\/\/"]},{"entry":["56:","\u2003\u2003\u2003IO_STATUS_BLOCK isb;"]},{"entry":["57:","\u2003\u2003\u2003FILE_POSITION_INFORMATION fpi={0,0};"]},{"entry":"58:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"_originalZwQueryInformationFile(FileHandle,&isb,&fpi,sizeof(fpi),"},{"entry":"FilePositionInformation);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["59:","\u2003\u2003\u2003SyncUtils::ReleaseMutant(sect_mtx);"]},{"entry":["60:","\u2003\u2003\u2003if(Event)SetEvent(Event);"]},{"entry":["61:","\u2003\u2003\u2003return rv;"]},{"entry":["62:","\u2003\u2003}"]},{"entry":"63:"},{"entry":["64:","\/\/pass call to original ZwWriteFile routine if specified handle is"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"unknown for us"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["65:","return _originalZwWriteFile(FileHandle, Event, ApcRoutine,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ApcContext,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["66:","\u2003\u2003\u2003IoStatusBlock, Buffer, Length, ByteOffset, Key);"]},{"entry":["67:","\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Synchronization Objects Virtualization","A synchronization objects virtualization engine is provided that can optionally change names of named synchronization objects (mutexes, semaphores, events, and the like) that are created by secured applications, thus allowing independent applications to function on secure and default desktops. For example, Adobe Acrobat Reader (acrord32.exe) creates certain named objects, the existence of which it uses to whether an instance of the Reader is already running (and thus a second instance should not be started). The specification of its names in the policy (XML) file makes possible to ensure acrord32.exe is the only running application instance in system.","Registry Processing Engine","A Registry processing engine is provided that allows flexible virtualization and protection of selected registry keys (which can be customized in the policy). Write-protection of selected keys is done by analyzing parameters of ZwCreateKey and ZwOpenKey routines and returning \u201cAccess Denied\u201d status, if any modification access is requested. Virtualization is done by creating an additional registry subkey (HKCU\\CPSecured) and changing all absolute paths requested by secured applications to really point to this key. Also a Copy-On-Access feature is provided to allow access to registry keys and values without noticeable delays for importing values from the original keys.","Exemplary wrapper code, ZwCreateKey, may be implemented as follows:",{"@attributes":{"id":"p-0115","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1:","NTSTATUS _stdcall _wrapperZwCreateKey(PHANDLE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"KeyHandle,ACCESS_MASK DesiredAccess,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2:","\u2003\u2003\u2003\u2003POBJECT_ATTRIBUTES ObjectAttributes,ULONG"]},{"entry":[{},"\u2003\u2003\u2003\u2003TitleIndex,"]},{"entry":["3:","\u2003\u2003\u2003\u2003PUNICODE_STRING Class,ULONG"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CreateOptions,PULONG Disposition)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["4:","\u2003{"]},{"entry":["5:","\/\/check is protection enabled for current application"]},{"entry":["6:","\u2003\u2003\u2003if((_Module::g_ProtectedApplication !="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"paUnknown)&&_threads_lock.EnterThread(_LINE_))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["7:","\u2003\u2003{"]},{"entry":["8:","\u2003\u2003\u2003std::string"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"keypath=UNCStr2String(ObjectAttributes->ObjectName);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["9:","\u2003\u2003\u2003std::string Ikeypath=StdStrToLower(keypath);"]},{"entry":"10:"},{"entry":["11:","\u2003\u2003\u2003NTSTATUS rv;"]},{"entry":["12:","\/\/ TranslateHKEY routine checks is specified path belongs to HKCU"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"hive, converting it to virtual key path and returning true in this"},{"entry":"case, if path is read-only HKLM path it return false and don't change"},{"entry":"key path"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["13:","\u2003\u2003\u2003bool"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"mode=RegUtils::TranslateHKEY(ObjectAttributes->"},{"entry":"RootDirectory,keypath);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["14:","\u2003\u2003\u2003if(mode)"]},{"entry":["15:","\u2003\u2003\u2003{"]},{"entry":["16:","\/\/if path is points to virtualized key, then call original"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ZwCreateKey routine with path, relative to HKCU\\CPSecured location"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["17:","\u2003\u2003\u2003\u2002POBJECT_ATTRIBUTES"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"OurObjectAttributes=NameInitObjectAttributes(ObjectAttributes,"},{"entry":"keypath);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["18:","\u2003\u2003\u2003OurObjectAttributes->RootDirectory=NULL;"]},{"entry":"19:"},{"entry":"20:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"rv=_originalZwCreateKey(KeyHandle,DesiredAccess,"},{"entry":"OurObjectAttributes,TitleIndex,Class,CreateOptions,Disposition);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["21:",{}]},{"entry":["22:","\u2003\u2003\u2003NameFreeObjectAttributes(OurObjectAttributes);"]},{"entry":["23:","\u2003\u2003}else"]},{"entry":["24:","\u2003\u2003{"]},{"entry":["25:","\/\/if path is read-only and app tried to get write access to this key"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"then just return access denied to it"},{"entry":"if((DesiredAccess&KEY_SET_VALUE)||("},{"entry":"DesiredAccess&KEY_CREATE_SUB_KEY)||"},{"entry":"((DesiredAccess&KEY_ALL_ACCESS)=="},{"entry":"KEY_ALL_ACCESS))"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["26:","\u2003\u2003\u2003{"]},{"entry":["27:","\u2003\u2003\u2003\u2003_threads_lock.Leave-"]},{"entry":[{},"\u2003\u2003\u2003\u2003Thread(STATUS_ACCESS_DENIED);"]},{"entry":["28:","\u2003\u2003\u2003\u2003return STATUS_ACCESS_DENIED;"]},{"entry":["29:","\u2003\u2003\u2003}"]},{"entry":"30:"},{"entry":["31:","\u2003\u2003\u2003DesiredAccess=KEY_READ;"]},{"entry":"32:"},{"entry":["33:","\/\/call original ZwCreateKey routine for read access"]},{"entry":"34:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"rv=_originalZwCreateKey(KeyHandle,DesiredAccess,ObjectAttributes,"},{"entry":"TitleIndex,Class,CreateOptions,Disposition);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["35:",{}]},{"entry":["36:","\u2003\u2003\u2003}"]},{"entry":"37:"},{"entry":["38:","\u2003\u2003\u2003_threads_lock.LeaveThread(rv);"]},{"entry":["39:","\u2003\u2003\u2003return rv;"]},{"entry":["40:","\u2003\u2003}else"]},{"entry":["41:","\u2003\u2003\u2003return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"_originalZwCreateKey(KeyHandle,DesiredAccess,ObjectAttributes,"},{"entry":"TitleIndex,Class,CreateOptions,Disposition);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["42:","\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"For example, beginning with the program logic at line 6 the function checks whether protection is enabled for current application (under consideration). At line 13, the TranslateHKEY routine is invoked to check whether the specified path belongs to HKCU (HKEY_CURRENT_USER) hive. If so, the routine converts it to a virtual key path and returns \u201ctrue.\u201d If the path is read-only (HKLM (HKEY_LOCAL_MACHINE) path), the routine returns \u201cfalse\u201d and the key path remains unchanged. At line 17, if the path points to a virtualized key, then the original ZwCreateKey routine is called with the path (relative to the HKCU\\CPSecured location). At line 25, if the path is read-only and the application tries to get write access to this key, the program logic returns \u201cAccess Denied\u201d (for denying access to the key). Line  demonstrates a call to the original ZwCreateKey routine, for providing read access.","OLE32 Calls Filtering","OLE32 calls filtering is provided to intercept the OS' COM server's creation requests. When an application asks OLE32 to create an out-of-process COM server, the wrapper checks the COM server presence in the SWS. The path is extracted to an executable image of the COM server from the registry HKCR (HKEY_CLASSES_ROOT) hive. The server starts itself, if the server was not already started before. Such an approach allows the starting of secured COM servers. The following program logic illustrates main aspects of this functionality:",{"@attributes":{"id":"p-0119","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1:","bool Ole32APIWrapper::CheckIsServerStarted(std::string server)"]},{"entry":["2:","{\/\/this function checks if specified image process is already started"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"in secured mode, if so we don't need to start it one more time"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3:","\u2003bool out=false;"]},{"entry":["4:","\u2003typedef std::set<DWORD> PROCSET;"]},{"entry":["5:","\u2003PROCSET procs;"]},{"entry":["6:","\u2003HANDLE snt ="]},{"entry":[{},"\u2003CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0);"]},{"entry":["7:","\u2003if(snt!=INVALID_HANDLE_VALUE)"]},{"entry":["8:","\u2003{"]},{"entry":["9:","\u2003\u2003PROCESSENTRY32 pe32={sizeof(PROCESSENTRY32),0};"]},{"entry":"10:"},{"entry":["11:","\/\/prepare full list of active secured processes"]},{"entry":["12:","\u2003\u2003if(Process32First(snt,&pe32))"]},{"entry":["13:","\u2003\u2003{"]},{"entry":["14:","\u2003\u2003\u2003do {"]},{"entry":"15:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"if(VDPipeClient::IsPidSecured(pe32.th32ProcessID))procs.insert(pe32."},{"entry":"th32ProcessID);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["16:","\u2003\u2003\u2003} while(Process32Next(snt,&pe32));"]},{"entry":["17:","\u2003\u2003}"]},{"entry":["18:","\u2003\u2003CloseHandle(snt);"]},{"entry":["19:","\u2003}"]},{"entry":"20:"},{"entry":"21:"},{"entry":["22:","\u2003std::string ShortServer = StdStrToLower(ShortPathName(server));"]},{"entry":"23:"},{"entry":["24:","\/\/compare image path names of secured processes with requested"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"path, if found matching path - return true, else - return false"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["25:",{}]},{"entry":["26:","\u2003for(PROCSET::iterator i=procs.begin( );i!=procs.end( );++i)"]},{"entry":["27:","\u2003{"]},{"entry":["28:","\u2003\u2003ics::handle prc="]},{"entry":[{},"\u2003\u2003OpenProcess(PROCESS_ALL_ACCESS,FALSE,*i);"]},{"entry":["29:","\u2003\u2003std::vector<HINSTANCE> modarray(255);"]},{"entry":["30:","\u2003\u2003DWORD needsize=sizeof(HINSTANCE)*modarray.size( );"]},{"entry":["31:","\u2003\u2003BOOL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"modenumok=EnumProcessModules(prc,&modarray[0],"},{"entry":"needsize,&needsize);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["32:","\u2003\u2003if(needsize>(sizeof(HINSTANCE)*modarray.size( )))"]},{"entry":["33:","\u2003\u2003{"]},{"entry":["34:","\u2003\u2003\u2003needsize+=512;"]},{"entry":["35:","\u2003\u2003\u2003modarray.resize(needsize\/sizeof(HINSTANCE));"]},{"entry":"36:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"modenumok="},{"entry":"EnumProcessModules(prc,&modarray[0],needsize,&needsize);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["37:","\u2003\u2003}"]},{"entry":["38:","\u2003\u2003if(!modenumok)"]},{"entry":["39:","\u2003\u2003\u2003continue;"]},{"entry":"40:"},{"entry":["41:","\u2003\u2003needsize\/=sizeof(HINSTANCE);"]},{"entry":["42:","\u2003\u2003for(size_t j=0;j<needsize;j++)"]},{"entry":["43:","\u2003\u2003{"]},{"entry":["44:","\u2003\u2003\u2003char modpath[MAX_PATH+1];"]},{"entry":["45:","\u2003\u2003\u2003DWORD"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"modlen=GetModuleFileNameEx(prc,modarray[j],modpath,MAX_PATH);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["46:","\u2003\u2003\u2003if(modlen&&(modlen<=MAX_PATH))"]},{"entry":["47:","\u2003\u2003\u2003{"]},{"entry":["48:","\u2003\u2003\u2003\u2003std::string"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CurServer=StdStrToLower(ShortPathName(std::string(modpath,modlen)));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["49:","\u2003\u2003\u2003\u2003if(ShortServer == CurServer)"]},{"entry":["50:","\u2003\u2003\u2003\u2003{"]},{"entry":["51:","\u2003\u2003\u2003\u2003\u2003out = true;"]},{"entry":["52:","\u2003\u2003\u2003\u2003break;"]},{"entry":["53:","\u2003\u2003\u2003\u2003}"]},{"entry":["54:","\u2003\u2003\u2003}"]},{"entry":["55:","\u2003\u2003}"]},{"entry":"56:"},{"entry":["57:","\u2003}"]},{"entry":["58:","\u2003return out;"]},{"entry":["59:","}"]},{"entry":["60:","......"]},{"entry":["61:","bool Ole32APIWrapper::CreateLocalServer(std::string server)"]},{"entry":["62:","{"]},{"entry":["63:","\/\/check if server already started, in this case do nothing"]},{"entry":["64:","if(EnsureServerStartedAndInjected(server))"]},{"entry":["65:","\u2003\u2003return true;"]},{"entry":"66:"},{"entry":["67:","\u2003STARTUPINFO si ={sizeof(STARTUPINFO),0};"]},{"entry":["68:","\u2003PROCESS_INFORMATION pin={0};"]},{"entry":["69:","\u2003std::string cmd(\u201c\\\u201d\u201d);"]},{"entry":["70:","\u2003cmd.append(server);"]},{"entry":["71:","\u2003cmd.append(\u201c\\\u201d -Embedding\u201d);"]},{"entry":["72:","\/\/start COM server process with -Embedding parameter"]},{"entry":"73:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"if(CreateProcess(server.c_str( ),(char*)cmd.c_str( ),NULL,NULL,"},{"entry":"FALSE,0,NULL,NULL,&si,&pin))"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["74:","\u2003{"]},{"entry":["75:","\u2003\u2003WaitForInputIdle(pin.hProcess,5000);"]},{"entry":["76:","\u2003\u2003Sleep(500);"]},{"entry":["77:","\u2003\u2003CloseHandle(pin.hProcess);"]},{"entry":["78:","\u2003\u2003CloseHandle(pin.hThread);"]},{"entry":["79:","\u2003}"]},{"entry":["80:","\u2003return true;"]},{"entry":["81:","}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The CheckIsServerStarted function checks whether the specified image process is already started in secured mode (so that is not necessary to start it one more time). At line 14, a \u201cdo\/while\u201d loop is established to prepare a full list of active secured processes. At line 26, a \u201cfor\u201d loop compares the image path names of secured processes with the requested path. If the comparison finds a matching path, the program logic returns \u201ctrue\u201d; otherwise, it returns \u201cfalse.\u201d If the server is already started (tested at line 64), then the function does no additional work and simply returns \u201ctrue.\u201d Otherwise, the function proceeds to start the COM server process with embedding parameter.","Exemplary ole32.dll wrappers that intercept attempts to create COM servers may be constructed as follows:",{"@attributes":{"id":"p-0122","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1: ...................."},{"entry":"2: \/\/ole32.dll wrappers, that intercepts\/attempts to create COM servers"},{"entry":"3: bool Ole32APIWrapper::CreateLocalServer(REFCLSID rclsid)"},{"entry":"4: {"},{"entry":"5: \u2003std::string strServerName = Ole32APIWrapper::"},{"entry":"ServerByCLSID(rclsid);"},{"entry":"6: \u2003if (!strServerName.empty())"},{"entry":"7: \u2003{"},{"entry":"8: \u2003\u2003return Ole32APIWrapper::CreateLocalServer(strServerName);"},{"entry":"9: \u2003}"},{"entry":"10: \u2003\u2003return true;"},{"entry":"11: }"},{"entry":"12: ............."},{"entry":"13: HRESULT _stdcall _wrapperCoCreateInstanceEx("},{"entry":"14: \u2003\u2003REFCLSID rclsid,"},{"entry":"15: \u2003\u2003IUnknown * punkOuter,"},{"entry":"16: \u2003\u2003DWORD dwClsCtx,"},{"entry":"17: \u2003\u2003COSERVERINFO * pServerInfo,"},{"entry":"18: \u2003\u2003ULONG cmq,"},{"entry":"19: \u2003\u2003MULTI_QI * pResults)"},{"entry":"20: {"},{"entry":"21: \u2003\u2003if(!Ole32APIWrapper::CreateLocalServer(rclsid))"},{"entry":"22: \u2003\u2003return E_NOINTERFACE;"},{"entry":"23:"},{"entry":"24: \u2003HRESULT rv = _originalCoCreateInstanceEx(rclsid, punkOuter,"},{"entry":"dwClsCtx, pServerInfo, cmq, pResults);"},{"entry":"25:"},{"entry":"26: \u2003if (_Module::g_ProtectedApplication != paUnknown)"},{"entry":"27: \u2003{"},{"entry":"28: \u2003\u2003Ole32APIWrapper::TraceObjectNameByCLSID(rclsid,"},{"entry":"\u201cCoCreateInstanceEx\u201d);"},{"entry":"29: \u2003\u2003Ole32APIWrapper::CatchLocalServer(rclsid);"},{"entry":"30: \u2003}"},{"entry":"31:"},{"entry":"32: \u2003\u2003return rv;"},{"entry":"33: }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Clipboard Processing Engine","A \u201cClipboard\u201d processing engine is provided to serve as a mechanism to intercept saving data to and retrieving data from the OS' clipboard by secured application(s), thereby allowing on-the-fly encryption of private data stored to clipboard. In Windows OS, for example, this can be achieved by intercepting only three functions\u2014GetClipboardData, SetClipboardData and CloseClipboard\u2014that are exported by Windows' user32.dll. For example, a GetClipboardData wrapper may be implemented as follows:",{"@attributes":{"id":"p-0125","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1: HANDLE stdcall _wrapperGetClipboardData( UINT uFormat)"},{"entry":"2: {"},{"entry":"3:\u2003return globalDecrypt(_originalGetClipboardData(uFormat));"},{"entry":"4: }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As shown, this works in conjunction with a globalDecrypt function to decrypt The data for reconstituting the original Clipboard data. The globalDecrypt function itself may be constructed as follows:",{"@attributes":{"id":"p-0127","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1:","HANDLE globalDecrypt(HANDLE src)"]},{"entry":["2:","{"]},{"entry":["3:","if(!src)return src;"]},{"entry":["4:","size_t sz=GlobalSize(src);"]},{"entry":["5:","if(sz<2)return src;"]},{"entry":"6:"},{"entry":["7:","char *sbuff=(char *)GlobalLock(src);"]},{"entry":["8:","if(!sbuff)return src;"]},{"entry":["9:","HANDLE out=src;"]},{"entry":["10:","if((sbuff[0]==0\u00d707)&&(sbuff[1]==0\u00d710))"]},{"entry":["11:","{"]},{"entry":["12:","unsigned int dstlen=0;"]},{"entry":["13:","VDCryptUtils::DecryptRAWBufferFromString(sbuff+2, sz-2, NULL,"]},{"entry":[{},"dstlen);"]},{"entry":"14:"},{"entry":["15:","if(dstlen)"]},{"entry":["16:","{"]},{"entry":["17:","out=GlobalAlloc(GMEM_MOVEABLE,dstlen);"]},{"entry":["18:","char *dbuff=(char *)GlobalLock(out);"]},{"entry":["19:","VDCryptUtils::DecryptRAWBufferFromString(sbuff+2, sz-2, dbuff,"]},{"entry":[{},"dstlen);"]},{"entry":["20:","GlobalUnlock(out);"]},{"entry":["21:","}"]},{"entry":["22:","}"]},{"entry":["23:","GlobalUnlock(src);"]},{"entry":["24:","return out;"]},{"entry":["25:","}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Print Interceptor","A print interceptor engine is provided to hook the Windows StartDocW and StartDocA functions exported by gdi32.dll. These StartDoc functions start a print job in Windows. By intercepting these functions, the SWS may deny any print operations. Additionally, the feature can be configured by the policy file.","Process Creation Interceptor","A process creation interceptor is also provided. When a secured application tries to create a new process, it executes hooking engine code that hooks all necessary API calls of the created child process. It also writes some secure data (secure token) directly to memory of the created process that allows the SWS to further distinguish between a secured application and malicious applications (which may try to use SWS functionality to access secured data). Sample pseudocode, illustrating main features of process creation wrapper, is as follows:",{"@attributes":{"id":"p-0132","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1: BOOL WINAPI _wrapperCreateProcessW"},{"entry":"2: ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3: wchar_t *lpApplicationName,","\/\/ name of executable"]},{"entry":"module"},{"entry":["4: wchar_t *lpCommandLine,","\/\/ command line string"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"5: LPSECURITY_ATTRIBUTES lpProcessAttributes, \/\/ SD"},{"entry":"6: LPSECURITY_ATTRIBUTES lpThreadAttributes, \/\/ SD"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["7: BOOL bInheritHandles,","\/\/ handle inheritance"]},{"entry":"option"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["8: DWORD dwCreationFlags,","\/\/ creation flags"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["9: LPVOID lpEnvironment,","\/\/ new environment block"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["10: wchar_t *lpCurrentDirectory,","\/\/ current directory name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["11: LPSTARTUPINFOW lpStartupInfo,","\/\/ startup information"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"12: LPPROCESS_INFORMATION lpProcessInformation"},{"entry":"\/\/ process information"},{"entry":"13: )"},{"entry":"14: {"},{"entry":"15: if (!CheckPolicyExecAllowed (lpApplicationName))"},{"entry":"16: {"},{"entry":"17: SetLastError(ERROR_ACCESS_DENIED);"},{"entry":"18: ShowAlert(\u201cExecute denied by policy\u201d);"},{"entry":"19: return FALSE;"},{"entry":"20: }"},{"entry":"21:"},{"entry":"22: BOOL bRes = StartProcessWithDll(IpApplicationName,"},{"entry":"CpSwsDllPathName, IpStartupInfo,IpProcessInformation);"},{"entry":"23: if(!bRes)return FALSE;"},{"entry":"24:"},{"entry":"25: PVOID remoteSecureCookiePtr ="},{"entry":"GetRemoteSecureCookiePtr(IpProcessInformation->hProcess);"},{"entry":"26: WriteProcessMemory(IpProcessInformation->hProcess,"},{"entry":"remoteSecureCookiePtr,&SecureCookie,sizeof(SecureCookie),NULL);"},{"entry":"27: return TRUE;"},{"entry":"28: }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Importantly, if the policy does not allow the executable, then the function returns \u201cfalse\u201d at line 19. Otherwise, the function will proceed to allow process creation (at line 22).","Encryption","Encryption functionality implemented in the present invention is designed to be flexible and easy to configure. It allows, for example, the use of different cryptographic algorithms for encrypting objects of a given type. The particular encryption algorithm used is noted (via a stored ID) in the stored object, via an opaque header. The header also stores other housekeeping information, such as real data length. In the currently preferred embodiment, encryption functionality is implemented using the following interface:",{"@attributes":{"id":"p-0136","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1: class IVDCrypt"]},{"entry":[{},"2: {"]},{"entry":[{},"3: public:"]},{"entry":[{},"4: \u2003virtual bool EncryptBuffer(char *Buffer, unsigned _int64"]},{"entry":[{},"Offset,unsigned int Length)=0;"]},{"entry":[{},"5: \u2003virtual bool DecryptBuffer(char *Buffer, unsigned _int64"]},{"entry":[{},"Offset,unsigned int Length)=0;"]},{"entry":[{},"6: \u2003virtual unsigned int Align()=0;"]},{"entry":[{},"7: };"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Every time engine functionality requests to encrypt or decrypt some blocks of data, the engine creates an instance (of implementation) of the particular preferred crypto algorithm, by giving the preferred algorithm ID to the encryption engine. If the engine detects that data is not encrypted yet, it will proceed to use the specified algorithm. If data is already encrypted, however, the engine will use the algorithm ID that is specified in encrypted data header. The particular encryption key employed is currently randomly generated, on session initialization.","URL Secure Cookie Injector","A URL secure cookie injector is provided for injecting a variable count of secure cookies into HTTP requests. Thus, the SWS can inject one or more additional secure cookies into every secured process using the Windows' InternetSetCookie API function. The SWS also creates Mozilla Firefox profile files with secure cookies during initialization. HTTP URL and corresponding secure cookie data is given to the secure workspace manager (cpsws.exe) by the launcher, as command-line parameters. The manager (cpsws.exe) cleans up the command-line after startup to prevent leaking of this information. This allows the corresponding HTTP server of the enterprise portal to distinguish HTTP requests from secured and unsecured applications (e.g., using GWLIB API).","Configuration Loader","A configuration loader (with storage class) is provided that loads and analyzes the policy (cpsws.xml file), in which configuration and policy settings are stored. The loader provides an interface for other functionality parts to access their policies and configuration. It is possible to configure in the XML file what registry keys should be initialized and what values they should have for the SWS environment.","Inter-process Communication (IPC) Channel","An inter-process communication (IPC) channel is provided to serve as a generic mechanism for low-level safe and secure communication between SWS functionality parts loaded into different processes. It is implemented as a pipe server that is started in the cpsws.exe core process on the early stage of initialization; given pipe clients that connect to the server from cpsws.dll instances are loaded into secured applications. The server expects a secure token as the first data sent from a given client via pipe. If it receives any other data, it closes the pipe connection after waiting a prescribed period of time (as an anti-hacker delay). A secure token is written directly to secured process memory on its creation, so no one else can use the IPC channel\/engine.","Desktop Initialization and Security","Desktop initialization and security uses the Windows' CreateDesktop API both with NT security features to achieve maximum possible control of user-space prevention, and to prevent keyboard loggers and screen-shooters from accessing private information. The CreateDesktop API function creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The virtual desktop, which is created by the CreatesDesktop API function, can be optionally equipped with special Security Descriptor that ensures no one can launch an application on the secured desktop or install a keyboard hook into it (and even make it impossible to get a desktop handle to this desktop). During initialization the manager (cpsws.exe) creates a desktop and assigns to it security descriptor with an empty DACL. The security descriptor creation and initialization code may, for example, be implemented along the following lines:",{"@attributes":{"id":"p-0146","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1: void DesktopSecurity::Secure( )"},{"entry":"2: {"},{"entry":"3: \u2003PSECURITY_DESCRIPTOR sd=(PSECURITY_DESCRIPTOR)new char[0xffff];"},{"entry":"4: \u2003InitializeSecurityDescriptor(sd,SECURITY_DESCRIPTOR_REVISION);"},{"entry":"5: \u2003ACL a;"},{"entry":"6: \u2003if (InitializeAcl(&a,sizeof(ACL),ACL_REVISION)&& IsValidAcl(&a))"},{"entry":"7: \u2003{"},{"entry":"8: \u2003\u2003ApplySD(sd);"},{"entry":"9: \u2003\u2003SECURITY_INFORMATION si=DACL_SECURITY_INFORMATION;"},{"entry":"10: \u2003\u2003SetSecurityDescriptorDacl(sd,TRUE,&a,FALSE);"},{"entry":"11: \u2003\u2003ApplySD(sd);"},{"entry":"12: \u2003\u2003}"},{"entry":"13: \u2003\u2003delete[ ] (char *)sd;"},{"entry":"14: }"},{"entry":"15:"},{"entry":"16: \/\/ ..."},{"entry":"17:"},{"entry":"18: void DesktopSecurity::ApplySD(PSECURITY_DESCRIPTOR sd)"},{"entry":"19: {"},{"entry":"20: \u2003\u2003SECURITY_INFORMATION si=DACL_SECURITY_INFORMATION;"},{"entry":"21: \u2003\u2003SetUserObjectSecurity(_desk,&si,sd);"},{"entry":"22: }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"User and application specific initialization routines","Since the SWS performs HKCU hive and user's profile virtualization, it is possible to enforce some user-interface predefinitions for applications running under SWS. Examples include disabling or extending some shell features, adding configuration shortcuts on Desktop or Start Menu, importing some files from the original profile, and the like. Also, the SWS performs automatic changing of desktop background wallpaper when switching from default desktop to secured one and vice versa.","Additional User-interface Features","After creating a virtual desktop, the SWS creates notification area (tray) icons both on secured and default desktops. These icons allow switching between desktops and closing of the SWS. The notification icon on the secure desktop is used also to display some user information messages and security warnings (e.g., as information balloons). The SWS draws a special icon on the right side of titles for all secured applications, to provide user feedback\/psychological conviction that he or she is working in a secure workspace.","De-initialization","On the exit command (that can be given directly from the notification icon menu or by ExitWindowsEx API call invoked from any secured application), the SWS starts the de-initialization procedure or method.  is a flowchart illustrating a method  of the present invention for de-initialization. At step , the method queries all applications currently running in the SWS for shutdown, by sending them WM_QUERYENDSESION and WM_ENDSESSION messages. This allow applications to ask the user to save any information before shutdown. Next, at step , all running SWS applications are terminated. The pipe server is closed at step , and all encrypted files are deleted from virtual user profile at step . Finally, at step , the method  concludes by deleting HKCU\\CPSecured registry key.","While the invention is described in some detail with specific reference to a single-preferred embodiment and certain alternatives, there is no intent to limit the invention to that particular embodiment or those specific alternatives. For instance, those skilled in the art will appreciate that modifications may be made to the preferred embodiment without departing from the teachings of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 3A-B"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
