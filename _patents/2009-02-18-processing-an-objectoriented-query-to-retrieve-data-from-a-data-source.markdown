---
title: Processing an object-oriented query to retrieve data from a data source
abstract: An object-oriented query to retrieve data from a data source stored on a data storage device connected to a computer is processed. One implementation involves receiving a Java Query Language (JQL) user query, compiling the JQL query using a Java compliant compiler, and detecting any compilation error due to a syntax error in the JQL query. If a compilation error is detected, then informing the user of the compilation error such that the user may correct the syntax error in the JQL query. Otherwise if a compilation error is not detected, then processing the JQL query for execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881121&OS=08881121&RS=08881121
owner: International Business Machines Corporation
number: 08881121
owner_city: Armonk
owner_country: US
publication_date: 20090218
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION","Example 1","Select all Employees","Example 2","Select Employees, Who Served Orders for IBM, Order the Result by their City and Name"],"p":["The invention relates generally to computer data models, and in particular, to object-oriented models.","Structured Query Language (SQL) is a database computer language for data retrieval such as in a relational database. SQL allows dealing with data in a declarative manner and has gained popularity with database vendors. However, when handling data programmatically, i.e., from a high level programming language (such as C, C++ or Java), a mismatch appears since a software developer has to deal with two different environments speaking two different languages. This is because the relational environment uses declarative approaches (SQL), while the object-oriented environment uses procedural and object-based approaches. As such, the developer has to learn database languages such as SQL and what comes with it, such as stored procedures and data types, while also mastering programming languages such as Java, C, C++, C Sharp (C#) programming language, or even Visual Basic. Furthermore, the developer has to master the application programming interfaces (APIs) that bind said two environments together.","Object Relational Mapping (ORM) systems allow the developer to deal with objects in a simplified manner rather than dealing with raw data. ORM solutions offer the developer the ability to query relational data sources in an object-oriented manner, by providing their own query languages, such as EJB QL, JDOQL, HQL, and others.","However, using ORM, the developer still has to maintain two different languages (Java and the ORM-specific-QL provided by the ORM solutions) having different syntax, concepts and constructs. Moreover, such languages lack basic features developers have grown accustomed to such as debugging, testing, logging, etc. Further, such languages query only databases, and cannot support query of other data sources such as collections, or XML files.","SQLJ technology (a Java optimized query language) provides a programming interface that allows SQL statements to be expressed at a high level in a Java program. However, SQLJ is a new different language with different syntax written in external files. The same concept of SQLJ has also been applied to memory collections and arrays, in an attempt to provide a generalized Java based query language (Java Query Language (JQL)). However, this is for arrays and collections only, requiring composing different syntax in external files that need a pre-processing step as a front-end compiler.","Other modern programming languages such as C# and Visual Basic attempt to provide native query capabilities, and Microsoft has introduced LINQ (Language Integrated Query) providing query APIs to query different data sources. To achieve this, language syntax upgrades are made, such that \u201cselect\u201d, \u201cfrom\u201d, \u201cwhere\u201d, \u201corder by\u201d, etc., become reserved key words in C#. IBM provides JLINQ which targets the same goals that LINQ targets. JLINQ offers the developer the ability to issue pure SQL statements from Java code, and get SQL validated at compile time by a special eclipse plug-in that detects the syntax mistakes and notifies the developer about them. However, using such approaches, the developer still has to maintain both Java code, and SQL code, to query a data source.","Processing an object-oriented query to retrieve data from a data source stored on a data storage device connected to a computer, is provided. One embodiment involves receiving a Java Query Language (JQL) user query, compiling the JQL query using a Java compliant compiler, and detecting any compilation error due to a syntax error in the JQL query. If a compilation error is detected, then informing the user of the compilation error such that the user may correct the syntax error in the JQL query. Otherwise if a compilation error is not detected, then processing the JQL query for execution.","Compiling the JQL query using a Java compliant compiler may further include using a Java compliant compiler for compile-time checking when parsing generics-based code in the JQL query. The user query may include a Java Query Language query comprising a type safe, Java based, object-oriented and declarative query. Said data source comprises a relational data source. Compiling the JQL query using a Java compliant compiler and detecting any compilation error due to a syntax error in the JQL query, is performed at query development time. Processing the query for execution may further include generating SQL code from the JQL query. Processing the query for execution may further include executing the query against the data source and providing query results to the user.","The following description is made for the purpose of illustrating the general principles of the invention and is not meant to limit the inventive concepts claimed herein. Further, particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations. Unless otherwise specifically defined herein, all terms are to be given their broadest possible interpretation including meanings implied from the specification as well as meanings understood by those skilled in the art and\/or as defined in dictionaries, treatises, etc. The description may disclose several preferred embodiments for information technology (IT) Object-Oriented and Declarative Query Languages. While the following description will be described in terms of such languages for clarity and placing the invention in context, it should be kept in mind that the teachings herein may have broad application to all types of systems, devices and applications.","A type safe, Java based, object-oriented and declarative query programming system for querying relational data sources such as arrays, collections or XML files, is provided. The Java Query Language (JQL) is a Java-based-SQL-like, declarative, flexible, typed, and object-oriented query system for the Java programming language that can query relational data sources in a unified manner, regardless the data source provider, the language used and the location where the data exists (e.g., in memory, files, or databases).","Table 1 below shows a simple code example of a JQL query that operates on an array of integers, wherein the query selects the minimum odd number between 20 and 70 that is divisible by 5 from 40, 22, 51, 25, 44, 77 and 100.",{"@attributes":{"id":"p-0017","num":"0016"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"JQL query example"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int [ ] numbers = new int [ ] {40, 22, 51, 25, 44, 77, 100};"]},{"entry":[{},"NumberModel n = Jql.getNumberModel( );\/\/ built in model"]},{"entry":[{},"int result ="]},{"entry":[{},"JQL"]},{"entry":[{},"("]},{"entry":[{},"\u2003\u2003\u2003SELECT(MIN(n)),"]},{"entry":[{},"\u2003\u2003\u2003FROM(numbers),"]},{"entry":[{},"\u2003\u2003\u2003WHERE"]},{"entry":[{},"\u2003\u2003\u2003("]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003n.between(20, 70),"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003AND, n.mod(2).notEquals(0)\u2003\/\/ odd number"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003AND, n.mod(5).equals(0)\u2003\u2003\u2002\/\/ divisible by 5"]},{"entry":[{},"\u2003\u2003\u2003)"]},{"entry":[{},");"]},{"entry":[{},"Result  \u200925"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Using JQL can be beneficial as it is based on Java (Java was developed by Sun Microsystems). As such, JQL saves a developer the overhead of learning a new query language, such as SQL or an Object Relational Mapping (ORM) specific language such as Enterprise JavaBeans Query Language (EJB QL). The same query works for different data sources (e.g., like databases, collections of object, arrays and XML files). If the underlying data source is a relational data source (i.e., database), then a JQL query can query different databases from different vendors (e.g., DB2, SQL-Server 2000, SQL-Server 2005 and Derby). JQL also allows use, and integration with, existing ORM solutions (JQL can function as a front-end query system to the ORM solutions and the ORM solutions provide a back-end persistence provider).","According to an embodiment of the invention, a JQL module provides compile-time query syntax checking to detect syntax errors that typically occur during composing queries. A Java compiler is used to provide such compile-time checking when parsing generics-based code that JQL uses. Generally for a Java file that contains a JQL query which is compile-errors free, when such a Java file is compiled, the SQL statements that will be generated at runtime are also compile-errors free. There is no tool to compile the SQL code at development time, since the SQL code is being generated at runtime and will not be available at design time.","Unlike SQLJ or LINQ, the JQL module according to the invention does not require any compiler modification or specific pre processing. In one example, the user provided JQL query need only be compiled on a Java compliant compiler, such as a Java 5.0 compliant compiler since it uses features in Java 5.0 such as generics, varargs and enums. Further, the JQL module does not require SQL knowledge and does not require compiler modifications as JLINQ does. Since JQL is Java based, the JQL module can utilize large tooling support available for the Java language (such as debugging, testing, logging, syntax coloring, code completions, suggestions, etc.).","An implementation of a type safe, Java based, object-oriented and declarative query, programming system for querying relational data sources, according to the invention is now described.  shows architecture of such a programming system  for querying relational data sources. A general purpose computer or other processing device having a processor, memory, and storage device is suitable for implementing the system .","In one configuration, the system  queries relational data sources and is useful for querying other data sources such as collections, arrays and XML files. The system  utilizes JQL and includes a development (development time) component A and an execution (runtime) component B. The development component A includes a database management system ., wherein a developer (user) deploys a database DB to a target database server (e.g., DB2, SQL-Server, Oracle, etc.).","Using a JQL software module (JQL-GEN) ., the developer connects to the target database (DB) obtains Java Data Base Connectivity (JDBC) metadata . of the database DB. The JDBC metadata may include:\n\n","The JQL-GEN module . generates a database meta model . that represents the database model, and generates artifacts including:\n\n","The user issues a query . handled by a JQL module . to retrieve certain data from the target data source DB. The JQL module . receives a user query ., wherein a Java compiler checks that it is correctly typed (i.e., there are no syntax errors).","The database meta model . is utilized later in the execution component B. The JQL module . generates the appropriate query language (X\/QL) code . according to a target persistence provider system . (e.g., if the target persistence provider is Hibernate, then the JQL module . generates HQL). In this example, SQL queries are generated since most ORM solutions offer accepting queries written in SQL as well as queries written in their own query languages (it would be duplicative for the JQL to generate ORM in a specific query language, though it is possible).","In one example, the persistence provider system . handles object relational mapping of relationships, including loading and storing to the database (as specified in the metadata of the entity class), and the referential integrity of the relationships (as specified in the database). The generated query . is then propagated to an underlying persistence provider system ., which may be any ORM solution (in this example the JQL module has integration with JDBC as a back-end persistence provider, and in another example other ORM solutions such as JQL can be JPA (Java Persistence API) compliant). The persistent provider system . receives the query ., executes it, maps a result . and returns the result . to the JQL module ..",{"@attributes":{"id":"p-0028","num":"0037"},"figref":"FIG. 2","b":["20","10","20"],"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":{"@attributes":{"id":"ul0006-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":["Block : User enters a query using JQL Object-Oriented (OO) syntax in a normal Java file. A Java compiler then attempts to compile the Java file.","Block : If the Java file compiles successfully by the Java compiler, then the process proceeds to block  to process the query for execution, otherwise, the user is advised to correct the query, and the process proceeds back to block .","Block : The JQL module . pre-processes the user query and determines any suitable expansion for specific JQL constructs. For example, if the user composes a statement such as Employee.Order.OrderDetails.Product.Name, the JQL module . automatically expands this statement to the equivalent inner join when the data source is a relational data source.","Block : The JQL module . tokenizes the user query to the very basic atomic constructs such as SELECT, WHERE, FROM, etc.","Block : The JQL module . determines the target persistence\/data source system, in order to determine the type of the generated query.","Block : The JQL module . applies simple optimization rules on the user query (e.g., may substitute inner select statements with simple WHERE clauses).","Block : The JQL module . generates a target query. For example, if the data source is a relational data source, and the persistence system is JDBC, then the JQL module . generates a SQL statement. If the persistence system is Hibernate, the JQL module . generates HQL, and if the data source is XML, the JQL module . generates suitable XPATH expressions, etc.","Block : Before invoking the data source, the JQL module . attempts to deduce the object ID from the query. For example, for the query: \u201cSELECT employee WHERE Employee.ID=2\u201d, the JQL module . detects that the user wishes to retrieve an employee with an ID that is 2, hence the Object ID here is 2.","Block : Based on results of block , if the JQL modules . managed to deduce the Object ID correctly, the JQL module . then attempts to find this Object in an object cache at first, and if the object is found, the process proceeds to block , otherwise the process proceeds to block .","Block : The JQL module . establishes a connection to the target data source (persistence provider system . in ).","Block : The JQL module . executes the query against the target data source.","Block : If the execution did not return any results from the target data source, the process proceeds to block , otherwise the process proceeds to block .","Block : The returned raw result from the target data source is mapped to an object (using well known mapping techniques).","Block : The result object is stored in a cache for future retrieval.","Block : The result object is also returned to the user."]}}}},"In block , according to the invention, compilation is performed with a conventional Java compiler, without requiring special tools or external plug-ins, or a new compiler. For example, any existing Java 5 compliant compiler may be used. As such, the JQL module . relies on conventional Java compiler () to provide the query language code ..","Relying on the Java compiler itself is beneficial since developers have access to conventional Java compilers in their information technology environments, and Java is well understood, reducing developer learning efforts. The JQL module . is implemented using the Java Query Language which is a Java based, declarative, type safe, and object-oriented query system for the Java programming language, enabling querying of any relational data sources (e.g., arrays, collections or XML files), in a unified manner using a conventional Java compiler without any external tools. This is regardless of the data source provider, the language used or the place where the data exists (in memory, files, or databases).","The Java compiler is used to check the user query . () for syntax errors from a java code point of view, as opposed to conventional approaches where the software developer composes a software tool that at runtime checks the query syntax. The JQL module . comprises a modified JQL core according to the invention that utilizes a Java compiler for checking query syntax, so that the user is informed of query errors at query compile time before actual compiling of the Java file. In one example, the JQL module . relies on features in Java 5 compiler such as generics, static imports and varargs.","The Java compiler processes Java syntax only, hence when the compiler compiles the Java code that compose the query, the compiler compiles the Java code from a Java code point of view. According to the invention, the JQL module . arranges the Java code and places it into a format as SQL-like code, where in fact it is a Java code to be compiled by the compiler, providing the benefits of writing a Java code that is well understood by the compiler for syntax checking, but in the form of SQL code.","In block , the Java compiler is used to compile and check the query syntax at development time, without reliance on runtime checking using specialized tools. In , the JQL-GEN module . generates the meta model . by employing the generics to specify the type of each column, using the JQL provided data types. For example given an integer column in an employee table in a database, the JQL-GEN module . generates a representation as:\n\n","By this definition, when the user later issues a query to retrieve the EmployeeID, when for example the ID is 3, they can compose a query as:",{"@attributes":{"id":"p-0035","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002JQL"]},{"entry":[{},"("]},{"entry":[{},"\u2003SELECT (e),"]},{"entry":[{},"\u2003WHERE"]},{"entry":[{},"\u2003("]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002e.EmployeeID.equal(2)"]},{"entry":[{},"\u2003)"]},{"entry":[{},"\u2002);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"If the user utilizes anything but an integer in place of the supplied value 2, the Java compiler will issue an error as shown by example in .","Further, the JQL query construct itself (such as SELECT, FROM, WHERE, etc.), is defined in a similar manner to match the standard SQL query syntax using the same technique (generics and static imports). For example, the following is the definition of the SQL IN key word, which is used to limit the result of the supplied column to be IN specific set of values:\n\n","As the definition suggests, this construct only accepts values supplied from a nest query that can only return single values. If the user supplied a nested query that returns multiple values, the Java compiler will issue an error.","The importance of static imports is that the user interaction with the system is simplified, such that without having to qualify every call to the JQL constructs with JQL word, the user can static import the call and use it directly, such that instead of writing:",{"@attributes":{"id":"p-0040","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003Jql.JQL"]},{"entry":[{},"("]},{"entry":[{},"\u2003\u2003Jql.SELECT\u2003\u2002(Jql.AVG(e.EmployeeID))"]},{"entry":[{},"\u2003);"]},{"entry":[{},"\u2003The user may write:"]},{"entry":[{},"\u2003import static org.jql.utils.Jql.JQL;"]},{"entry":[{},"\u2003import static org.jql.utils.Jql.SELECT;"]},{"entry":[{},"\u2003import static org.jql.utils.Jql.AVG;"]},{"entry":[{},"\u2003JQL"]},{"entry":[{},"\u2002("]},{"entry":[{},"\u2003\u2003SELECT\u2003\u2003\u2003(AVG(e.EmployeeID))"]},{"entry":[{},"\u2003);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A Java 5 feature, varargs, enables the developer to pass the same function unrestricted number of parameters, and is used in JQL in the WHERE clause, for example, to enable the user to add multiple \u201cwhere\u201d parts without restriction to a limited number.","To query any other data sources such collections (when the query is targeted to be executed against primitive types, Integers, Doubles, Boolean, etc.), the JQL module . provides built in models for such primitives types, and as such there is no need for model generation . in .","For querying user defined Objects (i.e., Plain Old Java Objects or POJO), the user generates a model that defines the object structure, which is automated at development time.","In the following, example program instructions are provided for querying databases, according to embodiments of the invention. The examples are based on a sample data-base (Northwind database) which is a sample database that ships with Microsoft SQL-Server product. The examples assume that the first step of generating the model . in  has been performed. In Example 1 of program instructions below, JQL constructs are in all capital words (e.g., SELECT( ), WHERE, ORDERBY( ), etc.).",{"@attributes":{"id":"p-0045","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"EmployeeTable e = NorthwndDb.getInstance( ).getEmployeeTable( );"},{"entry":"List<Employee> employees ="},{"entry":"JQL"},{"entry":"("},{"entry":"\u2003\u2003\u2002SELECT(e)"},{"entry":");"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0046","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"EmployeeTable e = NorthwndDb.getInstance( ).getEmployeeTable( );"},{"entry":"List<Employee> employees ="},{"entry":"JQL"},{"entry":"("},{"entry":"\u2003\u2003\u2002SELECT(e),"},{"entry":"\u2003\u2003\u2002WHERE"},{"entry":"\u2003\u2003\u2002("},{"entry":"\u2003\u2003\u2002\u2003\u2003\u2002e.Orders.Customer.CompanyName.like(\u201cIBM\u201d)"},{"entry":"\u2003\u2003\u2002),"},{"entry":"\u2003\u2003\u2002ORDERBY(e.City).thenBy(e.FirstName)"},{"entry":");"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The above statement will generate this SQL:",{"@attributes":{"id":"p-0048","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SELECT","\u201cNORTHWND\u201d.\u201cEMPLOYEES*.\u201d"]},{"entry":["FROM","\u201cNORTHWND\u201d.\u201cORDERS\u201d"]},{"entry":[{},"INNER JOIN \u201cNORTHWND\u201d.\u201cEMPLOYEES\u201d ON"]},{"entry":[{},"\u201cNORTHWND\u201d.\u201cORDERS\u201d.\u201cEMPLOYEEID\u201d ="]},{"entry":[{},"\u201cNORTHWND\u201d.\u201cEMPLOYEES\u201d.\u201cEMPLOYEEID\u201d"]},{"entry":[{},"INNER JOIN \u201cNORTHWND\u201d.\u201cCUSTOMERS\u201d ON"]},{"entry":[{},"\u201cNORTHWND\u201d.\u201cORDERS\u201d.\u201cCUSTOMERID\u201d ="]},{"entry":[{},"\u201cNORTHWND\u201d.\u201cCUSTOMERS\u201d.\u201cCUSTOMERID \u201d"]},{"entry":["WHERE","\u201cNORTHWND\u201d.\u201cCUSTOMERS\u201d.\u201cCOMPANYNAME\u201d"]},{"entry":[{},"LIKE \u2018%IBM%\u2019"]},{"entry":["ORDER BY","\u201cNORTHWND\u201d.\u201cEMPLOYEES\u201d.\u201cCITY\u201d,"]},{"entry":[{},"NORTHWND\u201d.\u201cEMPLOYEES\u201d.\u201cFIRSTNAME\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["2","1"],"figref":"FIG. 4"},"As such, preferred embodiments of the JQL system  according to the invention allow use of a Java compiler to check user query for syntax errors, by compiling a checking query syntax at development time, as opposed to relying on runtime checking using specialized tools.","In one case, the user query, written using JQL OO syntax in a normal Java file, is compiled at development time using the Java compiler to check for errors in query syntax. As such, the JQL system  utilizes standard Java code and compiler, without need for any compiler modification. There is no need for specific tooling, and the invention can be used within Eclipse, NetBeans or any other Java development tool.","The invention requires no parsers or plug-ins. Type checking at coding checking (e.g., query syntax at development time) saves time and effort over runtime type checking. This provides simplified debugging without need for pre-compilation. Query syntax is generated at runtime which means that a running application can switch from one database type (e.g., Oracle) to another type (e.g., DB2) seamlessly at runtime. As noted, development time means the time at which the user ran the JQL-GEN tool . to generate the database artifacts, and the time in which the user wrote his\/her query. Runtime means the time when the program runs and executes the query that the user generated at development time.","As is known to those skilled in the art, the aforementioned example architectures described above, according to the present invention, can be implemented in many ways, such as program instructions for execution by a processor, as software modules, microcode, as computer program product on computer readable media, as logic circuits, as application specific integrated circuits, as firmware, etc. The embodiments of the invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","Furthermore, the embodiments of the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer, processing device, or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any apparatus that can contain, store, communicate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The medium can be electronic, magnetic, optical, or a semiconductor system (or apparatus or device). Examples of a computer-readable medium include, but are not limited to, a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a RAM, a read-only memory (ROM), a rigid magnetic disk, an optical disk, etc. Current examples of optical disks include compact disk-read-only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be connected to the system either directly or through intervening controllers. Network adapters may also be connected to the system to enable the data processing system to become connected to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters. In the description above, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. For example, well-known equivalent components and elements may be substituted in place of those described herein, and similarly, well-known equivalent techniques may be substituted in place of the particular techniques disclosed. In other instances, well-known structures and techniques have not been shown in detail to avoid obscuring the understanding of this description.","The terms \u201ccomputer program medium,\u201d \u201ccomputer usable medium,\u201d \u201ccomputer readable medium,\u201d and \u201ccomputer program product,\u201d are used to generally refer to media such as main memory, secondary memory, removable storage drive, a hard disk installed in hard disk drive, and signals. These computer program products are means for providing software to the computer system. The computer readable medium allows the computer system to read data, instructions, messages or message packets, and other computer readable information, from the computer readable medium. The computer readable medium, for example, may include non-volatile memory, such as a floppy disk, ROM, flash memory, disk drive memory, a CD-ROM, and other permanent storage. It is useful, for example, for transporting information, such as data and computer instructions, between computer systems. Furthermore, the computer readable medium may comprise computer readable information in a transitory state medium such as a network link and\/or a network interface, including a wired network or a wireless network that allow a computer to read such computer readable information. Computer programs (also called computer control logic) are stored in main memory and\/or secondary memory. Computer programs may also be received via a communications interface. Such computer programs, when executed, enable the computer system to perform the features of the present invention as discussed herein. In particular, the computer programs, when executed, enable the processor or multi-core processor to perform the features of the computer system. Accordingly, such computer programs represent controllers of the computer system.","Generally, the term \u201ccomputer-readable medium\u201d, as used herein, refers to any medium that participated in providing instructions to the processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as the storage device . Volatile media includes dynamic memory, such as the main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise the bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, an EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.",{"@attributes":{"id":"p-0058","num":"0084"},"figref":"FIG. 5","b":["100","100","101","130","130","102","104","102","130","106","102","104","106","104","130","108","102","104","110","102","102","106","102","104","106","110"]},"The server  may be coupled via the bus  to a display  for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to the bus  for communicating information and command selections to the processor . Another type of user input device comprises cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to the processor  and for controlling cursor movement on the display .","According to one embodiment of the invention, the functions of the invention are performed by the server  in response to the processor  executing one or more sequences of one or more instructions contained in the main memory . Such instructions may be read into the main memory  from another computer-readable medium, such as the storage device . Execution of the sequences of instructions contained in the main memory  causes the processor  to perform the process steps described herein. One or more processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in the main memory . In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to the processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to the server  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector coupled to the bus  can receive the data carried in the infrared signal and place the data on the bus . The bus  carries the data to the main memory , from which the processor  retrieves and executes the instructions. The instructions received from the main memory  may optionally be stored on the storage device  either before or after execution by the processor . The server  also includes a communication interface  coupled to the bus . The communication interface  provides a two-way data communication coupling to a network link  that is connected to the world wide packet data communication network now commonly referred to as the Internet . The Internet  uses electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on the network link  and through the communication interface , which carry the digital data to and from the server , are exemplary forms or carrier waves transporting the information.","In another embodiment of the server , interface  is connected to a network  via a communication link . For example, the communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line, which can comprise part of the network link . As another example, the communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, the communication interface  sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.","The network link  typically provides data communication through one or more networks to other data devices. For example, the network link  may provide a connection through the local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . The ISP  in turn provides data communication services through the Internet . The local network  and the Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on the network link  and through the communication interface , which carry the digital data to and from the server , are exemplary forms or carrier waves transporting the information.","The server  can send\/receive messages and data, including e-mail, program code, through the network, the network link  and the communication interface . Further, the communication interface  can comprise of a USB\/Tuner and the network link  may be an antenna or cable for connecting the server  to a cable provider, satellite provider or other terrestrial transmission system for receiving messages, data and program code from another source.","The example versions of the invention described herein are implemented as logical operations in a distributed processing system such as the system  including the servers . The logical operations of the present invention can be implemented as a sequence of steps executing in the server , and, as interconnected machine modules, within the system . The implementation is a matter of choice and can depend on performance of the system  implementing the invention. As such, the logical operations constituting said example versions of the invention are referred to for e.g. as operations, steps or modules.","Similar to a server  described above, a client device  can include a processor, memory, storage device, display, input device and communication interface (e.g., e-mail interface) for connecting the client device to the Internet , the ISP , or LAN , for communication with the servers .","The system  can further include computers (e.g., personal computers, computing nodes)  operating the same manner as client devices , wherein a user can utilize one or more computers  to manage data in the server .","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","While certain exemplary embodiments have been described and shown in the accompanying drawings, it is to be understood that such embodiments are merely illustrative of and not restrictive on the broad invention, and that this invention not be limited to the specific constructions and arrangements shown and described, since various other modifications may occur to those ordinarily skilled in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 3 and 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
