---
title: Method for synchronization of a line-oriented text document and a stream-oriented text document
abstract: A method for synchronizing the contents of a line-oriented text document and a stream-oriented text document. The line-oriented text document has a sequence number area. The line-oriented text document listens for a change in the content of the stream-oriented text document and vice versa. When a change is detected in one document, listening in the other document is suspended and a complementary document change is implemented in the other document. Document adjustments resulting from such a complementary change are listened for separately, and echoed similarly into the original document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07451396&OS=07451396&RS=07451396
owner: International Business Machines Corporation
number: 07451396
owner_city: Armonk
owner_country: US
publication_date: 20040113
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS","EXAMPLE 1","EXAMPLE 2","EXAMPLE 3","Delete-Selection Operation in Editor","EXAMPLE 4","Insert Operation in Editor"],"p":["The present invention relates to data processing systems, and more particularly to a method for synchronization of a line-oriented text document and a stream-oriented text document.","Line-oriented text systems and applications operate using a system of records in which each line in a file or text document is a separate record. Typically, each line includes a text element of a fixed or maximum length containing the record information, and a series of fixed-length columns which include a non-text element(s) relating to record management, for example, sequence numbers. Line-oriented text systems are commonly found in legacy systems. Legacy systems or legacy applications are systems or applications implemented using languages, platforms, or techniques earlier than the current technology. Examples of legacy systems include the System\/390\u00ae (S\/390\u00ae) and AS\/400\u00ae mainframes from IBM Corporation. Legacy applications often contain important data, logic or applications which need to be accessed by newer or current applications or systems. Thus, an important feature for new software products is the ability to interface with, or at least import data from and export data to, legacy applications.","Line-oriented text editors are one example of line-oriented text applications. Modern text editors such as Word\u2122 and Wordperfect\u2122 are stream-oriented applications in which text documents are generally less structured. Unlike line-oriented text documents where each line is a record having a number of fixed-length columns, a stream-oriented text document comprises a stream of characters.","It is often desirable to access line-oriented text documents using stream-oriented applications. However, many problems can arise when a line-oriented text editor is interfaced with a stream-oriented application. For example, many stream-oriented text applications typically cannot understand line-oriented text documents due to the structured format of those documents. Further, most stream-oriented text applications cannot implement sequence numbers or handle adjustments to sequence numbers and\/or the text records that may arise from edit operations.","Additional record-structure formatting issues may result from differences between the character encoding used by the line-oriented documents on the legacy system (e.g. Extended Binary Coded Decimal Interchange Code (EBCDIC)) and the character encoding used by the new software platform (e.g. Unicode) processing these documents.","In view of these shortcomings, there exists a need for a method for synchronization of a line-oriented text document and a stream-oriented text document.","The present invention provides a method for synchronizing the contents of a line-oriented text document and a corresponding stream-oriented text document. According to one aspect, the method allows a stream-oriented text application to interface with a line-oriented text application in a manner that supports the maintenance of a sequence number area and the text-record length features associated with the line-oriented text document.","In accordance with one aspect of the present invention, there is provided for a data processing system, a method for synchronizing the contents of a line-oriented document and a corresponding stream-oriented document, the line-oriented document having a sequence number area, the data processing system being operably coupled to memory, the method comprising the steps of: listening for a change in the content of the line-oriented document; listening for a change in the content of the stream-oriented document; when a document change is detected in the line-oriented document, suspending listening for changes in the stream-oriented document and implementing a complementary document change in the stream-oriented document; and when a document change is detected in the stream-oriented document, suspending listening for changes in the line-oriented document and implementing a complementary document change in the line-oriented document.","In one example embodiment, the method also comprises: when a document change is detected in the stream-oriented document, listening for a document adjustment in the line-oriented document; and when a document adjustment is detected in the line-oriented document, after the step of implementing a complementary document change in the line-oriented document, suspending listening for changes in the stream-oriented document and implementing a complementary document adjustment in the stream-oriented document.","In accordance with another aspect of the present invention, there is provided a computer program product having a computer readable medium tangibly embodying code for directing a data processing system to synchronize the contents of a line-oriented document and a corresponding stream-oriented document, the line-oriented document having a sequence number area, the data processing system being operably coupled to memory, the computer program product comprising: code for listening for a change in the content of the line-oriented document; code for listening for a change in the content of the stream-oriented document; code responsive to a document change detected in the line-oriented document for suspending listening for changes in the stream-oriented document and implementing a complementary document change in the stream-oriented document; and code responsive to a document change detected in the stream-oriented document for suspending listening for changes in the line-oriented document and implementing a complementary document change in the line-oriented document.","In one example embodiment, the computer program product also comprises: code responsive to a document change detected in the stream-oriented document for listening for a document adjustment in the line-oriented document; and code responsive to a document adjustment detected in the line-oriented document for, after implementing a complementary document change in the line-oriented document, suspending listening for changes in the stream-oriented document and implementing a complementary document adjustment in the stream-oriented document.","In accordance with a further aspect of the present invention, there is provided a data processing system for synchronizing the contents of a line-oriented document and a corresponding stream-oriented document, the line-oriented document having a sequence number area, the data processing system being operably coupled to memory, the data processing system comprising a document synchronization adapter, including; a module for detecting a change in the content of the line-oriented document; a module for detecting a change in the content of the stream-oriented document; a module responsive to a document change detected in the line-oriented document for suspending detecting changes in the stream-oriented document and implementing a complementary document change in the stream-oriented document; and a module responsive to a document change detected in the stream-oriented document for suspending detecting changes in the line-oriented document and implementing a complementary document change in the line-oriented document.","In one example embodiment, the data processing system also comprises: a module responsive to a document change detected in the stream-oriented document for detecting a document adjustment in the line-oriented document; and a module responsive to a document adjustment detected in the line-oriented document for, after implementing a complementary document change in the line-oriented document, suspending detecting changes in the stream-oriented document and implementing a complementary document adjustment in the stream-oriented document.","In accordance with yet a further aspect of the present invention, there is provided a computer data signal embodied in a carrier wave for directing a data processing system to synchronize the contents of a line-oriented document and a corresponding stream-oriented document, the line-oriented document having a sequence number area, the data processing system being operably coupled to memory, the computer data signal comprising: a component in the computer data signal for detecting a change in the content of the line-oriented document; a component in the computer data signal for detecting a change in the content of the stream-oriented document; when a document change is detected in the line-oriented document, a component in the computer data signal for suspending detecting changes in the stream-oriented document and a component in the computer data signal for implementing a complementary document change in the stream-oriented document; and when a document change is detected in the stream-oriented document, a component in the computer data signal for suspending detecting changes in the line-oriented document and a component in the computer data signal for implementing a complementary document change in the line-oriented document.","In one example embodiment, the computer data signal also comprises: when a document change is detected in the stream-oriented document, a component in the computer data signal for detecting a document adjustment in the line-oriented document; and when a document adjustment is detected in the line-oriented document, after implementing a complementary document change in the line-oriented document, a component in the computer data signal for suspending detecting changes in the stream-oriented document, and a component in the computer data signal for implementing a complementary document adjustment in the stream-oriented document.","Other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.","Similar references are used in different figures to denote similar components.","The following detailed description of specific embodiments of the present invention does not limit the implementation of the invention to any particular computer programming language. The present invention may be implemented in any computer programming language where the operating system provides the facilities to support the requirements of the present invention. In one embodiment, the present invention is implemented, at least partly, in the Java computer programming language. Any limitations presented herein as a result of a particular type of operating system or computer programming language are not intended as limitations of the present invention.","Reference is first made to , which shows a computer system  upon which the present invention may be implemented. The computer system  includes a server  and clients , shown individually as references , , , and which are interconnected by a network . The server  may be modeled as a number of server components including an application or business logic server, graphical user interface server, and a database server or resource manager. The clients  may comprise computers, data processing systems, workstations, handheld portable information devices, or computer networks. The clients  may be the same or different. In one embodiment, the network  is the Internet or World Wide Web (WWW). In such cases, the client computers  are equipped with appropriate web browser programs such as Internet Explorer\u2122 software from Microsoft Corporation or Netscape's Navigator\u2122, and the server  is equipped with appropriate hyper text transfer protocol (HTTP) server software, such as the IBM WebSphere\u00ae product.","The computer system  further includes resources  connected to the network . The resources , shown individually as , , , may comprise storage media, mainframes such as the IBM S\/390 or AS\/400 platforms, databases, for example, a relational database such as the IBM DB2\u00ae product, a set of XML (eXtensible Markup Language) documents, a directory service such as a LDAP (Lightweight Directory Access Protocol) server, and backend systems. The interface between the server  and the resources  may comprise a local area network, Internet, or a proprietary interface. The resources  may be accessed by the server  and the clients . Any of the server , the clients , and the resources  may be located remotely from one another or may share a location. The configuration of the computer system  is not intended as a limitation of the present invention, as will be understood by those of ordinary skill in the art from a review of the following detailed description. For example, in other embodiments the network  may comprise a wireless link, a telephone communication, radio communication, or computer network (e.g. a Local Area Network (LAN) or a Wide Area Network (WAN)).","Reference is now made to , which shows an example embodiment of a computer system  upon which the present invention may be implemented. The computer system  is similar to the computer system  shown in , and includes a server , and a host system  such as an S\/390 or AS\/400 mainframe, and the clients  shown individually as references , , . The clients  connect to the server  via the Internet or WWW . The server  implements a web application server compliant with the Java Version 2 Enterprise Edition (J2EE) platform such as the IBM WebSphere product. A user interface (not shown) is presented to the clients  using JavaServer Pages (JSPs) and servlets. Business logic is implemented on the server  using Enterprise JavaBean components (EJB) for the object layer. A stream-oriented application  and a line-oriented text editor (editor)  run on the server . The application  and editor  communicate with each other, and have access to the host system . In some embodiments, the application  and the editor  may comprise separate programs residing on the server . In other embodiments, the editor  is integrated in the application . In one example embodiment, the application  comprises a workstation development toolkit such as the WebSphere Development Studio Client for iSeries\u00ae and the editor  is the LPEX (Live Parsing Extensible Editor) editor which is integrated therein. In this embodiment, the client  is a workstation running a Windows\u2122 family operating system such as WindowsNT\u2122 from Microsoft\u2122. Those skilled in the art will recognize that many computing platforms, operating systems, and enterprise application server suites may be used with the present invention without departing from the scope of the invention.","Reference is now made to , which shows a data processing system  for the computer system  () or  (). The data processing system  includes a processor , memory , a display , and user input devices  such as a keyboard and a pointing device (e.g. mouse), and a communication interface (not shown) for communicating with the network  () or  (). An operating system  and application programs ,  run on the processor . The memory  includes random access memory (\u201cRAM\u201d) , read only memory (\u201cROM\u201d) , and a hard disk . The data processing system  may comprise a client or a server.","Reference is now made to , which shows a line-oriented text editor (editor)  implemented in accordance with an aspect of the present invention. The editor  includes a document management module  and a document view management module . The document management module  handles the text-editing operations of the editor . The document view management module  maintains synchronization between different edit views created for the same editor document  in the current user session. The editor  runs on the server  () and is coupled to a host system  including data  contained in source files which are accessed by the editor . The host system  is implemented using a line-oriented file (record) management system. In some embodiments, the host system  comprises a legacy system or mainframe such as the S\/390 or AS\/400 platforms. The host system  may be remotely located. In some embodiments, the host system  is implemented using EBCDIC encoding, and the server  () is implemented using Unicode. In other embodiments, the host system  is implemented using ASCII (American National Standard Code for Information Interchange) encoding.","The editor  is implemented using line-oriented management which includes support of a column-defined sequence numbers area, edit operations constrained by column-defined fields, maintenance of a maximum\/fixed record length, and emulation of host system editing. The editor  loads a line-oriented text document (editor document)  into memory  from a source document or file stored on the host system . The editor document  comprises records  each having a text element  and a corresponding sequence number , document management data , and document view management data . The sequence numbers  are defined in the source file in host system byte-specified column positions and are extracted from the file records upon the loading of the editor document . The sequence numbers  are maintained separately in the source file with optional numeric and\/or textual components and are displayed separately (custom-formatted). When changes made during an edit session are to be saved, the editor  saves the file on the host system  at which time the sequence numbers are re-assembled in the source file. The document management module  maintains sequence numbers , for example by adding or deleting sequence numbers as records are added or deleted, and re-sequences sequence numbers  when the numbers are too large or according to predetermined settings, or at a time chosen by the user of the editor .","In one embodiment, the sequence numbers  include a numeric component  and a textual component . The numeric component  is automatically maintained in sequence. If a new record is added, it is assigned a sequence number  associated with the position of the new record within the document. The value of each numeric component  is defined by an initial number and an increment related to the position of the associated record  in the record sequence. For example, where the initial sequence number (i.e. of the first record) is 100 and sequence numbers are incremented by multiples of 100, the value of the numeric component  of the third record is 300. As a result of the edit operation among other reasons, the sequence numbers  may not always be separated by the same increment (i.e. if automatic re-sequencing is not set in the editor ). However, the sequence numbers  may be re-sequenced by the editor  at the start or end of an edit session, or at a time chosen by the user of the editor . The initial number and increment for the sequence numbers  are host system specific and vary between systems. In some cases, the value of the increment may change between user sessions.","The textual component  may be a flag, for example to indicate that a modification has been made during the current session, or a date and\/or time reference to indicate when the associated record  was last modified. The textual component  is automatically updated when a text element  is modified during editing. Table 1 provides exemplary records of a line-oriented text document having both a numeric component  and textual component .",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Records of Line-Oriented Text Document"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Sequence Numbers",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Numeric Component","Textual Component","Text Element"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["00100","Aug. 17, 1976","Line 1 is the first record"]},{"entry":["00200","Aug. 17, 1976","Line 2 is the second record"]},{"entry":["00300","Dec. 20, 1976","Line 3 is the third record"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["206","216","210","218","210"]},"The handling of sequence numbers varies between host systems. The present invention is not limited to any particular host system or any particular sequence number management scheme. The maximum length of each record, whether the sequence numbers include both a numeric and textual component or merely a numeric component, the byte-size of column(s) in the sequence number area, the location of columns in each record, and which columns are reserved for the text element and which are reserved for sequence numbers and other non-text elements are all host system specific and may vary between host systems. For example, some host systems have a maximum record length of 80 characters (bytes) whereas other host systems have a maximum record length of 100 characters. In some systems, the sequence numbers may include numerical and textual components 6 bytes in length which are defined in byte columns 1-6 and 7-12 respectively. In other systems, the numerical and textual components may be 8 bytes in length and are defined in byte columns 73 to 80. The foregoing examples are merely provided as examples of sequence numbers, and the particular formats and features of the sequence numbers described are not intended as limitations of the present invention.","Reference is now made to , which shows a stream-oriented application  implemented according to the present invention. The stream-oriented application  integrates a line-oriented text editor (editor)  similar to the editor  (). The stream-oriented application (application)  includes the editor , an editor integration module  having a document synchronization adapter , and tools , for example file export\/import, find and replace, dictionary, and auto-save functions.","The application  loads a stream-oriented text document (application document)  into memory  () from a source file stored on the host system . Similarly, the editor  loads a line-oriented text document (editor document)  into memory  from the application document , or directly from the source file on the host system . Multiple editor documents  and application documents  may be opened at one time. The application document  and editor document  handle the source file differently as a result of differences between stream-oriented management and line-oriented management. The editor integration module  allows the application  to communicate with both the editor document  and the application document  and synchronize changes made in the documents (e.g. resulting from a find and replace operation). The application document  and editor document  need to maintain an accurate image of the current version of the complete document at all times, for example as the source file is being saved, accessed or viewed by tools  integrated into the application . If the content of the editor document  is changed, that change must be reflected in the application document  and vice versa.","A typical line-oriented editor document  has the following characteristics:","(1) variable-length text elements  corresponding to records of the underlying source file, and \u201cshow\u201d elements used for rendering various informational embedded messages (such as document-parser or compiler error messages);","(2) a separately maintained sequence number area  defined by host system DBCS (double-byte character set) sensitive byte-column positions in each record , outside of the text element area proper of the record;","(3) support for document-change and document-adjustment listeners;","(4) an API (Application Programming Interface) for line-oriented operations wherein access and operations are defined in terms of elements and positions inside the elements; line delimiters may be included; and","(5) an elementary API for stream-oriented access.","A typical stream-oriented application document  has the following characteristics:","(1) a stream of the entire content of the underlying source file, including line delimiters;","(2) the document may be shared by the intrinsic functions (e.g. search, maintenance of task\/debug markers) of the application  and other tools  installed in the application ;","(3) support for document-change listeners;","(4) a generic API for stream-oriented operations wherein access and operations are defined in terms of character offsets from the start of the stream, and the length in characters of the affected text range; and","(5) an elementary API for line-oriented access.","Examples 1 and 2 illustrate some of the differences between editor documents  and application documents .","An editor document  in an editor  having three fixed-length records may have the following form:",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Sequence Numbers",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Numeric Component","Textual Component","Text Element"]},{"entry":["byte columns 1-6","byte columns 7-12","byte columns 13-18"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["100","021201","line01"]},{"entry":["200","021201","DD"]},{"entry":["300","021207","line03"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Each line in the editor document  forms a record  with a fixed length of 18 characters (bytes). In this case, the sequence numbers include numerical and textual components 6 bytes in length each, which are defined in byte columns 1-6 and 7-12 respectively. The text elements are defined in byte columns 13 to 18. DD is two Unicode characters, which are converted in the host source file (an EBCDIC DBCS character encoding in this example) to (from) a sequence comprising 6 bytes: a Shift-Out control character, two double-byte characters, and a Shift-In control character.","An application document  corresponding to the foregoing editor document  may appear as follows:\n\n000100021201line01<eol>000200021201DD<eol>0003000212071line03<eol>\n\nwhere <eol>is an end of line character (line delimiter) used to indicate the end of the record.\n","The application document  is a stream of characters and lacks the hierarchical structure of the editor document . The application document  has no knowledge of byte-specified column positions in the character encoding of the original platform of the document (such as a legacy host system), however to reflect the end of a record an <eol> character is included where the end of a record would normally occur in the source file.","An editor document  belonging to an editor  implemented in Unicode where the fixed-length record source file belongs to a host system implemented using EBCDIC encoding may have the following form:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Sequence Numbers",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Numeric Component","Textual Component","Text Element"]},{"entry":["byte columns 7-10","byte columns 11-14","byte columns 1-6, 15-20"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1","0001","line1aline1b"]},{"entry":["2","0002","DDline2b"]},{"entry":["3","0003","line3aline3b"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Each line in the editor document forms a record with a fixed length of 20 characters, similar to example 1. However, the sequence numbers of this host system include numerical and textual components 4 bytes in length each, which are defined in byte columns 7 to 10 and 11 to 14 respectively. Text elements are defined in the remaining positions, namely byte (rather than character) columns 1 to 6 (i.e. before the sequence numbers), and 15 to 20 (after the sequence numbers ).","An application document  belonging to an application  implemented in Unicode corresponding to the foregoing editor document  may appear as follows:\n\nline 1a00010001line1b<eol>DD00020002line2b<eol>line3a00030003line3b<eol>\n\nwhere DD is two Unicode characters in the application and editor documents, which are converted in the host source file to (from) a sequence comprising 6 bytes: a Shift-Out control character, two double-byte characters, and a Shift-In control character.\n","As in example 1, the application document  lacks column-defined support of sequence numbers. The stream of characters in the application document  is assembled in a sequence corresponding to character byte positions in the source file. In this example, the sequence number area occurs in the middle of each record . Accordingly, when a record  is assembled in the application document  by the editor integration module , the first six characters of the text element  of each record (byte positions 1 to 6) are assembled first, after which the sequence number characters are inserted (byte positions 7 to 14). The remaining text element characters are assembled in byte positions 15 to 20, and an <eol> character is inserted to mark the end of the record. This procedure is repeated for each record in the source file.","Referring now to , the editor integration module  will be explained in more detail. The editor integration module  is implemented in functional modules in the application  () and executed by the processor  () during operation. The editor integration module  employs a two-way document synchronization adapter  to translate application document changes into editor document changes and vice versa. Document changes received from either source are synchronized through document-change listeners (DCLs) registered for the editor  and the application , and a document-adjustment listener (DAL) registered for the editor .","The document synchronization adapter  implements two interfaces: an application-document listener interface  and an editor-document listener interface . The application-document listener interface  includes a document-change listener module (Application DCL module)  which implements document-change listeners for application documents . The editor-document listener interface  includes a document-change listener module (Editor DCL module)  and a document-adjustment listener module (DAL module)  which implement document-change listeners and document-adjustment listeners for editor documents  respectively. Document-change listeners and document-adjustment listeners are specialized document listeners that are implemented by a Document Event API. Document Event APIs and other aspects of document listener implementation are standard API components.","The document synchronization adapter  also provides support utilities to translate text coordinates in the stream of the application document  to text coordinates in the structure of elements of the editor document  and vice versa, employing the elementary API for line-oriented access provided by the application document  and the elementary API for stream-oriented access provided by the editor document .","Document-change listeners are registered in the Editor DCL module  for each editor document , which may be shared by several document (editing) views. When an application  () imposes its own document view management (keeping several views of the same document in sync through document-change notifications), the editor integration module  prevents duplication of notifications by separating inter-view notifications from inter-document synchronization notifications. Similarly, document-change listeners are registered in the Application DCL module  for each application document .","Document-change listeners listen for document events in the respective documents they listen to, and notify the document synchronization adapter  of any document event. A document event occurs when the contents of a document change in any way. Thus, a document even will occur when a change is made in the text of an editor or application document, including a change in the sequence numbers .","The document-adjustment listener is a special case of a document-change listener that listens for document-adjustment events in the editor document  listened to, and notifies the document synchronization adapter  of any document-adjustment events. A document-adjustment event occurs when the editor automatically adjusts the sequence numbers and\/or the text in the editor document  as the direct result of a document event (change) in the editor document . For example, a document-adjustment event will occur when a change (such as user editing, or a change propagated from the application document  through the editor integration module ) is made to a text element  and, as a result of this, the editor automatically adjusts the sequence numbers area and the text in order to maintain a fixed length of the affected line. The document synchronization adapter  is capable of listening to any changes in the editor document content through the editor DCL module , or only to document-adjustment changes in the editor document content through the editor DAL module . The document synchronization adapter  uses document event and document-adjustment event notifications to translate application document changes into editor document changes and vice versa.","Referring now to , a procedure  for synchronizing the contents of an application and editor document will be described. In the first step , an application document  and an editor document  are loaded or opened from a source file on the host system . Next, the document synchronization adapter  instantiates and registers a document-change listener for the editor document  (step ). A document-change listener is then instantiated and registered for the application document  (step ). Next, the document synchronization adapter  instantiates a document-adjustment listener for the editor document  (step ). The document-adjustment listener is normally suspended (i.e. not registered to listen). It will be appreciated by those of skill in the art that the order in which the editor and application documents are loaded may be changed, and that the document listeners may be instantiated and registered in a different order without departing from the scope of the present invention.","The document synchronization adapter  then waits for a notification from a document-change listener of a document event in the editor or application document (decision block ). When a document event is detected, the corresponding listener sends a notification to the document synchronization adapter . The document synchronization adapter  then processes the notification (step ), translates the notification event's text change coordinates into the text coordinates in the other document (), and determines the complementary document change required in the document requiring updating (). Next, the document synchronization adapter  implements the complementary document change in the document requiring updating (step ). To prevent echoing back of the changes implemented by the document synchronization adapter , the document-change listener for the document to be updated is suspended until the complementary document change has been made by the document synchronization adapter . However, editor-initiated adjustments to these changes are sent back to the adapter . After the complementary document change has been made, the suspended document-change listener is re-registered.","Where the complementary document change implemented was made in the editor document , an adjustment may have been made to a sequence number  in its numerical component  and\/or textual component , if any (i.e. a document-adjustment event). If a document-adjustment event is detected (decision block ), the document-adjustment listener sends a notification to the document synchronization adapter . The document synchronization adapter  then processes the notification (step ), translates the notification event's text adjustment coordinates in the editor document  into text coordinates in the application document  (step ), and determines the complementary document adjustment required (step ). Next, the document synchronization adapter  suspends the document-change listener for the application document . The adapter  then implements a complementary document adjustment in the application document  (step ). Next, the document-change listener for the application document  is re-registered. Following the above method, the content of an application document and editor document can be synchronized.","If no further editing is required (decision block ), the user clicks \u201cSave\u201d or otherwise selects to store the source file in the host system  (e.g. by exiting or closing the application ) (step ). The source file can be saved from either the editor  or application .","Referring now to ,  and , a procedure  for updating an editor document in response to a document event in an application document will be described. First, the document-change listener for the application document  must determine whether a document event has occurred, i.e. in the content of the application document  (decision block ). If a document event has occurred, the document-change listener sends a notification to the document synchronization adapter  informing it of the document change (step ). Depending on the type of document event (change), the notification may be sent before or after the change actually takes place in the application document . The types of document changes that are possible are described more fully below. The document synchronization adapter  then processes the notification (step , ), translates the notification event's text change coordinates into the text coordinates in the other document (, ), and determines the complementary document change that is required to update the editor document  (, ). A complementary document change is a change in the content of a document that is required to translate an application document change into an editor document change or vice versa.","In the next step , the document-change listener for the editor document  is suspended. Suspending the document-change listener prevents echoing back of the changes implemented in the editor document  to the adapter . Next, in step  the document-adjustment listener for the editor document  is registered. Next, the document synchronization adapter  implements the complementary document change in the editor document  (step ). The document-change listener is then re-registered for the editor document  (step ). Next, in step  the document-adjustment listener for the editor document  is suspended.","The next step is to determine whether a document-adjustment event has occurred in the editor document , e.g. a change to the sequence numbers  (decision block ). Some editor document changes may result in a change to the sequence numbers  and\/or a text element  of one or more lines. For example, where a new line or record  is inserted in the editor document  or where a line is removed, a change may be made to the sequence numbers . In other cases, for example where no record  is added or deleted and there is no textual or numerical component being maintained to the sequence numbers , a document adjustment may not be made.","If a document-adjustment event has occurred, the document-adjustment listener sends a notification to the document synchronization adapter  informing it of the document adjustment (step ). The document synchronization adapter  processes the notification (step , ), translates the notification event's text adjustment coordinates in the editor document  into text coordinates in the application document  (step , ), and determines the complementary document adjustment that is required in the application document  (step , ). A complementary document adjustment is a change in the sequence number characters or text in an application document that is required to translate an editor document adjustment to an application document change.","In the next step , the document-change listener for the application document  is suspended. Suspending the document-change listener prevents echoing back of the changes implemented in the application document  to the adapter . Next, the document synchronization adapter  implements the complementary document adjustment in the application document  (step ). The document-change listener is then re-registered for the application document  (step ).","If no further editing' is required (decision block ), the user clicks \u201cSave\u201d or otherwise selects to store the source file in the host system  (e.g. by exiting or closing the application ) (step ). The source file can be saved from either the editor  or application .","It will be appreciated by those of skill in the art that the order of steps in which the editor and application document-change listeners are suspended and (re-)registered, and the manner in which document-change event notifications are recorded and processed may be changed depending on the particular capabilities of the application and other design decisions, without departing from the scope of the present invention.","Referring now to , a procedure  for updating an application document in response to a document event in an editor document will be described. First, the document-change listener for the editor document  must determine whether a document event has occurred, i.e. in the content of the editor document  (decision block ). If a document event has occurred, the document-change listener sends a notification to the document synchronization adapter  informing it of the text change that has occurred (step ). Depending on the type of document event (change), the notification may be sent before or after the change actually takes place in the editor document . The document synchronization adapter  processes the notification (step ), translates the notification event's text change coordinates in the editor document  into text coordinates in the application document  (step ), and determines the complementary document change that is required in the application document  (step ).","In the next step , the document-change listener for the application document  is suspended. Suspending the document-change listener prevents echoing back of the changes implemented in the application document  to the adapter . Next, the document synchronization adapter  implements the complementary document change in the application document  (step ). The document-change listener is then re-registered for the application document  (step ).","Unlike complementary document changes performed in editor documents , there are no complementary document changes in application documents  and consequently no application document-adjustment events. It is the responsibility of the editor to accommodate features (such as sequence numbers support) and constraints (such as record-length limits) of source files in the host system . It should, however, be appreciated by those of skill in the art that procedures similar to those described in  can be implemented to handle application document-adjustment events, if needed in a particular environment, without departing from the scope of the present invention.","If no further editing is required (decision block ), the user clicks \u201cSave\u201d or otherwise selects to store the source file in the host system  (e.g. by exiting or closing the application ) (step ). The source file can be saved from either the editor  or application .","Document changes that may be performed by the line-oriented editor  will now be explained. Edit operations may affect parts of a text element  or may affect an entire record. Edit operations that affect only part of a text element  are referred to as text operations. The following are examples of text operations that may be performed using the editor :","(1) text deletion;","(2) text insertion; and","(3) text replacement.","Edit operations that affect an entire text element  are referred to as element operations. The following are examples of element operations that may be performed using the editor :","(1) element deletion;","(2) element insertion; and","(3) element replacement.","Complex operations, such as text-block moving, copying, re-sequencing of the numerical component  of sequence numbers , and maintenance of the textual component , may be broken down into a series of text and\/or element operations enumerated above.","The document text changes discussed above may originate from the following sources:","(1) load and save operations in the editor document ;","(2) text editing performed by a user of the editor  (including undo\/redo operations);","(3) text changes performed in the application  on the application document  (e.g. a find-and-replace operation), or by a separate tool  installed in the application  (such as a text re-formatter or source-code beautifier); or","(4) document (host system specific) text adjustments carried out automatically by the editor .","Document text operations in the stream-oriented application document  are expressed in terms of replace operations defined by the character offset in the stream, the range of characters being replaced, and the replacing text.","Document adjustments that may be performed in the editor  will now be explained. In certain cases, document text being set in the editor  is automatically adjusted, depending on the editor settings in effect. For example, automatic adjustments may be made when the source file is loaded as an editor document , or during the opening in the editor  of a local file targeted for save on the host system .","Examples of cases in which the editor document text is adjusted when set in the editor  include:","(1) padding of the text up to (the end of) the sequence number area in one or more text elements ;","(2) reinterpretation of document contents as sequence numbers  in one or more text elements  (e.g. files that were edited with a workstation editor that does not provide adequate support for sequence numbers )","(3) re-sequencing of the numeric component  of sequence numbers  of one or more text elements ;","(4) changes in the textual component  of the sequence numbers  when sequence numbers are being maintained automatically (e.g. set to the current date upon modification of the corresponding text element );","(5) text adjustment in one or more elements  for maintaining correct sequence number  columns, wherever DBCS or MBCS (multi-byte character set) text in the editor (for example, an editor operating with Unicode-converted characters) would conflict (upon conversion to the host system character encoding) with the location of the host system file's sequence numbers  (DBCS or MBCS characters being translated on the host system into two-byte or n-byte characters, optionally with escape sequences such as Shift-Out and Shift-In control characters being added in the case of EBCDIC DBCS character encoding);","(6) creation of sequence number areas for locally-created files targeted for a host system ; and","(7) the addition of a line delimiter (EOL indicator) character at the end of text elements .","Further adjustments may take place during the save operation, when a text-limit setting is in effect (for a maximum\/fixed record length in the host file). While the saved (or host auto-saved) host source file conforms to the text-limit setting in effect, the editor document  contents are kept \u201cas is\u201d, allowing the user to correct non-conforming text elements (and to be saved in full during local auto-saves or by \u201csave as\u201d operations). This is accomplished through pre-save and post-save notifications generated for the sole benefit of the application document  used during the save operation. An exemplary procedure for implementing such notifications is as follows:","(1) trigger a series of truncation editor document change notification events for all elements that exceed the text limit in effect;","(2) call to save the application document ; and","(3) trigger a series of truncation-restore editor document change notification events for these elements.","After most editor-initiated document adjustments, the contents of the document are still marked as \u2018clean\u2019 (not \u2018dirty\u2019) until a user-initiated change takes place.","Examples 3 and 4 illustrate typical document change and document-adjustment events.","An editor document  and application document  both operating in Unicode corresponding to a variable record length source file in EBCDIC may appear as follows:","Editor Document:",{"@attributes":{"id":"p-0118","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Sequence Numbers",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Numeric Component","Textual Component","Text Element"]},{"entry":["byte columns 7-10","byte columns 11-14","byte columns 1-6, 15-80"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","0001","DDline1xyz"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{},{}],"in-line-formulae":[{},{}]},"If the user selects and deletes the first two characters in the record (DD), the deletion operation triggers a change of the textual component  of the sequence number  to the default text (\u201cAAAA\u201d) defined in the editor  for changed\/new lines when automatic maintenance of sequence numbers  is in effect in the editor , and the file record  is reassembled from the new text element and sequence numbers . The corresponding editor document  and application documents  would appear as follows:","Editor Document:",{"@attributes":{"id":"p-0120","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Sequence Numbers",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Numeric Component","Textual Component","Text Element"]},{"entry":["byte columns 7-10","byte columns 11-14","byte columns 1-6, 15-80"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1","AAAA","line1xyz"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}],"in-line-formulae":[{},{}]},"In EBCDIC and ASCII encodings, some foreign language characters such as Asian language characters are represented by double-byte or n-byte characters. EBCDIC encodings also use a Shift-Out and Shift-In control characters to delineate foreign language characters; other encodings use other escape sequences. In contrast, Unicode normally uses regular characters on a 1-to-1 basis and without escape controls to represent Asian language characters. By way of example, the expression \u201cI AM JJ.\u201d where Jand Jare Japanese language characters would be handled by the various encoding schemes as follows:",{"@attributes":{"id":"p-0122","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Length of Text Element"]},{"entry":["Encoding Scheme","Text element","(Characters\/Bytes)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["UNICODE","I\u00a7AM\u00a7JJ.","8"]},{"entry":["ASCII","I\u00a7AM\u00a7DDDD.","10"]},{"entry":["EBCDIC","I\u00a7AM\u00a7DDDD.","12"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"where"},{"entry":"\u00a7 is a \u201cspace\u201d character,"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"left","id":"FOO-00003"},"sup":"SO"}},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"left","id":"FOO-00004"},"sup":"SI"}},{"entry":"each DD represents one double-byte character."}]}}]}}},"If one non-Japanese character is inserted in an application document  between Jand J, the corresponding text elements would be changed as follows:",{"@attributes":{"id":"p-0124","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Length of Text Element"]},{"entry":["Encoding Scheme","Text element","(Characters\/Bytes)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["UNICODE","I\u00a7AM\u00a7JTJ.","9"]},{"entry":["ASCII","I\u00a7AM\u00a7DDTDD.","11"]},{"entry":["EBCDIC","I\u00a7AM\u00a7DDTDD.","15"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"If the insertion of the additional character results in the text element  of the editor document  exceeding the maximum record length for the editor document  and\/or the source file as a result of differences in encoding schemes, the editor  is required to perform a document adjustment, for example, by creating a new record so that the changed text element  conforms with the editor document or host system requirements.","Pseudo-code (similar to the Java programming language) of a partial code implementation of an example embodiment of the present invention will now be described. A non-integrated or standalone line-oriented text editor, such as editor , may not necessarily provide a public document-listener mechanism, depending on the structure of its utilities and document-view management. For example, document-parsers parsers (which handle syntax coloring and other context-sensitive functions) registered in the editor have their own specialized triggering mechanism for total-parse and incremental-parse notifications. A generic document-change listener, however, must be implemented for the editor  in order to integrate it in the application .","The editor document listener interface method editorDocumentChanged( ) is a notification method that is called by an actively registered document-change or document-adjustment listener when a document change event occurs in an editor document . The method editorDocumentChanged( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0128","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"void editorDocumentChanged (editorDocumentEvent event);"},{"entry":"\u2003\u2003event.editorDocument - the editor document that triggered the notification"},{"entry":"\u2003\u2003event.type - notification type:"},{"entry":"\u2003\u2003\u2003\u2003TEXT_REMOVED - notification sent when text is deleted in a text element; it is"},{"entry":"\u2003\u2003\u2003\u2003sent before the actual change takes place in the document"},{"entry":"\u2003\u2003\u2003\u2003TEXT_REPLACED - notification sent when text is replaced in a text element; it is"},{"entry":"\u2003\u2003\u2003\u2003sent after the actual change takes place in the document"},{"entry":"\u2003\u2003\u2003\u2003TEXT_INSERTED - notification sent when text is inserted in a text element; it is"},{"entry":"\u2003\u2003\u2003\u2003sent after the actual change takes place in the document"},{"entry":"\u2003\u2003\u2003\u2003ELEMENT_REMOVED - notification sent when a text element is deleted from"},{"entry":"\u2003\u2003\u2003\u2003the document; it is sent before the actual change takes place in the document"},{"entry":"\u2003\u2003\u2003\u2003ELEMENT_REPLACED - notification sent when a text element is replaced in the"},{"entry":"\u2003\u2003\u2003\u2003document; it is sent after the actual change takes place in the document"},{"entry":"\u2003\u2003\u2003\u2003ELEMENT_INSERTED - notification sent when a text element is inserted in the"},{"entry":"\u2003\u2003\u2003\u2003document; it is sent after the actual change takes place in the document"},{"entry":"\u2003\u2003event.line - document line involved, defined inside the document section that is currently"},{"entry":"\u2003\u2003loaded in the editor"},{"entry":"\u2003\u2003event.position - first change position inside the line, or 0 for element notifications"},{"entry":"\u2003\u2003event.length - length of the change in the line, or 0 for element notifications"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method editorDocumentChanged( ) applies to changes in the entire text of a record , i.e. including the sequence numbers . No notifications are sent for \u2018show\u2019 elements (such as document parser imbedded error-message lines). Certain editing operations performed by the editor  may trigger several consecutive notifications for one change which has already been recorded in the text of an element . For example, one replace-text action may trigger a series of notifications indicating the text replaced, the text inserted beyond the end of the original line, and a change in the textual component  of a sequence number .","The document-adjustment listener implements the regular document listener interface, but it is registered in the editor  in a separately-maintained list of listeners through the dedicated methods addDocumentAdjustmentListener( ) and removeDocumentAdjustmentListener( ). The notifications sent by document-adjustment listeners are defined in the same set as those for document-change listeners. Notification events for all the content changes in the editor document, regardless of their origin, are sent to its registered document-change listeners; in addition, notification events for the document-adjustment changes are also sent by the editor to its registered document-adjustment listeners.","The synchronization of an editor document  and an application document  in the context of the application  is implemented by the (re) registration (add-listener method) and de-registration (remove-listener method) of document-change listeners for the editor and application documents by the document synchronizer adapter . The application and editor documents it synchronizes are (re)registered and de-registered (disposed) via the methods setApplicationDocument( ) and setEditorDocument( ).","The document synchronizer adapter  may be initialized as follows. It implements two interfaces: the application-document listener interface, and the editor-document listener interface. Initially, it is not connected to any document.",{"@attributes":{"id":"p-0133","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Constructor."},{"entry":"DocumentSynchronizer(EditorIntegrationModule editorIntegrator)"},{"entry":"\u2003\u2003\/\/ the editor integration module managing this synchronizer"},{"entry":"\u2003\u2003EditorIntegrator _editorIntegrator = editorIntegrator;"},{"entry":"\u2003\u2003\/\/ the adapted stream-oriented application document"},{"entry":"\u2003\u2003ApplicationDocument _applicationDocument = null;"},{"entry":"\u2003\u2003\/\/ the adapted line-oriented editor document"},{"entry":"\u2003\u2003EditorDocument _editorDocument = null;"},{"entry":"\u2003\u2003\/\/ instantiate the direct editor document-adjustment listener"},{"entry":"\u2003\u2003_eAdjustmentListener = new EditorDocumentListener( ) {"},{"entry":"\u2003\u2003\u2003editorDocumentChanged(editorDocumentEvent event) {"},{"entry":"\u2003\u2003\u2003\u2003directEditorDocumentChanged(event);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ remember the ApplicationDocument event between the"},{"entry":"\u2003\u2003aboutToChange( ) &"},{"entry":"\u2003\u2003\/\/ changed( ) notification events"},{"entry":"\u2003\u2003ApplicationDocumentEvent _applicationDocumentEvent = null;"},{"entry":"\u2003\u2003\/\/ & whether it is a complete ApplicationDocument replace"},{"entry":"\u2003\u2003boolean _eventTotalDoc = false;"},{"entry":"\u2003\u2003\/\/ & the end limit {line,position} for the segment to delete, if any"},{"entry":"\u2003\u2003int _eventEndLine = \u22121;"},{"entry":"\u2003\u2003int _eventEndPosition = \u22121;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method setApplicationDocument( ) is used to set the given applicationDocument as the application document  to be adapted. The method setApplicationDocument( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0135","num":"0134"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/\u2003applicationDocument - the application document to be adapted, or"},{"entry":"\/\/\u2003\u2003null if there is no (longer a) document"},{"entry":"setApplicationDocument(ApplicationDocument applicationDocument)"},{"entry":"\u2003\u2003listenToApplicationDocument(false);"},{"entry":"\u2003\u2003_applicationDocument = applicationDocument;"},{"entry":"\u2003\u2003listenToApplicationDocument(true);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method setEditorDocument( ) is used to set the given editorDocument as the editor document  being adapted. The method setEditorDocument( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0137","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/\u2003editorDocument - the editor document to be adapted, or null if there"},{"entry":"\/\/\u2003\u2003is no (longer a) document"},{"entry":"setEditorDocument(EditorDocument editorDocument)"},{"entry":"\u2003\u2003listenToEditorDocument(false);"},{"entry":"\u2003\u2003_editorDocument = editorDocument;"},{"entry":"\u2003\u2003listenToEditorDocument(true);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method listenToApplicationDocument( ) is used to suspend\/restore application document listening. The method listenToApplicationDocument( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0139","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/\u2003listen - true = start \/ restore listening, or false = suspend listening"},{"entry":"listenToApplicationDocument(boolean listen)"},{"entry":"\u2003\u2003if (_applicationDocument != null) {"},{"entry":"\u2003\u2003\u2003if (listen) {"},{"entry":"\u2003\u2003\u2003\u2003_applicationDocument.addDocumentListener(this);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003_applicationDocument.removeDocumentListener(this);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method listenToEditorDocument( ) is used to suspend\/restore editor document listening. The method listenToEditorDocument( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0141","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/\u2003listen - true = start \/ restore listening, or false = suspend listening"},{"entry":"listenToEditorDocument(boolean listen)"},{"entry":"\u2003\u2003if (_editorDocument != null) {"},{"entry":"\u2003\u2003\u2003if (listen) {"},{"entry":"\u2003\u2003\u2003\u2003_editorDocument.addDocumentListener(this);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003_editorDocument.removeDocumentListener(this);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method listenToEditorDocumentAdjustments( ) is used to suspend\/restore regular editor document-adjustment listening. The document-adjust notifications expected here are not the direct result of an application document-change notification, therefore they are processed like any other editor document changes, i.e. the application document is updated directly. The method listenToEditorDocumentAdjustments( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0143","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/\u2003listen - true = start \/ restore listening, or false = suspend listening"},{"entry":"listenToEditorDocumentAdjustments(boolean listen)"},{"entry":"\u2003\u2003if (_editorDocument != null) {"},{"entry":"\u2003\u2003\u2003if (listen) {"},{"entry":"\u2003\u2003\u2003\u2003_editorDocument.addDocumentAdjustmentListener(this);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003_editorDocument.removeDocumentAdjustmentListener(this);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method listenToDirectEditorDocumentAdjustments( ) is used to suspend\/restore direct editor document-adjustment listening. The document-adjust notifications expected here are the direct result of (i.e. handled while) processing an application document-change notification event. Because the application document cannot normally be modified while it is informing its listeners of a previous content change, the document-adjust changes are batched for later (i.e., post event notification) updates to the application document. The method listenToDirectEditorDocumentAdjustments( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0145","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/\u2003listen - true = start \/ restore listening, or false = suspend listening"},{"entry":"listenToDirectEditorDocumentAdjustments(boolean listen)"},{"entry":"\u2003\u2003if (_editorDocument != null) {"},{"entry":"\u2003\u2003\u2003if (listen) {"},{"entry":"\u2003\u2003\u2003\u2003_editorDocument.addDocumentAdjustmentListener"},{"entry":"\u2003\u2003\u2003\u2003(_eAdjustmentListener);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003_editorDocument.removeDocumentAdjustmentListener"},{"entry":"\u2003\u2003\u2003\u2003(_eAdjustmentListener);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method applicationDocumentAboutToChange( ) is defined by the application  document-listener interface and is a notification method that is called by a registered application document-change listener when a document change is forthcoming in an application document . A stream-oriented application document listener must provide this type of notification in order to allow listeners to record the affected stream-document offset and content range prior to actually carrying out text deletions. Such generic notification issued prior to any text change in an application document also allows the document synchronization adapter  to optimize the reaction of the editor to these changes, e.g. in the case of a complete replacement of the document contents (such as the restore of a document from the local auto-save history). The method applicationDocumentAboutToChange( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0147","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/\u2003event - application-document change event:"},{"entry":"\/\/\u2003\u2003event.offset - change character offset from start of stream"},{"entry":"\/\/\u2003\u2003\u2003event.length - length of change (in characters)"},{"entry":"applicationDocumentAboutToChange(applicationDocumentEvent event)"},{"entry":"\u2003\u2003_applicationDocumentEvent = event;"},{"entry":"\u2003\u2003int offset = event.offset;"},{"entry":"\u2003\u2003int len = event.length;"},{"entry":"\u2003\u2003\/\/ remember if entire application document is replaced"},{"entry":"\u2003\u2003\/\/ (e.g., change file from local auto-save history)"},{"entry":"\u2003\u2003_eventTotalDoc = (offset == 0 && len =="},{"entry":"\u2003\u2003_applicationDocument.getLength( ));"},{"entry":"\u2003\u2003\/\/ save end {line,position} info from application document for"},{"entry":"\u2003\u2003\/\/ the part to delete, if any"},{"entry":"\u2003\u2003if (!_eventTotalDoc && len != 0) {"},{"entry":"\u2003\u2003\u2003offset = offset + len;"},{"entry":"\u2003\u2003\u2003_eventEndLine = getApplicationDocumentLine(offset);"},{"entry":"\u2003\u2003\u2003_eventEndPosition = offset \u2212"},{"entry":"\u2003\u2003\u2003getApplicationDocumentOffset(_eventEndLine);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003_eventEndLine = 0;"},{"entry":"\u2003\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method applicationDocumentChanged( ) is defined by the application document-listener interface and is used to implement application document listener notifications where the application document has already changed and the editor document is to be updated accordingly. The method applicationDocumentChanged( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0149","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ INPUT:"]},{"entry":[{},"\/\/\u2003event - application-document change event:"]},{"entry":[{},"\/\/\u2003\u2003event.offset - change character offset from start of stream"]},{"entry":[{},"\/\/\u2003\u2003event.length - length of change (in characters)"]},{"entry":[{},"\/\/\u2003\u2003event.text - substitution text"]},{"entry":[{},"applicationDocumentChanged(applicationDocumentEvent event)"]},{"entry":[{},"\u2003\u2003if (_applicationDocumentEvent == null \u2225"]},{"entry":[{},"\u2003\u2003\u2003\u2009_applicationDocumentEvent != event \u2225"]},{"entry":[{},"\u2003\u2003\u2003\u2009_editorDocument == null) {"]},{"entry":[{},"\u2003\u2003\u2003return;"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003if (_eventTotalDoc) {"]},{"entry":[{},"\u2003\u2003\u2003editorTotalUpdate(event.text);"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003else {"]},{"entry":[{},"\u2003\u2003\u2003editorUpdate(event.text, event.offset, event.length);"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\/\/ refresh the screen of all editor document views"]},{"entry":[{},"\u2003\u2003_editorDocument.refreshAllViews( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The method editorDocumentChanged( ) is defined by the editor document-listener interface and is used to implement editor document change or regular document-adjustment listener notifications where the editor document has already changed and the application document is to be updated accordingly. The method editorDocumentChanged( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0151","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Regular editor document listener notification - the editor"},{"entry":"document has changed,"},{"entry":"\/\/ or has been adjusted. Update the application document correspondingly."},{"entry":"\/\/ INPUT:"},{"entry":"\/\/ \u2002event - editor document-change listener event (detailed previously)"},{"entry":"editorDocumentChanged(editorDocumentEvent event)"},{"entry":"\u2003\u2003handleEditorDocumentChanged(event, false \/* regular change \/"},{"entry":"\u2003\u2003adjustment *\/);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method directEditorDocumentChanged( ) is used to implement direct editor document-adjustment listener notifications where the editor document has already changed and the application document is to be updated accordingly. The method directEditorDocumentChanged( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0153","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Direct editor document listener notification - the editor document"},{"entry":"has been"},{"entry":"\/\/ adjusted as a direct result of processing a change notification from the"},{"entry":"\/\/ application document. Update the application document back"},{"entry":"correspondingly."},{"entry":"\/\/ INPUT:"},{"entry":"\/\/ \u2002event - editor document-change listener event (detailed previously)"},{"entry":"directEditorDocumentChanged(editorDocumentEvent event)"},{"entry":"\u2003\u2003handleEditorDocumentChanged(event, true \/* direct adjustment *\/);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method handleEditorDocumentChanged( ) is used to implement application document notification where the editor document has changed or has been adjusted and the application document is to be updated accordingly. The method handleEditorDocumentChanged( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0155","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/ \u2002event - editor document-change listener event (detailed previously)"},{"entry":"\/\/ \u2002directAdjustment - true = called while processing the originating"},{"entry":"application"},{"entry":"\/\/ \u2003document's notification, so must update back application document"},{"entry":"using"},{"entry":"\/\/ \u2003a post-listener notification event request, or"},{"entry":"\/\/ \u2003false = update the application document with a regular replace( ) call"},{"entry":"handleEditorDocumentChanged(editorDocumentEvent event, boolean "},{"entry":"directAdjustment)"},{"entry":"\u2003\u2009\/\/ retrieve information on the editor-document event"},{"entry":"\u2003\u2009int type = event.type;"},{"entry":"\u2003\u2009int line = event.line;"},{"entry":"\u2003\u2009int position = event.position;"},{"entry":"\u2003\u2009int len = event.length;"},{"entry":"\u2003\u2009\/\/ set up the application-document replace request"},{"entry":"\u2003\u2009int docOffset; \u2002\/\/ change offset"},{"entry":"\u2003\u2009int docLen; \u2003\/\/ how much to delete first"},{"entry":"\u2003\u2009String docText; \/\/ the text to substitute after"},{"entry":"\u2003\u2009switch (type) {"},{"entry":"\u2003\u2003\u2003\u2003case TEXT_REMOVED:"},{"entry":"\u2003\u2003\u2003\u2003\u2003docOffset = getApplicationDocumentOffset(line, position);"},{"entry":"\u2003\u2003\u2003\u2003\u2003docLen \u2003= len;"},{"entry":"\u2003\u2003\u2003\u2003\u2003docText \u2002= \u201c\u201d;"},{"entry":"\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003case TEXT_REPLACED:"},{"entry":"\u2003\u2003\u2003\u2003\u2003docOffset = getApplicationDocumentOffset(line, position);"},{"entry":"\u2003\u2003\u2003\u2003\u2003docLen \u2003= len;"},{"entry":"\u2003\u2003\u2003\u2003\u2003docText \u2002= getEditorDocumentText(line, position, len);"},{"entry":"\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003case TEXT_INSERTED:"},{"entry":"\u2003\u2003\u2003\u2003\u2003docOffset = getApplicationDocumentOffset(line, position);"},{"entry":"\u2003\u2003\u2003\u2003\u2003docLen \u2003= 0;"},{"entry":"\u2003\u2003\u2003\u2003\u2003docText \u2002= getEditorDocumentText(line, position, len);"},{"entry":"\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003case ELEMENT_REMOVED:"},{"entry":"\u2003\u2003\u2003\u2003\u2003docOffset = getApplicationDocumentOffset(line);"},{"entry":"\u2003\u2003\u2003\u2003\u2003docLen \u2003= getApplicationDocumentLineLength(line);"},{"entry":"\u2003\u2003\u2003\u2003\u2003docText \u2002= \u201c\u201d;"},{"entry":"\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003case ELEMENT_REPLACED:"},{"entry":"\u2003\u2003\u2003\u2003\u2003docOffset = getApplicationDocumentOffset(line);"},{"entry":"\u2003\u2003\u2003\u2003\u2003docLen \u2003= getApplicationDocumentLineLength(line);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\/\/ includes EOL"},{"entry":"\u2003\u2003\u2003\u2003\u2003docText \u2002= getEditorDocumentText(line) +"},{"entry":"\u2003\u2003\u2003\u2003\u2003_editorDocument.getEOL( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003case ELEMENT_INSERTED:"},{"entry":"\u2003\u2003\u2003\u2003\u2003docOffset = getApplicationDocumentOffset(line);"},{"entry":"\u2003\u2003\u2003\u2003\u2003docLen \u2003= 0;"},{"entry":"\u2003\u2003\u2003\u2003\u2003docText \u2002= getEditorDocumentText(line) +"},{"entry":"\u2003\u2003\u2003\u2003\u2003_editorDocument.getEOL( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003break;"},{"entry":"\u2003\u2003\u2003\u2003default:"},{"entry":"\u2003\u2003\u2003\u2003\u2003return;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003if (!directAdjustment) {"},{"entry":"\u2003\u2003\u2003applicationUpdate(docText, docOffset, docLen);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003applicationAdjustmentUpdate(docText, docOffset, docLen);"},{"entry":"\u2003\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method applicationUpdate( ) is used to update the application document with the given text for the specified range. As the updates are a consequence of editor document updates or editor document adjustments, it does not trigger changes in the editor document. The method applicationupdate( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0157","num":"0156"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ INPUT:"]},{"entry":[{},"\/\/ \u2002text - substitution text to insert at offset"]},{"entry":[{},"\/\/ \u2002offset - character offset in the application document stream"]},{"entry":[{},"applicationUpdate(String text, int offset, int len)"]},{"entry":[{},"\u2003\u2003listenToApplicationDocument(false);"]},{"entry":[{},"\u2003\u2003_applicationDocument.replace(offset, len, text);"]},{"entry":[{},"\u2003\u2003listenToApplicationDocument(true);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The method applicationAdjustmentUpdate( ) is used to update the application document with the given text for the specified range through a post notification event change. As the updates are a consequence of editor document updates or editor document adjustments, it does not trigger changes in the editor document. The method applicationAdjustmentUpdate( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0159","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/ \u2002text - substitution text to insert at offset"},{"entry":"\/\/ \u2002offset - character offset in the application document stream"},{"entry":"\/\/ \u2002len - length of the specified range to delete at offset first"},{"entry":"applicationAdjustmentUpdate(String text, int offset, int len)"},{"entry":"\u2003\u2003\/\/ instantiate an application-document replace, which will be run"},{"entry":"\u2003\u2003\/\/ (after the completion of notification event processing) with"},{"entry":"\u2003\u2003\/\/ notifications of application-document changes suspended for the"},{"entry":"\u2003\u2003\/\/ editor document originating this replace"},{"entry":"\u2003\u2003ReplaceRequest replaceRequest = new ReplaceRequest"},{"entry":"\u2003\u2003(this, offset, len, text);"},{"entry":"\u2003\u2003batchApplicationReplace(replaceRequest);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The method editorSetText( ) is used to initialize the editor document  with the text of the application document  when a new file is opened by the application . As the updates are a consequence of application document updates, this method does not trigger these changes back into the application document. However, the editor may further adjust the new text, which (regular) adjustments are sent back in the application document. The method editorSetText( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0161","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"editorSetText( )"]},{"entry":[{},"\u2003\u2003listenToEditorDocument(false);"]},{"entry":[{},"\u2003\u2003listenToEditorDocumentAdjustments(true);"]},{"entry":[{},"\u2003\u2003_editorDocument.setText(_applicationDocument.getText( ));"]},{"entry":[{},"\u2003\u2003listenToEditorDocumentAdjustments(false);"]},{"entry":[{},"\u2003\u2003listenToEditorDocument(true);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The method editorTotalUpdate( ) is used to update the entire editor document with the given text. This method is called as a result of an application document notification event indicating that the entire contents of the application document  have been replaced, e.g. the document was restored to a version from the auto-save history, to reset the contents of the editor document . As the updates are a consequence of application document updates, this method does not trigger these changes back into the application document. However, the editor may further adjust the new text, which (regular) adjustments are sent back in the application document. The method editorTotalUpdate( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0163","num":"0162"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ INPUT:"]},{"entry":[{},"\/\/ \u2002text - the new editor document contents"]},{"entry":[{},"editorTotalUpdate(String text)"]},{"entry":[{},"\u2003\u2003listenToEditorDocument(false);"]},{"entry":[{},"\u2003\u2003listenToDirectEditorDocumentAdjustments(true);"]},{"entry":[{},"\u2003\u2003_editorDocument.setText(text);"]},{"entry":[{},"\u2003\u2003listenToDirectEditorDocumentAdjustments(false);"]},{"entry":[{},"\u2003\u2003listenToEditorDocument(true);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The method editorUpdate( ) is used to update the editor document with the given text for the specified range. As the updates are a consequence of application document updates, this method does not trigger changes here in the application document, except for any further editor-specific adjustments done on the new text. The method editorUpdate( ) may be defined in the document synchronization adapter  as follows:",{"@attributes":{"id":"p-0165","num":"0164"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ INPUT:"},{"entry":"\/\/ \u2002text - substitution text to insert at offset"},{"entry":"\/\/ \u2002offset - character offset of the change in application document stream"},{"entry":"\/\/ \u2002len - length of the specified range to delete at offset first (N\/U)"},{"entry":"editorUpdate(String text, int offset, int len)"},{"entry":"\u2003\u2003int line = getApplicationDocumentLine(offset);"},{"entry":"\u2003\u2003int position = offset - getApplicationDocumentOffset(line);"},{"entry":"\u2003\u2003listenToEditorDocument(false);"},{"entry":"\u2003\u2003listenToDirectEditorDocumentAdjustments(true);"},{"entry":"\u2003\u2003\/\/ (1) any deletion of original text in the range"},{"entry":"\u2003\u2003\/\/ \u2003\u2003{line,position} . . . {_eventEndLine,_eventEndPosition}"},{"entry":"\u2003\u2003_editorDocument.deleteFullText(line, position, _eventEndLine,"},{"entry":"\u2003\u2003_eventEndPosition);"},{"entry":"\u2003\u2003\/\/ (2) any new text insertion"},{"entry":"\u2003\u2003if (text.length( ) != 0) {"},{"entry":"\u2003\u2003\u2003_editorDocument.insertFullText(text, line, position);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003listenToDirectEditorDocumentAdjustments(false);"},{"entry":"\u2003\u2003listenToEditorDocument(true);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"It will be appreciated by those of skill in the art that the present invention is not limited to implementations where the document adjustments created by the complementary document change in the editor document  affect the sequence numbers  and\/or the text length (fixed or maximum) of the records. The present invention may be used to translate changes affecting other text and non-text elements of the editor document  and\/or the corresponding source file on the host system .","Variations of line-oriented text editors and stream-oriented applications implemented according to the present invention are possible. In some embodiments, the editor may not be integrated in an application. In such cases, the editor is a standalone application which interfaces with a stream-oriented application using the editor integration module . The editor integration module  is adapted for communication between the standalone editor and a stream-oriented application both of which access the same data in the form of a source file stored on a host system. In terms of implementation, the editor integration module  may be a separately coded program or integrated into either of the standalone editor or the stream-oriented application. In one example embodiment, the editor integration module  and document synchronization adapter  are an API of the application . Either of the stream-oriented application  and the standalone editor  may be located remotely, or both may be share a location, for example, on the server . In this embodiment, the editor integration module  works in a similar manner to when the editor is integrated in the stream-oriented application .","The present invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Certain adaptations and modifications of the invention will be obvious to those skilled in the art. Therefore, the presently discussed embodiments are considered to be illustrative and not restrictive, the scope of the invention being indicated by the appended claims rather than the foregoing description, and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference will now be made to the accompanying drawings which show, by way of example, embodiments of the present invention, and in which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 8","FIG. 5"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 9","FIG. 5"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 10","FIG. 5"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 11","FIG. 5"]}]},"DETDESC":[{},{}]}
