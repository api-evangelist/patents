---
title: Method and system for seamlessly accessing remotely stored files
abstract: A system and method by which users via programs on one computer may seamlessly access files remotely stored on other computers that run a well known file access protocol. An operating system extension and an application level network access program are provided. The operating system extension receives file system requests for remote files from the operating system that were issued according to a well known application program interface. The operating system extension forwards the remote file system request to the network access program. The network access program reformats the request according to a well known application level network protocol extension and sends it over a network to a remote computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07693962&OS=07693962&RS=07693962
owner: Apple Inc.
number: 07693962
owner_city: Cupertino
owner_country: US
publication_date: 20041119
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation application of U.S. patent application Ser. No. 09\/642,632, filed Aug. 18, 2000 now U.S. Pat. No. 6,842,770.","1. Field of the Invention","This invention relates to a the field of networked file systems and personal computers. More specifically, the invention relates to a system and method that allows personal computer users to access files over a network that are located on a remote computer system from any program on the local personal computer.","2. Background","Traditionally, most computers were used at work and may have been connected within a company by a local area network (LAN). The company's LAN may have been connected to other offices or partners of the company by a wide area network (WAN), or a company's computers may have been directly connected to a WAN. Such connections allow for companies to easily share data by storing and retrieving data on remote computers over private networks. In addition, remote disk storage available over a network is used to back up data from local computers, thus freeing up local disk space.","The internet is a publicly accessible global wide area network. The internet and personal computers have become ubiquitous in modern society. People regularly connect to web sites via their personal computer for any number of purposes. Although the internet has existed in various forms for many years, the internet only became popular as a mass communication vehicle with the introduction of the world wide web. The world wide web is, from the user's perspective, a way of easily identifying a remote computer, connecting to the remote computer, and viewing information stored on the remote computer. However, until recently, personal computer users have not used the internet and web sites for personal data storage and retrieval.","While using the internet, hidden from the user are the various communications protocols that make the internet function. Various committees and ad hoc groups known as working groups coordinate and control the internet. The Internet Engineering Task Force (IETF) is the protocol engineering and development arm of the internet. Working groups under the IETF determine the rules and protocols for the underlying functionality of the internet and publish them as requests for comment, commonly referred to as RFCs. Each working group makes its RFCs available via the internet at various web sites. A central point for obtaining the RFCs referenced below is the IETF's web site, www dot ietf dot org (No mailing address or geographic location is provided by the IETF). In addition, an organization called the World Wide Web Consortium (W3C) has been formed to continue the work of the IETF, although, the IETF and the W3C exist concurrently. (See www dotw3c dot org; The W3C may be contacted at Massachusetts Institute of Technology, Laboratory for Computer Science, 545 Technology Square, Cambridge, Mass. 02139).","Web sites are specified by a text description or name referred to as a uniform resource locator (URL) that is now encompassed by the term uniform resource identifier (URI). (See Uniform Resource Identifiers (URI): Generic Syntax, RFC 2396, August 1998, Draft Standard). Information is communicated over the word wide web via the transmission control protocol\/internet protocol, commonly referred to as TCP\/IP. (For more information see A TCP\/IP Tutorial, RFC 1180, January 1991). An application level protocol running on top of TCP\/IP that allows for accessing remote computers via the internet by specifying a URI is the hypertext transfer protocol (HTTP, see HTTP1.1, RFC 2616, June 1999, Draft Standard). It is the widespread acceptance and use of HTTP that has made the world wide web as we know it possible. Extensions to HTTP for distributed authoring and versioning via the world wide web, referred to as WebDAV, are beginning to be widely used. (See WebDAV, RFC 2518, February 1999, Proposed Standard). The WebDAV extensions to HTTP require that communication pursuant to the WebDAV protocol be formatted according to the extensible markup language (XML). (see XML 1.0 available from www dot w3dot org\/TR\/RED-xml). WebDAV allows persons using programs that support WebDAV to access files stored on a WebDAV enabled HTTP server, more commonly referred to as a web site. WebDAV provides for reading, writing (i.e., creating), partial reading, partial writing, locking, property changes, and other access to remotely stored files.","Various companies have begun offering internet users free storage space on remote servers. These remote servers are web sites running WebDAV enabled HTTP with additional software running to provide a web based interface to the disk space made available on the remote server. Companies such as Xythos Software, Inc. of Redwood City, Calif. that provides a web site called Sharemation (www dot sharemation dot com), My Docs Online! Inc. of Naples, Fla. (www dot MyDoesOnline dot com), and Driveway Corporation of San Francisco, Calif. (www dot driveway dot com) allow personal computer users to create a directory on the company's web site and store files for secure personal use. These companies provide any personal computer user access to a remote storage device and provide a facility that allows personal computer users to write files to and retrieve files from the remote computer, thus providing the same benefits that were historically only available to companies or businesses via private networks.","However, these public access storage companies do not provide a seamless way for a personal computer user to access remotely stored files from all application programs on their personal computer. The companies only allow a user to drag and drop or otherwise store files to or retrieve files from the web site when the user is outside of application programs. Some of the public access remote storage web sites allow for access from one specified application program via extensions to the application program, or require the application to be run in conjunction with an internet web browser (such as Internet Explorer 5.0 from Microsoft Corporation of Redmond, Wash.). Although the companies provide remote storage for internet users, easy access is not provided for from all application programs on a personal computer.","This invention provides a system and method by which users via programs on one computer may seamlessly access files remotely stored on other computers that run a well known file access protocol. As such, the method and system are referred to as the seamless file system or SFS. SFS allows all programs running on a personal computer to access remote files as easily and in the same manner as accessing files on the personal computer's file system without requiring any changes to the program's method of communicating with the computer's existing file system. In one embodiment, the SFS provides an operating system extension and an application level network access program. The operating system extension receives file system requests for remote files from the operating system that were issued according to a well known application program interface. The operating system extension forwards the remote file system request to the network access program. The network access program reformats the request according to a well known application level network protocol extension and sends it over a network to a remote computer system. The network access program receives responses over the network from the remote computer system in the well known format, processes the response, and forwards pertinent information to the operating system extension. The operating system extension then passes pertinent information to the program that issued the remote file system request via the well known application program interface. In one embodiment, the remote file system is cached on the local file system so that remote file system requests may be enacted on the locally cached copy. The locally cached copy of the remote file system and the remote file system are updated and synchronized upon the occurrence of defined events. In one embodiment, SFS seamlessly allows users of personal computers to access files on remote computers over the internet via the features of WebDAV enabled HTTP.","This invention provides a system and method by which users via programs on one computer may seamlessly access files remotely stored on other computers that run a well known file access protocol. As such, the method and system are referred to as the seamless file system or SFS. The goal of SFS is to allow seamless access to remotely stored documents by all personal computer file system clients. SFS allows all programs running on a personal computer to access remote files as easily and in the same manner as accessing files on the personal computer's file system without requiring any changes to the program's method of communicating with the computer's existing file system. In one embodiment, SFS seamlessly allows users of personal computers to access files via the internet by using the features of WebDAV enabled HTTP.","A. The Environment in which One Embodiment of the SFS Runs",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["10","10","10","12","12","14","14","16","18","16","20","22","20","22","10","24","26","28"]},"To access information not stored on local storage device , computer  includes a network access unit  which allows the personal computer to communicate over a network such as internet  with remote computer  and to access information stored on remote storage device . Network access unit  may be a modem or any other device for connecting to a network either directly or via a telephone dial-up connection. Remote computer  may be any kind of computer known to those skilled in the art, including, but not limited to, personal computers and servers. Remote storage device  may be any readable storage medium known to those skilled in the art such as, for example, hard disk drives or an array of hard disk drives. Although only one personal computer and one remote computer are depicted, multiple personal computers and multiple remote computers may be connected to internet . Processor , memory , local storage device , display controller , I\/O controller  and network access unit , are coupled to one another via and communicate with one another over bus . Bus  may be any bus known to those skilled in the art. Although only one bus is depicted, multiple buses may be used in personal computer . In addition, other components and controllers known to those skilled in the art (not depicted) or multiple instances of depicted components and controllers may be included in personal computer .","B. The Software Architecture of One Embodiment of a Seamless File System",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["10","50","52","56","50","54","54","56","50","52","56","48","50","52"]},"SFS network access application program  is responsible for establishing network connections and protocol communication with remote computers such as remote computer  running a well-known application level internet protocol. In one embodiment, the well known protocol is WebDAV enabled HTTP. In such an embodiment, SFS network access program  is a WebDAV client that communicates via the TCP\/IP transport layer  of operating system  over a network, such as the internet , with WebDAV enabled HTTP servers such as remote computer . In such an embodiment, remote computer  includes WebDAV enhanced  HTTP application level server software  which provides world wide web communications and file access over internet . In such an embodiment, remote computer  communicates via TCP\/IP transport layer , which is part of operating system .","C. Using a Seamless File System",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3","b":["300","302","304","306"]},"In another embodiment, the user may also be prompted by the SFS startup program to name the remote file system. This is achieved by methods known to those skilled in the art, such as by prompting the user to enter a textual name to represent the remote file system at the same time the SFS startup program requests a URI, or as a step after the URI is provided.","In one embodiment, after the user specifies the name of the remote file system server and the remote file system directory, this information is stored so that whenever the user connects to the internet, the remote file system is automatically mounted. In another embodiment in which the user has an \u201calways on\u201d connection to the internet, after the user specifies the name of the remote file system server and, in some embodiments, the remote file system directory, this information is stored so that whenever the user restarts the computer, the remote file system is automatically mounted. In these embodiments, the user may be asked by the SFS startup program whether a password providing authenticated access to the remote file system should be stored and not requested for future connections to the remote server, or whether the password should always be requested whenever the remote file system is to be mounted and accessed. In another embodiment, a key chain, such as that provided by with the Mac OS\u00ae  operating system available from Apple Computer, Inc. of Cupertino, Calif., may be used to store passwords to multiple remote file systems such that providing a single password to the key chain provides access to all of the passwords on the key chain.","After mounting the remote file system, the user runs any programs, as shown in block , and may then use any programs on the computer to access remotely stored files in the same way the user accesses files stored locally, as shown in block . The remote file system is accessed as if it were another hard disk drive stored on the user's computer. In one embodiment, when a user accesses a remote file for the first time, the SFS may then request the user to provide a password to authenticate access to the remote files.","D. Actions of a Seamless File System",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4A","b":["400","402","404","406","408","410","412"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4B","b":["420","422","424","426","428","432","436","438"]},"If the requested file or file information was already in the local cache, as shown in block , a check is then made to determine what kind of request was made, as shown in block . In one embodiment, file requests may be defined as being in Group 1 or Group 2. Group 1 file requests are those requests that seek information about or modify information involving the internal contents of files. Examples of Group 1 requests include read a file, obtain a directory listing, write a file, etc. Group 2 requests are those requests that impact information about the file or treat the file as an object. Group 2 requests include requests to create or delete a file or directory, rename a file or directory, open a file to prepare it for I\/O, etc. If the request is a Group 1 request, execution continues as discussed above at block . If the request is a Group 2 request, the SFS plug-in obtains the requested file or file information from the local cache, as shown in block , bypassing any communication with the remote WebDAV\/HTTP server. The SFS plug-in then formats the information retrieved from the cache, if necessary, and sends it to the user application program. Depending on the request, the information sent to the user application program may be a directory listing, a file, the contents of a file, etc.","E. A Seamless File System Plug-In Extension to an Operating System",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5","b":["500","510","512","510","514","516","518","520"]},"F. A Seamless File System Network Access Application Program",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6","b":["600","610","612","614","616","618","620"]},"If the response the SFS network access program received from the remote computer system was not a substantive response, as shown in block , the SFS network access program checks to determine whether an error message, error code or a timeout was returned, as shown in block . If the response was an error message or error code, execution continues at blocks  and , as already discussed, such that the error message or error code is extracted, may be translated, and is forwarded to the SFS plug-in. If the non-substantive response is a timeout, the request is resent, as shown in block , and execution continues at block , as discussed above.","In one embodiment, the SFS network access program maintains internal data structures to allow it to efficiently respond to requests from user application programs and process responses from remote computer systems. In one embodiment, to overcome limitations of the WebDAV extensions to HTTP, SFS locally caches remote files and remote file system information. In this embodiment, the SFS network access program creates and maintains cache files referred to as the SFS cache such that requests made regarding remotely stored files may be executed on locally stored copies of the files by the SFS plug-in. After operations on a particular file are completed, or in other appropriate circumstances, the modified cache file is then communicated to the remote server, thus, updating the file stored on the remote computer system and synchronizing the locally stored cache copy with the remotely stored file. Such caching is hidden from the SFS user. For example, in one embodiment, a request to open a file will result in the SFS network access program creating a cache file which contains the contents of the remote file. In such an embodiment, the SFS network access program returns a file descriptor to the newly created cache file, which is used for subsequent read and write operations by the requesting user application program and the SFS plug-in.","The SFS cache may be implemented according to any methods known to those skilled in the art. In one embodiment, \u201cinvisible caching\u201d is used. In such an embodiment, immediately after the SFS network access program creates and opens a local cache file, the cache file is deleted such that the data for the local cache remains valid, but the name of the locally cached file is removed from the local file system directory. One advantage of \u201cinvisible caching\u201d is that users are prevented from stumbling across cache files as the entire SFS cache is invisible to the user. Another advantage of using \u201cinvisible caching\u201d is that all local cache files are created in a single directory, thus simplifying the management of the SFS cache. In such an embodiment, information reflecting the directory structure on the remote server may be saved as an invisible file.","In another embodiment, \u201cparallel hierarchical caching\u201d is used. Because the combination of WebDAV's name space definitions and the domain name registry essentially guarantees that all URIs are unique, a hierarchical local cache may be created based on the URIs supplied by users. In this embodiment, the directories in the cache persist and remain present in the name space. This embodiment creates a parallel local file hierarchy to that of each WebDAV server accessed. In this embodiment, only the files actually referenced by users need appear in the local SFS cache. In this embodiment, local cache files may be used recurrently, thus reducing the number of file requests to and file downloads from the network. An advantage of using \u201cparallel hierarchical caching\u201d is that the SFS network access program is not required to maintain a map of the locally replicated remote file system.","In yet another embodiment, \u201cmap caching\u201d is used. In this embodiment, cache files are created with standard names such as sfs-000001, and a mapping from URIs to cache files is maintained by the SFS network access program and\/or the SFS plug-in. Just as with \u201cparallel hierarchical caching\u201d, in this embodiment, local cache files may be used recurrently, thus reducing the number of calls to and downloads from the network. Such an embodiment requires fewer calls to the local file system than \u201cparallel hierarchical caching\u201d to maintain the SFS cache.","In addition, in one embodiment, the SFS network access program maintains an array of file descriptors paired with URIs. When a file is opened and the SFS network access program opens a local cache file, in one embodiment, the SFS network access program places the file descriptor together with the specified URI in the next available array element. In such an embodiment, when processing an open file request, the SFS network access program returns the index into the array as a file handle to the SFS plug-in along with a file descriptor. The SFS plug-in uses the file descriptor to access the cached file. In this embodiment, subsequent operations which require activity by the SFS network access program result in the file handle being passed to the SFS network access program by the SFS plug-in such that the SFS network access program identifies the corresponding URI by accessing the array and then communicates with the appropriate remote server.","As discussed above, remote file requests are intercepted by the SFS plug-in and passed to the SFS network access program. The information passed between the SFS network access program and the SFS plug-in is specific to each operation supported but generally includes, in one embodiment, the URI of the remote file, or sufficient information for the SFS network access program to reconstruct the URI as set forth in the prior paragraph. In most cases the remote file requests will return either success or standard errors translated by the SFS network access program from the error values returned by the WebDAV\/HTTP server.","Because of the transparent nature of the user interface, to provide for a uniform interface to all files requested by a user of a computer system, be the files remote or local, the user may specify all files, both remote and local, in the same manner using the syntax required of the local file system. That is, users of systems incorporating the SFS and local file system clients may request remotely stored files as if the files were locally stored according to the syntax defined by the local file system and local operating system. More specifically, an operating system in conjunction with a local file system defines which characters can and cannot be used in file names. However, the remote server may only support use of a subset of the characters allowed on the local file system. In one embodiment, the local file system allows for the use of a blank space, a left square bracket \u201c[\u201d, right square bracket \u201c]\u201d, pound sign \u201c#\u201d, question mark \u201c?\u201d and other special or non-alphanumeric characters in file names. In various embodiments, the filenames may be represented by the operating system according to the American Standard Code for Information Exchange (ASCII) specification, the Unicode Transformation Format eight bit (UTF-8) encoding standard, etc. However, WebDAV enabled HTTP servers only accept file names in the form defined in the URI specification. (see above). The URI specification limits the use of characters to be used in file names to ASCII alphanumeric characters. The URI specification defines particular reserved or special uses for a list of special characters. To overcome the limitations of the character set allowed to represent file names on WebDAV\/HTTP servers, the SFS network access program translates outgoing requests from the local operating system\/file system format of allowed characters to a sequence of URI allowed characters in which the special characters are represented as escape sequences. Similarly, the SFS network access program reverse translates incoming information from the remote WebDAV\/HTTP server which are in URI format to the format of the local operating system\/file system, translating escape sequence characters into ASCII, UTF-8, etc.","The URI specification provides that the reserved, special characters may be represented by escape sequences. This allows for use of the special characters in a \u201chidden\u201d manner and avoidance of any unintended interpretation of the special characters. The URI specification defines an escape sequence as a percent sign \u201c%\u201d followed by the two digit hexadecimal representation of the ASCII code of the special character. For example, if a remote file name is specified by a user of a local computer system to include a blank space such as the name \u201cmy file\u201d, the file name would be translated and represented as \u201cmy %20file\u201d because 32 (decimal) is the ASCII code for blank space. Another example is \u201cletter #1 (to Bob)\u201d which is translated into \u201cletter %20%231%20%28 to %20Bob %29\u201d. Upon receipt of file names, directory names, paths, etc. from a WebDAV\/HTTP server in URI syntax, the file names, directory names, paths, etc. are reverse translated from the URI syntax into the local operating system syntax such as, for example, ASCII or UTF-8. In one embodiment, the SFS network access program performs the translation when the SFS network access program formats the request in a well known format, as shown in block , and may perform the reverse translation in any of blocks , , or .","G. Some SFS Supported Operations","Various file system operations may be supported by SFS. Such file system operations are well known in the art. Examples of some file system operations and how they may be implemented in one embodiment of SFS follow.","1. Opening and Closing Directories and Files","In one embodiment, the SFS plug-in serves as a pass through file system. In this embodiment, the SFS plug-in intercepts file system requests directed to a remote file system, manipulates the arguments, and instructs the local file system to perform a sequence of operations on the locally stored cache file corresponding to a requested remote file or remote directory. When opening a remote file, the open command causes the SFS network access program to create a cache file, issue the appropriate WebDAV method to lock the file exclusively on the remote server, issue the appropriate WebDAV\/HTTP method to retrieve the contents of the target file from the remote WebDAV\/HTTP server, and write the retrieved data into the newly created cache file. The SFS network access program sends a file handle to the SFS plug-in when the requested operation is complete. The SFS plug-in may retain the file handle of the cache file for future local access to a copy of the remote file. In this embodiment, subsequent file descriptor operations may be redirected to the cache file by the SFS plug-in. The file system interface of the local file system on which the local cache file resides is called to perform the file descriptor operations. On FSYNC or CLOSE, the SFS network access program issues the appropriate HTTP method to write the modified contents of the locally cached file to the remote server. The SFS network access program uses the file handle to identify which remote file to close and unlock.","The sequence of actions taken by SFS to open a directory is similar. In one embodiment, because the WebDAV protocol does not support directory enumeration, the SFS network access program issues a WebDAV PROPFIND request for all properties using the directory URI and specifying a header depth of one. In response, the WebDAV\/HTTP server returns the specified properties of all of the items in the collection, that is, all files in the directory on the server. In one embodiment, the SFS network access program parses the returned XML property list to determine the names of the entries in the directory, and then builds a local cache file which allows the remote file system to be replicated according to the local computer system's directory listing style, complete with directory entries. The file descriptor for the locally cached file representing the remote directory listing is returned.","In one embodiment, a request to close a directory causes the SFS network access program to close the locally cached file representing the directory. In such an embodiment, no communication is necessary with the WebDAV\/HTTP server.","2. Creating Files","When a create request is passed to the SFS network access program by the SFS plug-in, the SFS network access program sends the URI of the target file via a WebDAV PUT method to the remote WebDAV\/HTTP server. If a cache file already exists for the directory where the new file entry is to be created, in one embodiment, the cache file is updated to include the newly created entry. In another embodiment, the cache file may be flushed and recreated to include the new file information.","3. FSYNC","In one embodiment, FSYNC is the primary synchronization routine used for moving data from the local cache to the server. FSYNC calls are communicated by the SFS plug-in to the SFS network access program using the file handle supplied by the SFS network access program in response to an OPEN request. The SFS network access program issues the appropriate WebDAV method to push the data back to the remote server. The SFS network access program also returns any errors received from the WebDAV\/HTTP server to the SFS plug-in.","4. Get and Set Attributes","In one embodiment, attributes are retrieved and set by the SFS network access program via the PROPFIND and PROPATCH WebDAV protocol methods, respectively.","5. Creating Directories","In one embodiment, directory creation calls, which may be the well known MKDIR, cause the SFS network access program to issue a WebDAV MKCOL request to the WebDAV server to make a collection.","6. Reading a File","In one embodiment, read requests cause data to be read from the local cache file corresponding to the remotely stored file that was specified with the read request. If there is no locally cached copy of the requested remote file, the WebDAV extensions to the HTTP protocol support the ability to retrieve parts of a file without retrieving a whole file. Thus, when files are to be opened for read access only, the SFS network access program may retrieve only the requested portion of a file from the specified WebDAV\/HTTP server for each read request.","7. Writing a File","In one embodiment, all write requests are performed on a locally cached copy of the specified remotely stored file. Written to files are synchronized on FSYNC or CLOSE. In other embodiments, more frequent synchronization between the locally cached version of the file and the remotely stored file may be achieved when certain conditions are met, such as, for example, at the conclusion of a predetermined period of time or when a predefined percentage of the locally cached file has been changed.","8. Reading a Directory","Reading a directory may be requested via the commonly known READDIR command. In one embodiment, a request to read a directory may be made only after the directory has been opened. In this embodiment, all read directory requests are redirected by the SFS plug-in to access a locally cached representation of the already opened requested remote directory.","9. Removing a Directory and Deleting a File","Upon receiving a request to remove a directory or delete a file on a remote server, in one embodiment, the SFS network access program issues a WebDAV DELETE request to the WebDAV\/HTTP server specifying the requested URI and, when appropriate, the file to delete. If a locally cached representation of the remote directory exists for the directory containing the file to be deleted, in one embodiment, the locally cached copy of the remote directory listing is updated to remove the deleted entry. In another embodiment, the SFS network access program flushes the locally cached copy of the remote directory listing and recreates a locally cached copy of the directory listing by issuing a WebDAV PROPFIND request to the WebDAV\/HTTP server for the appropriate URI and any subdirectory. If a locally cached copy of the remote file exists, the SFS network access program flushes the locally cached copy of the remotely stored file.","10. Truncate","In one embodiment, all truncate requests are performed on a locally cached copy of the specified remotely stored file. Truncated files are synchronized on FSYNC or CLOSE.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. Therefore, the scope of the invention should be limited only by the appended claim."],"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
