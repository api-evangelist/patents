---
title: Cloud reference model framework
abstract: A computing device implemented method, in one embodiment, can include a cloud transformation module transforming content for a compute platform. Additionally, the method can include a cloud control module receiving the content from the cloud transformation module. The method can also include the cloud control module provisioning a virtual machine appliance to form the compute platform. Furthermore, the method can include a cloud instantiation module executing the provisioning of the cloud control module. In addition, the method can include a cloud appliance module adding middleware to a virtual machine to create the virtual machine appliance. Moreover, the method can include a cloud virtualization module producing a virtualized representation of the compute platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116731&OS=09116731&RS=09116731
owner: Accenture Global Services Limited
number: 09116731
owner_city: Dublin
owner_country: IE
publication_date: 20110324
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application No. 61\/321,780, filed Apr. 7, 2010, entitled \u201cCloud Reference Model Framework,\u201d by Teresa S. Tung et al., which is hereby incorporated by reference.","Cloud computing is appealing to most enterprises because of its promise of commodity and on-demand utility computing. However, cloud computing faces key barriers to adoption. For example, key policy issue barriers can include legal, indemnity, and compliance. In addition, key technology issue barriers can involve security, reliability, and performance. Furthermore, what makes navigating these issues difficult is that cloud-based application architecture is confusing. First, the term \u201ccloud\u201d is overloaded and used by many vendors each with vastly differing offerings. Second, the on-demand and scalability features of cloud computing are new and architects are still working to understand how to leverage these capabilities.","A computing device implemented method, in one embodiment, can include a cloud transformation module transforming content for a compute platform. Additionally, the method can include a cloud control module receiving the content from the cloud transformation module. The method can also include the cloud control module provisioning a virtual machine appliance to form the compute platform. Furthermore, the method can include a cloud instantiation module executing the provisioning of the cloud control module. In addition, the method can include a cloud appliance module adding middleware to a virtual machine to create the virtual machine appliance. Moreover, the method can include a cloud virtualization module producing a virtualized representation of the compute platform.","In an embodiment, the method described above can further include a cloud application module for capturing user generated content and data associated with an application program. Furthermore, in one embodiment, the method described above can further include a physical module for providing raw compute, storage, and network capabilities.","While particular embodiments in accordance with the disclosure have been specifically described within this Summary, it is noted that the disclosure and the claimed subject matter are not limited in any way by these embodiments.","Reference will now be made in detail to various embodiments in accordance with the disclosure, examples of which are illustrated in the accompanying drawings. While the disclosure will be described in conjunction with various embodiments, it will be understood that these various embodiments are not intended to limit the disclosure. On the contrary, the disclosure is intended to cover alternatives, modifications and equivalents, which may be included within the scope of the disclosure. Furthermore, in the following detailed description of various embodiments in accordance with the disclosure, numerous specific details are set forth in order to provide a thorough understanding of the disclosure. However, it will be evident to one of ordinary skill in the art that the disclosure may be practiced without these specific details. In other instances, well known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the disclosure.","Some portions of the detailed descriptions that follow are presented in terms of procedures, logic blocks, processing, and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. In the present application, a procedure, logic block, process, or the like, is conceived to be a self-consistent sequence of operations or steps or instructions leading to a desired result. The operations or steps are those utilizing physical manipulations of physical quantities. Usually, although not necessarily, these quantities can take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system or computing device. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as transactions, bits, values, elements, symbols, characters, samples, pixels, or the like.","It is noted that in one embodiment in accordance with the disclosure, a general description of \u201ccloud\u201d is a collection of network-hosted services accessible from almost anywhere with the following attributes: elastically scalable, illusion of infinite capacity, available on-demand, and consumption-based charges with no upfront commitment, but is not limited to such. This description can apply to all levels of the cloud (e.g., process, software application, compute platform, or virtual machine hosting).",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","100","100","102","104","106","108","110","112","114","100"]},"Note that in an embodiment, the cloud application layer , cloud transformation layer , cloud control layer , cloud instantiation layer , cloud appliance layer , cloud virtual layer , and cloud physical layer  can also be referred to as the cloud application module , cloud transformation module , cloud control module , cloud instantiation module , cloud appliance module , cloud virtual module , and cloud physical module , respectively, but are not limited to such.","In one embodiment, the application architecture design of the cloud reference model  can involve determining the functionality at each layer, such as, fulfilling requirements on attributes like security, reliability, and cost. The cloud reference model  fits together vendor offerings and do-it-yourself solutions based on addressing per layer functionality. Leveraging this approach may decouple the design and assessment of cloud-based IT systems to fulfilling per-layer functionality and then combining the per-layer functionality.","Within , in one embodiment, the Cloud Reference Model  can describe the functionality that may be considered as part of a cloud-enabled application architecture stack. It is pointed out that this Cloud Reference Model  groups IT functionality into layers to separate areas of concern.","The Cloud Reference Model  can be used to breakdown how an application's technology and policy needs are evaluated by narrowing the focus: At each layer solutions focus on realizing a subset of the needed IT functionality and assume other functionality as given\u2014how to characterize attributes including functional, risk, reliability, security, and cost is decoupled. For example, security encompasses solutions from access to encryption to network protections to physical concerns; the Cloud Reference Model  decouples these decisions into what needs to be place at each layer (e.g., Application layer , Transformation layer , Control layer , Instantiation layer , Appliance layer , Virtual layer , and Physical layer ). Or, cost requirements include adding up the costs of implementing the chosen solution from each layer. It is noted that fulfilling these needs can be an operation in mapping vendor offerings and do-it-yourself responsibilities.","Moreover, the Cloud Reference Model  is defined such that per-layer focus solutions interface with those of adjacent layers. Thus, the layer's boundaries delineate the cross-layer interfaces between solutions. Capability in a layer can be described in terms of services from the layer below it. For example, a virtual machine in the Virtual Layer  is a unit of compute resource carved from a physical server of the Physical Layer .","Note that in one embodiment, the per-layer needs of the Cloud Reference Model  can be fulfilled by combining together functionality from the adjacent layers with intra-layer vendor offerings and responsibilities provided by the Cloud Reference Model . Solutions at each layer are reusable, and properly combining the solutions can create an overall cloud architecture for applications like portals, batch, and distributed file systems. The Cloud Reference Model  can characterize the interactions and contributions of existing vendors and identifies the gaps.","Within , since the Cloud Reference Model  decouples IT functions, the chosen implementation at each layer is independent of the implementation of the underlying layers. After per-layer implementation is established or fixed, the Cloud Reference Model  can provide the framework for combining how these mechanisms interact to fulfill a composite service level agreement (SLA), capability, or concern. For example, the Appliance Layer  may only need to know the virtual machine specifications like central processor unit (CPU), memory, and disk; the details around how physical compute resources provide this capability is not required and may in fact be met in a number of different ways (e.g., via a server, via a number of blade servers, via a mainframe, via a desktop computer).","The cloud reference model  can provide a framework on top of which formulating composite application attributes like cost, availability, performance, and carbon footprint are a matter of defining how they are computed at each layer and then how they impact adjacent layers. Note that this methodology can decouple the computation.","Within , the Application Layer  can set up a cloud application program. User-generated content like code, data, static files, and executables can specify the application program. The content format and representation determine the needed application architecture. For example, a portal can be specified with HyperText Markup Language (HTML) files, images, and JavaScripts which determine a Java-based web application architecture. Other example architectures include batch processing or high performance computing. Content at the Application Layer  can specify the overall application functionality and include the end-user experience. The Application Layer  can supply the user demand and inputs the content to create the business application, but is not limited to such.","The Transformation Layer  can select the compute platform that meets the specifications of the generic application, and then maps the content and metadata from the Application Layer  to the required format for storage or execution on the selected compute platform. Example transformations applied to data by the Transformation Layer  can include, but are not limited to, encrypting, encoding for error correction, segmenting large data objects into smaller units, reformatting data structures into XML (Extensible Markup Language), or applying business logic to structure data. Likewise, example transformations applied to code by the Transformation Layer  can include, but are not limited to, recompiling, translating into a different language, or augmenting with additional code. The Transformation Layer  processing can complete the program for execution on the selected specific compute environment or platform. The Transformation Layer  can provide the mechanism or function to translate user content from the Application Layer  to the platform-specific code and user-data consumed by the platform created by the Control Layer .","Within , the Control Layer  can prescribe the best or appropriate set of a vendor's virtual machine appliances or pre-packed vendor services required to form the desired compute platform. Sourcing may account for vendor or geographical preferences. It is noted that the Control Layer  can determine the quantity, type, vendor, and location of virtual appliances to create the desired compute platform. More than one-time provisioning, the Control Layer  can monitor the current status of the compute platform and determine how and when to scale the compute platform to meet guarantees around, but not limited to, service level agreements (SLAs), compliance, cost, and\/or capability. The Control Layer  can assign the formatted content from the Transformation Layer  across the prescribed deployment.","For example, the Control Layer  can prescribe that the portal source three web server nodes on Amazon's Elastic Compute Cloud (EC2) in the west coast region and three redundant nodes in the corporate data center; later based on monitoring of the actual performance, the Control Layer  can update the requirement to five worker nodes in both EC2 and the data center. It is pointed out that instead of a set of virtual machine appliances, the Control Layer  may include or prescribe a pre-packaged vendor service like Amazon Simple Storage Service (S3). In one embodiment, the Control Layer  ultimately determines how the compute platform is fulfilled. The Control Layer  can specify the sourcing and scaling of resources required to create the compute platform needed to process the compute and data passed by the Transformation Layer .","Within , the Instantiation Layer  can execute the specification of the Control Layer , e.g., automation of scripts provision, maintain, and tear-down the prescribed deployment of virtual appliances. As part of provisioning, the scripts can add the assigned content, software, data, configurations, and connectivity to form the application platform. For example, the provisioning by the Instantiation Layer  can apply the Internet Protocol (IP) address and update the Domain Name System (DNS). Working with the Control Layer , the Instantiation Layer  can pass monitored statistics and then implements the updates when sourcing arrangements are recomputed by the Control Layer . The Instantiation Layer  can enact how provisioning and configuration occurs specific to the infrastructure provider (e.g., data center, EC2, or GoGrid). The Instantiation Layer  can act upon the direction of the Control Layer  and set-up artifacts in the Appliance Layer , but is not limited to such.","The Appliance Layer  can contain the middleware added to a virtual machine to create a virtual machine appliance. The actual implementation of each appliance may vary so long as the appliance supports the prepared content. For example, software for Linux operation system, Apache HTTP (HyperText Transfer Protocol) server, MySQL database, and Python scripting language forms an appliance with the LAMP solution stack. The Appliance Layer  can create the images and templates of the specific appliance used in the compute platform. The Appliance Layer  can add the capability that augments the generic virtual compute capability from the Virtualization Layer , but it not limited to such.","The Virtualization Layer  can produce the virtualized representation of the compute resources. It is noted that management software at the Virtualization Layer  can handle the virtualization management of server images, generic storage volumes, and logical network connections. For example in an embodiment, VMware virtualization management software that is part of the Virtualization Layer  can monitor and assign virtual machines to physical resources. The Virtualization Layer  can assign or designate virtual compute, storage, and communication network units from the Physical Layer , but is not limited to such.","Within , in one embodiment, the Physical Layer  can maintain the physical devices that perform the compute operations. Note that the Physical Layer  can include, but is not limited to, the IT hardware for compute (e.g., servers, mainframes), storage (e.g., Storage Area Network (SAN), network-attached storage (NAS)), networks (e.g., routers, links), as well as the data centers that house this capability. Functions at the Physical Layer  can include data center services such as, handling RAID (Redundant Array of Independent Disks or Redundant Array of Inexpensive Disks) on storage, redundant failover of physical servers, physical network management, but is not limited to such. Note that the Physical Layer  can offer raw compute, storage, and network capability, but is not limited to such.","The 7-layers within the present embodiment of the Cloud Reference Model  describe a separation of functionality for cloud architectures to maximize solution compatibility. In one embodiment, the application program and the implementation of platform interfaces can occur at separate layers.","It is noted that in various embodiments, a Cloud Reference Model as described herein can be utilized in combination with compute resources and\/or compute platforms. In one embodiment, a computer resource or a computer platform can include, but is not limited to, hardware, virtual hardware, compute servers, network routers, network switches, storage, databases, virtual networks, virtual servers, virtual storage, or any combination thereof.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 2","FIG. 2","FIG. 2","FIG. 1"],"b":["200","200","202","204","206","208","210","212","214","102","104","106","108","110","112","114"]},"At operation , the Application Layer  can contain the code that transcodes each file and the code that creates the end-user interface for accepting the commands and presenting the data files. Programmers can manipulate this code base focusing on interactions with the end-user and on interfaces with application programming interfaces (APIs) from the Transformation Layer  with minimal concern for the underlying compute platform.","At operation  of , next the Transformation Layer  transforms the code and collected data to suit the compute platform. In an embodiment where Amazon provides the platform for storage and message queue (as represented by ), these transformations handle the details of the Application Layer 's \u201cput\u201d and \u201cget\u201d instructions specific to the underlying Amazon interface: the code with APIs for Simple Queue Service (SQS) to log status and with Simple Storage Service (S3) to access the files, and the data with handling for storage in S3. For example, the Transformation Layer  breaks a data object into smaller pieces for storage on the cloud (as represented by work units ), and upon retrieval the Transformation Layer  recombines and checks the object before presentation to the Application Layer . Changing the compute platform from Amazon can involve updates to \u201cput\u201d and \u201cget\u201d implementations.","At this point, it can be assumed that the lower layer implementation of the message queue and file storage are handled by vendor solutions SQS and S3, respectively. As such, the vendor (e.g., Amazon) is responsible for fulfilling all functionality at the lower layers. In return, Amazon's guarantees are accepted for this functionality: 99.9% availability and no latency guarantees. What remains is to complete the platform to handle the processing prepared in the Transformation Layer .","Within the Control Layer  of , controller logic determines the number and location of the virtual appliances needed to service the compute prepared by the Transformation Layer . Logic of the control layer  can filter at operation  the provided appliances based on, for example, capability to provide desired service and constraints like remaining within the country or the data center. Then the logic of the control layer  can select the appropriate number and type of appliances based on preferences and to meet desired guarantees, e.g., requires five large images to meet a time constraint of 24 hours, and locate in Amazon's west coast region to be physically close to the data stored on S3. With the help of constant monitoring at operation  from the Instantiation Layer , algorithms of the control layer  can assign the files to be processed, scale the number of virtual appliances, and re-assign files in case of delay or failure to meet time constraints. For example, if the processing is taking longer than expected, the logic of the control layer  signals that an additional virtual appliance is required. By implementing the logic at the Control Layer , there may be control over the placement of the compute as well as the time constraint and availability.","Based on the determination of the Control Layer , the Instantiation Layer  at operation  can automate the appropriate scripts to provision the appliances, connect the resulting appliances, and turn-off machines when finished. For example, for Amazon's Elastic Compute Cloud (EC2), provisioning scripts may supply particular Amazon credentials, apply configuration, load the content, and perform error handling if the returned appliance is faulty (e.g., memory errors).","Within , the Instantiation Layer  can use a script that installs a pre-defined image of the appliances. In one embodiment, the Appliance Layer  may create the image. In an embodiment, the Appliance Layer  can create an Amazon EC2 machine image for a job scheduler  appliance by installing the Berkeley Open Infrastructure for Network Computing (BOINC) control process software  and  to choreograph and distribute the files for a worker appliance using the BOINC client software that runs the media transcoding program .","Finally sticking to the Amazon example, Xen virtualization software may carve the virtual machine from the physical resources at the Virtualization Layer . For example within the present embodiment, the virtual layer  carves an extra large Ubuntu AWS virtual server  that operates in combination with the scheduler  of the appliance layer . In addition, the virtual layer  carves a small Ubuntu AWS virtual server  that operates in combination with the BOINC  of the appliance layer . Moreover, the virtual layer  carves a small Ubuntu AWS virtual server  that operates in combination with the BOINC  of the appliance layer . It is noted that in one embodiment, the responsibility of the virtual layer  is to ensure the virtual machines' health, e.g., receiving adequate Central Processing Unit (CPU) and memory shares. And the Physical Layer , which can include one or more servers , deals with data center concerns of supplying power, cooling, compute to support the virtual machines.","At each layer of the Cloud Reference Model , the IT functions focus on functions supporting one level of abstraction. As such, solutions focus on supporting the component at just their layer with minimal concern for other details. Then modifications like changing cloud providers at the virtual machine or compute platform level involves updates to these interfaces. As such, per-layer solutions are reused minimizing re-architecting, and combining the solutions forms the overall cloud architecture.","At operation  of , it is noted that the cloud control layer  can receive business service level agreements (SLAs). Operation  can be implemented in a wide variety of ways. For example in one embodiment, the business service level agreements can be received by the cloud control layer  at operation  from a user interface of a computing device or system. In an embodiment, the business service level agreements can be read in at operation  from a file from a configuration management database. Note that operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation , the cloud Instantiation Layer  can continuously monitor one or more service providers (or vendors) based on the received business service level agreements and then pass or send those monitored statistics to the control layer . Note that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation  of , the cloud control layer  can determine whether each of the monitored statistics of the service level agreements is satisfying their corresponding defined threshold. If each threshold is satisfied, no action is taken at operation  by the cloud control layer . However, if it is determined at operation  that one or more thresholds are not satisfied, the cloud control layer  can proceed to operation . It is pointed out that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation , the cloud control layer  can determine the bottleneck (or obstacle) causing the one or more service level agreements to not satisfy their corresponding defined threshold. It is noted that operation  can be implemented in a wide variety of ways. For example in an embodiment, the determination at operation  can include analyzing the received monitored statistics to identify one or more virtual machine appliances and\/or worker nodes that are causing the bottleneck, but is not limited to such. Operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation  of , the cloud control layer  can determine whether scaling the compute platform capacity will potentially eliminate the one or more bottlenecks determined at operation . If so, the cloud control layer  can proceed to operation . However, if it is determined at operation  that scaling the compute platform capacity will not eliminate the one or more bottlenecks, the cloud control layer  can proceed to operation . Note that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation , the cloud transformation layer  can receive and transform code and data, which are then transmitted by the cloud transformation layer  to the cloud control layer . It is pointed out that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation  of , the cloud control layer  utilizes the transformed code and data together with sizing and sourcing information in order to assign workload across the prescribed deployment. In addition, the cloud control layer  can transmit at operation  the workload assignment information to the cloud instantiation layer . It is noted that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation , after receiving the workload assignment information from the cloud control layer , the cloud instantiation layer  can distribute the workload across the prescribed deployment (e.g., reconfigure a load balancer as shown). Furthermore, as part of the workload distribution at operation , the cloud instantiation layer  can provision and configure script  in order to distribute the workload across the prescribed deployment. It is pointed out that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation  of , the cloud control layer  can receive one or more cost constraints for service providers or vendors. It is noted that operation  can be implemented in a wide variety of ways. For example in one embodiment, the one or more cost constraints for service providers can be received by the cloud control layer  at operation  from a user interface of a computing device or system. In an embodiment, the business service level agreements can be read in at operation  from a file from the configuration management database. Note that operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation , the cloud control layer  can receive one or more compliance requirements for service providers or vendors. Note that operation  can be implemented in a wide variety of ways. For example in an embodiment, the one or more compliance requirements for service providers can be received by the cloud control layer  at operation  from a user interface of a computing device or system. In one embodiment, the compliance requirements can be read in at operation  from a file from the configuration management database. It is pointed out that operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation  of , the cloud control layer  can receive one or more capability requirements for service providers or vendors. It is pointed out that operation  can be implemented in a wide variety of ways. For example in one embodiment, the one or more capability requirements for service providers can be received by the cloud control layer  at operation  from a user interface of a computing device or system. In one embodiment, the capability requirements can be read in at operation  from a file from the configuration management database. It is noted that operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation , the cloud instantiation layer  can acquire and transmit capability information for one or more service providers to the cloud control layer . Note that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation  of , the cloud control layer  can utilize the received compliance requirements for service providers, the received capability requirements for service providers, and the received capability information for one or more service providers in order to filter out allowable service providers that are able to satisfy the requirements. It is noted that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation , in order to scale the compute platform capacity to potentially eliminate the one or more bottlenecks determined at operation , the cloud control layer  can utilize the received one or more cost constraints and the allowable service providers to determine sizing and sourcing from each service provider or vendor. Additionally, the cloud control layer  can transmit or output at operation  sizing and sourcing information to the cloud instantiation layer . It is pointed out that operation  can be implemented in a wide variety of ways. For example in one embodiment, the sizing and sourcing determination at operation  by the cloud control layer  can include the assignment of roles (e.g., primary and redundant, or worker and aggregator), but is not limited to such. In addition, the output of the cloud control layer  at operation  can be a number and type of virtual machine appliances from each vendor for the cloud instantiation layer  to provision, but is not limited to such. Furthermore, the output of the cloud control layer  at operation  may prescribe a vendor provided platform that serves the basic functionality, or the details of building the platform, or a number of virtual machine appliances that augment or replicate this basic functionality. Operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation  of , after receiving the sizing and sourcing information from the cloud control layer , the cloud instantiation layer  can provision and configure script in order to implement the sizing and sourcing from each service provider or vendor (e.g., add one AWS web server as shown). Moreover, the cloud instantiation layer  at operation  can also output or transmit the received sizing and sourcing information to the cloud control layer  for use at operation . Note that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.","It is pointed out that the Cloud Reference Model  of  may be used to evaluate information technology (IT) attributes for a cloud-based IT system. IT practitioners may need to evaluate system attributes including cost, carbon footprint, availability, performance, and security. Before cloud, the common practice mapped overall system attributes directly to the attributes of the dedicated IT hardware (i.e., the cost of the system is the cost of the hardware and so forth). The difficulty with cloud is that while a cloud-based system ultimately maps to hardware, the hardware may be owned by other entities and its composition is not visible; or the hardware is shared among many different applications; furthermore the composition of the hardware may vary over time. The Cloud Reference Model  can map the cloud-based application's IT stack tracing the system from application to hardware. This mapping may allow for the characterization of system attributes.","The layered structure of the Cloud Reference Model  can decouple the problem. The Cloud Reference Model  can focus per-layer functionality in terms of capability added to that delivered from the layer directly below it. This structure allows for per layer characterization of attributes in terms of metrics accumulated from the lower layers. For example, the cost at a given layer adds the cost of the component at that layer and to the accumulated to cost from the layer below. This approach enables the comparison of different solutions within a layer and characterization of combinations of solutions fit across layers.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 3","b":["300","300","300"]},"Specifically, one way to utilize the cloud reference model  is to identify one or more attributes associated with each of its layers. Note that attributes can vary across layer based on the functionality within the layer of the cloud reference model . For example in one embodiment, the attributes may either 1) vary by focusing on a unique instantiation of the attribute, or 2) vary by focusing on how the per-layer instantiation combines with that of the lower layers.","More specifically, case 1 above can be illustrated via security , wherein security  characterizes different types of protections based on the functionality within a layer. In one embodiment, the Physical Layer  can consider the security of the hardware and physical data center. Furthermore, the Virtual Layer  can consider the security of the virtualization software on top of the physical costs. The Appliance Layer  can consider the security of the middleware to the cost per virtual machine\/storage\/network. The Instantiation Layer  can consider the security of the instantiation and configuration of the appliances. The Control Layer  can consider the security of the chosen geography and vendor in which the application is deployed. The Transformation Layer  can consider the transport and handling of the user data and content to the resulting compute platform. The Application Layer  can consider the security of the end user access.","Note that case 2 mentioned above can be illustrated via Availability\/Cost\/Carbon Footprint\/Performance , wherein these attributes are characterized by how the per layer implementation acts with that of the layers below. In an embodiment, the cost of the Physical Layer  can be that of the hardware and physical data center. Additionally, the cost of Virtual Layer  can add virtualization software costs on top of the physical costs. The result is the cost per virtual machine\/storage\/network. The cost of the Appliance Layer  can add the cost of middleware to the cost per virtual machine\/storage\/network. The result is the cost per appliance. The cost of the Instantiation Layer  can add the cost to instantiate and configure the appliance\/storage\/network to the cumulative cost of the combination of virtual appliances needed. Note that an instance includes an inventory of virtual appliances configured with the right network and storage settings. The result at a given time is the cost of that inventory.","Within , the cost of the Control Layer  can accumulate the cost of the instances of the Instantiation Layer  over time. Recall that the inventory may vary over time based on the functionality of the Control Layer . For example, consider inventory A that consists of 2 small virtual appliances at US $0.10\/hr and inventory B that consists of 4 small virtual appliances. The Control Layer  can track that inventory A is used for 1 hour and inventory B is used for 2 hours, thus the cost is US$1.00. Additionally, the Control Layer  may add cost to the software that monitors and computes the required platform. Similarly with Performance and Availability, the Control Layer  can track the performance and availability maintained over time, instead of a particular instance. For example, the performance of Inventory B is double that of Inventory A. However, at any time the minimum performance is that of Inventory A. The result of the Control Layer  is the attribute as associated with a platform. The Transformation Layer  can add costs associated with interfacing the end-user client to the platform created by the Control Layer . The result is the cost of the application setup. The Application Layer  can add costs associated with adding the user-specific data and content to the interface exposed by the Transformation Layer . The result is the cost of the application per use.","In one embodiment, after identifying the one or more attributes associated with each layer of the cloud reference model  of , per-layer functionality can be enumerated as shown in , but is not limited to such.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 4","FIG. 3"],"b":["400","400","400","400"]},"The cloud reference model  provides an abstraction to decouple concerns. In addition, the cloud reference model  identifies the per-layer functionality that contributes to an attribute, e.g., security , availability , cost , and\/or performance , but is not limited to such. Take security  as an example where each layer of the cloud reference model  presents different concerns. In one embodiment, security at the Physical Layer  regulates and secures the physical access to the hardware and data center. The Virtual Layer  isolates and guarantees virtual resources (e.g., machines and network). In addition, the Virtual Layer  secures the virtual compute, storage, or network units as managed by virtualization management software, e.g., whether virtual compute instances are physically isolated or share physical equipment with those of others. Antivirus, authentication, and firewall software installed within the appliance can provide protections at the Appliance Layer . Moreover, the Appliance Layer  can secure the virtual appliances via installation of antivirus software and application of the patches.","Within , the Instantiation Layer  can apply network port configurations to minimize intrusion, constantly monitor against compromise or network flooding, and signal the Control Layer  for updates when adverse conditions are detected. Furthermore, the Instantiation Layer  can secure the instantiation of the compute platform by applying the right configuration settings, e.g., closing unused network ports. Finally, the Transformation Layer  can secure the transportation and preparation of the client user data using encryption and anonymization of data, and the Application Layer  can handle end-user authentication and access. In addition, the Application Layer  secures access via user profile, permissions, and authentication. Note that each layer of the Cloud Reference Model  can add a different level of security protection. Furthermore, the separation of components makes it easier to describe and evaluate requirements.","Additionally, the cloud reference model  can provide a framework for compiling the various per-layer solutions to impact overall application guarantees as is the case with availability . In an embodiment, availability at the Physical Layer  can depend on the native availability of the physical compute machines and data centers, e.g., handling RAID (Redundant Array of Independent Disks or Redundant Array of Inexpensive Disks) on storage, redundant failover of physical servers, and physical network management, but is not limited to such. Note that higher available physical equipment at the Physical Layer  leads to better performance of the virtual resources (e.g., at the Virtual Layer ). Using this base unit, either a higher available virtualized machine with the same number of physical machines can be offered or the same level of availability using fewer physical machines. Within the Virtual Layer , availability of virtualized resource offerings can be based on the policy implemented by virtualization software to carve out virtualized resources from physical resources (e.g., the cluster size of physical machines on which virtual machines are assigned). In addition, availability at the Virtual Layer  can include virtual machine (VM) deployment policy and redundant failover of virtual machines, but is not limited to such.","Within , the appliance middleware of the Appliance Layer  can add guarantees with capabilities for load-balancing, spawning redundant jobs, and replicating data. Furthermore, within the Appliance Layer , availability of the virtual appliances can depend on the ability of the middleware software to replicate or load balance data or job processes. Note that parallelization can improve the availability since there is no single point of failure. Instantiation Layer  scripts can check the health of provisioned machines and automatically re-provisions in the case of failures. In addition, within the Instantiation Layer , availability of the instance can depend on the software or processes specified for the monitoring and orchestrating the configuration of the appliances (e.g., software that automatically detects when an appliance goes down and automatically restarts it). Control logic of the Control Layer  can act on real-time monitoring to update the prescribed deployment with adequate backup capability. In addition, the Control Layer  can scale across data center regions. Moreover, within the Control Layer  availability of the compute platform can depend on the policies in place to source and scale the platform (e.g., an unreliable vendor decreases the availability of the application, or sourcing from two independent vendors improves the availability).","Within the Transformation Layer  availability of the client-end application can be improved by quality checking or pre\/post-processing the user submitted content, e.g., error correction codes or redundant requests can also be generated at the Transformation Layer  when instantiated by the client. Within the Application Layer  availability of the resulting application can depend on the actual usage demanded, e.g., demand that overloads the system reduces the availability. As such, implementation at each layer of the cloud reference model  can contribute to the overall attributes of the application. It is pointed out that overall reliability can be met via more reliable lower layers or less reliable compensated by increased redundancy at the upper layers. The cloud reference model  can trace relationships across various components providing a structure for cascading computations for attributes like availability.","Within , the cloud reference model  can provide a framework for compiling the various per-layer solutions to impact overall application guarantees as is the case with cost . Within the Physical Layer , cost can include the cost to support the physical IT (e.g., per equipment cost (kW)). Within the Virtual Layer , cost of the virtual unit can be derived by adding the cost of virtualization software to the cost to support the physical equipment that runs the virtual units (e.g., if it costs $100\/month to support the physical server and the virtual machine deployment ratio is 4 VMs per cluster, then it costs $20\/month to support the physical equipment associated with 1 virtual machine). Within the Appliance Layer , cost of the appliance adds the middleware costs to the costs of the required virtual unit (e.g., a large virtual machine instance may cost $0.20\/month compared to a small one that costs $0.10\/month). The appliance itself has a capacity for which to advertise costs (e.g., capacities expressed as is 100 users, or 10,000 requests per hour, or 10 GB of storage may result in cost expressed as price per user, request, or amount of storage).","Within the Instantiation Layer , cost of the instance can add the orchestration software costs to the costs for I\/O (e.g., reads and writes, network traffic, etc.) and to the costs for the underlying appliances. Within the Control Layer , it is noted that the cost of the compute platform can compound over time. In one embodiment, the policies of the Control Layer  describe at what level of utilization to run the appliances (e.g., 50% utilization of a 1,000 user max capacity appliance means that to satisfy 1000 users we would require 2 appliances). Within the Transformation Layer , cost can include the cost of the compute platform as it is shared over many accounts (e.g., 1 account may be multi-tenanted at the Transformation Layer  so the costs are divided by users). Within the Application Layer , cost of the actual use can be metered by demand at the Application Layer  (e.g., require on average 1,000 requests, or 20 users per month).","Within , the cloud reference model  can provide a framework for compiling the various per-layer solutions to impact overall application guarantees as is the case with performance . Within the Physical Layer , performance can include the performance of the underlying hardware. Within the Virtual Layer , performance can include the performance of virtual units carved out of the physical IT. Within the Appliance Layer , performance can include performance based on the middleware. It is noted that the appliance itself has a max capacity (e.g., capacities expressed as is 100 users, or 10,000 requests per hour, or 10 GB of storage). Within the Instantiation Layer , performance can include performance of the instance configured, e.g., the specific network settings and instance will result in different levels of congestion (e.g., 20 ms delay from San Jose to San Francisco or 200 ms delay from San Jose to Chicago).","Within the Control Layer , performance can include the performance of the compute platform and includes policies that scale the compute platform (e.g., a policy may suggest that appliances be run to utilize 50% of maximum capacity so that resulting performance will be improved). Within the Transformation Layer , it is noted that transformations of the user submitted content may improve performance (e.g., optimized compiling of the code may result in faster performance, or preprocessing of data may result in less storage used). Within the Application Layer , performance can be based on the user demand (e.g., user demand that saturates the system reduces performance).","In one embodiment, after enumerating the functionality of each layer of the cloud reference model  of , relationships can be traced across layers to characterize the cumulative impact of the combined system as it evolves across the layered stack as shown in , , and , but is not limited to such. For example, for attributes with metrics, the structure of the cloud reference module (e.g., , , or ) can be used to formulate metrics as functions of per-layer implementation and lower layer metrics. In one embodiment, attributes may consist of a satisfied\/unsatisfied valuation at each layer, or an accumulated metric like cost. This operation allows for characterization of attributes for a system comprising of a combination of various providers within and across layers. Note that , , and  each illustrates how to combine the per-layer instantiation to characterize sample attributes for the cloud based IT system.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 5","b":["500","500","500","500"]},"In the Physical Layer , the inventory of IT including IT active inventory equipment  and IT standby inventory equipment  draw a total amount of IT power (e.g., kW) . The energy drawn by the data center facility to deliver this power to the IT is captured by the PUE (Power Utilization Efficiency) ratio . Multiplying the total IT power  with the PUE  results in the total power required by the IT (e.g., kW) . Multiplying by the carbon\/kW ratio  given by the power generation gives the carbon footprint of the IT .","Within , the Virtual Layer  carves this total IT power amongst various virtual systems. A ratio of the amount of virtual systems  carved from the physical system results in the power per virtual unit . For example, if the physical system supports 100 virtual machines, then dividing the carbon footprint of the system by 100 results in the power per virtual machine.","The Appliance Layer  adds middleware  that forms an appliance  from virtual resources. For example, if middleware uses just 1 virtual machine then the resulting appliance draws the same power as the virtual machine. Instead, if the appliance requires 3 virtual machines, the resulting power is that of 3 virtual machines. The carbon footprint of the appliance is that of 1 and 3 virtual machines, respectively.","Within , the Instantiation Layer  implements an instance of the appliance within a private or public data center. This instance includes network connections that also draw power (e.g., routers) and have a resulting carbon footprint. Also it captures the current state of the appliance for those that scale. For example, that at this current time, the appliance is the large appliance (e.g., that with 3 virtual machines instead of 1 in the Appliance Layer ). Adding the network contribution  to the instance of the appliance results in the carbon of the instance .","The output from the Instantiation Layer  is the carbon use for a given instance. The Control Layer  specifies the sourcing of appliances executed by the Instantiation Layer  to form a platform . The specification of the Control Layer  may vary with time to meet demand and changing conditions (e.g., scaling policy) . The sum of the carbon of the appliances results in that of the platform  over a period of time. For example, an appliance of type A and B form the platform over month 1, and then 2 appliances of type A form the platform over month 2. The resulting carbon of the platform is that of type A for 3 months, and type B for 1 month.","Within , the Transformation Layer  divides the resulting carbon footprint of the platform with the capacity (e.g., specified in terms of users, jobs, or storage)  resulting in an output of carbon\/user . For example, for a platform with a capacity of 10,000 users, its carbon footprint divided by 10,000 gives the carbon footprint of 1 user.","The Application Layer  drives the demand , e.g., 1000 users. The Application Layer  multiplies the demand  with the carbon\/user  to give the overall footprint  for a given use case.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 6","b":["600","600","600","600"]},"In the Physical Layer , the inventory of IT including IT active cluster equipment  and IT standby equipment result in a total IT availability . The deployment policy  of the Virtual Layer  results in an availability  of the virtual unit. For example, if all virtual machines share the same physical server, then the availability is that of the physical machine. Or, if the virtual machines can migrate on any one of 3 machine cluster, then as long as one of the machines is up.","Within , the Appliance Layer  adds middleware  that forms an appliance availability  from virtual resources. This middleware may add capability like load balancing or data duplication that improves the availability of the underlying virtual resources. For example, data duplication may mean that a volume of storage may be corrupted, but we can still recover from the remaining volumes. Load balancing may mean that a number of virtual machines may go down, but still function so long as a minimum number are working.","The Instantiation Layer  implements an instance of the appliance and includes network connections. Multiplying the availability of network contribution  to the instantiated appliance results in the availability of the instance . The output from the Instantiation Layer  is the availability for a given instance .","Within , the Control Layer  specifies the sourcing and scaling of appliances  executed by the Instantiation Layer  to form a platform availability . The specification of the Control Layer  may source a number of instances to meet a higher availability constraint. For example, two independent instances with 99.9% together provide 99.99% availability.","The Transformation Layer  may add preprocessing  that further enhances composite availability . For example, error correction codes mean that some fraction of data stored may be corrupted or lost while ensuring accurate recovery. Note that the Transformation Layer  outputs the composite availability  to the Application layer . It is pointed out that the Application Layer  output the application availability , which is equal to the composite availability .",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 7","b":["700","700","700","700","700"]},"At the Physical Layer , the configuration of IT equipment and facility (e.g., power and cooling) provide a composite amount of capability  (e.g., CPUs of compute , GB of storage , and Mbps network ) from the physical equipment. Within the present embodiment, the composite amount of capability  can include the combination of servers and CPUs of compute , amount of storage (e.g., GB) , and network speed (e.g., Mbps) ), but is not limited to such.","Within , the Virtual Layer 's utilization ratio  of consumed resources to physical resources determines the size and number of virtual machine (VM), storage, and network that the physical equipment can support which results in the virtual machine performance . For example, a utilization ratio  that deploys 6 virtual machines per physical server means that each VM is guaranteed at most \u2159 of the performance of 1 physical machine.","Based on the particular virtual machine size, virtual disk, and network configuration, the Appliance Layer  loads a software framework (e.g., middleware)  to create an appliance of type A with some capacity C (e.g., number of concurrent sessions, number of events processed in some time) . This capacity  is specific to the particulars of the virtual resource and the software framework.","Within , the Instantiation Layer  factors in the provider specific capacity limits  (e.g., contractual limits on the number of concurrent appliances, or the limit on the Mbps of network which limits the number of concurrent sessions) for the instance to produce provider specific performance . For example, the Instantiation Layer  connects appliance A instance with capacity 100 jobs per second, appliance B with 200 jobs per second then if appliances of type A and B are needed in serial the actual capacity is only 100 jobs per second.","Then the logic of Control Layer  combines these offered services with the demand to determine the number of appliances to connect to meet performance requirements (e.g., sourcing and scaling ), and when to make those adjustments resulting in platform performance . For example, a number of machines N can be chosen so that the probability of finishing in the total amount of work in the prescribed time window is bounded. In the case with appliance A and B as above, the Control Logic  may monitor the actual number of jobs in the system. If the system reaches a threshold of 80 jobs, the Control Logic  responds with a request for the Instantiation Layer  to add another appliance of type A so that the system capacity is 200. The aggressiveness of the threshold and the response specify the platform performance that user demand is met.","Within , the Transformation Layer  specifies the SLAs  (e.g., capacity requirement) required to tune the aggressiveness of the Control Layer  and handles the preprocessing of the data or code may result in improving capacity conditions (or composite performance) . Ultimately the actions of the Transformation Layer  specify the capacity available with the performance guaranteed by the Control Layer 's platform. For example, higher quality performance means that the Control Layer  needs to make sure there is always enough spare capacity. The threshold where new capacity is requested will be low so that the appliance instances in use are all lightly utilized. This capacity in terms of per user or per job estimates of application performance by dividing with an assumed number of users\/jobs\/events.","The user demand  at the Application Layer  drives overall performance . If resources run out due to incredibly high demand, then performance is low.","It is noted that the final characterization of attributes for a particular cloud-based implementation enables the comparison of these attributes against a variety of implementations.",{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 8","b":["800","816","814","816","812","816","810","816","808","816","806","816","804","816","802"]},"Within the cloud reference model , the availability  for the physical layer  is 99.9 percent and the availability  for the virtual layer  is 99.9%. The availability  for the appliance layer  is 99.99% and the availability  for the instantiation layer  is 99.99%. Furthermore, the availability  for the control layer  is 99.999% and the availability  for the transformation layer  is 99.999%. The availability  for the application layer  is 99.999%.","Within , the associated cost  for the physical layer  is $40 per machine. In addition, the associated cost  for the virtual layer  is $40 per virtual machine. The associated cost  for the appliance layer  is $50 per appliance and the associated cost  for the instantiation layer  is $60 per instance. Additionally, the associated cost  for the control layer  is $120 per platform that supports a fixed SLA. The associated cost  for the transformation layer  is $130 per user. The associated cost  for the application layer  is $260 per month assuming two users.",{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 9","b":["900","900","916","918","920","922","900","900"]},"Note that conventional \u201cas-a-Service\u201d characterization of cloud providers fails to adequately categorize the architecture components. Consider Amazon which is characterized as Infrastructure-as-a-Service (IaaS). Amazon offerings include EC2 for virtual machines, Elastic Block Storage (EBS) for block level storage, and S3 for object level storage. Often, these offerings are all grouped as IaaS. However, the interface and the required solutions to work with EC2 and EBS are very different from those for S3.","For example, users submit objects for storage on S3 without visibility into the virtual machine appliances, their configuration, or the way they scale. Amazon handles these functions and the user accepts the composite storage platform's availability and access guarantees. Conversely with EC2 and EBS, these functions are the user's responsibility: At the Appliance Layer  to determine the middleware required to create the virtual appliance and the format of the EBS volume; at the Instantiation Layer  to add the provisioning scripts to configure the deployed appliances; and then at the Control Layer  to implement the algorithms or functions to scale the number of virtual appliances. For these efforts the user controls the implementation, the configuration, and the SLAs. In fact, in one embodiment, the user can create custom S3-type functionality from EC2 and EBS.","This comparison of Amazon services demonstrates two points: First, the need to characterize offerings and not service providers; and second, how the Cloud Reference Model  can expand the functionality of conventional \u201cas-a-Service\u201d characterization. Note that an IaaS offering can provide virtualized compute resources at the Virtual Layer . Then Platform-as-a-Service (PaaS) offerings provide the compute platform for execution of user-generated program. Since PaaS offerings include provider-determined specification of the virtual appliances, their instantiation, and their scaling, PaaS capability encompasses functionality at the Control Layer . And then Software-as-a-Service (SaaS) supplies programs at the Application Layer  like for Customer Relationship Management, E-mail, or SharePoint.","Within , notice that the \u201cas-a-Service\u201d offerings are vertically grouped so that the provider or vendor handles all the functionality of the layers below the offered solution (i.e., SaaS, PaaS, and IaaS solutions at the Application Layer , Control Layer , and Virtual Layer , respectively). Note that the implementation of the stack can be proprietary. As such, responsibilities of the lower layers are of no concern for the enterprise user, but the tradeoff is that the functionality cannot be customized or controlled.","It is noted that in one embodiment, mapping the \u201cas-a-Service\u201d characterization onto the layers of the Cloud Reference Model  aids in the understanding of vendor capabilities. The process identifies the interfaces into these vendor offerings, e.g., the enterprise end-user's responsibility to create scripts at the Transformation Layer  to interface with PaaS's solution starting from the Control Layer . When designing the system, the Cloud Reference Model  can be used to check that per-layer requirements are satisfied by vendor implementation.","Within , in accordance with various embodiments, a portal application is utilized to demonstrate how the Cloud Reference Model  helps evaluate what type of cloud to use for the desired amount of enterprise responsibility and control. For example, consider a wiki application that allows users to easily generate interlinked web pages by populating content. Users access and update the content via a web browser. Note that  shows the various components of various \u201cas-a-Service\u201d implementations in accordance with various embodiments of the disclosure.","In one embodiment, the Application Layer  adds the wiki program on top of web application architecture. For example, Google Sites offers a wiki application as part of Google Apps' SaaS offering. Google defines style sheets for users to create their own websites and manages user access and actions. If the functionality of Google Sites is sufficient, then nothing else needs to be done. Otherwise, further functionality can be implemented below the Application Layer .","Within , the user can provide the application program, e.g., a Java program. Then Transformation Layer  takes the application program and handles the platform-specific interfaces, e.g., Google App Engine-specific interfaces to load the program. It is noted that changing to a data center implementation can involve re-factoring those interfaces.","When using Google App Engines, the offered SLAs and the implementation can be acceptable. If these are unacceptable, then additional functionality can be implemented. Implementation of logic at the Control Layer  can determine the best possible sourcing in terms of the quantity and placement of the appliances and allows realization of custom attributes. For example, support 99.99% availability and a maximum of 500 ms round-trip-time.","Within , next the Instantiation Layer  can provision and manage the deployment specified by the Control Layer . Functions at the Instantiation Layer  can determine what configuration settings are applied. Additionally, the Instantiation Layer  can use APIs and scripts for each data center or cloud provider to set-up and configure the requested virtual machines. The Instantiation Layer  can also consolidate the monitoring across service providers that is passed back to the Control Layer . For these actions, service automation products in one embodiment may be leveraged like Rightscale or Appistry. It is pointed out that changes in these actions (e.g., update Amazon credentials) can result in a change in the script used at the Instantiation Layer  without impacting the Cloud Control Layer .","Then implementation at the Appliance Layer  can allow the user to control the middleware. For example in an embodiment, versions and details of the software framework itself like how load balancing occurs exist at the Appliance Layer . Furthermore, the Appliance Layer  can work with the Virtual Layer  to choose an underlying operating system (OS) and sizing of the virtual machine on top of which the appliance sits.","Within , it is pointed out that responsibility within the Virtual Layer  can enable control over how virtual resources are created. For example, the Virtual Layer  can enforce physical separation of certain virtual machines from other workloads. Oversight within the Physical Layer  can enforce physical guarantees around equipment capability (e.g., graphics processing units (CPUs), energy use, personnel, and location).","The Cloud Reference Model  can identify the necessary components for cloud architecture. The layered design of the Cloud Reference Model  can fit solutions together where each solution focuses on a subset of the overall functionality. This approach of the Cloud Reference Model  can add detail to conventional \u201cas-a-Service\u201d classification. The Cloud Reference Model  can point to key work-to-be-done. In addition, the logic of the Cloud Reference Model  can point to gaps that hinder enterprise-class cloud computing. Filling these gaps can involve joint effort between vendors, industry groups, and academia, but is not limited to such.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 10","FIG. 10"],"b":["1000","1004","1000","1000","1000"]},"In one embodiment, the user interface  can be implemented to include multiple tabs. For example within the present embodiment, the user interface  can include a \u201cSpecify Traffic\u201d tab , a \u201cSpecify Deployment\u201d tab , a \u201cView Traffic SLA Status\u201d tab , a \u201cView Deployment SLA Status\u201d tab , and an \u201cUpdate Settings\u201d tab , but is not limited such. Note that the \u201cSpecify Traffic\u201d tab  is shown selected within the user interface . In addition, the example contents of the \u201cSpecify Traffic\u201d tab  can include, but is not limited to, a \u201cTrafficSLAs\u201d sub-tab  and a \u201cTraffic-Application\u201d sub-tab . It is noted that the \u201cTrafficSLAs\u201d sub-tab  is shown selected and its example contents can include, but is not limited to, a \u201cNew TrafficSLA\u201d activation button , an \u201cUpdate TrafficSLA\u201d activation button , and a \u201cDelete TrafficSLA\u201d activation button .","Within , when a user selects the \u201cUpdate TrafficSLA\u201d activation button , the \u201cChoose TrafficSLA to update\u201d selection area  can be displayed thereby enabling the user to select the application he or she desires to update and\/or view. For example, within the present embodiment of the \u201cChoose TrafficSLA to update\u201d selection area , the user can select to update the service level agreements of \u201cAll\u201d the applications, the \u201cWeb\u201d application, or a \u201cDB\u201d application. Once an application is selected within the \u201cChoose TrafficSLA to update\u201d selection area , one or more service level agreements can be displayed which can enable the user to update the one or more displayed service level agreements. For example within the present embodiment, when the Web application is selected within the \u201cChoose TrafficSLA to update\u201d selection area  as indicated by the highlighting of the word \u201cWeb\u201d, one or more service level agreement fields  can be displayed. Specifically, the one or more service level agreement fields  can include, but are not limited to, a label, a cost, an availability, a latency, a capacity, and\/or a blocking probability associated with the selected application or applications of the \u201cChoose TrafficSLA to update\u201d selection area .","Note that the user interface  may not include all of the elements illustrated by . Additionally, the user interface  can be implemented to include one or more elements not illustrated by . It is pointed out that the user interface  of  can be utilized or implemented in any manner similar to that described herein, but is not limited to such.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 11","b":["1002","1024","1000","1024"]},"Within the present embodiment, the example contents of the Traffic-Application sub-tab  can include, but is not limited to, a role identifier drop-down menu selector , a \u201cCurrent Application List\u201d display area , an \u201cAvailable Application List\u201d display area , an \u201cAdd\u201d activation button , and a \u201cRemove\u201d activation button . It is pointed out that the role identifier drop-down menu selector  can be utilized by a user to assign or associate one or more selected roles to a particular application. For instance within the present embodiment, the Web application listed within the Current Application List display area  currently has a web role as indicated by the role identifier drop-down menu selector .","Within , it is pointed out that if the Add activation button  is selected by a user while the LoadBalance application is highlighted as shown within the Available Application List display area , the LoadBalance application will be associated or assigned a web role while its label (or name or identifier) will be added to the Current Application List display area . Note that the Remove activation button  can be utilized by a user to remove and disassociate an application identifier from the Current Application List display area . For example in an embodiment, after a user selects or highlights the identifier of an application listed within the Current Application List display area , the Remove activation button  is displayed active and usable while the Add activation button  is displayed inactive and unusable. Thereafter, the user can select the Remove activation button  resulting in the highlighted application identifier being removed from the Current Application List display area . In addition, the removed application is disassociated or unassigned from its web role.",{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 12","b":["1004","1000","1004"]},"Within the present embodiment, the example contents of the Specify Deployment tab  can include, but is not limited to, a \u201cGet Optimal Deployment\u201d activation button , an \u201cUpdate Deployment\u201d activation button , an \u201cOptimize All Deployment\u201d activation button , a \u201cPrimary Deployment\u201d information fields , a \u201cBackup Deployment\u201d information fields , and a \u201cChoose Deployment to update\u201d selection area . It is pointed out that when the Update Deployment activation button  is selected by a user, the user interface  displays the \u201cChoose Deployment to update\u201d selection area  along with the Primary Deployment information fields  and Backup Deployment information fields  that correspond to the highlighted application within the \u201cChoose Deployment to update\u201d selection area .","Within , note that the \u201cChoose Deployment to update\u201d selection area  can be utilized by a user to select a particular application to update and\/or view its corresponding primary deployment and backup deployment. For example within the present embodiment, the Web application label is highlighted or selected within the \u201cChoose Deployment to update\u201d selection area  thereby resulting in the display of its corresponding Primary Deployment information fields  and Backup Deployment information fields . It is noted that the grayed out provider fields shown within the Primary Deployment information fields  and the Backup Deployment information fields  have been filtered out by the control layer .","It is pointed out that if the Optimize All Deployment activation button  is selected by a user, the user interface  applies the optimum (e.g., minimum cost) deployment that satisfies the service level agreements. Additionally, if the Get Optimal Deployment activation button  is selected by a user, the user interface  determines and highlights the application listed within the \u201cChoose Deployment to update\u201d selection area  that currently has the optimal (e.g., minimum cost) deployment.",{"@attributes":{"id":"p-0142","num":"0141"},"figref":"FIG. 13","b":["1006","1000","1006"]},"Within the present embodiment, the example contents of the \u201cView Traffic SLA Status\u201d tab  can include, but is not limited to, an application identifier drop-down menu selector , a Cost graph , a Capacity graph , a Latency graph , and an Availability graph . It is noted that the application identifier drop-down menu selector  can be utilized by a user to select which composite application service level agreements to view. For example within the present embodiment, the \u201cWeb\u201d application is currently selected within the application identifier drop-down menu selector . As such, the Cost graph , Capacity graph , Latency graph , and Availability graph  display the composite service level agreements for the Web application.","Specifically within , it is pointed out that the black bar shown within each of the Cost graph , Capacity graph , Latency graph , and Availability graph  represents the user defined application service level agreement value while the gray bar within each graph represents the actual or measured service level agreements based on deployed cloud components. More specifically, the X-axis of the Cost graph  represents the United States Dollars (USD) per hour (hr) service level agreement while the X-axis of the Capacity graph  represents the capacity for user sessions service level agreement. Furthermore, the X-axis of the Latency graph  represents the latency in milliseconds (ms) service level agreement while the X-axis of the Availability graph  represents the percent of time the application is available (e.g., 99.999% of the time) service level agreement.",{"@attributes":{"id":"p-0145","num":"0144"},"figref":"FIG. 14","b":["1008","1000","1008"]},"Within the present embodiment, the example contents of the \u201cView Deployment SLA Status\u201d tab  can include, but is not limited to, an application identifier drop-down menu selector , a service level agreement attribute drop-down menu selector , a first role graph , and a second role graph . Note that the application identifier drop-down menu selector  can be utilized by a user to select which application service level agreements to view. In addition, the service level agreement attribute drop-down menu selector  can be utilized by the user to select which service level agreement attribute to view of the selected application.","Within the present embodiment of , it is pointed out that the \u201cAll\u201d application is currently selected with the application identifier drop-down menu selector . Furthermore, the service level agreement attribute drop-down menu selector  is currently selected to the \u201cCost\u201d attribute. Given the above user selections within the present embodiment, the user interface  displays the \u201cDB\u201d role graph  and the \u201cWeb\u201d role graph  which illustrate that the cost of the \u201cAll\u201d application is split between the \u201cDB\u201d role and the \u201cWeb\u201d role.",{"@attributes":{"id":"p-0148","num":"0147"},"figref":"FIG. 15","b":["1010","1000","1010"]},"Specifically within the present embodiment, the contents of the \u201cUpdate Settings\u201d tab  includes, but is not limited to, a \u201cProviders\u201d sub-tab , an \u201cApplication\u201d sub-tab , and a \u201cReset Simulation\u201d sub-tab . It is noted that the \u201cProviders\u201d sub-tab  is shown selected thereby enabling a user to update and view one or more settings associated with one or more cloud providers. The example contents of the \u201cProviders\u201d sub-tab  can include, but is not limited to, a \u201cClear Provider\u201d activation button , an \u201cUpdate Provider\u201d activation button , a \u201cChoose Provider to update\u201d selection area , and Cloud Provider information fields .","Within , it is pointed out that when the \u201cUpdate Provider\u201d activation button  is selected by a user, the user interface  can display the \u201cChoose Provider to update\u201d selection area  along with one or more Cloud Provider information fields  that correspond to the highlighted or selected provider within the \u201cChoose Provider to update\u201d selection area . In one embodiment, the Cloud Provider information fields  can include, but are not limited to, a provider label field, a provider cost field, a provider availability field, a provider latency field, and a provider capacity field. It is noted that the metrics of a provider shown within the Cloud Provider information fields  can be obtained either via estimated values from actual measurements of the provider or from published (or known) values, but is not limited to such.",{"@attributes":{"id":"p-0151","num":"0150"},"figref":"FIG. 16","b":["1010","1512","1000","1512"]},"Within the present embodiment, the example contents of the \u201cApplication\u201d sub-tab  can include, but is not limited to, a \u201cNew Application\u201d activation button , an \u201cUpdate Application\u201d activation button , and a \u201cDelete Application\u201d activation button . Note that when a user selects the \u201cUpdate Application\u201d activation button , a \u201cChoose Application to update\u201d selection area  can be displayed thereby enabling the user to select the application settings he or she desires to update and\/or view. For example, within the present embodiment of the \u201cChoose Application to update\u201d selection area , the user can to update the settings of the \u201cWeb\u201d application, the \u201cDB\u201d application, a \u201cBatch\u201d application, or a \u201cLoadBalance\u201d application. Once an application is selected within the \u201cChoose Application to update\u201d selection area , one or more application provider capacity fields  can be displayed thereby enabling the user to view and\/or update one or more of them. It is noted that the capacity of a provider may be updated utilizing either estimated values from actual measurements of the provider or from published (or known) values, but is not limited to such.","Specifically within the present embodiment of , when the \u201cWeb\u201d application is selected within the \u201cChoose Application to update\u201d selection area  as indicated by the highlighting of the word \u201cWeb\u201d, one or more provider capacity fields  corresponding to the \u201cWeb\u201d application can be displayed by the user interface . For example in one embodiment, the \u201cWeb\u201d application has a capacity of 500 sessions for the \u201camazon_ec2_east\u201d provider, a capacity of 500 sessions for the \u201camazon_ec2_wast\u201d provider, a capacity of 200 sessions for the \u201cdata_center1\u201d provider, and a capacity of 200 sessions for the \u201cdata_center2\u201d provider. It is pointed out that the grayed out provider fields shown within the provider capacity fields  have been filtered out by the control layer .","Note that the user interface  may not include all of the elements illustrated by . Moreover, the user interface  can be implemented to include one or more elements not illustrated by . It is pointed out that the user interface  of  can be utilized or implemented in any manner similar to that described herein, but is not limited to such.",{"@attributes":{"id":"p-0155","num":"0154"},"figref":["FIG. 17","FIG. 17","FIG. 17"],"b":["1700","100","1700","1700","1700","1700","1700","1700","1700"]},"At operation  of , given an attribute, method  can identify how the attribute applies to each layer of a cloud reference model (e.g., ). It is noted that operation  can be implemented in a wide variety of ways. For example in one embodiment, the attribute at operation  can be defined as, but is not limited to, security, cost, availability, carbon footprint, performance. Note that operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation , the per-layer functionality of the cloud reference model can be identified as it impacts the given attribute. It is pointed out that operation  can be implemented in a wide variety of ways. For example in an embodiment, the per-layer functionality at operation  can include, but is not limited to, one or more IT capabilities. It is noted that operation  can be implemented in any manner similar to that described herein, but is not limited to such.","At operation  of , relationships can be traced across the layers of the cloud reference model to characterize the cumulative impact of the combined system as it evolves across the layered stack. Note that operation  can be implemented in a wide variety of ways. For example, operation  can be implemented in any manner similar to that described herein, but is not limited to such.",{"@attributes":{"id":"p-0159","num":"0158"},"figref":["FIG. 18","FIG. 18","FIG. 18"],"b":["1800","1800","1800","1800","1800","1800","1800","1800"]},"Computer system  can include an address\/data bus  for communicating information, one or more central processors  coupled with bus  for processing information and instructions. Central processor unit(s)  may be a microprocessor or any other type of processor. The computer  can also include data storage features such as computer usable volatile memory , e.g., random access memory (RAM), static RAM, dynamic RAM, etc., coupled with bus  for storing information and instructions for central processor(s) , computer usable non-volatile memory , e.g., read only memory (ROM), programmable ROM, flash memory, erasable programmable read only memory (EPROM), electrically erasable programmable read only memory (EEPROM), etc., coupled with bus  for storing static information and instructions for processor(s) .","System  of  can also include one or more signal generating and receiving devices  coupled with bus  for enabling system  to interface with other electronic devices. The communication interface(s)  of the present embodiment may include wired and\/or wireless communication technologies. For example in one embodiment, the communication interface  is a serial communication port, but could also alternatively be any of a number of well known communication standards and protocols, e.g., a Universal Serial Bus (USB), an Ethernet adapter, a FireWire (IEEE 1394) interface, a parallel port, a small computer system interface (SCSI) bus interface, an infrared (IR) communication port, a Bluetooth wireless communication adapter, a broadband connection, and the like. In an embodiment, a cable or digital subscriber line (DSL) connection may be employed. In such a case the communication interface(s)  may include a cable modem or a DSL modem.","Optionally, computer system  can include an alphanumeric input device  including alphanumeric and function keys coupled to the bus  for communicating information and command selections to the central processor(s) . The computer  can also include an optional cursor control or cursor directing device  coupled to the bus  for communicating user input information and command selections to the processor(s) . The cursor directing device  can be implemented using a number of well known devices such as, but not limited to, a mouse, a track ball, a track pad, an optical tracking device, a touch screen, etc. Alternatively, it is appreciated that a cursor can be directed and\/or activated via input from the alphanumeric input device  using special keys and key sequence commands. The present embodiment is also well suited to directing a cursor by other means such as, for example, voice commands.","Within , the system  can also include an optional computer usable mass data storage device  such as a magnetic or optical disk and disk drive (e.g., hard drive or floppy diskette) coupled with bus  for storing information and instructions. The system  can include an optional display device  coupled to bus  for displaying video and\/or graphics. Note that the optional display device  may be implemented with different technologies. For example, the optional display device  may be implemented with, but is not limited to, a cathode ray tube (CRT), flat panel liquid crystal display (LCD), field emission display (FED), plasma display, light emitting diode (LED) display, or any other display device suitable for displaying video and\/or graphic images and alphanumeric characters recognizable to a user.","Note that the volatile memory  may store a cloud management system or module  in accordance with various embodiments of the disclosure. The cloud management system or module  may include instructions to cause the system  to operate or function in any manner similar to that described herein, but not limited to such. It is pointed out that in various embodiments, the cloud management system or module  (or one or more of its components) may be stored by the volatile memory , or the non-volatile memory , or the mass data storage device , or any combination thereof. In various embodiments, the cloud management system or module  can be an implementation of the cloud management system or module  of  or the cloud management system or module  of , but is not limited to such.","Within , it is noted that the components associated with system  described above may be resident to and associated with one physical computing device. However, one or more of the components associated with system  may be physically distributed to other locations and be communicatively coupled together (e.g., via one or more networks).","Note that the system  may not include all of the elements illustrated by . Furthermore, the system  can be implemented to include one or more elements not illustrated by . It is pointed out that the system  can be utilized or implemented in any manner similar to that described herein, but is not limited to such.","The foregoing descriptions of various specific embodiments in accordance with the disclosure have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the disclosure to the precise forms disclosed, and many modifications and variations are possible in light of the above teaching."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Within the accompanying drawings, various embodiments in accordance with the disclosure are illustrated by way of example and not by way of limitation. It is noted that like reference numerals denote similar elements throughout the drawings.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
