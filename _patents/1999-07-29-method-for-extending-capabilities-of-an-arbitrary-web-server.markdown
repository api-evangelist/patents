---
title: Method for extending capabilities of an arbitrary web server
abstract: A method for extending the capabilities of an arbitrary web server operating in a client-server environment (e.g., the Internet). When a client makes a request to the web server, the request may include an address for a code module needed to service the request. If the code module is not available at the web server, the web server uses the address to request the code module from another location. The code module is then served to the web server and installed. The web server then responds to the original client request using the installed code module. In an alternative embodiment, the code module is uploaded to the target server from the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06954777&OS=06954777&RS=06954777
owner: International Business Machines Corporation
number: 06954777
owner_city: Armonk
owner_country: US
publication_date: 19990729
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","This invention relates generally to information retrieval in a computer network. More particularly, the invention relates to a method and computer program product for extending the capabilities of an arbitrary web server in the network.","2. Description of the Related Art","The World Wide Web is the Internet's multimedia information retrieval system. In the Web environment, client machines effect transactions to Web servers using the Hypertext Transfer Protocol (HTTP), which is a known application protocol providing users access to files (e.g., text, graphics, images, sound, video, etc.) using a standard page description language known as Hypertext Markup Language (HTML). HTML provides basic document formatting and allows the developer to specify \u201clinks\u201d to other servers and files. In the Internet paradigm, a network path to a server is identified by a so-called Uniform Resource Locator (URL) having a special syntax for defining a network connection. Use of an HTML-compatible browser (e.g., Netscape Navigator or Microsoft Internet Explorer) at a client machine involves specification of a link via the URL. In response, the client makes a request to the server identified in the link and, in return, receives in return a document or other object formatted according to HTML. A collection of documents supported on a Web server is sometimes referred to as a Web site.","Recently, the computer industry has sought to add computer processing and communications capabilities to devices other than what would normally be considered a traditional computer. Such devices are quite varied and include, for example, personal digital assistants (PDAs), business organizers (e.g., IBM\u00ae WorkPad\u00ae, the 3Com\u00ae PalmPilot\u00ae, and the like), smartphones, cellular phones, desktop screen phones, in-vehicle devices, vending machines, kiosks, vehicle traffic lights, parking meters, computer peripherals (such as printers, fax machines, and the like), other handheld devices, and the like. For convenience, these devices, as a class, are sometimes referred to as \u201cpervasive computing\u201d clients as they are devices that are designed to be connected to servers in a computer network and used for computing purposes regardless of their location.","Arbitrary web servers in a computer network, however, often cannot interoperate with pervasive computing clients. In particular, a given client may require a specific action be taken for successful delivery or display of given content, and such action may not be recognized by the web server that receives the client request. Indeed, in many cases, the web server may not even have the capability of recognizing the client device that initiates the request.","Thus, there is a need in the art to enable an arbitrary web server in a computer network to respond to a given client request even if the server does not recognize the client or otherwise have the capability of responding to the request. The present invention solves this problem.","The present invention is a method for extending the capabilities of an arbitrary web server operating in a client-server environment (e.g., the Internet). According to one embodiment of the invention, when a client makes a request to the web server, the request may include an address for a code module needed to service the request. If the code module is not available at the web server, e.g., because the module is not supported or is unavailable, the web server uses the address to request the code module from another location. The code module is then served to the web server and installed. The web server then responds to the original client request using the installed code module.","The inventive technique enables the web server to add functionality on an as-needed basis. In this way, new capabilities are added to the server without the need for software to be manually updated and installed at the web server platform, and without the server necessarily having to fully understand the exact behavior required to service the client request.","In accordance with a preferred embodiment, when a client makes a request to a target server for a piece of content, the request preferably includes one or more request headers having the unique identifier(s) for the module(s) required by the target server to process the request. The URL(s) from which the module(s) can be downloaded are preferably also included. If the target server has the module(s), the target server applies them sequentially to the content and delivers the resulting data back to the client. If, however, the target server does not possess one or more of the module(s) required, the target server uses the URL(s) provided by the client to contact one or more other servers as needed that publish that specific modules that the target server lacks. The other servers, sometimes referred to as \u201cpublishing\u201d servers, then responds with module(s) required. The target server installs the module(s) in an accessible location, uses the module(s) as necessary to process the data, and returns the requested information back to the client.","Preferably, code modules conform to a specific transformation application programming interface (API) so that application developers may write code modules that perform given functions. Any code module that conforms to the transformation API will then be useful in extending the capabilities of the web server irrespective of whether the server fully understands the behavior of the module.","If desired, a code module may be signed, e.g., with a digital key, for verification purposes when the module is served from a given publication server. The target server then first verifies the authenticity of the code module prior to installing and running the module on the local platform. This prevents misuse of the code module deployment scheme.","In an illustrative example, the client is a pervasive computing client that has a proprietary image display format. When the client makes a request for given content, the target server may or may not be capable of serving that content for display in the proper format. If it does not, the target server retrieves a plug-in code module from a publishing server, installs the module, and then uses the module to process the content into the desired format. The resulting data is then served back to the requesting client and is displayed at the client in the appropriate proprietary format.","In an alternate embodiment, the code module is uploaded from the client itself as opposed to being served from a publishing server.","The foregoing has outlined some of the more pertinent objects and features of the present invention. These objects should be construed to be merely illustrative of some of the more prominent features and applications of the invention. Many other beneficial results can be attained by applying the disclosed invention in a different manner or modifying the invention as will be described. Accordingly, other objects and a fuller understanding of the invention may be had by referring to the following Detailed Description of the Preferred Embodiment.","A representative system in which the present invention is implemented is illustrated in . A plurality of Internet client machines  are connectable to a computer network Internet Service Provider (ISP)  via a network such as a dialup telephone network. As is well known, the dialup telephone network usually has a given, limited number of connections \u2013. ISP  interfaces the client machines  to the remainder of the network , which includes a plurality of web content server machines . Network  typically includes other servers (not shown) for control of domain name resolution, routing and other control functions. A client machine typically includes a suite of known Internet tools, including a Web browser, to access the servers of the network and thus obtain certain services. These services include one-to-one messaging (e-mail), one-to-many messaging (bulletin board), on-line chat, file transfer and browsing. Various known Internet protocols are used for these services. Thus, for example, browsing is effected using the Hypertext Transfer Protocol (HTTP), which provides users access to multimedia files using Hypertext Markup Language (HTML). The collection of servers that use HTTP comprise the World Wide Web, which is the Internet's multimedia information retrieval system.","A given client machine and the server may communicate over the public Internet, an intranet, or any other computer network. If desired, given communications may take place over a secure connection. Thus, for example, a client may communication with the server using a network security protocol, such as Netscape's Secure Socket Layer (SSL) protocol.","A representative client is a personal computer, notebook computer, Internet appliance or pervasive computing device (e.g., a PDA or palm computer) that is x86-, PowerPC\u00ae- or RISC-based. The client includes an operating system such as Microsoft Windows, Microsoft Windows CE or PalmOS. As noted above, the client includes a suite of Internet tools including a Web browser, such as Netscape Navigator or Microsoft Internet Explorer, that has a Java Virtual Machine (JVM) and support for application plug-ins or helper applications.","A representative pervasive client is x86-, PowerPC\u00ae or RISC-based, that includes a realtime operating system such as WindRiver VXWorks\u2122, QSSL QNXNeutrino\u2122, or Microsoft Windows CE, and includes a graphics viewer such as a Web browser. An illustrative pervasive computer client may render documents in a markup language such as the Handheld Markup Language (HDML). In addition, a given pervasive computing client may use a proprietary image display format. Thus, before an image may be displayed on the device, the image content (e.g., a .gif, .jpeg, .png, or the like file) supported on a given web server may need to be converted to the proprietary format. According to the present invention, a code module may be used for this purpose as will be seen.","A representative web server is an IBM Netfinity server comprising a RISC-based processor , a UNIX-based operating system  and a web server program . OS  and web server program  are supported in system memory  (e.g., RAM). The server may include an application programming interface  (API) that provides extensions to enable application developers to extend and\/or customize the core functionality thereof through software programs including plug-ins, CGI programs, servlets, and the like.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["30","30","32","34","36","36","30","35","36","40","35"],"i":"a\u2013n"},"According to the present invention, a \u201ccode module\u201d comprises a set of instructions (and perhaps associated data) that provide at least one logical function or operation to the server that receives that module.","One or more publishing servers are provided throughout the computer network to host the code modules. In the preferred embodiment, code modules are written to a given transformation API so that application developers can write modules that perform given functions at any arbitrary server. As will be described below, in an alternative embodiment, a given code module may be supported on a client that makes a request for service to the target server. Thus, if necessary or desirable, a given client machine may upload a code module to the target server for use by one of client response routines \u2013. While not meant to be limiting, a given code module may be written in Java or in a native code format (e.g., C, C++, or the like).",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["50","52","54","56","58","60","61","60","62","62"]},"At step , a test is made to determine whether the code module has been returned from the publishing server. If not, the routine cycles. When a response is received from the publishing server, the client response routine then continues at step  to test whether the retrieved code module is to be authenticated. If the outcome of the test at step  is positive, the code module is authenticated at step . The routine then continues at step , which step is also reached by a negative outcome of the test at step . At step , the code module is installed at the target server. The code module is then executed at step . The results of the code module execution are then returned at step . Control then returns to step  to complete the processing.","Thus, in accordance with a preferred embodiment of the invention, the server extension program spawns an instance of the client response routine whenever a given client request having a code module identifier (and associated URL) is received at the target server. If the code module is not then available at the target server, the client response routine issues a request for the module from an appropriate publishing server. Upon receipt of the code module, the module is installed and executed. Thus, the target server's functionality is extended on an as-needed basis to facilitate providing the response (from the target server) to the originating client.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["80","82","84","86","88","90","91","90","92","92"]},"At step , a test is made to determine whether the code module has been uploaded from the client machine. If not, the routine cycles. When a response is received from the client machine, the client response routine then continues at step  to test whether the retrieved code module is to be authenticated. If the outcome of the test at step  is positive, the code module is authenticated at step . The routine then continues at step , which step is also reached by a negative outcome of the test at step . At step , the code module is installed at the target server. The code module is then executed at step . The results of the code module execution are then returned at step . Control then returns to step  to complete the processing.","As can be seen, the code module preferably is not served with the original client request. This is desirable because the requesting client may not know (when it issues the initial client request) whether the target server in fact already supports the code module. If the code module does not need to be uploaded, network resources are conserved. If bandwidth is not a significant constraint, however, the code module may be uploaded to the target server without first evaluating whether or not the target server already supports the module. The process steps of  are then adjusted accordingly.","In an alternate embodiment, given code modules are registered at a given server in an off-line registration process. This is desirable when new devices are brought into the network, since it is unlikely that an existing server may have seen the device previously. In addition, a registration process is useful where code modules are continuously updated, improved or enhanced. For example, when a given code module is upgraded to a new version, it may be desirable for that module to be registered with a given server that already has the earlier version.","In both embodiments, the requesting client preferably identifies the code module (by its identifier) and, optionally, its location in the computer network (i.e. via the URL). In a preferred embodiment, that functionality is provided by the routine illustrated in the flowchart of . This routine may be implemented in any convenient fashion on the client, e.g., a browser plug-in, a Java applet, a Javascript, an ActiveX control, code implemented within the browser itself, or by a standalone program. The routine begins at step  by determining whether a given client request is to be generated and issued to a target server. If not, the routine cycles. If a client request is to be generated, the routine continues at step  to test whether the requested resource requires processing by a code module. If not, the routine terminates. If, however, the requested resource requires processing by a code module, the routine continues at step  to identify the code module. At step , a code module identifier and the code module URL are inserted into the client request header. This completes the processing.","One of ordinary skill in the art will appreciate that the code module deployment scheme described above may be used for malicious purposes. Thus, in a preferred embodiment, the code modules are provided to the target server in a secure manner.  illustrates a code module security routine that may be used for this purpose. The code module security routine executes on a given publishing server. In a preferred embodiment, the publishing server and a given target server (via the security routine ) secure code modules using a public key cryptosystem, such as PGP. As is well-known, a public key cryptosystem enables a pair of parties, each of whom have a public key and a private key \u201cpair\u201d, to send and receive messages in a secure fashion. In particular, the sender can verify that only the recipient (and not some third party) gets the message, and the recipient can verify that the sender was the only party who could have sent the message.","The routine begins at step  when the publishing server receives a request from the target server for a given code module. At step , the publishing server's applies its private key to the code module. At step , the publishing server applies the target server's public key to the result of step . The resulting data is then sent to the target server at step . At step , the target server applies its private key to the received data. Thereafter, at step , the target server decrypts the result by applying the publishing server's public key to obtain the code module in the clear. The code module may then be installed and executed in the target server native operating environment.","The above-described encryption scheme is not limiting. Any convenient technique may be used in the alternative. Thus, for example, the publishing server may simply sign the module with a private key and serve the signed module to the target server. The target server would then use a public key associated with the publishing server's private key to verify authenticity of the code module prior to installing and running the module. Of course, if the publishing and target servers communicate over a secure connection (e.g., SSL or HTTPS), the separate encryption steps are not required. Another approach would be to merely perform a checksum operation on the code module for authentication purposes. Moreover, if desired, the code modules may be served without any additional security.","Although not required, a target server preferably caches or permanently stores code modules for reuse in servicing other client requests. Periodically, code modules may be flushed from the server's memory or permanent storage. Thus, for example, a given code module may be deleted from memory if it has not been used within a given timeout period. This operation ensures that the server's memory or permanent storage do not get filled up with code modules that are only used once or infrequently.","The present invention provides numerous advantages. Foremost, the invention enables an arbitrary web server to perform functions or processing that are not part of the server's native tool set. Using the present invention, a web server may respond to a given client request irrespective of whether the server recognizes the client. In this way, the server need not be configured initially to process requests from all types of devices. The inventive technique is especially useful for interfacing pervasive computing devices to arbitrary web servers as such devices may not be easily recognized by a conventional web server. In addition, because code modules are preferably written to conform to a given API, application may write code modules that perform given functions. Any code module that conforms to the transformation API will then be useful in extending the capabilities of the web server irrespective of whether the server fully understands the behavior of the module.","The transformation API is typically platform-dependent. A representative API, however, may be defined and implemented with Java bean architecture using a Java Application Server such as IBM WebSphere. The Java bean is a convenient embodiment of an API as it enables a process to discover properties and then return such information to the application server.","In an illustrative example of the present invention, the client is a pervasive device having a proprietary image display format. When the pervasive client makes a request for given content, it is assumed that the target server is not capable of serving that content for display in the proper format. According to the invention, the target server retrieves a plug-in code module from a publishing server, installs the module, and then uses the module to process the content into the desired format. The resulting data is then served back to the pervasive client and is displayed in the appropriate proprietary format. The above example, however, is merely representative.","As noted above, the inventive mechanism is preferably implemented in or as an adjunct to a target web server. Although not meant to be limiting, the above-described functionality is preferably implemented as standalone native code or, alternatively, as a Java servlet or application. As noted above, code modules may be written in Java or in the server's native code. Generalizing, the above-described functionality is implemented in software executable in a processor, namely, as a set of instructions (program code) in a code module resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network.","In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps.","Further, as used herein, a Web \u201cclient\u201d should be broadly construed to mean any computer or component thereof directly or indirectly connected or connectable in any known or later-developed manner to a computer network, such as the Internet. The term \u201cWeb server\u201d should also be broadly construed to mean a computer, computer platform, an adjunct to a computer or platform, or any component thereof. Of course, a \u201cclient\u201d should be broadly construed to mean one who requests or gets the file, and \u201cserver\u201d is the entity which downloads the file.","Having thus described our invention, what we claim as new and desire to secure by Letters Patent is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and the advantages thereof, reference should be made to the following Detailed Description taken in connection with the accompanying drawings in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
