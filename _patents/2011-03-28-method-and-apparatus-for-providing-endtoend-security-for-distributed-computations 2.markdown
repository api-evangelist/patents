---
title: Method and apparatus for providing end-to-end security for distributed computations
abstract: An approach is provided for providing end-to-end security in multi-level distributed computations. A distributed computation security platform determines one or more signatures associated with one or more computation closures of at least one functional flow. The distributed computation security platform also processes and/or facilitates a processing of the one or more signatures to generate at least one supersignature. The distributed computation security platform further determines to associate the at least one supersignature with the at least one functional flow.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09553728&OS=09553728&RS=09553728
owner: Nokia Technologies Oy
number: 09553728
owner_city: Espoo
owner_country: FI
publication_date: 20110328
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SOME EXAMPLE EMBODIMENTS","DESCRIPTION OF SOME EMBODIMENTS"],"p":["This application claims the benefit of the earlier filing date under 35 U.S.C. \u00a7119(e) of U.S. Provisional Application Ser. No. 61\/446,725 filed Feb. 25, 2011, entitled \u201cMethod and Apparatus for Providing End-to-End Security for Distributed Computations,\u201d the entirety of which is incorporated herein by reference.","Mobile devices with various methods of connectivity are now for many people becoming the primary gateway to the internet and also a major storage point for personal information. This is in addition to the normal range of personal computers and furthermore sensor devices plus internet based providers. Combining these devices together and lately the applications and the information stored by those applications is a major challenge of interoperability. This can be achieved through numerous, individual and personal information spaces in which persons, groups of persons, etc. can place, share, interact and manipulate (or program devices to automatically perform the planning, interaction and manipulation of) webs of information with their own locally agreed semantics without necessarily conforming to an unobtainable, global whole.","Furthermore, in addition to information, the information spaces may be combined with webs of shared and interactive computations or computation spaces so that the devices having connectivity to the computation spaces can have the information in the information space manipulated within the computation space environment and the results delivered to the device, rather than the whole process being performed locally in the device. It is noted that such computation spaces may consist of connectivity between devices, from devices to network infrastructure, to distributed information spaces so that computations can be executed where enough computational elements are available. These combined information spaces and computation spaces often referred to as computation clouds, are extensions of the \u2018Giant Global Graph\u2019 in which one can apply semantics and reasoning at a local level.","In one example, clouds are working spaces respectively embedded with distributed information and computation infrastructures spanned around computers, information appliances, processing devices and sensors that allow people to work efficiently through access to information and computations from computers or other devices. An information space or a computation space can be rendered by the computation devices physically presented as heterogeneous networks (wired and wireless). On the other hand, different levels of proactive computational elements may be available to the device in various other components of various architectural levels (e.g. device level, infrastructure level, etc.), wherein different distributed components may have different capabilities and support different processes. In various example circumstances, to enhance the information processing power of a device and reduce the processing cost, one might consider minimizing or at least significantly improving exchange of data, information and computations among the distributed components within a computational architecture by providing multi-level distributed computations, such that the data can be migrated to the closest possible computation level with minimized or improved cost.","However, despite the fact that information and computation presented by the respective levels of computation architecture can be distributed with different granularity, still there are challenges in certain example implementations to achieve scalable high context information processing within such heterogeneous environments. For example, in various implementations, due to distributed nature of the architecture, (e.g., devices, infrastructures, and clouds), data, information, and computation elements (e.g., computation closures) are being exchanged among distributed devices within heterogeneous network environments wherein information with various levels of granularity and various structures is provided by and transmitted among various independent sources. In such environments, achieving the end-to-end security of exchanged information and computation closures, development time and runtime authentication and contextual validation is an important issue.","Therefore, there is a need for an approach for providing end-to-end security in multi-level distributed computations.","According to one embodiment, a method comprises determining one or more signatures associated with one or more computation closures of at least one functional flow. The method also comprises processing and\/or facilitating a processing of the one or more signatures to generate at least one supersignature. The method further comprises determining to associate the at least one supersignature with the at least one functional flow.","According to another embodiment, an apparatus comprises at least one processor, and at least one memory including computer program code, the at least one memory and the computer program code configured to, with the at least one processor, cause, at least in part, the apparatus to determine one or more signatures associated with one or more computation closures of at least one functional flow. The apparatus is also caused to process and\/or facilitate a processing of the one or more signatures to generate at least one supersignature. The apparatus is further caused to determine to associate the at least one supersignature with the at least one functional flow.","According to another embodiment, a computer-readable storage medium carries one or more sequences of one or more instructions which, when executed by one or more processors, cause, at least in part, an apparatus to determine one or more signatures associated with one or more computation closures of at least one functional flow. The apparatus is also caused to process and\/or facilitate a processing of the one or more signatures to generate at least one supersignature. The apparatus is further caused to determine to associate the at least one supersignature with the at least one functional flow.","According to another embodiment, an apparatus comprises means for determining one or more signatures associated with one or more computation closures of at least one functional flow. The apparatus also comprises means for processing and\/or facilitating a processing of the one or more signatures to generate at least one supersignature. The apparatus further comprises means for determining to associate the at least one supersignature with the at least one functional flow.","In addition, for various example embodiments of the invention, the following is applicable: a method comprising facilitating a processing of and\/or processing (1) data and\/or (2) information and\/or (3) at least one signal, the (1) data and\/or (2) information and\/or (3) at least one signal based, at least in part, on (or derived at least in part from) any one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","For various example embodiments of the invention, the following is also applicable: a method comprising facilitating access to at least one interface configured to allow access to at least one service, the at least one service configured to perform any one or any combination of network or service provider methods (or processes) disclosed in this application.","For various example embodiments of the invention, the following is also applicable: a method comprising facilitating creating and\/or facilitating modifying (1) at least one device user interface element and\/or (2) at least one device user interface functionality, the (1) at least one device user interface element and\/or (2) at least one device user interface functionality based, at least in part, on data and\/or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention, and\/or at least one signal resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","For various example embodiments of the invention, the following is also applicable: a method comprising creating and\/or modifying (1) at least one device user interface element and\/or (2) at least one device user interface functionality, the (1) at least one device user interface element and\/or (2) at least one device user interface functionality based at least in part on data and\/or information resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention, and\/or at least one signal resulting from one or any combination of methods (or processes) disclosed in this application as relevant to any embodiment of the invention.","In various example embodiments, the methods (or processes) can be accomplished on the service provider side or on the mobile device side or in any shared way between service provider and mobile device with actions being performed on both sides.","For various example embodiments, the following is applicable: An apparatus comprising means for performing the method of any of originally filed claims -, -, and -.","Still other aspects, features, and advantages of the invention are readily apparent from the following detailed description, simply by illustrating a number of particular embodiments and implementations, including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments, and its several details can be modified in various obvious respects, all without departing from the spirit and scope of the invention. Accordingly, the drawings and description are to be regarded as illustrative in nature, and not as restrictive.","Examples of a method, apparatus, and computer program for providing end-to-end security in multi-level distributed computations are disclosed. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent, however, to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.","As used herein, the term \u201ccomputation closure\u201d identifies a particular computation procedure together with relations and communications among various processes including passing arguments, sharing process results, selecting results provided from computation of alternative inputs, flow of data and process results, etc. The computation closures (e.g., a granular reflective set of instructions, data, and\/or related execution context or state) provide the capability of slicing of computations for processes and transmitting the computation slices between devices, infrastructures and information sources.","As used herein, the term \u201ccloud\u201d refers to an aggregated set of information and computation closures from different sources. This multi-sourcing is very flexible since it accounts and relies on the observation that the same piece of information or computation can come from different sources. In one embodiment, information and computations within the cloud are represented using Semantic Web standards such as Resource Description Framework (RDF), RDF Schema (RDFS), OWL (Web Ontology Language), FOAF (Friend of a Friend ontology), rule sets in RuleML (Rule Markup Language), etc. Furthermore, as used herein, RDF refers to a family of World Wide Web Consortium (W3C) specifications originally designed as a metadata data model. It has come to be used as a general method for conceptual description or modeling of information and computations that is implemented in web resources; using a variety of syntax formats. Although various embodiments are described with respect to clouds, it is contemplated that the approach described herein may be used with other structures and conceptual description methods used to create distributed models of information and computations.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1"},"The basic concept of cloud computing technology provides access to distributed computations for various devices within the scope of the cloud, in such a way that the distributed nature of the computations is hidden from users and it appears to a user as if all the computations are performed on the same device. The cloud computing also enables a user to have control over computation distribution by transferring computations between devices that the user has access to. For example, a user may want to transfer computations among work devices, home devices, and portable devices, other private and public devices, etc. Current technologies enable a user of a mobile device to manipulate contexts such as data and information via the elements of a user interface of their user equipment. However, distribution of computations and processes related to or acting on the data and information within the cloud is typically controlled by the system. In other words, a cloud in general does not provide a user (e.g., an owner of a collection of information distributed over the information space) with the ability to control distribution of related computations and processes of, for instance, applications acting on the information. For example, a contact management application that processes contact information distributed within one or more clouds generally executes on a single device (e.g., with all processes and computations of the application also executing on the same device) to operate on the distributed information. In some cases (e.g., when computations are complex, the data set is large, etc.), providing a means to also distribute the related computations in addition to the information is advantageous.","This goal is achieved by introduction of the capability to construct, distribute, and aggregate computations as well as their related data. More specifically, to enable a user of a cloud (e.g., a mobile device user, an application developer, etc.) who connects to the cloud via one or more devices, to distribute computations among the one or more user devices or other devices with access to the cloud, each computation is deconstructed to its basic or primitive processes or computation closures. Once a computation is divided into its primitive computation closures, the processes within or represented by each closure may be executed in a distributed fashion and the processing results can be collected and aggregated into the result of the execution of the initial overall computation.","In one embodiment, a computational architecture consists of a plurality of architectural levels, including a device level, and infrastructure level, and a cloud computing level. A device from the device level has connectivity to the cloud computing level via one or more infrastructure levels, wherein each infrastructure level may consist of layers and components such as backbones, routers, base stations, etc. Typically, the computation closures associated with a process related to a device from device level are defined, constructed, and executed within the cloud computing level which may have various levels of distribution as well. However, the components of the infrastructure levels may be equipped with various resources (e.g., processing environments, storage spaces, etc.) that can be utilized for the execution of computation closures associated with a process. Since the infrastructure level functions as an interface between the device level and the cloud computing level, if the computation closures can be executed in the infrastructure level, there will be no need for the computation closures to be migrated to the cloud computing level that may very well require excessive use of resources. Therefore, execution of computation closures associated with a process related to a device at the infrastructure level can provide services to device users in a more efficient manner. However, components of a multi-level architectural environment composed of device level, infrastructure level and cloud level each may differ in configuration, communication capability, policies applied in terms of ownership, privacy and security of distributed computations, etc.","In one embodiment, a multi-level computation architecture includes mechanism for secure dispersing, processing and assembling of computations around a number of physical or logical components by associating signatures to the computations. The closures may be signed and those signatures utilized for providing secure means for communication between devices, devices to infrastructures, or infrastructures to clouds. Signatures are entities that are generated by means of isomorphic transformations thus represent domain independent fragments that could be interpreted in some cases as at least meaningful information sets. Furthermore, distribution, access and execution of computation closures among components and levels of a multi-level architectural environment may require compatibility among policies and rules of security imposed by various components and levels of architecture.","In one embodiment, different components of each architectural level support different types of closures with different levels and\/or types of security defined, enforced, or a combination thereof. Each component (e.g. infrastructure component, node) may have a number of previously created secure entities, closures, links, and distribution paths for the distribution and execution of the computation closures such as connectors between closures, multiple branches, interaction points, rules, etc., that can significantly affect the efficiency of distribution and execution of computations and end-to-end security of the computations in multi-level architectures.","In one embodiment, the computations can be transferred and\/or expanded from one component to another or from an architectural level to another (e.g. from infrastructure to cloud). Components and levels of multi-level computation architecture may be equipped with a signature mechanism in order to sign computations and verify signatures by other components to ensure computation security. For example, computations signed by unknown or unapproved entities may be regarded as illegitimate. However, various signature mechanisms may be based on different rules, verification methods, encoding and decoding mechanisms, etc.","In other embodiments, a single sign on (SSO) mechanism may be adopted so that components and levels of the multi-level computation architectures, computation closures, functional flows, etc. can be identified by unique signatures throughout the distributed environment of the multi-level computation architecture. In this embodiment, a computation closure or a set of computation closures may be associated with a signature, wherein the signature is known and is verifiable by multiple components and levels of architecture throughout the environment of multi-level computation structure.","In another embodiment, complex or compound computational closures (also referred to as superclosures) that may represent various computations and are formed based on combination of one or more primitive computation closures, may be associated with complex or compound signatures (also referred to as supersignatures) formed based on combination of one or more signatures of their primitive computation closures (also referred to as root elements). In this embodiment, for example, failure or malfunctioning of a superclosure may be caused by the failure or malfunctioning of its supersignature which in turn may be caused by failure or malfunctioning of one or more of its root element signatures. However, in order to find the defected root elements the supersignature may have to be decomposed wherein the decomposition can be a very complex and resource intensive procedure.","Therefore, there is a challenge to achieve computation security within a heterogeneous environment of multi-level architectures, wherein computations with various levels of granularity and various structures are provided, signed and transmitted among various independent sources.","To address this problem, a system  of  introduces the capability to provide end-to-end security in multi-level distributed computations. A computational architecture environment consists of different levels of proactive computational elements available for various levels of the computational architecture such as device level, infrastructure level, and cloud computing level. Since these computational elements provide various levels of functionality for each of the levels of the architecture, providing different levels of distribution of the computational closures within the computational architecture enables the execution of the computational closures after the least required level of distribution. However, a very important functionality for execution of computational closures is to detect, identify, and determine computation security and to ensure security of computational closures, by creating compatibility among various types and levels of existing security measures at each part of the multi-level computational architecture and to determine secure paths for the distribution of computations.","In one embodiment, a cloud may include a superset of closure elements (e.g. closure primitives) and a superset (also referred to as a lattice) of signature root elements while the infrastructure or device level components may have subsets of, and therefore the cloud may be capable of supporting computational closures and their security more effectively compared to the infrastructure or device levels.","In one embodiment, device setup at various architectural levels such as security settings, quality of service (QOS) settings, class of service (COS) settings, priority settings etc., may affect direction and method of computational closure distribution, as different setups may lead to different situations and different available secure distribution paths and requirement. Additionally, computation closures' security can be indirectly affected by other features of architectural levels such as privacy settings, security enforcement strategies, etc. On the other hand, ensuring secure distribution between different architectural levels and components can be achieved by different levels of computation distribution.","In one embodiment, certain amount of computation functionality can be transferred from device level to infrastructure level or further to cloud level depending on the available capabilities and requirements at each level. For example, for computations associated with a public device that is used commonly by multiple users, a strict security measure may not be necessary, while private and confidential computations may require more advanced security measures (e.g. signatures).","In another embodiment, when an infrastructure node has a limited security support capability, the computations may be transferred to a next nearest node with higher security capabilities where computation can continue, and redistributed to the cloud level if there is no infrastructure node with sufficient security support capability. It is noted that various factors such as different device setups, limitations, configurations, any changes that occur in the setups, limitations and configurations during the runtime, etc. may change the direction of computation closure distribution, as security support capabilities may change in accordance with the changing factors.","In one embodiment, operations can be performed to determine and compare security of computation closure processes between devices and infrastructures and between infrastructures and clouds. It can also be determined where it is more cost effective to transfer computation closures to, what the acceptable range of security for one or a group of computation closures is (taking into account other capabilities relevant for the computation such as privacy levels and rules, energy issues like battery vs. main power plug connection, etc). Furthermore, each signature can be associated with a security level so that proper signatures can be assigned to computations based on their security requirements.","In one embodiment, in a multi-level computation architecture associated with a single sign on mechanism, functional flows or groups of distributing computational closures may be signed by unique supersignatures composed of the signatures of their constituting closure primitives and the supersignatures are connected to the a single sign on mechanism.","As shown in , the system  comprises a set  of user equipments (UEs) -having connectivity to distributed computation security platform  via a communication network . By way of example, the communication network  of system  includes one or more networks such as a data network (not shown), a wireless network (not shown), a telephony network (not shown), or any combination thereof. It is contemplated that the data network may be any local area network (LAN), metropolitan area network (MAN), wide area network (WAN), a public data network (e.g., the Internet), short range wireless network, or any other suitable packet-switched network, such as a commercially owned, proprietary packet-switched network, e.g., a proprietary cable or fiber-optic network, and the like, or any combination thereof. In addition, the wireless network may be, for example, a cellular network and may employ various technologies including enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., worldwide interoperability for microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), wireless LAN (WLAN), Bluetooth\u00ae, Internet Protocol (IP) data casting, satellite, mobile ad-hoc network (MANET), and the like, or any combination thereof.","The UEs -are any type of mobile terminal, fixed terminal, or portable terminal including a mobile handset, station, unit, device, multimedia computer, multimedia tablet, Internet node, communicator, desktop computer, laptop computer, notebook computer, netbook computer, tablet computer, personal communication system (PCS) device, personal navigation device, personal digital assistants (PDAs), audio\/video player, digital camera\/camcorder, positioning device, television receiver, radio broadcast receiver, electronic book device, game device, or any combination thereof, including the accessories and peripherals of these devices, or any combination thereof. It is also contemplated that the UE  can support any type of interface to the user (such as \u201cwearable\u201d circuitry, etc.).","In one embodiment, the UEs -are respectively equipped with one or more user interfaces (UI) -. Each UI -may consist of several UI elements (not shown) at any time, depending on the service that is being used. UI elements may be icons representing user contexts such as information (e.g., music information, contact information, video information, etc.), functions (e.g., setup, search, etc.) and\/or processes (e.g., download, play, edit, save, etc.). These contexts may require certain sets of media dependent computational closures, which may affect the service, for example the bit error rate, etc. Additionally, each UI element may be bound to a context\/process by granular distribution. In one embodiment, granular distribution enables processes to be implicitly or explicitly migrated between devices, computation clouds, and other infrastructure. Additionally, a UE -may be a mobile device with embedded Radio Frequency (RF) tag system of device to device connections such that computational operations and content can be locally transmitted among devices.","In one embodiment, process distribution can be initiated for example by means of unicast (e.g., to just another device) or multicast (e.g., to multiple other devices). For example one UE  may communicate with many infrastructures (or many components of many infrastructures), while many nodes of infrastructures may communicate with multiple clouds. Additionally, process distribution may be triggered via gesture recognition, wherein the user preselects a particular set of UI elements and makes a gesture to simulate \u201cpouring\u201d the selected UE elements from one device to another. In other embodiments, process distribution may be initiated automatically without direct user involvement and based on default setup by the manufacturer of the UE -, previous setup by the user of the UE, default setup in an application activated on or associated with a UE -, or a combination thereof.","As seen in , a user of UEs -may own, use, or otherwise have access to various pieces of information and computations distributed over one or more computation clouds -in information stores -and computation stores -where each of the one or more computation spaces -include multiple sets of one or more computation closures. In one embodiment, the user may be an application developer that uses a UE -to connect to the infrastructure and the cloud not only for accessing the services provided for end users but also for activities such as developing, distributing, processing, and aggregating various computations.","In one embodiment, the communication network  consists of one or more infrastructures -wherein each infrastructure is a designed communication system including multiple components -. The components -include backbones, routers, switches, wireless access points, access methods, protocols, etc. used for communication within the communication network  or between communication network  and other networks.","In one embodiment, the distributed computation security platform  controls the distribution of computations associated with UEs -to other components or levels of the computational architecture including the infrastructure level -within the environment of the communication network , and the cloud level -, based on signatures and security enforcement associated with different architectural levels and security requirements of computations.","In one embodiment, security verification of computation distribution may be initiated by the user, or based on a background activity for example by triggering a sequence of computation closures which in turn support distribution process. Prior to computation distribution the capabilities, including the security capabilities of components performing the computations, are evaluated. If capabilities of an architectural level are not satisfactory or changes in capabilities are found, the evaluation process will continue until proper capabilities become available. The security capabilities may be found in the same or other levels of the computational architecture and the computation closure execution will be performed at the level where available capabilities are found.","In another embodiment, network components -may provide different levels of functionality. For example, some components -may provide static computational closures while others may provide dynamic computational closures. As used herein, static computational closures are closures with predetermined configurations, which in return may require a predefined level of security for execution, while dynamic computational closures are closures that may function differently based on dynamic factors such as time, traffic load, type or amount of available security, etc. In one embodiment, a dynamic computation closure may adjust itself based on the dynamic factors by modifying parameters such as the level of available security. For example, a dynamic computation closure may downgrade itself in order to be handled with a lower level of security. In other embodiments, critical computation closures may be assigned lower and upper acceptable security thresholds wherein available security within that range is acceptable.","In one embodiment the level and type of available security at a component of the infrastructure -may or may not be aligned with the required security by computation closures of UE -through a one to one mapping. This means that the component may need to locate (or request) other components with higher levels of security capabilities from current or next layer or level of the computational architecture and forward the computations to located components. The component may also have the capability to adjust its security settings and adapt its security capability to the computation requirements. In other words, if the security availability between a process and its processing environment is not directly aligned, the processing environment may expand its capabilities (for dynamic closures) or locate other components (for static closures) or a combination thereof. In one embodiment, if neither the direct alignment succeeds nor alternate environment is found, the setup may be aligned with lower security requirements. The requirements may be lowered, for example by dropping part of the computational closures, substituting complex computations with more primitive computations that may produce less accurate, but accurate enough for user's needs, results. Additionally, the satisfaction threshold may be lowered (with service provider and user's agreement) so that a lower level of computation security can be considered as satisfactory.","In one embodiment, a user of UEs -may select certain dynamic computation flows to be used as default computation flow under certain conditions, for example in determined times, for specifically determined computation security levels, etc. In this embodiment, the distributed computation security platform  may associate specific levels of priority to the selected computation flows such that, if available, the selected computation flows have priority over other available computations. The selected computation flows and the assigned priorities can determine levels of satisfaction threshold for the user of UEs -","In one embodiment, the computational closures available in multiple levels of device level -, infrastructure level -, and cloud level -and their associated signatures are either aligned, meaning that all the computational closures and signatures are available in every level, or a super-set of all computational closures and signatures is available at cloud level while each lower level has access to a sub-set of the computational closures and signatures from its higher level, for example infrastructure level computational closures and signatures may be a sub-set of the closures and signatures of cloud level and device level closures and signatures a sub-set of the infrastructure level closures and signatures. Additionally, levels of the computational architecture may have sets of functionally equivalent computational closures in the sense that they perform the same process and produce the same results with different levels of accuracy in return for different levels of security requirement. For example, a set of computations providing a map including some restricted areas with high security requirements, may provide the map and exclude the information associated with the restricted area, if a processing environment with sufficient security capability cannot be found.","In one embodiment, a supersignature and its associated superclosures may be decomposed and matched (signed) into the computation flow (flow of computation distribution). In other embodiments, the components and levels of architecture can compile, execute and submit their supersignatures and superclosures to the cloud so that cloud can maintain a lattice of all the available signatures, supersignatures, closures and superclosures throughout the multi-level computation environment. The lattice of the cloud is a superset of all the signatures, supersignatures, closures and superclosures that other levels of the architecture such as UEs -(components of device level) and infrastructures -have access to. The levels of a computational architecture executing at least one of the one or more computation closures, at least one functional flow, or a combination thereof, have access to root elements associated with those closures and functional flows.","In one embodiment, no differentiation is distinguished between authentication of computations in development time and run time of the end-to-end computation. The distributed computation security platform  provides early validation (at component level before the distribution) and contextual validation, wherein closure capabilities (e.g. energy consumption, security elements, privacy rules, etc.) can be represented as data. Additionally, the distributed computation security platform  may determine if certain root elements have been changed so that all signatures using that element can be isolated and marked as invalid.","By way of example, the UE , the distributed computation security platform  communicate with each other and other components of the communication network  using well known, new or still developing protocols. In this context, a protocol includes a set of rules defining how the network nodes within the communication network  interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node, from generating and receiving physical signals of various types, to selecting a link for transferring those signals, to the format of information indicated by those signals, to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection (OSI) Reference Model.","Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises (1) header information associated with a particular protocol, and (2) payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols, the packet includes (3) trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet, its destination, the length of the payload, and other properties used by the protocol. Often, the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different, higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks, such as the Internet, typically include a physical (layer 1) header, a data-link (layer 2) header, an internetwork (layer 3) header and a transport (layer 4) header, and various application (layer 5, layer 6 and layer 7) headers as defined by the OSI Reference Model.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 2","b":["103","103","201","203","205","207","209","211","213","215"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 2","FIG. 3","FIG. 3"],"b":["300","107","103","107","107","107","103"]},"In one embodiment, signature module  of the distributed computation security platform  determines one or more signatures associated with one or more computation closures of at least one functional flow (step  of ). A functional flow may include one or more computation closures together with one or more distribution paths that represent the distribution of computation closures associated with respective levels of a computational architecture , wherein the respective levels include, at least in part, a device level -, a infrastructure level -, and a cloud computation level -(signature determination shown in step  of ). The computation closures may be signed automatically or manually at development time, at run-time or a combination thereof.","In one embodiment, one or more of the computation closures of a functional flow may have not been previously signed. In this case, per step  of , the signature module  determines if any unsigned closures exist in the functional flow. If unsigned closures exist, per step  the key determination module  determines one or more keys based, at least in part, on (a) run time information; (b) an execution context of the at least one functional flow, the one or more computation closures, or a combination thereof; or (c) a combination thereof. It is noted that any data or information associated with one or more computation closures, one or more functional flows or a combination thereof may be used for key determination by the key determination module . For example, security parameters and\/or security capabilities of run-time environment, functional flows, computational closures, existing signatures (for signed computation closures), etc. can be used as basis for key determination by the key determination module .","In one embodiment, the transmitting module  transmits the keys determined by the key determination module  to a lattice generator , wherein the lattice generator  retrieves and adds the keys into a matrix of keys associated with the superset or lattice of all signature root elements for a cloud -","In one embodiment, the lattice generator  may also generate links between the signatures and supersignatures with their relevant closures, superclosures and functional flows.","In one embodiment, upon determination of one or more keys by the key determination module , per step  of , the signature module  constructs one or more signatures for the unsigned computation closures based, at least in part, on the one or more keys, on one or more parameters identified by a user, or a combination thereof.","In one embodiment, the one or more signatures constructed by the signature module  are polynomials that can be induced at least from the parts, a) degree of the polynomial, the highest exponent for a term with non-zero coefficient in a polynomial expressed in canonical form, b) one or more keys (e.g. cryptographic keys) determined by key determination module , parameters and coefficients that determine the functional output of the polynomial, and c) a body (e.g. length and shape of the initial constructor of the polynomial).","In one embodiment, the supersignature generator , (per step  of ) processes and\/or facilitates a processing of the one or more signatures to generate at least one supersignature consisting of a vector of the signatures. A supersignature provides a unique signature for a functional flow based, at least in part, on the root signature elements of the computation closures included in the functional flow. Per step  of , the signature module  associates the at least one supersignatures with the at least one functional flows.","In one embodiment, the supersignature, the one or more signatures, or a combination thereof provide end-to-end security for the at least one functional flow over one or more levels of a computational architecture executing the at least one functional flow, the one or more computation closures, or combination thereof.","In one embodiment, per step  of , the transmission module  causes, at least in part, transmission of the at least one supersignature to a network component (not shown) for validation via a single sign on validation process. The network component may be located in any location having connectivity to the distributed computation security platform  via the communication network .","In one embodiment, the decomposition module  may decompose the signatures and supersignatures into their primitive signature root elements in order for the network component to verify the validity of the supersignatures. In this embodiment, verification keys for root elements can be maintained by the cloud -","As previously discussed, a single sign on (SSO) mechanism provides unique identification for components and levels of the multi-level computation architectures, computation closures, functional flows, etc. throughout the distributed environment of the multi-level computation architecture. In a single sign on environment, a computation closure or a set of computation closures may be associated with a signature, wherein the signature is known and is verifiable by multiple components and levels of architecture throughout the environment of multi-level computation structure.","In one embodiment, the transmission module , transmits the, at least one or more signatures to a lattice generator , wherein the lattice generator  processes and\/or facilitates a processing of the one or more signatures to generate at least one lattice including, at least in part, one or more root elements (shown in step  of ). The lattice may be stored in storage , the computation stores -, or a combination thereof. Subsequently, the supersignature, the one or more signatures, or a combination thereof can be recombined and\/or validated based, at least in part, on the lattice generated by the lattice generator , the one or more root elements, or a combination thereof. It is noted that the lattice includes a superset of the signatures, supersignatures, keys, root elements, etc. wherein a cloud -is given the authority to reconstruct all signatures and supersignatures from the lattice, while the UEs -, the infrastructures -and any other components of the multi-level distributed computation environment may have access to only a relevant subset of the lattice.","In one embodiment, a malfunction detector  determines at least one malfunction of the supersignature, the one or more signatures, or a combination thereof based, at least in part, on at least one other malfunction of the one or more root elements (shown in step  of ). The malfunctioning of a signature or supersignature may be detected by the network component that validates the signatures and supersignatures (as seen in step  of ) and reported to the malfunction detector .","In one embodiment, upon detection of a malfunction, the malfunction detector  may access the lattice and extract information associated with the malfunctioned signatures and supersignatures from the lattice. The malfunction detector  may transfer the extracted information to the decomposition module , wherein the decomposition module  can decompose the signatures or supersignatures into their building blocks (e.g. root elements) in order to find one or more malfunctioning root elements (shown in step  of ). As previously described, the root elements are part of a superset of the one or more root elements (subsets of the lattice) stored or mirrored at one or more levels of a computational architecture executing at least one of the one or more computation closures, the at least one functional flow, or a combination thereof.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 4","FIG. 3","FIG. 4"],"b":["101","107","107","107","107","401","107","403","401","403","401","403","103","107","107","401","403","103","201","117","117","111","111","117","117","117","401","403","401","119","119","117","405","403","119","119","117","407","117","111","111","411","413","401","107","119","119","117","111","111","107","107"],"i":["a","b","c","a ","b ","a ","b ","a","c ","a","n ","a","b","c ","a ","c ","a ","b ","d ","a ","a ","a","n ","a","a ","c ","a ","a","n ","a ","b. "]},"In one embodiment, the distributed computation security platform  may periodically receive updated information about available secure components and paths, security statuses and updated security parameters from the infrastructures and\/or clouds. Additionally, the distributed computation security platform  may periodically request updates from the infrastructures and\/or clouds about the availability status of secure components and paths.","As previously discussed, the capabilities and security availability of either point of the distribution (e.g. UE or component ) may change. For example, one or more closures may malfunction. In such cases, the distributed computation security platform  determines the change and adjusts the parameters accordingly for the decomposition module  to troubleshoot and detect cause of malfunction by decomposing the signatures, supersignature, closures, superclosures, or a combination thereof.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIGS. 5A-5B","FIG. 5A","FIG. 5A"],"b":["501","501","503","503","505","505","503","503"],"i":["a","d","a","c ","a","d"]},"In one embodiment, connectors may contain information about parameters such as security requirement and\/or capabilities, functional flows, distribution maps, links between closures and architectural levels, etc. Arrows connecting closures to connectors and connectors to next closures show the functional flow adopted based on the parameters. As seen in , the closures have been distributed from component  to component  via communication between connector and connector . The computation branch of component  includes closures -communicating via connectors and , while branches  and  communicate via connectors and . Similarly, a third branch  has been formed of closures -being executed at component  and connected by connectors and , while the branch communicates with other branches via connector ","In one embodiment, the initial branch  may be in a UE -, the second branch  in a component of the infrastructure -, and the third branch in another component of the same infrastructure, a different infrastructure, in a cloud, or a combination thereof.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 5B","FIG. 5B"],"b":["531","531","533","533","535","535","533","533","571","547","559"],"i":["a","d","a","c ","a","d "]},"In one embodiment, connectors may contain information about parameters such as capabilities including security requirements and availability, a cost function, functional flow specifications, distribution maps, links between closures and architectural levels, etc. Arrows connecting closures to connectors and connectors to next closures show the functional flow adopted based on the parameters. For example, star signs -, -, and -, represent security rules imposed on the closures and the signs -represent the security rules imposed on superclosures by the user of UEs -, default by the manufacturer of UEs -, by the infrastructures -, by the clouds -, or a combination thereof, and associated with each closure -, -, and -respectively. Additionally, blocks -, -, and -represent signatures for one or more closures, and blocks -represent supersignatures for one or more superclosures. In the example of , the signature shows the signature for closure based on the rules . In one embodiment, if signature is in accordance with rules , the signature is validated and the closure can be distributed, however if signature contradicts any rule of rules , the closure will be identified as malfunctioning by the malfunction detector .","In one embodiment, the block represents a supersignature composed of a set of signatures -and block represents combined security rules of component  of the multi-level computation architecture. In this embodiment, if the malfunction detector  detects a contradiction between the supersignature and the rules , the decomposition module  is activated (as discussed with respect to  and ) and decomposes the super signature into its root elements (e.g. -) and have the verification network component (not shown) verify the root signatures against rules . The verification may lead to find one or more malfunctioning root elements (e.g. closures -).","In one embodiment, a closure or a group of closures may lack access to security rules for the verification of their signatures. For example, in  the closure is signed with signature with no rules. In this embodiment as seen by arrow , the distributed computation component that is executing branch  bypasses closure without executing the computation . The final results from closure execution of the three branches , , and  are aggregated by result aggregator  and forwarded to the requesting device.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIGS. 6A-6B","b":["209","103","211","201"]},"In one embodiment, a developer may construct functional flows in order to implement the end-to-end single sign on mechanism. A functional flow may consist of unique supersignatures, wherein valid supersignature may constitute a single sign on process. As seen in  a signature may be a polynomial composed by induction , from components such as degree , keys  and body , etc., wherein degree of the polynomial, is the highest exponent for a term with non-zero coefficient in a polynomial expressed in canonical form, one or more keys are encryption keys that can be used for encrypting and decrypting the signatures, and body can be a selected parameter, for example, as the length and shape of the initial constructor of the polynomial.","The formula (1) below represents an exemplary polynomial signature Pof degree D, with cryptographic key K, coefficients a, a, b, b, c, and cand length 8 (number of components of Pinside the brackets in formula 1.\n\n\u2003\u2003(1)\n","In one embodiment, signature components of computational closure elements can be atomic (in the body part of the polynomial P, while the single sign on connection is made through the key part of the polynomial.","In various embodiments different signatures can be created based on the above mechanism. Furthermore, an intruder will need access to three different elements (degree, key, body) in order to be able to gain access to a signature and therefore will not be able to reconstruct elements of the root elements of the lattice if only one or two element are known.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 6B","FIG. 6B","FIG. 6B"],"b":["621","1","4","1","4","1","4","1","4","1","2","3","625","1","2","3","4","1","2","3","4","1","2","623","621","1","2","3","621","621","111","111","621","1","3","623","621"],"i":["a ","a ","a ","a","a","a","a","n","a","a ","a"]},"Lattice shows the superset of root elements of lattice , wherein the root element B is replaced by a new root element M. In this embodiment, signature S cannot be verified based on the content of lattice , because the root element B of signature S cannot be found in subset of lattice ","In one embodiment, if one or more computation closures (e.g. a closure with signature S of table ) is being executed at a device level -, the validation process may fail and the closure may be attributed as not secure. In this embodiment, the device -may request an infrastructure level -to execute the closure. Similarly, if the infrastructure cannot validate security of the closure it may request a cloud -for processing the closure. However, if neither of the levels of the architecture can obtain closure security approval the closure is eliminated from the transaction in the distributed multi-level computation environment.","In one embodiment, at the development time, a supersignature SS can be constructed based on one or more signatures S, S, and S, for example such that SS=SSS, wherein  can be considered as an operation for generating a lattice. Additionally, a supersignature SS may have components similar with the components of a signature composed from signature components based on operation . For example Degree(SS)=Degree(S)Degree(S)Degree(S), Key(SS)=Key(S)Key(S)Key(S), and Body (SS)=Body(S)Body(S)Body(S).","In one embodiment, signatures can be resynthesized, recombined and reconstructed from their components degree, key, and body. In  arrow shows the direction of forming a signature  from its components , , and . Additionally, arrow shows the reverse direction for retrieving components , , and  from signature , for example for validation purpose.","It is noted that the root elements of a lattice can be distributed in an n dimensional space (A, B, C . . . ), three dimensional space in the example of . A signature (e.g. S) is a polynomial which may be a simple trajectory in this three dimensional space. Additionally, a trajectory of S may overlap with trajectories of one or more other signatures S, S, etc.","In one embodiment, the cost of validating or invalidating one or more computation closures based on one or more signatures may be taken into account for calculation of the computation cost function.",{"@attributes":{"id":"p-0107","num":"0106"},"figref":["FIGS. 7A-7B","FIG. 7A","FIG. 7A"],"b":["117","111","107","107","117","119","707","107","107","705","705","709","119","5","707","119","3","4","117","705","705","107","1","107","2","3","4","107","107","713","713","111","715","715","713","713","717","717","117"],"i":["a ","b ","a ","a ","b ","a ","b","a ","a ","a ","b ","a ","b ","a ","b ","a ","b ","a","e ","a","b "]},"In one embodiment, the backend device may be equipped with a closure recycling and marshaling component  that monitors and manages any access to the computation closures store . In other embodiments the closure recycling and marshaling (i.e. standardization for uniform use) may be a function of the distributed computation security platform .","In one embodiment, the computation closures within environments , and the computation closures store  may be composed based on anonymous function objects and automatically created by a compiling system using methods for generating anonymous function objects such as lambda expressions.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 7B","FIG. 7A","FIG. 1","FIG. 2","FIG. 3"],"b":["713","713","713","723","107","107","723","103","1","723","749","723","749","741"]},"In another embodiment, the computation closure environment  has a developer experience module  that provides various tools for a developer for manipulating services offered by the UE . The tools may include standardized and\/or abstract data types and services allowing the developers to chain processes together across development platforms. In one embodiment, the developer experience module  provides cross platform support for abstract data types and services under the supervision of a distributed computation security platform  as discussed in . The agent Agent retrieves the computation closures required by the developer experience module  from the computation closures store  and stores the newly generated computation closures by the developer experience module  into the computation closures store  for distribution purposes per arrow .","In yet another embodiment, the computation closure environment  has a scalable computing module  that provides an abstract wrapper (i.e. monadic wrapper) for the migrating closures . This abstraction provides computation compatibility between the closures  and the UE . The abstract wrapper may provide scheduling, memory management, system calls and other services for various processes associated with the closures . These services are provided under the supervision of the distributed computation security platform  as discussed in . The agent Agent retrieves the computation closures required by the scalable computing module  from the computation closures store  and stores the newly generated computation closures by the scalable computing module  into the computation closures store  for distribution purposes per arrow . In one embodiment, the backend environment  may access the computation closures store  and exchange\/migrate one or more computer closures  between the computation closures store  and the backend computation closures store .",{"@attributes":{"id":"p-0113","num":"0112"},"figref":["FIG. 8","FIG. 4"],"b":["800","801","801","801","801","800","803","803","805","801","801","803","803","800"],"i":["a","d","a","d","a","d","a","d ","a","d "]},"In one embodiment, distribution of process  includes distribution of closures -, combinators -and the process states  as independent elements into, for instance, an infrastructure environment . The independent closures -from infrastructure environment  may be distributed into different components -where they may be executed.",{"@attributes":{"id":"p-0115","num":"0114"},"figref":["FIG. 9","FIG. 9"],"b":["107","107","903","1","2","903","905","1","2","107","907","1","909","1","913","911"],"i":["a ","a ","a"]},"It is assumed, in this example, that component of an infrastructure level (not shown) is selected by the distributed computation security platform  as a destination for closure distribution from UE , based on the availability of sufficient security. The extracted computation closure, closure_ is migrated to component following the assignment of a distribution path (similar to path  in , and is executed on component ","In one embodiment, the component receives the computation closure closure_ and extracts it from the computation closure store  using the Get command . The extracted closure_ is projected into a closure with the user device context and the object  is produced. The block  represents the reconstruction of the closure into the initial context by a component in charge of the execution. The aggregated context may then be executed in the run-time environment  of component by Agent.","In another embodiment, the UE and component may exchange places and the distribution is performed from the component to UE or both devices may be UEs. In this embodiment the decomposition and aggregation processes are similar to the above example.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":["FIG. 10","FIG. 10"],"b":["1001","107","119","117"],"i":["a ","a "]},"In one embodiment, the UE may include RDF store , which holds computation closures for processes associated with the UE . Similarly the backend device may includes a RDF store , which holds computation closures associated with processes related to device , UEs -, or any other devices having connectivity to device or cloud .","In other embodiments, the Uniform Resource Identifiers (URIs)  in UE and  in backend device may be used to identify names or resources accessible to their respective devices via the communication network . Additionally, UE and backend device may have rule sets and that include security rules imposed on device similar to rules -of . It is noted that the rule base of UE may be a subset of the rule base of the backend device , wherein the rules is a subset of a superset of rules managed by a cloud . Furthermore, the legacy codes associated with each device may be stored in legacy code memory areas and on UE and and on backend device ","In one embodiment, UE may be provided with a non-volatile memory space  as a closure store. The closure store  may include a set of closure primitives shown as geometric objects, similar to primitives of sets  or  of . Similarly, the backend device may be provided with a non-volatile memory space  as a closure store. The closure store  may also include a set of closure primitives shown as geometric objects. In one embodiment, the closure store  is a subset of closure store  determined, at least in part, based on one or more criteria such as time of access, frequency of access, a priority classification, security settings, etc. The geometric shapes of closure stores  and  have been each divided into two groups of solidly filled geometric shapes (representing signed closures) and unfilled geometric shapes (representing unsigned closures). Since non-volatile memories are costly and require extensive resources (e.g. power consumption) compared with volatile memories (such as , , , and ), the capacity of non-volatile memory on a UE -is limited. However, a backend device , serving high numbers of users, may be equipped with larger volumes of non-volatile memory spaces. Because of the limited capacity of non-volatile memory spaces on UEs -, and also because differing levels of security setup on various devices, only a subset of the closure store  is stored locally at the closure store  for local use by the UE . In order to minimize the number of times a UE  needs to retrieve one or more primitives from closure store  of device , the subset  is determined based on one or more criteria. In one embodiment, the closure store  may be determined as a set of the most frequently accessed closure primitives of closure store  by UE . In another embodiment, the closure store  may be determined as a set of the most recently accessed closure primitives of closure store  by UE . In other embodiments, various combined conditions and criteria may be used for determining subset  from set  as the content of closure store for UE . Furthermore, the closure stores  and  may be periodically synchronized. The synchronization of closure stores ensures that any changes (addition, deletion, modification, etc.) in closure primitives and in root elements of the signature lattice of closure store  are reflected in the closure store .","In one embodiment, for execution of a closure set  (a subset of closure store ) associated with a process on UE , the set  can be migrated under the supervision of the distributed computation security platform  and after verification of the security of closures and capabilities of the destination component, to the backend device which is a component of the infrastructure  (the distribution path shown as arrow ). The distributed computation security platform  may then inform the processing components of the UE , the backend device or a combination thereof (the processing components are not shown), that the security of closure primitives has been approved and the closures are ready for execution. Alternatively, the distributed computation security platform  may determine that the closures are not approved from point of view of the security and terminate their distribution and execution.","In one embodiment, any changes on the closure store  of the backend device (e.g., addition, deletion, modification, etc.) may first enter the URIs  via the communication network . The changes may then be applied from URIs  on closure store  shown by arrows -. Similarly, the closure store  is updated based on the content of the closure store  and the updates are shared with other authorized components within UE (e.g. with URIs  as shown by arrows -).","In one embodiment, the commonly accessible memory address space  is formed from the RDF stores  and  and the closure stores  and . The commonly accessible memory address space  can be accessed as a continuous memory space by each of the devices and ","The processes described herein for providing end-to-end security in multi-level distributed computations may be advantageously implemented via software, hardware, firmware or a combination of software and\/or firmware and\/or hardware. For example, the processes described herein, may be advantageously implemented via processor(s), Digital Signal Processing (DSP) chip, an Application Specific Integrated Circuit (ASIC), Field Programmable Gate Arrays (FPGAs), etc. Such exemplary hardware for performing the described functions is detailed below.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":["FIG. 11","FIG. 11"],"b":["1100","1100","1100","1100","1110","1100","1100"]},"A bus  includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors  for processing information are coupled with the bus .","A processor (or multiple processors)  performs a set of operations on information as specified by computer program code related to providing end-to-end security in multi-level distributed computations. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and\/or the computer system to perform specified functions. The code, for example, may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set (e.g., machine language). The set of operations include bringing information in from the bus  and placing information on the bus . The set of operations also typically include comparing two or more units of information, shifting positions of units of information, and combining two or more units of information, such as by addition or multiplication or logical operations like OR, exclusive OR (XOR), and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions, such as an operation code of one or more digits. A sequence of operations to be executed by the processor , such as a sequence of operation codes, constitute processor instructions, also called computer system instructions or, simply, computer instructions. Processors may be implemented as mechanical, electrical, magnetic, optical, chemical or quantum components, among others, alone or in combination.","Computer system  also includes a memory  coupled to bus . The memory , such as a random access memory (RAM) or any other dynamic storage device, stores information including processor instructions for providing end-to-end security in multi-level distributed computations. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory  is also used by the processor  to store temporary values during execution of processor instructions. The computer system  also includes a read only memory (ROM)  or any other static storage device coupled to the bus  for storing static information, including instructions, that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus  is a non-volatile (persistent) storage device , such as a magnetic disk, optical disk or flash card, for storing information, including instructions, that persists even when the computer system  is turned off or otherwise loses power.","Information, including instructions for providing end-to-end security in multi-level distributed computations, is provided to the bus  for use by the processor from an external input device , such as a keyboard containing alphanumeric keys operated by a human user, or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus , used primarily for interacting with humans, include a display device , such as a cathode ray tube (CRT), a liquid crystal display (LCD), a light emitting diode (LED) display, an organic LED (OLED) display, a plasma screen, or a printer for presenting text or images, and a pointing device , such as a mouse, a trackball, cursor direction keys, or a motion sensor, for controlling a position of a small cursor image presented on the display  and issuing commands associated with graphical elements presented on the display . In some embodiments, for example, in embodiments in which the computer system  performs all functions automatically without human input, one or more of external input device , display device  and pointing device  is omitted.","In the illustrated embodiment, special purpose hardware, such as an application specific integrated circuit (ASIC) , is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor  quickly enough for special purposes. Examples of ASICs include graphics accelerator cards for generating images for display , cryptographic boards for encrypting and decrypting messages sent over a network, speech recognition, and interfaces to special external devices, such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.","Computer system  also includes one or more instances of a communications interface  coupled to bus . Communication interface  provides a one-way or two-way communication coupling to a variety of external devices that operate with their own processors, such as printers, scanners and external disks. In general the coupling is with a network link  that is connected to a local network  to which a variety of external devices with their own processors are connected. For example, communication interface  may be a parallel port or a serial port or a universal serial bus (USB) port on a personal computer. In some embodiments, communications interface  is an integrated services digital network (ISDN) card or a digital subscriber line (DSL) card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments, a communication interface  is a cable modem that converts signals on bus  into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example, communications interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN, such as Ethernet. Wireless links may also be implemented. For wireless links, the communications interface  sends or receives or both sends and receives electrical, acoustic or electromagnetic signals, including infrared and optical signals, that carry information streams, such as digital data. For example, in wireless handheld devices, such as mobile telephones like cell phones, the communications interface  includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments, the communications interface  enables connection to the communication network  for providing end-to-end security in multi-level distributed computations to the UEs -from set .","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing information to processor , including instructions for execution. Such a medium may take many forms, including, but not limited to computer-readable storage medium (e.g., non-volatile media, volatile media), and transmission media. Non-transitory media, such as non-volatile media, include, for example, optical or magnetic disks, such as storage device . Volatile media include, for example, dynamic memory . Transmission media include, for example, twisted pair cables, coaxial cables, copper wire, fiber optic cables, and carrier waves that travel through space without wires or cables, such as acoustic waves and electromagnetic waves, including radio, optical and infrared waves. Signals include man-made transient variations in amplitude, frequency, phase, polarization or other physical properties transmitted through the transmission media. Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, CDRW, DVD, any other optical medium, punch cards, paper tape, optical mark sheets, any other physical medium with patterns of holes or other optically recognizable indicia, a RAM, a PROM, an EPROM, a FLASH-EPROM, an EEPROM, a flash memory, any other memory chip or cartridge, a carrier wave, or any other medium from which a computer can read. The term computer-readable storage medium is used herein to refer to any computer-readable medium except transmission media.","Logic encoded in one or more tangible media includes one or both of processor instructions on a computer-readable storage media and special purpose hardware, such as ASIC .","Network link  typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example, network link  may provide a connection through local network  to a host computer  or to equipment  operated by an Internet Service Provider (ISP). ISP equipment  in turn provides data communication services through the public, world-wide packet-switching communication network of networks now commonly referred to as the Internet .","A computer called a server host  connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example, server host  hosts a process that provides information representing video data for presentation at display . It is contemplated that the components of system  can be deployed in various configurations within other computer systems, e.g., host  and server .","At least some embodiments of the invention are related to the use of computer system  for implementing some or all of the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more processor instructions contained in memory . Such instructions, also called computer instructions, software and program code, may be read into memory  from another computer-readable medium such as storage device  or network link . Execution of the sequences of instructions contained in memory  causes processor  to perform one or more of the method steps described herein. In alternative embodiments, hardware, such as ASIC , may be used in place of or in combination with software to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware and software, unless otherwise explicitly stated herein.","The signals transmitted over network link  and other networks through communications interface , carry information to and from computer system . Computer system  can send and receive information, including program code, through the networks ,  among others, through network link  and communications interface . In an example using the Internet , a server host  transmits program code for a particular application, requested by a message sent from computer , through Internet , ISP equipment , local network  and communications interface . The received code may be executed by processor  as it is received, or may be stored in memory  or in storage device  or any other non-volatile storage for later execution, or both. In this manner, computer system  may obtain application program code in the form of signals on a carrier wave.","Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor  for execution. For example, instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system  receives the instructions and data on a telephone line and uses an infra-red transmitter to convert the instructions and data to a signal on an infra-red carrier wave serving as the network link . An infrared detector serving as communications interface  receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus  carries the information to memory  from which processor  retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory  may optionally be stored on storage device , either before or after execution by the processor .",{"@attributes":{"id":"p-0141","num":"0140"},"figref":["FIG. 12","FIG. 11"],"b":["1200","1200","1200","1200","1200","1200"]},"In one embodiment, the chip set or chip  includes a communication mechanism such as a bus  for passing information among the components of the chip set . A processor  has connectivity to the bus  to execute instructions and process information stored in, for example, a memory . The processor  may include one or more processing cores with each core configured to perform independently. A multi-core processor enables multiprocessing within a single physical package. Examples of a multi-core processor include two, four, eight, or greater numbers of processing cores. Alternatively or in addition, the processor  may include one or more microprocessors configured in tandem via the bus  to enable independent execution of instructions, pipelining, and multithreading. The processor  may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors (DSP) , or one or more application-specific integrated circuits (ASIC) . A DSP  typically is configured to process real-world signals (e.g., sound) in real time independently of the processor . Similarly, an ASIC  can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays (FPGA) (not shown), one or more controllers (not shown), or one or more other special-purpose computer chips.","In one embodiment, the chip set or chip  includes merely one or more processors and some software and\/or firmware supporting and\/or relating to and\/or for the one or more processors.","The processor  and accompanying components have connectivity to the memory  via the bus . The memory  includes both dynamic memory (e.g., RAM, magnetic disk, writable optical disk, etc.) and static memory (e.g., ROM, CD-ROM, etc.) for storing executable instructions that when executed perform the inventive steps described herein to provide end-to-end security in multi-level distributed computations. The memory  also stores the data associated with or generated by the execution of the inventive steps.",{"@attributes":{"id":"p-0145","num":"0144"},"figref":["FIG. 13","FIG. 1"],"b":"1301"},"Pertinent internal components of the telephone include a Main Control Unit (MCU) , a Digital Signal Processor (DSP) , and a receiver\/transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit  provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps of providing end-to-end security in multi-level distributed computations. The display  includes display circuitry configured to display at least a portion of a user interface of the mobile terminal (e.g., mobile telephone). Additionally, the display  and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry  includes a microphone  and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone  is fed to a coder\/decoder (CODEC) .","A radio section  amplifies power and converts frequency in order to communicate with a base station, which is included in a mobile communication system, via antenna . The power amplifier (PA)  and the transmitter\/modulation circuitry are operationally responsive to the MCU , with an output from the PA  coupled to the duplexer  or circulator or antenna switch, as known in the art. The PA  also couples to a battery interface and power control unit .","In use, a user of mobile terminal  speaks into the microphone  and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter (ADC) . The control unit  routes the digital signal into the DSP  for processing therein, such as speech encoding, channel encoding, encrypting, and interleaving. In one embodiment, the processed voice signals are encoded, by units not separately shown, using a cellular transmission protocol such as enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), satellite, and the like, or any combination thereof.","The encoded signals are then routed to an equalizer  for compensation of any frequency-dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream, the modulator  combines the signal with a RF signal generated in the RF interface . The modulator  generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission, an up-converter  combines the sine wave output from the modulator  with another sine wave generated by a synthesizer  to achieve the desired frequency of transmission. The signal is then sent through a PA  to increase the signal to an appropriate power level. In practical systems, the PA  acts as a variable gain amplifier whose gain is controlled by the DSP  from information received from a network base station. The signal is then filtered within the duplexer  and optionally sent to an antenna coupler  to match impedances to provide maximum power transfer. Finally, the signal is transmitted via antenna  to a local base station. An automatic gain control (AGC) can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone, any other mobile phone or a land-line connected to a Public Switched Telephone Network (PSTN), or other telephony networks.","Voice signals transmitted to the mobile terminal  are received via antenna  and immediately amplified by a low noise amplifier (LNA) . A down-converter  lowers the carrier frequency while the demodulator  strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer  and is processed by the DSP . A Digital to Analog Converter (DAC)  converts the signal and the resulting output is transmitted to the user through the speaker , all under control of a Main Control Unit (MCU)  which can be implemented as a Central Processing Unit (CPU) (not shown).","The MCU  receives various signals including input signals from the keyboard . The keyboard  and\/or the MCU  in combination with other user input components (e.g., the microphone ) comprise a user interface circuitry for managing user input. The MCU  runs a user interface software to facilitate user control of at least some functions of the mobile terminal  to providing end-to-end security in multi-level distributed computations. The MCU  also delivers a display command and a switch command to the display  and to the speech output switching controller, respectively. Further, the MCU  exchanges information with the DSP  and can access an optionally incorporated SIM card  and a memory . In addition, the MCU  executes various control functions required of the terminal. The DSP  may, depending upon the implementation, perform any of a variety of conventional digital processing functions on the voice signals. Additionally, DSP  determines the background noise level of the local environment from the signals detected by microphone  and sets the gain of microphone  to a level selected to compensate for the natural tendency of the user of the mobile terminal .","The CODEC  includes the ADC  and DAC . The memory  stores various data including call incoming tone data and is capable of storing other data including music data received via, e.g., the global Internet. The software module could reside in RAM memory, flash memory, registers, or any other form of writable storage medium known in the art. The memory device  may be, but not limited to, a single memory, CD, DVD, ROM, RAM, EEPROM, optical storage, magnetic disk storage, flash memory storage, or any other non-volatile storage medium capable of storing digital data.","An optionally incorporated SIM card  carries, for instance, important information, such as the cellular phone number, the carrier supplying service, subscription details, and security information. The SIM card  serves primarily to identify the mobile terminal  on a radio network. The card  also contains a memory for storing a personal telephone number registry, text messages, and user specific mobile terminal settings.","While the invention has been described in connection with a number of embodiments and implementations, the invention is not so limited but covers various obvious modifications and equivalent arrangements, which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims, it is contemplated that these features can be arranged in any combination and order."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 6A-6B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 7A-7B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
