---
title: Preventing a copy of a protected window
abstract: A method, system and computer readable program on a medium for masking a window or a visible part of a window during a copy screen or copy window operation which:


url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07600267&OS=07600267&RS=07600267
owner: International Business Machines Corporation
number: 07600267
owner_city: Armonk
owner_country: US
publication_date: 20050614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","PREFERRED EMBODIMENT OF THE INVENTION","INTRODUCTION","DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to computers and, more particularly, to a method and system for preventing a copy of a protected window displayed on a computer screen.","When a mail is sent to a recipient, some operations may be forbidden by the sender. In Lotus Notes (\u201cLotus Notes\u201d is a trademark of International Business Machines Corporation), the sender can decide to prevent the copy of a mail by selecting the option \u201cprevent copy\u201d in the delivery options menu. This has for effect to prevent either the forwarding of the message to another person, or the printing of the message or the copy\/paste of the message content. However in the Microsoft Windows (\u201cWindows\u201d is a trademark of Microsoft Corporation) operating system, it is always possible to capture the entire screen (Ctrl+PrintScreen) or the active window (Alt+PrintScreen) to the clipboard. This may lead to diffuse restricted information to third parties without the authorization or control of the mail originator.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1","b":["101","102"]},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2","b":["201","202"]},"The present invention is directed to a system, method and computer program as defined in independent claims for preventing copy of a protected window.","Further embodiments of the invention are provided in the appended dependent claims.","The main object of the present invention is to mask the window or a visible part of the window during the copy screen or copy window operation. The invention:\n\n","The foregoing, together with other objects, features and advantages of this invention, can be better appreciated with reference to the following description, claims and drawings.","The principle of the solution is to mask a window or the visible part of a window comprising sensitive information. So after a copy screen, all the windows comprising sensitive information (for instance, confidential information or information that must be kept secret) are masked.  shows the result of a copy of a screen () according to the present invention. The sensible information in the copy protected window () is masked () when a window or screen copy event occurs.  shows the copy of the same screen when the present invention is not implemented. Similarly,  shows the result of a copy of a copy protected active window () according to the present invention. The sensible information in the active window is masked.  shows the copy of the same active window when the present invention is not implemented.","The preferred embodiment of the present invention relies on all the Microsoft Windows operating system family. In a graphical Microsoft Windows-based application, a window is a rectangular area of the screen where the application displays output and receives input from the user. A window shares the screen with other windows, including windows from other applications. Only one window at a time can receive input from the user. The user can use the mouse, the keyboard, or other input devices to interact with this window and the application that owns it. Microsoft windows can be of different types (Overlapped, Pop-up, Child, Layered, Message Only). The various window types will not be described in detail in the present description. The most important principles to understand the problem that the present invention proposes to solve are:\n\n","The z-order of a window indicates the window's position in a stack of overlapping windows. This window stack is oriented along an imaginary axis, the z-axis, extending outward from the screen. The window at the top of the z-order overlaps all other windows. The window at the bottom of the z-order is overlapped by all other windows.","The system maintains the z-order in a single list. It adds windows to the z-order based on whether they are topmost windows, top-level windows, or child windows.\n\n","In the Microsoft Windows operating system, a hook is a mechanism by which a function can intercept events (messages, mouse actions, keystrokes) before they reach an application. The function can act on events and, in some cases, modify or discard them. Functions that receive events are called filter functions and are classified according to the type of event they intercept. For example, a filter function may want to receive all keyboard or mouse events. For Windows, the filter function must be installed\u2014that is, attached\u2014to a Windows hook (for example, to a keyboard hook). Attaching one or more filter functions to a hook is known as setting a hook. If a hook has more than one filter function attached, Windows maintains a chain of filter functions. The most recently installed function is at the beginning of the chain, and the least recently installed function is at the end.","The Microsoft Win32 (\u201cWin32\u201d is a trademark of Microsoft Corporation) application programming interface (API) provides a set of functions to access, modify:\n\n","With the Microsoft Windows Operating system, all the graphical windows are message driven. All the windows have at least one thread responsible to process messages received from the system (for instance, user mouse events). This thread is called the WindowProc and can send messages to any other windows\/applications.","Microsoft Hook","Hooks mechanisms provide powerful capabilities for Windows-based applications. These applications can use several options to set a hook:\n\n","In a preferred embodiment of the invention, two primitives are defined. The objectives of these primitives are:\n\n","The behavior of these two primitives is illustrated in .",{"@attributes":{"id":"p-0029","num":"0058"},"figref":"FIG. 5A","ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":["When the primitive \u201cSetProtected\u201d  is invoked with \u201cwindow handle\u201d as parameter, a first checking is done to verify whether the window is \u201ccopy protected\u201d or not . The parameter \u201cwindow handle\u201d identifies the window. This identifier is unique for each window.","If the window is already in the state \u201ccopy protected\u201d, nothing is done and control is returned to the calling application .","If the window is in the state \u201ccopy unprotected\u201d, another checking is done to determine whether or nor the present window is the first window to be in the state \u201ccopy protected\u201d .\n        \n        ","Finally, the control is returned to the calling application ."]}}}},{"@attributes":{"id":"p-0030","num":"0066"},"figref":"FIG. 5B","ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":{"@attributes":{"id":"ul0020-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":["When the primitive \u201cSetUnProtected\u201d  is invoked with the \u201cwindow handle\u201d as parameter, a first checking is done to verify whether or not the window is in a \u201ccopy protected\u201d state .","If the window is not in the state \u201ccopy protected\u201d, nothing is done and the control is returned to the calling application .","If the window is in the state \u201ccopy protected\u201d,\n        \n        ","Finally, the control is returned to the calling application ."]}}}},{"@attributes":{"id":"p-0031","num":"0075"},"figref":["FIG. 6","FIG. 7"],"b":["700","600"]},"With the Microsoft Windows operating system, a hook filter is a dynamic library registered at the system level. To set such hook filter, it is necessary to initialize and configure the hook mechanism using the \u201cSetWindowsHook\u201d win32 API. The same kind of action is necessary to remove such hook filter from the system using the \u201cUnhookWindowsHook\u201d win32 API. The method according to the present invention comprises the following steps, and the system includes logic to invoke the commands:\n\n","In Lotus Notes, each time a user opens a mail, an external program is called to check whether the mail is protected or not. Technically, the interception of the mail is performed using a \u201cqueryopen\u201d event of the memo form. The value of the internal Lotus Notes variable called \u201c$KeepPrivate\u201d indicates whether the document is protected or not. The way to call an external program is described in the following section.","Calling an External C Program from Lotus Notes","LotusScript (\u201cLotusScript\u201d is a trademark of International Business Machines Corporation) allows the call external C language functions. The principle is to implement external C functions inside a named library module that generally comprises several C functions. With Windows, this is a Dynamic Link Library (DLL). All Windows users have access to the libraries in the Windows application programming interface (API). The C functions that are in the DLLs\/shared libraries must be exported. Different platforms have different rules and ways for exporting them.","The Declare statement is used to call C functions comprised in an external library module from LotusScript. To avoid the declaration of external library functions in multiple scripts, \u201cDeclare Public\u201d statements are used in a module which remains loaded.","By default, LotusScript passes arguments to functions by reference. If the argument is an array, a user-defined data type variable, or an object reference variable, the arguments are passed by reference. Generally, the \u201cByVal\u201d keyword is used to pass variables by value.","What has been described is merely illustrative of the application of the principles of the present invention. Other arrangements and methods can be implemented by those skilled in the art without departing from the spirit and scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel and inventive features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objects and advantages thereof, will best be understood by reference to the following detailed description of an illustrative detailed embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0018"},"figref":"FIG. 3","b":"303"},{"@attributes":{"id":"p-0014","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0020"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0016","num":"0021"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0017","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0023"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
