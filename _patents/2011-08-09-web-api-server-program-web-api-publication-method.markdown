---
title: Web API server program, web API publication method
abstract: There is provided a technique with which a function that an OSGi bundle is equipped with may be published via a web API with ease. A web API server program according to the present invention receives as an HTTP request a class name and method name of an OSGi bundle (OSGi service) registered with an OSGi framework, calls and executes an OSGi bundle (OSGi service) that matches them, and returns a result thereof as an HTTP response (see FIG. ).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08701129&OS=08701129&RS=08701129
owner: Hitachi Solutions, Ltd.
number: 08701129
owner_city: Tokyo
owner_country: JP
publication_date: 20110809
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","CITATION LIST","Non-Patent Literature","SUMMARY OF INVENTION","Technical Problem","Solution to Problem","Advantageous Effects of Invention","DESCRIPTION OF EMBODIMENTS"],"p":["The present invention relates to a technique for publishing OSGi bundles compliant with OSGi framework specifications via web APIs.",{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},"In , an OSGi framework  is implemented as a Java application on an OS (Operating System)  that runs on a host  and a Java VM  that runs under the control of the OS . The OSGi framework  publishes a service registry , which is an interface for registering with the OSGi platform  services provided by Java modules. A Java module that is compliant with OSGi framework specifications and configured to enable registration with the OSGi framework  (to operate in the OSGi framework) is referred to as an OSGi bundle. An OSGi bundle is embodied by Java classes (a group of Java classes, or Java packages, or Java packages comprising a plurality of Java classes), and related configuration files, etc. Further, a service provided by an OSGi bundle is referred to as an OSGi service. An OSGi service is embodied by Java classes.","By way of example, let it be assumed that an OSGi bundleA  is already running in the OSGi framework . By using the OSGi framework , the Java VM  is able to add an OSGi bundleB , which cooperates with the OSGi bundleA , to an application without rebooting the OSGi bundleA .","The term cooperate as used above refers to such operations as the OSGi bundleA  calling a method that the OSGi bundleB  has, the OSGi bundleB  calling a method that the OSGi bundleA  has, sharing data between the two bundles, and so forth.","Cooperation between OSGi bundles is carried out via the service registry  provided by the OSGi framework . By way of example, to use a functionB  (method (class)) that the OSGi bundleB  is equipped with from the OSGi bundleA , the OSGi bundleB  is registered with the service registry  by issuing a predetermined command.","The functionB of the OSGi bundleB  registered with the service registry  is published on the service registry  as an OSGi ServiceB . The OSGi bundleA  is able to obtain the OSGi ServiceB  from the service registry  and execute a method corresponding to (included in) the functionB .","On the other hand, to use the function  that the OSGi bundleB  is equipped with from outside of the host , a communications interface for that purpose must be provided within the OSGi bundleB . By way of example, to use the function  from a client terminal  using HTTP (Hyper Text Transfer Protocol), a web API server unit  equipped with a web API server function must be provided within the OSGi bundleB .","The term web API server is used above to refer generally to interfaces for executing applications via a network using HTTP and obtaining the results thereof, e.g., CGI (Common Gateway Interface), as well as web server functions for that purpose. Specific implementation means are by no means limited to CGI, and any implementation method may be used so long as it accepts requests via HTTP and returns the execution results thereof as an HTTP response.",{"@attributes":{"id":"p-0011","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":"Non-Patent Literature 1: OSGi Service Platform Release 4, URL: http:\/\/www.osgi.org\/Release4\/HomePage (retrieved Aug. 9, 2010)"}},"Publishing a function that an OSGi bundle is equipped with to a network and enabling use thereof via the network require a server function, as in the web API server unit  shown in , as well as an interface for publishing the function. However, implementing such a function for each OSGi bundle whose function is to be published presents a significant burden in terms of development man-hours, etc.","The present invention has been made to address such problems, and an object thereof is to provide a technique that allows a function that an OSGi bundle is equipped with to be published with ease via a web API.","A web API server program according to the present invention receives as an HTTP request a class name and method name of an OSGi bundle registered with an OSGi framework, calls and executes the OSGi bundle that matches them, and returns the results thereof as an HTTP response.","With a web API server program according to the present invention, an OSGi bundle (OSGi service) whose function is to be published to a network may be published to the network automatically via a web API by simply registering it with an OSGi framework. Accordingly, it becomes no longer necessary to implement a web API server function in individual OSGi bundles, thus making it possible to provide an OSGi bundle as a web service without the burden of development.","<Embodiment 1>",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["100","100","10","20","20","10"]},"The host  comprises the web API bundle  in place of the OSGi bundleA  described in connection with . Other configurations are similar to that in  (bundleB does not have a web API server unit). For purposes of convenience, functionB, which is a Java object that the OSGi bundleB  has, as registered with the OSGi framework  will be referred to as ServiceB .","It is assumed that the host  comprises any components required of a host computer such as a processing unit that executes the OS , the Java VM , etc., e.g., a CPU (Central Processing Unit), etc., a storage unit for storing such programs and various OSGi bundles, e.g., an HDD (Hard Disk Drive), etc., requisite memory, network interface, and so forth.","For purposes of convenience, the OSGi framework  or programs such as the various OSGi bundles are depicted as operative actors. It is, however, noted that these programs are actually executed by the CPU that the host  comprises, and, further, the Java VM  executed by the CPU.","The web API bundle  is implemented as an OSGi bundle. The web API bundle  is not for registering (an OSGi service) with the service registry , but is instead a module for calling and executing a service registered with the service registry  upon accepting a request from the client , and for returning the results thereof. The web API bundle  operates under the control of the Java VM , and provides a web server function for awaiting an HTTP request from the client . The web API bundle  corresponds to a \u201cweb API server program\u201d in the context of the present invention.","The client  accesses a web API published by the web API bundle  using HTTP, and requests execution of a service provided by the web API bundle  (in this case, the ServiceB ). The web API bundle  processes the request, and returns the execution results to the client  as an HTTP response.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["17","17","171","172","173","17"]},"The HTTP server unit  is equipped with web server functions for accepting an HTTP request from the client  and returning an HTTP response. The OSGi service execution unit  obtains and executes an OSGi service registered with the service registry . The OSGi service list acquisition unit  obtains a list of OSGi services registered with the service registry .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["15","132"]},"An OSGi service is embodied by an instance of a Java class that forms (or is possessed by) an OSGi bundle registered with the service registry . Registering an OSGi service with the service registry  is to generate an instance of a Java class that forms (or is possessed by) an OSGi bundle, and passing a reference thereto to the service registry .","On the OSGi service user side, this Java instance that the service registry  holds is obtained with the class name as a key, and an OSGi service is used by executing a method that that class has.","In the example shown in , the Java class on the OSGi service user side (e.g., the web API bundle ) obtains ServiceB  from the service registry  with the class name \u201cServiceB\u201d as a key, and executes methods \u201cfunc\u201d, \u201cfunc\u201d, and so forth. These methods correspond to the function  provided by the OSGi bundleB .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5","b":["15","131"]},"The OSGi bundleB , which is a provider of an OSGi service, generates a ServiceB object, and register it with the service registry . The service registry  holds a reference to an instance of the ServiceB class.","The OSGi service execution unit  of the web API bundle , which is in the side using the OSGi service, obtains from the service registry  a reference to the ServiceB object using as a key the class name \u201cServiceB\u201d corresponding to the bundle of the desired OSGi service. The OSGi service execution unit  (in reality, the Java VM ) secures the obtained ServiceB object in the memory that the host  comprises (since it is for reference purpose, no memory for the object is needed. Only memory for the variable that takes the reference is needed).","The OSGi service execution unit  of the web API bundle  executes a method that the ServiceB object has, e.g., the \u201cfunc\u201d method. The HTTP server unit  returns the results thereof to the client  in the form of an HTTP response.","In the example described in connection with , it is assumed that the class name and method name of the OSGi bundle providing the OSGi service are known to the web API bundle . However, in general, class names and method names of OSGi bundles are not always known, depending on the design specifications, etc., of the web system . In addition, when implemented as in , the connection between the web API bundle  and the OSGi bundleB  becomes tight, which detracts from the advantages of providing a plug-in mechanism by the OSGi framework .","As such, considered below is a configuration where a class name and a method name of an OSGi bundle that provides an OSGi service are given from outside of the web API bundle  so that any given class name and method name may be called from the service registry .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 6","b":["20","17","1","132","2","132"]},"In issuing an HTTP request to the web API bundle , the client  includes, as request parameters and within the request, the class name providing the OSGi service, a method name thereof, and an argument of the method. If there are a plurality of arguments, a corresponding number of request parameters are provided.","Upon receiving the HTTP request, the HTTP server unit  of the web API bundle  extracts the request parameter portion and passes it to the OSGi service execution unit .","With the class name given in the request parameters as a key, the OSGi service execution unit  calls from the service registry  the OSGi service with the same class name. The OSGi service execution unit  executes the method corresponding to the method name given in the request parameters, and returns the results thereof to the client  via the HTTP server unit . Since HTTP responses are in text format, they may be written in any format. In , there is shown an example where a format similar to that of the request parameters is used. If there are a plurality of return values of the method, this fact is also written into the HTTP response.","If the client  specifies within the request parameters a class name or method name that does not exist in the service registry , or if the class and method do exist but the argument's type does not match, the OSGi service execution unit  and the HTTP server unit  issue an exception to inform the client  accordingly.","When the OSGi service execution unit  obtains a class of an OSGi service using the class name given in the request parameters, the service registry , as indicated in the upper left source code example in , passes an OSGi class of type Object, which is a generic class type. It is speculated that this is a requisite design for enabling registration of any given class type with the service registry .","However, being a generic class type, type Object is only equipped with very basic methods, and is not equipped with such methods as \u201cfunc\u201d and \u201cfunc\u201d that the ServiceB class has. As such, the web API bundle  uses the function of the java.lang.reflect package, which is capable of invoking any given method using a string held by a string variable.","By using the function of this package, any given method may be invoked while still being of type Object without having to cast an Object class type to a ServiceB class type. In addition to enabling execution of any given method of any given class, this is also advantageous in that it eliminates dependencies on specific classes.","In other words, ordinarily, upon receiving a class name of ServiceB  from the client  as a request parameter, the web API bundle  first casts type Object as obtained from the service registry  to type ServiceB before executing a method such as \u201cfund\u201d, since type Object does not have that method. However, in order to do so, the ServiceB class would have to be imported within the web API bundle  in advance, which compromises the versatility of the web API bundle .","By contrast, with the method described above, since no processing for casting to a class type received through a request parameter takes place, there is no longer any need to import that class, making it possible to maintain neutrality and versatility with respect to class types.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 7","FIG. 7"],"b":["20","17","131","17","20"]},"Upon receiving the above-mentioned HTTP request, the HTTP server unit  of the web API bundle  extracts the request parameter portion and passes it to the OSGi service execution unit .","The OSGi service list acquisition unit  obtains a class name list for the OSGi services registered with the service registry . Further, using the function of the java.lang.reflect package, it obtains such information as method names, method arguments, method return types, etc., that the classes of each OSGi service have. The OSGi service list acquisition unit  returns the obtained results to the client  via the HTTP server unit .","Functions of the OSGi service list acquisition unit  are used, for example, to check whether or not the class name and method name corresponding to the service requested by the client  exist within the service registry , and so forth.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 8","FIG. 8"],"b":"17"},"(: Step S)","As the web API bundle  starts, the HTTP server unit  awaits an HTTP request from the client . Upon arrival of an HTTP request from the client , the HTTP server unit  determines whether the request is a request to obtain a list of OSGi services, or a request to call an OSGi service. The process proceeds to step S for the former, or to step S for the latter.","(: Step S)","The OSGi service list acquisition unit  obtains a list of class names, method names, method arguments, method return types, etc., of the OSGi services registered with the service registry . The HTTP server unit  returns the obtained results to the client  as an HTTP response, and terminates the operation flow. The HTTP server unit  awaits the next HTTP request.","(: Step S)","Using the class name, method name, etc., specified in the HTTP request from the client , the OSGi service execution unit  calls the corresponding OSGi service from the service registry . The process proceeds to step S if the call is successful, or to step S if it fails.","(: Step S)","The OSGi service execution unit  executes a method of the OSGi service (class) called in step S. The process proceeds to step S if execution is successful, or to step S if it fails.","(: Step S)","The HTTP server unit  returns to the client  an HTTP response to the effect that an error has occurred, and awaits the next HTTP request. In this step, the fact that an error has occurred may be written in the content portion of the HTTP response, or an error code defined in HTTP may simply be returned. From the perspective of clearly indicating what kind of error has occurred, the former is preferable.","(: Step S)","The HTTP server unit  describes within the HTTP response the results of executing the OSGi service by the OSGi service execution unit , and returns it to the client . The HTTP server unit  awaits the next HTTP request.","<Embodiment 1: Conclusion>","As discussed above, the web API bundle  according to Embodiment 1 receives an HTTP request, which specifies a class name, method name, etc., of an OSGi service to be executed, executes the method, and returns the results thereof as an HTTP response. Thus, by registering with the service registry  OSGi services of OSGi bundles to be published to a network, they are automatically published to the network as web APIs. Consequently, there is no longer any need to individually implement an HTTP server function, etc., which enables a reduction in the burden of development.","In addition, after obtaining an OSGi service from the service registry , the web API bundle  according to Embodiment 1 directly executes the method specified by the client  without casting type Object, which is a generic class type, to an OSGi bundle class type. Thus, the web API bundle  is separated from OSGi bundle class types, and versatility is enhanced by eliminating inter-class dependency. In other words, regardless of the kinds of OSGi services are registered with the service registry , the web API bundle  is able to call and execute a specified class and method, without loading the class types thereof in advance.","In addition, the web API bundle  according to Embodiment 1 is able to provide to the client  a list of class names, method names, etc., registered with the service registry . As a result, before it issues a request, the client  is able to find out in advance the possibility of an error occurring, thereby rendering inefficient processing, such as executing a method and determining whether or not the method exists based on whether or not an error is returned, unnecessary.","<Embodiment 2>","In Embodiment 1, OSGi bundles registered with the service registry  are unconditionally published to the network. However, it may be the case that some of the OSGi bundles registered with the service registry  to use the functions of the OSGi framework  are not intended for publication to a network. As such, in Embodiment 2 of the present invention, descriptions will be provided with respect to a method for differentiating between OSGi bundles that are to be published to a network and OSGi bundles that are not. Since it is otherwise similar in configuration to Embodiment 1, the descriptions below will revolve mainly around the differences.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 9","b":["17","153"]},"Upon receiving a request to execute an OSGi service, or a request to obtain a list of OSGi services registered with the service registry , the web API bundle  obtains the member variable \u201copenapi\u201d of the OSGi bundle class obtained from the service registry . If the value of this member variable is \u201ctrue\u201d, it is determined that the method that this class has may be published as a web API. If the value of this member variable is not \u201ctrue\u201d, or if this member variable does not exist, the method that this class has is not published as a web API.","If it receives a service execution request for a class that is not published as a web API, the web API bundle  returns an error. In addition, it is assumed that, when returning to the client  a list of OSGi services registered with the service registry , classes that are not published as web APIs are excluded from that list.","When an OSGi bundle class (OSGi service class) is obtained from the service registry  by the web API bundle , as mentioned in connection with , the class type is type Object. As such, the web API bundle  uses the function of the java.lang.reflect package to access the member variable \u201copenapi\u201d. With this method, even if this member variable is specified as being private (a declaration prohibiting access from outside of the class), it is possible to access the member variable.","It is noted that, when declaring the member variable \u201copenapi\u201d as being private, since the variable cannot be referenced from other OSGi bundles, the variable is essentially non-existent to other OSGi bundles. In other words, since all OSGi bundles may be handled equally regardless of whether or not a member variable unique to Embodiment 2 is provided, for the OSGi framework , it is advantageous in that no particular consideration unique to Embodiment 2 is required.","Embodiment 2: Conclusion>","As discussed above, the web API bundle  according to Embodiment 2 checks the value of the member variable \u201copenapi\u201d of an OSGi bundle registered with the service registry  to determine whether or not this class may be published as a web API. Since this allows selective publication of just those OSGi bundles intended for publication, the risk of inadvertently publishing to a network OSGi bundles that should not be published is reduced.","Embodiment 3>","In Embodiment 3 of the present invention, additional descriptions are provided with regard to the formats of the HTTP requests and HTTP responses between the client  and the web API bundle . The configuration of the web system  is otherwise similar to those in Embodiments 1 and 2.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 10","b":"17"},"Since HTTP is a text-based protocol, it is difficult to use Java objects directly within requests and responses. Accordingly, what may be used in requests from the client  or responses to the client  are limited to Java primitive types and the type String (text), which may be expressed in text. In other words, original class types, arrays containing arbitrary class types (e.g., ArrayList), etc., cannot be used.","In addition, although the type Dictionary (a class type similar to an array and which internally stores a plurality of values) may be used within responses, using it as a request parameter is undesirable. This is due to the format of HTTP request parameters.","Since HTTP responses may be written in any given text format including line feed code, all values may be written within a response even if the execution results for a Java method are of type Dictionary and a plurality of values are contained therein.","However, since HTTP request parameters are written by pairing a parameter name and a value thereof, as in \u201carg=1\u201d, if the parameter value is of type Dictionary and a plurality of values are contained internally, it would have to be nested, as in \u201carg=(age=30&height=170)\u201d, which is troublesome. Also, in practice, it is rarely necessary to use type Dictionary for arguments. As such, in , it is assumed that type Dictionary is not used for request parameters.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 11","FIG. 6"],"b":"171"},"In addition to responses, HTTP requests may also be written in XML format. By way of example, a SOAP (Simple Object Access Protocol) format XML message may be issued from the client  to the web API bundle , and that message may be parsed by the HTTP server unit  to pass just the necessary parameters to the OSGi service execution unit .","<Embodiment 4>","In Embodiments 1 to 3 above, it was assumed that the web API bundle  directly receives class names, etc., of OSGi services as HTTP requests. However, a request parameter in which the class name, etc., itself is written does not necessarily have to be used.","By way of example, the web API bundle  may receive as a request parameter a text string in which a class name or a method name is converted by a predetermined rule, which is then converted to a class name, method name, etc., of an OSGi service inside the web API bundle  or via some appropriate conversion module, etc. In other words, it suffices for the web API bundle  to receive a request parameter with which at least a class name, method name, etc., of an OSGi service may be identified.","Reference Signs List",{"@attributes":{"id":"p-0086","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":[{"@attributes":{"id":"ul0002-0001","num":"0085"},"b":"10"},{"@attributes":{"id":"ul0002-0002","num":"0086"},"b":"11"},{"@attributes":{"id":"ul0002-0003","num":"0087"},"b":"12"},{"@attributes":{"id":"ul0002-0004","num":"0088"},"b":"13"},{"@attributes":{"id":"ul0002-0005","num":"0089"},"b":"131"},{"@attributes":{"id":"ul0002-0006","num":"0090"},"b":"132"},{"@attributes":{"id":"ul0002-0007","num":"0091"},"b":"14"},{"@attributes":{"id":"ul0002-0008","num":"0092"},"b":"15"},{"@attributes":{"id":"ul0002-0009","num":"0093"},"b":"151"},{"@attributes":{"id":"ul0002-0010","num":"0094"},"b":"152"},{"@attributes":{"id":"ul0002-0011","num":"0095"},"b":"153"},{"@attributes":{"id":"ul0002-0012","num":"0096"},"b":"17"},{"@attributes":{"id":"ul0002-0013","num":"0097"},"b":"171"},{"@attributes":{"id":"ul0002-0014","num":"0098"},"b":"172"},{"@attributes":{"id":"ul0002-0015","num":"0099"},"b":"173"},{"@attributes":{"id":"ul0002-0016","num":"0100"},"b":"20"},{"@attributes":{"id":"ul0002-0017","num":"0101"},"b":"100"}]}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2","b":"100"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3","b":"17"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5","b":["15","131"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7","b":"131"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8","b":"17"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9","b":"17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10","b":"17"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
