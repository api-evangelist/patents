---
title: Traceability management for aligning solution artifacts with business goals in a service oriented architecture environment
abstract: Traceability management to align IT solution artifacts with business goals in a service oriented architecture environment is provided. A pattern matching framework is provided for generating patterns and transformation enablers for architectural artifacts based on specific business requirements. Patterns that are applicable to a selected set of artifacts or model are provided to an architect, who may then select a particular subset of the patterns to apply to the set of artifacts or model in the SOA solution design to speed up and simplify the design process. Providing applicable or candidate patterns for selection to the architect in the views reduces the possible ambiguity in architectural artifact-pattern matching and selection. These solution patterns may be used as a guide when configuring and linking architectural artifacts and models.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342279&OS=09342279&RS=09342279
owner: International Business Machines Corporation
number: 09342279
owner_city: Armonk
owner_country: US
publication_date: 20090702
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field","The disclosure relates generally to an improved data processing system, and more specifically to traceability management for aligning information technology (IT) solution artifacts with business goals in a service oriented architecture environment.","2. Description of the Related Art","Service Oriented Architecture (SOA) is an extensible architectural framework at the programming and middleware level, business process level, and enterprise level comprising a set of business-aligned services that are combined (composed and choreographed) to fulfill business goals. SOA consulting services help customers solve business problems by developing SOA principles and best practices that guide planning, development, integration, and management of application infrastructures. Currently, most SOA consulting services are conducted in an ad-hoc and labor intensive way due to disparate methods, tools, and solution content. For example, existing techniques for providing traditional consulting services concentrate on application-specific areas or industry-specific areas. Documentation-based consulting practices have resulted in a challenge of standardizing a design approach for various solution creation scenarios. With paper-based services delivery practices, solution artifacts created in one scenario may not be able to be widely reused or quickly adapted to various types of industry solutions.","The illustrative embodiments provide a computer implemented method, apparatus, and computer program product for enabling traceability management for aligning IT solution artifacts with business goals in a service oriented architecture environment. Solution design patterns may be generated through a process of pattern identification, pattern storage, and pattern reusage from architecture design practices. A service oriented architecture specification may then be derived from the captured set of business requirements, wherein the service oriented architecture specification defines service oriented architecture practices that achieve a set of business objectives in accordance with the business requirements. A set of architectural artifacts and their attributes and constraints are obtained from the service oriented architecture specification. A set of architectural artifacts may comprise one or more (a group of) architectural artifacts. Solution design pattern rules for the set of architectural artifacts are derived, wherein the solution design pattern rules define transformation relationships among the set of architectural artifacts and define the attributes and business constraints of the set of architectural artifacts. Transformation enabler rules for the set of architectural artifacts are derived, wherein the transformation enabler rules define actions to be applied to the set of architectural artifacts to transform the set of architectural artifacts to another set of architectural artifacts. Solution design patterns and transformation enablers applicable to the design solution are then generated based on the respective solution design pattern rules and transformation enabler rules.","As will be appreciated by one skilled in the art, aspects of the disclosure may be embodied as a system, method or computer program product. Accordingly, aspects of the disclosure may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the disclosure may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electromagnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the disclosure may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the disclosure are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and\/or lock diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","With reference now to the figures and in particular with reference to , exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that  are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","100","102","100","102"]},"In the depicted example, server  and server  connect to network  along with storage unit . In addition, clients , , and  connect to network . Clients , , and  may be, for example, personal computers or network computers. In the depicted example, server  provides information, such as boot files, operating system images, and applications to clients , , and . Clients , , and  are clients to server  in this example. Network data processing system  may include additional servers, clients, and other devices not shown.","Program code located in network data processing system  may be stored on a computer recordable storage medium and downloaded to a data processing system or other device for use. For example, program code may be stored on a computer recordable storage medium on server  and downloaded to client  over network  for use on client .","In the depicted example, network data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, network data processing system  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the different illustrative embodiments.","With reference now to , a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system  is an example of a computer, such as server  or client  in , in which computer readable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example, data processing system  includes communications fabric , which provides communications between processor unit , memory , persistent storage , communications unit , input\/output (I\/O) unit , and display .","Processor unit  serves to execute instructions for software that may be loaded into memory . Processor unit  may be a set of one or more processors or may be a multi-processor core, depending on the particular implementation. Further, processor unit  may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit  may be a symmetric multi-processor system containing multiple processors of the same type.","Memory  and persistent storage  are examples of storage devices . A storage device is any piece of hardware that is capable of storing information, such as, for example without limitation, data, program code in functional form, and\/or other suitable information either on a temporary basis and\/or a permanent basis. Memory , in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage  may take various forms depending on the particular implementation. For example, persistent storage  may contain one or more components or devices. For example, persistent storage  may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage  also may be removable. For example, a removable hard drive may be used for persistent storage .","Communications unit , in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit  is a network interface card. Communications unit  may provide communications through the use of either or both physical and wireless communications links.","Input\/output unit  allows for input and output of data with other devices that may be connected to data processing system . For example, input\/output unit  may provide a connection for user input through a keyboard, a mouse, and\/or some other suitable input device. Further, input\/output unit  may send output to a printer. Display  provides a mechanism to display information to a user.","Instructions for the operating system, applications and\/or programs may be located in storage devices , which are in communication with processor unit  through communications fabric . In these illustrative examples the instruction are in a functional form on persistent storage . These instructions may be loaded into memory  for execution by processor unit . The processes of the different embodiments may be performed by processor unit  using computer implemented instructions, which may be located in a memory, such as memory .","These instructions are referred to as program code, computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media, such as memory  or persistent storage .","Program code  is located in a functional form on computer readable media  that is selectively removable and may be loaded onto or transferred to data processing system  for execution by processor unit . Program code  and computer readable media  form computer program product  in these examples. In one example, computer readable media  may be in a tangible form, such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage  for transfer onto a storage device, such as a hard drive that is part of persistent storage . In a tangible form, computer readable media  also may take the form of a persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system . The tangible form of computer readable media  is also referred to as computer recordable storage media. In some instances, computer readable media  may not be removable.","Alternatively, program code  may be transferred to data processing system  from computer readable media  through a communications link to communications unit  and\/or through a connection to input\/output unit . The communications link and\/or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non-tangible media, such as communications links or wireless transmissions containing the program code.","In some illustrative embodiments, program code  may be downloaded over a network to persistent storage  from another device or data processing system for use within data processing system . For instance, program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code  may be a server computer, a client computer, or some other device capable of storing and transmitting program code .","The different components illustrated for data processing system  are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in  can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example, the data processing system may include organic components integrated with inorganic components and\/or may be comprised entirely of organic components excluding a human being. For example, a storage device may be comprised of an organic semiconductor.","As another example, a storage device in data processing system  is any hardware apparatus that may store data. Memory , persistent storage  and computer readable media  are examples of storage devices in a tangible form.","In another example, a bus system may be used to implement communications fabric  and may be comprised of one or more buses, such as a system bus or an input\/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory  or a cache such as found in an interface and memory controller hub that may be present in communications fabric .","The role of a solution architect is to evaluate a business problem and associated business requirements to identify and design a solution to the problem. The solution may be provided as a service to customers, investors, partners, vendors, and the like. To enhance the solution building process, the design knowledge that each solution architect gains during the design process may be captured and reused by subsequent architects, thereby reducing the time, money, and effort when building future solutions.","The illustrative embodiments provide a systematic way to allow architects that are designing a solution to a business problem to generate and apply this reusable design knowledge to selected architectural artifacts or models. The reusable design knowledge is captured as solution patterns that are used as a guide to determine and configure the architectural artifacts and models that comply with industry standards or best practices. A solution pattern is defined as a template for handling recurring design issues that arise in particular contexts and domains. A solution pattern comprises a set of reusable architectural artifacts (comprising the smallest architectural building blocks (ABBs) of a solution) and their relationships or linkages to one another. In this disclosure, the term \u2018architectural artifacts\u2019 may be used interchangeably with the term \u2018architectural building block\u2019. In an service oriented architecture solution, architectural artifacts may include, but are not limited to, Business Domain, Functional Area, Function, Business Process, Metric, Key Performance Indicator (KPI), Existing Asset, Candidate Service, Composite Service, Service, Service Component, Functional Component, Technical Component, and Component Flow. Solution patterns provide a reusable way to capture the transformation relationships and attributes of a specific architectural artifact or a set of artifacts, and may be designed to meet most common customer requirements. For example, a service allocation pattern is a template for enabling a service artifact to be allocated to a corresponding service component artifact, which is to implement the interface and functions designed for the service artifact. In another example, a message specification pattern provides a template for defining message types, sources, and message formats. The message types include input and output message types, the sources may be local files (e.g., XML schema files) or URLs (e.g., an industry standard-based XML schema files hosted on Web sites); the message formats may be of a string, integer, or complex type. In this case, the message specification is a typical solution pattern that can provide a predefined template for a service to use when defining industry standard compliant messages. The patterns leverage the experience of solution architects, such that other architects may use the patterns to create solutions quickly, whether for a small local business or a large multinational enterprise. From a representation perspective, a solution pattern may be captured using unified modeling language (UML) modeling constructs, an extensible markup language (XML) document, or a graph.","In one aspect of the illustrative embodiments, a pattern matching framework is provided for applying patterns and transformation enablers for architectural artifacts based on specific business requirements. The framework comprises two major components: solution patterns and transformation enablers. The solution patterns are reusable enablement templates that are used to implement the transformation relationships between architectural artifacts. The solution patterns are implemented as software components that facilitate required actions based on pre-defined specifications and rules. Thus, individual patterns also record their compliance with guidelines (organizational, industry-specific, or project-specific) that must be followed. A transformation enabler is a set of transformations triggered by a context-aware menu action specific to an artifact. When triggered, the action results in a transformation of the current artifact to another artifact (e.g., from a candidate service to an identified service), or a build up of certain transformation relationships among the artifacts. Transformation enablers may comprise menu items in a graphical user interface environment and are applied as actions to specific architectural artifacts in order to facilitate the transformations between architectural artifacts in order to build an architecture model. A service oriented architecture consulting service may be provided to customers comprising the solution design patterns and transformation enablers to facilitate solution design support. The service oriented architecture consulting service may provide support across various and\/or disparate businesses and industry environments.","In another aspect of the illustrative embodiments, a multi-dimensional cascading flagging mechanism is provided that allows for the use of solution patterns as a guide when configuring and linking architectural artifacts (and models). The multi-dimensional aspect of the flagging mechanism refers to having multiple attributes associated with each architectural artifact. The cascading aspect of the flagging mechanism refers to the successive application of patterns to different sets of artifacts, where each application of a pattern modifies the state of the artifact attributes and flags. Cascading also refers to providing traceability for the artifacts. Flagging refers to defining attributes or status of an artifact, such as, for example, the origin or source of the artifact, the artifact completion status, or guidelines applied to the artifact. All patterns that are applicable to a selected artifact or model are provided to the architect, who may then select a particular subset of the patterns to apply to the artifacts or model in the service oriented architecture solution design to speed up and simplify the design process. A pattern may be applicable to an artifact or model based on the type or certain properties of artifact or model. For example, an artifact of a candidate service has a set of properties, such as, for example, application programming interfaces (APIs), performance constraints, and access controls. The type of the artifact may be used to determine whether or not a pattern is applicable to the artifact. Patterns may be applicable at the artifact(s) level or at the model level, wherein applicability is determined by the type(s) of artifacts or models. Pre-built patterns may also be applied to specific vertical industries, such as the health industry.","The multi-dimensional cascading flagging mechanism also provides multi-dimensional mapping of models and artifacts through cascading flag views. The views may include, for example, an artifact view, profile view, and compliance view, among others. Providing applicable or candidate patterns for selection to the architect in the views reduces the possible ambiguity in architectural artifact-pattern matching and selection. The views also provide the ability to manage and assess the existing architectural artifact portfolio in the context of design and implementation. An artifact source-shape categorizing mechanism is further provided to improve the productivity in service oriented architecture solution design by indicating the sources from where the architectural artifacts are derived.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 3","b":"300"},"Solution design environment  comprises an architectural model , pattern repository , and pattern selection engine . Architectural model  is a representation of a subject of interest, including, for example, a whole or a part of an enterprise. Model  is populated with architecture building blocks  that are added to the model in multiple steps. An architecture building block is a constituent of architecture model  that describes a single aspect of the overall model. An architecture building block, or artifact, represents a potentially reusable business, IT, or architectural component that can be combined with other building blocks to deliver architectures and solutions. When adding an architecture building block to model  to build a solution, pattern selection engine  may be invoked to retrieve and display the possible architecture patterns that are applicable to the architecture building block type (stereotype). Thus, each pattern in pattern repository  is associated with an architecture building block type (or stereotype), or a set of building block types with associated relationships between the building block types. The order in which the patterns applicable to the architecture building block are displayed may be determined based on the history usage of the architecture patterns, such as displaying the patterns most often selected by solution architects higher in the list of applicable patterns. When a solution architect selects a particular pattern in the list of displayed patterns, the selected pattern may be stored in model  to form a pattern selection history  for the associated architecture building block. Pattern selection history  may be used in the multi-dimensional cascading flagging aspects of the disclosure. For a specific model, pattern selection history  may comprise the process of selecting certain patterns which are used to populate a model. Selected patterns may also be stored as patterns  in pattern repository  to be used as a history usage record of the patterns. In the pattern repository system, the pattern selection history is a history describing the selection and reuse of a specific pattern. This pattern selection history may be used to rank applicable patterns displayed to the architect in a graphical user interface according to pattern selection and reuse by other architects.","New architecture patterns may also be created by an architect when applicable patterns are not available for selection for the selected model or set of artifacts and stored in pattern repository . In most circumstances, there may be a certain number of pre-populated architecture patterns already existing in the pattern repository system. However, a new architecture pattern is needed in situations in which no existing patterns are applicable enough for the selected model or set of artifacts. In this situation, an architect (typically a senior architect) may create new architecture patterns by specifying a set of artifacts and their relationships with the guidelines of applying this pattern. The new architecture patterns are then validated through the ranking and selection of the new pattern by other architects, as described further in .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 3"],"b":"300"},"The process may begin with capturing business requirements that define the environment within which the solution patterns and transformation enablers will be created (step ). The business requirements may be captured based on the needs of the business. The business requirements may be captured using various tools such as, for example, Rational RequisitePro\u00ae or Telelogic Doors\u00ae, or in document form. The SOA specification may then be derived from the captured business requirements (step ). The SOA specification defines a business process and expected results of conducting an SOA practice that fulfills the objectives of the business. The artifacts in the SOA architecture model are chosen based on the business requirements.","Next, the process identifies a set of architectural artifacts associated with the SOA practice (step ). A set of architectural artifacts may comprise one or more (a group of) architectural artifacts. The architectural artifacts are components or products of the SOA practice and are identified from the SOA specification. Architectural artifacts comprise the smallest architectural building blocks of a solution. At this point, the process may continue to steps , , or  as needed to define the architecture model. At step , the process identifies attributes and constraints of the architectural artifacts. Attributes and business constraints are associated with specific architectural artifacts to describe the unique features of that artifact. An attribute is a defined feature of an associated artifact. A business constraint is an external factor that forces or prevents an organization from pursuing particular approaches to meet its goals.","At step , the process then derives solution pattern rules for the artifacts. The solution pattern rules are derived to realize the transformation relationships or linkages between artifacts and which capture the attributes and business constraints of the artifacts. For example, one business constraint may state that candidate services shall be aligned to a specific business goal. A pattern rule may be derived that allows the user to transform a business goal artifact into a set of aligned candidate service artifacts. At step , transformation enabler rules are also derived, based on the SOA model and the method to be applied in building the architecture model.","Once the pattern and enabler rules are derived, the process generates solution design patterns and transformation enablers for the SOA practice (step ). For example, in one embodiment, the pattern and enabler rules are encoded in a particular way, e.g., a graph structured model, and the pattern and transformation enablers read this structured model in order to determine what patterns and enablers are possible for the SOA practice.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 5","FIG. 5","FIG. 5"]},"Pattern matching framework  comprises various components, including models , patterns , validation module , enablement history repository , and pattern selection history . Models  are an example of model  in . Models  represent various types of SOA practices, such as, for example, business process models, services model, etc. Each model comprises a set of (one or more) architectural artifacts that are components or products of the SOA practice. When a model is selected by an architect, transformation enablers generated in  trigger an action to invoke the pattern selection and validation process.","Patterns  are an example of patterns  in . Patterns  represent a set of existing solution patterns for selection. Patterns  may include patterns generated from the process described in . The patterns are displayed in a graphical user interface to the architect, who may then select a subset of the existing patterns to apply to the selected model.","Validation module  is used to validate the model-pattern matching process. When an action is triggered upon selection of a model or set of (one or more) artifacts, validation module  receives the selected model as input and enables the patterns that are applicable to the selected model or artifacts. Validation module  validates\/enables the patterns to make the pattern available for selection by the architect. For example, if the business process model is selected, patterns applicable to the selected business process model (e.g., patterns  and ) are displayed in a manner distinct from the other patterns in the existing pattern list. To facilitate the model-pattern matching process, a model-pattern look up table is maintained in enablement history repository  to allow validation module  to determine which patterns are applicable to which models. The model-pattern look up table may be populated from the transformation relationships captured in the enablement history repository  and pattern selection history .","Enablement history repository  is a storage repository that is used to record the pattern enablement history for each model. The pattern enablement history comprises all of the patterns that were provided to the architect as selectable candidates to be applied to the model.","Pattern selection history  is an example of pattern selection history  in . Pattern selection history  comprises a subset of the patterns listed in enablement history repository  that were actually selected for each model. When a pattern or set of patterns are selected for a particular model, the selection of the patterns are recorded in the pattern selection history  and displayed to the architect. In one embodiment, the recorded solution design patterns for a solution design are ranked against each other according to how often a pattern is selected by the architects, as well as how applicable a pattern is to the model or set of architectural artifacts. For example, a popular (frequently selected) pattern will be ranked high in the pattern list displayed to an architect, and vice versa. If a pattern is determined to be more applicable to a set of artifacts, the pattern will be ranked higher than other patterns, and vice versa. Applicability of a pattern to a set of artifacts may be determined based on the type of the artifacts. By recording, ranking, and displaying the selected patterns, an architect may use the ranked patterns to revisit the solution design and determine which architectural artifacts are potentially affected by a changed requirement, as well as to determine how to modify an existing model that was created for another context to be reused in a new context. In the case where no existing patterns are applicable to an artifact, an experienced architect can manually populate the model by adding artifacts. Thus, if applicable patterns are available for a selected set of artifacts, the model may be populated with one or more architectural artifacts using an applicable solution design pattern. However, if no existing patterns are applicable to an artifact, the model may be populated with one or more architectural artifacts without using an applicable solution design pattern. Furthermore, a set of artifacts and their relationships can be highlighted and stored as a new pattern in the pattern repository. Such a pattern can then be validated by other architects based on the usage (selection and reuse) of the pattern. The recorded and ranked patterns may also be used to evolve the set of guidelines\/best practices over time, which can lead to improvements to the design process. For example, if pattern selection history is traced over time, the solution architect may determine which patterns no longer seem to be useful, or correlate pattern selection with measurements from the solution implemented from the design to determine if particular patterns are especially useful.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 6","FIG. 6","FIG. 5"],"b":["602","604","604","606","604","604","608"]},"When the solution design environment detects that a pattern has been selected by an architect (step ), the solution design environment records the selected pattern to the pattern selection history (step ). The pattern selection history may then be displayed in a graphical user interface to the architect (step ). The pattern selection history provides service oriented architecture model or artifact reusability information and traceability information to the architect. The traceability information may be used to modify guidelines and best practices in the solution design environment.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 7","FIG. 7"]},"In this illustrative example, architectural artifacts  are shown to comprise various artifacts  to n and patterns  are shown to comprise various patterns  to n. Selection of any of architectural artifacts  triggers the artifact-pattern-matching process in which the validation model  in  checks an artifact-pattern matching table in the enablement history repository to determine which patterns are applicable to the selected architectural artifact. In this example, for artifact , the patterns shown as being applicable or recommended to artifact  are patterns  and . In one embodiment, these applicable patterns may be flagged by color-coding the patterns and displaying them to the architect for selection. For example, the applicable patterns may be highlighted in a particular color, while the other patterns remain grey as not selectable.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 8","b":["802","804","806"]},"In the visual view\/graphical user interface, different shapes may be used as visualizations of the architectural artifacts from different sources. Additional shapes may be implemented as other source categories are applicable. For instance, a design artifact shape may be included to represent an architectural artifact that is supplied through a design that has not yet been realized. The shape indicator provides a clear way to show the sources from which an architectural artifact is derived. The source of an artifact may be important when selecting a pattern if the pattern depends on the source of the artifact being from a particular input. Knowledge of the source of an artifact also assists in determining the traceability of the different artifacts.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 9","b":["902","904","902","906","908","906","910","912","910","914","914"]},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIGS. 10-12"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 10","b":["1000","1002","1004","1006","1006"]},"To flag the status of an architectural artifact, a percentage is used to measure the degree of completion. For example, artifact  is attached a tag of \u201c20%\u201d, that means, 80% to completion. Other measurement scales can be used based on the specific needs of different SOA practices. Status flagging provides a way to estimate the workload during SOA practices thus a real-time work schedule re-planning can be conducted.","Upon selecting the status percentage in status table , creation history table  is displayed to show the current creation stage of the specific artifact. The cascading of individual artifact status (e.g., artifact ) in status table  and creation history in creation history table  provides a reference for an SOA practitioner to estimate the workload of the remaining artifact design. The workload estimation may provide linkages to other project management plans. Also, the change propagation path in creation history table  can be traced to reveal to what extent a change affects an artifact under investigation.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 11","b":["1100","1102","1104","1106","1","1108"]},"For example, artifact-source table  shows that artifact  is created by applying patterns, artifact  is imported from results of other business processes, and artifact  is an existing asset. For each source, a color tag may be used to show the derivation path (type) of an artifact. For example, yellow may be used to indicate the artifact is newly created, green may be used to indicate the artifact is transformed from another artifact, and grey may be used to indicate the artifact is reused.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 12","b":"1202"},"Compliance view  is trigged when an SOA solution's compliance to a set of guidelines needs to be determined. Compliance view  illustrates the selected set of guidelines that must be followed by the solution, with an associated color for each guideline in pattern-guideline correlation table  which indicates the compliance of the solution to that particular guideline. Guidelines for which compliance is verified because a particular pattern or patterns have been applied are highlighted in a first color (e.g., guidelines ), and the patterns for which compliance has been manually certified by the practitioner may be displayed in a second color (e.g., guidelines ). A third color may be used to indicate guidelines (e.g., guidelines ) for which the compliance is unknown. The compliance of the solution can be traced to the individual artifacts which are relevant to the compliance scenarios for the highlighted guidelines in the first and second colors.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIGS. 13-15"},"The impact of an architecture building block can be defined as direct or indirect. A direct impact analysis pattern of a given architecture building block is created as a diagram that contains only those directly impacted (offspring) architecture building blocks (and corresponding links) that can be traced back to the given architecture building block with the given architecture building block as the only root node. The direct impact analysis is used to track the implementation of an architecture building block, which can tell how the architecture building block is progressively realized. An indirect impact analysis pattern of a given architecture building block is created as a diagram that contains only those indirectly impacted (ancestor) architecture building blocks (and corresponding links) that can be traced back from the given architecture building block with the given architecture building block as the only leaf node. The indirect impact analysis is used to find out how an architecture building block is identified from and aligned with business requirements through bottom-up analysis.","The enablement of the impact analysis patterns and solution architecture building blocks is configurable.  illustrates an encoding of patterns in the form of impact analysis configuration file  which define the impact scope of an architecture building block for an SOA solution model. Configuration file  defines the impact analysis starting point (a stereotype name) and ending point (another stereotype name) for an SOA solution model. Relevant relationships between stereotypes are selected using the configuration file. By using the configuration file, parts of the architecture model may be filtered out by setting the starting point and ending point of the analysis and the relationships among the architecture building blocks of the model. Configuration file  may be used in an end-to-end impact analysis. Configuration file  comprises the stereotypes to be analyzed as defined by the IMPACT values , the selections of the starting points of the analysis as defined by the values of IMPACT.Indirect.Leaf , and the selections of the ending points of the analysis as defined by the values of IMPACT.Direct.Leaf . The remaining part (main body ) of configuration file  defines the relationships needed to complete the impact analysis.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 14","FIG. 13","FIG. 14"],"b":"1300"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 15","b":["1500","1502","1504"]},"The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the embodiments of the disclosure. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the embodiments of the disclosure has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the embodiments of the disclosure in the forms disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The embodiments were chosen and described in order to best explain the principles of the disclosure and the practical application, and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.","The embodiments of the disclosure can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the disclosure is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","Furthermore, the embodiments of the disclosure can take the form of a computer program product accessible from a computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer readable medium can be any tangible apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.","The description of the embodiments of the disclosure has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the embodiments of the disclosure in the forms disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiments were chosen and described in order to best explain the principles of the disclosure, the practical application, and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
