---
title: Methods and apparatus for dynamically switching between polling and interrupt mode for a ring buffer of a network interface card
abstract: Methods and apparatus for processing packets in a computer system including an operating system and a network interface card (NIC) are disclosed. The NIC having a plurality of ring buffers is configured to operate in either a polling mode or an interrupt mode for a particular ring buffer. When the NIC is in the polling mode for a ring buffer, the NIC is periodically polled to determine whether one or more packets have been received by the ring buffer. When the NIC is in the interrupt mode, the operating system is capable of receiving an interrupt indicating that the ring buffer of the NIC has received one or more packets. The operating system is capable of instructing the NIC to change its mode from the polling mode to the interrupt mode for a particular ring buffer, and from the interrupt mode to the polling mode for a particular ring buffer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07937499&OS=07937499&RS=07937499
owner: Oracle America, Inc.
number: 07937499
owner_city: Redwood City
owner_country: US
publication_date: 20040709
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority from patent application Ser. No. 10\/698,211, entitled \u201cMETHODS AND APPARATUS FOR SWITCHING BETWEEN POLLING AND INTERRUPT TO HANDLE NETWORK TRAFFIC,\u201d by Sunay Tripathi, filed on Oct. 31, 2003, which is incorporated herein by reference for all purposes.","This application is related to patent application Ser. No. 10\/888,792, entitled \u201cMETHODS AND APPARATUS FOR DRIVING A HIGH BANDWIDTH NETWORK INTERFACE CARD WITH A SINGLE INTERRUPT SOURCE,\u201d by Tripathi et al, filed on the same day, which is incorporated herein by reference for all purposes.","At the top of a network protocol stack, applications are generally written to function through the use of a specific network protocol. An application developer typically writes a different version of the application for use with different network protocols. Many developers have overcome these issues by writing applications based upon a common or standard interface. Generally, these interfaces communicate directly with the socket layer of the kernel. The socket layer was designed to provide independence from the network communication layer and interfaces with system call routines that interface to the kernel.","The kernel includes the socket layer and the network protocol stack. In addition, a Network Interface Card (NIC) Driver capable of communicating with a NIC is in communication with the kernel via a standard interface such as a Data Link Provider Interface.","Traditionally, when a NIC receives a packet over the network, the NIC issues an interrupt. The driver notifies the operating system kernel of the interrupt. The kernel processes the interrupt and obtains the packet from the NIC via the driver. As each packet is subsequently received by the NIC, the NIC generates an interrupt. Thus, the operating system kernel obtains each packet from the NIC as interrupts are generated. Accordingly, packets that are received by the NIC are processed immediately by the operating system kernel.","A server is typically contacted by a client when data is requested from the server. Thus, the server's primary responsibility is to respond to each server request with the requested data. Unfortunately, since the server is required to respond immediately to interrupts generated when packets are received, this received data is given a higher priority than that given to packets that are transmitted by the server. Accordingly, a client receiving packets from a server may perceive a substantial delay as packets are being transmitted by the server.","Moreover, the processing power of CPUs have not scaled at the pace that network communications have. Thus, if packets arrive quickly on the network in comparison to the processing capability of the CPU handling the interrupt, the CPU will be continually interrupted. Since the processing capability of the CPU handling the interrupt does not match the speed at which interrupts are issued, the CPU will be unable to process all of the interrupts. Accordingly, due to these continuous interrupts, a \u201clivelock\u201d occurs, resulting in an effective freezing of the CPU for all practical purposes.","The present invention enables a network interface card to be operated in multiple modes for each memory (e.g., ring buffer) of the network interface card, enabling its ability to interrupt a CPU for each ring buffer to be controlled. A ring buffer is generally defined as a buffer of data which is of fixed size; when it fills, further data is placed back at the start of the buffer, overwriting the old data, in a \u201cring.\u201d Specifically, the modes of the network interface card may be controlled by an operating system kernel. In this manner, the operating system kernel may disable or enable interrupt processing of the network interface card for one or more of the ring buffers, thereby enabling the performance of the server to be optimized.","In accordance with one aspect of the invention, methods and apparatus for processing packets in a computer system including an operating system and a network interface card having a plurality of ring buffers are disclosed. When the network interface card is in a polling mode for one of the plurality of ring buffers, the operating system kernel polls the network interface card to determine whether one or more packets have been received by the one of the plurality of ring buffers. When the network interface card is in an interrupt mode for one of the plurality of ring buffers, the CPU is capable of receiving an interrupt from the network interface card that indicates that the ring buffer of the interface card has received one or more packets. Packets that have been received by the ring buffer may then be obtained from the network interface card and processed.","In accordance with another aspect of the invention, the operating system is configured to instruct the network interface card to operate in the polling mode or the interrupt mode for one or more ring buffers. In accordance with one embodiment, the operating system controls the operating mode of the network interface card for each of the ring buffers such that the network interface card is in the polling mode for a ring buffer during periods of heavy network traffic associated with the ring buffer and in the interrupt mode for a ring buffer during periods of light to moderate network traffic associated with the ring buffer. Specifically, the operating system dynamically instructs the network interface card to operate in a first mode for one of the ring buffers when packets are received from\/by the ring buffer of the network interface card at less than a predefined rate or the number of packets in the CPU memory corresponding to the ring buffer is less than a predefined number, the network interface card in the first mode for the ring buffer being capable of interrupting a CPU when a packet is received by the ring buffer of the network interface card. Similarly, the operating system instructs the network interface card to operate in a second mode for one of the ring buffers when packets are received from\/by the ring buffer of the network interface card at greater than a predefined rate or the number of packets in the CPU memory corresponding to the ring buffer is greater than a predefined number, the network interface card in the second mode for the ring buffer being disabled from interrupting the CPU when a packet is received by the ring buffer of the network interface card. Accordingly, for a network intensive workload at a particular ring buffer, the system will likely remain in the polling mode for that ring buffer.","In accordance with yet another aspect of the invention, a computer system includes an operating system and a network interface card coupled to the operating system, where the network interface card is configured to operate in an interrupt mode for a particular ring buffer when in a first state and to operate in polling mode for a particular ring buffer when in a second state, the network interface card when in the interrupt mode for a ring buffer being configured to interrupt the operating system when a packet is received by the ring buffer of the network interface card over a network. When in the polling mode for a ring buffer, the network interface card may be disabled from issuing an interrupt entirely for that ring buffer, or in specific circumstances for that ring buffer (e.g., for packets having normal to low priority).","In accordance with one embodiment, the computer system includes one or more CPUs, each CPU having an associated queue, and a network interface card having a plurality of memories (e.g., buffers). When an interrupt is received from the network interface card for one of the buffers, a set of one or more packets are transferred from the identified buffer to the queue associated with one of the CPUs. Similarly, upon polling the network interface card for one of the buffers, if it is determined that one or more packets have been received by the one of the buffers of the network interface card, the one or more packets in the buffer are transferred to the queue associated with the CPU. Each of the packets in the queue associated with the CPU are then processed. Since the set of packets may be transferred simultaneously as a chain of packets (e.g., linked list), the performance of the server is improved.","In accordance with an embodiment of the invention, each of the ring buffers is mapped to one of a plurality of CPUs and its associated memory (e.g., software queue). In this manner, the ability of a network interface card to interrupt a specific CPU is determined by the buffer for which the interrupt is issued. For instance, the ability of the network interface card to interrupt a specific CPU may be determined by the number of packets in the corresponding buffer. In addition, the packets in the buffer of the network interface card may be transferred by the operating system to the corresponding queue. This is accomplished by assigning a ring buffer identifier to map each ring buffer of the network interface card to one of the CPUs and its associated queue. In this manner, packets may be efficiently transferred from a ring buffer of the network interface card to the corresponding queue for processing by the associated CPU.","The embodiments of the invention may be implemented software, hardware, or a combination of hardware and software. The invention can also be embodied as computer readable code on a computer readable medium. In addition, data structures disclosed are also part of the invention.","In the following description for embodiments of the invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without some or all of these specific details. In other instances, well known process steps have not been described in detail in order not to unnecessarily obscure the present invention.","As shown in , an exemplary operating system includes a kernel . The kernel is the core of the computer operating system. The kernel's services may be requested by other parts of the operating system or by an application  through a system call routine.","At the top of the network protocol stack , applications  are generally written to function through the use of a specific network protocol. The application developer then needs to write a different version of the application for it to operate using different network protocols. Many developers have overcome these issues by writing applications based upon a common or standard interface, such as NetBIOS, WinSock, or BSD sockets. Generally, these interfaces communicate directly with the socket layer  of the kernel. The socket layer was designed to provide independence from the network communication layer and interfaces with system call routines that interface to the kernel .","The kernel  includes the socket layer  and the network protocol stack , which includes a TCP layer  and an IP layer . Specifically, the TCP layer  is capable of performing a TCP three way handshake to establish a TCP connection, and manages the assembling of a message or file into packets that may be transmitted over the Internet during the TCP connection. The IP layer  handles the addressing for each packet. In addition, a Network Interface Card (NIC) Driver  capable of communicating with a NIC  is in communication with the kernel  via a standard interface such as a Data Link Provider Interface.","Traditionally, when a NIC  receives a packet over the network, the NIC  issues an interrupt. The driver  notifies the operating system kernel  of the interrupt. The kernel  processes the interrupt and obtains the packet from the NIC  via the driver . As each packet is subsequently received by the NIC , the NIC  generates an interrupt. Thus, the operating system kernel  obtains each packet from the NIC  as interrupts are generated. Accordingly, packets that are received by the NIC  are processed immediately by the operating system kernel .","As a NIC receives packets over the network, it typically generates interrupts. While an interrupt is practical in high priority situations that occur infrequently, an interrupt is not practical for low priority situations that occur frequently.","In electronic communication, \u2018polling\u2019 is the periodic checking of other programs or devices by one program or device to see what state they are in, usually to see whether they are still connected or want to communicate. Specifically, a controlling device attached to another device sends a message to the device periodically, asking whether it has anything to communicate.","Polling is a viable option for use in situations that are low-priority situations that occur frequently. For instance, the NIC could be placed in polling mode for a particular ring buffer, and any packets received by that ring buffer of the NIC could be obtained periodically from the NIC. However, permanently placing the NIC in polling mode for a particular ring buffer would potentially result in a substantial delay for those packets that are received by the ring buffer of the NIC.","In accordance with one embodiment of the invention, the NIC is configured for operating in two modes for each ring buffer: polling mode and interrupt mode. Specifically, when the NIC is in the polling mode for a particular ring buffer, the operating system kernel periodically polls the ring buffer of the NIC to determine whether one or more packets have been received by the ring buffer. When the NIC is in the interrupt mode for a particular ring buffer, the NIC issues an interrupt when the ring buffer of the NIC has received one or more packets that need to be handled by the operating system kernel.","In accordance with another embodiment of the invention, the operating system is capable of instructing the NIC to operate in either the polling mode or the interrupt mode for a particular ring buffer. Specifically, the network interface card is instructed to operate in the polling mode for a particular ring buffer when packets are being received frequently by the ring buffer of the network interface card, while the network interface card is instructed to operate in the interrupt mode for a particular ring buffer when packets are being received infrequently by the ring buffer of the network interface card. Frequency may be established through establishing a predefined numerical threshold value, such as the number of packets received per second by the ring buffer of the NIC. For instance, when the number of packets queued in the CPU queue is below a specified limit or the number of packets per second being received by\/from the ring buffer of the network interface card is less than a predefined number of packets, then the network interface card may be instructed to operate in the interrupt mode for that ring buffer. Similarly, when the number of packets queued in the CPU queue is greater than a specified limit or the number of packets per second being received by\/from the ring buffer of the network interface card is greater than or equal to a predefined number of packets, then the network interface card may be instructed to operate in the polling mode for that ring buffer. In another embodiment of the invention, if the operating system is already processing a packet received earlier or to be transmitted and there are more queued packets in the queue of the CPU, the NIC is instructed to operate in polling mode for the corresponding ring buffer.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["0","202","1","204","206","0","208","1","210","212"]},"Operating system  includes an operating system kernel having a network protocol stack. For instance, the network protocol stack may be a TCP\/IP stack. The operating system also includes an interrupt handler. Generally, an interrupt handler prioritizes interrupts that are received by the operating system and saves them in a queue if more than one is waiting to be handled. When an interrupt is received from one of the NICs , , , the interrupt is prioritized in the queue. A scheduler of the operating schedules the operation of different programs as the interrupts are received.","Generally, when a hardware device generates an interrupt, the interrupt has a value that associates it with a particular device. Thus, the interrupt value (implicitly or explicitly) identifies one of the NICs. In accordance with one embodiment, the interrupt value also identifies the one of the CPUs being interrupted. For example, the interrupt value or another, second interrupt value identifies one of the ring buffers associated with the CPU being interrupted. Thus, a single or multiple interrupt identifier(s) (e.g., interrupt or NIC\/buffer identifiers) may be used to map a particular ring buffer of a NIC to a particular CPU. Thus, through the use of one or more identifiers, both the ring buffer of the NIC and the CPU being interrupted may be identified by the operating system kernel receiving the interrupt notification.","As shown in , in accordance with one embodiment, each of the CPUs , ,  has an associated queue Squeue , Squeue , and Squeue n , respectively, for storing packets. The queue may store inbound and\/or outbound packets. In addition, each of the NICs , ,  has a plurality of associated memories (e.g., ring buffers) for storing inbound packets as they are received over a network. Thus, as shown each of the NICs , ,  has an associated set of ring buffers -, -, and -, respectively.","In accordance with one embodiment, each of the queues Squeue , Squeue , Squeue n  associated with one of the CPUs , ,  is capable of storing both inbound packets and outbound packets. As a result, both inbound packets and outbound packets are given equal priority. For instance, each of the queues Squeue , Squeue , Squeue n  may be a serialization queue such as that disclosed in the Patent Application entitled \u201cA System and Method for Vertical Perimeter Protection,\u201d naming Sunay Tripathi and Bruce Curtis as inventors, filed on Oct. 10, 2003, which is incorporated herein by reference for all purposes.","As described above, the interrupt value (e.g., ring buffer identifier and NEC identifier, or interrupt identifier) may be used to identify both one of the CPUs , ,  and one of the ring buffers associated with one of the NICs , , . In addition, the identifier may be further mapped to one of the queues , ,  associated with one of the CPUs , , . In this manner, one of the queues , ,  is mapped to one of the ring buffers -, -, -to facilitate the transfer of packets from one of the ring buffers to one of the queues. In accordance with one embodiment, a single identifier is used to map one of the CPUs , ,  and its associated queue , , or  with one of the ring buffers of one of the NiCs , , .","Communication between the CPUs , ,  and the NICs , ,  may be achieved through the use of a driver . In accordance with one embodiment, the driver includes one or more application programming interfaces (APIs) (e.g., CHANGE_INTERRUPT(BUFFER_NUMBER) to enable the operating system kernel to instruct one of the NICs , ,  to change its mode from the interrupt mode to the polling mode for a particular ring buffer, or from the polling mode to the interrupt mode for a particular ring buffer. In addition, an API (e.g., GET_PACKETS(BUFFER_NUMBER) may be provided that enables the operating system kernel to move a set of packets from one of the buffers -, -, -associated with one of the NICs , ,  to one of the queues , ,  associated with one of the CPUs , , . Thus, the operating system kernel may instruct a NIC to change its mode from interrupt mode to polling mode for one or more ring buffers, or from polling mode to interrupt mode for one or more ring buffers. In response, the NIC enters the polling mode or the interrupt mode for the specified ring buffer(s), as instructed.","In addition, it may be desirable for the operating system to ascertain whether the network interface card is in an interrupt mode or a polling mode for a particular ring buffer. The operating system, once aware of the state of the network interface card for a particular ring buffer, may then operate accordingly. Specifically, when the NIC is in the polling mode for a particular ring buffer, the operating system polls the NIC periodically for packets that may have been received by that ring buffer. When the NIC is in the interrupt mode for a particular ring buffer, the operating system operates to retrieve packets from the ring buffer when an interrupt is received from the NIC on behalf of the ring buffer.","As described above, the NIC is capable of operating in two different modes for each of the ring buffers or the NIC. However, this example is merely illustrative, and other additional modes may also be implemented. Moreover, it is also possible that the interrupt mode and the polling mode be implemented in different manners. Generally, the NIC generates an interrupt when a packet is received by a ring buffer while operating in the interrupt mode for that ring buffer, but cannot generate an interrupt on behalf of the ring buffer when a packet is received by that ring buffer while operating in the polling mode for that ring buffer. Alternatively, when the NIC is in the polling mode for a particular ring buffer, the NIC may generate an interrupt when a packet is received by the ring buffer, but only for packets deemed to have a high priority (not for packets deemed to have a low priority). High priority may refer to a single priority or may refer to a range of priorities of packets.","Specifically, in accordance with one embodiment, the network interface card when in the interrupt mode for a particular ring buffer is configured to interrupt the operating system when a packet is received by the ring buffer of the network interface card over a network. When the network interface card is in the polling mode for the ring buffer, the NIC is unable to interrupt the operating system on behalf of that ring buffer, thereby enabling the operating system to poll the network interface card to obtain packets from the ring buffer of the network interface card. In accordance with another embodiment, the network interface card is unable to interrupt the operating system on behalf of the ring buffer when in the polling mode for the ring buffer for packets having low priority, but continues to be able to interrupt the system when in the polling mode for the ring buffer for packets having high priority.","As described above, a NIC is capable of operating in two different modes for each ring buffer associated therewith. These modes may be entered upon initialization (e.g., boot up), upon instruction from an external source (e.g., CPU or driver associated with the NIC), or upon instruction internally from within the NIC. For instance, the NIC may choose to alter its mode of operation due to an external (e.g., busy or non-busy state) or internal factor (e.g., hardware error). It is also contemplated that the NIC may enter a mode of operation permanently (e.g., until further instruction) or temporarily (e.g., for a specified period of time). Thus, the CPU may instruct the NIC to enter the polling mode or the interrupt mode for one or more buffers for a specified period of time, after which it returns to its previous mode of operation. Alternatively, the CPU may instruct the NIC to enter a mode of operation for a particular ring buffer through the use of a specific instruction to enter that mode, or through the use of a toggle operation to cause the NIC to enter the mode of operation that is opposite to its current mode of operation.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 2","FIG. 5"],"b":["302","304"]},"In addition to initializing the NIC, the kernel of the operating system is also initialized with the number of ring buffers in each NIC. In accordance with one embodiment, this initialization includes a request from the IP layer to the NIC for the number of ring buffers in the NIC at . The IP layer (as well as the NIC) may then map each ring buffer (e.g., ring buffer identifier) to a CPU and its associated queue at . This may be performed for each NIC and its associated set of ring buffers. Alternatively, the IP layer may be configured with the number of ring buffers for each NIC. In this manner, the IP layer may maintain a mapping between the ring buffers and corresponding CPUs and the queues associated therewith.","When a packet is received by one of the ring buffers of a NIC at , an interrupt may be raised by the NIC (e.g., if it is in interrupt mode for that ring buffer). Assuming that the NIC is operating in interrupt mode for a particular ring buffer, the NIC asserts an interrupt at block . As described above, the interrupt may identify the ring buffer via a ring buffer identifier (in addition to a NIC identifier).","When an interrupt is received from the NIC, the kernel identifies the appropriate CPU and its associated software queue corresponding to the ring buffer identified in the interrupt at . For instance, the mapping may be ascertained by the IP layer.","A set of one or more packets are transferred from the identified ring buffer associated with the NIC to the queue associated with the CPU as identified in the mapping at block . This transfer may be performed by the IP layer. In accordance with one embodiment, the set of packets are transferred simultaneously. For instance, a pointer to a linked list of packets may be added to the queue of packets associated with the identified CPU.","The NIC then switches to the polling mode at block  for the ring buffer. For instance, the NIC may be switched to the polling mode for the ring buffer when the interrupt identifying the ring buffer is received from the NIC (or shortly thereafter) or prior to processing the packets in the queue mapped to the ring buffer. Specifically, in accordance with one embodiment, the kernel of the operating system instructs the NIC to enter the polling mode for the specified ring buffer. For instance, the NIC may be instructed to enter the polling mode from the interrupt mode for the ring buffer identified by the ring buffer identifier. Thereafter, the kernel of the operating system operates to poll the ring buffer of the NIC periodically.","After the packets are retrieved from the ring buffer of the NIC, the operating system kernel processes each of the packets in the queue of the CPU at block . Since the queue contains both inbound and outbound packets, the CPU equally prioritizes inbound and outbound packets.","Once all of the packets in the queue of the CPU have been processed, the operating system kernel polls the NIC at block  to determine if the ring buffer of the NIC received one or more packets. For instance, the operating system kernel, the driver and\/or the NIC may ascertain whether there are any packets in the identified ring buffer. This may be accomplished, for example, by querying the NIC with a specific ring buffer identifier.","If one or more packets have been received by the identified ring buffer of the network interface card as shown at block  (e.g., if any packets are in the ring buffer of the NIC), the one or more packets in the buffer of the network interface card are transferred to the corresponding queue associated with the CPU in accordance with the mapping as shown at block . The operating system continues to process each of the packets in the queue associated with the CPU at block .","If no more packets have been received by the identified ring buffer of the network interface card (e.g., no packets are in the ring buffer of the NIC) at block , the network interface card is instructed to switch from the polling mode to the interrupt mode for the identified ring buffer at block . For instance, as described above, the NIC may be instructed to switch from the polling mode to the interrupt mode for the ring buffer identified by the specific ring buffer identifier. The process then continues at block  to process interrupts as they are received.","As described above, both inbound and outbound packets present in the queue associated with the CPU are processed. These packets may be associated with multiple network connections as well as a single network connection.","The described embodiments may be implemented in a variety of programming languages. In accordance with one embodiment, the described embodiments are implemented in an object-oriented programming language. Languages that support object-oriented programming also accommodate and encourage multithreading in several ways. For example, Java\u2122 supports multithreading by including synchronization modifiers in the language syntax, by providing classes developed for multithreading that can be inherited by other classes, and by performing background \u201cgarbage collection\u201d (recovering data areas that are no longer being used) for multiple threads. Thus, in accordance with one embodiment, one or more threads are instantiated for execution of the described embodiments.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4","b":["402","404"]},"At the time the system is rebooted, the system is initialized at block  such that each ring buffer has an associated ring buffer identifier. Specifically, each ring buffer of a NIC may be mapped to a specific CPU, thereby associating the CPU's queue with the identified ring buffer of the NIC. This may be accomplished through the use of a common identifier, as described above. In addition, the system is initialized such that the NIC is in interrupt mode for one or more ring buffers (e.g., all ring buffers) of each NIC.","As described above, the IP layer may request the number of ring buffers from each NEC at block , which enables the IP layer to map each ring buffer of a NIC to a corresponding CPU and software queue associated therewith at block .","When a packet is received by one of the plurality of ring buffers of a NIC at block , the NIC raises an interrupt at block  including a ring buffer identifier (and a NIC identifier). When the NIC interrupts the CPU to process a packet, the kernel (e.g., IP layer) ascertains from the mapping which CPU and associated software queue corresponds to the identified ring buffer at block .","When the CPU receives notification of the interrupt, the CPU signals a worker thread (e.g., dedicated to the CPU) to process packets at block . The worker thread may be dedicated to processing all packets for the CPU, or merely dedicated to processing packets in the queue associated with the CPU. Specifically, the IP layer or worker thread transfers a set of packets in the identified ring buffer of the NIC to the queue of the CPU as identified in the mapping at block . In accordance with one embodiment, the worker thread calls a procedure GET_PACKETS with the ring buffer identifier (and optionally the NIC identifier) as a parameter to transfer the packets from the identified ring buffer of the appropriate NIC to the queue of the CPU. As described above, the ring buffer identifier maps the CPU and its associated queue to the identified ring buffer of the NIC. The worker thread then calls a procedure CHANGE_INTERRUPT at block  with the ring buffer identifier (and NIC identifier) as parameters and a boolean value to turn off interrupt processing for the ring buffer identified by the ring buffer identifier (and its associated CPU). In this manner, the NIC is instructed to enter the polling mode for the identified ring buffer. (The NIC remains in interrupt mode for the remaining ring buffers.) For instance, the NIC may be instructed to enter the polling mode for the identified ring buffer when the interrupt identifying the ring buffer is received or shortly thereafter. In addition, the worker thread processes each of the packets in the queue of the CPU at block .","When the worker thread is done processing all of the packets in the CPU's queue, it ascertains whether the ring buffer of the NIC has received any additional packets at block . For instance, the specified ring buffer of the NIC may be checked to determine whether there are any packets in the ring buffer.","If more packets have been received by the identified ring buffer of the NIC (e.g. there are any additional packets in the ring buffer) at block , the worker thread again calls the procedure GET_PACKETS at block  to transfer the set of packets in the identified ring buffer of the NIC to the queue associated with the CPU identified in the mapping, as described above. The process then continues as shown at block  and the worker thread processes each of the packets in the queue of the CPU.","Once it is determined that the identified ring buffer of the NIC has not received any additional packets (e.g., there are no additional packets in the identified ring buffer), the worker thread calls the procedure CHANGE_INTERRUPT at block  with the ring buffer identifier (and NIC identifier) and a boolean value as a parameter to turn on interrupt processing for the ring buffer identified by the ring buffer identifier (and its associated CPU). In this manner, the NIC is instructed to enter the interrupt mode for the identified ring buffer. (The mode of all remaining ring buffers remains unmodified.) Thus, the NIC is instructed to switch to the interrupt mode for the identified ring buffer when no packets are in the queue associated with the CPU identified in the mapping or the identified ring buffer of the NIC. The process then continues at block  as interrupts are received by the CPU.","In accordance with another embodiment, the worker thread is solely responsible for processing packets in the queue of the CPU. Thus, a second worker thread is instantiated for the purpose of transferring the packets from the ring buffer of the NIC to the queue of the CPU via the GET_PACKETS procedure. This second worker thread is also responsible for TCP\/IP processing of the packets. Once the chain of packets has been transferred to the queue of the CPU, the original worker thread processes the packets.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 5","FIG. 4"],"b":["406","502","504","506","508","510"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 6"},"The above-described embodiments enable a NIC and its mode of operation in association with a particular ring buffer to be controlled by an operating system kernel. Specifically, the ability of a NIC to interrupt a CPU on behalf of a particular ring buffer may be disabled or enabled. This mode of operation may be a general mode of operation. Alternatively, this mode of operation may be specific to the handling of packets received by the ring buffer of the NIC.","The present invention may be implemented on any suitable computer system.  illustrates a typical, general-purpose computer system  suitable for implementing the present invention. The computer system may take any suitable form.","The computer system  includes any number of processors  (also referred to as central processing units, or CPUs) that may be coupled to memory devices including primary storage device  (typically a read only memory, or ROM) and primary storage device  (typically a random access memory, or RAM). Both the primary storage devices ,  may include any suitable computer-readable media. The CPUs  may generally include any number of processors.","A secondary storage , which is typically a mass memory device, may also be coupled bi-directionally to CPUs  and provides additional data storage capacity. The secondary storage  is a computer-readable medium that may be used to store programs including computer code, data, and the like. Typically, the secondary storage  is a storage medium such as a hard disk which is generally slower than primary storage devices , .","The CPUs  may also be coupled to one or more input\/output devices  that may include, but are not limited to, devices such as video monitors, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styluses, voice or handwriting recognizers, or other well-known input devices such as, of course, other computers. Finally, the CPUs  optionally may be coupled to a computer or telecommunications network, e.g., an interne network or an intranet network, using a network connection as shown generally at . With such a network connection, it is contemplated that the CPUs  might receive information from the network, or might output information to the network in the course of performing the above-described method steps. Such information, which is often represented as a sequence of instructions to be executed using the CPUs , may be received from and outputted to the network, for example, in the form of a computer data signal embodied in a carrier wave. It is contemplated that one or more of the elements of the computer system  may be located remotely and accessed via a network.","Although illustrative embodiments and applications of this invention are shown and described herein, many variations and modifications are possible which remain within the concept, scope, and spirit of the invention, and these variations would become clear to those of ordinary skill in the art after perusal of this application. For instance, although the above-described embodiments are set forth in relation to the use of a single NIC driver, these embodiments are merely illustrative. Accordingly, the described embodiments may be implemented with respect to a variety of systems and may therefore be implemented with a greater number of drivers. For instance, a driver may be implemented in association with each NIC. Moreover, the above described process blocks are illustrative only. Therefore, the communication between the computer operating system and each NIC may be performed using alternate process blocks as well as alternate data structures. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the invention may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5","FIG. 4"],"b":"406"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
