---
title: System and method for executing workflow instance and modifying same during execution
abstract: A system and method according to which a workflow instance is modified during the execution thereof. In several exemplary embodiments, the workflow instance is an automated business process and the modifier of the workflow instance is a client user, such as a business user or analyst. In several exemplary embodiments, the workflow instance may be directed to assigning airline flights for crew members, routing aircraft, generating airline flight numbers, assigning airline flights for equipment, or any combination thereof.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09595014&OS=09595014&RS=09595014
owner: AMERICAN AIRLINES, INC.
number: 09595014
owner_city: Fort Worth
owner_country: US
publication_date: 20110923
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims the benefit of the filing date of U.S. provisional patent application No. 61\/386,395, filed Sep. 24, 2010, the entire disclosure of which is incorporated herein by reference.","The present disclosure relates in general to automated processes, or workflows, and in particular to a system and method for modifying a workflow instance on the fly, that is, during the execution of the workflow instance. In several exemplary embodiments, the workflow instance is an automated business process and the modifier of the workflow instance is a client user, such as a business user or analyst. In several exemplary embodiments, the workflow instance may be directed to assigning airline flights for crew members, routing aircraft, generating airline flight numbers, assigning airline flights for equipment, or any combination thereof.","In an exemplary embodiment, as illustrated in , a system is generally referred to by the reference numeral  and includes an editor module , an engine module , a database module , and a task module . The editor module  includes a workflow graphical user interface (GUI) , an editor GUI , and a repository GUI . The engine module  includes a workflow engine , a workflow library module , a validation rules engine , a versioning engine , a structured query language (SQL) engine , and data access objects (DAOs) , and . The engine module  is operably coupled to, and in communication with, the database module . In an exemplary embodiment, the engine module  is operably coupled to, and in communication with, each of the database module  and the task module . The database module  includes a database , a request message queue , and a reply message queue . The database module  is operably coupled to, and in communication with, the task module . The task module  includes a task manager module , a Sun Grid Engine (SGE) , and applications , and . In an exemplary embodiment, instead of, or in addition to the SGE , the system  may include one or more other schedulers\/load balancers.","As shown in , in an exemplary embodiment, the workflow GUI is in communication with the workflow engine via SOAP architecture. The workflow GUI is also in communication with each of the validation rules engine and the DAO . The editor GUI is in communication with each of the validation rules engine , the versioning engine , and the SQL engine . The repository GUI is in communication with each of the versioning engine and the SQL engine . The workflow engine is in communication with the workflow library module , which is in communication with the DAO . The versioning engine is in communication with the DAO . The DAOs , and are in communication with the database via an object-relational mapping (ORM) library, such as Hibernate. The SQL engine is in communication with the database via an application programming interface (API), such as Java Database Connectivity (JDBC). The engine module  is in communication with the request message queue , and the reply message queue is in communication with the engine module . The request message queue is in communication with the task manager module , which is in communication with the reply message queue . The task manager module is in communication with the SGE via a Java API. The SGE is in communication with each of the applications , and ","In an exemplary embodiment, as illustrated in  with continuing reference to , the editor module  is or includes a .Net client, which is in communication with the engine module  via a Web service. The engine module  is, includes, or is part of, an application server, such as a Java 2 Platform, Enterprise Edition (J2EE) application server. The workflow engine is in communication with the task manager module via each of the request message queue and the reply message queue . The task manager module uses the Java 2 Platform, Standard Edition (J2SE). The task manager is in communication with the SGE via a Java API. The task manager and the SQL engine are in communication with the database ","In an exemplary embodiment, as illustrated in  with continuing reference with , the editor GUI includes a parameter editor and a data editor . The parameter editor is in communication with the validation engine and the SQL engine . The data editor interfaces with an OD constraints validator and a dataset constraints validator . The data editor is in communication with the SQL engine , which is in communication with the database . The validation engine interfaces with a Java cup parser .","In an exemplary embodiment, as illustrated in  with continuing reference with , the system  further includes an SQL proxy adapter , which receives a dataset  from the editor module  and interfaces with the SQL engine ","In an exemplary embodiment, as illustrated in  with continuing reference to , the system  includes, and\/or is implemented with, one or more computers, hardware and\/or software systems, application servers, application platforms, and\/or any combination thereof. For example, the editor module  may include or use a client computer . The engine module  may include or use an application server . A firewall  may be used between the client computer  and the application server . The database module  may include or use a database server . The task manager module of the task module  may include or use a task manager server . The SGE of the task module  may include or use an SGE server . The applications , and of the task module  may include or use one or more business model servers .","In an exemplary embodiment, as illustrated in  with continuing reference to , a method of executing a workflow instance is generally referred to by the reference numeral . In several exemplary embodiments, the method  is implemented using the system  and\/or one or more components thereof. In an exemplary embodiment, the execution of a workflow instance refers to the execution of an automated process such as, for example, an automated business process. The workflow includes a plurality of steps or tasks, including initial task(s). In an exemplary embodiment, if the workflow is an automated business process, each task may represent, or include in whole or in part, a business model. A particular execution of the workflow may be referred to as a workflow instance. At any given time during the execution of the workflow instance, tasks that are currently being executed may be referred to as current tasks, tasks that have already been completed during the execution of the workflow instance may be referred to as predecessor tasks, and tasks that have yet to be completed during the execution of the workflow instance may be referred to as successor tasks. Each of the tasks may be independent of any other task, or may be dependent upon one or more other tasks. The following description of the method  contemplates that a complete workflow has already been generated using, for example, at least the editor module  including the GUIs , and , the validation rules engine , the versioning engine , the SQL engine , and the database module  including the database . In several exemplary embodiments, the method  is automatically executed in response to a trigger event, such as a request by a client, or business user or business analyst, via the editor module .","As shown in , the method  includes step , at which it is determined whether a workflow identifier exists in the database . If the workflow is new and an instance thereof has never been executed before, no workflow identifier exists in the database , and the workflow is initialized at step . At step , a graph  based on the workflow is automatically built.","An example of the graph  is shown in . The graph  includes at least tasks , , , , and . The tasks and are dependent upon the task . The task is dependent upon the task . The task is dependent upon the task . The task is dependent upon the task and the task ","Referring back to , after the graph  is built at the step , an input for a workflow library is created at step  and the initial workflow is built. As a result, a descriptor is initialized for the workflow at the step . The descriptor initialized at the step  is based on the graph , and is formatted for a particular workflow system such as, for example, OSWorkflow. The descriptor initialized at the step  describes all of the steps, states, transitions and functionality for the workflow. In an exemplary embodiment, the descriptor initialized at the step  is or includes an Extensible Markup Language (XML) file. The descriptor is cached at step , and an identifier for the workflow is initialized and saved at step . Eligible tasks are then executed by the workflow engine at step . A single task or multiple tasks may be executed at the step . The task(s) are then submitted to the request queue at step . In several exemplary embodiments, the steps , , , , , ,  and  are executed in whole or in part by the workflow engine ","At step , the task manager module executes the task(s), and the task(s) are completed at step . At step , a status message indicating that the task(s) have been completed is sent to the workflow engine via the reply queue . The workflow engine then advances to successor task(s) at step . At step , it is determined whether the task(s) that were completed at the step  were the final task(s) in the workflow. In an exemplary embodiment, the step  is executed by determining whether the successor task(s) advanced by the workflow engine are \u201cdummy\u201d or placeholder task(s), which indicate that the workflow has been completed. If so, then the execution of the workflow instance is completed at step .","If it is determined at the step  that the task(s) that were completed at the step  were not the final task(s) of the workflow, then it is automatically determined at step  whether the workflow has been changed on the fly, that is, during the execution of the workflow instance. The workflow can be changed by, for example, modifying existing task(s), adding new task(s), deleting task(s), rearranging task(s), and\/or any combination thereof. In an exemplary embodiment, the workflow can be changed during the execution of the workflow instance by a client user, such as a business user or business analyst; the client user may use the editor module  to change the workflow during the execution of the workflow instance, as will be described in further detail below in connection with .","If it is automatically determined at the step  that the workflow has not been changed during the execution of the workflow instance, then the steps , , ,  and  are repeated with the successor task(s), in accordance with the foregoing, followed by the steps  and  and then either the step  or the step .","If it is automatically determined at the step  that the workflow has been changed during the execution of the workflow instance, then a new graph is built at step , with the new graph including the predecessor tasks but reflecting the changes to the workflow. The graph built at the step  and the graph built at the step  are compared to each other at step , and it is determined whether the structures of the graphs are the same at the step . For example, at the step , if only data edits have been made to the workflow, the structure is the same. However, the structure is not the same if new tasks have been added to the workflow, tasks have been deleted from the workflow, dependencies among the tasks have changed, etc.","If it is determined at the step  that the structure of the graphs are the same, then the steps , , ,  and  are repeated with the successor task(s), in accordance with the foregoing, followed by the steps  and , and the step(s) subsequent thereto as applicable.","If it is determined at the step  that the structure of the graphs are not the same, then a new input for a workflow library is created at step  and the new or modified workflow is built. As a result, a new descriptor is initialized for the modified workflow at the step . The new descriptor initialized at the step  is based on the new graph built at the step . The new descriptor describes all of the steps, states, transitions and functionality for the workflow as modified on the fly, that is, during the execution of the workflow instance. In an exemplary embodiment, the new descriptor initialized at the step  is or includes an XML file. The new descriptor is cached at step , and an identifier for the workflow is initialized and saved at step .","At step , the state of the old workflow is copied to the new (or modified) workflow. More particularly, data corresponding to the predecessor (or completed) tasks is retrieved from, for example, the database . The successor (or to be completed) tasks in the modified workflow are revised in accordance with the data corresponding to the predecessor tasks. For example, if the successor tasks are dependent upon the predecessor tasks, the data and\/or parameters of the dependent successor tasks are updated accordingly. The predecessor tasks are then removed from the new (or modified) workflow.","At step , the old workflow is killed or otherwise rendered inapplicable. A new workflow identifier is obtained for the new workflow at step , and the new workflow identifier is saved at the step . The steps , , , , ,  and  are then repeated using the new workflow, along with the step(s) subsequent thereto as applicable.","If it is determined at the step  that a workflow identifier exists in the database , then the step  is automatically executed, as well as the steps of the method  subsequent to the step  as applicable.","In several exemplary embodiments, two or more of the steps of the method  are executed simultaneously, in parallel, etc. In an exemplary embodiment, one or more of the steps of the method  are executed during the execution of one or more other of the steps of the method . In an exemplary embodiment, one or more of the steps , , , , , , , , ,  and  are executed during the execution of one or more of the steps , , ,  and . In an exemplary embodiment, after the step  but during one or more of the steps , ,  and , the steps  and  are executed, followed by the execution of either the step  or, if necessary, the step  and the steps subsequent thereto. In an exemplary embodiment, the execution of the step  occurs after the steps , , ,  and  have been completed. In an exemplary embodiment, the execution of the step  and one or more of the steps subsequent thereto occur during one or more of the steps , , ,  and .","In view of the foregoing, it is clear that the method  enables repeated modification of the workflow instance during the execution of the workflow instance. The workflow can be changed while the workflow instance is executing. Business processes can be added or removed from a particular workflow instance while that workflow instance is executing. This provides enormous flexibility to business users and analysts, who can modify pending tasks in a workflow instance run without interrupting the run. New tasks or changes to not yet run tasks automatically become part of the running workflow instance. The workflow instance in execution does not need to be interrupted while changes are made to the workflow. The execution of the workflow instance is not suspended or made idle while changes are made to the workflow.","In an exemplary embodiment, as illustrated in  with continuing reference to , a method of using the editor module  to create and\/or modify a workflow and thus a workflow instance is generally referred to by the reference numeral .","To create a workflow instance in accordance with the method , a task is selected from a list of available tasks at step , and the selected task is added to the workflow at step . In an exemplary embodiment, the steps  and  are executed using the workflow GUI . At step , input parameters and\/or data are obtained from a repository, which may be stored in the database module  and\/or part of the database . In an exemplary embodiment, the input parameters and\/or data are obtained using the repository GUI . The input data and\/or parameters are edited and saved at step . In an exemplary embodiment, the input data and\/or parameters are edited and saved using the editor GUI . At step , it is determined whether any and all dependencies between the added tasks are correct and, if not, the correct dependencies are specified at step . In an exemplary embodiment, the correct dependencies are specified in the step  using the editor GUI . For example, the client user may use the editor GUI to indent task(s) to specify that the indented task(s) are dependent upon task(s) that are either not indented or indented to a lesser degree, as shown in, for example, . Conversely, the client user may use the GUI to un-indent task(s) to remove dependencies.","At step , it is determined whether there are any input validation errors. If so, the validation errors are corrected at step . In an exemplary embodiment, the validation rules engine determines whether there are any input validation errors at the step . In an exemplary embodiment, the validation errors are corrected at the step  by the client user via one or more of the workflow GUI , the editor GUI and the repository GUI . In an exemplary embodiment, a validation expression language is used to specify validation rules external to Java code in order to validate dependencies of tasks in the workflow, along with inputs, parameters and outputs of the tasks.","After the step , or if it is determined at the step  that there are no validation errors, then it is determined at step  whether additional tasks are needed. If so, then the steps , , , ,  are repeated, as well as one or more of the steps ,  and  as necessary.","If it is determined at the step  that additional tasks are not needed, then the workflow instance is executed at step . The workflow instance is executed at the step  in accordance with the method . In an exemplary embodiment, the client user initiates the execution of the workflow instance by inputting a request using the workflow GUI . In an exemplary embodiment, the workflow instance is executed in the step  in response to a trigger event such as, for example, a request by the client user via the module , an express or inferred event, or an expiration of a predetermined time period. In response to the trigger event of the client user initiating the execution of the workflow instance at the step , the workflow instance is automatically executed in accordance with the method  of .","In several exemplary embodiments, the client may decide to modify the workflow instance during the execution thereof. If so, then during the execution of the workflow instance at the step , the workflow instance is modified at step  without interrupting the execution of the workflow instance. In several exemplary embodiments, since the workflow instance is being executed in accordance with the method , the modification of the workflow instance during the execution of same at the step  is automatically detected at the step  of the method . In an exemplary embodiment, the workflow engine automatically detects the foregoing modification to the workflow instance made at the step  during the execution of the workflow instance at the step , which execution is carried out in accordance with the method . More particularly, the workflow engine automatically detects the foregoing modification at the step  of the method  of .","In an exemplary embodiment, after the execution of the workflow, the workflow is completed at step , which corresponds to the step  of the method . In several exemplary embodiments, after all desired modifications to the workflow instance have been made by the client user at the step  during the execution of the workflow instance at the step , or if no modifications have been made, then the execution of the workflow at the step  is ultimately completed and the client user may review the results thereof at step .","In an exemplary embodiment, after the step , it is determined at step  whether additional tasks are needed. If so, then at least the steps , , , , ,  and  are repeated, as well as one or more of the steps , ,  and  as necessary. Since the previous workflow instance has already been completed at the step , the step  must be repeated in order to execute the workflow instance incorporating any changes made as a result of the step . If it is determined at the step  that additional tasks are not needed, then the workflow remains completed at the step .","In an exemplary embodiment, as illustrated in  with continuing reference to , to modify the workflow instance at the step  of the method , it is determined at step whether task(s) need to be deleted from the workflow instance. If so, then the task(s) are deleted at the step . Before, during and\/or after the step , it is determined at step whether task(s) need to be added to the workflow instance. If so, then steps , , , and are executed. The steps , , , and are identical to the steps , , ,  and , respectively, of the method  and therefore will not be described in further detail. If it is determined at the step that the dependencies are not correct, then steps and , and possibly step , are executed. The steps , and are identical to the steps ,  and , respectively, of the method  and therefore will not be described in further detail. After the step or the step , step is executed. The step is identical to the step  of the method  and therefore will not be described in further detail. Before, during and\/or after the step , it is determined at step whether the task(s) need to be reordered and\/or rearranged. If so, then the task(s) are reordered and\/or rearranged at step . Before, during and\/or after the step , it is determined at step whether the dependencies among the task(s) need to be modified. If so, then the dependencies among the task(s) are modified at step . In an exemplary embodiment, after the step , it is determined whether there are any input validation errors and, if so, the validation errors are corrected. Before, during and\/or after the step , it is determined at step whether the task(s) themselves need to be modified. If so, then the task(s) themselves are modified at step . Before, during and\/or after the step , it is determined at step whether data and\/or parameters associated with the task(s) need to be modified. If so, then the data and\/or parameters are modified at step ","In several exemplary embodiments, the step  may be repeated beginning at step , , , , or . In several exemplary embodiments, the step  and\/or one or more steps thereof may be repeated as many times as desired, and\/or executed simultaneously and\/or sequentially.","In an exemplary embodiment, the step  is executed using the editor module , the workflow GUI , the editor GUI , the repository GUI , the database module , the database , and\/or any combination thereof.","In several exemplary embodiments, the step  is executed during the step . The step  is not repeated because the workflow instance has already been initially executed and its execution has continued during the modification to the workflow instance at the step . As noted above, the workflow engine automatically detects the foregoing modification to the workflow instance during the execution of the workflow instance in accordance with the method . More particularly, the workflow engine automatically detects the foregoing modification at the step  of the method  of .","In an exemplary embodiment, as illustrated in  with continuing reference to , a spreadsheet-like editor  may be used to configure inputs for the different tasks of a worker. The spreadsheet-like editor  may include or be part of one or more of the workflow GUI , the editor GUI and the repository GUI . The spreadsheet-like editor  may be executed using the module  and\/or the client computer . As shown in , a task  represented in the editor  may be selected, and inputs and\/or parameters associated with the task  may be edited with a viewer . The editor  and\/or the viewer  may be used during one or more of the steps , , , , , , , , ,  and .","In an exemplary embodiment, as illustrated in  with continuing reference to , a task  is edited with the viewer  during the execution of the workflow instance at the step  and thus the method . In particular, the task  is edited with the viewer  during the execution of a task  at the step  and thus the method .","In an exemplary embodiment, as illustrated in  with continuing reference to , the task  is executed after editing but still during the execution of the workflow instance at the step  and thus the method .","In an exemplary embodiment, as illustrated in  with continuing reference to , newly added tasks  and  are indicated to have validation errors using icons  and , respectively.","In an exemplary embodiment, as illustrated in  with continuing reference to , the tasks  and  are edited using the viewer  () to set proper dependencies. Thus, the icons  and  are removed.","In an exemplary embodiment, as illustrated in  with continuing reference to , the execution of the workflow instance is completed with the tasks  and .","In several exemplary embodiments, the workflow instances may be directed to assigning airline flights for crew members, routing aircraft, generating airline flight numbers, and assigning airline flights for equipment.","In an exemplary embodiment, as illustrated in  with continuing reference to , an illustrative node  for implementing one or more embodiments of one or more of the above-described networks, elements, methods and\/or steps, and\/or any combination thereof, is depicted. The node  includes a microprocessor , an input device , a storage device , a video controller , a system memory , a display , and a communication device all interconnected by one or more buses . In several exemplary embodiments, the storage device may include a floppy drive, hard drive, CD-ROM, optical drive, any other form of storage device and\/or any combination thereof. In several exemplary embodiments, the storage device may include, and\/or be capable of receiving, a floppy disk, CD-ROM, DVD-ROM, or any other form of computer-readable medium that may contain executable instructions. In several exemplary embodiments, the communication device may include a modem, network card, or any other device to enable the node to communicate with other nodes. In several exemplary embodiments, any node represents a plurality of interconnected (whether by intranet or Internet) computer systems, including without limitation, personal computers, mainframes, PDAs, smartphones and cell phones.","In several exemplary embodiments, one or more of the components of the system  include at least the node  and\/or components thereof, and\/or one or more nodes that are substantially similar to the node  and\/or components thereof. In several exemplary embodiments, one or more of the above-described components of the node  and\/or the system  include respective pluralities of same components.","In several exemplary embodiments, a computer system typically includes at least hardware capable of executing machine readable instructions, as well as the software for executing acts (typically machine-readable instructions) that produce a desired result. In several exemplary embodiments, a computer system may include hybrids of hardware and software, as well as computer sub-systems.","In several exemplary embodiments, hardware generally includes at least processor-capable platforms, such as client-machines (also known as personal computers or servers), and hand-held processing devices (such as smart phones, tablet computers, personal digital assistants (PDAs), or personal computing devices (PCDs), for example). In several exemplary embodiments, hardware may include any physical device that is capable of storing machine-readable instructions, such as memory or other data storage devices. In several exemplary embodiments, other forms of hardware include hardware sub-systems, including transfer devices such as modems, modem cards, ports, and port cards, for example.","In several exemplary embodiments, software includes any machine code stored in any memory medium, such as RAM or ROM, and machine code stored on other devices (such as floppy disks, flash memory, or a CD ROM, for example). In several exemplary embodiments, software may include source or object code. In several exemplary embodiments, software encompasses any set of instructions capable of being executed on a node such as, for example, on a client machine or server.","In several exemplary embodiments, combinations of software and hardware could also be used for providing enhanced functionality and performance for certain embodiments of the present disclosure. In an exemplary embodiment, software functions may be directly manufactured into a silicon chip. Accordingly, it should be understood that combinations of hardware and software are also included within the definition of a computer system and are thus envisioned by the present disclosure as possible equivalent structures and equivalent methods.","In several exemplary embodiments, computer readable mediums include, for example, passive data storage, such as a random access memory (RAM) as well as semi-permanent data storage such as a compact disk read only memory (CD-ROM). One or more exemplary embodiments of the present disclosure may be embodied in the RAM of a computer to transform a standard computer into a new specific computing machine. In several exemplary embodiments, data structures are defined organizations of data that may enable an embodiment of the present disclosure. In an exemplary embodiment, a data structure may provide an organization of data, or an organization of executable code.","In several exemplary embodiments, any networks and\/or one or more portions thereof, may be designed to work on any specific architecture. In an exemplary embodiment, one or more portions of any networks may be executed on a single computer, local area networks, client-server networks, wide area networks, internets, hand-held and other portable and wireless devices and networks.","In several exemplary embodiments, a database may be any standard or proprietary database software, such as Oracle, Microsoft Access, SyBase, or DBase II, for example. In several exemplary embodiments, the database may have fields, records, data, and other database elements that may be associated through database specific software. In several exemplary embodiments, data may be mapped. In several exemplary embodiments, mapping is the process of associating one data entry with another data entry. In an exemplary embodiment, the data contained in the location of a character file can be mapped to a field in a second table. In several exemplary embodiments, the physical location of the database is not limiting, and the database may be distributed. In an exemplary embodiment, the database may exist remotely from the server, and run on a separate platform. In an exemplary embodiment, the database may be accessible across the Internet. In several exemplary embodiments, more than one database may be implemented.","In several exemplary embodiments, a plurality of instructions stored on a computer readable medium may be executed by one or more processors to cause the one or more processors to carry out or implement in whole or in part the above-described operation of each of the above-described exemplary embodiments of the system , the method , the method , and\/or any combination thereof. In several exemplary embodiments, such a processor may include one or more of the microprocessor , any processor(s) that are part of the components of the system , and\/or any combination thereof, and such a computer readable medium may be distributed among one or more components of the system . In several exemplary embodiments, such a processor may execute the plurality of instructions in connection with a virtual computer system. In several exemplary embodiments, such a plurality of instructions may communicate directly with the one or more processors, and\/or may interact with one or more operating systems, middleware, firmware, other applications, and\/or any combination thereof, to cause the one or more processors to execute the instructions.","A method has been described that includes executing, using a computer system, a workflow instance based on a first structure of one or more tasks; automatically determining, using the computer system, whether the workflow instance has been modified during the execution thereof; and if the workflow instance has been modified during the execution thereof, then using the computer system to automatically continue to execute the workflow instance in accordance with the modification thereto. In an exemplary embodiment, the method includes initializing, using the computer system, a first descriptor associated with the first structure, the first descriptor including an XML file; wherein using the computer system to automatically continue to execute the workflow instance in accordance with the modification thereto includes building a second structure of one or more tasks, the second structure reflecting the modification to the workflow instance; determining whether the first and second structures are the same; and if the first and second structures are not the same, then: initializing a second descriptor associated with the second structure, the second descriptor including an XML file; and automatically continuing to execute the workflow instance based on the second structure. In an exemplary embodiment, the method includes caching, using the computer system, the first descriptor before executing the workflow instance based on the first structure; wherein using the computer system to automatically continue to execute the workflow instance in accordance with the modification thereto further includes if the first and second structures are not the same, then caching the second descriptor. In an exemplary embodiment, the method includes building, using the computer system, a first workflow in accordance with the first structure; wherein, during executing the workflow instance, a state is associated with the workflow instance before the modification thereto; and wherein using the computer system to automatically continue to execute the workflow instance in accordance with the modification thereto includes building a second structure of one or more tasks, the second structure reflecting the modification to the workflow instance; determining whether the first and second structures are the same; and if the first and second structures are not the same, then: building a second workflow in accordance with the second structure; copying the state of the workflow instance to the second workflow; and automatically continuing to execute the workflow instance based on the second workflow and thus the second structure. In an exemplary embodiment, the method includes initializing, using the computer system, a first descriptor associated with the first structure, the first descriptor including an XML file; and caching, using the computer system, the first descriptor before executing the workflow instance based on the first structure; wherein using the computer system to automatically continue to execute the workflow instance in accordance with the modification thereto further includes if the first and second structures are not the same, then: initializing a second descriptor associated with the second structure, the second descriptor including an XML file; and caching the second descriptor.","An apparatus has been described that includes one or more processors; a non-transitory computer readable medium operably coupled to the one or more processors; and a plurality of instructions stored on the computer readable medium and executable by the one or more processors, the plurality of instructions including instructions that cause the one or more processors to execute a workflow instance based on a first structure of one or more tasks; instructions that cause the one or more processors to automatically determine whether the workflow instance has been modified during the execution thereof; and instructions that, if the workflow instance has been modified during the execution thereof, cause the one or more processors to automatically continue to execute the workflow instance in accordance with the modification thereto. In an exemplary embodiment, the plurality of instructions further includes instructions that cause the one or more processors to initialize a first descriptor associated with the first structure, the first descriptor including an XML file; wherein instructions that cause the one or more processors to automatically continue to execute the workflow instance in accordance with the modification thereto include instructions that cause the one or more processors to build a second structure of one or more tasks, the second structure reflecting the modification to the workflow instance; instructions that cause the one or more processors to determine whether the first and second structures are the same; and instructions that, if the first and second structures are not the same, cause the one or more processors to: initialize a second descriptor associated with the second structure, the second descriptor including an XML file; and automatically continue to execute the workflow instance based on the second structure. In an exemplary embodiment, the plurality of instructions further includes instructions that cause the one or more processors to cache the first descriptor before executing the workflow instance based on the first structure; wherein instructions that cause the one or more processors to automatically continue to execute the workflow instance in accordance with the modification thereto further include instructions that, if the first and second structures are not the same, cause the one or more processors to cache the second descriptor. In an exemplary embodiment, the plurality of instructions further includes instructions that cause the one or more processors to build a first workflow in accordance with the first structure; wherein, during executing the workflow instance, a state is associated with the workflow instance before the modification thereto; wherein instructions that cause the one or more processors to automatically continue to execute the workflow instance in accordance with the modification thereto include instructions that cause the one or more processors to build a second structure of one or more tasks, the second structure reflecting the modification to the workflow instance; instructions that cause the one or more processors to determine whether the first and second structures are the same; and instructions that, if the first and second structures are not the same, cause the one or more processors to: build a second workflow in accordance with the second structure; copy the state of the workflow instance to the second workflow; and automatically continue to execute the workflow instance based on the second workflow and thus the second structure. In an exemplary embodiment, the plurality of instructions further includes instructions that cause the one or more processors to initialize a first descriptor associated with the first structure, the first descriptor including an XML file; and instructions that cause the one or more processors to cache the first descriptor before executing the workflow instance based on the first structure; and wherein instructions that cause the one or more processors to automatically continue to execute the workflow instance in accordance with the modification thereto further include instructions that, if the first and second structures are not the same, cause the one or more processors to: initialize a second descriptor associated with the second structure, the second descriptor including an XML file; and cache the second descriptor. In an exemplary embodiment, the apparatus includes an engine module, a database module, and a task module; wherein the one or more processors are part of one or more of the engine, database and task modules; and wherein the computer readable medium is part of one or more of the engine, database and task modules. In an exemplary embodiment, the database module includes a database, a request message queue, and a reply message queue; wherein the task module includes a task manager in communication with the database; and wherein the engine module includes a workflow engine in communication with the task manager via each of the request message queue and the reply message queue; and a structured query language (SQL) engine in communication with the database. In an exemplary embodiment, the apparatus includes an editor module in communication with the engine module, the editor module including a workflow graphical user interface (GUI) in communication with the workflow engine; an editor GUI in communication with the SQL engine; and a repository GUI in communication with the SQL engine. In an exemplary embodiment, the apparatus includes an SQL proxy adapter in communication with the SQL engine, wherein the SQL proxy adapter is adapted to receive a dataset from the editor module and interface with the SQL engine. In an exemplary embodiment, the plurality of instructions further includes instructions that cause the one or more processors to initialize a first descriptor associated with the first structure, the first descriptor including an XML file; and instructions that cause the one or more processors to cache the first descriptor before executing the workflow instance based on the first structure; wherein instructions that cause the one or more processors to automatically continue to execute the workflow instance in accordance with the modification thereto include instructions that cause the one or more processors to build a second structure of one or more tasks, the second structure reflecting the modification to the workflow instance; instructions that cause the one or more processors to determine whether the first and second structures are the same; and instructions that, if the first and second structures are not the same, cause the one or more processors to: initialize a second descriptor associated with the second structure, the second descriptor including an XML file; cache the second descriptor; and automatically continue to execute the workflow instance based on the second structure; wherein: the apparatus further includes an engine module, a database module, and a task module; the one or more processors are part of one or more of the engine, database and task modules; the computer readable medium is part of one or more of the engine, database and task modules; the database module includes a database, a request message queue, and a reply message queue; the task module includes a task manager in communication with the database; the engine module includes a workflow engine in communication with the task manager via each of the request message queue and the reply message queue, and a structured query language (SQL) engine in communication with the database; and the apparatus further includes a workflow graphical user interface (GUI) in communication with the workflow engine, an editor GUI in communication with the SQL engine, and a repository GUI in communication with the SQL engine.","A system has been described that includes means for executing a workflow instance based on a first structure of one or more tasks; means for automatically determining whether the workflow instance has been modified during the execution thereof; and means for if the workflow instance has been modified during the execution thereof, then automatically continuing to execute the workflow instance in accordance with the modification thereto. In an exemplary embodiment, the system includes means for initializing a first descriptor associated with the first structure, the first descriptor including an XML file; wherein means for automatically continuing to execute the workflow instance in accordance with the modification thereto includes means for building a second structure of one or more tasks, the second structure reflecting the modification to the workflow instance; means for determining whether the first and second structures are the same; and means for if the first and second structures are not the same, then: initializing a second descriptor associated with the second structure, the second descriptor including an XML file; and automatically continuing to execute the workflow instance based on the second structure. In an exemplary embodiment, the system includes means for caching the first descriptor before executing the workflow instance based on the first structure; wherein means for automatically continuing to execute the workflow instance in accordance with the modification thereto further includes means for if the first and second structures are not the same, then caching the second descriptor. In an exemplary embodiment, the system includes means for building a first workflow in accordance with the first structure; wherein, during executing the workflow instance, a state is associated with the workflow instance before the modification thereto; and wherein means for automatically continuing to execute the workflow instance in accordance with the modification thereto includes means for building a second structure of one or more tasks, the second structure reflecting the modification to the workflow instance; means for determining whether the first and second structures are the same; and means for if the first and second structures are not the same, then: building a second workflow in accordance with the second structure; copying the state of the workflow instance to the second workflow; and automatically continuing to execute the workflow instance based on the second workflow and thus the second structure. In an exemplary embodiment, the system includes means for initializing a first descriptor associated with the first structure, the first descriptor including an XML file; and means for caching the first descriptor before executing the workflow instance based on the first structure; wherein means for automatically continuing to execute the workflow instance in accordance with the modification thereto further includes means for if the first and second structures are not the same, then: initializing a second descriptor associated with the second structure, the second descriptor including an XML file; and caching the second descriptor.","It is understood that variations may be made in the foregoing without departing from the scope of the present disclosure. For example, instead of, or in addition to transportation transactions often conducted in the course of airline industry business, aspects of the present disclosure are applicable and\/or readily adaptable to transportation transactions conducted in other industries, including rail, bus, cruise and other travel or shipping industries, rental car industries, hotels and other hospitality industries, entertainment industries, and other industries. In an exemplary embodiment, aspects of the present disclosure are readily applicable and\/or readily adaptable to a shipping travel leg in which a ship travels from one port to one or more other ports. In an exemplary embodiment, aspects of the present disclosure are readily applicable and\/or readily adaptable to a trucking travel leg during which a truck travels from one city to one or more other cities. In an exemplary embodiment, aspects of the present disclosure are readily applicable and\/or readily adaptable to a rail travel leg during which a train travels from one city or station to one or more other cities or stations. In an exemplary embodiment, aspects of the present disclosure are applicable and\/or readily adaptable to a wide variety of transportation transactions such as, for example, an airline sequence or itinerary (i.e., a plurality of airline flights), a travel leg of an airline sequence or itinerary (i.e., a single airline flight), an airline block, and\/or any combination thereof.","In several exemplary embodiments, the elements and teachings of the various illustrative exemplary embodiments may be combined in whole or in part in some or all of the illustrative exemplary embodiments. In addition, one or more of the elements and teachings of the various illustrative exemplary embodiments may be omitted, at least in part, and\/or combined, at least in part, with one or more of the other elements and teachings of the various illustrative embodiments.","Any spatial references such as, for example, \u201cupper,\u201d \u201clower,\u201d \u201cabove,\u201d \u201cbelow,\u201d \u201cbetween,\u201d \u201cbottom,\u201d \u201cvertical,\u201d \u201chorizontal,\u201d \u201cangular,\u201d \u201cupwards,\u201d \u201cdownwards,\u201d \u201cside-to-side,\u201d \u201cleft-to-right,\u201d \u201cright-to-left,\u201d \u201ctop-to-bottom,\u201d \u201cbottom-to-top,\u201d \u201ctop,\u201d \u201cbottom,\u201d \u201cbottom-up,\u201d \u201ctop-down,\u201d etc., are for the purpose of illustration only and do not limit the specific orientation or location of the structure described above.","In several exemplary embodiments, while different steps, processes, and procedures are described as appearing as distinct acts, one or more of the steps, one or more of the processes, and\/or one or more of the procedures may also be performed in different orders, simultaneously and\/or sequentially. In several exemplary embodiments, the steps, processes and\/or procedures may be merged into one or more steps, processes and\/or procedures.","In several exemplary embodiments, one or more of the operational steps in each embodiment may be omitted. Moreover, in some instances, some features of the present disclosure may be employed without a corresponding use of the other features. Moreover, one or more of the above-described embodiments and\/or variations may be combined in whole or in part with any one or more of the other above-described embodiments and\/or variations.","Although several exemplary embodiments have been described in detail above, the embodiments described are exemplary only and are not limiting, and those skilled in the art will readily appreciate that many other modifications, changes and\/or substitutions are possible in the exemplary embodiments without materially departing from the novel teachings and advantages of the present disclosure. Accordingly, all such modifications, changes and\/or substitutions are intended to be included within the scope of this disclosure as defined in the following claims. In the claims, any means-plus-function clauses are intended to cover the structures described herein as performing the recited function and not only structural equivalents, but also equivalent structures."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 5","FIGS. 1-4"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 6","FIGS. 1-4"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 8A","FIG. 6","FIGS. 1-4"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 8B","FIG. 8A"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIGS. 9-15","FIG. 6","FIG. 8A"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
