---
title: Media foundation media sink
abstract: A method and system provides interfaces, data structures and events for representing a “sink” of multimedia data to interact with objects in a multimedia system to control multimedia objects. The interfaces and data structures enable efficient management for media objects that must interface directly with each other. One embodiment is directed to providing a common interface and a single API to a plurality of media objects. In an embodiment, the API is a control layer that isolates the media objects from each other and provides a single point of control, allowing media objects to be added or removed without affecting any other media objects. The control layer allows users to become familiar with only one API instead of many thereby facilitating the tasks of programming and documentation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07725920&OS=07725920&RS=07725920
owner: Microsoft Corporation
number: 07725920
owner_city: Redmond
owner_country: US
publication_date: 20030627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to computing and, more particularly, relates to handling multimedia data in a computing environment.","As the abilities of computers expand into entertainment genres that once required separate electronic components, increased efficiency and user-friendliness is desirable. One solution is Microsoft's\u00ae DirectShow\u00ae, which provides playback of multimedia streams from local files or Internet servers, capture of multimedia streams from devices, and format conversion of multimedia streams. DirectShow enables playback of video and audio content of file types such as MPEG, Apple\u00ae QuickTime\u00ae, Audio-Video Interleaved (AVI), and WAV.","DirectShow includes a system of pluggable filter components. Filters are objects that support DirectShow interfaces and can operate on streams of data by reading, copying, modifying and writing data to a file. The basic types of filters include a source filter, which takes the data from some source, such as a file on disk, a satellite feed, an Internet server, or a VCR, and introduces it into the filter graph which is a connection of filters. The filter graph provides a transform filter, which converts the format of the data, a sink and source filter which receives data and transmits the data; and a rendering filter, which renders the data, such as rendering the data to a display device. The data could also be rendered to any location that accepts media. Other types of filters included in DirectShow include effect filters, which add effects without changing the data type, and parser filters, which understand the format of the source data and know how to read the correct bytes, create times stamps, and perform seeks.","Therefore, all data passes from filter to filter along with a good deal of control information. When filters are connected using the pins, a filter graph is created. To control the data flow and connections in a filter graph, DirectShow includes a filter graph manager. The filter graph manager assists in assuring that filters are connected in the proper order, but the data and much of the control do not pass through the filter graph manager. Filters must be linked appropriately. For example, the filter graph manager must search for a rendering configuration, determine the types of filters available, link the filters appropriate for a given data type and provide an appropriate rendering filter.","Although filters allow a great deal of reuse of programs, the use of filters also creates unanticipated problems. One of the problems created by filters is the large number of application programming interfaces (APIs) required by the filters. Each filter essentially has a separate API. Therefore, a given filter must be capable of interfacing to an API for every filter to which the filter might attach. Also, the use of filters makes the problem of shutting down a given filter problematic. When a given filter in a graph is shut down, any filter interfacing with the given filter must shut down any associated interfaces. In general, programming a filter to gracefully handle the loss of an interface is difficult as the state of the filter can be unknown when the interface is lost. The loss of interfaces therefore tends to lead to unpredicted behavior in the filters and ultimately to ill-behaved programs. What is needed is a system and method and associated data structures and interfaces that avoid unpredicted behavior.","According to embodiments of the present invention, a method and system provides interfaces, data structures and events for representing a \u201csink\u201d of multimedia data to interact with objects in a multimedia system to control multimedia objects. The interfaces and data structures enable efficient management for media objects that must interface directly with each other. One embodiment is directed to providing a common interface and a single API to a plurality of media objects.","In an embodiment, a software layer, referred to as the control layer, isolates the objects from each other and provides a single point of control, allowing objects to be added or removed without affecting any other object. The control layer allows users to become familiar with only one API instead of many thereby facilitating the tasks of programming and documentation.","The control layer provides methods and data structures that enable addition and removal of sinks objects in isolation from other objects as well as other functions. In another embodiment, the control layer enables throttling of sink processes that interfaces to objects affected by the throttling. Additionally, interfaces provide coordination of key events, control of affected objects and efficient changing of data flow from one sink object to another.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers hereto illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. For example, in the present invention, the computer system  may comprise the source machine from which data is being migrated, and the remote computer  may comprise the destination machine. Note however that source and destination machines need not be connected by a network or any other means, but instead, data may be migrated via any media capable of being written by the source platform and read by the destination platform or platforms.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.","Referring to , a block diagram illustrates a media foundation system  including main components, a media source , media processor  and media sink . Media foundation system  is shown coupled to application  to receive and send media streams. Media foundation system  includes media engine , media session  and topology loader . Data flows through the media foundation  by beginning with a media source , flowing through the media processor  and an output at media sink . Media session  guides the flow of data from the media processor to the media sinks and manages events that occur in any of the components in use, and the topology loader  generates a topology to transform the data from one media type to another. The media foundation system  provides interfaces and a layout for connecting streaming media objects.","Turning to , interactions between components in media foundation system  are shown in further detail. Media foundation is shown with control layer , providing a single interface to all objects. As shown in , media engine  communicates with a core layer  to direct a pipeline through one or more multimedia transforms and to the media sink. Objects, with only a few exceptions, are controlled, activated, removed, and sink and source information through media engine .","Objects run at the core layer . The core layer includes media source component , media processor , and media sink component . Stream sources  operate under the control of media source component ; and stream sinks  operate under the control of media sink . Stream sources  transfer multimedia data from storage or capture devices to control layer  and stream sinks  transfer multimedia data from media engine  to rendering or storage devices (not shown). Media source component  implements state machines which provide control of stream sources . Media sink component  implements state machines which provide control of stream sinks . In each case, the state processing and data movement can be separated via instructions for state changes to the data.","Each of media source , media sink  and transforms , together with stream sources  and stream sinks  are objects that make up part of core layer . The objects are programs which implement a predefined function. Source component  and stream sources  provide either captured or retrieved multimedia data and provide this data to media engine . The sources of data include but are not limited to a disk such as a hard drive, CD, or DVD, the internet, random access memory (RAM), video RAM, video cameras, scanners, still image cameras, and microphones. Media sink  includes objects which control the transfer of data in stream sinks . Stream sinks  consist of objects which accept data from control layer  for storage or rendering. Sinks of data include but are not limited to a disk such as a hard drive, writable CD, or writable DVD, the internet, random access memory (RAM), video RAM, video cameras, printers, display devices such as monitors, and speakers. The data for both the media source  and media sink  can be transported over many media including but not limited to Ethernet, wireless networks, analog cables before digitization, USB, IEEE 1384, parallel port, serial port, and disk interfaces.","Transforms  include objects which manipulate the data. These transforms consist of encoders, decoders, splitters, multiplexers, audio processing such as bass and treble control for adding effects such as reverb, video processing such as adjusting color masks, image sharpening, and contrast or brightness control. The encoders and decoders handle both audio, video, and image data. Video data types can include MPEG, Apple Quicktime, AVI, and H.263. Note that many of the video standards are true multimedia standards in that these standards have provisions to transfer both audio and video. Image data formats include JPEG, GIF, Fax, and Tiff. Audio standards can include MP3, PCM, ADPCM, ASF, WMV, and WMA as well as standards for CD playback. Transforms  can be used to convert data from one format to another. For example, it is possible to convert a JPEG image into a format suitable for display on a monitor.","Media sink  can generate events. Events are messages from media sink  to media engine  that convey information regarding a change in status of an object in the media sink. Tables 1 and 2 list exemplary events which can be defined for media sink . As will be appreciated by one of skill in the art, the events disclosed herein are exemplary in nature and explained below to enable one of skill in the art with the benefit of this disclosure to change the events in accordance with design requirements.",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Summary of events reported by sink objects."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MEStreamSinkStarted","Indicates the start of a data stream."]},{"entry":["MEStreamSinkStopped","Indicates the end of a data stream."]},{"entry":["MEStreamSinkPaused","Indicates that a data sink has been paused."]},{"entry":["MEStreamSinkMarker","Indicates that the stream sink has reached a"]},{"entry":[{},"marker that was placed on it by the caller."]},{"entry":[{},"This is often used to indicate the end of a"]},{"entry":[{},"segment of stream data."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Media sink events."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MEMediaSinkInvalidated","The media sink sends this"]},{"entry":[{},{},"command when the media sink is no"]},{"entry":[{},{},"longer able to successfully sink data."]},{"entry":[{},"MESinkSwitchRequested","Switch to a different media sink."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Media sink  provides several functions. First, media sink  provides a general interface on a per stream basis. An individual stream can be used for any of a variety of media destinations. Providing an interface on a per stream basis with a single interface greatly simplifies system design by providing a consistent interface to each stream and yet providing independence of the control of each stream. From the perspective of control layer , each stream appears the same. The objects in media sink  provide an abstraction layer that can make the control of the streams of different formats and from different sources appear identical to media engine .","Stream sink  provides for format negotiation. More specifically, stream sink  accepts data in one or more formats or media types. Stream sink  further provides an interface by which media engine  can find out what formats stream sink  supports and inform other components, such as media engine  the format to be used, which is referred to as \u201cformat negotiation\u201d.","Media sink  can also provide a clock for each stream sink . The clock can be used to control the rate at which a stream sink  moves data out of control layer . The clock can be controlled from the control layer by sending commands to media engine . Changing the clock rate therefore changes the rate at which data is delivered to the control layer. Controlling the clock rate can be used to implement such control as fast forward, frame advance, rewind as well as to provide general control of data rate delivery for normal rate playback of audio and video streams.",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Stream sink commands."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IMFStreamSink Interface",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["IMFStreamSink::GetMediaSink","Get a pointer to the"]},{"entry":[{},"media sink to which the"]},{"entry":[{},"steam sink belongs."]},{"entry":["IMFStreamSink::GetIdentifier","Get the identifier of a media sink"]},{"entry":["IMFStreamSink::GetMediaTypeHandler","Get the type of media in use"]},{"entry":["IMFStreamSink::ProcessSample","Process a sample"]},{"entry":["IMFStreamSink::PlaceMarker","Place a marker in the"]},{"entry":[{},"data stream in order to"]},{"entry":[{},"determine when the Stream"]},{"entry":[{},"Sink has finished"]},{"entry":[{},"processing all data it"]},{"entry":[{},"has received up to this"]},{"entry":[{},"point. Can also tell the"]},{"entry":[{},"stream sink about the"]},{"entry":[{},"end of the current"]},{"entry":[{},"segment of data."]},{"entry":["IMFStreamSink::Flush","Remove all data that"]},{"entry":[{},"has not been processed."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Media sink interface control commands."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IMFMediaSink Interface",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["IMFMediaSink::GetCharacteristics","Retrieve the characteristics"]},{"entry":[{},"of the media sink"]},{"entry":["IMFMediaSink::AddStreamSink","Add a stream sink"]},{"entry":["IMFMediaSink::RemoveStreamSink","Remove a stream sink"]},{"entry":["IMFMediaSink::GetStreamSinkCount","Reports the number of stream"]},{"entry":[{},"sinks associated with a"]},{"entry":[{},"given media sink."]},{"entry":["IMFMediaSink::GetStreamSinkByIndex","Get a pointer to a stream sink"]},{"entry":[{},"associated with a media sink by"]},{"entry":[{},"the index in the media sink."]},{"entry":["IMFMediaSink::GetStreamSinkByID","Get a pointer to a stream sink"]},{"entry":[{},"associated with a media sink by"]},{"entry":[{},"the stream sink identifier."]},{"entry":["IMFMediaSink::SetPresentationClock","Set the rate of the presentation"]},{"entry":[{},"clock."]},{"entry":["IMFMediaSink::GetPresentationClock","Retrieve the presentation clock."]},{"entry":["IMFMediaSink::Shutdown","Media sink should finish"]},{"entry":[{},"processing and stop."]},{"entry":["IMFPresentationTimeSource::GetTime","Get the current time from the"]},{"entry":[{},"media sink."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Sample allocation commands."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IMFSampleAllocator Interface",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["GetCharacteristics","Retrieve characteristics of the sample"]},{"entry":[{},"allocator."]},{"entry":["BeginAllocateResources","Asynchronous method to request that"]},{"entry":[{},"the sample allocator acquire whatever"]},{"entry":[{},"resources it needs to do sample"]},{"entry":[{},"allocation."]},{"entry":["EndAllocateResources","End the asynchronous resource"]},{"entry":[{},"allocation process"]},{"entry":["FreeResources","Free all sample allocation resources"]},{"entry":["GetMaxAvailableSampleCount","Retrieve the maximum number of"]},{"entry":[{},"samples in a sample allocation."]},{"entry":["AllocateSample","Synchronous method to request a"]},{"entry":[{},"sample."]},{"entry":["BeginAllocateSample","Asynchronous method to request a"]},{"entry":[{},"sample."]},{"entry":["EndAllocateSample","Retrieve samples requested by"]},{"entry":[{},"AllocateSample."]},{"entry":["CancelPendingAllocations","Cancel all allocations."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Control layer  can signal the stream sink that discontinuities in the stream data exist by placing the appropriate marker in the stream. The signaling of a discontinuity allows the stream sink to take corrective action when possible and conceal errors or correct formats when corrective action is not possible. Control layer  is further configured to notify stream sink  to expect a jump in the timestamps on samples.","The described architecture allows the type negotiation to occur separate from the stream sink. Separation is possible because the stream sinks and the type negotiation both take place in control layer  since the type information tends to change slowly and, as well, the type information is often embedded in the stream.","Consider the following example in which a JPEG image on a hard drive is to be displayed on a monitor. Application program  makes a request of the control layer  which will pass this request to media engine . Media engine  will start several objects including a media source component , which reads the image from disk, a transform  object to convert the image from JPEG to a format suitable for the video display device, and media sink  object to transfer the converted data to the video RAM.","Referring now to , a flow diagram illustrates a method according to an embodiment for processing media data. More specifically, block  provides for receiving one or more media data streams via a control layer. For example, referring to , application  or another source of media streams passes media data streams to control layer . Block  provides for modifying the data streams in one or more stream sinks.  illustrates stream sinks . As shown, stream sinks  are shown coupled to both control layer  and to media sink . Stream sinks  receive and respond to both control layer  and media sink . Block  provides for implementing one or more state machines to control a state of transfer of the media data streams in a media sink. The control can be dictated by the control layer . For example, media sink  implements one or more state machines to control the transfer of the media data streams. The media sink  implements the state machines according to control signals received from control layer . Block  provides for using the state of the media data streams to modify the functionality of the stream sinks. The state of the media data streams can be passed to the control layer  via media sink  or directly from stream sinks  to control layer . By providing the state machines in media sink , control of stream sinks  modification of the media data streams is dynamic due to the separation of the state machines from the control layer . Block  provides for throttling the processing via stream sinks. In one embodiment, media sink  and stream sinks  provide notifications for events to control layer . Thus, if a media sink  is invalid or if there is a switch to a second media sink , the event is known to control layer  via a notification. A media data stream can switch to a second media sink upon a detection of invalid media sink. In one embodiment media sink  can direct multiplexing of two or more of the media data streams into a same media sink. In another embodiment, stream sinks  throttle the progress of data through the Media Foundation pipeline by controlling the rate at which samples get allocated.","Control layer  directs control and timing for media sink  and stream sinks  via media engine . Media engine  can further direct format negotiation to be performed in stream sinks  and format the media data streams as appropriate for an output device, or other sink.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those skilled in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
