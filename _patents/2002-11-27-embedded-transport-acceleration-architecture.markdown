---
title: Embedded transport acceleration architecture
abstract: An apparatus and a system may include an adaptation module, a plurality of Direct Transport Interfaces (DTIs), a DTI accelerator, and a Transport Control Protocol/Internet Protocol (TCP/IP) accelerator. The adaptation module may provide a translated sockets call from an application program to one of the DTIs, where an included set of memory structures may couple the translated sockets call to the DTI accelerator, which may in turn couple the set of memory structures to the TCP/IP accelerator. An article may include data causing a machine to perform a method including: receiving an application program sockets call at the adaptation module, deriving a translated sockets call from the application program sockets call, receiving the translated sockets call at a DTI, coupling the translated sockets call to a DTI accelerator using a set of memory structures in the DTI, and coupling the set of memory structures to a TCP/IP accelerator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07305493&OS=07305493&RS=07305493
owner: Intel Corporation
number: 07305493
owner_city: Santa Clara
owner_country: US
publication_date: 20021127
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND INFORMATION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION"],"p":["The present invention relates generally to computer operating systems, interfaces, and communications protocols. More particularly, the present invention relates to apparatus, methods, and computer programs utilizing hardware and software mechanisms to speed up processing of Internet Protocol (IP)-based storage, networking, and inter-processor Input\/Output (I\/O) operations.","The Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite serves as something of a de facto standard for Internet related communications. The suite enables businesses to merge differing physical networks while giving users access to a common set of services. TCP\/IP also provides interoperability between a diversity of networks and other equipment supplied by many different vendors. For more information regarding TCP\/IP, see Request For Comment (RFC) 791, \u201cInternet Protocol, Darpa Internet Program Protocol Specification\u201d, September 1981, and RFC 793, \u201cTransmission Control Protocol, Darpa Internet Program Protocol Specification\u201d, September 1981.","Recently, the communications and computing industries have made significant advances toward integrating storage, networking, and inter-processor I\/O using other, similar common technologies and protocols. Thus, the movement toward convergence of many, and possibly all, I\/O functions using TCP\/IP, is growing. If successfully accomplished, convergence holds great potential for reducing the total cost of building, managing, and maintaining large data centers, as well as the distribution of data, due to the ubiquitous, interoperable, and scalable characteristics of IP related technologies.","TCP\/IP was originally designed for relatively low speed networks, at least by current standards, and thus protocol processing was typically performed using software. In addition, TCP\/IP has historically only dealt with networked I\/O. However, current I\/O server bandwidths are roughly three to five orders of magnitude greater than before, and the inclusion of storage and inter-processor I\/O adds new challenges that usually cannot be adequately handled by software protocol processing alone. Thus, hardware acceleration of TCP\/IP processing becomes desirable in order to support ever-increasing server I\/O bandwidths, as well as an end goal of converging server I\/O using TCP\/IP.","In the following detailed description of various embodiments of the invention, reference is made to the accompanying drawings which form a part hereof, and in which are shown by way of illustration, and not of limitation, specific embodiments in which the invention may be practiced. In the drawings, like numerals describe substantially similar components throughout the several views. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived therefrom, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. The following detailed description, therefore, is not to be taken in a limiting sense, and the scope of various embodiments of the invention is defined only by the appended claims, along with the full range of equivalents to which such claims are entitled.","The Embedded Transport Acceleration (ETA) concept espoused by various embodiments of the invention seeks to utilize standard Internet protocols for the majority of server storage, networking, and inter-processor I\/O. Thus, some embodiments of the invention may include servers, such as the I\/O hubs of high-end system architecture and the Memory-I\/O hubs of volume system architecture. However, it should be noted that some embodiments of the invention may be used in other areas, such as in conjunction with the wide spectrum of special purpose appliances and extended function routers that make up the infrastructure of the Internet, as well as the data centers that attach to the Internet. Other uses are also possible, since some embodiments of the invention may assist in offloading TCP\/IP related processing, and in reducing additional Operating System (OS) overhead associated with interfacing application and services programs to I\/O hardware.","In some embodiments, each application or service level program may open one or more direct transport interfaces (DTIs) with ETA hardware (described below). Then each Application Programming Interface (API) may be implemented as an adaptation layer that translates the API calls into DTI setup, control, and access operations. The ETA Adaptation Layer (ETA-AL) interfaces with the OS, the ETA kernel level agents (described below), and directly with the ETA hardware to perform these operations. Implementation reduces the amount of traffic that cannot be handled directly by the hardware to a level that can be handled by software with little or no noticeable performance impact. In this way, the ETA hardware may provide most of the network and transport layer processing, while applications and hardware exchange data directly through DTIs (eliminating the requirement of processing those steps in software, primarily the OS stack).","Many options are available for ETA implementation. For example, specialized microcoded engines (essentially programmable state machines) can be added to Memory-I\/O hubs, including the design of a specialized engine that is integrated into the host operating environment and offloads a large percentage of the protocol and I\/O processing. Alternatively, embedded I\/O processor cores may be added to Memory-I\/O hubs. Further, ETA functionality may be added to processors using hardware and software program modules, including the use of co-processing functions embedded in processors. Finally, one or more of a server's main processors can be dedicated for use as an ETA network co-processor.","Application or service programs may run in user space or in kernel space. The ETA concept supports low overhead I\/O for programs running in either space since application and service level software can interact directly with ETA hardware to control data transfers (reducing OS overhead, kernel transitions, and interrupt processing). For example, zero-copy transfers can be performed directly to\/from pre-pinned application buffers (eliminating copies between Network Interface Card (NIC) buffers and stream buffers, and between stream buffers and application buffers).","At the highest level, an ETA-based host may include a set of ETA hardware integrated into a chipset that interfaces with the host processor, host memory, and host software. The host interfaces between the hardware and software should be optimized for supporting and presenting the standard Sockets API to applications and services with underlying TCP and User Datagram Protocol (UDP) transport semantics. For more information on the UDP, see RFC 768, \u201cUser Datagram Protocol\u201d, Information Sciences Institute, August 1980.","The ETA-AL adapts Sockets interfaces to the ETA Hardware. The purpose of the ETA-AL is to facilitate both the Sockets providers and interface libraries by providing application interfaces, adaptation functionality (sockets and interfaces), ETA hardware primitives, anonymous buffering control, and ETA event handling facilities.","The ETA-AL receives standard Sockets calls and masks the ETA architecture from the application or service level software, which allows existing applications to utilize various embodiments of the invention without modification. Thus, legacy applications written according to the original Berkley Sockets programming interface allow the transport and network layers of the networking stack to be offloaded from the host CPU. For more information on the Berkeley Sockets programming interface, please see \u201cAn Introductory 4.3BSD Interprocess Communication Tutorial\u201d, by Stuart Sechrest and \u201cAn Advanced 4.3BSD Interprocess Communication Tutorial\u201d, by Samuel J. Leffler et al., both in the Unix Programmers's Manual, Supplementary Documents 1 (sections PS1:7 and PS1:8), The University of California, June 1993. Newer applications written using asynchronous I\/O should also be able to take advantage of the features of various embodiments of the invention to reap performance gains by avoiding data copies and allowing for split transaction processing.","Embodiments of the invention also include an ETA Kernel Agent module (ETA-KA) which provides the kernel level driver for the ETA hardware and various other ETA support functions. The ETA-KA supports the setup and management of the ETA hardware, as well as data structures shared by the hardware and software. However, the ETA-KA does not typically operate as part of the main data flow between the ETA hardware and the application or service level software. A raw packet driver may be used to provide a default data path to\/from the OS stack for initial communication and some control traffic during system boot. Thus, until DTIs are established by applications or service level programs, all traffic may flow through the default data path, the raw packet driver, and the OS stack. However, once a DTI has been established, the data traffic and flow control for that DTI can be handled directly between the hardware and application level software through an ETA-AL.","All global resources, such as DTIs, memory buffers, and ETA hardware table resources may be managed by the ETA-KA. The ETA-KA provides system call interfaces that the ETA-AL uses to allocate and free these resources.","Thus, DTIs may be created and destroyed dynamically by the ETA-AL as needed to provide direct data transfer paths. If connections cannot be routed through DTIs because of low or non-existent ETA resources, the default path through the OS and the raw packet driver may be used.","The ETA-KA may also be responsible for servicing interrupts generated by the ETA hardware. ETA interrupts may be used to signal both global events and DTI events. Global events pertain to some shared resource within the ETA, including hardware errors, memory pool management, and transport exceptions. DTI events may be localized to a specific DTI, and can be proxied by the ETA-KA for the associated ETA-AL. The ETA-KA also handles DTI events and provides event notifications to the ETA-AL.","In addition, the ETA-KA may be responsible for managing the ETA network stack on behalf of the Operating System Vendor (OSV) network stack. Network stack management entry points, or call-back functions, are provided per OSV specifications. The ETA-KA services OSV stack management call-back functions and may translate them into operations performed on the ETA network stack, such as IP address assignments, IP route and table updates, and TCP connection migration.","It should be noted that the ETA-AL may include direct interfaces to the ETA-HW through DTI doorbell and queue facilities, which are used to communicate with the DTI hardware by posting descriptors to send and receive queues, signaling ETA-HW through doorbells, and receiving event notifications from ETA-HW through completion queues. Thus, the ETA-AL can interface directly with ETA-HW in order to establish connections, send and receive data, and synchronize events. The interfaces between the ETA-AL, ETA hardware, and ETA-KA may be effected via software primitive functions.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIGS. 1A","FIG. 1A"],"b":["1","1","100","104","105","108","120","130","132","108","132","108"]},"In some embodiments of the invention, host memory  address space may be allocated to each of the major processing elements, including one or more application or services programs , the adaptation module , the ETA hardware , and ETA kernel level software agents , such as the ETA-KA  (see ), which may be located in kernel virtual address space . If the application or service program  runs in user space, the application buffers  and DTI buffer pool  may also be allocated in user space. However, the buffers ,  may also reside in kernel space . The DTI buffer pool  may be managed by the adaptation module , enabling dynamic creation and destruction of each one of the plurality of DTIs . Further details of the DTI's , including the DTI buffer pool , can be seen in .","Considering various embodiments of the invention, there are several ways in which application programs  can communicate. For example, the application program  is capable of communicating sockets calls  directly with the TCP\/IP accelerator  (which may form part of the ETA hardware ) using DTI descriptors . The socket calls  are translated to DTI descriptors  by the adaptation module  (e.g., by the ETA-AL). Thus, the apparatus  may include a zero-copy send data path  capable of transferring send data  directly from an application buffer  associated with the application program  to the TCP\/IP accelerator . Alternatively, for indirect communications, the apparatus  may include a one-copy send data path  capable of transferring send data  through a DTI send buffer  (see ) to the TCP\/IP accelerator . Similarly, the apparatus  may include a zero-copy receive data path  capable of transferring receive data  directly from the TCP\/IP accelerator  to an application buffer  associated with the application program . Again, in the alternative, the apparatus  may include a one-copy receive data path  capable of transferring the receive data  through a DTI receive buffer  to the application buffer .","Thus, the apparatus may also include a DTI buffer pool  managed by the adaptation module , to enable dynamic creation, allocation, and destruction of the set of memory structures  included in each one of the DTIs .","Further, the apparatus  may include a kernel agent (e.g., the ETA-KA)  to initialize and\/or manage the ETA hardware , including the DTI accelerator  and the TCP\/IP accelerator . The kernel agent  may include a set of control tables , including an address translation table , a context hash table , a context table , a routing table , a set of kernel space queues , a plurality of interrupt event queues , and a kernel buffer pool . The control tables  may be shared by the kernel agent , the DTI accelerator , and the TCP\/IP accelerator . The apparatus  may also include a raw packet driver  to provide a default packet communication path  between the DTI accelerator  and an OS , as well as an exception agent  to process packets  not processed by the TCP\/IP accelerator  or the OS . Further details regarding the ETA kernel agents , can be found in .","To handle interrupts, the apparatus , including the ETA-KA , may include an interrupt proxy  to receive an interrupt  (associated with the adaptation module ) from the DTI accelerator . The interrupt proxy , in turn, may relay interrupt event notices  to the adaptation module  to enable interrupt processing.","Therefore, it can be seen that the set of memory structures  included in each one of the DTIs  is capable of coupling the translated sockets call  to the DTI accelerator . The DTI accelerator , in turn, is capable of coupling the set of memory structures  to the TCP\/IP accelerator  (each forming a part of the ETA hardware ).","The application buffer space may include buffers  used by the application or services programs  for I\/O. To support the zero-copy path ,, these buffers  can be registered prior to posting send or receive operations for the ETA hardware . Registering memory pins the address space and sets up address translation tables  for the ETA hardware .","Since Sockets semantics do not require pinning or registering application buffers  prior to specifying them in \u201csend\u201d or \u201creceive\u201d calls, the buffers  may be registered by the adaptation module  at the time a call is made. To reduce the resulting overhead (which may be relatively high), ETA-aware applications  can pre-register the buffers  they use for communications through DTIs .","The DTI buffer pool  may be allocated, registered, and managed by the adaptation module . The primary use of this space is for DTI queues  and for DTI send and receive buffers , . The DTI send and receive buffers ,  may be used for buffering received segments when no receives are pre-posted, when segments are received out of order, or for buffering data segments to\/from unregistered memory.","The ETA-KA  can also be called to allocate memory mapped I\/O address space for DTI doorbells . The doorbell space enables the adaptation module  running in user space to write notifications directly to the ETA hardware . The ETA-AL or adaptation module  is thus capable of providing a translated sockets call  associated with the application program  to one or more selected DTIs .","The ETA buffer pool  (shown in more detail in ) may be allocated, registered, and managed by the ETA-KA . The ETA buffer pool  is used primarily as a container for the control tables , such as address translation tables , context hash tables , context tables , ETA routing tables , kernel space queues , kernel buffer pools , and other tables, buffers, and queues.","In summary, several modules may be involved in performing communications through the ETA hardware , which may include a DTI accelerator  and a TCP\/IP accelerator . These modules include, but are not limited to, an ETA adaptation module , one or more application or service programs , an ETA-KA , a raw packet driver , an OS  (coupled to the adaptation module ), and an ETA Exception Agent (ETA-EA) .","The application or service program  may run in either user or kernel space and utilizes embodiments of the invention to perform the operations required by its API calls. The adaptation module or ETA-AL  may perform interfacing tasks through calls to the OS , ETA-KA , and\/or the ETA hardware . The adaptation module  calls the OS  and the ETA-KA  to perform setup and management tasks, and calls the ETA hardware  (through DTIs ) to control the transfer of data, for example, send and receive data , .","The ETA-KA  provides a hardware driver, interrupt proxy , and a set of utilities to support the setup and management of DTIs  and shared data structures, including control tables , on behalf of various adaptation module functions. The basic functions these utilities perform on behalf of the adaptation module  include creating and destroying DTI structures , establishing connections, assigning doorbell  space to DTIs , registering memory buffers  with the apparatus , proxy handling of interrupts  on behalf of blocked application threads, maintaining coherency between system tables and an ETA routing table , maintaining a hash table , a context table , virtual to physical address translation tables , and interfacing with the ETA hardware  for control and management functions.","The raw packet driver  supports the ETA raw packet (default) path  through the ETA hardware  and the OS . The ETA-EA  handles exception packets  and ETA network stack exception events on behalf of the ETA hardware . Thus, the primary function of the ETA-EA  is to provide a location where the ETA hardware  can offload specific operations.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2","FIG. 1"],"b":"130"},"For example, as shown in , a system  according to an embodiment of the invention may include any of the apparatus  described above, including an adaptation module, a plurality of direct transport interfaces (DTIs), and a DTI accelerator , perhaps operating in a host memory space . The system  also may include a general purpose input\/output interconnect interface , such as a PCI Express\u2122 interface, capable of being communicatively coupled to the apparatus .","Thus, a system  according to an alternative embodiment of the invention may include a DTI buffer pool managed by an adaptation module, wherein the DTI buffer pool enables dynamic creation and destruction of each one of the plurality of DTIs. In another embodiment, a system  may include a kernel agent (e.g., an ETA-KA) to manage a DTI accelerator  and a TCP\/IP accelerator . In yet another embodiment, a system  may include a kernel agent having an address translation table, a context hash table, a context table, a routing table, a set of kernel space queues, a plurality of interrupt event queues, and a kernel buffer pool.","Thus,  illustrates one of many ways some embodiments of the invention may be integrated within Memory-I\/O or I\/O hub devices. The ETA hardware block  provides a path for I\/O parallel to the logic used for bridging the normal load\/store I\/O and DMA traffic into and out of the host. A peer-to-peer packet passing protocol may be used to communicate with MAC level devices using PCI Express\u2122 interfaces.","Future MAC level devices may be designed specifically for use in chipsets that include embodiments of the invention and PCI Express\u2122 interfaces. Included in this concept, for example, is the notion of a host and multiple MAC level devices, interconnected according to the PCI Express\u2122 specification, providing Ethernet functionality.","With respect to , it should be noted that apparatus , , adaptation module (e.g, the ETA-AL) , DTIs , DTI accelerator , , the ETA hardware , , application or service level programs , host memory , , kernel agent (e.g., ETA-KA ), application buffers , DTI buffer pool , TCP\/IP accelerator , , zero-copy send data path , one-copy send data path , DTI send buffer , zero-copy receive data path , one-copy receive data path , DTI receive buffer , memory structures , control tables , address translation table , context hash table , context table , routing table , kernel space queues , interrupt event queues , kernel buffer pool , raw packet driver , default communication path , operating system , ETA-EA , interrupt event notices , interrupts , DTI queues , DTI doorbells , ETA buffer pool , interrupt proxy , system , and the general purpose input\/output interconnect interface  may all be characterized as \u201cmodules\u201d herein. Such modules may include, or communicate with, hardware circuitry, such as one or more processors and\/or memory circuits, software program instructions, firmware, electrical signals, and\/or combinations thereof, as desired by the architect of the apparatus , , and system , and as appropriate for particular implementations of various embodiments of the invention. All of the modules may reside in a single memory or computer, or each module may be distributed among multiple processors and\/or computers, or some combination of concentration and distribution may be effected, so as to group various modules in selected locations, again, as may be appropriate for particular implementations of various embodiments of the invention.","One of ordinary skill in the art will understand that the apparatus described herein can be used in applications other than with systems that include networked servers or devices, and thus various embodiments of the invention are not to be so limited. The illustrations of an apparatus , , and system  are intended to provide a general understanding of the structure of various embodiments of the present invention, and they are not intended to serve as a complete description of all the elements and features of apparatus and systems that might make use of the structures described herein.","Applications which may include the novel apparatus and systems described herein include electronic circuitry used in high-speed computers, communications and signal processing circuitry, processor modules, embedded processors, and application-specific modules, including multilayer, multi-chip modules. Such apparatus and systems may further be included as sub-components within a variety of electronic systems, such as televisions, cellular telephones, personal computers, radios, vehicles, and others.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3","b":["311","321","325","331","335","341","345"]},"The method may also include associating a send queue and a receive queue with the DTI to enable posting send and receive descriptors, respectively, at block . Another possible activity includes associating an event queue with the DTI to enable posting event notices from the DTI accelerator to an adaptation module at block . In addition, the method may include associating a doorbell address with the DTI to enable posting event notices from the adaptation module to the DTI accelerator at block .","Data may be transferred in many different ways. For example, the method may include transferring send data directly from an application buffer associated with the application program to the TCP\/IP accelerator, as well as transferring send data indirectly from an application buffer associated with the application program to the TCP\/IP accelerator through a send buffer associated with the DTI at block . Similarly, the method may include transferring receive data directly from the TCP\/IP accelerator to an application buffer associated with the application program, as well as transferring receive data indirectly through a receive buffer associated with the DTI to an application buffer associated with the application program at block .","Temporary storage is also included in some embodiments of the invention. For example, the method may include temporarily storing a plurality of packets received out-of-order in the receive buffer associated with the DTI, as well as temporarily storing a plurality of packets received when no sockets receive call is pending in the receive buffer associated with the DTI at block .","Address translation may also form part of the method. For example, the method may include translating a virtual address included in the translated sockets call into at least one physical address to access a memory structure included in a virtual memory space associated with the application program using a translation table included in the kernel agent buffer pool at block . Additionally, the method may include translating IP addresses and TCP port numbers received in a network packet into a pointer to a DTI context stored in a context table in the kernel agent buffer pool at block . Further, the method may include translating a destination IP address of a packet being sent to a network into a local subnet address using a routing table stored in the kernel agent buffer pool at block .","Other address-related tasks may include calculating a hashed value from IP addresses and TCP port numbers received in a network packet and using the result as an index into a context hash table in order to fetch from the context hash table a pointer into the context table stored in the kernel agent buffer pool at block .","The method may also include maintaining a set of logically separate control and transfer flows for a plurality of DTIs using a context table included in a kernel agent buffer pool at block . The method may also include communicating over a default communication path between an operating system and the DTI accelerator using a raw packet driver at block , and processing one or more packets (i.e., a subset of packets) included in a plurality of packets not processed by the operating system or the TCP\/IP accelerator using an exception agent at block .","To illustrate a few of the many other embodiments included in the invention, several exemplary methods are hereafter described. It should be noted that, while certain tasks are illustrated as being carried out by the adaptation module, DTI accelerator, and\/or TCP\/IP accelerator, such assignments are not necessarily required, and other implementations and variations are possible.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4","b":["404","430","425","427","429","431","433"]},"These actions may be summarized as: receiving a connection request from a client, associating the connection request with a master DTI (may include calculating an index into a hash table), acquiring a child DTI from the master DTI (may be accomplished through a master DTI queue), associating the child DTI with the connection request (may include calculating an index into a hash table), completing a connection sequence to provide an established connection associated with the connection request, and notifying an ETA adaptation module of the established connection. These actions may also include sending a first connection acknowledgment to the client, waiting for a second connection acknowledgment from the client, and writing a connection ready notification to a master DTI event queue.","Thus, a method of handling an Open Socket call may include translating the Open Socket call at block , creating a socket at block , creating a socket DTI at block , and associating a DTI context with a doorbell at block . The method may then conclude by returning at block .","A method of handling a Socket Bind call may include translating the Socket Bind call at block , establishing the DTI context as the TCP port master at block , and creating a hash table to associate the DTI context with the TCP port number and IP address at block . The method may then conclude by returning at block .","A method of handling a Socket Listen call may include translating the Socket Listen call at block , creating a pool of Child sockets and a pool of child DTIs at block , posting the Child DTI list on the Master DTI send queue at block , and signaling, via the Master DTI doorbell, that the Child DTI list is posted at block . The method may then conclude by returning at block .","A method of handling a Socket Accept call may include translating the Socket Accept call at block , waiting for an indication that the connection is ready in the Master DTI event queue at block , and associating a Child socket with the selected Child DTI at block . The method may then conclude by returning at block .","A method of handling the reception of a Client Connect Request packet may include locating (i.e., looking up) the Master DTI context using the hash table, typically using the ETA hardware, at block , assigning a Child DTI and associating the client with the Child DTI using the hash table at block , completing the connection sequence with the client at block , and sending an indication that the connection is ready to the Master DTI event queue at block , enabling the Socket Accept to resume at block . The method may then conclude by waiting for the next Client Connect Request at block , and then resuming at block , as described above.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 5","b":["504","520","550","527","529"]},"Thus, a method of handling a Send Socket call may include translating the Send Socket call at block , copying send data from an application buffer to a Child DTI buffer at block  (if required), posting one or more send descriptors on the Child DTI send queue at block , and notifying the DTI accelerator through a child DTI doorbell, as well as waiting for an indication that the send is complete, at block . The method may then conclude by returning at block . Each socket send may be executed as a separate thread of the adaptation module , and many socket send threads may be executed in parallel in an interleaved manner.","The method may also continue with the DTI Accelerator locating (i.e., looking up) the Child DTI context and reading a descriptor from the send queue at block , translating the data buffer virtual address to a physical address at block , reading send data from the translated physical address at block , transmitting the send data and context to the TCP\/IP accelerator at block , and waiting for an acknowledge (e.g., \u201cACK\u201d signal) from the Receiving Peer and writing an indication that the send is complete to the Child DTI event queue at block , enabling the Send Socket call to resume at block . The method may then conclude by waiting at block  for the next send doorbell and then resuming at block . The method may also continue as described above. Each send may be executed as a separate thread on the DTI accelerator , and many send threads may be executed in parallel, in an interleaved manner.","When the send data and context are handed to the TCP\/IP accelerator at block , the method continues with locating (i.e., looking up) routing address and port information in a routing table at block , encapsulating the send data within one or more TCP\/IP packets at block , and then transmitting the send packets at block . The method may then wait at block  for the next Send and then resume at block .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 6","b":["604","620","650","633","635","637"]},"Thus, a method of handling a Receive Socket call may include translating the Receive Socket call at block , posting one or more receive descriptors on the Child DTI receive queue at block , notifying the DTI accelerator through a child DTI doorbell, as well as waiting for an indication that the send is complete, at block , and copying receive data from the child DTI buffer to an application buffer at block  (if required). The method may then conclude by returning at block . Each socket receive may be executed as a separate thread of the adaptation module , and many socket receive threads may be executed in parallel in an interleaved manner.","The method may also continue from block  with locating (i.e., looking up) the Child DTI context and reading a descriptor from the receive queue at block , translating a data buffer virtual address to a physical address at block , waiting for a packet from the TCP\/IP accelerator at block , writing receive data to the receive buffer physical address at block , writing an indication that the receive is complete to the Child DTI event queue at block , enabling block  to resume, and then sending an acknowledge indication (e.g., \u201cACK\u201d signal) to the Sending Peer. The method may then conclude by waiting at block  for the next receive to be posted, and then resume at block . The method may also continue at block  if another packet is received. Each receive may be executed as a separate thread on the DTI accelerator , and many receive threads may be executed in parallel, in an interleaved manner.","When packets are received, the method may include hashing the TCP ports and IP addresses, as well as locating (i.e., looking up) a pointer to the Child DTI context at block , and reading the Child DTI context, processing the TCP\/IP header, and transmitting the receive data and context to the DTI accelerator at block . The method may then wait at block  for the next packet received.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 7","b":["704","730","733","735"]},"Thus, a method of handling a Close Socket call may include translating the Send Socket call at block , requesting that the connection be closed using a Child DTI doorbell at block , waiting for the connection to be closed at block , and closing and recycling the Child DTI and Child socket at block . The method may then conclude by returning at block .","The method may continue with locating (i.e., looking up) the Child DTI context at block , performing a close connection sequence with the client at block , and then writing an indication that the connection is closed to the Child DTI event queue at block , enabling block  to resume.","It should be noted that while buffers, queues, interrupts, and doorbells have been used as exemplary representational mechanisms herein, other representational mechanisms may also be used according to the apparatus, systems, and methods disclosed herein, and therefore various embodiments of the invention are not to be so limited. Therefore, it should be clear that some embodiments of the invention may also be described in the context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules may include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. As such, any of the modules , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , and  described herein may include software operative on one or more processors or processing threads to perform methods according to the teachings of various embodiments of the present invention.","One of ordinary skill in the art will understand, upon reading and comprehending this disclosure, the manner in which a software program can be launched from a computer readable medium in a computer-based system to execute the functions defined in the software program. One of ordinary skill in the art will further understand the various programming languages that may be employed to create one or more software programs designed to implement and perform the methods disclosed herein. The programs can be structured in an object-orientated format using an object-oriented language such as Java, Smalltalk, or C++. Alternatively, the programs can be structured in a procedure-orientated format using a procedural language, such as COBOL or C. The software components may communicate using any of a number of mechanisms that are well-known to those skilled in the art, such as application program interfaces (API) or interprocess communication techniques such as the Remote Procedure Call (RPC). However, as will be appreciated by one of ordinary skill in the art upon reading this disclosure, the teachings of various embodiments of the present invention are not limited to any particular programming language or environment, including Hypertext Markup Language (HTML) and Extensible Markup Language (XML).","Thus, as is evident from the preceding description, and referring back to , it can be seen that during the operation of the apparatus , , a processor  may access some form of computer-readable media, such as the memory . Therefore, a system  according to an embodiment of the invention may include a processor  coupled to a memory , volatile (e.g., a random access memory (RAM), etc.) or nonvolatile (e.g., a flash memory, a disk drive, etc.), a memory controller , and ETA hardware . As noted above, the system  may also include an I\/O interface , as well as the apparatus , .","By way of example and not limitation, computer-readable media  may comprise computer storage media and communications media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Communications media specifically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave, coded information signal, and\/or other transport mechanism, which includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation, communications media also includes wired media such as a wired network or direct-wired connections, and wireless media such as acoustic, optical, radio frequency, infrared and other wireless media. Combinations of any of the above are also included within the scope of computer-readable and\/or accessible media. Thus, still referring to , it is now easily understood that another embodiment of the invention may include an article  comprising a machine-accessible medium  having associated data , wherein the data, when accessed, results in a machine performing activities such as receiving an application sockets call from an application program at an adaptation module, deriving a translated sockets call from the application sockets call, receiving the translated sockets call at a DTI having a set of memory structures, coupling the translated sockets call to a DTI accelerator using the set of memory structures, and coupling the set of memory structures to a TCP\/IP accelerator.","Other activities may include maintaining a set of logically separate control and transfer flows for a plurality of DTIs using a context table included in a kernel agent buffer pool, as well as communicating over a default communication path between an operating system and the DTI accelerator using a raw packet driver. Another activity might include processing a subset of packets included in a plurality of packets not processed by the operating system or the TCP\/IP accelerator using an exception agent.","Although specific embodiments have been illustrated and described herein, those of ordinary skill in the art will appreciate that any arrangement that is calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments of the present invention. It is to be understood that the above description has been made in an illustrative fashion, and not a restrictive one. Combinations of the above embodiments, and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the above description. The scope of various embodiments of the invention includes any other applications in which the above structures and methods are used. Therefore, the scope of various embodiments of the invention should be determined with reference to the appended claims, along with the full range of equivalents to which such claims are entitled.","It is emphasized that the following Abstract is provided to comply with 37 C.F.R. \u00a71.72(b) requiring an Abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.","In the foregoing Detailed Description of Embodiments of the Invention, various features are grouped together in single embodiments for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments of the invention require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description of Embodiments of the Invention, with each claim standing on its own as a separate preferred embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIGS. 1A","b":["1","1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
