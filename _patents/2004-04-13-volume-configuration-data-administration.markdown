---
title: Volume configuration data administration
abstract: Volume configuration data management systems and methods are described. A logical volume provider maintains an epoch number on each of the extents comprising a volume. Upon each change in the configuration of the volume, the epoch number on each of the currently online extents is updated. When a volume is discovered and a request is made to bring the volume online, the logical volume provider can compare the epoch numbers on the extents to determine if the volume data is consistent across each of the extents, or if an extent contains stale data due to a transitory outage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07584224&OS=07584224&RS=07584224
owner: Microsoft Corporation
number: 07584224
owner_city: Redmond
owner_country: US
publication_date: 20040413
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation of application Ser. No. 10\/390,943, filed Mar. 17, 2003, now U.S. Pat. No. 6,735,603 titled LOGICAL VOLUME DATA STRUCTURE DETERMINTNG CONFIGURATION STATUS OF LOGICAL VOLUME BASED ON COMPARING VALUES OF EXAMINED VOLUME EPOCH IDENTIFIERS ON EACH ON-LINE EXTENT, which is a continuation of application Ser. No. 09\/450,300, filed Nov. 29, 1999, now U.S. Pat. No. 6,553,387 titled LOGICAL VOLUME CONFIGURATION DATA MANAGEMENT DETERMINES WHETHER TO EXPOSE THE LOGICAL VOLUME ON-LINE, OFF-LINE REQUEST BASED ON COMPARISON OF VOLUME EPOCH NUMBERS ON EACH EXTENTS OF THE VOLUME IDENTIFIERS, which application(s) are incorporated herein by reference.","This application is related to the following applications, all of which are filed on the same day and assigned to the same assignee as the present application:","\u201cQuorum Resource Arbitrator Within a Storage Cluster\u201d\u2014U.S. patent application Ser. No. 09\/449,579, now U.S. Pat. No. 6,615,256,","\u201cStorage Management System Having Common Volume Manager\u201d\u2014U.S. patent application Ser. No. 09\/449,577, now U.S. Pat. No. 6,681,310,","\u201cStorage Management System Having Abstracted Volume Providers\u201d\u2014U.S. patent application Ser. No. 09\/450,364, now U.S. Pat. No. 6,904,599,","\u201cVolume Migration Between Volume Groups\u201d\u2014U.S. patent application Ser. No. 09\/451,220, now U.S. Pat. No. 6,684,231, and","\u201cVolume Stacking Model\u201d\u2014U.S. patent application Ser. No. 09\/451,219, now U.S. Pat. No. 6,629,202.","This invention relates generally to computer data storage systems, and more particularly to maintaining volume configuration data.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawing hereto: Copyright \u25a1 1999 Microsoft Corporation, All Rights Reserved.","As computer systems have evolved so has the availability and configuration of data storage devices, such as magnetic or optical disks. For example, these storage devices can be connected to the computer system via a bus, or they can be connected to the computer system via a wired or wireless network. In addition, the storage devices can be separate or co-located in a single cabinet.","A storage volume is a software abstraction of the underlying storage devices and is commonly the smallest self-contained unit of storage exposed by an operating system and administered by a file system. Storage volumes abstract the physical topology of the storage devices and may be a fraction of a disk, a whole disk or even multiple disks that are bound into a contiguous range of logical blocks.","Volumes are constructed from one or more extents, with each extent being a contiguous storage address spaces presented by the underlying storage device. An extent is typically characterized by the size of the address space and a starting offset for the address space from a base of the media. Volume mapping is the process of mapping the contiguous address space presented by the volume onto the usually non-contiguous storage address spaces of the underlying extents. Volume mappings are either implemented on a specialized hardware controller, referred to as a hardware volume provider, or in software by a software volume provider.","Volume mappings may be used to increase the fault tolerance, performance, or capacity characteristics of the underlying storage devices. For example, a technique for improving fault tolerance, known as mirroring or plexing a disk, uses multiple disks. When data is written to one disk the data is also written to a second disk; thus the second disk is a \u201cmirror image\u201d of the first disk. If one disk should fail the other disk is still available for use and has an exact copy of the information on the first disk.","In addition RAID numbers are often used to identify storage volume mappings. A RAID, or Redundant Array of Independent Disks, provides the ability to lose an extent without losing volume data. Access to the volume may be slower or more costly, but is not interrupted by the failure of the underlying extent. RAID implements mirroring. RAID and above all implement some sort of stripe with parity scheme; the different number indicates the arrangement of the data and check-data (or parity) extents. Striping is a mechanism where data for a file or file system is distributed among several different disks.","Volume providers commonly group logical volumes into what are known as \u201cdiskpacks\u201d in order to simplify volume management. The diskpack then is a collection of logical volumes and the underlying disks. Diskpacks provide transitive closure for the volumes contained in the disk pack and may provide group sanity checking to ensure volume configuration correctness.","Two important and related aspects of logical volume management include maintaining establishing the sanity of a volume before it is be exposed to a computer system requesting access to a volume and maintaining volume configuration data.","An exemplary situation in which volume providers need a mechanism to determine the sanity of volume configuration is the occurrence of a hardware failure. For example, when only one of two disks comprising a concatenated volume is operational, the volume provider must indicate to the file system or other data manager that the volume is not capable of handling I\/O requests to the areas of the volume that reside on the missing or non-operational disk.","A second example occurs when only one member disk of a mirror set is discovered at system initialization. In this case the volume provider should have a mechanism for determining if the discovered member is stale, i.e. contains data which is out-of-date with respect to that contained on the undiscovered member.","In order to determine sanity of volumes and diskpack, current systems providing logical volume management typically replicate configuration data to either all or to a majority of the disks comprising a diskpack. The configuration data includes such information as the identity of all of the disks comprising the diskpack and a log of volume state changes. The volume provider typically uses the configuration data first to determine that a diskpack is sane prior to attempting to determine the sanity of any volume contained within the group. A common diskpack sanity algorithm is to require that at least a majority of the disks comprising the diskpack are present.","One problem with replicating volume information on each disk of a diskpack is that replication doesn't scale well. As more disks are added to the diskpack, there is more overhead involved in maintaining and replicating the configuration information, and in insuring that the configuration data between disks in the diskpack is consistent.","A second problem is that the volume and disk configuration is statically enforced through the replication of data throughout the volumes and disks in a diskpack. The configuration is statically enforced because the explicit configuration information is read from the volumes, and is not determined dynamically.","Therefore, there is a need in the art for a system of maintaining volume configuration data that scales well as the number of disks and volumes in a diskpack grows. In addition, there is a need for such a system that allows for the dynamic discovery of the addition of new volumes and new disks to diskpacks as the disks are brought on-line.","The above-mentioned shortcomings, disadvantages and problems are addressed by the present invention, which will be understood by reading and studying the following specification.","In one such system for maintaining volume consistency, a data structure containing an epoch number is placed on each of the extents that comprise a volume. Each time a volume configuration change is made, the epoch number is incremented in all of the currently online extents. When a disk volume is discovered by a logical volume manager, the logical volume manager compares the epoch number on the extents. If the epoch numbers are consistent, the volume is exposed as online and made available to applications. If the epoch numbers are not consistent, then at least one extent contains stale data. One aspect of the system is that the volume may still be exposed even if an extent is stale, if the volume can be reconstructed without any data corruption.","A further aspect of the system is that the epoch number can be reported to a cluster services component. This allows for a wider variety of consistency checking and volume exposure policies. The cluster services component can verify that the epoch number on the extents is truly the latest epoch number, thus providing for increased system reliability.","The volume configuration data management system and methods summarized above, and various other aspects of the system will be described in detail in the next section.","The present invention describes systems, clients, servers, methods, and computer-readable media of varying scope. In addition to the aspects and advantages of the present invention described in this summary, further aspects and advantages of the invention will become apparent by reference to the drawings and by reading the detailed description that follows.","In the following detailed description of exemplary embodiments of the invention, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that logical, mechanical, electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","The detailed description is divided into four sections. In the first section, the hardware and the operating environment in conjunction with which embodiments of the invention may be practiced are described. In the second section, a system level overview of the invention is presented. In the third section, methods of an exemplary embodiment of the invention are provided. Finally, in the fourth section, a conclusion of the detailed description is provided.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 1","FIG. 1"]},"Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCS, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The exemplary hardware and operating environment of  for implementing the invention includes a general purpose computing device in the form of a computer , including a processing unit , a system memory , and a system bus  that operatively couples various system components including the system memory to the processing unit . There may be only one or there may be more than one processing unit , such that the processor of computer  comprises a single central-processing unit (CPU), or a plurality of processing units, commonly referred to as a parallel processing environment. The computer  may be a conventional computer, a distributed computer, or any other type of computer; the invention is not so limited.","The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory may also be referred to as simply the memory, and includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM . The computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer . It should be appreciated by those skilled in the art that any type of computer-readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as remote computer . These logical connections are achieved by a communication device coupled to or a part of the computer ; the invention is not limited to a particular type of communications device. The remote computer  may be another computer, a server, a router, a network PC, a client, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local-area network (LAN)  and a wide-area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN-networking environment, the computer  is connected to the local network  through a network interface or adapter , which is one type of communications device. When used in a WAN-networking environment, the computer  typically includes a modem , a type of communications device, or any other type of communications device for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It is appreciated that the network connections shown are exemplary and other means of and communications devices for establishing a communications link between the computers may be used.","The hardware and operating environment in conjunction with which embodiments of the invention may be practiced has been described. The computer in conjunction with which embodiments of the invention may be practiced may be a conventional computer, a distributed computer, or any other type of computer; the invention is not so limited. Such a computer typically includes one or more processing units as its processor, and a computer-readable medium such as a memory. The computer may also include a communications device such as a network adapter or a modem, so that it is able to communicatively couple other computers.","This section presents definitions of terms used in the detailed description. Some of the terms are in common usage in the art, while others are specific to the invention.\n\n","A system level overview of the operation of an exemplary embodiment of the invention is described by reference to  and . The concepts of the invention are described as operating in a multiprocessing, multithreaded virtual memory operating environment on a computer, such as computer  in .",{"@attributes":{"id":"p-0048","num":"0076"},"figref":["FIG. 2","FIG. 1"],"b":["200","205","210","215","220","205","210","20","51","205","210","230","235"]},"Disk cabinet  is a peripheral containing a plurality of disks , ,  and . A disk cabinet such as cabinet  is typically used to provide a large amount of storage to one or more computer systems.","Each of disks , , , ,  and  have one or more extents . An extent is a contiguous storage address space instantiated by physical media such as a disk. An extent is characterized by its starting offset (in sectors) from the base of the disk media and its size. A disk can have a single extent that comprises the entire disk or some subset of the sectors on the disk. Alternatively, a disk can have a plurality of extents of varying sizes, with each extent covering a separate portion of the disk.","Extents are the basic building blocks used to construct volumes through a process called mapping. The allowable mappings are many-to-many: within one disk there may be extents that are parts of several volumes, and one volume can contain extents residing on several disks.","In general, there are five types of mappings of extents to volumes. The mapping types are as follows:",{"@attributes":{"id":"p-0053","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Simple","The volume consists of a single physical extent. In this case the"]},{"entry":[{},"volume may occupy an entire disk or only a portion thereof."]},{"entry":["Concatenation","The volume consists of at least two extents. The extents are"]},{"entry":[{},"joined in order. Concatenating two disks will yield a volume"]},{"entry":[{},"with size equal to the sum of the size of each extent; the first"]},{"entry":[{},"part of the volume address space resides on the first extent, the"]},{"entry":[{},"later part on the second."]},{"entry":["Stripe without parity","The volume consists of at least two extents. Component pairs of"]},{"entry":[{},"extents must be of the same size. The extents are interleaved"]},{"entry":[{},"with size \u201cI\u201d (the \u201cstripe width\u201d). Striping two disks will again"]},{"entry":[{},"yield a volume with size equal to the sum of the size of each"]},{"entry":[{},"extent. Volume addresses 0:I reside on the first disk addresses"]},{"entry":[{},"0:I; volume addresses I + 1:2I reside on the second disk addresses"]},{"entry":[{},"0:I; volume addresses 2I + 1:3I reside on the first disk addresses"]},{"entry":[{},"I + 1:2I; and so on. The purpose of striping is to achieve higher"]},{"entry":[{},"read\/write data rates by scheduling concurrent I\/O requests."]},{"entry":["Mirroring","The volume consists of at least two extents. The extents fully"]},{"entry":[{},"replicate all data. Mirroring two, three, or more disks of equal"]},{"entry":[{},"size will yield a volume with size equal to that of a single"]},{"entry":[{},"extent. Loss of one disk does not cause any loss of data since"]},{"entry":[{},"there is at least one disk remaining. Any contributing disk may"]},{"entry":[{},"satisfy a read to a mirrored volume since the data is identical on"]},{"entry":[{},"each. A write to a mirrored volume causes writes to each"]},{"entry":[{},"contributing disk to ensure that the data remains identical."]},{"entry":[{},"Mirroring is also sometimes referred to as \u201cplexing.\u201d"]},{"entry":["Stripe with parity","Similar to stripe without parity, with the addition of an extent"]},{"entry":[{},"that maintains parity information. The parity information can be"]},{"entry":[{},"used to reconstruct a damaged or missing extent in the case of a"]},{"entry":[{},"disk failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In addition, a volume may be constructed out of other component volumes. A volume constructed in this manner is called a stacked volume. An example of a stacked volume is a striped mirror. In the case of a striped mirror, a minimum of four extents is required. Extent pairs are mirrored to create two mirrored volumes. Those two volumes are then striped to create one stacked volume. That volume will have size equal to the stripe extents.","A number of the disks shown in system  have been organized into diskpacks. A diskpack is a set of logical volumes and the underlying disks on which the extents belonging to the volume reside. Diskpacks provide transitive closure for the volumes contained in the disk pack and may provide group sanity checking to ensure volume configuration correctness. A first diskpack  includes disks ,  and . A second diskpack  includes disks  and .","The configuration described above with reference to  has been presented to illustrate an exemplary configuration in which the invention can operate. No embodiment of the invention is limited to the particular configuration described above, or to any particular number of disks, diskpacks, diskpack configurations, volumes, volume types or volume configurations.",{"@attributes":{"id":"p-0057","num":"0085"},"figref":["FIG. 3","FIG.2"],"b":["270","272","200","280","274","276","286","282","284","288","272"]},"Each volume provider  within storage management system  has a corresponding hardware driver . In addition, a software volume provider  can either directly interface to a hardware volume provider  or can have a interface to a software driver . Drivers  and  handle all communications with storage devices  and can implement one of a variety of protocols such as SCSI (\u201cSmall-Computer Systems Interface\u201d), IP (\u201cInternet Protocol\u201d), etc. Drivers  and  support the run-time services that are provided by the operating system.","According to the invention, volume providers  provide applications , such as administrative tools and volume management tools, with a high-level, attribute-based view of storage devices . More specifically, applications  communicate storage access information to volume providers  via Application Programming Interface (\u201cAPI\u201d) . The storage access information allows applications  to deal with storage devices  in a uniform or generic manner regardless of the vendor specific interfaces provided by the storage devices . For example, in one embodiment the storage access information includes volume configuration information such as storage device mappings.","Based on the storage access information, volume providers  perform all disk extent mapping, disk space allocation and mapping type selection. More specifically, volume providers  implement sophisticated configuration rules for configuring storage devices  based on the storage access information received from applications . Thus, API  allows applications  to manage volume providers  without requiring that applications  have detailed knowledge of their underlying policies or the physical characteristics of storage devices . In this manner, API  shields applications  from these complex, vendor-specific rules such that an administrator need not be an expert in logical volume management.","Although the volume providers  must conform to API , the invention places no restraints on how volume providers  communicate with the software drivers  or hardware drivers  and may use any preferred protocol. In this fashion, storage management system  requires no changes to conventional drivers  and . Thus, vendors of storage devices  are free to develop their own communication protocols.","A data structure used and maintained by storage management system  is shown in . An instance of the data structure is placed on each of the extents that comprise a logical volume. The data structure includes three components, a cluster system ID , a logical volume ID  and a logical volume configuration epoch .","In an embodiment of the invention in which the storage management system interacts with a cluster system, the cluster system ID  is a unique identifier of the cluster in which the volume exists. The cluster system ID  is assigned and maintained by the cluster software.","The logical volume ID  is a unique identifier of the volume described by the data structure. The logical volume ID  is assigned and maintained by the logical volume provider .","Logical volume configuration epoch  is a unique identifier of the last generation of a configuration change to the volume and is maintained by the volume provider. The identifier can be a number that is incremented upon each change in the volume configuration, or it can be a timestamp indicating the time a volume configuration change was made. The invention is not limited to any particular format for the epoch number.","The data structure described above, along with other volume data such as the volume mapping type, volume extent size, number of extents comprising the volume and other volume extent data, is maintained on-disk. It is desirable to maintain the information on-disk, or in other non-volatile media to allow the configuration to persist across operating system and power outages.","In one embodiment of the invention, the above-described components execute the methods described in the next section to maintain volume configuration data and also to determine how a volume should be exposed by the operating system. As the logical volume provider  discovers extents (when a disk comes on-line for example), the provider exposes the volume as off-line. The logical volume provider then uses the epoch data maintained on the extents to determine if any of the extents are stale, that is, out of date, with respect to the other extents of the volume. If no stale extents are found, or if stale extents can be tolerated, the volume is exposed as on-line, which makes the volume available for use by the operating system and applications desiring to use the volume.","In an alternative embodiment of the invention, a cluster services component  is present. An example of such a cluster services component is the cluster services provided by the Windows NT operating system. In this embodiment, the volume provider can report all volume change events to the cluster services component . The cluster services component will propagate that change data to the quorum data maintained by those services. The on-disk configuration data described above is the province of the logical volume provider; only the correctness thereof is of concern to cluster quorum data. The known correct quorum configuration data can be accessed any time after the cluster is formed.","In this alternative embodiment, the cluster services component  records the cluster quorum data on one or more quorum devices. It is desirable that the quorum data not reside on a mirrored volume. The volume manager records information about volume state transitions in the quorum data. The robust replication of quorum data is the responsibility of the cluster services component . While multiple copies of the quorum data should be maintained for fault tolerance, the number of such copies may be significantly less than the number of disks managed by the volume provider or disks accessed by the node. Thus a higher level of data integrity is maintained than in embodiments of the invention that do not utilize a cluster services component.","In the previous section, a system level overview of the operation of an exemplary embodiment of the invention was described. In this section, the particular methods of the invention performed by an operating environment executing an exemplary embodiment are described by reference to the flowcharts shown in . The methods to be performed by the operating environment constitute computer programs made up of computer-executable instructions. Describing the methods by reference to a flowchart enables one skilled in the art to develop such programs including such instructions to carry out the methods on suitable computers (the processor of the computer executing the instructions from computer-readable media). The methods illustrated in  are inclusive of the acts required to be taken by an operating environment executing an exemplary embodiment of the invention.","A method of maintaining logical volume configuration data according to one embodiment of the invention is shown in . A logical volume manager or other program component executing a method of the invention begins by creating a logical volume (block ). The type of logical volume can be any of the volume types described above, such as a mirrored volume, a concatenated volume, a striped volume or a striped volume with parity. The invention is not limited to any particular type of volume, as those of skill in the art will appreciate.","Next, a program executing the method initializes an epoch number for the volume (block ). The invention is not limited to any particular value for the initial epoch number. This epoch number is then copied to a data structure on each extent comprising the logical volume (block ). In one embodiment of the invention, the data structure is the exemplary data structure shown in , however the invention is not limited to any particular data structure.","In an embodiment of the invention where a cluster services component exists, a program executing a method of the invention reports the epoch number to the cluster services component (block ). The epoch number is stored in a data structure that is maintained by the cluster services component which enables a program implementing the methods of the invention to perform enhanced volume configuration sanity detection. In an alternative embodiment of the invention where a cluster services component is not present, no reporting is required.","Next, a program executing the method, such as a logical volume manager, waits for changes in a volume's configuration (block ). The method is not limited to any particular method of waiting or detecting changes in volume configuration. It is desirable that only changes to the configuration of the volume need be detected. This includes changes such as the addition and deletion of extents to and from a volume, and the resizing of extents for a volume. Other events, such as input and output to the volume need not be detected by the method.","If a volume configuration change is detected and completed, the epoch number associated with the volume is modified (block ). In one embodiment of the invention, the epoch number is incremented. In an alternative embodiment of the invention, the epoch number is modified by setting the epoch number to a current time stamp. The invention is not limited to any particular means of modifying the epoch number, the only requirement being that the epoch number increase monotonically upon each configuration change. The epoch number on the volume configuration data structure present on each extent of the reconfigured volume is updated to reflect the modification.","In an embodiment of the invention in which a cluster services component is present, the new epoch number is also reported to the cluster services component to allow it to update its copy of the epoch number associated with the volume (block ).","The method then returns to block  to await the next volume configuration change.","In  a method according to one embodiment of the invention is shown for determining the consistency status of a volume. The method begins when an application executing the method, such as a logical volume manager, discovers an extent or extents belonging to a volume (block ). The logical volume provider exposes the newly discovered volume as offline (block ). When a volume is offline, it is unavailable to the file system or other data manager. It is desirable that while the volume is offline, the provider does not change the volume configuration data on the drive nor initiate any volume rebuild (e.g. mirror synchronization) activity.","Next, the logical volume manager reads the volume epoch numbers from each of the extents that comprise the volume identified in the request (block ). The logical volume manager compares the epoch number read from the extents (block ) to determine if they are equal. If they are not equal, one or more of the extents contain stale data. In an embodiment of the invention in which a cluster service component is present, the cluster service component will compare the volume epoch number it maintains with the epoch number or numbers from the volume extents (block ).","Next, the method uses the results of the comparisons to determine if the volume can be exposed (block ). The determination of whether a volume should be exposed can vary depending on the type of volume and the policies that a user of the system desires to implement. For example, if strict consistency checking is desired, the volume status will indicate that the volume should be exposed only if each and every volume epoch number matches.","Alternatively, a looser consistency may be acceptable to some users. For example, in the case of a mirror volume in which a disk failure has caused one of the mirrored extents to be unavailable, the policy can be to expose the volume as online if the available extent has an epoch number that matches the epoch number maintained by the cluster service component. Otherwise, if the epoch number does not match, a stale volume has been discovered and the volume remains offline.","If the logical volume manager, and in one embodiment of the invention, the cluster services component, determines that the volume configuration is consistent, the volume is exposed as online (block ). The volume manager will permit the online request if and only if I\/O requests can proceed without data corruption. For spanned and striped volumes, all volume or disk extents must be present. For mirrors and parity stripe volumes, the volume may be compromised, that is, one or more extents may be missing. The volume will be exposed as online as long as sufficient extents with current configuration data remain to allow the data on the volume to be reconstructed safely.","Otherwise, the volume remains offline and an error is indicated to the requestor (block ).","The particular methods for maintaining volume configuration data and volume consistency have been described. The methods have been shown by reference to a series of flowcharts including all the actions from block  until  and from blocks  to . The methods provide an efficient, scalable mechanism for maintaining volume configuration data and volume consistency.","The system and methods described provide advantages not found in previous systems. The systems and methods provide for volume configuration data consistency that scales well as disk storage systems become larger and include more disks, volumes and extents. In addition, the consistency criterion for the volumes is easier to achieve and maintain. This is because the diskpack, volumes and extents are discovered dynamically rather than being enforced by data replication and because volume configuration data need not be replicated to all, or to even a majority of the disks within the diskpack.","A further advantage is that the behavior of the system is much more dynamic than previous systems. Volume extents may appear and disappear at any time; volumes will be exposed or I\/O requests blocked as appropriate. The systems and methods of the invention provide this behavior while guaranteeing that data are not corrupted due to missing volume components.","The management of volume configurations and volume configuration data has been described. Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that any arrangement which is calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the present invention. For example, those of ordinary skill within the art will appreciate that while the management of volume configuration data has been described, other disk entities, such as disk partitions or database segments can also be managed using the systems and methods of the invention. The terminology used in this application with respect to volume configuration data management is meant to include all of these environments. Therefore, it is manifestly intended that this invention be limited only by the following claims and equivalents thereof."],"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","COPYRIGHT NOTICE\/PERMISSION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Hardware and Operating Environment","DEFINITIONS","System Level Overview","Methods of an Exemplary Embodiment of the Invention","CONCLUSION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
