---
title: Retrieving data in batches from a line of business system
abstract: A line of business data integration (“LOBI”) stack is provided that is configured to store an abstract representation of a mechanism utilized by a line of business (“LOB”) system to return requested LOB data in batches. When a request is received from a client for the LOB data, the LOBI stack utilizes the abstract representation to retrieve the requested LOB data from the LOB system in batches. In this manner, the batching mechanism utilized by the LOB system is abstracted from the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533220&OS=08533220&RS=08533220
owner: Microsoft Corporation
number: 08533220
owner_city: Redmond
owner_country: US
publication_date: 20090402
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A line of business data integration (\u201cLOBI\u201d) stack enables access to data contained in disparate line of business (\u201cLOB\u201d) systems through a common mechanism. A typical LOBI stack provides an abstract representation of LOB data and the operations that may be performed on the data. Such a stack also typically includes a mapping language, such as the extensible markup language (\u201cXML\u201d), for mapping LOB objects, their metadata, and their access methods into the abstract representation provided by the stack. A runtime object model is also typically provided by the LOBI stack that uses the mapping metadata to execute the LOB methods and to present returned LOB data to clients of the LOBI stack in a homogeneous fashion regardless of the back end LOB system the data originated from.","Some methods in LOB systems are bulk operations that can return several thousand or even potentially several million records. Returning this volume of data in a single response may not be feasible especially over ubiquitous transports like the Hypertext Transfer Protocol (\u201cHTTP\u201d). In order to address this issue, many LOB systems provide functionality for returning a large data set by returning smaller portions of the data set, referred to herein as batches, in multiple request\/response exchanges. For instance, in one example, an application programming interface (\u201cAPI\u201d) is provided by a LOB system that can be invoked repeatedly by passing a page size and a page number to the API as parameters until no data is returned. Each LOB system may, however, utilize a different technique to batch large volumes of data. As a result, in order to interact with multiple LOB systems to retrieve batches of data, each consumer of LOB data, referred to herein as a client, must be programmed with custom LOB system specific code for each type of LOB system from which data is to be retrieved. Programming each client in this manner can be a complicated and expensive process.","It is with respect to these and other considerations that the disclosure made herein is presented.","Technologies are described herein for retrieving data in batches from a LOB system. In particular, through an implementation of the embodiments presented herein, the mechanism utilized by a LOB system to batch data can be abstractly defined. A LOBI stack also exposes a standard interface for obtaining data from a LOB system. When the LOBI stack receives a request from a client for data stored at a LOB system, the LOBI stack utilizes the abstract representation of the batching mechanism to obtain the data from the LOB system. In this manner, the mechanisms utilized by LOB systems to batch data are abstracted from clients. As a result, the clients can be configured for use with the LOBI stack rather than for use with each LOB system from which data is to be retrieved.","According to one implementation, a LOBI stack is provided that is configured to store an abstract representation of a mechanism utilized by one or more LOB systems to return requested LOB data in batches. In one embodiment, the abstract representation is metadata defining parameters utilized by the LOB system to return requested LOB data in batches. The metadata defines filters utilized by the LOBI stack and parameters expected by the LOB system. A mapping between the filters and the parameters is also provided in the abstract representation.","The LOBI stack also exposes a standard interface for obtaining data from a LOB system. When the LOBI stack receives a request on the interface from a client for LOB data, the LOBI stack utilizes the abstract representation to retrieve the requested LOB data from the LOB system in batches and provides the requested LOB data to the client in response to the request. In one embodiment, the LOBI system retrieves the abstract representation, identifies the parameters based upon the abstract representation, and utilizes the parameters to create a request to the LOB system for a first batch of data.","The LOBI stack then receives a response to the request from the LOB system that includes a batch of data and one or more return parameters. The LOBI stack returns the batch of data to the requesting client and determines whether additional batches are available from the computing system based upon the return parameters. If additional batches are available, the LOBI stack creates a new request to the LOB system for an additional batch of data. This process may be repeated until no further data is available from the LOB system.","It should be appreciated that the above-described subject matter may also be implemented as a computer-controlled apparatus, a computer process, a computing system, or as an article of manufacture such as a computer-readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","The following detailed description is directed to technologies for retrieving data in batches from LOB systems. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","In the following detailed description, references are made to the accompanying drawings that form a part hereof, and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings, in which like numerals represent like elements throughout the several figures, aspects of a computing system and methodology for retrieving data in batches from LOB systems will be described.","Turning now to , details will be provided regarding an illustrative operating environment for the embodiments presented herein. In particular,  shows aspects of a LOBI stack  and several related components. The LOBI stack  is one or more software components that together store information about the LOB systems A-C and the LOB data A-C that they maintain. The LOBI stack  also enables the clients A-D to use the stored information to access and utilize the LOB data A-C in a standard manner. It should be appreciated that the LOB systems A-C comprise computing systems that provide functionality for storing and exposing business data. Examples of LOB systems include, but are not limited to, database systems, e-mail systems, and customer relationship management (\u201cCRM\u201d) systems.","According to embodiments, the LOBI stack  includes a metadata database and an object model, both of which are discussed in greater detail below, that provide a simple, consistent object-oriented programming interface to the business logic contained within the LOB systems A-C.  is a high-level architecture diagram showing the interaction between the clients A-D, the LOBI stack , and the LOB systems A-C and their respective LOB data A-C.","According to embodiments, the LOB systems A-C are computing systems provided by different vendors that utilize different, incompatible interfaces for accessing their respective LOB data A-C. For instance, the LOB system A may be a database system provided by SAP, the LOB system B may be a database system provided by SIEBEL, and the LOB system C may be a custom database system. As discussed above, the LOB systems A-C may comprise other types of computing systems for performing other functions.","In order to facilitate interoperability between the clients A-D and the disparate LOB systems A-C, the LOBI stack  abstracts the underlying LOB data A-C and the methods for accessing the LOB data A-C provided by the LOB systems A-C, respectively. The LOBI stack  also provides a consistent, object-oriented interface to the clients A-D for accessing this data. In this way, the clients A-D need not be programmed to deal directly with the different interfaces exposed by the LOB systems A-C. Rather, the clients A-D can be programmed to access all of the LOB systems A-C through a consistent interface provided by the LOBI stack . It should be appreciated that the clients A-D may comprise virtually any type of application that consumes data, such as, but not limited to, a World Wide Web (\u201cWeb\u201d) service or Web site, a database, a desktop application program, or a server application program.","As discussed briefly above, the LOBI stack  provides an abstract layer that defines several artifacts of a LOB system. For instance, some or all of the following information may be defined in one embodiment: information for use in connecting to a LOB system, data defining the type of objects in the LOB system, unique identifiers for each type of object, methods to access the objects, parameters for the methods, and data types of the parameters. This layer might also provide functionality for defining method stereotypes over methods that access data from a LOB system. These stereotypes typically correspond to common operations performed on a LOB system to access data. For instance, some or all of the following stereotypical methods might be defined: a method for getting an object of a given type with a given identifier, a method for getting all objects of a particular type, a method for getting all objects of a given type related to a set of objects, and a method for getting all objects of a given type based upon a specified criteria.","These stereotypes not only provide a logical abstraction of disparate LOB APIs to the clients A-D, but also make them convenient to invoke by the clients by providing default values for the fields of the API parameters. Therefore, a client A-D need only provide the minimal information for use by the stereotype. According to embodiments, the stereotypes can also have \u201cfilters\u201d associated with the fields of their parameters through which the clients can customize the API invocation by supplying custom values for the filters to thereby override default values specified for the parameters. The filtering may also be utilized to provide system-supplied values in the manner presented below.","According to embodiments, a metadata mapping language is also utilized to map LOB-specific artifacts to the abstract representation mentioned above. For instance, XML may be utilized to define a mapping according to a pre-defined schema that facilitates mapping of LOB constructs into the abstract representation. As will be described in detail below, a runtime layer is also utilized that provides a mechanism for accessing the LOB data A-C in a homogeneous fashion regardless of the LOB system A-C in which the data resides. The runtime layer provides entry points into the LOBI stack  to the clients A-D for discovery of types within the LOB systems A-C that have been registered with the LOBI stack . The runtime layer also provides functionality to permit the clients A-D to invoke LOB method access objects in a homogeneous fashion. The runtime layer also provides functionality for abstracting the mechanism utilized by the LOB systems A-C for batching requested LOB data from the clients A-D. Additional details regarding this functionality will be provided below.","According to one embodiment, the LOBI stack  comprises the BUSINESS DATA CATALOG from MICROSOFT CORPORATION of Redmond, Wash. In this embodiment, the LOBI stack  is a MICROSOFT OFFICE SHAREPOINT SHARED SERVICE and the clients A-D may comprise a business data Web part configured for use with MICROSOFT OFFICE SHAREPOINT SERVER, a SHAREPOINT list, a search component, a user profile importer, or another custom solution. It should be appreciated that while one embodiment is presented herein in the context of the BUSINESS DATA CATALOG from MICROSOFT CORPORATION, the embodiments presented herein are not so limited. Rather, the embodiments presented herein may be utilized with other LOBI stacks from other manufacturers that provide the functionality described herein for providing an interface between clients and LOB systems. Additional details regarding the functionality provided by the LOBI stack  are provided below.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 2"],"b":["102","102","206","206","104","104","106","106","206","104","104","104","104"]},"The metadata model utilized by the LOBI stack  to store metadata in the metadata database  abstracts the underlying physical sources and provides a consistent and simple model for metadata authors working with different kinds of business systems. The metadata model simplifies use of the metadata by defining semantic metadata such as entities and relationships that add meaning to the API. After the metadata is written, developers who program custom solutions using the LOBI stack  do not need to understand the back-end APIs utilized by the LOB systems A-C, but can instead use simplified object models provided by the LOBI stack . This design makes it easier for both metadata authors and developers to work with the LOB systems A-C, which typically have complex APIs. It should be appreciated that the LOBI stack  stores metadata about the LOB systems A-C in the metadata database . The metadata database  does not contain actual business data.","As shown in , the LOBI stack  comprises an administration object model  and a runtime object model  in one embodiment. The administration object model  provides functionality for creating, reading, updating, and deleting metadata objects in the metadata database . Developers may utilize this functionality provided by the administration object model  to create and edit metadata stored in the metadata database .","The runtime object model  provides functionality for use by the clients A-D. The runtime object model  has two major functions according to one implementation. First, the runtime object model  offers an intuitive, object-oriented interface to the clients A-D that abstracts the underlying LOB data A-C. The runtime object model  insulates the clients A-D from application-specific coding paradigms, and allows the clients A-D to access all of the LOB systems A-C in a single, simplified way. Because of the functionality provided by the runtime object model , calling a method on a SAP system is very similar to calling a method on a SIEBEL system or executing a query in the structured query language (\u201cSQL\u201d).","The runtime object model  also provides functionality for allowing the clients A-D to read metadata objects from the metadata database  and to execute the business logic described therein. In this regard, it should be appreciated that the LOBI stack  does not perform the actual method execution in one embodiment. Rather, the LOBI stack  delegates the client invocation to an appropriate provider for the service. For instance, in the example shown in , an ADO.NET provider  is utilized to interact with database systems and a Web service provider  is utilized to interface with Web services. It should be appreciated that these examples are merely illustrative and that this functionality may be provided by the LOBI stack  itself or other external components not shown in  or described herein.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 3"],"b":["202","108","106","104","106","108","202","302","104","202","206","304","108","308"]},"The client A uses the common interface provided by the runtime object model  at operation  to query the runtime object model  for the desired LOB data A. In response thereto, the runtime object model  makes system specific method calls to the LOB system A for the data at operation . In response thereto, the LOB system A executes the method calls to retrieve the data A and returns the data A in response to the query at operation . In turn, the runtime object model  passes the data A to the client A at operation  in response to the request made by the client A at operation . The client A may then utilize the returned data A in the desired manner.","As discussed briefly above, some of the APIs exposed by the LOB systems A-C can return several thousand or even potentially several million records. In order to return such a large volume of data in a manageable manner, some LOB systems provide functionality for returning a large data set by returning smaller batches of the data set in multiple request\/response exchanges. For instance, in one example, an API is provided by a LOB system that can be invoked repeatedly by passing a page size and a page number to the API as parameters until no data is returned. In another example, an API may be provided that takes data identifying a current batching state as input and that returns data that conveys a new batching state along with a batch of data. The pseudo code shown in TABLE 1 illustrates this type of API.",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/Sample return data packet"]},{"entry":[{},"Struct ReturnPacket"]},{"entry":[{},"{"]},{"entry":[{},"Byte [ ] newBatching State; \/\/ This can be any data type"]},{"entry":[{},"Boolean hasMoreItems; \/\/ Flag that indicates end of batches"]},{"entry":[{},"Item[ ] items; Actual returned data items (batch)"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In yet another example, a LOB system may expose an API that takes input\/output parameters that take the current batching state and that conveys the new batching state following the method execution through the input\/output parameters. The pseudo code shown in TABLE 2 illustrates this type of API.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item[ ] GetAllItems (inout Byte[ ] batchingState,"]},{"entry":[{},"out Boolean hasMoreBatches);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"It should be appreciated in view of the above that each of the APIs exposed by the LOB systems A-C might utilize a different technique to batch large volumes of data. It should also be appreciated that, in general, LOB systems commonly utilize a set of values that flow into out of the method executing on the LOB systems A-C and, potentially, an auxiliary output value that flows out of the method execution that indicates the end of batching. In this regard, TABLE 3 shows pseudo code for retrieving all of the data provided by a common LOB system API method such as this.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Boolean hasMoreItems = true;"]},{"entry":[{},"Byte[ ] batchingState = null;"]},{"entry":[{},"While (hasMoreItems){"]},{"entry":[{},"\u2003Item[ ] items = GetAllItems ([inout] batchingState,"]},{"entry":[{},"\u2003[out] hasMoreItems);"]},{"entry":[{},"\u2003Foreach (item in items)"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003Yield item; \/\/return the items of the batch to the consuming client"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In view of the above, it should be appreciated that the parameters that dictate the batching mechanisms utilized by the LOB systems A-C are centered around logical pairs of values that flow in and out of method execution either as input\/output parameters or as a mapping of an input parameter field to a field in the return parameter. As discussed above, the values provided to a method executing on the LOB systems A-C are provided via one or more filters in one implementation. The filter construct discussed above is expanded in embodiments disclosed herein to accommodate the semantic coupling between pairs of values that flow into and out of the methods executing on the LOB systems A-C. Through the use of this functionality, the LOBI stack  is configured to provide additional functionality for abstracting the batching mechanisms utilized by the LOB systems A-C from the clients A-D.","According to one embodiment, the filter construct type is expanded to include an input\/output filter type and an output filter type in addition to plain input filter types. An input\/output filter can be utilized in conjunction with fields of several input parameters and one in\/out, out, or return parameter. As will be discussed in greater detail below, the LOBI stack  can exchange input and output values while invoking the LOB system method repeatedly to retrieve all of the requested LOB data in batches. While input\/output and output filters form a base on which these streaming abstractions can be built, they are very generic semantically and could have uses outside of batching. Hence, the special purpose input\/output and output filters disclosed herein for use in batching may be referred to specifically as batching and batching termination filters to more particularly describe their semantics.","In order to define the batching and batching termination filters and to associate the filters with the appropriate input parameters of the API methods exposed by the LOB systems A-C, metadata is defined for use by the LOBI stack  and stored in the metadata database . A sample mapping definition for a batching API is provided below in TABLE 4 to indicate these metadata constructs.",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Entity Name=\u201dItem\u201d>"},{"entry":"\u2003<Identifiers>"},{"entry":"\u2003\u2003<Identifier Name=\u201dId\u201d Type=\u201dInteger\u201d\/>"},{"entry":"\u2003<\/Identifiers>"},{"entry":"\u2003<Methods>"},{"entry":"\u2003\u2003<Method Name=\u201dGetAllItems\u201d>"},{"entry":"\u2003\u2003<Filters>"},{"entry":"\u2003\u2003\u2003<Filter Name=\u201dBatchingStateCookie\u201d Type=\u201dBatching\u201d\/>"},{"entry":"\u2003\u2003\u2003<Filter\u2003\u2003\u2003\u2003\u2003\u2003Name=\u201dHasMoreBatches\u201d"},{"entry":"Type=\u201dBatchingTermination\u201d\/>"},{"entry":"\u2003\u2003<\/Filters>"},{"entry":"\u2003\u2003<Parameters>"},{"entry":"\u2003\u2003\u2003<Parameter Name = \u2033batchingState\u2033 Direction=\u2033InOut\u2033>"},{"entry":"\u2003\u2003\u2003\u2003<Field\u2003Name=\u2033root\u2033\u2003Type=\u2033Byte[ ]\u2033\u2003AssociatedFilter\u2003="},{"entry":"\u2033BatchingStateCookie\u2033\/>"},{"entry":"\u2003\u2003\u2003<\/Parameter>"},{"entry":"\u2003\u2003\u2003<Parameter Name =\u2033hasMoreBatches\u2033 Direction=\u2033Out\u2033>"},{"entry":"\u2003\u2003\u2003\u2003<Field Name=\u2033root\u2033 Type=\u2033Boolean\u2033 AssociatedFilter ="},{"entry":"\u2033BatchingTerminator\u2033\/>"},{"entry":"\u2003\u2003\u2003<\/Parameter>"},{"entry":"\u2003\u2003\u2003<Parameter Name = \u2033Items\u2033 Direction=\u2033Return\u2033>"},{"entry":"\u2003\u2003\u2003\u2003<Field Name = \u2033items\u2033 Type = \u2033Item[ ]\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003....."},{"entry":"\u2003\u2003\u2003\u2003<\/Field>"},{"entry":"\u2003\u2003\u2003<\/Parameter>"},{"entry":"\u2003\u2003<\/Parameters>"},{"entry":"\u2003\u2003<StereoTypes>"},{"entry":"\u2003\u2003\u2003<StereoType\u2003\u2003Name=\u201dItemFetcher\u201d"},{"entry":"Type=\u201dItemEnumerator\u201d"},{"entry":"ReturnParameter = \u201dItems\u201d ReturnField=\u201dItems\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/StereoTypes>"},{"entry":"\u2003\u2003<\/Method>"},{"entry":"\u2003<\/Methods>"},{"entry":"<\/Entity>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the sample XML shown in TABLE 4, metadata is provided for a method exposed by a LOB system API called \u201cGetAllItems.\u201d In this example, the <Filter> tags define the batching and batching termination filters. The <Parameter> tags associate the defined filters with the appropriate input parameters of the GetAllItems method. TABLE 5 shows another sample mapping definition for another batching mechanism utilized by an API exposed by the LOB systems A-C.",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Entity Name=\u201dItem\u201d>"},{"entry":"\u2003<Identitifiers>"},{"entry":"\u2003\u2003<Identifier Name=\u201dId\u201d Type=\u201dInteger\u201d\/>"},{"entry":"\u2003<\/Identifiers>"},{"entry":"\u2003<Methods>"},{"entry":"\u2003\u2003<Method Name=\u201dGetAllItems\u201d>"},{"entry":"\u2003\u2003\u2003<Filters>"},{"entry":"\u2003\u2003\u2003\u2003<Filter Name=\u201dBatchingStateCookie\u201d Type=\u201dBatching\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<Filter\u2003\u2003\u2003\u2003\u2003\u2003Name=\u201dHasMoreBatches\u201d"},{"entry":"Type=\u201dBatchingTermination\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/Filters>"},{"entry":"\u2003\u2003\u2003<Parameters>"},{"entry":"\u2003\u2003\u2003\u2003<Parameter Name = \u2033batchingState\u2033 Direction=\u2033In\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<Field Name=\u2033root\u2033 Type=\u2033Byte[ ]\u2033 AssociatedFilter ="},{"entry":"\u2033BatchingStateCookie\u2033\/>"},{"entry":"\u2003\u2003\u2003\u2003<\/Parameter>"},{"entry":"\u2003\u2003\u2003\u2003<Parameter Name = \u2033ReturnPacket\u2033 Direction=\u2033Return\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<Field Name = \u2033ReturnPacket\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<Field\u2003Name=\u2033newBatchingState\u2033\u2003Type=\u2033Byte[ ]\u2033"},{"entry":"AssociatedFilter =\u2033BatchingStateCookie\u2033 \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<Field\u2003Name=\u2033hasMoreBatches\u2033\u2003Type=\u2033Boolean\u2033"},{"entry":"AssociatedFilter = \u2033BatchingTerminator\u2033\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<Field Name = \u2033items\u2033 Type = \u2033Item[ ]\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003....."},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/Field>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/Field>"},{"entry":"\u2003\u2003\u2003\u2003<\/Parameter>"},{"entry":"\u2003\u2003\u2003<\/Parameters>"},{"entry":"\u2003\u2003\u2003<StereoTypes>"},{"entry":"\u2003\u2003\u2003\u2003<StereoType\u2003Name=\u201dItemFetcher\u201d\u2003Type=\u201dItemEnumerator\u201d"},{"entry":"ReturnParameter =\u201d ReturnPacket\u201c ReturnField=\u201dItems\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/StereoTypes>"},{"entry":"\u2003\u2003<\/Method>"},{"entry":"\u2003<\/Methods>"},{"entry":"<\/Entity>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the sample XML shown in TABLE 5, metadata is provided for a method exposed by a LOB system API called \u201cGetAllItems\u201d that batches data in a different manner than in the example shown in TABLE 4. As in the example shown in TABLE 4, the <Filter> tags define the batching and batching termination filters. The <Parameter> tags also associate the defined filters with the appropriate input parameters of the GetAllItems method. However, in this example, the batching state and the batching terminator are defined as fields within a return packet.","It should be appreciated that the schema set forth above in TABLES 4 and 5 is merely illustrative and that other schema might be utilized to define the filters and to associate the filters with parameters on an API exposed by a LOB system. It should also be appreciated that through the use of this schema, many types of batching mechanisms might be defined and mapped to filters on the LOBI stack .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4"],"b":["104","104","102","406","206","408","104","104","408","404","404","104","104","406","410","402","402","102","404","404","406","102"]},"Referring now to , additional details will be provided regarding the embodiments presented herein for batching data from LOB systems. In particular,  is a flow diagram illustrating aspects of the operation of the LOBI stack  for batching data from the LOB systems A-C. It should be appreciated that the logical operations described herein are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as states operations, structural devices, acts, or modules. These operations, structural devices, acts and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.","The routine  begins at operation , where the abstract representation  of the batching mechanisms utilized by the LOB systems A-C is generated. Once the abstract representation  has been generated, it is stored in the metadata database  at operation . From operation , the routine  proceeds to operation , where a runtime request is received from one of the clients A-D for LOB data A-C available from one of the LOB systems A-C. In response to receiving such a request, the routine  proceeds to operation , where the LOBI stack  interprets the abstract representation  to retrieve the requested LOB data A-C in batches. An illustrative routine  is described below that illustrates this process in greater detail. From operation , the routine  proceeds to operation , where it ends.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 6","b":["600","102","104","104","600","602","102","406","408","410","104","104","106","106","406","600","604","102","402","402","404","404","102","104","104"]},"From operation , the routine  proceeds to operation , where the LOBI stack  transmits the initial request to the LOB system for the requested LOB data. At operation , the LOBI stack  receives a reply to the request that includes the first batch of data and any return parameters that indicate whether batching has been completed and the current batching state. From operation , the routine  proceeds to operation , where the LOBI stack  determines whether additional batches of data remain to be retrieved from the LOB system. This determination is made based upon one or more of the parameters returned from the LOB system.","If no additional batches of data remain to be retrieved, the routine  proceeds from operation  to operation , where it ends. If, however, additional batches of data remain to be retrieved, the routine  proceeds to operation , where the LOBI stack  generates a new request to the LOB system for the next batch of data. The new request includes the batching state received with the previous batch of data. The routine  then returns to operation , where an additional batch of data is received. This process is repeated until all of the available batches of data have been received from the LOB system. It should be appreciated that the operations shown in  may be performed in a different manner, and that fewer or additional operations may be performed, depending upon the particular batching mechanism utilized by the LOB system. It should also be appreciated that the LOBI stack  may stream data to the requesting client. Alternately, the requesting client A-D may provide instructions to the LOBI stack  as to how the data is to be returned.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 7","FIG. 5"],"b":["700","104","104","108","108","102","104","104"]},"The computer architecture shown in  includes a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer , such as during startup, is stored in the ROM . The computer  further includes a mass storage device  for storing an operating system , application programs, and other program modules, which are described in greater detail herein.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media provide non-volatile storage for the computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available computer storage media that can be accessed by the computer .","By way of example, and not limitation, computer-readable media may include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. For example, computer-readable media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d), HD-DVD, BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer .","According to various embodiments, the computer  may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The computer  may also include an input\/output controller  for receiving and processing input from a number of other devices, including a keyboard, mouse, or electronic stylus (not shown in ). Similarly, an input\/output controller may provide output to a display screen, a printer, or other type of output device (also not shown in ).","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a networked desktop, laptop, or server computer. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store the LOBI stack , the metadata database , and the abstract representation of the batching mechanisms , each of which was described in detail above with respect to . The mass storage device  and the RAM  may also store other types of program modules and data.","It should be appreciated that the software components described herein may, when loaded into the CPU  and executed, transform the CPU  and the overall computer  from a general-purpose computing system into a special-purpose computing system customized to facilitate the functionality presented herein. The CPU  may be constructed from any number of transistors or other discrete circuit elements, which may individually or collectively assume any number of states. More specifically, the CPU  may operate as a finite-state machine in response to executable instructions contained within the software modules disclosed herein. These computer-executable instructions may transform the CPU  by specifying how the CPU  transitions between states, thereby transforming the transistors or other discrete hardware elements constituting the CPU .","Encoding the software modules presented herein might also transform the physical structure of the computer-readable media presented herein. The specific transformation of physical structure may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to: the technology used to implement the computer-readable media, whether the computer-readable media is characterized as primary or secondary storage, and the like. For example, if the computer-readable media is implemented as semiconductor-based memory, the software disclosed herein may be encoded on the computer-readable media by transforming the physical state of the semiconductor memory. For example, the software may transform the state of transistors, capacitors, or other discrete circuit elements constituting the semiconductor memory. The software may also transform the physical state of such components in order to store data thereupon.","As another example, the computer-readable media disclosed herein may be implemented using magnetic or optical technology. In such implementations, the software presented herein may transform the physical state of magnetic or optical media, when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media, to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description, with the foregoing examples provided only to facilitate this discussion.","In light of the above, it should be appreciated that many types of physical transformations take place in the computer  in order to store and execute the software components presented herein. It also should be appreciated that the computer  may comprise other types of computing devices, including hand-held computers, embedded computer systems, personal digital assistants, and other types of computing devices known to those skilled in the art. It is also contemplated that the computer  may not include all of the components shown in , may include other components that are not explicitly shown in , or may utilize an architecture completely different than that shown in .","Based on the foregoing, it should be appreciated that technologies for retrieving data in batches from a LOB system are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological and transformative acts, specific computing machinery, and computer readable media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 1-3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 5-6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
