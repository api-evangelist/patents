---
title: Methods and apparatus providing electronic messages that are linked and aggregated
abstract: A method for associating related electronic messages in computer storage. A first transportable application is created and stored. User input requesting creation of a link from the first transportable application to another transportable application is received. User input that selects a second transportable application from among a plurality of previously created transportable applications is received. A link from the first transportable application to the second transportable application is created and stored. As a result, transportable application may be inter-related in complex message webs. The message webs may also be inter-related in message web rings. Links may be generated manually or automatically, based on context, workflow processes, or other known relationships among applications. Recipient lists and data may propagate among fields of linked transportable applications, directly or according to abstract business rules. Further, multiple-part electronic messages are disclosed. A graphical user interface of an electronic messaging system displays a message in the form of one or more header portions and one or more body portions. Each of the body portions has a selection region. While one body portion is visible at a given time, all the selection regions are continuously visible in the user interface to facilitate selection of any of the body portions at a particular time. Selecting a selection region of a non-displayed body portion causes a server to generate a refreshed user interface that includes the entirety of the selected body portion, and that hides the previously viewed body portion. As a result, a large amount of associated information may be combined in a single message in a way that is clearly organized and easily accessible.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07130885&OS=07130885&RS=07130885
owner: Zaplet, Inc.
number: 07130885
owner_city: Redwood Shores
owner_country: US
publication_date: 20010905
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","1.0 Transportable Application Communications System","1.2.1 Graphical Appearance of a Transportable  Application\u2014Generally","1.2.3 Containers","1.2.4 Templates","1.2.5 Pages and Building Blocks","1.2.6 Object Model","1.2.9 Directory Integration\u2014Global Object Identifiers","1.3.1 E-Mail Client Presentation","1.3.2 Personal Portal Presentation","1.4 Authoring Transportable Applications","1.4.1 Application Editor","1.4.2 Page Editor (Page Builder)","1.4.4 Site Style Editor","1.5.1 Notifications Based on User Responses or Lined Events","1.5.2 Notifications Based on Rules and Attributes","1.8.1 Enterprise Application Integration Using Connectors","1.9.1 Cluster-Specific Encryption and Request Routing","1.9.2 Sharing Transportable Application Data Among Multiple Sites","2.0 Multiple-Part Electronic Messages","3.0 Linking and Aggregating Messages","4.0 Hardware Overview","5.0 Extensions and Alternatives"],"p":["Domestic priority is claimed under 35 U.S.C. 119(e) from prior Provisional application Ser. No. 60\/230,037, filed Sep. 5, 2000, the entire contents of which are hereby incorporated by reference as if fully set forth herein.","The present invention generally relates to data processing in the fields of electronic messaging and collaborative communications. The invention relates more specifically to a collaborative communications system providing transportable applications, multiple-page electronic messages and electronic messages that are linked and aggregated.","Despite more than fifty years of development, computer systems and computer programs remain difficult to use. In particular, individuals who are not well-versed in technology or computer programming encounter numerous problems in carrying out simple data processing tasks, such as collaborating on the form or content of a document, polling others to arrive at a decision, scheduling a meeting or activity, and other tasks. Several main approaches have been used in the past to facilitate these activities.","In a first approach, a pre-configured computer program or application is provided to all individuals who will participate in the data processing tasks. The individuals interact with the application to carry out the tasks. This approach requires little technical knowledge, but the approach is often too rigid and limits the individuals to using the particular forms, features and functions selected by the developers of the application. A related approach involves use of electronic mail (\u201ce-mail\u201d) for distribution of information or for collaborative communications. E-mail is inefficient and often requires sending multiple messages before a task can be completed. Further, since the content of the messages is static, the content tends to become old and stale. The number and content of the messages are not easily organized.","In another prior approach, users construct their own custom computer program to perform exactly the desired task. This approach requires extensive technical knowledge that is beyond the capability of a typical user.","In a third approach, certain collaborative computing applications and environments have been provided. Applications such as Microsoft NetMeeting enable users to participate in online meetings, but have a significant limitation in that they are synchronous; a meeting participant must be online and present to participate. Applications such as Lotus Notes have enabled users to share documents, but creation and deployment of applications to carry out more sophisticated business tasks, such as automating personnel recruiting processes, is complicated and requires programming knowledge. Further, the collaborative processes that are supported by these applications \u201coff the shelf\u201d are limited and do not encompass many multi-step business processes.","A common disadvantage of all these approaches is that it is very hard for individual, non-technical users to create computer-based applications or systems that automate specific desired tasks and provide the applications or systems to others. Further, the approaches generally enable users to see only a static view of content that is under discussion or modification. Another disadvantage is that the approaches are typically synchronous; a user must be present during the collaboration and has no way to view actions or communications that have occurred before the user arrived or after the user leaves.","Another common disadvantage is that integrating the past approaches with existing or \u201clegacy\u201d databases and applications is extremely complicated, and requires programming knowledge. There is no easy way to enable such legacy systems to automatically interact with collaborative applications, without human intervention, to exchange data and carry out business processes. There is no simple means to enable the collaborative applications to receive signals from the external applications, take action based on the signals, or initiate new processes based on the signals.","Based on the foregoing, there is a clear need for an improved way to facilitate collaborative communication among individuals. In particular, there is a need for an approach that can enable new kinds of collaborative productivity applications, created by anyone and delivered using familiar communication mechanisms.","There is a related need for an approach that can facilitate distribution of secure, collaborative applications among separate but networked enterprises, so that users or applications of different enterprises can collaborate.","Computers have been used in messaging services since the 1960s, when suppliers of telex and telegraph services began deploying automated switching functions and providing complete computer-based messaging systems. An example of such a system is a teletypewriter system. Many of these systems used computers as data switches that relayed messages without providing message composition capabilities or the ability to search through previously sent messages.","Development of interactive time-sharing computer systems resulted in creation of linking tools that enabled two users to interlock their terminals in order to see what the other was typing. Mailbox tools were developed to allow users to send short messages to other users on-line on the same system. For example, the interactive time-sharing system at MIT's Project MAC had both linking and mailbox facilities that supported text messages.","Construction of the Advanced Research Projects Agency Network (ARPANET) in 1969\u20131975 initiated extensive research in store-and-forward communication techniques. An outgrowth of this research was the development of electronic messaging facilities, including electronic mail. Such facilities supported transport of simple text messages.","In the early 1980s, international standards bodies began work on electronic messaging with the goal of ensuring interoperability among different systems. In 1984, CCITT adopted a standard for store-and-forward messaging services called X.400 Message Handling Services (MHS). The International Standards Organization (ISO) created a competing standard called Message Oriented Text Interchange Standard (MOTIS). Differences among the versions were largely overcome by 1988.","The period 1973 to 1989 saw development of several computer systems that featured graphical user interfaces rather than character displays, such as the Xerox Alto, the Apple Lisa and Macintosh, and personal computers using Microsoft Windows. During this period, users developed interest in the ability to send messages having elements other than text. Examples of such multimedia e-mail systems include Slate, from BBN Software Products, and the first release of Lotus Notes, from Lotus Development Corporation.","To support transmission of formatted images, sound, files, folders, and video attachments, in 1992 the Internet Engineering Task Force (IETF) created a multi-media messaging standard known as Multipurpose Internet Mail Extensions (MIME). Using MIME, users of different kinds of computers can exchange e-mail messages that include formatted images, sound, files, folders, and video attachments. Further, a single MIME e-mail can contain alternative representations of the same data. For example, there can be an attachment in text form followed by one containing bitmap page images of the same information.","Implementations of MIME generally displayed messages in a graphical user interface window that presented different attachments as icons embedded within a text message. Other implementations, such as NeXTMail, from NeXT Computer, Inc., could display text, graphical elements, and attachment icons within the same message. A drawback of this implementation, however, was that to view different parts of a long message, a user was required to scroll down through a single contiguous message display in order to reach the desired part of the message.","Further, such systems provide no way to organize related elements of a message, other than manual cutting of one part of the message and pasting it into another upper or lower part of the same contiguous message. This procedure could quickly become unwieldy when such messages were exchanged among members of a group. As each member of the group added comments, graphics, or other attachments to the message, the message would become longer and longer, requiring extensive scrolling and searching to locate a desired part, or to correlate one comment of one user with a related comment of another user.","Other systems display multimedia attachments in a separate pane of a graphical user interface window that is displaying the message. For example, in Microsoft Outlook, when multimedia attachments are present, they are displayed at the bottom of the message window, divided from the message body by a separator bar. A disadvantage of this approach is that it is hard to correlate the attachment with a particular part of the message body.","In a more recent development, e-mail programs such as Microsoft Outlook have been linked to browser programs such as Microsoft Internet Explorer. Through such linkage, the e-mail program can receive an e-mail message formatted in Hypertext Markup Language (HTML) and display a rendered version of the HTML within an e-mail message display window. Using this approach, e-mail messages may contain text, graphics, and embedded hyperlinks to other content, multimedia resources, or applications. However, this approach has not cured the deficiency of prior approaches with respect to content organization and scrolling. It is still necessary to scroll through a long HTML e-mail to find desired content, and there is no simple way to correlate related content. Further, authoring HTML e-mail requires familiarity with complex HTML authoring software such as Microsoft FrontPage.","Based on the foregoing, there is a clear need in this field for a way to improve organization of content of e-mail messages.","There is a specific need for a way to organize related content portions of e-mail messages within the messages in a way that makes related content easy to find and display.","There is also a need for a way to create, deliver, receive, and display e-mail messages in which related content is correlated and accessed without scrolling or similar cumbersome operations.","E-mail, the World Wide Web, and instant messaging each have contributed to a revolution in the way people communicate. Each of these platforms offers a variety of benefits. For example, e-mail is available at the user's convenience; messages remain in an inbox until the user deletes them. Because e-mail arrives in the inbox, the user does not have to \u201cgo\u201d anywhere to retrieve it. E-mail is useful for sending a note to a friend or addressing a large group. Because e-mail is individually addressable, a user can adapt the recipient list to the subject. Experts have estimated that users spend more time in e-mail than any other Internet application.","The World Wide Web (\u201cWeb\u201d) contains an abundance of information that is dynamically changing and ever growing. It is graphical and interactive, and offers the ability to conduct transactions. With relatively simple user interface operations, such as button clicks, the user can receive valuable information, purchase an item, or review work materials that have been placed on an internal website. Instant messaging offers the advantage of timeliness; the recipient knows that a newly received message is current, because the recipient is in a one-on-one communication session with the sender. This form of messaging has grown rapidly because people want information that is current.","However, e-mail, the web, and instant messaging have inherent limitations that restrict what users can do with them and how they communicate information to users. For example, e-mail today consists of static text that is neither dynamic nor interactive. E-mail messages are considered to be \u201cdead on arrival\u201d because they are current when sent, but are not current when read. For example, a user may not read an e-mail until hours after it was originally sent and there can be subsequent e-mails that supersede the original message, but the original outdated message remains in the inbox. There is no logical order to messages that are received in the inbox other than the time of arrival. Occasionally, the user can even receive an answer to a question before the question arrives, because of delays in server responses. The user is required to either scan all messages or sort them into some order to verify that the user has all needed information before taking action.","Unthreaded responses are another problem with e-mail. If a user sends a message to six people, and they all respond, the user receives six new messages in the inbox referring to one subject. The user is left to organize it all. Perhaps the most significant limitation of e-mail is the volume of messages that can flood a mailbox. When a user receives hundreds of e-mail messages a day, the sheer volume of e-mail is daunting.","Using the Web requires the user to proactively visit a location for information updates, and the user may need to visit multiple locations and pages before the user finds desired information. The Web is not personal or targeted, so it is not as effective as e-mail for communications. There are meeting sites on the Web, but users must seek out the destination, which requires them to remember URLs and passwords. There are also sites that offer group discussion and collaboration, but their groups are generally rigid and are based around a common interest.","Instant messaging allows for dynamic communication, but only if both participants are actively signed on and are available to receive messages. If one user is not able to respond, the link is dead and the user has lost the ability to instantly communicate. In addition, it's difficult to document \u201cconversations\u201d that occur through instant messaging; users lose the ability to have an audit trail or history.","Based on the foregoing, there is a need for a communication system that provides ways to share messages and information, ideally by providing the best features of e-mail, the Web, and instant messaging, while overcoming the limitations that each of these carries.","There is a particular need for methods and mechanisms for linking multiple messages together so that multiple message threads and sub-topics may be related and associated with a particular topic.","Users and applications may desire to link one message to another related message. However, past approaches to communication systems do not allow information, such as applications and electronic messages, to be related, threaded, managed and stored in an efficient, flexible, and simple way. Such approaches also do not provide a way to obtain a view of complex webs of messages.","There is also a need for methods and mechanisms that can aggregate related topical information within the context of a single message or web of messages.","The foregoing needs, and other needs that will become apparent from the following description, are achieved in the present invention, which comprises, in one aspect, a method and system for communicating and collaborating using transportable applications. Embodiments provide a breakthrough communication approach that improves collaboration among groups of individuals, within corporations, among customers, partners, and suppliers, and among distributed computer systems. In one approach, computer processes enable such users to create or host a new kind of collaborative productivity application called a transportable application. Transportable applications as disclosed herein may be used, for example, to bring together people, systems and information needed to contribute, make decisions, and take action on collaborative business processes or projects. In one embodiment, when a transportable application is opened, it reveals a live, shared, structured workspace that is specific to a project or process. Unlike past approaches, the workspace is continually updated to reflect the latest input of any recipient or user.","The transportable applications can be created by anyone, including individuals, non-technical users within an enterprise, or automatically by other computer programs, applications, or programmatic mechanisms. Each transportable application may comprise one or more pages each having one or more building blocks that encapsulate processing functions and data. Each building block may comprise one or more static content regions, one or more dynamic content regions, and other information. Content for the dynamic content regions may be stored in a database of a server.","The transportable applications can be distributed to others using existing transport mechanisms. For example, in one specific approach, transportable applications can be deployed in a manner analogous to sending an electronic mail message. Recipients may be individual users, groups, or other programs or applications.","The transportable applications can be accessed programmatically, or by an e-mail in-box, or using a web browser. When a transportable application is accessed by a recipient, data for its dynamic content regions is automatically retrieved. Input created by a recipient is accepted by the server and updates the dynamic content region of the transportable application. If a recipient modifies data in the transportable application, the modifications or updates are stored asynchronously and dynamically with respect to the sending and receiving of the modifications or updates by the recipients. Thus, the dynamic content is always current, and whenever any recipient opens and views the transportable application, the content of the transportable application is retrieved and displayed in then-current form.","Unlike past approaches, which rely on distribution of static information, transportable applications as defined herein enable full interaction and navigation of dynamic content without the user leaving the transportable application. A shared workspace is created in which multiple persons or systems can interact within the same transportable application, and all responses are aggregated in one place. The content of the transportable application is current when read; the transportable application is constantly updated so users can always see the most current information and responses of other group members. Transportable applications may be supported by related services, such as a secure mode that enables only authorized members to view and interact with the content, notifications that inform a user when an update to a transportable application has occurred, etc. Transportable applications may generate events that are acted upon by other transportable applications, and may act upon events that are received from external systems.","In a business enterprise environment, transportable applications and the systems and methods disclosed herein enable the enterprise to save time, reduce costs, and accomplish more. Companies can use transportable applications for simple shared projects to the complex and collaborative business processes required for global, multi-company projects, depending upon the need. Collaborative business processes may be rapidly automated and streamlined. Collaboration may be extended outside the corporate firewall by sending the transportable applications to others. The relevance and speed of collaborative application development may be improved. Costs of distributed team interaction may be reduced.","In one approach, the system features an integration framework comprising connectors that provide connectivity to and integrating with existing or \u201clegacy\u201d databases and applications. An author can create transportable applications that can retrieve data values from and set data values in such external applications and systems without programming knowledge, or even automatically from another program. As a result, legacy systems can automatically interact with collaborative applications, without human intervention, to exchange data and carry out business processes. A simple and efficient means is provided to enable the collaborative applications to receive signals from the external applications, take action based on the signals, or initiate new processes based on the signals.","According to another aspect, a method for associating related electronic messages in computer storage is disclosed. A first transportable application is created and stored. User input requesting creation of a link from the first transportable application to another transportable application is received. User input that selects a second transportable application from among a plurality of previously created transportable applications is received. A link from the first transportable application to the second transportable application is created and stored.","As a result, transportable application may be inter-related in complex message webs. The message webs may also be inter-related in message web rings. Links may be generated manually or automatically, based on context, workflow processes, or other known relationships among applications. Recipient lists and data may propagate among fields of linked transportable applications, directly or according to abstract business rules.","According to another aspect, a method for processing a request to display an electronic message is disclosed. First message data is generated. The first message data defines at least a first message portion and one or more navigation regions for one or more other message portions of a multiple-part electronic message having a plurality of message portions. The first message data is provided to a client. A request is received from the client for a second portion of the electronic message selected from among the other message portions. Second message data is generated which, when processed at a user interface of the client, causes the client to display the second portion of the electronic message. The second message data is provided to the client.","Multiple-part electronic messages are disclosed. A graphical user interface of an electronic messaging system displays a message in the form of one or more header portions and one or more body portions. Each of the body portions has a selection region. While one body portion is visible at a given time, all the selection regions are continuously visible in the user interface to facilitate selection of any of the body portions at a particular time. Selecting a selection region of a non-displayed body portion causes a server to generate a refreshed user interface that includes the entirety of the selected body portion, and that hides the previously viewed body portion. As a result, a large amount of associated information may be combined in a single message in a way that is clearly organized and easily accessible.","Transportable applications are disclosed. The transportable applications may be linked into webs of associated messages. For example, multiple related discussions or applications may be associated and organized. The webs of messages may be linked into rings of related message webs. As a result, workflow processes and complex associated information may be accessed and analyzed in an ordered way.","In other aspects, the invention encompasses computer readable media, and systems configured to carry out the foregoing steps. Other features and advantages of the invention will be apparent from the following detailed description, the drawings, and from the claims.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Unless otherwise defined, all technical and scientific terms used herein have substantially the same meaning as commonly understood by one of ordinary skill in the art to which the invention pertains. ZAPLET is a trademark of Zaplet, Inc., Redwood Shores, Calif. Microsoft, Microsoft Outlook, Microsoft Active Directory, Microsoft Exchange Server, Microsoft SQL Server, Microsoft Internet Explorer, and Microsoft Internet Information Server are trademarks of Microsoft Corporation, Redmond, Wash. All other trademarks mentioned are the property of their respective owners.","Embodiments are described herein in sections according to the following outline:\n\n","According to an embodiment, a communications system, and data processing methods that it carries out, facilitate collaborative communication and work among a group of individuals. Embodiments feature structures and processes for creating, authoring, transporting, updating, and viewing certain transportable applications. In general, a transportable application is an interactive, dynamic, addressable computer software application that can be transported among systems. A transportable application comprises one or more pages. Each page comprises one or more building blocks, and can be designed for either specific or general uses. Each building block contains the user interface, data elements, and processing capability that enable specific functions within a page.","A transportable application can be transported among different computer systems, clients and servers using transport mechanisms such as e-mail and other data transport protocols. When a transportable application arrives at a destination computer system, a user of that system can open the transportable application, view content that is dynamically asynchronously updated from a server source, and interact with functional elements of the transportable application in order to carry out work or other useful tasks.","Transportable applications are a new way to communicate by turning an existing transport mechanism, such as e-mail, into a live, shared place. Transportable applications enable users to share documents, Web pages, data, business applications, schedules and other information with a group of people or with other systems. They can be used to make decisions with friends, family, or co-workers, schedule meetings and events, gather group data such as contact information, collect opinions, send invitations and RSVPs, and other tasks. In one embodiment, transportable applications enable all recipients in a group to communicate using just one message. Because a single transportable application takes the place of a thread of emails, transportable applications reduce inbox clutter and eliminate confusing strings of messages.","Transportable applications as described herein are better than e-mail because they provide information that is fresh and up-to-date. In one embodiment, transportable applications arrive in the user's inbox like normal e-mail, but they are current when the user opens them; new information can be included between the time the original author sent the transportable application and the time you open it. The transportable applications are current when read, not current when sent, eliminating the problem of receiving messages that are obsolete upon arrival.","The transportable applications add organization to the normally undifferentiated pile of individual e-mail messages. For example, transportable applications provide a structured container in which related data is collected, thus freeing users of organizing multiple pieces of e-mail. Additionally, transportable applications show aggregate views of multiple pieces of e-mail, thus summarizing information for better decision making. Also, transportable applications save time by reducing the volume of e-mail. By consolidating many responses into a transportable application, there are fewer pieces of e-mail to read.","Transportable applications are better than using the Web as a communications medium, for numerous reasons. For example, transportable applications push individualized messages into a user's Inbox. Transportable applications do not require a user to remember to visit a web site to see if they have a message.","Moreover, transportable applications are better than instant messaging as a day-to-day communications platform because transportable applications overcome the difficulty in getting multiple people to collaborate in real time. Transportable applications are targeted for group communication and persistent knowledge acquisition. In contrast, instant messaging is not designed for group communications and persistent knowledge acquisition.","1.1 System Structural Overview",{"@attributes":{"id":"p-0147","num":"0193"},"figref":"FIG. 1A","b":["102","108","105","102","108","105","108","102"]},"Client  may be, for example, a workstation, personal computer, personal digital assistant, cellular telephone or other wireless processing device, or any other end station data processor. Client  also may be a programmatic process that forms a part of a larger computer system or application program. Network  is any data communication network that can carry data communications between client  and service unit . Network  may be a direct electronic connection of client  of service unit ; a local area network; a wide area network; one or more internetworks; a combination of a an access network, a service provider network, and one or more internetworks; or any combination of the foregoing. Client  also may comprise the combination of any of the foregoing with a client software application that enables a user to view, create, edit, and manage transportable applications.","Service unit  is a facility that hosts hardware and software elements that provide the functions described herein, and may be a private business enterprise, a service provider that provides the functions described herein to others, e.g., on a licensed basis, subscription basis, etc., or any other entity that hosts appropriate service equipment and facilities.","Client  executes a browser  and a personal information manager . Browser  is a conventional Internet or World Wide Web browser, such as Microsoft Internet Explorer. Personal information manager  is one or more software elements that provide e-mail processing, among other functions. Optionally, personal information manager  also may provide other personal information management functions such as address book management, calendar management, notepads, task lists, etc. An example of a commercial product suitable for use as personal information manager  is Microsoft Outlook. In an alternative approach, client  may be an external computer system that receives transportable application programmatically, without using browser  or personal information manager .",{"@attributes":{"id":"p-0151","num":"0197"},"figref":"FIG. 1B","b":["105","105","110","112","114","116","118","120","122","124"]},{"@attributes":{"id":"p-0152","num":"0198"},"figref":["FIG. 1C","FIG. 1A"]},"In the example embodiment of , multi-page messaging service  comprises component\/container processing logic , administrative services , policy management & reporting services , access control service , mail services , device services , offline message processing services , and event and notification services .","The component\/container processing logic  creates and manages a plurality of message components and message containers using processes that are described herein. The administrative services  provide administrative functions, such as adding or deleting users, importing files of users, identifying an external directory server and associating it with the system, etc. The policy management & reporting services  facilitate creating and managing policies for acting on transportable applications, access controls, etc.","Access control service  is communicatively coupled to security service , which may include an authentication, authorization and access (AAA) server, such as a RADIUS server. Access control service  communicates with other elements of multi-page messaging service  to receive requests to determine whether a particular user is authenticated in the system. The access control service also can receive and process requests to determine whether an authenticated user is authorized to access a particular message or a particular page of a particular message.","Security service  provides authentication and protection of user names and passwords. In one embodiment, security service  also provides Secure Sockets Layer (SSL) communication facilities so that communications from clients  to service unit , and from service unit  to an external directory server or other secure element, can be encrypted and carried out in a secure manner. Security service  also may provide means for integration with third-party security systems. Using such integration, security service  may be extended to provide authentication, access control, privacy, non-repudiation, and data integrity services. Such third-party systems may be the Sun Java Cryptography Engine, systems from Entrust, Cylink, Cybersafe, Verisign, etc. Security service  may support encrypted communications using asymmetric encryption algorithms such as RSA, DSS, D-H, etc.; symmetric encryption algorithms such as DES, triple-DES, DESX, IDEA, ES2, ES4, Blowfish, etc., message digest or hash algorithms such as SHA-1, SHA, MD5, MD2, RIPEMD, etc. Such encryption algorithms can be called programmatically from containers, building blocks, or system services that need to encrypt or decrypt data for communication, storage, or retrieval.","Mail services  is responsible for receiving data from other elements of the multi-page messaging service  and creating e-mail messages based on the received data. Mail services  also interfaces with message service  to dispatch and forward messages to users and clients. An example of a commercial product that may be used for message service  is Microsoft Exchange Server 2000.","In one specific embodiment, each of the foregoing services is implemented in the form of one or more Java class libraries. Thus, the services are provided by generic software modules that can be called by other software components of the system. The modules can incorporate third-party components, such as calculation engines, a workflow engine, etc.",{"@attributes":{"id":"p-0159","num":"0205"},"figref":"FIG. 2A"},"One or more application servers  host containers in the form of Enterprise Java Beans  and store programmatic objects representing containers, building blocks, pages, and transportable applications in a cache . Application servers  execute code of the containers and building blocks and call servers and services in a services domain  to result in servicing client requests. In one embodiment, application servers  are implemented as a plurality of clusters of application servers, to provide load balancing and increased throughput. Inbound client requests are routed to a particular cluster using a routing mechanism that is described further herein.","Application servers  are communicatively coupled by link  to database server , which comprises one or more databases. The databases in database server  provide persistent storage of stored procedures, a repository of data and logic for containers, building blocks, and other system objects, and an event database that supports event-based messaging. Database  may be, for example, an Oracle database server, Microsoft SQL Server, etc. Link  may be implemented, in one specific embodiment, as JDBC calls from applications server  that traverse an SQL network using the SQLNet protocol and arrive at database server  in Oracle Command Interface (OCI) format. Alternatively, ODBC may be used, as in the case of SQL Server.","The database server  provides one source for content for building blocks and containers that application servers  may dynamically retrieve and present to clients  as part of processing transportable application and executing their building blocks. Other data sources may be used. In one embodiment, application servers  are communicatively coupled by an NFS link  to one or more file servers . This arrangement enables application servers  to obtain text files, word processing documents and other contents of a file system to include in the dynamic content of a building block or for other purposes.","One or more adapters  cooperate with a connection framework in application server  to communicate with one or more external systems or applications . Such external systems or applications include legacy applications, enterprise systems, etc., as described further herein.","In another embodiment, application servers  are communicatively coupled to one or more image servers  by an HTTP link . This arrangement enables application servers  to rapidly retrieve one or more graphical images, digital photos, and other image information to include in transportable applications when they are presented to clients.","Application servers  may obtain dynamic content from one or more external sources and may communicate with clients using connections to public networks. In one embodiment, application servers  are communicatively coupled by a first HTTP link  to an HTTP server  (Web server ), proxy server , and second HTTP link . This arrangement enables application servers  to receive a large number of separate HTTP connections and requests from clients  over second HTTP link , which are received at proxy server  and passed to the application servers over the first HTTP link . When the application servers have prepared content for presentation to clients in response to client requests, Java Server Pages elements of the application servers send the content to HTTP server  over the first HTTP link . The HTTP server  then issues an appropriately encapsulated HTTP response to the clients over HTTP link , through proxy server .","Application servers  are also communicatively coupled by link  to middleware , which provides basic messaging infrastructure functions. In one specific embodiment, link  uses the Java Messaging System (JMS) protocol, which may also be used to transport data on link  from middleware  to one or more event daemons  of event service . The event service  is communicatively coupled by link  to database server . In one specific embodiment, link  is implemented by JDBC calls from event service  that traverse the SQLNet and arrive at database server  in OCI format.","Directory information such as user names and group membership may be obtained from one or more directory servers  that are communicatively coupled to application servers  by link  and to event service  by link . In one embodiment, directory servers  conform to Lightweight Directory Access Protocol (LDAP) and communications on links ,  are carried out using LDAP. Directory servers  need not be co-located with application server , and may be located in any location that is accessible using LDAP communications over a network or similar facility.","Application servers  communicate with e-mail clients using mail servers , and with wireless devices, such as wireless personal digital assistants and cellular phones, using a wireless gateway . In one embodiment, one or more mail servers  are communicatively coupled by an SMTP link  to event services , which is responsible to generate events that request mail transport. Event services  also are coupled by SMTP link  to wireless gateway , and the wireless gateway may be communicatively coupled to the mail servers by link . Mail servers  and wireless gateway  communicate with e-mail clients, other client devices using external networks that are reached using SMTP link .",{"@attributes":{"id":"p-0169","num":"0215"},"figref":["FIG. 2B","FIG. 2A"]},"The software elements of the system may be viewed as logically organized in a client tier , middle tier , and data tier . Client tier  comprises an e-mail client  that executes on a client computer, e.g., client , and a browser  that executes at the same client. The e-mail client  and browser  may interoperate with a shared DLL that provides HTML parsing functions, so that the e-mail client can display HTML e-mail messages.","In one embodiment, system services generally are provided by a plurality of servlet constructs that implement the services. For example, middle tier  comprises a mail server  that communicates with e-mail client  over a network link. The mail server is communicatively coupled to one or more mail queuing servlets  that are organized in a Web container  of program elements. The Web container  further comprises a mail formatter , which may be implemented in the form of one or more Java Server Pages. Creation and modification of dynamic content of a transportable application is generally performed by dynamic content creation servlets . A Web page formatter , implemented in the form of one or more JSPs, is responsible for formatting Web pages or other HTML content that may form a part of a transportable application.","In one specific embodiment, middle tier  further comprises an EJB container  that comprises a plurality of program elements in the form of Enterprise Java Beans (EJBs). EJBs are Java\u00ae language classes that can interoperate with a plurality of servers within an enterprise network. Data access EJBs  are responsible for interfacing higher-layer elements with database  and one or more stored procedures  in the database. Core EJBs  are responsible for carrying out access control processes, managing event services, etc. Data and event integration EJBs  provide an interface to external systems such as a legacy database , an enterprise application integration program or bus , etc.","In an embodiment, these elements are implemented using Java-based technologies in conformance with the Java 2 Enterprise Edition (J2EE) specification for server-based applications. However, embodiments are not limited to this context.",{"@attributes":{"id":"p-0174","num":"0220"},"figref":["FIG. 2D","FIG. 2D"],"b":["2000","2002","2000","2004","2002","2008","2026","2020","202","208","2034"]},"In this configuration, Outlook client  communicates over a mail application programming interface (MAPI) or remote procedure call (RPC) link  with a MAPI processor  of the Microsoft Exchange server . The Microsoft Exchange server  further comprises an SMTP agent , OWA agent , event handling system , and Exchange OLE Database agent . The SMTP agent  can communicate with SMTP-compatible mail servers to enable the system to transport e-mail messages across a network. Event handling system  receives events generated by application server  or its applications and processes them by, for example, storing information in mailbox store  and public stores  of Web storage system . Database operations by or on behalf of application server  are facilitated by Exchange OLE Database agent , which is communicatively coupled to Web storage system .","Web storage system  provides Exchange server  with a unified storage name space for all messages, calendar information, documents, discussions, or other data. Its objects are accessible using HTTP, XML, COM, WebDAV, and file system calls. In one embodiment, transportable applications are stored in Web storage system . Such transportable applications, their document attachments, and their building blocks are addressable in Web storage system  using URLs. Web storage system  may also store information about a plurality of Exchange offline folders, facilitating synchronization of offline updates to transportable applications.","Active Directory server  is communicatively coupled to Exchange server  and stores directory information, such as definitions of users and groups, locations of network elements such as servers, hosts, workstations, and printers, etc. The Active Directory server  is also accessible by application code A, which is hosted by application server , through a common data object (CDO) agent  that is hosted by the application server. Active Directory is an example of an LDAP directory as described herein.","Application server  further comprises an Active Data Objects (ADO) process  that is communicatively coupled to Exchange OLE Database agent  and to database  and host integration server . These communication paths enable functions of application code  to set and retrieve values of data objects that are stored in database , in external legacy systems that are accessed using host integration server . Further, the application code  can set and retrieve values of data objects that are stored in Web storage system  by appropriate messages to Exchange OLE Database agent .","Application code A of application server  comprises sequences of computer program instructions that are configured to carry out the functions that are described herein.","In the configuration of , transportable applications that are hosted by application server  may be viewed and managed using Outlook client . The Outlook client  is an example of an HTML e-mail client that can display transportable application content in rich HTML form within an e-mail message window. The transportable applications may be transported over a network using Exchange server . Active Directory server  may serve as a source for user and group information. Building blocks may be implemented in the form of Web forms, which provide user interface front-ends to data and logic in the Web storage system .","Exchange server  includes instant messaging support with presence detection API's. Thus, application server  may determine, by an appropriate API call, if participants in transportable applications are actually online, and utilize instant messaging for communications, and record such sessions at user request. Transportable applications can include NetMeeting features for initiating and storing data conferences, such as virtual white board, application sharing, video conferences, audio conferences, etc., through Exchange server .","Exchange has threaded discussion capabilities that are programmatically available. In one embodiment, application server  uses the threaded discussion APIs to provide a threaded discussion capability, with presence detection, as a core building block.","Calendaring and contact information access through Exchange server  allows for scheduling features, such as automatic meeting creation, available time lookup and resolution, meeting cancellations, etc., and more integrated addressing and address validation on the server side. Use of Exchange server  also enables application server  to communicate transportable applications to PDA, mobile phone, and other non-PC devices, over wired and wireless.","A workflow engine of Exchange server  has an accompanying graphical workflow designer that allows execution of logic and invocation of components in and outside of Exchange, via COM, that provide message routing, approval, and state transitions. Thus, transportable applications of application server  may participate and drive these workflows.",{"@attributes":{"id":"p-0185","num":"0231"},"figref":["FIG. 2E","FIG. 2D","FIG. 2E","FIG. 2E"],"b":["2004","2008","2026","2020","202","2034","2036","2008","2014","2000","2005","2036"]},"Browser  and Outlook client  may carry out HTML display functions using a shared DLL.","In this configuration, application server  may serve transportable applications to a user through browser , Outlook client , or both. For example, a user may use browser  to open an HTTP connection to IIS , which communicates HTTP requests and posts among application server  and the browser. Using this mechanism, a user may obtain the portal presentation described herein and may view, create, and manage transportable applications. Alternatively, as in , the user may obtain a portal view, or view an individual transportable application, in an e-mail window that is generated by Outlook client .",{"@attributes":{"id":"p-0188","num":"0234"},"figref":["FIG. 2F","FIG. 2E","FIG. 2F"],"b":["2004","2008","2026","2020","202","2034","2036","2008","2014","2000","2005","2036","2005","2000","2005","2004"]},"The architecture of  further features a plurality of Active Server Page (ASP) constructs that are hosted by IIS . The ASPs are callable from application code A, as indicated by link , by passing URLs over a network to IIS . The URLs identify a particular ASP and provide one or more function parameters or data values.","In this configuration, certain transportable application functions that are defined herein are carried out by appropriately configured ASPs  rather than by application code A. For example, any of the functions that are described herein as implemented using JSP constructs may be implemented, alternatively, using ASPs  in a system configured as in .","In still another alternative configuration, elements of the Microsoft \u201c.NET\u201d infrastructure are used. In this embodiment, the database server  is Microsoft SQL Server, but all other components are found within Windows 2000, Windows XP, and related server products of Microsoft. For example, ISAPI filters are used as a substitute for J2EE servlets as disclosed herein; Active Server Pages substitute for JSP's; Microsoft Message Queues (MSMQ) substitute for JMS; COM+ components substitute for EJB's; and ODBC is the database communication protocol rather than JDBC. Data access objects (DAOs) as disclosed herein may be implemented using a custom OLE database provider that is compatible with the Microsoft Active Data Object (ADO+) framework. COM+ access to external legacy applications may be provided as an alternative to JCA or connectors as disclosed herein.","As set forth in the foregoing, embodiments of transportable applications, an application server, and associated functions described herein are applicable equally to contexts that use Microsoft servers, products, and related elements, as well as Java servers, open-source elements, servers or products of Sun Microsystems and its partners, etc.","1.2 Transportable Application\u2014Structural Overview","A system having the foregoing configuration may be used to create, send, respond to, interact with, and manage a plurality of transportable applications.",{"@attributes":{"id":"p-0195","num":"0241"},"figref":"FIG. 1E","b":["190","200"]},"In block , the author creates, authors and edits a new transportable application using the editor, resulting in creating and storing the transportable application, as shown in block . Such authoring also includes identifying one or more recipients of the transportable application. In block , the transportable application is transported to all the recipients using a suitable transport mechanism. Transport mechanisms may include e-mail, wireless gateways, or other means.","When the transport mechanism is e-mail, in block , each recipient receives an e-mail message identifying the transportable application and appearing to contain the transportable application. Assume that a particular recipient opens the e-mail message that identifies the transportable application. In response, in block , the system dynamically determines what client e-mail program is in use, and determines what display capabilities it has with respect to fonts, colors, graphics, other types of information, etc. In block , the transportable application is displayed to the user using its e-mail client, based on the available display capabilities of the client. Further, any dynamic content associated with the transportable application is automatically retrieved, in its then-current form, from a database and displayed as part of the transportable application.","In block , the recipient responds to the transportable application in a manner analogous to replying to an e-mail message. Text comments or other changes to dynamic content of the transportable application may be entered in the application as it is displayed within a window of the e-mail program. Any such changes are updated at the database in dynamic content associated with the transportable application, as shown by block . As a result, any other recipient who subsequently views the same transportable application will receive a current view of the dynamic content. In this sense, the dynamic content and the transportable application are always current when read.",{"@attributes":{"id":"p-0199","num":"0245"},"figref":["FIG. 1F","FIG. 1E"],"b":"191"},"In block A, one or more pages for the transportable application are created or retrieved from storage. In block B, a template for the transportable application is created. In block C, a transportable application is created based on the template and\/or the pages.","Each of blocks A, B, C may be carried out by a different individual. For example, one person can create a template and another person can create a transportable application based on the template. Recipients of the transportable application may, depending on the settings of the transportable application, change the structure of the transportable application. Alternatively, the same person can be responsible for all stages of the authoring process by creating templates, authoring new transportable applications, and participating in collaboration with others within the framework of a transportable application. Individual pages and templates may be shared with others.",{"@attributes":{"id":"p-0202","num":"0248"},"figref":"FIG. 2C","b":["280","282","284","286","287","287","287","287","292","294","288","296"]},"In one specific embodiment, command options bar  includes a New Message button, Reply to Author button, Forward button, and Print View button. The New Message button is used to author a new transportable application message. A Reply to Author button is used to send a message directly to the author of the transportable application displayed in window . The Forward button is used to forward the transportable application to additional recipients. The Print View button is used to obtain a properly formatted printed version of the transportable application.","Header bar  provides addressing information identifying the author of the transportable application, its recipients, and its subject or title. In one embodiment, the specific names of recipients are hidden, and header bar  includes a View All Recipients link . Selecting the View All Recipients link causes the system to display a list of all recipients.","One or more notifications may be associated with a transportable application. If a notification is present for a transportable application, a notification link  is displayed, and provides a hyperlink with which the user may obtain a view of the notifications. When a user receives a transportable application, a notification system enables the user to \u201copt-in\u201d to individual transportable applications in which the user has an interest. In one approach, if dynamic content associated with the transportable application changes, a new copy of the transportable application is sent to the user. Alternatively, notifications may comprise re-bolding an identifier of the transportable application in the user's e-mail client. In this manner, the user can track changes without having to remember to continually go back and check on the state of the transportable application. For example, a user may read a transportable application, opt-in to the notification system for that transportable application, delete the transportable application from the user's e-mail Inbox, and wait for a notification when anything changes in the transportable application.","Each user is sent only a single copy of the transportable application, even if there are multiple responses to it. The system knows when the transportable application has been read by the user and can minimize the number of notifications sent. If the user has not opted-in to the notification system, the user can always open the transportable application or refresh the display of client , e.g., by selecting a Refresh button of the browser, to see the latest information.","A transportable application also can change state during its lifetime. For example, an author can close a transportable application; this notifies the recipients that comments or replies are no longer being accepted on the subject of the transportable application. The author of the transportable application can then communicate a decision or the results of the transportable application to all the recipients. Thus, the user no longer needs to spend time writing a response to an e-mail when its subject matter is essentially closed.","An Options link  provides a mechanism to display a list of actions that the user can take with the transportable application.","The action request or note  displays a brief urgent note or request from the author of the transportable application. Such notes provide a way to carry out a side conversation among recipients of the transportable application and the author or other recipients. Such notes may be stored persistently and generally are directed to one recipient. In one embodiment, a transportable application that is sent in the form of an HTML e-mail to a recipient may comprise a script, which is executed when the message is opened by the recipient, that establishes an HTTP connection to application server , requests any changes to dynamic content of the transportable application, determines whether the recipient has received any notes, and displays the notes if any have been received. The notes may be displayed within the transportable application, as in , or in a pop-up window that is displayed separately.","1.2.2 Receiving and Sending Transportable Applications","In general, interacting with a transportable application involves receiving a message that references or contains a transportable application, entering a response, and using one or more transportable application commands. A user may receive a transportable application as a message carried using any suitable transport mechanism. In this description, for purposes of illustrating a simple example, the transport mechanism is assumed to be e-mail. However, any other suitable transport mechanism may be used, such as wireless gateways, voice and other multimedia protocols, etc. Further, various e-mail protocols may be used, such as SMTP, MAPI, etc.","When a user receives a transportable application, the user receives a specially designated e-mail message in the in-box of the e-mail client of the user. To begin interacting with the transportable application, the user opens the message. In response, the contents of the transportable application are automatically dynamically updated from a server, such as application server  of . The transportable application is also updated when a user submits a response.","Specific processes for interaction with a transportable application depend on what pages and building blocks are contained in the transportable application. Specific building blocks are described further herein. In general, interaction involves selecting a desired page using a navigation area B and locating a response button. Each building block has a response button such as \u201cEnter Response,\u201d \u201cAdd Image,\u201d \u201cAdd Table Row,\u201d etc. The response button is selected. In response, the system generates and sends an Enter Response window to the client , which displays it as a new graphical user interface window. An appropriate response is entered.","When the response is complete, the user selects a Submit button to send the response information to the server. Alternatively, the user may select Cancel to exit without entering a response. In response to a Submit selection, information for the transportable application in a database associated with the server is updated to show the response. The foregoing steps may be repeated any number of times for any number of pages in the transportable application. When the user is finished entering responses, the user closes the message.","As noted above, notifications may be turned on and off by selecting notifications link .  is a diagram of a Set Notifications user interface window that is displayed when notifications link  is selected. Window  comprises an On radio button , Off radio button , and Customize radio button .","If the Customize radio button  is selected, in response, the server generates and sends to the client a Customize Notifications window.  is a diagram of a Customize Notifications window that may be displayed. The Customize Notifications window  displays one or more page check boxes  corresponding to pages of the transportable application. Selecting one of the check boxes  causes the system to generate a notification message only when a change occurs in the associated page. Window  also comprises an Overall Application check box  that triggers a notification when any change occurs in any part of the transportable application. Window  further comprises a Page Change checkbox  that triggers a notification when one or more pages are added to the transportable application or when its status changes. Window  also comprises a Set Frequency pull-down menu  that enables change notification messages to be sent at particular time intervals.","Each transportable application comprises one or more containers. Each container is implemented in the form of a programmatic object in an object-oriented programming environment. Each container may be a root container or an embedded container. Each transportable application has one root container, and one or more embedded containers.","The root container is responsible for interacting with transport services such as mail services , access and addressing services, and sending only new or changed information to and from its contained building blocks. Each root container stores a list of pointers or other references to contained child objects or building blocks. Thus, a tree walk of the pointers may be carried out to identify all building blocks or other child nodes of a particular container. A child, such as a building block or contained container, may have multiple parent containers; this mechanism enables, for example, a particular page to appear in more than one transportable application or in more than one template.","Each embedded container references and logically contains one or more other embedded containers or building blocks. Containers can call functions of the system services shown in , , and , and thereby provide access to such services to the containers or building blocks that they contain. Further, containers coordinate presentation of content of contained building blocks. Containers can subscribe to events relating to variable values that are published by contained building blocks and embedded containers. Containers also may publish self-defined events for the purpose of providing data or other information to other containers or building blocks, and containers may define global variable values that can be retrieved and modified by contained building blocks and embedded containers.","In one specific embodiment, each container is implemented in the form of an Enterprise Java Bean.","Transportable applications are created based on transportable application templates. To create a new transportable application, a user must first access a transportable application template. Templates may provide corporate processes, general-purpose applications, or other functions.","In one specific embodiment, corporate process templates include templates for recruiting management, collections, financial reporting, and similar corporate-level tasks. Examples of corporate process templates include:","Collections. Facilitates the collection of past due customer accounts. Multiple departments can participate in the process and upload relevant documents, read and add comments to a threaded discussion, and track the overall process using a shared timeline or task list.","Escalation Exception Manager. Helps resolve a customer problem by displaying a current view of the case, managing interactions, and facilitating decision-making. Supplements call center applications by extending collaboration to other departments.","Financial Reporting. Collections the quarter's performance highlights and manages the development of the earnings release and earnings call script.","Forecasting. Compiles forecast input from multiple sources. Participants can modify a document and then provide their approval or disapproval.","Lead Management. Distributes, compiles, and tracks lead data. Participants can enter data in the shared table, assess the opportunity, and close the lead.","Order Exception Management. Tracks and manages the resolution of a problem that occurs in fulfilling the order. Enables collaboration across the enterprise, partners and suppliers to define the exception and decide on a solution.","Product Configuration. Manages the product configuration process from initial product requirements to configuration and approval. Participants can modify documents and approve or disapprove the final versions.","Proposal Management. Displays a proposal for review and feedback and compiles sign-off by reviewers or stakeholders.","Recruiting Management. Organizes and streamlines the process of interviewing a candidate, from receiving the resume to making an offer.","In another specific embodiment, general purpose templates include:","Discussion. Initiate a group discussion. Try brainstorming ideas or resolving issues among a select group of recipients.","File approval. Request approval on files that require consensus. Participants either disapprove or approve and share comments.","File sharing. Distribute files for participants to review, discuss and collaborate on. A version control option allows participants to check files in and out.","Image. Display and discuss a single image from a computer or the World Wide Web.","Image Gallery. Display and discuss a plurality of images that participants or the user contribute to a shared stored area.","Image Poll. Gather feedback and reach consensus about images.","Inline document. Review and discuss an HTML document; the contents may be displayed within the transportable application page, so that participants do not have to open another window.","Interactive Web Page. Interact with and discuss a Web page. Participants can interact with the page's hyperlinks and fields and can navigate as they would on a Web browser.","Invitation. Invite colleagues to meetings and other events; display event details and collect RSVPs and comments from invitees.","Poll. Gather opinions and feedback; see voters' comments and a chart of the results.","Ratings. Gather feedback on up to 100 questions or statements. Participants can rate each on a scale and provide comments.","Schedule. Schedule a meeting or event by specifying dates and times and availability.","Table. Create a table to capture input from a team. Import a file to start the table, or create a table from scratch. Tables can be exported to a file for reuse.","The foregoing are merely examples, and templates providing other functions may be created or provided. Each template is created using an application editor or Application Builder, as further described herein. Updating a template using such an editor or builder does not causes changes to transportable applications that have been instantiated from the template, however.","Generally, building blocks of a transportable application define the specific appearance, content, and functions of the transportable application. Each building block comprises data elements, logical elements, and presentation elements, each of which may be implemented in the form of one or more classes, methods and interfaces in an object-oriented programming environment. Each building block is contained within a container, and communicates with other building blocks through the container. The data associated with data elements of the building blocks is stored in a persistent data store, e.g., a database server. Building blocks are implemented, in one embodiment, as one or more Java Server Pages.",{"@attributes":{"id":"p-0248","num":"0294"},"figref":["FIG. 1D","FIG. 1D"],"b":["180","182","182","182"]},"Client requests  arrive at a request dispatcher , which de-encapsulates each client requests and routes it to a particular service selected from among client services . Client services  may comprise a presentation manager , store\/create manager , submit manager , and authentication manager . Client services  may call one or more system services  as needed to carry out specific functions. In the example of , system services  comprise security manager , notification manager , mail services , directory manager , and system manager . In other examples and embodiments, system services  may comprise any of the services shown in  and .","Programmatic components and interfaces  interact with the client services . Each container  and building block A, B, N implements such components and interfaces. For example, container  and building block A, B, N each implement a Presentable interface that comprises programmatic methods that determine how the container and building blocks are presented in a user interface. Container  implements a NodeObject interface that comprises methods that determine the object hierarchy of the container, i.e., which specific building blocks it contains. A further description of such object interactions is provided herein in the section entitled Object Model.","In one specific embodiment, the data associated with data elements of the building blocks is stored in a persistent data store, e.g., a database server, that is dedicated to storage of system data and not generally exposed to external clients. The building blocks access services of the system programmatically through an associated container.","In this configuration, containers may be used to programmatically create transportable applications as described herein without use of an editor, builder, or other graphical user interface or user intervention. A program component may create or instantiate a container, add building blocks to it, and register the building blocks in the system. For example, in response to an event, an action can create a new transportable application and send it.","A description of examples of building blocks that may be provided in an embodiment is provided herein in the sections entitled \u201cApplication Editor,\u201d \u201cPage Editor,\u201d and \u201cBuilding Blocks\u2014Examples.\u201d","According to one embodiment, transportable applications and system services are implemented using programmatic objects that are created using an object-oriented development environment and executed in an object-oriented runtime environment. The programmatic objects are organized according to an abstract object model that comprises base interfaces, support classes, and component objects. A preferred embodiment is implemented using the Java environment, but this environment is not required, and program implementations in other object-oriented environments, or in procedural programming languages, threaded interpreted languages, etc., are possible.","In general, the base interfaces serve as APIs that can be called by other objects and services in the system. The intermediate support classes are classes with partial or full implementation of specific functionality, providing typical combinations of basic interfaces. The component objects are fully implemented classes for carrying out specific tasks.","Base interfaces, in one embodiment, relate to rendering and presentation of objects, data persistence, containment, event handling, service callbacks, core service management, and client service management.",{"@attributes":{"id":"p-0257","num":"0303"},"figref":"FIG. 3A"},"A Rendering\/Presentation package provides interfaces for rendering objects. A Presentable interface  is used to render an object to a particular target client or device. A service or object that wishes to present the contents of an object creates and populates attribute values for information about a client request in a ClientContext data structure. This information may comprise a device identifier, rendering format, etc. An implementation of the Presentable interface uses the ClientContext data to create appropriate data for rendering.","A Data package deals with data persistence from different data sources. In one embodiment, a \u201cDAO\u201d interface  contains methods that allow creation of a data access object (DAO) from a data source, its maintenance and data storage.","A Hierarchy\/Containment\/Collection package deals with object hierarchy and containment processes, e.g., collecting child building blocks and containers, etc. In one specific embodiment, a CollectionNodeObject interface  provides hierarchy functionality for a derived object. This interface supports navigation across object trees and DAGs. The interface can be used to provide functionality that includes both object trees and object collections. An InheritanceCriteria interface  defines how default inheritance policies (e.g., security, notification) apply to a specific object hierarchy. Examples of these are access control inheritance for objects in a given hierarchy. The interface also covers whether the child object inherit state information from parent objects or not. For example, if a child container or building block object inherits state from a parent container object, and the parent container is closed, then all child containers will close. In contrast, state would not be inherited if deleting a group does not necessarily mean removing all members of the group, though it might be an option.","An event handling package deals with handling of events generated from different components in the system. In one specific embodiment, an EventHandler interface  provides a base event handler interface. Further description of event handling processes, in an example embodiment, is provided herein in the section entitled \u201cObject Communications\u2014Event-Driven Methods (Event Handling System).\u201d","A service callback interface package contains definitions for callback interfaces that are used by service managers. The callback interfaces provide APIs that application objects provide to services. Control managers, services and other components can use such interfaces to communicate with application components.","In one specific embodiment, an interface \u201cServiceInterface\u201d  provides a base interface for all service interfaces. An interface \u201cSecurityInterface\u201d  provides a security service interface that can be used to query an object for access control permissions and other security related functionality. An interface \u201cNotificationlnterface\u201d  provides interfaces that can be used to generate necessary notifications for a derived object. An interface \u201cCommlnterface\u201d  is used for communication with users and other systems. An interface \u201cMailableInterface\u201d  is used to define how to make an object transportable using e-mail, and an object can query such interface to receive content and target mail addresses. An interface \u201cLifecycleInterface\u201d  covers the lifecycle management of a component, in the form of operations such as close a component, create a component, respond to a component, and add or delete members of groups and folders.","A package of core service managers contains a set of core service engines. In one embodiment, certain critical core service engines, e.g., a security service engine, are not extendable. They provide basic services that other components can use. Each of the service managers is implemented in standalone fashion and is not dependent on any functionality from other system components.","In one specific embodiment, a ServiceManager interface  provides a base interface for all other service managers. A SecurityManager interface  is a security provider for services such as authentication, access control and SSL, etc. A NotificationManager interface  is a notification provider. A CommunicationManager interface handles SNMP communications among system entities. A DirectoryManager interface provides LDAP directory functionality.","A package of client service managers provides interfaces that are related to platform services, and which rely on the components to provide certain functionality. The client service managers are analogous to brokers that act as liaisons between objects and services to achieve a particular end result, such as rendering an object in a user interface.","In one specific embodiment, a PresentationManager provides a broker that deals with object presentation in the system. Such objects may comprise: building blocks; container types such as container objects, folders, or groups; or meta objects such as authoring objects. A StoreCreateManager provides an interface for creating and storing objects. A SubmitManager provides an interface for submitting changes. An AuthenticationManager provides functionality to authenticate users and applications that wants to Zaplet platform services, in communication with the SecurityManager.","A plurality of support classes are provided for the foregoing interfaces; the support classes generally comprise abstract classes with partial interface implementations. The support classes encapsulate a list of common interfaces across different platform components. Thus, the support classes enable objects to reuse common functionally across multiple components.","Component objects of the system are fully implemented objects. Components are composed from a single support class and one or more base interfaces classes. In some cases, a component needs functionality from multiple support classes. In this case, needed interfaces are implemented at the component level by delegating functionality to embedded support objects.","In one embodiment, a BuildingBlock component object represents an atomic displayable component that can be extended. Examples of building blocks include a poll building block, schedule building block, dynamic Web page building block, document upload building block, etc.  illustrates a schedule building block interface  and a poll building block interface , as examples. Each is constructed based on a building block interface .","An ApplicationContainer component object  represents a transportable application in the system, and may reference and logically include one or more building block objects. A FolderObject component object  represents a document folder in a manner analogous to file system folders in an operating system. The FolderObject component object provides a mechanism to organize different resources, such as folders, files, task templates, etc. A GroupObject component object  provides a mechanism to organize a set of resources and users as a group. A MetaObject component object  represents meta information for objects that can be authored in the system, and comprises a container that includes a representation for authoring control flow.",{"@attributes":{"id":"p-0272","num":"0318"},"figref":["FIG. 3B","FIG. 3A","FIG. 3B"],"b":["326","350","326","320","320","326","326","320","320"]},"Each ApplicationContainer provides services to its contained Building Blocks. When a Container contains other Containers, the hierarchy is represented as a tree structure, as in . A Container acts as a coordinator for its contained building blocks and interacts with them in order to store user inputs and responses and also for getting the presentation data of the building blocks. Similarly, a Container interacts with its contained Containers in order to propagate certain actions such as closing a transportable application. When a transportable application is closed, all its contained transportable applications are also closed.","Once a Container has been created, new building blocks and containers can be added to it. A Container provides necessary APIs for adding the building blocks and containers and also for interacting with them. Table 1 presents an example class definition of a container.",{"@attributes":{"id":"p-0275","num":"0321"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CONTAINER CLASS"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public class ZapletContainer{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void ZapletContainer(ZapletRequest request);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void","addBuildingBlock(ZapletRequest request);"]},{"entry":[{},"void","addChildZaplet(ZapletRequest request);"]},{"entry":[{},"Vector","getChildren();"]},{"entry":[{},"ZapletData","getZapletData();"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Zaplet","getParent();"]},{"entry":[{},"Zaplet","getChild(ObjectId zapletId);"]},{"entry":[{},"Zaplet","getRoot();"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void","handleResponse(ZapletRequest request,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ObjectId userId);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void","handleEditResponse(ZapletRequest request,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ObjectId userId);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void","handleEditCreate(ZapletRequest request,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ObjectId userId);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PresenterData","getDisplayData(ZapletRequest request);"]},{"entry":[{},"PresenterData","getSubmitData(ZapletRequest request);"]},{"entry":[{},"void","sendReminder(String reminderMessage);"]},{"entry":[{},"void","forward(String forwardMessage, String"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"toList);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void","close(String closeMessage);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Using the API defined by Table 1, an addBuildingBlock method is invoked to add a building block to a transportable application. An addChildZaplet method is invoked to create a child transportable application. A getChildren method returns the child transportable applications for a given transportable application. This method returns the transportable applications that are immediate children of a given transportable application. A getZapletData method is invoked to retrieve data relating to a transportable application.","A getParent method returns the parent transportable application of a given transportable application. A getChild method returns the specified child transportable application. A getRoot method returns the root transportable application in the hierarchy.","A handleResponse method is invoked to handle a user response to a transportable application. An editResponse method is invoked to edit an already submitted response, provided the response can be edited. An editDefinition method is invoked to edit the definition of a transportable application. A getDisplayData is invoked to get the presentation data for the transportable application. A getSubmitData is invoked to get necessary data to prompt the user to submit a response to a transportable application.","A sendReminder method is invoked to send a reminder message to the participants of the transportable application. A forward method is used to forward a Zaplet to a set of recipients specified by the \u2018toList\u2019 parameter. A close method is used to close the Zaplet for any further interactions.","1.2.7 Membership","Users of service unit  are organized in one or more groups. Each group is represented by a programmatic object in a membership hierarchy. Each group may have one or more child groups or users. Group and user information may be imported from an external directory service, such as an LDAP directory, or may be defined in the system database. Groups may be collections of individuals in a department, project team, or other group with a common goal. Groups provide an archive for the shared knowledge of people who work together. Groups also provide convenient distribution lists for addressing transportable applications.","Membership concepts are programmatically represented by folder objects and group objects. A membership group is a collection of other membership subgroups and users. A folder is a collection of other subfolders and meta-objects. By definition, a group is also a user, and a folder is also a meta-object. Each object in a membership hierarchy comprises a reference to an underlying object or user. For example, when a particular task is saved in two different folders, two references to the same task (one for each folder) are stored in the hierarchy.",{"@attributes":{"id":"p-0283","num":"0329"},"figref":["FIG. 4","FIG. 4"],"b":["402","404","406","406","410","412","410","410","410","412","412","412","404","406","406"]},"1.2.8 Building Blocks-Programmatic Aspects","Building blocks are functional units of a transportable application. Each building block encapsulates business logic, data and presentation. A BuildingBlock object is always be contained in an ApplicationContainer object. Server processes provide services to building blocks. An ApplicationContainer invokes various methods on a BuildingBlock object to process various user actions such as creating a transportable application, responding to a transportable application or editing a transportable application and so on. A BuildingBlock can also handle asynchronous events.","Each building block implements the BuildingBlock interface of , which defines methods for storing data for building blocks, storing responses for the building blocks and also for providing the necessary data for presentation. The presenter data that is returned from a building block can be presented in different formats, as described below. In one specific embodiment, the BuildingBlock interface is defined as set forth in Table 2.",{"@attributes":{"id":"p-0287","num":"0333"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"BUILDING BLOCK INTERFACE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface BuildingBlock{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void","handleCreate(ZapletRequest request,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BuildingBlockDAO bbDAO);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void","editCreate(ZapletRequest request,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ObjectId userId);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void","handleResponse(ZapletRequest request,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ObjectId userId);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void","editResponse(ZapletRequest request,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ObjectId userId);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void","handleEvent(EventData eventData);"]},{"entry":[{},"PresenterData","getDisplayData(ZapletRequest request);"]},{"entry":[{},"PresenterData","getEditResponseData(ZapletRequest"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"request);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In this embodiment, a handleCreate method is invoked to handle creation of the building block data in the database . An editCreate method is invoked to edit building block data in the database . A handleResponse method is invoked to create a user response in the database . An editResponse method is invoked to handle editing of an already created user response. A handleEvent method is invoked to handle an event by the building block.","A getDisplayData method is invoked when the building block data needs to be displayed in a transportable application. A getEditResponseData method is invoked when the response data needs to be displayed in a submit dialog box for editing.","In one embodiment, a BuildingBlockMetaData interface specifies methods on a building block meta-data object. Such methods are responsible for providing the necessary information in order to construct an authoring snippet or a response dialog snippet, related to the building block. In one specific embodiment, the BuildingBlockMetaData interface is defined as set forth in Table 3.",{"@attributes":{"id":"p-0291","num":"0337"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"BUILDING BLOCK METADATA INTERFACE EXAMPLE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface BuildingBlockMetaData{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Vector","getAuthoringParams();"]},{"entry":[{},"Vector","getResponseParams();"]},{"entry":[{},"Vector","getConditions();"]},{"entry":[{},"Vector","getActions();"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In this embodiment, a getAuthoringParams method returns a vector of authoring parameters, which can be used by a tool to construct an authoring snippet for the building block. Each element of the vector is of BuildingBlockParam type. A getResponseParams method returns a vector of user response parameters, which can be used by a tool to construct a user response dialog box for the building block. Each element of the vector is of BuildingBlockParam type. A getConditions method returns a vector of conditions that a building block can evaluate, which can be used by a tool to define a set of conditions for the building block. Each element of the vector is of ZapletCondition type. A getActions method returns a vector of actions that a building block can perform, which can be used by a tool to specify a set of actions for the building block. Each element of the vector is of ZapletAction type.","When a Building Block is invoked to either to create its data in the database or store user responses or retrieve its data from the database, it uses a Data Access Component (DAC) to access the database. The DAC comprises programmatic objects that enable building blocks to access data in database  such that developers of the building blocks do not need to know the specific schema of the database, and such that the building blocks are not affected by any future changes in the schema. Further, the DAC provides, in effect, an API that enables a developer to store building block data in database  without knowing the schema.","In one specific embodiment, the DAC comprises data access objects and data objects. Data access objects serve as a channel to write and read data from the database . Data access objects encapsulate knowledge about objects and tables in the database  that are acted upon. Data access objects provide methods to accomplish data persistence and data retrieval queries. Data access objects can carry out access control checks on the data that is being accessed, in cooperation with the security services described herein, to ensure that a particular user or building block is authorized to retrieve selected data.",{"@attributes":{"id":"p-0295","num":"0341"},"figref":"FIG. 15","b":["292","294","1500","292","294","1502"]},"Data other than building block data may be stored in database . Accordingly, other types of data access objects are provided based on the kind of data that is stored. In one embodiment, data access objects comprise choice data access objects , response data access objects , etc. Each data access object encapsulates information about the underlying database tables by working with interface objects. For example, response data access objects provide a generic public interface that allows building blocks to store any responses from the recipients of a transportable application in the database. An example of such a response is a recipient's response to a poll question.","Each building block data access object provides access to tables of database  through interface objects. In one embodiment, the interface objects include a QuestionInsert object , QuestionXMLInsert object , QuestionResult or ResponseInsert object , and QuestionXMLResult or ResponseXMLInsert object . The interface objects communicate with database  through one or more stored procedures . In one embodiment, the stored procedures act, in part, to convert user data received from the interface objects to XML format for storage in database ; metadata that is not received from a user-created building block, or otherwise internally generated, is stored in conventional database columns. A pre-defined method may be used to store any building block-specific programmatic object as a string value in the database. For example, in one embodiment, the method setFieldValue(fieldName, value) is used to store a Java object as an XML string in the database.","A retrieval method is provided to facilitate retrieval of a data object that corresponds to a building block data access object. Data objects are created when data is retrieved from the database . Thus, data objects facilitate the flow of results from the database resulting from any query that is executed by a building block or any other component such as a presenter. Each data object is a wrapper around result objects such as the QuestionResult object, and QuestionXML result object. Each type of data access object has a corresponding data object to capture results from the database tables. A pre-defined method may be used to retrieve an object that was stored in the database using the corresponding data access object. For example, in one embodiment, the method getFieldValue(fieldName, value) is used to retrieve an object that was stored in the database using the corresponding data access object. Any information that was stored in XML form by a data access object can be retrieved from the database, parsed by an XML parser, and then the query results can be returned on demand. Thus, a data object is a result object that any component in the system can retrieve by providing appropriate input parameters.","Each building block data access object has a corresponding building block data object that maps to the result object QuestionXMLResult. Each data access object provides a reference to a corresponding result object in the database or a cache thereof.","Using this mechanism, building block authors and developers can focus on business logic and program logic that is implemented in a building block rather than on the database schema, because the DAC separates such logic from the database schema by interposing an abstract layer. Accordingly, the system becomes more extensible because creating new building blocks is simplified. Further, dependencies between building blocks and the database are removed. The building blocks are insulated from any major changes that may occur in the database schema.","Graphical user interface elements associated with groups, and processes for joining and using groups from the user perspective, are described herein in the section entitled Personal Portal Presentation.","In one embodiment, each transportable application is identified by a global identifier. A transportable application is indirectly transported to each named recipient by sending a message, such as an electronic mail message, to each recipient that contains a reference to the transportable application in the form of a URL that includes the global identifier. When the user opens the message, the URL is invoked, causing the user's browser to retrieve the dynamic content and other elements of the transportable application.","In one approach for implementing the foregoing, the global identifier has the following format: <AppserverURL>\/Z?m=<globalld> where \u201c<AppserverURL>\u201d is the URL of an application server, such as \u201chttp:\/\/www.zaplet.com,\u201d and \u201c<globalID>\u201d is the global identifier. In one specific embodiment, the global identifier value has the format DbId_ObjTyp_ObjId, where \u201cDbId\u201d is a value that uniquely identifies a cluster. The DbId value may numeric or may be a string, such as a URL of an application server. When a numeric value is used, then a mapping of numeric values to URLs is stored in a directory. Using a URL requires no such mapping, but increases the length of the global identifier value. Length may be a limiting factor in certain encryption schemes, such as TwoFish. The ObjTyp and Objld values refer to the type and the local identifier of the object in the cluster. The entire global identifier value is encrypted using a site-specific seed, as described further herein.","In an alternative implementation approach, directory-based access to processing clusters and other objects is used rather than direct reference to clusters as provided in the above approach. In a directory-based approach, objects are referenced using distinguished names that are registered in a directory. The directory may be an X.500 directory, LDAP directory, or similar repository that is associated with database . For example, Microsoft Active Directory may be used.","In this approach, each processing cluster is uniquely identified using a distinguished name (\u201cDN\u201d). The DN maps, in a directory, to a URL or other specific identifier of the cluster. There could be additional information in the directory that could be referenced. As defined in the X.500 standard, DNs are elements of a hierarchical naming system in which each DN has <name,value> attributes that are used to traverse a directory hierarchy or tree. For example, the DN \u201cC=US, O=FireDrop, OU=Engineering, HN=alpha\u201d identifies a path in a directory hierarchy to the entry for machine alpha in the Engineering dept at FireDrop which is in the US. That directory entry may contain the URL of an application server that is on this machine. A DN can be transformed into a numeric value using ASN.1 encoding.","Each cluster may be associated with a different enterprise, institution, or other organization. For example, clusters may be located at different competitive parties. Clusters that cooperate with each other need to have a trust relationship, which may be established through a third party security organization. Based on the trust relationship, each party that owns or operates a cluster can set up information for its peers in its own directory that is then used to construct a global identifier value. Since each directory structure is arbitrary and may be determined by the organization, the global identifier for an object also is site dependent. Thus, there may be many valid global identifiers for a single object. However, a benefit of the DN approach is that the DN is an indirect reference to the site information. One site's DN cannot be meaningfully applied to another site, thereby preventing improper access to a cluster from a user associated with a different site. Furthermore, directory level authentication must be successful in order to retrieve site information.","1.3 Presentation of Transportable Applications","In one embodiment, client  executes a client application program that facilitates authoring, viewing, interacting with, and managing one or more transportable applications. In this description, such a program is termed a \u201ctransportable application client\u201d or, where it is clear from the context, \u201cclient.\u201d Authoring refers, for example, to creating a transportable application; creating a transportable application based on a template; integrating address information from an address book with a transportable application; converting an existing transportable application to a discussion-type transportable application; creating one or more transportable applications that implement a business process; and similar tasks. Viewing refers, for example, to viewing a transportable application; viewing one or more transportable applications that implement a business process; and viewing transportable applications when the client  is disconnected from a network (\u201coff-line viewing\u201d); and similar tasks. Interacting refers, for example, to interacting with a transportable application; interacting with one or more transportable applications that implement a business process; interacting with transportable applications when the client  is disconnected from a network; viewing one or more notifications; and similar tasks. Management refers, for example, to moving transportable applications into and out of folders and groups, and similar tasks.","In one approach, the transportable application client interacts with one or more electronic mail client programs (\u201ce-mail clients\u201d). The e-mail clients may comprise Microsoft Outlook 98, Outlook 2000, Outlook Express, Lotus Notes, Eudora, Netscape Messenger, etc. Typically one of the foregoing is installed in client  and the transportable application client interacts with it using shared dynamic linked libraries (DLLs), public APIs, or other programmatic communications mechanisms. The transportable application client also interacts with a network browser such as Microsoft Internet Explorer, Netscape Navigator, etc., as well as with the operating system of client , which may be Microsoft Windows 95, Windows 98, Windows NT, Windows 2000, etc.","Specific functions of an embodiment of a transportable application client are now described.","In one specific embodiment, a client is provided with an automatic installer that can copy components of the client from an installation media to a client computer system (e.g., client ), and integrate such components with the operating system, browser and e-mail application. The installation media may be a CD-ROM, file server, Internet download, etc. Alternatively, users may receive an HTML email containing a signed ActiveX control, or equivalent program element, that initiates installation of the client. Installation may involve storing configuration data in a registry of the operating system of client .","The client is provided with an automatic start configuration so that the client initiates execution when a client computer, e.g., client , starts operation. Thereafter, the client may be stopped and restarted repeatedly by the user. After startup, the client generates an indicator icon that is displayed in an operating system \u201ctray\u201d location. When started, the client initially enters an inactive state. The client activates in response to a log-on process carried out by the user. When the client is activated, the indicator icon changes appearance to indicate that the client is in the active state. To deactivate the client, the user may either log off or stop the client, at which time the indicator icon reverts back to its Started state.","In the log-on process, the client prompts the user for a user identifier and password and then authenticates the identifier and password against the authentication database. The client provides an option to save the password for the user in an encrypted format; userids and passwords are saved as a value pair. Further, the client provides an option to log on automatically when the client is started based on a saved password. Using this option, the last user who logged off is logged on at startup, provided a saved password is available.","When a user receives a notification in responses to receiving a new transportable application, an updated transportable application or changes to the status of a transportable application, the indicator icon changes appearance to indicate that a pending notification exists. Optionally, under control of the client, client  may generate a sound or play an audio file to announce the receipt of a notification.","When a user hovers a mouse or similar pointing device over the transportable application indicator icon, the client displays the number of new and updated transportable applications. Selecting the indicator icon causes the client to display the title of each new or updated transportable application and enables the user to select a transportable application for viewing.","Also in one embodiment, the client notifies the user when new or updated software components become available. For example, the client indicates the availability of software updates with a flashing indicator icon. When requested by the user, the installer function of the client downloads and installs the applicable new or updated components.","In another feature, the client enables the viewing of transportable applications off-line by creating a snapshot of transportable application dynamic data in a local cache. When the transportable application is viewed off-line, the client redirects and resolves data references using the local cache. In one configuration, the client maintains a persistent connection to the application server  and uses unused bandwidth to download data for the transportable application to the local cache. Only incremental data is downloaded. The download interval, download data size and cache size are configurable.","A user may use the e-mail client executed by client  to respond to transportable applications. In this configuration, the client overrides the Reply, Reply to All, and Forward buttons or functions of the e-mail client. In addition, each transportable application may be addressed using the e-mail client. For example, recipients may be selected using a pre-configured search order of various information sources, such as a corporate directory, personal contacts, aliases, and groups. When a transportable application is sent, recipient names are resolved to an address that can be processed by an e-mail server or a similar transport mechanism. The client may provide its own address book and the user may add recipient names to it.","The client can indicate changes in status of a transportable application and updates in the e-mail client. A previously read transportable application may be marked as unread if new responses have been posted. Such notifications should only affect email found in the user's Inbox. If the email has been moved to another folder, these notifications do not occur.","The client communicates with application server  to determine if a notification should be sent to the user. The client notifies the user when new or updated templates for transportable applications become available. When requested by the user, the installer downloads installs only the applicable templates.","According to one embodiment, transportable applications are accessible through a personal portal. Generally, a personal portal is represented by a graphical user interface window that contains one or more hyperlinks for accessing system functions. The personal portal provides membership services, including defining groups and managing group membership. The personal portal displays organized lists of transportable applications that the user of the portal has received, organized according to group and individual user. Thus, the portal provides an organized entry point through which a user may create, organize and send transportable applications and access tools and services for doing so. The portal provides secure access to transportable applications through user authentication processes.","In one embodiment, the personal portal is defined as and implemented using a container and a set of building blocks. Thus, each personal portal is itself a transportable application like others in the system. In this embodiment a user receives the personal portal through a transport mechanism, such as HTML-enabled e-mail, for example. The user opens the message and receives a view of an initial page (\u201chome page\u201d) of the portal by reading the transportable application. In this alternative, selecting links in the home page of the portal causes the system to generate new screen displays and carry out other functions within a browser window that launches automatically.","In this embodiment, the portal comprises a transportable application having two or more Listing building blocks, by default. The first listing building block is an In-Box that lists all transportable applications that have been received by the user who is viewing the portal. The second listing building block comprises a list of links to authoring functions, to assist users in rapidly accessing functions of the application editor and page editor disclosed herein. In an enterprise having a plurality of departments, there is a portal transportable application for each department; each such application comprises a page for each user group in the department. A page for all users is provided. Group moderators may add building blocks to the group pages. Groups may be nested within other groups.","Alternatively, the portal is one or more software applications, represented by a plurality of graphical user interface windows, which are served or operated by a service unit, such as service unit . In general, a portal is associated with a business enterprise that owns, operates or hosts system . The portal is accessed using a browser executed at a client computer.","In each embodiment, the portal provides access to an Application Builder application and a plurality of templates for creating transportable applications. The portal provides each user with a personal archive of transportable applications that they have sent and received, and provides users with access to groups that provide a repository of shared knowledge regarding transportable applications. In one specific embodiment, the portal home page comprises the following links: Group Directory; My Groups; Personal Messages; Search; Builder; Preferences.","To join a group, a user selects the Group Directory link. A group directory screen appears that lists groups alphabetically by name, shows a description of each group, shows how many messages regarding transportable applications were sent to a group in the past seven days, and shows the group membership status value. If the group is open to everyone, the status value is Join Group. If the group is open by invitation only, the status value is Private. If the current user is a member of a group in the list, the status value is Member. The user then selects either the Name value or the Status value, both of which are hyperlinks, of the group that the user wishes to join.","In response, a Join Group screen is displayed. The form of the Join Group screen varies depending on whether the selected group is open to everyone or private. If the group is open to everyone, then the Join Group screen comprises a Join button and a Cancel button; a user may join the group by selecting the Join button.  is a diagram of the Join Group screen that is displayed when the selected group is private. In this configuration, Join Group screen  includes a group name , group description , a private group label , an email link , and a Close button . To attempt to join a private group, the user may select email link . In response, an email message is automatically sent to the moderator or \u201cowner\u201d of the group to request access for the user. Alternatively, the user may select the Close button  to close screen .",{"@attributes":{"id":"p-0328","num":"0374"},"figref":"FIG. 9B","b":["910","912","914","916","918","920","912","922","924"]},"The Application Shortcuts area  provides rapid access to certain applications. The Updated Messages area  provides a list of updated transportable applications for which the user has turned notifications on. The My Group Activity area  provides a list of group transportable applications that have been received in the last seven days. The New Groups area  provides a list of recently added groups.","The function links  further comprise a My Groups link  that provides access to detailed functions pertaining to groups of which the user is a member. One or more group links A are displayed in a hierarchical tree in association with the My Groups link . A user may select one of the group links A to carry out specific operations relating to a group. In one specific embodiment, the group operations include: invite a member; membership list; unsubscribe; contract moderator; group description; and view recent group activity.","In the invite member operation, a user can invite another user to join the selected group. An Invite Member screen is displayed. The user enters one or more addresses of users or groups to invite to join the selected group. The user also enters a short introductory message. In response, the system generates and sends a message to each of the named users inviting them to join the selected group, and including the introductory message. If the currently selected group is a private group, the user must send an e-mail to the group moderator to request additional members.","In the membership list operation, a user can view the group membership list. A membership list screen appears, listing members by email address, name and the date on which they joined the group. In the unsubscribe operation, the user can leave or \u201cunsubscribe\u201d from the group. In the contract moderator operation, the user can send an e-mail to the group moderator. In the group description operation, the user can view the description of the group. In the view recent group activity operation, the user can view the ten most recently updated transportable applications for the group.",{"@attributes":{"id":"p-0333","num":"0379"},"figref":["FIG. 9C","FIG. 9B","FIG. 9C"],"b":["912","934","936","938","934","936","910"]},"The user may also display all transportable applications sent to the group in the group archive by selecting the Archive link . In one specific embodiment, the group archive lists all transportable applications sent for the group. The user may filter the list of transportable applications by application type using a drop-down menu. The user may sort the archive list by Author, Subject, application type, date created, or date last modified.","The Personal Messages link  provides access to transportable applications that have been sent to the user, and to transportable applications that the user has created for personal use. To access such applications, the user selects the Personal Messages link , and then selects an Applications link that is displayed. The Search link  provides access to a search engine that can search the full text of all transportable applications by keywords.","The Preferences link  is used to change a user's profile of preferences, to thereby tailor the way that the user interacts with groups and transportable applications. Changes to preferences may be made by the user at any time. Through a Preferences dialog, the user may make changes to a user Profile, Address Book, Group Preferences, and a client or Plug-in. To facilitate such changes, the Preferences dialog includes a Profile link, Address Book link, Group Preferences link, and a Plug-in link.","Using the Profile link, the user can change information in the user profile, such as name, password, postal code, time zone, message format, and whether message recipients are automatically added to the Address Book. The message format profile value enables the user to obtain a preferred user experience using the e-mail client. For example, if the user's e-mail client does not accept HTML, the transportable applications received by the user may appear to be \u201cbroken.\u201d The user can change the format in which transportable applications are delivered to the user. In one specific embodiment, available formats include Plain Text and HTML.","The Address Book is a personalized database of contact persons for sending transportable applications. In one embodiment, selecting the Address Book causes the system to display a list of available address books (Personal, Company, etc.). The user can select one of the available address books and search for contact data within it. The user may add or modify entries or important entries from other programs.","The Group Preferences link may be used to control how incoming transportable applications from groups are delivered. In one embodiment, the user may select a Web Only option, with which transportable applications are delivered to the portal only, or an Email & Web option, which provides delivery of transportable applications both to the portal and the e-mail in-box of the user.","The Plug-in link provides access to a client software element that can execute on a user client, e.g., client . By selecting the Plug-in link, the user can install, uninstall, and view the status of the Plug-in. In operation, the Plug-in automatically informs the user when updated transportable applications have been sent, using a distinctive icon that is shown in a designated portion of the graphical user interface. For example, in a Windows system, the distinctive icon is shown in the system tray. Also, in another embodiment, if the client computer is configured to access messages when disconnected from the network, the user can use the client to synchronize transportable applications for offline viewing and replying. Thus Plug-in may be implemented in the form of C++ code that is optimized to the Windows environment. Additionally, in an embodiment, the Plug-in adds new buttons to the toolbar of the user's messaging client. For example, a New Appmail button is provided in an e-mail client so that the user may initiate a process of creating a transportable application from within the e-mail client. The user may also create a new e-mail message and send it in the form of a transportable application by selecting a Send As Appmail button.","In certain embodiments, the Group Directory, My Groups, and Group Archive functions each are implemented as separate transportable applications having containers and listing building blocks.","To facilitate the foregoing operations, portal user roles and group user roles are defined in the security framework that is described herein. In one specific embodiment, a portal Administrator acts as portal editor, has all Coordinator permissions, has Owner control for all groups in the portal, can assign individuals to roles, and can create new roles. A Coordinator can create a group, delete a group, and exercise all User permissions. A User can view the group directory, join a group if it is public, and use the Application Builder and Page Builder that are linked to the portal.","1.3.4 Programmatic Processes for Presentation",{"@attributes":{"id":"p-0344","num":"0390"},"figref":"FIG. 5","b":["502","504"]},"When the building block  is invoked by the container object  to either to create data in the database  or store user responses or retrieve its data from the database, the building block uses Data Access Components (DAC) to access the database. In order to enable presentation of its information, the building block returns a Presenter Data Object (PDO). Each PDO contains all data of a building block that can possibly be displayed on any device in any form, and all associated interaction pathways. A building block presenter object (termed a \u201cpresenter\u201d herein) uses the PDO in order to do the actual presentation. For example, HTML presenter  can present the data in the PDO in HTML format. Alternatively, a WML presenter  can present the data from the PDO in WML format to a wireless device gateway. This mechanism allows presentation of the same PDO in different formats such as HTML, WML, XML, etc.","Presenter data objects as disclosed herein enable reuse of presenters, separate responsibilities of functional elements of the system, enable independent development of building blocks and presenters thereby enhancing modularity and simplifying development, and provide flexibility to handle custom as well as generic presenters. The presenter data objects provide an abstract interface that mediates communications of building blocks and presenters.",{"@attributes":{"id":"p-0347","num":"0393"},"figref":"FIG. 6","b":["182","182","602","602"]},"Two types of presenters can be used by a Building Block for presentation: Generic Presenters, and Custom Presenters. Generic Presenters work with any PDOs that implement a certain interface that they require. A Custom Presenter has detailed knowledge about the PDO, and can work with only that specific PDO. A PDO that does not implement a certain interface known by a Generic Presenter can still use that presenter by means of a Converter that maps the specific PDO into an interface that is understood by the Generic Presenter. In the embodiment of , generic presenters include a table presenter B; that can present a table of data, and line presenter D that can present a line graph, etc. Custom presenters include a poll presenter A that can present data for a user poll, and a schedule presenter C that can present a calendar or schedule.","Each PDO encapsulates data objects that represent the building block data, provides methods to access all the possible building block data, and may implement formatting interfaces like table interface, chart interface etc.","Presenters are responsible for rendering the data, and may use generic rendering utilities. Generic presenters work with a basic PDO that implements a certain interface. A custom presenter may directly work with a specific PDO. Each presenter implements a BuildingBlockPresenter interface.","In one alternative, a building block may pass a PDO to a converter A, B that converts data of the PDO to a different format that is understood by an interface of the custom presenter. For example, in situations where a specific PDO needs to work with a generic presenter, an object that implements an interface known to the generic presenter is constructed. Such converter objects map a specific PDO to this known interface. Each converter works with a PDO and a corresponding presenter. In one embodiment, a converter implements a ConvertInterface that produces an object that implements the interface known to the generic presenter.","Table 4 provides an example of a code implementation of the objects of .",{"@attributes":{"id":"p-0353","num":"0399"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CODE FOR PRESENTER ABSTRACT LAYER ELEMENTS"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public class PollPDO {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/data"]},{"entry":[{},"public int getTotalVotes()"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},"\/\/get details about each voter."]},{"entry":[{},"public String getVoterEmail( int i)"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},"public String getvoterName( int i)"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},"public String getLastChoice( String email )"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},"\/\/ details about the choices."]},{"entry":[{},"public Vector getChoiceLabels()"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},"\/\/ return a vector of Integers that represent choice"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"totals."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Vector getChoiceTotals()"]},{"entry":[{},"{"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public class PollPresenter implements BuildingBlockPresenter"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PollPDO pdo = null;"]},{"entry":[{},"public PollPresenter( Object pdo )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this.pdo = (PollPDO)pdo;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void PresentLive( Writer out, HttpServletRequest"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"req )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ give it to some utility or draw it inline."]},{"entry":[{},"chartUtils.drawPie(out, getChoiceLabels(),"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getChoiceTotals() );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ other methods in BuildingBlockPresenter."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"interface TableInterface"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int getNumRows();"]},{"entry":[{},"int getNumColumns();"]},{"entry":[{},"String getColumnName(int);"]},{"entry":[{},"Class getColumnClass(int);"]},{"entry":[{},"Object getValueAt(int, int);"]},{"entry":[{},"\/\/ possibly more methods"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public interface ConvertInterface"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Object convert(Object sourcepdo);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ presents a table representation of the poll."]},{"entry":[{},"public class PollTableConverter implements TableInterface,"]},{"entry":[{},"ConvertInterface"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PollPDO pdo = null;"]},{"entry":[{},"String columnNames = {\u201cVoter Name\u201d, \u201cVoter Email\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cChoice\u201d };"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Object convert( Object pdo)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"this.pdo = pdo;"]},{"entry":[{},"\/\/ do some other housekeeping."]},{"entry":[{},"return this;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Object getValueAt( int i, int j )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if ( j == 0 )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return pdo.getVoterName(i);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if ( j == 1 )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return pdo.getVoterEmail(i);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if ( j == 2 )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return pdo.getVoterChoice(i);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return null;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"int getNumRows()"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return pdo.getTotalVotes();"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"int getNumColumns()"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return 3; \/\/ oh no, hard coding"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"int getColumnName( int i)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return columnNames[i];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Class getColumnClass( int i)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ everything is a string. Also need to catch"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"exceptions."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return Class.forName(\u201cjava.lang.String\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Using these structures, when a building block needs to be presented, control logic of application server  requests the building block to construct the building block specific PDO. The control logic also contains knowledge about the specific presenter to be used to display the building block e.g. whether to use a custom presenter or a generic presenter. Such information is obtained at the time that a building block is authored.","In case of a custom presenter, control logic of application server  instantiates the presenter with the specific PDO obtained from the building block. In the case of a generic presenter, the control logic uses a converter, if necessary, to convert the PDO into a format known to the generic presenter, before constructing the generic presenter. It then passes the presenter to a Java Server Page (JSP) that controls overall presentation of the Zaplet. The JSP uses BuildingBlockPresenter interface of the presenter to render the data. Table 5 presents a Java code implementation of the foregoing process.",{"@attributes":{"id":"p-0356","num":"0402"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"JAVA CODE FOR PRESENTATION PROCESS"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/iterate through different bldg blocks"]},{"entry":[{},"for ( int i=0; i < numBB; i++ )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object pollpdo = bb.getPresenterData(request);"]},{"entry":[{},"BuildingBlockPresenter pr = null;"]},{"entry":[{},"String presenterName = getPresenterName(bb);"]},{"entry":[{},"String converterName = getConverterName(bb,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"presenterName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if ( converterName != null )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ConvertInterface i ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ConverterFactory.createConverter(converterName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object tablepdo = i.convert(pollpdo);"]},{"entry":[{},"pr = PresenterFactory.createPresenter(presenterName,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"tablepdo);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pr = PresenterFactory.createPresenter(presenterName,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pollpdo);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"presenterVector.add(pr);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"forwardRequestToSomeJSP(presenterVector);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A building block may use more than one presenter. For example, displaying results from a poll building block may use a pie chart presenter or a table presenter. To facilitate this possibility, an independently authorable component is provided, comprising a combination of a building block and the set of presenters corresponding to the actions supported by the building block. Thus, a poll building block with a pie chart presenter for display comprises a first independently authorable component, and a poll building block with a bar graph presenter for display comprises a first independently authorable component.","When development of a new building block is complete, it is registered in the system. Each independently authorable component is registered in the system separately. Registration involves providing the system with metadata about the new building block, such as its name, actions it carries out, events that it generates, and types of devices to which it can present data. When a building block is registered, it is displayed to and can be selected by authors of pages and transportable applications when they use the application editor and page editor as described herein.",{"@attributes":{"id":"p-0359","num":"0405"},"figref":"FIG. 16","b":["1602","1604","1606"]},"In block , the container invokes an appropriate building block method for the action. In block , a presentation data object is received from the building block method. In block , based on information collected at registration time, the application server forwards the presentation data object to the presenter that was registered for the current action. The system then invokes a presentation method on the presenter.","Actions, in this context, may comprise standard user actions or building block specific actions. Standard user actions are internally known actions that trigger a container to call on all its contained building blocks with a request to participate in such actions. For example, when a transportable application is to be displayed in a browser of client , the container requests each of its building blocks for a presentation data object for a \u201cget display data\u201d action. All building blocks that wish to participate in such action return a non-null presentation data object, which are given to the corresponding presenters for rendering.","Building block specific actions, such as a sort action relating to table data in a table building block, originate form the presentation of standard user actions. For example, a sort action originates when a user selects a link in a table building block data that has been presented. The target URL for the action contains enough information for the system to route the request to a specific building block. The building block then responds with a presentation data object that is given to the appropriate presenter.",{"@attributes":{"id":"p-0363","num":"0409"},"figref":["FIG. 7C","FIG. 7D","FIG. 7C"]},"Optionally, in block , a user logs on to a portal, such as a portal of the type described herein in the section entitled \u201cPersonal Portal Presentation.\u201d The portal home page provides a plurality of menu options in a navigation bar. In block , a New Message option is selected from the navigation bar. Alternatively, rather than carrying out the steps of block , block , a user can select a New Message option from within any existing transportable application. In response, the system displays a list of template folders. In block , the user navigates to a template folder or subfolder that contains a desired template. The user then selects a desired template, as in block . In one embodiment, an Application Shortcuts list displays frequently-used templates, and a user may select a template directly from the Application Shortcuts list rather than navigating to a folder.","For purposes of illustrating an example, assume that a user selects a Starter Set folder of templates, a Corporate Process sub-folder of templates, and an Escalation Exception Manager template. In response, the template is displayed, as shown by block .",{"@attributes":{"id":"p-0366","num":"0412"},"figref":"FIG. 8A","b":["800","802","802","802","802","804","806","808","801"]},"The user enters information in the message header . In this example, information is required in none of the fields of the message header, but such information may be required in other templates. The user also enters information in the page header , including Page Title and Introduction. The user then enters values for the rest of the fields that are required, attaching files and adding descriptions as needed. Depending on the building blocks in each page, the user may have to upload files of the appropriate type, upload pictures, specify URLs for Web pages, and other tasks.","When all such information is entered, the user selects the Next button  to advance in the authoring process. The system displays the next page B, C and receives further input until the template is completed. The user may select a Preview Page button  to receive a view of what the transportable application will look like to recipients.","When the last page of a template is reached, the page displays an Add a New Page button and an Address and Send button. The user may add optional pages to the transportable application by selecting the Add New Page button. The optional steps of removing and adding pages are represented by block  of .","Referring now to , in block , the transportable application is addressed. The addressing operation may be initiated by selecting the Address and Send button. In response, the system displays Addressing page C.  is a diagram of a screen display of an Addressing page that may be displayed, in one example embodiment. In this example, Addressing page C comprises an address field  that can receive one or more individual e-mail addresses in a comma-separated list. Alternatively, the user may select an address book link  and select the recipient e-mail addresses from a stored list of addresses. Additionally or alternatively, the user may select one or more groups of recipients from a list  of groups. Selecting a named group in list , followed by selecting an Add button , causes the system to copy the group name to a Send To list  that is used when the transportable application is sent.","Also as part of addressing, the user enters subject text in a Subject field .","Optionally, the user may apply access controls or other security controls to the message or its pages by selecting a Message Security Options link  and Page Security Options link . If the Message Security Options link  is selected, then in response, the system displays a Message Security Options window.  is a diagram of an example of the Message Security Options window that may be displayed, in one example embodiment. Message Security Options window  comprises a Share Author Rights pull-down ; by selecting a group from the pull-down menu, the author of the transportable application can share author access rights with a named groups.","In this context, \u201cauthor rights\u201d refers to a set of privileges for working with transportable application that are reserved to the author of the transportable application. Such author rights may include the ability to send a reminder message, close the transportable application, hide or show pages of the transportable application, or add a page to the transportable application.","To send a reminder message, the author selects a Send A Reminder option from among the message options. The author indicates the recipient choice for the reminder, and enters reminder text. In response, the system will re-send the transportable application to the recipients with new comments at the top.","Closing a transportable application disallows any further additions to the transportable application or to its dynamic content. To close a transportable application, the author selects a Close This Message option from among the message options. The author enters any desired closing message text, such as an explanation of why the transportable application is closed. The transportable application may be re-sent to all recipients with the closing message text at the top, or the closing text may be displayed in the body of the transportable application when existing recipients re-open it.","To hide or show a page, the author selects a Hide\/Show Pages option from among the message options. The Hide\/Show Pages option enables the author to hide a page that is old or no longer relevant without having to permanently delete it.","The user also may select a sending mode from within a Sending Mode area  by selecting one of a plurality of radio buttons , ,  that are respectively associated with a Send Unsecured mode, Send Secured mode, and Send Secured with Restricted Forwarding mode. In Send Unsecured mode, no special access controls are applied to the message. Recipients can read and forward the message without first logging into the portal. In Send Secured mode, recipients must log in to the portal before they can view the message. Recipients can forward the message to others. All recipients must be registered in the portal and logged in before they can read the message. In effect, Send Secured requires a recipient to overcome the barrier of user authentication before the user can read the message. In Send Secured with Restricted Forwarding mode, recipients must log-in to the portal to view a message, and only the author can forward the transportable application.","Referring again to , if the Page Security Options link  is selected, then in response, the system displays a Page Security Options window.  is a diagram of an example of the Page Security Options window that may be displayed, in one example embodiment. Page Security Options window  comprises one or more access lists  that are displayed in association with radio buttons , . Each radio button is associated with a particular page of the transportable application, as indicated by a page title header . In this case, the page title is Discussion, as indicated by page title A. Thus, each named page may have different security options. The access lists  may be broad or specific. For example, an Everyone access list  provides all current and forwarded recipients with access to the Discussion page. A Specific Recipients list  enables only selected users and groups to access the page, if such users or groups are named as part of list  and radio button  is selected.","Selecting a Submit button  sends the selected security options to the server.","Referring again to , in block , the user sends the transportable application by selecting the Send Now button .","According to one embodiment, an application editor or application builder is provided for assembling pages into a template for authoring and sending transportable applications. Using the application builder, a user may build as many transportable applications as the user needs, for many different purposes.","Referring again to , to launch the application builder, a user logs into a portal and receives screen display . The user selects the Builder link  from among function links . In response, the system displays a screen with a link to the Application Builder and the Page Builder (page editor), which is described in the next section. The user selects the Application Builder.",{"@attributes":{"id":"p-0383","num":"0429"},"figref":"FIG. 9D","b":["950","954","956","952"]},"The user also enters data in an Introduction Settings area , which comprises a plurality of custom field label fields  and corresponding Required check boxes . The user enters names for any custom fields that authors can fill out when creating a new transportable application based on the template. The corresponding check box  is selected if the user wishes to require authors to fill out the field before they can send a new transportable application based on the template.","The Application Builder screen can also receive data specifying the name of a status field in a Name of Status Field , and a list of corresponding settings in a Possible Settings field . The list comprises one or more possible settings that the status field can assume for specific transportable applications that are constructed based on the template. Example status settings include \u201cNew,\u201d \u201cOpen,\u201d \u201cClosed,\u201d etc., and may be customized by the author of the template as appropriate for the template.","The user may also add one or more default pages to the template by selecting an Add Page link A in Default Pages area . Default pages form part of any transportable application that is build and sent based on the application template. Similarly, the user may add one or more optional pages to the template by selecting an Add Page link A from an Optional Pages area . The optional pages are pages that the author and recipients can choose from when adding a page to the transportable application. In response to selecting one of the Add Page links A, A, the system displays a page navigation dialog in which the user may navigate to a page folder and select a page to add.",{"@attributes":{"id":"p-0387","num":"0433"},"figref":["FIG. 9E","FIG. 9E"],"b":["970","972","974","972","973","978","979","977"]},"Selecting a new folder button  enables creation of a new folder. In response, the system displays a dialog that prompts the user to enter a name and description for the new folder. The user can create any number of sub-level folders. For example, the user can create a folder named New Pages Folder, open it, and create more folders named Home and Work. The user may move within the folder tree by selecting a folder name to view its contents, then selecting the navigation button .",{"@attributes":{"id":"p-0389","num":"0435"},"figref":"FIG. 10A","b":["1000","1000","1004","1000"]},"Default Page Settings screen  also comprises a Require This Page checkbox . If it is checked, then the associated page is required in any transportable application that is built based on the associated template, and cannot be deleted.","Pages added to the Optional Pages list are available to authors of transportable applications if such authors wish to add a page. Optional pages appear in the Add Page screen and are not included automatically, but can be added as needed. The user may specify whether authors of transportable applications may add pages to a transportable application that is based on the template from outside the Optional Pages list. In one embodiment, such specification is provided by checking an \u201cAllow authors to add Page from outside this list\u201d checkbox in an Optional Pages screen.","After one or more pages are added, the user may save the application template, and optionally change its name. The user may modify the application template at any time by retrieving it and modifying any of the foregoing properties in the manner described above.","A page editor may be provided for assembling building blocks into pages that can be added to transportable application templates, and then to transportable applications. In one specific embodiment, a Page Builder allows the user to assemble different building blocks into a page. Which building blocks are added depends on the function that the page author wants the page to serve.","Referring again to , to launch the application builder, a user logs into a portal and receives screen display . The user selects the Builder link  from among function links . In response, the system displays a screen with a link to the Application Builder and the Page Builder (page editor). The user selects the Page Builder.",{"@attributes":{"id":"p-0395","num":"0441"},"figref":"FIG. 10B","b":["1010","1012","1014","1016","1019"]},"The user may then add one or more building blocks to the page, or simply save the page in its current form. To save the page, the user selects the Save As button from among function buttons , navigates to a folder in which the user wishes to save the page, enters a name for the page, and selects a Save button. The user may save the page in this manner at any time, and can discard the changes made to the page at any time by selecting the New button from among function buttons .","In one embodiment, launching the Page Builder causes the system to retrieve and display a default page template that comprises two default building blocks. In one specific embodiment, the default building blocks are a discussion building blocks and information fields building block. From the default page, new building blocks may be added, and existing building blocks may moved or deleted.","To add building blocks, the Insert Building Block link  is selected. In response, the system displays a list of building blocks. The list comprises, for each building block, a name value, description value, and graphical representation of the building block. In one specific example embodiment, the list identifies the following available building blocks:","Approval list. Allows a list of participants to respond with approvals for documents, shared files or the content of a message. May be combined with an Inline Document or Image Gallery building block to gather sign-offs on final drafts.","Discussion. Captures the discussion between message participants, eliminating back-and-forth e-mails. May be added to a page with a File Sharing or Interactive Web Page building block to discuss a document's content or Web site.","File Sharing. In addition to distributing files for review, the File Sharing building block enables versioning, to allow participants to automatically share changes with each other. The File Sharing building block may be added to any transportable application page to allow participants to add relevant files at any time.","Information Fields. Enables creating named fields to build forms to display names, dates, locations, etc. May be combined with other building blocks to capture information about the state of a project, names of participants, address information, or outstanding issues.","Inline Document. Participants can review the full content of an HTML document without opening a second application. May be combined with, for example, a Poll, Approval List, or Discussion building block to allow participants to share opinions of the document.","Inline Web Page. Displays a fully interactive Web page within a page of a transportable application, including browser-like navigation controls. May be combined with, for example, a Poll or Ratings building block to capture and share responses among participants without launching a separate browser.","Invitation. Displays the details of an event, including title, description, time, and location. May be combined with a Poll building block to allow participants to respond and add comments.","Image. Displays a graphical image on the page. May be combined with, for example, a Poll, Approval List, Ratings, or Discussion building block, in the same page, to allow participants to submit their opinions of the image.","Image Gallery. Displays a plurality of graphical images, e.g., in \u201cthumbnail\u201d format, within a page. All images may be sent in a transportable application at the same time, or participants may add their own images at any time. May be combined with, for example, an Approval List or Ratings building block to collect opinions on photos or artwork.","Poll. Participants vote for one or more of a plurality of listed options, and the results are displayed in a pie chart, bar chart, etc. May be combined with, for example, an Image Gallery, File Sharing, or Schedule building block to help make business decisions.","Ratings. Respondents share their ratings with each other on one or more questions on a discrete scale, e.g., ratings from 1 to 10. May be used to collect feedback or gauge group members' opinions.","Schedule. Participants specify their availability for one or more proposed dates or times. The Schedule building block can export data to programs that support a calendar data interchange format. May be used, for example, to determine the best time for a meeting or event.","Table. Compile data from multiple individuals into a tabular format; participants can add to or edit the information. The table building block can import or export data, for example, data Files in delimited file formats. May be combined with other building blocks to launch a project, prioritize items, or share contact information.","Listing. Retrieve various types of data from the database and display it in a list format, using HTML or any other desired presentation format.","Further description about building blocks is provided elsewhere herein. To add a building block to a page, the user selects the desired building block by selecting its name from the list or selecting the corresponding graphic image. The list closes, and the selected building block is added to the page, which expands to accommodate the building block. The Insert Building Block link  is re-displayed, and the user may add one or more additional building blocks by selecting the link  again. In one embodiment, the Insert Building Block link  is re-displayed both above and below each added building block, so that the relative order of building blocks in a page may be specified by selecting the link  in the correct ordinal position. Thus, the user may place building blocks above, below, or between other building blocks that have been previously added by selecting the link  at the appropriate position.","The user may also control the visibility of building blocks to users who receive a transportable application that contains them by choosing to hide or show particular building blocks. When a building block is marked as hidden, recipients of a transportable application that contains a page with that building block do not see the building block. Users may similarly add new pages, move, delete, show or hide existing pages. Applying the hide option enables an author to create a complex template that can be used in many different situations, and selectively reveal desired building blocks as appropriate for the particular situation.",{"@attributes":{"id":"p-0415","num":"0461"},"figref":"FIG. 11A","b":["1100","1102","1104","1106","1106"]},"The order in which building blocks appear in the Page Builder is the order in which authors and recipients of transportable applications based on that page will see the building blocks. The user may select links ,  to change the relative order of the building block by moving it before or after another building block. In either case, the page is re-displayed with the building block in its new position.","In one embodiment, a Survey Page Builder is provided to enable users to assemble specific building blocks into pages that carry out surveys of recipients. Each survey page comprises one or more building blocks selected from a Choice building block, Free Text Response building block, and Ratings building block. A survey page may be added to any transportable application or template.","To create a survey page, a user obtains a portal view () and selects Builder link . The Builder window appears, and the user selects a Survey Page Builder link within it. In response, a Survey Page Builder window opens.  is a diagram of a Survey Page Builder window that may be displayed, in one example embodiment. In this embodiment, the Survey Page Builder window  comprises a Name field  that displays a default value of \u201cNew Page,\u201d a Description field  that may receive a text description of the page, and an Introduction field  that may receive a text introduction for the page that is displayed to recipients at the top of the page.","Survey Page Builder window  further comprises one or more survey options. In one embodiment, a \u201cMake recipient responses anonymous\u201d link  is provided. When it is selected, responses to the survey are stored in anonymous form. An \u201cAllow recipients to change responses until the survey is closed\u201d link  may be provided. When selected, the system allows recipients of the page to change their responses at any time. When it is not selected, a response of a recipient may not be changed after it is submitted.","The user may add one or more survey building blocks by selecting the Insert Building Block link  at a point in the page where the user wishes to have a building block appear. In response, a list of available building blocks is displayed. In one embodiment, the list comprises:","Choice. Respondents vote for one or more of the listed options; results are displayed, e.g., in a pie chart, bar chart, etc., and are visible only to the author of the transportable application.","Free Text Response. Respondents enter text responses to a question into a single line text box, or a larger comment box. Responses are gathered in a table and are visible only to the author of the transportable application.","Ratings. Respondents provide their ratings on a list of questions or items according to a discrete scale, e.g., 1 to 10. The results are summarized in a graphical format that is visible only to the author of the transportable application.","The user may select one of the building blocks by selecting its name or icon. The user completes the building block with any required information; fields for completion by recipients are left blank. The user may re-order the building blocks or delete one or more building blocks; the page is then saved. The page is added to a template for a transportable application as described herein.","1.4.3 Building Blocks\u2014Examples","A description of specific building blocks is now provided. The building blocks described herein are merely examples, and other building blocks, fewer or more building blocks may be provided to carry out different functions or to configure different transportable applications. For convenience and in order to illustrate clear examples, the building blocks are described in part in terms of graphical appearance, functions and features; however, in an implementation, each building block comprises a plurality of executable computer program modules that are defined by class files and other computer program source statements. Thus, the functions and appearance of each building block herein are determined by and implemented in the form of computer code appropriate to carry out the functions and provide the appearance that are described herein.","Referring again to , the graphical appearance of an Approval List building block  is shown. The Approval list building block  allows a list of participants to respond with approvals for documents, shared files or the content of a message, and may be combined with an Inline Document or Image Gallery building block to gather sign-offs on final drafts. Approval list building block  comprises an Instructions field  that may receive text instructions that are displayed to recipients of a page that contains the building block . Approval list building block  further comprises a list  of one or more user names  corresponding to recipients of the building block and corresponding response indications . The user names  are dynamically updated according to the recipients of the building block . Approval list building block  further comprises an Include linked comment check box . If checked, the system will display comments from participants in the transportable application. The comments are dynamically updated as they are added.",{"@attributes":{"id":"p-0428","num":"0474"},"figref":"FIG. 11B","b":["1120","1122","1124","1126","1128","1120","1122"]},{"@attributes":{"id":"p-0429","num":"0475"},"figref":"FIG. 11C","b":["1130","1132","1134"]},"File Sharing building block  also comprises an Attach Files link . The author of the application or template that includes building block  may select link  to specify a file that is shared among recipients of an application that contains the page. In addition, the Attach Files link  may be used by recipients of the transportable application to add files for sharing, discussion or collaboration. Thus, the one or more files that are shared using building block  may be specified by recipients of a transportable application that contains a page that contains the building block , rather than specified by an author of a transportable application that contains the page or a template that contains such a page.","In one embodiment, when a user is interacting with a transportable application having a page that contains File sharing building block , and the user elects to upload a new file for sharing or discussion, the system prompts the user to decide whether versioning should be enabled for the document. A versioning value is stored as a file attribute data value in the database in association with the file. In another embodiment, the Enable File Versioning check box  is displayed in association with every file link for each file that has been uploaded. Thus, a user who is the author of the transportable application or otherwise acting in an owner role may elect to apply versioning at any time.",{"@attributes":{"id":"p-0432","num":"0478"},"figref":"FIG. 11D","b":["1140","1140","1142","1144","1146","1148","1140","114","202","208"]},"The user may also add a name value in Image Name field , and a description value in Image Description field .",{"@attributes":{"id":"p-0434","num":"0480"},"figref":"FIG. 11E","b":["1150","1150","1152","1154","1156","1158","1159","1156","1158","202","208","1154"]},"All images may be sent in a transportable application at the same time. Alternatively, if the checkbox  is selected by the author, then participants who receive a transportable application that contains building block  may add their own images at any time. Conversely, if checkbox  is not checked, then participants may not add additional images to the gallery.","The Image building block and Image Gallery building block are supported by appropriate error logic that generates one or more errors if exceptional conditions occur when images are uploaded by the author. Examples of exceptional conditions include: a file is too large; network connection failure; incorrect image format; incorrect image width; etc.",{"@attributes":{"id":"p-0437","num":"0483"},"figref":"FIG. 11F","b":["1160","1161","1162","1164","1160","1162","1166"]},"In one embodiment, each field of the Information Fields building block may have an abstract data type associated with it using the data typing mechanisms described herein with respect to the Table building block.",{"@attributes":{"id":"p-0439","num":"0485"},"figref":"FIG. 11G","b":["1170","1172","1170","1172","202","208","1172"]},"In one embodiment, building block  accepts one file for upload. In this embodiment, multiple documents may be displayed in a transportable application by adding another page to the application, or by including multiple building blocks  within the same page. Alternatively, multiple files may be included.",{"@attributes":{"id":"p-0441","num":"0487"},"figref":"FIG. 11H","b":["1180","1182"]},"In one embodiment, the URL may be changed at any time by recipients of pages that contain the building block. An administrative console function may be provided to enable establishing filters for building blocks.",{"@attributes":{"id":"p-0443","num":"0489"},"figref":["FIG. 12","FIG. 24"],"b":["1200","1210","1200","1208","1212","1212","1201","1202","1201","1204","1205","1206","1201","1200","1201","1202","1202","1204","1205","1206"]},{"@attributes":{"id":"p-0444","num":"0490"},"figref":"FIG. 13A","b":["1300","1304","1306","1308","1310","1312","1314","1316","1318"]},"The value in the deadline field  may be used, programmatically, to automatically trigger closing a transportable application or page that includes the Invitation building block .","An author of a page that contains building block  may select a style for the graphical appearance of the building block using a Select Invitation Style link . In response, the system displays a list of one or more pre-defined styles for invitations. The author selects one of the styles, fills in the foregoing event data, and saves the building block.",{"@attributes":{"id":"p-0447","num":"0493"},"figref":"FIG. 13B","b":["1320","1322","1324"]},"As recipients interact with the building block, the author may view a graphic image of the results in graph or chart form. The author may select the specific form of the results by selecting one of a plurality of radio buttons , each of which is associated with a different presentation format such as pie chart, bar chart, etc. The author may enable recipients to attach comments to their responses by selecting Comment check box .","Poll building block  further comprises an Advanced Options link  that enables the author to set other functional behavior of the building block. In response to selecting link , the system displays an Advanced Options window.  is a diagram of an Advanced Options window that may be displayed, in one example embodiment. In this embodiment, the author may use Advanced Options window  to select whether recipients of a poll may vote for one or more of the answer choices  of , by selecting a value from a pull-down menu . The author may instruct the system to include an additional answer choice of \u201cOther\u201d in the list, and allow recipients to write in an answer, by selecting check box .","In one embodiment, if an \u201cOther\u201d choice is allowed, and recipients write in answers, the written-in answers are automatically added to the choice list. The written-in answers are dynamically updated to the database. Thus, any later recipients who open the same transportable application see the written-in answers as additional poll choices.","One or more Vote Options check boxes  may be provided. In one embodiment, the author may instruct the system to allow recipients and participants in the poll to change a vote by selecting a first check box. The author may instruct the system to allow participants to vote anonymously by selecting a second check box. The author may specify when the poll results are available for viewing by the participants by selecting one of a plurality of radio buttons . In one embodiment, the author may specify that the poll results are available to participants always, after a participant has voted, after the poll closes, or never. In one embodiment, the author may require all ratings to be submitted on an anonymous basis (\u201cforced anonymity\u201d), by selecting an option or check box when the Poll building block is added to an application.",{"@attributes":{"id":"p-0452","num":"0498"},"figref":"FIG. 13D","b":["1342","1340"]},"A Location field  receives a value identifying a proposed location for the scheduled event. A list  of a plurality of time alternatives or choices  is provided. Each choice  has an associated date field , time field , and duration field . Each choice represents a possible best time for a meeting or event, for example. In one embodiment, a maximum of five choices are provided in the building block, as in , and an option check box  enables the author to specify whether recipients can propose additional choices. If option check box  is not checked, then a recipient of building block  in a transportable application is required to select one of the five choices as best for that individual's schedule.","In one embodiment, the Schedule building block lists at least one schedule response for all recipients of a transportable application that contains the building block. Further, a blank row is displayed in the schedule table for all recipients who have not responded. Thus, even if a recipient has not responded to the transportable application, that recipient is listed in the schedule. This enables all recipients to see who has provided an availability response and who is yet to respond. Programmatically, the Schedule building block may use a getRecipientResult( ) method to retrieve a list of recipients of the transportable application. The list of recipients is compared to a second list of all recipients who are known to have responded to the transportable application. The difference in the lists provides those recipients who should be listed in the schedule table with blank entries.",{"@attributes":{"id":"p-0455","num":"0501"},"figref":["FIG. 13E","FIG. 13E"],"b":["1360","1364","1362","1374","1370","1370","1372"]},"The author may modify the size and appearance of the table using buttons . In one specific embodiment, buttons  comprise an insert button, delete button, and properties button. A user selects a particular row or column by selecting its associated radio button, and then selects one of the buttons . In response, if the insert button is selected, the system will insert a row or column adjacent to the selected row or column; delete the selected row or column; or enable the user to modify properties of the selected row or column. In one embodiment, such properties include column width, text alignment (left, right, center), cell format, etc. In still another embodiment, the requested changes may be applied to all rows and columns in the table by selecting a separate check box.","In an alternative embodiment, selecting the insert button causes the system to prompt the user to enter a numeric value representing a number of rows or column to insert, thereby enabling inserting multiple rows or columns in a single operation.","In another embodiment, table columns may be formatted according to one of a plurality of abstract data types, e.g., date, numbers, currency, time, etc. The data types may also be enumerated data types, such as a priority type (high, medium, low); an answer type (yes or no), a status type (open, closed, pending, resolved); an approval type (approved, do not approve, undecided); or a custom enumerated type that is user-defined. To apply a data type, the author selects the Properties button from among buttons  and then selects a data type from among a list of available data types. The selected data type is stored in the database as an attribute value for the associated column of the table. If the author adds rows to the table, then columns in the row inherit the data type attribute values. When a recipient adds data to a cell, type checking is carried out to ensure that the value that was entered matches the type of the cell; if a type match occurs, an error is reported.","In addition, data values for table cells may be imported from a data file by selecting an Import link . For example, data values may be imported from a spreadsheet file, delimited file, comma-separated file, tab-separated file, or the equivalent.","Use of enumerated data types enables users to construct Table building blocks that effectively track progress on action items relating to a project. For example, a group of users who are collaborating on a particular project can create a transportable application with a Table building block that identifies tasks, a party responsible for each task, and a status value taken from an enumerated data type. As users complete assigned tasks, they update the Table building block status value as appropriate. Any user who views the transportable application sees the then-current status values for all tasks.",{"@attributes":{"id":"p-0461","num":"0507"},"figref":"FIG. 14A","b":["1420","1422","1424"]},"As recipients interact with the building block, the author may view a graphic image of the choice responses in graph or chart form. The author may select the specific form of the results by selecting one of a plurality of radio buttons , each of which is associated with a different presentation format such as pie chart, bar chart, etc. In one embodiment, the author also may use a pull-down menu  to select whether recipients of a poll may vote for one or more of the answer choices  by selecting a value from a pull-down menu . The author may instruct the system to include an additional answer choice of \u201cOther\u201d in the list, and allow recipients to write in an answer, by selecting check box .",{"@attributes":{"id":"p-0463","num":"0509"},"figref":"FIG. 14B","b":["1432","1434","1432","1432"]},{"@attributes":{"id":"p-0464","num":"0510"},"figref":"FIG. 14C","b":["1440","1442","1444","1444","1446","1448","1450","1450","1452"]},"In one embodiment, the author may require all ratings to be submitted on an anonymous basis (\u201cforced anonymity\u201d), by selecting an option or check box when the Ratings building block is added to an application.","A Listing building block is provided to enable a transportable application to retrieve various types of data from the database and display it in a list format, using HTML or any other desired presentation format.","In one specific embodiment, the Listing building block is implemented as an abstract class that can be subclassed to present any result set of database data that can be described by a programmer or developer. For example, the Listing building block may be used to generate lists of groups, folders, messages, and transportable applications for use in the Group Directory, Group Messages Inbox, Group Application Templates, and Personal Messages Inbox that are displayed through the portal and other mechanisms as described herein.","In this embodiment, the Listing building block implements a Question interface to issue database queries, and a Presenter interface to carry out data presentation. The Listing building block also generates a Create event, Read event, and Close event to the event handling system when it is created, read, or closed, respectively. The Listing building block contains no actual data of its own; rather, all data it displays is metadata about other objects, such as transportable applications, users, groups, or templates. Thus, it need not generate a Response event.","A Group Directory building block may be implemented as a subclass of the Listing building block. The Group Directory building block displays a list of all the Groups available, including group name, description, and status. The Group Directory building block may receive a selection of a group from user input. In response, the Group Directory building block determines whether the user is authorized to access the selected group, and then generates a Status value as output. The Status value may be Join Group, Member, or Private. Join Group means that the user is not a member of the group and the group is not private, i.e., the user may join the group. Member means that the user is already a member of the group. Private means that the user is not a member and group joining is restricted.","A Group Messages Inbox building block also may be implemented as a subclass of the Listing building block. The Group Messages Inbox building block displays a list of all transportable applications sent to a group including author, subject, type, date created, and date last modified. The Group Messages Inbox building block may be used in two different instances to provide a list of current group messages as part of a group home page, and to provide a group archive list.","A Group Applications Templates building block also may be implemented as a subclass of the Listing building block. The Group Applications Templates building block displays a list of selected application templates for a particular group, organized by template name and date created. The selected application templates may all those that are in that group's application directory, for example. There may be an instance of the Group Applications Templates building block for each group.","A User Messages Inbox building block may be may be implemented as a subclass of the Listing building block and generates a list of all transportable applications sent by and received by a user, except that received group messages are not displayed. The list comprises, for each transportable application in the list, a status value, attachment status value, author name, subject, and date last modified. The status value indicates whether the associated transportable application is new or unread, updated or changed, or read. The attachment status value indicates whether the associated transportable application has one or more files attached, or no attachments. The User Messages Inbox building block provides graphical controls to create folders, move transportable applications into folders, or to delete them.","According to one embodiment, the Style Editor is configured to enable a portal administrator to create one or more Site-specific Styles. In this context, a \u201csite\u201d is an installation of system  at a particular enterprise or organization, such as a corporation. The Site Style Editor displays only those properties of transportable applications and templates that are relevant to creating styles for a particular site. Such properties may include site snippets (including the header and navigation), color scheme, branding and corporate-color images, and fonts to be used throughout the site.","In one approach to implementing the foregoing, a Style Properties table of database  includes a column that identifies whether a style property is a general property or a site-specific property. The Style Editor is configured to allow setting a mode, e.g., generic or site-specific, when a user invokes or enters the Editor. When the Style Editor is in a site-specific mode, it shows only properties relevant to that mode.","A Site Style Preview Tool is provided to enable a user, who is creating a Site Style, to preview the appearance of the site so that other users of the system will not be disrupted during development time. Only the Site Style creator can see the site using the Site Style being created. In one embodiment, Site Style development and previewing is carried out on a separate application server to minimize performance issues. Further, in one approach, the preview of the site is displayed in a frameset of a browser, enabling a user to freely browse the site.","When one or more styles have been created, users can select a style at the time that a transportable application is authored. For example, at authoring time, when a transportable application is created or a task is added, a user can either select an existing Style through the Style Picker or create a new Style during authoring and automatically apply that Style to the transport able application that is being authored.","In one approach, a Style Editor is provided having an action bar with a plurality of graphical user interface buttons that trigger different actions and behavior. In one specific embodiment, a Clear button resets Style properties. A Save button saves the Style. If it already exists in the database, it is overwritten without asking the user for a new name. If it does not exist, then the user is prompted to provide a name and description. A Save As button saves the Style after first prompting the user for a name and description. An Open button loads a Style into the Editor from the user's personal collection, or from a Group or Global folder.","A Preview button displays a preview of the current Style. The style is previewed in association with the type of transportable application that the user is in the process of authoring. An Apply and Exit button is also provided. When selected, if the Style has not been saved, then the user is prompted to provide a name and description of the Style, and it is saved. The Style is automatically applied to the then-current transportable application under development, and the Editor is closed. Cancel and Exit buttons may also be provided to enable termination of style editing and exiting the application.","The Style Editor also may be configured to save and load styles to and from groups, global areas, or folders of groups or global areas. This enables groups of users to export styles to such areas for the purpose of sharing them. Use of folders enables users to organize styles. Folders and style references may be created as node objects.","1.5 Communications From Transportable Applications to Users (\u201cNotifications\u201d)","In an embodiment, application server  includes processes that can selectively deliver notification messages to users based on actions carried out by transportable applications. In general, a notification is a message, sent by electronic mail or any other transport mechanism, to a recipient of a transportable application separate from the application as a result of an action taken by that recipient or by another recipient of the application. For example, assume that a transportable application includes a discussion building block in which a group of participants are discussing a particular topic. If a participant enables notifications for that application, the system sends that participant a notification message each time that another participant updates the application with a new comment.","In one embodiment, each participant or user affirmatively requests notifications in an \u201copt-in\u201d process. Alternatively, however, notifications may be used to accomplish more complicated business processes or workflows. Further, in one embodiment, notifications are associated with transportable applications as a whole; alternatively, each building block may independently generate a notification based on an action of a participant using that particular building block. In still another alternative, notifications are issued based on rules when conditions specified in the rules are satisfied by user actions.","In this description, participants or users may assume one or more roles. An individual acting in an Owner\/Moderator role is a person who initiates or starts a process. The Owner owns the process and is accountable for all its functions. In the corporate context, owners of a process can be product managers, purchase agents, account managers, customer service representatives, etc. An individual also may act as a Participant (also termed a Member or Recipient). Members interact with one or more specific tasks in a process, such as interviewing candidates, bidding on proposals, participating in meetings, etc. The owner of a process can assign specific roles to the participants. Owners may be participants also.","In one embodiment, with respect to groups, an Owner can add or remove members from the group; carry out moderator options; exercise author rights over all group messages; delete group messages; and exercise all Member privileges. A group Member, in contrast, can send or receive group messages; invite others to join public groups; unsubscribe from the group; and create a sub-group.","Notifications, in one approach, are alert messages that are sent to users when a predefined activity has occurred in a process. For example, notifications may be issued as a result of the following activities: Response to a building block by a user; change in process or task status; change in process or task due dates; more than 50% of people have polled; more than 60% of users have confirmed for the meeting; and others. Reminders are prompts sent to users. Examples of reminders include: Inform a user that a due date is fast approaching; inform all users about an important process development; etc. Both notifications and reminders generally are sent outside the context of a transportable application, for example, by a separate e-mail message directed to the recipient. In contrast, notes, as described herein, are text messages that are selectively embedded within a transportable application to draw something to the attention of the recipient when the recipient opens the transportable application.","Notifications may be pull or opt-in notifications, or push notifications. With pull notifications, a user defines (or sets rules) when to receive notifications and reminders. The system automatically sends a notification if the specified definition is satisfied. With push notifications, an owner sends notifications and reminders to users regardless of whether the user has requested for the same. Here the owner overrides the notification preference of the recipient.","In one embodiment, notification processes are configured so that a participant receives notifications on any updates immediately. In this approach, users have the option to opt-in to receive any updates. The user receives a single notification on any updates since the last read. In one specific approach, taking any of the following actions on a process or task triggers delivery of a notification: Adding new tasks; response to building block; closing of tasks; closing of processes; change in process status or due date; change in task status or due date.","In one sub-approach, only the tasks for which a user is in the recipient list trigger notification updates. If a different task changes, for which a user is not in the recipient list, the user is not notified.","In another embodiment, notification processes are configured so that a participant receives notifications on any updates to specific tasks immediately. Users can receive notifications on any updates to a single task or group of tasks. A list of active tasks is provided to the user from which the user can select tasks on which to be notified.","The notification processes also may be configured to send a process-level reminder to all recipients. Specifically, the owner of the process can configure a transportable application to send ad-hoc reminders to everyone in a recipient list whenever an important process event occurs. For example, assume that Michael is interviewing at Alpha Company and an interview process transportable application is currently used for scheduling interviews. A manager at Alpha receives information during the interview process that Michael has a competing offer and needs to decide whether to accept it within the next week. The manager, who is an owner of the transportable application, can immediately notify all the participants that they should schedule interviews for Michael and decide on the candidate. In a related approach, the notification processes are configured to send process-level reminders to selected recipients in the recipient list.","In another embodiment, the system is configured to send a task level reminder to all recipients in a recipient list. The owner of the task can send ad-hoc reminders to everyone in a recipient list whenever an important task event occurs. For example, assume that an offer letter to candidate John Q. Public is under discussion in the \u201cOffer task\u201d of a transportable application. The salary to be offered to the candidate is still under discussion among the managers. However, the Director of Sales needs to provide the sales headcount to the VP of Marketing & Sales next week and as such needs to finalize the offers quickly. She sends a notification to the participants in the \u201coffer task\u201d to come to a consensus quickly on the offer and go further with the hiring. In a related feature, a participant can send a task level reminder to select recipients among the recipients of the transportable application.","Another feature provides scheduled process update notification. A user can schedule to receive process update notifications periodically or on a specified date and time. Periodic update options for the user to select are daily (options within a day), and weekly (options within a week). For example, assume that Bob is the Director of Business Development at Alpha Company and his team is working on new business deals with a lot of startups. Bob would prioritize on his updates based on the importance of the deal. So he schedules some deals for weekly updates while others for daily updates.","In another embodiment, the system is configured to send scheduled process \u201cdue date\u201d reminders to all users in a recipient list of a transportable application. In this feature, the owner of a process can schedule specific \u201cdue-date\u201d reminders to be sent to everyone either at the process or at the task level. The owner can send the reminder either on a particular date or a specified period before the due date (e.g., two days before, two weeks before, etc). For example, assume that a product management team has defined new features for a particular product release and requires approval from other functional areas (such as Engineering, Sales, Business Development etc.). The features need to be frozen by a certain date so that development on the product can commence. The project lead schedules a \u201cdue-date\u201d reminder to be sent to everyone a week before the deadline to ensure that the activities are completed by the due date.","In other features and embodiments, a participant or user can \u201copt-in\u201d to receive summary of notification changes; \u201copt-in\u201d to receive selected notifications immediately; send a scheduled task \u201cdue date\u201d reminder to everyone in a recipient list; send a scheduled task \u201cdue date\u201d reminder to select recipients in a recipient list; and \u201copt-in\u201d for a scheduled process due date reminder.","In one implementation approach for the foregoing features, the event-based messaging system described herein is configured to enable building blocks and associated notification event handlers to communicate. One or more events may issue as a result of another event. Responses to events are carried out by a notification event handler that is associated with each kind of response event. Response-based notifications are generated by each such handler. Each notification is an event, and the each notification event handler comprises logic that determines which users need to receive notifications and when. In an embodiment, each event handler uses a notification API to generate a list of users to notify, and the event handler then sends the list to an event daemon that dispatches the notifications. As a result, an event-based messaging system facilitates generating rule-based notifications in response to any change in any attribute of a transportable application.","In one implementation of response-based notifications, as outlined above, each user may \u201copt in\u201d to receive notifications at a task level and at a process level. Hence, each user can subscribe to changes in particular tasks or to any change in the process. Further, each user can associate a notification frequency value with each subscription.",{"@attributes":{"id":"p-0497","num":"0543"},"figref":"FIG. 7","b":"702"},"In block , in response, a database query is issued to obtain a list of users who have requested notifications for the current building block. A notification time value is obtained for each user in the list; the notification time value indicates when to notify each individual on the list. In block , the list is passed to the parent object of the current building block, which may be another building block or a container object, with a request to carry out notifications.","In block , a list of recipients associated with the parent building block or container object is retrieved and compared to the list of users who qualified for notifications at the child building block level. Only those users who qualified for notifications at the child building block level are then considered. For each user who qualified, if that user has a notification time value that indicates a delayed notification is necessary, then no action is taken since the child's notification time overrides any notification time that may be associated with the parent.","In block , for each user in the child notification list that qualifies for an immediate notification, then a database query is carried out to determine that the user is active in the system and does not have a notification already pending. This is done to avoid duplicate notifications. If these tests result in a determination that the user is entitled to a notification, then control is passed to block .","In block , a status value for the user associated with the parent building block or container is changed to Updated, and a current time value is stored in a notification time value in the database.","In block , users in the recipient list of the parent block or container who did not qualify for child level notifications are considered. The status value for each such user is changed to Updated, and a current time value is stored in a notification time value in the database. In block , the notification message is dispatched to all qualifying users in the parent and child notification lists.","In a related approach that is integrated with an event management system, each building block can publish attributes about itself to the rest of the system, and publishes event that alert the system when such attributes change. Further, users may create and store rules based on these attributes that cause such users to receive a notification when the rules are satisfied. In addition, users may be notified at a particular time if a rule is satisfied. For example, a user can be notified if a project status reaches \u201ccomplete\u201d, and the user can also be notified if the project status is not \u201ccomplete\u201d one month after the project began.","In one implementation approach, database  comprises a rules table having the following columns: Rule ID; Block ID; User ID; Attribute; Threshold value; Comparator; Time flag indicating whether the rule is time-based; Event ID if the rule is time-based; Action type. In one embodiment, the Rule ID field does not store a unique key value, because the same Rule ID can encompass several rules that are evaluated simultaneously.","Database  further comprises an alert log table having the following columns: Block ID; User ID; Note; Read bit. An Alert Waiting bit is provided in a user status table. Each block is associated with a presentAttributes method that returns one or more attributes, types, comparators (if applicable), and description values for each attribute. An interface is accessible from each transportable application with which a user can build the rules and set threshold values and comparators. Each rule may be characterized in terms of Boolean values, number comparisons (equals, less than, greater than), string equals comparisons, etc. Using the interface, a user may edit the rules that have been created, and attach a time value and recurrence period to a rule.","In response to a user creating a rule using the interface, a servlet of application server  enters the rule into the database , and attaches a rules event to the building block in which the rule was created. The rules event subscribes to attribute changes in the building block. The servlet also deletes any old rules in the database for the same building block.","Thereafter, when an attribute changes in the block, the rules event is invoked. Processing the rules event involves first retrieving all rules for that block from the database , evaluating the rules as designed to result in creating and storing a list of rule identifiers that evaluated to TRUE, and generating a rules-passed event that includes the list.","Actions can subscribe to the rules-passed event. Each such action has an associated rule ID value. If a rule matching the associated rule ID value is fulfilled, then the action is executed.","An Alert Notification event object is provided and has a handler process that determines if its rule has passed. If so, the handler sends a notification to the user if needed, and records the notification in a notification log.","In one approach for displaying notifications, when a user opens and reads a transportable application, a flag message is displayed that informs the user that a new notification exists. The flag message may be a hyperlink. The user selects the flag message. In response, the system displays the notification in a pop-up dialog with which the user may scroll through one or more notifications. Each alert then is marked as read.","1.6 Object Communications\u2014Programmatic Methods","In one embodiment, system  uses two distinct types of internal communication mechanisms. Non-event driven sharing of data is carried about in Building Block and Container interactions and Container-to-Container communications. Event-driven publish-subscribe exchanges are carried out between disparate objects within the system.","Non-event-driven data sharing is used in cases in which communications require detailed knowledge of the hierarchy of objects or the need to transfer essentially the entire data of such objects. In order to ensure the successful delivery of these communications, a unique identification system is provided for all objects that will communicate within the system. In one embodiment, each object in the system has a unique global identifier, as described further in this document in the section entitled \u201cDirectory Integration\u2014Global Object Identifiers.\u201d Using global identifiers and associated mapping tables, container objects for contained objects can be determined.","In an alternative embodiment, a global object identifier is associated only with container objects. The relative position of a contained object within the container object is used as a unique identifier of the contained object. As a result, each contained object is accessed only through its immediate Container. For example, a poll Building Block within a task in a Process Container would have the id: <Process Container ID>_<task index>_<poll BB index>, or alternatively, <Task Container ID>_<poll BB index>, if the Process Container was not needed in order to deliver the message. A benefit of this mechanism is that there could be ACLs applied on a particular Container that may affect access to a contained object.","In one embodiment, a data-sharing communication mechanism is used in order to aggregate data from multiple Building Blocks in order to form a composite view. For example, in the case of a Poll Discussion, the Data Access Component for the poll building block and the discussion building block are joined by a composite Building Block in a particular way in order to show both the poll and discussion data together. In order to join such a composite view, the Container collects multiple Data Access Components from the blocks and delivers them to the Composite Building Blocks.","In one specific embodiment, containers or other objects in the platform implement a DataSharingInterface in order to achieve communication. The interface is defined as:",{"@attributes":{"id":"p-0517","num":"0563"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface DataSharingInterface {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public DAC getDataAccessComponent(RelativeID target,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"UniqueID requester, UserID user);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The Data Gathering Service Manager implements a DataGatheringInterface in order to extract the DACs of the objects that a component may want to access. This interface is defined as:",{"@attributes":{"id":"p-0519","num":"0565"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"private interface DataGatheringInterface {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Vector gatherDataAccessComponents(UniqueID"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"requester, UserID user, UniqueID[] fromList);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In one example embodiment, the Data Gathering Service Manager loops through each element in the fromList, determines the Container, sends the container to a DataSharingInterface and calls the getDataAccessComponent method with the RelativeID of the specified Blocks. The Container implementing the DataSharingInterface gathers the appropriate DAC from the specified Block. This process allows Building Blocks across Containers to share data, and also allows the sharing object to limit the amount of data that should be sent out to the requester.","1.7 Object Communications\u2014Event-Driven Methods (Event Handling System)","In one embodiment, the system described herein provides an event handling service as represented by event processor  of , and event daemons  of event service  of . In this embodiment, one or more event daemons  are communicatively coupled to event service . The event service  is communicatively coupled by link  to database server . The event daemons serve to offload certain separable functions from the application server . For example, in an embodiment, event daemons are responsible for mail event queuing and handling, bounced-mail handling, and generating personalized transportable application content, based on a user's e-mail client profile.","Alternatively, a generic event handling system is provided to enable different components of the system to communicate. In one embodiment, an event handling system enables the system to act when a specific event occurs within a transportable application, act when a specific event does not happen, and facilitates authoring rules to carry out the foregoing. Actions may include generating notifications, generating reminders, forwarding a transportable application, other automated actions, delivering a message to subscribers, etc. In one embodiment, actions may comprise anything that can be carried out programmatically. The event handling system may comprise an object framework, message format and implementation classes.",{"@attributes":{"id":"p-0524","num":"0570"},"figref":["FIG. 17A","FIG. 17B"],"b":["1700","202","1702","1704","1706","1702","1704","208","1706"]},"Events are programmatically represented by event messages. In general, event messages contain information about what occurred and the state of objects that relate to the event. Standard events include creating, updating, deleting, and changing the state or status value of a transportable application. For example, an update event for the poll building block may contain the building block identifier, the user name of the person who added a response, the response value, the time and date of the response, the total number of responses, and the total number of recipients. However, each building block may generate any desired events having any desired data or content. Events may be time-based. For example, events are generated or created by invoking particular methods when the prescribed time for an event arrives.","Each building block has a method which, when called by another program element, returns a list of events that it can generate. This enables other program elements to identify and subscribe to events.","In one specific embodiment, each event message comprises a header and a body. The header comprises metadata, and the body comprises information that identifies the container and building block that generated the event, the name of the event, etc. In one specific embodiment, the header comprises a fromDestination value that identifies the originating system; a toDestination value that identifies a destination system for the message; a message type value; a timestamp value that identifies a date and time at which the event occurred; a message action value; and a tracking identifier value. The body encapsulates another header (\u201cinner header\u201d) and inner body or payload that contains event-specific data. Events and their data may be defined by an XML schema.","The message type value enables an event message to specify whether it is a system event, application event, etc. Examples of system events including replication events, system administration events, initialization events, etc. Application events may be events generated by transportable applications, connectors, groups, etc. Each event type has a corresponding schema that defines the elements of the inner header and payload for that event type.","Event messages may be persistent. Persistent event messages are stored in an event table in the database . Events can be made persistent by programmatically setting a \u201cPersist\u201d flag in the event message header. Alternatively, the event type definition may specify that all event messages of that type are persistent.","In one embodiment, containers generate events that are published to the event handling system. The event handling system applies rules to determine whether received events should result in an action. If the rules are satisfied by the events or other data, then actions result.","Rules may be associated with building blocks or containers. Rules may be saved in association with a template of a transportable application.","Rules may be subject to author control or participant control. In rules with author control, only users who are authors of a transportable application template can modify or deactivate the rules. In rules with participant control, any participant who receives a transportable application that is instantiated from a template having the rule can modify the rule.","Rules may be designated as active or inactive. Active rules are visible within a template of a transportable application and within an active transportable application.","Each rule comprises an association with one event through a coarse-grain filter, a fine-grain filter that has one or more conditions, zero or more constants, one or more actions or handler. Rule constants can comprise a static string or may be defined as reusable expressions.","Rule conditions may be created as coarse-grain filters or fine-grain filters. Coarse-grain filters determine whether a particular event message maps to or is associated with a pertinent set of rules for the event. Thus, coarse-grain filters carry out filtering only on a header portion of an event message. Coarse-grain filters support, for example, static strings or wildcards for filtering events based on header elements. An example of a coarse-grain filter is, \u201cEventType=createResponseVoteRequest\u201d. This filter would pass only event messages that result from an end user issuing a vote in a poll building block. The coarse-grain filter \u201cSenderID=1222\u201d would pass only event messages created as a result of actions by a specific user (user \u201c1222\u201d).","A fine-grain filter is a filter that contains conditions used to decide whether an associated action should be fired or not for a particular rule; the action is invoked only if all conditions in the filter are satisfied. Conditions in a fine-grain filter may be applied against any data in a message or against dynamically retrieved data. Fine-grain filters generally are defined by a custom class that implements an interface, or specific programmatic expressions that invoke methods. In one embodiment, fine-grained filters are defined as Xpath statements according to the format specified in the document \u201cxpath.html\u201d that is available at this writing in the \u201cTR\u201d folder of the \u201cwww.w3.org\u201d directory and domain on the Internet. An example of an Xpath statement is \u201c\/message\/body\/poll\/currentCotnt\/text( )>5,\u201d which states that the value of the variable \u201ccurrentCount\u201d of the text( ) method of the poll building block shall be greater than \u201c5\u201d.","Actions are implemented as handler classes that can invoke any programmatic method or routine. In general, the handler classes are implemented within a building block that generates the events that include the actions associated with the handler classes. In one embodiment, during rule editing, a rule author may select one of a plurality of standard actions that are provided by a graphical rule editor. Alternatively, custom actions can be created by preparing appropriate program code that is uploaded to application server  and registered with the event handling system. Examples of standard actions include: system action for notification; system action for closing a transportable application; system action for unclosing a transportable application; system action for updating a status field of a transportable application; system action for creating a new page or transportable application based on a saved template; system action to change a role for a particular user for a particular page; system action to rename a page; system action to show a page; system action to hide a page; system action to open a page; system action to close a page.","Rules may be defined in XML format and attached to a building block, a page, or to a template for a transportable application. In one embodiment, rules may be created using a graphical Rules Editor, which is accessible from the transportable application editor described herein, when building blocks, pages, or templates for transportable applications are authored. The Rules Editor is also accessible from within a transportable application that has been opened. Rule editing involves selecting a condition template from a scope of available condition templates, providing values for variables in the condition template, and selecting result actions. Rule editing may be carried out at any time during the lifecycle of a transportable application template or instance.","Rules may be evaluated or \u201cfire\u201d one or more times.","In one specific embodiment, to carry out event-driven messaging, containers for transportable applications or groups implement an EventHandler interface  of . In one embodiment, the EventHandler interface is defined as:",{"@attributes":{"id":"p-0541","num":"0587"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface EventListener {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public void handleEvent(Message msg);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"For containers of transportable applications in order to react to create, respond, and edit events, and for GroupContainers to add, modify and delete members, and for FolderContainers to add, modify or delete files, the following event handling process is carried out. First, the appropriate event is passed to an EventManager that forwards the event to a particular ActionManager for the specific type of event, for example, a ResponseActionManager. The ActionManager then calls a handleEvent method on the appropriate EventListener. In these cases it is clear which object is intended to act on this event. Accordingly, to require each container to subscribe to its create, respond, and edit events is superfluous and therefore point-to-point messaging may be used as an alternative. In point-to-point messaging, the ResponseActionManager calls the handleResponseEvent, making the Container design easier.","For general event handling when Building Blocks are generating information useful for other Building Blocks, a publish-subscribe model is used, in which objects subscribe to certain events from the EventManager. Subscribers implement the EventListener interface and handle the appropriate event.","Details of an embodiment of an event processing system are now provided. In one embodiment, an event processing system comprises tables in a database that are configured according to the database design and schema described herein, and programmatic objects that implement functions of the API described herein.","In general, in one approach, an Event Message may be published on many occasions, which identify the type of the message. Every Message object has a specific message type value (\u201cMsgType\u201d) associated with it. The specific message type will trigger the proper action, associated with the message type. In one specific approach, message type values are omitted, and each message provides attributes as name\/value pairs that are accessible in a global memory space.","In one embodiment, a database schema that supports message processing comprises an attribute table and message table. The attribute table may have the following structure:",{"@attributes":{"id":"p-0547","num":"0593"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},"Field",{},{},{}]},{"entry":["Field Name","Description","Required","Key","Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MSGID","Id of the","Yes","Yes","NUMBER(19)"]},{"entry":[{},"Message"]},{"entry":["ATTRNAME","Name of the","Yes","Yes","VARCHAR(64)"]},{"entry":[{},"Attribute"]},{"entry":["ATTRVALUE","Value of the",{},{},"VARCHAR(1024)"]},{"entry":[{},"Attribute"]},{"entry":["ATTRTYPE","Type of the","Yes",{},"VARCHAR(16)"]},{"entry":[{},"Attribute"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The MSGID and ATTRNAME fields are included in the primary key. The ATTRTYPE field is used to store information about internal type of the attribute on the app server side. This information is used to transfer the value of the attribute to the required type.","The message table may have the following structure:",{"@attributes":{"id":"p-0550","num":"0596"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Field Name","Field Description","Required","Key","Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MSGID","Id of the Message","Yes","Yes","NUMBER(19)"]},{"entry":["MSGTYPE","Type of the","Yes",{},"VARCHAR(64)"]},{"entry":[{},"Message"]},{"entry":["OBJID","Id of the Object","Yes",{},"NUMBER(19)"]},{"entry":["OBJTYPE","Type of the","Yes",{},"NUMBER(3)"]},{"entry":[{},"Object"]},{"entry":["SENDERID","Id of the sender,",{},{},"NUMBER(19)"]},{"entry":[{},"who posted the"]},{"entry":[{},"message"]},{"entry":["SENDERTYPE","Type of the",{},{},"NUMBER(3)"]},{"entry":[{},"Sender, which"]},{"entry":[{},"posted the"]},{"entry":[{},"message (user,"]},{"entry":[{},"group, etc.)"]},{"entry":["MSGTIME","Time when","Yes",{},"DATE"]},{"entry":[{},"message was"]},{"entry":[{},"created"]},{"entry":["STATUS","Status of the","Yes",{},"NUMBER(3)"]},{"entry":[{},"Message"]},{"entry":["EXPTIME","Expiration time of","Yes",{},"DATE"]},{"entry":[{},"this message"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The MSGID field is the primary key. An index is created on the combined OBJID and OBJTYPE fields. The STATUS field represents an internal parameter and is hidden from the API. The STATUS field stores the result of database transaction and processing of the event.","An example class structure that implements an appropriate API is set forth in APPENDIX 1.",{"@attributes":{"id":"p-0553","num":"0599"},"figref":"FIG. 17C","b":["1720","1720"]},"In block , the event handling system determines how to route the event message. For example, in block , the event handling system determines whether the event is synchronous or asynchronous. If the event is synchronous, then it is sent to a message broker  that is defined by the event broker framework .","Message broker  determines whether the event is persistent, as shown by block . If so, then control passes to block  in which the event is stored in the database or otherwise made persistent. Thereafter, and if the event is determined as not persistent at block , control is passed to block , in which one or more coarse-grain filters are located. The filters are selected based on the message type, and applied to the event message.","If the event message matches one of the coarse-grain filters, then in block , one or more rules with fine-grain filters are retrieved. Rule constants are extracted from the rules in block . In block , the fine-grain filters are applied to the event message. If a match occurs, then in block , the associated action is performed.","Referring again to block , if the event message is asynchronous, then control passes to block  in which the event message is dispatched using a transport mechanism. The event message is sent over a durable or non-durable topic, as appropriate, as shown by block , , . Thereafter, the event message is processed at the message broker, as shown by block , in the manner described above. Concurrently, a notification message is received at block , and in response a notification is sent to the end user, at block .","1.8 Object Communications\u2014External Systems","According to one embodiment, mechanisms for enterprise application integration, using connectors, are provided to enable the system to connect to existing (\u201clegacy\u201d) applications of an enterprise that uses the system. The mechanism for connectivity may use a synchronous or an asynchronous approach. In a synchronous approach the client makes a request and waits for a response before it proceeds. Synchronous approaches can use HTTP, HTTPS, RMI, CORBA. Asynchronous approaches do not have this limitation and typically use asynchronous messaging implementations.",{"@attributes":{"id":"p-0560","num":"0606"},"figref":"FIG. 18A"},"Application server  and other servers  that comprise the transportable application system as described herein are communicatively coupled using JMS  to an adapter . The adapter  is communicatively coupled to an existing asynchronous Enterprise Application Integration (EAI) bus . Commercially available examples of EAI bus  are produced by Vitria, TIBCO, IBM, WebMethods\/Active, etc. The bus  is communicatively coupled through one or more connectors A, B, C to corresponding legacy applications in the form of an enterprise application , Web server , mainframe , etc. In this example, adapter , EAI bus , and connectors A, B, C are compatible and generally are provided by one of the foregoing vendors.",{"@attributes":{"id":"p-0562","num":"0608"},"figref":["FIG. 18B","FIG. 18A"],"b":["1818","214","1804","1818","1806"]},{"@attributes":{"id":"p-0563","num":"0609"},"figref":"FIG. 18C","b":["202","1802","1820","1820","1820","1810","1812","1814","1810"]},"Alternatively, in  a Java Connector Architecture (JCA) construct may be used as connectors A, B, C. There may be multiple instances of a connector for each external application.",{"@attributes":{"id":"p-0565","num":"0611"},"figref":"FIG. 18D","b":["202","1802","1822"]},{"@attributes":{"id":"p-0566","num":"0612"},"figref":["FIG. 18E","FIG. 18D"],"b":["216","146","146","1832","1836","1838","1840","1842"]},"In operation, in one specific embodiment, as illustrated in the top half of , the application server  uses JMS point-to-point mode to generate events and communicate them to event daemon . When the event daemon  processes an event, event service  instantiates a Java object and uses converter  to transform the Java object into an XML string. It then uses this XML, transformation engine , and an XSL stylesheet  associated with the Java object to output the expected XML schema for a receiving partner system. The method of transport for the XML can be HTTP, IIOP, or SMTP.","Referring now to the bottom half of , the reverse occurs when an XML message arrives from a partner system. For example assume that the transport mechanism is HTTP. A servlet is invoked and uses transformation engine  and the corresponding XSL  for that XML message to convert it to an XML representation that is expected by application server . An XML to Java object converter  is then used to instantiate a corresponding Java object for the event daemon . The object is encapsulated as an event message. An event handler for that object is then invoked from event handling system  when the event daemon processes the event. Each XML message must have its own object representation, XSL, and event handler.","This arrangement has the advantage that XML messaging is becoming the method of choice for inter-operability between business-to-business systems that exchange data. Application-server vendors are coming out with their own XML-based messaging systems for such exchanges, e.g., WebLogic's Collaborate.","In the approaches of , , the disclosed connectors generally act as gateways for external applications to create, retrieve, update and delete application business objects of the system through an object interface mechanism. The connectors also receive notifications for changes to such objects through the event management system and notification system, or by polling. The connectors also enable application server  and other components of the system to retrieve and update data from external applications. In one specific embodiment, the connectors enable objects associated with building blocks to retrieve and update objects that are hosted in external applications or systems.",{"@attributes":{"id":"p-0571","num":"0617"},"figref":"FIG. 18F","b":["1810","1810","1810","214","1810","1806","1810","1810","1810","1840","214","1840","1854","1806","1841","1841"]},"Adaptor B and proxy adaptor A may be configured to operate with any desired EAI bus  or similar product, e.g., webMethods, Vitria, SeeBeyond, etc.","Connector framework  communicates through an API  to connector building blocks , which may be included in a transportable application to give that application the ability to communicate with enterprise applications. The API  may provide create, read, update and delete functions for business objects and transportable application objects. Such operations are subjected to access controls as described herein. In one embodiment, notifications and event rules can be set on connector building blocks  to enable taking actions or creating other transportable applications when the connector building blocks change or generate events. A generic connector building block provides an XSL translation function equivalent to XSL transformation engine  of , and can display connector data. One or more Extensible Style Documents (XSDs) describe the business objects of the enterprise applications in a manner equivalent to XSL .","Thus, the integration framework as described herein provides both direct integration and integration through an existing EAI bus. As a result, adapters can be constructed without platform changes. Both outbound and inbound operations are supported. The framework provides the ability to programmatically create transportable applications and add pages from enterprise systems. Business objects are described in XSD's rather than in source code. Adapter configuration information is described in XML. Asynchronous messages, through the JMS queues, are used for communication with enterprise applications or an EAI bus.","A building block can synchronously query an enterprise application adapter for all business objects matching given criteria. The building block can synchronously request data for a business object from the external system if the data is not found in the cache. Further, an enterprise application can request the system to create a transportable application using external data. The enterprise application can send a notification that a business object has changed, causing the system to update the cache.","An advantage of using this approach is that the building blocks in general will not need to store such objects persistently since the building blocks may retrieve a copy of the external data, at any time, through the connectors, with less impact on performance than if persistent storage is used.","Connectors as disclosed herein may conform to any appropriate communication mechanism for external business objects. For example, the protocols proposed by BizTalk.org, RoseltaNet, EBXML, etc., may be used.","In one specific implementation, connectors are implemented in one or more programmatic classes that conform to the following API description:","Connector class. Building blocks can retrieve any external business object as an instance of a connector business object class. The connector business object class provides methods to produce an XML representation of the object, modify the object, etc. Building blocks can use XSL stylesheets to present the business objects through generic HTML presenters or use custom presenters. The business objects may be implemented as cached data access objects.","Subscribe method. Registers a subscription for a business object for later use. Receives, as parameters, a name of a business object, and one or more name\/value pairs that identify an instance of the business object. Returns a key to identify the subscribed object; the key, which may be persistently stored, is passed to all other methods of the connector class.","GetBizObject method. Retrieves a business object. Receives, as parameters, a name of a business object and a key value. Returns the requested instance of the object.","unSubscribe method. Drops a subscription to a business object. Receives a name of the business object and the key value.","A Connector Business Object class provides a base class for all business objects, and defines a getXMLString method, setXMLField method, update method, and registerNotification method. The getXMLString method returns an XML string method of a named business object. The setXMLField method sets the XML field in a business object based on a field name and a value for the field. The update method stores all changes made to the business object through the setXMLField method.","The registerNotification method registers a rule with the event handling system. It receives, as parameters, an array of fine-grain filters that comprise Xpath expressions, and an action to invoke when the filters are satisfied. The rule registered with the event handling system is created using the specified list of fine-grain filters and the type of event message that is generated by the connector system when the business object changes.","1.9 Security Processes; Access Control","In one embodiment, a security framework is provided having a plurality of security services and interface definitions. The security framework enables an end user to configure and define security features to use when authenticating users and authorizing them to access data. Thus, in this context, security and access control refer both to authenticating users for access to the system as a whole, as well as verifying that a particular authenticated user is authorized to retrieve or modify specific data in the database.","The security framework also enables one user to develop transportable applications with another party and have some of the data to be shared amongst the users associated with that party. The security framework comprises a plurality of interfaces, each of which providing a contractual set of features and responsibilities to the consumers of the interface.","In one embodiment, the security framework is implemented using access control service  and security service . Access control processes applicable to the embodiments described herein are described in co-pending application Ser. No. 09\/861,008, filed May 17, 2001, the entire contents of which are hereby incorporated by reference as if fully disclosed herein.","A GateKeeper interface provides a data consumer with the ability to retrieve and configure information that defines relationships among security domains. This interface provides information about the hosting domain and other domains that have a trusted relationship with this domain. Also, specific users can be managed through this interface so that only specific individuals within an organization have access to data within a hosting organization.","A PortalGate interface provides a consumer with the ability to authenticate a user using a username and password, SSL, PKI, etc. Further, the interface provides the consumer with the ability to query whether a user is still valid, for example, by checking to see if a user is still valid and has not been revoked. The interface also enables another program element to query whether a user has access to a specific data object or object instance.","An Access Control (AssetGuardian) management interface defines one or more contracts between a consumer and an entitlements database. An entitlements database stores information about users and what they have access to. In one embodiment, the entitlements database is maintained separate from database  of , to improve security of the entitlements database.","A Security Provider interface provides components to control end-to-end security. In one embodiment, a PKI enabler interface and an authorization interface each has an implementation that can be defined by configuration where each implementation represents a way to access a PKI or an authorization scheme. Each of these implementations can be loaded simultaneously so that one or more schemes can be used at the same time.","Programmatic classes within the security framework are configured to provide security against intrusion. For example, the classes are typed as final to prevent a hacker from providing implementations to an abstract class or extend and override a non-final class with dangerous or risky code. Therefore, the security framework has its own interfaces and extends other trusted interfaces in packages that are trusted, e.g., the java.security package available from Sun Microsystems.","The data that the framework manages is composed of hierarchies of assets. Assets are defined as objects that exist in a department or an enterprise that need to be protected. For example, assets include transportable applications, pages, building blocks, and objects that encapsulate field data values for any of the foregoing. Each asset in a hierarchy can have permission assigned to it on behalf of a user. The mechanism by which an asset has a user and permission composed for it is termed a security label. Since each asset in a hierarchy can have its own label and levels of access can be applied across a hierarchy, the labels are termed multilevel. Therefore, the security framework is a multi-level security label system.","Contracts within the Security Framework may be defined using the Interface Definition Language (IDL). IDL enables a framework to expose its interfaces and contract data as well as error handling capabilities. In one embodiment, types of IDL syntax that are used in the framework include IDL Exceptions, Structs, and Interfaces. IDL Exceptions are defined so that generated Java source, or any other language that has an IDL binding, will have error handling capabilities defined at the package level. IDL structures are compiled into Java objects, which are typed as final. The security framework composes the contract objects in its model package. The framework model package defines the objects that are used in communications or invocation of interfaces' methods. IDL Interfaces contain the methods that can be invoked as well as the error-handling signature, which completely defines the contract of the interface.","One important benefit to using IDL is that most application and transaction servers use IDL as a way to initially introduce interfaces and implementations into the container. Another benefit is that the IDL to Java conversion process produces client and server side stubs and skeletons so that an end to end implementation is more easily created.","The Gatekeeper interface contract states that of the security configuration for a given security domain, which is determined at the organizational level, all parameters that allow security integration across multiple domains can be retrieved. The interface, for example, supports the retrieval of the CrossDomainList, which is a list of X.500 distinguished names (\u201cDNs\u201d) representing external organizations that have a trusted relationship with this domain. Additionally, CrossDomainDN is a list interface list of all the users (by the DN) who have trusted access to this domain. If this list is null then normal authentication mechanisms are used to determine if a user has access to this domain. If it is not then the intention of this managed list is to provide the users who can access this domain. When the user DN is determined then it can be cross-referenced to the list. If the user DN is not present then the user's authentication must fail whether they can authenticate properly or not. A commercial example of an authentication system that may be used is WebLogic.","An important contract of this interface is the management of the domain and whether it is a secure domain or not. The getMode( ) method informs the consumer of the method if the domain represented by the interface is secure or not. In fact the value returned is not a Boolean but a string, which contains definite values of \u201cSecure\u201d, \u201cNot Secure\u201d, and options text for any granularity in between. In this way a security administrator can define as many security levels as they require.","The PortalGate Interface provides the system with a trusted path. When a user authenticates to the security framework, by one of a variety of mechanisms, a session is established specifically for that user. Because IDL has been used to define the contract of the interface the session trusted path can be managed in an ORB, Application server, or transaction server container. Invoking a method in this interface checks operation that are attempted after the user authenticates.","In one embodiment, four types of authentication mechanisms are provided. PKI verification provides the framework with the ability to participate in a single sign on arrangement with a PKI environment. To invoke such verification, an object or method passes the name of the user, a digitally signed version of their name, and the symbol PKI_VERIFICATION as parameter values. SSL-only verification is like weak verification, discussed below, in that the user name and password are passed as parameters. It simply informs the framework that an SSL connection is being used to send information to and from the interface. Certificate-based SSL verification is like PKI verification in that the name of the user is passed in one parameter and their SSL certificate is passed in another parameter. The certificate is then validated with the CA of the SSL certificate (either Verisign, Cylink, or Entrust). Weak verification passes a name and password as parameters and provides relatively low security.","Each data parameter is provided as a mutable type, e.g., a byte array, so that the data within it can be deleted once it is used. A checkVerification( ) method returns true if the user is still authenticated and has not been revoked from the environment. A first checkGuard( ) method checks to see if the user has access to a specific asset (either at the type level or the instance level) given a specific permission. A second checkGuard( ) is the same as the first except that the variable parameter allows the framework to accept extra data to further scrutinize the access check. For example, an application component may want to verify that a user not only has read permission to sales data but that they only have access to the Northeast sales region and not any other. In this case the application component can pass a value that is effectively a SQL where clause or an XML document which describes the SQL where clause. A getName( ) method returns the authenticated users DN. This can be used for further checking or for personalization purposes.","For purposes of facilitating use of the AssetGuardian interface, all assets within the framework are contained within an organizational hierarchy. The framework composes and manages organization objects as X.500 organization objects. Within the organizational definitions there are users, roles, permissions, security labels, and security preferences. The entire framework also has an audit trail, which is not bound, at an organizational level.","Based upon organizational hierarchy roles, permissions, resultant security labels, preferences, and assets exist at nodes within the tree. Assets themselves are hierarchical structures in that they can represent complex types (such as containers, databases, database tables, etc.). Each asset can have its own security label and each label can be assigned a level. The security framework provides a LabelComparator interface and implementation that provides for the interpretation of the level of a security label as it is a applied to one or more assets.","The security provider interface allows the framework to dynamically load an implementation that supports a Public Key Infrastructure vendor. PKI vendors support encryption, decryption, digital signature, and signature verification. They also provide key management, certificate issuance and management, as well as user authentication for single sign on.","The interface supports S\/MIME and non-S\/MIME security operations as well as the management of security recipients. Recipients in a security context are those persons who have a public X.509 encryption certificate and can have data of any sort encrypted specifically for them, Operational the interface and its implementation manage a stack of recipients, which is pushed before an operation occurs. When recipients are defined they can have data encrypted for them. In the case of a signing operation the user who has a connection to the PKI and managed through the connect method in this interface has their private signing certificate used.","To apply access controls to transportable applications, in one specific embodiment, the following processes are used. A transportable application is created as otherwise described in this document. The transportable application is defined as an asset having an asset identifier that is obtained by calling a method of the java.security package. One or more access control definitions (or \u201clabels\u201d) are created by the author using the \u201cmakeAccessControlLabelModel( )\u201d method of the java.security package. Each access control definition identifies read, write, and update permissions. Each recipient has his or her own access control definition that defines one or more limited permissions. Thus, the intersection of the transportable application access control definition and the recipient access control definition indicates whether a particular recipient can access an application.","At the time a recipient attempts to open or read a transportable application that is secured, the recipient is first prompted to log in to the system. The access control labels are checked to identify the recipient's individualized permissions. In one embodiment, a checkAsset method of the Asset Guardian interface is used. Access is denied when permission is not allowed.","Access controls specifically applicable to database access are now described. In general, in one embodiment, access to database  is restricted and is based on the role-based permissions provided by the security framework for different object types. A Java class encapsulates information needed to carry out an access control request or verification, including session identifier, user name, action type, and object type. This information is used when calling an authentication API of the security framework.","Further, classes and methods responsible for access to containers and folders, database queries or row selections, inserts, updates, and deletions are configured to carry out access control verification on the objects that are the subject of such operations, before carrying out such operations. Carrying out access control verification refers to calling a method of the security framework that can determine whether a particular user is authorized to access a particular named object or asset. Each such class and method is provided with methods that can check for access authorization and generate exceptions if access is denied.","In conjunction with access control each asset can have encryption and digital signature attributes applied so that transactions based against the asset can be encrypted and or digitally signed. For example, when a user is interacting with a transportable application, each time that a client  generates a network request that includes data for a field of a building block, the client can digitally sign the request. Upon receiving the request, application server  can verify the signature before the request is processed. In one embodiment, each HTTP request that is generated by a client and that includes field data relating to a transportable application, page or building block is digitally signed. Each HTTP request that is received at an application server  is checked to determine if the request contains a digital signature. If so, the digital signature is extracted from the request and verified. If verification is successful, the request is redirected to a service routine, i.e., processed normally by the application server. In one alternative, information collected in the extraction process may be logged or stored in an audit trail.","Extracting digital signatures from an HTTP request stream may be implemented using software systems that are commercially available from PrivateWire. Verifying digital signatures that have been extracted may be implemented using software systems that are commercially available from Entrust, Inc.","Access controls may be modified as a result of events that are processed using the event handling system described herein. For example, an action associated with an event may be to modify an access control of a transportable application to become either broader or stricter in some way, or to enable a new recipient to have access to the transportable application.","In one embodiment, instance-scoped role-based access control is provided for transportable application. Such control is \u201cinstance-scoped\u201d because access controls are determined and can be defined uniquely for each user for each instance of a transportable application. Such a mechanism provides much more detailed access control, as compared to class-scoped access control using J2EE mechanisms, which provides only method-level checking per user per transportable application class. In one embodiment, when a transportable application is authored, or after the transportable application becomes active, an author can add, modify or delete users from access controls specified for the transportable application and pages within the transportable application.","Access to JSPs and servlets in the system is controlled through membership of users in roles. Roles may be \u201cpage-scoped,\u201d that is, defined at the page level within transportable application. Thus, access to instances of assets such as building blocks and associated rule descriptors are determined based on the role that a user is assigned to for the page instance on which the building block and rule descriptor instances are created.","In another embodiment, directory auto-registration is provided. When the system has been configured with knowledge of the existence and location of a directory server, a user may log in to the system using a user name, password or other credentials that are stored in the directory server. After locating such credentials in the directory server at the time of the user's first login, the system automatically registers those credentials in database . Thereafter, the user can log in to the system without reference to the directory server. In another feature, bulk user registration may be carried out by an administrator, by loading a formatted file that contains the user information. Self-registration is also facilitated.","In one embodiment, all message identifiers that are sent from the system to a client are encrypted. In another embodiment, the encryption process associates each message identifier with a processor cluster or database cluster that is responsible for processing the message. Using such a process, a message identifier in a URL that is meant for one cluster cannot be processed by another cluster. This is beneficial in the event that a malicious user redirects the URL toward another cluster, e.g., by changing the URL to point to the new cluster and keeping the same arguments, and the URL and the message it carries are decrypted at the destination. In one encryption approach, a database identifier or cluster identifier is embedded in the message in order to provide more security.","In one past approach, the format for a message ID is <prefix>_<encrypted message id>, where \u201cprefix\u201d is a number that determines the seed for the TwoFish encryption algorithm. In one sub-approach, the seed value may be hard-coded in program source code for the functions that carry out the encryption process. A disadvantage of this approach is that such code is installed on all client installations, so that all clients use the same seed, or each new client installation will need a new software release. Moreover, a message destined for one client could be redirected to another client's cluster, and because the system decrypts all messages that are received by the cluster a security vulnerability exists. In this context, a \u201cclient installation\u201d refers to a particular instance of system  that is licensed to or used by an enterprise, organization or similar entity.","Therefore, in another approach, different seeds are used for encryption for different client installations, and each incoming message is checked to see if it is meant for the cluster. If not, it is discarded. Each client is assigned a database ID, which is unique. A global identifier replaces the message ID.","Further, in an improved approach, each client uses a different seed that is determined by the database ID of the cluster and is derived from a base seed by addition of the database ID to the base seed. Since the seed consists of 16 bytes, a long time interval must elapse before any two clients can get the same seed.","The prefix in the message contains the database ID. The database ID is also present in the encrypted message ID in encrypted form. Thus, if a malicious user attempts to change the database ID to another cluster in the hope that it would be a valid URL, it is most unlikely that the decrypted message will resolve to a valid global identifier. Even if it does, the database ID component is highly unlikely to match the prefix, and therefore the system would discard the message if the two do not match.","In this approach, all incoming messages pass through a sanity check mechanism wherein the system initially compares the prefix of the message with the database ID of the originating client installation. If they do not match the message is discarded. If they match, the message identifier is decrypted. The message identifier is a global identifier, and since the global identifier contains the database identifier, the database identifier is compared to the prefix and if they do not match, the message is discarded.","In another feature of this approach, to accommodate changes in the encryption algorithm or methodology itself, a version value is associated with each specific encryption methodology. Each client may use its own encryption algorithm, and the encryption version value is part of the prefix. In one embodiment, the format for the new prefix is EV:DBId, where \u201cEV\u201d designates the encryption version and \u201cDBID\u201d is the database identifier value. The prefix may be transformed, e.g., by bit shifting, so that the component values EV and DBID are not easily visible.","In one embodiment, the system described herein is a distributed system in which multiple particular installations of the system can share transportable applications and associated data. For example, different companies could each set up the system and collaborate by sharing transportable applications and associated data.","In general, transportable application data is replicated at each of the participating sites or installations, enabling the user to receive a consolidated view of interaction with all sites. A user logs in to a portal home page and receives a view of all transportable applications directed to that user, from any originating system. Each transportable application is authored and updated only at one site. All portal operations are performed on the home site of the user. Portal operations include viewing group lists, group archives, and folder; and performing administrative functions such as assigning transportable applications to folders. Operations other than portal operations are performed on the home site of the respective object. Users can author transportable applications at any site.","Trust relationships are established among sites that participate in replication, using elements of the security framework described herein. Each user is designated to have a home site and all users are denoted as local or remote for a particular site. Data for a particular user is always replicated at the home site, enabling the user to obtain a consolidated, global view of all activity at the home site at all times. Accordingly, a user may log in once to a home site and need not log in multiple times to different sites or clusters.","In operation, a user logs in to the system. The user is transparently redirected to an application server  at a site that has home information about the user. At the home site, the user is presented with a personalized portal view appropriate for the user. The Personal Messages page and Group Archive pages present a list of all transportable applications involving the user, including those that are remotely located.","When a link of a particular transportable application is selected, the user is re-directed to the appropriate site, and information from that site is displayed in a new window. Authentication to the new site is carried out by passing a digital certificate with the user's security credentials to the new site, using the security framework, so that multiple logins are not required. If the selected transportable application is remotely located, the user can view and respond to it. The remote site recognizes that the user is a remote user and configures links for buttons in the user interface to reference the user home site. For example, the New Message link identifies a URL in the home site rather than the remote site.","A user may also author a new transportable application based on a template that is owned by a remotely located group. When such a template is selected, a new window is opened from the remote site and the user is re-directed to the remote home location of the group that owns the template. The new transportable application is authored at the remote site, i.e., its data is stored at a database of the remote site.","All folders of the user and all administrative tasks relating to the folders are carried out at the user's home site server.","Redirection, for the foregoing processes, is achieved by determining a URL of the remote site to which redirection is occurring. Accordingly, all sites that are cooperating as described above provide access to one another through a private TCP port in their firewalls, or through a security mechanism of the security framework.","The replicated data includes certain metadata about all transportable applications and groups that relate to the user. For example, for transportable applications that involve a user and are remotely stored, a local or home site receives metadata including subject, status, author name, updated timestamps, timestamp for the last time the user read the transportable application, message attributes, etc., Such information is retrieved from rows in a transportable application table of a database of the remote site. Metadata about groups is also replicated, including group hierarchy and membership data, group folders and content data, etc.","In one embodiment, objects that are replicated across sites, or across clusters of servers at a collocated location that implement different sites, implement a Replicatable interface. A replication manager receives a Replicatable interface as an argument and transports it to one or more sites that need the object. The Replicatable interface includes an export data method, apply data method, and methods to retrieve header information for messages to be sent. The export data method outputs an array of replication data objects, each corresponding to a single destination site. Each replication data object serves as a container for the transport of objects across sites and encapsulates state and type information.","The export data method is used at the home or master site of a replication event to export a version of the state of an object for reconstruction on a remote site. The apply data method is used by an empty Replicatable object to import a state from the input object. This allows a Replicatable object to be reconstructed on a remote site of a replication transaction with the state tailored to that remote site. A replication status object may be used to provide acknowledgment of replication messages. Replication is carried out as data is updated. Sites communicate using XML messages that are sent over HTTPS.","1.10 System Administration Processes","System administration processes may include a reporting function that presents information that analyzes interaction of recipients with transportable applications. Such statistical data may be retrieved by or available to a server administrator, authors of transportable applications, etc.","1.11 Using Transportable Applications in Business Processes and Workflow","In an embodiment, one or more transportable applications may be used to carry out complex business processes and workflows. In one specific embodiment, a process template designer mechanism enables a business process expert to create and publish templates of a process framework. A template for a process framework can include a general process description, process-specific fields (e.g., process status), templates of component tasks for transportable applications, a Process Style comprising an association of fonts, colors, images, layout, text that are applied to all building blocks and tasks of transportable applications that make up the process; required, preordered starter-tasks, and process-specific properties (e.g., notifications, access controls). The process template serves as a guide for an author's later design of a specific instance of a process. On-the-fly editing of templates and authoring of a process transportable application can also be initiated from within the template designer mechanism.","In one approach for implementation of the foregoing, a process designer uses a Process Composer software tool to create a process template. Thereafter, the process template may be retrieved and used during the authoring process to construct a process transportable application and send it out to a list of recipients.","The process composer enables a user to identify, select, and include tasks in a template for a process that has one or more transportable applications. Some such tasks may be designated as starter tasks. A starter task is included when an author begins to compose a process transportable application. A starter task may or may not be deemed required by the process template creator. A template also may include one or more \u201caddable\u201d tasks. An addable task is one that can be added to the process transportable application after it has been sent to recipients.","In one embodiment, a process template comprises a Java class that stores information about a process. The process template class determines the types of tasks that can be entered after a transportable application is sent, and also provides appropriate process creation information at the time that an author creates a transportable application based on the template.","The template class stores information identifying the types of tasks that are allowed and which tasks are starter tasks. For starter tasks, the template class stores whether or not each task is a required task. Additionally, some meta information about the overall process is stored, e.g., a process name, process description, and process style. In one specific embodiment, a process template class has the following member variables and corresponding accessor methods:",{"@attributes":{"id":"p-0642","num":"0688"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private String name;"]},{"entry":[{},"private ObjectID authorID;"]},{"entry":[{},"private String description;"]},{"entry":[{},"private Vector styleIDs;"]},{"entry":[{},"private boolean updateStyle;"]},{"entry":[{},"private ObjectID templateID;"]},{"entry":[{},"\u2003private\u2003Vector\u2003introFields;\u2003\u2003\/\/\u2003vector of IntroField"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"objects"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private Vector requiredTasks; \/\/ vector of ProcessTask"]},{"entry":[{},"objects"]},{"entry":[{},"private Vector allowedTasks;\u2003\/\/ vector of ProcessTask"]},{"entry":[{},"objects"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The process template class may also have the following methods:",{"@attributes":{"id":"p-0644","num":"0690"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void ProcessTemplate()"]},{"entry":[{},"public void store (DBTrans transaction)"]},{"entry":[{},"public void remove (DBTrans transaction)"]},{"entry":[{},"public static void remove (DBTrans transaction, ObjectID"]},{"entry":[{},"templateID)"]},{"entry":[{},"public static ProcessTemplate getTemplate(ObjectID"]},{"entry":[{},"templateID)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The ProcessTemplate class may have an empty constructor such that a Process Servlet that creates the ProcessTemplate class is responsible to set the fields appropriately. For example, the servlet parses the HTTP Request and sets the values on the ProcessTemplate object.","The store( ) method takes in a transaction value, which can be null, and writes the object to the database. The method calls another method in a helper class to transform the member variables into XML format. The remove( ) method deletes the ProcessTemplate from the database. The transaction value can be null, in which case it constructs its own transaction and executes it. The static method removes the given template from the database. The getTemplate( ) method retrieves the ProcessTemplate with the given template identifier and passes it back to the calling method. It uses a helper class to construct the ProcessTemplate object from the XML information in the database.","An IntroField class represents, at an abstract level, any additional introduction field information the author wishes to provide, and the default value for this field and what kind of graphical user interface widget is used to display the field, e.g., drop-down, radio button, text area. It has the following member variables:",{"@attributes":{"id":"p-0648","num":"0694"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private String name;"]},{"entry":[{},"private String defaultValue;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"private String inputType;","\u2002\/\/html type of input e.g. text,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"textarea, etc.; use constants"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"private Vector sizeInfo;","\/\/ vector of sizes we want for"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"the html components like width"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"private String options = \u201c\u201d;","\/\/additional options"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private Vector choices;","\/\/ String Vector of choices for"]},{"entry":[{},"drop down"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private int position;","\/\/position on authoring page"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A ProcessTask class represents a task from the process point of view and includes a task ID value and information about the task, e.g., whether it is a starter task or an allowed task. The ProcessTask object contains the following member variables and appropriate accessor methods:",{"@attributes":{"id":"p-0650","num":"0696"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private ObjectID taskID;"]},{"entry":[{},"private int position;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"private String name;","\/\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private boolean isStarter = false;"]},{"entry":[{},"private boolean isRequired = false;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A ProcessXMLUtils helper class aids in the writing and retrieval of the process XML to and from the database. It will implement an interface so that it can be passed into the XML parser to provide the appropriate call back routines. Further, the helper class includes the methods getXmlString and ProcessTemplate:",{"@attributes":{"id":"p-0652","num":"0698"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static String getXmlString (ProcessTemplate)"]},{"entry":[{},"public static ProcessTemplate getProcessTemplate (String"]},{"entry":[{},"xmlString)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The getXmlString method receives a ProcessTemplate object and returns an XML representation of it, including all its member variables. The ProcessTemplate method receives a string of XML text and returns a ProcessTemplate object.","In one specific embodiment, each process template is stored in database  in a Process Template table that contains the following columns:",{"@attributes":{"id":"p-0655","num":"0701"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Null?","Type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TemplateID","Not Null","Number(19)"]},{"entry":[{},"AuthorID","Not Null","Number(19)"]},{"entry":[{},"Position","Not Null","Number(3)"]},{"entry":[{},"XML","Not Null","VARCHAR2(1024)"]},{"entry":[{},"DateCreated","Not Null","Date"]},{"entry":[{},"DateModified","Not Null","Date"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"Database  also comprises a table that associates styles and tasks with the template so that the system can update them if any changes occur in the task template or the style. This table can be used by any object that requires a parent to child relationship, and needs to update an object that is using it. In one specific embodiment, the style association table comprises the following columns:",{"@attributes":{"id":"p-0657","num":"0703"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Null?","Type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ParentID","Not Null","Number(19)"]},{"entry":[{},"ParentType","Not Null","Number(4)"]},{"entry":[{},"ChildID","Not Null","Number(19)"]},{"entry":[{},"ChildType","Not Null","Number(4)"]},{"entry":[{},"Update","Not Null","Char(1)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"Creating a Process Template involves selecting one or more tasks that can be used, certain attribute values for the tasks, and related process information that applies to all processes, such as the name and description of the process. In one specific embodiment, a servlet (\u201cProcessTemplateServlet\u201d) is used to save a process template to database . The Process Template Servlet has action parameters such as save, open, add, etc. Each action type will have a corresponding method to perform the appropriate action. A form submitted to the servlet includes parameter values that can be used to construct a process template object. In general, the servlet extracts parameters from the HTTP request that submits the form to the servlet, and constructs a process template object from them that can be written to the database .","The servlet then forwards a template creation request to a process template designer server page. In an embodiment, a Java Server Page (JSP) is used. The process template designer JSP iterates over the parameters from the form and displays them correctly on the page. The JSP also implements the submissions to the ProcessTemplateServlet to move up, move down, delete, insert tasks, and carry out any other defined operations.","The introductory fields may include various types of inputs and ordering. The XML syntax can be extended to incorporate other information, e.g. specifying a maximum number of choices for checkboxes.","Process templates may include rules that control, for example, issuance of notifications in responses to changes to tasks in the process. In one approach, the rules are represented as a vector of objects that are stored in association with the ProcessTemplate object. Additionally, task level rules can be added to a task using the process composer, which stores the task-level rules as a vector of objects stored in association with a ProcessTask object.","In general, in one aspect, the present invention is directed to multiple-part electronic messages. Each multiple-part electronic message comprises a plurality of parts that are associated as part of a single message. In one embodiment, a multiple-part electronic message is distributed, viewed and updated as part of a group collaboration application system. In this embodiment, one or more multiple-part electronic messages may be configured to implement business processes such as information review, planning, forecasting, etc. In another embodiment, multiple-part electronic messages are transported as part of a client-server electronic communication system. For example, the multiple-part messages may be created using an e-mail client and communicated using an e-mail transport server or related infrastructure. Thus, embodiments do not require proprietary equipment or special modifications for transport within an existing or \u201clegacy\u201d communication system.","Embodiments are not limited to e-mail as a communication media. The multiple-part messages may be communicated using other data communication mechanisms such as HTTP. Embodiments also are not limited to display at conventional e-mail clients. Multiple-part messages may be displayed using a personal digital assistant, wireless communication device, Internet appliance, etc.",{"@attributes":{"id":"p-0664","num":"0710"},"figref":"FIG. 21A"},"According to this embodiment, a user interface display window  is generated by an e-mail processing application. The user interface display window  includes a toolbar , a message header display pane , and a message body display pane . Toolbar  displays one or more buttons, links or other user interface widgets for selecting commands, options or tools of the e-mail processing application. Conventional commands such as File, Edit, View, Insert, Format, Tools, Actions, and Help may be provided for carrying out operations with respect to a message that is displayed in window .","Toolbar  also may include one or more buttons, links, or other user interface widgets for taking messaging actions with respect to the displayed message. For example, Toolbar  may provide Reply, Reply To All, and Forward options. Selecting the Reply option instructs the e-mail processing application to generate a new message in reply to the currently displayed message, directed only to the sender of the message. Selecting the Reply To All option instructs the e-mail processing application to generate a new message in reply to the currently displayed message, directed to the sender of the message and all recipients of the message. Selecting the Forward option instructs the e-mail processing application to generate a new message that is directed to a new recipient and that includes a copy of the currently displayed message. In other embodiments described herein, new messages are not generated, and reply content or forwarded content is consolidated in the original message.","The message header display pane  displays message header information. For example, the message header display pane  may display the name of the sender of the message, the names of recipients, the subject of the message, the date that the message was sent, etc.","Message body display pane  comprises one or more message pages , , , , etc. In , for purposes of illustrating a simple example, four message pages , , ,  are shown. However, in other embodiments, a message may comprise any number of message pages and message body display pane  may include any number of message pages.","Each message page comprises a page navigation region and a page body. For example, a first message page  comprises a page navigation region  and a page body .","In one embodiment, each page navigation region is graphically displayed such that the page navigation region is a contiguous part and integral with its associated page body. Further, each page navigation region is graphically displayed such that every page navigation region is selectable, using a graphical cursor that is movable using pointing device such as a mouse, whenever any particular page body is displayed.","For example, in the embodiment of , message pages , , ,  are displayed as simulated overlays wherein the first message page  appears to be on top of a stack of message pages. Although message page  is the top message page, the page navigation regions of all other message pages , , ,  are visible adjacent to message page  and are selectable at any time during which message page  is displayed.","When a particular page navigation region is selected, the message page associated with the selected page navigation region becomes fully visible. For example, if the Bookings Pie Chart message page  is selected, it becomes fully visible and appears to be the top page in a stack of pages. The message body  of message page  becomes hidden, although its page navigation region  remains visible. Processing operations to carry out such functions may be executed by a server that is communicatively coupled with a client that is displaying the message window , according to processes that are described further herein.","Each page navigation region may carry a label that identifies the contents of the message page that is associated with the page navigation region. For example, in , the message displayed in window  generally relates to a First Quarter Financial Summary. A first message page  presents Profit & Loss information, as indicated by a \u201cProfit & Loss\u201d label in the page navigation region  of the first message page. A second message page is labeled \u201cBalance Sheet,\u201d and other message pages may have any other desired labels. Such labels may comprise text, numeric values, graphic images, icons, hyperlinks, or any other indicator element or other information.","The page navigation regions may be color-coded, for example, according to a topical key, an order of priority, and industry-standard color arrangement, etc.","For purposes of illustrating an example, in , the page navigation regions are shown as arranged along a top edge of a message page. However, the page navigation regions may be arranged along a bottom edge, left edge, right edge, or other side edge.","If a message has a plurality of message pages, and message display window  has insufficient space to display all the message navigation regions associated with the message pages in a row, then the message body pane  may comprise an indicator that additional message pages and navigation regions are available for display and selection. For example, message body pane  can display an arrow, dot, or other icon adjacent to the right-most message navigation region. Selection of the arrow, dot, or other icon causes a server or other element to generate message body pane  such that one or more of the other message navigation regions are displayed, and such that previously visible message navigation regions scroll or slide to the side, up or down to make room for the newly displayed message navigation regions.","Using this configuration, an e-mail message is displayed in a structured fashion. Its content may be organized so that one set of related information is collected in a particular page, and another set of related information is collected in another page. Specific information is accessible simply by selecting a navigation region that corresponds to the specific information. Extensive scrolling or searching for such specific information becomes unnecessary.",{"@attributes":{"id":"p-0678","num":"0724"},"figref":"FIG. 21B"},"In the embodiment of , message window  further includes a static content pane  that may display text notes, graphic images, banner advertisements, or any other desired static content. In one embodiment, data for static content pane  is obtained from the static content region of electronic media that associated with a group collaboration application.",{"@attributes":{"id":"p-0680","num":"0726"},"figref":"FIG. 22A"},"A message display window  is provided in the embodiment of . As in  and , message display window  may include a toolbar , a message header pane , and a message body display pane .","Optionally, in certain embodiments the message display window  also comprises a message toolbar  that provides command options for generating and working with messages that are displayed in the message body display pane . For example, in one specific embodiment, message toolbar  provides New, Forward, Note to Author, Note to All, View Recipients, Edit, and Notifications command options.","Message toolbar  may be implemented separate from toolbar  in embodiments that interoperate with unmodified e-mail processing applications. For example, in an embodiment that interoperates with Microsoft Outlook as an e-mail processing application, the toolbar  is generated by Microsoft Outlook and controls its functions, whereas message toolbar  is generated as part of a displayed message by a separate server. This arrangement enables use of the electronic media, group collaboration applications, and multi-page electronic messages disclosed herein without modification of the e-mail processing application. Alternatively, the electronic media, group collaboration applications, and multi-page electronic messages may be integral to the e-mail processing application, and the functions of toolbars ,  may be combined in a single toolbar.","Operation of functions of toolbar  are described further herein in connection with a description of a server structure that may be used to implement the processes described herein.","Selecting the New function from message toolbar  is a request to generate a new message that may contain one or more message pages. Selecting the Forward function is a request to forward the currently displayed message, including all message pages, to a new recipient. Selecting the Note to Author function is a request to create a static note that is visible only to the author of the currently displayed message when that author displays or re-displays the message. An example of such a note is action request  of .","Message window  of  further includes one or more message pages , , . Each message page has an associated message navigation region and a message page body. For example, message page  includes a navigation region  and a page body . In the embodiment of , each navigation region extends laterally from its associated page body, such as to the left of the page body. Alternatively, the navigation regions may extend to the right of the message body. Each navigation region is arranged so that it is continuously visible whenever a particular page body is displayed.","The page body may contain any desired text or graphics, or a combination thereof. In the example of , page body  includes a page title  and a text block . Additionally or alternatively, there may be other text, graphics, icons, images, hyperlinks to other resources, etc.","Page body  may also comprise one or more dynamic content regions that display dynamic content and are supported by one or more active application elements that are executed by a supporting server. In one specific embodiment, page body  comprises one or more application building blocks that have been selected from an application starter set or library. Each building block comprises a pre-defined, self-contained module of executable program instructions that can be linked together with other building blocks to form a complete executable application.","Typically, each building block performs a discrete function, such as group discussion; polling; interactive Web pages; file sharing; inline document viewing; table generation; rating generation; surveys; approval lists; schedules; images; image galleries; invitations; information fields; connections to external systems and applications; and others. When a page containing a building block is selected using its navigation region, a supporting server re-displays an image corresponding to the application with graphical elements relating to the selected building block. Such graphical elements may include headers, text, graphic images, radio buttons or other user input widgets, as appropriate for the function to which the building block relates.",{"@attributes":{"id":"p-0690","num":"0736"},"figref":"FIG. 22B"},"As in , the embodiment of  includes a message display window , toolbar , a message header pane , a message body display pane , a message toolbar  that provides command options, and one or more message pages , ,  each having an associated message navigation region and a message page body. Message display window  also comprises a dynamic content region  that contains dynamic information.","In the example of , the dynamic content region  is based on a comment building block that facilitates gathering comments from a plurality of members of the group. As members of the group receive the message shown in message display window , each member may select dynamic content region  and enter one or more comments. The entered comments are stored in a database of a supporting server. Whenever any other group member or other recipient receives the message, opens it, and views message page , the server obtains a then-current copy of the dynamic content, such as all comments entered to date, and displays it as part of dynamic content region .","Dynamic content region  operates as a discrete window within message page . If the content associated with the dynamic content region  overflows the dynamic content region  when it is displayed, a user may select a navigation tool  to view additional content.","Likewise, if not all the content associated with a particular message page will fit in the message page when it is displayed, the message page may include an indication that other content can be obtained. For example, in , message page  has a downwardly extending navigation region  that displays a navigation tool . By selecting appropriate icons within the navigation tool , a user can instruct a supporting server to retrieve and display different parts or additional parts of a message page.","In one embodiment, if a message has a plurality of message pages, additional page navigation regions are displayed generally in a column arranged on the left edge or right edge of the message display pane. In embodiments in which the elements in the message display window are rendered based on source code in HTML, the message display window has potentially infinite length. In these embodiments, the message display window may include any number of page navigation regions. If not all the message navigation regions are viewable in on a screen display, the user can scroll the screen display to view further page navigation regions.","Alternatively, to remove the need for scrolling, there may be a pre-defined maximum number of pages that appear in a message display window at any one time.",{"@attributes":{"id":"p-0697","num":"0743"},"figref":"FIG. 22C"},"As in , the embodiment of  includes a message display window , toolbar , a message header pane , a message body display pane , a message toolbar  that provides command options, and one or more message pages , ,  each having an associated message navigation region and a message page body. Message display window  also comprises a \u201cmore pages\u201d navigation region , which is present when a message has a plurality of message pages, and message display window  has insufficient space to display all the message navigation regions associated with the message pages in a row.","Selection of the \u201cmore pages\u201d navigation region  causes the server or other element to re-generate message body pane  such that one or more of the other message navigation regions are displayed, and such that previously visible message navigation regions scroll or slide to the side, up or down to make room for the newly displayed message navigation regions. Such re-generation may result in removing the \u201cmore pages\u201d navigation region  from the display.","The \u201cmore pages\u201d navigation region  may comprise an indicator that additional message pages and navigation regions are available for display and selection. For example, the region can display an arrow, dot, or other icon adjacent to the right-most message navigation region.",{"@attributes":{"id":"p-0701","num":"0747"},"figref":"FIG. 22D"},"The embodiment of  includes a message display window , toolbar , a message header pane , a message body display pane , and message toolbar  that provides command options. One or more message pages , ,  are provided, each having an associated message navigation region A, A, A, and a message page body B, B, B. Each of the message pages , ,  is displayed in an overlay manner such that one of the message pages, e.g., message page , appears to be the topmost message page, and such that other message pages , , etc., appear to be stacked beneath the topmost message page.","In this arrangement, each message navigation region A, A, A is continuously visible and may be selected at any time. When a message navigation region is selected, the corresponding message page is internally designated as the topmost message page, and the message body display pane  is re-generated such that the new topmost message page appears on top and its contents are visible.","In , for purposes of illustrating a simple example, four (4) message pages are shown. However, embodiments may comprise any number of message pages.","According to one embodiment, the system and processes described herein facilitate linking and aggregating messages, such as transportable applications.",{"@attributes":{"id":"p-0706","num":"0752"},"figref":["FIG. 20","FIG. 20"],"b":["1","1","1","3","1","10","4","12","5","1","3","7","3","2050","10","4","11","12"]},"The interconnection between messages enables serialized and parallel decision making within a messaging system. Further, since the URL is not dependent upon the position within the messaging system, such as within a folder or on a web page, the position of the message may be changed without destroying the link between messages. For example, message  may be moved from Folder  to Folder  and still maintain a link from Web page .","When two or more messages are linked in the foregoing manner, they form a message web. In one embodiment, message webs are networks of messages that are related by a topic or activity. Such networks aggregate knowledge that is generated within a context of the activity. For example, message webs linked over a network can provide information that does not require significant webmaster interaction or detailed internal system knowledge. Moreover, a current status of content or other attributes may be captured within the message web. This allows the health or age of the content to be communicated to a system administrator or other interested individual. Accordingly, the most current or active information can be highlighted. The content of messages within a message web may be involved in the same context and may include content modification, process interaction, choice making, and activity launching among a group or participants.","The links may be configured to be unidirectional or bi-directional. For a unidirectional link up, there is not a corresponding link at the destination back to the source location of the unidirectional link. In a bi-directional link up, there may be a corresponding link at the destination back to the source location of link creation.",{"@attributes":{"id":"p-0710","num":"0756"},"figref":"FIG. 23A"},"In block , the process of  begins when a recipient, author or other user of a transportable application wishes to link one transportable application to another. In block  the user selects a Link function button within the message. The Link button may be displayed, for example, as part of command buttons  of . In response, in block  the user is prompted to select a linking method. The prompt of block  may be a dialog box or wizard. Block  also may involve adding a List building block to the transportable application, wherein items in the list of the building block comprise references to linked messages. Thus, the List building block serves as a mechanism for maintaining links to other messages.","In one method., the user may copy the URL of another message to the clipboard provided by the operating system, in block . Control returns to block , and the user then pastes the copied URL to a link field that is provided in the prompt of block , as shown by block . Alternatively, the user may select one or more messages from a personal folder or list, or from a group folder or list, as shown by block . In another alternative, the user may search for messages and select the right ones, as indicated by block ; this may involve opening another window that has a personal folder or list of messages. In another alternative, the user may drag a message from another context into the current message or into the dialog box or wizard, as in block .","After selecting a linking method and a linked method, in block , the user is prompted to change one or more link attributes, as appropriate. Such attributes may include cross-linking, link labels, link description, access control, etc.","In block , definitions of messages are modified to add links. In one embodiment, block  involves updating the List building block of the transportable application to add a reference to the linked message. As a result, the selected messages become linked, at block . A user who opens the transportable application can view the List building block and link to another message by selecting a message that is in the list.",{"@attributes":{"id":"p-0715","num":"0761"},"figref":"FIG. 23B","b":"202"},"In block , a workflow process generates a new message that is related to the current message. For example, block  may comprise a first transportable application generating another transportable application in response to an event that is generated by user interaction with a page or building block. Alternatively, in block , a workflow or user event determines that a link is needed among two or more messages.","In block , optionally, the user may be prompted to indicate whether the messages should be linked. The prompt may take the form of requesting confirmation of a proposed link of messages. If the user indicates that the messages should not be linked, then in block , no link is created. Alternatively, if the link is confirmed, then in block  and block  the user is optionally prompted to modify one or more link attributes, as in block  of . Control then passes to block  and block , as in .","Messages may be linked based on the message's content or context. For example, a name, electronic mail address, a group, or company name, may be used to recognize and match a message with another message on an associated page or in an associated folder, In another example, a message that is named similarly to another message with the same or similar recipient list may be tied together to form a Message Web.",{"@attributes":{"id":"p-0719","num":"0765"},"figref":"FIG. 23C"},"In block , a change occurs to one or more objects to which automatic links can be made. For example, a building block or page of a transportable application is deleted, modified, renamed, or created. In block , block , and block , branch points are carried out in accordance with the kind of change that occurred. In block , if the object is deleted, then in block , links are removed from messages and from the list of links in the message. For example, the list building block of the message is updated to delete links. In block , if the object is edited or renamed, then the list of automatically generated links is reviewed. For each link that is identified in the list, the link is followed to the linked message. Any link in the list of linked messages that contains the old name is updated with the new name, as shown by block . If a new object is created, as in block , then in block , its content is marked as changed. A background task or process is scheduled and dispatched to look for references to the new object.","As a result, affected links are changed, as shown by block . If all the tests of block , block , and block  are negative, then any change that has occurred is not relevant to linking, so no action is taken, as shown in block .",{"@attributes":{"id":"p-0722","num":"0768"},"figref":"FIG. 23D","b":["2354","2356"]},"In block , if an e-mail address or user name is identified, a link is created to instantiate an e-mail to the user. For example, an HTML \u201cmailto:\u201d link may be created in the List building block that references the user. In block , if an organization name is identified, a link to a Web page for that organization is created, e.g., in the List building block. In block , if a message title of another message or transportable application that is known in the system is identified, then a link to that message is created, e.g., in the list building block. In block , if other linkable content is identified, then an appropriate link to that content is created in the list. An example of other linkable content may be a digital song, an image, etc. In block , the list of links is updated with any link that has been created in the preceding steps.",{"@attributes":{"id":"p-0724","num":"0770"},"figref":["FIG. 23E","FIG. 23E"]},"In block , a user finishes a step in a task that is defined as a message. For example, a user completes providing input to a building block of a transportable application. In response, in block , the input is analyzed and the user is presented with a list of other messages that are likely to following the completed step, ordered by context-determined relevance. For example, if the user has completed rating a job applicant in a poll building block of a human resources transportable application, the system determines that a salary offer application is likely to follow next. Therefore, the user is presented with the salary offer application in the list. Alternatively, a new message is created by the user, or automatically, while the user is in the context of another message.","In either case, in block , the user indicates whether to link the new message with the original message, as by selecting a user interface button. If the user requests linking, as tested in block , then automatic message linking is carried out, as described herein in connection with . If no linking is requested, then none is carried out, as shown by block .","When a user traverses a hyperlink from within e-mail messages to a URL or Web document, according to one embodiment, the Web page or other HTML content is displayed within the e-mail client window, as in . The content may comprise on-page navigations controls (Home, Back, Forward), since browser controls are not provided in conventional e-mail clients.",{"@attributes":{"id":"p-0728","num":"0774"},"figref":"FIG. 24","b":["2402","2404","2404","2406"]},"In one implementation, block  involves displaying a Home button, which causes the original page of the dynamic portion of the message to be shown, a Back button, and a Forward button.  illustrates examples of such buttons. The Home button is implemented as a self-referencing URL to the dynamic content portion of the transportable application. The Back and Forward buttons are implemented as JavaScript elements such that when each button is selected, JavaScript is invoked to carry out the functions. The JavaScript elements link back to application server  to determine what URL to load, based on a link traversal history that is maintained by that server. As shown in block , when a link is traversed, application server  is updated with the current and next links in a link history that is associated with the current transportable application. In block , a next page of the transportable application is displayed. Control flows back to block  to render that page in the same manner.","In this configuration, browser controls may be used to navigate links within the messaging system. Thus, a user can easily navigate between a current message and another message, and then return to the current message. This navigation may occur within the same window.",{"@attributes":{"id":"p-0731","num":"0777"},"figref":["FIG. 25A","FIG. 25A"],"b":["2501","2510","2512","2514","2510","2501","2502","2503","2502","2503","2504","2506","2510","2504","2506","2510","2504","2506","2501","2503"]},"In this configuration, linked messages may be navigated between multiple applications. For example, a user may navigate within an application between messages or navigate between applications and then access multiple messages within another application. This allows aggregation of messages to be performed within a single application or folder and also amongst other folders.",{"@attributes":{"id":"p-0733","num":"0779"},"figref":"FIG. 25B","b":["2520","2522","2524"]},"If not, then the current message web is threaded integrated into a ring structure with other message webs, in a position between the head and tail of the ring, in block . In particular, in one embodiment, the Previous link of the current message web is set to the value of the Previous link of the home message of the tail message of the ring. The Next link of the home message of the tail message web of the ring is set to point to the home message of the current message web. The Next link of the home message of the current message web is set to the home message of the head message of the ring. The Previous link of that message is set to point to the new message web. As a result, as shown by block , the message web ring's head and tail are updated to include the new message web, and the ring is therefore updated, as indicated by block .",{"@attributes":{"id":"p-0735","num":"0781"},"figref":"FIG. 26A"},"In particular, a list of recipients of the message may be changed between linked messages, such that a first set of recipients can be defined in one message and another set of recipients can be defined in another message. For example, in , in a first message  the recipients are Bob, Carol, and Dave. However, in message , which is linked to message , the recipients are defined as everyone in message  plus Harry. Thus, a recipient list may be shared between messages. Additionally, messages may be configured to define business logic, other roles having the same sharing relationship between messages. The link between message  and message  demonstrates one form of \u201cside-bar\u201d or private conversation that could occur within a message web in which the link between messages is unidirectional.",{"@attributes":{"id":"p-0737","num":"0783"},"figref":"FIG. 26B","b":["2605","2601","2601","2601"]},"In block , the system determines if the list generated in block  contains a reference to another list. If so, in block  the current recipient list is expanded to include all recipients who are named in the referenced list, and duplicates are removed. In block , the system determines if the recipient list generated in block  contains a reference to an individual. If so, then the individual is added to the current recipient list, and duplicates are removed. In block , the system determines if the recipient list generated in block  includes instructions to exclude a user or list. If so, then in block , the referenced list is expanded, and its members are removed from the list generated in block . If the list generated in block  has more instructions, then they are processed in similar manner. As a result, a new recipient list is generated, as indicated in block .",{"@attributes":{"id":"p-0739","num":"0785"},"figref":"FIG. 27A"},"In the example of , a first message  is linked by link  to message . The Meeting Date value of message  is linked to a field \u201cSchedule.Choice.Best\u201d of message , so that changes to that field are propagated to first message . Message  is also linked to message  and sends the same field value to it. Thus, changes in message  flow along links ,  to other messages in a message web.",{"@attributes":{"id":"p-0741","num":"0787"},"figref":"FIG. 27B"},"In block , the system determines that a field of a transportable application has been updated. For example, user input results in a change to a data entry field of a building block. In block , the system determines whether any other system objects, such as data objects, fields, or building blocks have subscribed to the field that has changed. If so, then the subscribers are marked as needing to be refreshed, in block . For every subscriber needing to be refreshed, block , control is passed to block  to mark the subscriber field as no longer needing to be refreshed. The field is then interpreted starting at block . When all subscriber fields have been refreshed, control passes to block  in which the process of  is complete.","In block , a field definition and value within a message are interpreted to identify a link or other reference to other messages. In block , the system determines whether the field definition comprises a link to data in another field. If so, then in block , the system verifies that the linked field is updated, and fetches data from the linked field. Block  may involve dynamically retrieving field data from database . In block , the system tests whether the field definition contains an instruction to embed data from another field. If so, then the embedded field is identified and tested to determine if it is updated, as in block . Data from the embedded field is fetched, and the field definition property is cleared since the data is then embedded.","In block , the system tests whether all data in the field definition has been resolved to static form. If not, then control is transferred to block  to resolve any remaining references. If so, then in block , any business rules in the field definition are applied to compute the final field value.","Accordingly, data from one field of a message that is linked in a message web may propagate to fields of other linked messages, automatically and in response to user input or other actions that cause changes to data objects.",{"@attributes":{"id":"p-0746","num":"0792"},"figref":["FIG. 27C","FIG. 27A","FIG. 27B"],"b":["2742","2744","2746","2748","2740","2740","2740","2742","2744","2746","2748"]},{"@attributes":{"id":"p-0747","num":"0793"},"figref":["FIG. 28A","FIG. 18A","FIG. 23A"],"b":["2800","2802","2804","2806","2806","2808","2808","2800","2810","2804","2812"]},"Thus, message web members that share a common address list may be aggregated into a single message for purposes of presentation. Messages that are added, modified, and deleted as parts of the message web are reflected in the aggregated presentation. Some tasks are better navigated by direct access to steps instead of linear progression from one step to the next. By aggregating message web members within a single presentation, available members can be easily seen and accessed directly. Aggregated message web presentations may also provide a per role control panel for a task such that messages with diverse recipient or access control lists can be presented in an aggregated manner.",{"@attributes":{"id":"p-0749","num":"0795"},"figref":["FIG. 28B","FIG. 28A","FIG. 28A"],"b":["2812","2812","2814","2816","2818"]},"If a new message web member is requested, then in block , a new message is sent to the recipient list, and appropriate links are created to insert the new message into the message web. If a new part of the same message is selected, then in block , the new content is added to the current message. Recipients of the current message notified appropriately, and the new content is highlighted when such recipients read the message. In either alternative, as shown by block , the new message may be associated with a new tab in the current message.",{"@attributes":{"id":"p-0751","num":"0797"},"figref":["FIG. 28C","FIG. 28A"],"b":["2800","2830","2832","2841","2840","2842","2844","2844","2842","2830","2832"]},"Thus, a single notification message serves to alert a user about changes or additions spanning multiple messages within a message web. Individual changes or additions across messages are highlighted within the notification message. The notification message can be the message web home, any message web member, a digest of changes within a message web, or a list of message webs.","For example, assume a user working on a multiple step task wants to be kept informed about changes within that task. By signing up for message web notifications, a user cuts down on the number of notifications he receives by aggregating indications of what has changed into a single notification message. The user does not get multiple notifications corresponding to every change within the message web. No further notification is sent until a user has looked at the changes indicated by a previous notification.","Message webs that are delivered to recipients may be received in an e-mail client and identified by a special subject designation. For example, a special message that represents a message web may be displayed within the same containers, lists, or folder as a regular email message. An icon representing the message could be different, and menu functions available for the special message might be different from those available for a regular message. The message subject line may include a topical subject, appended with, \u201c-Message Web,\u201d or a similar designation. Message Webs may take the place of individual messages within message folders. These may be individual messages, but a special message may be referred to as the \u201cMessage Web Home\u201d. Message Webs may exist within the same folders as messages.",{"@attributes":{"id":"p-0755","num":"0801"},"figref":"FIG. 29"},"Within the Internet, broken links are an extremely common problem. By knowing that message webs form a unit, a manager can either rethread the ends of links pointing to deleted messages or utilize a placeholder message shell through which existing links can traverse. The shell has little or no content other than the links from it that the previous message contained. The shell can also offer suggestions, when the shell manager is not sure of what links are important. Links that are automatically deleted when a message is deleted result in fewer broken links.","In block , a message in a message web is marked for deletion. In block , the system determines what kind of deletion to carry out. In an embodiment, deletion may involve complete elimination of the deleted message, or retaining a message shell as a placeholder. If a placeholder is retained, then in block , the content of the message is deleted, and the existing message web links are retained. Optionally, a summary or decision portion of the message may be retained.","If the message is completely eliminated, then in block , all links from the deleted message to other members within the same message web are identified. Each message web member is visited and all links to the deleted message are identified. The links are replaced with links to the next message in the message web, subject to access control privileges and elimination of self-referencing links. The updated links are entered in an automatically maintained link list. In block , links to other message webs are similarly updated. In block , the deleted message is added to a list of deleted messages or \u201cdead URLs.\u201d Optionally, a crawl of the Internet may be scheduled to search for external links to the deleted message, since such links become \u201cbroken\u201d upon deletion of the message. As a result, the message is deleted.",{"@attributes":{"id":"p-0759","num":"0805"},"figref":["FIG. 30","FIG. 30"]},"For example,  depicts a folder  for a particular project that contains a first message web  dealing with an upcoming status meeting. The message web  comprises a home message  and child messages , , , . Each such message may be a transportable application as described herein.  also depicts a previous message web  and next message web  in a web ring. Thus, a user may receive a graphical view of complex message relationships and related message webs.",{"@attributes":{"id":"p-0761","num":"0807"},"figref":["FIG. 31A","FIG. 31B","FIG. 31C"]},"Assume that a user logs into the system and enters a name and password via, for example, a Web page. Once the password and user name are verified by application server , an electronic form or application editor is provided to the user. The user may author a transportable application providing recruiting functions based on a template. The user may specify one or more addresses, such as electronic mail addresses, for the participants of the message web in a field of the form. The user may also specify the subject of the Message Web in a field. The form may also include a link that allows a user to upload content into a static content region. Static content, for example, a candidate's resume may be uploaded from a file residing on the user's computer. The form may also include buttons that allow the user to send the contents of the form to application server  and to first preview the content before it is sent to the server.","Once the user submits the form to the server, in response, the server sends a transportable application  () with the content specified in the form. In one embodiment, transportable application  may include one or more static content regions and dynamic content regions , , , , , which include and capture content from regions of the electronic form. The regions may display headers, introductory text, substantive content, graphics, etc.","The transportable application  also includes tabs ,  that are associated with separate pages of the application. Tab  specifies that transportable application  includes a \u201cDiscussion\u201d. In this example, participants in the discussion can add comments into an interface region . The tab  allows one or more of the participants to link the current \u201cDiscussion\u201d to, for example, a \u201cSchedule\u201d which can be used to set-up times to interview the candidate. A window  may pop-up that allows a participant to choose \u201cSchedule.\u201d Once the participant clicks on Schedule, the request is sent to the server.","In response, the server generates a new electronic form for providing a schedule.  illustrates an example electronic form  that includes a region  with fields , , and  for specifying the Time, Date, and Name of the participants. The form  may also include fields  and  and a dynamic content region . The form  may also include Send and Preview buttons ,  that function in a manner similar to the buttons described above. Further, the form  may include a link  that enables a user to submit the content of the form to the server. When a participant presses the button , the content of the form  is sent to the server.","The transportable application  is then be updated to reflect the content of the form .  is a diagram of a screen display in which the transportable application reflects such updates. A tab  is added to the transportable application  to indicate that a \u201cSchedule\u201d has been initiated to interview the candidate. A participant may reply to the Schedule using the interface region and may also view the most current content in the dynamic region. The participants may use the tabs to navigate between the Discussion and Schedule. Each time a participant navigates between the tabs, the participant dynamically receives the most current content from the server.","A participant may add other transportable applications, pages or building blocks to the transportable application. In this way, multiple types of applications can be combined using the same message without the need for multiple instances of messages or tedious navigation through multiple message folders. Additionally, tabs similar may be added to the transportable application that allow multiple transportable applications, pages, or building blocks to be available, but marked as no longer active or useful to one or more of the participants (\u201cgrayed out\u201d).","The approaches described herein may be implemented in hardware or software, or a combination thereof. In one embodiment, the approaches are implemented in computer programs executing one or more programmable computers. The programmable computers may be either general-purpose computers or special-purpose, embedded systems. In either case, program code is applied to data entered with or received from an input device to perform the functions described and to generate output information. The output information is applied to one or more output devices.","Each program is preferably implemented in a high level procedural or object-oriented programming language to communicate with a computer system. However, the programs can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language.","Each such computer program is preferably stored on a storage medium or device (e.g., CD-ROM, hard disk, magnetic diskette, or memory chip) that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to perform the procedures described. The system also may be implemented as a computer-readable storage medium, configured with a computer program, where the storage medium so configured causes a computer to operate in a specific and predefined manner.",{"@attributes":{"id":"p-0771","num":"0817"},"figref":"FIG. 19","b":["1900","1900","1902","1904","1902","1900","1906","1902","1904","1906","1904","1900","1908","1902","1904","1910","1902"]},"Computer system,  may be coupled via bus  to a display , such as a cathode ray tube (\u201cCRT\u201d), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, touch screen, keypad of a cellular telephone or PDA, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for collaborative communications, multiple-part messages, and linking and aggregating messages. According to one embodiment of the invention, collaborative communications, multiple-part messages, and linking and aggregating messages is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (\u201cISDN\u201d) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (\u201cLAN\u201d) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (\u201cISP\u201d) . ISP  in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for collaborative communications, multiple-part messages, and linking and aggregating messages as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.",{"@attributes":{"id":"p-0782","num":"0828"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"357pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CLASS STRUCTURE AND API FOR EVENT HANDLING"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Class Message"]},{"entry":["2","java.lang.Object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3",{},"|"]},{"entry":["4",{},"+ - -com.zaplet.message.Message"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["5","--------------------------------------------------------------------------------------------------------------"]},{"entry":["6","public class Message"]},{"entry":["7","extends java.lang.Object"]},{"entry":["8","Class for implementing Messaging API - responsible for message content"]},{"entry":["9","Contains all data, related to the event message along with get\/set methods, providing"]},{"entry":["10","access to this data The most proper way of using the Message class functionality would"]},{"entry":["11","be to instantiate the class and then add proper attributes, i.e name \/ value pairs for this"]},{"entry":["12","class:"]},{"entry":["13","=============================="]},{"entry":"14"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["15",{},"Message msg = new Message (msgType, objID, objType,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["16","senderID, senderType, expTime);"]},{"entry":"17"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["18",{},"\/\/ adding name\/value pairs here"]},{"entry":["19",{},"msg.addAttr (AttrName, Object);"]},{"entry":"20"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["21","=============================="]},{"entry":"22"},{"entry":["23","Since:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["24",{},"Java v1.1.8"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["25","Version:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["26",{},"1.0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["27","Author:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["28",{},"Vlad Silverman"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["29","See Also:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["30","com.zaplet.db.SelectAttributesByMsgId"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["31","--------------------------------------------------------------------------------------------------------------"]},{"entry":[{},{"u":"Message"}]},{"entry":[{},"java.lang.String objType, com.zaplet.data.ObjectID senderID,"]},{"entry":[{},"java.lang.String senderType, java.util.Date expTime)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Constructor Used to initialize a Message"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["32",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["void",{"u":"addAttr"}]},{"entry":[{},"java.lang.Object value)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"addAttr() - adds atributes for the current message"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["java.util.Hashtable",{"u":"getAttr"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getAttr() - gets the m_attr class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["java.util.Date",{"u":"getExpTime"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getExpTime() - gets the m_expTime class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["com.zaplet.data.ObjectID",{"u":"getMsgID"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getMsgID() - gets the m_msgID class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["java.lang.String",{"u":"getMsgType"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getMsgType() - gets the m_msgType class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["com.zaplet.data.ObjectID",{"u":"getObjID"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getObjID() - gets the m_objID class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["java.lang.String",{"u":"getObjType"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getObjType() - gets the m_objType class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["com.zaplet.data.ObjectID",{"u":"getSenderID"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getSenderID() - gets the m_senderID class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["java.lang.String",{"u":"getSenderType"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getSenderType() - gets the m_senderType class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["int",{"u":"getStatus"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"getStatus() - gets the m_status class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["boolean",{"u":"isPersistent"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"isPersistent() - gets the m_persistent class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["static void",{"u":"main"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"main() - main method provides functionality for unit testing of"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Message class"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setAttr"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setAttr() - sets the m_attr class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setExpTime"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setExpTime() - sets the m_expTime class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setMsgID"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setMsgID() - sets the m_msgID class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setMsgType"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setMsgType() - sets the m_msgType class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setObjID"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setObjID() - sets the m_objID class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setObjType"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setObjType() - sets the m_objType class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setPersistent"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setPersistent() - sets the m_persistent class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setSenderID"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setSenderID() - sets the m_senderID class varible"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setSenderType"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setSenderType() - sets the m_senderType class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":"setStatus"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"setStatus() - sets the m_status class variable"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["33",{}]},{"entry":[{},"clone, equals, finalize, getClass, hashcode, notify, notifyAll, toString,"]},{"entry":[{},"wait, wait, wait"]},{"entry":["34",{}]},{"entry":["35","1.1.1 Message"]},{"entry":["36","public Message (java.lang.String msgType,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["37",{},"com.zaplet.data.ObjectID objID,"]},{"entry":["38",{},"java.lang.String objType,"]},{"entry":["39",{},"com.zaplet.data.ObjectID senderID,"]},{"entry":["40",{},"java.lang.String senderType,"]},{"entry":["41",{},"java.util.Date expTime)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["42",{},"Constructor Used to initialize a Message"]},{"entry":["43",{},"Parameters:"]},{"entry":["44",{},"msgType - - String value of the Message type"]},{"entry":["45",{},"objID - - int value of the object Id"]},{"entry":["46",{},"objType - - String value of the object type"]},{"entry":["47",{},"This value should be part of names, defined in ObjectType class"]},{"entry":["48",{},"senderID - - value of the sender Id"]},{"entry":["49",{},"senderType - - String value of the sender type"]},{"entry":["50",{},"This value should be part of names, defined in ObjectType class"]},{"entry":["51",{},"expTime - - expiration time for the current message"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["52","1.1.2 setMsgID"]},{"entry":["53","public void setMsgID (com.zaplet.data.ObjectID msgID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["54",{},"setMsgID() - sets the m_msgID class variable"]},{"entry":["55",{},"Parameters:"]},{"entry":["56",{},"msgID - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["57","--------------------------------------------------------------------------------------------------------------"]},{"entry":["58","1.1.3 getMsgID"]},{"entry":["59","public com.zaplet.data.ObjectID getMsgID ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["60",{},"getMsgID() - gets the m_msgID class variable"]},{"entry":["61",{},"Returns:"]},{"entry":["62",{},"msgID - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["63","--------------------------------------------------------------------------------------------------------------"]},{"entry":["64","1.1.4 setMsgType"]},{"entry":["65","public void setMsgType (java.lang.String msgType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["66",{},"setMsgType() - sets the m_msgType class variable"]},{"entry":["67",{},"Parameters:"]},{"entry":["68",{},"msgType - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["69","--------------------------------------------------------------------------------------------------------------"]},{"entry":["70","1.1.5 getMsgType"]},{"entry":["71","public java.lang.String getMsgType ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["72",{},"getMsgType() - gets the m_msgType class variable"]},{"entry":["73",{},"Returns:"]},{"entry":["74",{},"msgType - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["75","--------------------------------------------------------------------------------------------------------------"]},{"entry":["76","1.1.6 setObjID"]},{"entry":["77","public void setObjID (com.zaplet.data.ObjectID objID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["78",{},"setObjID() - sets the m_objID class variable"]},{"entry":["79",{},"Parameters:"]},{"entry":["80",{},"objID - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["81","--------------------------------------------------------------------------------------------------------------"]},{"entry":["82","1.1.7 getObjID"]},{"entry":["83","public com.zaplet.data.ObjectID getObjID ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["84",{},"getObjID() - gets the m_objID class variable"]},{"entry":["85",{},"Returns:"]},{"entry":["86",{},"objID - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["87","--------------------------------------------------------------------------------------------------------------"]},{"entry":["88","1.1.8 setObjType"]},{"entry":["89","public void setObjType (java.lang.String objType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["90",{},"setObjType() - sets the m_objType class variable"]},{"entry":["91",{},"Parameters:"]},{"entry":["92",{},"obj Type - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["93","--------------------------------------------------------------------------------------------------------------"]},{"entry":["94","1.1.9 getObjType"]},{"entry":["95","public java.lang.String getObjType ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["96",{},"getObjType() - gets the m_objType class variable"]},{"entry":["97",{},"Returns:"]},{"entry":["98",{},"objType - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["99","--------------------------------------------------------------------------------------------------------------"]},{"entry":["100","1.1.10 setSenderID"]},{"entry":["101","public void setSenderID (com.zaplet.data.ObjectID senderID)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["102",{},"setSenderID() - sets the m_senderID class variable"]},{"entry":["103",{},"Parameters:"]},{"entry":["104",{},"objID - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["105","--------------------------------------------------------------------------------------------------------------"]},{"entry":["106","1.1.11 getSenderID"]},{"entry":["107","public com.zaplet.data.ObjectID getSenderID ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["108",{},"getSenderID() - gets the m_senderID class variable"]},{"entry":["109",{},"Returns:"]},{"entry":["110",{},"senderID - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["111","--------------------------------------------------------------------------------------------------------------"]},{"entry":["112","1.1.12 setSenderType"]},{"entry":["113","public void setSenderType (java.lang.String senderType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["114",{},"setSenderType() - sets the m_senderType class variable"]},{"entry":["115",{},"Parameters:"]},{"entry":["116",{},"senderType - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["117","--------------------------------------------------------------------------------------------------------------"]},{"entry":["118","1.1.13 getSenderType"]},{"entry":["119","public java.lang.String getSenderType ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["120",{},"getSenderType() - gets the m_senderType class variable"]},{"entry":["121",{},"Returns:"]},{"entry":["122",{},"senderType - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["123","--------------------------------------------------------------------------------------------------------------"]},{"entry":["124","1.1.14 setStatus"]},{"entry":["125","public void setStatus (int status)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["126",{},"setStatus() - sets the m_status class variable"]},{"entry":["127",{},"Parameters:"]},{"entry":["128",{},"status - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["129","--------------------------------------------------------------------------------------------------------------"]},{"entry":["130","1.1.15 getStatus"]},{"entry":["131","public int getStatus ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["132",{},"getStatus() - gets the m_status class variable"]},{"entry":["133",{},"Returns:"]},{"entry":["134",{},"status - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["135","--------------------------------------------------------------------------------------------------------------"]},{"entry":["136","1.1.16 setExpTime"]},{"entry":["137","public void setExpTime (java.util.Date expTime)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["138",{},"setExpTime() - sets the m_expTime class variable"]},{"entry":["139",{},"Parameters:"]},{"entry":["140",{},"expTime - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["141","--------------------------------------------------------------------------------------------------------------"]},{"entry":["142","1.1.17 getExpTime"]},{"entry":["143","public java.util.Date getExpTime ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["144",{},"getExpTime() - gets the m_expTime class variable"]},{"entry":["145",{},"Returns:"]},{"entry":["146",{},"expTime - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["147","--------------------------------------------------------------------------------------------------------------"]},{"entry":["148","1.1.18 isPersistent"]},{"entry":["149","public boolean isPersistent ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["150",{},"isPersistent() - gets the m_persistent class variable"]},{"entry":["151",{},"Returns:"]},{"entry":["152",{},"m_persistent - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["153","--------------------------------------------------------------------------------------------------------------"]},{"entry":["154","1.1.19 setPersistent"]},{"entry":["155","public void setPersistent (boolean persistent)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["156",{},"setPersistent() - sets the m_persistent class variable"]},{"entry":["157",{},"Parameters:"]},{"entry":["158",{},"m_persistent - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["159","--------------------------------------------------------------------------------------------------------------"]},{"entry":["160","1.1.20 setAttr"]},{"entry":["161","public void setAttr (java.util.Hashtable attr)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["162",{},"setAttr() - sets the m_attr class variable"]},{"entry":["163",{},"Parameters:"]},{"entry":["164",{},"attr - - the value to be set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["165","--------------------------------------------------------------------------------------------------------------"]},{"entry":["166","1.1.21 getAttr"]},{"entry":["167","public java.util.Hashtable getAttr ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["168",{},"getAttr() - gets the m_attr class variable"]},{"entry":["169",{},"Returns:"]},{"entry":["170",{},"attr - the value of the class variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["171","--------------------------------------------------------------------------------------------------------------"]},{"entry":["172","1.1.22 addAttr"]},{"entry":["173","public void addAttr (java.lang.String name,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["174",{},"java.lang.Object value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["175",{},"throws "]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["176",{},"addAttr() - adds atributes for the current message"]},{"entry":["177",{},"Parameters:"]},{"entry":["178",{},"name - the name of the attribute to be added to the name\/value list"]},{"entry":["179",{},"value - the value of the attribute to be added to the name\/value list"]},{"entry":["180",{},"Throws:"]},{"entry":["181",{},{"u":"MessageException"}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["182","--------------------------------------------------------------------------------------------------------------"]},{"entry":["183","1.1.23 main"]},{"entry":["184","public static void main (java.lang.String [] args)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["185",{},"main() - main method provides functionality for unit testing of Message class"]},{"entry":"186"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["187",{},"1.2","Class MessageService"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["188",{"u":"java.lang.Object"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["189",{},"|"]},{"entry":["190",{},"+ - -com.zaplet.message.MessageService"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["191","--------------------------------------------------------------------------------------------------------------"]},{"entry":["192","public class MessageService"]},{"entry":["193","extends "]},{"entry":["194","Class for implementing Messaging API - responsible for services on Message data"]},{"entry":["195","Publishes\/stores info about any object in the db"]},{"entry":["196","This class provides also transformation between internal objects used by the Zaplet"]},{"entry":["197","platform and standard data types, used by JDBC layer"]},{"entry":["198","Possible ways of using the MessageService are outlined below:"]},{"entry":["199","=============================="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["200",{},"Message msg = new Message (msgType, objID, objType,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["201","senderID, senderType, expTime);"]},{"entry":"202"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["203",{},"try {"]},{"entry":"204"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["205",{},"\/\/ adding name\/value pairs here"]},{"entry":["206",{},"msg.addAttribute (AttrName1, Object1);"]},{"entry":["207",{},"msg.addAttribute (AttrName2, Object2);"]},{"entry":["208",{},". . . ."]},{"entry":"209"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["210",{},"\/\/ Now there are several choices:"]},{"entry":["211",{},"\/\/"]},{"entry":["212",{},"\/\/ 1. we can just store the message and"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["213",{},"\/\/","all its attributes in the database"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["214",{},"MessageService, publish (msg);"]},{"entry":["215",{},". . . ."]},{"entry":["216",{},"OR"]},{"entry":"217"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["218",{},"\/\/ 2. we can publish the message in the Db and"]},{"entry":["219",{},"\/\/ fire the action, associated with the message"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["220",{},"\/\/","The action should be implemented in the handle ()"]},{"entry":["221",{},"\/\/","method of the class, specified by \u2018msgType\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["222",{},"MessageService.publishAndFire (msg);"]},{"entry":["223",{},". . . ."]},{"entry":["224",{},"OR"]},{"entry":"225"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["226",{},"\/\/ 3. we can just fire the action, specified by msgType"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["227",{},"\/\/","without storing the message in the database"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["228",{},"msg.setPersistent (false);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["229",{},"MessageService.publisbAndFire (msg);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["230",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["231",{},"}"]},{"entry":["232",{},"catch (MessageException me) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["233",{},"\/\/ process MessageException here"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["234",{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["235","=============================="]},{"entry":"236"},{"entry":["237","Since:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["238",{},"Java v1.1.8"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["239","Version:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["240",{},"1.0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["241","Author:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["242",{},"Vlad Silverman"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["243","See Also:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["244",{},"com.zaplet.db.SelectAttributesByMsgId"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["245","--------------------------------------------------------------------------------------------------------------"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Static ",{"u":"SEQUENCEQUERY"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["246",{}]},{"entry":[{},{"u":"MessageService"}]},{"entry":"247"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["protected",{"u":["getHandler","String"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["static ","getHandler() - get the name of the class, which should handle the current"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"message"]},{"entry":[{},"The name of the class is related to the type of the message"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["protected static int",{"u":["getUniqueId","String"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Get unique primary key id for an object, specified in the query"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"parameter."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["private static int",{"u":["insertAttributes","DbTrans","Message"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"insertAttributes(msg) - inserts all attributes (name\/value pairs) of a"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"message in the database"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["private static int",{"u":["insertMessage","DbTrans","Message"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"insertMessage(msg) - inserts a message in the database"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["static void",{"u":["main","String"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"main() - main method provides functionality for unit testing of"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MessageService class"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["static void",{"u":["publish","Message"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"publish() - stores a new Message"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"this method will verify first m_Persistent flag of the Message object and store"]},{"entry":[{},"the Message in the Db only if this flag is true"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["static void",{"u":["publishAndFire","Message"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"publishAndFire() - activates the handle() method of the specific handler."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Handler is associated with the type of the current message."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["248",{}]},{"entry":[{},", , , , , , , ,"]},{"entry":[{},"registerNatives, toString, wait, wait, wait"]},{"entry":"249"},{"entry":["250","1.2.24 SEQUENCEQUERY"]},{"entry":["251","public static final  SEQUENCEQUERY"]},{"entry":["252","1.2.25 MessageService"]},{"entry":["253","public MessageService ()"]},{"entry":["254","1.2.26 publish"]},{"entry":["255","public static void publish ( msg)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["256",{},"throws "]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["257",{},"publish() - stores a new Message"]},{"entry":["258",{},"this method will verify first m_Persistent flag of the Message object and store the Message in the"]},{"entry":["259",{},"Db only if this flag is true"]},{"entry":["260",{},"Parameters:"]},{"entry":["261",{},"msg - - a Message object"]},{"entry":["262",{},"Throws:"]},{"entry":["263",{},{"u":"MessageExceotion"}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["264","--------------------------------------------------------------------------------------------------------------"]},{"entry":["265","1.2.27 insertMessage"]},{"entry":["266","private static int insertMessage ( trans,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["267",{},{"u":"Message"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["268",{},"insertMessage(msg) - inserts a message in the database"]},{"entry":["269",{},"Parameters:"]},{"entry":["270",{},"trans - - database transaction"]},{"entry":["271",{},"msg - - a Message object"]},{"entry":["272",{},"Returns:"]},{"entry":["273",{},"inserted number of rows"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["274","--------------------------------------------------------------------------------------------------------------"]},{"entry":["275","1.2.28 insertAttributes"]},{"entry":["276","private static int insertAttributes ( trans,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["277",{},{"u":"Message"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["278",{},"insertAttribute(msg) - inserts all attributes (name\/value pairs) of a message in the database"]},{"entry":["279",{},"Parameters:"]},{"entry":["280",{},"trans - - database transaction"]},{"entry":["281",{},"msg - - a Message object"]},{"entry":["282",{},"Returns:"]},{"entry":["283",{},"inserted number of rows"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["284","--------------------------------------------------------------------------------------------------------------"]},{"entry":["285","1.2.29 publishAndFire"]},{"entry":["286","public static void publishAndFire ( msg)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["287",{},"throws "]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["288",{},"publishAndFire() - activates the handle() method of the specific handler."]},{"entry":["289",{},"Handler is associated with the type of the current message. Before calling the handler this method"]},{"entry":["290",{},"will store the Message object in the database"]},{"entry":["291",{},"Parameters:"]},{"entry":["292",{},"msg - - the Message object"]},{"entry":["293",{},"Throws:"]},{"entry":["294",{},{"u":"MessageException"}]},{"entry":["295",{},"can't be found"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["296","--------------------------------------------------------------------------------------------------------------"]},{"entry":["297","1.2.30 getHandler"]},{"entry":["298","protected static  getHandler ( msgType)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["299",{},"throws "]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["300",{},"getHandler() - get the name of the class, which should handle the current message"]},{"entry":["301",{},"The name of the class is related to the type of the message"]},{"entry":["302",{},"Parameters:"]},{"entry":["303",{},"msgType - - the type of the message"]},{"entry":["304",{},"Returns:"]},{"entry":["305",{},"MessageHandler - returns an object which implements MessageHandler interface"]},{"entry":["306",{},"Throws:"]},{"entry":["307",{},{"u":"MessageException"}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["308","--------------------------------------------------------------------------------------------------------------"]},{"entry":["309","1.2.31 getUniqueId"]},{"entry":["310","protected static int getUniqueId ( query)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["311",{},"throws "]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["312",{},"Get unique primary key id for an object specified in the query parameter. Use the database"]},{"entry":["313",{},"sequencer"]},{"entry":["314",{},"Parameters:"]},{"entry":["315",{},"query - - a SQL query string ot get next id"]},{"entry":["316",{},"Returns:"]},{"entry":["317",{},"int - the next id number"]},{"entry":["318",{},"Throws:"]},{"entry":["319",{},{"u":"MessageException"}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["320","--------------------------------------------------------------------------------------------------------------"]},{"entry":["321","1.2.32 main"]},{"entry":["322","public static void main ( [] args)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["323",{},"throws "]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["324",{},"main() - main method provides functionality for unit testing of MessageService class"]},{"entry":["325",{},"This procedure instantiates a new message and sets message type of the current"]},{"entry":["326",{},"message to the HandlerTest class located in com.zaplet.message package Three"]},{"entry":["327",{},"attributes of different types are added to the current message After fire() method"]},{"entry":["328",{},"will be called on the current message the handle() method of the HandlerTest class"]},{"entry":["329",{},"will be executed This method is implemented just for testing purposes It will print"]},{"entry":["330",{},"out the names, values and types of all attributes, associated with the current"]},{"entry":["331",{},"message"]},{"entry":"332"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["333",{},"1.3 Class SystemHandler"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["334","java.lang.Object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["335",{},"|"]},{"entry":["336",{},"+ - -com.zaplet.message.SystemHandler"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["337","--------------------------------------------------------------------------------------------------------------"]},{"entry":["338","public class SystemHandler"]},{"entry":["339","extends java.lang.Object"]},{"entry":["340","implements "]},{"entry":["341","Class for implementing Messaging API Contains handle method"]},{"entry":["342","Since:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["343",{},"Java v1.1.8"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["344","Version:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["345",{},"1.0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["346","See Also:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["347",{},{"u":"Message"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["348","--------------------------------------------------------------------------------------------------------------"]},{"entry":[{},{"u":"SystemHandler"}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Constructor Used to initialize a SystemHandler"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["349",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":["handle","Message"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"handle() gets the list of all observers of the current message, i.e gets the list of all messages,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"associated in the current message for every associated message acivates the fire method, which in turn:"]},{"entry":[{},"stores associated message if it is persistent activates the handle of the associated message"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["350",{}]},{"entry":[{},"clone, equals, finalize, getclass, hashCode, notify, notifyAll, toString,"]},{"entry":[{},"wait, wait, wait"]},{"entry":["351",{}]},{"entry":["352","1.3.33 SystemHandler"]},{"entry":["353","public SystemHandler ()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["354",{},"Constructor Used to initialize a SystemHandler"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["355","1.3.34 handle"]},{"entry":["356","public void handle ( msg)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["357",{},"handle() gets the list of all observers of the current message, i.e gets the list of all messages,"]},{"entry":["358",{},"associated in the current message for every associated message acivates the fire method, which in"]},{"entry":["359",{},"turn: stores associated message if it is persistent activates the handle of the associated message"]},{"entry":["360",{},"Specified by:"]},{"entry":["361",{},{"u":["handle","MessageHandler"]}]},{"entry":["362",{},"Parameters:"]},{"entry":["363",{},"msg - Message object"]},{"entry":"364"},{"entry":"365"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["366",{},"1.4 Interface MessageHandler"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["367","All Known Implementing Classes:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["368",{},{"u":"SystemHandler"}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["369","--------------------------------------------------------------------------------------------------------------"]},{"entry":["370","public interface MessageHandler"]},{"entry":["371","Iterface for Messaging API Contains methods to be implemented by every specific"]},{"entry":["372","Handler class"]},{"entry":["373","Since:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["374",{},"Java v1.1.8"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["375","Version:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["376",{},"1.0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["377","See Also:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["378",{},"com.zaplet.db.SelectAttributesByMsgId"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["379",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["void",{"u":["handle","Message"]}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"handle method"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["380",{}]},{"entry":["381","1.4.35 handle"]},{"entry":["382","public void handle ( msg)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"315pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["383",{},"handle method"]},{"entry":["384",{},"Parameters:"]},{"entry":["385",{},"msg - - a Message object"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 1C","FIG. 1B"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 1E"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 1F"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 2D"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 2E"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 2F"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 7D","FIG. 7C"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 8C"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 8D"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 9C","FIG. 9B"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 9D"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 9E"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 10B"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 10C"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 11C"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 11D"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 11E"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 11F"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 11G"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 11H"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 13A"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 13B"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 13C"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 13D"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 13E"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 14B"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 14C"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 17A"},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 17B"},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 18A"},{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 18B","FIG. 18A"]},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 18C"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 18D"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 18E"},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 18F"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 21A"},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 21B"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 22A"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 22B"},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 22C"},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 22D"},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 23A"},{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 23B"},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 23C"},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 23D"},{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 23E"},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0123","num":"0122"},"figref":"FIG. 25A"},{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 25B"},{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 26A"},{"@attributes":{"id":"p-0126","num":"0125"},"figref":"FIG. 26B"},{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 27A"},{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 27B"},{"@attributes":{"id":"p-0129","num":"0128"},"figref":["FIG. 27C","FIG. 27A","FIG. 27B"]},{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 28A"},{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 28B","FIG. 28A"]},{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 28C"},{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIG. 31A","FIG. 31B","FIG. 31C"]}]},"DETDESC":[{},{}]}
