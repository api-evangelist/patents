---
title: System for processing objects for storage in a document or other storage system
abstract: The invention is directed to a system for processing data to be stored in a document-imaging system that includes a posting processor programmed for receiving at least one object containing the data; a bursting processor programmed for bursting the object to create at least one bursted object; an index extraction processor programmed for extracting indexing information on the bursted object; and a communication processor programmed for transmitting the transformed bursted object and the indexing information to the document-imaging system. The invention may further include a transformation processor for transforming the bursted object and a user interface for configuring the system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06999972&OS=06999972&RS=06999972
owner: Siemens Medical Systems Health Services Inc.
number: 06999972
owner_city: Malvern
owner_country: US
publication_date: 20020906
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This is a non-provisional application of provisional application Ser. No. 60\/318,106 by W. Lusen et al. filed Sep. 8, 2001.","The present invention is related to a computerized system for processing objects to be stored in a document-imaging system. More particularly, the present invention is related to a computerized system that breaks objects apart and extracts indexing information for use in storing the objects in a document-imaging system.","Document-imaging systems are often used as a platform for the management of healthcare related documents and the integration of multimedia content in a client server environment. Such systems require tools for applications to acquire, store, organize, display and manage multimedia content (including traditional reports, images, voice, video, etc.). They also require an adequate mechanism to share multimedia content with all healthcare applications regardless of where the content originated.","Document imaging is often used for long-term storage of patient data and hospital information. This data is often received electronically from a clinical or financial system or it can be input from a paper format (e.g., scanning). Electronic data (in particular, demographic data) that is stored by the document-imaging system is often sent via electronic transactions from a third-party source. Inbound transactions from any external application are handled by a receiver application. Transactions are usually sent from the application to an interface engine, which then routes the transactions to the document-imaging system. The document-imaging system can receive Imaging Style Transactions, XML, or HL7 transactions. After a transaction has been received, the transaction is parsed and the database for the document-imaging system is updated. Outbound Transactions are similarly handled by a sending application.","The document-imaging platform is typically a combination of components, each of which has a specific purpose for storing, retrieving, and\/or organizing binary objects (e.g., documents) in an archive. There is need for a component that can accept output from other systems and prepare it for storage in such a way that the content of the output is stored and organized for efficient retrieval.","Accordingly, a system is needed that is capable of accepting output from these different components and from external applications and prepare it for storage in a highly efficient manner.","The invention is directed to a system for processing objects to be stored in a document-imaging system that includes a posting processor programmed for receiving at least one object containing the data; a bursting processor programmed for bursting the object to create at least one bursted object; an index extraction processor programmed for extracting indexing information on the bursted object; and a communication processor programmed for transmitting the transformed bursted object and the indexing information to the document-imaging system. The invention may further include a transformation processor for transforming the bursted object and a user interface for configuring the system.","The invention will be understood more fully from the detailed description given below and from the accompanying drawings of the preferred embodiments of the invention; which, however, should not be taken to limit the invention to a specific embodiment but are for explanation and understanding only.","The document-imaging system within which the present invention is to be used stores multimedia content in the form of documents. A document in this context is preferably a single, self-contained, data object that is comprised one or more objects. Each object is typically a single binary file. Objects are typically text reports, scanned images, word processing documents, or any other binary data generated by any application.","The document-imaging system organizes documents by filing them hierarchically into folders using a relational database. A folder in this context is simply a virtual container for a set of documents that \u201cbelong\u201d to a specific owner. This is analogous to a typical manila folder in a filing cabinet. Similarly, filing a document into a folder is analogous to inserting a paper document into a manila folder. An \u201cowner\u201d is a set of indexes that uniquely identify a specific person, organization, or entity. For example, a patient is a potential \u201cowner\u201d of documents relating to that patient's health care record.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["101","102","103","102","109","104"]},"Background acquisition component () processes files to be stored in the document-imaging system by breaking them apart into documents and extracting indexing information for them. These documents and their indexing information are then passed to acquisition service (). Acquisition service () gathers new documents and their indexing information and routes them to storage manager () and to ownership component () so they are properly stored and associated with the correct folders. Storage manager () stores objects, organizes them into documents, and provides hierarchical storage management for the objects.","Ownership component () organizes documents by maintaining indexing information in the form of folders and also maintaining the list of documents in each folder within database (). Ownership also preferably includes browser user interface (), which is programmed to display, navigate, and maintain the hierarchy of folders and a summary of their contents. Browser user interface () is also preferably programmed to enable the display of selected documents by feeding them to the viewer user interface (). Viewer user interface () renders document objects to an output device such as a screen or printer and allows navigation across multiple documents.","This document-imaging system thus preferably utilizes three types of data interfaces that are programmed to communicate with external applications to integrate multimedia content into their workflows and business processes. The interoperable user interfaces provide robust user forms (such as HTML or XML generated user input forms) that external applications may embed within their own user interface as a tightly integrated part of the application workflows. These forms relieve the application of the burden of understanding and formatting the complex multimedia information presented by the document-imaging system. Service level application interfaces use conventional data streams that represent the information stored in the document imaging system and to allow the system to intermix multimedia information with other data in the application. The background data exchange interfaces are programmed to provide communication points between the document-imaging system and an external application to share information therebetween. These interfaces are typically used by the document-imaging system to accept index information or to automatically acquire new documents.","The document imaging system preferably operates on a Microsoft Windows 2000 or Windows NT Server, although not limited thereto, and is described in that implementation herein. In this context, the present invention, as described in more detail below, preferably executes as an asynchronous service that is initiated by independent software (one example being the Poller ()). This service is accessed preferably as a fully functional Web Service (as understood by anyone of ordinary skill in the art) or as a standard HTTP Post request using an XML as input. The Background Acquisition service is controlled by the calling software.","The present invention is directed to the background acquisition component of the above-described document-imaging system. Background acquisition component (), otherwise known as an \u201cOn-Line Clerk\u201d or \u201cOLC,\u201d is programmed to acquire virtually any output electronically from virtually any application. The functionality of background acquisition component () is primarily two-fold: to provide non-interactive (i.e. no user involvement) interfaces (known as acquisition sources) for acquiring output and to provide enhanced manipulation of objects before they are stored and indexed.","Background acquisition component (), with help from Poller component () is programmed to supports a plurality of acquisition sources. These include, for example, any output that can be transmitted via File Transfer Protocol (FTP), and any output that can be saved as files on a conventional network share.","For convenience, the pre-manipulated objects acquired from these sources are herein called \u201creports\u201d. Background acquisition component () is programmed to then manipulate these reports in at least the following ways. A report may be \u201cBurst\u201d into multiple objects if the report contains more than one document. This is analogous to bursting printed output when that printing is done or tractor fed paper. Bursted objects may be \u201cTransformed\u201d into one or more alternate objects if the original objects are in XML format. Indexes for these objects may be read either from an associated tag file or from the content of the objects themselves. A tag file is an ASCII file that contains pointers to non-ASCII files and their associated index information. All of these processes are configurable and controlled by processing rules, as discussed in more detail below.","The preferred software elements of background acquisition component () process consists of several components are illustrated in . Of course, those of ordinary skill in the art will appreciate that this is simply a functional breakdown of the system and the document processor of the invention is not limited to any particular combination of these software elements. As shown in , reports () are posted to background acquisition process () using posting process (), which is programmed to decide how many times a report will pass through the subsequent steps in the process. Posted reports are burst into one or more smaller objects () that are organized into subsets (the subsets are herein called documents) using bursting process (). Bursted objects () may be \u201cTransformed\u201d (if they are in XML format) one or more times into actual objects that will be stored as distinct documents using transformation process (). Indexing information may then be read from the report\/objects by using index extraction process (). The documents and their associated indexing information () are then passed on to other components of the document-imaging system that will manage the storage of those objects and their associated indexes.","Posting a report involves deciding how many times the report will pass through the burst\/transform\/index-extraction processes. The posting process maps the report's file name and\/or extension to one or more report types. Each report type then preferably initiates a single processing pass for the report. The bursting\/transformation\/indexing processes (detailed below) then use each report type to configure how they will process the report during each pass. The mappings from report file names and\/or extensions to report types are configured using posting rules that are programmed into the system in a conventional manner. These rules preferably contain string values that are compared with report file names and extensions and may include wild card characters.","The following is a preferred embodiment of the steps used to implement posting process ():","1. Posting is initiated by a call to posting process (). This call is preferably made using standard HTTP Post using XML streams for input.","2. The file name, extension, and hospital\/region codes are extracted from the XML streams.","3. The file name, extension, and hospital\/region codes are compared with string masks contained in the programmed posting rules to determine how many times to process the report (see discussion of posting rules below).","4. For each matching posting rule, bursting process () is called to control the processing of the report, which in turn calls transformation process (), index extraction process (), and the storage\/indexing processes of the document imaging system.","The posting rules provide the mapping between a report and the number of times it will be processed. A posting rule preferably has the following attributes: ReportName, ReportExtension, HospRegion code, ReportType and ForcedHospRegion. In a preferred embodiment, the file name, extension, and hospital\/region codes are compared with the posting rules based on the order and criteria shown in Table 1.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Precedence","ReportName","ReportExtension","HospRegion"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Exists","Exists","Exists"]},{"entry":["2","Exists","Blank","Exists"]},{"entry":["3","Blank","Exists","Exists"]},{"entry":["4","Exists","Exists","Blank"]},{"entry":["5","Exists","Blank","Blank"]},{"entry":["6","Blank","Exists","Blank"]},{"entry":["7","Default"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"A report may be qualified as multiple ReportTypes, which allows a single report to be passed to background acquisition component () once even though it is processed multiple times using different bursting\/transformation\/index extraction criteria. The ReportType is preferably used as input to bursting process () and the ForcedHospRegion is preferably used to override any entity or organization information when indexing.","As noted above, bursting a report is the process of breaking up the report into one or more smaller objects and organizing those objects into documents. The bursting process preferably reads the entire report and recognizes the beginning and end of each object to extract it. The rules that govern bursting process (), i.e., bursting rules, map a report type to a document type that will be associated with each document stored. The rules also specify which bursting process type to use, and any details required to accomplish the specified type of bursting.","The following is a preferred embodiment of steps used to implement bursting process ().","1. Bursting is initiated from posting process (). The original information sent to posting is also available for bursting.","2. Bursting process () maps the report's ReportType to determine the bursting rules that will be used to process the report (see the discussion of bursting rules below for more information).","3. The bursting rules provide information about how to break up the report into objects and documents. There are preferably a number of different methods (known as bursting types) used to perform this task. The bursting rules also preferably contain any extra information required to configure the specific bursting type used (see the discussion of bursting types below for more information about the types and the extra information required to perform each bursting method).","4. If directed by the bursting rules, the report is sent through a pre-bursting preparation process that will facilitate the specified bursting method (see the discussion of pre-bursting preparation below).","5. If the report contains any header and\/or trailer pages, they are removed and sent to index extraction process () to be read for \u201creport level\u201d indexes. These indexes are preferably saved so they may be used for all documents stored. The header and trailer pages may also be kept if they are to be reapplied to each extracted document.","6. The first document's objects are then extracted and sent to index extraction process () to be read for \u201creport level\u201d indexes. These indexes are saved so they can be used for all documents stored.","7. The first document's objects are then sent to index extraction process () for \u201cdocument level\u201d indexes. These indexes are used for the first document.","8. The first document's objects are then sent to other components of the document-imaging system to be stored and associated with the specified index values. These documents are stored as documents of the type specified by the bursting rules. If the bursting rules specify that the report is a Tag File, then the extracted object is used for indexing information and will not be stored. Instead, the object extracted from the report contains a reference (usually a file specification pointing to a separate file) to the actual object that will be stored. This is called Tag File Processing, which is discussed in more detail below in regard to the enhanced capabilities of the system. If the bursting rules specify that the report will be Ghost Posted (also discussed below), the objects are not sent for storage.","9. All subsequent objects are then extracted, grouped into documents, and iteratively and repetitively passed steps  and .","10. Each document's objects are sent to other components of the document-imaging system to be stored and associated with the specified index values.","The bursting rules provide the mapping between a report type (as specified by the posting rules) and how the report will be processed. A bursting rule preferably has the following attributes: ReportType (arbitrary name used as a link between posting rules and bursting rules), DocType (the document type that will be used for all documents extracted from the report), FileFmt (the file format of the report and it's resultant documents such as \u201ctext\u201d or \u201cXML\u201d), BurstingType (the bursting method to be used for the bursting process), and other supporting information (different for each Bursting Type).","An example of a bursting rule is shown in Table 2.",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["ReportType","DocType","FileFmt","BurstingType","SupportingInfo"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["FACE","FACESHT","TXT","First Page","Comparative text"]},{"entry":[{},{},{},"Bursting","to determine the"]},{"entry":[{},{},{},{},"first page of each"]},{"entry":[{},{},{},{},"document and"]},{"entry":[{},{},{},{},"where to find it"]},{"entry":[{},{},{},{},"on the page."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The supporting information is different for each BurstingType. The following is a list of ways to perform the bursting process (known as bursting process types):","Constant Bursting\u2014Break up a report into documents based on a fixed number of pages per document. PagesPerDoc is required as extra information for this bursting type.","Last Page Bursting\u2014Break up a report into documents based on a text string that appears on the last page of each document at a specified location. Extra information needed by Last Page Bursting includes: the text string that delimits the last page, the length of the string to be extracted for comparison, and the position of the string on the last page.","First Page Bursting\u2014Break up a report into documents based on a text string that appears on the first page of each document at a specified location. Extra information needed by First Page Bursting includes: the text string that delimits the first page, the length of the string to be extracted for comparison, and the position of the string on the first page.","Key Bursting\u2014Break up a report into documents based on a string or number that appears on the each page of the document at a specified location. When the string or number changes, a new document is burst. Extra information needed by Key Bursting includes: the text string or number that delimits each page of the document, the length of the string or number to be extracted for comparison, and the position of the string or number on the page.","Variable Bursting\u2014Enhance first page, last page and key bursting to use a variable element to locate delimiters instead of relying on them to always be in a consistent row\/column location. The variable element can be identified using various index extraction capabilities. Table 3 lists which index extraction capabilities apply to each Bursting Type.",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"Index Extraction Method","Key","First page","Last page"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Row\/Column","X","X","X"]},{"entry":[{},"Column","X","X","X"]},{"entry":[{},"Fixed From String","X","N\/A","N\/A"]},{"entry":[{},"Variable From String","X","N\/A","N\/A"]},{"entry":[{},"Variable","X","N\/A","N\/A"]},{"entry":[{},"Window","X","X","X"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}}}},"A more detailed explanation on how these capabilities work and what extra information is needed to support them is discussed in connection with index extraction below.","XML Element Bursting\u2014(a.k.a. XML Tag Bursting) Break up a report into documents based on an XML node within an XML hierarchy. Each document is made up of an instance of the desired node and the elements and attributes it contains. The extra information needed for this type of bursting is the XML XPath that specifies the node that will be the root of each extracted document.","Bulk Bursting\u2014Assume that the whole report is a document. No extra information is needed.","Bypass Bursting\u2014Discard the whole report. No extra information is needed.","Bursting process () is further preferably programmed with the following enhanced capabilities:","Pre-bursting Preparation\u2014Repaginate a report that does not contain form feeds or does not break on a key. This is in preparation for one of the above bursting processes. There are preferably two types of pre-bursting: fixed line and non-page. During fixed line pre-bursting, a form feed character is inserted after every nth line. This is preferably used on a report when it has no form feed characters. During non-page pre-bursting, all existing form feeds are removed and then re-insert based on some criteria. This is preferably used on a report when there are single pages in the report that are to be burst into multiple objects (usually because one printed page has data for multiple owners). In both cases, the report is simply read in and written back out with the form feed characters moved or inserted. The written version is then preferably used for the Bursting\/Transformation\/Indexing processes.","Header and Trailer Pages\u2014Perform special processing with the report's header and trailer pages. Either they may be ignored (not stored at all) or they may be added to documents extracted from the report. This processing may be done on reports with either a fixed or variable number of header and trailer pages. To perform this processing, certain extra information is needed. For example, to strip away a fixed number of header pages the actual number of pages is needed. Bursting process () is preferably programmed to assume that the first document begins after passing that many pages. To strip away a fixed number of trailer pages the actual number of pages is needed. Bursting process () is preferably programmed to remove that many pages from the end of the report before processing it. To strip away a variable number of header pages a delimiter (a string for comparison purposes) on the last header page or the first page of the first document may be used to determine that all header pages have been passed. The extra information needed for this includes the string to compare, the length of the string to extract from the report for comparison, and the position to expect that string in the report. To strip away a variable number of trailer pages a delimiter (a string for comparison purposes) on the last page of the last document or the first trailer page may be used to determine that all documents have been extracted. The extra information needed for this includes the string to compare, the length of the string to extract from the report for comparison, and the position to expect that string in the report.","Ignoring Carriage Returns and Line Feeds near Form Feeds\u2014Ignore carriage return characters and line feed characters when they either precede or follow a form feed character. This normalizes the number of lines on a page to facilitate the above bursting processes. The extra information needed for this is a switch indicating whether or not to ignore these characters.","Tag File Support\u2014Each page of the report is not the page that will be stored. Instead each page contains a reference (usually in the form of a file name) to the actual file\/object that will be stored as the archived page. Normal bursting processes are used on the tag file to determine how to group the pages into documents. The extra information needed for this is a switch indicating that the burst report is actually a tag file. The tag file then contains the name of the actual objects to store.","Ghost Posting\u2014Use the bursting and index extraction capabilities of background acquisition component () to update owner indexes without extracting and storing any documents from the report. The extra information needed for this is a switch indicating that this is the desired processing. Bursting process () is programmed to use this information in deciding whether NOT to store the objects and call the indexing system with updated information.","Report Backoff\u2014Delete all documents related to a report that partially processed due to errors. An administrative user or support person may preferably launch this program capability manually after investigating the reason for the errors and correcting them. Bursting process () keeps a record of the activity associated with bursting a report and then uses that information to delete all documents that were stored before the error occurred.","Transformation process () is preferably implemented for reports in XML format. In the preferred embodiment of the document processor, each page (extracted using XML Element Bursting) is transformed one or more times using XSL Style Sheets to produce one or more actual objects (each stored in a separate document). Each of these transformations may be used to create documents of different types.","Transformation rules that govern transformation process () preferably map a report type to one or more document types each with an associated XSL style sheet to transform the original extracted page into an actual page to be stored.","The following is a preferred embodiment of steps used to implement transformation process ():","1. Bursting process () initiates transformation process () when one or more transformation rules exist for the report type. The specified transformations are preferably applied to each object extracted from the report immediately after it is extracted.","2. An extracted object is transformed (preferably using industry standard XML\/XSL transformation) once for each transformation rule specified.","3. Each transformation changes the original object into a new object that is then sent to index extraction process () that is subsequently stored as a document of a type specified by the transformation rule and associated with the extracted indexes. This may result in multiple documents being created from each object extracted from the report.","The transformation rules provide the mapping between a report type (as specified by the posting rules) and a set of transforms that are preferably applied to each object extracted from reports of that type. A transformation rule has the following attributes: ReportType (arbitrary name used as a link between posting rules and bursting rules), NewDocType (the document type that will be used for all documents created as a result of the specified transform), and an XslFileName (the actual transform to apply to each XML object extracted from the report). Sample transformation rules for a single ReportType are shown in Table 4.",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"ReportType","NewDocType","XslFileName"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PTREG","FACESHT","PtRegDataToFaceSheet.xsl"]},{"entry":[{},"PTREG","PTHIST","PtRegDataToPatientHistory.xsl"]},{"entry":[{},"PTREG","INCIDENT","PtRegDataToIncidentReport.xsl"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"For documents resulting from the bursting of a report, index values should be determined for each document by indexing process (). These index values may apply to the document itself, such as the document date or type, or they may apply to target owner folders with which the document will be associated. An owner folder represents a patient or other object that can contain or \u201cown\u201d documents.","The index extraction rules that govern the extraction and valuing of indexes during the processing of a report preferably map the report's associated document type and file format to actual indexes. Each rule also includes information about the format of the index (such as text, date, numeric, etc.) and any adjustment that is to be made to extracted data before valuing the index.","The following is a preferred embodiment of steps used to implement index extraction process ().","1. Bursting process () initiates index extraction process () for each object bursted (after the object is transformed if applicable).","2. Index extraction process () maps the target document's type, along with its file format, to determine what indexes to extract and how to extract them.","3. The index extraction rules provide information about how to find, read and format each index. There are preferably a number of different methods used to perform this task. The index extraction rules also contain any extra information required to configure the specific index extraction method used, which is described in more detail below.","4. Each index is preferably extracted from the object and merged with other extracted indexes into a single XML stream. This is done preferably by specifying an XML XPath for each index that will be valued with the extracted data.","5. Once all indexes have been extracted, the resultant XML stream is preferably returned to bursting to be merged with other indexes and used to identify and organize the stored document(s).","The index extraction rules provide a mapping from a target document's type and file format to a set of indexes and how to read the data used to value those indexes. It also determines the type of the index (i.e. will it apply to the document or to the document's target owner(s) and when to extract it (i.e. once during the processing of the report or every time a document is extracted from the report. An index extraction rule preferably has the following attributes: DocType (the type that will be assigned to the newly stored document), FileFmt (the file format of the document such as TEXT or XML), OwnerType (the type of owner that will be associated with the new document\u2014if no value is assigned to this field then the index is to be applied directly to the document, not to it's owner folders), IdxLevel (the index level of the index such as \u201creport wide\u201d or \u201cdocument specific\u201d\u2014see the discussion of index levels below for more detail), IdxXPath (the XPath of the index that will be valued with the extracted data in the merged XML stream), ExtractType (the method used to extract the index data\u2014see Index Extraction Methods below for more detail), IdxPart (a sequence number indicating that the data extracted using this rule will be concatenated with data extracted using other rules to create a single index value), IdxDefVal (a default value to be assigned to the index if no data is found on the report), and other supporting information (different for each index extraction). Sample index extraction rules for a single DocType\/FileFmt are shown in Table 5.",{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["DocType\/","Owner","Extract",{}]},{"entry":["FileFmt","Type","Type","IdxXPath and SupportingInfo"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["FACESH","Encounter","Variable","XPath:"]},{"entry":["T\/TXT",{},{},"Owner[@OwnerTypeName="]},{"entry":[{},{},{},"\u2018Encounter\u2019]\/EncNo"]},{"entry":[{},{},{},"SupportingInfo:"]},{"entry":[{},{},{},"Comparative text to determine the"]},{"entry":[{},{},{},"first page of each document and"]},{"entry":[{},{},{},"where to find it on the page."]},{"entry":["FACESH","Encounter","Variable","XPath:"]},{"entry":["T\/TXT",{},{},"Owner[@OwnerTypeName="]},{"entry":[{},{},{},"\u2018Encounter\u2019]\/EncStartDate"]},{"entry":[{},{},{},"SupportingInfo:"]},{"entry":[{},{},{},"Comparative text to determine the"]},{"entry":[{},{},{},"first page of each document and"]},{"entry":[{},{},{},"where to find it on the page."]},{"entry":["FACESH","Encounter","Variable","XPath:"]},{"entry":["T\/TXT",{},{},"Owner[@OwnerTypeName="]},{"entry":[{},{},{},"\u2018Encounter\u2019]\/Owner[@Owner"]},{"entry":[{},{},{},"TypeName=\u2018MedRec\u2019]\/MedRecMRN"]},{"entry":[{},{},{},"SupportingInfo:"]},{"entry":[{},{},{},"Comparative text to determine the"]},{"entry":[{},{},{},"first page of each document and"]},{"entry":[{},{},{},"where to find it on the page."]},{"entry":["FACESH",{},"Variable","XPath:"]},{"entry":["T\/TXT",{},{},"DocDateTime"]},{"entry":[{},{},{},"SupportingInfo:"]},{"entry":[{},{},{},"Comparative text to determine the"]},{"entry":[{},{},{},"first page of each document and"]},{"entry":[{},{},{},"where to find it on the page."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The supporting information is preferably different for each extract type and is described below for each method.","The combination of DocType and FileFmt is used to map index extraction rules so that two reports resulting in documents of the same type (e.g. a patient bill) can be processed differently based on the format of its content (e.g. indexes are extracted from a TEXT report using different techniques than indexes extracted from an XML formatted report).","There are preferably two types of indexes valued by the index extraction process: document indexes and owner indexes. Document indexes are indexes that apply to the actual document(s) being stored such as the document date, create date\/time, status, etc. Owner indexes are indexes that apply to the owner(s) in which a document will be filed. The \u201cOwner Type\u201d attribute of the index extraction rule specifies what the index's type will be. If the owner type is valued, the index is an owner index; otherwise, it is a document index.","An index level refers to when an index value is extracted and for which document or documents that index will apply. There are preferably two index levels supported by background acquisition component (): report and document. Report level indexes index values that apply to every document extracted from a report or for every document's owner(s). Below is a sample list of ways to value report level indexes:","Rule Defaulted Index\u2014An index assigned a pre-determined value by the index extraction rule.","Passed Index\u2014An index valued from information passed into the background acquisition component (), either from Poller () or from an application calling background acquisition component () directly. This information generally comes from the XML streams passed into posting process ().","Header\/Trailer Index\u2014An index valued from information extracted from the header and\/or trailer pages of a report.","First Document Index\u2014An index valued from information extracted from the first document burst from a report.","Document level indexes index values that apply to the current document being stored or to that document's associated owner(s). These indexes are preferably valued using information extracted from the document being stored.","The following is a list of preferred index extraction methods programmed into index extraction process ():","No Extraction\u2014No value is extracted. Date indexes may be valued to today's date while all other indexes are explicitly set to no value. The extra information needed for this index extraction method is a switch indicating whether or not to use \u201ctoday's date\u201d to value the index if and if the index is a date field.","Row\/Column Extraction\u2014Extract the index from the document based on a fixed set of coordinates. The extra information required for this method includes the page on which the index may be found (relative to the document being extracted), the line (a.k.a. row) and column on that page where the index may be found and the length of the index (i.e. the number of characters to read).","Column Extraction\u2014Search down a column until a valid index is found and then extract that index. Extra information for this method includes: the column in which to search for the index, the page on which the index may be found (relative to the document being extracted), the length of the index (number of characters to be read), the minimum number of digits if the index is a numeric fields, and\/or the date format if the index is a date field.","Fixed From String Extraction\u2014Search for a specified string then extract the data at a specified offset from the string. Extra information for this method includes: the page on which the index may be found (relative to the document being extracted), the string to search for, the distance (or offset) in characters from the string to the actual index data, the expected date format (if the index is a date field), the minimum number of digits required (if the index is a numeric field), and the length of the index (number of characters to be read).","Variable From String Extraction\u2014Search for a specified string then extract the data at a variable offset from the string. Extra information for this method includes: the page on which the index may be found (relative to the document being extracted), the string to search for, the expected date format (if the index is a date field), the minimum number of digits required (if the index is a numeric field), and the length of the index (number of characters to be read). Date and numeric indexes are supported by this method.","Variable Extraction\u2014Search for either a date or a numeric from the beginning of the object and extract it. Extra information for this method includes: the page on which the index may be found (relative to the document being extracted), the expected date format (if the index is a date field), the minimum number of digits required (if the index is a numeric field), and the length of the index (number of characters to be read). The whole page is searched until a valid index is found or the end of the page is reached. Date and numeric indexes are preferably supported by this method.","From Previous Index Extraction\u2014Extract an index located at an offset from a previously found index. Extra information for this method includes: the page on which the index may be found (relative to the document being extracted), the row offset (i.e. the number of rows to move) from the previous index, the fixed column to find the index data (NOT an offset from the previous index), the expected date format (if the index is a date field), the minimum number of digits required (if the index is a numeric field), and the length of the index (number of characters to be read). It is common to use multiprocessing (discussed below) with Extract from Previous Index but the two are functionally independent.","XML Element Extraction\u2014(a.k.a. XML Tag Extraction) Search an XML document for nodes specified by an XML XPath. The extra information for this method is the XPath of the XML tag that contains the index data.","Window Extraction\u2014Search a row\/column window until a valid index is found then extract that index. Extra information for this method includes: the page on which the index may be found (relative to the document being extracted), the row\/column window in which to look for the index (the minimum line and column to the maximum line and column), the expected date format (if the index is a date field), the minimum number of digits required (if the index is a numeric field), and the length of the index (number of characters to be read). Date and numeric indexes are preferably supported by this method.","Default Extraction\u2014Assign a specific default value to an index. Nothing is extracted from the document. If the index is a facility\/entity identifier then the value is assigned based on either what's passed in to the Posting process via the Origin stream or by a configuration parameter that maps the report name to a specific facility\/entity identifier; otherwise, the value to be assigned is taken from extra information in the index extraction rule.","Index extraction process () is preferably programmed with the following enhanced capabilities:","Ignoring Carriage Returns and Line Feeds near Form Feeds\u2014Ignore carriage return characters and line feed characters when they either precede or follow a form feed character. This has the advantage that it normalizes the number of lines on a page to facilitate the specification of \u201cRow\u201d and \u201cLine\u201d values in the above index extraction methods.","Multiprocessing\u2014Associate a document with more than one instance of an owner whose type is specified by the filing rules in ownership component (). For example, a single document may contain data for many patients. The filing rules would specify that documents of that type should be filed to an encounter folder. This document would be filed to the encounter folder for every patient listed in the document.","Data Adjustment\u2014Manipulate extracted data before assigning it as a value to an index. Below is a list of ways that extracted data can be manipulated.","No Adjustment\u2014Assign the data to an index as extracted. This is a simple assignment.","Numeric Adjustment\u2014Eliminate leading and trailing whitespace (e.g. spaces, tabs, etc.) then validate the data as a string of digits. This can be enhanced further to include Self Check Digit (SCD) validation which involves using the last digit as a checksum value calculated using modulo arithmetic on the preceding digits (the types of modulo arithmetic that are possible include simple modulo-10, simple modulo-11, and a modified modulo-11 where the potential resultant value of 10 is configurably mapped to a different digit but is usually zero).","Date Adjustment\u2014Validate the data as a date then normalize according to configurable parameters. Possible normalizations may include none (i.e., do not change the date in any way), normalize to beginning of the extracted date's week (this involves changing the date to the first day of the week in which the date falls\u2014note that the first day of the week is configurable), normalize to a specific day of the extracted date's month (this involves changing the date to a specific date of the month in which the date falls\u2014this is usually the first of the month but this is configurable), and normalize to the first day of a specified month of the extracted date's year (this involves changing the date to the first day of a month of the year in which the date falls\u2014the month is usually January but this is configurable).","Literal Month Adjustment\u2014Validate the data either using Date Adjustment or as a numeric between 1 and 12 (with a possible adjustment of +\/\u2212 some number of months) then convert the data to the name of the represented month in string format.","Text Adjustment\u2014Justify and pad the data according to configurable parameters. Possible justifications are: none, right, or left. Possible paddings are: none, precede with zeros, or add spaces. This preferably applies if the length of the string index is fixed and the data is less than that length. A padding type of \u201cprecede with zeros\u201d should be accompanied by right justification. A padding type of \u201cadd spaces\u201d may be used with right or left justification (where the spaces are added to the beginning if the index is right justified and added to the end if the index is left justified). For ease of implementation, padding types of \u201cnone\u201d and \u201cadd spaces\u201d are essentially synonymous for right and left justification.","Mapping\u2014Change the data from the extracted value to another literal value based on some criteria applied to the extracted value. Multiple mappings may be specified for an index and the mappings are preferably defined in one of two ways: change the data value to the mapped value if the extracted value matches the specified text mask, or change the data value to the mapped value if the extracted value does NOT match the specified text mask. The text masks and their mapped values are specified in the index extraction rules. For a given index, the matching mappings should all be checked first, followed by a single not matched mapping.","Once all objects for a document have been burst from the report and the indexes have been valued for the document and intended target owners, background acquisition component () sends all of the information to other components of the document-imaging system so they can be stored and associated with the proper indexing information. This is preferably done in a conventional manner such as by calling application programming interfaces (API's) implemented by those other components and can be configured to occur conditionally.","Background acquisition component () preferably integrates with external applications and with users by using an asynchronous service that takes a report along with information regarding the origin of the request, initial values for document indexes, and possibly an explicit specification of the owner (or owners) to which the extracted documents are to be filed. Applications and systems that call posting process () are themselves considered acquisition sources. This service is exposed for public use via an HTTP request made to the document-imaging system web server (preferably running on Windows 2000 or higher and using Microsoft Internet Information Server, although not limited thereto. This HTTP request preferably uses standard HTTP-Post with an XML stream as input. All acquisition sources that feed background acquisition component () are preferably implemented using Poller (). They are asynchronous and involve interfaced data exchange rather than direct service integration.","User interface () contains a set of interfaces that are programmed to allow administrators and support personnel to define, configure, and manage the document processor. An example of how these interfaces may be configured is described in more detail below in connection with )\u2013(). ), is a computer screenshot illustrating the user interface () to the document-imaging system. As shown in ), the user interface may operate as a plug-in viewer to an Internet Web browser (), such as Microsoft's Internet Explorer (although not limited thereto). User interface () may include tool bar (), having administrator menu (), operations menu (), folder and documents menu (), options menu (), and help menu ().","Administrator menu () has been expanded to show all available administrative options for the document imaging system. All of the menu items for the document processor appear between \u201cConfiguration Settings\u201d and \u201cSecurity\u201d on administrator menu ().","To set up a bursting rule, the user selects the \u201cBursting Rules\u201d option on administrator menu (). The Maintain Bursting Rules window () appears, which is illustrated in ). The Maintain Bursting Rules screen serves two interrelated purposes. First, it provides the means by which background acquisition component () associates the report type to the bursting rule. Next, it identifies how to break the report up into pieces.","As shown in ), the administrator may use Maintain Bursting Rules window () to configure all of the bursting rule criteria discussed above, including specifying the report type () along with the document type and file format (), specifying how to handle header pages (), specifying how to handle trailer pages (), selecting a bursting type and specifying its options (), and specifying how to handle optional processing. The administrator may create, revise, save, and delete a rule by selecting the appropriate button ().","The administrator may configure the index extraction rules in a similar manner by selecting \u201cFiling Index Extraction Rules\u201d from administrator menu (). The Maintain File and Index Extraction Rules window () appears, which is illustrated in ). The administrator may select the document type (), the filing rules (), the specifics of the index extraction rule (), filtering (), index data formatting (), and mapping (). As with the bursting rules, the user may create, revise, save, and delete the index extraction rules using buttons ().","Although this invention has been described with reference to particular embodiments, it will be appreciated that many variations will be resorted to without departing from the spirit and scope of this invention as set forth in the appended claims. For example, the terms \u201ccomputer\u201d, \u201ccomputer system\u201d, or \u201cserver\u201d as used herein should be broadly construed to include any device capable of receiving, transmitting and\/or using information including, without limitation, a processor, microprocessor or similar device, a personal computer, such as a laptop, palm PC, desktop, workstation, or word processor, a network server, a mainframe, an electronic wired or wireless device, such as for example, a telephone, an interactive television, such as for example, a television adapted to be connected to the Internet or an electronic device adapted for use with a television, a cellular telephone, a personal digital assistant, an electronic pager, a digital watch and the like. Further, a computer, computer system, or system of the invention may operate in communication with other systems over a communication network, such as, for example, the Internet, an intranet, or an extranet, or may operate as a stand-alone system."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 3(","i":["a","c"]}]},"DETDESC":[{},{}]}
