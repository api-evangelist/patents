---
title: Contact text box
abstract: A contact text box interface for resolving user input with contact information selected from contact directories and compared against usage patterns. Users are provided with a list of potentially relevant contacts from which a selection can be made. When a contact is selected, the corresponding and appropriate contact information is automatically provided to the application. Various criteria can be used to identify which contacts will be presented to the user and how they will be presented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07430719&OS=07430719&RS=07430719
owner: Microsoft Corporation
number: 07430719
owner_city: Redmond
owner_country: US
publication_date: 20040707
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. The Field of the Invention","The present invention relates to user interface menus in computers and electronic devices and, more particularly, to methods, systems, and computer program products for identifying, resolving and displaying desired contact information in computer applications.","2. Background and Relevant Art","The term \u201ccontact,\u201d as described herein, generally refers to any person, group, organization, business, household, or other type of identifiable entity. The term \u201ccontact information,\u201d as defined herein, generally refers to any information that corresponds to a contact and that may be considered relevant for identifying, contacting, accessing, corresponding or communicating with the contact. In the context of the present application, contact information is used by an application to perform a desired function, such as, for example, sending an email, initiating a telephone call, accessing a website, initiating a gaming session, performing a financial transaction, and so forth. Non-limiting examples of contact information include names, aliases, telephone numbers, email addresses, home addresses, instant messaging (IM) addresses, and web addresses. In some instances, as described herein, contact information can also refer to physical characteristics of a contact. For example, facial mapping characteristics, fingerprints and other characteristics that can be used to identify a contact can also be broadly considered as contact information.","Many applications require contact information. Examples of some applications that require contact information include email applications, network gaming applications, instant messaging applications, telephone and telephony applications, Internet applications, financial applications, word processing applications, and business management applications.","Applications that require contact information typically provide interfaces and menus for entering the desired contact information within one or more \u201ctype-in\u201d lines. \u201cType-in\u201d lines generally comprise an input field configured to receive user input comprising typed text or other characters that can be used to generate desired contact information. For example, an email interface will typically include type-in lines for receiving text comprising the email addresses of the intended email recipients. Contact information is typically typed directly into the appropriate type-in lines, hence the name.","Some interfaces are also configured to automatically populate a type-in line with desired contact information, which is obtained from a directory corresponding to the particular application. For example, email applications typically include interface menus for looking up the email addresses of the contacts that are stored within the email contact directory. Likewise, a telephony application typically includes interface menus for looking up and accessing the telephone numbers of the contacts stored in the telephony contact directory. This search functionality provided by some interfaces is useful for helping to identify and select contact information that has either been forgotten or that is undesirably too long for manual entry.","Although existing interfaces for obtaining contact information are useful for their intended purposes, their utility is somewhat limited because they are specifically catered for a particular application. (e.g., Email search interfaces are configured to obtain email addresses, telephony search interfaces are configured to obtain telephone numbers, etc.) Furthermore, the vast array of different interfaces, each having its own unique characteristics, has complicated the task of learning how to utilize the interfaces to search for and obtain the desired contact information.","Despite the advances that have been achieved in this technology, there are still on ongoing needs to improve the methods and systems for identifying and displaying contact information.","The present invention is directed to improved methods, systems, and corresponding computer program products and interfaces for identifying and displaying contact information.","According to one aspect of the invention, a contact text box provides a user interface for displaying contact information. The contact text box can be customized for use with virtually any application that receives user input and requires the use of contact information.","The contact text box receives a request from an application to resolve user input that is received by an application, presumably, but not necessarily, within a type-in line provided by the application. The contact text box then utilizes any number of resolvers to query and compare the user input against usage pattern data comprising contact information.","Matches between the user input and the usage pattern data are displayed by the contact text box for selection by the user. In some instances, the displayed matches are also organized in accordance with the usage pattern data. For example, the matches that have the most frequent use can be displayed first, inasmuch as it is more likely that such matches will be selected by the user than matches that are not as frequently used.","In other instances, the contact text box also segments the displayed matches into groupings based on the resolvers or databases that are used to identify the matches. For example, matches identified by a first resolver searching for contacts stored in a work directory can be visually segmented from matches identified by a second resolver searching for contacts stored in a personal contacts directory.","When a displayed match is selected through appropriate user input, the user input is resolved, such that said match is used to provide the desired contact information to the calling application. In some instances, the resolved user input is replaced with a corresponding user interface (UI) object that is visually distinct from other user input entered in the type-in line. The UI object can also be configured in such a way that it cannot be modified, but only deleted.","Once the application uses the contact information to perform a desired function, the usage pattern data corresponding to that contact information is updated so that a subsequent query against that usage pattern data will be accurate and current.","At any point before a contact match is selected, additional user input comprising additional text can also be received. This new textual user input causes the resolvers to dynamically update their queries against the usage pattern data with the new text, and such that the list of matches will be dynamically updated as well. If only a single unambiguous match or possible resolution exists, that match is used to supply corresponding contact information to the calling application.","If a selected match corresponds to a plurality of possible contact information options, e.g., multiple different email addresses, for example, the plurality of different options are displayed for selection. In some instances, however, the various options corresponding to a match are not displayed unless the match is selected first.","Any number of matches and contact information can be identified and displayed in the foregoing manner. Additional features and advantages of the invention will be set forth in the description which follows, and in part will be obvious from the description, or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","The present invention is directed to improved methods, systems, and corresponding computer program products and interfaces for identifying and displaying desired contact information. Upon receiving user input corresponding to contact information, an application calls a contact text box to resolve the user input and to identify and display matches corresponding to the user input. The contact text box utilizes one or more resolvers to compare the user input against usage pattern data in one or more contact information directories. Matches that are identified by the resolvers are displayed by the contact text box.","When a match is selected, or it becomes clear which match should be selected, that match is used to resolve the user input. Resolved user input is then replaced with a new UI object corresponding to the matching contact information, visually indicating to the user that their input has been resolved. The contact information corresponding to the UI object is then provided to the application for use.","As described above, the embodiments of the invention can include the use of resolvers, which comprise computer modules, and user interfaces, all of which can be created and utilized with special purpose and general-purpose computing systems including various computer hardware and software, as discussed in greater detail below in reference to .","In some embodiments the computer modules, interfaces and other computing software are stored on one or more computer-readable media having computer-executable instructions for implementing the methods described herein. Such computer-readable media can be any available media that can be accessed by a general purpose or special purpose computer. By way of example, and not limitation, such computer-readable media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to carry or store desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer-readable media. Computer-executable instructions comprise, for example, instructions and data which cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions.","General Computing Modules and Components",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","110","120","110","100","200","110"]},"During use the computing system utilizes a contact text box user interface to display desired contact information at the display device. The functionality of the user interface to display desired contact information is enabled by various computer modules, such as user interface module , remote store interface module , schema module , conflict resolver module , and communication module , each of which will now be described.","The user interface module  includes sufficient computer-executable instructions for operably displaying the contact text box at the display device and for responding to user input entered at the user interface. The communication between the contact text box and the user may occur through a separate application hosting the contact text box.","The remote store interface module  includes sufficient computer-executable instructions for searching through and comparing user input against contact information stored at remote devices, such as remote device . Remote device  may be a remote computer, or server containing contact information. Remote store interface module  can also leverage usage pattern module  to specifically compare user input against contact information stored at remote devices and to send requests to the remote devices to update their contact information to reflect the most recent use of the contact information.","The usage pattern module  contains sufficient computer-executable instructions for querying contact information that is stored in local stores, such as storage media . The usage pattern module  queries the local stores to look for matches between user input and contact information stored in the local stores. According to some embodiments, the usage pattern module  queries the usage pattern data in the local stores to identify how and when matching contact information has been used.","The usage pattern module  and remote store interface module  utilize one or more dedicated resolvers that are configured to perform the queries and comparisons between the user input and usage pattern data that have been described above. The contact text box of the invention can utilize any number of resolvers. The resolvers can be dedicated, for example, to search different contact information directories within the local or remote computing systems. The resolvers can also be configured to search within the same or different contact information directories according to different search criteria (e.g., most recent use, most frequent use, most commonly grouped with, etc).","The communication module  includes sufficient computer-executable instructions for enabling communication between the various modules, as well as the display device , the remote device , and the storage media of the remote device  and the computing system . In particular, the communication module enables the modules to access and process contact information that is stored in one or more contact information directories that may be stored locally and remotely.","The present embodiment illustrates three contact information directories, , , and . In some embodiments, these contact information directories can correspond to different applications. For example, directory can correspond to an email application and directory can correspond to a telephony application. In such embodiments, each directory , , and will include information that is application specific (e.g., the email application directory will have email addresses). When the directories are separated in this manner, the resolvers are specifically configured to interface with and search through the directories for contact information and usage pattern data.","In other embodiments, the resolvers are configured to search through a consolidated directory or cache that comprises a compilation of two or more different directories. Although this embodiment may require an increase in storage capacity, it can be useful to expedite the searching processes described above.","Despite the foregoing examples, it will be appreciated that the invention extends to various embodiments utilizing and accessing any combination of local, remote, independent and consolidated contact information directories.","Contact Text Box and Methods of Use",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 2","FIG. 2","FIGS. 3-4"],"b":["200","210","220","230","240","250","260","270"]},"The first act of the illustrated method includes receiving a request to resolve user input. This request can be generated by an application in response to any instructions or user input. In one example, an application generates a request to resolve user input in response to a user typing input into an input object, such as a type-in line. Other types of user input can also include tabbing a prompt into a type-in line or hovering a pointer (e.g., a mouse pointer) over a type-in line. U.S. patent application Ser. No. 10\/324,746, filed Dec. 19, 2002, entitled CONTACT PICKER, which is incorporated herein by reference, provides additional details regarding the types of user input that can be used to initiate a search for matching contact information and corresponding methods for searching for that contact information.","Inasmuch as different applications have different requirements and interfaces, the contact text box can be configured in different ways to accommodate different needs and preferences. Accordingly, upon receiving a request to resolve user input from an application, and as specified, an instance of the contact text box is opened at an appropriate predefined location. As further specified, one or more resolvers of the contact text box are used to query one or more appropriate contact information directories for potentially matching contact information (\u201cmatches\u201d).","As the resolvers query the contact information directories, they compare the user input against usage pattern data that is stored in the contact information directories. The usage pattern data can include any data identifying a manner and\/or time in which the stored contact information has been used. Preferably, the usage pattern data is updated on a regular basis, if not on the fly, so that it is current and accurate. U.S. patent application Ser. No. 10\/836,776, filed Apr. 30, 2004, entitled \u201cMethod and System for Recording and Accessing Usage of an Item in a Computer System\u201d, which is incorporated herein by reference, provides additional details regarding usage pattern data.","One purpose of querying the contact information directories is to obtain a filtered list of contacts that are most likely to be selected by a user. The determination as to what contacts are most likely to be selected by a user can be based on various criteria, however, including, but not limited to the frequency of selecting particular contacts, the last selected contacts, network or geographic proximity of the contact, compatibility of the contact's communication devices, and so forth. Accordingly, the resolvers can be customized to search according to any predefined criteria as they compare the user input against the usage patterns corresponding to the stored contact information, as mentioned above (act ).","Preferably, although not necessarily, the contact information that is searched by the resolvers is contextually relevant to the type of application that is hosting the contact text box. For example, if the application hosting the contact text box comprises an email application, the resolvers will be configured to search for contact information comprising email addresses.","According to another embodiment, the resolvers are also configured to identify contact information matches that are most likely to be selected by the user. In particular, the usage patterns can include implicit aging properties that are based on temporal information such as, but not limited to, the frequency of selection, the time of last selection, and so forth. In other words, a contact can become \u2018less likely to be selected by a user\u2019 the longer the associated contact has not been selected. In this regard, the matches of contact information identified by the resolvers will not only be application relevant, they can also be filtered according to a most likely to be selected criteria.","The resolvers can compare user input against usage patterns (act ) at the same time the contact text box identifies matches. Identifying a match typically includes the process of finding a match between the textual input entered by a user and the characters of an application relevant contact information entry (e.g., email address, it, telephone number, etc.). Although the match may be exact, it is not necessary. In fact, in some instances, the resolvers can perform \u2018fuzzy\u2019 matching to identify similar but different strings. U.S. patent application Ser. No. 10\/324,746, entitled CONTACT PICKER, which is more fully identified above, provides additional details regarding fuzzy matching.","Although the foregoing examples relate to matching textual characters, it will be appreciated that matching can also be performed using other criteria, such as physical characteristics of a contact. For example, in a photo viewer application, one might be interested in associating a contact with the image of a person in a photo. Accordingly, for such an application, matching can be performed on non-textual characteristics or attributes, such as the facial characteristics identified by an image mapping program, for example, In such an embodiment, a resolver can match or otherwise correlate a contact with a particular set of facial characteristics.","To support embodiments in which matching is performed on criteria other than textual criteria, it will be appreciated that the contact information directories described above can include repositories of image maps and other non-textual characteristics and attributes that can be accessed by the modules described above.","As mentioned above, the criteria used to find matches and that are used to compare user input against usage patterns can also be used to filter or organize the list of contacts that are displayed to the user in a particular order. For example, a list of contacts displayed by the contact text box can be organized by placing the contacts that have the highest likelihood of selection at the top of the list. Other structured orders and sequences for listing the matching contacts or contact information can also be used.","Although the contact text box largely determines which contacts will be displayed, it will be appreciated that the displayed lists of contacts can also be controlled by the application hosting the contact text box. In particular, the applications hosting the contact text box can specify any number or combination of required characteristics a contact must possess in order to be listed by the contact picker. For example, the hosting application can also specify via a corresponding API or contact picker interface to only show contacts who are online, to only show contacts who reside in a particular region, and so forth. This is further described in the aforementioned U.S. patent application Ser. No. 10\/324,746, entitled CONTACT PICKER.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 3","b":["300","310"]},"The contact text box  is displayed, in the present embodiment, in response to the application receiving user input and upon the application issuing a call to the contact text box  to resolve said user input.","Upon receiving the call from the application, the contact text box uses one or more resolvers to query one or more contact information directories for contacts or contact information matching the user input. Any contacts or contact information that are determined to match the user input are considered herein to be a \u201cmatch.\u201d It will be appreciated that any algorithm and set of criteria can be used to determine whether a match exists.","Before, during or after the matches are identified, the resolvers compare the user input against usage patterns that are associated with the contact information. In one embodiment, the comparison of the user input to the usage patterns is performed only after the matches are identified, and only to the matches, thereby conserving the resources that would otherwise be required to compare the user input to usage patterns of contacts that will not be displayed.","In other embodiments, comparison of the user input to the usage patterns is performed irrespective of the identified matches, thereby independently identifying possible additional contacts that can be displayed by the contact text box for the user to consider. This embodiment can be useful, for example, when the usage pattern being considered includes references to associated or related contacts. For example, if the user input ultimately matches a contact by the name of \u201cJudd\u201d, as shown in , and Judd is almost always emailed in concert with a related contact named \u201cMike\u201d, it can be useful, in some instances, to display Mike's contact information along with Judd's.","The embodiment of  illustrates one technique for displaying matching contacts (act ). As shown, six contacts are displayed, each having been identified as matching the user input entered into the application type-in line . Each of the contacts can be associated with a property or piece of contact information that is needed by the application to perform a certain function. For example, in the present embodiment, each of the displayed contacts is associated with an email address that will be provided to the application if the corresponding contact is selected.","In some circumstances, a contact can also be associated with multiple values for the same property. For example, a single contact can have different email addresses, including a work email address, a school email address, a personal email address, and so forth. In such circumstances, with no loss of generality, said contact can be displayed multiple times, once for each property value. Additionally, or alternatively, the contact can also be highlighted or displayed in another distinct manner that indicates to the user that multiple values of the required property are present. The user can then view the multiple values by selecting the contact or by moving focus to the contact.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 3","b":["330","340","300"]},"In this embodiment, as well as others, a user can click a mouse prompt over the contact  or otherwise select or direct focus to the contact  to view the various values associated with the contact and to select the desired contact information to be supplied to the application. It will be appreciated that when multiple values are associated with a single contact, the corresponding list of values associated with the contact can be arranged in any desired order, including, but not limited to an order based on a likelihood of selection as generally described above with reference to organizing the list of displayed contacts.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 3","b":["300","350","360","370"]},"When one of the listed contacts is selected, such as with the click of a mouse pointer or with other selection input (act ), the contact information corresponding to the selected contact, which is appropriate for the particular application, is inserted into the type-in line. What is considered \u201cappropriate contact information\u201d is generally application specific and corresponds to information that is required to perform a desired function with the application. For example, the appropriate contact information for an email application may include the email address of a contact that is necessary for sending an email message. The appropriate contact information may also be specified according to other criteria, such as by the directory from which the contact information is obtained, and so forth.","According to one embodiment, the applications specify what contact information is required by the applications. For example, if an application requires an email address then the application will specify to the contact text box that the appropriate contact information comprises email addresses so that they can be obtained and displayed by the user interface accordingly. It will be appreciated, however, that the user interface can also be configured with security mechanisms to prevent the application from obtaining contact information that is not required by the application.","When the appropriate contact information is provided to the application in response to a user selection of the corresponding contact, it can be said that the user input has been resolved (act ). Resolving the user input (act ), however, can also occur before a user selects a contact from the list provided by the contact text box . For example, if only a single unambiguous match exists for the user input, that input can automatically be resolved, thereby providing the correspondingly appropriate contact information to the application, and without first receiving an explicit user selection of a contact from the contact text box list.","Once the user input has been resolved (act ) the resolved user input is replaced in the contact text box and\/or application input field with a user interface object corresponding to the resolved user input, which may or may not comprise a selected contact, as described above.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 4","FIG. 3","FIG. 3"],"b":["420","420","420","420","420"]},"As mentioned above, user input can be resolved by selecting a contact from the contact text box, such as by selecting Judd Filmore  from contact text box . Alternatively, the user input can be resolved in response to receiving additional user input (act ) that narrows the available matching options down to only a single possible contact. For example, with reference to , if additional user input comprising the text \u201cudd\u201d was received after the user input comprising the letter \u201cj\u201d, the combined text \u201cJudd\u201d might only match a single possible contact, in which case the combined text can result in the automatic resolution that Judd should be selected and that the correspondingly appropriate contact information should be provided to the a hosting application. Although this result may be desired, there may also be situations in which this result is not desired. For example, the user might be attempting to write to a new Judd that is not identified by any of the queried contact information directories. In this case, it would be undesirable to automatically resolve the text \u201cJudd.\u201d","Accordingly, in one alternative embodiment, the textual input provided to the application is only resolved automatically, without the explicit selection of a contact, when it is determined that a delimiting character has been received. Some examples characters that can sometimes be used as delimiting characters include the colon, semi-colon, coma, period, tab, hyphen, dash, asterisk, pound sign, exclamation, closed parenthetical, and other symbols that can be distinguished from non-limiting characters. This list of delimiting characters, however, is merely illustrative and should not be construed as limiting the scope of the invention. In fact, essentially any character can be construed as a limiting or delimiting, as predefined by the settings applied to the contact text box.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 4","FIG. 3","FIG. 4"],"b":["400","410","420","430","400"]},"The new user input received in  has resulted in the generation of new contact matches which are categorized into to groupings  and . Unlike , however, the groupings  and  in  include titles  and  that correspond to the directories from which the contacts were selected, to more clearly distinguish the two groups in addition to the separation provided by line . It will be appreciated, however, that the titles do not necessarily need to be linked to the databases that are searched. In other embodiments, for example, the titles can be linked to the description of the criteria used to search the databases (e.g., most recently used, last received mail from, etc.), or any other criteria.","Although the previous examples have been provided with respect to email functionality, it will be appreciated that the scope of the invention extends to other embodiments in which the contact information is utilized by other application to enable different functionality. For example, other applications may utilize the contact information to initiate a telephony session, initiate a telephone call, initiate a network connection, initiate a gaming session, access a website, perform a financial transaction, send material goods via postal mail, and so forth.","Attention will now be directed to an embodiment for creating and applying a contact text box using C#. The following segment of C# code can be used as the building block for creating a contact text box:",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class MyEmailClientWindow: Window"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Create canvas inside window where Contact Text Box will be"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"displayed"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Canvas canvas = new Canvas( );"]},{"entry":[{},"\/\/ Make sure canvas covers entire window contents"]},{"entry":[{},"Canvas.Width = canvas.Height = new Length(100f,"]},{"entry":[{},"UnitType.Percent);"]},{"entry":[{},"\/\/ Attach canvas to window"]},{"entry":[{},"this.Content = canvas;"]},{"entry":[{},"\/\/ Create Contact Text Box control of desired dimensions"]},{"entry":[{},"ContactTextBox contactTextBox = new ContactTextBox( );"]},{"entry":[{},"contactTextBox.Width = new Length(500); \/\/ sets width to 500 pixels"]},{"entry":[{},"contactTextBox.Height = new Length(60); \/\/ sets height to 60 pixels"]},{"entry":[{},"\/\/ Position Contact Text Box inside canvas"]},{"entry":[{},"Canvas.SetLeft(contactTextBox, new Length(50)); \/\/ sets left edge"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"position"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Canvas.SetTop(contactTextBox, new Length(50)); \/\/ sets top edge"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"position"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Select property type Contact Text Box will return"]},{"entry":[{},"contactTextBox.PropertyType= ContactPropertyType.EmailAddress;"]},{"entry":[{},"\/\/ Attach Contact Text Box to canvas so it gets displayed"]},{"entry":[{},"canvas.Children.Add(contactTextBox);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"After the user has entered contact information in the Contact Text Box, the following code skeleton can be used to retrieve the desired properties (e.g., email addresses) for all the contacts that were successfully resolved:",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Walk the resolved items collection"]},{"entry":[{},"foreach(ResolvedItem item in contactTextBox.ResolvedItems)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Display each resolved text"]},{"entry":[{},"Console.WriteLine(item.ResolvedText);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In some cases, text strings are not resolved automatically in response to receiving additional user input. In such cases, the following line of code can be used to force resolution of the user input.",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Force contact resolution and present GUI if not successful"]},{"entry":[{},"contactTextBox.Resolve( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If resolution of the user input is not possible, the user can also be notified to resolve that text manually by selecting other contacts. If a desired contact is not listed by the contact text box, the user can select a \u201cfind more\u201d button on the contact text box, such as buttons  and , which can search for matches using fuzzy matching or a looser set of constraints. The find more button can also launch a contact interface that provides a more comprehensive list of available contacts, such as the interface described in more detail in the aforementioned U.S. patent application Ser. No. 10\/324,746, entitled CONTACT PICKER, or an interface, such as that described in U.S. patent application Ser. No. 10\/324,250, entitled CONTACT USER INTERFACE, which was filed on the same day and which is incorporated herein by reference.","From the perspective of an application programming interface developed for obtaining contact information according to the invention, a function call or request is generated for a contact text box or interface by an application in response to a user input received by the application. The API then utilizes appropriate computer-executable instructions, such as the code shown above, to generate the contact text box. During the generation of the contact text box, appropriate contact information directories or repositories are queried by the contact text box resolvers to identify a list of contacts that match the user input and that are likely to be selected by the user, along with their corresponding contact information based on usage pattern data compared against the user input.","The identified contacts are then displayed with or without the contact information which will be utilized by the application. Upon receiving a user selection of a displayed contact, the contact text box API then passes the correspondingly appropriate contact information on to the application. The correspondingly appropriate contact information is the contact information that will be used by the application to perform a desired function (e.g., initiate a call, send an email, etc), as specified by the application.","In embodiments where the contact information is not displayed with the contact, the selection of a contact prompts the API to identify and display the contact information related to the selected contact. Thereafter, contact information that is selected by the user is passed on to the application.","It will be appreciated, however, that the foregoing examples of the API and code corresponding to the contact picker dialog are merely illustrative and should not, therefore be construed as limiting the scope of the invention. To the contrary, various different types of code can be implemented by programming interfaces to enable the methods of the invention, for obtaining, displaying and providing desired contact is information.","Furthermore, although many of the examples provided herein are directed to email interface applications, the invention also extends to other applications, including, but not limited to telephony and telephone applications, network gaming applications, financial applications, time management applications, information kiosk applications, internet applications, word processing applications, facsimile and telecopy applications, design applications, image and photo applications, and so forth. Furthermore, even though many of the embodiments shown and described above illustrate interfaces displaying only a limited number of contacts and contact information, it will be appreciated that the interfaces may be modified to display any desired number of contacts and any variety of corresponding contact information.","It will also be appreciated that although many of the embodiments described above relate to providing a listing of contacts by name, the list of contacts may also include rich contact objects (e.g., images) that can be used to ascertain information about the listed contacts. By way of example, and not limitation, each listed contact may be displayed with a corresponding rich tile image that displays certain attributes and that links to other information.","In summary, the present invention provides methods, systems, and computer program products including user interfaces or dialogs, for obtaining and displaying contact information. The interfaces of the invention can be used in various applications to search for and display contact information from a variety of contact information directories. Although many examples are provided with respect to providing contact information when focus input is directed at a type-in line that the scope of the invention extends to embodiments in which focus input is directed to other input objects, such as fields, cells, images, and so forth.","Operating Environment",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 5"},"Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by computers in network environments. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Computer-executable instructions, associated data structures, and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.","Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations, including personal computers, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked (either by hardwired links, wireless links, or by a combination of hardwired or wireless links) through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a computing system in the form of a conventional computer , including a processing unit , a system memory  comprising computer readable media, and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help transfer information between elements within the computer , such as during start-up, may be stored in ROM .","The computer  may also include a magnetic hard disk drive  for reading from and writing to a magnetic hard disk , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to removable optical disk  such as a CD-ROM or other optical media. The magnetic hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive-interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-executable instructions, data structures, program modules and other data for the computer . Although the exemplary environment described herein employs a magnetic hard disk , a removable magnetic disk  and a removable optical disk , other types of computer readable media for storing data can be used, including magnetic cassettes, flash memory cards, digital versatile disks, Bernoulli cartridges, RAMs, ROMs, and the like.","Program code means comprising one or more program modules may be stored on the hard disk , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the computer  through keyboard , pointing device , or other input devices (not shown), such as a microphone, joy stick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  coupled to system bus . Alternatively, the input devices may be connected by other interfaces, such as a parallel port, a game port or a universal serial bus (USB). A monitor  or another display device is also connected to system bus  via an interface, such as video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as remote computers and . Remote computers and may each be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically include many or all of the elements described above relative to the computer , although only memory storage devices and and their associated application programs and have been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN)  that are presented here by way of example and not limitation. Such networking environments are commonplace in office-wide or enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the computer  may include a modem , a wireless link, or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing communications over wide area network  may be used. Variations of the above described computing system can also be used to perform the methods of the invention.","Accordingly, the described embodiments are to be considered in all respects only as illustrative and not restrictive. In particular, the present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. Therefore, the scope of the invention is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to describe the manner in which the above-recited and other advantages and features of the invention can be obtained, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
