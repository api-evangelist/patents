---
title: Performance monitoring within an enterprise software system
abstract: A large-scale enterprise system is described that includes a flexible and scalable performance monitoring software. The system comprises a plurality of enterprise software applications having one or more collector components that collect performance data from the enterprise software applications. A performance manager receives the performance data from the collector components and aggregates the performance data within a hierarchical data structure. A performance manager interface receives the performance data from performance manager and formats the data for communication to a performance monitoring tool for presentment to a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761556&OS=07761556&RS=07761556
owner: International Business Machines Corporation
number: 07761556
owner_city: Armonk
owner_country: US
publication_date: 20041122
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates to software systems and, in particular, techniques for monitoring performance of an enterprise software system.","Enterprise software systems are typically sophisticated, large-scale systems that support many, e.g., hundreds or thousands, of concurrent users. Examples of enterprise software systems include financial planning systems, budget planning systems, order management systems, inventory management systems, sales force management systems, business intelligent tools, enterprise reporting tools, project and resource management systems and other enterprise software systems.","Many computing platforms include software tools for monitoring current system performance. A performance monitoring tool may, for example, provide information describing processor utilizations, idle processor cycles and other general information. In addition, the performance monitoring utility often supports mechanisms for presenting application-specific information. For example, some conventional performance monitoring utilities allow a user to define and configure counters or timers for capturing specific performance data.","Conventional performance monitoring tools, however, are often complicated and difficult to use. One such software tool, for example, is Performance Monitor\u2122 from Microsoft Corporation of Redmond, Wash. This performance monitoring tool requires strict compliance with a complex data format when providing system performance data to the utility. Moreover, Performance Monitor is generally designed to communicate with software modules written in the C++ programming language. Consequently, it is often difficult to format and provide the data from software modules written in other languages. For these and other reasons, it is often difficult to utilize performance monitoring tools with an enterprise software system, which may involve many cooperating software applications supporting many users.","In general, the invention is directed to techniques for capturing performance data from a software system, such as large-scale, enterprise software systems. For example, techniques are described for easily capturing and aggregating performance data from multiple software applications within an enterprise software system.","The techniques allow a user to easily specify configuration information using a data description language, such as the extensible markup language (XML). A performance manager coordinates the capture and aggregation of performance data from the multiple enterprise software applications in accordance with configuration information. Based on the configuration information, the performance manager serializes the aggregated performance data and provides the aggregated performance data to a performance manager interface, which may be specific to a third-party performance monitoring tool. In turn, the performance manager interface generates formatted performance data that complies with requirements of the performance monitoring tool, and communicates the formatted performance data to the performance monitoring tool for presentment to the user.","The techniques may allow the user to more easily incorporate performance monitoring into an enterprise software system. For example, the user may generically define the configuration information for the performance manager without regard to the complex data format required by the particular third-party performance monitoring tool being utilized. Moreover, the described performance manager provides a central repository for aggregating performance data from one or more enterprise software applications. In this manner, the performance manager and the performance manager interface may collect the performance data from multiple enterprise software applications, and package the performance data based on the specific requirements of the third-party performance monitoring tool utilized to display the performance data.","In one embodiment, a system comprises a plurality of enterprise software applications having one or more collector components that collect performance data from the enterprise software applications. A performance manager receives the performance data from the collector components and aggregates the performance data within a hierarchical data structure. A performance manager interface receives the performance data from the performance manager and formats the data for communication to a performance monitoring tool for presentment to a user.","In another embodiment, a method comprises executing a plurality of enterprise software applications on a computing device, wherein the enterprise software applications have one or more collector components that collect performance data from the enterprise software applications. The method further comprises communicating performance data from the collector components to a performance manager, aggregating the performance data within the performance manager, and communicating the aggregated performance data to a performance manager interface. The method further comprises formatting the aggregated performance data in accordance with requirements of a performance monitoring software tool, and communicating the formatted performance data to the performance monitoring tool for presentment to a user.","In another embodiment, a computer-readable medium comprises instructions to cause a processor to execute a plurality of enterprise software applications on a computing device, wherein the enterprise software applications have one or more collector components that collect performance data from the enterprise software applications. The instructions further cause the processor to communicate performance data from the collector components to a performance manager, aggregate the performance data within the performance manager, and communicate the aggregated performance data to a performance manager interface. In addition, the instructions cause the processor to format the aggregated performance data in accordance with requirements of a performance monitoring software tool, and communicate the formatted performance data to the performance monitoring tool for presentment to a user.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 1"],"b":["4","10","12","12","12","14","14","16","16","16","18","12","16","14"]},"For exemplary purposes, the invention is described in reference to an enterprise planning system, such as an enterprise financial or budget planning system. The techniques described herein may be readily applied other software systems, including other large-scale enterprise software systems. Examples of other enterprise software systems include order management systems, inventory management systems, sales force management systems, business intelligent tools, enterprise reporting tools, project and resource management systems and other enterprise software systems.","In general, enterprise planning system  enables and automates the reconciliation of top-down targets with detailed bottom-up forecasts for an enterprise. Enterprise planning system  implements and manages an enterprise planning process, which generally consists of three functions: (1) modeling, (2) contribution and (3) reconciliation.","Initially, high-level enterprise managers or executives, referred to as analysts, define organizational targets and build planning models for the enterprise. The analysts may include, for example, financial analysts, such as the chief financial officer, senior financial analysts or product and sales analysts. More specifically, the analysts develop a model having a number of hierarchically arranged nodes representing various cost centers within the organization, such as business units or departments. The analysts then specify corporate target data for each node of the organizational hierarchy. Corporate target data may include financial data, revenue data, order data, inventory data, and the like, depending on the particular enterprise planning activity being carried out by the enterprise. The analysts then assign one or more enterprise users  to each node, such as managers, supervisors, sales representatives, lab managers, or the like, that are responsible for enterprise planning for the cost center corresponding to the node. Each enterprise user  may be designated as a contributor that provides planning data to enterprise planning system , a reviewer that accepts or rejects contributions from the contributors, or both. The contributors and reviewers may be authorized users within the enterprise or within other entities coupled to network , such as suppliers or customers.","The enterprise users  that are designated as contributors interact with enterprise planning system  to input detailed forecasts in the form of contribution data. As described above, enterprise users  may provide detailed financial forecasts, revenue forecasts, order forecasts, inventory forecasts, estimated resource requirements, and the like, depending on the particular enterprise planning activity being carried out by the enterprise.","Enterprise planning system  automates the reconciliation of the forecast data with the corporate target data provided by the analysts. In particular, enterprise planning system  operates in accordance with a defined model, i.e., the enterprise planning model created by the analysts, to provide a hierarchical planning process having multiple reconciliation levels. As each of the contributors provides his or her contribution data (referred to generally, as \u201centerprise data\u201d), enterprise planning system  automatically aggregates the contribution data across the enterprise in real-time, and provides access to the aggregated data to enterprise users  designated as reviewers associated with higher levels of the enterprise. In particular, upon receiving contribution data from the contributors, enterprise planning system  identifies all higher levels of the organizational model affected by the newly received contribution data, and calculates new aggregate totals at each level in real-time.","Consequently, the reviewers view aggregated data across the enterprise in real-time during the enterprise planning session. At each level, enterprise planning system  ensures that the reviewers, as defined by the nodes of the enterprise model, reconcile the target data with the forecast data. Each of the reviewers may, for example, reject or accept the contribution data in view of corporate targets provided by the analysts. This process continues until the contribution data is ultimately approved by the highest level of the organizational hierarchy, thereby ensuring that the contribution data from the contributors reconciles with corporate targets provided by the analysts.","In this manner, enterprise planning system  may provide more accurate enterprise planning than with conventional techniques. For example, enterprise planning system  may improve the accuracy and predictability of enterprise planning by enabling organizations to reconcile corporate models and organizational targets with detailed forecasts. The techniques may provide a platform that delivers collaborative, real-time planning capabilities, without requiring offline consolidation and aggregation of forecasts. Because enterprise planning system  can aggregate contribution data in real-time, all users  can be presented with an accurate, up-to-date view of the numbers. Further, the architecture of enterprise planning system  can readily scale to thousands of users, and may be designed around best planning practices. In addition, the techniques enable high participation by enterprise users , i.e., the contributors and reviewers, allowing accurate planning cycles to be reduced.","Enterprise users  may use a variety of computing devices to interact with enterprise planning system  via network . For example, an enterprise user may interact with enterprise planning system  using a laptop computer, desktop computer, or the like, running a web browser, such as Internet Explorer\u2122 from Microsoft Corporation of Redmond, Wash. Alternatively, an enterprise user may use a personal digital assistant (PDA), such as a Palm\u2122 organizer from Palm Inc. of Santa Clara, Calif., a web-enabled cellular phone, or similar device.","Network  represents any communication network, such as a packet-based digital network like the Internet. In this manner, system  can readily scale to suit large enterprises. Enterprise users  may directly access enterprise planning system  via a local area network, or may remotely access enterprise planning system  via a virtual private network, remote dial-up, or similar remote access communication mechanism.","Enterprise planning system  may utilize a \u201ccut-down\u201d process by which the multidimensional data store is \u201csliced\u201d for each user  in accordance with the defined enterprise model. During this process, enterprise planning system  identifies areas of the defined model to which users  are assigned, either as contributors or reviewers, and \u201cslices\u201d the data store based on the assignments. When a given user  logs in and proceeds with an enterprise planning activity, enterprise planning system  communicates the respective data slice to the respective computing device  for display to the user via the extended spreadsheet application. In this fashion, enterprise planning system  need not communicate the entire model to each of users , thereby reducing communication time as well as resource requirements. Instead, each user  receives only relevant information. Users  interact with computing devices  to capture contribution data, and to reconcile the contribution data with organizational targets.","As described herein, any of computing devices  and\/or enterprise planning system  may include a performance manager that collects performance data from enterprise planning software applications. Specifically, the performance manager provides an application programming interface (API) for capturing the performance data from the enterprise planning applications, and acts as a central repository for aggregating the performance data.","When requested, the performance manager serializes the aggregated performance data (i.e., generates a stream of performance data) and communicates the aggregated performance data to a performance manager interface, which may be specific to a third-party performance monitoring tool. The performance manager interface generates formatted performance data that complies with requirements of the performance monitoring tool, and communicates the formatted performance data to the performance monitoring tool for presentment to the user.","As further described herein, the user may define configuration information for the performance manager without regard to the complex data format required by the particular third-party performance monitoring tool. As one example, the user may utilize a data description language, such as the extensible markup language (XML), to define a hierarchical data structure having objects, counters and instances for storing performance data from the various enterprise software applications. The performance manager aggregates the performance data from the enterprise software applications by storing the performance data within the hierarchical data structure, and the performance manager interface communicates the performance data to the third party monitoring tool in the required format. In this way, the user may more easily incorporate performance monitoring into computing environment  and enterprise software system .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["16","12","16","20","22","24","16","25","26","28","30"]},"In one embodiment, calculation engine  comprises a forward calculation engine  wrapped in an Active X object built in an array-based language. In the example of enterprise planning, user A may interact with web browser  to enter and manipulate budget or forecast data. Data cube  contains planning data, which may include top-down targets and bottom-up contribution data, and allows all calculations for an enterprise planning session to be performed locally by computing device A. Therefore, in this example, a contributor can modify his or her respective contribution data, and perform calculations necessary for the enterprise planning process without necessarily accessing enterprise planning system . In other words, calculation engine  and data cube  may be maintained locally (e.g., as ActiveX components) via computing device A. User A may save the planning data locally, and submit the planning data to enterprise planning systems  for aggregation with the planning data from other users. Enterprise planning system  automatically aggregates the contribution data across enterprise  in real-time, and provides access to the aggregated data to reviewers associated with higher levels of the enterprise. This process continues until the contribution data is ultimately approved by the reviewers associated with the highest level of the organizational hierarchy, thereby ensuring that the contribution data from the contributors reconciles with corporate targets. In other embodiments, calculation engine  and data cube  may be maintained at only at enterprise planning system  and installed locally upon computing devices .","Enterprise planning applications  represent software applications that may be utilized when carrying out the planning session on computing device A. Example applications include web browser applications, web services, calculation engines, reporting tools, modeling tools, spreadsheet applications, data collection templates, business intelligence tools or other types of enterprise planning applications.","Performance monitoring tool  represents a software utility for displaying performance data associated with the enterprise planning session. For example, performance monitoring tool  may be a third-party performance monitoring tool, such as Performance Monitor\u2122 from Microsoft Corporation of Redmond, Wash. Performance monitoring tool  typically provides a graphical user interface for displaying the performance data, and may require that the performance data adhere to a complex data format.","Performance manager  collects performance data from enterprise planning applications . In this manner, performance manager  acts as a central repository for aggregating the performance data. When requested, performance manager  serializes the aggregated performance data and provides the serialized performance data to performance monitoring tool  via performance manager interface  in accordance with the particular data format required by the performance monitoring tool.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3","FIG. 3"],"b":["16","30","31","32","16","14"]},"In general, configuration information  utilizes a data description language, such as XML, to define a hierarchical data structure having, for example, objects, counters and instances for storing performance data from the various enterprise software applications. Performance manager  processes configuration file  and creates the hierarchical data structure  in memory in accordance with the definition specified within configuration file . Performance manager  receives performance data  from enterprise software applications A-N, and aggregates the performance data by storing the performance data within hierarchical data structure . In some embodiments, performance manager may be implemented as a service having its own process space separate from enterprise planning applications  and performance monitoring tool .","Performance manager interface  provides an interface for communication between performance monitoring tool  and performance manager . Performance manager interface  may, for example, comprise a dynamic link library (DLL) that executes within the process space of performance monitoring tool  and exposes methods which may be invoked by performance monitoring tool . Performance manager interface  receives serialized performance data  from performance manager  (e.g., via inter-process message) and maintains formatted performance data  that conforms to the specific requirements and data formats unique to performance monitoring tool , which may be a third-party, platform-specific tool.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 3"],"b":["30","31","32","35","37","40","42","31","30"]},"Next, assuming performance monitoring is enabled, performance manager  collects performance data  from enterprise planning applications  (). In particular, enterprise planning applications  include one or more \u201ccollector\u201d software components  that send performance data  to performance manager . Collector software components  may include, for example, counters or timers instantiated from classes associated with performance manager . Collector software components  maintain performance data  within the respective process space of enterprise planning applications , and communicate the performance data to performance manager .","For example, collector software components  may communicate the performance data as serialized data (e.g., via inter-process messages). As another example, collector software components  may communicate the data by function call (e.g., a cross-process function call that is serialized by an underlying operating system).","Upon receiving the performance data , performance manager  stores the performance data within hierarchical data structure  ().","At any point in time, performance monitoring tool  may issue requests  to performance manager interface , which in turn issues requests  to performance manager  ().","For example, performance monitoring tool  may issue an initial connection request to performance manager interface . In response, performance manager interface  issues an \u201cOPEN\u201d request to performance manager . In this case, performance manager  provides a complete serialized snapshot of the performance data stored within hierarchical data structure  (). In one embodiment, performance manager interface  generates formatted performance data  as a binary block of data within the process space of performance monitoring tool . In particular, performance manager interface  may generate formatted performance data  as the binary data block that conforms to the specific requirements of performance monitoring tool .","Alternatively, performance monitoring tool  may periodically poll performance manager interface  for performance data. In this case, performance manager interface  issues request  in the form of a \u201cCOLLECT\u201d request. In response, performance manager  again provides a serialized copy of the aggregated performance data stored within hierarchical data structure  (). Performance manager interface  processes the serialized performance data  and automatically updates the previously created data block.","During this process, performance manager interface  may automatically synchronize the serialized aggregated performance data  with the previously created data block (). For example, performance manager interface  may perform a synchronization between the instances and counters for which serialized performance data  was received from performance manager  (i.e., instances and counters currently utilized by enterprise planning applications ) with the instances and counters present when performance monitoring tool  initially connected. In some embodiments, for example, performance monitoring tool  may be configured by the user to display fewer counters and instances than are actually available and used by enterprise planning applications . In other cases, new instances may be created after performance monitoring tool  was launched. In either case, performance manager interface  automatically detects the instances and counters for which serialized performance data  is received but that are not to be displayed. For these instances and counters, performance manager interface  automatically excludes the serialized performance data from formatted performance data .","In the situation where an instance or counter selected for display is no longer used by enterprise planning applications , performance manager interface  will not receive serialized performance data  for the inactive collection component . When no performance data is received for a particular collection component , performance manager interface  automatically resets the respective portion of formatted performance data . For example, performance manager interface  may automatically set a counter value to zero when generating formatted performance data  when performance data for that counter has not been received in a defined time period.","Performance manager interface  includes concurrency logic to handle threading concurrency. For example, performance manager interface  handles situations where multiple collector software components  attempt to set the same counters at the same time. Other examples that are handled include situations where collectors may collector software components  attempt to set counter values while performance manager  is serializing its data, reading configuration file  or removing timed-out instances.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":["35","23","35"]},"The highest level, LEVEL 1, includes the performance objects class . In this example, an object is essentially a group of counters. An object may have one or more instances, and instances are optional.","The second level, LEVEL 2, includes the performance counters class  and the performance instances class . The performance counters class  represents data structures for storing count data, which may be used within enterprise planning applications  to compute various performance data, including event counts, time periods, durations, averages, sums or other data. For example, two different types of counters include: (1) value counters that are used to report counts, and (2) timer counters that are used to report time durations.","The performance instances class  represents particular instantiations of performance objects class . Performance manager  provides mechanisms for automatically creating and totaling instances, which is a common requirement.","The third level, LEVEL 3, includes another representation of the performance counters class  as counters may be associated with objects or particular instances of objects. In this manner, counters can ultimately be reported by performance monitoring tool  generally by object or by specific instance.","In general, configuration information  may be written in the following XML form to specify a hierarchy for storing performance data:",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<PerformanceData>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Object>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter \/>"]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"<Counter \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Object>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Object>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter \/>"]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"<Counter \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Object>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/PerformanceData>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following illustrates one example of configuration information  in XML form:",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<?xml version=\u201c1.0\u201d ?>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2212 <PerformanceData headerFile=\u201cEPCounters.h\u201d"},{"entry":"iniFile=\u201cEPCounters.ini\u201d"},{"entry":"perfmonDLLFile=\u201cepPerformanceDll.dll\u201d"},{"entry":"deviceName=\u201cepPlanningService_cer4\u201d"},{"entry":"instanceCleannupPolling=\u201c900\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2212 <Object name=\u201cPlanning Server\u201d help=\u201cPlanning Server\u201d"]},{"entry":[{},"hasInstances=\u201cfalse\u201d"]},{"entry":[{},"autoCreateInstanceTotal=\u201cfalse\u201d"]},{"entry":[{},"autoCalcInstanceTotal=\u201cno_calc\u201d"]},{"entry":[{},"instanceTimeout=\u201c900\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter name=\u201cWeb"]},{"entry":[{},"Req Per Sec\u201d help=\u201cWeb Requests Per Second\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"defaultScale=\u201c0\u201d"]},{"entry":[{},"counterType=\u201cPERF_COUNTER_DELTA\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter name=\u201cAvg Web Resp Time"]},{"entry":[{},"(sec) \u201d help=\u201cAvg Web Response Time\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"defaultScale=\u201c0\u201d"]},{"entry":[{},"counterType=\u201cPERF_COUNTER_RAWCOUNT\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Object>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2212 <Object name=\u201cPlanning Client\u201d"]},{"entry":[{},"help=\u201cPlanning Client\u201d hasInstances=\u201ctrue\u201d"]},{"entry":[{},"autoCreateInstanceTotal=\u201ctrue\u201d autoCalcInstanceTotal=\u201csum\u201d"]},{"entry":[{},"instanceTimeout=\u201c900\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter name=\u201cOpen Node Total\u201d help=\u201cTotal"]},{"entry":[{},"Time to open node\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"defaultScale=\u201c0\u201d"]},{"entry":[{},"counterType=\u201cPERF_COUNTER_RAWCOUNT\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter name=\u201cAvg Login Time\u201d help=\u201cAvg"]},{"entry":[{},"login time\u201d defaultScale=\u201c0\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"counterType=\u201cPERF_COUNTER_RAWCOUNT\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Object>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2212 <Object name=\u201cPlanning Job Items\u201d help=\u201cPlanning Job"]},{"entry":[{},"Items\u201d hasInstance Items\u201ds=\u201ctrue\u201d"]},{"entry":[{},"autoCreateInstanceTotal=\u201ctrue\u201d autoCalcInstanceTotal=\u201csum\u201d"]},{"entry":[{},"instanceTimeout=\u201c900\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter name=\u201cTotal\u201d help=\u201cThe number of"]},{"entry":[{},"job items processed (regardless of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"success or failure).\u201d defaultScale=\u201c0\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"counterType=\u201cPERF_COUNTER_RAWCOUNT\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter name=\u201cSucceeded\u201d help=\u201cThe"]},{"entry":[{},"number of job items that succeeded.\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"defaultScale=\u201c0\u201d"]},{"entry":[{},"counterType=\u201cPERF_COUNTER_RAWCOUNT\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Counter name=\u201cFailed\u201d help=\u201cThe"]},{"entry":[{},"number of job items that failed.\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"defaultScale=\u201c0\u201d"]},{"entry":[{},"countertype=\u201cPERF_COUNTER_RAWCOUNT\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Object>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/PerformanceData>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The above example configuration information  defines a single XML element PerformanceData. The PerformanceData element specifies certain attributes, including a header filer (EPCounters.h), an initialization file (EPCoutners.ini) and the name of a performance manager interface  (epPerformanceDLL.dll). The PerformanceData element also specifies an instanceCleannupPolling attribute that defines a clean-up timeout that controls how frequently performance manager  performs a clean-up on hierarchical data structure , and an instanceTimeout attribute that defines a timeout period for automatically removing an object instance that has not been updated with performance data.","The PerformanceData element contains XML elements defining three performance objects for storing performance data: Planning Server, Planning Client and Planning Job Items.","Each of these objects in turn contains XML elements defining one or more counters. For example, the Planning Server object specifies two counters: (1) Web Req Per Second for tracking the number of web requests received per second, and (2) Avg Web Resp Time for tracking the average response time per web request. The Planning Client object specifies two counters: (1) Open Node Total for counting the number of model nodes currently open on the client, and (2) Avg Login Time for computing the average time a user is logged into enterprise planning system . The Planning Job Items object specifies three counters: (1) Total for tracking the total number of job items processed, (2) Succeeded for tracking the total number of job items that succeeded, and (3) Failed for tracking the total number of job items that failed.","Each object element specifies a name attribute, a hasInstances attributes that indicates whether the object has specified instances, autoCreateInstanceTotal and autoCalcInstanceTotal attributes that determine whether the object automatically creates and maintains a total count for the number of instances created, and an instanceTimeout attribute that specifies a period for deleting the instance in the event the instance is not updated.","Each counter element specifies a name attribute, a help attribute that defines a help text string, a defaultScale attribute used to scale a count value maintained by the counter, and a counterType attribute that defines the type of counter to be created. In this example, counters containing raw counts are defined by specifying a counterType of PERF_COUNTER_RAWCOUNT.","In this manner, configuration file  may be an XML document that specifies the objects, instances and counters (i.e., collector components ) that are utilized by enterprise software applications  to collect performance data at the enterprise software applications and relay the performance data to performance manager . Performance manager processes configuration file  to create hierarchical data structure  to collect and aggregate the performance data from enterprise software applications . For example, performance manager  creates hierarchical data structure  to allocate storage capacity that reflects the collector components  described in XML configuration file , and expects to receive performance data from corresponding collector components operating within enterprise planning applications . In the event performance data is not received for one or more of the collector components  within the defined time periods, performance manager  may automatically update hierarchical data structure  periodically to remove storage capacity allocated to the unused collector component.","As described above, when requested, performance manager  serializes hierarchical data structure  and provides serialized performance data  to performance manager interface . In turn, performance manager interface  generates formatted performance data  in accordance to the specific requirements of performance monitoring tool .","For example, when generating formatted performance data  for Performance Monitor from Microsoft Corporation, performance manager interface  generates formatted performance data  as a contiguous block of binary data that conforms to the particular requirements established by Microsoft. In this example, performance manager interface  generates formatted performance data  to include a fixed-length header structure that describes the performance data. Performance manager interface  generates formatted performance data  to further include a variable number of variable-length object data items. Performance manager interface  automatically generates the header of each object to contain an offset of the next object in the list, as is required by Microsoft.","Further, performance manager interface  generates each object within the binary block of data to conform to the required structure. Specifically, each object within the block of data is followed by a list of counter definition structures, one for each counter defined for the object. Performance manager interface  generates the block of binary data so that each counter definition structure contains the offset from the start of the structure to the corresponding counter data.","For an object type that supports multiple instances, the list of counter definition structures within formatted performance data  is followed by a list of instance information blocks (one for each instance), as required by Microsoft. Each instance information block contains an instance definition structure, the name of the instance, and a counter block structure. In this manner, performance manager interface  receives the serialized performance data from performance manager , and creates formatted performance data  as a block of binary data as required by Microsoft's Performance Monitor. Performance manager , however, need not conform to these requirements and can readily aggregate data from multiple enterprise planning applications .","Various embodiments of the invention have been described. Although described in reference to an enterprise planning system, such as an enterprise financial or budget planning system, the techniques may be readily applied to other software systems, including other large-scale enterprise software systems. Examples of other enterprise software systems include order management systems, inventory management systems, sales force management systems, business intelligent tools, enterprise reporting tools, project and resource management systems and other enterprise software systems. Moreover, the techniques may be implemented on any type of computing device, including servers, client computers, laptops or other devices. These and other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
