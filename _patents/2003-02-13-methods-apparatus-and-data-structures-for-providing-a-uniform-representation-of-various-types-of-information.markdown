---
title: Methods, apparatus and data structures for providing a uniform representation of various types of information
abstract: Methods and apparatus for analyzing tasks performed by computer users by (i) gathering usage data, (ii) converting logged usage data into a uniform format, (iii) determining or defining task boundaries, and (iv) determining a task analysis model by “clustering” similar tasks together. The task analysis model may be used to (i) help users complete a task (such help, for example, may be in the form of a gratuitous help function), and/or (ii) to target marketing information to users based on user inputs and the task analysis model. The present invention also provides a uniform semantic network for representing different types of objects in a uniform way.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06950827&OS=06950827&RS=06950827
owner: Microsoft Corporation
number: 06950827
owner_city: Redmond
owner_country: US
publication_date: 20030213
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["The present application is a divisional of and claims priority of U.S. patent application Ser. No. 09\/325,166, filed Jun. 3, 1999, now U.S. Pat. No. 6,539,374, the content of which is hereby incorporated by reference in its entirety.","[\u00a7] 1.1 Field of the Invention","The present invention concerns analyzing computer-based tasks to (i) define and infer tasks and end goals from usage data, (ii) cluster similar tasks together, (iii) determine probabilities that certain tasks will be performed, (iv) determine the different ways in which users go about completing a given task, (v) use models of clustered tasks and probabilities of clustered tasks to help computer users to perform such tasks more effectively and efficiently, and (vi) target marketing information to computer users based on a task being performed. The present invention also concerns providing a uniform semantic network for representing different types of objects (or information) in a uniform way.","[\u00a7] 1.2 Related Art","[\u00a7] 1.2.1 Task Performance","A task may be defined as a goal achieved by performing a sequence of steps. People often rely on computers to complete tasks. Different computer applications are tailored to help people perform different tasks. For example: a word processing application may be used to generate a letter, generate a food recipe card, or generate a table of contents for a paper; a spreadsheet application may be used to determine an accounts receivable value or determine a taxable income value; a drafting application may be used to generate an organizational chart, prepare a block diagram, or layout a floor plan for a new kitchen; a database or Internet browser application may be used to find crash test results for new cars, get a stock quote, plan an evening out with a diner and a movie, or find an employee's telephone extension.","Computer applications are designed based on predictions of how likely most users will want to perform certain tasks. Special provisions (e.g., toolbars, hierarchical menus, special keyboard keys, etc.) to assist the user in performing such tasks are provided based on assumptions made by the application designer(s). Thus, for example, in the context of a word processing application, a spell checking task may be designed to be easier to perform than a bibliography generating task because it is assumed that users will more likely want to perform a spell check task than a bibliography generation task. Similarly, a keyboard may be provided with an addition (\u201c+\u201d) key but not an integration (\u201c\u222b\u201d) key because it is assumed that it is more likely that users will want to include a \u201c+\u201d sign in a document than a \u201c\u222b\u201d sign in a document. In the context of the browsing contents of an Internet \u201csite\u201d or \u201cwebsite\u201d (i.e., an Internet resource server), a topology of the Internet site may be designed based on expected usage of (e.g., requests for) various resources. Thus, for example, reviews of newly released movies may be easier to request (or navigate to) than reviews of older movies.","Assumptions about what tasks people want to perform and how people intuitively go about performing tasks are reflected in the design of computer applications, the topology of resource servers, such as Internet sites for example, and user interface methods (such as forms and frames) used in interactive applications and resource servers. Unfortunately, once designed, a computer application is relatively fixed. Similarly, the topology of most Internet sites is relatively static. Consequently, computer applications and Internet site topologies are typically only as good as the assumptions which underlay their design. Even if the design of computer application and Internet site topologies are based on well founded assumptions about what types of tasks users will likely want to perform and how they will go about performing such tasks, such assumptions may become stale as people want to perform different tasks.","Moreover, certain tasks will often span various to computer applications. For example, a task may be to generate an annual report. Generating such a report may involve entering text by means of a word processing application, determining financial figures with a spreadsheet application, and generating a block diagram using a drafting application. It is difficult for designers of individual applications to anticipate such inter-application tasks and design their applications accordingly.","In view of the foregoing problems with computer-based tools for performing various tasks, methods and apparatus for analyzing what computer users are doing\u2014more specifically what tasks are being performed by users and how such tasks are being performed\u2014are needed. Moreover, methods and apparatus are needed for using such task analysis to help computer users to effectively perform desired tasks.","[\u00a7] 1.2.2 Marketing Information Dissemination","As discussed above, resource servers, such as Internet websites for example, permit people to access a great deal of information. In addition to their function of providing resources to computer users, Internet sites provide a new conduit for disseminating marketing information to people. Often, marketing information is closely related to the resources requested. For example, an Internet resource providing stock quotations may include an advertisement for a stockbroker, or an Internet resource providing sports scores may include an advertisement for a baseball game to be televised. However, such marketing information is related to the characteristics of the Internet resource itself, not to the task being performed by the user requesting the resources. Thus methods and apparatus for providing marketing information relevant to a task being performed are needed.","[\u00a7] 1.2.3 Object (or Information) Representation","Computer users may use various types of applications and software services. The applications and software services, in turn, may use different types of stored objects (as information, data, or executable code). For example, some objects, such as relational database structures, XML (Extensible Markup Language), and RDF (Resource Description Framework), for example, may be characterized as \u201cstructured objects\u201d. More specifically, relational databases are defined by elements structured into rows and columns of tables. XML defines trees based on containment relationships (e.g., an organization contains groups, and each of the groups contains members). Other objects, such as DCOM and JAVA runtime objects for example, may be characterized as \u201cactive objects\u201d. Active objects may be objects that define methods and\/or variables, in the object oriented language sense. Further, techniques are available (See, e.g., U.S. Pat. Nos. 5,740,439, 5,682,536, 5,689,703, and 5,581,760, each of which is incorporated herein by reference) to \u201cexpose\u201d machine executable instructions as objects. Still other objects, such as text documents for example, may be characterized as \u201clinear objects.\u201d Some objects may have more that one type. For example, HTML (Hyper-Text Markup Language) documents may include linear text, and may include hyper-text links defining a hierarchical structure.","To reiterate, applications and application services are typically tailored to only those underlying object or information type(s) that are relevant to the particular application or application service. Unfortunately, it is not easy to implement inter-application services, such as analyzing tasks discussed above, which user various types of objects. Thus, a uniform representation of various types of objects (or information) would be useful.","The present invention provides methods and apparatus for analyzing tasks performed by computer users. First, the present invention includes methods and apparatus to gather usage data. That is, when performing tasks, users will interact with the computer and perform a number of steps (i.e., user inputs) in an attempt to complete the task. These steps (user inputs) are logged in a usage log for further analysis. Second, the present invention includes methods, apparatus, and data structures to convert logged usage data into a uniform format. More specifically, objects (e.g., machine executable instructions, various types of database resources, text files, etc.) invoked pursuant to the user inputs may be expressed with a uniform representation. The present invention defines a uniform representation which may be used and provides methods and apparatus for mapping between objects (or information) having a specific type, and the same objects (or information) expressed with the uniform representation. Third, the present invention includes methods and apparatus to determine or define task boundaries. That is, a computer user may interact with a computer to perform a number of tasks during a single session or may perform a single task over a number of sessions. Fourth, the present invention includes methods and apparatus to define task boundaries from the converted (or non-converted, uniform) usage data. Finally, the present invention includes methods and apparatus to generate a task analysis model from the defined tasks. More specifically, the present invention may function to \u201ccluster\u201d similar tasks together. The task model may use a limit on (a) the number of clusters, and\/or (b) the distance (i.e., \u201cdissimilarity\u201d) between the clusters, when generating the model.","The present invention also includes methods and apparatus which use the task analysis model. First, the present invention includes methods and apparatus for designing application user interfaces such as tool bars, hierarchical menus, gratuitous help, etc. In this instance, probabilities of tasks from the task analysis model may be used to determine what tasks users will likely want to perform. Human design factors, such as how many functions users like on a toolbar or how many levels of menus they like may be used when generating the task analysis model to determine how many clusters the model should have.","The present invention also includes methods and apparatus which use the task analysis model for designing a topology of a resource server, such as an Internet website for example. As was the case with designing application user interfaces, in this instance, probabilities of tasks from the task analysis model may be used to determine what tasks users will likely want to perform. Human design factors, such as how many hyper-text links or query boxes on a single web page users like may be used when determining the topology of the resource server interface.","The present invention also includes methods and apparatus to help users complete a task based on the task analysis model. Such help, for example, may be in the form of a gratuitous help function. Basically, a run-time application will look at steps being performed by the user and determine if such steps \u201cbelong to\u201d a task cluster of the task analysis model. If the steps performed by the user appear to \u201cbelong to\u201d a task cluster, the user may be provided with gratuitous help. For example, the application may communicate to the user, \u201cIt seems that you are trying to generate an annual report. May I help you complete this task?\u201d Alternatively, when it can be established, with a requisite degree of certainty, that the user is trying to perform a particular task, the application may automatically complete that task without further input from the user or the application may guide the user through remaining steps for completing the task in an efficient manner.","Finally, the present invention includes methods and apparatus to target marketing information to users based on user inputs and a task analysis model. For example, the Internet has permitted companies to target marketing information to narrow niches of potential customers. For example, a web page providing stock quotes may advertise a stock broker, a web page providing telephone numbers may advertise a long distance telephone carrier, etc. However, the present invention permits tasks to be more generalized. For example, it may recognize that an Internet user submitting queries for a restaurant in a certain neighborhood may be planning a date including dinner and a movie. Thus, in this case, the present invention might function to provide movie advertisements along with the restaurant information resources.","The present invention concerns novel methods and apparatus for analyzing tasks being performed by users and for analyzing how such tasks are being performed. The present invention also concerns novel methods, apparatus, and data structures for representing various types of objects in a uniform way. The following description is presented to enable one skilled in the art to make and use the invention, and is provided in the context of particular applications and their requirements. Various modifications to the disclosed embodiments will be apparent to those skilled in the art, and the general principles set forth below may be applied to other embodiments and applications. Thus, the present invention is not intended to be limited to the embodiments shown.","Below, function(s) of the present invention will be described in \u00a7 4.1. Thereafter, the structures of exemplary embodiments and exemplary methods of the present invention will be described in \u00a7 4.2. Finally, examples of operations of the present invention will be described in \u00a7 4.3.","[\u00a7] 4.1 Functions of the Present Invention","In this section, the basic functions performed by the present invention will be introduced. The functions may be divided into functions that may be performed when a user is not performing a task (also referred to as \u201coff-line\u201d) and those that may be performed while the user is performing a task (also referred to as \u201crun-time\u201d). The off-line functions are introduced in \u00a7 4.1.1 below. The run-time functions are introduced in \u00a7 4.1.2 below.","[\u00a7] 4.1.1 Off-line Functions","There are five (5) basic off-line functions that may be carried out by the present invention. Each of the five (5) off-line functions is introduced below. First, the present invention may function to gather usage data. That is, when performing tasks, users will interact with the computer and perform a number of steps (i.e., user inputs) in an attempt to complete the task. These steps (user inputs) are logged in a usage log for further analysis. An example of this function is described in \u00a7 4.2.3.1 below.","Second, the present invention may function to convert logged usage data into a uniform format. More specifically, objects or information (e.g., software executables, various types of database resources, etc.) invoked pursuant to the user inputs may be expressed in a common manner. An example of this function is described in \u00a7 4.2.3.2 below.","Third, the present invention may function to determine or define task boundaries. That is, a computer user may interact with a computer to perform a number of tasks during a single session (a \u201csession\u201d may be defined as a predetermined period of activity followed by a predetermined period of inactivity) or may perform a single task over a number of sessions. Examples of this task boundary definition function are described in \u00a74.2.3.3 below.","Fourth, the present invention may function to determine a task analysis model from the converted (or non-converted, uniform) usage data. More specifically, the present invention may function to \u201ccluster\u201d similar tasks together. The task model may use a limit on (a) the number of clusters, and\/or (b) the distance (i.e., \u201cdissimilarity\u201d) between the clusters, when generating the model. An example of this function is described in \u00a7 4.2.3.4 below.","Finally, the present invention may function as a design tool which uses the task analysis model for designing application user interfaces such as tool bars, hierarchical menus, gratuitous help, etc. In this instance, probabilities of tasks from the task analysis model may be used to determine what tasks users will likely want to perform. Human design factors, such as how many functions users like on a toolbar or how many levels of menus they like may be used when generating the task analysis model to determine how many clusters the model should have.","The present invention may also function as a design tool which uses the task analysis model for designing a topology of a resource server, such as an Internet website for example. As was the case with designing application user interfaces, in this instance, probabilities of tasks from the task analysis model may be used to determine what tasks users will likely want to perform. Human design factors, such as how many hyper-text links or query boxes on a single web page users like may be used when determining the topology of the resource server interface.","[\u00a7] 4.1.2 Run-time Functions","Having introduced off-line functions that the present invention may perform, run-time functions that the present invention may perform are now introduced.","First, the present invention may function to help users complete a task based on a task analysis model. Such help, for example, may be in the form of a gratuitous help function. Basically, a run-time application will look at steps being performed by the user and determine if such steps \u201cbelong to\u201d a task cluster of the task analysis model. If the steps performed by the user appear to \u201cbelong to\u201d a task cluster, the user may be provided with gratuitous help for completing that task. For example, the application may communicate to the user, \u201cIt seems that you are trying to generate an annual report. May I help you complete this task?\u201d Alternatively, when it can be established, with a requisite degree of certainty, that the user is trying to perform a particular task, the application may automatically complete that task without further input from the user or the application may guide the user through remaining steps for completing the task in an efficient manner. Examples of-these functions are described in \u00a7 4.2.3.5 below.","Second, the present invention may function to target marketing information to users based on user inputs and a task analysis model. For example, the Internet has permitted companies to target marketing information to narrow niches of potential customers. For example, a web page providing stock quotes may advertise a stock broker, a web page providing telephone numbers may advertise a long distance telephone carrier, etc. However, the present invention permits tasks to be more generalized. For example, it may recognize that an Internet user submitting queries for a restaurant in a certain neighborhood may be planning a date including dinner and a movie. Thus, in this case, the present invention might function to provide movie advertisements along with the restaurant information resources. Examples of this \u201ctask associated advertising\u201d function are described in. \u00a7 4.2.3.6 below.","[\u00a7] 4.2 Structures and Methods of Exemplary Embodiments of the Present Invention","Having introduced various functions which may be performed by the present invention, exemplary embodiments of the present invention will now be described. First, exemplary environments in which the present invention may operate will be described in \u00a7 4.2.1 below. Then, exemplary processes for effecting one or more of the functions discussed above will be described, at a high level, in \u00a7 4.2.2 below. Thereafter, details of the exemplary processes for effecting the functions discussed above will be described in \u00a7 4.2.3 below.","[\u00a7] 4.2.1 Exemplary Operating Environments",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 1A","b":["100","100","110","120","130"]},"The client  includes an user interface process  (e.g., a graphical user interface (or \u201cGUI\u201d)), an input\/output interface processes  (e.g., a serial port, a video driver, and a network interface card (or \u201cNIC\u201d)), and a front end application process  (e.g., an Internet browser, a database front end, etc.). The user interface process  and the front end, application process  may communicate with each other by means of an input\/output interface process .","The server  includes an input\/output interface processes  (e.g., a bank of network interface cards and a SCSI interface) and a back end application process  (e.g., an Internet resource server, a database manager, etc.). Stored objects and\/or resources  may be accessed by the back end application process  by means of an input\/output interface process  (e.g., the SCSI interface).","Thus, a user at the client  may access stored objects and\/or resources  at the server  by means of the user interface process  (e.g., a GUI), a input\/output interface process  (e.g., a serial port), the front end application process  (e.g., an Internet browser), an input\/output interface process (e.g., a NIC), the network  (e.g., the Internet), an input\/output interface process  (e.g., a NIC), the back end application process  (e.g., an Internet resource server), and an input\/output interface process  (e.g., a SCSI port). As will be discussed below, processes for effecting one or more of the functions of the present invention may be carried out at the client  and\/or at the server .",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 1B","b":["100","100","140","150","160","170","150","140","150","170","160"]},"FIG. A and the following discussion provide a brief, general description of an exemplary apparatus in which at least some aspects of the present invention may be implemented. The present invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. However, the methods of the present invention may be effected by other apparatus. Program modules may include routines, programs, objects, components, data structures, etc. that perform a task(s) or implement particular abstract data types. Moreover, those skilled in the art will appreciate that at least some aspects of the present invention may be practiced with other configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network computers, minicomputers, set top boxes, mainframe computers, and the like. At least some aspects of the present invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote memory storage devices.","With reference to , an exemplary apparatus  for implementing at least some aspects of the present invention includes a general purpose computing device in the form of a conventional personal computer . The personal computer  may include a processing unit(s) , a system memory , and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory may include read only memory (ROM)  and\/or random access memory (RAM) . A basic input\/output system  (BIOS), containing basic routines that help to transfer information between elements within the personal computer , such as during start-up, may be stored in ROM . The personal computer  may also include a hard disk drive  for reading from and writing to a hard disk, (not shown), a magnetic disk drive  for reading from or writing to a (e.g., removable) magnetic disk , and an optical disk drive  for reading from or writing to a removable (magneto) optical disk  such as a compact disk or other (magneto) optical media. The hard disk drive , magnetic disk drive , and (magneto) optical disk drive  may be coupled with the system bus  by a hard disk drive interface , a magnetic disk drive interface , and a (magneto) optical drive interface , respectively. The drives and their associated storage media provide nonvolatile storage of machine readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , those skilled in the art will appreciate that other types of storage media, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROM), and the like, may be used instead of, or in addition to, the storage devices introduced above.","A number of program modules may be stored on the hard disk , magnetic disk , (magneto) optical disk , ROM  or RAM , such as an operating system , one or more application programs , other program modules , and\/or program data  for example. A user may enter commands and information into the personal computer  through input devices, such as a keyboard  and pointing device  for example. Other input devices (not shown) such as a microphone, joystick, game pad, satellite dish, scanner, or the like may also be included. These and other input devices are often connected to the processing unit  through a serial port interface  coupled to the system bus. However, input devices may be connected by other interfaces, such as a parallel port, a game port or a universal serial bus (USB). A monitor  or other type of display device may also be connected to the system bus  via an interface, such as a video adapter  for example. In addition to the monitor, the personal computer  may include other peripheral output devices (not shown), such as speakers and printers for example.","The personal computer  may operate in a networked environment which defines logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and may include many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in FIG. A. The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , an intranet and the Internet.","When used in a LAN, the personal computer  may be connected to the LAN  through a network interface adapter (or \u201cNIC\u201d) . When used in a WAN, such as the Internet, the personal computer  may include a modem  or other means for establishing communications over the wide area network . The modem , which may be internal or external, may be connected to the system bus  via the serial port interface . In a networked environment, at least some of the program modules depicted relative to the personal computer  may be stored in the remote memory storage device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 2B","FIGS. 1A and 1B","FIGS. 1A and 1B"],"b":["200","200","210","212","214","216","221","210","222","227","212","246","253","214"]},"[\u00a7] 4.2.2 High Level Diagrams of Processes","Having described a number of environments within which the present invention may operate, exemplary processes for performing one or more of the functions of the present invention will now be introduced with reference to . Recall that functions that may be performed by the present invention may be characterized as off-line functions and run-time functions. Exemplary processes for performing the off-line functions will be briefly described, with reference to , in \u00a7 4.2.2.1 below. Exemplary processes for performing the run-time functions will be briefly described, with reference to , in \u00a7 4.2.2.2 below.","[\u00a7] 4.2.2.1 Off-line Processes",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 3A","FIG. 3A"],"b":["320","330","340","350"]},"Application(s) process(es)  may effect a computer application such as an Internet browser or a word processor for example. Referring to , the application(s) process(es)  may include a front end  at a client  and a back end  at a server  in a client-server environment . Referring to , the applications() processes(es)  may include a program management process  in a desktop environment \u2032. The application(s) process(es)  uses (e.g., renders, executes, activates, updates, generates, etc.) stored objects  in response to user input. The objects may be information such as executable objects, database objects, renderable resources, etc. For example, if the application process  is a word processor, the stored objects  may be toolbar objects or menu objects for performing document editing and formatting functions or a linear object of a stream of entered text. If the application process  is an Internet or Intranet browser, the stored objects  may be renderable resources such as hyper-text mark-up language (or \u201cHTML\u201d) pages, joint photographic experts group (or \u201cJPEG) encoded images, motion pictures experts group (or \u201cMPEG\u201d) encoded video, encoded audio, etc., a structured object of a hierarchy of an Internet web site, or a linear object of an order of web sites visited by a user, for example. Thus, as can be appreciated from the foregoing examples, each application may invoke more than one type of object (or information). Each of the stored objects  should have an unique identifier, also referred to as an \u201cobject ID\u201d. The object ID can then be used to cross reference an action against a schema or an a-ERD (described in \u00a7 4.2.3.2.4 below).","As shown in , the object log process  creates an object usage log  based on stored objects (or information) utilized by and\/or objects (or information) generated or updated by, the application(s) process(es) . The object usage log  may include records  having a user ID field  (optional), an object ID field , a time\/date stamp field , and a session ID field  (optional). The user ID field  may contain information to identify or distinguish users. If, for example, the application(s) process(es)  is a word processor carried out on a personal computer (See, e.g., .), then the value in the user ID field  may be determined based on user information associated with the computer or log on information. If, for example, the application() process(es)  is an Internet browser carried out on a client and server (See, e.g., .), then the value in the user ID field  may be a so-called cookie. A cookie, as known to those skilled in the art, is a unique tag, that may be downloaded from an Internet resource server (See, e.g., element  of ) to a client (See, e.g., element  of FIG. A.), where it is stored (See, e.g., hard disk  of FIG. A and storage devices  of FIG. B.). As discussed above, the object ID values stored in the object ID field  serve to uniquely identify the objects. The time and date at which the application(s) process(es)  invoked, requested, retrieved, updated, generated and\/or rendered the stored object  is stored in the time stamp field . Finally, the optional session ID field  includes a session number during which the object was invoked, requested, retrieved, updated, generated and\/or rendered by the application(s) process(es) . A session may be defined as a period of activity followed by a period of inactivity. Thus, a session ID value in the session ID field  may be derived from values in the time stamp field . Although the application(s) process(es)  and the object log generation process  have been grouped with off-line processes, they may actually be characterized as a run-time process since the object ID  and time stamp  values are stored while the application(s) process(es)  are running. However, the session ID, which may be derived from the time\/date stamp, may be generated off-line.","Since different types of stored objects (or information)  may be used by, and\/or updated or generated by, one or more application(s) process(es) , a uniform object (or information) representation generation process  may be used to generate an object usage log having a uniform (universal) format . This process  will be described in detail later, with reference to  and  through . At this point, it suffices to say that the uniform object representation process  converts object usage logs  having the record format , to object usage logs  having the uniform (universal) record format . The record format  has a user ID field  (optional) which corresponds to the user ID field , a time stamp field  which corresponds to the time stamp field , and a session ID field  (optional) which corresponds to the session ID field . However, the record  includes a sub-a-ERD field  instead of, or in addition to, the object ID field . The sub-a-ERD field includes parts of sub-graphs of annotated-entity relation diagram data structures, which will be described in detail later. In this case, each of the application(s) process(es)  may have an associated annotated-entity relationship diagram (or \u201ca-ERD\u201d). Naturally, if the tasks carried out with the application(s) process(es)  use only one type of stored object , then the uniform object representation process  may be unnecessary.","During a given session, more than one task may be performed or attempted. Moreover, one task may be performed over more than one session. Again, each task may have a number of steps. Thus, a task boundary determination process  uses task boundary model parameters  to define task boundaries within a session(s). Examples of this process  will be described in detail in \u00a7 4.2.3.3 below. The defined tasks are stored as usage task data . The usage task data  may include records , each of which include an optional user ID field , a sub-a-ERD field , an optional time\/date stamp field , and a task ID field . The user ID field  of the usage task data records  corresponds to the user ID field  of the object (or information) usage log records  and the user ID field  of the object (or information) usage log in universal format records . The sub-a-ERD field  of the usage task data records  corresponds to the sub-a-ERD field  of the object usage log in universal format records . The time stamp field  of the usage task data records  corresponds to the time stamp field  of the object (or information) usage log in uniform format records  and the time stamp field  of the object (or information) usage log records . Finally, the task ID field  is generated by the task boundary determination process . To reiterate, examples of this process  will be described in \u00a7 4.2.3.3 below.","As discussed above, one of the functions which may be carried out by the present invention is to generate a task analysis model in which tasks are clustered, sequenced, and assigned probabilities. The task analysis process  performs one or more of these functions based on the usage task data  and tunable parameters , to generate a task model . As shown, the task model  may include records  having a task ID field  and a cluster ID field , as well as records  having a cluster ID field  and a cluster probability field . The task ID fields  of the records  of the task model  correspond to the task ID fields  of the records  of the task usage data . The records  may also include sub-a-ERD fields  which correspond to the sub-a-ERD fields  of the records  of the usage task data . Typically, each cluster will have one or more associated tasks.","[\u00a7] 4.2.2.2 Run-time Processes","Having provided an overview of off-line processes which may be carried out in accordance with the present invention, run-time processes which may be carried out by the present invention are now introduced with reference to FIG. B.  is a diagram of exemplary processes which may be used to effect run-time functions of the present invention. The task model , which was generated by the off-line processes introduced above with reference to , together with task help content , may be used by a task help process  and a user interface process  to help a user perform a task. This process  is described in \u00a7 4.2.3.5 below.","The task help content storage  may include records , each having a cluster ID field  and a task help content field . The task help content may be scripts, queries, executable objects, etc., designed to help a user perform a given task. The task help content field  may include the task help content itself or, may include an address(es) of a location(s) at which the task help content is stored.","The task model , together with marketing information content , may be used by a task based advertising process  to retrieve appropriate marketing information content  and present such content to a user via the user interface process . This process  is described in \u00a7 4.2.3.6 below.","The marketing information content storage  may include records , each having a cluster ID field  and a marketing information content field . The marketing information content may be image, audio, video, and\/or text files which, when rendered, convey marketing information. The marketing information content field  may include the marketing information content itself or, may include an address(es) of a location(s) at which the advertising content is stored.","[\u00a7]4.2.3 Details of Processes","Having introduced the processes which the present invention may perform with reference to , details of those processes will now be presented below. First, an exemplary object log process \u2032 will be described in \u00a7 4.2.3.1. Then, an exemplary uniform object representation process \u2032 will be described in \u00a7 4.2.3.2. Thereafter, an exemplary task boundary determination process \u2032 will be described in \u00a7 4.2.3.3. Then, an exemplary task analysis process \u2032 will be described in \u00a7 4.2.3.4. Thereafter, an exemplary task help process \u2032 will be described in \u00a7 4.2.3.5. Finally, an exemplary task based advertising process \u2032 will be described in \u00a7 4.2.3.6.","[\u00a7] 4.2.3.1 Object Log Process","Recall from the description of  above, that the application(s) process(es)  may effect a computer application such as an Internet browser or a word processor for example. The application(s) process(es)  requests, retrieves, renders, updates, generates and\/or invokes stored objects (or information)  in response to user inputs. The objects (or information) may be executable objects, database objects, renderable resources, etc. For example, if the application process  is a word processor, the stored objects  may be toolbar objects or menu objects for performing document editing and formatting functions, or a linear object of a stream of entered text. If the application process  is an Internet or Intranet browser, the stored objects  may be renderable resources such as hyper-text mark-up language (or \u201cHTML\u201d) pages, joint photographic experts group (or \u201cJPEG\u201d) encoded images, motion pictures experts group (or \u201cMPEG\u201d) encoded video, encoded audio, etc., a structured objects of a hierarchy of an Internet web site, or a linear objects of an order of web sites visited by a user. Recall that each of the stored objects  should have an unique identifier, also referred to as an \u201cobject ID\u201d.","The object usage log process  creates an object usage log  based on stored objects used by the application(s) process(es) .  is a flow diagram of an exemplary object usage log process \u2032. First, as shown in step , it is determined whether an application has requested, retrieved, rendered, updated, generated and\/or invoked an object. If not, processing loops back such that the determination  is repeatedly made. If, on the other hand, it is determined that an application has requested, retrieved, rendered, updated, generated and\/or invoked an object, the object ID is obtained, the time and date of the occurrence is obtained (e.g., from a system clock utility), and a user ID may be obtained (e.g., from a log in utility or application program registration utility) in step . However, determining and storing a user ID is not an essential step of the invention. As shown in step , this information is saved.","As shown in step , at the end of a predetermined time period since the last user input (e.g., a day, a week, etc.), the time period is reset in step  and sessions are determined and assigned to the object ID values based on the saved user ID values and time\/date stamp values in step . To reiterate, a session is defined as a period of activity (e.g., by a given user, or at a given computer) followed by a period of inactivity (e.g., by the given user, or at the given computer). Next, as shown in step , records including object ID and session ID (and optionally user ID and time\/date stamp) information are stored. Processing then continues via return node .","[\u00a7] 4.2.3.2 Uniform (Universal) Object Representation Process","As discussed above with reference to , the system  may include a uniform (universal) object representation process . More specifically, there may be many different types of stored objects (or information). One or more different applications may use one or more types of objects.","Below, \u00a7 4.2.3.2.1 introduces different types (e.g., structured, active, and linear) objects (or information). Then, advantages of representing various type of objects (or information) in a uniform way are discussed in \u00a7 4.2.3.2.2 below. Thereafter, an exemplary architecture in which the uniform representation of the present invention, as well as the task analysis engine of the present invention, are depicted is described in \u00a7 4.2.3.2.3 below. Next, an exemplary uniform representation, namely annotated ERDs, is described in \u00a7 4.2.3.2.4 below. The ways in which various types of objects (or information) are mapped to a uniform representation is described in \u00a7 4.2.3.2.5 below. Finally, certain aspects of the uniform representation are described in \u00a7 4.2.3.2.6 below.","[\u00a7] 4.2.3.2.1 Types of Objects","Some objects, such as relational database structures, XML (Extensible Markup Language), and,RDF (Resource Description Framework), for example, may be characterized as \u201cstructured objects\u201d. More specifically, relational databases are defined by elements structured into rows and columns of tables. XML defines trees based on containment relationships (e.g., an organization contains groups, and each of the groups contains members). In general, structured objects may be characterized as information having elements arranged in a regular organization. Typical structures used in information systems are reviewed in the text: Aho et al, ","Other objects, such as DCOM and JAVA runtime objects for example, may be characterized as \u201cactive objects\u201d. Active objects may be \u201cobjects\u201d, in the object oriented language sense of the term. That is, objects consist of code which can change the state (or variables) of the object as a result of computations performed by a computer on behalf of an application or computer user. The code of an object makes the information \u201cactive\u201d since the execution of the code can change the state information, independently of the representation itself. Further, techniques are available (See, e.g., U.S. Pat. Nos. 5,740,439, 5,682,536, 5,689,703, and 5,581,760, each of which is incorporated herein by reference) to \u201cexpose\u201d machine executable instructions as objects.","Still other objects, such as text documents for example, may be characterized as \u201clinear objects.\u201d Linear objects (or information) are typified by a text stream, which is a linear arrangement of bytes. Linear information may also be encoded into a binary representation. Linear information may include in-line tags which divide the linear stream into segments. An example is a markup language, such as HTML, which inserts tags delimiting the text stream into paragraphs, font runs, and style elements.","Some objects may have more that one type. For example, HTML (Hyper-Text Markup Language) documents may include linear text, and may include hyper-text links defining a hierarchical structure.","[\u00a7] 4.2.3.2.2 Advantages of a Uniform Object (or Information) Representation","Mapping different types of objects (or information) into a uniform representation has a number of advantages. First, instead of requiring different computational processes for the different types of objects (or information), computation or inference can occur uniformly over different types of information when a uniform representation is used. The results of such a computation can then be \u201cmapped back\u201d into a particular type of object (or information) such that processes intrinsic to that type of object can use the results. Thus, by permitting different types of objects (or information) to be mapped to a uniform representation and a uniform representation to be mapped back to a particular type of object (or information), a wide variety of application or user information may be shared between computational processes. Such computational processes may be of uniform construction, while particular object (or information) class information (e.g., linear, active, or structured) need not be dictated to the applications or users. The task analysis methods of the present invention are examples of such computational processes.","[\u00a7] 4.2.3.2.3 Exemplary Software Architecture",{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 5","b":["500","520","540","530","510","312","510","312","510","510","510","522","522","510","524","524","522","510","524","524","522","510","524","522"],"i":["a","b","c","a ","a ","b ","b ","c ","c ","c "]},"Referring back to , an annotation runtime engine for dynamically assembling a-ERD formatted objects  may be thought of as an application program interface (or \u201cAPI\u201d) over the a-ERD layer  for dynamically assembling a-ERD objects according to some commands. More specifically, application programs  may use the annotation runtime engine  to use a-ERD objects. In addition, some applications programs  may use software services  which use the annotation runtime engine  to use RDF objects. The software services may include task analysis, which is the subject of the present application, natural language processing, and adaptive rendering (See, e.g., U.S. patent application Ser. No. 08\/669,781, filed on Jun. 25, 1996 and entitled ADAPTIVE RENDERING OF HYPERMEDIA DOCUMENTS, which is expressly incorporated herein by reference.).","[\u00a7] 4.2.3.2.4 Exemplary Uniform Relationship (Annotated ERDs)","In the following, an annotated ERD representation of objects (or information) is described. First, an overview of the known ERD semantic representation of databased data is presented in \u00a7 4.2.3.2.4.1. Then, a description of the annotated ERD representation, as well as some of its properties, is described in \u00a7 4.2.3.2.4.2.","[\u00a7] 4.2.3.2.4.1 ERDs","To reiterate, the a-ERD (or annotated-Entity Relationship Diagram) format  provides a uniform way to gather and use different types of objects. The a-ERD  has a \u201cvocabulary\u201d and a \u201csyntax\u201d. The a-ERD vocabulary is defined by symbols. The a-ERD syntax defines rules for expressing objects as a graph structured in the a-ERD format. Basically, the a-ERD format  uses a sub-a-ERD (or \u201csub-graph or an annotated-entity relation diagram\u201d) structure to express objects. Although ERDs are known to those skilled in the art, they are discussed below for the readers' convenience.","ERDs provide a semantic model of data in a database. Semantic modeling permits a database to (i) respond more intelligently to user interactions, and (ii) support more sophisticated user interfaces. ERDs were introduced in the paper, Peter Pin-Shan Chen, \u201cThe Entity Relationship Model-Toward a Unified View of Data,\u201d , Framingham, Mass, (Sep. 22-24, 1975), reprinted in , pp. 741-754, edited by in Michael Stonebraker, Morgan Kaufmann Publishers, Inc., San Francisco, Calif. (1994) (hereafter referred to as \u201cthe Chen paper\u201d).","Basically, the Chen paper defines an \u201centity\u201d as a thing that can be distinctly identified. A \u201cweak entity\u201d is defined as an entity whose existence depends on some other entity. An entity may have a \u201cproperty\u201d or an \u201cattribute\u201d which draws its value from a corresponding value set. A \u201crelationship\u201d is an association among entities. Entities involved in a given relationship are \u201cparticipants\u201d in that relationship. The number of participating entities in a relationship defines the \u201cdegree\u201d of the relationship. In entity relationship diagrams, entities are depicted with rectangles, properties are depicted with ellipses, and relationships are depicted with diamonds.","Exemplary entity relationship diagrams are shown in , B, and A. Before describing these diagrams, a brief overview of the relational model of database design is presented here with reference to .  depicts a relational model of a database which relates a cuisine type identifier(s) (or \u201cCTID\u201d) to a restaurant identifier (or \u201cRID\u201d).  depicts a relational model of a database which relates a person\/place identifier (\u201cPPID\u201d) to a neighborhood(s) identifier (or \u201cNID\u201d). In the relational database vernacular, the table \/is referred to as the \u201crelation\u201d, each row (or record) \/of the relation \/is referred to as a \u201ctuple\u201d, the number of tuples \/in the relation \/is referred to as the \u201ccardinality\u201d of the relation \/, each column (or field) \/of the relation \/is referred to as an \u201cattribute\u201d of the relation \/, and the number of attributes \/of the relation \/is referred to as the \u201cdegree\u201d of the relation \/. A \u201cprimary key\u201d \/is a unique identifier for the relation. Basically, the primary key may be one or more attributes for which no two (2) tuples (or records) have the same value. The degree of the relation will not change with time, though the cardinality of the relation may change with time as tuples (or records) are added and\/or deleted. The cardinality of the relation is \u201cN\u201d and the cardinality of the relation is \u201cM\u201d. Finally, a domain is a pool of legal values, excluding the \u201cnull\u201d value, from which one or more attributes draw their actual values.","In the relation , a restaurant ID number is associated with a particular restaurant and the cuisine type ID number is associated with a particular cuisine type. For example, restaurant ID number  corresponds to McDonalds. The following table lists exemplary cuisine types and associated ID numbers.",{"@attributes":{"id":"p-0125","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["CUISINE TYPE ID NUMBER","CUISINE TYPE"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","African, Ethiopian, Morocan"]},{"entry":["2","American"]},{"entry":["3","Asian"]},{"entry":["4","Bar Food, Sandwiches,"]},{"entry":[{},"Hamburgers"]},{"entry":["5","Barbecue, Ribs"]},{"entry":["6","Bistro"]},{"entry":["7","Diners, Caf\u00e9s, Coffee Bars"]},{"entry":["8","Cajun, Creole"]},{"entry":["9","Caribbean, Latin American"]},{"entry":["10","Chinese"]},{"entry":["11","Continental, Belgian"]},{"entry":["12","Eclectic"]},{"entry":["13","Fast Food, Deli"]},{"entry":["14","French"]},{"entry":["15","German, Irish, English"]},{"entry":["16","Greek, Mediterranean, Turkish"]},{"entry":["17","Indian, Pakistani, Afghan"]},{"entry":["18","Italian"]},{"entry":["19","Japanese, Sushi"]},{"entry":["20","Kosher"]},{"entry":["21","Mexican, Southwestern"]},{"entry":["22","Middle Eastern"]},{"entry":["23","New American"]},{"entry":["24","Pizza"]},{"entry":["25","Russian, Eastern European"]},{"entry":["26","Seafood"]},{"entry":["27","Southern, Soul Food"]},{"entry":["28","Spanish, Portuguese"]},{"entry":["29","Steak"]},{"entry":["30","Vegetarian, Organic"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Although not shown in the relations, each restaurant may have other attributes such as a star rating (e.g., *, **, ***, ****, or *****), a cost rating (e.g., $, $$, $$$, $$$$, or $$$$$) and special options (e.g., Good Deal, Child Friendly, New, Romantic, 24-Hour, Afternoon Tea, Brunch, Delivery, Late Night, Live Entertainment, Noteworthy Wine List, Outdoor Seating, Pre-Theater Menu, Prix Fixe, Smoke Free, Smoke Friendly, View, etc.)","In the relation , a neighborhood ID number is associated with a particular neighborhood and the person\/place ID number is associated with a person or place. For example, neighborhood ID number  corresponds to the \u201cFinancial District\u201d neighborhood of New York City. The following table lists exemplary New York City neighborhoods and associated ID numbers.",{"@attributes":{"id":"p-0128","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["NEIGHBORHOOD",{}]},{"entry":["ID NUMBER","NEW YORK CITY NEIGHBORHOOD"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Manhattan"]},{"entry":["2","Brooklyn"]},{"entry":["3","Bronx"]},{"entry":["4","Queens"]},{"entry":["5","Staten Island"]},{"entry":["6","Downtown"]},{"entry":["7","Midtown"]},{"entry":["8","Upper East Side"]},{"entry":["9","Upper West Side"]},{"entry":["10","Battery Park City"]},{"entry":["11","Chelsea"]},{"entry":["12","Chinatown"]},{"entry":["13","East Village"]},{"entry":["14","Financial District"]},{"entry":["15","Flatiron"]},{"entry":["16","Garment District"]},{"entry":["17","Gramercy Park"]},{"entry":["18","Greenwich Village"]},{"entry":["19","Harlem"]},{"entry":["20","Hell's Kitchen"]},{"entry":["21","Little Italy"]},{"entry":["22","Lower East Side"]},{"entry":["23","Midtown East"]},{"entry":["24","Midtown West"]},{"entry":["25","Morningside Heights"]},{"entry":["26","Murray Hill"]},{"entry":["27","NoHo"]},{"entry":["28","SoHo"]},{"entry":["29","Theater District"]},{"entry":["30","TriBeCa"]},{"entry":["31","Union Square"]},{"entry":["32","West Village"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0129","num":"0128"},"figref":["FIG. 7A","FIG. 7A"],"b":"700","i":"a "},{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 7B","b":"700","i":"a "},"Executable software objects may also be expressed in a computer program application relation. For example, referring to , an application object entity and an icon rendering object entity are participants in a \u201chas an application icon\u201d relation. The icon rendering object entity has icon identification number and icon size number attributes or properties. The application object entity and the tools menu object entity are participants in a \u201chas an executable object\u201d relation. The tools menu object entity has a menu identification number attribute or property, and along with a spell check executable software object entity and a grammar check executable software object entity, is a participant in a \u201chas an executable object\u201d relation.","[\u00a7] 4.2.3.2.4.2 Annotated ERDs","One problem with the entity relationship diagram model of database design is that it is subjective, as is apparent from the entity relationship diagrams depicted in , B, and A. The Chen paper concedes that different people may view the same thing as either an entity or a relationship. The Chen paper leaves it to the enterprise administrator to define what are entities and what are relationships so that the distinction is suitable in their environment. (See the Chen paper at page 741, note 1.) This subjectivity of ERDs has been criticized. (See, e.g., C. J. Date, 1, (Fifth ed.), pps. 607-8, Addison-Wesley Publishing Company, Inc. (1990) (hereafter referred to as \u201cthe Date text\u201d).","The a-ERD structure of the resource description format  removes such subjectivity from semantic representations of data (or objects). For example, in an ERD, a restaurant entity may have a cuisine type property. On the other hand, in an a-ERD, a restaurant entity may participate in a \u201chas a\u201d relationship with a cuisine type entity, and the cuisine type entity may participate in an \u201cis served at\u201d relationship with a restaurant entity. Basically, the a-ERD structure functions to (i) convert all attributes to entities by means of a \u201chas a\u201d relation, for example, (ii) permit relationships on relationships (e.g., a \u201clocation of\u201d is an \u201cattribute of\u201d) or \u201cn-arym relationships, (iii) annotate the relations with text, and (iv) permit computed relationships. Each of these functions will be discussed below.","Thus, the annotated ERD uniform representation may be thought of as a collection of \u201celements\u201d. Each element may have an (i) optional \u201clabel\u201d which names the element (and may be non-unique), (ii) an optional \u201cidentifier\u201d which uniquely identifies the element, and (iii) an optional value.","In the ERD vernacular, an element is either an entity or a relation. (See; e.g., ) A relation connects two (2) ordered elements (each of which may be an entity or a relation). Since elements participating in a relation are ordered, a relation from element A to element B is distinct from a relation from element B to element A (though, as discussed below, there may be bi-directional relations). (See, e.g., .) An entity is an element that can optionally \u201ccontain\u201d other elements (i.e., any combination of entity or relation). An entity that \u201ccontains\u201d one or more elements may be referred to as a \u201ccontainer.\u201d (See, e.g., element \u2032 of )","An a-ERD representation may be expressed in two (2) ways\u2014as a list of predicates or as a directed hypergraph. For example,  illustrates the information \u201cMary ate the tasty cake\u201d as a directed hypergraph . A \u201ctime of\u201d relation  relates an \u201cevent\u201d entity  and a \u201cpast\u201d entity . The \u201cevent\u201d entity  is a container which contains Mary , agent , eat , patient , cake , attribute  and tasty  elements. The agent relation  relates the eat entity  to the Mary entity . The patient relation  relates the eat entity  to the cake entity . Finally, the attribute relation  relates the cake entity  to the tasty entity .  illustrates the same information as a list of predicates . These two expressions  and  of the uniform representation permit computational engines to use well-studied, as well as newly developed, algorithms in graph theory and predicate logic to efficiently infer and compute.","[\u00a7] 4.2.3.2.5 Mapping Various Types of Objects (or Information) to a Uniform Representation","As mentioned above, various types of objects (or information) may be mapped to a uniform representation. Examples of such mapping processes are presented below.","Tabular, graph, or hierarchical (e.g., tree) structures can all be mapped to a graph. First, as shown in , a graph  can be mapped directly to a hypergraph  representation. Note that the entity elements  of the graph  correspond directly to the nodes  of the hypergraph  and that the relation elements  of the graph  correspond directly to the directed arcs  of the hypergraph .","As shown in , a hierarchical tree structure  can be mapped to a hypergraph representation . The entries  of the tree  correspond directly to the nodes  of the hypergraph . The structure of the tree  is reflected in the arcs of the hypergraph  labeled \u201cparent\/child\u201d. In this example, a \u201cmanages\/reports-to\u201d relation may be used instead of the more general \u201cparent\/child\u201d relation. As discussed above, examples of tree structures include XML (eXteneded Markup Language), organizational charts, and binary trees.","Finally, as shown in , a tabular structure  can be mapped to a hypergraph representation . A table entity (or node)  of the hypergraph is related to row entities (or nodes)  and column entities . The row and column entities (or nodes)  and , respectively, are related to values from the table .","Tables of a relational database may be mapped to a hypergraph as follows. First, regarding the conversion of all attributes to entities, recall that in , the restaurant entity has rating, cuisine type, and special options attributes or properties.  depicts an a-ERD derived from the ERD . As shown, in the a-ERD , the rating and cuisine type attributes are now entities which participate in a \u201chas a\u201d relationship with the restaurant entity. Similarly, in the a-ERD , the special options attribute is now an entity which participates in an \u201coffers\u201d relationship with the restaurant entity.","Similarly, recall that in the ERD of , the person\/place entity has a neighborhood attribute or property. However, in the a-ERD of , neighborhood is now an entity which participates in a \u201cis in a\u201d relationship with the person\/place entity.","Finally, recall that in the ERD of , the tools menu object entity had a menu identification number attribute or property, and the icon rendering object entity had an icon identification number and an icon size number attributes or properties. However, in the a-ERD of , the icon size number and icon identification number attributes are now entities which participate in a \u201chas a\u201d relationship with the icon rendering object entity. Finally, the menu identification number attribute is now an entity which participates in a \u201chas a\u201d relationship with the tools menu object entity.","Although the a-ERD format  was described with reference to graphs in , B, and B, the resource description format is a textual predicate\u2014it is not graphed. (Recall, e.g., ) Thus, for example, the a-ERD of  may be represented as:\n\n","Each application process  may be represented by a full a-ERD. If, for example, the application is a word processor, the a-ERD may denote the relationship(s) among (executable software) \u201cobject\u201d entities. If, on the other hand, the application is a resource browser, the a-ERD may denote the relationship(s) among databased resources.","Linear objects (or information) may be mapped to a hypergraph representation by providing a \u201cprecedes\u201d or \u201cfollows\u201d relationship, or a \u201cpreceeds\/follows\u201d bi-directional relationship between pieces (e.g., words) of the linear information. For example, referring to , the linear object (or information) \u201cone, two, three\u201d may be mapped to the hypergraph representation in which entities, corresponding to the pieces (e.g., words) are related to one another by \u201cpreceeds\/follows\u201d relations. Once again, an equivalent textual predicate list may be used instead of a directed hypergraph.","Finally, active objects (or information) may be mapped to a hypergraph representation. In the following description, two (2) types of active objects (or information) are considered. The first type is an object with both properties (or variables) and methods. The second type is an object with methods but no properties (or variables), also referred to as code.","The first type of active object, that is, one with both properties (or variables) and methods, may be mapped to a hypergraph representation as follows. First, an entity is created for each property (or variable) of the object, as well as for the object itself. Then relations that relate the property (or variable) entities to the object entity are created. For example, referring to , an object  called \u201cperson\u201d has \u201cname\u201d and \u201cbirthday\u201d properties. As shown in , the object and its properties are represented as related entities. Next, methods associated with any of the properties (i.e., methods that \u201cset\u201d or \u201cget\u201d a property) are mapped through the same entity. Thus, when a process accesses an entity in the representation, the object's \u201cget\u201d method is invoked for the corresponding property. When the process writes information into an entity, the object's \u201cset\u201d method is invoked for the corresponding property. Likewise, when the property of an object is called programmatically, the representation is updated with appropriate values of the property. For example, referring to , the \u201cperson\u201d object  has a \u201ccard-reminder\u201d method that \u201cgets\u201d a \u201cname\u201d property. This is depicted in the hypergraph by the \u201ccard-reminder\u201d entity and the \u201cname\u201d entity having a \u201cget\u201d relation.","For the second type of active object, that is, object methods with no corresponding properties (or variables), each method is mapped to a set to a set of entities that represent input and output parameters of the method. Appropriate relations are created between such entities. Finally, a container (or parameter list) is built for all of the entities. For example, referring again to , the \u201cage\u201d and \u201cchange-password\u201d methods have no corresponding properties. As shown in the hypergraph representation, the \u201cage\u201d and \u201cchange-password\u201d methods are depicted as entities, each related to a \u201cparameter list\u201d (or container) entity. The \u201cparameter list\u201d entities are related to entities corresponding to parameters of the method (i.e., \u201cold password\u201d, \u201cnew password\u201d and \u201cage\u201d) via \u201ccontains\u201d relations. Once again, an equivalent textual predicate list may be used instead of a directed hypergraph.","Note that all properties (or variables) and methods of an object need not be mapped to the uniform representation. For example, referring to  and B, a person object  from an address book application is mapped to a uniform representation. Note that the \u201cfull name\u201d property is not mapped to the hypergraph representation. (It is not needed since it is redundant to the \u201cgiven name\u201d property.) Further, the \u201cpassword\u201d property is not mapped. (The application is not interested in sharing, via the uniform representation, that property with outer applications or computational processes.)","Note that mapping objects (or information) to the uniform representation may result in inefficient representations. For example, referring back to , a linear stream can increase significantly in size when mapped to the uniform hypergraph representation. Similarly, referring back to , a table can increase quite significantly in size when mapped to the uniform hypergraph. However, the uniform representation may be compressed. For example, referring to , the uniform hypergraph representation of the linear object found in  may be compressed to two related entities. Referring to , the uniform hypergraph representation of the table object found in  may be compressed to dimension, schema (e.g., column name) and data entities all related to a table entity.",{"@attributes":{"id":"p-0153","num":"0155"},"figref":["FIG. 45","FIGS. 8A","FIGS. 34A and 34B","FIGS. 35A and 35B","FIG. 40","FIG. 36.","FIG. 39","FIGS. 37A and 37B"],"b":["330","4510","4515","8","9","4520","4525","4530","4535","4540","4545","4550","4555"]},"[\u00a7] 4.2.3.2.6 Other Aspects of the Uniform Representation","The uniform representation of the present invention can also handle intentional and extensional definitions. As shown in , intentional definitions are created by attaching code (active information)  to predicates and supporting logic symbols . Line  is an example which illustrates and extensional definition.","The uniform representation of the present invention can also handle incremental attribution. That is, the uniform representation has been designed with the understanding that knowledge in the representation may be incomplete. For example, statements (or code) such as:\n\n","The uniform representation of the present invention can handle ambiguity. Many predicate logic based systems, such as deductive databases or deductive object oriented databases for example, require logical consistency in the database. Thus, for example, in such applications, facts such as \u201ccolor(A, Red)\u201d and \u201ccolor(A, Blue)\u201d can't exist in the database if only one color is permitted for A. In particular, this will result in both of the following to be true: color(A, Red) and color(A, \u02dcRed) (where \u02dc is the logical NOT), which is a logical contradiction. The uniform representation of the present invention does not constrain knowledge to a particular logical formalism. Accordingly, both predicates may be simultaneously represented, notwithstanding the fact that they may define a logical contradiction. It is left to other computational processing to disambiguate these statements, possibly by searching for other contextual information (as illustrated below), or waiting for additional attribution as noted above (as illustrated below). For example, referring to , note that in , a truck entity is permitted to have two, seemingly contracting, colors\u2014red and blue. However, as shown in , additional attribution resolves the seeming contraction. That is, the truck had color red before Mar. 1, 1998, and had color blue after Mar. 1, 1998. (It was possibly painted on Mar. 1, 1998.)  illustrates both additional attribution and contextual information. That is, Tom said before Mar. 1, 1998, that the truck is red and after Mar. 1, 1998, that the truck is blue. Nancy said before Mar. 1, 1998, that the truck is red and after Mar. 1, 1998, the truck is green. It is noted that Tom is color blind. Thus, for example, it is left for an application using the information from the uniform representation of the present invention to discount Tom's statements of color.","The uniform representation of the present invention handles multiple attribution. Since the uniform representation of the present invention handles ambiguity, incremental attribution, and multiple contexts, as described above, different applications with different \u201cpoints of view\u201d can add their attributes into the uniform representation. For example, referring to , different applications may be concerned with different things about Tom. Thus, a medical application may be concerned with the fact that Tom is color blind. A personal address book application may be concerned with the fact that Tom is a friend that lives at an address. Finally, a human resources application may be concerned with the fact that Tom was hired on Jul. 1, 1992, is a senior manager, and has an address. As in the example of , sometimes the attributes do not conflict. However, attributes may conflict, as noted above. However, to reiterate, mapping and contexts may be used to disambiguate them.","The a-ERD format permits relations on relations. Referring, for example, the a-ERD of , an Internet resource entity participates in a \u201crendered by\u201d relationship with a user entity, and the \u201crendered by\u201d relationship participates in an \u201cat\u201d relationship with a time entity. That is, a user rendered an Internet resource at a time.","The a-ERD format , the relationships are annotated with text using the vocabulary of the a-ERD format (e.g., \u201chas a\u201d, \u201cis a\u201d, \u201cbelongs to\u201d, etc.). Basically, in ERDS, the text is typically for use by humans when designing a database or database application\u2014the database or database application itself does not use the text. This is not the case with the a-ERD format.","The a-ERD format  permits computed relations. For example, referring to , a restaurant may be within a number of overlapping neighborhoods in New York City. In this instance, for example, Il Mulino is within the Little Italy, Downtown, and Manhattan neighborhoods of New York City. Rather than have a separate \u201cwithin\u201d relationship for each of these overlapping neighborhoods, since Little Italy is always within Downtown Manhattan, and since Little Italy and Downtown Manhattan are always within Manhattan, the Il Mulino restaurant will only have a \u201cwithin\u201d relationship with the Little Italy neighborhood. The fact that the Il Mulino restaurant is also within downtown and Manhattan can be computed. In anther example, distances between person\/place entities would be calculated as needed, rather than predetermined for each case.","The foregoing features enable the uniform representation of the present invention to handle real world cases of natural language query, where users make ambiguous statements in context, as well as applications having different \u201cworld views\u201d. More formal representation systems are useful for very specific reasoning, but are too fragile for real world use.","Another uniform object format is Unified Modeling Language (or \u201cUML\u201d) which is used by Repository from Microsoft Corporation of Redmond Washington, Yet another uniform object format is Meta Content Format (or \u201cMCF\u201d) from Apple Computer of Cupertino, Calif.","[\u00a7] 4.2.3.3 Task Boundary Determination Process","Having described exemplary object log  and uniform representation  processes, exemplary task boundary determination processes  are now presented. Recall that the object log process defined sessions based on, for example, a period of activity followed by a period of inactivity. However, a user or users may perform more than one task in a given session or may perform only one task over a number of sessions. Thus, task boundaries should be defined. Defining task boundaries is not necessary, but it is believed that modeling task boundaries is far easier than modeling the tasks themselves. Naturally, the task boundary model used may introduce artifacts in the task analysis process.","There are a number of ways that task boundaries may be defined, some examples of which are presented below. Initially, simple, less sophisticated task boundary definition models are presented. Then, more sophisticated models are discussed.","In a first method for defining task boundaries, a task boundary is defined after an arbitrary number of user interactions. The arbitrary number may be stored as a task boundary model parameter . Although this model is easy to implement, it would produce a number of arbitrary boundaries assuming that different tasks require different numbers of steps by the user.","In a second method for defining task boundaries, each of a number of sub-a-ERDs are defined to correspond to a given task. A task boundary is defined whenever two consecutive user interactions use different sub-a-ERDs. The sub-a-ERDs may be stored as task boundary model parameters. The problem with this model is that it is based on predetermined assumptions of what tasks users will want to perform. Thus, the model is based on a static set of assumptions that may not anticipate tasks actually performed.","In a third method for defining task boundaries, the application process  has a defined a-ERD as discussed above. The a-ERD may be stored as a task boundary model parameter . Sub-a-ERDs are composed corresponding to user inputs (e.g., commands, queries, etc.) A task boundary is defined when two (2) consecutive disjoint sub-a-ERDs of the a-ERD are greater than a predetermined distance apart. The subject of determining the distance between sub-a-ERDs is described in \u00a7 4.2.3.4 below.","In a fourth method for defining task boundaries, like the third method, the application process  has a defined a-ERD, and sub-a-ERDs are composed corresponding to user inputs, as discussed above. The a-ERD may be stored as a task boundary model parameter . A task boundary is defined when two (2) consecutive disjoint sub-a-ERDs of the a-ERD are not joined in a query or user input. For example, sub-a-ERDs corresponding to the queries \u201cRestaurants in the Theater District\u201d and \u201cMovies in TriBeCa\u201d are disjoint and unconnected. On the other hand, sub-a-ERDs corresponding to the queries \u201cRestaurants in the Theater District\u201d and \u201cMovies in the Theater District\u201d are connected by the context of the queries (i.e., common neighborhood) or sub-a-ERDs corresponding to the queries \u201cRomantic restaurants\u201d and \u201cPrice of the same restaurant\u201d are related by the context of the queries (i.e., \u201csame restaurant\u201d).","Other methods for defining task boundaries may use a combination of any of the above four models.","If the user's interaction is supervised or limited such that task boundaries are explicitly entered by the user or explicitly defined, the steps of defining task boundaries need not be performed.","Referring back to , the task boundary determination process generates usage task data  having records  with, at least, a sub-a-ERD field  and a task ID field .","[\u00a7] 4.2.3.4 Task Analysis Process","Having described exemplary object log , uniform object representation , and task boundary determination  processes, an exemplary task analysis process  is now described. Referring first to , the task analysis process  uses tunable parameters  to convert usage task data  into task model data . The task model data  may include records  having a task ID field  and a cluster ID field  (and an optional sub-a-ERD filed ), and may also include records  having a cluster ID field  and a cluster probability field .",{"@attributes":{"id":"p-0175","num":"0179"},"figref":"FIG. 11","b":["352","1100","1100","1110","1110","1110","1110","1120","1100","1122","1110","1110","352","1100"],"i":["a","b","c "]},{"@attributes":{"id":"p-0176","num":"0180"},"figref":["FIG. 12","FIGS. 13","FIG. 16","FIG. 17"],"b":["350","1210","14","15","1220","1230","1240"]},"The details of the exemplary step for determining task distances is now described with reference to , , and .  is a high level flow diagram of an exemplary process \u2032 for performing a step of determining task distances (Recall, e.g., step  of FIG. .). First, as shown in step , the task (e.g., a database query) is represented as a graph (e.g., a sub-a-ERD). Details of this step are described with reference to  below. Next, as shown in step , a distance between task graphs, which considers a connectedness of the task graphs differences, is determined. Details of this step are described with reference to  below. Processing then continues via return node .",{"@attributes":{"id":"p-0178","num":"0182"},"figref":["FIG. 14","FIG. 13."],"b":["1310","1310","1410","1420","1430","1440"]},{"@attributes":{"id":"p-0179","num":"0183"},"figref":["FIG. 15","FIG. 13."],"b":["1320","1320","1510","1520","1530","1540"],"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"d","mo":"*","mrow":{"mo":["(",")"],"mrow":{"mi":["B","A"],"mo":","}}},{"munder":{"mo":"\u2211","mrow":{"mi":"i","mo":["\u2208","\u2062"],"mstyle":{"mtext":"\u2003"},"mrow":{"mi":["all","graph","pieces"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mtext":"\u2003"},{"mtext":"\u2003"}]}}},"mo":["\u2062","\u2062"],"mstyle":{"mtext":"\u2003"},"msup":{"mi":"v","mrow":{"mo":["\uf603","\uf604"],"msubsup":{"mi":["c","i","\u2032"]}}}}],"mo":"="}}},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["where: A and B are the graphs,\n        \n        ","where: n\u2261the number of vertices and edges in A\u2229B\n\nProcessing continues via return node  .\n"]}}}},{"@attributes":{"id":"p-0180","num":"0189"},"figref":["FIG. 16","FIG. 12."],"b":["1220","1220","1220","1610","1620","1630","1640","1660","1660","1660","1650","1620","359"]},"In some instances, the task analysis (e.g., clustering) should be performed on sequence independent tasks. In such cases, all of the sub-a-ERDs associated with users and tasks may be united into one large sequence independent task (or \u201cSIT\u201d) sub-a-ERD. Pattern matching algorithms may then be used to classify and cluster the SITs.","Results of the task clustering process may be used to further abstract the a-ERD representation of the application process . Recall, for example, that the a-ERD representation of the application process  may be a task boundary model parameter .",{"@attributes":{"id":"p-0183","num":"0192"},"figref":["FIG. 17","FIG. 12."],"b":["1230","1230","1710","1120","1110","11","1120","1122","1100","11","1720"]},"Other probabilities related to the analyzed tasks may also be determined. A hypergraph of the a-ERD (or \u201cHAG\u201d) corresponding to the application process  may be defined by (i) nodes corresponding to sub-a-ERDs corresponding to steps taken (or queries made) in a defined task, and (ii) directed edges corresponding to the order of steps taken (or queries made) in the defined task. In the HAG, nodes of degree one (1) having an exiting edge are defined as \u201cstart nodes\u201d of the task and nodes of degree one (1) having an entering edge are defined as \u201cend nodes\u201d of the task. Probabilities corresponding to each HAG (or task) may be determined as discussed above with reference to FIG. . In addition, task start nodes may be assigned a probability\u2014P (start node|HAG) . Edges of the HAG (task) may be labeled with a probability associated with taking that particular edge\u2014P (node\u2192node|HAG) . Similarly, the probability of taking an edge given a particular start node\u2014P (node\u2192node|HAG, start node)\u2014may be determined.","[\u00a7] 4.2.3.5 Task Help Process","Having described exemplary processes for performing the off-line functions of the present invention, exemplary processes for performing the run-time functions of the present invention, namely task help and task based advertising, are now described. An exemplary process for performing the task help function will be described in this section with reference to . Then, an exemplary process for performing the task based advertising function will be described in \u00a7 4.2.3.6, below.",{"@attributes":{"id":"p-0187","num":"0196"},"figref":["FIG. 18","FIG. 3B"],"b":["370","370","352","354","355","353","356","395","396","397","398"]},"Referring now to , first, as shown in step , user inputs are accepted. Then, as shown in step , the user inputs are formatted as a run-time graph. The run-time graph may be generated in the same manner as discussed in \u00a7 4.2.3.4 above with reference to FIG. . Next, as shown in step , distances between the run-time graph and the task clusters of the task model  are determined. This distance determination may be carried out in the same manner as discussed in \u00a7 4.2.3.4 above with reference to FIG. . Next, as shown in step , the closest task cluster to the run-time graph is determined. Next, as shown in decision step , if the closest distance is not less than a predetermined threshold, then processing continues at step . If, on the other hand, the closes distance is less than the predetermined threshold, then help related to accomplishing the task related to the closest task cluster is provided to the user as shown in steps  and . Processing then continues via return node .","The help provided may be in the form of a script (or \u201cwizard\u201d), a query, a hint, navigational assistance, etc. For example, in the context of a word processing application, the task help process \u2032 may recognize that the user is performing steps \u201cclose to\u201d a \u201cgenerate food recipe card\u201d task cluster. In this case, the application may prompt the user, \u201cIT SEEMS THAT YOU ARE TRYING TO ENTER A RECIPE. WOULD YOU LIKE HELP IN FORMATTING A RECIPE CARD?\u201d If the user replies yes, recipe card formatting help is provided. In the context of an Internet website for providing information about things to do in a particular city, the task help process may recognize that the user is performing steps \u201cclose to\u201d a \u201cplan a romantic date\u201d task cluster. For example, the user may have requested romantic restaurants located at the upper east side of New York City. In this case, the Internet website may provide gratuitous information regarding romantic things to do in the same neighborhood. For example, the Internet website may convey to the user, \u201cIT SEEMS THAT YOU MAY BE PLANNING A ROMANTIC EVENING IN THE UPPER EAST SIDE. YOU MAY CONSIDER A HORSE DRAWN CARRIAGE RIDE THROUGH CENTRAL PARK. ALSO, \u201cTHE ENGLISH PATIENT\u201d IS PLAYING AT THE FOLLOWING MOVIE THEATERS IN THE UPPER EAST SIDE . . . .\u201d","To summarize, the task help process  basically, determines a task that a user is trying to perform, gets the associated task cluster ID from the task model , and uses the associated task cluster ID to find task help content  in the task help content storage . Naturally, the task help content field  may include an addressees) to a storage location(s) of task help content.","[\u00a7] 4.2.3.6 Task Based Advertising Process","Having described an exemplary process for performing the task help function of the present invention, an exemplary process for performing the task based advertising function will be described with reference to .  is a flow diagram of an exemplary process \u2032 for performing a task based advertising function in accordance with the present invention. Recall from  that the task based advertising process  has access to (i) the task model , which includes records  which associate task IDs  (and sub-a-ERDs ) with cluster IDs , and (ii) marketing information content storage , which includes records  which associate cluster IDs  with marketing information content . Basically, if (a graph composed based on) steps input by a user match a task cluster to a sufficient degree, the user is presented with related marketing information.","Referring now to , first, as shown in step , user inputs are accepted. Next, as shown in step , the user inputs are formatted as a run-time graph . As was the case with the task help process \u2032 discussed above with reference to , the run-time graph may be generated in the same manner as discussed in \u00a7 4.2.3.4 above with reference to FIG. . Next, as shown in step , distances between the run-time graph and the task clusters of the task model  are determined. As was the case with the task help process \u2032 discussed above with reference to , this distance determination may be carried out in the same manner as discussed in \u00a7 4.2.3.4 above with reference to FIG. . Next, as shown in step , advertisement(s) related to the closest task cluster(s) are presented to the user. For example, in the context of an Internet website for providing information about things to do in a particular city, the task help process may recognize that the user is performing steps \u201cclosest to\u201d planning a romantic date task cluster, and also \u201cclose to\u201d an eating out task cluster. For example, the user may have requested romantic restaurants located at the upper east side of New York City. In this case, the Internet website may provide advertisements regarding romantic things to do in the same neighborhood. For example, the Internet website may advertise horse drawn carriage rides through central park and local movie theaters playing romantic movies. A second closest task cluster may be eating out. Thus, the Internet website may also provide advertisements regarding coffee bars or pastry shops in the same neighborhood.","[\u00a7]4.2.4 Data Structures and Instructions","The above mentioned processes may be carried out by machine readable instructions. Referring to , these instructions  may be stored on a machine readable medium and\/or communicated over a communications medium . Similarly, the data used by the processes may have particular data structures. Referring to , these data structures  may be stored on a machine readable medium and\/or communicated over a communications medium ","[\u00a7] 4.3 Operation of the Present Invention","Examples of building object usage logs in the environments depicted in  are depicted in , respectively, and described \u00a7 4.3.1 below. Examples of performing run-time functions (e.g., task help and task-based advertising) in the environments depicted in  are depicted in , respectively, and described in \u00a7 4.3.2 below.","Examples of the operation of various processes, which may be performed by the present invention, are described in the context of an Internet website for providing content in response to queries in \u00a7 4.3.3 below.","[\u00a7]4.3.1 Building Object Usage Log Operation","Operations for building an object usage log, both in the context of the client-server environment  depicted in , and in the context of the desktop environment \u2032 depicted in , will now be described with reference to , respectively.","[\u00a7] 4.3.1.1 Client-server Environment",{"@attributes":{"id":"p-0200","num":"0209"},"figref":"FIG. 25","b":["100","1","114","122","112","116","2510","116","2510","116","2510"]},"In response to the communication , the front end application process  forwards a request or command, in communication , to the back end application process  via an output interface process (not shown), a network (not shown), and an input interface process (not shown). (See, e.g., elements , , and  of ) In response, the back end application process  submits a request or command, in communication , to the stored objects\/resources  which returns, in communication , a resource (e.g., an HTML page) corresponding to the request in the communication  or an object (e.g., a spell check executable software object) corresponding to the command in communication . The back end application process  then returns, in communication , the resource (e.g., the HTML page) or the object (e.g., the spell check executable software object). Depending on the allocation of tasks between the front and back end application processes  and , respectively, rather than returning the executable object, the back-end application process  may return, in the communication , a product of the object activity (i.e., the value returned when the software object is executed) to the front end application process . Thereafter, the front end application process  returns, in communication , the requested resource or the product of the object activity corresponding to the command.","Before, after, or concurrently with the communications  and , the back end application process  will also forward, in communication , the object ID associated with the request or command of communications  and  to the object log process . In response, the object log process  submits, in communication , the object ID and the time, to the object usage log  for storage. The time may be provided by a service process (not shown) of the server. The communication  may also include a user ID.","[\u00a7] 4.3.1.2 Desktop Environment",{"@attributes":{"id":"p-0204","num":"0213"},"figref":"FIG. 26","b":["100","1","140","150","2610","2610","2610"]},"In response to the communication , the application program management process  forwards a request\/command, in communication , to the storage management process . In response, the storage management process  submits a request\/command, in communication , to the stored objects\/resources  which returns, in communication , a resource (e.g., an employee record) corresponding to the request in the communications  and  or an object (e.g., a spell check executable software object) corresponding to the command in communications  and . The storage management process  then returns, in communication , the resource (e.g., the employee record) or the object (e.g., the spell check executable software object) to the application program management process . Thereafter, the application management process  returns, in communication , the requested resource or the product of the object activity corresponding to the command.","Before, after, or concurrently with the communications  and , the application program management process  will also forward, in communication , the object ID associated with the request or command of communication  to the object log process . In response, the object log process  submits, in communication , the object ID and the time, to the object usage log  for storage. The time may be provided by a service process (not shown) of the server. The communication  may also include a user ID.","[\u00a7] 4.3.2 Run-time Functions Operations","The operations of the run-time functions (e.g., task help and task-based advertising), both in the context of the client-server environment  depicted in , and in the context of the desktop environment \u2032 depicted in , will now be described with reference to , respectively.","[\u00a7] 4.3.2.1 Client-server Environment",{"@attributes":{"id":"p-0209","num":"0218"},"figref":"FIG. 27","b":["100","1","114","122","112","116","2705","116","2705","116","2705"]},"In response to the communication , the front end application process  forwards a request\/command, in communication , to the back end application process  via an output interface process (not shown), a network (not shown), and an input interface process (not shown). (See, e.g., elements , , and  of ) In response, the back end application process  submits a request\/command, in communication , to the stored objects\/resources  which returns, in communication , a resource (e.g., an HTML page) corresponding to the request in the communication  or an object (e.g., a spell check executable software object) corresponding to the command in communication . The back end application process  then returns, in communication , the resource (e.g., the HTML page) or the object (e.g., the spell check executable software object) to the front end application process . Depending on the allocation of tasks between the front and back end application processes  and , respectively, rather than returning the executable object, the back end application process  may return, in the communication , a product of the object activity to the front end application process . Thereafter, the front end application process  returns, in communication , the requested resource or the product of the object activity corresponding to the command.","Before, after, or concurrently with the communications  and , the back end application process  will also forward, in communication , the object ID associated with the request or command of communication  to the task help process  and\/or the task-based advertising process . In response to the communication , the task help process  and\/or the task-based advertising process  compares the received object ID(s) with one or more task clusters of the task model  requested in communication  and accepted in communication . (Note that the task help process  or the task-based advertising process  may use a run-time graph constructed based on a number of user inputs as discussed above.) If the object ID(s) (or run-time graph) correspond to a task which is \u201cclose to\u201d a given task cluster, then the task cluster ID is used to access appropriate help content  and\/or marketing information content . More specifically, the task help process  and\/or the task-based advertising process  submits a request , including the cluster ID, to the task help content  and\/or the marketing information content , respectively. In response, the task help and\/or marketing information corresponding to the cluster ID of the request  is returned to the task help process  and\/or the task-based advertising process  in communication . The task help process  and\/or the task-based advertising process  then sends the help content and\/or the marketing information content to the back end application process  in communication . The back end application process  then forwards the help content and\/or the marketing information content to the front end application process  in communication . Finally, the help and\/or marketing information is sent, in communication , to the user interface process  where the help and\/or marketing information is rendered.","[\u00a7] 4.3.2.2 Desktop Environment",{"@attributes":{"id":"p-0213","num":"0222"},"figref":"FIG. 28","b":["100","1","140","150","2805","150","2805","150","2805"]},"In response to the communication , the application program management process  forwards a request\/command, in communication , to the storage management process . In response, the storage management process  submits a request or command, in communication , to the stored objects\/resources  which returns, in communication , a resource (e.g., an employee record) corresponding to the request in the communication  or an object (e.g., a spell check executable software object) corresponding to the command in communication . The storage management process  then returns, in communication , the resource (e.g., the employee record) or the object (e.g., the spell check executable software object) to the application program management process . Thereafter, the application management process  returns, in communication , the requested resource or the product of the object activity corresponding to the command.","Before, after, or concurrently with the communications  and , the application program management process  will also forward, in communication , the object ID associated with the request or command of communication  to the task help process  and\/or the task-based advertising process . In response to the communication , the task help process  and\/or the task-based advertising process  compares the object ID(s) received with one or more task clusters of the task model  requested in communication  and accepted in communication . (Note that the task help process  or the task-based advertising process  may use a run-time graph constructed based on a number of user inputs as discussed above.) If the object ID(s) (or run-time graph) correspond to a task which is \u201cclose to\u201d a given task cluster, then the task cluster ID is used to access appropriate help content  and\/or marketing information content . More specifically, the task help process  and\/or the task-based advertising process  then submits a request , including the cluster ID, to the task help content  and\/or the marketing information content , respectively. In response, the help and\/or marketing information corresponding to the cluster ID of the request  is returned to the task help process  and\/or the task-based advertising process  in communication . The task help process  and\/or the task-based advertising process  then sends the help content and\/or the marketing information content to the application management process  in communication . Finally, the help or marketing information is sent, in communication , to the user interface process  where the help and\/or marketing information is rendered.","[\u00a7] 4.3.3 Examples of Operations of Processes of the Present Invention","In the following examples, it is assumed that an Internet website includes databased information regarding restaurants and movie theaters in New York City. In the following sections, , B, , , , A, B, A-C, A, B, A-D, and  will be referenced.","[\u00a7] 4.3.3.1 Operation of the Task Graph Generation Process","An example of the operation of the task graph generation process \u2032 of , in the context of the Internet website for providing content in response to queries regarding restaurants and movie theaters in New York City, is now presented with reference to , B, , A, and B.",{"@attributes":{"id":"p-0219","num":"0228"},"figref":"FIGS. 20A and 20B","b":"29","ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["[cuisine, CTID (), RID (*)], and","[neighborhood, PPID (*), NID ()]","where: \u201ccuisine\u201d is the name of a relation (table) in the database (See, e.g., relation of FIG. A.);\n        \n        ","[cuisine, CTID (*), RID ()]","where: \u201ccuisine\u201d is the name of a relation (table) in the database (See, e.g., relation of FIG. A.);\n        \n        "]}}}},"Recall from  that a task graph is generated.  depicts a task graph generated from the first query and  depicts a task graph generated from the second query.","Recall from step  of  that a vertex is defined for each attribute and each relation. Thus, referring first to , the neighborhood and cuisine relations are assigned to vertices  and , respectively, and the NID() and the CTID() attributes are assigned to vertices  and , respectively. Since the PPID(*) and RID(*) have the same variable, they are merged into one vertex . (Recall step  of ) Similarly, referring to , the cuisine relation is assigned to vertex  and the RID() and CTID(*) attributes are assigned to vertices  and , respectively.","Recall from step  of , that edges are defined which connect related attributes and attributes that are instances of a relation. Thus, referring first to , an \u201cinstance\u201d edge  between vertices  and  indicates that the NID attribute is an instance of the neighborhood relation, a \u201chas\u201d edge  between vertices  and  indicates that the NID attribute has PPID attributes(s), an \u201cinstance\u201d edge  between the vertices  and  indicates that CTID is an instance of the cuisine relation, and a \u201chas\u201d edge  between vertices  and  indicates that the RID attribute has CTID attribute(s). Referring now to , the \u201cinstance\u201d edge  between vertices  and  indicates that the CTID is an attribute of the cuisine relation, and the \u201chas\u201d edge  between the vertices  and  indicates that the RID attribute has a CTID attribute(s).","[\u00a7] 4.3.3.2 Operation of the Distance Determination Process","An example of the operation of the graph distance determination process \u2032 of , in the context of the Internet website for providing content in response to queries regarding restaurants and movie theaters in New York City, is now presented with reference to , A-C, A and B. In this example, three queries are processed to illustrate the operation of the graph distance determination process \u2032. The first query, which is graphically depicted in , requests \u201cmovies\u201d that are playing at a particular place (e.g., TriBeCa) within a particular time frame (e.g., tonight). The second query, which is graphically depicted in , requests \u201cmovies\u201d that have a particular actor (e.g., Tom Hanks) and a particular rating (e.g., PG). The third query, which is graphically depicted in , requests \u201crestaurants\u201d that are opened at a particular time (e.g., late night) at a particular place (e.g., Chelsea). Assume in this example that movies are entities that participate in a \u201chas\u201d relation with time, place, actors, and rating entities and that restaurants are entities that participate in a \u201chas\u201d relation with time and place entities.","Recall from step  of  that the intersection two task graphs is determined. The intersection of two graphs includes common edges and common vertices. Vertices are common (i.e., are the same) if (a) they are labeled with the same relation, (b) they are labeled with the same attribute and have the same constant value, or (c) they are labeled with the same attribute and have two variable (e.g., wildcard) values. Edges are common (i.e., are the same) if they are labeled the same and they have the same start and end point vertices.","Recall from step  of  that the differences between task graphs is determined.  depicts the result of subtracting the graph of  from the graph of FIG. A. The result of subtracting the graph of  from the graph of (not shown) would be similar except the \u201cmovie\u201d vertex would be a restaurant vertex and the \u201chas\u201d and \u201chas\u201d edges would be \u201chas\u201d and \u201chas\u201d edges, respectively.  depicts the result of subtracting the graph of  from the graph of FIG. A. The result of subtracting the graph of  from the graph of  (not shown) would be similar except that the \u201ctime\u201d and \u201cplace\u201d vertices would be replaced with \u201cactors\u201d and \u201cratings\u201d vertices, and the \u201chas\u201d and \u201chas\u201d edges would be replace with \u201chas\u201d and \u201chas\u201d edges. In any event, a comparison of the difference graphs of  shows that the difference graph of  is more \u201cconnected\u201d than the difference graph of FIG. B.","In general, the more connected the difference graph is, the more different the queries (or graphed tasks) are. Recall in \u00a7 4.2.3.4 above that an intermediate distance between graphs is based on a sum, over all pieces of the difference graph, of tunable parameters \u201cV\u201d to raised to the number of connected elements \u201cC\u201d in the piece \u201ci\u201d of the difference graph. Thus, graphed tasks are more distant, and hence more different, as the connectedness of their differences increases. In this example:\n\n","Since, in this example, \u2229is 2 (i.e., the time and place vertices) and \u2229is 1 (i.e., the movie vertex), the final distance d(,) is 1000\/2=500 and the final distance d(,) is 200\/1=200.","In this example, the tasks graphed in both are related to finding out information about a movie. Although the tasks graphed in both are related to finding something opened at a certain time and located at a certain place, the \u201csomething\u201d differs (i.e., restaurants and movies). Thus, the results of the processing confirm the intuitive feeling that tasks for finding movies having a particular actor and rating and for finding movies playing at a particular time and place are more similar than tasks for finding movie playing at a particular time and place and finding a restaurant opened at a particular time and place. Naturally, the results may change depending upon the values of any attributes entered in the query. For example, tasks for finding the rating of, and actors in, a particular movie and for finding movies playing at on a Saturday afternoon in Midtown might not be more similar than tasks for finding movies playing at on a Saturday afternoon at Midtown and finding a restaurant opened on Saturday in Midtown. This is because the intersection and differences of the graphs will be depend, to some extent, on any values of attributes supplied in the query.","As can be appreciated, the tunable parameter \u201cv\u201d should always be larger than one. Further, the larger the value of the tunabale parameter v, the more relatively -connected\u201d difference graphs are penalized\u2014that is, they are made, or assumed to be, more distant.","[\u00a7] 4.3.3.3 Operation of the Task Clustering Process","An example of the operation of the task clustering process \u2032 of  is now presented with reference to  and .  depicts a distance matrix in which distance values between tasks are provided. Since the distance between a task and itself is zero, the task distance values for task pairs ,, ,, ,, ,, and , are indicated with a \u201c*\u201d. Since the upper right hand of the matrix is the mirror image of the lower left had of the matrix , redundant distance values are depicted with a \u201c-\u201d.","Recall from step  of , that the least distant tasks are clustered. Thus, in the example shown in , tasks  and  are clustered. Recall from step  of  that distances between the new cluster and the other cluster(s) and\/or tasks(s) are determined. The distance between a task and a cluster of tasks may be defined as (a) the maximum distance between the task and each task of the cluster, (b) the minimum distance between the task and each task of the cluster, or (c) the average distance between the task and each task of the cluster. In this example, it will be assumed that the distance between a task and a cluster of tasks is the maximum distance between the task and each task of the cluster. Thus, for example, the distance between the cluster , and the task  would be MAX[d(,), d(,)]=MAX [2.0, 1.0]=2.0. The results of the updated distance matrix is depicted in FIG. B. Next, tasks  and  are clustered and new distances are determined, the results of which are shown in matrix of FIG. C. Finally, the task  is clustered with task cluster ,  and new distances are determined, the results of which are shown in matrix of FIG. D.","Recall from steps , ,  and , the process of clustering and redetermining distances continues until the distance of the least distant task(s) and\/or cluster(s) is greater than a first predetermine value or, alternatively, if the number of clusters is greater than a second predetermined value. The first and\/or second predetermined values are tunable parameters.  is a graph of the distance of the least distant task(s) and\/or cluster(s) versus the number of clusters for a particular set of tasks. In this example, the first predetermined value should be selected somewhere between 2 and 25 and\/or the second predetermined value should be selected somewhere between 7 and 16. Otherwise, if the first predetermined value (distance) is set too high or the second predetermined value (number of clusters) is set too low, increasingly unrelated tasks will be clustered together. Naturally, the tunable first and\/or second predetermined values may be determined based on the particular application. For example, if the task analysis is to be used for determining the most important toolbar buttons to include in a computer application, then the second predetermined value may be based on human factors which limit the number of toolbar buttons people are comfortable with. If the task analysis is to be used for providing gratuitous help, the first predetermine value may be based on a \u201chelp usefulness\u201d versus a \u201cdegree of annoyance at unwanted help\u201d tradeoff.","[\u00a7]4.4 Summary","As can be appreciated from the foregoing description, the present invention teaches a tool for analyzing tasks being performed by users on a computer. A generated task analysis model may then be used to help (i) users complete a task, (ii) application program developers to design programs which help users complete popular tasks, (iii) resource server developers to design a topology or resource server to help users complete popular tasks, and (iv) advertisers target \u201ctask-relevant\u201d marketing information to computer users."],"BRFSUM":[{},{}],"heading":["[\u00a7] 1. BACKGROUND OF THE INVENTION","[\u00a7] 2 SUMMARY OF THE INVENTION","[\u00a7] 4 DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"[\u00a7] 3 BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1A","FIG. 1B"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2A","FIGS. 1A and 1B","FIG. 2B"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3A","FIG. 3B"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIGS. 7A and 7B","FIGS. 6A and 6B"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 8A and 8B","FIGS. 7A and 7B"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 9A","FIG. 9B","FIG. 9A"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 13","b":"12"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 14","b":"13"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 15","b":"13"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 16","b":"12"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 17","b":"12"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 20A and 20B"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIGS. 21A through 21C"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 22A and 22B"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 23A through 23D"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 25","b":"1"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 26","b":"1"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 27","b":"1"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 28","b":"1"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIGS. 30A and 30B"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIGS. 33A and 33B"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIGS. 34A and 34B"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIGS. 35A and 35B"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIGS. 37A and 37B"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIGS. 38A and 38B"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 42A","FIG. 42B","FIG. 42C"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 44A","FIG. 44B","FIG. 44C"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 45"}]},"DETDESC":[{},{}]}
