---
title: System and method for selective error checking
abstract: A method of selectively enabling error checking in an information handling system, including receiving information indicating that data associated with a first memory portion in a system memory should be subject to error checking during transmission between the memory controller and the system memory and indicating that data associated with a second memory portion in the system memory should be free of error checking during transmission between the memory controller and the system memory, receiving a memory access request directed to one of the first and second memory portions, transmitting data between the memory controller and the system memory in response to the memory access request, and selectively performing an error checking technique on the transmitted data based on the information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009580&OS=09009580&RS=09009580
owner: Dell Products L.P.
number: 09009580
owner_city: Round Rock
owner_country: US
publication_date: 20140131
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application claims priority to and is a continuation of co-owned, co-pending U.S. patent application Ser. No. 13\/283,051, filed Oct. 27, 2011, the disclosure of which is incorporated herein by reference.","The present disclosure relates generally to information handling systems, and more particularly to a memory compatibility system and method.","As the value and use of information continues to increase, individuals and businesses seek additional ways to process and store information. One option is an information handling system (IHS). An IHS generally processes, compiles, stores, and\/or communicates information or data for business, personal, or other purposes. Because technology and information handling needs and requirements may vary between different applications, IHSs may also vary regarding what information is handled, how the information is handled, how much information is processed, stored, or communicated, and how quickly and efficiently the information may be processed, stored, or communicated. The variations in IHSs allow for IHSs to be general or configured for a specific user or specific use such as financial transaction processing, airline reservations, enterprise data storage, or global communications. In addition, IHSs may include a variety of hardware and software components that may be configured to process, store, and communicate information and may include one or more computer systems, data storage systems, and networking systems.","Currently, it is common for an IHS that handles critical data to implement some form of error checking to detect data transmission errors as data is passed between various components in the IHS. The cyclic redundancy check (CRC) is an error detection technique commonly employed for this purpose. In the CRC technique, the integrity of data is verified through the use of a checksum based on the data itself. Specifically, a data sender using the CRC technique generates a checksum based on the data to be transmitted and appends it to the data before transmission. Upon receipt of the data, a data receiver uses the checksum to determine whether or not the data was corrupted during transmission. Because the CRC checksum is appended to the data as it is transmitted, this technique incurs some amount of overhead in the form of lost memory channel bandwidth, extra latency, and extra power per data byte transmitted within a system. Accordingly, although data transmission error checking in IHSs has been generally satisfactory, it has not been satisfactory in all respects.","According to one embodiment a method of selectively enabling error checking in an information handling system (IHS) that includes a memory controller and a system memory includes receiving, at the memory controller, information indicating that data associated with a first memory portion in the system memory should be subject to error checking during transmission between the memory controller and the system memory and indicating that data associated with a second memory portion in the system memory should be free of error checking during transmission between the memory controller and the system memory, receiving, at the memory controller, a memory access request directed to one of the first and second memory portions, transmitting data between the memory controller and the system memory in response to the memory access request, selectively performing an error checking technique on the transmitted data based on the information if the memory access request is directed to the first memory portion and including transmitting the data without performing the error checking technique if the memory access request is directed to the second memory portion.","It is to be understood that the following disclosure provides many different embodiments, or examples, for implementing different features of the present disclosure. Specific examples of components and arrangements are described below to simplify the present disclosure. These are, of course, merely examples and are not intended to be limiting. Various components may be arbitrarily drawn in different scales for the sake of simplicity and clarity.","In addition, for purposes of this disclosure, an information handing system (IHS) may include any instrumentality or aggregate of instrumentalities operable to compute, classify, process, transmit, receive, retrieve, originate, switch, store, display, manifest, detect, record, reproduce, handle, or utilize any form of information, intelligence, or data for business, scientific, control, entertainment, or other purposes. For example, an IHS may be a personal computer, a PDA, a consumer electronic device, a display device or monitor, a network server or storage device, a switch router or other network communication device, a mobile communication device, or any other suitable device. The IHS may vary in size, shape, performance, functionality, and price. The IHS may include memory, one or more processing resources such as a central processing unit (CPU) or hardware or software control logic. Additional components of the IHS may include one or more storage devices, one or more communications ports for communicating with external devices as well as various input and output (I\/O) devices, such as a keyboard, a mouse, and a video display. The IHS may also include one or more buses operable to transmit communications between the various hardware components.","In one embodiment, an IHS  shown in  includes a processor , which is connected to a bus . Bus  serves as a connection between processor  and other components of IHS . An input device  is coupled to processor  to provide input to processor . Examples of input devices may include keyboards, touch-screens, pointing devices such as mice, trackballs, and track-pads, and\/or a variety of other input devices known in the art. Programs and data are stored on a mass storage device , which is coupled to processor . Examples of mass storage devices may include hard discs, optical disks, magneto-optical discs, solid-state storage devices, and\/or a variety other mass storage devices known in the art. IHS  further includes a display , which is coupled to processor  by a video controller . A system memory  is coupled to processor  to provide the processor with fast storage to facilitate execution of computer programs by processor . Examples of system memory may include random access memory (RAM) devices such as dynamic RAM (DRAM), synchronous DRAM (SDRAM), solid state memory devices, and\/or a variety of other memory devices known in the art. In an embodiment, a chassis  houses some or all of the components of IHS . It should be understood that other buses and intermediate circuits can be deployed between the components described above and processor  to facilitate interconnection between the components and the processor .",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"],"b":["100","102","108","114","100","114","100","100","102","114"]},"In the illustrated embodiment, the mass storage device  includes virtualization software (i.e. a hypervisor) . The hypervisor  may be any type of hypervisor such as VMWare ESX\u00ae, Microsoft Hyper-V\u00ae, or Xen\u00ae, or another hypervisor. As shown, a virtual machine (persona)  may be instantiated in the hypervisor virtual environment. The hypervisor  allocates portions of system memory  for the virtual machine  and for the supporting virtual resources. Although the hypervisor  and virtual machine  are shown as residing in storage device , it is understood that active portions of this software may reside in system memory . In the illustrated embodiment, the hypervisor  is operable to segment the allocated memory into critical regions and non-critical regions. For example, the hypervisor  may designate memory allocated for components such as kernels, drivers, and kernel buffers as critical and designate memory allocated for components such as processes in virtual machine  and user data as non-critical. The IHS  is operable to selectively enable CRC error checking based on the hypervisor's segmentation of critical and non-critical data. To this end, the hypervisor  includes a hypervisor CRC table  that denotes which portions of system memory  are reserved for critical data and thus should be subject to CRC error checking and which portions of system memory  are reserved for non-critical data and thus should not be subject to CRC error checking. An example of the hypervisor CRC table  is shown in Table 1 below:",{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE 1"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]},{"entry":[{},"CRC Entry","CRC Entry","CRC Entry","CRC Entry",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Byte","Read","Write","Read","Write","Read","Write","Read","Write","Memory"]},{"entry":["Offset","CRC","CRC","CRC","CRC","CRC","CRC","CRC","CRC","Address Range"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","\u2003\u2003\u20030-(2-1)"]},{"entry":["1","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","\u2003\u2003\u20092-(2-1)"]},{"entry":[". . .",". . .",". . .",". . .",". . .",". . .",". . .",". . .",". . .",". . ."]},{"entry":["1023","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","0\/1","(2-2)-(2-1)"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}}]}}},"In the example Table 1, each row corresponds to a memory address range reserved by the hypervisor . Each address range is split into four portions for which CRC may be enabled or disabled when reading and writing data into that memory portion. Thus, a pair of table cells in adjacent columns marked \u2018Read CRC\u2019 and \u2018Write CRC\u2019 constitute a single CRC entry. Each entry consists of two bits\u2014a first \u20180\u2019 or \u20181\u2019 indicating whether data being read from the associated memory portion will be subject to CRC error checking and a second \u20180\u2019 or \u20181\u2019 indicating whether data being written to the associated memory portion will be subject to CRC error checking. Accordingly, each row of the table includes 8 bits (1 byte). In this manner, CRC checking may be independently enabled or disabled for reading and writing to the same memory portion. In the illustrated example, each CRC entry (bit pair) covers 2 gigabytes (GB) of memory, and thus a row covers an 8 GB memory range, and all 1024 rows of the table together cover 8 terabytes (TB). It should be understood that a table with a fixed entry size of 2 GB was selected for the above example simply for the sake of clarity. In that regard, 2 GB represents the maximum size of a bank in the proposed Double Data Rate Four (DDR4) DIMM standards to be promulgated by the Joint Electron Devices Engineering Council (JEDEC). Accordingly, this example is not limiting and, in alternative embodiments, each CRC entry may cover a different size memory portion and the granularity of each entry may not be fixed. Additionally, in alternative embodiments, the above-described system may include another type of system management software instead of, or in addition to, the hypervisor . For instance, the mass storage device may include an operating system with applications installed therein. In such a scenario, the operating system may be operable to segment its allocated memory into critical (e.g. kernel processes) and non-critical regions (e.g. application data) and maintain a CRC table indicating which regions should be subject to CRC error checking.","The IHS  further includes a basic input\/output system (BIOS) module  stored on a non-volatile read-only memory (ROM) chip that is communicatively coupled to the processor , the mass storage device , and the system memory  via an I\/O channel . The BIOS module  includes BIOS firmware that executes on the processor  and is operable to detect and identify resources within IHS , provide the appropriate drivers for those resources, initialize those resources, and access those resources. The BIOS module  further includes memory initialization code to initialize system memory . As an aspect of this, the BIOS  includes a BIOS CRC table  that is a copy of the hypervisor CRC table  maintained by the hypervisor . As will be described in association with , the hypervisor CRC table  is passed to the BIOS  during a reboot or configuration change via the system memory . A dashed arrow  denotes the hypervisor CRC table  being copied to the BIOS CRC table .","In the illustrated embodiment of , the processor  includes an integrated memory controller  that manages the flow of data between the system memory  and other components in IHS  such as the mass storage controller . In alternate embodiments, however, the memory controller  may be independent from the processor . The system memory  is communicatively coupled to the processor (and memory controller ) via a channel  that transmits data and command signals between the memory controller  and the system memory . The mass storage device  is communicatively coupled to processor  and memory controller  via an I\/O bus  that carries data accessed by the hypervisor . The memory controller  further includes a memory controller CRC table  stored in an onboard register. The memory controller CRC table  includes a portion of the contents of the BIOS CRC table  (and thus a portion of the hypervisor CRC table ). Specifically, the memory controller CRC table  includes the CRC entries that correspond to the portions of system memory controlled by the memory controller . During memory initialization, the BIOS  maps the memory address ranges in the BIOS CRC table  to physical banks, bank groups, and ranks in the system memory  and maps each CRC entry to the appropriate bank in system memory . In this manner, the appropriate CRC entries from the BIOS CRC table  are passed to the memory controller CRC table  during a reboot or configuration. A dashed arrow  represents the appropriate CRC entries from the BIOS CRC table  being copied to the memory controller CRC table .","An example of the memory controller CRC table  stored in memory controller  is shown in Table 2 below:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE 2"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"CRC Entry",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Rank","Bank Group","Bank","Read CRC","Write CRC"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["0","00","00","0\/1","0\/1"]},{"entry":["0","00","01","0\/1","0\/1"]},{"entry":[". . .",". . .",". . .",". . .",". . ."]},{"entry":["n","11","11","0\/1","0\/1"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["160","170"]},"In the illustrated embodiment, the memory controller CRC table  includes all of the CRC entries from the BIOS CRC table  as it is the only memory controller in the IHS . However, in alternative embodiments, the IHS  may include a plurality of processors and a plurality of associated memory controllers where each memory controller includes a CRC table with CRC entries corresponding only to the portion of the system memory  controlled by that memory controller. Additionally, in alternative embodiments, the memory portion covered by the CRC entry smaller than a bank in system memory, and thus there may not be a one-to-one correlation of a CRC entry to a bank. In such a case, alternative CRC table configurations may be needed to enable CRC error checking for specific memory portions.","Further, in the illustrated embodiment of IHS , the system memory  includes Dual In-line Memory Module (DIMM) sockets  and  that are communicatively coupled to the memory controller  via the channel . The DIMM sockets  and  conform to the proposed DDR4 DIMM standards to be promulgated by JEDEC. Alternatively, the sockets  and  may be single in-line memory module (SIMM) sockets or another type of memory module socket or may conform to a different standard such as the DDR3 SDRAM standard, a future DDR standard promulgated by JEDEC, or another memory standard or proprietary design. The JEDEC DDR3 SDRAM standard as specified in the JEDEC document JESD79-3E (July 2010) is incorporated in its entirety by reference herein.","In the illustrated configuration, DDR4 SDRAM DIMMs  and  are respectively inserted into the DIMM sockets  and . Each DIMM  and  includes a plurality of DRAM chips in which IHS data is stored. In this example, the DIMM  includes DRAM chips , , , and , which form a single rank\u2014that is, they are accessed simultaneously by the memory controller . DRAMs , , , and  respectively include DRAM CRC tables , , , and  stored in onboard registers. In one embodiment, the DRAM CRC tables are extensions of the DRAM mode registers. Like the memory controller CRC table , the DRAM CRC tables contain a portion of the BIOS CRC table . However, the DRAM CRC tables , , , and  include only those CRC entries associated with the specific rank formed by the DRAM chips , , , and . During memory initialization, the BIOS  copies the appropriate CRC entries from the BIOS CRC table  into each of the DRAM CRC tables, so that every DRAM CRC table is identical. A dashed arrow  represents the appropriate CRC entries from the BIOS CRC table  being copied to the DRAM CRC tables , , , and .","An example of the DRAM CRC tables , , , and  stored in the DRAM chips , , , and  is shown in Table 3 below:",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE 3"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"CRC Entry",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Bank Group","Bank","Read CRC","Write CRC"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"00","00","0\/1","0\/1"]},{"entry":[{},"00","01","0\/1","0\/1"]},{"entry":[{},". . .",". . .",". . .",". . ."]},{"entry":[{},"11","11","0\/1","0\/1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["182","184","186","188","178","114"]},"In operation, when portions of the system memory  are accessed via the memory controller , the memory controller either enables or disables CRC error checking for the transmission of data between the memory controller and the system memory  based on the memory controller CRC table  and the DRAM CRC tables , , , . In more detail, when the memory controller  receives a memory write command for a specific address, the memory controller translates the address into a corresponding bank location and checks the CRC entry for that bank location in the CRC table . If the \u2018CRC Write\u2019 bit is a \u20181\u2019 in that CRC entry, the memory controller  will generate a CRC checksum based on the data to be written and append the checksum to the data before it is sent over the channel  to the system memory . When the data and checksum is received by the appropriate DRAM chip, the DRAM chip will check the CRC entry for the same bank in the DRAM CRC table and determine that the data sent by the memory controller should be verified by the CRC checksum. The DRAM chip will use the checksum to determine if the data was corrupted during transmission over the channel . If an error is detected, it signals an exception and the data write is retried, or some other corrective action is performed.","Further, when the memory controller  receives a read command for a specific address, the memory controller translates the address into a corresponding bank location and sends a read command with the bank location to the appropriate DRAM chip. The DRAM chip extracts the data from the bank and checks the CRC entry for that bank location in the DRAM CRC table. If the \u2018CRC Read\u2019 bit is a \u20181\u2019 in that CRC entry, the DRAM chip will generate a checksum based on the retrieved data and append it to the data before transmission to the memory controller  over the channel . When the memory controller  receives the data and checksum it checks the CRC entry for the same bank in the memory controller CRC table  and determines that it needs to check the data for transmission errors using the checksum. If an error is detected, it signals an exception and the data read is retried, or some other corrective action is performed.","It is understood that the above description of error checking using the CRC technique has been simplified for the sake of clarity and the memory controller and DRAM chips may perform additional steps and\/or different steps during data transmission. For instance, in some embodiments, the memory controller may implement the DDR4 CRC error checking technique as proposed in the DDR4 specifications to be promulgated by JEDEC. In such a scenario, the DDR4 CRC scheme would be selectively enabled based on the hypervisor CRC table, BIOS CRC table, memory controller CRC table, and DRAM CRC tables. Further, in other embodiments, the IHS  may selectively enable another type of error checking based on the CRC tables described above.","Referring now to both  and ,  is a functional block diagram of an example data flow between components in the IHS . In the illustrated example of , memory reserved for hypervisor processes has been deemed critical by the hypervisor , and memory reserved for virtual machine  processes has been deemed non-critical. As such, CRC entries in the hypervisor CRC table  corresponding to the memory addresses associated with the hypervisor processes are set to \u201811\u2019 and the CRC entries in the hypervisor CRC table corresponding to the memory addresses associated with virtual machine processes are set to \u201800\u2019. Upon IHS boot up, the hypervisor CRC table  is copied to the BIOS CRC entry table  and the BIOS memory initialization code maps the memory addresses passed to it to ranks, bank groups, and banks in the system memory . In this simplified example, the memory addresses reserved for the hypervisor processes map to rank 00 and the memory addresses reserved for the virtual machine processes map to rank 01. Thus, CRC error checking will be enabled for data read from or written to any of the sixteen banks in rank 00 and disabled for data being read from or written to any of the sixteen banks in rank 01. For example, a hypervisor process sends data  to the memory controller  to be written to the system memory . The memory controller  creates a CRC checksum  based on the data  and appends it to the data before transmission over the channel  to a bank in rank 00. In contrast, if a virtual machine process sends data  to the memory controller  to store in system memory , the memory controller will transmit the data to the appropriate bank in rank 01 without appending a CRC checksum. It should be understood that the illustrated example of  is simply an example and is not limiting. For example, the hypervisor may segment memory into critical and non-critical regions in a different manner, and hypervisor (or operating system) data may be spread across multiple ranks and\/or memory controllers.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 4","FIGS. 2 and 3","FIG. 5"],"b":["250","100","250","252","154","154","250","254","256","156","164","250","260","154","156","160","262","156","170","250","264","150","152","114","266","164","182","184","186","188","166","154","268","154","156","250","254"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 5","FIGS. 2 and 3","FIG. 4"],"b":["300","300","300","262","250","156"]},"The method  begins at block  where a variable CONTROLLER# is set to 0 and a variable CRC_ENTRY# is set to 0. CONTROLLER# is a counter that counts up to the total number of memory controllers in the IHS. CRC_ENTRY# is a counter that counts up to the total number of CRC entries in the BIOS CRC table. Next, in block , a variable RANK# is set to 0. RANK# is a counter that counts up to the total number of ranks controlled by a specific memory controller. The method  then proceeds to decision block , where the BIOS  determines whether the size of the current rank (RANK#) is larger than 2 GB. If the current rank is not greater than 2 GB (meaning it is equal to 2 GB), the method proceeds to block , where the contents of the current CRC entry (CRC_ENTRY#) are copied to each of the 16 CRC entries associated with RANK# (1 CRC entry for all banks) in the CRC table in CONTROLLER#. Also, the contents of CRC_ENTRY# are copied to all 16 CRC entries in the DRAM CRC tables in the DRAM chips that form RANK#. In this branch off of block , the same CRC entry is copied 16 times because the CRC entry represents 2 GB and the rank size is also 2 GB. Thus, CRC error checking is enabled or disabled in the same way for each of the 16 banks in the rank. After the memory controller and DRAM CRC tables have been populated with the contents of CRC_ENTRY#, the method proceeds to block  where CRC_ENTRY# is incremented by one so that in the next loop the next CRC entry in the BIOS CRC table will be copied to the CRC tables. Next, in block , RANK# is incremented by one. Then, in decision block , the BIOS determines whether all of the ranks controlled by CONTROLLER# have been completed. If not, the method returns to decision block  and it is determined whether the size of the current rank (incremented RANK#) is larger than 2 GB. If all of the ranks have been completed (i.e. RANK# is equal to the total number of ranks controlled by CONTROLLER#), the method proceeds to block  where CONTROLLER# is incremented by one. Then, in decision block , it is determined whether all of the controllers in IHS have been completed. If not, the method returns to block  and RANK# is reset to 0 for the next controller loop. If all of the controllers have been completed (i.e. all CRC entries in the BIOS CRC table have been copied to the memory controller and DRAM CRC tables), the method ends.","Referring now back to decision block , if the size of the current rank (RANK#) is larger than 2 GB, the method  proceeds to block . In block , the size of the current rank is divided by 2 GB (the amount of memory covered by a CRC entry) and assigned to the variable L, which represents the number of CRC entries from the BIOS CRC table that will be used to populate the 16 CRC entries associated with RANK# in the memory controller and DRAM CRC tables. For instance, if a rank is 16 GB, 8 CRC entries covering 2 GB each will be copied to the memory controller and DRAM CRC tables. Also in block , 16 (the number of banks in a rank) is divided by L and assigned to the variable M, which represents the number of sequential CRC entries in the memory controller and DRAM CRC tables that will receive the same CRC entry from the BIOS CRC table. For instance, if a bank is 1 GB, a 2 GB CRC entry from the BIOS CRC table will enable or disable CRC for two banks worth of memory. Further, in block , the counters N and P are set to 1. The method  then proceeds to block  where the contents of the current CRC entry (CRC ENTRY#) are copied to the CRC entry associated with Bank(P) in RANK# in the CRC table in CONTROLLER#. Also, the contents of the current CRC entry are copied to the CRC entry associated with Bank(P) in the DRAM CRC tables in the DRAM chips that form RANK#. Next, in block , the counters N and P are incremented by 1. Then, in decision block , it is determined whether N is greater than M (i.e. whether all of the sequential CRC entries that need to receive the same CRC entry from the BIOS CRC table have done so). If not, then the method  returns to block  where the contents of CRC_ENTRY# is copied to another CRC entry in the CRC table in CONTROLLER# and associated DRAM chips. If N is greater than M, then method  proceeds to block  where CRC_ENTRY# is incremented by one so that in the next loop the subsequent CRC entry in the hypervisor CRC table will be copied to the memory controller and DRAM CRC tables. Then, in decision block , it is determined whether P is greater than 16 (i.e. whether CRC entries for all banks associated with RANK# in the memory controller and DRAM CRC tables have been populated). If P is not greater than 16, method  returns to block  where the contents of the updated CRC_ENTRY# is copied to the memory controller and DRAM CRC tables. If P is greater than 16, the method continues to block  where RANK# is incremented by 1 and it is determined whether all ranks have been completed, as described above.","It is understood that the actions illustrated in the flow chart of  may, in alternative embodiments, be performed in a different order and may be modified depending on the granularity of the CRC entries in the hypervisor CRC table. For instance, if each CRC entry in the hypervisor CRC table covered 1 GB rather than 2 GB, the size of RANK# would be compared to 1 GB in decision block . Further, the method  may include different and\/or additional blocks in some embodiments.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 6","FIGS. 1 and 2","FIG. 6"],"b":["400","400","100","402","404","406","408","400","404","408","404","402"]},"In more detail, the IHS  includes an operating system  that provides resources for applications  executing therein. The operating system  includes a page table  that maps virtual memory addresses to physical memory addresses in system memory . The applications  request allocations of memory (pages) from the operating system through an application programming interface (API). Although the operating system  and applications  are shown as residing in storage device , it is understood that active portions of this software may reside in system memory . In the illustrated embodiment, when applications  request a page of memory from the operating system  they can indicate through the API whether the data in the page should be CRC protected when transmitted between the memory controller  and system memory . For example, an application may request CRC-protected pages for core application threads but request non-CRC-protected pages for temporary user data. To support this functionality, the page table  includes a CRC Flag that indicates whether each page of data controlled by the operating system should be CRC-protected or not. Thus, when the operating system  receives an API request for a CRC-protected page of data, it sets the CRC Flag to \u20181\u2019 for that page of data. An example page table  is shown in Table 4 below:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Page 0","Virtual Address","Physical Address","Standard Tag","CRC Flag"]},{"entry":["Page 1","Virtual Address","Physical Address","Standard Tag","CRC Flag"]},{"entry":[". . .",". . .",". . .",". . .",". . ."]},{"entry":["Page N","Virtual Address","Physical Address","Standard Tag","CRC Flag"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"As shown in , when the operating system  sends a memory access request to the memory controller , the CRC Flag bit is included with the translated physical address. As such, when the memory controller  receives the access request, it determines whether to enable CRC error checking for the page of memory indicated by the operating system based on the CRC Flag bit. It is understood that active portions of the page table may be stored in registers in the processor .","In the illustrated embodiment, when the memory controller  receives a CRC Flag bit of \u20181\u2019 from the operating system \/processor , it is operable to enable CRC error checking on reads and writes to system memory  by setting an unused address bit in a data transfer command to \u20181\u2019. For example, in a command to the system memory  that initiates a data read (e.g. a CAS command), the memory controller  may set the unused A13 bit to a \u20181\u2019 to indicate that the DRAM chips should generate a CRC checksum and append it to the requested data. Address bits such as the A13 bit may be utilized for this purpose because data transfer commands typically do not utilize all available address bits. This method of selectively enabling CRC error checking is described in more detail in association with . Further, in alternative embodiments, the memory controller may coordinate CRC checksum generation and checking with the DRAM chips through methods besides setting unused command bits. For example, the IHS  may include a dedicated CRC message bus between the memory controller and the system memory that the memory controller would use to signal the DRAM chips to enable CRC error checking. Additionally, other types of software may selectively enable CRC error checking for critical and non-critical data. For instance, a hypervisor similar to hypervisor  in  may maintain a page table similar to page table  and update it according to whether virtual machines request CRC-protected pages of memory.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 7","b":["450","404","450","452","404","410","454","404","456","458","460","404","462","464","404","466","402","462","450","468","470","472","404","466","402"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 8","b":["480","404","480","482","404","402","484","404","486","404","488","490","492","404","494","496","494","480","498","500","480","496","408"]},"It is understood that the methods illustrated in the flow charts of  may, in alternative embodiments, be performed in a different order and may include different and\/or additional blocks in some embodiments. For example, the CRC Flag may include two bits\u2014a read bit and a write bit that may signal to the memory controller to independently enable or disable CRC error checking for reads and writes.","Additionally, the methods described in  of selectively enabling CRC error checking by setting an unused bit in a data access command may be applied to the system and method described in association with . For example, in some embodiments, the DRAM chips , , ,  of  may selectively enable CRC error checking for data reads based upon an unused bit in the read command as described above, rather than based upon a CRC entry in DRAM CRC tables. In such a scenario, CRC tables would not be created in the DRAM chips during memory initialization and the memory controller would set the unused bit in memory access commands based upon the CRC entries in the memory controller CRC table.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 9","FIGS. 1 and 2","FIGS. 7 and 8"],"b":["600","600","100","602","604","606","600","608","610","604","602","612","616","604","600","604","600","604","618","604","618","604","600","616","612","618","618","620","604"]},"Although illustrative embodiments have been shown and described, a wide range of modification, change and substitution is contemplated in the foregoing disclosure and in some instances, some features of the embodiments may be employed without a corresponding use of other features. Accordingly, it is appropriate that the appended claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
