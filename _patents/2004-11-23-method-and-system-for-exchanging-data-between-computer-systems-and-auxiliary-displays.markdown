---
title: Method and system for exchanging data between computer systems and auxiliary displays
abstract: Described is a system and method by which application programs running on a main computer system communicate with an auxiliary display device (such as a cell phone, pocket-sized computer, alarm clock, television, digital picture frame and so forth) to provide viewable information on the device, remote control capabilities, and notifications. Via API calls, programs provide information in the same format regardless of the device capabilities and/or the connection type. An auxiliary display platform converts the information into a format understood by a device driver, which then filters the information as desired for its particular hardware device before the information is communicated. Return communications return data such as status and user interaction with the displayed information. Software vendors may thus write code once to output information on auxiliary displays, while hardware manufacturers can have their devices work as auxiliary displays, with little or no modification to existing hardware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634780&OS=07634780&RS=07634780
owner: Microsoft Corporation
number: 07634780
owner_city: Redmond
owner_country: US
publication_date: 20041123
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The invention relates generally to computer systems, and more particularly to an improved system and method for communicating information between a computer system and an auxiliary device.","U.S. patent application Ser. Nos. 10\/429,930 and 10\/429,932, now U.S. Pat. Nos. 7,240,228 and 7,221,331, respectively, are generally directed towards the concept of computer systems having auxiliary processing and auxiliary mechanisms that provide some auxiliary computing functionality. For example, a small LCD on the lid or side of a laptop computer can provide its owner with useful information, such as a meeting location and time, even when the main computer display is not easily visible, e.g., when a laptop computer's lid is closed and\/or the main computer is powered down. Controls such as buttons may be provided to allow the user to interact with the auxiliary device to view different types of data, such as to scroll through appointments among calendar data, read email messages, read directions, and so forth.","Somewhat similar to an auxiliary LCD screen built into a mobile host computer, a mobile telephone, a music playing device, a pocket-sized personal computer, a personal digital assistant and so forth can serve as an auxiliary device to a main computer when connected to it physically and\/or via a wireless (e.g., Bluetooth or infrared) link, as long as the device is programmed to allow its display and\/or other functionality to be leveraged by the main computer. In general, any device with I\/O capabilities that can interface in virtually any way with a computer system can potentially serve as an auxiliary computing device.","However, there are many varieties of devices that can serve as an auxiliary display for a computer system. For example, some devices can connect to a computer system via a hardwired connection such as USB, while other devices connect via wireless protocols such as 802.11, 802.16 or Bluetooth. Some, such as \u201csmart\u201d mobile phones and pocket-sized computing devices provide reasonably good graphics, available memory, and may be already arranged to connect to a host computer system in some way. Other devices are more limited, however, and may, for example, only provide a single line of text, lights, and\/or audio. At the same time, there are many types of software programs that run on a main computer system and would benefit from being able to output information to an auxiliary display.","What is needed is a way for manufacturers of hardware devices that can be used as auxiliary displays to interface with a host computer system, in a manner that requires little if any change to contemporary hardware devices. At the same time, such a solution should allow application programs to be written to use auxiliary displays, independent of the type of auxiliary display device actually in use.","Briefly, the present invention provides a system and method by which application programs running on a main computer system communicate with an auxiliary display device (such as a cell phone, pocket-sized computer, clock, television, digital picture frame and so forth) to provide viewable information on the device, remote control capabilities, and notifications. To this end, application programs and the like such as written by independent software vendors communicate with an auxiliary display platform via an application programming interface (API) set, which in turn converts the information as needed into a format understood by a device driver of an auxiliary computing device. The device driver filters the information as desired and formats it for its particular hardware device, which may be coupled to the system via any wired or wireless connection. The device driver forwards the data to an appropriate hardware interface for communicating to the auxiliary device. A return communication path from the auxiliary device to the main computer system is also provided.","By abstracting out the type of auxiliary device and\/or how it is connected, only a predefined protocol and data format are needed for a program to communicate with a wide variety of devices, that likely have different capabilities. To utilize an auxiliary display, an independent software vendor simply calls the API to the auxiliary display platform, providing a parameter (or parameters) corresponding to data in an agreed upon format for the API. Thereafter, the data is converted to a format understood by a device driver that interfaces with the auxiliary display platform, whereby the device driver may adjust the information as needed before forwarding it to transport hardware interfaces for communication to its corresponding auxiliary device.","In one alternative, a hardware vendor may choose to implement Microsoft\u00ae-based firmware (e.g., comprising a TinyCLR-based firmware stack) and thereby guarantee that the user will receive a full auxiliary device experience. For example, if configured with the TinyCLR-based firmware stack, little if any filtering is required, as any program data provided via the API is known to be capable of being handled by the auxiliary device. The data is communicated via an agreed upon format\/protocol, and thus the device driver and\/or the API layer need only convert the application program-provided data to the appropriate format and forward it according to the protocol to the hardware transport. Because the type of auxiliary device is known to have an appropriate firmware stack, the format may be proprietary.","In another alternative, a possibly-reduced (but still valuable) experience is available to those devices having simpler needs and capabilities with respect to handling the program data, provided via the same API. To this end, device drivers that run on the main computer system implement defined hardware interfaces to seamlessly extend the auxiliary display platform to any type of auxiliary device. Components above the device driver may filter and\/or convert the ISV-supplied data, such that the data is provided to the device driver in a predefined format that the device driver understands. The device driver may also filter the data as appropriate for its corresponding auxiliary device, e.g., to remove graphics from data for its corresponding auxiliary device when such a device is only capable of displaying text. Hardware devices capable of running code may choose to have some or virtually all of the device driver functionality run on the device instead of in the device driver on the main computer.","Note that much of the interface\/wire protocol used by the device drivers to provide the data to a hardware transport interface may be defined to be the same regardless of the connection mechanism being used. As a result, device drivers may share a certain amount of code, even though the actual connection mechanism may be different. By using this mechanism, devices appear to work consistently regardless of how they are attached.","In addition to working with auxiliary displays such as mobile telephones and secondary computers, the present invention may be used to extend the ability of the main computer system to communicate with previously single-purpose devices, such as televisions, radios, other media players, digital image-based picture frames, clocks including watches and alarm clocks, and so forth. With some software and little or no hardware additions, such existing devices may easily expand their utility by allowing them to integrate with a main computer system. The platform is extensible in hardware and software to enable such scenarios. At the same time, the task of communicating with an auxiliary device from the perspective of independent software vendors is greatly simplified because application program code only needs to be written once to have it run on a wide variety of devices, with no additional work required to adapt the program for different auxiliary devices.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["120","120"]},"The personal computer system  includes a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary computer system described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary computer system.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system  (such as Windows\u00ae XP), one or more application programs  (such as Microsoft\u00ae Outlook), other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers. An auxiliary display  is an additional output device, and may, for example, be connected to the system bus  via an auxiliary display interface . An auxiliary display  may also connect to a computing device  through a serial interface or by other interfaces, such as a parallel port, game port, infrared or wireless connection, universal serial bus (USB) or other peripheral device connection. An input device  in  may provide one or more actuators to interface with and\/or control the auxiliary display , and for example may be part of the auxiliary display device, but alternatively may be independent thereof and connected to the system bus  via input device interface , which may be a serial interface, or by other interfaces, such as a parallel port, game port, infrared or wireless connection, universal serial bus (USB) or other peripheral device connection.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","It should be noted that the computer system need not be fully operational for an auxiliary device to work in accordance with the present invention. Indeed, an auxiliary device may still work when the computer is powered down, at least to a default extent or to an extent configured by a user, such as when the computer system is in a sleep state or a hibernate mode, and\/or when the user has not yet logged on or is otherwise locked out of the system via security mechanisms.","The auxiliary device may supplement the main display and may also serve as a surrogate display when the main display is shut down or otherwise not operational (e.g., disconnected), to give the user some information. For example, information such as how to power up the main display might be helpful, as would a room number and\/or directions to a meeting on an auxiliary display device connected to a mobile computer that the user can view when the main display is off and\/or not easily visible (e.g., the lid of a laptop is closed). The auxiliary device may play audio and\/or video, show images, show calendar information, show emails and so forth.","To enable and control communication in these powered-down modes, firmware may exist, stored in non-volatile memory, which when loaded and operated on by a secondary processor, enables the auxiliary display, along with other auxiliary components to be used, as long as some power is available. Note that as used herein, the terms \u201cfirmware\u201d and \u201cdevice hardware\u201d are essentially equivalent, and can be generally considered as representing the auxiliary memory, the code therein and\/or the secondary processor on which it runs.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIGS. 2A-2E","FIGS. 2A and 2B","FIG. 2C","FIGS. 2D and 2E"],"b":["200","200","200","202","200","204","200","206","200","200","208","210"],"sub":["a","e","a ","b ","c ","d ","e "]},"As should be apparent from , an auxiliary display may be in the form of any number of known types of displays such as one or more LEDs, a 2-line alphanumeric display, a monochrome display, or a color display. Those skilled in the art will appreciate that the present invention may also use the display of other computing or communication devices as the auxiliary display . These other computing or communication devices include general purpose computers, cell phones, and handheld devices such as a pager or a personal digital assistant (PDA). Additionally, the present invention may use a virtual auxiliary display implemented within an area of the onscreen display of the computing device  (e.g. a screensaver or a component of the graphical user interface) as the auxiliary display , including before a user has logged in. The auxiliary display  may include a combination of any of the forms described above, and also be physically or logically combined with indicators such as one or more LEDs and\/or used in conjunction with a virtual auxiliary display.","An auxiliary device may provide functionality even without a screen, or when its screen is powered down. For example, an auxiliary device may play audio, collect data (e.g., for later download to the main computer), perform calculation and so forth. Also, the display may comprise one or more LEDs or the like rather than a full screen. Thus, although many benefits and advantages arise from having an auxiliary display screen, and thus an auxiliary device may be referred to herein as an auxiliary display, a display is not required. In general, an auxiliary display, as referred to herein, may be composed of essentially anything that can be sensed, including any visual, audible, and\/or tactile representations.","Exchanging Data with Auxiliary Displays","The present invention is generally directed towards communication with auxiliary devices, such as to provide notifications and other content for display on the auxiliary device display, and possibly to obtain return information from the display, such as based on user interaction with the auxiliary device. As will be understood, there are many types of devices that can serve as an auxiliary display device, including those that do not necessarily have displays but can provide some output such as a sound or light. Although a number of examples are used herein, including displays on laptop lids, mobile phones, pocket-sized personal computers, digital image-based picture frames, kitchen displays, televisions, media players, clocks including alarm clocks, watches and so forth, the present invention is not limited to any of these examples, but rather anticipates the use of any device capable of outputting sensory information, even when referred to as an auxiliary \u201cdisplay.\u201d For example, other types of devices include auxiliary devices embedded within or using the main display of a consumer electronics device, (such as a refrigerator, home theater receiver, DVD player, and so forth), wall displays, automotive, transportation or other vehicular units (e.g., using displays already in a car\/train\/plane as an auxiliary display), keyboards or other input devices of the main computer system, PDAs (including non-cellular telephone PDAs), and the like.","Similarly, the present invention is not limited to any particular mechanism for coupling the auxiliary display to another computer system, and thus is not limited to the wired or wireless examples used herein. The connection may be relatively close or relatively distant, essentially anywhere, such as over a LAN or WAN, or over a virtual private connection over the Internet.","Turning to  of the drawings, there is shown an example architecture that exposes auxiliary devices  and\/or  to clients comprising application programs  and other programs (e.g., operating system components) via an auxiliary display API set . The API  provides APIs for various functions, including registering a client application  (a component of the program or possibly the program itself) with the system, sending content to the attached devices, sending notifications to the attached devices, and receiving events from the attached devices. Events may include navigation events, content request events, content change events, and so forth.","In keeping with an aspect of the present invention, the use of the API set  exposes only an \u201cauxiliary display system\u201d to the clients; there is no direct access to individual devices. As a result, for an independent software vendor, after registering a program component as a client application (via the API set ), content may be sent to any auxiliary device using another call to the same API set , regardless of the device's actual type and capabilities. Although the user experience may differ, the program need not adapt to the auxiliary device that is present. Note that while an application program can obtain capability information about the auxiliary device, and may choose to act differently based on the capabilities, the application program need not do so in order to use the device. This is because the present invention provides an architecture that handles further communications, freeing the application program from the complex tasks including tailoring data to any particular device.","The API layer  is written on a portable device API set , which communicates with the device's driver process via user-mode driver framework . The portable device API set  maps the auxiliary display into a category of portable devices and it allows enumeration of the device's capabilities. This is encapsulated within the user-mode driver, however, and not exposed to the client application .","In general, the client application  sends notifications directly to the auxiliary device. The device is capable of displaying notifications, as well as generating its own notifications based on the data provided from the main computer system. Other (optional) components shown in  include a notifications client  that can provide notifications on the auxiliary display. For example, even when an application program such as a calendar program is not running, it may be desirable to provide scheduled notifications corresponding to that program; the notifications client  enables such scenarios. Note that as described below with reference to , the components below the application layer and above the device drivers  and  may be generally referred to as the \u201cauxiliary display platform.\u201d","Turning to the hardware vendor's perspective, in general, each auxiliary display vendor provides a corresponding auxiliary device driver , although if the device is built in a certain way, the device driver may be supplied by the provider of the auxiliary display platform. More particularly, as described below, certain types of auxiliary devices are considered \u201cenhanced\u201d displays because they are configured with certain firmware that among other things is generally compatible with any information that can be received via the APIs . For such devices, the device driver  may be generic, (and thus may be provided by the auxiliary display platform provider), generally operating to perform some straightforward tasks, such as to convert the API-received information to a proprietary format understood by the auxiliary device firmware. For other auxiliary devices, referred to herein as \u201cbasic\u201d displays, the driver needs to be compatible with the device's capabilities, and thus the auxiliary display vendor needs to provide a driver customized to that device or class of devices.","In any event, the user mode driver framework provides a device driver interface (DDI) for coupling device drivers (e.g.,  and ) to the auxiliary display platform. The drivers then forward data corresponding to the API-received information to an appropriate hardware interface (transport) for communication to the auxiliary display device. For example, in , the basic device driver  is shown as forwarding data (via a previously defined protocol) to the remote stack and driver  for wireless (e.g., Bluetooth, Wi-FI, AM\/FM infrared and so forth) communication to the device , whereas the enhanced device driver  is shown as forwarding data to USB-based hardware , although other types of transports including network transports such as TCP\/IP-based transports are feasible. As is understood, these connections are only shown for example purposes, as any device driver will forward data for wireless or wired communication as appropriate.","Note that as represented in , multiple devices may be coupled to a computer to serve as an auxiliary display at the same time. A user may configure (e.g., via a control panel or the like of a system data providers component ) which client applications' data are displayed on which devices. The system data provider  also supplies system information such as time data, wireless signal strength data, the computer's audio volume and mute state, and\/or battery level data to auxiliary displays. In one implementation, the auxiliary display platform  consults a system-maintained matrix  whenever a client application  sends content, to determine which device or devices are to receive the information. Some translation of content for different device types may occur at this level, as well as possibly at other levels above the device driver level and in the device driver, as described below. The API of the auxiliary display platform  will also send events and the like from auxiliary devices to the application client application, again using the matrix to route the events back to the client application (or client applications) as appropriate.","As described below, some of the content that may be downloaded to an auxiliary device comprises notifications. When a user dismisses a notification on one auxiliary device, the user generally wants that notification dismissed on other auxiliary devices (an option which may be user-configurable). To this end, when the return information communicated from an auxiliary device indicates that a particular notification was dismissed, the auxiliary display platform sends a dismissal instruction to each other auxiliary devices to which that notification had been routed.","Turning to , an \u201cenhanced\u201d display is one that runs a particular firmware stack known to the auxiliary display platform. For example, in one present implementation, such a firmware stack includes a TinyCLR component and supports TinyCLR object serialization. A basic display is any display that does not run a stack known to the auxiliary display platform.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["500","302","430","430","500"]},"One such basic content format is XML-based, and thus the basic device driver  needs to be able to parse XML. If desired, a library  including functionality that calls to a system XML parser may be leveraged by the device driver. The device driver  filters and\/or transforms the information as necessary for its particular device, and forwards it to a transport for communication to the basic auxiliary display device.","As can be seen, the platform is extensible such that basic devices are supported with little or no changes. In general, the only component necessary is a device driver for that specific device.","In some instances, basic devices may be run with no firmware\/software changes to the device. For example, certain devices already respond to modem commands (GSM AT) and can output data. Thus, device driver  (or possibly a higher-level component) may transform the data and insert appropriate modem commands, whereby the auxiliary device will display data with no hardware change or reprogramming necessary. Any other format and\/or defined interaction mechanism that other devices already support may be similarly used.","However, this is not always possible, and thus some auxiliary devices will need additional firmware to work as an auxiliary display. Note that some auxiliary devices allow code to be downloaded and run on the device. In any event, in order to function as an auxiliary display, it is up to the device vendor to decide what capabilities to provide with a basic device, and how to divide functionality between the device driver (also typically provided by the device vendor) and the device firmware.","As is understood, there are thus at least two levels at which data may be converted, filtered and\/or transformed before being communicated to the basic auxiliary display , namely in the auxiliary display platform and in the device driver . As one general goal is to make the program's API calls independent of any particular device type, the converter may thus need to vary depending on the device's capabilities, as device drivers are typically intended to be kept relatively small.","As one example, notifications should generally use the same notification API from the perspective of the program  regardless of device capabilities. Thus, a title, text and optional information such as images, icons, buttons, menus and so forth may be specified as parameters. Devices not capable of graphics will have the information stripped of anything other than the text, and even the text may be modified to fit a particular device display, such as by alternating lines over time.","As another example, an API is provided for content download, such as to populate a cache on the device. In the event that the device does not have a cache and defined navigational framework, the auxiliary display platform can provide a navigational framework, performing tasks such as fetching a next item upon request, supplying a different bitmap that corresponds to a different page upon a link being selected, and so forth.","Turning to , for an enhanced device , essentially the only requirement is to establish a data pipe and pass in serialized objects, e.g., via a serializer . A user-mode driver may work for all enhanced displays, regardless of connection type, however it is likely more straightforward to use one driver per device per connection type. In any event, the driver  is responsible for translating the API-provided data and commands into something that the TinyCLR-based device is capable of understanding, and. can leverage a library . In general, because the firmware operation is well-known to the provider of the auxiliary display platform, the objects that are passed can be essentially anything that the auxiliary display platform, enhanced device driver and enhanced device agree upon.","Content will generally be downloaded to a cache on the enhanced device, and the device itself will then handle the content as desired. Note that this allows for disconnected usage, as well as having multiple applications running on the system provide content, with one application being run at a time to access the cached content on the auxiliary display. Notifications will impose on the current running application, by design. Notifications may be arranged for presentation in any suitable ordering, such as in a FIFO (first-in first-out) manner, although as can be readily appreciated, there may be a different priority among types of notifications (e.g., urgent, recent and so forth may be given a higher priority than a regular or old notification).","In one implementation, represented in , to navigate and display cached content, device applications  and a shell program  run on a TinyCLR framework  and component , which interprets, navigates, and displays the data. In general, the shell program  provides a home page, non-client area (an area on the device's screen which is always visible when the display is on no matter what other content is being displayed on the device, typically used to display commonly needed things, such as a clock, a battery indicator, a network indicator), menus and the general look and feel of the auxiliary display device. The data provided may be in the form of or modified into a directed graph of screens, each of which is a visual tree of TinyCLR View objects rooted by a TinyCLR Form object. The shell layer receives button events from the lower layers of the firmware, interprets them, and navigates around in the data as appropriate. The shell program  also accepts notification requests from the main computer system via the auxiliary display platform as described above, and issues requests to the main computer system to provide new content when it learns from the caching manager  that content is needed (e.g., missing). The shell program  also displays timed notifications, which can occur when the main computer system is not connected.","The offline caching manager  comprises an assembly, written on top of the TinyCLR , which manages the cache of data items stored on the device. This component also performs some memory management, dealing with the fact that system application programs may provide more data than the device can store. If the firmware modifies the data cache, this component tracks that information, and posts events to the application program on the system to let it know either immediately if the main computer system is online, or if not online, when the machine comes back online. The cache manager may be exposed to the driver  via an interface.","It should be noted that auxiliary devices may be configured by their manufacturer to have expanded capabilities beyond those described above. To this end, one or more hardware components may be added, along with a driver in the stack to expose any new components to the auxiliary device and the rest of the auxiliary display platform. Such hardware extensions are described in copending U.S. patent application Ser. No. 10\/996,634, now U.S. Pat No. 7,549,154, entitled \u201cExtensible Architecture for Auxiliary Displays\u201d filed concurrently herewith and incorporated by reference herein.","As can be seen from the foregoing, the present invention provides an auxiliary display platform by which application programs may be written to communicate information to auxiliary displays, independent of the type of auxiliary display device actually in use. At the same time, the auxiliary display platform enables manufacturers of hardware devices to have those devices used as auxiliary displays with little if any change to the hardware. The present invention thus provides numerous benefits and advantages needed in contemporary computing.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific form or forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 2A-2E"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
