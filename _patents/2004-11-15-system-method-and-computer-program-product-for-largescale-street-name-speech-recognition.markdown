---
title: System, method and computer program product for large-scale street name speech recognition
abstract: A system, method and computer program product are provided for speech recognition. During operation, a database of words are maintained. Initially, a probability is assigned to each of the words which indicates a prevalence of use of the word. Further, an utterance is received for speech recognition purposes. Such utterance is matched with one of the words in the database based on least in part on the probability.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07444284&OS=07444284&RS=07444284
owner: BeVocal, Inc.
number: 07444284
owner_city: Mountain View
owner_country: US
publication_date: 20041115
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DISCLOSURE OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS","Preferred Embodiments","EXEMPLARY APPLICATIONS"],"p":["The present application is a continuation-in-part of a U.S. application Ser. No. 10\/005,597, filed Nov. 7, 2001, now abandoned which is a continuation-in-part of U.S. application Ser. No. 09\/894,164, filed Jun. 26, 2001, now abandoned which is a continuation-in-part of U.S. application Ser. No. 09\/770,750, filed Jan. 24, 2001, now abandoned all of which are incorporated herein by reference in their entirety.","The present invention relates to speech recognition, and more particularly to large-scale street name speech recognition.","Techniques for accomplishing automatic speech recognition (ASR) are well known. Among known ASR techniques are those that use grammars. A grammar is a representation of the language or phrases expected to be used or spoken in a given context. In one sense, then, ASR grammars typically constrain the speech recognizer to a vocabulary that is a subset of the universe of potentially-spoken words; and grammars may include subgrammars. An ASR grammar rule can then be used to represent the set of \u201cphrases\u201d or combinations of words from one or more grammars or subgrammars that may be expected in a given context. \u201cGrammar\u201d may also refer generally to a statistical language model (where a model represents phrases), such as those used in language understanding systems.","Products and services that utilize some form of automatic speech recognition (\u201cASR\u201d) methodology have been recently introduced commercially. For example, AT&T has developed a grammar-based ASR engine called WATSON that enables development of complex ASR services. Desirable attributes of complex ASR services that would utilize such ASR technology include high accuracy in recognition; robustness to enable recognition where speakers have differing accents or dialects, and\/or in the presence of background noise; ability to handle large vocabularies; and natural language understanding. In order to achieve these attributes for complex ASR services, ASR techniques and engines typically require computer-based systems having significant processing capability in order to achieve the desired speech recognition capability. In addition to WATSON, numerous ASR services are available which are typically based on personal computer (PC) technology.","One application of ASR techniques is the voice entry of addresses, i.e. street names, cities, etc. for the purpose of receiving directions. One example of such application is disclosed in U.S. Pat. No. 6,108,631. Such invention relates to an input system for at least location and\/or street names, including an input device, a data source arrangement which contains at least one list of locations and\/or streets, and a control device which is arranged to search location or street names, entered via the input device, in a list of locations or streets in the data source arrangement. In order to simplify the input of location and\/or street names, the data source arrangement contains not only a first list of locations and\/or streets with alphabetically sorted location and\/or street names, but also a second list of locations and\/or streets with location and\/or street names sorted on the basis of a frequency criterion. A speech input system of the input device conducts input in the form of speech to the control device. The control device is arranged to perform a sequential search for a location or street name, entered in the form of speech, as from the beginning of the second list of locations and\/or streets.","Such prior art direction services supply to a traveler automatically developed step-by-step directions for travel from a starting point to a destination. Typically these directions are a series of steps which detail, for the entire route, a) the particular series of streets or highways to be traveled, b) the nature and location of the entrances and exits to\/from the streets and highways, e.g., turns to be made and exits to be taken, and c) optionally, travel distances and landmarks.","One difficulty that arises when attempting to identify and differentiate between the plethora of streets is the ability to accurately identify the street name corresponding to an utterance of a user. This problem is exacerbated as a result of the prevalent reuse of names, the varied pronunciations thereof, and the overall massive amount of street names in existence.","There is therefore a need for an improved technique of recognizing street names and the like.","A system, method and computer program product are provided for speech recognition. During operation, a database of words are maintained. Initially, a probability is assigned to each of the words which indicates a prevalence of use of the word. Further, an utterance is received for speech recognition purposes. Such utterance is matched with one of the words in the database based on least in part on the probability.","In one embodiment of the present invention, the words may include names of streets. Further, the probability may be determined using statistical data corresponding to use of the streets. As an option, the statistical data may include traffic counts such as traffic along the streets and along intersecting streets.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","102","104"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1"],"b":["102","210","212"]},"The workstation shown in  includes a Random Access Memory (RAM) , Read Only Memory (ROM) , an I\/O adapter  for connecting peripheral devices such as disk storage units  to the bus , a user interface adapter  for connecting a keyboard , a mouse , a speaker , a microphone , and\/or other user interface devices such as a touch screen (not shown) to the bus , communication adapter  for connecting the workstation to a communication network (e.g., a data processing network) and a display adapter  for connecting the bus  to a display device . The workstation typically has resident thereon an operating system such as the Microsoft Windows NT or Windows\/95 Operating System (OS), the IBM OS\/2 operating system, the MAC OS, or UNIX operating system. Those skilled in the art will appreciate that the present invention may also be implemented on platforms and operating systems other than those mentioned.","A preferred embodiment is written using JAVA, C, and the C++ language and utilizes object oriented programming methodology. Object oriented programming (OOP) has become increasingly used to develop complex applications. As OOP moves toward the mainstream of software design and development, various software solutions require adaptation to make use of the benefits of OOP. A need exists for these principles of OOP to be applied to a messaging interface of an electronic messaging system such that a set of OOP classes and objects for the messaging interface can be provided.","OOP is a process of developing computer software using objects, including the steps of analyzing the problem, designing the system, and constructing the program. An object is a software package that contains both data and a collection of related structures and procedures. Since it contains both data and a collection of structures and procedures, it can be visualized as a self-sufficient component that does not require other additional structures, procedures or data to perform its specific task. OOP, therefore, views a computer program as a collection of largely autonomous components, called objects, each of which is responsible for a specific task. This concept of packaging data, structures, and procedures together in one component or module is called encapsulation.","In general, OOP components are reusable software modules which present an interface that conforms to an object model and which are accessed at run-time through a component integration architecture. A component integration architecture is a set of architecture mechanisms which allow software modules in different process spaces to utilize each others capabilities or functions. This is generally done by assuming a common component object model on which to build the architecture. It is worthwhile to differentiate between an object and a class of objects at this point. An object is a single instance of the class of objects, which is often just called a class. A class of objects can be viewed as a blueprint, from which many objects can be formed.","OOP allows the programmer to create an object that is a part of another object. For example, the object representing a piston engine is said to have a composition-relationship with the object representing a piston. In reality, a piston engine comprises a piston, valves and many other components; the fact that a piston is an element of a piston engine can be logically and semantically represented in OOP by two objects.","OOP also allows creation of an object that \u201cdepends from\u201d another object. If there are two objects, one representing a piston engine and the other representing a piston engine wherein the piston is made of ceramic, then the relationship between the two objects is not that of composition. A ceramic piston engine does not make up a piston engine. Rather it is merely one kind of piston engine that has one more limitation than the piston engine; its piston is made of ceramic. In this case, the object representing the ceramic piston engine is called a derived object, and it inherits all of the aspects of the object representing the piston engine and adds further limitation or detail to it. The object representing the ceramic piston engine \u201cdepends from\u201d the object representing the piston engine. The relationship between these objects is called inheritance.","When the object or class representing the ceramic piston engine inherits all of the aspects of the objects representing the piston engine, it inherits the thermal characteristics of a standard piston defined in the piston engine class. However, the ceramic piston engine object overrides these ceramic specific thermal characteristics, which are typically different from those associated with a metal piston. It skips over the original and uses new functions related to ceramic pistons. Different kinds of piston engines have different characteristics, but may have the same underlying functions associated with it (e.g., how many pistons in the engine, ignition sequences, lubrication, etc.). To access each of these functions in any piston engine object, a programmer would call the same functions with the same names, but each type of piston engine may have different\/overriding implementations of functions behind the same name. This ability to hide different implementations of a function behind the same name is called polymorphism and it greatly simplifies communication among objects.","With the concepts of composition-relationship, encapsulation, inheritance and polymorphism, an object can represent just about anything in the real world. In fact, one's logical perception of the reality is the only limit on determining the kinds of things that can become objects in object-oriented software. Some typical categories are as follows:\n\n","With this enormous capability of an object to represent just about any logically separable matters, OOP allows the software developer to design and implement a computer program that is a model of some aspects of reality, whether that reality is a physical entity, a process, a system, or a composition of matter. Since the object can represent anything, the software developer can create an object which can be used as a component in a larger software project in the future.","If 90% of a new OOP software program consists of proven, existing components made from preexisting reusable objects, then only the remaining 10% of the new software project has to be written and tested from scratch. Since 90% already came from an inventory of extensively tested reusable objects, the potential domain from which an error could originate is 10% of the program. As a result, OOP enables software developers to build objects out of other, previously built objects.","This process closely resembles complex machinery being built out of assemblies and sub-assemblies. OOP technology, therefore, makes software engineering more like hardware engineering in that software is built from existing components, which are available to the developer as objects. All this adds up to an improved quality of the software as well as an increased speed of its development.","Programming languages are beginning to fully support the OOP principles, such as encapsulation, inheritance, polymorphism, and composition-relationship. With the advent of the C++ language, many commercial software developers have embraced OOP. C++ is an OOP language that offers a fast, machine-executable code. Furthermore, C++ is suitable for both commercial-application and systems-programming projects. For now, C++ appears to be the most popular choice among many OOP programmers, but there is a host of other OOP languages, such as Smalltalk, Common Lisp Object System (CLOS), and Eiffel. Additionally, OOP capabilities are being added to more traditional popular computer programming languages such as Pascal.","The benefits of object classes can be summarized, as follows:\n\n","Class hierarchies and containment hierarchies provide a flexible mechanism for modeling real-world objects and the relationships among them.","Libraries of reusable classes are useful in many situations, but they also have some limitations. For example:\n\n","Class libraries are very flexible. As programs grow more complex, more programmers are forced to reinvent basic solutions to basic problems over and over again. A relatively new extension of the class library concept is to have a framework of class libraries. This framework is more complex and consists of significant collections of collaborating classes that capture both the small-scale patterns and major mechanisms that implement the common requirements and design in a specific application domain. They were first developed to free application programmers from the chores involved in displaying menus, windows, dialog boxes, and other standard user interface elements for personal computers.","Frameworks also represent a change in the way programmers think about the interaction between the code they write and code written by others. In the early days of procedural programming, the programmer called libraries provided by the operating system to perform certain tasks, but basically the program executed down the page from start to finish, and the programmer was solely responsible for the flow of control. This was appropriate for printing out paychecks, calculating a mathematical table, or solving other problems with a program that executed in just one way.","The development of graphical user interfaces began to turn this procedural programming arrangement inside out. These interfaces allow the user, rather than program logic, to drive the program and decide when certain actions should be performed. Today, most personal computer software accomplishes this by means of an event loop which monitors the mouse, keyboard, and other sources of external events and calls the appropriate parts of the programmer's code according to actions that the user performs. The programmer no longer determines the order in which events occur. Instead, a program is divided into separate pieces that are called at unpredictable times and in an unpredictable order. By relinquishing control in this way to users, the developer creates a program that is much easier to use. Nevertheless, individual pieces of the program written by the developer still call libraries provided by the operating system to accomplish certain tasks, and the programmer must still determine the flow of control within each piece after it's called by the event loop. Application code still \u201csits on top of\u201d the system.","Even event loop programs require programmers to write a lot of code that should not need to be written separately for every application. The concept of an application framework carries the event loop concept further. Instead of dealing with all the nuts and bolts of constructing basic menus, windows, and dialog boxes and then making these things all work together, programmers using application frameworks start with working application code and basic user interface elements in place. Subsequently, they build from there by replacing some of the generic capabilities of the framework with the specific capabilities of the intended application.","Application frameworks reduce the total amount of code that a programmer has to write from scratch. However, because the framework is really a generic application that displays windows, supports copy and paste, and so on, the programmer can also relinquish control to a greater degree than event loop programs permit. The framework code takes care of almost all event handling and flow of control, and the programmer's code is called only when the framework needs it (e.g., to create or manipulate a proprietary data structure).","A programmer writing a framework program not only relinquishes control to the user (as is also true for event loop programs), but also relinquishes the detailed flow of control within the program to the framework. This approach allows the creation of more complex systems that work together in interesting ways, as opposed to isolated programs, having custom code, being created over and over again for similar problems.","Thus, as is explained above, a framework basically is a collection of cooperating classes that make up a reusable design solution for a given problem domain. It typically includes objects that provide default behavior (e.g., for menus and windows), and programmers use it by inheriting some of that default behavior and overriding other behavior so that the framework calls application code at the appropriate times.","There are three main differences between frameworks and class libraries:\n\n","Thus, through the development of frameworks for solutions to various problems and programming tasks, significant reductions in the design and development effort for software can be achieved. A preferred embodiment of the invention utilizes HyperText Markup Language (HTML) to implement documents on the Internet together with a general-purpose secure communication protocol for a transport medium between the client and the Newco. HTTP or other protocols could be readily substituted for HTML without undue experimentation. Information on these products is available in T. Berners-Lee, D. Connoly, \u201cRFC 1866: Hypertext Markup Language-2.0\u201d (November 1995); and R. Fielding, H, Frystyk, T. Berners-Lee, J. Gettys and J. C. Mogul, \u201cHypertext Transfer Protocol\u2014HTTP\/1.1: HTTP Working Group Internet Draft\u201d (May 2, 1996). HTML is a simple data format used to create hypertext documents that are portable from one platform to another. HTML documents are SGML documents with generic semantics that are appropriate for representing information from a wide range of domains. HTML has been in use by the World-Wide Web global information initiative since 1990. HTML is an application of ISO Standard 8879; 1986 Information Processing Text and Office Systems; Standard Generalized Markup Language (SGML).","To date, Web development tools have been limited in their ability to create dynamic Web applications which span from client to server and interoperate with existing computing resources. Until recently, HTML has been the dominant technology used in development of Web-based solutions. However, HTML has proven to be inadequate in the following areas:\n\n","Sun Microsystem's Java language solves many of the client-side problems by:\n\n","With Java, developers can create robust User Interface (UI) components. Custom \u201cwidgets\u201d (e.g., real-time stock tickers, animated icons, etc.) can be created, and client-side performance is improved. Unlike HTML, Java supports the notion of client-side validation, offloading appropriate processing onto the client for improved performance. Dynamic, real-time Web pages can be created. Using the above-mentioned custom UI components, dynamic Web pages can also be created.","Sun's Java language has emerged as an industry-recognized language for \u201cprogramming the Internet.\u201d Sun defines Java as: \u201ca simple, object-oriented, distributed, interpreted, robust, secure, architecture-neutral, portable, high-performance, multithreaded, dynamic, buzzword-compliant, general-purpose programming language. Java supports programming for the Internet in the form of platform-independent Java applets.\u201d Java applets are small, specialized applications that comply with Sun's Java Application Programming Interface (API) allowing developers to add \u201cinteractive content\u201d to Web documents (e.g., simple animations, page adornments, basic games, etc.). Applets execute within a Java-compatible browser (e.g., Netscape Navigator) by copying code from the server to client. From a language standpoint, Java's core feature set is based on C++. Sun's Java literature states that Java is basically, \u201cC++ with extensions from Objective C for more dynamic method resolution.\u201d","Another technology that provides similar function to JAVA is provided by Microsoft and ActiveX Technologies, to give developers and Web designers wherewithal to build dynamic content for the Internet and personal computers. ActiveX includes tools for developing animation, 3-D virtual reality, video and other multimedia content. The tools use Internet standards, work on multiple platforms, and are being supported by over 100 companies. The group's building blocks are called ActiveX Controls, small, fast components that enable developers to embed parts of software in hypertext markup language (HTML) pages. ActiveX Controls work with a variety of programming languages including Microsoft Visual C++, Borland Delphi, Microsoft Visual Basic programming system and, in the future, Microsoft's development tool for Java, code named \u201cJakarta.\u201d ActiveX Technologies also includes ActiveX Server Framework, allowing developers to create server applications. One of ordinary skill in the art readily recognizes that ActiveX could be substituted for JAVA without undue experimentation to practice the invention.","Initially, a database must first be established with all of the necessary grammars. In one embodiment of the present invention, the database is populated with a multiplicity of street names for voice recognition purposes. In order to get the best coverage for all the street names, data from multiple data sources may be merged.",{"@attributes":{"id":"p-0057","num":"0078"},"figref":"FIG. 3","b":["300","302","304","306","308"]},{"@attributes":{"id":"p-0058","num":"0079"},"figref":["FIG. 4","FIG. 3","FIG. 4"],"b":["400","300","402"]},"Next, in operation , the city names are validated using a server capable of verifying street names, city names, and zip codes. In one embodiment, such server may take the form of a MapQuest server. This step is optional for ensuring the integrity of the data.","Thereafter, all of the street names in the zip code range are extracted from USPS data in operation . In a parallel process, the street names in the zip code range are similarly extracted from the GDT database. Note operation . Such street names are then organized in lists according to city.  illustrates a pair of exemplary lists  showing a plurality of streets names  organized according to city . Again, in operation , the street names are validated using the server capable of verifying street names, city names, and zip codes.","It should be noted that many of the databases set forth hereinabove utilize abbreviations. In operation , the street names are run through a name normalizer, which expands common abbreviations and digit strings. For example, the abbreviations \u201cSt.\u201d and \u201cCr.\u201d can be expanded to \u201cstreet\u201d and \u201ccircle,\u201d respectively.","In operation , a file is generated for each city. Each of such files delineates each of the appropriate street names.",{"@attributes":{"id":"p-0063","num":"0084"},"figref":"FIG. 5","b":"500"},"As shown in , a plurality of databases  are included having different types. For example, such databases may include a static database , dynamic database , web-server , file system , or any other type of database. Table 1 illustrates a comparison of the foregoing types of databases.",{"@attributes":{"id":"p-0065","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"When Compiled","On rec. Server?","Protocol"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Static","Offline","Yes","Proprietary Vendor"]},{"entry":["Dynamic","Offline\/Online","No","ORACLE\u2009\u2122 OCI"]},{"entry":["Web server","Runtime","No","HTTP"]},{"entry":["File System","Runtime","No","File System Access"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0066","num":"0087"},"figref":["FIG. 6","FIG. 5"],"b":["600","602"]},"During use, in operation , the grammars are dynamically retrieved utilizing protocols based on the type of the database. Retrieval of the grammars may be initially attempted from a first database. The database subject to such initial attempt may be selected based on the type, the specific content thereof, or a combination thereof.","For example, static databases may first be queried for the grammars to take advantage of their increased efficiency and speed, while the remaining types may be used as a fail-over mechanism. Moreover, the static database to be initially queried may be populated with grammars that are most prevalently used. By way of example, a static database with just New York streets may be queried in response to a request from New York. As such, one can choose to include certain highly used grammars as static grammars (thus reducing network traffic), while other databases with lesser used grammars may be accessible through various other network protocols.","Further, by storing the same grammar in more than one node in such a distributed architecture, a control flow of the grammar search algorithm could point to a redundant storage area if required. As such, a fail-over mechanism is provided. By way of example, in operation , it may be determined whether the grammars may be retrieved from a first one of the databases during a first attempt. Upon the failure of the first attempt, the grammars may be retrieved from a second one of the databases, and so on. Note operation .","The present approach thus includes distributing grammar resources across a variety of data storage types (static packages, dynamic grammar databases, web servers, file systems), and allows the control flow of the application to search for the grammars in all the available resources until it is found.",{"@attributes":{"id":"p-0071","num":"0092"},"figref":"FIG. 7","b":"700"},"During operation , a database of words is maintained. Initially, in operation , a probability is assigned to each of the words, i.e. street names, which indicates a prevalence of use of the word. As an option, the probability may be determined using statistical data corresponding to use of the streets. Such statistical data may include traffic counts such as traffic along the streets and along intersecting streets.","The traffic count information may be given per intersection. One proposed scheme to extract probabilities on a street-to-street basis will now be set forth. The goal is to include in the grammar probabilities for each street that would predict the likelihood users will refer to it. It should be noted that traffic counts are an empirical indication of the importance of a street.","In use, data may be used which indicates an amount of traffic at intersections of streets. Equation #1 illustrates the form of such data. It should be noted that data in such form is commonly available for billboard advertising purposes.\n\nTrafficIntersection(street,street)=\n\nTrafficIntersection(street,street)=\n\nTrafficIntersection(street,street)=\n\nTrafficIntersection(street,street)=\u2003\u2003Equation #1\n","To generate a value corresponding to a specific street, all of the intersection data involving such street may be aggregated. Equation #2 illustrates the manner in which the intersection data is aggregated for a specific street.\n\nTraffic(street)=\u2003\u2003Equation #2\n","The aggregation for each street may then be normalized. One exemplary method of normalization is represented by Equation #3.\n\nNormalization[Traffic(street)]=log()\u2003\u2003Equation #3\n","Such normalized values may then be used to categorize each of the streets in terms of prevelancy of use. Preferably, this is done separately for each city. Each category is assigned a constant scalar associated with the popularity of the street. By way of example, the constant scalars 1, 2 and 3 may be assigned to normalized aggregations 0.01, 0.001, and 0.0001, respectively. Such popularity may then be added to the city grammar file to be used during the speech recognition process.","During use, an utterance is received for speech recognition purposes. Note operation . Such utterance is matched with one of the words in the database based at least in part on the probability, as indicated by operation . For example, when confusion is raised as to which of two or more streets an utterance is referring, the street with the highest popularity (per the constant scalar indicator) is selected as a match.","Exemplary Speech Recognition Process","An exemplary speech recognition process will now be set forth. It should be understood that the present example is offered for illustrative purposes only, and should not be construed as limiting in any manner.",{"@attributes":{"id":"p-0081","num":"0102"},"figref":["FIG. 8","FIG. 8"],"b":["1","2"]},{"@attributes":{"id":"p-0082","num":"0103"},"figref":["FIG. 9","FIG. 8","FIG. 10"],"b":["0","1","0","1","2"]},"Box Krepresents the breakdown of a spoken word to be recognized into input vectors V. Box K indicates the computation of the distances dbetween the input vectors Vand the reference vectors w. This distance is evaluated based on the absolute value of the differences between the components of these vectors. In box K is determined the minimum distance D among the minimum distances which have been computed. This minimum value is compared with the threshold value TH, box K. If this value is higher than the threshold TH, the word is rejected in box K, if not, it is declared recognized in box K.","The order of various steps may be reversed in the method according to the invention. As this is shown in , the evaluation of the ambient noise may also be carried out after the speaker has spoken the word to be recognized, that is, between the instants t\u2032 and t\u2032 (see ). This is translated in the flow chart of  by the fact that the steps K and K occur after step K and before decision step K.","The end of this ambient noise evaluation step, according to a characteristic feature of the invention, may be signaled to the speaker in that a beep is emitted, for example, by a loudspeaker which then invites the speaker to speak. The present embodiment has taken into account that a substantially linear function of the threshold value as a function of the measured noise level in dB was satisfactory. Other functions may be found too, without leaving the scope of the invention therefore.","If the distances vary between a value from 0 to 100, the values of TH1 may be 10 and those of TH2 80 for noise levels varying from \u221225 dB to \u22125 dB.","Various applications of the foregoing technology will now be set forth. It should be noted that such applications are for illustrative purposes, and should not be construed limiting in any manner.",{"@attributes":{"id":"p-0088","num":"0109"},"figref":"FIG. 12","b":["1200","1202"]},"Thereafter, in operation , the utterance is transcribed utilizing a speech recognition process. As an option, the speech recognition process may include querying one of a plurality of databases based on the origin address. Such database that is queried by the speech recognition process may include grammars representative of addresses local to the origin address.","An origin address is then determined. Note operation . In one embodiment of the present invention, the origin address may also be determined utilizing the speech recognition process. It should be noted that global positioning system (GPS) technology or other methods may also be utilized for such purpose.","A database is subsequently queried for generating driving directions based on the destination address and the origin address, as indicated in operation . In particular, a server (such as MapQuest server) may be utilized to generate such driving directions. Further, such driving directions may optionally be sounded out via a speaker or the like.",{"@attributes":{"id":"p-0092","num":"0113"},"figref":"FIG. 13","b":["1300","1302"]},"In response to the receipt thereof, the utterance is transcribed utilizing a speech recognition process. See operation . Further, in operation , a destination address is identified based on the destination name. It should be noted that the addresses may include street names. To accomplish this, a database may be utilized which includes addresses associated with business names, brand names, and\/or goods and services. Optionally, such database may include a categorization of the goods and services, i.e. virtual yellow pages, etc.","Still yet, an origin address is identified. See operation . In one embodiment of the present invention, the origin address may be determined utilizing the speech recognition process. It should be noted that global positioning system (GPS) technology or other techniques may also be utilized for such purpose.","Based on such destination name and origin address, a database is subsequently queried for generating driving directions. Note operation . Similar to the previous embodiment, a server (such as a MapQuest server) may be utilized to generate such driving directions, and such driving directions may optionally be sounded out via a speaker or the like.",{"@attributes":{"id":"p-0096","num":"0117"},"figref":"FIG. 14","b":["1400","1402"]},"Utilizing a speech recognition process, the utterance is then transcribed. Note operation . Further, in operation , a database is queried for generating flight information based on the flight identifier. As an option, the flight information may include a time of arrival of the flight, a flight delay, or any other information regarding a particular flight.",{"@attributes":{"id":"p-0098","num":"0119"},"figref":"FIG. 15","b":["1500","1502","1504"]},"A current location of the user is subsequently determined, as set forth in operation . In one embodiment of the present invention, the current location may be determined utilizing the speech recognition process. In another embodiment of the present invention, the current location may be determined by a source of the utterance. This may be accomplished using GPS technology, identifying a location of an associated inputting computer, etc.","Based on the transcribed utterance and the current location, a database is queried for generating the content. See operation . Such content may, in one embodiment, include web-content taking the form of web-pages, etc.","As an option, the speech recognition process may include querying one of a plurality of databases based on the current address. It should be noted that the database queried by the speech recognition process may include grammars representative of the current location, thus facilitating the retrieval of appropriate content.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of a preferred embodiment should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 8-11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
