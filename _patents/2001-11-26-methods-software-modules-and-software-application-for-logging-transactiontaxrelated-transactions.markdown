---
title: Methods, software modules and software application for logging transaction-tax-related transactions
abstract: The invention is directed to a computer-based method for logging transaction-tax-related transactions, the method using rules which define, depending on transaction data, what transactions have to be logged, the method comprising: receiving a logging request for a transaction; evaluating the logging rules with transaction data of said transaction, logging said transaction if the result of the evaluation demands it. The invention is also directed to related software modules and a related software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08620777&OS=08620777&RS=08620777
owner: Hewlett-Packard Development Company, L.P.
number: 08620777
owner_city: Houston
owner_country: US
publication_date: 20011126
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates generally to computerized transaction-tax processing, and more particularly to computer-based methods, software modules and a software application for logging transaction-tax-related transactions.","Besides an income tax system which imposes income-related tax liabilities on individuals and corporations, most countries have a transaction tax system. A transaction tax liability is induced by an individual commercial transaction, such as the sale of a good, the purchase of a service or the like. Typically, the transaction tax is a certain percentage of the price of the good or service. Normally, the transaction tax is collected by the vendor or service provider, who pays the accumulated transaction tax at certain time intervals (e.g. monthly) to a tax authority (for the sake of simplicity, the following description only mentions the purchase of goods, but is likewise directed to the provision of services etc.).","Throughout the world, there are mainly two different transaction tax systems: sales and use tax and value added tax (VAT). In a sales and use tax system, which is imposed in most states throughout the United States, the tax amount is derived by applying the tax rate to the retail sales price of tangible personal property or certain enumerated services. If a product is manufactured and sold in a supply chain, all transactions are non-taxable re-sales until a final retail sale to an end-user, which is taxable unless the end-user can claim an exemption from the tax. Thus, in a sales and use tax system, no tax is applied to a product until sold at retail. In a value added tax system, which is applied in many European countries, in a supply chain the transaction tax in a single individual step corresponds only to a percentage of the value added in this step, i.e. to the difference between the amount of money the vendor receives for the sold product and the taxable amount he had to spend in order to manufacture or provide the good. In such a value added tax system, the amount of transition tax accumulated over all the steps of the supply chain is independent of the number of transactions in the chain, it only depends on the price of the finished product. However, normally the \u201cadded value\u201d is not determined in individual transactions. Rather, every vendor accumulates, on the one hand, the tax received from buyers and, on the other hand, the tax he has paid to other vendors for all the transactions occurring within certain time periods (e.g. months) and pays only the difference between these two accumulated values to the tax authority. Therefore, also in a value added tax system, when looking at an individual transaction, the buyer has to pay a certain percentage of the product's price to the vendor.","Besides these principal differences between sales and use tax and value added tax, the transaction tax regulations vary from country to country, and, in the United States, even from state to state down to the level of cities and areas. For example, there are different rates in different countries and even in different states. In addition, the tax rate may depend in a country or state specific way on the seat of the vendor and\/or the buyer and\/or the origin and\/or the destination of the good when it is shipped from the vendor to the buyer. In many countries there is a tax rate of zero for exported goods. However, in trade within the European Community transaction tax has to be paid in the country where the transaction takes place, but is then credited to the destination country in a clearing procedure carried out by the tax authorities. Also the requirements for transaction tax related bookkeeping, reporting and the form and period of tax declarations to the tax authorities generally vary from country to country.","In view of the ever-growing internationalization and globalization of enterprises and trade, there is a need for computerized systems which enable enterprises to fulfill the transaction tax requirements (preferably for different countries and states) in an efficient way.","Several products of this kind are already on the market. In one type of product, an enterprise resource planning (ERP) application (which traditionally provides for accounting, manufacturing logistics, supply-chain management, sales-force automation, customer service and support, human resources management, etc.) also enables the user to deal with the transaction taxes. For example, the ERP product R\/3 by SAP provides a facility for transition tax calculation for different European countries, but not for the United States. Another type of product is a specialized application for transaction tax calculation and reporting. Examples of such an application are \u201cTaxWare\u201d, \u201cSabrix\u201d, \u201cVertex\u201d and \u201cDatev\u201d.","Moreover, U.S. Pat. No. 6,078,899 discloses a point of sale tax reporting and automatic collection system. U.S. Pat. No. 6,298,333 discloses a computer system and method which provides a solution for a particular transaction tax related problem, namely the determination of correct use tax on moveable equipment for leasing companies.","In most jurisdictions it is required that transaction data of tax-relevant transactions are recorded or \u201clogged\u201d on transaction-by-transaction basis. In the known transition tax program products, the recording of transactions is intimately linked with the tax calculation functionality provided by these programs.","The invention provides a computer-based method for logging transaction-tax-related transactions. The method uses rules which define, depending on transaction data, what transactions have to be logged. The method comprises: receiving a logging request for a transaction; evaluating the logging rules with transaction data of said transaction, logging said transaction if the result of the evaluation demands it.","According to another aspect, the invention provides a computer-based method for logging transaction-tax-related transactions. It uses rules which define, depending on transaction data, what data items have to be logged. The method comprises: receiving a logging request for a transaction; evaluating the logging rules with transaction data of said transaction; logging a selection of data items of the transaction according to the result of the evaluation.","According to still another aspect, the invention provides a software module for logging transaction-tax related transactions for use in a transaction-tax processing application. The logging module comprises: a logging rule evaluation component; a logging component for logging a transaction depending on an evaluation of logging rules for said transaction.","According to yet another aspect, the invention provides a software module for logging transaction-tax related transactions for use in a transaction-tax processing application. The application comprises a module for transaction-tax calculation. The logging module comprises: an interface for receiving a logging request for a transaction; a logging component for logging the transaction. The logging module is callable independently of the module for transaction-tax calculation.","Finally, the invention is also directed to a software application for computer-based transition-tax processing. The application comprises a software module for logging transaction-tax related transactions according to logging rules. The application provides a logging rule configuration interface which enables the logging rules to be input and configured by a user without a need to change hard-coded programs. The logging module comprises a component for reading the rules input via the logging rule configuration interface.","In  the main components and architectural layers of the computer-based transaction tax processing system are depicted, where the computer-based transaction tax processing system includes software modules stored in computer-readable storage media that upon execution cause a computer to perform corresponding tasks. Before proceeding further with the description, however, a few items will be discussed.","\u201cLogging\u201d means storing of transaction-tax-related transaction data. In most jurisdictions it is required that transaction data of tax-relevant transactions are recorded on transaction-by-transaction basis. Furthermore, companies have often their own interests in recording tax-relevant transaction data for business-management analysis purposes. Recording of transaction data in a way which fulfills at least the minimum requirements of the tax laws in a certain jurisdiction enables a \u201ctransaction tax compliance reporting\u201d (for that particular jurisdiction). The logged transactions form the basis for the tax filing, i.e. the calculation of the amount of transaction tax to be paid to the tax authorities and preparation of the corresponding tax declaration which has to be made in certain time intervals, for example monthly. The logged transaction data are also used for transaction-tax review by official and internal auditors. Logged transactions may be trade invoices, general ledger (G\/L) bookings (i.e. bookings in a company's general account book which appear when a payment has been received or made), etc. In most jurisdictions, it is not required to log every transaction-tax-related transaction for compliance reporting. For example, transactions with provisional character, such as offers or orders, need not be logged. The requirements as to which transactions have to be logged differ from jurisdiction to jurisdiction. They may even be different for different types of legal entities, for example corporations and partnerships. The definition of which transactions have to be logged may also be company-dependent since individual companies may wish to carry out a more comprehensive reporting than the minimum-required compliance reporting.","Also the definition of what data of a transition have to be logged differs from jurisdiction to jurisdiction and may depend on the company's legal type. For example, within Europe, Spain requires a more comprehensive recording of transaction data than Germany. Again, individual companies may wish to log more detailed transaction data than the minimum requirement of compliance reporting, so that the definition of what transaction data have to be logged may be company-dependent. The preferred embodiments of the logging service enable such a variable kind of logging.","In the preferred embodiments, the logging method is carried out by a software module which can be invoked independently of other basic transition tax services, in particular independently of a module which calculates the transition tax. This enables the use of different transaction tax calculation applications for the transition tax calculation (for example, the use of external tax calculation provided by external service providers) without affecting the transition tax logging. Furthermore, it enables stored data, such as stored history or legacy data generated by non-integrated tax calculation engines, to be loaded directly to the transition tax logging module. In contrast, in the known transition tax program products, the recording of transactions is intimately linked with the tax calculation, so that only those transactions which have previously been passed through for the program's tax calculation are recorded.","In the preferred embodiments, the transition tax logging module is invoked by an HTTP request together with an argument comprising transaction-related data, for example in the form of an XML document forming the body of the HTTP request.","In the preferred embodiments, the rules defining which transactions and what transaction data are to be logged (called \u201clog rules\u201d or \u201clogging rules\u201d) are contained in a content service module in a form configurable by the user. When the transaction tax logging module is invoked it fetches all, or a subset of, the log rules and evaluates them with the data of the transaction for which it has been invoked. In the case in which only a subset is fetched, it is composed of those log rules which may be relevant for the decision whether the transaction has to be logged and what transaction data are to be logged. For example, in a transaction in which a good is shipped from Germany by a German seller, the subset of rules fetched from the content service module comprises all the log rules which relate to Germany.","In the preferred embodiments, the log definition is not hard-coded in the content service or the logging service module. Rather, the log rules can be input and modified by the user in a log rule configuration interface. After having fetched the logging rules, the transition tax logging module reads them and processes the log request accordingly.","In the preferred embodiments, the logging module has an auto-recognition functionality: it can decide itself whether a transaction is to be logged, and, if applicable, what data of the transaction are to be logged, by evaluating the log rules with data of the present transaction received together with the HTTP request which has invoked the TT logging module. Therefore, no previously invoked module (for example, a tax calculation module) needs to decide whether the present transaction is to be logged or not (if such a decision were taken by a previous module, the logging service could only be invoked when logging is required). Rather, since the logging module takes this decision itself, it can be invoked for every event (i.e. for every transaction) without any parameter representing a log requirement. As a consequence, any application generating transactions can be used together with the logging module without having to take care itself whether transactions have to be logged. This auto-recognition functionality enhances the modularity of the whole software application since it enables the log requirement information to be concentrated in the content service module and the logging module and the other modules can be kept free of it.","In the preferred embodiments, the decision as to whether a transaction is logged and what selection of data items is logged depends on the type of the transaction and\/or the jurisdiction which is relevant for the transaction.","By using the preferred logging module it is ensured that the logged data are in compliance with the requirements of the pertinent jurisdiction. One and the same logging module can be used for the different jurisdictions of interest. The \u201ccontent\u201d, i.e. the rules reflecting the logging requirements of the different jurisdictions can easily be configured by the user via the user interface, without the need to change hard-coded programs. The logging module can be invoked independently of other program modules, such as transaction tax calculation modules, and does not need logging-specific invocation parameters in order to perform the logging task.","The term transaction tax (TT) and transaction taxation, sometimes also referred to as turnover tax, covers all kind of taxes which apply to commercial transaction processes of a company such as sales or purchases. The taxation regulations for those transactions vary from country to country and may even vary from state to state or district to district in one country. Examples for such transaction taxes are the sales and use taxes applied in the United States or the value-added tax used in most European countries.","The general requirements for a transaction tax processing system are the capability of calculating the transaction tax taking into account the country-specific requirements for national and transnational transactions, the reporting and storing of the tax-related data for auditors information or company-internal use and the filing of the tax report to the appropriate tax authority.","Transactions within a company which might be subject to a transaction taxation comprise orders, financial credits, quotations and bids, incoming or outgoing invoices, returns and credits, or internal financial transactions between business units of the same company belonging to different legal or taxation systems.","Usually, the transactions which are subject to transaction taxation are processed within a business application, or more particularly, within an enterprise resource planning (ERP) application such as the product R\/3 by SAP. Therefore, the transaction system has to be linked to those business pr ERP applications, i.e. an appropriate interface has to be provided. Alternatively, the execution of the transaction tax processing system may be initiated via the Internet. For example, an e-business portal is provided in the Internet offering a service for transaction tax calculation. In the first case, the connection between the business application and the transaction tax processing system is realized as an Application Programming Interface (API), while in the second case the execution of the transaction tax processing system may be triggered by a client request transmitted via Internet using the HTTP protocol. In both cases, there is usually no standardized data model for the exchange of parameters with the transaction tax processing system, i.e. the transaction tax processing system needs to be able to handle various data formats and models.","The Hypertext Transfer Protocol (HTTP) is the protocol used in the preferred embodiments for communication between the different software modules of the transaction tax processing system, and in particular, between the basic services and micro services. The HTTP protocol is the standard communication protocol used in the World Wide Web (WWW), which is referred to as the Web. However, other future Web protocols or other versions of the HTTP protocol may be used in the preferred embodiments.","Various data types may be used for the exchange of information between different Web servers. In the preferred embodiments, the Extensible Markup Language (XML) is used as Web-based technology for the interface between the different software modules of the transaction tax processing system (that are possibly geographically delocalized) in order to exchange the necessary parameters. This technology allows a flexible design of data models. Each data element of the data model comprises an identifier, which can be freely defined in the so-called Document Type Definition (DTD), and a corresponding value. In contrast to HTML (Hypertext Mark-up Language), in which the data types are restricted to a given set of data types, an XML programmer can define his own data elements according to the specific needs of the application. Typically, in XML a data element is transferred via the Web using the syntax:\n\n","where the data element \u201cparameter_name\u201d, which is sometimes referred to as \u201ctag\u201d, is identified by its ID and carries the value \u201cparameter_value\u201d. In this way, parameters can be passed from one software module of the transaction tax processing system to another via the Web. The data structure of XML documents can be defined by means of a Document Type Definition (DTD) or an \u201cXML-Schema\u201d. The use of XML with an \u201cXML-Schema\u201d as Web-based interface technology for the transaction tax processing system has the advantage of being more flexible in the definition of more complex data structures.","The term exchange of data relates to a software interface that transfers data from one application or software module to another. However, the term exchange does not imply a transfer of data in both directions and thus is not restricted thereto, but particularly comprises a transfer of data only in one direction.","The term data record relates to an instance or embodiment of a data model, e.g. a data set or file transmitted via the Internet, stored on a hard disc, CD, disc, or DVD, etc. Such a record comprises a number of data items corresponding to the data elements of a data model.","Now coming back to , which depicts the different layers of the architecture of the transaction tax processing system of the preferred embodiments. The application layer  comprises the software or the event which initiates the execution of the transaction tax processing system. Basically, there are two possible ways to call the transaction tax processing system. In one of these, a business application program , such as an enterprise resource planning (ERP) application like SAP R\/3 or legacy, demands transaction tax (TT) services  via an application programming interface (API) . The ERP  processes and stores the transaction-related data and passes the relevant parameters over the interaction layer , i.e. the API , to the process and communication layer  of the transaction tax processing system. In the second way, a client requests transaction taxation services  via a Web portal  using the HTTP protocol. Two general embodiments of such a portal are possible. In one embodiment, the portal  offers a service via a Web page on which the user may specify certain transaction parameters, e.g. the purchased product, the price, the production location, the shipment location etc., and requests interactively a corresponding transaction tax calculation from the transaction tax processing system. The clients does not need to know anything about the taxation rates, the jurisdiction and regulations in the specific production and shipping countries nor to know about recent changes. The client gets back the accurate tax value and taxation rate for the specified transaction. There is also the possibility for the client to retrieve general information on taxation rates and regulations for various countries using the Web portal .","Another way to use the Web portal  would be by connecting the Web portal  automatically via a HTTP connection to a client application which might be an e-business application requiring some kind of transaction tax calculation. This client e-business application  then requests transaction tax calculations from the transaction tax processing system via the portal  automatically during its execution.","The main functionality of the transaction tax system is implemented via basic services  and micro services . A basic service  usually aggregates a number of micro services . However, micro services  can also be called as stand alone modules.","In the process and communication layer  specific processes for the specific client requests are defined. For each specific request a certain workflow has to be performed which is controlled by the process and communication layer . It controls the calls of the various basic and micro services  and  and provides the communication between those services.","This layer is based on the HP (Hewlett Packard) e-speak technology which integrates the various basic and micro services. Based on a set of micro services  the basic services  are used in combination or stand alone within the various process steps of the transaction tax services .","The architecture is a true Web-based architecture using Web technology. The communication between the process and communication layer  and the basic services  as well as the micro services  is based on Web technology such as HTTP using XML for exchanging parameters. Moreover, the same Web technology is used for communication between the basic services  and between the micro services  as well as for communication of these services  and  with each other. This standardized interface purely using Web technology allows an easy integration of new basic or micro services into the system and a complete delocalization of those basic and micro services without the need to introduce further network communication technology.","The transaction tax services  comprise and control a number of basic services . The content service  is the database containing the specific jurisdiction and rules for the various countries as well as the various tax rates and other information needed to comply with the country-specific requirements. The TT calculation service  provides the basic functionality of calculating the transaction tax for a specific transaction. The TT logging service  decides which transactions and which content of the transactions should be logged for further reporting, that is which kind of data are needed for further analysis, auditing or reporting. The TT compliance service  automatically processes the logged information in a way which is suitable for a consecutive auditing. The TT filing service  finally is able to automatically fill out the appropriate tax forms and reports and file it electronically to the appropriate tax authority.","In the preferred embodiments these basic services  make use of many other micro services  such as a service  for managing the data base access, a micro service  for mapping the data between the data models and formats of the different applications, a micro service  for determining the specific jurisdiction, a micro service  for retrieving the correct tax rate for a specific transaction, a micro service  for carrying out elementary tax related calculations, or a micro service  for auto-completing incomplete data sets.",{"@attributes":{"id":"p-0056","num":"0056"},"figref":"FIG. 2","b":"20"},"In the example shown in , a client  located in Asia requests the transaction tax service  in Europe via the Internet. This TT service  controls the required process by calling other basic services such as the calculation service , the content service  and the filing service  which are located in different countries. Due to the Web-based technology of the communication between the services, the geographical proximity of the services is no longer necessary. Thus, the location of the filing service is located in the country of the appropriate tax authority, the location of the calculation service is chosen according to other criteria like the cheapest hardware infrastructure or the location of a third party provider, while the various content services  are distributed geographically across various countries according to the location of the experts in the different countries.","In  the principal process of a transaction tax calculation of the preferred embodiments is schematically depicted. Not all basic services are executed for any calculation request as the exact process varies depending on the specific calculation request . The definition of a specific process and the control of the order of execution of the various services and their communication with each other is performed by the process and communication layer  of .","In the preferred embodiments a calculation request , e.g. from an external business application, initiates the transaction tax calculation. The calculation service  then calculates the transaction tax on the basis of the parameters received from the calculation request . For this purpose, the calculation service  demands data from the content service , and in particular from its component  containing rules and rates and its component  containing the master data. The master data  is a centralized data base containing for example company information of a registered client, i.e. the company for which the transaction tax is calculated. Such company information for example can be the legal structure of the company which influences the type of tax calculation.","In the preferred embodiments, the content services  basically has the function of an interface used by tax experts for inputting, defining and maintaining the taxation rules and rates, as well as the logging and filing requirements. In particular, the components , , ,  and  represent not only rules, data and templates, but also configuration interfaces which enable the user to input and configure these rules, data and templates.","For the parameter transfer between a calling business application and the transaction tax processing system a standardized interface data model called a tax object (T-object) is used. This standardized tax object allows a flexible link of different business applications to the transaction tax processing system. In one preferred embodiment, the same data model (T-object) is used for the internal data exchange yielding a high degree of modularization and flexibility for the integration of new modules in the existing system. In addition, in the preferred embodiments the rules requested for a specific transaction tax calculation are transmitted from the content service  to the calculation service  via an additional meta data model.","In the preferred embodiment according to , the calculation service  passes its results to the logging service  via a Web-based standardized interface using the T-object data model. The logging service  is able to retrieve logging requirements  from a specific section of the content service . This service allows the user to define what kind of transactions are to be logged and what data elements are needed as well as automatically recognizing the transactions which have to be logged. The logging requirements reflects tax jurisdictional requirements as well as special regulations of a certain client. They are defined in the form of rules. Thus, the logging service  automatically determines the content which has to be logged and writes the result to the data warehouse . In the preferred embodiments, also data from other tax calculation engines and history data  can be loaded to the logging service .","Like the other communication connections between the basic services and micro services, the interface between the logging service and the data warehouse is realized in XML on a HTTP connection. While the exchange and transfer of internal data within the transaction taxation service and possible to external business applications is based on the T-object data model, the content of the data warehouse  is stored using a different data model, a so-called data warehouse data model. Usually, the requirements for these two data models differ for various reasons, for example because of legal or auditor's requirements, internal software specific requirements or requirements of other external business applications that work together with these data models. Therefore, these two data models do not have to be necessarily identical. Either some data elements of the data warehouse data model may not be part of the T-object data model, or vice versa. Additionally, the data warehouse data model may be a subset of the T-object data model, or vice versa.","The logging service  additionally ensures that the logged data satisfy the local authority's needs. Furthermore, the calling business applications no longer need to know which transactions have to be logged e.g. for the auditor's report or for which transactions a transaction tax calculation has to be performed, as this is automatically recognized by the logging service. The logging service thus guarantees the availability of all transaction data needed for compliance reporting and tax filing also in the case that the transaction tax has not been calculated within the transaction tax processing system but by an external transaction calculation engine. If data to be logged are incomplete, the logging service can use the auto-completion micro service  to ensure that the logged data are complete.","The data warehouse  represents the database for the compliance reporting and filing service , .","The compliance service  retrieves the report content from section  of the content service  and produces the compliance report for the auditors. If information is missing for the auditor's report, the compliance service  can call the auto-completion micro service  to complete such missing information automatically in the preferred embodiments.","Similar to the compliance service , the filing service  relies on the transaction data from the data warehouse  to fill out the specific tax filing forms required for a certain transaction. As for the compliance reporting, the filing service  is able to complete missing information automatically using the auto-completion micro service  in the preferred embodiments. The necessary tax filing form templates  are defined and stored in the content service  and serve as a database for the filing service . Based on meta data from the content service , the filing service  determines what transactions need to be filed and creates the respective information needed for the filing. The completed tax forms can then be filed electronically or as hard copy with the local tax authority according to the respective governmental requirements which are as well retrieved from the content service .","In the preferred embodiments, an auditors service  is provided which retrieves via a Web-based connection technology information from the compliance report and transaction data from the data warehouse  in order to provide information for the auditing.","The data analysis interface  provides an access to the central transaction database contained in the data warehouse  for other internal or external tools. Such tools may be data mining or other analysis tools for business relevant formation. It can also be used for tax optimization purposes for example by simulating required transaction taxes for a special supply chain scenario.","In and , a concrete example for a transaction tax calculation according to the preferred embodiments is given. This example is a simplified representation of a specific transaction tax service. Usually, a transaction tax service comprises additional and more complex micro services which have been omitted here for the sake comprehensibility.","Assuming that a third party orders a book for the price of 40 Euros via the Amazon Web page  and pays the price of the book by credit card transmission. In response to this selling event, Amazon requests a transaction tax calculation  by a transaction taxation service  demanding the calculation of the tax for this specific transaction using the HTTP request . The data related to this specific transaction are passed to the transaction taxation service  using XML. In this Web-based technology, a list of parameters  for this specific transaction of selling a book comprising for example the parameters invoice number, country, price, product and requested kind of service is transferred encoded in XML to the TT service  via a HTTP POST request. For each parameter a XML tag is defined containing the corresponding parameter value.","In this specific case the first micro service called by the TT service  is the \u201cdata mapping\u201d  as shown in . The micro service \u201cdata mapping\u201d  implements the interface between the XML parameter list and the T-object, which is the standardized data model of the TT service  by converting in step , the Amazon parameter list into the data elements of the T-object. During this mapping it might occur that there is no one-to-one mapping between both parameter sets so that some logic has to be applied in order to fill those data elements of the T-object which have no direct counterpart. For example, the Amazon parameter product carrying the value \u201cbook\u201d is mapped to a data element \u201cproduct_name\u201d and \u201cproduct_category\u201d of the T-object. The data element \u201cproduct_category\u201d may for example serve to distinguish between consumer goods or capital goods.","The following basic service \u201cTT calculation\u201d  called by the TT service  is composed of several micro services , ,  and . First, the TT calculation  needs to define the appropriate jurisdiction to be applied using the corresponding micro service  to which the necessary parameters are passed via the T-object data model using the Web-based technology XML. The content service  provides the rules in the form of an additional meta data model for the determination of the specific jurisdiction to be applied. The \u201cjurisdiction\u201d micro service  in this case in which the \u201cship_from\u201d parameter is \u201cDE\u201d (which stands for Germany) and the \u201cproduct_category\u201d is \u201cconsumer goods\u201d determines the appropriate jurisdiction to be Germany coded as \u201cDE\u201d and the tax rate type to be \u201creduced\u201d which are the output parameter of this specific micro service .","The micro-service \u201ctax rate\u201d  retrieves the specific tax rate for this case from the content service  using an additional meta data model in which the data are also transferred using Web-based technology and XML. Finally, the micro service \u201ccalculation\u201d  performs the concrete calculation of the required tax for this transaction based on the T-object data elements \u201cnet_price\u201d and \u201ctax_rate\u201d. The output parameter of this micro service , the tax amount, is then returned to the TT service  using the \u201creturn\u201d micro-service  again by using XML for the data transfer.","As in this special example the requested TT services from Amazon are a transaction tax calculation and a logging service; the basic service \u201cTT logging\u201d  is called next from the TT service . Again by using XML and handling the data over to the micro services  and  in the form of the T-object, the micro-service \u201clog data determination\u201d  determines what data have to be logged for this specific transaction. Based on the T-object element \u201cship_from\u201d, the micro service  returns in this example the net price, the absolute tax and the invoice number to be the data elements which have to be logged. Using yet another micro service \u201cWrite DB\u201d , the determined logging data are written to the data warehouse .","Referring to -, -, and , more details are provided of the specific interface linking external applications to the basic and micro services as described in the above figures as well as linking the these services with each other. As mentioned above, an external application might use a basic or a micro service, for example the TT calculation service , or one basic or micro service might use another one. Proper communication between the invoking application or service and the invoked service will be ensured by the corresponding interface which has to furnish all the data required, on the one hand, for establishing a communication between the invoking service\/application and the invoked service and, on the other hand, for enabling the invoked service to perform its proper function.","Reference is made to the above Amazon example given in conjunction with and . As already mentioned therewith, the interface (realized inter alia by the data mapping micro service ) is used for mapping the parameters delivered in the Amazon request into the data format and model internally used by the TT calculation system . If numerous different external applications all having different output parameters (data elements \u201cnet price\u201d, \u201ctax rate\u201d, etc.) used the basic and micro services, a corresponding number of different data mapping micro services would have to be invoked by the TT calculation service  for proper communication with these applications. This, however would imply a considerable data mapping effort at the TT calculation service side.","Hence, according to a preferred embodiment of the invention, the data model used for communication between external applications and basic and micro services as well as between different basic and micro services (it should be noted that some basic or micro services may be externally provided and might possibly use a different data model than the internally provided basic and micro services) is standardized. It will hereinafter be referred to as tax object. The use of a standardized data model advantageously eliminates the need for complicated interface structures since now each interface only needs to implement a data mapping of the internally used data model to the standardized data model and vice versa. In other words, each service only receives data implemented in the standardized data model object irrespective of the application sending these data and, in turn, delivers only data in the standardized data model to any other application\/service.","Returning to the specific model depicted in , any external application invoking sequentially or in parallel several of the basic or micro services, for example first of all the TT calculation service , then the TT logging service  and finally the TT filing service , needs only one mapping module at the application side for mapping its application-specific data elements to the respective data elements in the standardized data model irrespective of the specific invoked basic service. Moreover, if the respective invoked service internally uses the standardized data model no further mapping will be required at the service side. In practice, however, it might be further necessary to transmit some additional data not yet provided in the standardized data model, for example for controlling the communication between the invoking and the invoked application\/service. This will often be the case for the different basic and micro services described with regard to  when communicating with each other. In view of the numerous communications in the overall set of links between external applications and internal services a data model comprising data in the standardized data model as well as individual data will be preferred wherein the individual data are necessary for the particular communication between a particular pair of applications\/services. These individual data might consequently require an individual mapping at the interfaces on the application and the service side. An overall standardized data model also covering all these individual data elements seems to be less preferred since, depending on the way data is exchanged, the transfer of a large amount of data may be required.","In a preferred embodiment, the interface at the service side might comprise a mapping module , as shown in , realized in the form of a micro-service within the structure of the TT services . This mapping module  will be invoked by the process and communication layer  of the TT services  upon receipt of a tax calculation request (or any other request, calling one of the basic or micro-services) wherein such an external request comprises the application-specific data elements. The mapping module then serves to convert the application-specific data elements into the standardized data model which will be used by most or all of the basic or micro services invoked by the process and communication layer  in connection with the particular external request, for example the external tax calculation request. As described with regard to the TT services  to  as shown in  most of the basic services invoke a couple of micro services. Hence, the communication between these micro services and the invoking basic service uses the standardized data model advantageously omitting further mapping procedures.","In another preferred embodiment, the mapping of the application-specific data elements into the standardized data model might alternatively take place at the external application interface advantageously pre-empting the need to invoke the data mapping  at the TT services side. Naturally, even in the latter case such a data mapping  at the TT services side will be required if any one of the micro or basic services internally uses a different data model. In this case, the data mapping  comprises a mapping from the standardized data model into the internally used data model and vice versa when invoking this particular micro or basic service.","A preferred embodiment for an interface structure will now be described with respect to -wherein one part of the interface is implemented at the TT services side  and the other part is implemented in the form of an external interface at the application side.",{"@attributes":{"id":"p-0083","num":"0083"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"i":["a ","a","b","b "],"b":["20","500","502","504","506","508","24","24","510"]},"As can be seen from , the communication between the business application  and the TT calculation service  is performed via a transaction tax standardized interface  using a standardized data model, namely the tax object (see below). The interface  requires a data mapping  and a processing\/communication  on the business application side and a data mapping  and processing\/communication  at the TT calculation service side (for example performed inter alia by the data mapping micro service ).","The interface processing  and  on either side provides error handling (checking for erroneously transmitted or missing data, interface errors, tax engine errors, etc.), a specific calculation request handling (a credit\/return, reference to former invoice, etc.), transaction type (sale, purchase), exemption processing, audit file processing, number of records, exemption certificate determination, document summary, etc.) and a special processing (line item\/end of invoice, etc.). The particular data mappings  and  will be discussed in detail with reference to -below.",{"@attributes":{"id":"p-0086","num":"0086"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"i":["c ","b ","b"],"b":["512","500","24","24","508","522","524","526","24","24","500","528","530","510","532"]},"Reference is now made to illustrating the steps shown in in more detail. Similar reference numbers in and designate similar method steps. As can be seen from , the mapping step  performed at the business application side comprises a step  for reading an output mapping definition, a step  for deriving source information based on the read mapping definition, a step  of mapping the source information to the tax object and a step  for configuring the mapping definition and delivering the same to step  upon request. The data transfer step  comprises a step  for calling the TT calculation service  (performed for example via the HTTP protocol) and a step  for retrieving the tax object and the calculation request. The mapping step  comprises reading an input mapping definition from a mapping configuration routine , and a step  of mapping the tax object to the target information. The target information is then delivered to the TT calculation service  which returns the calculated tax rate. The returned tax rate is mapped to the target object in step . Thereby, step  comprises the step  of reading an output mapping definition which is again delivered from the mapping configuration routine  and a step  of mapping the target information (the calculated tax rate received from the TT calculation service ) to the tax object. The tax object is then transferred in step  to the business application  which comprises a step  of sending the tax object as a calculation result on the TT services side  and a step  of retrieving the tax object and the calculation result on the business application side. Besides, the mapping steps  and  may be omitted if the TT calculation service  uses the standardized data model as internal data model. In this case a simple conversion of the tax object in form of a Web-transferable document (specific object in an HTTP request, etc.) into machine-readable program code will be required. However, in this case it might be further required to merely convert technical data elements used for the technical implementation of the interface which can be done in steps , ,  and . These technical data elements preferably do not form part of the tax object. The retrieved tax object is transmitted to the mapping step  which comprises a step  of reading an input mapping definition delivered from the mapping configuration routine , a step  of mapping the tax object to the source information and a step  of deriving a source information based on the mapping definition. The result of step , namely parameters or a set of parameters understandable by the business application  is then transferred to step  shown in and used for further calculations within the business application .","In steps  and , the set of mapping rules might be preferably implemented in the form of two tables, the first one containing header data and the second one containing item data. A rule consists of a header table record and n item table records, wherein n is equal to 1 or an integer greater than one. The two tables might be accessible by a transaction in order to externally configure the rules within these tables (rule definitions might be created via a transaction table maintenance). In other words, the rules are configurable by external access. A rule definition will be entered into the rule header and the rule item table in form of records having the structure as shown in the following diagram:",{"@attributes":{"id":"p-0089","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Rule Header Table",{},"Rule Item Table"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Rule No","\u2192","Rule No"]},{"entry":[{},"Rule Type",{},"Pos No"]},{"entry":[{},"Dst Field",{},"Src Table"]},{"entry":[{},"Dst Offset",{},"Src Field"]},{"entry":[{},"Dest Length",{},"Src Offset"]},{"entry":[{},"Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"wherein corresponding records in the rule header and the rule item table which establish a specific rule (as indicated by the arrow in the above table) are defined via identical entries in the \u201cRule No\u201d field (several records in the rule item table might have the same rule number meaning that they form a complex rule). Hereby, the \u201cRule Type\u201d field indicates the particular mapping type selected from the group consisting of static mapping (S), constant mapping (C) and dynamic value lookup (D) (see below). The \u201cDst Field\u201d field designates the particular destination field. The \u201cDst Offset\u201d field designates an offset of the destination field, the\u201cDst length\u201d field a length of the destination field and the \u201cDescription\u201d field enables the user to enter a particular comment to the underlying rule (only optionally provided). The \u201cPos No\u201d field in the rule item table is a counter for the record number in the rule item table belonging to a single rule (a record in the rule header table having a specific rule number might correspond to several records in the rule item table having the same rule number). The \u201cSrc Table\u201d and \u201cSrc Field\u201d fields define a source table and a source field, respectively. The \u201cSrc Offset\u201d field designates an offset of the source field.","A first preferred mapping type, the so called static mapping, comprises assigning the value of a certain source field to a certain destination field.","A further preferred mapping type, the so called constant mapping, comprises assigning a fixed value to a certain field in the destination structure.","Another preferred mapping type for complex mapping situations, the so called dynamic mapping, comprises assigning the mapping result of a mapping function to the destination field wherein the mapping function is based on rules and is given in the form:\n\n","Thereby, the values of the source fields \u201csource_field1\u201d, \u201csource_field2\u201d, etc. are the input parameters of a specific mapping function which outputs its mapping result to the field \u201cdestination_field\u201d.","In a preferred embodiment of the present invention, the mapping function is defined via a lookup table (together with the two above mentioned tables) having as its contents the source information of the different source fields and the corresponding mapping result, for each rule. More particularly, the lookup table preferably contains generic keys for each rule. The generic keys are formed by concatenating the contents of all source fields of a rule. For each rule, the lookup table contains an entry for a generic key and a corresponding mapping result. Hence, the mapping result for the generated generic key is read from the lookup table and moved to the destination field of the rule (as indicated by the corresponding record in the header data table, cp. above).","It will be appreciated that the static and constant mapping via the specific tables as described above and the dynamic mapping via the specific lookup table as described above is only one possibility for implementing mapping rules within the mapping configuration routines  and . Another very intuitive implementation for these routines consists of establishing rules via a user definable rule definition interpreter. Those rules may be defined in a particular rule based language (for example Jnana\u2122, Lisp, Prolog, etc.) which provides for a very intuitive user\/machine-interface. Entering such rules into the mapping configuration routines  and  demands merely knowledge about the underlying business model but not of the underlying program structure. Thus, these rules might be entered by a user with business skills only. The rule based language generally comprises an interface allowing access to external access data (defined as source fields within the rules) and allowing deliverance of external output data (defined as destination fields). The rules are entered in terms of the rule based language wherein the user with business skills needs only to know the sets of access and output data for entering the rules connecting a set of output data with a set of access data.",{"@attributes":{"id":"p-0097","num":"0098"},"figref":"FIG. 5","i":"e ","b":["500","20","570","204","500","572","574","576","578","580","582","24","570","584","204","590","24","204","582","584","28","204","206"]},"According to a preferred embodiment of the invention, the structure of the tax object transferred between the business application and the TT services , between external business applications or between different basic and micro services will now be described with respect to -. -show three tables \u201cInbound Elements\u201d, \u201cOutbound Elements\u201d and \u201cFurther processing elements\u201d dividing the different data elements of the tax object into inbound elements (data elements which will be passed to a TT service  from an external application or an internal TT service ), outbound elements (data elements which are created, calculated or changed by the TT calculation service ) and further processing elements, respectively (data elements which drive special processing either within the invoking application or within the TT service ). In all three tables shown in -, the data elements are listed in a sequential order as indicated in the first column \u201cField No.\u201d (in practice, the tax object might not necessarily be sent with the data elements in the given order but may be sent as a XML document having the corresponding data element identifier). Each line of the tables contains a different data element (identified in the second column \u201cData element\u201d), wherein some data elements are divided into different sub data elements (identified in the third column \u201cSub Data element\u201d), for example in line  of the table inbound elements, the ship-from address data element is divided into the street, territory, province, country, city, postal code, state and country sub data elements.","Besides, the tax object is defined so as to provide data elements for at least two different jurisdictions. It has at least one data element which is used for one jurisdiction, but not for the other jurisdiction (for example, in line  of the table outbound elements the data element \u201cTax certificate applied\u201d is US-specific), and it has at least one other data element which is used for the other jurisdiction, but not for the first one (for example, in line  of the table inbound elements the data element \u201cDestination code\u201d is EU-specific).","Furthermore, the tables describe in its fourth column \u201cType\u201d the specific data element type for each data element, for example in line  the postal code is labeled as a character with five elements. The tables further show a more detailed description for each data element in their fifth columns \u201cDescription\u201d. The table \u201cInbound Data elements\u201d further indicates in its sixth column \u201cRequired\u201d whether the corresponding data element must be transmitted within the tax object when invoking the TT calculation service  (there may be different required data elements when invoking other TT services , i.e. the column \u201cRequired\u201d deals only with the particular invocation of the TT calculation service ). In particular, the data elements \u201ccompany-ID\u201d, \u201cship-from address\u201d and \u201cdestination\/ship-to address\u201d are the only three data elements which must be transmitted within a tax object to the TT calculation service . All other data elements might be supplemented according to the special request of a TT service  to . For example, when the TT calculation service  is invoked by the business application  as shown in , besides the three required data elements, the data element \u201cline item amount\u201d (in line  of the table inbound elements) is transmitted within the tax object. Naturally, the transmitted tax object only contains the values of the different data elements, possibly supplemented with the corresponding data element identifier. When implementing the tax object in the form of an XML document further data elements, not yet shown in -, can be easily defined for any future enhancement requirements (further processing logic, etc.).","For example, the tax amount calculated by the TT calculation service  is returned within the tax object as the data element \u201cCalculated tax amount\u201d (field number  of the table \u201cOutbound Data elements\u201d) to the business application . Implementing the tax object in a flexible data model, for example XML, eliminates the need to transmit all data elements (inbound, outbound and further processing elements) when transmitting a particular tax object (which would involve the transmission of roughly 230 data elements each time, most of which are deactivated). Therefore a particular transmitted data record may contain only data items complying with one jurisdiction, although the interface data model comprises data elements complying with various different jurisdictions, e.g. in different countries.","Hereinafter, a simplified example is given for an external business application invoking a TT calculation service  for tax calculation and will be described in more detail on the basis of the required mapping of the application specific data model to the standardized tax object.","For example, the external SAP business application invokes in step  of the TT calculation services  which triggers an application subroutine creating a SAP export data record COM_TAX commonly used by the SAP business application for exporting data. The export data record might in this example consist of the data fields \u201cprices_netprice\u201d and \u201ccustomer_ship from address\u201d. Hereby, the indicator preceding the \u201c_\u201d indicates the source address (for example a table name, etc.) whereas the indicator succeeding the \u201c_\u201d indicates the field name. It is assumed that when creating this export data record the data fields \u201cnet price\u201d and \u201cship from address\u201d are filled with the particular data values \u201c500\u201d and \u201cDE\u201d, respectively. The export data record COM_TAX is transmitted to the mapping routine  of the interface module at the SAP business application side.","The mapping routine  requests in its step  the mapping configuration routine  for delivery of the set of configurable mapping rules which correspond to this particular external tax calculation invocation. In the specific example, the mapping rules might consist of a static, a constant and a dynamic mapping.","The static mapping might concern the mapping of the field \u201cnetprice\u201d in the table \u201cprices\u201d to the field \u201cline item amount\u201d (as indicated in  in line ) of the tax object. The following rule creates such a mapping:",{"@attributes":{"id":"p-0106","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Rule Header Table",{},"Rule Item Table"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Rule No: 0001","\u2192","Rule No: 0001"]},{"entry":[{},"Rule Type: S",{},"Pos No: 01"]},{"entry":[{},"Dst Field: line item amount",{},"Src Table: prices"]},{"entry":[{},"Dst Offset: 0",{},"Src Field: netprice"]},{"entry":[{},"Dest Length: 10",{},"Src Offset: 0"]},{"entry":[{},"Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The rule No. 1 contains the entry \u201cprices\u201d in the source table field and the entry \u201cnetprice\u201d in the source field (both mentioned entries are entered into the rule item table) and the entry \u201cline item amount\u201d in the destination field (this entry is entered into the rule header table). Furthermore, the value of the field \u201cPos No\u201d of the rule item table is set to 1 since there is a static mapping (cp. entry \u201cS\u201d in \u201cRule Type\u201d field of the rule header table) of the value of exactly one field in the source structure to exactly one field of the destination structure.","Similarly, a rule for a static mapping of the \u201ccustomer_ship from address\u201d to the destination field \u201cship-from address_country\u201d (as indicated in  in line  of the tax object, wherein the mentioned field consists of a data element field \u201cship-from address\u201d and a sub data element field \u201ccountry\u201d both together forming the destination field) has the following form:",{"@attributes":{"id":"p-0109","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Rule Header Table",{},"Rule Item Table"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Rule No: 0002","\u2192","Rule No: 0002"]},{"entry":[{},"Rule Type: S",{},"Pos No: 01"]},{"entry":[{},"Dst Field:",{},"Src Table:"]},{"entry":[{},"ship-from address_country",{},"customer"]},{"entry":[{},"Dst Offset: 0",{},"Src Field: ship from address"]},{"entry":[{},"Dest Length: 2",{},"Src Offset: 0"]},{"entry":[{},"Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"As an example for a constant mapping, the tax object might comprise a data field \u201cversion no\u201d (provided in the reserved space table) which identifies the particular program version of the calling SAP business application. The corresponding constant rule has the following structure:",{"@attributes":{"id":"p-0111","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Rule Header Table",{},"Rule Item Table"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Rule No: 0003","\u2192","Rule No: 0003"]},{"entry":[{},"Rule Type: C",{},"Pos No: 01"]},{"entry":[{},"Dst Field: version no",{},"Src Table:"]},{"entry":[{},"Dst Offset: 0",{},"Src Field: v4.01.A"]},{"entry":[{},"Dest Length: 5",{},"Src Offset: 0"]},{"entry":[{},"Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"As a result, the fixed value \u201cv4.01.A\u201d will be assigned to the destination field \u201cversion no\u201d.","As an example for the dynamic mapping (which allows processing of the information from several source fields and mapping of the result to a particular destination field) the destination field \u201ccurrency\u201d of the tax object (cp. , line ) will be considered. For example, in the country \u201cGermany\u201d the currency will be changed from \u201cDM\u201d to \u201cEuro\u201d at the end of year 2001 which means that the year of the transaction date is an indicator for the currency, i.e. the years . . . , \u201c2000\u201d, \u201c2001\u201d indicate the currency \u201cDM\u201d whereas the years \u201c2002\u201d, \u201c2003\u201d, . . . indicate the currency \u201cEuro\u201d for Germany. A corresponding dynamic mapping will have the following form:",{"@attributes":{"id":"p-0114","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Rule Header Table",{},"Rule Item Table"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Rule No: 0004","\u2192","Rule No: 0004"]},{"entry":[{},"Rule Type: D",{},"Pos No: 01"]},{"entry":[{},"Dst Field: currency",{},"Src Table: customer"]},{"entry":[{},"Dst Offset: 0",{},"Src Field: ship from address"]},{"entry":[{},"Dest Length: 4",{},"Src Offset: 0"]},{"entry":[{},"Description",{},{}]},{"entry":[{},{},{},"Rule No: 0004"]},{"entry":[{},{},{},"Pos No: 02"]},{"entry":[{},{},{},"Src Table: date"]},{"entry":[{},{},{},"Src Field: year"]},{"entry":[{},{},{},"Src Offset: 0"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"This rule contains one record in the rule header table and two records in the rule item table as indicated by the \u201cPos No\u201d field counting the number of records of a single rule in the rule item table. The information is taken from the source tables \u201ccustomer\u201d and \u201cdate\u201d and the respective fields \u201cship from address\u201d and \u201cyear\u201d whereas the mapping result is written into the destination field \u201ccurrency\u201d. The table \u201cdate\u201d with its source field \u201cyear\u201d might not be part of the export data record COM_TAX and should therefore be directly accessed from SAP internal tables which are not transmitted to the mapping routine .","In the particular example given above, the lookup table will have the following entries:",{"@attributes":{"id":"p-0117","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Lookup Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Rule","Key","Result"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},". . .",". . .",". . ."]},{"entry":[{},"0004","DE2000","DM"]},{"entry":[{},"0004","DE2001","DM"]},{"entry":[{},"0004","DE2002","Euro"]},{"entry":[{},"0004","DE2003","Euro"]},{"entry":[{},". . .",". . .",". . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Thus, when reading the values \u201cDE\u201d and \u201c2001\u201d from the source fields \u201cship from address\u201d and \u201cyear\u201d in step , concatenating these values will give the result \u201cDE2001\u201d. This result forms a generic key such as the ones listed in the lookup table in the middle column. The corresponding mapping result \u201cDM\u201d is then read from the right column in the lookup table and moved to the destination field \u201ccurrency\u201d in step .","A configuration of the rule might be performed by external access to the lookup table and changes to its content, for example by accessing the lookup table responsive to the external tax calculation call and by changing its line \u201c0004|DE2002|Euro\u201d into \u201c0004|DE2002|DM\u201d (if the introduction of the currency \u201cEuro\u201d is postponed to year \u201c2003\u201d in Germany). This configuration may be accessible via a transaction call \u201cChange mapping configuration SAP-Tax Object\u201d giving access to the mapping configuration routine  and allowing changing of the corresponding rules. The advantage of user configurable mapping rules over hard coded mapping rules lies in the easy handling of changes to these rules (as can be seen from the above example) since the user only has to deal with these rules on a business level rather than on the machine level which requires skilled programming knowledge.","When defining the rules via the mentioned rule interpreter, the user enters a list of rules which define the data mapping from the SAP export data model COM_TAX into the data model of the tax object. As the tax object has the specific well-defined data elements \u201cship-from address_country\u201d, \u201cversion no\u201d and \u201ccurrency\u201d the user has for example to deal with the following questions concerning these data elements:\n\n","In step , the destination data are brought in the particular data model language used for the transmission, for example XML. A corresponding XML document for the above example will have the following form (and might be transmitted in the body of an HTTP request):",{"@attributes":{"id":"p-0122","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<tax object>"]},{"entry":[{},"\u2003\u2003<inbound elements>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<ship from address>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<country>DE<\/country>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<line item amount>500<\/line item amount>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<currency>DM<\/currency>"]},{"entry":[{},"\u2003\u2003<\/inbound elements>"]},{"entry":[{},"\u2003\u2003<reserved space>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<version no>v4.01.A<\/version no>"]},{"entry":[{},"\u2003\u2003<\/reserved space>"]},{"entry":[{},"<\/tax object>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the above presentation control commands including possible error messages and the like are omitted which, however, may be part of the tax object. These commands may be entered into the tax object and removed from the same in steps  and , respectively, where they are used for transmission control.","When the TT calculation service  has the same data model as the tax object, the mapping routine  in is reduced to a simple conversion of the XML document into a program understandable code (e.g., C code, etc.).","The advantages of the standardized data model used for the transmission of business and control data elements can be easily seen from the above description of the simplified example. A programmer working with a particular program module (either the external SAP business application or the TT calculation service ) needs only to know the particular data model of the program module he is working with and the data model of the standardized tax object but not the data model of the other program module. Consequently, he only needs to configure mapping rules (e.g. in steps  or ) for mapping the data model of his program module to the one of the standardized tax object, and vice versa.","The TT logging service  shown in  will now be described in more detail. \u201cLogging\u201d means storing of transaction-tax-related transaction data. In most jurisdictions it is required that transaction data of tax-relevant transactions are recorded on transaction-by-transaction basis. Furthermore, companies have often their own interests in recording tax-relevant transaction data for business-management analysis purposes. Recording of transaction data in a way which fulfills at least the minimum requirements of the tax laws in a certain jurisdiction enables a \u201ctransaction tax compliance reporting\u201d (for that particular jurisdiction). The logged transactions form the basis for the tax filing, i.e. the calculation of the amount of transaction tax to be paid to the tax authorities and preparation of the corresponding tax declaration which has to be made in certain time intervals, for example monthly. The logged transaction data are also used for transaction-tax review by official and internal auditors. Logged transactions may be trade invoices, general ledger (G\/L) bookings (i.e. bookings in a company's general account book which appear when a payment has been received or made), etc. In most jurisdictions, it is not required to log every transaction-tax-related transaction for compliance reporting. For example, transactions with provisional character, such as offers or orders, need not be logged. The requirements as to which transactions have to be logged differ from jurisdiction to jurisdiction. They may even be different for different types of legal entities, for example corporations and partnerships. The definition of which transactions have to be logged may also be company-dependent since individual companies may wish to carry out a more comprehensive reporting than the minimum-required compliance reporting.","Also the definition of what data of a transition have to be logged differs from jurisdiction to jurisdiction and may depend on the company's legal type. For example, within Europe, Spain requires a more comprehensive recording of transaction data than Germany. Again, individual companies may wish to log more detailed transaction data than the minimum requirement of compliance reporting, so that the definition of what transaction data have to be logged may be company-dependent. The TT logging service  of  enables such a variable kind of logging.","The TT logging service  is a software component which can be invoked independently of other basic services , in particular independently of the TT calculation service . This enables the use of different transaction tax calculation applications to the TT calculation service  (for example, the use of external tax calculation provided by external service providers) without affecting the TT logging service . Furthermore, it enables stored data, such as stored history or legacy data  generated by non-integrated tax calculation engines, to be loaded directly to the TT logging service , as is indicated by an arrow in . In contrast, in the known transition tax program products, the recording of transactions is intimately linked with the tax calculation, so that only those transactions which have previously been passed through for the program's tax calculation are recorded.","The TT logging service  is invoked by an HTTP request from the process and communication layer  together with an argument comprising transaction-related data, for example in the form of an XML document forming the body of the HTTP request. The transaction-related data elements of the argument are preferably identical with the transaction tax object or are a subset of the transaction tax object described in connection with -.","The rules defining which transactions and what transaction data are to be logged (called \u201clog rules\u201d) are contained in the content service  in a form configurable by the user in a filing rules and templates configuration interface . The content service  is shared between different basic services , and therefore also contains rules and \u201cmeta data\u201d for the other basic services , as shown in . In other embodiments (not shown), the content service is modular, the TT logging service then has a special log rule management service. When the TT logging service  is invoked it fetches all, or a subset of, the log rules and evaluates them with the data of the transaction for which it has been invoked. In the case in which only a subset is fetched, it is composed of those log rules which may be relevant for the decision whether the transaction has to be logged and what transaction data are to be logged. For example, in a transaction in which a good is shipped from Germany by a German seller, the subset of rules fetched from the content service  comprises all the log rules which relate to Germany.","The log definition is not hard-coded in the content service or the logging service application. Rather, the log rules can be input and modified by the user in a log rule configuration interface  which is part of the content service . The log rules can be entered by the user online in the form of a script language. After having fetched the script language log rules, the TT logging service  interprets them and processes the log request accordingly.","The TT logging service  has an auto-recognition functionality: it can decide itself whether a transaction is to be logged, and, if applicable, what data of the transaction are to be logged, by evaluating the log rules with data of the present transaction received together with the HTTP request which has invoked the TT logging service . Therefore, no previously invoked component (for example, the calculation service ) needs to decide whether the present transaction is to be logged or not (if such a decision were taken by a previous component, the logging service could only be invoked when logging is required). Rather, since the TT logging service  takes this decision itself, it can be invoked for every event (i.e. for every transaction) without any parameter representing a log requirement. As a consequence, any application generating transactions can be used together with the TT logging service  without having to take care itself whether transactions have to be logged. This auto-recognition functionality enhances the modularity of the whole transition tax application since it enables the log requirement information to be concentrated in the content service  and the logging service  and the other services can be kept free of it.","The following table illustrates in a simplified way the log requirement rules for two different jurisdictions (\u201ccountries\u201d) and three different transaction types:",{"@attributes":{"id":"p-0134","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"country X","country Y"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"order","no logging required","no logging required"]},{"entry":[{},"invoice","logging required","logging required"]},{"entry":[{},"payment","no logging required","logging required"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"When the TT logging service  is invoked with the data of a transaction as parameters, it evaluates the log requirement rules with the parameter data. If, in the above-mentioned example, the country of a transaction is \u201cX\u201d, and the transaction type is \u201corder\u201d or \u201cpayment\u201d, no logging is performed. If, in contrast, the country is \u201cX\u201d and the transaction type is \u201cinvoice\u201d, logging is performed, based on further rules which define what transaction data have to be logged for the present transaction. For example, for a certain country with low logging requirements, only the invoice number, net price and tax of the transaction are logged. In a country with more comprehensive logging requirements, further transaction data, such as the buyer registration number, the product description, the tax rate applied, etc. are logged. If the country of origin is \u201cY\u201d logging is also performed for the transaction type \u201cpayment\u201d, in the above example.",{"@attributes":{"id":"p-0136","num":"0141"},"figref":["FIG. 7","FIGS. 1 and 3"],"b":["26","602","26","604","22","606","608","610","26","606","612","614","616","204","618","620","26","602"]},"In other preferred embodiments (not shown), the function of the TT logging service is extended so that it also may pre-select transactions which require a transaction tax calculation. In order to carry out such a pre-selection, the logging service is then invoked before the invocation of the TT calculation service for the first time. In these embodiments, it fetches and evaluates rules which indicate whether a transaction tax calculation is required for a given transaction, sets a corresponding flag and returns the transaction data together with this flag. Depending on the existence or absence of this flag, the process and communication layer  will then invoke the TT calculation service or will skip it. The logging service can be invoked a second time in order to perform the actual logging process, as was described above.","By using the described logging service it is ensured that the logged data are in compliance with the requirements of the pertinent jurisdiction. One and the same logging service can be used for the different jurisdictions of interest. The \u201ccontent\u201d, i.e. the rules reflecting the logging requirements of the different jurisdictions can easily be configured by the user via a user interface, without the need to change hard-coded programs. The logging service can be invoked independently of other program components, such as transaction tax calculation components, and does not need logging-specific invocation parameters in order to perform the logging task. This enables the process layer to use independent services for TT calculation and TT logging. For example, an external service provider can be used for TT calculation, but the TT logging can be performed in-house by using the described TT logging service. Alternatively, a TT logging service of the described kind can be offered as an e-service over the Internet. Such a service will not require the customer to specify whether and how a logging has to be performed for a given transaction. Rather, this determination can be offered as a part of the e-service.","The TT filing service  of  enables automatic preparation and filing of transition tax declarations for different jurisdictions.","Conventionally, transactional data, mostly in aggregated form, is retrieved by various reports, which are consolidated manually. Tax declaration forms have to be obtained from the tax authorities and filled out manually, based on the results of the manual report consolidation. The preparation of tax declarations for different jurisdictions requires different ways of processing, and even changes of the official requirements in one jurisdiction may require changes in the processing. In contrast, the filing service  enables the tax declaration and filing to be carried out automatically. The processing is the same for different jurisdictions and remains unchanged when official requirements are changed. The filing service  is based on logged transaction data which have previously been generated by the logging service  or any other suitable logging application. Since the data of certain transactions (in particular booking transactions) may be incomplete, the auto-completion service  () is invoked preferably by the TT logging service  before logging the incomplete transaction data or after the logging step, but before the filing service  is invoked. The auto-completion service  completes such incomplete transaction data which enables the preparation of the tax declaration according to the tax compliance requirements without manual intervention.","A tax declaration normally represents an aggregation of transaction data, in particular the calculation of total numbers, such as the total amount of transition tax received in the declaration time period. In jurisdictions with value added tax, also the total amount of transition tax paid in the declaration time period as well as the difference between the received and paid amounts are calculated. Typically, the declaration has to be filed within short time intervals, for example monthly.","In order to initiate the filing process, the user has to input a corresponding request to the process and communication layer  () via a user interface. Together with the request, the user has to indicate for which country or jurisdiction the declaration shall be filed. In other, alternative embodiments, the tax filing process is initiated automatically when certain legal conditions are fulfilled, for example when the term of a tax declaration interval is reached, e.g. on the last day of each month. The process and communication layer  translates the user request or the automatically generated request into an HTTP request sent to the filing service . The request has an argument representing tax-filing-related information, such as the country or jurisdiction of the declaration to be prepared, the name of the company for which the declaration is to be prepared (if the automatic tax declaration filing is offered as a service for several companies); the time period which shall be covered by the tax declaration, etc. Moreover, process-related data, such as an identification of the user who has initiated the filing process, is transmitted as argument. The argument data can, for example, be in the form of an XML document forming the body of the HTTP request. However, any other suitable invocation and parameter transmittal mechanism may be used.","In  the filing service  is shown in more detail. It is composed of a request verification component , a tax filing determination component , a transaction data selection component , a report execution component , and a tax filing component . The incoming tax filing request from the process and communication layer  is first processed by the request verification component . It verifies that certain conditions are fulfilled, for example, that the user who has initiated the filing process is authorized to do so, that the specified country or jurisdiction is existent and is one of the countries\/jurisdictions which can be processed by the filing service , that the time interval for which the preparation of a tax report is requested is correct, etc. If the outcome of the request verification is negative, the tax filing process is either terminated (e.g. if the user is not authorized) or a message is sent to a message handler  asking for a confirmation by the user or another kind of user intervention (for example, if the tax declaration processing for the specified country and time interval has already been carried out, the user is asked to confirm that it should be repeated).","However, if the result of the request verification is positive, the tax filing determination component  is activated. Its task is to fetch report content rules and tax declaration templates for the country or jurisdiction for which the tax declaration shall be prepared from the content service . To this end, the tax filing determination component  sends a corresponding request to the content service  which, in turn, returns the requested rules and templates.","Then, the transaction data selection component  is activated. Its task is the selection of the transaction data records which are required for the preparation of the tax declaration on the basis of the original filing request and the rules received from the content service . More precisely, the transaction data selection component  has the actual selection carried out by the data warehouse . To this end, the selection component  translates the definition provided by the report content rules as to what transaction data are needed for the preparation of the present tax declaration into a corresponding Standard Query language (SQL) data retrieval command. This SQL command is sent to the data warehouse , which in turn processes it, i.e. selects transaction data records from the stored transaction data according to the SQL command and returns the selected transaction data to the transaction data selection component .","After or during the data selection process, the report execution component  is activated. It has mainly two tasks: Its first task is to consolidate the selected transaction data. Consolidation means determination of numbers characterizing the selected transaction data globally, for example the total number of transactions, the accumulated amount of transaction tax received, the accumulated amount of transaction tax paid, the difference of these two accumulated amounts, etc. The way in which the transaction data are to be consolidated is also defined in the report content rules fetched from the content service . The second task of the report execution component  is to enter the results of the transaction data consolidation into the corresponding fields of the text declaration template, which has also been received from the content service . The result is a finished tax declaration in compliance with the legal requirements of the jurisdiction in which the declaration is to be filed. In some jurisdictions, it may be required to present not only consolidated data, but also individual transaction data. For these jurisdictions, the report execution component  appends a data record for each transaction in the legally required format, which can also be defined by the report content rules fetched from the content service .","The result of the process carried out by the report execution component  is a finished tax declaration in electronic form. For jurisdictions which allow an electronic filing of transaction tax declarations, the tax filing component  is then activated. It prepares the electronic tax declaration for transmission over a network (e.g. by encrypting it), opens a network connection to the tax authority's receiving server and dispatches the tax declaration prepared in such way to the tax authority's receiving server. The network used for this dispatch may be the Internet or, for example, a telecommunication network which allows point-to-point access (such as a public telephone network). Also the actual payment of the accumulated transition tax may be effected automatically via an electronic bank transfer. To this end, an electronic transfer component (not shown) is provided in certain preferred embodiments. If, however, the jurisdiction for which the tax declaration is to be prepared does not allow electronic filing of transition tax declarations, a hard copy of the electronic tax declaration prepared by the report execution component  is printed out and sent as a paper document to the tax authority.","The filing service  also has a tracing functionality: All steps carried out by the several components of the filing service  can be reported in the form of trace records which are stored in the data warehouse . This enables the user to trace how the numbers appearing in the finished tax declaration have been generated. The tracing functionality not only serves as a debugging instrument. It can also serve as a proof for the correctness and compliance of the way in which the tax declaration has been prepared. Based on the stored trace records, an official or internal auditor can verify the correctness and compliance of the tax declaration.","A user confirmation may also be requested at other stages of the tax filing preparation process than the above-described request verification stage. For example, before carrying out the actual electronic filing of the tax declaration by means of the tax filing component , the filing service  asks for a user confirmation. In addition, in preferred embodiments, the filing service  enables the user to intervene manually at different stages of the text declaration preparation process. For example, the user may be enabled to scan the transaction data selected by the transaction data selection component  and to change or discard transaction data records manually (however, it is generally preferred that such manual interaction is avoided, in particular in view of the auto-completion functionality of the auto-completion service  which automatically completes incomplete transaction data records. The message handler  provides the user interface for these confirmation and intervention tasks. The communication is carried out by messages interchanged between the message handler  and the filing service .","The tax declaration templates as well as the rules which define which transaction data records have to be selected, how the selected transaction data are consolidated and where the results of the consolidation are to be put in the templates (called \u201creport content rules\u201d) are contained in the content service  in a form configurable by the user. The report content rules and the tax declaration templates are not hard-coded in a content service  or the filing service application . Rather, they can be input and modified by the user in a report content rules configuration interface  and a tax declaration templates configuration interface  which are both part of the content service . The report content rules can be entered by the user online in the form of a script language. After having fetched the script language content rules, the filing service  interprets them and processes them accordingly. As already mentioned above, the content service  is shared between different basic services , and therefore also contains rules and \u201cmeta data\u201d for the other basic services , as shown in . In other preferred embodiments (not shown) the content service is modular, the TT filing service  then has a specialized report content service component. Although it is generally possible that the filing service  fetches all report-related rules and templates, it is preferred that it fetches only that subset of rules and templates which is relevant for the jurisdiction or country for which the tax declaration is being prepared.","By using the described tax filing service, it is ensured that the evaluation of transaction tax data and the resulting tax declaration are in compliance with the requirements of the pertinent jurisdiction. One and the same filing service can be used for different jurisdictions, and the processing steps to be performed by the user are the same for all jurisdictions. The \u201ccontent\u201d, i.e. the rules reflecting the tax declaration requirements as well as the templates can easily be configured by the user via a user interface, without the need to change hard-coded programs. The tax declaration is prepared automatically and can be filed electronically. The filing service is independent of other program components, such as transaction tax calculation components and logging components. This enables the process layer to use independent services for TT calculation, TT logging and TT filing. For example, an external service provider can be used for TT calculation, but the TT logging can be performed in-house by using the described TT filing service. Alternatively, a TT filing service of the described kind can be offered as an e-service over the internet. The transaction data records could, for example, be resident at the e-service's customer and send to the tax declaration service provider together with the request over the Internet.",{"@attributes":{"id":"p-0152","num":"0157"},"figref":"FIG. 9","b":["42","22","40","22","40","22","40","22","40","22","40","26","26","22","40","26","22","40","26"]},"According to the preferred embodiment of the invention shown in  this detrimental situation will be avoided as follows: If the logging service  recognizes that it is not able to log a particular data element as required by the applied logging rule it might call the auto-completion service  depicted in . Thereby, it transmits transaction-related data elements comprising the missing data element identifier. The transaction-related data elements may further comprise all data elements currently used by the logging service  for complying with the actual logging event. These data elements are preferably identical with or a subset of the standardized data model, the tax object, described with respect to -. In the example shown in  the auto-completion service  is a software module forming a basic service which can be invoked independently of other basic services, for example by an HTTP request from the process and communication layer . Alternatively, the auto-completion service  might be implemented as a micro service in the overall TT structure or might be directly integrated in form of a software component into the particular calling service (in this example into the logging service ). Naturally, all other TT services  to  as discussed with respect to  may benefit from an auto-completion function. In particular, the TT compliance report service  profits from such an auto-completion function as a lot of transactions like direct G\/L entries do not carry all information required by the particular compliance report. Moreover, as discussed with respect to  the compliance report service  may consider different reporting areas (management, audits, etc.) all having different reporting needs. Finally, it will reduce different interpretations of these kinds of transactions by different users and enable one compliance view. In addition, the various different data extractions for compliance reporting will be reduced to exceptions only. The preferred embodiment particularly solves the problem of the prior systems that hard copied information needed to be stored somewhere in the system in order to enable tracking and verifying correctness of transactions (which often was forgotten and needed to be manually added for each transaction).","Returning to  the steps performed by the auto completion service module  will be discussed in more detail. In step  the module  receives the transmitted data elements (for example by means of an interface component), in particular the missing data element identifier. In an optional step  it might fetch a set of completing rules from the content management service  in a user-configurable form. As already discussed with respect to the logging service  shown in  the content management service  also contains other rules and \u201cmeta data\u201d for other basic services (see above). The auto completion service  might fetch only a subset of completing rules concerning the particular missing data element. If the step  is not provided the auto completion service  might contain an internally stored set of completing rules for all or a subset of missing data elements (in the latter case, different auto completion services  associated to different TT services  to  may be provided which only need the subset of missing data elements occurring in the specific TT service  to ). In a step  it applies the set of completing rules (for example by means of an evaluation component) with regard to the missing data element while having access to the transmitted data elements as well as to data elements stored in the data warehouse, etc. In general, the completing rules are similar to the mapping rules described with regard to the above preferred embodiments of the invention. The difference, however, between these rules lies in the specific certainty a missing data element might be identified by both sets of rules. In the above mapping rules, each data element is exactly determined from one or a set of source fields (in the above example, the \u201cline item amount\u201d used by the TT calculation service  is exactly determined from the source field \u201cprices_netprice\u201d, similarly, the \u201ccurrency\u201d is exactly determined from the \u201ccustomer_country\u201d and \u201cdate_year\u201d source fields). If for example a booking in the general account book lacks the corresponding invoice number(s) or date(s) (cp. above) this number might be derived from the customer name identified among the information for this booking. A corresponding completing rule might enable the auto-completion service  in step  to search the data warehouse for the customer name and for corresponding invoice numbers. The simplest case occurs if only one invoice number will be found. Then, the booking will most probably correspond to the found invoice number which may be further verified by comparing the found invoice amount and the booking amount in the ledger. A more complicated case occurs if several invoice numbers are found and none of the corresponding invoice amounts corresponds to the booking amount in the ledger. Then, a kind of artificial intelligence implemented in more complex completing rules might try to add all open invoice amounts or all combinations of open invoice amounts and compare the results with the booking amount. A correspondence between such a combination and the booking amount implies a likely relationship of the missing invoice numbers and the booking amount.","Preferably, the completing rules are not hard coded in the content management service  or the auto-completion service module . Rather, the completing rules can be input and modified by the user via a completing rule configuration interface which may be part of the content management service  or the auto-completion-module . The completion rules can be entered by the user online in the form of a script language.","Moreover, the \u201cintelligent\u201d completing rules might be configured to consider jurisdictional requirements when completing missing information. For example, if an outside invoice merely shows the gross amount (i.e. the before-tax amount and the value added tax rate are added and not separately listed in the invoice) the auto-completion service module  might calculate the value added tax rate on the basis of the addressee's location, the corresponding jurisdiction to be applied and the listed gross amount. However, some jurisdictions (for example the German jurisdiction) might generally forbid the derivation of value added tax rates from gross amounts. Consequently, in such a case the auto-completion service  might notify the user about this particular event in a step  (for example by means of an optional notification component), i.e. that it will consider the gross amount not to contain a value added tax rate. Generally, if the applied completing rules lead to the result that the missing data element should not be derived from other information due to legal or other requirements the user will be notified and the auto-completion service  returns to the invoking service in step .","Otherwise the likelihood of the determined value for the missing data element to be valid will be evaluated in a plausibility test  (for example by means of a plausibility checking component). Therein, the likelihood may either be determined on the basis of a fixed certainty value associated with the corresponding completing rule leading to the determined value for the missing data element. This fixed certainty value might for example indicate that this completing rule leads most likely or only vaguely to the information for the missing data element. Apparently, there are numerous other possibilities for deriving such a certainty value. Preferably, the plausibility test returns the certainty value according to the following procedure. As can be seen from the above particular examples, there are numerous possibilities for implementing completing rules deriving information about missing data elements. Therefore, several different completing rules may be configured to get several suggestions about the missing data element from several different sources. The set of suggestions obtained will then be evaluated by means of the plausibility tests. A very simple plausibility test would consist of comparing all suggestions delivered by this set of completing rules and setting a certainty value either to \u201cmost likely\u201d if all suggestions are equal to each other or to \u201cvague\u201d if at least one suggestions differs from the other ones.","The service module  then proceeds to step  where the certainty value is compared with a predetermined threshold parameters, for example \u201cmost likely\u201d and \u201cvague\u201d. If the certainty value is equal to \u201cvague\u201d the auto-completion service  proceeds to step  where it opens a dialog routine with the user suggesting its particular result or results for completing the missing data element and asking for confirmation of the suggested result or for selection of one of the several results. Furthermore, the user might be enabled during this dialog to enter a completely different value for the missing data element if the suggestions are not acceptable. Naturally, the service  also proceeds to step  when it is unable to obtain any value for the missing data element and asks for manual entry of the data element.","If in step  the certainty value is determined to be equal to the threshold parameter \u201cmost likely\u201d the auto-completion service  will directly proceed to step . Similarly, step  subsequently proceeds to step  either with the confirmed suggestion, the selected suggestion of the missing data element or the user-entered value of the missing data element. In step  the auto-completion service  returns the missing data element to the invoking TT service  to .","Summarizing, subject to certain reporting requirements defined by tax authorities (cp. the description with respect to the filing service ), by the company management, the audit requirements and others as appropriate, the auto completion service  intelligently and as far as possible automatically calculates or supplies missing information.","With the preferred embodiments, a more flexible and effective logging functionality is provided than it was previously the case. Thus, a general purpose of the preferred embodiments is to provide an improved method, software module and software application for transaction-tax logging.","All publications and existing systems mentioned in this specification are herein incorporated by reference.","Although certain methods and products constructed in accordance with the teachings of the invention have been described herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all embodiments of the teachings of the invention fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["In the accompanying drawings:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 4","i":["a","b "],"b":"4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5","i":"a "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5","i":"b "},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 5","FIG. 5"],"i":["c ","a; "]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 5","FIG. 5"],"i":["d ","c "]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5","i":"e "},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 6","i":["a","h "],"b":"6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
