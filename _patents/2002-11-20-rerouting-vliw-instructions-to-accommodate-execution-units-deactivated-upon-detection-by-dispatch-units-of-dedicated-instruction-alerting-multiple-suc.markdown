---
title: Rerouting VLIW instructions to accommodate execution units deactivated upon detection by dispatch units of dedicated instruction alerting multiple successive removed NOPs
abstract: Processor () has a plurality of registers () for storing instructions for execution by the plurality of execution units (). The plurality of registers () are coupled to the plurality of execution units () via distribution means (). Distribution means () have a plurality of dispatch units () coupled to the plurality of execution units () and a reroutable network, e.g. a data communication bus (), coupling the plurality of execution units () to the plurality of dispatch units (). The data communication bus () is controlled by control unit (). Dispatch units () are arranged to detect dedicated instructions in the instruction flow, which signal the beginning of an inactive period of an execution unit () in the plurality of execution units (). Subsequently, control unit () is notified, and the instruction flow from the plurality of registers () to the plurality of dispatch units () is rerouted as a result of the detection of the dedicated instruction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07472257&OS=07472257&RS=07472257
owner: NXP B.V.
number: 07472257
owner_city: Eindhoven
owner_country: NL
publication_date: 20021120
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The present invention relates to a processor that is configurable by a dedicated instruction.","The present invention also relates to an instruction set comprising such an instruction.","The present invention also relates to a method of distributing instruction bundles from a storage device to plurality of execution units of such a configurable processor.","The present invention also relates to a method of compiling a plurality of instruction bundles comprising such a dedicated instruction.","U.S. Pat. No. 6,219,796 shows a processor that is configurable by a dedicated instruction.","The ongoing demand for an increase in high performance computing has led to the introduction of several solutions in which some form of concurrent processing, e.g. parallelism has been introduced into the processor architecture. A widely used concept to achieve high performance is the introduction of instruction level parallelism, in which a number of processing units are present in the processor architecture for executing a number of instructions more or less at the same time. Two main concepts have been adopted: the multithreading concept, in which several threads of a program are accessible by the processing units, and the very large instruction word (VLIW) concept, in which bundles of instructions corresponding with the functionality of the execution units are present in the instruction set.","A problem associated with the aforementioned concepts is that the increase of parallelism leads to several complications, like the increase of power consumption caused by the larger number of execution units being active at the same time and the related increase of simultaneous data traffic.","The VLIW processor of U.S. Pat. No. 6,219,796 has processing units that have been made responsive to a dedicated instruction, e.g. a SLEEP or REST instruction, which at least partially powers down the associated execution unit. The execution units are made active again either by another dedicated instruction, e.g. a WAKE instruction or a second SLEEP\/REST instruction operating acting as a toggle, or by the receipt of an active, e.g. non-SLEEP\/REST instruction. Consequently, the active configuration of the processor can be altered by dedicated instructions present in the instruction flow of VLIWs, resulting in a reduction of the power consumption by the active processor. The dedicated instructions are inserted into a VLIW by the compiler; this is realized by first detecting a segment of inactive instructions for a given functional unit and, subsequently, replacing the first of the inactive instructions by a SLEEP or REST instruction, depending on the duration of the inactive period, and replacing the last of the inactive instructions with a WAKE instruction.","It is a disadvantage of the prior art processor that the dedicated instructions are only used to switch off and on parts of the processor.","Inter alia, it is an object of the present invention to provide a processor of the kind described in the opening paragraph that is capable of being configured in a more versatile way by dedicated instructions.","It is a further object of the present invention to provide an instruction set of the kind described in the opening paragraph facilitating the more versatile configuration strategy.","It is yet a further object of the present invention to provide a distribution method of the kind described in the opening paragraph enabling the more versatile reconfiguration of processors employing instruction level parallelism.","It is another object of the present invention to provide a compilation method of the kind described in the opening paragraph for creating a software code module facilitating the more versatile configuration strategy.","The invention is defined by the independent claims. The dependent claims define advantageous embodiments.","Now, the first object is realized in that the distribution means are arranged to distribute the plurality of instructions to the plurality of execution units in dependence upon the dedicated instruction.","The dedicated instruction indicates the beginning of an idle period of a given execution unit. By making the distribution means responsive to the dedicated instruction, an instruction flow can be rerouted to the remaining active execution units upon evaluation of the dedicated instruction by the distribution means. Consequently, a string of do nothing, i.e. no-operation (NOP), instructions for a given execution unit can be omitted from the associated instruction bundles, i.e. threads or instruction words, and replaced by a single dedicated instruction, because the distribution means can reroute instructions to the appropriate active execution units. This is especially advantageous in terms of reduced intensity of data communication, because the instruction bundles to be fetched from the instruction memory comprise a largely reduced number of idle instructions, and a smaller number of fetches from memory are required to execute a program associated with the instructions. This results in less power consumption as well as improved processor performance, because the number of time consuming instruction memory accesses is reduced.","It is an advantage if the processor further comprises a plurality of registers for storing the plurality of instructions, the plurality of registers being coupled to the distribution means.","The presence of such registers allows for instruction buffering. Consequently, a greater flexibility in data transfer is achieved, which contributes to an increase in processor performance.","In a preferred embodiment, the distribution means comprise a plurality of dispatch nodes for distributing the plurality of instructions to the plurality of execution units, each dispatch node from the plurality of dispatch nodes being arranged to fetch and evaluate an instruction from a target register from the plurality of registers; control means responsive to the plurality of dispatch nodes; and coupling means responsive to the control means for coupling the plurality of register files to the plurality of dispatch nodes.","The introduction of configurable coupling means facilitates the access of all registers coupled to the coupling means by any of the dispatch nodes. The control means register the detection of a dedicated instruction by a dispatch node, and can adjust the instruction flow from registers to dispatch nodes accordingly. Consequently, instructions stored in a single register can be distributed to a plurality of execution units, which also implies that an instruction bundle fetched from instruction memory does not have to match the corresponding instruction execution resources. In fact, a single bundle can comprise instructions to be executed by a single execution unit in different clock cycles.","It is an advantage of the preferred embodiment if a dispatch node from the plurality of dispatch nodes is at least partially deactivated upon evaluation of the dedicated instruction.","The dedicated instruction can function as a deactivation trigger for the associated dispatch node. Since the dedicated instruction signals an idle period for the execution unit associated with the dispatch node, the dispatch node itself enters an idle period as well. Therefore, the node can at least be partially be switched off, which is advantageous in terms of power consumption. For instance, the only activity left in the dispatch unit is the monitoring of the number of clock cycles that the dispatch unit is inactive, in order to reactivate itself at the appropriate moment.","It is another advantage of the preferred embodiment if the dispatch node is arranged to deactivate an execution unit from the plurality of execution units upon evaluation of the dedicated instruction.","Since the dedicated instruction indicates an inactive period for a given execution unit, this execution unit can be switched off by the dispatch unit. This results in a further reduction of power consumption by the processor.","It is yet another advantage of the preferred embodiment if the dispatch node is reactivated upon receipt of a reactivation signal from the control means.","Instead of monitoring its own number of inactive clock cycles to determine the appropriate reactivation moment, a dispatch node can also be reactivated by the control means. In this way, the dispatch units can be completely switched off, since they do not have to track their own reactivation.","It is yet another advantage of the preferred embodiment if the control means are arranged to generate the reactivation signal responsive to a signal from an execution unit from the plurality of execution units.","This is particularly advantageous in cases where the dispatch node is switched off as the result of a conditional expression like a branch instruction; upon receipt of a signal from the execution unit indicating the condition being met, the control unit can reactivate the appropriate dispatch unit. This, for instance, facilitates loop executions with the use of compact instruction bundles incorporating very little redundant instructions.","It is a further advantage of the preferred embodiment if the control means comprise a plurality of conductors, a conductor from the plurality of conductors coupling a dispatch node from the plurality of dispatch nodes to an evaluator; and a control unit, being responsive to the evaluator, for providing an active dispatch node from the plurality of dispatch nodes with target register selecting information.","When a dispatch unit detects a dedicated instruction, it provides the evaluator with a detection signal. The number of detection signals collected by the evaluator is provided to the control unit, which can construct an offset from this data; this offset is used to connect active dispatch units to the appropriate registers.","Advantageously, the coupling means of the preferred embodiment comprise a data communication bus.","The use of a data communication bus provides fast communication between the registers and the dispatch units, which contributes to a high throughput performance of the arrangement.","Alternatively, the coupling means of the preferred embodiment a plurality of demultiplexers coupled to the plurality of registers; and a plurality of multiplexers coupled to the plurality of dispatch nodes, with each demultiplexer from the plurality of demultiplexers being coupled to each multiplexer from the plurality of multiplexers.","The connection of the registers to the dispatch units via a set of multiplexers and demultiplexers has the advantage that the control of the coupling means by the control means is relatively simple, which means it can be implemented at relatively low cost and area overhead.","The further object of the present invention is realized in that the instruction set further comprises a dedicated instruction for controlling the distribution of the plurality of instructions to the plurality of execution units by the distribution means.","Such instruction sets can be used in conjunction with the processor according to the present invention, thus enabling the rerouting of instructions and the use of more compact instruction bundles.","The yet further object of the invention is realized in that the dispatch method comprises the step of selecting the execution unit from the plurality of execution units upon detection of the dedicated instruction.","Such a method allows for dynamic rerouting of instructions, which obviates the need to use do nothing instructions for the mere sake of redimensioning an instruction bundle to its fixed size in cases where only a subset of the plurality of execution units are scheduled to execute useful instructions.","The another object of the present invention is realized by the step of replacing the first do nothing instruction with a dedicated instruction for controlling the distribution of the plurality of instructions to the plurality of execution units by the distribution means.","The presence of a dedicated instruction in a software code module enables the instruction rescheduling by the distribution means in the processor according to the present invention.","It is an advantage if the compilation method comprises the further step of removing the remaining do nothing instructions from the plurality of do nothing instructions from the plurality of instruction bundles.","The removal of do nothing instructions from the instruction bundles yields a software code module with an increased density of useful, e.g. other than do nothing, instructions per instruction bundle. This is particularly advantageous in terms of total code size.","It is another advantage if the compilation method comprises the further step of regrouping the plurality of instruction bundles into a further plurality of instruction bundles. Regrouping the plurality of instruction bundles into a further plurality of instruction bundles, preferably into bundles with a fixed size, reduces the complexity of the instruction ordering in the software code module. Consequently, the reformed instruction bundles may contain multiple instructions to be executed by a single execution unit, which can be dispatched to that unit in the appropriate order upon evaluation of the dedicated instruction. This implies that less memory accesses are required for the execution of such a code module, which contributes to a reduction in power consumption of the processor involved.","It is yet another advantage if the compilation method comprises the step of adding information to the dedicated instruction indicating the number of removed do nothing instructions.","This enables the distribution means of the processor of the present invention to extract information indicating the inactive period of the corresponding execution unit of the processor from the dedicated instruction, which can be used to deactivate parts of the processor for that amount of time.","It is another advantage if the compilation method comprises the step of adding information to the dedicated instruction indicating a cause of the presence of the plurality of do nothing instructions.","This is particularly useful when the inactive period of an execution unit of a processor is caused by a conditional event, e.g. the occurrence of a branch instruction marking the end of a loop instruction. The information can be used to alert the distribution means that an interrupt signal indicating that the condition has been met will occur at some point in time, which can be used by the distribution means to reactivate temporarily deactivated parts of the processor.","In , a part of a processor  has a plurality of registers , coupled to distribution unit . The outputs of distribution unit  are coupled to a plurality of execution units . In a preferred embodiment, distribution unit  has a data communication bus , which couples the plurality of registers  to a plurality of dispatch units . Dispatch units , , , are arranged to detect a dedicated instruction in the instruction flow marking the beginning of an idle period of the execution unit , , , to which the dispatch unit , , , is coupled. In , each dispatch unit , , , is coupled to an execution unit , , , ","It is emphasized though that not every execution unit of processor  has to be connected to a register via the distribution unit ; it will be understood by those skilled in the art that mixed configurations, in which only a subset of the execution units is connected to a register via distribution unit  are also possible without departing from the teachings of the present invention. Such mixed configurations can be useful in cases where some execution units are arranged to perform dedicated tasks, making them relatively insensitive to instruction scheduling problems. In addition, it is stipulated that the number of four registers, dispatch units and execution units is chosen by way of example only; other numbers of these elements can be present without departing from the teachings of the present invention.","Data communication bus  is controlled by control unit . In the here presented embodiment, control unit  is coupled to the plurality of dispatch units  via evaluator  and the plurality of conductors . Each conductor from the plurality of conductors  is coupled to a dispatch unit , , , from the plurality of dispatch units . Evaluator  is arranged to receive a signal from a dispatch unit , , , when a dedicated instruction is detected. Evaluator  collects the signals provided through the plurality of conductors  and provides control unit  with the necessary information to control the coupling of the appropriate register , , , to an active dispatch unit , , , . Control unit  can provide a dispatch unit , , , with register address selecting information, but other data access control mechanisms known in the art can be used as well. At this point, it is stated that will be obvious to those skilled in the art that the presence of a separate evaluator  is not strictly necessary. Evaluator  can be integrated in control unit , and, in addition, control unit  can be distributed over at least one of the dispatch units , , , without departing from the scope of the invention.","Consequently, distribution unit  is arranged to distribute the plurality of instructions to the plurality of execution units () in dependence upon the dedicated instruction, because the detection of a dedicated instruction will lead to the rerouting of a register , , , to another execution unit , , , ","Control unit  and the plurality of registers  are connected to a further data communication bus . Further data bus  is used to access an instruction memory not shown; control unit  controls the fetching of instruction bundles from the instruction memory, which are subsequently stored in the plurality of registers . The use of further data bus  by both control unit  and the plurality of registers  should not be explained as limiting; other arrangement, in which control unit  and the plurality of registers  use different communication means can readily be used without departing from the scope of the invention.","Preferably, dispatch units , , , are arranged to be at least partially switched off upon receipt and evaluation of a dedicated instruction in order to achieve a power reduction. If the dedicated instruction comprises information regarding the number of clock cycles, dispatch units , , , can be extended with a simple comparator circuit not shown for controlling their own reactivation by monitoring the clock cycles. Alternatively, control unit  can be extended with such a comparator, in which case control unit  has to be presented with the aforementioned information in order to be able to control the reactivation of deactivated dispatch units , , , . This information can be provided to control unit  via the plurality of conductors . The reactivation can be achieved by providing a dispatch unit , , , with a reactivation signal, for instance via data communication bus .","Since a dedicated instruction indicates the start of an idle period for a execution unit , , , to which the receiving dispatch unit , , , is coupled, it is also preferable in terms of a further power reduction that the dispatch unit , , , is arranged to switch off the associated execution unit , , , . This can for instance be done by providing the associated execution unit , , , with a clock gating signal or, in asynchronous architectures, by withholding an enable signal; as long as dispatch unit , , , are at least partially switched off, the clock of associated execution unit , , , is gated, or the associated execution unit , , , is dormant because of the absence of a handshake request signal, effectively stalling the execution unit , , , . As soon as the dispatch unit , , , is reactivated again, the stall of associated execution unit , , , is lifted and associated execution unit , , , becomes active again.","Optionally, control unit  can be made responsive to the plurality of execution units . This facilitates the rerouting of instructions upon detection of an undefined idle period of an execution unit , , , , e.g. an idle period depending on the evaluation of a conditional expression. This is particularly advantageous during loop executions, where conditional expressions are used to mark the end of a loop. As soon as the condition is met, an execution unit , , , signals the control unit , triggering control unit  to restore the original routing between the plurality of registers  and the plurality of dispatch units . Typically, the content of the plurality of registers  will be flushed as well, as usually is the case when a branch instruction is taken. The flush can either be controlled by control unit  through a connection not shown with the plurality of registers  or by other hardware responsive to the plurality of execution units .","At this point, it is emphasized that the present invention can be applied to a wide range of processor architectures; e.g. VLIW or multithreading processors as well as synchronous or asynchronous architectures can incorporate the present invention, and it will be obvious to those skilled in the art that further architectures can be easily thought of.","Now, the following Figs. are described with reference to the detailed description of . Reference numerals introduced in  will have similar meaning in the following Figs., unless explicitly stated otherwise.","In , another preferred embodiment of processor  is shown. With respect to the processor  depicted in , data communication bus  has been replaced by a data communication network . Data communication network  has a plurality of demultiplexers , with each demultiplexer , , , being coupled to a register , , , and being controlled by control unit . Data communication network  further has a plurality of multiplexers , with each multiplexer , , , being coupled to a register , , , and being controlled by control unit . Each demultiplexer , , , is coupled to all multiplexers from the plurality of multiplexers , thus providing complete connectivity between the plurality of register files  and the plurality of dispatch nodes . It is stipulated that in  only the connections from demultiplexer to all multiplexers from the plurality of multiplexers  are explicitly shown. This is done because of reasons of clarity only, and does not suggest that the connections of demultiplexers , , to all multiplexers from the plurality of multiplexers  are missing. The main difference with the embodiment shown in  is that control means  does not have to provide each individual dispatch unit , , , with register access information.","Control unit  fully controls the routing between the plurality of registers  and the plurality of dispatch units  by providing each demultiplexer , , , and each multiplexer , , , with an appropriate control signal. It is emphasized that, preferably, control unit  also controls the fetching of new instruction bundles to be stored in the plurality of registers  from instruction memory. Consequently, the routing signals provided to the plurality of demultiplexers  can also be used as access enable signals for the accompanying plurality of registers . In other words, a register , , , is only accessed when a demultiplexer , , , receives a routing signal from control unit .","It is emphasized that, although both present in , either the plurality of demultiplexers  or the plurality of multiplexers  can be omitted from the data communication network . This is not preferred though, because it places a large burden on the capacitive loads of the remaining interconnections, which can easily lead to a deterioration of throughput performance. Furthermore, it will be obvious to those skilled in the art that other known realizations of data communication network  can be used without departing from the teachings of the present invention.","In , a flowchart of the method  describing the modus operandi regarding the distribution and rerouting of instructions in processors like processor  is shown. A first step  comprises fetching a first plurality of instructions like an instruction bundle from instruction sources like the plurality of registers .","Next step  deals with detecting the dedicated instruction by evaluating the instructions from the plurality of instructions prior to dispatching them to the plurality of execution units . The detection of such an instruction signals an inactive period of a corresponding execution unit , , , , which means that at least some of the instructions of the next fetched plurality of instructions have to be rerouted.","Consequently, in step  distribution means  are reconfigured, resulting in the reconnecting of the execution units , , , to the plurality of registers  resulting in the fact that the instructions for at least some of the execution units , , , now originate from a different storage location. It will be understood by those skilled in the art that step  may have to be repeated for every next fetched plurality of instructions. This will be explained in more detail in the detailed description of .","In , a compilation method  for forming the compressed instruction bundles is disclosed. In a first step , mapping an instruction to an execution unit , , , from the plurality of execution units  and bundling the instructions into an instruction bundle takes place. This step is usually repeated until compilation of the software code module is at least partially complete. Subsequently, step  deals with searching the instruction bundles for a plurality of do nothing instructions for contiguous execution by an execution unit. Such a plurality of do nothing instructions indicate a prolonged period of inactivity for a given execution unit, which provides an opportunity for the generation of a more compact software code module.","Therefore, if such a plurality is detected, in step  the plurality of instruction bundles is modified by replacing a first do nothing instruction from the plurality of do nothing instructions with a dedicated instruction signaling the start of an inactive period of the associated execution unit.","Optionally, step  can be extended with a substep in which information is added to the dedicated instruction indicating the number of removed do nothing instructions from the instruction bundles, i.e. the number of cycles the execution unit is scheduled to be inactive, or by adding information to the dedicated instruction about the event leading to the occurrence of the inactive period of the execution unit , , , ; e.g. an branch instruction or another conditional instruction.","In next step  the remaining do nothing instructions from the plurality of do nothing instructions are removed from the plurality of instruction bundles, followed by step  of regrouping the plurality of instruction bundles into a further plurality of instruction bundles, each instruction bundle from the further plurality of instruction bundles having the fixed size. Although steps  to  may be repeated until all pluralities of do nothing instructions associated with a prolonged inactive period of an execution unit , , , are indeed removed from the software code module, this preferably is done in a single cycle by repeating steps ,  before steps  and  are performed (vide infra). It will have become apparent to those skilled in the art that at least some of the instruction bundles formed in step  can comprise a plurality of instructions for a single execution unit.","This is visualized in , where an exemplary execution of the compilation method  described in  is given. Therefore,  refers back to the detailed description of . Software code module  contains five instruction bundles -for execution on processor . Software code module  is generated in step  of compilation method , and contains four columns of instructions; the leftmost column being arranged for execution on execution unit , the second column being arranged for execution on execution unit , the third column being arranged for execution on execution unit and the rightmost column being arranged for execution on execution unit . Two types of instructions are present in software code module : useful instructions, which are labeled INSx, with x being a positive integer and do nothing instructions, labeled NOP.","Software code module  contains pluralities of do nothing instructions for contiguous execution by an execution unit , , , : a first one beginning with a NOP instruction for execution unit in instruction bundle and a second one beginning with a NOP instruction for execution unit in instruction bundle . Now, execution of steps - of the compilation method  leads to intermediate software code module  consisting of modified instruction bundles -. The first plurality of do nothing instructions for execution unit has been removed and replaced by a single dedicated instruction D.INS in instruction bundle . Consequently, the density of useful instructions in software code module  has become higher than that of software code module  although the columns of instructions no longer match their intended destination in processor  and have to be rescheduled by distribution unit  based on the inserted dedicated instruction D.INS. In a next step, steps - are repeated to remove the second plurality of do nothing instructions. This is now more difficult, because the NOP instructions are no longer located in a single column. Therefore, it is preferred that before code compaction, i.e. steps  and  are performed, steps  and  are repeated until all targeted pluralities of do nothing instructions have been found.","The removal of the second plurality of do nothing instruction and subsequent code compaction yields software code module , consisting of instruction bundles -. Note that instruction bundle also has the appropriate size; the three dots in the rightmost column merely indicate that the there located instruction can either be a do nothing instruction, a useful instruction or a dedicated instruction. It will be obvious to those skilled in the art that instruction bundles -each contain a plurality of instructions for a single execution unit , , , . Therefore, the reconfiguration of coupling means ,  usually has to be performed several times to enable the correct distribution of all instructions in a single instruction bundle. In other words, the detection of a single dedicated instruction typically leads to a number of reconfigurations by distribution means .","It should be noted that the above-mentioned embodiments illustrate rather than limit the invention, and that those skilled in the art will be able to design many alternative embodiments without departing from the scope of the appended claims. In the claims, any reference signs placed between parentheses shall not be construed as limiting the claim. The word \u201ccomprising\u201d does not exclude the presence of elements or steps other than those listed in a claim. The word \u201ca\u201d or \u201can\u201d preceding an element does not exclude the presence of a plurality of such elements. The invention can be implemented by means of hardware comprising several distinct elements, and by means of a suitably programmed computer. In the device claim enumerating several means, several of these means can be embodied by one and the same item of hardware. The mere fact that certain measures are recited in mutually different dependent claims does not indicate that a combination of these measures cannot be used to advantage."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["The invention is described in more detail and by way of non-limiting examples with reference to the accompanying drawings, wherein:",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
