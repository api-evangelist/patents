---
title: Method and apparatus for extending coverage of GUI tests
abstract: A method of testing a graphical user interface includes selecting a widget of the graphical user interface, associating an access mode with the widget, generating a mode-specific input message based on the widget and the access mode, sending the mode-specific input message to the graphical user interface, detecting a mode-specific response from the graphical user interface using a detection tool, and evaluating the graphical user interface based on the mode-specific response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06871327&OS=06871327&RS=06871327
owner: Sun Microsystems, Inc.
number: 06871327
owner_city: Santa Clara
owner_country: US
publication_date: 20020304
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["A Graphical User Interface (GUI) is part of a software application that interacts with a user via a graphical display. The GUI receives input from the user through different modes of access, such as a mouse and pointer combination, or through a keyboard. A visual output of a GUI is typically displayed on a display device, such as a computer monitor screen, and includes widgets that allow the user to interact with the GUI. Examples of widgets include windows, captions, buttons, labels, menu bars, toolbars, dialog boxes, menus, icons, etc. An example of a GUI visual output is a window () having a menu bar () as shown in FIG. . In this example, there are two menus in the menu bar (), an Edit menu () and a File menu (), as indicated by appropriate labels. Widgets may also represent software applications that may be executed by the user, such as a Web Browser widget (), which represents a Web Browser application, or a pointer icon (), which represents the position of a mouse.","When the user interacts with the GUI by, for example, clicking the mouse while the pointer is positioned above a widget, a message is sent from the mouse to the GUI. The message is a signal transmitted by a computer on which the GUI is executing, and is directed to and accesses the widget. The message may be relayed from the mouse to the GUI by means of a system tool such as an operating system (or other intermediary software application, such as a windowing toolkit) that manages the computer system or graphical display on which the GUI operates. The GUI interprets the message and determines whether to take action based on the position of the pointer when the mouse was clicked. Referring to , if the user clicks on the File menu (), a message is sent from the mouse to the GUI, accessing the File menu () item. The GUI receives the message, interprets the message and determines that the user wants the File menu () to be expanded. The GUI then alters the screen image to reflect the expansion of the File menu (). The altered screen image with the expanded File menu () is shown in FIG. . In this example, the expanded File menu () includes an Open menu item () and a Close menu item ().","In addition to a mouse and pointer combination, other widget access modes include the mnemonic key combinations in order to access widgets. Referring back to , in order to open the File menu (), instead of using the mouse and pointer, the user may press and hold down the \u201cAlt\u201d key and press the \u201cF\u201d key, which is underlined in the label of the File menu (). Likewise, other widgets with underlined letters may be accessed similarly. Also, the user may utilize programmable shortcut keys in order to access menu items. For example, as a shortcut to access the Open menu item (), the user may press the F key that is programmed with the shortcut to open the File menu (). Shortcut keys may involve key sequences, e.g., a \u201cControl\u201d key plus an \u201cL\u201d key may be used to access a widget.","Another access mode is keyboard navigation. A widget that is highlighted (i.e., the widget that receives action from the mouse or keyboard, usually indicated by a dashed border) is said to have the \u201cfocus.\u201d The focus changes from one widget to another widget every time a key, e.g., the tab key, an arrow key, etc., is pressed, allowing the user to traverse the widgets by successively pressing the key. When the desired widget has focus, pressing the \u201cEnter\u201d key accesses the widget. Widgets may also be accessed by the accessibility function, which allows one or more software applications that help physically impaired users interact with a GUI or with a computer. For example, in order to allow physically impaired individuals to operate a GUI, customized mechanical devices may be used to detect movements of a user's head by translating movement of the user's head into messages to the operating system and\/or windowing toolkit, which relays the messages to the GUI. Thus, a substitute is provided for a mouse. The accessibility function may be implemented and used in a variety of ways, and may assist users to overcome a variety of physical impairments.","As shown in , a GUI testing tool (GTT) () is a software application that may be used to perform a test of a GUI () in order to detect errors in the construction and operation, etc., of the GUI (). In order to test the GUI (), the GTT () typically operates in conjunction with a test suite (). The test suite () is a collection of one or more tests or scripts used to determine whether the GUI () is functioning as specified. A test typically contains one or more simulated user actions, which are input into the GTT (), which translates the simulated user actions into messages to be sent to the GUI () that is being tested. The simulated user actions are designed to exercise one or more features of the GUI () by simulating user actions. For example, the simulated user action \u201cSelectMenu (FileMenu)\u201d simulates a user using the mouse to select the File Menu. The test suite () may be created by a person involved in software testing, e.g., a test developer, software engineer, etc.","The test suite () is accessed by the GTT (). The GTT () reads a simulated user action () (such as the \u201cSelectMenu(FileMenu)\u201d) from the test suite () and, based upon the simulated user action (), generates an input message (), which is sent to the GUI (). The input message is directed to the GUI () and\/or directed to a specific widget or widgets included in the GUI (). Thus, the GTT () simulates user actions directed to the GUI (). The GUI () responds to the input message (), and the GTT () acquires and evaluates the response () of the GUI () and determines whether the response () is proper. In order to determine whether the response () is proper, the GTT () refers to a reference file () that includes a proper response for particular simulated user actions. Alternatively, the reference file () may be part of the test suite (). The GTT () compares the reference file () contents with the response () of the GUI () by using a detection tool, such as a widget hierarchy detection tool that obtains a widget hierarchy of the GUI () after the GUI () has changed in response to the input message (). The GTT () may use other detection tools, such as a bitmap detection tool, in order to determine whether the response () is proper. Thus, the GTT () may acquire a post-response bitmap drawn by the GUI () to use for comparison purposes. Typically, proper responses are gathered prior to testing, stored in the reference file (), and used later for formal test execution of the GUI (). Often, the GUI () is tested after changes have been made to the software application being tested.","A GUI includes source code statements that handle different tasks. For example, a particular group of source code statements included in the GUI may be responsible for drawing images on a computer screen. Another group of source code statements may be responsible for handling user input from the mouse, and yet another group of source code statements may be responsible for handling user input from shortcut keys. Therefore, different modes of accessing a widget cause different groups of source code statements in the GUI to be executed. Furthermore, different modes of accessing a particular widget cause different messages to be sent to the GUI with which the widget is associated. Typically, a goal of the test developer is to test as many aspects and functions of the GUI as possible, and to cause the execution of as many groups of source code statements included in the GUI as possible. Therefore, a goal of a test developer is to test the widgets in the GUI for different access modes. Generally, the more access modes that are covered during a test of a GUI, the more errors that can be detected. As a result, the final product (i.e., the GUI), as delivered to a customer, is more robust because coverage of access modes during testing is enhanced.","In general, in one aspect, the invention relates to a method of testing a graphical user interface. The method comprises selecting a widget of the graphical user interface, associating an access mode with the widget, generating a mode-specific input message based on the widget and the access mode, sending the mode-specific input message to the graphical user interface, detecting a mode-specific response from the graphical user interface using a detection tool, and evaluating the graphical user interface based on the mode-specific response.","In general, in one aspect, the invention relates to a method of testing a graphical user interface. The method comprises selecting a widget of the graphical user interface, associating an access mode with the widget, generating a mode-specific input message based on the widget and the access mode, sending the mode-specific input message to the graphical user interface, detecting a mode-specific response from the graphical user interface using a detection tool, evaluating the graphical user interface based on the mode-specific response, generating an output based on evaluating the graphical user interface; and associating an alternate user action with the widget.","In general, in one aspect, the invention relates to a computer system for testing a graphical user interface. The computer system comprises a processor, a memory, storage device, a display device, and software instructions stored in the memory for enabling the computer system under the control of the processor. The software instructions perform selecting a widget of the graphical user interface, associating an access mode with the widget, generating a mode-specific input message based on the widget and the access mode, sending the mode-specific input message to the graphical user interface, detecting a mode-specific response from the graphical user interface using a detection tool, and evaluating the graphical user interface based on the mode-specific response.","In general, in one aspect, the invention relates to a computer system for testing a graphical user interface. The computer system comprises a processor, a memory, storage device, a display device, and software instructions stored in the memory for enabling the computer system under the control of the processor. The software instructions perform selecting a widget of the graphical user interface, associating an access mode with the widget, generating a mode-specific input message based on the widget and the access mode, sending the mode-specific input message to the graphical user interface, detecting a mode-specific response from the graphical user interface using a detection tool, evaluating the graphical user interface based on the mode-specific response, generating an output to the display device based on evaluating the graphical user interface, and associating an alternate user action with the widget.","In general, in one aspect, the invention relates to a storage medium for storing a mode-specific library message. The storage medium comprises a plurality of rows associated with a widget and a plurality of columns associated with an access mode.","In general, in one aspect, the invention relates to an apparatus for testing a graphical user interface. The apparatus comprises means for selecting a widget of the graphical user interface, means for associating an access mode with the widget, means for generating a mode-specific input message based on the widget and the access mode, means for sending the mode-specific input message to the graphical user interface, means for detecting a mode-specific response from the graphical user interface using a detection tool, means for evaluating the graphical user interface based on the mode-specific response, means for generating an output based on evaluating the graphical user interface, and means for associating an alternate user action with the widget.","Other aspects and advantages of the invention will be apparent from the following description and the appended claims.","Exemplary embodiments of the invention will be described with reference to the accompanying drawings. Like items in the drawings are shown with the same reference numbers.","In the following detailed description of the invention, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid obscuring the invention.","The present invention may be implemented on virtually any type computer regardless of the platform being used. For example, as shown in , a typical computer () includes a processor (), an associated memory element (), a storage device (), and numerous other elements and functionalities typical of today's computers (not shown). The computer () may also include input means, such as a keyboard () and a mouse (), and an output device, such as a monitor (). Those skilled in the art will appreciate that these input and output means may take other forms in an accessible environment. The computer () is connected via a network connection () to a Wide Area Network (WAN) (), such as the Internet.","A test developer who creates a test suite to test a GUI may desire to test the ability of the GUI to allow a user to access widgets in different access modes, e.g., using mouse and pointer, accessibility function, etc., and thereby extend test coverage of the GUI. In order to minimize the amount of work done by the test developer, and yet still expand test coverage of the GUI, a Mode-Based Message Selection Tool (MBMST) may be used, in conjunction with other entities.","In accordance with one or more embodiments of the present invention, an MBMST and associated entities are shown in  test suite () includes tests that contain input to the GTT () that simulate user actions on a GUI (). A simulated user action () may be associated with one or more widgets, e.g., a simulated user action () to simulate accessing a file menu. In order to perform a GUI test on a GUI (), a GTT () reads a simulated user action () from the test suite (). An access mode association module () associates the simulated user action () with an access mode, e.g., mouse and pointer, mnemonic function keys, etc. The GTT () sends an associated input () to the MBMST (). Based on the access mode and the widget associated with the associated simulated user action (), the MBMST () selects a mode-specific library message () and sends the mode-specific library message () to the GTT (). The GTT () sends a mode-specific input message () to the GUI (). The mode-specific input message () may be based on (or a modified version of) the mode-specific library message (). The GUI () responds to the mode-specific input message (), and the GTT () acquires a mode-specific response () from the GUI (). The GTT () compares the mode-specific response () to a proper mode-specific response () stored in a reference file (). The GTT () stores a result of the GUI test in an appropriate location, e.g., a computer file stored on a hard drive, floppy drive, etc, and\/or displays the result in an appropriate output display device, such as a computer monitor, printer, etc. One skilled in the art will appreciate that, in accordance with one or more embodiments of the present invention, the arrangement of entities as shown in  may vary. For example, the access mode association module () may be located in a different position than shown in FIG. . Furthermore, the MBMST () may be integrated in the GTT (), in which case, the mode-specific library message () may be sent directly to the GUI () from the MBMST ().","In accordance with one or more embodiments of the present invention, a sequence of operations involved in testing a GUI using an MBMST is shown in FIG. . To begin, a simulated user action is created as part of a test (Step ) and is associated with a widget. One way that a simulated user action is created and associated with a widget is by having a test developer write a simulated user action such as \u201cSelectMenu (FileMenu)\u201d as part of the test suite. For example, the simulated user action may be associated with the File menu widget, but may not be associated with an access mode. Also, a GTT () may employ a \u201crecord and replay\u201d mode, where a test developer interacts with a GUI, e.g., by mouse and keyboard, thereby providing user actions that may be captured and edited and used later for testing purposes.","Continuing the sequence, the test of the GUI is executed (Step ). The test may be executed either manually or automatically. Often, a test engineer, a test developer, etc., initiates a test by starting a GTT. Often, a test suite is created for use later during the development cycle of a GUI or other software application.","Continuing the sequence, a simulated user action from the test suite is read into the GTT (Step ). Next, an access mode is associated with the simulated user action using an access mode association module (Step ). An access mode may be associated with the simulated user action through various methods, such as a manual method of associating the simulated user action with an access mode. For example, the test engineer, when initiating the test, may pass a command line parameter to be used as the access mode for the test. Also, many commercial varieties of GTT's allow tests to be programmed so that a simulated user action may be programmatically associated with an access mode. The access mode association module may be programmed so that different simulated user actions included in a test suite may be associated with different access modes, e.g., access modes may be associated randomly.","Continuing the sequence, the associated simulated user action is sent to the MBMST from the GTT (Step ). The associated simulated user action includes information regarding a widget and an access mode included in the associated input. For example, a particular associated simulated user action may include information regarding the Web Browser widget and the mouse and pointer access mode.","Continuing the sequence, a mode-specific library message is selected by the MBMST using the information included in the associated simulated user action regarding the access mode and widget (Step ). For each combination of access mode and widget, there exists a library message, which is selected by the MBMST. However, certain access modes, e.g., (mnemonics, keyboard shortcuts) are not available for all widgets. In these cases that do not have mode-specific library messages, the default access mode(s) (e.g., mouse and keyboard) may be used.","Continuing the sequence, the mode-specific library message is sent by the MBMST to the GTT (Step ). The mode-specific library message may be modified to adapt to a variety of implementation in a variety of system environments. Next, a mode-specific input message (based on the mode-specific library message is sent to the GUI from the GTT (Step ), and a mode-specific response to the mode-specific input message is generated by the GUI (Step ). A mode-specific response will not differ for different access modes that are applied to a particular simulated user action, if the GUI being tested is functioning properly. Thus, the same test (from a test suite) is useful for purposes of testing a GUI, regardless of an access mode being used. However, an access mode for an accessibility function may require additional GUI test functionality in order to verify proper GUI functioning.","Continuing the sequence, the mode-specific response is acquired by the GTT using an operating system and\/or other appropriate software application(s) (Step ). For example, the GTT may use a windowing toolkit and the operating system to obtain a widget hierarchy representation of the GUI. The widget hierarchy includes a representation of the status of widgets included in the GUI, thereby providing the GTT knowledge of how the GUI responded to the mode-specific library message. Additionally, the test (from the test suite), in accordance with one or more embodiments of the present invention, may have access to operating system and\/or windowing toolkit functions in order to obtain information regarding a widget hierarchy or other aspects of a GUI.","Next, the mode-specific response is evaluated by the GTT by comparing the mode-specific response to a proper mode-specific response stored in a reference file (Step ).","Next, an output representing a result of the test, i.e., whether the mode-specific response is the same as the proper mode-specific response, is generated by the GTT (Step ). For example, the result of the test may be saved in a computer file or displayed to a display device e.g., a computer monitor.","One skilled in the art will appreciate that the sequence of operations shown in FIG.  and described above may differ in accordance with one or more implementations of the present invention.","In accordance with one or more embodiments of the present invention, as shown in , the MBMST () includes an access mode detection module (), a widget detection module (), a message selection module (), and a library (). The access mode detection module () detects the access mode associated with the associated simulated user action (). The widget detection module () detects the widget associated with the associated simulated user action (). For example, if a simulated user action () included in the test suite () is \u201cSelectWidget (OpenMenuItem),\u201d then the widget associated with the associated simulated user action () is the Open menu item. The message selection module () selects a mode-specific library message () from a library (), using the access mode and widget associated with the associated simulated user action (). The message selection module () sends the mode-specific library message () to the GTT ().","A combination of a widget and an access mode associated with the associated simulated user action () are used by a message selection module () in order to select a mode-specific library message () from the library (). In accordance with one or more embodiments of the present invention, the library () is structured in a tabular form, where mode-specific library messages are stored, and indexed by row and column. For example, each row of the library () may be associated with a widget, e.g., a first row may be associated with a particular button, a second row may be associated with a File menu, etc. Each column of the library () may be associated with a particular access mode (e.g., a first column may be associated with mnemonic keys). Thus, a combination of a particular access mode and a particular widget enables a table lookup for an appropriate mode-specific library message, given a particular combination of widget and access mode.","The particular structure of the library and manner of accessing an appropriate mode-specific library message may vary with different embodiments of the present invention. For example, a mode-specific library message may be selected using a function call or Application Programming Interface (API) call, as shown by example below:\n\nMode-specific library message=Library (<widget>, <access mode>).\n","In one or more alternate embodiments of the present invention, the library () may be organized using object-oriented principles, i.e., using one or more class hierarchies, thus allowing a mode-specific library message to be accessed using a method of an object, as shown by example below:\n\nMode-specific library message=MBMST.Library.getMessage (<widget>, <access Mode>).\n","Additional access modes may be added to a GUI test by modifying appropriate entities, such as the access mode association module (), the MBMST (), or the library ().","A user may perform more than one action upon certain widgets. For example, a user may type text into a text field of a GUI or select (highlight) text in the text field. In one or more embodiments of the present invention, alternate user actions may be accounted for with respect to a GUI test. For example, for widgets that permit the user to perform alternate user actions, a user \u201c<action>\u201d parameter may be added to an MBMST.Library method, as shown below using a class-based implementation, where \u201c<action>\u201d may represent an alternate user action such as typing text or highlighting text.\n\nMode-specific library message=MBMST.Library.getMsg (<widget>, <action>, <access Mode>)\n","As new alternate user actions are made available for widgets, or as new widgets are added to a GUI, necessary modifications may be made as needed, e.g., modifying the library (), thus allowing use of the same test (from the test suite ()).","Advantages of the present invention include one or more of the following. Because messages directed to the same widget, but associated with different access modes, are handled by different groups of source code statements in a GUI, the coverage of the GUI by a test is extended in comparison to a test where only a single access mode is involved. Thus, a test developer may create a test suite to test a GUI without regard to access mode, and receive the benefit of testing the GUI with more than one access mode. Because association of access modes and user actions with widgets is independent of test suite creation, new access modes and user actions may be added to a GUI without necessitating modification of tests in a test suite.","While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
