---
title: System and method for asynchronously reading data across secure sockets layer sessions
abstract: A system and method for asynchronously reading data across secure sockets layer (SSL) sessions, comprising: an SSL session receiving a request from a first application process for an asynchronous reading of data across the SSL session wherein the request specifies a second application program to be executed upon the receiving of data from an Internet protocol network; the SSL session passing the request to TCP/IP; TCP/IP receiving data from an Internet protocol network; TCP/IP executing the second application program as a new process; TCP/IP passing the received data to the SSL session; and the SSL session passing the received data to the second application process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07016965&OS=07016965&RS=07016965
owner: International Business Machines Corporation
number: 07016965
owner_city: Armonk
owner_country: US
publication_date: 20011113
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED EMBODIMENT OF THE INVENTION"],"p":["This invention relates to secure data communications and more specifically to the asynchronous reading of data across secure sockets layer sessions.","A computer program being executed on a computer is known as a computer process and may simply be referred to as a process. Processes require mechanisms for exchanging data among them. These mechanisms are known as inter process communications mechanisms (IPCs). One category of IPC, known as sockets, was initially developed in the early 1980s at the university of California at Berkeley for use with computer systems utilizing the UNIX computer operating system. Sockets technology has since been adopted by many computer software and operating system developers including IBM.","Exponential increases in the use of computer networks and the expansion of public networks such as the Internet have resulted in a need for secure data communications. In response, Netscape Communications developed a secure IPC mechanism known as Secure Sockets Layer (SSL) (see U.S. Pat. No. 5,657,390). SSL is responsible for authenticating computer systems involved in the exchange of information and for encrypting and decrypting the data they exchange. SSL has been revised on at least two occasions and a derivative implementation, known as Transport Layer Security version 1 (\u201cTLS\u201d), is defined in Internet Engineering Task Force (\u201cIETF\u201d) Request for Comments (RFC) 2246.","SSL operates as an intermediary between an application process, such as a web browser, and a TCP\/IP stack. TCP\/IP is a combination of communications protocols used of route data over a data network and ensure its delivery. When a computer is enabled to transport data using TCP\/IP the computer is referred to as having a TCP\/IP stack. SSL sessions and SSL enabled processes exchange information messages using a predetermined message format known as SSL Application Programming Interface (\u201cAPI\u201d). The messages exchanged are referred to as API calls. Where several instances of SSL are simultaneously executed on a computer, each instance of SSL is referred to as an SSL session.","Because an SSL session is generally tied to the application process that requested its services and terminating an application process terminates the corresponding SSL session, individual processes requiring SSL services must initiate separate SSL sessions. Current SSL implementations generally require that an application process remain un-terminated until its SSL session has completed communications. As a consequence, available computer resources must be sufficient to maintain all un-terminated processes regardless of whether or not those processes are involved in active communications. Computer resources include processor time, volatile and non-volatile memory, and data throughput bandwidth.","In addition, SSL sessions encounter delays in receiving responses from computers with which they have been directed to communicate. These delays further extend the time application processes must continue executing. The result is an excessive drain of computer system resources. As the number of application processes, SSL sessions, and response delays grow, so does the danger of a computer system failing due to the depletion of available computer resources. These circumstances are often encountered in high-volume distributed computing environments including those with high numbers of concurrent transactions such as credit card transaction authorization systems. The possibility of computer system failure is heightened further where individual applications utilize multiple requesting processes or where computer systems execute multiple applications concurrently. While such concerns may be combated by strategies such as increasing overall data throughput at the TCP\/IP transport level or increasing available computer resources, the present invention provides a solution that allows for the asynchronous reading of data across secure sockets layer (SSL) sessions and makes more efficient use of existing computer resources.","A system and method for asynchronously reading data across secure sockets layer (SSL) sessions, comprising: an SSL session receiving a request from a first application process for an asynchronous reading of data across the SSL session wherein the request specifies a second application process to be executed upon the receiving of data from an Internet protocol network; the SSL session passing the request to TCP\/IP; TCP\/IP receiving data from an Internet protocol network; TCP\/IP executing the second application program as a new process; TCP\/IP passing the received data to the SSL session; and the SSL session passing the received data to the second application process.","Although this exemplary detailed embodiment of the invention suggests the utilization of SSL sessions for secured communications, it is understood by one of ordinary skill in the art that any known alternative secured communications mechanism may be used. Alternative secured communications mechanisms include existing, future, and derivative implementations of SSL such as TLS. If an alternative secure communications mechanism other than SSL is used then application processes and the TCP\/IP stacks would communicate using the alternative secure communications mechanism's application programming interface (API) and API calls. Similarly, although this exemplary detailed embodiment of the invention suggests the utilization of TCP\/IP for transporting data across a data network, it is understood by one of ordinary skill in the art that any alternative transport protocol may be used. Alternative protocols may also include existing, future, and derivative implementations of TCP\/IP.","Asynchronous data communications refers to an uncoordinated exchange of data such as where the sending of data is at a different temporal interval than the receiving of data. The present invention provides a system and method for computer processes to asynchronously read data across SSL sessions. It includes the ability for processes to close after sending data to an SSL session and to open upon the arrival of data from a data network. A result is that computer system resources previously allocated to maintain processes waiting for data to arrive may be re-allocated to maintain additional active processes.","Consequently, the present invention results in the more efficient use of computer systems and a reduction in the wasteful allocation of computer resources. It is a further benefit because it allows for the exponential scaling-up of the number of concurrent transactions handleable by a given computer system without the costs and logistical complexities that normally accompany the otherwise necessary modifications to a computer system. Another aspect of the invention is to compliment a computer operating system's existing asynchronous I\/O capabilities with application level asynchronous I\/O capabilities. Another aspect of the invention is to supplement efficiency enhancements made to TCP\/IP, such as increasing TCP\/IP maximum throughput, with application level asynchronous I\/O capabilities.","In general, an application process directs an SSL session to listen and wait for incoming data from a data network using an SSL_read API call. The present invention supplements the functionality of the SSL_read API by introducing a new SSL API call, referred to in this exemplary embodiment as SSL_activate_on_receipt (\u201cSSL_AOR\u201d). The SSL_AOR API call includes an input parameter that specifies a second application process as the recipient of data received in response to data sent by the first application process. The first application process terminates prior to the receipt of response data thereby freeing-up computer resources. In addition, the first and second application processes may be either consecutive instances of a single application process or single instances of different application processes.","It is understood that the SSL session and TCP\/IP stack are executing and available for use when data is sent by the first application process and that they continue executing and remain available for use after the first application process terminates. Furthermore it is understood that the first application process terminates prior to the execution of the second application process and that neither the first nor the second application process is active while the system is awaiting response data to arrive over the network. Thus, a method of sharing SSL sessions is also to be implemented. Any method of sharing SSL sessions known to one of ordinary skill in the art may be used including kernel-based or operating-system-based shared SSL sessions as well as the shared SSL sessions disclosed in Ser. No. 10\/010,992, titled \u201cA system and method sharing secure socket layer sessions across multiple processes\u201d, filed concurrently herewith.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"],"b":["1","2","1","2"]},"Interval T:","A first application process  calls an SSL session  and passes data to the SSL session  using an SSL_write API call . The SSL session  receives the SSL_write API call, encrypts the data accompanying the SSL_write API call , and passes a socket write API call  along with the encrypted data to the TCP\/IP stack . The TCP\/IP stack  packages the encrypted data and sends the encrypted data  over a data network .","The first application process  passes an SSL_AOR API call  and any accompanying input parameter to the SSL session  directing that a second application process  is to be executed upon the receipt of data  from the data network . The first application process  terminates, however the SSL session  and TCP\/IP stack  continue executing and remain available for use.","Interval T:","The TCP\/IP stack  receives encrypted data  from the data network . The TCP\/IP stack  creates  the second application program  as a new process. The second application process, which may be either a new instance of the first application process or a different application process, and passes control to the SSL session . The second application process  passes an SSL_read API call  to the SSL session . The purpose of the SSL_read API call is to retrieve incoming data received by the TCP\/IP stack. The SSL session reformats the SSL_read API call into a socket read API call  understandable by the TCP\/IP stack. The SSL session  retrieves the encrypted response data  from the TCP\/IP stack . The SSL session  decrypts the received encrypted data and the decrypted data  is retrieved from the SSL session  by the second application process .","The steps of Intervals T and T maybe repeated as necessary, either concurrently or asynchronously. Interval T shows an additional occurrence of the steps of interval T described above. A second application process  calls an SSL session  and passes data to the SSL session  using an SSL_write API call . The SSL session  receives the SSL_write API call, encrypts the data accompanying the SSL_write API call , and passes a socket write API call  along with the encrypted data to the TCP\/IP stack . The TCP\/IP stack  packages the encrypted data and sends the encrypted data  over the data network .","The second application process  passes an SSL_AOR API call  and an accompanying input parameter to the SSL session  directing that a third application process is to be executed upon the SSL session's  receipt of data from the data network . The second application process  terminates, however the SSL session  and TCP\/IP stack  continue executing and remain available for use.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 2"],"b":["100","102","104","106","108","110","112","114","54","116","54","118","120"]},"The description applying the above embodiments is merely illustrative. As described above, embodiments in the form of computer-implemented processes and apparatuses for practicing those processes may be included. Also included may be embodiments in the form of computer program code containing instructions embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other computer-readable storage medium, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. Also included may be embodiments in the form of computer program code, for example, whether stored in a storage medium, loaded into and\/or executed by a computer, or as a data signal transmitted, whether a modulated carrier wave or not, over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. When implemented on a general-purpose microprocessor, the computer program code segments configure the microprocessor to create specific logic circuits.","While the invention has been described with reference to exemplary embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention, but that the invention will include all embodiments falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
