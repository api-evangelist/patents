---
title: Method for downloading an icon corresponding to a hierarchical directory structure from a directory service
abstract: A distributed directory service for an on-line services network comprises multiple, separate services, referred to as “Directory Service Providers,” running on respective groups of application servers. Each Directory Service Provider stores and provides access to a respective hierarchical directory structure, with nodes of the directory structures representing the various on-line services and other content entities which may be accessed by end users of the network. Junction point nodes are used to provide user-transparent links between the different directory structures, so that the directory structures appear to end users as a single, hierarchical directory. A common application program interface (API) is implemented by all Directory Service Providers, allowing client applications running on computers of end users to access the different directory structures using a common set of software methods. Data items that are shared by multiple nodes, such as icon bitmaps and sound files, are optionally stored by the Directory Service Providers within a shared database (separately from the nodes), and are accessed via special API methods. Various forms of node filtering, including language-based filtering and access rights filtering, are performed by the Directory Service Providers to determine which nodes to show to end users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437431&OS=07437431&RS=07437431
owner: Microsoft Corporation
number: 07437431
owner_city: Redmond
owner_country: US
publication_date: 20040804
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT"],"p":["This application is a divisional of U.S. application Ser. No. 09\/139,090, filed Aug. 24, 1998, entitled \u201cA System For Providing Users With a Filtered View of Interactive Network Directory Obtained From a Remote Properties Cache Provided by an On-line Service\u201d which claims priority from the U.S. application Ser. No. 08\/516,978, now abandoned, filed on Aug. 18, 1995 which is a continuation-in-part of U.S. application Ser. No. 08\/485,493, now abandoned, filed on Jun. 7, 1995.","The present invention relates to computer networks, and more particularly, relates to a system and method for providing users with a directory of the content of a computer network.","On-line services networks commonly provide end users with access to a variety of different types of content entities. These content entities may include, for example, executable programs that can be downloaded to the user's computer, communications services (such as chat and email services) that allow users to communicate with one another, bulletin board system (BBS) services that allow users to review postings on various topics, and publications services that provide users with access to old and new printed publications. The various content entities are typically made available to users via a network directory system which presents users with a hierarchical view of the network's content.","In copending U.S. application Ser. No. 08\/472,807 having the title ARCHITECTURE FOR SCALABLE ON-LINE SERVICES NETWORK, filed Jun. 7, 1995, there is described an on-line services network architecture in which the various user-accessible content entities are distributed on a number of different servers of a network. For example, one group of servers runs a BBS service application (and stores all BBS postings), while another group of servers runs a Chat service. Various benefits are realized by this architecture over conventional, mainframe designs. For example, the network can easily be scaled in size to accommodate increased numbers of users.","The present invention is directed generally to the problem of providing an extensible directory service for a distributed on-line services network, such as a network of the type described in the above-referenced application. One goal of the invention is to provide users with a hierarchical view of a distributed network's content such that the distribution of content entities among different servers is not apparent to the end user. Another goal is to provide a directory that is seen by users as a single, homogeneous directory, rather than a collection of separate directories. Another goal is to provide a directory service that operates efficiently over a low-bandwidth communications channel, so that users do not experience significant delays while accessing the directory service over a wide area network. Another goal is to provide each user with a directory that is tailored to that user's particular access rights on the network. Another goal is to provide a directory service that is highly extensible, so that new content entities and entity types can easily be added as the network evolves. Another goal is to provide a directory service that is highly scalable in both content capacity and user capacity.","In accordance with the present invention, a distributed directory service for an on-line services network is provided. The directory service comprises multiple different services, referred to as \u201cDirectory Service Providers,\u201d running on respective groups of application servers. Each Directory Service Provider stores and provides user access to a respective hierarchical directory structure (preferably in the form of a directed acyclic graph) which represents a subset of the content (i.e., the on-line services and service-related entities) available to users of the network. In a presently preferred implementation, the directory service includes two Directory Service Providers: a BBS service which provides a directory to BBS content, and a \u201cDirsrv\u201d service which provides access to all other types of content. Users that connect to the on-line services network via a wide area network (WAN) can access the directory service to interactively explore and access the content of the network.","Each hierarchical directory structure preferably includes a plurality of interconnected nodes, including leaf nodes, folder nodes and junction point nodes. The leaf nodes represent specific services or service entities (such as Chat rooms, BBS messages, and download-and-run files) which may be accessed by users. The folder nodes represent collections of related leaf nodes, and are generally analogous to directories within a file system. The junction point nodes act as proxies for nodes (referred to as \u201ctarget nodes\u201d) of other directory structures, and provide a mechanism for allowing users to move from one Directory Service Provider to another while exploring the content of the network. The junction point nodes thereby integrate the various directory structures into a single, hierarchical \u201ccontent tree\u201d from the viewpoint of end users.","Each node of the content tree, whether a leaf node, folder node or junction point node, includes a variable-length list of properties. These properties may include, for example, various character string properties which may be viewed by end users (such as a description property which provides a written description of the corresponding content), and various non-viewable properties which contain, for example, information needed to launch the appropriate client and server components of a corresponding on-line service.","A preferred client application of the directory service reconstructs the hierarchical content tree on the screens of users, with the various nodes shown as corresponding icons (which are downloaded from the directory service) and\/or textual names. Using the client application, users can navigate the content of the network by, for example, expanding folder nodes to expose lower levels of nodes, and by requesting the parents of a node to move upward within the content tree. Users can also view properties of nodes, and can open various on-line services (by, for example, double-clicking the icon of a leaf node).","In accordance with one aspect of the present invention, the specific actions that can be performed by a user at a given node depend upon the particular access rights of the user at the node. For example, a user with \u201cview-only\u201d level access rights at a node may only be permitted to view a limited set of properties (such as the description) of the node, while a user with \u201cuser\u201d level privileges may be able to view the properties of the node and open a service that corresponds to the node. Users with \u201csysop\u201d level privileges are advantageously given the capability to remotely edit certain properties of nodes. (As described below, a user may have no access rights at a node, in which case the user will not be able to see even the icon or the name of the node.) The access rights of users may vary from user-to-user and from node-to-node. In the preferred embodiment, the access rights of users are stored within an access rights database, and are obtained by the directory service using an API method which generates user-specific queries of the access rights database.","In accordance with another aspect of the invention, each node has a set of \u201clocal properties\u201d that are stored locally by the respective Directory Service Providers, and may also have one or more \u201cremote properties\u201d that are provided by the remote service to which the node corresponds. Remote properties are advantageously stored by the Directory Service Providers within node-specific remote property caches. When a remote property of a node is requested by a client application, the Directory Service Provider initially checks the node's remote properties cache, and if the property is not found, forwards the request to the \u201cremote\u201d service to which the node corresponds. For example, a request for a remote property of a Chat room node would be forwarded by the Directory Service Provider to the Chat service. When the remote property is returned by the service, the Directory Service Provider returns the property to the client, and caches the property within the node's remote properties cache. The remote properties caches are refreshed periodically to ensure that the remote properties stored therein are up-to-date.","The remote properties feature of the present invention advantageously allows service data that changes frequently (such as the number of occupants of a Chat room) to be provided dynamically by the end services to which the nodes correspond. The remote properties feature is also useful for allowing certain properties of junction point nodes to be stored remotely by the Directory Service Provider of the junction point's target node.","In accordance with another aspect of the invention, a navigation application program interface (API) is provided which allows client applications to request node properties and other information needed to provide users with a navigable, hierarchical view of the content tree. This API is advantageously implemented (at least in-part) by all Directory Service Providers, so that a common set of navigation methods can be used to navigate the entire content tree. The provision of the navigation API facilitates the addition of new Directory Service Providers to the directory service, and thereby provides for a high degree of extensibility.","In accordance with another aspect of the invention, the methods of the navigation API allow client applications to specify the particular properties to be returned, so that only those properties needed by the client applications are transmitted over the WAN. This advantageously conserves WAN bandwidth, and increases performance from the viewpoint of the user.","In accordance with another aspect of the invention, each time a client application requests the properties of a node (by for example, calling a GetChildren method of the navigation API to obtain all children of a current node), the directory service checks the user's access rights to the node. If the user has no access rights with respect to the node (i.e., is not authorized to access the node), the directory service does not return the requested properties, and thereby prevents the user from seeing the node. Each user is thus provided with a user-specific, access-rights-filtered directory, seeing only those nodes (e.g., icons) to which the user has at least some access rights. This feature allows certain content objects (such as private folders of subgroups of users) to be completely hidden from certain classes of users, and thereby provides for a high degree of security against the unauthorized access to such objects.","In accordance with another aspect of the invention, a method is provided for allowing users to specify language and geographic region filters, and for using these filters to limit the nodes that are returned to the client application. In a preferred embodiment, the user-specified filters are passed to the directory service via a \u201clocales\u201d parameter of a navigation API method, and are compared against a locales list which is (optionally) stored as a property of each node. Nodes which do not have the locales (i.e., languages and\/or geographic regions) specified by the user are not returned. The user is thus provided with a customized, filtered directory of the network's content. This feature also conserves bandwidth over the WAN by preventing downloads of nodes in which the user has no interest.","In accordance with yet another aspect of the invention, the Directory Service Providers optionally store certain types of shared data items (i.e., data items that are shared by multiple nodes) within a shared database, rather than as properties of the nodes. Duplicate copies of shared data items on the same application server are thereby avoided. In the presently preferred implementation, icon bitmaps, sound files, banner objects and download-and-run files are stored within the shared database, and the nodes of the content tree have corresponding properties (Icon ID, Soundfile ID, Banner ID and Drfile ID) which can be used to reference these shared data items. Thus, for example 10 different nodes may share the same icon, in which case each such node will have the ID of the shared icon stored as an Icon ID property. Special methods of the navigation API provide for the downloading of the shared data items and for the enumeration of the shared data items of a given type.","Reference numbers in the drawings have three or more digits; the two least significant digits are reference numbers within the drawing, and the more significant digits indicate the figure in which the item first appears. For example, reference number  refers to an item which is first shown in . Like reference numbers indicate like or functionally similar components.","Described herein is an extensible directory service which includes multiple, distinct services running on separate groups of application servers. Although the directory service is described with reference to a preferred embodiment of a distributed on-line services network, it will be apparent to those skilled in the art that various aspects of the directory service are applicable to other types of computer networks and network configurations.","For convenience, the description of the preferred embodiment is arranged within the following eleven sections:\n\n","Throughout the following description, the first letters of the names of specific services on the network will be capitalized (for example, \u201cChat,\u201d \u201cBBS,\u201d and \u201cDirectory Service\u201d). Additionally, the names of specific software methods and interfaces will be provided in mixed case (for example, \u201cGetChildren,\u201d \u201cGetAccountRights\u201d and \u201cTreeNav.\u201d)","1. Architectural Overview ()",{"@attributes":{"id":"p-0035","num":"0045"},"figref":"FIG. 1","b":["100","102","104","106","106","108","102","104","108","104"]},"The host data center  comprises a plurality of application servers  connected to one or more high speed local area networks (LAN) . The application servers  are preferably Pentium-class (or better) microcomputers which are scalable to at least four central processing units (CPUs), and which run the Microsoft Windows NT operating system available from Microsoft Corporation. Each application server  typically has at least 128 MB of random-access memory (RAM) and at least 4 GB of disk space.","The application servers  are arranged into service groups (also referred to as \u201cAppGroups\u201d) that correspond to specific on-line services. Three example service groups are shown in : a Chat service group , a Bulletin Board System (BBS) service group , and a Dirsrv service group . Additional service groups (not shown) are provided to implement other on-line services, including a Mediaview service which provides multimedia titles to end users, a mail service, a Component Manager service which allows users to update client software when new releases become available, and a File Transfer Manager (FTM) service. Other on-line services may include, for example, an interactive games service, a weather service, and a World Wide Web browsing service. A service group can have as few as one application server . System administrators can adjust the number of application servers  in a given service group to accommodate the current usage level of the corresponding service. For example, application servers  can be added to the BBS service group  to increase the user capacity of the BBS service.","Also connected to the LAN  are multiple Gateway microcomputers  (hereinafter \u201cGateways\u201d) which link incoming calls from end users to the application servers . The Gateways  are preferably Pentium-class microcomputers which are scalable to at least four CPUs, and which run the Microsoft Windows NT operating system. Each Gateway  typically has at least 64 MB of RAM and at least 2 GB of disk space, and is capable of supporting approximately 1000 simultaneous user connections.","Also connected to the LAN  are multiple security servers . The security servers  are preferably Pentium-class microcomputers which are scalable to at least four CPUs, and which run the Microsoft Windows NT operating system. Each security server  maintains a relational database  which contains the access rights data for all users of the network . Each security server  runs Structured Query Language (SQL) code to provide access to its respective access rights database . SQL is a language standardized by the International Standards Organization (ISO) for defining, updating and querying relational databases. A query to the access rights database  can emanate either from one of the application servers  (when, for example, a user attempts to access a content entity which is stored by the application server ), or by one of the Gateways  (when a user attempts to open an on-line service). Each machine ,  which generates queries of the access rights databases  preferably implements an access rights cache for locally storing user-specific access rights information obtained from the database .","Various other types of servers and other microcomputers are connected to the LAN  but are not shown in . For example, billing and logon servers are provided to record billable events and to handle user logon, respectively. Further, Arbiter microcomputers are provided to perform transaction replication services for certain service groups (including both the Dirsrv service group  and the BBS service group ), allowing the application servers  of such service groups to store identical copies of the same service content data.","It is envisioned that the host data center  may have on the order of one hundred Gateways , and between several hundred and several thousand application servers . A host data center of this type will be able to handle millions of subscribers and tens of thousands of simultaneous user logon sessions. Advantageously, the processing capacity of the host data center  can easily be increased (to support new services, and to support increases in the number of subscribers) by connecting additional Gateways  and application servers  to the LAN , and by adding additional local area networks. Further, additional host data centers  can be provided at different geographical locations to accommodate a wide geographic distribution of subscribers.","The on-line services offered to end-users of the network  are preferably in the form of client-server application programs or \u201cservice applications\u201d. Each service application includes a server portion that runs on one or more of the application servers , and at least one corresponding client portion (also referred to as a \u201cclient application\u201d or \u201cclient\u201d) that runs on a microcomputer  of an end user. In the presently preferred embodiment, the client applications are in the form of Microsoft Windows 95 executables, and the server portions are implemented as dynamic link libraries running under the Microsoft Windows NT operating system.","With reference to , the server portions of the various on-line services are implemented on the application servers  of the respective service groups , , . Each application server  of a given service group separately runs the same server application. For example, each application server  of the Chat service group  runs CHAT.DLL, which is a dynamic link library that implements the server portion of the Chat service. Similarly, each application server  of the BBS service group  runs a BBS dynamic link library, and each application server  of the Dirsrv service group  runs a Dirsrv dynamic link library. Although each application server  is shown in  as being allocated to a single service group, a single application server can simultaneously run multiple service applications, and can thus be allocated to multiple service groups. For example, a single application server  could run both the Chat and BBS dynamic link libraries and thus be allocated to both the Chat and BBS service groups , .","During a typical logon session, a client microcomputer  will maintain a communications link with a single Gateway , but may access multiple on-line services (and thus communicate with multiple application servers ). To initially access a service, an \u201copen\u201d request is generated on the client microcomputer  and sent to the Gateway  that is handling the logon session. The Gateway  then selects a single application server  (of the appropriate service group) to handle the service session, and opens a pipe (e.g., , multiple BBS service groups may be formed, with each corresponding, for example, to a particular topical area. In the preferred implementation depicted by , replicated copies of all BBS content (e.g., BBS messages and folders) are stored on each application server  of the BBS service group . This allows the BBS application servers  to independently process message read requests from end users. Replication of BBS content is accomplished using the Arbiter transaction replication service. A preferred embodiment of the Arbiter service is described in commonly-assigned copending U.S. application Ser. No. 08\/485,493, filed Jun. 7, 1995, having the title TRANSACTION REPLICATION SYSTEM AND METHOD FOR SUPPORTING REPLICATED TRANSACTION-BASED SERVICES, which is incorporated herein by reference.","With reference to , one of the application servers  of the BBS service group  is preferably configured as an Internet feed server . The BBS Internet feed server  reads Internet newsgroup messages and posts these messages (by submitting update transactions to the Arbiter service) within the BBS service group , thereby providing users with access to such newsgroup messages. The BBS Internet feed server  is also used to post messages to the Internet.","Chat rooms and BBS messages are two types of content objects that may be accessed by users. The ability to access a given content object, and the access rights of the user with respect to that object, may vary from user to user. Using a Chat room object as an example, some users may be \u201cparticipants\u201d who can participate in the conference, while other users may be \u201cviewers\u201d who can only view the text of the conversation. One or more users may further be designated as a \u201chost\u201d of the conversation. A host normally has the responsibility of moderating the conversation, and has the ability to modify the access rights of members of the conversation with respect to the Chat room.","2. Overview of Directory Service and Related Components ()","The Directory Service is an extensible on-line service that contains databases which describe the various content entities (i.e., the on-line services and associated data entities) of the network  that are accessible to users. Access to these databases is provided via navigation and edit application program interfaces (APIs) of the Directory Service. Through these interfaces, users are provided with a hierarchical, navigable view of the various content objects available on the network , and are provided with a mechanism for accessing the content objects.","The Directory Service is advantageously distributed among different on-line services, which are referred to herein as \u201cDirectory Service Providers.\u201d Each Directory Service Provider provides a directory to a subset of the content of the network . In a presently preferred implementation described herein, the Directory Service is implemented by two Directory Service Providers, the Dirsrv service and the BBS service. As will be apparent from the description that follows, however, the Directory Service supports the addition of an indefinite number of other Directory Service Providers. Accordingly, the preferred embodiment will be described herein in terms of both (1) an extensible Directory Service architecture which supports an indefinite number of Directory Service Providers, and (2) a two-Directory-Service-Provider implementation of the Directory service.","Each Directory Service Provider maps its content into a hierarchical directory structure, which is stored within a corresponding \u201cprovider namespace.\u201d In accordance with one aspect of the present invention, a seamless interface is provided to allow the user to transparently move from one directory structure to another, so that the multiple directory structures (of the multiple Directory Service Providers) appear to the end user as a single directory structure, and so that the Directory Service appears as a single service. This feature of the invention is described in detail below.","With reference to , the Directory Service (abbreviated as \u201cDS\u201d in ) includes the Dirsrv service (implemented on the Dirsrv service group ) and the BBS service (implemented on the BBS service group ). The Dirsrv service is the \u201croot\u201d of the Directory Service, and provides users with a hierarchical, navigable view of all non-BBS content objects (such as Chat rooms and Mediaview titles). The BBS service provides users with a hierarchical, navigable view of all BBS content objects.","With reference to , which illustrates the general organization of content objects as maintained by the Directory Service, each Directory Service Provider maintains a respective directory structure ,  that represents a hierarchy of content objects. Each directory structure ,  is comprised of multiple interconnected nodes, with each node representing a corresponding content object (or collection of content objects) which may be accessed via the corresponding Directory Service Provider. The Dirsrv directory structure  is stored within a Dirsrv namespace , and is stored on the application servers  of the Dirsrv service group . The nodes of the Dirsrv directory structure  represent the content objects which may be navigated and accessed via the Dirsrv service. The BBS directory structure  is stored within a BBS namespace , and is stored on the application servers  of the BBS service group . The nodes of the BBS directory structure  represent the content objects which may be navigated and accessed via the BBS service.","The Dirsrv and BBS namespaces  and  are both \u201cprovider namespaces.\u201d As described below, a seamless interface between the Dirsrv and BBS services allows users to transparently traverse between the two directory structures , , so that the Directory Service appears as a single service to end users, and so that the two directory structures ,  are seen by users as a single tree-like directory structure.","Advantageously, additional Directory Service Providers (and additional provider namespaces) can be added to the Directory Service. For example, an investment service that provides data on stocks and mutual funds could be added which acts as a Directory Service Provider with respect to its own content, and this content would be stored within a separate directory structure that is linked to the other directory structures , . The investment service would preferably be implemented on its own, separate group of application servers .","As will be apparent from the following description, the addition of new Directory Service Providers increases the content capacity (i.e., the total number of nodes which can be stored) of the Directory Service. In addition to this ability to increase the content capacity of the Directory Service, the capacity of a given Directory Service Provider to service users can advantageously be increased by the addition of application servers  to the corresponding service group.","In accordance with one aspect of the present invention, the Directory Service is accessed via a navigation API, referred to herein as the \u201cTreeNav\u201d API, and via an edit API, referred to herein as the \u201cTreeEdit\u201d API. These APIs may be implemented in whole or in part by the different Directory Service Providers. As will be apparent to those skilled in the art, the provision of the TreeNav and TreeEdit APIs greatly facilitates the addition of new Directory Service Providers, and thereby provides for a high degree of extensibility.","With further reference to , each directory structure ,  may have thousands of nodes, and could thus represent thousands of content objects. The nodes can generally be thought of as \u201cservice areas\u201d that can be entered by users. Links between nodes represent paths that can be taken by users in traversing the hierarchical structures ,  from one service area to another. The specific nodes and links shown in  are provided to show the general manner in which nodes are arranged, and do not represent an existing directory structure.","In accordance with the present invention, the Directory Service Providers are free to use any database arrangement for the storage of their respective nodes. In the preferred embodiment, the Directory Service Providers store their respective nodes as node files of a filesystem, with each node file containing a list of node properties that represents a single node. Various other database arrangements are possible. For example, a Directory Service Provider could be configured to store its nodes within an SQL (Structured Query Language) database.","The hierarchical directory structures ,  are preferably in the form of directed acyclic graphs. As is well known in the art of file systems, a directed acyclic graph structure is more flexible than a strict tree structure, since a directed acyclic graph allows a node to have multiple parent nodes. (A \u201cparent\u201d of a given node is any node that is both (1) directly connected to the given node, and (2) at a higher level in the hierarchy than the given node. Similarly, a \u201cchild\u201d is any node that is both (1) directly connected to the given node, and (2) at a lower level than the given node.) This characteristic of the directory structures  and  is illustrated by nodes  and , each of which has two parent nodes. In other embodiments of the invention, a strict tree structure may be used.","With reference to , the extensible, composite structure  formed by the two directory structures  and  (and other directory structures which may be added) will be referred to herein as the \u201ccontent tree.\u201d This use of the term \u201ctree,\u201d however, is not intended to suggest that the composite structure  is a strict tree structure.","As will be appreciated by those skilled in the art, the provision for multiple Directory Service Providers that are seamlessly linked to one another advantageously allows the task of providing a directory service to be distributed among multiple, different services. This is particularly advantageous when the volume of the content on the network  is sufficiently high such that a single service cannot efficiently store and provide access to all node. Conversely, the ability to distribute the Directory Service among a variable number of services enables the content tree  to be expanded (by the addition of new nodes) without a corresponding degradation of performance.","As will further be appreciated, because different Directory Service Providers store and provide access to different types of nodes, each Directory Service Provider can be tailored to the specific requirements of the type or types of nodes stored by that Directory Service Provider, without concern for the specific requirements of other types of node. By way of specific example, only the BBS service needs to include code for monitoring and deleting old BBS message nodes, since the BBS service is the only Directory Service Provider that stores BBS message nodes. This feature of the present invention will be apparent from the description that follows.","In the preferred embodiment, the content tree  is displayed to the end user via a network shell application which runs on the client microcomputers  of end users. The network shell is the primary client of the Directory Service. A preferred implementation of the network shell is described in a commonly-assigned U.S. application having the title ON-LINE NETWORK ACCESS SYSTEM, filed Jul. 17, 1995, which is incorporated herein by reference. In the preferred embodiment, the network shell is an integral part of the Microsoft Windows 95 Explorer program (hereinafter \u201cthe Explorer\u201d), which is described in 95, Microsoft Press, 1994. As will be apparent to those skilled in the art, other types of shell applications could be used. As described below, a graphical user interface of the Explorer displays the content objects as a logical extension of the user's hard drive, with nodes represented by corresponding icons on the user's screen.","In accordance with the present invention, the content tree  includes three different types of nodes: leaves, folders and junction points. A set of flags stored in association with each node identifies the node as one of these three types. Leaves (or \u201cleaf nodes\u201d) are nodes that both (1) cannot have children and (2) do not serve as junction points. The leaf nodes in  are nodes -,  and  (assuming that these nodes cannot have children). Leaves represent the actual services within network . Examples of leaves include Chat rooms, BBS messages, Mediaview titles and download-and-run files. When the user clicks on a leaf node (by double clicking on the double corresponding icon from a window of the Explorer), the corresponding service-related action is taken. For example, if the user double clicks on a Chat room icon, the Chat service is opened and the user is added to the corresponding Chat conference. When the user double clicks on an icon for a download-and-run file, the file is downloaded to the user's computer .","Folders are nodes that both (1) can have children, and (2) do not serve as junction points. The folder nodes in  are nodes - and -. Folder nodes normally represent collections of other content objects, and are used to organize the content of the network. For example, a folder node may correspond to a BBS folder on a particular topic, or may represent a collection of BBS folders and Chat rooms on a related topic. Folder nodes are also used to generally arrange content objects according to language. For example, node  may be an english folder containing content objects that are primarily in english, and node  may be a spanish folder containing content objects that are primarily in Spanish. Folder nodes are generally analogous to the directories of a file system.","Junction points are nodes that serve as proxies for nodes in other provider namespaces and that allow the user to seamlessly traverse between provider namespaces. The only junction point shown in  is node , which serves as a proxy for BBS folder node  (referred to as the \u201ctarget node\u201d). When, for example, the user double clicks on node , the Explorer launches a BBS navigator and shows the user the children of node . Although only a single junction point is shown in , many junction points may be provided within the content tree . Junction points are discussed in detail below under the heading JUNCTION POINTS.","With reference to , a graphical user interface of the Explorer displays the content tree  as a logical extension of the user's hard drive. In the window configuration shown, the left-hand window pane  displays a hierarchical map  of folder nodes, and the right-hand window pane  displays the icons  and names  of the content objects within a selected folder node. The hierarchical map  corresponds to a portion of the content tree . In the example shown in , the map  includes three folder nodes with names of \u201ccategories (US),\u201d \u201cMember Assistance (US),\u201d and \u201cFavorite Places,\u201d and the right-hand window pane  displays the contents of the \u201cCategories\u201d folder (which has been selected by the user from the left-hand pane ).","Using the Explorer, users can browse the content tree  and can access the various content objects. Various actions are available to the user to reveal different levels of nodes. For example, the user can click on a folder displayed in the left pane  to \u201cexpand\u201d the folder, or can click on a \u201cparent folder\u201d button (not shown) to move upward through the content tree. To access a content object (to, for example, enter a specific on-line service), the user can double click on the icon for that object. Because the content tree  is preferably structured as an acyclic graph, the user may take different paths to get to the same content object. The particular actions which can be performed by a user upon accessing a node depend upon the user's access rights with respect to the node, which are stored within the access rights databases  on the security servers . Access rights of users can advantageously be specified within the database on a single-user basis.","In accordance with one aspect of the present invention, the Directory Service only \u201cshows\u201d to each user those nodes that the user is authorized to access, or equivalently, those nodes to which the user has access rights. (In the preferred embodiment, the lowest level of access rights a user can have at a node is \u201cviewer-only.\u201d A user with viewer-only level access rights at a node can view certain properties of the node, but cannot either modify the properties or open the corresponding service.) Thus, each user is provided with a filtered view of the actual content of the network , seeing only the icons of the nodes that the user is authorized to view or otherwise access.","This feature of the invention advantageously allows certain nodes and content objects to be completely hidden from certain classes of users. For example, this feature may be used to hide from the view of regular users a BBS folder (and its contents) that has been created for private correspondence between members of a family, so that the only users who can see the folder from the Explorer are the designated family members. Because only those authorized to access each node can see the node, a high degree of security is provided against unathorized accesses.","In the preferred embodiment, a Sysop Tools client application (which is preferably integrated with the Explorer) allows authorized end users to remotely edit the content tree . Edits to the content tree can also be made locally (i.e., from within the host data center ) by system administrators. Edits to the content tree  are made via the methods of the TreeEdit API, which are implemented by the various Directory Service Providers. These methods include methods for adding and deleting nodes, and for editing the properties of existing nodes. The capability of a user to edit the content tree  is specified by the user's access rights. To determine the access rights of users, the Directory Service Providers generate user-specific queries of the access rights database  (using a GetAccountRights API, as described below under the heading LOCALES AND ACCESS RIGHTS FILTERING OF NODES).","Users that have the capability to edit the content tree  are generally referred to as \u201csysops,\u201d although different levels of sysops are defined. Advantageously, different users can have different edit capabilities with respect to different nodes. For example, one user may have node edit privileges (or \u201csysop privileges\u201d) only at a particular Dirsrv folder node (plus any children of the Dirsrv folder node), while another user may have node edit privileges only at a particular BBS folder node (plus any children of the BBS folder node).","As a user moves from node to node of the content tree  using the Explorer, the Explorer requests the node-specific access rights of the user from the Directory Service. If these access rights indicate that the user has sysop privileges at a particular node, the Explorer advantageously displays a set of node edit menu items, allowing the user to remotely edit the properties of the node using the TreeEdit API. A preferred set of tools for remotely editing the content tree  is described in a concurrently filed, commonly assigned U.S. application having the title SYSTEM AND METHOD FOR EDITING CONTENT IN AN ON-LINE NETWORK, which is incorporated herein by reference.","As pictorially illustrated in , the Dirsrv directory structure  is stored on each of the application servers  of the Dirsrv service group . Similarly, the BBS directory structure  is stored on each of the application servers  of the BBS service group . Accordingly, any single application server  within the Dirsrv service group  can provide a directory of all of the nodes within the Dirsrv namespace , and any single application server  within the BBS service group  can provide a directory of all of the nodes within the BBS namespace . As with other service groups within the host data center , each service group ,  may have as few as one application server .","As indicated above, the Directory Service Providers may store their respective nodes as node files, or may use an alternative database arrangement. In the preferred embodiment, each node includes a listing of the parents and children of the respective node, and thereby specifies the position of the node within the content tree . With reference to , each node also includes a variable-length list of node properties, as illustratively shown for node . These node properties essentially define the corresponding content object (or \u201cservice area\u201d), and specify how the content object may be accessed.","The node properties stored by the Directory Service Providers vary according to node type. For example, some properties are applicable only to folder nodes, some are applicable only to leaf nodes, and some are applicable to both leaf and folder nodes. Further, some properties are service-specific, meaning that they apply only to a certain service. An example of a service-specific property is a Chat room \u201cmaximum occupancy\u201d property, which specifies the maximum number of users that can concurrently participate in a corresponding Chat conference. Further, some properties can be viewed by regular users (i.e., non-sysops) via a properties dialog box of the Explorer, while other properties are hidden from regular users, and can be seen only by sysops and\/or system administrators.","In accordance with the present invention, a set of generic (i.e., non-service-specific) properties is defined to allow Directory Service Providers to store certain types of information. The mnemonic names and descriptions of these generic properties are provided below. Provided in parenthesis following each name and description is a list of codes which identify certain characteristics of each generic property. These codes are defined in Table 1.",{"@attributes":{"id":"p-0077","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"CODE","MEANING"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"V\/NV","Property is\/is not visible to users via the"]},{"entry":[{},{},"properties dialog box of the Explorer"]},{"entry":[{},"F","Property applies to folder nodes"]},{"entry":[{},"L","Property applies to leaf nodes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["Name. This is a human readable name, which can be displayed by a client (i.e., client application) of the Directory Service. For example, a folder node could have the name \u201cHealth & Fitness,\u201d and could have children folder nodes with names of \u201cHealth & Fitness Chat\u201d and \u201cHealth & Fitness BBS.\u201d Every folder node and every leaf node has a name. For junction point nodes, the name of the target node is used (i.e., the property is stored remotely as a local property of the target node). In the preferred embodiment, the Explorer (which, as indicated above, is the primary client of the Directory Service) displays the name along with or in place of the corresponding icon. (V, F, L).","Directory Entry ID (DEID). This is a 64-bit number which uniquely identifies a node within its respective provider namespace. (A provider namespace can thus have up to 2nodes.) Every node has a DEID. (NV, F, L).","Application ID (APPID). This is a 32-bit number that is required of every node. For leaf nodes, this number identifies the client application associated with the node, and is used by the Explorer to launch this client application when the user double-clicks on the node. (The client application then opens a pipe to the associated service.) For folder nodes, the APPID indicates the provider namespace (e.g., Dirsrv or BBS) in which the node resides. (The Directory Service can thus support up to 2different namespaces.) For junction point nodes, the APPID indicates the provider namespace in which the target node resides. (NV, F, L)","Service Group ID. (Also referred to as the data set ID, or \u201cDset\u201d.) This is a 16-bit number which identifies the service group (, , etc.) of the Directory Service Provider in which the node resides. Every node has a service group ID. Each Directory Service node is uniquely identified globally by the combination of the node's DEID, APPID and Service Group ID. (NV, F, L).","Icon ID. This is a 32-bit number (in the form of a \u201cshabby ID,\u201d as described below) which identifies the icon to be displayed by the Explorer (or other client) as a representation of the node. Icon bitmaps are stored by the Directory Service, and are sent over the network upon request by the Explorer. Multiple nodes may have the same icon. (NV, F, L).","Flags. This is an 8-bit value which indicates whether the node is a folder, leaf, or junction point. Every node has the Flags property. (NV, F, L).","Security Token. This is a 32-bit value which identifies a content category to which the node has been assigned for security (i.e., access rights) purposes. When a user attempts to view or access a node, the node's security token and the user's 32-bit account number are used to determine the user's access rights with respect to the node. Every folder node and every leaf node has a security token. For junction point nodes, the security token of the target node is used. (NV, F, L).","Description. This is a human-readable textual description of the service area corresponding to the node. The Directory Service places no limitation on the length of the description. (V, F, L).","GoWord. This is an optional property of nodes in provider namespaces that support GoWord searches. GoWords are in the form of character strings. If a Directory Service Provider supports GoWord searches, then the GetDeidFromGoword API (discussed below) can be used to retrieve the DEID of the node with a particular GoWord, and the node can then be directly accessed (assuming the user is authorized to access the node). Two nodes within the same provider namespace cannot have the same GoWord. (V, F, L).","Search Keywords. These are search words which may optionally be specified by sysops to permit keyword searching for nodes on particular topical areas. Multiple search keywords may be specified for a single node. The search keywords are cross-referenced to the corresponding node by a \u201cfind\u201d service. (V, L, F).","Owner. This is a 32-bit vendor ID which identifies the entity which provides or derives revenue from the corresponding service. (V, F, L).","Sysops. These are the names of the users that are sysops of the node. (V, F, L).","Pricing. This is a 32-bit value which indicates the cost to the user, if any, associated with accessing the corresponding service area. For example, the pricing property of a node for a Chat room specify a cost to the user of $1.50 per use, or $2 per hour. The general format of the pricing property is described below. (V, F, L).","Rating. This is a 32-bit value which specifies a suggested appropriate audience for the content which corresponds to the node. Ratings include \u201cGA: General Audiences,\u201d \u201cMA-13: Mature Audiences,\u201d and \u201cAO: Adults Only.\u201d (V, F, L)","Run Info. This is a localized string containing miscellaneous run-time information needed (for certain nodes) to start or open a pipe to a service. For example, the property could contain a filename or other moniker that specifies a file on an application server . (NV, L).","Locales. This optional property is in the form of a string of locales identifiers (\u201cLCIDs\u201d) that identify the locales (i.e., languages and\/or geographic regions) to which the node has been customized (or in which the node is viewable). For example, the locales property of a node that includes a textual description (or audio narration) that is in spanish may have only the LCID for \u201cspanish\u201d (which may be set by a sysop who creates the node); the locales property of a node for a rock music audio clip may include the LCIDs of many different languages and\/or regions. In one embodiment, the locales property may be used to specify a geographic region to which the content object applies. Thus, for example, the locales property of a \u201cclassified ads\u201d BBS node that is directed to residents of Daytona Beach Fla. may have the LCID for Daytona Beach. As described below, the Directory Service provides a mechanism for allowing the client to specify the locales that the user is interested in, and for filtering out any nodes that are not in any of the user-specified locales. This advantageously prevents the unnecessary downloading and viewing of nodes in which the user has no interest. (V, F, L).","Junction. For junction point nodes, this is the DEID of the target node. (NV).","Parents. This is the number of parents of the node. The Directory Service determines this number on-the-fly (rather than storing the number) upon request from the client. (NV, F, L).","Children. This is the number of children of the node. The Directory Service determines this number on-the-fly (rather than storing the number) upon request from the client. (NV, F).","Access Rights. This is a sixteen bit value, retrieved by the Directory Service from an access rights database , which specifies the access rights of a particular user at the node. Each defined bit of this value serves as a privilege level flag for indicating whether or not the user has a particular privilege level at the node. In the preferred embodiment, the user can have one or more of the following privilege levels: viewer, observer, user, host, sysop, sysop manager, supersysop. Although the access rights value is technically not a property of the node (since the value may vary from user to user), it is made available to the client by the Directory Service as a node property. (NV, F, L).","Soundfile ID. This is a 32-bit number (in the form of a shabby ID, as described below) which identifies a sound file that corresponds to the node. The various sound files are stored by the Directory Service separate from the node properties, and are provided to the client upon request. Each sound file specifies a corresponding sound or set of sounds that may be generated by the client microcomputer  when the user accesses the node. (NV, F).","Banner ID. This is a 32-bit number (in the form of a shabby ID, as described below) which identifies a banner object for providing a folder-specific banner within the right window pane  of the Explorer when the user opens a folder. Various graphics formats for specifying banners are supported, including bitmaps and various metafile formats. (A metafile is a standard Microsoft Windows graphics object that consists of lists of primitive graphics commands.) Banner objects are stored by the Directory Service separate from the node properties, and are provided to the client upon request. (NV, F).","Drfile ID. (Download-and-run file ID). This is a 32-bit number (in the form of a shabby ID, as described below) which identifies a download-and-run file for the node. In the preferred embodiment, download-and-run files are small files (usually less than 5 kilobytes) that sysops can place in their folders to provide information (such as information on the standards of on-line conduct) to users. The various download-and-run files are stored by the Directory Service separate from the node properties, and are provided to the client upon request. (NV, L)."]}}}},"Throughout this detailed description, the first letter of each of the above-listed mnemonic property names is capitalized to emphasize that these names correspond to defined properties. Further, acronyms (such as DEID, and APPID) of mnemonic property names will be fully capitalized.","In addition to the properties listed above, various other generic properties are possible. For example, generic properties may be included to specify the creation date of the node, the date\/time of the last modification to the node, the time frame (e.g., 12th-century) to which the content of the node relates, the version of the node, or the DEIDs of other nodes to which the present node is related.","As indicated by the foregoing, the only properties that are required of all nodes in the preferred embodiment are the DEID, APPID, Service Group ID and Flags properties. The Name and Security Token properties are required of all leaf and folder nodes, and the Junction property is required of all junction point nodes. The remaining properties are optional, meaning that they may or may not be specified (depending upon the particular service with which the node is associated). As described below, a set of node editors are provided to inform the Explorer, for each service, of the properties which may be entered by sysops for the nodes of that service. These node editors also allow nodes to have service-specific properties, such as the above-mentioned maximum occupancy property. Typically, the set of properties that may be specified for a given node type (such as Chat room leaf nodes, or BBS folder nodes) includes a subset of the above-listed generic properties, and may include one or more service-specific properties.","As will be recognized from the foregoing, each node is simply a list of properties stored by or otherwise available via the Directory Service. This list of properties describes the corresponding service area (or content object) on the network, and in the case of leaf nodes, provides the information needed to enter the service area. By way of example, the property list for a Chat room node (which is one type of leaf node) will typically include user-readable information about the Chat room, and will include the information needed by the Explorer to launch the Chat client application and add the user to the Chat room.","The Directory Service operates generally as follows. In response to requests from the client (which, in the preferred embodiment, is the Explorer), the Directory Service sends node properties over the WAN  to the client microcomputer , allowing the client to reconstruct user-selected portions of the content tree  (as shown in  for the Explorer) on the user's screen, and\/or allowing the client to display node properties (such as the GoWord for the node) to the end user. To avoid unnecessary transfers of information over the WAN , the Directory Service advantageously returns only those properties that are specifically requested by the client.","Assuming that the Explorer is used as the client, when the user double clicks on a folder node (i.e., the icon for the folder node) from the right pane , or expands a node in the left pane , the Explorer uses a GetChildren API to generate a request to the Directory Service for the children of the folder node, specifying as parameters of the API the DEID of the folder node plus the names of the specific properties needed to display the children of the folder node. (The specific properties requested by the Explorer with such GetChildren calls are hard coded into the Explorer. In a preferred embodiment, the requested properties are the DEID, APPID, Name, Flags, Icon ID, Service Group ID, and the user's Access Rights.)","Various user actions cause the Explorer to generate requests for different node properties. For example, from the Explorer, a user can select a node and then select the \u201cproperties\u201d command; this causes the Explorer to open the \u201cproperties\u201d dialog box, which allows the user to select a \u201cproperties sheet\u201d which lists the properties to be retrieved by the Explorer. The user may then specify, for example, \u201cgeneral\u201d properties sheet which includes the \u201cRating\u201d and \u201cPricing\u201d properties of the node, causing the Explorer to generate a request for these properties. The TreeNav methods used by the Explorer for requesting properties and other information from the Directory Service are described below.","When the user double clicks on a leaf node from the Explorer, the Explorer initiates a service session with the corresponding service. To initiate the service session, the Explorer initially uses the APPID of the leaf node to identify the service application to be invoked. Once the identity of the appropriate executable file has been determined, the Explorer launches the client application for the service, and passes to the client application the DEID and the service group ID of the node. The client application then performs the appropriate service-related action. For example, if the node is a Chat room, the Chat client application uses the node's DEID to connect to the corresponding Chat room.","Before \u201cshowing\u201d a node to the end user (by returning the requested properties of the node to the client), the Directory Service uses a GetAccountRights API to determine the access rights of the user with respect to the node to thereby determine whether the user is authorized to access the node. This access rights information is stored within the access rights database  on each security server . If the user is not authorized to access the node, the Directory Service does not return the properties of the node, and the node is not displayed to the user. By way of example, suppose that a user double clicks on the icon corresponding to node  in . This causes the Explorer to generate a GetChildren call to the Directory Service to obtain the children (i.e., enumerated properties of the children) of node . As parameters of the GetChildren request, the Explorer specifies the DEID of node , and specifies the properties (normally the Name, DEID, APPID, Service Group ID, Flags, Icon ID and Access Rights) to be returned for each child node. If, for example, the user is authorized to access node , but is not authorized to access node , the Directory Service will return only the properties of node . Thus, no properties of node  will be downloaded to the Explorer, and node  will not appear in the Explorer window on the user's screen.","To determine the user's access rights with respect to the node, the Directory Service initially reads the 32-bit Security Token associated with the node (which, as described above, is stored as a node property). The Directory Service then generates a GetAccountRights call, specifying as parameters of the call the node's Security Token and the user's 32-bit account number. The GetAccountRights API returns either a 16-bit access rights value which indicates the user's access rights with respect to the node, or else returns a code indicating that the user is not authorized to access the node. The GetAccountRights API includes code which generates queries to the access rights databases  to obtain user-specific access rights lists, and also includes code which implements an access rights cache for locally storing these user-specific lists. The GetAccountRights API is further described below.","With the exception of the Access Rights property, which is a special case, all of the above-listed generic properties are \u201clocal properties,\u201d meaning that they are stored (or generated on-the-fly) locally (i.e., on the same application server ) by the Directory Service Provider which stores the node. In accordance with one aspect of the present invention, a node may also have one or more \u201cremote properties,\u201d which are properties that are stored or generated by the service (such as Chat) with which the node is associated (as indicated by the node's APPID). When a remote property is requested by the client, the Directory Service Provider retrieves the remote property (via a remote procedure call, or \u201cRPC\u201d) from the associated service (which is normally implemented on a separate application server ), and then returns the remote property to the client. To increase performance, the Directory Service also implements a remote properties cache (described below) for locally caching recently-retrieved remote properties. As described below under the heading \u201cJUNCTION POINTS\u201d, the Name and Security Token properties of a junction point node are always stored remotely by the Directory Service Provider that stores the corresponding target node.","The provision for the retrieval of remote properties advantageously allows certain types of information to be stored or generated by the end services (such as Chat or Mediaview), rather than by the Directory Service Providers. This is particularly useful for information that changes dynamically. One example of a node property which may advantageously be stored remotely is a \u201cCurrent Occupants\u201d property of a Chat room, which indicates the current number of participants in the corresponding Chat conference. Because the Current Occupants property changes frequently, it would be inefficient to store this property with the node; doing so would require frequent update transactions over the LAN .","In accordance with one aspect of the present invention, a mechanism is provided which allows Directory Service Providers to maintain respective databases of data entities that are shared by multiple nodes. These shared data entities are referred herein as shared blocks of bytes, or \u201cshabbies.\u201d In the presently preferred embodiment, four types of data entities are stored as shabbies: icon bitmaps, download-and-run files, sound files, and banner objects. As illustrated in  for one preferred embodiment, only the Dirsrv service implements a shabby database . Each shabby within the database  is specified by a unique 32-bit shabby ID (\u201cSHID\u201d).","The ability for a Directory Service Provider to maintain a database of shabbies separate from the nodes of the Directory Service Provider is provided through special TreeNav and TreeEdit methods that may be used to create, delete, modify and download shabbies, and by the provision of certain node properties (such as the \u201cIcon ID\u201d property) that allow specific shabbies to be referenced by nodes. Because shabbies are stored separately from the node properties, there is no need to store multiple copies of each shabby, even though multiple nodes may share the same shabby. By way of example, suppose that the same icon is used for all Chat rooms, and that 30 Chat room objects currently exist within the Dirsrv namespace . Rather than storing 30 copies of the bitmap for the Chat room icon, the Dirsrv service stores the bitmap as a shabby (within the Dirsrv shabby database ), and stores the shabby ID of the bitmap as the Icon ID property each Chat room node. The preferred methods by which shabbies are stored by Directory Service Providers and downloaded to client computers  are described below under the heading \u201cSHABBIES.\u201d","3. Client-Server Architecture of Directory Service ()",{"@attributes":{"id":"p-0092","num":"0125"},"figref":"FIG. 4","b":["402","220"]},"The client components include the Explorer client application , a variety of other client applications  (such as the client applications for the Chat, BBS and Mediaview services), the TreeNav API , the TreeEdit API  (which, as discussed below, may be omitted in embodiments which do not allow remote editing of the content tree ), and network layers . The server components include network layers , the Dirsrv and BBS server applications ,  (which are both Directory Service Providers, and which together form the Directory Service ), and various other server applications  (such as the Chat and Mediaview service applications). The Directory Service  accesses the Dirsrv and BBS namespaces , , and may access additional provider namespaces  that correspond to other Directory Service Providers (represented by the ellipsis in ).","The Explorer  includes multiple navigator modules  for navigating the content tree . Each navigator module  corresponds to and is used to navigate a respective provider namespace , , . Thus, for example, a Dirsrv navigator module is provided to navigate the Dirsrv namespace , and a BBS navigator module is provided to navigate the BBS namespace . Each navigator module  is preferably implemented as a dynamic link library (DLL) which is invoked by the Explorer  when the user enters into the corresponding provider namespace , , . With reference to , for example, when the user double clicks on the icon for junction point node , the Explorer  launches the BBS navigator to allow the user to navigate the BBS directory structure .","With further reference to , the navigator modules  use the TreeNav API  to navigate the content tree . The TreeNav API  provides all of the functionality for navigating and extracting information from the Directory Service Providers , , and includes the following methods:\n\n","With further reference to , the Explorer  also includes an optional Sysop tools client application , which may be invoked as part of the Explorer when a user has sysop-level privileges at a given node. The Sysop tools client application  generates calls to the client side of the TreeEdit API . The TreeEdit API  provides the functionality for modifying the content maintained by the Directory Service Providers, and consists of the following methods:\n\n","Each Directory Service Provider ,  supports at least a subset of the TreeNav and TreeEdit methods, depending upon the level of Directory Service functionality provided. In the preferred implementation, the Dirsrv service supports all of the TreeNav and TreeEdit methods, and the BBS service supports all TreeNav and TreeEdit methods except for the shabby and GoWord methods. (The BBS service thus does not support GoWord searches, and does not support the use of shabbies). Calls to methods that are not supported by a Directory Service Provider return an error code.","Advantageously, the TreeNav and TreeEdit interfaces provide an extensible framework for the addition of new Directory Service Providers. To add a Directory Service Provider, a server application is added which supports at least a subset of the TreeNav and TreeEdit APIs, and a corresponding navigator module  is added on the client side which generates TreeNav calls to the new server application. Once a basic set of folder nodes has been created within the provider namespace of the newly-added Directory Service Provider, junction points can be added to the new provider namespace (and to other provider namespaces) to create links to existing Directory Service Providers.","As will be apparent from the foregoing, each Directory Service Provider adheres in whole or in part to a \u201cDirectory Service standard\u201d which essentially ties together the various Directory Service Providers to form a single, integrated DS. This standard is generally defined by (1) the methods of the TreeNav and TreeEdit APIs, (2) the three types of nodes (and their corresponding definitions) which may be stored by Directory Service Providers, and (3) the predefined properties (both optional and mandatory) which are stored by the Directory Service Providers. Although every Directory Service Provider must follow this standard at least in-part, various aspects of the Directory Service Providers are left open to developers. For example, the DS standard does not require any specific database implementation for the storage of nodes, and does not limit the types of properties which may be stored by the Directory Service Providers.","With further reference to , the Explorer  also includes multiple node editors (NEDs) . Each node editor  corresponds to a respective service on the network , and specifies a set of node properties that may be entered (by sysops) for nodes that correspond to that service. For example, a node editor  for the Chat service specifies the properties which may be entered for Chat room nodes (which are one type of leaf node), and a node editor for the Dirsrv service specifies the properties that may be entered for Dirsrv nodes (which are the folder nodes within the Dirsrv namespace).","Each node editor  is preferably in the form of a separate dynamic link library. When a new service is added to the network , a corresponding node editor  is simply downloaded to the client microcomputer  to allow sysops to create and edit Directory Service nodes for the new service.","The node editors  advantageously provide a mechanism for allowing the properties of Directory Service nodes to be customized on a per-service basis, and allow service-specific properties to be defined for nodes. When, for example, a new node is remotely created (or edited) by a sysop, the corresponding node editor  is invoked to provide a property sheet of the properties that can be set by sysops. (Certain properties, such as the DEID, APPID, and service group ID are set automatically, and cannot be modified by regular sysops). The sysop can then specify or modify these properties via a user interface of the Sysop Tools client application . The specific properties which may be modified by the user depend upon the sysop level (e.g., regular sysop, sysop manager, supersysop, etc.) of the user at the node.","As will be recognized from the forgoing, the Sysop Tools client application  and the TreeEdit API  are provided for the purpose of allowing sysops to remotely edit the content tree, and are not invoked unless the user has sysop privileges. Accordingly, these components may optionally be omitted in copies of the Explorer  code that are provided to regular (non-sysop) users.","A preferred implementation of the Sysop Tools client application , the TreeEdit API  and the node editors  is described in the above-referenced application of the title SYSTEM AND METHOD FOR EDITING CONTENT IN AN ON-LINE NETWORK.","With further reference to , the Explorer  also includes code for implementing a non-persistent node cache . During each logon session the Explorer  stores node properties that are returned by the Directory Service in the node cache . Before requesting the properties of a node, the Explorer  checks the node cache  to see if the properties have already been returned. Unnecessary transfers of property data are thereby avoided. At the end of each logon session, the node cache  is flushed, so that the reconstructed content tree  seen by the user upon the following logon session will reflect any changes that are made to the content tree .","The Explorer  also maintains a shabby cache  for storing certain types of shabbies that are returned by the Directory Service . In the preferred embodiment, the Explorer  stores icon bitmaps, sound files and banner objects within the shabby cache . The shabby cache  is preferably implemented on the hard disk of the user's microcomputer  as a persistent cache.","When the Directory Service  needs a shabby (such as an icon bitmap) for a node, the Explorer  initially requests the corresponding property (e.g., Icon ID, Soundfile ID, or Banner ID) of the node from the Directory Service, or, if the property has already been returned, reads the property from the node cache . Once the property (i.e., shabby ID) has been obtained, the Explorer  checks the shabby cache  for the corresponding shabby. If the shabby is not present in the shabby cache , the Explorer  generates a GetShabby call to the Directory Service Provider of the node (assuming the Directory Service Provider supports shabbies), specifying the shabby ID as a parameter of the GetShabby API. (As described below, download-and-run file shabbies are preferably returned using the FTM service, rather than the GetShabby API.)","In the preferred embodiment, each time the Directory Service  returns a shabby that is an icon bitmap, sound file or banner object, the shabby is stored in the shabby cache  in association with its shabby ID (SHID). Because these shabbies are stored in the cache  in association with their shabby IDs, rather than in association with the nodes to which they correspond, duplicate copies of shabbies within the shabby cache  are avoided.","Advantageously, the contents of the shabby cache  are not flushed between logon sessions. Thus, once an icon bitmap, sound file, or banner object has been returned by the Directory Service, it need not be re-transferred over the WAN 106 on subsequent logon sessions. Duplicate transfers of these kinds of shabbies are thereby avoided. To avoid large volumes of shabby data on the user's hard disk, a conventional least-recently-used (LRU) algorithm or similar algorithm may be used to delete from the shabby cache  any shabbies that have not recently been read from the cache .","4. Representation of Node Properties ()","With reference to , each node of the content tree  can be viewed as a table  of node properties to which the Directory Service provides access. This table  includes at least a subset of the above-listed generic properties (which includes the DEID, APPID Service Group ID, Flag, Security Token and Name of the node), and may also include one or more service-specific properties (such as a \u201cmaximum length of conversation\u201d property for a Chat room).","At least some of the properties in the table  are local properties that are stored (or for some properties, generated on-the-fly) locally by the Directory Service Provider that provides access to the node. In the preferred embodiment, node files are used to store the local properties. The table  may also include one or more remote properties (which may be either generic or service-specific in nature) that are stored or generated on-the-fly by a separate (or \u201cremote\u201d) service. This separate service is the service to which the node corresponds (such as Chat, BBS, Dirsrv or Mediaview), as indicated by the node's APPID.","Each node property, whether local or remote, has a property name , a property type , and a property value . Each property name  is preferably in the form of a null-terminated sequence of bytes which uniquely identifies a corresponding property. Property names  are passed over the WAN  whenever a TreeNav or TreeEdit API call requires the identification of one or more properties. To maintain high performance over the WAN , the most commonly requested properties are provided with very short names (typically 2 or 3 bytes long, including the terminating null). For example, the DEID, Flags, and APPID properties have null-terminated string names of \u201ca\u201d, \u201cb\u201d, and \u201cc\u201d, respectively. (Longer, mnemonic names such as \u201cszPropDeid,\u201d \u201cszPropFlags,\u201d and \u201cszPropAppid\u201d are used by programmers to identify the properties, and these mnemonic names are converted into the actual property names  by the compiler.)","The \u201ctype\u201d  of a property identifies the data format (e.g., byte, word, doubleword, character string, etc.) of the corresponding property value . Properties can have any of the types listed in Table 2.",{"@attributes":{"id":"p-0114","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["TYPE","NUMERIC",{}]},{"entry":["(MNEMONIC NAME)","IDENTIFIER","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["sptNil","00H","invalid"]},{"entry":["sptByte","01H","unsigned byte"]},{"entry":["sptWord","02H","unsigned word"]},{"entry":["sptDword","03H","unsigned doubleword"]},{"entry":["sptQword","04H","unsigned quadword"]},{"entry":["sptSbyte","05H","signed byte"]},{"entry":["sptSWord","06H","signed word"]},{"entry":["sptSDword","07H","signed doubleword"]},{"entry":["sptSQword","08H","signed quadword"]},{"entry":["sptDeid","09H","64-bit directory entry ID"]},{"entry":["sptStr","0AH","null-terminated string"]},{"entry":["sptUni","0BH","unicode string"]},{"entry":["sptTime","0CH","Win 32 filetime"]},{"entry":["sptPricing","0DH","32-bit pricing indicator"]},{"entry":["sptBinary","0EH","block of bytes (raw data)"]},{"entry":["sptShid","0FH","shabby ID (32 bits)"]},{"entry":["sptLocales","10H","languages\/regions"]},{"entry":["sptHacct","11H","32-bit user account no."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"With further reference to Table 2, the sptUni type indicates that the value is in unicode. Unicode is a standard 16-bit character set, developed by the Unicode Consortium, which includes the alphabetic characters of a variety of different languages. In the preferred embodiment, all string properties (including those of type sptStr) are stored by the Directory Service in Unicode, and are converted by the TreeNav methods on the client computers  to the appropriate character sets for individual users.","As shown in Table 2, each property type is identified by a respective 8-bit identifier. These numeric identifiers are used internally (e.g., within the node files) to represent the corresponding property types. As with the mnemonic names for the node properties, the mnemonic names listed in Table 2 are used by programmers for writing code.","The property types for the generic properties described above are listed in Table 3.",{"@attributes":{"id":"p-0118","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"PROPERTY","TYPE"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","sptUni"]},{"entry":[{},"DEID","SptLInt"]},{"entry":[{},"APPID","sptDword"]},{"entry":[{},"Service Group ID","sptWord"]},{"entry":[{},"Icon ID","sptShid"]},{"entry":[{},"Flags","sptByte"]},{"entry":[{},"Security Token","sptDword"]},{"entry":[{},"Description","sptStr"]},{"entry":[{},"GoWord","sptStr"]},{"entry":[{},"Search Keywords","sptStr"]},{"entry":[{},"Owner","sptDword"]},{"entry":[{},"Sysops","sptStr"]},{"entry":[{},"Pricing","sptPricing"]},{"entry":[{},"Rating","sptDword"]},{"entry":[{},"Run Info","sptStr"]},{"entry":[{},"Locales","sptLocales"]},{"entry":[{},"Junction","sptDeid"]},{"entry":[{},"Parents","sptDword"]},{"entry":[{},"Children","sptDword"]},{"entry":[{},"Access Rights","sptWord"]},{"entry":[{},"Soundfile ID","sptShid"]},{"entry":[{},"Banner ID","sptShid"]},{"entry":[{},"Drfile ID","sptShid"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"With further reference to , the property value  represents the actual data or information stored by the property. For example, for the property \u201cName\u201d, the value is the null-terminated character string (in unicode) of the name of the node, and for the property DEID, the property value is the 64-bit DEID of the node.","5. Node Disk Structures ()",{"@attributes":{"id":"p-0120","num":"0171"},"figref":["FIG. 6","FIG. 6"]},"With reference to , each node file  contains a header portion  which identifies the parents and children of the node, followed a property list portion  which specifies the local properties of the node. The header portion  contains the number of parents of the node, followed by the DEIDs of the parents, followed by the number of children of the node, followed by the DEIDs of the children.","The property list portion  contains the number of properties in the list, followed by a listing of the names, types and values of the node's properties. Specifically, for each property stored within the node file , the property list portion  contains the property type (identified by the 8-bit type identifier), followed by the number of bytes in the property name, followed by the number of bytes in the property value, followed by the property name , followed by the property value.","In the preferred embodiment of the Dirsrv service, node files are named and stored according to the following convention:\n\nfilename=<DEID low part (hex)>,\n\nsubdirectory=<DEID high part (hex)>.\n\nThus, for example, the node file  for a node having a 64-bit DEID of 00000000:000002A3 (hex) will have the filename 000002A3, and will be stored in the subdirectory 00000000. If this node is a Dirsrv node, the node file will be stored on all of the application servers  of the Dirsrv service group . As described below, the node files are preferably loaded from the hard disks of the application servers  into main memory when the Directory Service Providers are brought up on these servers .\n\n6. Shabbies ()\n","As indicated above, the present invention provides for the separate storage of data items that are shared by multiple nodes of the same provider namespace. The shared data items are stored by the Directory Service Providers as shabbies (preferably within individual shabby files), and are edited and downloaded using special methods of the TreeNav and TreeEdit APIS. A given Directory Service Provider may, but need not, support shabbies. (As indicated above the Dirsrv service supports shabbies, and the BBS service does not).","In the present implementation of the network , four general types of data items are stored as shabbies: icon bitmaps, banner objects, sound files, and download-and-run files. As will be recognized, however, various other types of shared data items may be stored as shabbies, including, for example, video files and multimedia files.","In the preferred embodiment, every shabby has associated with it two numeric identifiers:\n\n","The EnumShn method of the TreeNav API allows client applications to obtain a list of all SHNs within a given shabby kind. Thus, for example, to download all existing icons, the EnumShn method can be used by the client to obtain a list of the SHNs of the icons, and the GetShabby method can then be used to retrieve the icons.","The 32-bit number <SHK,SHN> is referred to as the shabby ID, or \u201cSHID.\u201d Every shabby has a unique SHID within the shabby's provider namespace. To reference a shabby from a node, the SHID of the shabby is stored as an appropriate property of the node. In a present implementation, the properties that store SHIDs are the Icon ID, Banner ID, Soundfile ID and Drfile ID properties. (Note from Table 3 above that each of these four property types has a type of \u201csptShid.\u201d) For example, to specify a sound file for a node, the sysop would enter the SHID of the sound file as the Soundfile ID property of the node.","Shabbies can be divided into one of two groups, depending upon how they are retrieved by the client:\n\n","In the preferred embodiment of the Dirsrv service, shabby files are named and stored according to the following convention:\n\nfilename=<00,SHN (hex)>,\n\nsubdirectory=<000000,SHK (hex)>.\n\nThus, for example, a shabby with SHID=<SHK,SHN>=12345678 (hex) will be stored in a file having the name 00345678, and will be located in a subdirectory having the name 00000012. Each shabby file simply contains the actual bytes of the shabby; no headers or other information are contained within the shabby files.\n",{"@attributes":{"id":"p-0131","num":"0186"},"figref":"FIG. 7","b":["702","704"]},"With reference to blocks  and , if an error code is returned by the Directory Service, the client displays a default icon. In the preferred embodiment, the client selects the default icon based upon the APPID of the node. Thus, for example, if the node is a BBS node (as indicated by the APPID), the client displays a generic BBS icon.","With reference to blocks -, if an icon ID is returned by the Directory Service, the client uses the returned Icon ID to check its shabby cache  (or \u201cicon cache\u201d in ) for the icon bitmap. If the bitmap if found in the shabby cache  (referred to as a \u201ccache hit\u201d), the client retrieves the bitmap from the cache  and displays the icon. For frequent users of the network, the cache hit rate may be very high (for example, 95% or higher), since the shabby cache  is implemented as a persistent (or \u201coff-line\u201d) cache. In the preferred embodiment, this hit rate is improved by the use of the same icon for many different nodes.","With reference to blocks -, if the icon bitmap is not present within the cache , the client generates a GetShabby call to retrieve the shabby identified by the icon ID. The Directory Service Provider responds by reading the requested shabby (i.e., icon bitmap) from its shabby database, and by sending the shabby over the WAN  to the client. The client then displays the icon, and stores the icon bitmap within the shabby cache . As described above, because icon bitmaps are not deleted from the shabby cache  in the preferred embodiment, there is no need for the client to download the same bitmap twice. In other embodiments, an LRU (least recently used) or other algorithm may be used to delete icon bitmaps from the user's hard disk, in which case the client may have to download the same bitmap more than once.","The  process of identifying, downloading and caching icon bitmaps is also applicable to other types of shabbies which may be cached by the client. As indicated above, the types of shabbies that are cached in a presently preferred implementation of the Explorer  are icon bitmaps, sound files, and banner objects.","7. Server Memory Structures and Operation ()","With reference to , each application server  (\u201cDirsrv server\u201d) of the Dirsrv service group  includes a respective hard disk  which stores all of the Dirsrv node files (representing all of the nodes within the Dirsrv namespace ), and which stores all of the Dirsrv shabby files (representing all shabbies that are associated with Dirsrv nodes). To increase performance as node properties and shabbies are requested by clients, the node files and shabby files are maintained within the main memory of the Dirsrv server  (and all other application servers of the Dirsrv service group ). The node files are stored as C++ objects within a node table , and are hashed by their respective DEIDs. The shabby files are stored within a shabby cache , and are hashed by their respective SHNs (shabby numbers). As is well known in the art, hashing algorithms reduce the amount of time required to locate a data item in memory, and thereby increase performance.","In the preferred embodiment, all of the nodes (i.e., node files) are loaded into memory when the Dirsrv service is initially brought up on the application server . Once a node is loaded into memory, it is not removed from memory unless deleted via a TreeEdit operation. In other embodiments, the nodes may be loaded and unloaded dynamically.","Shabby files are preferably loaded into memory upon request only (i.e., a shabby is not loaded until requested via a GetShabby call). As the shabbies are loaded into memory, the Dirsrv service generates a respective hash table (not shown) for each shabby kind (i.e., for each SHK value). Once a shabby is loaded into memory, it is not removed from memory unless deleted via a TreeEdit operation.","Each node (stored as a C++ object) in the node table  consists primarily of a local properties cache  and a remote properties cache . The local properties cache  contains the local properties of the respective node, and the remote properties cache  contains any remote properties that have recently been retrieved by the Dirsrv server . The remote property caches  are refreshed periodically (at a frequency that may be set via a global network registry, and with a default of every 5 minutes), to ensure that the cached remote property data is relatively up-to-date. Properties stored within the local and remote properties caches ,  are preferably hashed by property name.","With further reference to , the Dirsrv service maintains a GoWord index  for supporting GoWord searches. The GoWord index  maps GoWords to the DEIDs of the corresponding nodes, and is accessed whenever a GetDeidFromGoWord call is received by the server . In the preferred embodiment, the GoWord index  is generated on-the-fly as the node files are initially loaded into memory, and is updated as nodes are added, deleted and edited via the TreeEdit methods.","With reference to , whenever one of the servers  of that Dirsrv service group  receives a TreeNav call the requires an update to a node file or a shabby file, that update transaction is forwarded to the Arbiter service, which is a generic (i.e., non-service-specific) transaction replication service that replicates update transactions across groups of application servers . In the preferred embodiment, a dedicated microcomputer (not shown) that runs the Arbiter service application is provided to handle all Dirsrv update transactions. The Arbiter service (running on the dedicated microcomputer) responds to the forwarded update transaction by broadcasting the transaction to all of the servers  of the Dirsrv service group  for processing. The Arbiter service also monitors the outcome of the update transaction on each application server  of the Dirsrv service group  to ensure consistent processing by the different servers. This process of replicating update transactions ensures that the node files and shabby files stored by the different servers  of the service group  are identical.",{"@attributes":{"id":"p-0142","num":"0197"},"figref":["FIG. 9","FIG. 9"],"b":"120"},"With reference to blocks -, the Dirsrv server\/service initially checks the node's local properties cache , and if the requested property is found, returns the property value to the client. (For certain properties, such as the \u201cParents,\u201d \u201cChildren\u201d and \u201cAccess Rights\u201d properties, the Dirsrv alternatively determines the property value on-the-fly.) With reference to block , if the requested property is not found in the local properties cache , the Dirsrv service compares the property name against a list of properties that are never stored remotely, to thereby determine whether the requested property may be stored remotely. In the preferred embodiment, this list consists of the following properties: DEID, APPID, Flags, Service Group ID, GoWord, Junction, Parents, Children, Access Rights, and all properties of type sptShid. If the requested name appears in the list (indicating that the property is not a remote property), the Dirsrv service returns an error code (preferably in the form of an empty property) to the client to indicate that the property does not exist for the node.","With reference to blocks -, if the requested property is one which may be stored remotely, the Dirsrv service checks the remote properties cache  for the property. If the property is found in the remote properties cache , and is not a dummy property (discussed below), the Dirsrv service returns the requested property to the client. If the property is found but is a dummy property, the Dirsrv service returns an error code to the client to indicate that the property does not exist for the node.","With reference to blocks -, if the requested property is not found in either the local properties cache  or the remote properties cache  for the node, the Dirsrv service uses the node's APPID to determine the remote service with which the node is associated, and then forwards the property request (via an RPC) to this service. If the property is returned by the remote service, the Dirsrv service returns the property to the client and stores the property within the remote properties cache  for the node.","With reference to block , if the remote service fails to return the requested property, the Dirsrv service returns an error code to the client. Additionally, the Dirsrv service stores a dummy property (type sptNil, size zero) in the node's remote properties cache  to inhibit the forwarding of requests for the property to the remote service.","Although  (and the associated description) are directed to the Dirsrv service, these Figures are also generally applicable to the application servers  of the BBS service group , with the exception that the BBS service does not implement either a Goword index  or a shabby cache . Further, the implementation depicted by these figures is suitable for other Directory Service Providers (other than Dirsrv and BBS) that may be added to the Directory Service.","8. Junction Points ()","As described above, junction point nodes provide a seamless interface between different provider namespaces, and thereby provide support for multiple namespaces. In the preferred embodiment, junction points have the following characteristics:\n\n",{"@attributes":{"id":"p-0149","num":"0209"},"figref":"FIG. 10A","b":["212","214","3","1","3","1002","802"]},"As illustrated in , the Name and Security Token of Dirsrv  are actually the Name and Security token of the target node, BBS , and are stored remotely by the BBS service (as local properties of BBS ). An optional Locales property (not shown) may also be stored remotely. The remaining properties of node Dirsrv  are stored locally by the Dirsrv service, preferably within a node file for Dirsrv . As with all other types of nodes, Dirsrv  includes a DEID, Flags, an APPID, and a Service Group ID. The APPID identifies the namespace of the target node. Because Dirsrv  is a junction point node, it also includes a \u201cJunction\u201d property, which contains the DEID of the target node. Dirsrv  may also include an Icon ID, which contains the DEID of the Icon that will be displayed by the Explorer.",{"@attributes":{"id":"p-0151","num":"0211"},"figref":["FIG. 10B","FIG. 10A"],"b":["212","1","1","1","1","402","440","3","2","3"]},"In the presently preferred implementation, all junction points of the content tree  serve as proxies to BBS folders. Although junction points could also be provided within the BBS namespace , the need for such junction points is obviated by an Explorer feature which allows the user to move upward through the tree  along the same path taken to get to the current node. With reference to , for example, if a user takes the path (Dirsrv )\u2192(Dirsrv \/BBS )\u2192(BBS ) to get to node BBS , the user can then move up the content tree  along the same path (using either a \u201cparent folder\u201d option or by clicking on portions of the map  within the left pane ) to return to the level of Dirsrv .","9. TreeNav Methods","As described above, the TreeNav API provides the functionality needed by client applications (such as the Explorer) to extract directory information (properties, shabbies, etc.) from the various Directory Service Providers, As will be appreciated by those of ordinary skill in the art, the provision of the TreeNav API facilitates both the addition of new Directory Service Providers to the Directory Service and the addition of new client applications of the Directory Service.","Table 4 lists the parameters of the primary methods of the TreeNav API. The respective functions performed by these methods are described above under the heading OVERVIEW OF DIRECTORY SERVICE AND RELATED COMPONENTS. Table 5 indicates the information held by each of the parameters listed in Table 4.",{"@attributes":{"id":"p-0155","num":"0215"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"TreeNav METHOD","PARAMETERS"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetProperties","pdeid, nDeid, rgszProp, pLocales,"]},{"entry":[{},{},"pnNodes, phDyn"]},{"entry":[{},"GetChildren","deid, fIncludeMe, rgszProp,"]},{"entry":[{},{},"pLocales, pnNodes, phDyn"]},{"entry":[{},"GetParents","deid, flncludeMe, rgszProp,"]},{"entry":[{},{},"pLocales, pnNodes, phDyn"]},{"entry":[{},"GetDeidFromGoWord","szGoWord, pLocales, pdeid"]},{"entry":[{},"GetShabby","shid, ppv, pnSize"]},{"entry":[{},"EnumShn","shk, pCount, phDyn"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0156","num":"0216"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"PARAMETER","INFORMATION HELD BY PARAMETER"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pdeid","Array of DEIDs"]},{"entry":[{},"nDeid","Number of DEIDs in pdeid"]},{"entry":[{},"rgszProp","Array of property names"]},{"entry":[{},"pLocales","List of LCIDs for locales filtering (empty"]},{"entry":[{},{},"list indicates that nodes off all locales"]},{"entry":[{},{},"should be returned)"]},{"entry":[{},"pnNodes","Placeholder for number of nodes to be"]},{"entry":[{},{},"returned"]},{"entry":[{},"phDyn","Placeholder for handle to dynamic-sized"]},{"entry":[{},{},"buffer which is used to return"]},{"entry":[{},{},"information to client"]},{"entry":[{},"deid","A single DEID of a node"]},{"entry":[{},"fIncludeMe","Flag which indicates whether the node for"]},{"entry":[{},{},"which the DEID is being provided is to"]},{"entry":[{},{},"be included."]},{"entry":[{},"szGoword","Null-terminated GoWord"]},{"entry":[{},"shid","A single Shabby ID"]},{"entry":[{},"ppv","Placeholder for shabby buffer"]},{"entry":[{},"pnSize","Placeholder for size - used to return size"]},{"entry":[{},{},"of shabby"]},{"entry":[{},"shk","A single shabby kind"]},{"entry":[{},"pCount","Placeholder for 16-bit value which"]},{"entry":[{},{},"indicates the number (count) of shabbies"]},{"entry":[{},{},"for which SHNs are being returned"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"As described above, the methods of the TreeNav API are advantageously structured such that only those properties specifically requested by the client are returned by the Directory Service. Unnecessary transfers of property data over the WAN  are thereby avoided, and valuable bandwidth is conserved. WAN bandwidth is further conserved as a result of the access rights filtering and locales filtering features of the present invention, which are described below.","10. Locales and Access Rights Filtering of Nodes ()","As indicated in Tables 4 and 5, the GetProperties, GetChildren, GetParents and GetDeidFromGoWord methods include a \u201cpLocales\u201d parameter, which allows the client to specify a locales filter to be applied on the server side. This locales filter is preferably in the form of a list of LCIDs (locales IDs), with each member of the list identifying a language and\/or geographic region that the client is \u201cinterested in.\u201d In the preferred embodiment, the locales filters are specified by end users via a dialog box of the Explorer, through which users can select from a list of predefined locales. Users can also select an \u201call locales\u201d option, in which case no locales-based filtering will be performed.","When a locales filter is provided by the client in a TreeNav call, the Directory Service excludes (i.e., does not return the requested properties of) any node that has a Locales property that does not include at least one of the locales specified in the filter. (Nodes that do not have a Locales property are not excluded). Thus, for example, if the client generates the call\n\nGetChildren(DEID=5, locales=spanish, french)\n\n(other parameters omitted for convenience), the Directory Service will filter out any children of node DEID=5 that have Locales properties which do not include either spanish or french. When an empty list (i.e., a list with no LCID entries) is sent by the client, the Directory Service does not perform locales-based filtering.\n","Locales-based filtering provides at least two significant benefits. First, locales-based filtering allows the end user to view a customized, filtered view of the content tree , and allows the user to avoid the inconvenience of viewing content items that are in different languages and\/or directed to different geographic regions than the user is interested in. Thus, for example, a user can specify that he or she is interested only in nodes that include the Locale of \u201cEnglish, U.K.,\u201d to obtain a directory of content objects that are in the English language which are directed to the United Kingdom. Second, as indicated above, locales-based filtering conserves bandwidth by reducing unnecessary data transfers over the WAN . This, in-turn, increases performance from the viewpoint of the user.","Although nodes are filtered in the preferred embodiment based on user-specified language and geographic region filters, it will be readily apparent that other types of filters can be employed. For example, in other embodiments users may be able to specify a \u201cmedia type\u201d filter in order to select nodes of a particular media type (such as text, still picture, video, sound, multimedia or animation). A generic \u201cmedia type\u201d property may then be defined to allow sysops to specify the media type or types of the nodes they create.",{"@attributes":{"id":"p-0162","num":"0222"},"figref":["FIG. 11","FIG. 11"],"b":["120","5","5"]},"With reference to block , the Directory Service Provider initially reads the node's 32-bit security token, which is stored as the Security Token property of the node. As described above, the security token identifies a single content category to which the node has been assigned (typically by system administrators) for security purposes. In the preferred embodiment of the network , various predefined content categories exist such as \u201cinternal public content,\u201d \u201cInternet public content,\u201d \u201c18-and-older content,\u201d \u201ccorporation X beta test data,\u201d etc., and different users are assigned different access rights (via the access rights database ) with respect to different content categories. Every node of the content tree  has a security token, and is assigned to exactly one content category.","With reference to block , the Directory Service Provider generates a GetAccountRights call to determine whether or not the user has access rights with respect to the content category of the node. The parameters of the GetAccountRights API are the user's 32-bit user ID and the 32-bit security token. The GetAccountRights API includes code which generates user-specific queries of the access rights database , and includes code which implements an access rights cache (not shown) within each application server  that generates GetAccountRights calls. A preferred implementation of the access rights database  and the access rights cache are described in a concurrently filed, commonly assigned U.S. application having the title SYSTEM AND METHOD FOR CONTROLLING ACCESS TO DATA ENTITIES IN A COMPUTER NETWORK, which is incorporated herein by reference.","The GetAccountRights API returns either (1) a code which indicates that the user is not authorized to access the content category (and that the user is thus not authorized to access the node), or (2) a 16-bit access rights value which specifies the access rights (in the form of privilege levels) of the user with respect to the content category. With reference to blocks  and , if the GetAccountRights API returns a code indicating that the user is not authorized to access the node (or equivalently, that the user has no access rights with respect to the node), no properties of the node are returned to the client, and the icon and properties of the node are not made visible to the user. (From the viewpoint of the user and the client application, the unaccessible node does not exist.)","With reference to blocks  and , if an access rights value is returned by the GetAccountRights API, indicating that the user has at least some access rights with respect to the node (and specifically, at least viewer-level access rights), the Directory Service Provider checks the Locales parameter of the TreeNav call to see if a locales filter has been provided by the client. If no locales filter was provided, indicating that no locales filtering should be performed, the Directory Service Provider returns the property or properties requested by the client. (As indicated above, if a requested property does not exist, the Directory Service Provider returns an empty property to the client.) As indicated by blocks  and , if a locales filter has been provided but the node does not have a locales property, the Directory Service Provider similarly returns the requested property or properties.","With reference to block , if a locales filter has been provided and the node has a locales property, the list of LCIDs in the filter is compared against the LCIDs of the node. With reference to block , if at least one of the LCIDs in the filter appears in the node's LCID list, the Directory Service Provider returns the requested property or properties of the node to the client. Otherwise, the Directory Service Provider does not return any of the node's properties.","As will be readily apparent to those skilled in the art, a number of benefits are achieved by returning node properties only when the user is authorized to access the node. For example, the user sees only those service areas (nodes) to which he or she has access, and is not inconvenienced with having to see icons that cannot be opened. Further, a high level of security is provided against hackers, since users cannot see or otherwise obtain information about nodes to which they have no access rights. Further, as indicated above, WAN bandwidth is conserved, since properties are not unnecessarily passed to the client.","11. Other Embodiments","Although the various aspects and features of the present invention have been described in terms of a preferred implementation of an on-line services network , this network implementation has been presented by way of example only, and is not intended to limit the scope of the invention. Accordingly, the scope of the present invention is intended to be defined only by reference to the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other aspects of the invention will now be described with reference to the drawings of a preferred embodiment, which is intended to illustrate and not to limit the invention, and in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 7","FIG. 4"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 10A and 10B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
