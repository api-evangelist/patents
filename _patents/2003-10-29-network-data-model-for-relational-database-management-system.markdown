---
title: Network data model for relational database management system
abstract: A shareable application program interface (API) and network data model infrastructure which is used in combination with a relational database to provide data storage and processing functions for network data. The network data model is stored in relational tables that describe a set of nodes and links forming a network wherein each node represents an object of interest and each link represents a relationship between two nodes. A generic node table contains a row describing each node in the network, and a generic link table contains row data describing each link. In addition, a path table whose contents are commonly generated by network analysis procedures contains rows which describe corresponding paths each consisting of an alternating sequence of nodes and links. The sequence of links in each path are identified in a separate path-link table. The system provides two application program interfaces, a PL/SQL API and a Java API, which permit executing application programs to use stored procedures for creating the node and link tables, store data describing nodes and links in the tables, and perform standard operations on the network data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454428&OS=07454428&RS=07454428
owner: Oracle International Corp.
number: 07454428
owner_city: Redwood Shores
owner_country: US
publication_date: 20031029
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","CONCLUSION"],"p":["This invention relates to electronic data processing systems, and more particularly to systems for modeling and analyzing relationships between objects.","It is often desirable to model and analyze relationships among objects of interest. A network (or a graph) is one of such modeling representations. There are three elements in a network representation: nodes, links, and paths. The objects of interest are called nodes and the relationships between nodes are called links. A path is an ordered list of links and typically with no repeating nodes or links. Only connectivity information is needed for modeling a network. In addition, the concept of cost (or weight) may be introduced in links and nodes if cost needs to be taken into account during the analysis.","Software products have been developed for performing network analysis. Two popular products are NetEngine\u2122 and the LEDA\u2122 library. NetEngine is primarily used for geographic applications while the LEDA\u2122 library is for general graph\/network problems.","NetEngine\u2122 provides a program library designed for geographic network analysis and provides the capability to define, store, traverse, and analyze many kinds of networks through a C application program interface (API) or through a Visual Basic\u00ae type library. NetEngine\u2122 is delivered with a set of network analysis algorithms including determining the shortest path between two or more points, solving the traveling salesman problem, identifying the \u201cclosest\u201d object meeting a stated criteria, computing origin-destination distance matrices, and allocating service areas to a location. NetEngine\u2122 employs in-memory data structures and methods, and stores each network topology to a permanent disk file. NetEngine\u2122 is available from ESRI, 380 New York Street, Redlands, Calif. (http:\/\/www.esri.com).","LEDA\u2122, an acronym for \u201cLibrary of Efficient Data types and Algorithms,\u201d is implemented by a C++ class library available from Algorithmic Solutions Software GmbH, Saarbr\u00fccken, Germany (http:\/\/www.algorithmic-solutions.com). The LEDA\u2122 library provides standard graph data types and a wide variety of graph and network algorithms like depth-first search, breadth-first search, shortest paths, minimal spanning trees, matching, weighted matching, network flow, planarity testing, and graph layout.","Available software products present several difficulties. They typically employ proprietary file formats so that network data and the results of network analysis are difficult to exchange, share, and manage. Network information is not separated from applications and requires customized solutions and is accompanied by high maintenance costs. The available data structures and algorithms can incur performance and data management problems when used with the large data sets often present in spatial applications.","The present invention provides an open, persistent, generic network data model which is implemented using a relational database management system (RDBMS), providing query and management functions using SQL, and simplifying data management and enforcing referential integrity. The network data model contemplated by the invention cleanly separates application information from network information and provides a general approach to network applications that eliminates high maintenance costs associated with proprietary data structures. By integrating network data types and network analysis with a relational database management system, the advantages of the RDBMS, including scalability, manageability, security, and currency, are made available to network data and analysis applications. In addition, the preferred embodiment of the invention is directly integrated with existing geometric data structures and procedures to provide spatial information management.","The open and generic network data model for network applications stores network information in database tables. Standard database SQL queries and PL\/SQL functions and procedures can be performed on the network data in the tables. Only generic connectivity information need be captured in the network data model, thus providing a clean separation between connectivity and application information. Network information may be stored and managed using the PL\/SQL interface in the relational database, and network representation, network loading, and network analysis may be performed by client applications using a provided Java API.","The preferred embodiment of the invention takes the form of an extension to relational database management system for storing and analyzing network data. The network data is stored in relational tables that describe a set of nodes and links forming a network wherein each node represents an object of interest and each link represents a relationship between two of the nodes.","The network data model includes a generic node table that contains a plurality of node table rows, each of which contains data describing a given node in the network, and a generic link table containing a plurality of link table rows, each of which contains data describing a link between two nodes in the network.","The network data model further provides application both PL\/SQL and Java program interfaces which enable executing application programs to create the node and link tables, to store additional data describing each node and link in the node and link tables, and to perform a plurality of standard operations on the data in the node and link tables.","The network described by the data model may be a logical network specifying the linked connectivity between nodes and further specifying node and link cost values, enabling network analysis to be conducted to find, for example, a particular path having stated a cost characteristics, such as the minimum total cost from a stated start node to a stated end node.","Analysis functions may produce results by populating path and path link tables which specify one or more paths consisting of an alternating sequence of nodes and links having defined characteristics. The each path may be defined by a path-link table containing an ordered set of path-link table rows containing information identifying one link in the sequence of links in said given path.","The data model further permits the storage of user-defined data in the network data model tables, including a standard object data type for defining the geometry of nodes, links, and paths. A network metadata table stores additional information about the network.","The network data model may be hierarchical. Each node table row a column for holding a hierarchy level and a further column for holding the identification of a parent node within the hierarchy established by the level column.","These and other features and advantages of the present invention may be better understood by considering the following detailed description of a preferred embodiment of the invention.","The preferred embodiment described below provides methods and apparatus for modeling a set of nodes and links that together form a network. Each node represents an object of interest and each link represents a relationship between two nodes. Network analysis procedures provided by the data model often produce result data which defines a specific path, an alternating sequence of nodes and links, beginning and ending with nodes, and typically with no nodes and links appearing more than once.","The preferred network modeling system embodying the invention forms a part of and extends the functionality of a relational database management system (RDBMS). More specifically, the preferred network modeling system to be described is implemented as an extension to an Oracle 10database employing Oracle Spatial, an integrated set of functions and procedures that enables spatial data to be stored, accessed, and analyzed quickly and efficiently. Oracle Spatial is described in detail in the , Release 9.2, March 2002, Part No. A96630-01, which provides usage and reference information for indexing and storing spatial data and for developing spatial applications using Oracle Spatial. Oracle Spatial requires Oracle10Enterprise Edition RDBMS and provides a foundation for the deployment of enterprise-wide spatial information systems, and Web-based and wireless location-based applications requiring complex spatial data management. Oracle Spatial, and the Oracle10Enterprise Edition database relational database management system (RDBMS) product with which it works, are available from Oracle Corporation, Redwood Shores, Calif. Oracle Spatial provides a standard data type for defining spatial geometries, as well a variety of standard procedures for manipulating geometry data, which are used to advantage in connection with the present invention. Pertinent features of Oracle Spatial and the geometry data type SDO_GEOMETRY which it defines are fully described in detail in the above-noted and are summarized briefly below.","The present invention provides a shareable application program interface (API) and network data model infrastructure which is used in combination with a relational database, such as the Oracle9i Enterprise Edition with Oracle Spatial, to provide a consistent data model and processing functions for network data.","Introduction to Network Modeling","In many applications, capabilities or objects are modeled as nodes and links in a network. The network model contains logical information such as connectivity relationships among nodes and links, directions of links, and costs of nodes and links. With logical network information, the user can analyze a network and answer questions, many of them related to path computing and tracing. For example, for a biochemical pathway, the user can find all possible reaction paths between two chemical compounds. For a road network, the user can find the shortest (distance) or fastest (travel time) path between two cities, or the closest hotel to a specific airport.","In additional to logical network information, spatial information such as node locations and link geometries can be associated with the logical network. This information can help the user to model the logical information (such as the cost of a route, because its physical length can be directly computed from its spatial representation).","The generic data model and network analysis capability provided by the present invention can model and analyze many kinds of network applications in addition to traditional geographical information systems (GIS). For example, in biochemistry, applications may need to model reaction pathway networks for living organisms; and in the pharmaceutical industry, applications to model the drug discovery process may need to model protein-protein interaction.","The network modeling capabilities provided by the present invention include schema objects and an application programming interface (API). The schema objects include metadata and network tables. The API includes a server-side PL\/SQL API for creating, managing, and analyzing networks in the database, and a middle-tier (or client-side) Java API for network analysis.","There are two basic approaches to creating a network data model: the user can request the system to perform most operations, using standard stored procedures, or the user can perform the operations by creating the necessary network tables and updating the network metadata. With each approach, the user must insert the network data into the network tables. Optionally the user can create an in-memory network object using the Java application programming interfaces (API) and save it to the database. The user may then use the network data model PL\/SQL and Java application programming interfaces (APIs) to update the network and perform other operations.","Network Data Model Concepts and Definitions","A network is a type of mathematical graph that captures relationships between objects using connectivity. The connectivity may or may not be based on spatial proximity. For example, if two towns are on opposite sides of a lake, the shortest path based on spatial proximity (a straight line across the middle of the lake) is not relevant if the user wants to drive from one town to the other. Instead, to find the shortest driving distance, the user needs connectivity information about roads and intersections and about the \u201ccost\u201d of individual links.","A network consists of a set of nodes and links. Each link (sometimes also called an edge or a segment) specifies two nodes. A network can be directed or undirected, although links and paths typically have direction.","In describing the preferred network data model embodying the invention, it will be useful to first define some key terms used in this specification to describe the network data model. Unless otherwise apparent from the context, each of the following terms have the following meanings:","A \u201cnode\u201d represents an object of interest.","A \u201clink\u201d represents a relationship between two nodes. A link may be directed (that is, have a direction) or undirected (that is, not have a direction).","A \u201cpath\u201d is an alternating sequence of nodes and links, beginning and ending with nodes, and typically with no nodes and links appearing more than once.","A \u201cnetwork\u201d contains a set of nodes and links. A network is directed if the links that is contains are directed, and a network is undirected if the links that it contains are undirected.","A \u201clogical network\u201d contains connectivity information but no geometric information. This is the model used for network analysis. A logical network can be treated as a directed graph or undirected graph, depending on the application.","A \u201cspatial network\u201d contains both connectivity information and geometric information.","A \u201cfeature\u201d is an object of interest in a network application that is associated with a node or link. For example, in a transportation network, features include exits and intersections (mapped to nodes), and highways and streets (mapped to links).","\u201cCost\u201d is a non-negative numeric attribute that can be associated with links or nodes for computing such things as the minimum cost path (the path that has the minimum total cost from a start node to an end node). The user can specify a single cost factor, such as driving time or driving distance for links, in the network metadata.","\u201cReachable nodes\u201d are all nodes that can be reached from a given node. Reaching nodes are all nodes that can reach a given node.","The \u201cdegree\u201d of a node is the number of links to (that is, incident upon) the node. The in-degree is the number of inbound links, and the out-degree is the number of outbound links.","\u201cNetwork constraints\u201d are restrictions defined on network analysis computations (for example, that driving routes must consist of expressways and major highways).","A \u201cspanning tree\u201d of a connected graph is a tree (that is, a graph with no cycles) that connects all nodes of the graph. (The directions of links are ignored in a spanning tree.)","A \u201cminimum cost spanning tree\u201d is the spanning tree that connects all nodes and has the minimum total cost.","Network Applications","Networks are used in applications to find how different objects are connected to each other. The connectivity is often expressed in terms of adjacency and path relationships. Two nodes are adjacent if they are connected by a link. There are often several paths between any two given nodes, and the user may want to find the path with the minimum cost. This section describes some typical examples of different kinds of network applications.","Road Network Example. In a typical road network, the intersections of roads are nodes and the road segments between two intersections are links. The spatial representation of a road is not inherently related to the nodes and links in the network. For example, a shape point in the spatial representation of a road (reflecting a sharp turn in the road) is not a node in the network if that shape point is not associated with an intersection; and a single spatial object may make up several links in a network (such as a straight segment intersected by three crossing roads). An important operation with a road network is to find the path from a start point to an end point, minimizing either the travel time or distance. There may be additional constraints on the path computation, such as having the path go through a particular landmark or avoid a particular intersection.","Train (Subway) Network Example. The subway network of any major city can be modeled as a logical network, assuming that precise spatial representation of the stops and track lines is unimportant. In such a network, all stops on the system constitute the nodes of the network, and a link is the connection between two stops if a train travels directly between these two stops. Important operations with a train network include finding all stations that can be reached from a specified station, finding the number of stops between two specified stations, and finding the travel time between two stations.","Utility Network Example. Utility networks, such as power line or cable networks, must often be configured to minimize the cost. An important operation with a utility network is to determine the connections among nodes, using minimum cost spanning tree algorithms, to provide the required quality of service at the minimum cost. Another important operation is reachability analysis, so that, for example, if a station in a water network is shut down, the user knows which areas will be affected.","Biochemical Network Example. Biochemical processes can be modeled as biochemical networks to represent reactions and regulations in living organisms. For example, metabolic pathways are networks involved in enzymatic reactions, while regulatory pathways represent protein-protein interactions. In this example, a pathway is a network; genes, proteins, and chemical compounds are nodes; and reactions among nodes are links. Important operations for a biochemical network include computing paths and the degrees of nodes.","Network Data Model Tables","The present invention may be used to store and analyze data describing a network. A simple logical network is shown in  consisting of three nodes designated by Node ID values ,  and  and by node Name values \u201cN\u201d, \u201cN\u201d and \u201cN\u201d respectively. The connectivity information for the network of  is stored in two tables: a node table and a link table, illustrated in simplified form in  respectively. In addition, path information can be stored in a path table shown illustrated in  and a path-link table illustrated in . As shown in , the link named \u201cL\u201d is a directed straight line connecting nodes N and N, link \u201cL\u201d is a directed straight line connecting nodes N and N, and link \u201cL\u201d is a straight line connecting nodes N and N. There are no other nodes on any of the links.","The user may request the system to create these tables automatically when creating the network using a standard procedure (named \u201cCREATE_<network-type>_NETWORK\u201d) which is available via the PL\/SQL interface, or the user can create these tables using individual node table, link table, path table and path-link table creation procedures also provided by the PL\/SQL interface. The tables can also be created using create elements methods provided by the NetworkFactory class of the Java API.","These tables contain columns with predefined names, and the user must not change any of the predefined column names (which will be referenced by standard procedures); however, the user can add columns to the tables by using an ALTER TABLE PL\/SQL statement with the ADD COLUMN clause. For example, although each link and path table is created with a single COST column, the user can create additional columns and associate them with other comparable attributes. For example, if the user wanted to assign a driving time, scenic appeal rating, and a danger rating to each link, the user could use the COST column for driving time, add columns for SCENIC_APPEAL and DANGER to the link table, and populate all three columns with values to be interpreted by applications. Because the connectivity data used by the network data model are stored as standard RDBMS tables, the data may be manipulated using the robust capabilities of the database system, including a rich set of standard PL\/SQL procedures as described, for example in 9by Loney and Koch, McGraw-Hill Osborne Media; Book and CD edition ISBN: 0072225211 (Aug. 16, 2002).","The example statements below call the SDO_NET.CREATE_LOGICAL_NETWORK procedure, which does the following: creates the LOG_NET directed network; creates the LOG_NET_NODE$, LOG_NET_LINK$, LOG_NET_PATH$, and LOG_NET_PLINK$ tables; and updates the xxx_SDO_NETWORK_METADATA views. Both the node and link tables contain a cost column named COST. (Because this is a logical network, there are no geometry columns.) The example also populates the node and link tables.","Simple Logical Network Example (PL\/SQL)","The following statement creates a directed logical network named LOG_NET , and creates tables named LOG_NET_NODE$, LOG_NET_LINK $, LOG_NET_PATH$, and LOG_NET_PLINK$ tables. The statement further updates USER_SDO_NETWORK_METADATA. Both the node and link tables contain a cost column named COST.","EXECUTE SDO_NET.CREATE_LOGICAL_NETWORK(\u2018LOG_NET\u2019, 1, TRUE, TRUE);","The following statements populate the node table LOG_NET_NODE$ with row data:","INSERT INTO log_net_node$ (node_id, node_name, active, cost) VALUES (1, \u2018N\u2019, \u2018Y\u2019, 2);","INSERT INTO log_net_node$ (node_id, node_name, active, cost) VALUES (2, \u2018N\u2019, \u2018Y\u2019, 3);","INSERT INTO log_net_inode$ (node_id, node_name, active, cost) VALUES (3, \u2018N\u2019, \u2018Y\u2019, 2);","The populated node table is shown in . Because the network pictured in  is a logical network, the nodes do not have geometries and the Geometry column shown is not used. In a spatial network, SDO_GEOMETRY objects would be placed in the Geometry column to specify the geometry of the node.","Next, the following statements populate the link table LOG_NET_LINK$:","INSERT INTO log_net_link$ (link_id, link_name, start_node_id, end_node_id, active, link_level, cost) VALUES (1, \u2018L\u2019, 1, 2, \u2018Y\u2019, 1, 10);","INSERT INTO log_net_link$ (link_id, link_name, start_node_id, end_node_id, active, link_level, cost) VALUES (2, \u2018L\u2019, 2, 3, \u2018Y\u2019, 1, 7);","INSERT INTO log_net_link$ (link_id, link_name, start_node_id, end_node_id, active, link_level, cost) VALUES (3, \u2018L\u2019, 3, 1, \u2018Y\u2019, 1, 8);","The path and path-link (LOG_NET_PATH$ and LOG_NET_PLINK$) tables are not initially populated, This typically occurs when a network analysis procedure executes to identify a particular path meeting a stated criteria. The details of the contents of the network data model tables are described next.","Node Table","Each network has a node table that can contain the columns set forth below:",{"@attributes":{"id":"p-0079","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column Name","Data Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NODE_ID","NUMBER","ID number that uniquely identifies this"]},{"entry":[{},{},"node within the network."]},{"entry":["NODE_NAME","VARCHAR2(32)","Name of the node."]},{"entry":["NODE_TYPE","VARCHAR2(24)","User-defined string to identify the node"]},{"entry":[{},{},"type."]},{"entry":["ACTIVE","VARCHAR2(1)","Contains Y if the node is active (visible in"]},{"entry":[{},{},"the network), or N if the node is not active."]},{"entry":["PARTITION_ID","NUMBER","(Reserved for future use.)"]},{"entry":["<node_geometry","SDO_GEOMETRY, or","For a spatial (SDO, non-LRS) network,"]},{"entry":["column>, or","SDO_TOPO_GEOMETRY,","name of the SDO_GEOMETRY column"]},{"entry":["GEOM_ID and","or NUMBER","containing the geometry objects associated"]},{"entry":["MEASURE",{},"with the node."]},{"entry":[{},{},"For a spatial topology network, name of"]},{"entry":[{},{},"the SDO_TOPO_GEOMETRY column"]},{"entry":[{},{},"containing the topology geometry objects"]},{"entry":[{},{},"associated with the node."]},{"entry":[{},{},"For a spatial LRS network, GEOM_ID and"]},{"entry":[{},{},"MEASURE columns (both of type"]},{"entry":[{},{},"NUMBER) for the geometry objects"]},{"entry":[{},{},"associated with the node."]},{"entry":[{},{},"For a logical network, this column is not"]},{"entry":[{},{},"used."]},{"entry":[{},{},"For a spatial SDO or topology network,"]},{"entry":[{},{},"the actual column name is either a default"]},{"entry":[{},{},"name or what the user specified as the"]},{"entry":[{},{},"geom_column parameter value in the call"]},{"entry":[{},{},"to the"]},{"entry":[{},{},"SDO_NET.CREATE_NODE_TABLE"]},{"entry":[{},{},"procedure."]},{"entry":["<node_cost_column>","NUMBER","Name of the column containing the cost"]},{"entry":[{},{},"value to be associated with the node, for"]},{"entry":[{},{},"use by applications that use the network."]},{"entry":[{},{},"The actual column name is either a default"]},{"entry":[{},{},"name or what you specified as the cost"]},{"entry":[{},{},"column parameter value in the call to the"]},{"entry":[{},{},"SDO"]},{"entry":[{},{},"NET.CREATE_NODE_TABLE"]},{"entry":[{},{},"procedure. The cost value can represent"]},{"entry":[{},{},"anything the user wants, for example, the"]},{"entry":[{},{},"toll to be paid at a toll booth."]},{"entry":["HIERARCHY_LEVEL","NUMBER","For hierarchical networks only: number"]},{"entry":[{},{},"indicating the level in the network"]},{"entry":[{},{},"Hierarchy for this node."]},{"entry":["PARENT_NODE_ID","NUMBER","For hierarchical networks only: node ID of"]},{"entry":[{},{},"the parent node of this node."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"A node table containing rows for the nodes of the simple logical network of  is shown in .","Link Table","Each network had a link table that contains the columns described below:",{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column Name","Data Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LINK_ID","NUMBER","ID number that uniquely identifies this link within"]},{"entry":[{},{},"the network."]},{"entry":["LINK_NAME","VARCHAR2(32)","Name of the link."]},{"entry":["START_NODE_ID","NUMBER","Node ID of the node that starts the link."]},{"entry":["END_NODE_ID","NUMBER","Node ID of the node that ends the link."]},{"entry":["LINK_TYPE","VARCHAR2(24)","User-defined string to identify the link type."]},{"entry":["ACTIVE","VARCHAR2(1)","Contains Y if the link is active (visible in the"]},{"entry":[{},{},"network), or N if the link is not active."]},{"entry":["LINK_LEVEL","NUMBER","Priority level for the link; used for hierarchical"]},{"entry":[{},{},"modeling, so that links with higher priority levels"]},{"entry":[{},{},"can be considered first in computing a path."]},{"entry":["<link_geometry","SDO_GEOMETRY,","For a spatial (SDO, non-LRS) network, name of the"]},{"entry":["column>; or","or","SDO_GEOMETRY column containing the"]},{"entry":["GEOM_ID,","SDO_TOPO","geometry objects associated with the link."]},{"entry":["START_MEASURE,","GEOMETRY, or","For a spatial topology network, name of the"]},{"entry":["and","NUMBER","SDO_TOPO_GEOMETRY column containing the"]},{"entry":["END_MEASURE",{},"topology geometry objects associated with the link."]},{"entry":[{},{},"For a spatial LRS network, GEOM_ID,"]},{"entry":[{},{},"START_MEASURE, and END_MEASURE"]},{"entry":[{},{},"columns (all of type NUMBER) for the geometry"]},{"entry":[{},{},"objects associated with the link."]},{"entry":[{},{},"For a logical network, this column is not used."]},{"entry":[{},{},"For a spatial SDO or topology network, the actual"]},{"entry":[{},{},"column name is either a default name or what the"]},{"entry":[{},{},"user specified as the geom_column parameter value"]},{"entry":[{},{},"in the call to the"]},{"entry":[{},{},"SDO_NET.CREATE_LINK_TABLE procedure."]},{"entry":["<link_cost_column>","NUMBER","Name of the column containing the cost value to be"]},{"entry":[{},{},"associated with the link, for use by applications that"]},{"entry":[{},{},"use the network. The actual column name is either a"]},{"entry":[{},{},"default name or what you specified as the cost"]},{"entry":[{},{},"column parameter value in the call to the SDO"]},{"entry":[{},{},"NET.CREATE_LINK_TABLE procedure. The cost"]},{"entry":[{},{},"value can represent anything you want, for example,"]},{"entry":[{},{},"the estimated driving time for the link."]},{"entry":["PARENT_LINK_ID","NUMBER","For hierarchical networks only: link ID of the parent"]},{"entry":[{},{},"link of this link. (Section 5.5 explains parent-child"]},{"entry":[{},{},"relationships in a network hierarchy.)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Path Table","Each network can have a path table. A path is an ordered sequence of links, and is usually created as a result of network analysis. A path table provides a way to store the result of this analysis. For each path table, the analysis procedure, or the user, must create an associated path-link table, described below. Each path table contains the columns described below:",{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column Name","Data Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PATH_ID","NUMBER","ID number that uniquely identifies this path"]},{"entry":[{},{},"within the network."]},{"entry":["PATH_NAME","VARCHAR2(32)","Name of the path."]},{"entry":["START_NODE_ID","NUMBER","Node ID of the node that starts the first link in"]},{"entry":[{},{},"the path."]},{"entry":["END_NODE_ID","NUMBER","Node ID of the node that ends the last link in"]},{"entry":[{},{},"the path."]},{"entry":["PATH_TYPE","VARCHAR2(24)","User-defined string to identify the path type."]},{"entry":["COST","NUMBER","Cost value to be associated with the path, for"]},{"entry":[{},{},"use by applications that use the network. The"]},{"entry":[{},{},"cost value can represent anything the user"]},{"entry":[{},{},"wants, for example, the estimated driving time"]},{"entry":[{},{},"for the path."]},{"entry":["SIMPLE","VARCHAR2(1)","Contains Y if the path is a simple path, or N if"]},{"entry":[{},{},"the path is a complex path. In a simple path,"]},{"entry":[{},{},"the links form an ordered list that can be"]},{"entry":[{},{},"traversed from the start node to the end node"]},{"entry":[{},{},"with each link visited once. In a complex"]},{"entry":[{},{},"path, there are multiple options for going from"]},{"entry":[{},{},"the start node to the end node."]},{"entry":["<path_geometry_column>","SDO_GEOMETRY","For all network types except logical, name of"]},{"entry":[{},{},"the column containing the geometry object"]},{"entry":[{},{},"associated with the path. The actual column"]},{"entry":[{},{},"name is either a default name or what you"]},{"entry":[{},{},"specified as the geom_column parameter"]},{"entry":[{},{},"value in the call to the"]},{"entry":[{},{},"SDO_NET.CREATE_PATH_TABLE"]},{"entry":[{},{},"procedure."]},{"entry":[{},{},"For a logical network, this column is not used."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Path-Link Table","For each path table, the user must create a path-link table. Each row in the path-link table uniquely identifies a link within a path in a network. The order of rows in the path-link table is not significant. Each path-link table contains the columns described below:",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Column Name","Data Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PATH_ID","NUMBER","ID number of the path in the"]},{"entry":[{},{},{},"network."]},{"entry":[{},"LINK_ID","NUMBER","ID number of the link in the"]},{"entry":[{},{},{},"network. Each combination of"]},{"entry":[{},{},{},"PATH_ID and LINK_ID must"]},{"entry":[{},{},{},"be unique within the network."]},{"entry":[{},"SEQ_NO","NUMBER","Sequence number of the link in"]},{"entry":[{},{},{},"the path."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"Network Hierarchy","Some network applications require representations at different levels of abstraction. For example, two major processes might be represented as nodes with a link between them at the highest level of abstraction, and each major process might have several subordinate processes that are represented as nodes and links at the next level down.","A network hierarchy allows the user to represent a network with multiple levels of abstraction by assigning a hierarchy level to each node. Links are not assigned a hierarchy level, and links can be between nodes in the same hierarchy level or in different levels. Links are, however, assigned priority levels so that links with higher priorities can be considered first in computing a path. The lowest (most detailed) level in the hierarchy is level 1, and successive higher levels are numbered 2, 3, and so on. Nodes at adjacent levels of a network hierarchy have parent-child relationships. Each node at the higher level can be the parent node for one or more nodes at the lower level. Each node at the lower level can be a child node of one node at the higher level. Links can also have parent-child relationships. However, because links are not assigned to a hierarchy level, there is no necessary relationship between link parent-child relationships and network hierarchy levels.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 6","b":["1","2","2","601","602","605","607","609","1","607","609"]},"The parent-child relationships between each parent node and link and its child nodes and links are shown with dashed lines with arrowheads at both ends. Although not shown in , links can cross hierarchy levels. For example, a link could be defined between a node in the top level and any node in the bottom level. In this case, there would not be a parent-child relationship between the links.","Geometry Objects","Oracle Spatial, often be referred to simply as \u201cSpatial,\u201d provides a SQL schema and functions that facilitate the storage, retrieval, update, and query of collections of spatial features in an Oracle9i database. The preferred network data modeling system utilizes the same geometry objects which are defined by Oracle Spatial, and thereby take advantage of the geometry processing capabilities of Oracle Spatial, including:","a schema (MDSYS) that prescribes the storage, syntax, and semantics of supported geometric data types;","a spatial indexing mechanism;","a set of operators and functions for performing area-of-interest queries, spatial join queries, and other spatial analysis operations and","administrative utilities.","The spatial component of a spatial feature is the geometric representation of its shape in some coordinate space. This is referred to as its geometry.","Oracle Spatial supports the object-relational model for representing geometries. The object-relational model uses a table with a single column of MDSYS.SDO_GEOMETRY and a single row per geometry instance. In the network data model as described above, SDO_GEOMETRY objects may be located in the geometry column of node tables to specify the geometry of object(s) associated with a node, and in the geometry column of link tables to specify the geometry of object(s) associated with a link. The object-relational model corresponds to a \u201cSQL with Geometry Types\u201d implementation of spatial feature tables in the OpenGIS ODBC\/SQL specification for geospatial features. See , Revision 1.1, OpenGIS Project Document 99-049 released May 5, 1999 (http:\/\/www.opengis.org).","Note that, in a spatial network data model implemented by the preferred embodiment, the nodes and links may be associated with SDO_GEOMETRY geometry objects without linear referencing system (LRS) information (an SDO network), or with linear referencing system (LRS) information (an LRS network), or SDO_TOPO_GEOMETRY objects (a topology geometry network).","The Linear Referencing System provides a natural and convenient means to associate attributes or events to locations or portions of a linear feature. It has been widely used in transportation applications (such as for highways, railroads, and transit routes) and utilities applications (such as for gas and oil pipelines). The major advantage of linear referencing is its capability of locating attributes and events along a linear feature with only one parameter (usually known as measure) instead of two (such as latitude\/longitude or x\/y in Cartesian space). Sections of a linear feature can be referenced and created dynamically by indicating the start and end locations along the feature without explicitly storing them. The linear referencing system (LRS) application programming interface (API) in Oracle Spatial provides server-side LRS capabilities at the cartographic level. The linear measure information is directly integrated into the Oracle Spatial geometry structure. The Oracle Spatial LRS API provides support for dynamic segmentation, and it serves as a groundwork for third-party or middle-tier application development virtually for any linear referencing methods and models in any coordinate systems. In an LRS network, each node includes a geometry ID value and a measure value, and each link includes a geometry ID value and start and end measure values; and the geometry ID value in each case refers to an SDO_GEOMETRY object with LRS information. A spatial network can be directed or undirected, depending on the application.","The benefits provided by the object-relational model as used in the network data model include: support for many geometry types, including arcs, circles, compound polygons, compound line strings, and optimized rectangles; ease of use in creating and maintaining indexes and in performing spatial queries; index maintenance by the database server; geometries modeled in a single row and single column of the node and link tables; and optimal performance. Other systems which are integrated with Oracle Spatial include those described in U.S. Pat. No. 6,594,666 issued to Biswas, et al. on Jul. 15, 2003 entitled \u201cLocation aware application development framework\u201d and in U.S. Patent Application Publication No. 20020057283 by Biswas et al. published on May 16, 2002 entitled \u201cRegion modeling of mobile services.\u201d","A geometry is an ordered sequence of vertices that are connected by straight line segments or circular arcs. The semantics of the geometry are determined by its type. Oracle Spatial supports several primitive types and geometries composed of collections of these types, including two-dimensional: points and point clusters, line strings, n-point polygons; arc line strings (all arcs are generated as circular arcs), arc polygons, compound polygons, compound line strings, circles, and optimized rectangles.","Two-dimensional points are elements composed of two ordinates, X and Y, often corresponding to longitude and latitude. Line strings are composed of one or more pairs of points that define line segments. Polygons are composed of connected line strings that form a closed ring and the area of the polygon is implied. Self-crossing polygons are not supported, although self-crossing line strings are supported. If a line string crosses itself, it does not become a polygon. A self-crossing line string does not have any implied area.","The Oracle Spatial data model is a hierarchical structure consisting of elements, geometries, and layers, which correspond to representations of spatial data. Layers are composed of geometries, which in turn are made up of elements. For example, a point might represent a building location, a line string might represent a road or flight path, and a polygon might represent a state, city, zoning district, or city block.","An element is the basic building block of a geometry. The supported spatial element types are points, line strings, and polygons. For example, elements might model star constellations (point clusters), roads (line strings), and county boundaries (polygons). Each coordinate in an element is stored as an X,Y pair. The exterior ring and the interior ring of a polygon with holes are considered as two distinct elements that together make up a complex polygon. Point data consists of one coordinate. Line data consists of two coordinates representing a line segment of the element. Polygon data consists of coordinate pair values, one vertex pair for each line segment of the polygon. Coordinates are defined in order around the polygon (counterclockwise for an exterior polygon ring, clockwise for an interior polygon ring).","A geometry (or geometry object) is the representation of a spatial feature, modeled as an ordered set of primitive elements. A geometry can consist of a single element, which is an instance of one of the supported primitive types, or a homogeneous or heterogeneous collection of elements. A multipolygon, such as one used to represent a set of islands, is a homogeneous collection. A heterogeneous collection is one in which the elements are of different types, for example, a point and a polygon. An example of a geometry might describe the buildable land in a town. This could be represented as a polygon with holes where water or zoning prevents construction.","A layer is a collection of geometries having the same attribute set. For example, one layer in a GIS might include topographical features, while another describes population density, and a third describes the network of roads and bridges in the area (lines and points). Each layer's geometries and associated spatial index are stored in the database in standard tables.","Network Data Model Metadata Views","A network metadata view is created automatically by the system. If the user creates a network using one of the CREATE_<network-type>_NETWORK procedures provided by the PL\/SQL API, the information in the metadata view is automatically updated to reflect the new network; otherwise, the user must insert information about the network into the USER_SDO_NETWORK_METADATA view. The columns of the metadata view are listed below:",{"@attributes":{"id":"p-0114","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Column Name","Data Type","Purpose"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OWNER","VARCHAR2(32}","Owner of the network."]},{"entry":[{},{},"ALL_SDO_NETWORK"]},{"entry":[{},{},"METADATA view only.)"]},{"entry":["NETWORK","VARCHAR2(32)","Name of the network."]},{"entry":["NETWORK_CATEGORY","VARCHAR2(12)","Contains SPATIAL if the network nodes and"]},{"entry":[{},{},"links are associated with spatial geometries;"]},{"entry":[{},{},"contains LOGICAL if the network nodes and"]},{"entry":[{},{},"links are not associated with spatial"]},{"entry":[{},{},"geometries."]},{"entry":["GEOMETRY_TYPE","VARCHAR2(20)","If NETWORK_CATEGORY is SPATIAL,"]},{"entry":[{},{},"contains a value indicating the geometry type"]},{"entry":[{},{},"of nodes and links: SDO_GEOMETRY for"]},{"entry":[{},{},"non-LRS SDO_GEOMETRY objects,"]},{"entry":[{},{},"LRS_GEOMETRY for"]},{"entry":[{},{},"LRS_SDO_GEOMETRY objects,"]},{"entry":[{},{},"TOPO_GEOMETRY for"]},{"entry":[{},{},"SDO_TOPO_GEOMETRY objects."]},{"entry":["NETWORK_TYPE","VARCHAR2(24)","User-defined string to identify the network"]},{"entry":[{},{},"type."]},{"entry":["NO_OF","NUMBER","Number of levels in the network hierarchy."]},{"entry":["HIERARCHY_LEVELS",{},"Contains 1 if there is no hierarchy."]},{"entry":["NO_OF_PARTITIONS","NUMBER","Number of partitions. Must be 1 in current"]},{"entry":[{},{},"version."]},{"entry":["LRS_TABLE_NAME","VARCHAR2(12)","If GEOMETRY_TYPE is"]},{"entry":[{},{},"SDO_GEOMETRY, contains the name of the"]},{"entry":[{},{},"table containing geometries associated with"]},{"entry":[{},{},"nodes."]},{"entry":["LRS_GEOM_COLUMN","VARCHAR2(12)","If LRS_TABLE_NAME contains a table"]},{"entry":[{},{},"name, identifies the geometry column in that"]},{"entry":[{},{},"table."]},{"entry":["NODE_TABLE_NAME","VARCHAR2(32)","If GEOMETRY_TYPE is"]},{"entry":[{},{},"SDO_GEOMETRY, contains the name of the"]},{"entry":[{},{},"table containing geometries associated with"]},{"entry":[{},{},"nodes."]},{"entry":["NODE_GEOM_COLUMN","VARCHAR2(32)","If NODE_TABLE_NAME contains a table"]},{"entry":[{},{},"name, identifies the geometry column in that"]},{"entry":[{},{},"table."]},{"entry":["NODE_COST_COLUMN","VARCHAR2(32)","If NODE_TABLE_NAME contains a table"]},{"entry":[{},{},"name, identifies the cost column in that table."]},{"entry":["LINK_TABLE_NAME","VARCHAR2(32)","If GEOMETRY_TYPE is"]},{"entry":[{},{},"SDO_GEOMETRY, contains the name of the"]},{"entry":[{},{},"table containing geometries associated with"]},{"entry":[{},{},"links."]},{"entry":["LINK_GEOM_COLUMN","VARCHAR2(32)","If LINK_TABLE_NAME contains a table"]},{"entry":[{},{},"name, identifies the geometry column in that"]},{"entry":[{},{},"table."]},{"entry":["LINK_DIRECTION","VARCHAR2(12)","Contains a value indicating the type for all"]},{"entry":[{},{},"links in the network: UNDIRECTED or"]},{"entry":[{},{},"DIRECTED."]},{"entry":["LINK_COST_COLUMN","VARCHAR2(32)","If LINK_TABLE_NAME contains a table"]},{"entry":[{},{},"name,"]},{"entry":[{},{},"identifies the optional numeric column"]},{"entry":[{},{},"containing a cost value for each link."]},{"entry":["PATH_TABLE_NAME","VARCHAR2(32)","Contains the name of an optional table"]},{"entry":[{},{},"containing information about paths."]},{"entry":["PATH_GEOM_COLUMN","VARCHAR2(32)","If PATH_TABLE_NAME is associated with"]},{"entry":[{},{},"a spatial network, identifies the geometry"]},{"entry":[{},{},"column in that table."]},{"entry":["PATH_LINK_TABLE_NAME","VARCHAR2(32)","Contains the name of an optional table"]},{"entry":[{},{},"containing information about links for each"]},{"entry":[{},{},"path."]},{"entry":["PARTITION_TABLE_NAME","VARCHAR2(32)","(Reserved for future use.)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Network Data Model Application Programming Interface","The network data model includes two client application programming interfaces (APIs): a PL\/SQL interface and a Java interface. Both interfaces let the user create and update network data, and the Java interface provides network analysis capabilities. The user normally employs only PL\/SQL or SQL to populate network tables and to create indexes, and then uses the Java interface for application development.",{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 7","b":["701","703","704","710","720"]},"Application programs may store and manipulate both the network information  and the application information  using one of two interfaces.","The Network Data Model PL\/SQL Interface. PL\/SQL is a procedural language superset of the structured query language (SQL). As implemented in the Oracle10RDBMS, SQL\/PL may be used to codify business rules through the creation of stored procedures and packages, to trigger database events to occur, or to add programming logic to the execution of SQL commands. The network data model PL\/SQL API provides functions and procedures for creating, accessing, and managing networks on a database server. These functions and procedures can be grouped into the following logical categories: (a) creating networks; (b) copying and deleting networks: (c) creating network tables; (d) validating network objects; and (e) retrieving information (getting information about the network, checking for a characteristic.","The Network Data Model Java API provides Java Network Objects seen at  which can be used to perform network analysis as indicated at . The network constraint mechanism seen at  enables application-related constraints to guide network analysis without knowing the application context.","The Network Data Model Java Interface.  is a Unified Modeling Language (UML) diagram that shows the relationship between the main classes and interfaces provided by the Java network data model API. The Java client interface for the network data model consists of the following classes and interfaces:","(a) a NetworkManager class seen at  for loading and storing network data and metadata, and to perform network analysis;","(b) a NetworkFactory class seen at  for creating elements related to the network;","(c) a NetworkConstraint class seen at  for creating network constraints;","(d) a Network interface seen at  for a network;","(e) a NetworkMetadata interface at  for network metadata;","(f) a GeometryMetadata class at  for geometry metadata;","(g) a Node interface at  for a network node;","(h) a Link interface at  for a network link;","(i) a Path interface at  for a network path;","(j) a MDPoint interface (not shown in ) for a multiple-dimension point;","(k) a MBR interface (not shown in ) for a multiple-dimension minimum bounding rectangle;","(l) a JGeometry class for Java access to SDO_GEOMETRY data (seen at , , , and ); and","(m) a NetworkDataException class (not shown in ) for exceptions.","The user can use the Java API to perform network metadata and data management operations such as the following: insert, delete, and modify node and link data; load a network from a database; store a network in a database; store network metadata in a database; and modify network metadata attributes.","The user can also use the Java API to perform network analysis operations such as the following:","find the shortest path (for directed and undirected networks);","solve typical transitive closure problems in graph theory;","given a start and an end node, find the shortest path;","find the minimum cost spanning tree (for undirected networks);","find the minimum cost tree that connects all nodes;","given a node, find all nodes that can reach that node, or find all nodes that can be reached by that node;","given a target node and a cost, find all nodes that can be reached by the target node within the given cost;","given a target node and number of neighbors, find the neighbor nodes and their costs to go to the given target node;","find all possible paths between two nodes; and\/or","solve the \u201ctraveling salesman problem:\u201d given a set of nodes, find the lowest-cost path that visits all nodes and in which the start and end nodes are the same.","Network Creation Using the Java API As an alternative to using PL\/SQL and SQL, the network data model Java API can be used to create a network. To create a Java network, the user creates an empty network object with network metadata, and then adds nodes, links, and optionally paths. Once the Java network object is created, the user can perform network analysis on it, and can store the Java network object in the database. The following example Java code excerpt creates a network, performs some analysis, and stores the network in the database.:",{"@attributes":{"id":"p-0148","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ create an empty logical network"]},{"entry":[{},"Network logicalNetwork = NetworkFactory.createLogicalNetwork("]},{"entry":[{},"\u201cLOGICAL_NET\u201d,"]},{"entry":[{},"1, \/\/ no of hierarchy levels"]},{"entry":[{},"true \/\/ directed link?"]},{"entry":[{},");"]},{"entry":[{},"\/\/ create nodes and add them to the network"]},{"entry":[{},"logicalNetwork.addNode(NetworkFactory.createLogicalNode("]},{"entry":[{},"1, \/\/ node ID"]},{"entry":[{},"\u201cN1\u201d \/\/ Node Name );"]},{"entry":[{},"logicalNetwork.addNode("]},{"entry":[{},"NetworkFactory.createLogicalNode("]},{"entry":[{},"2, \/\/ node ID"]},{"entry":[{},"\u201cN2\u201d \/\/ Node Name );"]},{"entry":[{},". . ."]},{"entry":[{},"\/\/ create links and add them to the network"]},{"entry":[{},"logicalNetwork.addLink("]},{"entry":[{},"NetworkFactory.createLogicalLink("]},{"entry":[{},"1, \/\/ link ID"]},{"entry":[{},"\u201cL1\u201d, \/\/ link name"]},{"entry":[{},"logicalNetwork.getNode(1),"]},{"entry":[{},"logicalNetwork.getNode(2), ..."]},{"entry":[{},"\/\/ find the shortest path"]},{"entry":[{},"Path path = logicalNetwork.shortestPath(logicalNetwork,1,2);"]},{"entry":[{},"path.setID(1);"]},{"entry":[{},"\/\/ set Path ID"]},{"entry":[{},"\/\/add the path to network"]},{"entry":[{},"logicalNetwork.addPath(path);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ save the network to database"},{"entry":"NetworkManager.writeNetwork(con,logicalNetwork);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"It is to be understood that the methods and apparatus which have been described above are merely illustrative applications of the principles of the invention. Numerous modifications may be made by those skilled in the are without departing from the true spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the detailed description which follows, frequent reference will be made to the attached drawings, in which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIGS. 2-5"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
