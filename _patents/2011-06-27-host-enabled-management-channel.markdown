---
title: Host enabled management channel
abstract: A logical communication path is provided between a target virtual machine (VM) and a host or application communicating with the VM. The target VM runs on a hypervisor host that has a hypervisor and a proxy agent. The hypervisor manages execution of the VM. A mapping is maintained indicating which VMs execute on which hosts. When the host or application is to send a message or packet to the target VM, the mapping is consulted and the hypervisor host hosting the target VM is identified. The message or packet, which may identify the target VM, is transmitted to the hypervisor host. A proxy agent at the hypervisor host selects a communication channel between the hypervisor and the target VM. The hypervisor then passes the message or packet through the selected channel to the target VM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09191454&OS=09191454&RS=09191454
owner: Microsoft Technology Licensing, LLC
number: 09191454
owner_city: Redmond
owner_country: US
publication_date: 20110627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["In the field of machine virtualization, virtual machines (VMs) have network functionality. That is, VMs may implement a network protocol stack to communicate via a network with other VMs or physical machines. For instance, virtualization hosts (e.g., Hyper-V\u2122 hosts) may form part of a virtualization fabric that hosts guest VMs, where a Fabric Controller manages the virtualization fabric (as used in this Background \u201chost\u201d may refer to a Fabric Controller, for example, or any other computer). However, for various reasons, there may be no network connectivity between a host on a network and a VM, even though there is network connectivity between the host and a machine running the VM (to referred to as the \u201cVM host\u201d). For example, the VM might be on a Virtual Private Network (VPN) to which the host does not belong and the VM's network address may not be valid on the host's network. A firewall might block access to the VM from the hosts' network while allowing access on the VM host's network. A VM might simply be on a different network than the host that might need to communicate with the VM.","In some circumstances, it is desirable to communicate with a VM using a standard protocol such as HTTP (Hypertext Transfer Protocol), SOAP (Simple Object Access Protocol), WMI\u2122 (Windows Management Instrumentation), the WS-Management protocol (transporting WMI calls over a SOAP based protocol via HTTP), and so forth. For example, in some data centers or clouds, VMs might have network agents or services running thereon that perform management functions (such as applying patches to a guest operating system, handling cloud fabric tasks, etc.), perhaps with one or more communication channels for control (e.g., WMI over HTTP) or data (BITS via HTTP). These management services or agents are controlled by a management application (e.g., a Fabric Controller), running on a controller host, for example. The management application sends packets, for example HTTP packets, to the VM's network address and the HTTP packets are delivered to the management agent. The management agents may perform functions in response to information in the payloads of the packets. However, when the management application does not have network connectivity to the VM, it is unable to invoke the management agents on the VM.","Techniques to enable communication with VMs via communication channels between hypervisors and the VMs are discussed below.","The following summary is included only to introduce some concepts discussed in the Detailed Description below. This summary is not comprehensive and is not intended to delineate the scope of the claimed subject matter, which is set forth by the claims presented at the end.","A logical communication path is provided between a target virtual machine (VM) and a host or application communicating with the VM. For example, a path between virtualization host and a VM. The target VM runs on a hypervisor host that has a hypervisor and a proxy agent (e.g., an HTTP proxy). The hypervisor manages execution of the VM. A mapping is maintained indicating which VMs execute on which hosts. When the host or application is to send a message or packet to the target VM, the mapping is consulted and the hypervisor host hosting the target VM is identified. The message or packet, which may identify the target VM, is transmitted to the hypervisor host. A proxy agent at the hypervisor host selects a communication channel between the hypervisor and the target VM. The hypervisor then passes the message or packet through the selected channel to the target VM.","Many of the attendant features will be explained below with reference to the following detailed description considered in connection with the accompanying drawings.","Embodiments discussed below relate to using internal communication channels on a VM\/hypervisor host to allow external network communication. Discussion will begin with an overview of virtualization technology and virtualization layers (to also be referred to as hypervisors). An example of network communication between an application and a VM will be described next. An overview of a logical communication path using private channels on a hypervisor host will be explained. Finally, details of such a communication path will be described in detail, including an application at one end of the communication path and a hypervisor host (VM host) at another end of the communication path.","Machine Virtualization",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","104","106","108","110","112","100","114","114","114","114","114"]},"The virtualization layer  may be of any variety of known or future implementations, such as Hyper-V Server\u2122, VMWare ESX Server\u2122, Xen, Oracle VM\u2122, etc. The architecture of the virtualization layer may a hosted type, with a virtual machine monitor (VMM) running on a host operating system, or a bare-metal type with a hypervisor or the like running directly on the hardware  of the computer . As used herein, the term \u201cvirtual machine\u201d refers to a system-type virtual machine that simulates any specific hardware architecture (e.g., x86) able to run native code for that hardware architecture; to the guest, the virtual machine may be nearly indistinguishable from a hardware machine. Virtual machines discussed herein are not abstract or process-type virtual machines such as Java Virtual Machines.","The virtualization layer  performs the basic function of managing the virtual machines  and sharing of the hardware  by both itself and the virtual machines . Any of a variety of techniques may be used to isolate the virtual machines  from the hardware . In one embodiment, the virtualization layer may provide different isolated environments (i.e., partitions or domains) which correspond to virtual machines . Some of the virtualization layer  such as shared virtual device drivers, inter virtual machine communication facilities, and virtual machine management APIs (application programming interfaces), may run in a special privileged partition or domain, allowing for a compact and efficient hypervisor. In other embodiments, functionality for virtual machine management and coherent sharing of the hardware  may reside in a monolithic on-the-metal hypervisor.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2","b":["100","114","140","100","142","114","114","140","140","114","140","141","100","100","140","114","140"]},"The virtualization layer  manages execution of the virtual machine , handling certain calls to the guest's kernel, hypercalls, etc., and coordinating the virtual machine 's access to the underlying hardware . As the guest and its software run, the virtualization layer  may maintain state of the guest on the virtual disk image ; when the guest, or an application run by the guest, writes data to \u201cdisk\u201d, the virtualization layer  translates the data to the format of the virtual disk image  and writes to the image.","The virtualization layer  may perform a process  for shutting down the virtual machine . When an instruction is received to stop the virtual machine , the state of the virtual machine  and its guest is saved to the virtual disk image , and the executing virtual machine  process (or partition) is deleted. A specification of the virtual machine  may remain for a later restart of the virtual machine .","Overview of Communication to a Virtual Machine",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":["180","182","184","186","180","188","189","190","188","192","180","194","196"]},"The guest  also has implementations of the above-mentioned protocols, as does hypervisor  on hypervisor host . The hypervisor host  is a computer running the hypervisor , which manages execution of the VM . The agent  (also referred to as \u201cguest agent \u201d) resides on the guest  and may implement the same application protocol implemented by the application . The application  and guest agent  may be any variety of software, for instance background network services, interactive applications, executables, components of larger applications or suites, and so forth. In one embodiment, the application  is a virtual machine management application that manages VMs, and the agent  performs management functions in accordance with communications with the application .","Execution of the VM  is managed by the hypervisor , which may manage other VMs not shown in . In a case where direct connectivity between client host  and VM  is possible, the application  and agent  communicate via the network  as follows. The application  forms an application message according to the application protocol  (e.g., an HTTP packet or message). The application  requests its local operating system to send the message to the network address (e.g., HTTP address) of the hypervisor host . The protocol stack of the local operating system opens a connection to the hypervisor host , encapsulates the application 's message in a transport payload and the transport payload within a network packet . The network header thereof (which contains the network address of the hypervisor host ) is routed through the network  to the hypervisor host . The hypervisor host  may pass the packet  to the VM  and in turn to the guest  and guest agent . Along the way, various payloads are extracted by the respective protocol implementations, and the guest agent  receives the transmitted application message (e.g., \u201ccommand foo\u201d). The process is similar but reversed when the guest agent  transmits an application message to the application .","As used herein, the terms \u201cclient\u201d, \u201cclient host\u201d, \u201capplication\u201d, and \u201cagent\u201d, \u201chypervisor\u201d, and \u201chypervisor host\u201d are used in their broadest senses. The particular platforms and software that communicate using techniques described herein are of minor significance. In fact, it may be notable that existing application-level software and protocols may use the communication techniques described below without significant modification (if any), in particular at the end that is communicating with a VM via a network (e.g., application ). Moreover, while the HTTP, IP (Internet Protocol), and TCP\/UDP (Transmission Control protocol\/Universal Datagram Protocol) protocols are sometimes mentioned for illustration, the communication techniques described below may work with any standard networking protocols or versions thereof (e.g., SOCKS). Furthermore, for brevity, \u201cHTTP\u201d, will is deemed to refer to versions or variants of HTTP as well as HTTPs (HTTP Secure).","Logical Communication Path, Application and Hypervisor Embodiments",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4","b":["220","180","186","222","198","188","186","186","188","190","190","188","223","198","223","222","223","186","224","186"]},"In one embodiment, a VM-host map  contains information indicating which VMs reside on which hypervisor hosts. The client host  may use a known identifier of the VM  (possibly known by the application ) to look up the network address of the hypervisor host  in the VM-host map . The identifier may be added to the packet  for use by the proxy agent . The client host  sends the packet  to the looked-up network address of the hypervisor host , which the network  uses to route  the packet  to the hypervisor host . As mentioned above, the proxy agent  uses the identifier of the VM  (e.g., from an HTTP CONNECT header) to cause the virtualization layer to pass the packet  to the VM .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 5","FIG. 5"],"b":["188","186","188","226","188","250","186","252","254","186","180","256","186","1","186","186","198","258","223","223","258","260","223","190","1","5"]},"In one embodiment, process  may be performed fully or partly by the application . In another embodiment, the application  may act as a proxy or service for other applications that are to communicate with VM . Those applications pass the application  a VM identifier and a message body and the application  builds a packet for the body, adds the VM identifier, and transmits the packet to the corresponding hypervisor host. In yet another embodiment, rather than maintaining a lookup table (VM-host map ), the VM identifiers may be globally unique hostnames registered with a DNS (Domain Name Service) server (possibly with local or limited scope to avoid conflicts) that maps to the network addresses of the hypervisor hosts that correspond to the VMs. In which case, when an application or client host wishes to communicate with a VM, it looks up the VM's identifier (e.g., a \u201cfake\u201d DNS name) via the local DNS server to obtain the correct hypervisor host's network address.","The form of the VM identifiers is not important as long as the proxy agent  and the client hosts\/applications share the same names. The system may use any convention for naming VMs, for example a custom URI (Universal Resource Identifier) format such as \u201chost#:vm#\u201d.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6","b":["198","223","188","222","192","280","282","198","223","1","1","1","186","222","283","284","283","224","224","186","186","224","224","286","288","286","186","283","290","284"]},"Having identified the correct communication channel  for the packet , at step  the hypervisor  and\/or proxy agent  passes the packet  to communication channel . In turn, the VM  performs process . At step  the guest  receives the packet . At step , based on the packet , the guest  passes the packet  to the guest agent , which proceeds to service the substantive content of the packet  (e.g., executes \u201ccommand foo\u201d). For example, the application-protocol type of the packet  (e.g. HTTP) might be mapped by the guest to a port number that the guest agent  listens on. That is, the guest agent  may listen on specific ports (e.g., a designated WS-Management port  for management, a BITS port  for data, etc.). The proxy agent  (e.g., HTTP proxy) listens on the same ports (, ) of the external IP addresses (of the hypervisor host ). The proxy agent  then forwards any incoming traffic onto the corresponding ports in the guest VMs, thus allowing multiplexing of various control and data traffic onto the guest VMs.","Regarding the communication channels, in one embodiment the communication channels are based on the same network and\/or transport protocols used to deliver the packet  to the hypervisor host . In effect, a communication channel may be a limited private network connection between the hypervisor host  and the VM . In another embodiment, the proxy agent  may look into the packet  and change header information or otherwise modify the packet  before forwarding the packet  to the VM .","In effect, from the viewpoint of application  and guest agent , the two are able to exchange application-level communications using ordinary network communication protocols and addresses, much as they might when a VM is directly accessible or addressable from the client host . With regard to receiving packets, the proxy agent  functions much as known proxies function.","As mentioned above, communications may also originate from within the guest or guest  agent  and be passed through the communication channel and virtualization layer to the proxy agent . For example, the guest agent  may be configured with a network address of client host . The proxy agent  in turn transmits the guest-originated packet to the client host .","In one embodiment, in order to provide visibility of VMs, hypervisor hosts (hosts on which VMs execute) may self-register a VM when a VM is created. For example, a hypervisor host might add a new entry to VM-host mapping table  for a new VM, identifying the host and the new VM.","Embodiments and features discussed above can be realized in the form of information stored in volatile or non-volatile computer or device readable media. This is deemed to include at least media such as optical storage (e.g., compact-disk read-only memory (CD-ROM)), magnetic media, flash read-only memory (ROM), or any current or future means of storing digital information. The stored information can be in the form of machine executable instructions (e.g., compiled executable binary code), source code, bytecode, or any other information that can be used to enable or configure computing devices to perform the various embodiments discussed above. This is also deemed to include at least volatile memory such as random-access memory (RAM) and\/or virtual memory storing information such as central processing unit (CPU) instructions during execution of a program carrying out an embodiment, as well as non-volatile media storing information that allows a program or executable to be loaded and executed. The embodiments and features can be performed on any type of computing device, including portable devices, workstations, servers, mobile wireless devices, and so on."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present description will be better understood from the following detailed description read in light of the accompanying drawings, wherein like reference numerals are used to designate like parts in the accompanying description.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
