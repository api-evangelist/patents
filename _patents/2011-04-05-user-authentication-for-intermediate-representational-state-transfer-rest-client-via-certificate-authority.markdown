---
title: User authentication for intermediate representational state transfer (REST) client via certificate authority
abstract: The present description refers to a computer implemented method, computer program product, and computer system for receiving a resource request at a representational state transfer (REST) client from a user, the resource request including a user ID, determining, by the REST client, a key pair including a public key and a corresponding private key that are associated with the user ID, obtaining, by the REST client, a certificate associated with the user ID that is signed by a certificate authority and based on at least the user ID and the public key associated with the user ID, impersonating, by the REST client, the user to a REST server using the certificate and the private key associated with the user ID, and accessing, by the REST client on behalf of the user, using a stateless protocol with the REST server, the requested resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021552&OS=09021552&RS=09021552
owner: SAP SE
number: 09021552
owner_city: Walldorf
owner_country: DE
publication_date: 20110405
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This description is directed generally to authentication, and in particular, to a computer-implemented method, apparatus, and computer program product for user authentication for intermediate representational state transfer (REST) client via a certificate authority.","Representational state transfer (REST) is a style of software architecture for distributed media systems such as the World Wide Web. The REST architectural style governs the behavior of participants, and identifies a number of constraints. REST was initially described in the context of Hypertext Transfer Protocol (HTTP), but is not limited to HTTP. Applications that comply with the constraints or recommendations of REST are described as being RESTful. RESTful applications typically make use of existing, well defined interfaces and capabilities.","The REST architectural style describes a number of constraints to the architecture while leaving the implementation of the individual components flexible and up to the protocol designer. According to these constraints, clients and servers are typically separate or communicate via a uniform interface. For example, HTTP allows several standard methods such as Get, Post, Put, Delete, etc. In addition, REST software architecture typically involves a stateless protocol in which no client context is stored on the server between requests. State information may be stored on the server, such as resources. For example, resources stored on the server may be addressable or accessible via an identifier or URL (Uniform Resource Locator). Also, the client may store state information. A layered system or a layered architecture is typically used for REST based architectures, and in such cases, clients may not be able to determine whether it is connected directly to an end server or to an intermediary (or intermediate device or client) along the way.","HTTP is an example of a RESTful protocol. RESTful protocols, such as HTTP, may include limited features or fields for communicating security credentials. For example, hash values may be provided within HTTP headers. However, RESTful protocols, such as HTTP, do not typically allow for other, more complex security credentials (such as security tokens or certificates, etc.) to be communicated within HTTP messages or requests. Therefore, REST clients and REST servers (such as, for example, HTTP clients and servers) may be limited in their ability to communicate security credentials and perform some types of security related functions.","In one general aspect, a computer program product is provided. The computer program product is tangibly embodied on a computer-readable storage medium and includes executable code that, when executed, is configured to cause at least one data processing apparatus to receive a resource request at a representational state transfer (REST) client from a user, the resource request including a user ID, determine, by the REST client, a key pair including a public key and a corresponding private key that are associated with the user ID, and obtain, by the REST client, a certificate associated with the user ID that is signed by a certificate authority and based on at least the user ID and the public key associated with the user ID. The code is further configured to cause the data processing apparatus to impersonate, by the REST client, the user to a REST server using the certificate and the private key associated with the user ID, and access, by the REST client on behalf of the user, using a stateless protocol with the REST server, the requested resource.","In another general aspect, a computer implemented method is provided that includes receiving a resource request at a representational state transfer (REST) client from a user, the resource request including a user ID, determining, by the REST client, a key pair including a public key and a corresponding private key that are associated with the user ID, obtaining, by the REST client, a certificate associated with the user ID that is signed by a certificate authority and based on at least the user ID and the public key associated with the user ID, impersonating, by the REST client, the user to a REST server using the certificate and the private key associated with the user ID, and accessing, by the REST client on behalf of the user, using a stateless protocol with the REST server, the requested resource.","In another general aspect, an apparatus includes a transceiver configured to receive a resource request at a representational state transfer (REST) client from a user, the resource request including a user ID, key determination logic configured to determine, by the REST client, a key pair including a public key and a corresponding private key that are associated with the user ID, and certificate acquisition logic configured to obtain, by the REST client, a certificate associated with the user ID that is signed by a certificate authority and based on at least the user ID and the public key associated with the user ID. The apparatus further includes impersonating logic configured to impersonate, by the REST client, the user to a REST server using the certificate and the private key associated with the user ID, and accessing logic configured to access, by the REST client on behalf of the user, using a stateless protocol with the REST server, the requested resource.","The subject matter described in this specification can be implemented as a method or as a system or using computer program products, tangibly embodied in information carriers, such as a CD-ROM, a DVD-ROM, a semiconductor memory, and a hard disk. Such computer program products may cause a data processing apparatus to conduct one or more operations described herein.","In addition, the subject matter described herein may also be implemented as a system including a processor and a memory coupled to the processor. The memory may encode one or more programs that cause the processor to perform one or more of the method acts described in this specification.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.","In the following, a detailed description of examples will be given with reference to the drawings. It should be understood that various modifications to the examples may be made. In particular, elements of one example may be combined and used in other examples to form new examples.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"],"b":["108","108","110","110","120","111","120","140","141","130","121","120","120","110","130"]},"The user computer , REST client , certificate authority (CA)  and REST server  in  are shown as being connected via communication links ,  and . However, in one example implementation each (or one or more) of these entities may be coupled together (or may communicate) via one or more networks, such as a Local Area Network, a wireless network, the Internet, and\/or other network(s), not shown.","As noted, Representational state transfer (REST) is a style of software architecture for distributed media systems such as the World Wide Web. The REST architectural style governs the behavior of participants, and identifies a number of constraints. REST was initially described in the context of Hypertext Transfer Protocol (HTTP), but is not limited to HTTP. Applications that comply with the constraints or recommendations of REST may be considered to be RESTful.","In one example implementation, REST client  and REST server  may communicate via a RESTful protocol, such as HyperText Transfer Protocol (HTTP), for example, or other RESTful protocol. In one example implementation, REST server  may store a resource, e.g., that may be assigned to or associated with the user  (or associated with or assigned to the user ID for user ), for example.","REST client  may, from time to time, access resources stored by REST server  via HTTP or other RESTful protocol. In one illustrative example, REST client  may be associated with (or may be used to provide) a photograph print service, and REST server  may store one or more photos for users as part of a web photo storage service. For example, a user  operating user computer  may be identified by a user identifier or user ID. The user  may have photos stored on or by REST server . Or, in other words, the web photo storage service may store one or more photos for the user  (and associated with the user ID for user ) on the REST server , or in another storage location controlled by REST server . The example of a photo printing service and web photo storage service is merely an illustrative example and the disclosure is not limited thereto.","User , via user computer , may send a request  to REST client , such as a resource request. The resource request may be a request to access a resource or a request to obtain a copy of a resource (e.g., a request to obtain a copy of a photo stored by REST server ), a request for REST client  to provide processing of a resource stored by REST server  (e.g., to provide a print version of a photo stored by server ), or other resource-related request, for example.","In one illustrative example, REST client  may authenticate user , e.g., using a username (or user ID) and password provided by user  via user computer , or other authentication technique. For example, the user  may log in to the printing service provided by REST client , e.g., using a user ID and password. User , via computer , may then send a request to REST server  (or to the photo print service) for a 8\u2033\u00d710\u2033 color print of a specific photo identified by the user  (e.g., having a photo ID) stored by REST server . Thus, the user , may send a message to REST client  that includes a request for a color print of a photo, a user ID (or user identifier) of the user , and a photo identifier (or photo ID), which may be a link or URL to a location where the photo may be stored by server , for example. The photo (identified by the photo ID) may be stored by server  in an account associated with (or owned by or assigned to) the user ID (e.g., stored for user ).","In an example implementation, only user  has permission to access photos stored in the user's account stored by server . In such an example implementation, REST client  may not have permission to access photos in the user's web photo storage account provided by REST server .","User computer  may store security credentials, such as a certificate, security token, a private key\/public key pair, or other credentials, that allows the user  to authenticate itself to REST server  to allow the user  to access photos stored by server . However, in this example, the user  has requested the REST client  to access a photo from REST server  and then print out a copy to be sent to user .","However, in some cases, there may be problems that may prevent the REST client  from accessing the user's photo account on REST server  via a RESTful protocol. In one example implementation, the RESTful protocol (e.g., HTTP) does not have the ability to pass the user's security credentials (e.g., certificate, security token) from the REST client  to the REST server . In one example implementation, security credentials may be required by the REST server  to authenticate the user , before allowing the user  to access his\/her photo account, for example. As noted, RESTful protocols do not typically have the ability to forward or communicate security credentials. Also, the RESTful protocol may be considered a stateless protocol where the REST server  does not store context information of the client between requests. Moreover, user  may not typically provide or share its own private key (that may be stored by user computer ) with REST client , since sharing a private key might compromise such private key\/public key pair.","Therefore, according to an example implementation, REST client  may use an entity that is trusted by the REST server  (such as certificate authority (CA) ) to obtain security credentials to allow REST client  to impersonate user  to REST server . In this manner, the intermediate REST client  may obtain access to the user's account stored on REST server  through the use of the stateless protocol or RESTful protocol (e.g., such as HTTP or secure HTTP, known as HTTPS). In an example implementation, certificate authority  may be a Security Token Service (STS). REST client  may impersonate user  by presenting security credentials (or other information) associated with the user ID of user  to REST server  to provide the appearance to REST server  that REST client  is user  (and\/or acting on behalf of user ) to obtain access to information stored by REST server  that is typically only accessible by the user . Although, in this example, REST client  may be considered to be an authorized impersonator since REST client  has permission from user  to access the user's photos or other information stored on REST server .","Referring to  again, after receiving the request  from user computer  (e.g., which may include an identification of the resource or photo, and a user ID of the user ), at , REST client  may generate a key pair  that includes a public key  and a corresponding private key  that are associated with the User ID of user . Or, if REST client  has previously generated and stored a key pair  for the user ID, the REST client  may retrieve from its memory the key pair  associated with the User ID for user . Thus, in this manner, the REST client  may determine a key pair associated with the User ID (either by generating the key pair, or by retrieving a previously generated key pair from memory, for example).","In one example implementation, certificate authority  and REST client  may be provided on separate (or different) computers or systems coupled together via the Internet or other network. In another example implementation, the REST client  and the certificate authority  may be different software programs running on a single computer or system, for example. In one example implementation, the certificate may be self-signed by the REST client .","In an example implementation, this new public key\/private key pair  generated by the REST client  and associated with the User ID may not be known to nor used by the user . Rather, this new key pair  may be generated by the REST client  for purposes (for example) of impersonating the user  to REST server  (or otherwise access REST server  on behalf of user ). As a result, the private key  of this new key pair  may be stored only by the REST client , and may not typically be stored by (or used by) the user \/computer . While the REST client  may (as in this illustrative example) have permission to access the user's photos stored on server , the generation, storage and use of such new key pair  (associated with the User ID) by REST client  may be unknown to user , for example.","In general, a certificate may provide a way to implement authentication. A user can authenticate itself to a system by presenting his certificate, which binds his public key to his identity (e.g., user ID, name or subject of the certificate). A certification authority, after authenticating the identity of a subject, may digitally sign the certificate using its private key, thereby incorporating its signature into the certificate. In one example, a certificate authority may calculate a digital signature by computing the message digest of the certificate and encrypting it with its private key.","REST client  may send a certificate signing request via line  to a trusted entity such as certificate authority (CA) . Certificate authority  is trusted by both the REST client  and REST server . The certificate signing request may include an unsigned certificate, which may include the user ID for user  (or name\/subject of the certificate) and the generated public key  associated with such user ID. The certificate authority  may then sign the certificate using the CA's private key, and return a signed certificate  via line  to REST client . In an example implementation, the signed certificate  sent to the REST client  may include the certificate (e.g., including the user ID  and the public key  of the generated key pair  that is associated with the User ID for user ) and the digital signature  provided by the certificate authority  based on the certificate authority's private key . In an example implementation, the certificate may be a X.509 certificate.","At , the REST client  may impersonate the user  to the REST server  using the signed certificate  (or other credentials) associated with the user ID for user  and obtained from the certificate authority  to access the resource (e.g., access the user's photos) stored on the REST server . In this illustrative example, REST client  may be considered to be an authorized impersonator because REST client  has permission from user  to impersonate user  to REST server .","In an example implementation, REST client  may impersonate user  to server  by establishing a secure sockets layer (SSL) connection with REST server  using the signed certificate  and the private key  of the generated key pair  associated with the user ID of user . SSL may also be known as or referred to as Transport Layer Security (TLS). SSL\/TLS is a cryptographic protocol that provides communications security over the Internet. SSL\/TLS encrypts segments of network connections above the Transport Layer (including HTTP messages), using symmetric cryptography for privacy and a keyed message authentication code for message reliability.","An example implementation of establishing an SSL connection between REST client  and REST server  will be briefly described. REST client  may send a ClientHello message, and REST server  may send a ServerHello message where the parties agree on TLS\/SSL version number, cipher suites, and other options, for example. The REST server  may send its certificate to the REST client  via a Certificate message, in the case of mutual authentication. The REST server  may request a certificate from the REST client  using a CertificateRequest message. The REST client  responds with a Certificate message, which contains the REST client's signed certificate  (signed by CA ). The REST client  may send a CertificateVerify message, which may be a digital signature over a previous handshake message(s) using the REST client's certificate's private key . The REST server , using the certificate's public key , may confirm that the REST client  possesses (or has access to) the private key  corresponding to the provided certificate , and thus owns the certificate. In this manner, the REST server  may authenticate the REST client . However, in this case the REST server  is authenticating the REST client  as the user , based on the certificate  from CA  and the corresponding private key , both of which are associated with the user ID of user . The REST server  and the REST client  agree on data encryption keys, where data subsequently transmitted over the SSL connection between REST server  and REST client  will be encrypted.","Therefore, based on the REST server  authenticating the REST client  as the user , the REST server  may then allow the REST client  to access the resources assigned to (or owned by) the user  (or associated with the user ID of user ). Thus, for example, the REST client  may then access or obtain a copy of the requested resource (e.g., the photo identified by the user ) that is stored at REST server  via a stateless protocol between the REST client  and the REST server . Thus, in one example implementation, REST client  may obtain the requested resource on REST server  via HyperText Transfer Protocol Secure (HTTPS), in which the HTTP methods or HTTP messages are encrypted over the SSL connection that was previously established between the REST client  and REST server . Thus, for example, a HTTP Get message (e.g., including a link, URL or other identifier that identifies the requested resource or photo), encrypted via the previously established SSL connection, is sent from the REST client  to the REST server . The REST server  replies with the requested resource, e.g., the requested photo.","In one example implementation the resource obtained by the REST client  from REST server  may be forwarded to the user computer . In another example implementation, the REST client  may process the requested resource and then forward or provide the processed resource to the user  or user computer , e.g., as requested. For example, REST client  (e.g., as part of a photograph print service) obtains a requested photo from REST server  by obtaining security credentials associated with the user ID for user  from CA  and then using these security credentials (e.g., certificate  and corresponding private key  associated with the user ID for user ) to impersonate the user  to REST server  to access or obtain the identified resource, as described above. In this manner, REST client  may obtain the requested resource (e.g., the identified photo) without further input or intervention by the user, despite the limitations of the stateless protocol (or RESTful protocol), such as HTTPS. REST client  may then process the requested resource by, in this photo example, printing a color print copy of the identified and retrieved photo, and then mailing or delivering the requested print to user , for example.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["210","220","153","154","155","230","120","150","140","154","240","120","108","130","150","155","250","130"]},"In one example implementation, the impersonating logic  may include SSL connection logic  configured to establish by the REST client , a secure sockets layer (SSL) connection with a REST server  using the certificate  and the private key  associated with the user ID.","Also, in one example implementation, the key determination logic  may be configured to generate, by the REST client , a key pair , including a public key  and a corresponding private key  that are associated with the user ID. This key pair may be unknown to the user, and the private key  for the key pair may be stored by the REST client  and not stored by the user computer . This key pair  may be used by the REST client  to impersonate the user  in communicating with the REST server  to access the requested resource. In one example implementation, the certificate may be a X.509 certificate that includes the user ID, the public key  associated with the user ID and a digital signature  provided by the certificate authority  based on the certificate authority's private key .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["120","120","310","120","153","154","155","320","120","150","140","154","330","120","108","130","150","155","340","120","130","350"]},"In one example implementation, the impersonating operation () may include establishing, by the REST client , the user to a REST server  using the certificate  and the private key  associated with the user ID ().","Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program, such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program that might implement the techniques mentioned above might be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.","To provide for interaction with a user, implementations may be implemented on a computer having a display device, e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.","Implementations may be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation, or any combination of such back-end, middleware, or front-end components. Components may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.","While certain features of the described implementations have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the embodiments."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
