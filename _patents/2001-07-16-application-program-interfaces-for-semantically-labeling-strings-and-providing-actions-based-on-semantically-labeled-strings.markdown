---
title: Application program interfaces for semantically labeling strings and providing actions based on semantically labeled strings
abstract: Application program interfaces (API) are provided for labeling strings while a user is creating a document and providing user actions based on the type of semantic label applied to the string. A recognizer API is provided and includes properties and methods or instructions which allow recognizer plug-ins to semantically label strings of text or cells or information. An action API is provided and includes properties and methods that are called upon when a user initiates particular actions such as opening a web browser, going to a particular URL, or opening an instance of a word processing or spreadsheet program. After the strings are annotated with a type label, application program modules may use the type label to provide users with a choice of actions. If the user's computer does not have any actions associated with a type label, the user may be provided with the option to surf to a download Uniform Resource Locator (URL) and download action plug-ins for that type label. One or more recognizer plug-ins perform the recognition of particular strings in an electronic document. The recognizer plug-ins may be packaged with an application program module or they may be written by third parties to recognize particular strings that are of interest. One or more action plug-ins provide possible actions to be presented to the user based upon the type label associated with the string.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07712024&OS=07712024&RS=07712024
owner: Microsoft Corporation
number: 07712024
owner_city: Redmond
owner_country: US
publication_date: 20010716
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This is a continuation-in-part of U.S. patent application Ser. No. 09\/588,411, entitled \u201cMETHOD AND SYSTEM FOR SEMANTICALLY LABELING STRINGS AND PROVIDING ACTIONS BASED ON SEMANTICALLY LABELED STRINGS\u201d, filed Jun. 6, 2000, which is incorporated by reference herein.","This invention relates to application program interfaces for semantically labeling strings of text during creation of an electronic document and providing a selection of actions that may be performed based on the semantically labeled strings.","Electronic documents such as word processing documents and spreadsheet documents typically include semantic information that would be helpful if the information was recognized as such. Recognition and use of this semantic information could result in increased interoperability between desktop software applications and other desktop applications and\/or web-based applications.","The ability to recognize strings of text, such as in search engines, is well-known. Additionally, various information retrieval systems have capabilities to label documents. For example, the LEXIS-NEXIS service provides links in some of its documents for company names, famous people and stock ticker symbols.","However, none of the services described above allow strings of text to be labeled with semantic information on-the-fly, i.e., as a user is typing text into a document and creating a document. Thus, there is a need for a method and system for semantically labeling strings while a user is creating a document and providing user actions based on the type of semantic label applied to the string. There is further a need for application program interfaces (API) for labeling strings while a user is creating a document and providing user actions based on the type of semantic label applied to the string.","It is with respect to these considerations and others that the present invention has been made.","The present invention provides application program interfaces (API) for labeling strings while a user is creating a document and providing user actions based on the type of semantic label applied to the string. A recognizer API is provided and includes properties and methods or instructions which allow recognizer plug-ins of a recognizer dynamic-link library (DLL) to semantically label strings of text or cells or information. An action API is provided and includes properties and methods that are called upon when a user initiates particular actions such as opening a web browser, going to a particular URL, or opening an instance of a word processing or spreadsheet program.","These and other features, advantages, and aspects of the present invention may be more clearly understood and appreciated from a review of the following detailed description of the disclosed embodiments and by reference to the appended drawings and claims.","The present invention is directed toward application program interfaces (API) for labeling strings while a user is creating a document and providing user actions based on the type of semantic label applied to the string. A recognizer API is provided and includes properties and methods or instructions which allow recognizer plug-ins of a recognizer dynamic-link library (DLL) to semantically label strings of text or cells or information. An action API is provided and includes properties and methods that are called upon when a user initiates particular actions such as opening a web browser, going to a particular URL, or opening an instance of a word processing or spreadsheet program. A string is defined as a data structure composed of a sequence of characters usually representing human-readable text.","After the strings are annotated with a type label, application program modules may use the type label to provide users with a choice of actions. If the user's computer does not have any actions associated with a type label, the user may be provided with the option to surf to a download Uniform Resource Locator (URL) and download action plug-ins for that type label. One or more recognizer plug-ins perform the recognition of particular strings in an electronic document. The recognizer plug-ins may be packaged with an application program module or they may be written by third parties to recognize particular strings that are of interest. One or more action plug-ins provide possible actions to be presented to the user based upon the type label associated with the string.","In one embodiment, the invention is incorporated into a suite of application programs referred to as \u201cOFFICE\u201d, and more particularly is incorporated into a preferred word processing application program entitled \u201cWORD 10.0\u201d, a preferred spreadsheet application program entitled \u201cEXCEL 10.0\u201d, a preferred e-mail application program entitled \u201cOUTLOOK 10.0\u201d and a preferred web browser application program entitled \u201cINTERNET EXPLORER 6\u201d, all marketed by Microsoft Corporation of Redmond, Wash. Briefly described, the preferred application programs allow a user to create and edit electronic documents by entering characters, symbols, graphical objects, and commands.","Strings are recognized and annotated, or labeled, with a type label. After the strings are annotated with a type label, application program modules may use the type label and other metadata to provide users with a choice of electronic commerce actions. If the user's computer does not have any actions associated with that type label, the user may be provided with the option to surf to a download Uniform Resource Locator (URL) and download action plug-ins for that type label.","Having briefly described an embodiment of the present invention, an exemplary operating environment for the present invention is described below.","Exemplary Operating Environment","Referring now to the drawings, in which like numerals represent like elements throughout the several figures, aspects of the present invention and the exemplary operating environment will be described.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},"With reference to , an exemplary system for implementing the invention includes a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples the system memory to the processing unit . The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage for the personal computer . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD-ROM disk, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored in the drives and RAM , including an operating system , one or more application programs , a word processor program module  (or other type of program module), program data , and other program modules (not shown).","A user may enter commands and information into the personal computer  through a keyboard  and pointing device, such as a mouse . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers or printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the LAN  through a network interface . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1"],"b":["200","36","37","36","210","215","210","215","205","210","220","215","225","227"]},"In a preferred embodiment, the action plug-ins and recognizer plug-ins are Automation Servers. Automation Servers are well-known software components which are assembled into programs or add functionality to existing programs running on the Microsoft WINDOWS\u00ae operating system. Automation Servers may be written in a variety of computing languages and may be un-plugged from a program at run time without having to recompile the program. It should also be understood that, in a preferred embodiment, the action DLL and recognizer DLL are merged into a single DLL.","The recognizer DLL  handles the distribution of strings from the electronic document running on the application program module  to the individual recognizer plug-ins . The recognizer plug-ins  recognize particular strings in an electronic document, such as a word processing document, a spreadsheet document, a web page, etc. The recognizer plug-ins  may be packaged with the application program module  or they may be written by third parties to recognize particular strings that are of interest. Typically, the recognizer DLL  passes strings to the recognizer plug-ins  in one paragraph or cell value increments.","As part of recognizing certain strings as including semantic information, the recognizer plug-ins  determine which strings are to be labeled and how they are to be labeled. After receiving these results from the various recognizer plug-ins , the recognizer DLL  sends semantic categories to the application program module. In a preferred embodiment, a semantic category comprises the recognized string, a type label, and a download URL. A semantic category may also comprise metadata. The recognizer plug-ins  each run separately and the recognizer DLL  is responsible for handling the asynchronicity that results from different recognizer plug-ins returning results with different delays.","After a string is labeled by a recognizer plug-in  and a semantic category is sent to the application program module , the user of the application program module  will be able to execute actions that are associated with the type label of the semantic category. The action DLL  manages the action plug-ins  that are run to execute the actions. As with the recognizer plug-ins , the action plug-ins  may be packaged with the application program module  or written by third parties to perform particular actions that are of interest to the third party. The action plug-ins provide possible actions to be presented to the user based upon the type label associated with the string. The action DLL  determines what type label the semantic category includes and cross-references the type label in the type-action database  with a list of actions to determine what actions to present to the user. It should be understood that, in a preferred embodiment, the type-action database is not used. Instead, the list of actions is dynamically generated for each type by looking in the registry to determine which actions are installed and then querying the action DLLs to determine which types they apply to.","After the user chooses an action, the action DLL  manages the appropriate action plug-ins  and passes the necessary information between the action plug-ins and the application program module  so that the action plug-in may execute the desired action. Typically, the application program module sends the action DLL an automation request to invoke the action the user has selected.","As described above, the combination of the recognized string, type label, metadata and download URL is referred to herein as a semantic category. The type label is a semantic information label. The semantic category may also comprise metadata, which are hidden properties of the semantic category. An example of a semantic category may clarify the definition. Suppose a user enters the text \u201cGone With the Wind\u201d into an electronic document. The string \u201cGone With the Wind\u201d may be identified as a semantic category of type label \u201cBook Title\u201d and of type label \u201cMovie Title\u201d. In addition, metadata such as the ISBN number may be returned by the recognizer plug-in to the application program module as part of the semantic category. A download URL may be provided with the type labels \u201cBook Title\u201d and \u201cMovie Title\u201d in case the user's machine has not stored action plug-ins for these type labels. For example, an action for the type label \u201cBook Title\u201d may be \u201cBuy this Book\u201d from an online retailer. If the user does not have the action plug-in DLL  corresponding to \u201cBuy this book\u201d, then the download URL may be used to navigate the user's web browser to an appropriate website to download this action plug-in. In other implementations of the invention, multiple download URLs may be provided for a single type label.","It should also be understood that the present invention, in a preferred embodiment, also recognizes sequences of capitalized words that contain function words, and which are likely to be special, but for which there is no type label information. These strings are typically labeled by a grammar checker program module.","The actions provided for a semantic category may utilize both the type label and the text of the recognized string. For example, a word processor program module may use a grammar checker as a recognizer plug-in to label strings that are person names. After a string has been labeled as a person's name, the word processor program module may, through a standard user interface mechanism, allow users to execute pertinent actions, such as looking up the person's name in the contacts folder in a personal information manager program module, sending electronic mail, or searching for the person's name in an HR database.","Having described an exemplary architecture, an exemplary method  for semantically labeling strings during document creation will be described below in reference to .","Method for Semantically Labeling Strings During Document Creation",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":"300"},"Referring to , the method  begins at start step  and proceeds to step  when a user opens an electronic document in application program module . In a preferred embodiment, the electronic document is a word processing document or a spreadsheet document. However, the invention is not limited to either of these specific types of electronic documents.","At step , the application program module  receives a new string, such as when the user enters text, for example a new paragraph, into the electronic document or edits a previously entered paragraph. The method  then proceeds to step .","At step , the paragraph containing the new string is passed from the application program module  to the recognizer DLL . The recognizer DLL is responsible for communicating with the application program module, managing the jobs that need to be performed by the recognizer plug-ins, receiving results from the recognizer plug-ins and sending semantic category information to the application program module. At boot time, the recognizer DLL communicates with its recognizer plug-ins to determine what languages it supports, what types it can apply, etc. It should be understood that, in a preferred embodiment, a paragraph is passed to the recognizer DLL at step . However, in alternative embodiments, a sentence, the contents of a spreadsheet cell, a section of the document, the entire document, etc. may be passed to the recognizer DLL. In other words, the present invention is not limited to simply passing a paragraph to the recognizer DLL. The method  then proceeds to step .","Still referring to step , the application program module  typically sends one paragraph at a time to the recognizer DLL. In addition, in a preferred embodiment, a grammar checker program module sends all semantic categories (without type labels) to the recognizer DLL that have been identified by the grammar checker program module. Passing these semantic categories (without type labels) to the recognizer DLL is important because doing so saves each recognizer plug-in from needing to decide whether something is a capitalized string interspersed with function words (a task that would require writing a number of regular expressions: Cap Cap Unc Cap; Cap Unc Cap; etc.). If a label is applied by a recognizer plug-in to a string the grammar checker program module labeled, the grammar checker label will then be removed.","At step , during idle time, the paragraph (and information from the grammar checker program module) is passed to the recognizer plug-ins. The method then proceeds to step .","It should be understood that, in a preferred embodiment, the recognizer DLL  maintains a job queue. If before the recognizer DLL  sends the paragraph to the recognizer plug-ins  the user edits the paragraph, then the job containing the edited paragraph is deleted and is not sent to the recognizer plug-ins. Then, a new job enters the queue at step  after the edited paragraph is received at step . This job deletion is necessary to prevent the recognizer plug-ins from performing unnecessary work on a paragraph that has been edited.","At step , the recognizer plug-ins are executed on the text to search for special strings. For example the recognizer plug-ins are executed on the paragraph to recognize keywords or perform other actions defined by the recognizer plug-in. As part of executing the recognizer plug-in, the paragraph may be broken into sentences by the recognizer plug-in. However, each recognizer plug-in is responsible for its own sentence-breaking. After the keywords are found at step , then the method proceeds to step .","At step , the results from each of the recognizer plug-ins are received by the recognizer DLL. The method then proceeds to decision step .","At decision step , it is determined whether the paragraph that has been reviewed by the recognizer plug-ins has been edited after the paragraph was sent to the recognizer DLL. If so, then the method  returns to step  and the edited paragraph is received by the recognizer DLL from the application program module. If not, then the method proceeds to step .","At step , the results from the recognizer plug-ins are compiled into semantic categories by the recognizer DLL and the semantic categories are sent to the application program module. At step , the application program module displays the semantic categories to the user in the electronic document. The method  then ends at step .","As should be understood from the above description, the architecture for recognizing semantic categories permits third parties to develop recognizer plug-ins to identify strings of one or more particular types. The recognizer plug-ins communicate with the application program module and receive a string from the application program module. The recognizer plug-ins may apply recognition algorithms to the string and communicate the identity of recognized strings back to the application program module.","After a string is labeled with a particular type label, the user will be able to execute action plug-ins that pertain to that type label. The action plug-ins preferably are COM objects that are executed via communication between the application program module and the action DLL. Parameters necessary to execute the action (the XML of the string labeled as being of a particular type, the XML of the string representing the current selection) will be passed from the application program module to the action DLL and, in turn, passed to the action plug-in.","Actions Assigned to Type Labels","An architecture for identifying and executing a set of actions associated with a semantic category may also be provided. This architecture comprises actions that apply to a particular type label (e.g. an action for book titles may be \u201cBuy this book from shop.Microsoft.com\u201d) and executing those actions when the user so desires. An action is a user-initiated function applied to a typed string. For example, adding a name to the contacts folder is one action possible for a type label \u201cPerson name\u201d.","There is power and flexibility that results from allowing third party vendors, such as IT professionals, to design and write recognizer plug-ins and action plug-ins for deployment within an organization or for deployment on the World Wide Web. Some example actions that may be executed include:\n\n","Look up in contacts folder, address book, Windows Address Book (WAB), Global\n\n","Different actions may be assigned to different type labels and these type label-action assignments may be stored in the type-action database . Table 1 below illustrates some possible type label-action pairings.",{"@attributes":{"id":"p-0054","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Type Labels","Actions"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Person name","Show contact info"]},{"entry":[{},{},"Add to contacts"]},{"entry":[{},{},"E-mail"]},{"entry":[{},{},"Insert address into document"]},{"entry":[{},{},"Send instant message to"]},{"entry":[{},"Date","Show calendar for that day"]},{"entry":[{},{},"New task with that due date"]},{"entry":[{},{},"Schedule meeting that day"]},{"entry":[{},"Place","Display EXPEDIA map"]},{"entry":[{},{},"Add to contacts"]},{"entry":[{},"Address","Add to contacts"]},{"entry":[{},"Phone number","Add to contacts"]},{"entry":[{},"E-mail","Add to contacts"]},{"entry":[{},"Date","Schedule a meeting"]},{"entry":[{},"Task","Schedule a task"]},{"entry":[{},"Meeting","Schedule a meeting"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"For each type label, the type-action database  may store a download URL specified by the creator of the type label that users who do not have action-plug-ins or recognizer plug-ins for that semantic category type can go to in order to get action plug-ins and\/or recognizer plug-ins. For example, the download URL for the type label \u201cBook Title\u201d might be microsoft.com\/semanticcategories.asp. Once at that web page, a user may be offered downloads of various action plug-ins and recognizer plug-ins. There may also be an option on the user interface to navigate to the download URL so that recipients of documents with semantic categories can easily get the action plug-ins for those semantic categories.","Storing Semantic Categories","Semantic categories may be stored as part of the electronic document along with other document information and may be available when a document is transmitted from one computer to another computer. In a preferred embodiment, storing semantic categories in an electronic document is controlled by an \u201cEmbed semantic categories\u201d checkbox. The checkbox is on by default. Turning it off will prevent semantic categories in the document from being saved. The state of the checkbox is per document. The same checkbox controls saving for both .htm and .doc documents.","Checking a \u201cSave semantic categories as XML properties\u201d checkbox (off by default) will write out the text of all of the semantic categories in the document and their labels in the header of the HTML file in XML (that is using the same tags as are used inline, but surrounded by <xml> And <\/xml>) for easy identification and parsing by search engines and knowledge management systems.","Semantic categories may be saved as a unique namespace plus a tag name. A namespace is an XML construct for uniquely identifying a group of XML tags that belong to a logical category. Thus, every semantic category is uniquely identified by its nametag (e.g., \u201cstreetname\u201d) in addition to its namespace (e.g., \u201cschemas-microsoft-com:outlook:contact\u201d)","Although the method  described above is one method for identifying semantic categories, there may be other mechanisms for identifying semantic categories. One mechanism is a grammar checker program module (not shown) connected to word processor program module . Another mechanism is receiving a semantic category from another electronic document. For example, when text containing a semantic category is copied from one electronic document and passed into another electronic document of the word processor program module , the information identifying the semantic category is preserved and copied along with the copied text.","Displaying Semantic Categories to the User","Referring now to , an illustration of a display of a semantic category  and its associated dropdown menu  will be described. It should be understood that  is an illustration of a semantic category  and dropdown menu  as displayed to a user by the application program module .","The string  associated with semantic category  is the string \u201cBob Smith\u201d. As shown in , the string  of a semantic category  may be identified to the user by brackets . Of course, many other devices such as coloring, underlining, icons, etc. may be used to indicate to the user that a particular string is a semantic category.","In a preferred embodiment, when the user hovers a cursor over the string  or places the insertion point within string , then dropdown menu  is displayed to the user. The dropdown menu may display a list of actions associated with a semantic category. The dropdown menu may appear above and to the left of the semantic category string.","Typically, the first line of the dropdown menu indicates which string is the semantic category string (Bob Smith in ) and what type the semantic category is (Person name in ). Listed below the first line are actions  available for the semantic category type, such as \u201cSend mail to . . . \u201d, \u201cInsert Address\u201d, and \u201cDisplay contact information . . . \u201d.","The first item on the drop down menu below the separator line is \u201cCheck for new actions . . . \u201d . \u201cCheck for new actions. . . \u201d  will appear only for semantic categories whose download URL is available to the application program module. If selected, \u201cCheck for new actions . . . \u201d  uses the semantic category download URL to navigate the user's web browser to the homepage for the semantic category type applied to the string. For example, suppose new actions have been defined for the semantic category type \u201cperson name\u201d. If so, then new actions will be downloaded to the user's computer after selecting \u201cCheck for new actions . . . \u201d . \u201cCheck for new actions . . . \u201d  will be grayed out if a download URL is unavailable for the semantic category.","If selected, the \u201cRemove this semantic category\u201d item  deletes the semantic category label from the string. If selected, the \u201cSemantic categories\u201d item  navigates the user to the semantic categories tab of the autocorrect dialog.","It should be understood that the application program module sends a request to the action DLL to determine which actions are shown with each semantic category type.","Actions Performed in Association with Semantic Categories","There are a number of functions that users perform on typed data that preferred word processor program module  and semantic categories will make easier. The functions fall into three primary categories:\n\n","A single string may be associated with multiple semantic categories. Every semantic category has a type label with one or more action plug-ins defined for the type label. For example, the \u201cAddress\u201d type label may have the \u201cOpen in Mappoint\u201d, \u201cFind with Expedia Maps\u201d and \u201cAdd to my Address Book\u201d actions associated with it and each of these actions may have a different action plug-in to execute the action.","The actions assigned to type labels also depend on the computer that the application program module is running on. Thus, if a computer has three actions registered for the type label \u201cAddress\u201d, then all strings with an \u201cAddress\u201d type label will be assigned to three actions. However, if one of these semantic categories is sent to a computer which has only two actions registered for the \u201cAddress\u201d type label, then the user will only be exposed to two actions for this semantic category.","Nesting of Semantic Categories","In an embodiment of the present invention, semantic categories may be nested inside each other. For example, the string \u201cGeorge Washington\u201d may include a semantic category with type label \u201cPerson Name\u201d for the span \u201cGeorge Washington State\u201d and a semantic category with type label \u201cState\u201d for the span \u201cWashington\u201d. Moreover, two semantic categories may cover exactly the same span. For example, the string \u201cGeorge Washington\u201d may include a semantic category with type label \u201cPerson Name\u201d and a semantic category with type label \u201cPresident\u201d.","Because the preferred application program module  will support labeling a single string with multiple type labels (e.g. Bob Smith could be a semantic category labeled as a \u201cPerson Name\u201d and labeled as a \u201cMicrosoft employee\u201d), the preferred application program module  will use cascade menus on the dropdown menu if multiple semantic category types are assigned.","For example, the cascade menu may include a list of the type labels included in the recognized string. This list may include a type label \u201cPerson Name\u201d and a type label \u201cMicrosoft employee\u201d.","It should be understood that a cascade menu may be used to allow the user to select which type label the user is interested in and to further select an action after selecting the type label.","In-document User Interface to Indicate Semantic Categories","As described above with reference to , the application program module may include the option to display an in-document user interface to indicate the location of semantic categories. This in-document user interface may use a colored indication to indicate the location of a semantic category, such as the brackets  in . The in-document user interface will also be able to show nesting of semantic categories. For example, if Michael Jordan is labeled as a semantic category with type label \u201cPerson Name\u201d, Michael is a semantic category with type label \u201cFirst Name\u201d and Jordan is a semantic category with type label \u201cLast Name\u201d, the document may look like this with the brackets indicating semantic categories:\n\n","Of course, the in-document user interface may be any sort of indication. For example, in the \u201cEXCEL\u201d spreadsheet application program, the interface comprises a triangle in the lower right hand portion of a cell to indicate that one or more semantic categories are present in the cell.","Although the present invention has been described as implemented in a word processing program module, it should be understood that the present invention may be implemented in other program modules, including, but not limited to, HTML authoring programs and programs such as the \u201cPOWERPOINT\u201d\u00ae presentation graphics program and the \u201cOFFICE\u201d program module, both marketed by Microsoft Corporation of Redmond, Wash.","As described above, the semantic category may also include metadata returned by the recognizer plug-ins. For example, a recognizer plug-in that recognizes the titles of books may return as metadata an ISBN book number when it recognizes the title of a book. The ISBN book number metadata may then be used to provide actions. Metadata may also be used to disambiguate for actions and searches. For example, suppose a recognizer DLL is linked to a corporate employee database to recognize names. When the recognizer DLL recognizes \u201cBob Smith\u201d, it may store \u201cemployeeID=12345\u201d as metadata in the background. Then, when an action is fired, the text in question will be known to reference Bob Smith, employee no. 12345 rather than Bob Smith, employee no. 45678. Also, the metadata may allow searches to be performed independent of the actual text in a document. So, a search may be conducted on \u201cRobert Smith\u201d by looking for employee 12345 in the employee databases and by performing a search on the metadata for employee number 12345 to find documents with \u201cBob Smith\u201d in them. There are also numerous other functions for metadata. For instance, DHTML could be inserted so special features of a web browser, such as text color or font size, may be used. Additionally, data used by other actions may be inserted such as someone's e-mail address that could be used by the send-mail-to action, a normalized version of the date could be stored to easily interact with a personal information manager, etc.","Implementation of Exemplary Application Program Interfaces","According to an exemplary embodiment, application program interfaces (API) are provided for implementing the recognizer plug-ins  and the action plug-ins , discussed above. Referring to , the recognizer API  includes a group of properties and methods or instructions that allow the recognizer plug-ins  to semantically label strings of text or cells of information, as discussed with reference to . The action API  includes properties and methods or instructions that are called upon when a user initiates a particular action, for example, opening a Web browser, going to a particular URL, or opening an instance of a word processing application, a spreadsheet application, and the like.","Referring to , the properties and methods of the recognizer API  are illustrated. The Description property  includes a description of the recognizer plug-ins . The Name property  includes a name for the recognizer plug-in as it appears in a user interface such as a tools menu or options contained in a dialog box of an exemplary application program. The Prog(programmatic)ID  includes a unique identifier for the object class of the recognizer DLL. The Recognize method  includes instructions and routines for recognizing character strings as actionable after having been semantically labeled, as described above. The LabelCount property  describes the number of semantic label types the associated recognizer DLL recognizes, for example, book titles, movie titles, etc. The DownloadURL property  is the URL that is navigated to download additional semantic label types or categories. The LabelName property  includes unique identifiers for the semantic label types that the recognizer DLL supports.","The Description property  of the action API  includes a description of the semantic label action associated with a given action, for example, opening a Web browser. The InvokeVerb method  includes the routines and instructions that are executed when an action item is initiated, as described above. The Name property  includes a title for the given action. The ProgID property  includes a unique identifier of the object class for the particular action. The LabelCaption property  includes the caption that will be displayed at the top of a user interface such as an actions menu. The LabelCount property  includes the number of semantic label types recognized by a corresponding recognizer DLL or corresponding recognizer plug-ins. The LabelName property  identifies the types of semantic label actions, for example, opening a Web browser, navigating to a particular URL, opening an instance of an application program, etc.","The VerbCaptionFromID property  includes the captions for available actions provided in a user interface, such as an actions menu. The VerbCount property  includes how many actions are supported for a given semantic label type. The VerbID property  returns a unique identifier within the semantic label for use within a given application program. This mechanism is supplied so that the semantic label recognizer DLL and recognizer plug-ins can mix and match semantic label actions for various semantic label types supported by the DLLs and plug-ins. The VerbNameFromID property  returns a name to represent the semantic label action for use internally within a given application program. For example, for the semantic label action string \u201cview company Website\u201d, the VerbNameFromID property  may return a name such as \u201cviewCompanyWebsite\u201d.","The following is a discussion of an exemplary implementation of the recognizer API  and the action API . Following a discussion of various components of these APIs is exemplary code written in Microsoft Visual Basic 6.0 for a recognizer DLL and action DLL for locating a \u201cFourth Coffee\u201d flavor in a set of coffee flavors. The code and the example are exemplary only and are not limiting of the scope of the invention described herein.","Implementing the Recognizer API","To implement the recognizer API , the ProgID property , the Name property , and the Description property  are populated by specifying the name and by providing a description of the particular recognizer DLL. Additionally, a locale identifier is passed to the recognizer DLL, for example, Spanish, German, English, etc., to give identification of the user interface language in which semantic labeling will occur for the particular recognizer DLL. The following is exemplary code written in Microsoft Visual Basic 6.0 for populating the ProgID property , the Name property , and the Description property .",{"@attributes":{"id":"p-0084","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Private Property Get LabelRecognizer_ProgId( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelRecognizer_ProgId ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cCoffeeFlavor.LabelRecognizer\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},"Private Property Get LabelRecognizer_Name"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal LocaleID) As Long) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelRecognizer_Name ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cCoffee Flavors\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},"Private Property Get LabelRecognizer_Desc"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal LocaleID As Long) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelRecognizer_Desc ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cDirects users Coffee Flavors\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Next, the number of semantic label types, the list of semantic label action types, and the additional semantic labels download location of the recognizer DLL are provided by populating the LabelCount property , the LabelName property  and the DownloadURL property . The number of semantic label types supported by the recognizer DLL  are populated. For example, if a value of two (2) for the LabelCount property is returned, there will be two subsequent calls made to the LabelName property with a label ID value of one (1) passed in the first call and a value of two passed in the second call. The download location includes the HTTP address used (download URL) to download tools associated with particular semantic labels. If no download URL is available, the value of the property is set to null. The following is exemplary code for populating the LabelCount property , the LabelName property  and the DownloadURL property .",{"@attributes":{"id":"p-0086","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Private Property Get LabelRecognizer_LabelCount( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"As Long"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelRecognizer_LabelCount = 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},"Private Property Get LabelRecognizer_LabelName"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal LabelID As Long) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If LabelID = 1 Then"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelRecognizer LabelName ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cschemas-fourth-com\/fourthcoffee#flavor\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"End If"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},"Private Property Get LabelRecognizer_DownloadURL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal LabelID As Long) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelRecognizer_DownloadURL = Null"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A list of items such as text in a word processing application or information contained in a cell of a spreadsheet is provided to the Recognize method . The text or information is provided to the recognizer plug-ins  of the recognizer DLL as a text string and the form of the text, for example, paragraph, cell, etc., is provided. The following is exemplary programming code for building a list of strings associated with, for example, coffee flavors to be recognized by the recognizer plug-ins  of the recognizer DLL . According to an exemplary embodiment, to avoid rebuilding the list of strings every time there is a call to recognize a text item, the list is built and populated in an array when the class of semantic label types is created.",{"@attributes":{"id":"p-0088","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim garrTerms(6) As String"]},{"entry":[{},"Dim gintNumTerms As Integer"]},{"entry":[{},"Private Sub Class_Initialize( )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"garrTerms(1) = \u201clatte\u201d"]},{"entry":[{},"garrTerms(2) = \u201ccarmelito\u201d"]},{"entry":[{},"garrTerms(3) = \u201cverona\u201d"]},{"entry":[{},"garrTerms(4) = \u201cColumbia blend\u201d"]},{"entry":[{},"garrTerms(5) = \u201cantigua\u201d"]},{"entry":[{},"garrTerms(6) \u201ckona\u201d"]},{"entry":[{},"gintNumTerms = 6"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Sub"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"After the list of strings to be recognized is built, as described above, the Recognize method  is constructed that will search for strings in the array created above. The search performs a case-insensitive search through the passed-in strings of text for each of the terms supplied. For the example given above, the strings supplied include a variety of coffee flavors. Construction of the Recognize method  includes passing in the language identifier of the text strings to be searched by the recognizer DLL, for example, German, English, etc. Additionally, an object is passed in to add additional semantic labels. A Property Bag property allows for the addition of new attributes\/value pairs to be added to semantic labels. For example, the name \u201cBob Smith\u201d may be set up as a name type, but the Property Bag property allows for the storage of other values like employee ID, telephone number, address by adding new attribute\/value pairs to the semantic label type. For example, the attribute \u201cemployee ID\u201d and the value \u201c123\u201d may be added to the name type for \u201cBob Smith.\u201d Information is also passed in to define the name space in the document, and to specify the start position of the string and the length of the string. The following is exemplary programming code for constructing the Recognize method .",{"@attributes":{"id":"p-0090","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Private Sub LabelRecognizer_Recognizer_Recognize"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(ByVal Text As String,"]},{"entry":[{},"ByVal DataType As LabelLib.IF_TYPE,"]},{"entry":[{},"ByVal LocaleID As Long,"]},{"entry":[{},"ByVal RecognizerSite As"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelLib.LabelRecognizerSite)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim intLoop As Integer"]},{"entry":[{},"Dim intIndex As Integer"]},{"entry":[{},"Dim intTermLen As Integer"]},{"entry":[{},"Dim stlPropertyBag As LabelLib.ILabelProperties"]},{"entry":[{},"Text = LCase(String:=Text)"]},{"entry":[{},"For intLoop = 1 To gintNumTerms"]},{"entry":[{},"intIndex = InStr(Text, garrTerms(intLoop))"]},{"entry":[{},"intTermLen = Len(garrTerms(intLoop))"]},{"entry":[{},"Do While intIndex > 0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Set stlPropertyBag ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RecognizerSite.GetNewPropertyBag"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RecognizerSite.CommitLabel"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cschemas-fourth-com\/fourthcoffee#flavor\u201d, intIndex,"]},{"entry":[{},"intTermLen, stlPropertyBag"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"intIndex = InStr(intIndex + intTermLen,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Text, garrTerms(intLoop))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Loop"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Next intLoop"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Sub"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"After construction of the Recognize method , the action API  is constructed by first populating the ProgID property , the Name property , and the Description property . Population of those properties is similar to population of similar properties for the recognizer API , described above. The following is exemplary programming code for populating the ProgID property , the Name property , and the Description property  of the action API .",{"@attributes":{"id":"p-0092","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Private Property Get LabelAction_ProgId( ) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_ProgId ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cCoffeeFlavor.LabelAction\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},"Private Property Get LabelAction_Name"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal LocaleID As Long) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_Name = \u201cCoffee Flavor actions\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},"Private Property Get LabelAction_Desc"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal LocaleID As Long) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_Desc ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cProvides actions for certain Coffee Flavors\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The recognizer DLL  is informed of the number, names, and captions of the semantic label types by populating the LabelCount property , the LabelName property , and the LabelCaption property . For each label type supported by the recognizer plug-ins  of the recognizer DLL , the recognizer DLL  is informed of the number of actions. If there are three actions for the label type \u201cpersons\u201d and two actions for the label type \u201ccompanies,\u201d then a total of five label types are passed to the recognizer DLL. A name for each action class is provided and a caption that will appear in an appropriate user interface such as an action menu is provided. For example, the caption \u201cCoffee flavors at Joe's Coffee House\u201d might be provided for an action that will navigate to the Web page of Joe's Coffee House for a semantically labeled coffee flavor. In addition, according to an exemplary embodiment, the application programs applicable to a given action may be identified so that inapplicable application programs may be disabled. For example, if the semantically labeled information is not applicable for use in a spreadsheet, a spreadsheet application may be disabled. The following is exemplary programming code for populating the LabelCount, the LabelName and LabelCaption properties.",{"@attributes":{"id":"p-0094","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Private Property Get LabelAction_LabelCount( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"As Long"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_LabelCount = 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},"Private Property Get LabelAction_LabelName"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal LabelID As Long) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If LabelID = 1 Then"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_LabelName ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cschemas-fourth-com\/fourthcoffee#flavor\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"End If"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},"Private Property Get LabelAction_LabelCaption"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(ByVal LabelID As Long,"]},{"entry":[{},"ByVal LocaleID As Long)"]},{"entry":[{},"As String"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_LabelCaption ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cSelected Coffee Flavors\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Property"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Next, the recognizer DLL is informed of the number, names, and identifiers of supported semantic label actions by populating the VerbCount property , the VerbID property , the VerbCaptionFromID property , and the VerbNameFromID property . Population of these properties is done on a label type by label type basis to tell the label actions about verbs that are supported. Generating a unique ID for a particular verb is performed by the action DLL  which gives the action DLL more flexibility. For example, a semantic label action DLL can specify the same VerbID value for the same action across varying semantic label types, or the DLL can use the same VerbID for similar variants of an action. The following is exemplary programming code for populating the VerbCount, VerbID, VerbCaptionFromID, and VerbNameFromID properties.",{"@attributes":{"id":"p-0096","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Private Property Get LabelAction_VerbCount"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal LabelName As String) As Long"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If LabelName = \u201cschemas-fourth-com\/fourthcoffee#flavor\u201d Then"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbCount = 6"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"End If"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"End Property"},{"entry":"Private Property Get LabelAction_VerbID"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(ByVal LabelName As String,"]},{"entry":[{},"ByVal VerbIndex As Long)"]},{"entry":[{},"As Long"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbID = VerbIndex"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"End Property"},{"entry":"Private Property Get LabelAction_VerbCaptionFromID"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(ByVal VerbID As Long,"]},{"entry":[{},"ByVal ApplicationName As String,"]},{"entry":[{},"ByVal LocaleID As Long)"]},{"entry":[{},"As String"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Select Case VerbID"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbCaptionFromID ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201clatte\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbCaptionFromID ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201ccarmelito\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 3"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbCaptionFromID ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cverona\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 4"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbCaptionFromID ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cColumbia blend\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 5"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbCaptionFromID ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201cantigua\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 6"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbCaptionFromID ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201ckona\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"End Select"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"End Property"},{"entry":"Private Property Get LabelAction_VerbNameFromID"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(ByVal VerbID As Long) As String"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Select Case VerbID"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbNameFromID = \u201clatte\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbNameFromID = \u201ccarmelito\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 3"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbNameFromID = \u201cverona\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 4"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbNameFromID = \u201cColumbia blend\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 5"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbNameFromID = \u201cantigua\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 6"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LabelAction_VerbNameFromID = \u201ckona\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"End Select"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"End Property"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"After those properties are populated, the InvokeVerb method  is constructed for invoking the appropriate verb when the user selects an action displayed in the semantic label user interface corresponding to the VerbCaptionFromID value. According to the exemplary programming code provided below, six actions are provided which are hyperlinks that navigate to six coffee flavor Web sites. Construction of the InvokeVerb method includes identifying the verb, identifying the action, and naming the application program  so that different actions may be performed depending on the context, for example, word processing text versus cell data in a spreadsheet.","According to an exemplary embodiment, a pointer may be given to an application program's  object model so that the action DLL may use the object model to manipulate text in a document, insert text, manipulate data in a spreadsheet, etc. The label text, the label type, and contents of a property bag are provided, and that information may be provided according to alternate computing languages, for example XML, so that the information may be manipulated using alternate language systems, such as XML parsers. This aspect is useful for manipulating multiple nested semantic labels, for example, street, city, state, and zip code. The following is exemplary programming code for constructing the InvokeVerb method  of the action API .",{"@attributes":{"id":"p-0099","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Private Sub LabelAction_InvokeVerb"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(ByVal VerbID As Long,"]},{"entry":[{},"ByVal ApplicationName As String,"]},{"entry":[{},"ByVal Target As Object,"]},{"entry":[{},"ByVal Properties As LabelLib.ILabelProperties,"]},{"entry":[{},"ByVal Text As String,"]},{"entry":[{},"ByVal Xml As String)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Dim ieInternetExplorer As Variant"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Set ieInternetExplorer ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CreateObject(\u201cInternetExplorer.Application\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"With ieInternetExplorer"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Select Case VerbID"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},".Navigate2 \u201cwww.latte.com\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},".Navigate2 \u201cwww.carmelito.com\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 3"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},".Navigate2 \u201cwww.verona.com\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 4"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},".Navigate2 \u201cwww.columbiablend.com\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 5"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},".Navigate2 \u201dwww.antigua.com\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case 6"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},".Navigate2 \u201cwww.kona.com\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Select"]},{"entry":[{},".Visible = True"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"End With"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"End Sub"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In order for the application program module, such as a word processing application or a spreadsheet application, to know that the recognizer and action plug-ins and DLLs constructed and made operable by the construction of the APIs, discussed above, are actually plug-ins and DLLs for use by the application, the plug-ins and DLLs must be registered in the operating system registry of the user's computer . Accordingly, information is written into the registry of the operating system  so that any plug-ins and DLLs referred to by the semantic label properties in that portion of the system registry will be booted by the applicable application program utilizing the semantic labeling functionality when that application programs boots.","Although the present invention has been described above as implemented in a preferred application program module, it will be understood that alternative embodiments will become apparent to those skilled in the art to which the present invention pertains without departing from its spirit and scope. Accordingly, the scope of the present invention is defined by the appended claims rather than the foregoing description."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
