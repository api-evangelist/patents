---
title: Asynchronous state engine with plug-ins for flexible application development
abstract: Various embodiments of the present disclosure provide for an asynchronous state engine incorporated within a host application program. The state engine may operate based on a state transition table that may be updated independently of the host application. The state transition table may instruct the asynchronous state engine as to actions that should be performed prior to changing states. Such actions may include interacting with external applications. The state transition table may also instruct the host application to reside in a hold state until responses from external applications are received. Furthermore, the state transition table may instruct the host application as to follow up actions that should be performed when a state is entered. By allowing an external application to plug-in criteria for state changes within the host application, development of the host application may maintain a significant level of flexibility.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08554798&OS=08554798&RS=08554798
owner: Oracle International Corporation
number: 08554798
owner_city: Redwood Shores
owner_country: US
publication_date: 20091020
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The use of computers to model business processes has become ubiquitous. Software applications that manage every aspect of a business are readily available. Applications that manage human resources, access to information technology resources, benefits, accounting, payroll, resource management, and almost any other aspect of a business are in use today and form an important part of the operation of almost any business.","Many typical business applications represent business processes through the use of objects. For example, an employee may expend funds on behalf of the organization and submit an expense report to receive reimbursement. In some cases, the expense report may be a physical form that the employee fills out, while in other cases the employee may fill out the expense report electronically. One common method of receiving an employee expense report may be to provide a web page that the employee may direct his web browser to in order to enter information about the expense. The information about the expense may then be entered into an accounts payable system, either directly from an electronic source, such as the web page, or manually through a data entry process. An accounts payable system may model this expense as an object. As is known in the art of object oriented programming, an object may be an electronic representation of a collection of related data that may be manipulated as a single entity. For example, the expense report object may contain an amount of the expense, the employee who paid the expense, the entity that received the payment, and any other information that would be necessary to process the expense. Encapsulating all of the data that makes up an expense into a single object may allow the accounts payable system to simplify processing of the expense because individual data elements that make up the expense no longer need to be correlated with each other. All data related to a given expense may be treated as a single entity.","Typically, the expense object may have a state, and as the expense object is processed, the state may change. For example, when the employee begins the process of entering an expense for reimbursement, an expense object may be created, thus changing, or creating, a state of the expense object from \u201cDOES NOT EXIST\u201d to \u201cCREATED.\u201d After the employee has entered any necessary information to process the expense, such as reasons for the expense, amount, etc., the employee may submit the expense to the accounts payable system. At this point, the accounts payable system may change the state of the object from \u201cCREATED\u201d to \u201cSUBMITTED.\u201d","As part of the process of paying an expense, an approval for the expense may be required. For example, the employee's supervisor may need to review the expense and determine if it is appropriate for the expense to be paid. The accounts payable system may send a notification to the supervisor, perhaps through an e-mail message, indicating that an expense requiring approval needs to be processed. The supervisor may then review the expense, and if appropriate, approve the expense. Notification of the approval may then be returned to the accounts payable system. The accounts payable system may then move the expense object from a \u201cSUBMITTED\u201d state to an \u201cAPPROVED\u201d state. Alternatively, in the case where the expense is not approved, the expense objet may be moved to a \u201cREJECTED\u201d state, and the employee may be notified his expense was rejected.","In the normal flow however, the expense will be approved. At this point, the accounts payable system may cause a payment to be issued to the employee. After the payment is issued, the accounts payable system may move the expense object from an \u201cAPPROVED\u201d state to a \u201cPAID\u201d state. The movement between states of a business object within an isolated application, such as an accounts payable application, is a relatively straightforward process. In some implementations, a business application may make use of a state engine to keep track of the current state of the business object and actions to be performed within that state prior to moving to a next state. In the present example, the normal flow of the expense object would be to start in the \u201cCREATED\u201d state. Once the employee submits the expense, the state engine may move the expense object to the \u201cSUBMITTED\u201d state. In that state, the state engine may be programmed to request an approval from a supervisor. The state engine may keep the expense object in the \u201cSUBMITTED\u201d state until the approval is received, at which point the expense object is moved to the \u201cAPPROVED\u201d state. In the \u201cAPPROVED\u201d state, the state engine may request a payment, and once issued the expense object may be moved to the \u201cPAID\u201d state.","As mentioned above, use of a state engine in an isolated business application is relatively straightforward. However, business applications operating in isolation in today's business environment are increasingly rare. Typically there are many different applications involved in running a modern business, and each application may require information from other applications. For example, the expense discussed above may have been paid in relation to fulfilling an obligation related to a business contract. In such cases, a contracts application may need to be informed to indicate that the obligation has been met. In addition, the expense may have been related to completion of a project, such that a project management application may need to be informed.","To add further complexity, situations may arise wherein an external application may need to prevent a state change within the instant application. For example, an expense object may be in the \u201cAPPROVED\u201d state. As far as the accounts payable system is concerned, the expense should be paid because it has been approved, and the expense object moved to the \u201cPAID\u201d state. However, an external application, such as a contracts application, may have a reason that the expense should not be paid. Perhaps the contract related to the expense is in default, and as such, no payments should be made. Thus the contracts application requires a mechanism to prevent the accounts payable application from moving the expense object to the \u201cPAID\u201d state until an approval is received from the contracts application.","Attempts at providing a solution to the above described scenario are less than ideal. In some solutions, a seemingly endless string of \u201cif-then\u201d conditions may be embedded in an application's state engine. For example, if the above described scenario, the transition from the \u201cAPPROVED\u201d state to the \u201cPAID\u201d state may require determining if a contracts application is installed, and if so, notifying the contracts application, and waiting for a response. Similarly, this condition may be repeated for any number of other applications. Some external applications may just need to be notified of the impending state change, while others, such as the described contracts application, may need to be able to actually prevent the state change from occurring.","As should be clear, such solutions are not ideal for a number of reasons. One reason is that every time a new external application is installed, the host application must be modified if the external application wishes to interface to with the host application. Another reason the solution is not ideal is from a standpoint of software maintainability for the host application. A seemingly endless series of checks to determine which external applications are installed, which external applications may need to be notified of state changes, and which external applications may need the ability to prevent a state change, leads to increasingly complex software code within the application that is very difficult to maintain. Furthermore, all of the additional complexity required for interfacing with the external applications does nothing to improve the operation of the host application.","Embodiments of the present disclosure attempt to solve problems such as those mentioned above, as well as others that would be readily known to one of skill in the art.","Systems and methods in accordance with various embodiments of the present disclosure may overcome the problems associated with interfacing a host application with external applications, wherein the external applications may need to affect the operation of the host application.","In one embodiment, a computer program product embedded in a computer readable medium is provided. The computer program product may implement a computer application with an asynchronous state engine that comprises computer code for creating an object, the object representative of a transaction processed by the asynchronous state engine and having a state. The computer program product may further comprise computer code for performing a state transition of the object from an initial state to a next state, the state transition being specified in a state transitions table. The state transitions table may include tasks to be performed by the asynchronous state engine when transitioning to the next state. The computer program product may also comprise computer code for performing the tasks specified in the state transitions table.","In addition to other computer products that may be used in accordance with these and other embodiments, there also are a number of systems, methods, and other such aspects for implementing, practicing, performing, or otherwise utilizing aspects of the various embodiments.","A further understanding of the nature and the advantages of the inventions disclosed herein may be realized by reference to the remaining portions of the specification and the attached drawings.","Various embodiments of the present disclosure provide for an asynchronous state engine incorporated within a host application program. The asynchronous state engine may operate based on a state transition table that may be updated independently of the host application. The state transition table may instruct the asynchronous state engine as to actions that should be performed prior to changing states. Such actions may include interacting with external applications. The state transition table may also instruct the host application to reside in a hold state until responses from external applications are received. Furthermore, the state transition table may instruct the host application as to follow up actions that should be performed when a state is entered. By allowing an external application to plug-in criteria for state changes within the host application, development of the host application may maintain a significant level of flexibility. The addition of a new external application that must interface with the host application no longer requires modification of the host application. The external application may simply update the state transition table to indicate when the external application should be contacted, should the host application wait for a response from the external application, and are there any follow up actions required by the external application once a state is entered.","Exemplary System",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","102","102","102","102"]},"System  may also include an E-mail system . E-mail system  may be responsible for maintaining e-mail services for all employees of the organization. Services provided by e-mail system  may include establishing an e-mail address for each employee such that the employee may send and receive e-mail. E-mail system  may also allocate data storage space for the employee to store incoming e-mail. E-mail server  may provide e-mail services that are generally known.","System  may also include accounting systems . Accounting system  may manage accounts payable, accounts receivable, or any other accounting process that may be required by the organization. Accounting systems are generally known. System  may further include benefits system . Again, benefits system  may include managing benefits that an employee is entitled to. For example, benefits system  may manage an employee's retirement accounts and health insurance plans.","System  may further include a database that stores a state transition table . State transition table may be used to store actions to be performed, hold states to be observed, and follow up actions to be performed, by a host application that has implemented an asynchronous state engine with plug-ins. In some embdodiments, state transition table  is dynamically generated. Operation of the state transition table  will be described in further detail below. System  may also include a database that stores state transition audit data . As will be described further below, a host application implementing an asynchronous state engine may transition an object between many different states. The causes of these state transitions may be determined by the host application, as well as external applications. State transition audit data  may allow an audit trail of every action or response that is involved in a state transition to be logged, such that if it is necessary in the future to determine why a particular state transition was allowed, the exact sequence of events may be recreated. Furthermore, the audit data  may also include all follow up actions, and hold states. The audit data  may be used to determine the series of events that allowed any changes in system  to occur.","Although state transition table  and state transition audit data  have been depicted as separate entities, it should be clear that this is not intended to be limiting. In some embodiments, the data may be stored using a single database, such as a relational database. Any suitable means for maintaining persistent storage of data has been contemplated.","System  may further include an identity application running on an application server . Identity application  may provide services such as coordinating between the various applications , , , and . For purposes of this exemplary embodiment, identity application  will implement an asynchronous state engine. It should be realized that this is for purposes of explanation only. Any or all of the mentioned applications may also implement an asynchronous state engine.","All of the entities as described above may be in communication with each other over a network . Such networks may include public and private wired and wireless networks, intranets, or the Internet. The specific topology of the network  is relevant only to the extent that network  allows all of the described entities to communicate with each other.","Exemplary Business Process","In order to better understand the operation of an asynchronous state engine, it may be desirable to describe a typical business process at a high level. One exemplary business process that may occur is the addition of a new employee to the organization. The process may begin with a new employee being created in the human resources system . Information may be gathered by a human resources employee and entered into the human resources system, . After this information has been entered, human resources system  may send a message to identity application  over network  indicting that a new employee has been created. In alternate embodiments, identity application  may periodically poll human resource system  to determine if any new employees have been created.","Identity application  may be responsible for several tasks. For example, identity application  may be responsible for provisioning computer resources for the new employee. Such resources may include an e-mail account as provided by E-mail system . Additional resources may also include requesting access to various other systems, such as accounting system . Furthermore, identity application  may be responsible for requesting a user account on benefits system . Although several examples of systems have been presented, the list is not intended to be exhaustive. In fact, embodiments of the present disclosure contemplate the addition of additional systems and are directed toward allowing additional systems with minimal impact to the identity application itself.","In addition to requesting access to various systems as described above, Identity application  may also be responsible for setting a level of access for some or all of the systems, based on the employee's role within the organization. For example, if an employee is in the accounts payable department, he may need a level of access to the accounting system that allows him to pay an invoice. Similarly, an employee in accounts receivable may require a level of access to the accounting system that allows him to raise an invoice. However, there may be policies in the organization such that any employee who has the authority to raise an invoice may not also have the authority to pay an invoice, thus preventing a rogue employee from raising and paying his own invoices.","Once the access level of an employee has been set, identity application  may also need to update external applications. For example, an e-mail account may have been requested earlier in the process. Once the e-mail account is received, other applications, such as benefits application  may need to be notified of the assigned e-mail address.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["200","102","114","202","204","114","104","106","108","114","204"]},"From the \u201cresource provision complete\u201d  state, the identity application may then set an access level to accounting system  and wait for a response before moving the employee object to the \u201caccess provision complete\u201d  state. Once the access levels have been set, the employee object may then be moved to the \u201cnew employee created\u201d  state. Finally, the new employee object may be moved to the \u201cdone\u201d  state. As part of the transition to the \u201cdone\u201d state, identity application  may need to notify benefits system  of the e-mail address that was assigned in the \u201cresource provision complete\u201d  state.","All of the activities described above are communications with external systems and may have nothing to do with the core functionality that is provided by the identity application itself. As should be clear, the addition or removal of external systems that may require interfacing with the various state changes within the identity application  may become very complex, and require changes to the identity application itself, even though the functionality of the identity application is remaining unchanged. As far as the identity application  is concerned, the employee object needs to move from the \u201cnew employee\u201d  state to the \u201cresource provision complete\u201d  state to the \u201caccess provision complete\u201d  state to the \u201cnew employee created\u201d state, and finally to the \u201cdone\u201d state. All of the external communications simply add complexity to the maintainability of the identity application .","Asynchronous State Engine with Plug-ins","In order to alleviate problems including at least some of those described above, a host application may implement an asynchronous state engine with plug-ins. Unlike traditional state engines, an asynchronous state engine introduces a concept that may be thought of as a \u201chold\u201d state. A traditional application using a state engine typically moves a business object from one state to the next, as conditions are satisfied. For example, an expense object is moved from the \u201csubmitted\u201d state to the \u201capproved\u201d state when an approval is received. An asynchronous state engine may utilize the \u201chold\u201d state to indicate that a business object may currently reside between states. In the \u201chold\u201d state, the host application may have completed any tasks assigned to the host application, but may be waiting for inputs from external applications.","Plug-ins may allow external applications to insert actions to be performed, or responses to wait for, into the asynchronous state engine. This may be accomplished through the use of a state transition table, as will be described in further detail below with respect to . Generally, an asynchronous state engine may be a state engine whose operation when moving between states is defined by an external state transitions table. The state transitions table may specify actions to be performed prior to moving from one state to the next, hold conditions that specify when transition from one state to the next should be suspended pending the satisfaction of some condition, and follow up actions that specify actions to take upon arrival at a given state. Because the state transitions table is external to the host application, external applications may plug-in desired actions, holds, and follow ups, without having to alter the host application itself.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["300","300","300","300","300","300"]},"For ease of description, state transition table  will be referred to as a data table which contains information about state transitions and additional actions to perform upon state transitions. However, it should be understood that state transitions table  is not necessarily a static data table. In some embodiments, the host application or external applications may not actually directly modify the state transition table , but rather the desired actions, holds, and follow ups are stored as entries in a database or a registry. The asynchronous state engine may dynamically generate the state transitions table  by retrieving the relevant entries from the database or registry. For example, if a state transition from one state to another is to occur, the asynchronous satte engine may query the database or registry to determine all systems that have requested actions or follow up actions be performed for the given state change.","The dynamic generation of the state transition table  advantageously allows for the host application, as well as external applications, to modify the behavior of the asynchronous state engine, without having an impact on other applications. Additionally, the dynamic nature of creation of the state transition table  allows for different versions of the state transition table  to be created based on criteria such as the particular version of the asynchronous state engine or the external applications.","State transition table  may also be accessible by external applications, such that the external applications needs may be reflected. Allowing access to the state transition table by external applications makes the process of adding, modifying, or removing external applications straightforward, as only the state transition table , not the host application itself, must be modified. Further explanation of adding an external application will be presented with respect to .","In one embodiment, state transition table  may be a described as a table.  is an example of one possible embodiment of a state transition table . State transition table may include a column indicating the current state  of the asynchronous state engine, the next state , the actions  to be performed, hold conditions , and follow up actions  to be performed upon entry of the state. As explained above, in some embodiments, state transition table  will be generated dynamically as needed by the asynchronous state engine. For each state transition that the asynchronous state engine will undergo, the state transition table  may be accessed to determine the actions to be performed prior to changing states. After performing those actions, the state transition table  be further be consulted to determine if the state transition should be placed in a hold condition, pending the results of some external action. Finally, after the result of the external action, if any, the state transition may complete and the business object may be placed in the new state. Once this occurs, the state transition table may be referenced to determine if any additional activities need to take place.","Further understanding of the state transition table  may be obtained by the following example, which generally corresponds to the new employee example as presented above. As discussed earlier, the process may begin with a new employee being entered into a human resources  system. The human resources  system may then send an indication to the identity application , which has implemented an asynchronous state engine with plug-ins. The indication may be in the form of a message sent from human resources  system to identity application  informing identity application  that a new employee has been entered and the functions of the identity application should be invoked for the new employee. In alternate embodiments, the identity application  may periodically poll human resources  system to determine if a new employee has been added.","The indication may cause identity application  to create a new business object. At this point, identity application  may perform any tasks that are part of the core functionality for the identity application. After these tasks are completed, the identity application may wish to move the business object from the \u201cnone\u201d state to the \u201cnew employee\u201d state. The asynchronous state engine operating as part of the identity application  may refer to the state transition table . As can be seen in row , when transitioning from the \u201cnone\u201d to the \u201cnew employee\u201d state, no actions , holds , or follow ups , are required. As such, the asynchronous state engine may move the business object to the \u201cnew employee\u201d state.","Once in the \u201cnew employee\u201d state, the identity application  may perform the tasks appropriate for that state. At this point, the identity application  may wish to move the business object to the \u201cresource provision complete\u201d state. Referring to row  of the state transition table , the identity application may be instructed to perform the actions indicated in the action  column of the table. In this example, the identity application  is instructed to request an e-mail account , request an accounting account , and request a benefits account . In some embodiments, the requests to external systems themselves may cause the external system to perform various actions, and follow up actions. For example, requesting an e-mail account may cause the e-mail system to initiate its own processes using an asynchronous state engine in order to provision an e-mail account.","Additionally, the actions may themselves contain conditional logic to further determine if the action is performed. For example, moving from the new employee state to resource provision complete state performs the action of requesting an e-mail account. The software that handles the request for establishing an e-mail account may contain conditional logic that determines if this employee requires an e-mail account, as organization policies may indicate that not all employees are given an e-mail account. The use of conditional logic in the requested actions removes the need for the host application to be aware of the processing of the external systems. The host application simply requests an action be performed. It is left to the software that handles the action request to determine what, if anything, needs to be done. As the action handlers are specified by the systems that perform the action in the state transition table, the system responsible for performing the action is able to control what is actually done.","Once these actions are complete, the asynchronous state engine of the identity application  may examine the hold  column to determine if the identity application  is free to move to the next state of \u201cresource provision complete\u201d or if it must wait in a hold condition for a response from some other systems. In the present example, the identity application  must wait for a response from the e-mail system  and the accounting system  prior to entering the \u201cresource provision complete\u201d state. It should be noted that no response is required from the benefits system  according to the present example. Once the respective responses from the e-mail system  and the accounting system  the identity application may move to the \u201cresource provision complete\u201d state. Upon entering the \u201cresource provision complete\u201d state, the asynchronous state engine may examine the follow up  column of the state transition table  to determine if any further actions are required. In the present example, no further actions are required.","In the \u201cresource provision complete\u201d state, the identity application  may again perform any functions that are necessary as part of the \u201cresource provision complete\u201d state of the identity application . Upon completion of the necessary functions, the identity application  may wish to move the business object to the \u201caccess provision complete\u201d state. State transition table , row , indicates that moving to the \u201caccess provision complete\u201d state requires setting the accounting system  access level. A request to set the access level of the accounting system  may then be sent. Referring to the hold  column, the asynchronous state engine is instructed to remain in a hold state until a response is received from the accounting system . Once this response is received, the asynchronous state engine may move the business object into the \u201caccess provision complete\u201d state. Referring to the follow up  column of state transition table , the identity application is instructed to update the human resources  system with the access level granted.","In the \u201caccess provision complete\u201d state, the identity application  may again perform any tasks relevant to the identity application  for that state. Referring to row , no actions  or holds  are specified, so the identity application may move the business object to the \u201cnew employee created\u201d state. Furthermore, no follow up actions are specified, so the identity application is not required to perform any tasks upon arriving at the \u201cnew employee created\u201d state.","Finally, from the \u201cnew employee created\u201d state, the identity application  may again perform an tasks relevant to the identity application. The identity application may then wish to move the business object from the \u201cnew employee created\u201d state to the \u201cdone\u201d state. Referring to row , no actions  or holds  are required for the state transition. As such, the identity application may move the business object to the \u201cdone\u201d state. Upon arriving at the \u201cdone\u201d state, a follow up action  is specified. In the present example, the follow up action is to update the benefits system with the e-mail address that was provided by the e-mail system .","The follow up actions themselves may cause additional actions to occur. For example, once the benefits system is updated with the e-mail address, this follow up action may trigger a ripple effect of further actions. For example, the benefits system, upon receiving the updated e-mail address may automatically send the new employee an e-mail asking the new employee what benefits he wishes to enroll for. Follow up actions can also contain conditional logic, just like actions, to determine if the follow up action is actually executed. For example, updating the benefits system with an e-mail address may trigger an e-mail to be sent to the new employee asking if she wants to enroll in a retirement plan. However, prior to sending such an e-mail, the handler for the follow on action may first determine if the employee is eligible to enroll in a retirement plan. Just as with the actions, the conditional execution of follow up actions relieves the host application of knowing what exactly is occurring in the follow up action.","State transition table  may be implemented in any for suitable for an application implementing an asynchronous state engine to utilize the table. For example, actions and follow up actions may be specified as application programming interface calls or as Web Services Descriptor Language (WDSL) interfaces. It should be clear that an asynchronous state engine using plug-ins advantageously allows an application to interface with external applications in such a way as to not require modifications to the application itself. Because the state transitions table  is external to the application, modifications to the table, and consequently to the application's behavior, may be easier to integrate into a business system which requires interfaces to external systems and applications.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 4","FIG. 3"],"b":["114","300","402","312","300","402"]},"From the \u201cnew employee\u201d  state, the identity application  may wish to move the business object to the \u201cresource provision complete\u201d state. Reviewing row  of state transition table , in order to make this transition, identity application  should request an e-mail account  from e-mail system , request a accounting system account  from accounting system , and request a benefit account  from benefits system . It should be noted that although this example is presented with an identity application  implementing an asynchronous state engine with plug-ins, any of the other systems , , ,  may also implement an asynchronous state engine. For example, requesting an e-mail account from e-mail system  may instruct the e-mail application  to interact with its own state transition table.","Upon completion of the external requests , , and , row  indicates that the asynchronous state engine should enter  a \u201chold\u201d  state, pending receipt of responses from e-mail system  and accounting system . Once responses  and  are received from e-mail system  and accounting system  respectively, identity application  may move  to a \u201cresource provision complete\u201d  state. As depicted in row , no follow up actions are required. Identity application may then complete its own assigned tasks in the \u201cresource provision complete\u201d state, and wish to move the business object to the \u201caccess provision complete\u201d state. Again referring to state transition table , row , such a transition requires setting an access level within the accounting system. Identity application  may send such a request  to accounting system . Row  further indicates that identity application  should proceed  to a \u201chold\u201d  state until a response is received from accounting system .","Once a response  is received from accounting system , identity application  may then move  from a \u201chold\u201d  state to an \u201caccess provision complete\u201d  state. According to row , upon arrival at the \u201caccess provision complete\u201d  state, identity application should execute the follow up action of updating  the human resources system . The identity application may then complete tasks assigned for the \u201caccess provision complete\u201d  state, and wish to move the business object to the \u201cnew employee created\u201d  state. As shown in row , no actions, holds, or follow ups are specified, so identity application  may move the business object to the \u201cnew employee created\u201d state. Again, required tasks of the identity application may be performed, and the business object moved to the \u201cdone\u201d  state. Row  of the state transition table  indicates that no actions or holds are required, so the transition to \u201cdone\u201d  state may complete. Upon arrival at the \u201cdone\u201d state, a follow up action of updating  benefits system  is specified. At this point, processing of the business object by the identity application is complete.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 5","b":["500","500","300","502","518"]},"As an example of adding a new external application that needs to interface with an existing host application, consider the case where an organization has installed a new building security system, such as the type that controls access to the building through the use of keycards. The building access application may maintain a database which contains the identities of employees who should be granted access to the building. Upon completion of employee provisioning by identity application , new building access system may need to be notified of the new employee. Furthermore, creation of the new employee may not be considered complete until building access system has responded, indicating the new employee was successfully added.","The use of a state transition table  makes the addition of a new external application. As depicted , a new external application simply inserts actions that are required for the host application to move from one state to the next. In this example, upon moving from the \u201caccess provision complete\u201d state to the \u201cnew employee created\u201d state, the building access system may simply insert an action for identity application  to perform. In this case, as depicted , building access system requires a request for building access to made prior to changing states. Further more, the state change should not complete, and thus identity application  should remain in a \u201chold\u201d state, until a response is received from the building access system.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 6","FIG. 5","FIG. 6","FIG. 4"],"b":["114","500","610","500","114","610","612","518","644","690","518","114","611","648","690","648","650","612"]},"As should be clear, the addition of a new application requiring integration into an existing host application is simplified by use of an asynchronous state engine with plug-ins. A new application need only plug-in actions, holds, and follow up actions into a state transitions table that is used by the asynchronous state engine running within a host application. No changes to the host application itself are required. As an additional advantage, an asynchronous state engine may also log all state transition activities to an audit data database. As such, the reasons for all state transitions may be captured and reviewed if it becomes necessary to determine why a particular event happened.","Operating Environment",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 7","b":["700","712","714","716","718","712","714","716","718","712","714","716","718","712","714","716","718","710","700"]},"In most embodiments, the system  includes some type of network . The network may can be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially-available protocols, including without limitation TCP\/IP, SNA, IPX, AppleTalk, and the like. Merely by way of example, the network  can be a local area network (\u201cLAN\u201d), such as an Ethernet network, a Token-Ring network and\/or the like; a wide-area network; a virtual network, including without limitation a virtual private network (\u201cVPN\u201d); the Internet; an intranet; an extranet; a public switched telephone network (\u201cPSTN\u201d); an infra-red network; a wireless network (e.g., a network operating under any of the IEEE 802.11 suite of protocols, GRPS, GSM, UMTS, EDGE, 2G, 2.5G, 3G, 4G, Wimax, WiFi, CDMA 2000, WCDMA, the Bluetooth protocol known in the art, and\/or any other wireless protocol); and\/or any combination of these and\/or other networks.","The system may also include one or more server computers , ,  which can be general purpose computers, specialized server computers (including, merely by way of example, PC servers, UNIX servers, mid-range servers, mainframe computers rack-mounted servers, etc.), server farms, server clusters, or any other appropriate arrangement and\/or combination. One or more of the servers (e.g., ) may be dedicated to running applications, such as a business application, a Web server, application server, etc. Such servers may be used to process requests from user computers , , , . The applications can also include any number of applications for controlling access to resources of the servers , , .","The Web server can be running an operating system including any of those discussed above, as well as any commercially-available server operating systems. The Web server can also run any of a variety of server applications and\/or mid-tier applications, including HTTP servers, FTP servers, CGI servers, database servers, Java servers, business applications, and the like. The server(s) also may be one or more computers which can be capable of executing programs or scripts in response to the user computers , , , . As one example, a server may execute one or more Web applications. The Web application may be implemented as one or more scripts or programs written in any programming language, such as Java\u00ae, C, C# or C++, and\/or any scripting language, such as Perl, Python, or TCL, as well as combinations of any programming\/scripting languages. The server(s) may also include database servers, including without limitation those commercially available from Oracle\u00ae, Microsoft\u00ae, Sybase\u00ae, IBM\u00ae and the like, which can process requests from database clients running on a user computer , , , .","The system  may also include one or more databases . The database(s)  may reside in a variety of locations. By way of example, a database  may reside on a storage medium local to (and\/or resident in) one or more of the computers , , , , , , . Alternatively, it may be remote from any or all of the computers , , , , , , , and\/or in communication (e.g., via the network ) with one or more of these. In a particular set of embodiments, the database  may reside in a storage-area network (\u201cSAN\u201d) familiar to those skilled in the art. Similarly, any necessary files for performing the functions attributed to the computers , , , , , ,  may be stored locally on the respective computer and\/or remotely, as appropriate. In one set of embodiments, the database  may be a relational database, such as Oracle 10g, that is adapted to store, update, and retrieve data in response to SQL-formatted commands.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 8","b":["800","800","800","824","802","804","806","800","808","808"]},"The computer system  may additionally include a computer-readable storage media reader , a communications system  (e.g., a modem, a network card (wireless or wired), an infra-red communication device, etc.), and working memory , which may include RAM and ROM devices as described above. In some embodiments, the computer system  may also include a processing acceleration unit , which can include a digital signal processor DSP, a special-purpose processor, and\/or the like.","The computer-readable storage media reader  can further be connected to a computer-readable storage medium , together (and, optionally, in combination with storage device(s) ) comprehensively representing remote, local, fixed, and\/or removable storage devices plus storage media for temporarily and\/or more permanently containing, storing, transmitting, and retrieving computer-readable information. The communications system  may permit data to be exchanged with the network and\/or any other computer described above with respect to the system .","The computer system  may also comprise software elements, shown as being currently located within a working memory , including an operating system  and\/or other code , such as an application program (which may be a client application, Web browser, mid-tier application, RDBMS, etc.). It should be appreciated that alternate embodiments of a computer system  may have numerous variations from that described above. For example, customized hardware might also be used and\/or particular elements might be implemented in hardware, software (including portable software, such as applets), or both. Further, connection to other computing devices such as network input\/output devices may be employed.","Storage media and computer readable media for containing code, or portions of code, can include any appropriate media known or used in the art, including storage media and communication media, such as but not limited to volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage and\/or transmission of information such as computer readable instructions, data structures, program modules, or other data, including RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, data signals, data transmissions, or any other medium which can be used to store or transmit the desired information and which can be accessed by the computer. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and\/or methods to implement the various embodiments.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various embodiments will be described with reference to the drawings, in which:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
