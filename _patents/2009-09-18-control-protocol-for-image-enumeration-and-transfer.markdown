---
title: Control protocol for image enumeration and transfer
abstract: A control protocol is used to deploy and install an operating system image on a client. The data structure of the control protocol includes an operation code corresponding to an operation associated with the deployment and installation of the operating system image on the client. When a server receives a request packet from the client, the server parses the request packet and sends the parsed request packet to a provider. The provider then executes the operation associated with the operation code and generates a return value. The return value is sent to the server. The server then composes a reply packet including the return value and transmits the reply packet to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495347&OS=08495347&RS=08495347
owner: Microsoft Corporation
number: 08495347
owner_city: Redmond
owner_country: US
publication_date: 20090918
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","APPENDIX A","Example","Example","Examples"],"p":["This application is a divisional of U.S. Utility application Ser. No. 11\/358,489, filed on Feb. 21, 2006, now U.S. Pat. 7,631,175, which issued Dec. 8, 2009, which is hereby incorporated herein by reference in its entirety.","When deploying an operating system to multiple computing devices, it is beneficial to utilize tools to automate the deployment process. For example, in a computing device manufacturing process, an original equipment manufacturer (OEM) typically installs an operating system (OS) with standard configurations or a standard OS in the computing device before a customer purchases it at a retail store or over the Internet. In a corporate setting, a business may need to upgrade a number of identically configured machines simultaneously and efficiently using such automated process.","Typically, the standard OS is deployed and installed automatically to the computing devices by copying or duplicating a pre-determined OS image to the computing device for booting the computing device. For example, the automated deployment and installation process would install the OS with standard configurations on a memory storage area of each of the computing devices via a wired or a wireless connection. Upgrades to OS or other applications may be installed in a similar fashion.","However, with the ongoing advancements and developments in storage media and computing device processing powers, installing a standard set of OS images to a number of computing devices no longer accounts for proper configuration of the computing devices.","One available system, Pre-Boot Execution Environment (PXE) protocol, allows a client to obtain an OS image from a PXE server in a networked environment. The client initiates the PXE process by broadcasting a PXE request in the networked environment. However, any PXE server listening for a request can read and choose to respond to the client. A disadvantage results if more than one PXE server exists in the networked environment because the client will be serviced by whichever PXE server responds the quickest to the client request. For example, if two PXE servers are in the networked environment, the first configured with application logic to service any type of device (e.g. personal computers, point of sale devices, and network servers) and a second configured to service point of sale devices, it is not possible to determine which PXE server will be the first to respond to the request from a point of sale device client. Therefore, using the PXE protocol, it is possible that the point of sale device may incorrectly receive a boot image for a personal computer.","In addition, not only does an entity need to deploy an OS on a number of different classes of computing devices, from personal digital assistants (PDAs), to server computers, to point of sale terminals, the entity also needs to consider that each class of the computing devices may require particular configurations due to hardware components. For example, a PDA \u201cX\u201d with a chip having a processing power of 500 MHz and a storage memory capacity of 5 GB may require a different OS image from another PDA \u201cY\u201d in the same production line with a chip having a processing power of 733 MHz and a storage memory capacity of 10 GB. As such, the existing OS image deployment systems that install an OS with standard configuration or a standard OS image would not properly configure the PDA \u201cY\u201d because both PDA \u201cX\u201d and PDA \u201cY\u201d would receive the same OS image for booting the devices. In addition, current OS image deployment systems lack the ability to properly detect differences in hardware components in the computing devices to efficiently deploy and install appropriate OS images to the computing devices.","By way of further example, in existing OS boot image file deployment systems, the server responds to the request by sending a standard or a predetermined OS boot image file to the client. For example, suppose the clients sending the requests include computing devices with 32-bit architecture and computing devices with 64-bit architecture. Current deployment systems would, regardless of the different computing architecture configurations, respond to the request by sending a generic or standard OS boot image file. Thus, all clients, either with 32-bit or 64-bit architecture, would receive the same boot image file (e.g., a 32-bit boot image file). As such, under current deployment systems, the computing devices with 64-bit architecture need to perform additional evaluation and detection before sending another request to the server for a more appropriate OS boot image file, the 64-bit OS image, before the computing devices can boot accordingly.","Embodiments of the invention include methods for a control protocol used to deploy and install an operating system image to a client. When the server receives a request packet associated with deployment and installation of an operating system image from the client, the server parses the request packet and sends the parsed request to a provider. The request packet includes an operation code corresponding to an operation associated with deploying and installing the operating system image. The provider executes the operation associated with an operation code included in the parsed request. Once the provider generates a response to the request, the response is sent to the server. The server then composes a reply packet and sends the reply packet to the client.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Other features will be in part apparent and in part pointed out hereinafter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","Referring to , the system  illustrates an exemplary embodiment in which aspects of the invention may be implemented. A server , which may be one of a plurality of servers, includes components that enable the deployment of an operating system (OS) to a plurality of clients  via a networked environment . In one embodiment, the server  deploys the OS, such as MAC\u00ae OS X, UNIX\u00ae, Linux\u00ae, or Windows Vista\u00ae operating systems to the clients . The server  and the clients  may communicate via a number of underlying network transport mechanisms available in the networked environment . In one embodiment, the transport mechanisms include, Transmission Control Protocol (TCP), Trivial File Transfer Protocol (TFTP), User Datagram Protocol (UDP), Remote Procedure Call (RPC), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), multicast over any of these protocols or the like. In one example, server  in system  includes a server  described in .","The clients  include one or more computing devices, such as a desktop computer, a laptop computer, a personal digital assistant (PDA), or other devices. In another embodiment, server  and each of the clients  implement at least a part of a computer  depicted in .","In one example, system  may be used in a pre-boot execution environment (PXE). For example, server  may be a PXE server that watches for dynamic host configuration protocol (DHCP) discovery requests, which include a special tag identifying the client as a PXE client. If the discovery request includes the tag, the PXE server replies to the client with configuration information, including the name of a boot image file, which may include an OS boot image, pre-OS image file, pre-boot agents (e.g., computer-executable instructions for scanning clients  for viruses before installing an OS). The boot image file may transferred to clients  using TFTP, and the transferred file may be used to boot the clients .","Referring now to , an exemplary embodiment of the server  of the invention is shown. The server  includes one or more components, such as a transport layer , a PXE server , and a Control Protocol Server . The transport layer  handles the details associated with communicating with clients and provides a transport-independent communication mechanism to the PXE Server  and the Control Protocol Server . In one embodiment, the transport layer  may communicate with the clients  utilizing a variety of network protocols including Transmission Control Protocol (TCP), User Datagram Protocol (UDP), Remote Procedure Call (RPC), and HyperText Transfer Protocol (HTTP), and multicast over any of theses protocols.","The PXE server  accepts PXE requests from the clients . PXE is one of the components of the Wired for Management (WfM) specification that allows the clients  to boot from the PXE server  on a network prior to booting an operating system from a hard drive local to the clients . After receiving the PXE request from the client, the PXE server passes the request to a PXE provider . The PXE provider  is a component containing the application logic to formulate a response to the clients . In one embodiment, the PXE provider  is Boot Information Negotiation Layer A (BINL). The responsibilities of the BINL service  include answering the request, querying a directory service on behalf of the clients , as well ensuring that the correct policy and configuration settings are applied to the clients  during the operating system installation. In another embodiment, the PXE provider  includes two or more PXE providers , each with distinct application logic.","The Control Protocol Server  accepts requests from a reduced operating system environment. The reduced operating system aids in the deployment of the operating system. In one embodiment, the Control Protocol Server  accepts Microsoft\u00ae Windows\u00ae Preinstallation Environment (WinPE) requests. After receiving the request from the clients , the Control Protocol Server  passes the request to a Control Protocol Provider . The Control Protocol Provider  is a component containing the application logic to formulate a response to the clients . In one embodiment, the Control Protocol Provider  includes a plurality of providers, such as A, and B.","It is also to be understood that additional components connected, wired or wirelessly, to the server  may be added to perform operations of the transport layer , the PXE server , and the control protocol server .","Initially, a client (e.g., client -) requests to be booted by a server (e.g., PXE server ). The request is received by the server, which may be coupled with one or more other servers (e.g., a Control Protocol Server) or PXE providers for responding to the request.","In , the server  is configured to deploy an operating system image to the client  via a control protocol. In one embodiment the server  deploys a Windows\u00ae operating system. The server  receives a request packet from the client . The request packet includes an operation code corresponding to an operation that server  is to perform. Operations are related to selecting and installing an operating system image on the client . The server  parses the request packet and sends the parsed request to a provider . The provider  executes the operation and formulates a response. The provider  then sends the response to the server . The server  composes a reply packet including the received response and sends the reply packet to the client .","The client  receives a library of functions  from the server . The library of functions  allow the client  to communicate with the server  via the control protocol. In one embodiment the library includes functions to initialize the data structure, create the data structure, parse the received data structure, release the data structure, add a variable to the data structure, and delete a variable from the data structure.","In one embodiment, the control protocol allows for the transportation of data related to all facets of the operating system image deployment, including image metadata, the image data itself, and unattended information. For example, it is common for organizations to place operating system images on a network share on a server. To install these images, the client machines boot to gain network access via PXE or other bootable media (e.g., CDROM, DVD, or floppy) to connect to the network share containing the operating system images. Once connected, the client machine may discover what operating system images are available on the share, select an appropriate operating system image to install, and install the appropriate operating system image via the control protocol. The data transmitted over the control protocol may include the types of operating system images that are available on the share (image enumeration), the properties of the operating system images (image metadata), adjunct files to the operating system image (like unattended setup files), and the operating system image itself.","In one embodiment, the control protocol is independent of the underlying transport layer, so that there is flexibility in the type of solution that one could implement. For example, suppose the underlying transport is HTTP (HyperText Transfer Protocol). Utilizing the control protocol, a web application may be developed that directs boot clients on the Internet via a web page to a centrally located server. From there, the operating system image enumeration and transport could occur via HTTP. In another example, suppose a datacenter contains a thousand machines that need to install operating system images concurrently. The underlying transport protocol of the control protocol is implemented in unicast. The control protocol can be used to drive a multicast transport protocol to transfer the operating system images. Thus, the multicast transport protocol, such as multicast over TFTP (Trivial File Transfer Protocol), may be used to transfer the operating system image to save available bandwidth while installing the operating system image files on the machines.","An application programming interface (API)  is built on the control protocol. The control protocol is session-less and session management is built on top of the control protocol. Additionally, the control protocol is built on a client driven request-response model. The control protocol abstracts a transport layer  from the API layer . Thus, if a new network protocol is implemented in the transport layer , no changes will need to be made to the API layer . Excerpts from an exemplary (API) for the control protocol is shown in Appendix A.","The transport layer  is responsible for handling details associated with communicating with a client  and provides a transport-independent communication mechanism to control protocol server . In one embodiment, the transport layer can support one or more network protocols including TFTP (Trivial File Transfer Protocol), Transmission Control Protocol (TCP), User Datagram Protocol (UDP), remote procedure call (RPC), and HyperText Transfer Protocol (HTTP).","In one embodiment the library of functions  provides functions to client  to construct control protocol request packets, to send control protocol packets to the server , and to parse control protocol reply packets received from the server . Because the control protocol is session-less, the library does not include functions for session management. The library of functions provides functions to server  to parse control protocol request packets received from the client , to construct control protocol reply packets, and to send control protocol reply packets to the client . Excerpts from an exemplary (API) for the control protocol is shown in Appendix A.","In , an exemplary data structure of a packet  of the control protocol is shown. The packet  includes fixed fields , , , ,  and variable fields , , , , . The fixed fields are included with every packet . The variable fields are associated with zero or more parameters required for executing the operation indicated by the operation code represented by the code value stored in the packet  at . A set of variable fields , , , ,  is included in the packet for each required parameter.","At , a total size of the packet in bytes is stored. At , a version number of the control protocol is stored. At , an indicator is stored, indicating whether the packet is a request packet or a reply packet. If a request packet is indicated at , then a code value representing an operation code corresponding to an operation to be performed by server is stored at . If a reply packet is indicated at , then a return value of the operation performed by the server is stored at . Below is one example of operation codes being defined at a provider that utilizes the control protocol:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef enum"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003WDS_OP_SESSION_CREATE = 1,"]},{"entry":[{},"\u2003\u2003WDS_OP_IMG_ENUMERATE,\u2003\u2003\u2003\u2003\u2003\u2003\/\/ 2"]},{"entry":[{},"\u2003\u2003WDS_OP_LOG_INIT,\u2003\/\/ 3,"]},{"entry":[{},"\u2003\u2003WDS_OP_LOG_MSG,\u2002\/\/ 4"]},{"entry":[{},"\u2003\u2003WDS_OP_GET_CLIENT_UNATTEND,\u2003\u2002\/\/ 5"]},{"entry":[{},"\u2003\u2003WDS_OP_GET_UNATTEND_VARIABLES\u2003\u2002\/\/ 6"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The packet  may contain variable fields associated with zero or more parameters. The number of parameters contained in the packet  is stored at . The parameters are the arguments required by the operation. A value representing the name of the parameter is stored at . A value representing the type of the parameter is stored at . In one embodiment a parameter may be one of the following types: C type unsigned long integer, C type unsigned short integer, C type byte, C type long unsigned 64-bit integer, C type pointer to NULL terminated ANSI string, C type pointer to a NULL terminated Unicode string, and C type pointer to a memory location which contains raw data.","A value representing the length of the parameter is stored at . A value representing the size of the array, if the parameter is an array, is stored at . A value representing the value of the parameter is stored at .","The fields , , , ,  associated with a parameter are repeated in order for each parameter included in the packet . For example, if the number of parameters  in the packet  is two, then the fields , , , ,  associated with the first parameter will be added in order to the packet . The fields , , , ,  associated with the second parameter will be added to the packet  after the fields associated with the first parameter.","In , an embodiment of the control protocol server is shown. In operation, at , the server receives a request packet from the client. At , the server parses the request packet. At , the server sends the parsed request to the provider. The provider performs the operation requested by the client and formulates a response. The server receives the provider response at . At , the server composes a reply packet including the received response. At , the reply packet is sent to the client.","In , an embodiment of the control protocol client is shown. In operation, at , the client identifies an operation code corresponding to an operation to be performed on the control protocol server. At , the client composes a request packet including the identified operation code. At , the client sends the request packet to the server. The client receives the reply packet at , the reply packet including a return value indicating the result of the requested operation. At , the client parses the reply packet.","Referring now to , one embodiment of a general purpose computing device in the form of a computer  is illustrated. A computer such as the computer  is suitable for use in the other figures illustrated and described herein, such as . Computer  has one or more processors or processing units  and a system memory . In the illustrated embodiment, a system bus  couples various system components, including the system memory  to the processors . The bus  represents one or more of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically has at least some form of computer readable media. Computer readable media, which include both volatile and nonvolatile media, removable and non-removable media, may be any available medium that may be accessed by computer . By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. For example, computer storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal, which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media, are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.","The system memory  includes computer storage media in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory. In the illustrated embodiment, system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. For example,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media.  also shows a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that may be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a non-volatile memory interface, such as interface .","The drives or other mass storage devices and their associated computer storage media, discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules, and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components may either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into computer  through input devices or user interface selection devices such as a keyboard  and a pointing device  (e.g., a mouse, trackball, pen, or touch pad). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to processing unit  through a user input interface  that is coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video interface . In addition to the monitor , computers often include other peripheral output devices (not shown) such as a printer and speakers, which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. LAN  and\/or WAN  may be a wired network, a wireless network, a combination thereof, and so on. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and global computer networks (e.g., the Internet).","When used in a local area networking environment, computer  is connected to the LAN  through a network interface or adapter . When used in a wide area networking environment, computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device (not shown). By way of example, and not limitation,  illustrates remote application programs  as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. Aspects of the invention described herein include these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. Further, aspects of the invention include the computer itself when programmed according to the methods and techniques described herein.","For purposes of illustration, programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks. It is recognized, however, that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although described in connection with an exemplary computing system environment, including computer , embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of any aspect of the invention. Moreover, the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well-known computing systems, environments, and\/or configurations that may be suitable for use with aspects of the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, mobile telephones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","Embodiments of the invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","An interface in the context of a software architecture includes a software module, component, code portion, or other sequence of computer-executable instructions. The interface includes, for example, a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include, in one example, application programming interfaces (APIs) such as provided by operating systems, component object model (COM) interfaces (e.g., for peer-to-peer application communication), and extensible markup language metadata interchange format (XMI) interfaces (e.g., for communication between web services).","The interface may be a tightly coupled, synchronous implementation such as in Java 2 Platform Enterprise Edition (J2EE), COM, or distributed COM (DCOM) examples. Alternatively or in addition, the interface may be a loosely coupled, asynchronous implementation such as in a web service (e.g., using the simple object access protocol). In general, the interface includes any combination of the following characteristics: tightly coupled, loosely coupled, synchronous, and asynchronous. Further, the interface may conform to a standard protocol, a proprietary protocol, or any combination of standard and proprietary protocols.","The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further, the interfaces may include additional or less functionality than illustrated or described herein.","In operation, computer  executes computer-executable instructions such as those illustrated in the figures to implement aspects of the invention.","The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential, unless otherwise specified. That is, the operations may be performed in any order, unless otherwise specified, and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example, it is contemplated that executing or performing a particular operation before, contemporaneously with, or after another operation is within the scope of aspects of the invention.","Embodiments of the invention may be implemented with computer-executable instructions. The computer-executable instructions may be organized into one or more computer-executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example, aspects of the invention are not limited to the specific computer-executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer-executable instructions or components having more or less functionality than illustrated and described herein.","When introducing elements of aspects of the invention or the embodiments thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","As various changes could be made in the above constructions, products, and methods without departing from the scope of aspects of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.","Excerpts from an exemplary application programming interface for the control protocol is shown below.","WdsClientExecute","Sends a request to server for execution and returns the reply from server.",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsClientExecute("]},{"entry":[{},"\u2003\u2003\u2002WDS_CRED *pCred,"]},{"entry":[{},"\u2003\u2003\u2002WDS_ENDPOINT *pLocalEndpoint,"]},{"entry":[{},"\u2003\u2003\u2002WDS_ENDPOINT *pRemoteEndpoint,"]},{"entry":[{},"\u2003\u2003\u2002PVOID pPacket,"]},{"entry":[{},"\u2003\u2003\u2002ULONG uPacketLen,"]},{"entry":[{},"\u2003\u2003\u2002PVOID *ppReply,"]},{"entry":[{},"\u2003\u2003\u2002ULONG *puReplyLen,"]},{"entry":[{},"\u2003\u2003\u2002WDS_CLIENT_OP *pOp"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["[in] This parameter is only used when using an authenticated channel to communicate with the server. If this parameter is NULL, then the credentials of the current thread are used; to use different credentials, pass-in the user name, password and domain name using this parameter.\n\npLocalEndpoint\n","[in] Specifies local endpoint to use for sending a request to the server.\n\npRemoteEndpoint\n","[in] Specifies the server on which to execute request.\n\npPacket\n","[in] Request packet.\n\nuPacketLen\n","[in] Length, in bytes, of pPacket.\n\nppReply\n","[out] Reply from Server. This memory is allocated by WDSCSL and should be released using WdsClientPacketFree function.\n\npuReplyLen\n","[out] Contains the length, in bytes, of pReply.\n\npOp\n","[in] Used to specify timeout and retry count.\n\nReturn Value:\n"]}}}},"If function is successful, it should return ERROR_SUCCESS. On failure, appropriate Win32 Error Code, as defined in winerror.h, should be returned.","Remarks:","To send a UDP request:","pRemoteEndpoint must be filled in as given below to specify server address.",{"@attributes":{"id":"p-0067","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Name","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["uSizeOfStruct","sizeof(WDS_ENDPOINT)"]},{"entry":["Udp.uPort","Specifies the target port on server"]},{"entry":["bAddress\/uAddrLen","Specifies server's address"]},{"entry":["Type","WDS_ENDPOINT_UDP"]},{"entry":"All other member must be zero"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0068","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Name","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["uSizeOfStruct","sizeof(WDS_ENDPOINT)"]},{"entry":["Udp.uPort","Specifies the port to use for sending packet."]},{"entry":["bAddress\/uAddrLen","Specifies the IP address of the network"]},{"entry":[{},"interface to use for sending UDP packet."]},{"entry":["Type","WDS_ENDPOINT_UDP"]},{"entry":"All other member must be"},{"entry":"zero"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":[{},{},{}]},{"@attributes":{"id":"p-0069","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Name","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["uSizeOfStruct","Size of WDS_ENDPOINT"]},{"entry":["Type","WDS_ENDPOINT_RPC"]},{"entry":["uFlags","WDS_RPC_NOAUTH:"]},{"entry":[{},"Use unauthenticated channel."]},{"entry":[{},"WDS_RPC_AUTH:"]},{"entry":[{},"For secure and authenticated channel."]},{"entry":[{},"Current thread's credentials are used to"]},{"entry":[{},"authenticate client on server."]},{"entry":["Rpc.guid","Target WDS Provider GUID"]},{"entry":["Rpc.Server.wszComputerName","Server Name"]},{"entry":"All other members must be zero"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0070","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field Name","Meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uTimeout","Specifies timeout in milliseconds."]},{"entry":[{},{},"WDSCSL waits for reply from server for"]},{"entry":[{},{},"the specified time, and if no reply is"]},{"entry":[{},{},"received, the request is cancelled."]},{"entry":[{},"uRetryCount","Number of retries."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0071","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WDS_CLIENT_OP Op;"]},{"entry":[{},"Op.uTimeout = 30 * 1000; \/\/ 30 Seconds"]},{"entry":[{},"Op.uRetryCount = 1; \/\/ Retry one more time"]},{"entry":[{},"..."]},{"entry":[{},"dwError = WdsClientExecute (&LocalEp,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003&RemoteEp,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003pMyData,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003uDataLen,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003&pReply,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003&uReplyLen,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003&Op);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Allocates a packet.",{"@attributes":{"id":"p-0073","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsClientPacketAllocate("]},{"entry":[{},"\u2003\u2003ULONG uSize"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":"[in] Size, in bytes, of memory to allocate.\n\nReturn Value:\n"}}}},"On success, returns non-NULL pointer to allocate memory. On failure, NULL is returned, use GetLastError( ) to get extended error information.","WdsClientPacketFree","Frees packet allocated using WdsClientPacketAllocate.",{"@attributes":{"id":"p-0076","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsClientPacketFree("]},{"entry":[{},"\u2003\u2003PVOID pPacket"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"[in] Pointer to allocated memory.\n\nReturn Value:\n"}}}},"If function is successful, it should return ERROR_SUCCESS. On failure, appropriate Win32 Error Code, as defined in winerror.h, should be returned.","Control Protocol","WDS Control Protocol Library (WDSCPL) provides functions to construct request packets, send them to server, and parse reply. WDSCSL uses WDSCSL to communicate with server, and requires users to initialize WDSCSL before using WDSCPL. WDSCPL should be used on server-end as well to parse the received packets.","WDSCPL Packet Format",{"@attributes":{"id":"p-0079","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field Name","Meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Size of Packet","Size of Packet"]},{"entry":[{},"Version","Control Protocol Version"]},{"entry":[{},"Packet Type","Indicates if the packet is Request or Reply."]},{"entry":[{},"Op Code\/Error Code","For Request Packets: This parameter"]},{"entry":[{},{},"specifies the type of operation to perform."]},{"entry":[{},{},"Client and Server both define the meaning"]},{"entry":[{},{},"of the Op Codes and what operation needs"]},{"entry":[{},{},"to be performed for it."]},{"entry":[{},{},"For Reply Packet: This contains the Win32"]},{"entry":[{},{},"Error Code as a result of execution of client"]},{"entry":[{},{},"request."]},{"entry":[{},"Variable Count","Total number of variable\/value pairs in"]},{"entry":[{},{},"packet."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Each packet contains any number of Variable\/Value pairs"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Variable Name","Specifies a NULL terminated variable"]},{"entry":[{},{},"name."]},{"entry":[{},"Variable Type","Type of variable (WDSCPL_VAR_xxxx)"]},{"entry":[{},"Value Length","Specifies length, in bytes, of Variable"]},{"entry":[{},{},"Value for this variable."]},{"entry":[{},"Variable Value","Value of variable"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0080","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct WDSCPL_PACKET_INFO"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003ULONG uSizeOfStruct;"]},{"entry":[{},"\u2003\u2003ULONG uType;"]},{"entry":[{},"\u2003\u2003union"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003ULONG uOpCode;"]},{"entry":[{},"\u2003\u2003\u2003\u2003ULONG uErrorCode;"]},{"entry":[{},"\u2003\u2003};"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0081","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Member Variable","Meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uSizeOfStruct","Should be set to"]},{"entry":[{},{},"sizeof(WDSCPL_PACKET_INFO)"]},{"entry":[{},"uType","Specifies type of packet:"]},{"entry":[{},{},"WDSCPL_PACKET_REQUEST"]},{"entry":[{},{},"WDSCPL_PACKET_REPLY"]},{"entry":[{},"uOpCode","For WDSCPL_PACKET_REQUEST, it"]},{"entry":[{},{},"specifies the User-defined Op Code."]},{"entry":[{},"uErrorCode","For WDSCPL_PACKET_REPLY, it"]},{"entry":[{},{},"specifies the return value of the execution."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"WDSCPL provides functions to prepare a request and to parse a response. Clients should use these functions and never create the packet by hand or parse the response directly.","WdsCpPacketInitialize","This function is used to initialize a packet which will be sent to server for processing.",{"@attributes":{"id":"p-0084","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsCpPacketInitialize("]},{"entry":[{},"\u2003\u2003HANDLE hWdsProvider,"]},{"entry":[{},"\u2003\u2003PWDSCPL_PACKET_INFO pInfo"]},{"entry":[{},"\u2003\u2003HANDLE *phPacket"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["[in] If WDSCPL is being used by WDS Provider running inside WDS Server, then this parameter should be set to the handle of WDS Provider. For client side applications, this should always be NULL.\n\npInfo\n","[in] Specifies information about the type of packet to create.\n\nphPacket\n","[out] On success, a handle to initialized packet is returned.\n\nReturn Value:\n"]}}}},"If function is successful, it should return ERROR_SUCCESS. On failure, appropriate Win32 Error Code, as defined in winerror.h, should be returned.","Remarks:","When done with packet, it must be freed using WdsCpPacketFree.","WdsCpRecvPacketInitialize","This function is used to initialize a received packet and prepare it for parsing.",{"@attributes":{"id":"p-0088","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsCpRecvPacketInitialize("]},{"entry":[{},"\u2003\u2003HANDLE hWdsProvider,"]},{"entry":[{},"\u2003\u2003PVOID pPacket,"]},{"entry":[{},"\u2003\u2003ULONG uPacketLen,"]},{"entry":[{},"\u2003\u2003PWDSCPL_PACKET_INFO pInfo"]},{"entry":[{},"\u2003\u2003HANDLE *phPacket"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["[in] If WDSCPL is being used by WDS Provider running inside WDS Server, then this parameter should be set to the handle of WDS Provider. For client side applications, this should always be NULL.\n\npPacket\n","[in] Pointer to memory containing contents of received packet.\n\nuPacketLen\n","[in] Length, in bytes, of received packet.\n\npInfo\n","[out] On return contains information about packet.\n\nphPacket\n","[out] On return contains the handle to packet.\n\nReturn Value:\n"]}}}},"WDSCPL validates the received packet and returns a handle which is used to parse out the variables stored in the packet. If the packet is not valid, i.e., invalid header or data, then ERROR_INVALID_DATA is returned.","Remarks:","This function is used by both client and server. Server uses this function to parse the received request from client, and client uses it to parse the reply received from server. When done using the packet, the handle must be released using WdsCpPacketRelease.","WdsCpPacketRelease","This function is used to release a packet once client is done with processing.",{"@attributes":{"id":"p-0092","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsCpPacketRelease("]},{"entry":[{},"\u2003\u2003HANDLE hPacket"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":"[in] Handle to packet.\n\nReturn Value:\n"}}}},"If function is successful, it should return ERROR_SUCCESS. On failure, appropriate Win32 Error Code, as defined in winerror.h, should be returned.","Remarks:","This function releases the packet handle.","If the handle was returned by WdsCpRecvPacketInitialize then the function only releases the handle; caller is still responsible for releasing the memory of the received packet.","For WdsCpPacketInitialize, only the handle is released; callers are still required to release any packets returned by WdsCpPacketGetBuffer.",{"@attributes":{"id":"p-0097","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dwError = WdsCpPacketInitialize(hWdsHandle, MY_OP_CODE,"]},{"entry":[{},"&hPacket);"]},{"entry":[{},"if (dwError == ERROR_SUCCESS)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\/\/ Do something with packet"]},{"entry":[{},"\u2003\u2003if (WdsCpPacketFree(hPacket) != ERROR_SUCCESS)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/\/ Handle Error"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"This function is used to construct a Control Protocol packet which can be sent to the server for execution.",{"@attributes":{"id":"p-0099","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsCpPacketGetBuffer("]},{"entry":[{},"\u2003\u2003HANDLE hPacket,"]},{"entry":[{},"\u2003\u2003PVOID *ppPacket,"]},{"entry":[{},"\u2003\u2003ULONG *puPacketLen"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":{"@attributes":{"id":"ul0013-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["[in] Handle to packet returned by WdsCpPacketInitialize.\n\nppPacket\n","[out] On success, contains pointer to memory which contains the Control Packet data. When this memory is no loner needed, it should be free'ed using WdsClientPacketFree (for client-side) or WdsPacketFree (for server-side).\n\npuPacketLen\n","[out] On success, contains the length, in bytes, of returned packet.\n\nReturn Value:\n"]}}}},"If function is successful, it should return ERROR_SUCCESS. On failure, appropriate Win32 Error Code, as defined in winerror.h, should be returned.","Remarks:","Callers use this function when they have added all the required parameters and want to send the required parameters to server.","WdsCpParameterAdd","Adds a variable to packet, and returns memory pointer where value can be stored.",{"@attributes":{"id":"p-0103","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PVOID"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsCpParameterAdd ("]},{"entry":[{},"\u2003\u2003HANDLE hPacket,"]},{"entry":[{},"\u2003\u2003LPCWSTR pwszName,"]},{"entry":[{},"\u2003\u2003ULONG uVarType,"]},{"entry":[{},"\u2003\u2003ULONG uElemLength,"]},{"entry":[{},"\u2003\u2003ULONG uArraySize"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["[in] Handle to packet returned by WdsCpPacketInitialize.\n\npwszName\n","[in] Variable Name to add.\n\nVarType\n","[in] Type of variable to add.\n\nuElemLength\n","[in] For variable length data types, this parameter specifies the length, in bytes, of variable. For fixed length data types, it is ignored.\n\nuArraySize\n","[in] For array variables, this parameter specifies the total number of elements to allocate for array. For non-array variables, this parameter is ignored.\n\nReturn Value:\n"]}}}},"If function is successful, it returns a pointer to allocated memory where the value can be stored by using the returned pointer. In case of an error, NULL is returned; callers should use GetLastError( ) to determine the cause of failure.","Remarks:","Adds a variable to the packet. WDSCPL supports basic data types, and allows addition of BLOBs.","The following values are supported for VarType:",{"@attributes":{"id":"p-0107","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Type","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["WDSCPL_VAR_ULONG","C Type: ULONG"]},{"entry":[{},"Fixed Length"]},{"entry":["WDSCPL_VAR_USHORT","C Type: USHORT"]},{"entry":[{},"Fixed Length"]},{"entry":["WDSCPL_VAR_BYTE","C Type: BYTE"]},{"entry":[{},"Fixed Length"]},{"entry":["WDSCPL_VAR_ULONG64","C Type: ULONG64"]},{"entry":[{},"Fixed Length"]},{"entry":["WDSCPL_VAR_STRING","C TYPE: char*"]},{"entry":[{},"Pointer to NULL terminated Ansi string."]},{"entry":[{},"uLength specifies the amount of memory,"]},{"entry":[{},"in bytes, to allocate and return."]},{"entry":["WDSCPL_VAR_WSTRING","C TYPE: WCHAR*"]},{"entry":[{},"Pointer to NULL terminated Unicode"]},{"entry":[{},"string. uLength specifies the amount of"]},{"entry":[{},"memory, in bytes, to allocate and return."]},{"entry":["WDSCPL_VAR_BLOB","C Type: PVOID"]},{"entry":[{},"Pointer to memory location which contains"]},{"entry":[{},"raw data which should be copied into the"]},{"entry":[{},"packet. uLength parameter specifies the"]},{"entry":[{},"number of bytes to copy."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Variable types can be ORed with these flags:",{"@attributes":{"id":"p-0109","num":"0135"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Type","Meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WDSCPL_VAR_ARRAY","To create an array of base type."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Adds a simple ULONG variable:",{"@attributes":{"id":"p-0111","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG *pValue = NULL;"]},{"entry":[{},"..."]},{"entry":[{},"pValue = WdsCpParameterAdd(hPacket,"]},{"entry":[{},"\u2003\u2003\u2003\u2003L\u201dMyVariable\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003WDSCPL_VAR_ULONG,"]},{"entry":[{},"\u2003\u2003\u2003\u20030, \/\/ Fixed length type"]},{"entry":[{},"\u2003\u2003\u2003\u20030);"]},{"entry":[{},"If (pValue == NULL)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\/\/ Handle Error"]},{"entry":[{},"}"]},{"entry":[{},"*pValue = 100;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Adds an array of ULONG:",{"@attributes":{"id":"p-0113","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG *pValue = NULL;"]},{"entry":[{},"..."]},{"entry":[{},"pValue = WdsCpParameterAdd(hPacket,"]},{"entry":[{},"\u2003\u2003\u2003\u2003L\u201dMyVariable\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003WDSCPL_VAR_ULONG | WDSCPL_VAR_ARRAY,"]},{"entry":[{},"\u2003\u2003\u2003\u20030, \/\/ Fixed length type"]},{"entry":[{},"\u2003\u2003\u2003\u200320);"]},{"entry":[{},"If (pValue == NULL)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\/\/ Handle Error"]},{"entry":[{},"}"]},{"entry":[{},"for(int i = 0; i < 20; i++)"]},{"entry":[{},"pValue[i] = 100 + i;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Following adds an array of BLOBs:",{"@attributes":{"id":"p-0115","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct MyType"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003Int a, b, c, d;"]},{"entry":[{},"};"]},{"entry":[{},"..."]},{"entry":[{},"MyType *pValue = NULL;"]},{"entry":[{},"pValue = WdsCpParameterAdd(hPacket,"]},{"entry":[{},"\u2003\u2003\u2003\u2003L\u201dMyVariable\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003WDSCPL_VAR_BLOB | WDSCPL_VAR_ARRAY,"]},{"entry":[{},"\u2003\u2003\u2003\u2003sizeof(MyType),"]},{"entry":[{},"\u2003\u2003\u2003\u200315);"]},{"entry":[{},"If (pValue == NULL)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\/\/ Handle Error"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Deletes a variable from the packet.",{"@attributes":{"id":"p-0117","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WDSAPI"]},{"entry":[{},"WdsCpParameterDelete("]},{"entry":[{},"\u2003\u2003HANDLE hPacket,"]},{"entry":[{},"\u2003\u2003LPCWSTR pwszName"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":["[in] Handle to packet returned by WdsCpPacketInitialize.\n\npwszName\n","[in] Variable Name to add.\n\nReturn Value:\n"]}}}},"If function is successful, it should return ERROR_SUCCESS. On failure, appropriate Win32 Error Code, as defined in winerror.h, should be returned.","WdsCpParameterValidate","Validates a variable in the packet.",{"@attributes":{"id":"p-0120","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WdsCpParameterValidate("]},{"entry":[{},"\u2003\u2003HANDLE hPacket,"]},{"entry":[{},"\u2003\u2003LPCWSTR pwszName,"]},{"entry":[{},"\u2003\u2003ULONG uExpectedType,"]},{"entry":[{},"\u2003\u2003ULONG uMinElemLen,"]},{"entry":[{},"\u2003\u2003ULONG uMaxElemLen,"]},{"entry":[{},"\u2003\u2003ULONG uMinArraySize,"]},{"entry":[{},"\u2003\u2003ULONG uMaxArraySize"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":{"@attributes":{"id":"ul0019-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":["[in] Handle to packet returned by WdsCpPacketInitialize.\n\npwszName\n","[in] Variable Name.\n\nuExpectedType\n","[in] Expected type of variable.\n\nuMinElemLen\n","[in] For fixed length data types, this parameter is ignored and element length is calculated by WDSCPL. For variable length data types, this parameter specifies the minimum acceptable length of an element of a variable.\n\nuMaxElemLen\n","[in] For fixed length data types, this parameter is ignored and element length is calculated by WDSCPL. For variable length data types, this parameter specifies the maximum acceptable length of an element of a variable.\n\nuMinArraySize\n","[in] For array data types, specifies the minimum acceptable array size; ignored otherwise.\n\nuMaxArraySize\n","[in] For array data types, specifies the maximum acceptable array size; ignored otherwise.\n\nReturn Value:\n"]}}}},"If all checks are validated, ERROR_SUCCESS is returned. ERROR_INVALID_DATA is returned if specified checks fail.","Remarks:","This function is used by developers to verify a variable type, length and array size using just one function call.","WdsCpParameterQuery","Returns length and type of given variable.",{"@attributes":{"id":"p-0124","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD"]},{"entry":[{},"WdsCpParameterQuery("]},{"entry":[{},"\u2003\u2003HANDLE hPacket,"]},{"entry":[{},"\u2003\u2003LPCWSTR pwszName,"]},{"entry":[{},"\u2003\u2003ULONG *puType,"]},{"entry":[{},"\u2003\u2003ULONG *puElemLength,"]},{"entry":[{},"\u2003\u2003ULONG *puArraySize,"]},{"entry":[{},"\u2003\u2003PVOID *ppValuePtr"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":{"@attributes":{"id":"ul0021-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":["[in] Handle to packet returned by WdsCpPacketInitialize.\n\npwszName\n","[in] Variable Name.\n\npuType\n","[out] Optional parameter which is filled with type of variable.\n\npuLength\n","[out] Optional parameter which is filled with element length, in bytes, of variable.\n\npuArraySize\n","[out] Optional parameter which is filled with number of elements in array. If the variable is not an array, then this parameter is set to zero.\n\nppValuePtr\n","[out] Optional parameter which is filled with the pointer to the value of variable.\n\nReturn Value:\n"]}}}},"If function success, it should return ERROR_SUCCESS. On failure, appropriate Win32 Error Code, as defined in winerror.h, should be returned."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
