---
title: System and apparatus for sending complete responses to truncated electronic mail messages on a mobile device
abstract: The present invention allows mobile users to send replies to, or to forward, truncated electronic mail messages, and yet still send the entire body of the original electronic mail message, without having to download the entire body of the mail message locally to the mobile device and then re-transmit the entire message from the mobile device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07773106&OS=07773106&RS=07773106
owner: Microsoft Corporation
number: 07773106
owner_city: Redmond
owner_country: US
publication_date: 20030602
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE ILLUSTRATIVE EMBODIMENTS","Overview","Computing Device ","Mobile Device ","Overview of Synchronization","Responding to Truncated Electronic Mail Messages"],"p":["The present invention relates to electronic mail messaging through a synchronization protocol using a mobile device. More specifically, the present invention relates to responding to truncated electronic mail messages on a mobile device.","Mobile devices include a broad range of computing and communication devices that are small enough to be conveniently carried by a user. Examples of such devices include mobile phones, personal digital assistants, tablet PCs, and lap-top PCs.","Generally, the mobile device includes a processor, random access memory (RAM), and an input device such as a keyboard, touchpad or input buttons and a display. The keyboard can be integrated with the display, such as when the keyboard is incorporated as a touch sensitive display. A communication interface is optionally provided and is commonly used to communicate with other computers. A replaceable or rechargeable battery powers the mobile device. Optionally, the mobile device can receive power from an external power source that overrides or recharges the built-in battery.","While a wide variety of computing tasks and applications can be performed by such mobile devices, personal information managers (PIMs) are particularly well suited to mobile devices. PIMs typically comprise applications which enable the user of the mobile device to better manage scheduling and communications, and other such tasks. Some commonly available PIMs include scheduling and calendar programs, task lists, address books, and electronic mail (e-mail) programs. Some commonly commercially available PIMs are sold under the trademarks \u201cMICROSOFT SCHEDULE+\u201d and \u201cMICROSOFT OUTLOOK\u201d and are commercially available from Microsoft Corporation of Redmond, Wash. In addition to PIMs, however, such mobile devices may also run different types of applications, such as word processors, spread sheets, etc.","To provide users with as much freedom as possible, it is desirable to allow the user to access and change their application and PIM information from any device they choose. Thus, the user should be able to access their e-mail from a network terminal, a PDA, and a tablet PC, for example.","However, allowing the user to access and change their information from any desired source means that the devices must be able to communicate with each other to indicate changes to the information. The process of two devices sharing changes in the application and\/or PIM information is known as synchronization.","In general, synchronization is not a continuous process. In other words, a mobile device does not continually try to synchronize its data because that would waste limited wireless bandwidth and place an undue drain on the mobile device's battery. Instead, synchronization is performed periodically. In addition, since the mobile device is not always in use, it is wasteful to have a server or desktop computer periodically attempt to establish a connection with the mobile device to perform synchronization. Instead, the mobile device is responsible for establishing a connection to perform synchronization.","In the past, in order to accommodate limited transmition bandwidths, mobile devices often received truncated electronic mail messages. In other words, if a mail message had a long message body, it was often transmitted to the mobile device in truncated fashion, in which a pre-designated number of lines of text in the main message body were sent and the rest of the main message body was not. In such mobile devices, the user could then select the message for download and have the entire text of the message downloaded to the mobile device. The same generally applied to attachments. Initially, they would not be sent to the mobile device but could be selected for download.","Also, in the past, in order to reply to, or forward, electronic mail messages from a mobile device, the user simply executed the necessary instructions required by the particular electronic mail messaging PIM. The electronic mail message object created when the user indicated that the reply or forward should be sent was then transmitted, on a periodic basis, to a server which sent the electronic mail message object to the appropriate recipient. However, where the user was replying to, or forwarding, a truncated electronic mail message, then only the truncated message was sent on to the ultimate recipient identified in the forwarded or reply message.","The present invention allows mobile users to send replys to, or to forward, truncated electronic mail messages, and yet still send the entire body of the original electronic mail message, without having to download the entire body of the mail message locally to the mobile device and then re-transmit the entire message from the mobile device.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 9","FIG. 1"],"b":["10","10","12","14","12","16","18","20","22","24","26","14","28","30","32","34","36","38","12","14"]},"In one illustrative embodiment of the present invention, application programs  and  are personal information manager (PIM) programs, which support, for example, electronic mail messaging, scheduling, calendering, etc. Hereinafter, programs  and  will simply be referred to as PIMs  and . Of course, PIMs  and  can be configured to support a wide variety of other features, such as task lists and personalized address books, to name a few.","Object stores  and  are implemented in memory configured to store a plurality of individual records or objects, each comprising a plurality of fields or properties related to PIMs  and . In one illustrative embodiment, PIMs  and  are programs, such as that available under the commercial designation \u201cMICROSOFT OUTLOOK\u201d, and object stores  and  are configured to store objects, each of which having a plurality of attributes or properties associated with electronic mail messaging, such as a sender's name, the recipient's name, text messages, etc. Computing device  executes PIM  to maintain objects stored in store , and mobile device  executes program  to maintain objects stored in object store . In one illustrative embodiment, each object in object store  comprises the same set of properties or attributes stored in object store , or a subset of those properties or attributes.","Similarly, application programs  and  maintain objects on associated object stores  and , respectively. In one illustrative embodiment, application programs  and  are file system applications, such as those available under the commercial designation \u201cMICROSOFT WORD\u201d. It should also be noted that any suitable number of other application programs, and associated object stores, can be provided on mobile device  and computing device . However, for the sake of simplicity, only programs , ,  and , and their associated object stores, are described herein.","In one illustrative embodiment, the user desires to synchronize object stores  and  and object stores  and . Thus, there are two instances of each object associated with the pair of object stores  and  (one instance in object store  and one instance in object store ) and two instances of each object associated with the pair of object stores  and  (one instance in object store  and one instance in object store ). When a user changes one instance of the object stored in either object store  or , the second instance of that object in the other of stores  and  is out of sync and is desirably updated the next time mobile device  has two-way communication with computing device , so that both instances of the same object contain synchronized data. The same is true for instances of objects stored in object stores  and .","In order to accomplish synchronization, synchronization components  and  run on mobile device  and computing device , respectively. The synchronization components communicate with application programs , ,  and  (or directly with the associated object stores) through any well defined interfaces to manage communication and synchronization.","Synchronization components  and  communicate with each other through communication links  and . Communication links  and  are illustratively commercially available communication links using a suitable communications protocol. For instance, in one illustrative embodiment, mobile device  is connected to computing device  with a physical cable which communicates using a serial communications protocol. Other communication mechanisms are also contemplated by the present invention, such as infrared (IR) communication, direct modem communication, remote dial-up-networking communication, communication through commercially available network cards (i.e., using TCP\/IP), remote access services (RAS), wireless modem, wireless cellular digital packet data (CDPD), short message services or other suitable communication mechanisms. Although the communication links are shown as being internal to mobile device  and computing device , those skilled in the art will recognize that portions of the communication links exist outside of the devices. For example, the communication links can include communication servers located between mobile device  and computing device , other portions of the network forming the communication link (such as the cellular and PSTN networks) and adapters such as mobile device cradles.","Prior to discussing the synchronization process and associated mechanisms in greater detail, the present discussion proceeds with respect to a more detailed description of the components of mobile device  and an example computing device  for the sake of clarity.","Computing device  is only one example of a suitable computing device and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should computing device  be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary computing device .","The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, telephony systems, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general-purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer , which can include mobile device . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. In addition, the network connections between any of the nodes in the network may include direct cable connections or wireless connections and the connection between computer  and remote computer  may include any number of nodes and\/or routers.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Dynamically linked libraries (DLLs), comprising a plurality of executable functions are associated with PIM  and application  for execution by processor . Interprocessor and intercomponent calls are facilitated preferably using the component object model (COM) as is common in programs written for Microsoft \u201cWINDOWS\u201d brand operating systems. Briefly, when using COM, a software component such as a DLL has a number of interfaces. Each interface exposes a plurality of methods, which can be called individually to utilize different services offered by the software component. In addition, interfaces are provided such that methods or functions can be called from other software components which optionally receive and return one or more parameter arguments.","In general, the DLLs associated with PIM  and program  are designed specifically to work in conjunction with PIM  and program  and to expose desktop synchronization interfaces that function according to a synchronization protocol. The DLLs, in turn, call interfaces exposed by PIM  and program  in order to access data representing individual properties of objects maintained in object stores  and . Object stores  and , of course, can reside in any one of the suitable memory components described with respect to .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 3"],"b":["12","12","300","302","304","302","304","304","302","300"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 4"],"b":["12","12","402","404"]},"It should be noted that the displays  and  for the mobile devices shown in  can be the same size as one another, or different sizes from one another, but would typically be much smaller than a conventional display used with a desktop computer. For example, displays  and  shown in  may be defined by a matrix of only 240\u00d7320 coordinates, or 160\u00d7160 coordinates, or any other suitable size. When mobile device  is a pager, the display may be even smaller.","The mobile device  shown in  also includes a number of user input keys or buttons (such as button ) which allow the user to scroll through menu options or other display options which are displayed on display , or which allow the user to change applications or select user input functions, without contacting display .","Note that other forms of the mobile device are possible under the present invention. Examples include mobile phones that are capable of performing computing tasks, tablet PCs and wireless-enabled lap-top computers, to name a few.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5","b":["12","12","506","508","510","26","12","516"]},"Memory  is illustratively implemented as nonvolatile electronic memory such as random access memory (RAM) with a battery back-up module (not shown) such that information stored in memory  is not lost when the general power to mobile device  is shut down. A portion of memory  is illustratively allocated as addressable memory for program execution, while another portion of memory  is optionally used for storage, such as to simulate storage on a disc drive.","Memory  can include operating system , one or more application programs (such as PIM  and file application , etc.), as well as object stores  and  and sync engine . During operation, operating system  is illustratively executed by processor  from memory . The operating system  implements features which can be utilized by PIM  and file application  through a set of exposed application programming interfaces and methods. The objects in object stores  and  are illustratively maintained by PIM , file application  and operating system , at least partially in response to calls to the exposed application programming interfaces and methods.","I\/O components , in one embodiment, are provided to facilitate input and output operations from a user of mobile device . I\/O components  for various embodiments of mobile device  can include input components such as buttons and touch sensors and output components such as a display, a speaker, and\/or a printer port, etc.","Communication link  is any suitable communication interface. Interface  is illustratively used to communicate with computing device  as described with respect to . Memory  includes a set of communication drivers  that interact with communication link  and that translate data to and from the appropriate communication protocol necessary to allow for communication across link .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 6","FIG. 6"],"b":["26","520","26","602","604","606","608","610","612","614","616","618","620","520","602","612","604","612","606","616"]},"Wireless network port  and wireless network driver  provide communication to a network over a radio channel. Wireless network port  and driver  can use any number of wireless network protocols including General Packet Radio Service (GPRS) and 1Xrtt, which are wireless services used to provide cellular access to a network, as well as 802.11 and 802.11b (Wi-Fi) protocols, and Bluetooth\u2122 protocol, which provide local wireless connections to networks. Of course, others can be used as well.","SMS port  and SMS driver  support one-way communication using the Short Message Service protocol. Thus, SMS port  is able to receive SMS messages that are broadcast using the radio spectrum.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["24","12","36","14","24","12","740","744","746","744","20","746","22"]},"Sync engine  on computing device  also includes a synchronization manager  coupled to an associated reference store  and also coupled to application programs, including PIM sync provider  and file sync provider . PIM sync provider  is coupled to PIM object store , and file sync provider  is coupled to file object store . While providers , ,  and  are shown coupled directly to associated object stores, those providers could also be coupled to the object stores through the application programs , ,  and  instead. However, for the sake of simplicity, the present discussion proceeds only with respect to the arrangement shown in .","Sync providers  and  expose application programming interfaces (APIs)  which can be called by sync manager  to read and store objects and object properties on object stores  and . The interfaces  generally allow the creation of data bases for different types of objects, and allow application programs to read and write property names and values to and from respective objects within each data base. A number of exemplary interfaces are now described, but form no part of the invention and are discussed for purposes of example and completeness only.","The interfaces are well documented as the IReplStore, and IReplObjHandler interfaces. Each of these interfaces exposes a number of well documented methods. For example, the IReplStore interface exposes 22 methods which can be generally classified as methods which are used to access and modify the data store, methods used for object enumeration, methods used to obtain object information, methods used to manipulate handles to objects, methods used for user interface functions, and a number of miscellaneous methods. The IReplObjHandler interface exposes methods which are used to serialize objects by turning an object into a series of bytes, and to deserialize objects by turning the series of bytes back into an object. The methods included in the interface are also used to delete an object from the corresponding object store.","Sync manager , in turn, exposes a well documented interface known as the IReplNotify interface to providers  and . This interface exposes four well documented methods which are used to notify sync manager  of any change or deletion made to an object in a corresponding object store, to set text to be displayed in a status bar where synchronization status can be observed by the user, to obtain a window handle which is used as a parent window of any modal dialogue or message box, and to obtain information about a mobile device which has been selected, or which is connected to the computing device.","Each of the providers  and  are implemented to specifically work in conjunction with a particular application program  or , respectively. In general, because the application program interface (API)  is standardized, it allows synchronization manager  to access and synchronize any number of different application programs, as long as the required interface methods are implemented for each application by corresponding providers.","On mobile device , providers  and  also provide the well documented IReplObjHandler interface such that objects in the associated object stores  and  can be serialized and deserialized. Providers  and  also illustratively implement three additional functions which can be used to initialize and terminate the provider, to handle object identification and change detection, and to retrieve device information about a particular object type. These functions and interfaces are also well documented.","Synchronization manager  manipulates reference store  to maintain a mapping between instances of objects stored in object stores  and  on computing device  and instances of the same objects stored in object stores  and  on mobile device . Objects are identified by handles which are created by providers  and . The handles are opaque to synchronization manager , in that synchronization manager  need not be concerned with the actual composition of the handles although the handles are manipulated and stored by synchronization manager .","Generally, in order to maintain the mapping, synchronization manager  maintains reference store  so that it contains handles corresponding respectively to a plurality of objects in the object stores  and  on computing device  which are to be synchronized with instances of the same objects in object stores  and  on mobile device . The handles in reference store  will typically correspond to objects that have been previously synchronized between the various object stores. The handles are updated after their corresponding objects have been synchronized.","The list of handles maintained in reference store  is also used to determine which items need to be synchronized to mobile device  the next time mobile device  is connected to computing device . In making this determination, synchronization manager  also determines whether objects have been added to or deleted from the object stores so that appropriate additions and deletions can be made.","The handles stored in reference store  may be formatted in accordance with the following criteria so that the synchronization providers  and  can perform the specified functions:","(a) Each handle may contain data that uniquely identifies an object\u2014such as an object identifier, an ID number, a full pathname for a file system object, etc. This data may be persistent (in that it does not change for a particular object) and should not be reused for subsequently created objects. This data can be compared to determine whether two handles actually correspond to the same object. As is discussed below, this can be problematic for file system information, because the object identifier is typically the pathname, and can be changed simply by renaming the file.","(b) It may be possible to derive some object order based on the handle.","(c) The handle may have some sort of time stamp information, or version number. This information can be compared to determine whether an object has changed since the last handle was recorded in reference store .","These handles are provided from providers  and  to synchronization manager , for storage in reference store , during an enumeration process which is described below. This enumeration process is used to detect items which need to by synchronized when mobile device  is next coupled to computing device .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIGS. 8A and 8B","b":["36","750","860","748","862","750","864","752","754","32","34","752","754"]},"By comparing the list of handles returned by the current enumeration with the saved list of handles loaded from reference store , synchronization manager  automatically detects changes and deletions. For example, each time a new object is returned during enumeration, synchronization manager  attempts to find an object in its previously saved list of objects which represents the same object. If no matching handle is found, synchronization manager  determines that a new object has been created and saved on the object store which enumerated the object under consideration. In order to determine whether matching handles are found, as is indicated by block , synchronization manager  calls the interface method IReplStore::CompareItem.","Based on a comparison of the handles, synchronization manager  creates any necessary handle-to-object mappings in reference store  such that objects in the object stores on computing device  can be mapped to corresponding instances of the same object on device . This is indicated by block .","Synchronization manager  also determines whether any objects have been added, deleted, or modified in the particular object store from which they were enumerated. This is indicated by blocks . For example, if the list of objects which were previously synchronized contains a handle that is not found in the newly created list based upon a current enumeration of synchronization providers -, that indicates that the object has been deleted from the corresponding data store , . Thus, synchronization manager  determines that the object must also be deleted from the mobile device  during the next synchronization operation.","Similarly, if the enumeration of objects produces an object handle which does not occur in the list of objects previously synchronized, then synchronization manager  determines that an object corresponding to that particular handle has been added to the object store which enumerated the object. Thus, during the next synchronization operation, the object must be added to mobile device .","Synchronization manager  also calls the interface method IReplStore::IsItemChanged with matching handles from the first and second lists. Calling this interface causes the appropriate provider  or  (whichever enumerated the matching handle) to determine whether the object has changed since its handle was last written to reference store . In one illustrative embodiment, the provider examines the time stamp information or version number information associated with the object handle. If that information is not identical, that indicates that there has been a change to the object. Thus, during the next synchronization process, synchronization manager  must update the corresponding object on mobile device  (assuming there is no conflict as discussed below).","Synchronization manager  on mobile device  also interacts with synchronization providers  and  to determine whether any objects on object stores  and  have been added, deleted, or changed since the last synchronization process. On mobile device , the operating system posts a message to synchronization manager  every time an object on mobile device , which is to be synchronized, changes, is added, or is deleted. Synchronization manager  enumerates each object and calls methods in the IreplNotify interface of each provider  and . Based on this call, the provider determines whether the particular object enumerated is to be synchronized and indicates to synchronization manager  how many objects are to be synchronized (for example, a file system object, such as a directory, actually contains more than one object which is to be synchronized).","Based on the notifications posted from the operating system, synchronization manager  maintains a list, or array, of objects which have changed, been deleted, or added since the last synchronization process. Upon connection to computing device , this list is provided to synchronization manager . Thus, synchronization manager  contains the lists which have been constructed for both desktop  and mobile device  which indicate objects which need to be synchronized. This is indicated by block  in .","Synchronization manager  then determines, as indicated at block , whether an object has changed only on mobile device , only on computing device , or on both mobile device  and computing device . If the object has changed only on one of the desktop object stores, then synchronization manager  carries out the necessary activity to update the corresponding object store on the mobile device. This is indicated by block . If the object has changed only on one of the mobile device stores, then synchronization manager  carries out the necessary activities to update the corresponding object store on the computing device . This is indicated by block .","However, if the same object has changed on both mobile device  and computing device , then a conflict situation arises. In one illustrative embodiment, synchronization manager  makes a call to the registry in the operating system of computing device  to obtain conflict information which instructs synchronization manager  how to proceed in the face of a conflict. This is indicated by block . For example, the user may have set preferences which indicate that, in the case of a conflict either the desktop computer version, or the mobile device version should take precedence every time. Similarly, the user may have set a preference which indicates that the user is to be notified in the case of a conflict so that the user can actively decide which version will take precedence. In that case, synchronization manager  generates a user interface allowing the user to resolve the conflict. Synchronization manager  then takes the necessary steps to resolve the conflict and update the appropriate object store. This continues until all objects in the lists of objects to be synchronized have been dealt with. This is indicated by block .","In order to exchange objects with mobile device , synchronization manager  continually calls the method IReplObjHandler:GetPacket to have an appropriate provider  or  obtain a packet of information to be transmitted to mobile device . To handle a packet received from mobile device , synchronization manager  calls IReplObjHandler::SetPacket. This acts to provide a packet of information received from mobile device  to a synchronization provider  for storage on its associated object store. Similar interfaces are called by synchronization manager  on mobile device .","In order to process electronic mail messaging, the system shown in  (and described in greater detail with respect to ) can perform a number of features in order to accommodate the relatively limited and expensive bandwidth associated with wireless transmissions. For example, in one embodiment, computing device  sends electronic mail messages of only a predetermined length to the mobile device . In such an embodiment, a user can optionally select a predetermined number of lines of text in the main message body which the user wishes to receive. This is indicated to computing device . Thereafter, when computing device  receives an electronic mail message which is to be transmitted (through the synchronization protocol or otherwise) to mobile device , computing device  truncates the message body to the predetermined number of lines and sends the truncated electronic mail message to mobile device . When the user reviews the truncated electronic mail message, the user can select that message for a complete download, in which case computing device  downloads the entire message body to mobile device  so that the user can review the entire message.","In the past, in order to forward, or reply to, a truncated electronic mail message, the user could simply enter the forward or reply comments, as is conventional, and send the message. In that case, the truncated message was transmitted to computing device (again through the synchronization protocol or otherwise) and was forwarded to the recipients indicated by the user in the reply or forwarded message. If the user wished to forward the entire message, then the user was first required to mark the entire message for a complete download and have the entire text body downloaded to the mobile device from device . The user could then reply to, or forward, the entire mail message, along with the reply or forwarding comments. The reply or forward would then be transmitted back to computing device  and on to the eventual recipients.","The same general framework also existed for attachments. In other words, the user could designate whether attachments were to be sent to the mobile device  in the first instance. If not, then in order to forward the message along with attachments, or reply to the message including the attachments in the reply, the user was first required to mark the attachments for download to the mobile device, then respond to the fully downloaded electronic mail message (including attachments).","As can be seen, this technique uses an undesirable amount of bandwidth. There are many instances in which the user may wish to forward the full original electronic mail message, including attachments, to a recipient, or the user may wish to reply to the message, including the full original electronic mail message (the entire textual body and attachments). However, in such instances, the user may well not need to review the full original electronic mail message prior to replying to it or forwarding it. Therefore, by requiring the user to download the entire electronic mail message (text body and\/or attachments) to the mobile device  when they are unneeded, and then requiring the mobile device  to re-transmit the entire electronic mail message back to computing device  (before it is sent to the correct recipients) utilizes an undesirably large amount of wireless bandwidth, and also requires unnecessary steps on the part of the user.","In accordance with one embodiment of the present invention, the user of mobile device  can send replies to truncated electronic mail messages and yet still send the entire body of the original message, without having to download it locally to the mobile device  and then re-transmit it in its entirety back to device . The same technique is used, in accordance with another embodiment of the present invention, with attachments which were attached to the original electronic mail message.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 9","FIG. 10"],"b":["12","901","14","901","903"]},"It will first be assumed that the user has received a truncated electronic mail message on mobile device . By truncated electronic mail message, it is meant that the original electronic mail message is received on mobile device  either with a truncated message body, or with attachments that have been truncated, or without attachments, or a combination of these.","In order to forward or reply to the original truncated electronic mail message, but where the reply or forwarded message includes some or all of the original message in non-truncated form (such as with attachments or with the full message body or both), the user first selects a smart response mode. This is indicated by block  in . This can be accomplished in any of a wide variety of ways. For example, when replying to, or forwarding, a truncated electronic mail message on the mobile device , the user interface generated on the mobile device  can include a simple checkbox which the user can check in order to operate in the smart response mode. Any of a wide variety of other known ways can be used to implement the smart response features as well. Also, the smart response mode can occur automatically with no user input required.","When the user has selected to operate in the smart response mode, the user selects the truncated message for forwarding or for replying. This is indicated by block . Next, the user forwards or replies to the original truncated message as indicated by block . This is illustratively accomplished in a known manner, such as by simply entering the reply message or forwarding comments, and then selecting a send option on the user interface to send the forwarded electronic mail message or reply.","As the mobile device  sends the message to synchronization server  (through synchronization or otherwise), it includes in its header an identity of the original electronic mail message stored on electronic mail server  (or which is stored on PIM object store  on computing device  in the embodiment shown in ). It also includes in the header information an indication that the user has selected to operate in the smart response mode. This is indicated by block  in .","Having received these indications, the server  fetches the original electronic mail message identified by the message ID in the header information from a data store on electronic mail server  (or computing device  accesses the PIM object store  to retrieve the original electronic mail message). The synchronization server  then generates a complete message based on the message received from mobile device  and the entire original electronic mail message (with or without attachments as selected by the user) and sends the complete message to the electronic mail server  to the appropriate recipient. This is indicated by block  in .","Generating the complete message can be done in a number of ways. For example, in one illustrative embodiment, server  takes the reply electronic mail message, or the forwarded electronic mail message, from mobile device  and attaches to that message the original electronic mail message, and attachments, which have been retrieved from electronic mail server  (or PIM object store ). Therefore, the eventual recipient of the reply or forwarded message can view the entire original message as well.","In another embodiment, server  creates a new electronic mail object based on the reply or forwarded message received from mobile device , and also based on the retrieved original electronic mail message which was retrieved from server  (or PIM object store ). The new electronic mail object contains not only the comments or reply entered by the user of mobile device , but also the entire original mail message.","In yet another embodiment, server  can simply modify the electronic mail message object it received from mobile device  by replacing the truncated text message with the entire text message found in the original electronic mail message retrieved from PIM object store . Of course, computing device  can also attach the original attachments before sending the electronic mail message object on to the eventual recipient.","Of course, other embodiments can be used as well. For example, server  can simply attach the textual body of the original message retrieved from server  as an attachment to the message received from mobile device .","It should also be noted that the present invention can be implemented on either replies to truncated messages, forwarding of truncated messages, or both, as desired. This can be selectable through a suitable user interface, or it can be automatically set when the device is manufactured.","It should also be noted that it may sometimes be acceptable to lose part of a message body in simple round-trip replies between electronic mail recipients. However, it can be important to maintain the entire electronic mail message body in reply threads to which new recipients are added, from time to time, to ongoing electronic mail conversations. The present invention allows the user to send comments along with the text version of the original mail without requiring the user to download the entire message to the mobile device  and then re-transmit it back to the computing device .","Other operational features can be used as well. For example, if the user edits any portion of the truncated message, then the server may optionally simply send the reply or forwarded message that includes the edited truncated portion, without attaching the original message. This is, of course, optional.","Although the present invention has been described with reference to preferred embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 3"],"b":"4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 2","FIGS. 3-5"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
