---
title: Virtual testing environments
abstract: In one aspect, a first request is received at a configuration server for access to a first virtual test environment. The first request is received from a first client device over a network and specifies one or more configuration options associated with the first virtual test environment. It is determined that a user of the first client device belongs to a first group out of multiple groups. A first pool of resources is selected based on the user of the first client device belonging to the first group, wherein the first pool of resources are available to members of the first group but not available to members of a second group out of the multiple groups. A first virtual machine is provisioned using the selected first pool of resources that includes the first virtual test environment, the first virtual test environment including features associated with the one or more configuration options associated with the first virtual test environment. The first client device is provided access to the first virtual test environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769102&OS=08769102&RS=08769102
owner: Google Inc.
number: 08769102
owner_city: Mountain View
owner_country: US
publication_date: 20110523
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Patent Application Ser. No. 61\/347,354, filed on May 21, 2010 and entitled \u201cVirtual Testing Environments.\u201d U.S. Provisional Patent Application Ser. No. 61\/347,354 is hereby incorporated by reference as if set forth herein in full.","This document relates to virtual testing environments.","A user wishing to test a software application in a variety of testing environments may obtain and set-up a number of physical computing resources, such as multiple physical computing devices, to run multiple local testing environments.","In one aspect, a first request is received at a configuration server for access to a first virtual test environment. The first request is received from a first client device over a network and specifies one or more configuration options associated with the first virtual test environment. It is determined that a user of the first client device belongs to a first group out of multiple groups. A first pool of resources is selected based on the user of the first client device belonging to the first group, wherein the first pool of resources are available to members of the first group but not available to members of a second group out of the multiple groups. A first virtual machine is provisioned using the selected first pool of resources that includes the first virtual test environment, the first virtual test environment including features associated with the one or more configuration options associated with the first virtual test environment. The first client device is provided access to the first virtual test environment.","Aspects may include one or more of the following features.","A second request is received at the configuration server for access to a second virtual test environment, the second request being received from a second client device over a network and specifying one or more configuration options associated with the second virtual test environment. It is determined that a user of the second client device belongs to the second group. A second pool of resources is selected based on the user of the second client device belonging to the second group, wherein the second pool of resources are available to members of the first group and to members of the second group. A second virtual machine is provisioned using the selected second pool of resources that includes the second virtual test environment, the second virtual test environment including features associated with the one or more configuration options associated with the second virtual test environment. The second client device is provided access to the second virtual test environment.","Provisioning the second virtual machine includes determining whether a threshold level of resources in the second pool is available to provision the second virtual machine.","The second request is added to a queue of requests if the threshold level of resources in the second pool is not available to provision the second virtual machine.","Access to the first virtual machine is terminated after expiration of a first allowed access time, the first allowed access time specifying a length of time for which the first client device may access the first virtual machine. Access to the second virtual machine is terminated after expiration of a second allowed access time specifying a length of time for which the second client device may access the second virtual machine. The first allowed access time is longer than the second allowed access time as a result of the first user belonging to the first group and the second user belonging to the second group.","Providing the first client device access to the first virtual test environment includes forwarding, to the first client device, a port associated with the first virtual machine, an internet protocol address associated with the first virtual machine, or a machine name associated with the first virtual machine.","Provisioning the first virtual machine includes instructing a virtual machine host to boot a virtual machine based on an image that corresponds to the configuration options.","The images are stored on the virtual machine host.","Implementations of the variously described techniques may have one or more advantages, such as reducing or eliminating the number of computing resources needed by a given entity to implement a number of testing environments. In some instances, this may reduce the cost and\/or time associated with maintaining such testing environments, and thus the costs of developing software application.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings, and from the claims.","In some examples, a user of client device might desire to test a client application (or other type of software application) on one or more system configurations (e.g., combinations of an operating system, browser type, central processing unit (CPU) type, and languages, such as English or French). Rather than requiring local access to one or more machines having the desired configuration, the following describes techniques that may provide virtual testing environments. In some cases, providing such virtual test environments may reduce a developer's costs in terms of the number of machines that the developer must maintain, and with regard to the amount of software that the developer must possess in order to set up computing systems in the necessary configurations.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","102","102","100","100","102","104","104"]},"The system  includes a client device  that is connected over a network (e.g., the Internet ) to a configuration server . The client device  can communicate across the Internet  using communication protocols such as, for example, one or more of Transmission Control Protocol\/Internet Protocol (TCP\/IP), Hypertext Transfer Protocol (HTTP), Secure Shell Remote Protocol (SSH), or Application Program Interfaces (API). While only a single client device  is shown, there can be multiple client devices communicating across the Internet  with the configuration server , or other services or devices. The client device  implements a client application  by executing instructions on one or more processing devices. In some implementations, the client application  may be implemented by more than one client device. In some implementations, the client application  may be implemented as a web browser that accesses and displays the web UI  of provided by the configuration server  to provide a developer with access to one or more virtual testing environments.","The configuration server  communicates over a network  to one or more data centers , , and . The data centers -can be a single computing system or a facility used to house multiple computer systems and associated components, such as telecommunications and storage systems. The data centers -may also include redundant or backup power supplies, redundant data communications connections, environmental controls (e.g., air conditioning, fire suppression), and security devices. In some examples, the configuration server and one or more data centers are co-located.","The data centers -house one or more virtual machine hosts , , and , which are each capable of hosting one or more virtual machines -. In some implementations, the virtual machine hosts , , and are implemented as physical machines, or as software running on physical hardware. The virtual machine hosts , , and are managed by respective lab managers , , and (otherwise referred to as \u201cvirtual machine managers\u201d), which can be implemented as hardware, software, or a combination thereof. In some examples, if the virtual machines hosts are physical machines, the lab managers can run on the virtual machine host machines, or can run on a separate physical machine (e.g., another machine within a datacenter).","In some examples, virtual machines -are environments, such as a program or operating system, that do not physically exist, but are instead created within another environment. In this context, a virtual machine is sometimes referred to as a \u201cguest\u201d while the environment it runs within is called a \u201chost\u201d (e.g., virtual machine host -). In general, virtual machines -may be created to execute an instruction set different than that of the host environment. Because the virtual machines -are separated from the physical resources that they use, the virtual machine hosts -may be able to dynamically assign those physical resources among the virtual machines -. A virtual machine may emulate the behavior of a physical computer, and may contain its own virtual (software-based) CPU, physical memory (e.g., random access memory (RAM)) hard disk, and network interface card (NIC).",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["100","200","112","200","112","200","108","110","116","204","204","204","204","114","116","113","114","113","112","110"],"i":["a","a ","a","c ","a","b","c","a","c ","a ","a","c","a ","a","a ","a "]},"For example, once the virtual machine has loaded image 1 , the virtual machine can function as a software-based representation of a physical machine that is configured according to the parameters stored in the image , such as various operating systems, internet browsers, languages, CPUs, memory arrangements, and other programs, settings, and other parameters.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIGS. 5 and 6","FIGS. 5 and 6"],"b":["300","300","200","300","300","108","102","104","108","302","102","108","102","304","109","108"]},"After the configuration server  has received the request, the configuration server will determine which (if any) configuration options have been specified in the request (, ). In some examples, this determination can include comparing the selected configuration options to a list of configuration options that can be provided by the lab manager . The determination can also include checking both the request and its contents for errors.","Then configuration server  determines whether sufficient resources are available to service the request (). For example, in order to provide a client device  with a virtual testing environment, the configuration server  may first determine whether the virtual machine host contains any free \u201cslots\u201d (e.g., by determining whether the virtual machine host is capable of hosting an additional virtual machine (e.g., because there are a threshold level of computing resources available), or whether the virtual machine host can reboot an unused virtual machine -with an image that satisfies the configuration options specified in the request). In some examples, the configuration server  may determine whether resources are available to support an additional virtual machine by querying one or more lab managers and\/or virtual machine hosts to determine usage levels, or by referring to an internal database that tracks the availability and\/or usage of computing resources. In some examples, there are insufficient computing resources available to service the request. In those cases, different forms of queue management  can be implemented in order to service the requests fairly and efficiently. An exemplary queue management technique will be described in greater detail below with reference to .","After it has been determined that sufficient resources exist to service the request, the configuration server instructs lab manager to provision a virtual test environment that satisfies the request. In order to provision a test environment that satisfies the request, the lab manager loads or reboots in the virtual machine host an image that corresponds to the configuration options specified in the request (). For example, if the client device issues a request that requires a virtual test environment that includes the Windows XP\u00ae, operating system, the Google Chrome\u00ae web browser, and an Intel\u00ae CPU, the lab manager will boot a virtual machine on the virtual machine host from an image that corresponds to the specified requirements. The loading process may involve the lab manager rebooting an existing virtual machine from an appropriate image, and is sometimes referred to as the \u201cimaging\u201d process. The imaging process may include communications between the lab manager and the virtual machine host and\/or the virtual machines using the Secure Shell (SSH), Dynamic Host Configuration Protocol (DHCP), the Bootstrap Protocol (BOOTP), Trivial File Transfer Protocol (TFTP), Network File System (NFS).","After a virtual machine has been booted (or rebooted) with the appropriate image, the virtual machine host notifies the lab manager that the operation has been completed. Identifying information is assigned to the virtual machine (). The identifying information includes, for example, a machine name, an internet protocol address, or port information. The lab manager can assign and retrieve identifying information by exchanging messages with the virtual machine host and\/or the virtual machines using the protocols identified above. In some examples, the identifying information can be dynamically assigned to virtual machines.","When the virtual machine hosting the requested virtual test environment is ready for use, the lab manager is notified, and the identifying information associated with that virtual machine is passed to the configuration server . The configuration server can then provide access to the virtual machine to the client device . The configuration server can provide access to the virtual machine to the client device by, for example, forwarding, to the client device, a port associated with the virtual machine, an internet protocol address associated with the virtual machine, or a machine name associated with the virtual machine to the configuration server.","After the client device  has received access to the virtual machine hosting the requested virtual test environment, the client device  (and any applications thereon) can run experimental applications in the test environment to evaluate the application's performance in that particular environment. For example, if a user of the client device  wishes to test a web-based application in an environment that includes the Windows XP\u00ae, operating system, the Google Chrome\u00ae web browser, and an Intel\u00ae CPU, the user can install the application in the virtual test environment, execute the application, and evaluate its performance during use. Applications can be installed and executed on the virtual test environment using, for example, a command line interface, APIs, or by generating a web based UI on the client device  in which the user can manually carry out test procedures. The API and command line interfaces can be accessed by an application without human intervention. The web UI can include a graphical representation of a computing environment (e.g., a \u201cdesktop\u201d) on the client device that can be manipulated to control the virtual test environment. The web UI can also displays the application as it is running and allow a user to interface with the running application in the environment.","In some examples, a collection of images is stored on a physical machine that is, or includes, the virtual machine host and can be loaded upon request. In some cases, this storage arrangement may minimize delay that may be associated with arrangements that, for example, store a variety of images on a central server that need to be transferred to a virtual machine host upon request. In some examples, virtual machines based on commonly requested images can be left running on the virtual machine host before a request for that virtual machine is even received. That is, once a request is received, a user may simply be provided access to a virtual machine that is already loaded and running on the virtual machine host.","In some examples, users (including administrators of the virtual test environment service) can provide their own locally stored images to the virtual machine hosts. In this way, users are able to boot virtual machines from their own custom images. This technique can be enabled by allowing users to provide the lab manager or configuration server with a file path that identifies the location of the locally stored image, either through a web user interface (described below) or by allowing an application  running on the client device  to automatically specify the location of the image using an application programmable interface. The provided image may be stored locally on the client device , in which case the client application , potentially in conjunction with the web UI , may upload the image to configuration server. In other instances, the provided image may be remotely stored on another device (for example, the image may be stored in a hosted, or cloud-based, storage service that is accessible across the Internet ). In this case, an identifier of the location of the image (for example, a Uniform Resource Locator (URL)) may be provided to the configuration server  and the configuration server , or another device, may retrieve the image from the remote storage.","Once the user's own image has been made available to the lab manager, error checking can be performed on the image to ensure that the image contains bootable data. For example, the lab manager (or other entity) might scan the image to determine whether the file size exceeds a threshold, whether the image contains data that in an undesirable format, or whether the image contains any viruses or other harmful applications or data.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 4","FIG. 5"],"b":["400","109","108","400","102","106","402","400","406","400","404","402","404"]},"The user interface  contains a Request Machine pane  that includes a number of different configuration options associated with requesting a virtual test environment. In the example of , the Request Machine pane  includes various configuration options such as operating system , browser , and language . Any number of configuration options can be provided, such as the aforementioned \u201cCPU\u201d configuration option that allows a user to select a particular CPU to be emulated by the virtual machine. The operating system option  allows a user to choose an operating system for the virtual test environment. While in this example, the operating system can be selected from a group of operating systems consisting of Windows XP\u00ae, Windows XP SP2\u00ae, Windows 2000\u00ae, and Mac OS 10\u00ae, any operating system can be included in the group. Similarly, the browser and language options allow users to select further configuration options from groups consisting of various browsers and languages, respectively.","After a user has selected his desired configuration options, the user can elect to activate the request icon  or the clear icon . Activating the request icon  will cause the request to be submitted to the configuration server , which begins the process of provisioning a virtual test environment. Activating the clear icon  causes the selected menu options to be cleared, allowing the user to begin selecting options from the groups , ,  once again.","In some examples, configuration options previously or commonly requested by a user can be stored in easily selectable snapshots. For example, if a user wanted to provision a virtual test environment having the Windows XP SP2\u00ae, operating system and the Google Chrome\u00ae browser, those configuration options could be requested upon user selection of a \u201cpackage\u201d of configuration options. These packages can be made available on the user interface by administrators of the web user interface, or can be dynamically generated based upon a user's request history. For example, if a user previously requested a virtual test environment having the Windows XP\u00ae, operating system and the Google Chrome\u00ae browser, the user interface could enable the user to request that same configuration again (e.g., with one click) by displaying the user's recent configuration selections.","Users can also specify how long they wish to have access to a requested virtual test environment, or can simply accept the default duration of, for example, twenty-four hours. If a user wishes to maintain access to a virtual test environment for a period of time longer or shorter than the default period, the user may be required to submit information that can be verified by administrators of the virtual test environment service. For example, a user may be required to submit the name of his company and the reasons for requesting a longer or shorter duration. Similar default limits can be associated with other aspects of the virtual test environment requests, such as limits on the number of virtual test environments that a user may request over a given period of time.","Referring to , once a client device has established one or more sessions on virtual test environments, a user interface  hosted by the configuration server  can be accessed by a user in order to manage the sessions. The user interface  can be a web page accessed using a web browser . The user interface  shows the \u201cMy Machines\u201d view , which can be access by, for example, clicking an icon associated with the view with a cursor.","The user interface  includes a pane  that contains a table  and a release icon . The table  contains a number of rows - and columns - that represent the status associated with requests for a virtual test environment, as well as other information. For example, column  represents a request ID that can uniquely identify each request (e.g., by numbering the requests 0 to n). In some examples, such as that shown in , the request IDs can be assigned based on the time that the request was submitted, which is indicated in column . Column  identifies the name of the virtual machine associated with the request, while column  indicates when the session associated with a request is set to expire. The columns  and  represent configurations options for the virtual machine such as the type of operating system  and browser . As stated above, other configuration options are possible, and any number of configuration options can be represented by additional columns in the table . For example, columns can be added that show a language (e.g., English) or a CPU type associated with a particular virtual machine request.","As an example, row  represents a request for a virtual test environment. The request ID associated with this request is \u201c3,\u201d and the status column  indicates that the virtual test environment is READY. Column  indicates that the request was submitted on Apr. 24, 2010 at 15:45:45, and will expire on Apr. 31, 2010, as indicated by column . As shown in column , a virtual machine having the name Machine 1 has been provisioned to run the virtual test environment, and columns  and  indicate that the virtual test environment will operate with the Windows XP SP2\u00ae operating system and Internet Explorer 8\u00ae and Firefox browsers.","Column  may also indicate other statuses associated with requests. For example, while the requests represented by rows  and  have a status of READY, the requests represented by rows  and  are PENDING and CLOSED, respectively. The PENDING status indicates that the request has not yet been processed and therefore a virtual machine corresponding to the requested environment is not yet available, and the CLOSED status indicates that a client device has closed a session with a virtual machine (e.g., by successfully releasing the session as described below), or that the virtual machine has been made otherwise unavailable to the client device. Sessions having the CLOSED status can be made active again through a one-click process that allows a user to renew the session with the same configuration.","A user can release a session associated with a virtual machine in order to make the computing resources supporting that session available to other users. For example, a user could toggle the radio button  in row  to select the request having request ID 3, and then activate the release icon . These actions would trigger a release of virtual machine Machine 1, which would free computing resources in the virtual machine host. Once the resources have been released, a user waiting in queue could have his request for a virtual test environment serviced.","In some examples, applications can request virtual test environments and do not require the use of a web user interface. That is, a client application  running on a client device  can drive the provisioning of a virtual machine by, for example, executing batch scripts that automatically call for the provisioning of one or more virtual machines. This functionality can be enabled by exposing an application programming interface (API) supported, for instance, by the configuration server  or the lab manager . The API can be used by applications to send requests for virtual machines to the configuration server  or lab manager , as well as use virtual machines that have been provisioned in response those requests. Furthermore, a command line interface may be provided for sending requests for virtual machines, as well as using the provisioned virtual machines. Such a command line interface may be implemented to use the API.","By allowing a client application  to automatically call for the provisioning of a virtual test environment, applications can be tested without the need for a user to manually manage the set up and execution of each application. This can be especially useful in situations where a large number of virtual test environments are needed and in situations where new virtual test environments are frequently requested.","In one implementation, the configuration server  may implement a queue management process for handling requests. In some examples, there may not be sufficient computing resources to provide virtual test environments to all users that request access to such environments when the users request access. During such periods of high demand, the queue management process may handle the excess requests and may do so in a fair and efficient manner.  are examples of how virtual machines are reserved for or assigned to users.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 6","FIG. 7"],"b":["601","601","603","605","607","603","609","607","603","605","611","605","607","613","603","615","609","603","607","613","605","607"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 7","FIG. 2"],"b":["700","700","108","700","108","209","100","200"]},"Process  begins when the configuration server  receives  a request for a virtual test environment (e.g., from a client device ) (, ). The configuration server  then determines  whether sufficient resources exist to service the request (e.g., by querying one or more lab managers and\/or virtual machine hosts to determine usage levels, or by referring to an internal database that tracks the availability and\/or usage of computing resources) (). If the configuration server determines that sufficient computing resources exist to allow the request to be processed, the configuration server  begins processing the request in order to provide the requested virtual test environment (). If the configuration server determines  that there are insufficient computing resources to fulfill the request, the configuration server  caches the request in a list of requests (). In some examples, the list can be arranged in a first-in first-out (FIFO) format, such that requests are serviced based on how long they have been in queue (e.g., the first request serviced is the request that has been cached the longest, and so on). In some examples, priority can be given to particular requests based on group memberships, subscriptions, configuration options, or other factors.","In the example of , the configuration server  continues to attempt to service the oldest queued request (). The attempts to service the queued request can be periodic, or can be based on a trigger, such as receipt of a message indicating that computing resources have been released or have otherwise become available for use. In attempting to service the queued request, the configuration server can again attempt to determine whether sufficient computing resources are available to process the request (). If the available computing resources are still insufficient, the configuration server will continue to attempt to process the requests in the manner described above. If the configuration server determines that sufficient resources exist to process the request, the request is processed  (e.g., by provisioning and providing access to the virtual test environment specified in the request) ().","In some examples, users or client devices can have group memberships. Allowing users to be assigned to groups enables a number of different features. For example, members of a particular group may have prioritized access to resources.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 8","FIG. 8"],"b":["800","801","802","804","810","804","808"]},"Group membership also allows special rules to be created for virtual machines provisioned by members of a particular group. For example, while resources (e.g., virtual machines) can eventually be automatically reclaimed by the system after a set period of time (e.g., twenty-four hours), rules can be created that allow members of certain groups to maintain access to a provisioned virtual machine for a longer or shorter period of time. Members of certain groups might also have access to machines that have different levels of access to various services, networks, and systems than machines in the global default pool, and might be able to maintain access to a greater or smaller number of virtual machines.","The configuration server  may employ a number of functions that allow it to manage requests and connections. For example, the configuration server may be able to automatically expire and close requests according to a rule set, and can retry and reschedule requests that have failed. For example, if a request failed due to lack of available resources or due to an error, the configuration server  may be configured to detect such failures and either retry or reschedule the failed request. For example, the configuration server  can be configured to automatically re-attempt to provision a virtual machine based on a previously submitted request if that request did not succeed in provisioning a virtual machine. Furthermore, the configuration server  may also detect requests that have been orphaned (e.g., pending requests that no longer require servicing) and delete them using special service jobs.","In addition to cleaning up orphaned and failed requests, the configuration server can also provide tools for monitoring usage and tracking statistics related to the virtual test environments. These tools can include programs for visually displaying and characterizing data both historically and in real time.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIGS. 9A","b":["9","9","9"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 9A","FIG. 9B"],"b":["900","904","902","906","910","908","912","914"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 9C","FIG. 9C","FIG. 9D"],"b":["900","902","904","900","904","906","902"]},"While some of the visualization tools described above display data in graph form, any suitable visual organization of data can be used (e.g., line graphs, pie charts, charts, tables, and the like). Furthermore, audible alarms can be configured to sound upon the occurrence of an event relating to the data. Similar visualization tools can be made available to users of client devices that pertain to their own resource usage.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 10","b":["600","650","600","650"]},"The computing device  includes a processor , a memory , a storage device , a high-speed interface  connecting to the memory  and multiple high-speed expansion ports , and a low-speed interface  connecting to a low-speed expansion port  and the storage device . Each of the processor , the memory , the storage device , the high-speed interface , the high-speed expansion ports , and the low-speed interface , are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor  can process instructions for execution within the computing device , including instructions stored in the memory  or on the storage device  to display graphical information for a GUI on an external input\/output device, such as a display  coupled to the high-speed interface . In other implementations, multiple processors and\/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).","The memory  stores information within the computing device . In some implementations, the memory  is a volatile memory unit or units. In some implementations, the memory  is a non-volatile memory unit or units. The memory  may also be another form of computer-readable medium, such as a magnetic or optical disk.","The storage device  is capable of providing mass storage for the computing device . In some implementations, the storage device  may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. Instructions can be stored in an information carrier. The instructions, when executed by one or more processing devices (for example, processor ), perform one or more methods, such as those described above. The instructions can also be stored by one or more storage devices such as computer- or machine-readable mediums (for example, the memory , the storage device , or memory on the processor ).","The high-speed interface  manages bandwidth-intensive operations for the computing device , while the low-speed interface  manages lower bandwidth-intensive operations. Such allocation of functions is an example only. In some implementations, the high-speed interface  is coupled to the memory , the display  (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports , which may accept various expansion cards (not shown). In the implementation, the low-speed interface  is coupled to the storage device  and the low-speed expansion port . The low-speed expansion port , which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input\/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.","The computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server , or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as a laptop computer . It may also be implemented as part of a rack server system . Alternatively, components from the computing device  may be combined with other components in a mobile device (not shown), such as a mobile computing device . Each of such devices may contain one or more of the computing device  and the mobile computing device , and an entire system may be made up of multiple computing devices communicating with each other.","The mobile computing device  includes a processor , a memory , an input\/output device such as a display , a communication interface , and a transceiver , among other components. The mobile computing device  may also be provided with a storage device, such as a micro-drive or other device, to provide additional storage. Each of the processor , the memory , the display , the communication interface , and the transceiver , are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.","The processor  can execute instructions within the mobile computing device , including instructions stored in the memory . The processor  may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor  may provide, for example, for coordination of the other components of the mobile computing device , such as control of user interfaces, applications run by the mobile computing device , and wireless communication by the mobile computing device .","The processor  may communicate with a user through a control interface  and a display interface  coupled to the display . The display  may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. The display interface  may include appropriate circuitry for driving the display  to present graphical and other information to a user. The control interface  may receive commands from a user and convert them for submission to the processor . In addition, an external interface  may provide communication with the processor , so as to enable near area communication of the mobile computing device  with other devices. The external interface  may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.","The memory  stores information within the mobile computing device . The memory  can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. An expansion memory  may also be provided and connected to the mobile computing device  through an expansion interface , which may include, for example, a SIMM (Single In Line Memory Module) card interface. The expansion memory  may provide extra storage space for the mobile computing device , or may also store applications or other information for the mobile computing device . Specifically, the expansion memory  may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, the expansion memory  may be provide as a security module for the mobile computing device , and may be programmed with instructions that permit secure use of the mobile computing device . In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.","The memory may include, for example, flash memory and\/or NVRAM memory (non-volatile random access memory), as discussed below. In some implementations, instructions are stored in an information carrier. that the instructions, when executed by one or more processing devices (for example, processor ), perform one or more methods, such as those described above. The instructions can also be stored by one or more storage devices, such as one or more computer- or machine-readable mediums (for example, the memory , the expansion memory , or memory on the processor ). In some implementations, the instructions can be received in a propagated signal, for example, over the transceiver  or the external interface .","The mobile computing device  may communicate wirelessly through the communication interface , which may include digital signal processing circuitry where necessary. The communication interface  may provide for communications under various modes or protocols, such as GSM voice calls (Global System for Mobile communications), SMS (Short Message Service), EMS (Enhanced Messaging Service), or MMS messaging (Multimedia Messaging Service), CDMA (code division multiple access), TDMA (time division multiple access), PDC (Personal Digital Cellular), WCDMA (Wideband Code Division Multiple Access), CDMA2000, or GPRS (General Packet Radio Service), among others. Such communication may occur, for example, through the transceiver  using a radio-frequency. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, a GPS (Global Positioning System) receiver module  may provide additional navigation- and location-related wireless data to the mobile computing device , which may be used as appropriate by applications running on the mobile computing device .","The mobile computing device  may also communicate audibly using an audio codec , which may receive spoken information from a user and convert it to usable digital information. The audio codec  may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of the mobile computing device . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on the mobile computing device .","The mobile computing device  may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone . It may also be implemented as part of a smart-phone , personal digital assistant, or other similar mobile device.","Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and\/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.","These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the terms machine-readable medium and computer-readable medium refer to any computer program product, apparatus and\/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and\/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term machine-readable signal refers to any signal used to provide machine instructions and\/or data to a programmable processor.","To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.","The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (LAN), a wide area network (WAN), and the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","Although a few implementations have been described in detail above, other modifications are possible. For example, while a client application is described as accessing the delegate(s), in other implementations the delegate(s) may be employed by other applications implemented by one or more processors, such as an application executing on one or more servers. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other actions may be provided, or actions may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 9A-D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
