---
title: User service profile-based plug-in update method and apparatus for internet protocol television service
abstract: A method and system for updating a plug-in in a device in Internet Protocol TeleVision (IPTV) system are provided. The method includes determining a second plug-in group selected from among a first plug-in group to be updated according to status information of each plug-in indicated in the first plug-in group in the device; and updating each plug-indicated in the determined second plug-in group.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08195824&OS=08195824&RS=08195824
owner: Samsung Electronics Co., Ltd
number: 08195824
owner_city: 
owner_country: KR
publication_date: 20091028
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates generally to a method and system for updating plug-ins in an Internet Protocol TeleVision (IPTV) device, and in particular, to a system and method for updating plug-ins in an IPTV device according to a user service profile.","2. Description of the Related Art","Internet Protocol TeleVision (IPTV) refers to a system for delivering digital TV services either wired or wirelessly over an Internet Protocol (IP) network, in contrast to traditional over-the-air radio broadcast TV. With increased usage of broadband Internet services and a convergence of communication and broadcast services, IPTV is becoming a prominent market force, and is expected to impact the development of electronic appliances as well as broadcast and communication services.","The Open IPTV Forum (OIPF) is an industry organization formed to create standardized IPTV specifications for providing users with provider-independent IPTV services.","More specifically, the OIPF is developing interfaces and hardware platforms that will allow users to receive IPTV services from various IPTV service providers. Currently, in order to receive IPTV services from the various service providers, a user may be required to use multiple set-top boxes. The OIPF proposes providing these multiple IPTV services by defining a single functional block located in a residential network that would allow a user to receive IPTV services from various service providers without requiring multiple set-top boxes, thereby providing users with an increased selection of IPTV programs and services.","A conventional system and method for updating plug-ins in an IPTV device are described as follows with reference to .  are described in reference to an Open IPTV Terminal Function (OITF) device as an example, but similar methods may also be applied to other conventional IPTV systems and devices.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},"Referring to , the conventional system includes an OITF device , such as a set-top box or a TV set, which is operated by a user to access IPTV services. The OITF device  includes an application module such as a Declarative Application Environment (DAE) entity , which is a browser for providing a user interface and receiving user input. The DAE entity  also interacts with server-side IPTV applications server , which may be included in a remote HyperText Transfer Protocol (HTTP) server (not shown). The OITF device  further includes a Remote Management Plug-in object  and a \u201ctriggerSoftwareUpdate[ ]\u201d Application Programming Interface (API) , which is used for updating plug-ins in the OITF device .","The conventional system further includes a software update server  that includes a software module . The Remote Management Plug-in object  retrieves updated software modules  by communicating with the software update server .",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},"Referring to , the DAE sends a \u201crequest update page\u201d message to the IPTV applications server  in step S. The DAE entity  may send the request update page in response to a user inputting a request for an update page to the DAE entity . Upon receiving the \u201crequest update page\u201d message, the IPTV applications server  sends a \u201cresponse update page\u201d message including the update page to the DAE entity  in step S. Upon receiving the \u201cresponse update page\u201d message, the DAE entity  displays the update page, which includes a clickable update button that may be selected by the user to initiate a software update of a specific update module. When the DAE entity  receives input of the user clicking the software update button in step S, the DAE entity  initiates the \u201ctriggerSoftwareUpdate[ ]\u201d API method  through the Remote Management plug-in object . Once the DAE entity  initiates the triggerSoftwareUpdate API method , the Remote Management plug-in object  accesses the update server , which stores the specific SoftWare (S\/W) update module , and downloads and installs the specific software update module  in step S.","The conventional IPTV software update method has several limitations. The conventional OITF device  does not selectively download update modules. More specifically, the conventional OITF device  does not provide support for specifically downloading user-specific, service provider-specific and device specific (i.e., Consumer Electronics (CE) device specific) downloads. The DAE entity  is limited to initiating a generic software update command without parameters for indicating specific modules to be updated. Therefore, according to the conventional system and method, a user is unable to selectively update plug-ins according to a user's indicated preferences.","As described above, in the prior art, an IPTV device requests a software update without parameters for selectively updating plug-ins according to a user's indicated preferences.","An object of the present invention is to substantially solve at least the above problems and\/or disadvantages and to provide at least the advantages below. Accordingly, an object of the present invention is to provide a method of updating a plug-in in an IPTV device including a plug-in update module and an application module.","Another object of the present invention is to provide a system for updating a plug-in in an IPTV device.","According to one aspect of the present invention, there is provided a method of updating a plug-in in an IPTV device including a plug-in update module and an application module. The method includes determining a second plug-in group selected from among a first plug-in group to be updated according to status information of each plug-in indicated in the first plug-in group in the IPTV device; and updating each plug-indicated in the second plug-in group.","According to yet another aspect of the present invention, there is provided a device for updating a plug-in in an IPTV system. The device includes an application module for determining a second plug-in group selected from among a first plug-in group to be updated according to status information of each plug-in indicated in the first plug-in group in the device; and a plug-in update module for updating the each plug-in indicated in the second plug-in group.","According to yet another aspect of the present invention, there is provided a system for updating a plug-in in an IPTV device. The system includes an application module for determining a second plug-in group selected from among a first plug-in group to be updated according to status information of each plug-in indicated in the first plug-in group in the IPTV device; and a plug-in update module for updating the each plug-in indicated in the determined second plug-in group.","Exemplary embodiments of the present invention will be described herein below with reference to the accompanying drawings. In the drawings, the same or similar elements are denoted by the same reference numerals even though they are depicted in different drawings. In the following description, well-known functions or constructions are not described in detail since they would obscure the invention in unnecessary detail.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3"},"Referring to , a system for updating a plug-ins according to an embodiment of the present invention includes an IPTV device  and a service network entity .","The IPTV device  includes an application module , for providing a user interface through a displayed service screen and receiving user input. For example, if the IPTV device  is an Open IPTV Terminal Function (OITF) device, the application module may be a Declarative Application Environment (DAE) entity. The IPTV device  also includes plug-ins , which interact with the application module  to expand browsing capabilities of the application module  to enhance a user's browsing experience.","The IPTV device  also includes a plug-in update module  for managing updates to the plug-ins . The plug-in update module  includes three types of plug-in classes for collecting and managing data included in the plug-ins : plug-in manager class , plug-in collection class , and plug-in class ","Each plug-in class includes information on a corresponding plug-in , such as a unique identifier for the corresponding plug-in, version information, and status information for indicating whether the corresponding plug-in was installed before an update for the plug-in has become available, etc. Each plug-in collection class may include information corresponding to a plurality of plug-in classes and includes information indicating the number of plug-in classes corresponding to the plug-in collection class . The plug-in manager class can retrieve information regarding the plug-ins  through the plug-in collection class and the plug-in class and access the service network entity  in order to execute various operations based on the retrieved information. The plug-in manager class , the plug-in collection class , and the plug-in classes are further explained herein with reference to .","Methods of updating plug-ins in the IPTV device  according to various embodiments of the present invention are described as follows with reference to . In , the service network entity  is depicted as including a Remote User Interface Server (RUIS) , an IPTV service profile entity , and a software update server . The arrangement of entities within the service network entity  is merely for illustration and by way of example, and various changes in form may be made to the arrangement of the entities within the service network entity  without departing from the scope of the invention. For example, the functions of the service network entity  may be implemented in a single server.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4","FIG. 3"],"b":["300","300"]},"Referring to , when the IPTV device  receives a user request for a profile page through the application module , the application module  sends a request for a user profile page to the RUIS , in step S. In an embodiment of the present invention, the RUIS  may be a HyperText Transfer Protocol (HTTP) server. Upon receiving the request for the user profile page, the RUIS  sends a user profile page response message including the user profile page to the application module  in step S. Upon receiving the user profile page, the application module  displays the user profile page, enabling a user to add and\/or remove services from a list of available services displayed in the user profile page. Upon receiving a selection of services from the user in step S, the application module  sends a request for a user profile update to the RUIS  in step S.","The RUIS  forwards the user profile update request to an IPTV service profile entity  in step S. The IPTV service profile entity  updates the user's service profile according to the user profile update request and sends a user profile update response message indicating a result of the user profile update to the RUIS  in step S. Upon receiving the user profile update response message, the RUIS  sends a request for current user profile information to the IPTV service profile entity  in step S. The IPTV service profile entity  sends a user profile information response message including the current user profile information to the RUIS  in step S. Upon receiving the user profile information response message, the RUIS  sends a user profile update response message to the application module  in step S.","Upon receiving the user profile update response message, the application module  sends a CheckAllPluginStatus[ ] command to a plug-in update module of the plug-in update module , in step S. The CheckAllPluginStatus[ ] command preferably includes a parameter for indicating services to be updated. In accordance with an embodiment of the present invention, the parameter is set to the services indicated in the user profile update response message. Upon receiving the CheckAllPluginStatus[ ] command, the plug-in update module  determines a first group of corresponding plug-ins that support the services indicated in the CheckAllPluginStatus[ ] command and communicates with the IPTV service profile entity  and the software update server  in order to determine status information of the corresponding plug-ins step in S. Upon determining the status information for the corresponding plug-ins, the plug-in update module  sends the status information to the application module  in step S. Upon receiving the status information, the application module  outputs information regarding the corresponding plug-ins to a user and sends a command to update the corresponding plug-ins, as a second plug-in group, to the plug-in update module  in step S.","Upon receiving the command to update the second plug-in group, the plug-in update module  communicates with the software update server  to retrieve information required for updating the corresponding plug-ins, and updates the corresponding plug-ins in step S. When the corresponding plug-ins are updated, the plug-in update module  sends a message indicating plug-in update results to the application module  in step S. Then, the application module  informs a user of the update results in step S.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5","FIG. 3"],"b":["300","310"]},"Referring to , when the IPTV device  receives a request for a plug-in manager page, the application module  sends the request for the plug-in manager page to the RUIS , in step S. Upon receiving the request for the plug-in manager page, the RUIS  sends to the application module  a plug-in manager response message including the plug-in manager page in step S, but the plug-in manager page is not presented to the user. A notification connection is established between the application module  and the RUIS  in step S.","While the notification connection is established, the RUIS  sends an HTTP request for plug-in status information to the application module  in step S.","Upon receiving the HTTP request for plug-in status information, the application module  sends a CheckAllPluginStatus[ ] command to a plug-in update module of the plug-in update module , in step S. Upon receiving the CheckAllPluginStatus[ ] command, the plug-in update module  determines a first group of corresponding plug-ins that support services available to the IPTV device  and communicates with the IPTV service profile entity  and the software update server  in order to determine status information of the corresponding plug-ins in step S. Upon determining the status information for the corresponding plug-ins, the plug-in update module  sends the status information to the application module  in step S.","Upon receiving the status information, the application module  forwards the status information to the RUIS  in, for example, an HTTP message in step S. Then, the RUIS  sends a request for profile information to the IPTV service profile entity  in step S. The IPTV service profile entity  sends a user profile information response message containing the user profile information corresponding to the IPTV device  in step S. Upon receiving the user profile information, the RUIS  compares the user profile information with the status information of the plug-ins to determine a list of updateable plug-ins corresponding to the user profile in step S. The RUIS  then sends a message including the plug-in list information, as a second group of corresponding plug-ins, to the application module  in step S.","Upon receiving the second plug-in group, the application module  sends a command to update the second group of corresponding plug-ins to the plug-in list to the plug-in update module  in step S.","Upon receiving the command to update the corresponding plug-ins, the plug-in update module  communicates with the software update server  to retrieve information required for updating the corresponding plug-ins, and updates the corresponding plug-ins in step S. When the corresponding plug-ins are updated, the plug-in update module  sends a message indicating results of the plug-in updates to the application module  in step S.","The application module  forwards the plug-in update results to the RUIS  in step S and receives an acknowledgement message from the RUIS  in response to the forwarded plug-in update results in step S. Then, the application module  informs a user of the update results in step S.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 3","FIG. 4"],"b":"300"},"Referring to , when the IPTV device  receives a user request for an update page through the application module , the application module  sends an update page request to the RUIS , in step S. Upon receiving the request for the updated page, the RUIS sends an update page response message to the application module  in step S.","Upon receiving the update page response message, the application module  sends a CheckAllPluginStatus[ ] command to a plug-in update module , in step S. In accordance with an embodiment of the present invention, the CheckAllPluginStatus[ ] parameter is empty, which indicates that status information for plug-ins corresponding to all available services is requested.","Upon receiving the CheckAllPluginStatus[ ] command, the plug-in update module  determines a first group of plug-ins corresponding to the available services and communicates with the software update server  in order to determine status information of the corresponding plug-ins in step S. Upon determining the status information for the corresponding plug-ins, the plug-in update module  sends the status information to the application module  in step S.","Upon receiving the status information, the application module  outputs a user profile page to a user interface for indicating plug-ins for which updates are available and enabling a user to select plug-ins to be updated. Upon receiving a user selection of plug-ins to be updated in step S, the application module  sends a command to update the selected plug-ins, as a second group of corresponding plug-ins, to the plug-in update module  in step S.","Upon receiving the command to update the second group of corresponding plug-ins, the plug-in update module  communicates with the software update server  to retrieve information required for updating the selected plug-ins, and updates the second group of plug-ins in step S.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 7","FIG. 7","FIG. 7","FIG. 4","FIG. 7"],"b":["721","723","711","713","721","723","731","733"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 8"},"Referring to , the format according to an embodiment of the present invention is compatible with the DAE Working Group (WG) specification of the Open IPTV Forum (OIPF). However, other formats may be used without departing from the scope of the present invention. The format the  includes the plug-in, which is defined as \u201cApplication\/oipfPluginManager,\u201d which manages status information of all plug-ins. The plug-in includes the three APIs (plug-in manager class , plug-in collection class , and plug-in class ) described above with reference to . Each plug-in according to the plug-in class includes one of the unique mimeType names listed in Table 1, and further includes version information for indicating whether the plug-in is older than a latest available version of the plug-in or indicating whether the plug-in is not installed.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Mime type List"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","application\/oipfObjectFactory"]},{"entry":[{},{},"application\/oipfapplicationManager"]},{"entry":[{},{},"application\/oipfConfiguration"]},{"entry":[{},{},"application\/oipfDownloadTrigger"]},{"entry":[{},{},"application\/oipfDownloadManager"]},{"entry":[{},{},"application\/oipfCodManager"]},{"entry":[{},{},"application\/oipfDrmAgent"]},{"entry":[{},{},"application\/oipfGatewayInfo"]},{"entry":[{},{},"application\/oipfIms"]},{"entry":[{},{},"application\/notifsocket"]},{"entry":[{},{},"application\/oipfParentalControlManager"]},{"entry":[{},{},"application\/oipfRecordingScheduler"]},{"entry":[{},{},"application\/oipfRemoteManagement"]},{"entry":[{},{},"application\/oipfSearchManager"]},{"entry":[{},{},"video\/broadcast"]},{"entry":[{},{},"video\/local"]},{"entry":[{},{},"video\/mpeg"]},{"entry":[{},{},"application\/oipfStatusView"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The plug-in collection class may include a plurality of plug-in classes , and can access any of the contained plug-ins via a plug-in item( ) method, which has an integer parameter for indicating an integer corresponding to a plug-in. The plug-in collection class also includes a \u201clength\u201d property for indicating the number of plug-in classes corresponding to the plug-in collection class ","The plug-in manager class includes various methods for managing the plug-in collection class and the plug-in class . The checkAllPluginStatus (String userServiceProfileInfo) method is for checking status information of all plug-ins that support services indicated by a service profile entered into the userServiceProfileInfo parameter. If the userServiceProfileInfo parameter has no value, then the method checks for status information of all plug-ins corresponding to the IPTV device . Upon checking the status information, the plug-in manager class updates the status information and returns the plug-in collection class including status information to the application module . The checkPluginStatus (String mimeType) method is for checking the status of individual plug-ins identified by their unique mimeType, and returns a plug-in class including the status information corresponding to the input mimeType. The updatePlugin (Plugin plugin) method is for updating or installing a specified plug-in. If the update or installation is successful, the updatePlugin method returns the value \u201ctrue,\u201d and if the update or installation is not successful, returns the value \u201cfalse.\u201d","As described above, the user service profile-based plug-in update system and method for an IPTV service according to the embodiment of the present invention enable an IPTV device to selectively update plug-ins required for the user service profile corresponding to the IPTV device.","While the present invention has been shown and described with reference to various embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and other objects, features and advantages of the present invention will become more apparent from the following detailed description when taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":"100"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
