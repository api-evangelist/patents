---
title: Server based control of robotic libraries
abstract: A method and apparatus for controlling a storage library through a network. A request originating from the network is received, wherein the request is in a protocol and includes a command for the storage library. A type for the request is identified. The request in the protocol is translated into a format used by the storage library to form a type specific request for the storage library in response to the type corresponding to a type for the storage library. The type specific request is sent to the storage library.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06856985&OS=06856985&RS=06856985
owner: Storage Technology Corporation
number: 06856985
owner_city: Louisville
owner_country: US
publication_date: 20000410
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates generally to an improved data processing system and in particular to a method and apparatus for managing data within a data processing system. Still more particularly, the present invention relates to a method and apparatus for handling data stored in magnetic tape cartridges.","2. Description of Related Art","For years now magnetic tape cartridges have proven to be an efficient and effective medium for data storage, including backing up data from primary storage devices and acting as primary storage devices for infrequently accessed data. A tape cartridge is a housing containing magnetic tape. The tape cartridge, which is also referred to as a \u201ctape\u201d, may be wound onto one or more reels within the housing.","Large computer systems have a need to access numerous cartridges. To this end, automated cartridge handling systems or libraries for cartridges have been developed for making the cartridges automatically available to the computer. Many of these automated libraries resemble jukeboxes. These automated libraries are also referred to as \u201cautomated cartridge systems\u201d and may contain thousands of cartridges within a single automated cartridge system. The cartridges within an automated cartridge system are accessed using automated or robotic systems. In some systems, a robotic arm moves around within a housing containing cartridges stored in array holders or slots and moves the cartridges. The robotic arm is used to move a cartridge from the array to a tape drive. The robotic arm also is used to remove a cartridge from a tape drive and place the cartridge back into the array. These automated libraries also include automated mechanisms to introduce and remove tapes from the library.","Many of these automated cartridge systems are accessed through a network. The network client protocols for these automated cartridge systems are often proprietary and are not easy to develop, port, maintain, and extend. Currently, access to an automated cartridge system from a client location requires installation of software encompassing the proprietary protocol. Porting the protocols to different platforms to control these automated cartridge systems is difficult, especially in view of the many different types of platforms that have to be supported for different customers.","Therefore, it would be advantageous to have an improved method and apparatus for controlling robotic libraries, such as automatic cartridge systems.","The present invention provides a method and apparatus for controlling a storage library through a network. A request originating from the network is received, wherein the request is in a protocol and includes a command for the storage library. A type for the request is identified. A storage library having a storage library type corresponding to the type is identified. The request in the protocol is translated into a format used by the storage library to form a type specific request for the storage library in response to the type corresponding to a type for the storage library. The type specific request is sent to the storage library.","With reference now to the Figures and in particular, with reference now to , a diagram of a distributed data processing system is depicted in accordance with a preferred embodiment of the present invention. Distributed data processing system  includes a network , a server , a robotic storage library , and clients  and .","Server , in this example, is a Web server and network  is the Internet, representing a worldwide collection of networks and gateways that use the TCP\/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational, and other computer systems that route data and messages. Of course, distributed data processing system  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the present invention.","In this example, robotic storage library  may be controlled by client  or client  across network . In these examples, protocols specific to robotic storage library , are not required to be implemented at client  or client . Instead, these protocols are implemented at server . In the depicted examples, Web pages or applets are sent to a client, such as client , to provide a graphical user interface (GUI) to control robotic storage library . The commands issued from client  to robotic storage library  are sent over network  using a markup language protocol over hypertext transfer protocol (HTTP). This markup language may be, for example, extensible markup language (XML) or hypertext markup language (HTML). The commands sent include, for example, tape movement in a library, tape movement into and out of a library, mixed media management, resource sharing, system interrogation, and system administration. With tape movement, these commands may involve those for mounting and dismounting tapes to and from tape drives. Mixed media management includes preventing or allowing tapes of certain types to be mounted on appropriate types of tape drives. System interrogation involves identifying or accessing contents within the library.","In these examples, the XML protocol is implemented on the server side on server  through servlets. A servlet is a Java application that runs in a Web server or application server and provides server-side processing, typically to access a database or perform e-commerce processing. Servlets are portable between servers and operating systems because the servlets are written in Java. In this example, an application programming interface (API) is implemented in a servlet in which the API is used to access a particular robotic storage library. The API, in these examples, implements the protocol used to communicate with the robotic storage library. In these examples, the mechanisms used in the present invention may be distributed to a server and a client through Java archive files (JAR).","As a result, client  may access robotic storage library  without having to implement the particular protocol for robotic storage library  at client . Further, the present invention allows a user to access robotic storage library  from any client connected to network .","With reference now to , a robotic storage library is depicted in accordance with a preferred embodiment of the present invention. In this example, robotic storage library  takes the form of an automated cartridge system (ACS). Robotic storage library  includes a library storage module (LSM) , a library module unit (LMU) , a library control unit (LCU) , and a tape control unit (TCU) .","LSM  contains the mechanisms necessary for automated cartridge handling. A storage area for magnetic tape cartridges is found within LSM . Further, an optical system for identifying the correct tape cartridge, a servo-controlled electromechanical mechanism for selecting a cartridge and delivering it to a correct tape drive, and a housing for operator safety and data security also are part of LSM . LMU  acts as a controller and interprets commands from host computers and relays appropriate instructions to LSM . LMU  may act as a controller for more than one LSM. LCU  is an inboard controller located at LSM . LCU  provides an interface between LMU  and the mechanisms located within LSM . For example, LCU  provides an interface to a robotic mechanism used to handle tape cartridges within LSM . TCU  is employed to handle data access in LSM . For example, TCU  handles reading and writing data to and from tape drives located within LSM . LMU  and TCU  are in communication with a host computer, such as server  in FIG. .","More information on this particular type of robotic storage library may be found in Moy et al., , U.S. Pat. No. 4,864,511. Robotic storage library  in  is presented as an example of a particular type of robotic storage library, which may be used with the present invention and is not intended as an architectural limitation to the present invention.","Referring to , a block diagram of a data processing system that may be implemented as a server, such as server  in , is depicted in accordance with a preferred embodiment of the present invention. Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors  and  connected to system bus . Alternatively, a single processor system may be employed. Also connected to system bus  is memory controller\/cache , which provides an interface to local memory . I\/O bus bridge  is connected to system bus  and provides an interface to I\/O bus . Memory controller\/cache  and I\/O bus bridge  may be integrated as depicted.","Peripheral component interconnect (PCI) bus bridge  connected to I\/O bus  provides an interface to PCI local bus . A number of modems may be connected to PCI bus . Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to clients  and  in  may be provided through modem  and network adapter  connected to PCI local bus  through add-in boards.","Additional PCI bus bridges  and  provide interfaces for additional PCI buses  and , from which additional modems or network adapters may be supported. In this manner, data processing system  allows connections to multiple network computers. A memory-mapped graphics adapter  and hard disk  may also be connected to I\/O bus  as depicted, either directly or indirectly.","Data processing system , in theses examples, contains the processes necessary to receive requests for a client, such as client  in , to control or access a robotic storage library, such as robotic storage library  in FIG. . In the depicted examples, the processes are implemented using known Web server engines and servlets incorporating APIs designed to communicate and interface with the robotic storage library.","Those of ordinary skill in the art will appreciate that the hardware depicted in  may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.","With reference now to , a block diagram illustrating a data processing system in which the present invention may be implemented. Data processing system  is an example of a client computer, such as client  or client  in FIG. .","Data processing system  employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor  and main memory  are connected to PCI local bus  through PCI bridge . PCI bridge  also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus  may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter , SCSI host bus adapter , and expansion bus interface  are connected to PCI local bus  by direct component connection. In contrast, audio adapter , graphics adapter , and audio\/video adapter  are connected to PCI local bus  by add-in boards inserted into expansion slots. Expansion bus interface  provides a connection for a keyboard and mouse adapter , modem , and additional memory . Small computer system interface (SCSI) host bus adapter  provides a connection for hard disk drive , tape drive , and CD-ROM drive .","An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in FIG. . The operating system may be a commercially available operating system, such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . \u201cJava\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processor .","In these examples, data processing system  includes the processes used to provide a GUI for controlling a robotic storage library, such as robotic storage library  in FIG. . This interface is implemented in a number of ways. For example, the GUI may take the form of Web pages or an applet loaded on a browser. A browser is a program that is used to search through a set of data. In the depicted example, XML is the format in which requests are sent between data processing system  and a server to control a robotic storage library. Proprietary protocols or protocols specific for a particular robotic storage library are unnecessary. The same interface may be used to control different types of robotic storage libraries through these mechanisms.","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in FIG. . Also, the processes of the present invention may be applied to a multiprocessor data processing system.","The depicted example in FIG.  and above-described examples are not meant to imply architectural limitations. For example, data processing system  may be a personal digital assistant (PDA) device, which is configured with ROM and\/or flash ROM in order to provide non-volatile memory for storing operating system files and\/or user-generated data. Further, data processing system  also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system  also may be a kiosk or a Web appliance used to control a robotic library, such as an automated cartridge system.","Turning next to , a domain model of components used to provide server based control of robotic storage libraries is depicted in accordance with a preferred embodiment of the present invention. Domain model  is in the form of a universal modeling language (UML) class diagram. Domain model  provides an example of components used for control of robotic storage libraries in the form of an automated cartridge system (ACS) and is not intended as an architectural limitation to the present invention.","Domain model  includes a device , a library , a tape drive , a cartridge access port (CAP) , and a cell . Device  is the class that maintains the common state and behavior for all the physical devices represented in the object framework. The specializations of this class include library , tape drive , and CAP .","Library  is a logical representation of a physical library, such a robotic storage library  in FIG. . Operations on library  include the movement of tape cartridges and interrogations of contents happen against objects, such as library . A collection of library objects currently defined to the system is kept in a library map .","Next tape drive  is a logical representation of a physical tape drive containing tape drive attributes such as tape drive type . Operations such as dismounting a tape and interrogation of contents are issued against these objects.","CAP  is a logical representation of an import\/export port for a robotic storage library. CAP  not a library main door but is a small door found on many robotic libraries, which is used for entering and ejecting tape cartridges without interfering with the normal operation of the robotic storage library. Operations involving entering and ejecting cartridges into or out of a robotic library would be issued against objects, such as CAP .","Next, cell  is a logical representation of a cartridge cell within a robotic storage library. In other words, cell  represents a location in which a cartridge tape is placed within a robotic storage library. Cartridge  is a logical representation of a singular piece of media, such as a tape cartridge.","CAP , cell , and tape drive  are objects having a location , which describes how the given physical entity may be found within the robotic storage library. Location  is used, in these examples, by a robot to a particular object. On a small computer system interface (SCSI), robotic libraries location  equates to an element address, but on proprietary libraries, location  may be a different representation. The product uses a panel row column (PRC) , which is a persistent object used to internally represent the physical layout of library . This internal layout is used in order to generate logical device locations, which make sense to operators for physical libraries that are undoubtedly different in physical size, shape, dimension, and cell layout.","Cartridge  and tape drive type  are objects associated with a media type . This association allows a determination to be made as to whether a given cartridge is suitable for operation within a given tape drive. This process allows for what is commonly referred to as \u201cmixed media\u201d support.","Assess to library  by a client is provided using media server  through library map .","With reference next to , a diagram of software components used to provide access to a robotic storage library over a network is depicted in accordance with a preferred embodiment of the present invention. In this example, media server  may be implemented using data processing system  in FIG.  and is illustrative of media server  in FIG. .","Media server  includes a server process , which serves to receive requests and send responses using HTTP. In this example, server process  includes a Java virtual machine (JVM), which executes Java programs used to process requests. When a request is received, Java servlet application program interface (API)  calls or initiates a servlet, such as servlet  or servlet . In this example, servlet  is a servlet including a proprietary API used to access proprietary storage library  through media manager .","Media manager  takes the form of a servlet and is implemented as an extension of the standard servlet class. When a client first requests a servlet, the server process  determines if the specific servlet class is currently loaded into memory. If servlet class is not currently loaded, the web server class loader in server process  will load the servlet into memory and run the servlet in it's own thread. Once the media manager  is active, a method corresponding to the request (e.g. GET or POST) will be invoked on the specific servlet object. This mechanism provides a very efficient mechanism for processing requests. The GET or POST methods are always mapped to a media manager internal command class, which will perform the actions required.","Much of the specific code for media manager  is contained in objects that are instantiated as needed by this servlet as singleton. Singleton objects hold a reference to themselves. Therefore, these objects stay loaded even when the initial need for them is gone. This way the media manager framework formed by these objects stays in memory regardless of which servlets are in memory. The framework objects that represent libraries contain code, which encapsulate the API for the protocol of the specific library being represented.","Servlet , in this example, includes a small computer system interface (SCSI) API, which is used to access a SCSI storage library .","The calls to these libraries are-made using framework objects . These framework objects are used to persist data and support servlet  and servlet . A framework object from framework work objects  is instantiated by servlets, such as servlet  and servlet . These objects are instantiated inside of a JVM in server process .","Media server  receives calls to access proprietary storage library  and SCSI storage library  from clients over a network. In this example, requests are received from clients. In these examples, a client may send requests using Internet browser , legacy client application  and legacy adapter , or new client application . HTTP requests are generated from these components and sent to server process  within media server .","An applet is sent to Internet browser  to provide a GUI to access the storage libraries. Alternatively, Web pages may be used for the interface in Internet browser . A user at Internet browser  may select a command for either proprietary storage library  or SCSI storage library  using the same GUI. This situation is made possible through the use of placing processes using proprietary or device specific protocols within media server . The requests are sent using a common protocol for the network, such as XML. The commands generated by the GUI at Internet browser  are mapped to the appropriate servlet within media server  by server process .","Legacy client application  also provides a GUI for accessing a storage library but generates requests in a legacy or proprietary protocol. Access is provided to clients containing these types of applications over the network through the use of legacy adapter . Legacy adapter  serves to translate calls made by legacy client application  into a format commonly used on the network, such as XML. This translated request is then sent to media server  for processing. When responses are received from media server , legacy adapter  also serves to translate the response back into a format for display by legacy client application .","Further, users may access storage libraries through new client application , which already incorporates the selected protocol, such as XML. In this manner, downloading of applets or Web pages to the client is unnecessary. Thus, the mechanism of the present invention allows access to storage libraries through a number of different clients. This feature is enabled through the use of a protocol commonly used on the network.","Turning to , an illustration of associations used to correspond requests to robotic storage libraries is depicted in accordance with a preferred embodiment of the present invention. Diagram  is a UML diagram providing associations between objects used to process requests from a client. Device alias  allows an association of a name for a given client with device . All requests from requester  are required to specify devices (library, drive, CAP) by a device alias name, rather than an absolute address. In other words, device alias  is the name that requester  will use to refer to device . All of the alias names, such as device alias , are stored in device alias map , which is a persistent object.","Application  registers an \u201capplicationName\u201d in application map  to allow resolution of device alias  to device .","Media manager provides servlets that allow management of the Framework application service. These servlets map to the functionality of QUERYREQUESTER, QUERYAPPLICATION, and ADDAPPLICATION. QueryRequester returns a list of which requesters are currently active. QueryApplication returns a list of currently defined applications, and AddApplication allows a client to define a new application to the media manager.","Application  uses the \u201capplicationName\u201d as the value corresponding to the \u201crequester\u201d element tag in all of its requests. Application  is used to associate an actual device name, such as actual device , with aliases for the device, such as device alias  found in the request. This association is made using application map . When responses are sent back to the client, such as requester , application map  is used to translate the device names back into alias names for the client to preserve the integrity of the client application view. In this manner, the client only sees the alias name and is not required to know the actual device name.","Application  also may set device aliases for all of the devices required by application . Default names may be automatically assigned for each new application.","An administrator for a media server, such as media server  in , can establish mappings between device alias names and product logical devices on a per-requester basis. In these examples, a default mapping for the product default client is present. The administrator also may delete alias names for specific requester-device associations. If such an alias has been deleted then the mechanism of the present invention will not make that device or any contained devices (such as drives in libraries), or any tape cartridges contained in that device, visible to that requester. In this way, an administrator can implement a regimen for cooperative device and cartridge sharing among clients.","Responses use device alias names corresponding to the requester specified in the <requester>xxx<\/requester> element tag, as shown in Table 1.",{"@attributes":{"id":"P-d0e2502","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Requester","The name of the requester. The element tag named"]},{"entry":[{},"requester provides this value. This is a one to one"]},{"entry":[{},"mapping between the client and the application; i.e."]},{"entry":[{},"an application is an internal representation of the"]},{"entry":[{},"requester."]},{"entry":["Device Alias","The name by which the requester will refer to"]},{"entry":[{},"the device."]},{"entry":["Device Name","The name by which The product knows the device."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"With reference now to , a flowchart of a process for initializing services is depicted in accordance with a preferred embodiment of the present invention. The processes in  may be implemented in a server process, such as server process  in FIG. . The server process starts services, which contain classes within a class path for the server processes. These classes are typically those required by servlets corresponding to specific requests. This initialization process is typically initiated when the server processes process the first request.","The process begins by reading a library configuration file (step ). The library configuration file is read to identify a list of currently configured libraries. Services are then started. (step ). These services include, for example, event handling, request tracking, alias mapping, device mapping, and error logging. Library device classes are loaded and transitioned to be logically on line for each robotic storage library (step ) with the process terminating thereafter. Library objects contain logical states of online and offline for a library device. The process of bringing a library device online from the offline state involves recovery of the device. The methodical series of steps for recovery include the following:","First, reading the contents of the library occurs. These include, for example, cartridges, drives, and CAPS. Next, all contained devices and cartridges are added to the system. This step includes instantiating any necessary objects from a set of framework object, such as framework objects  in  determination also is made as to whether any duplicate names of cartridges are encountered. Duplicates are processed by renaming the cartridges within the media manager to unique names indicating that cartridges are duplicated. Each contained device (CAPS or drives) is transitioned from offline to online and process any duplicate or unknown cartridges discovered in the contained devices are automatically given unique logical names that identify them as duplicates while allowing them to be used by the system. Unreadable cartridges get a unique virtual name indicating that they are unreadable. If there are no errors encountered, set the device state and the state of all contained devices to online.","With reference now to , a flowchart of a process for handling a request received by a server process is depicted in accordance with a preferred embodiment of the present invention. The steps illustrated in  may be implemented in a server process, such as server process  in FIG. .","The process begins by receiving a request from a client (step ). In these examples, the request is received in the form of an XML document received as an HTTP request. Next, the request is associated with a servlet (step ). This servlet is, for example, servlet  or servlet  in FIG. . The association of the request with a servlet is made using the servlet name in the resource name portion of the XML request. This association may be made using application map  in FIG. . After a servlet is identified, a determination is made as to whether the servlet has been instantiated (step ). If the servlet has not been instantiated, the servlet is then instantiated (step ). A request is then invoked on the servlet (step ). The process proceeds directly to step  from step  if the servlet has already been instantiated. The process then waits for a response from the servlet (step ). In this example, the response that the process waits for is in the form of an XML document.","When the response is received, this response is returned to the client (step ) with the process terminating thereafter. The response received contains the actual device name and not the alias name used by the client. As part of turning the response to the client in step , the process will use an application map, such as application map  in , to translate the device name back into an alias. This process is handled by the servlet rather than the server processes in these examples. For example, this translation step may be handled by servlet  in , rather than by server process  in FIG. .","With reference now to , a flowchart of processes used in a servlet is depicted in accordance with a preferred embodiment of the present invention. These processes may be implemented in a servlet, such as servlet  or servlet  in FIG. .","The process begins by parsing a request received from server processes (step ). The request parsed in step , in this example, is the XML document received from the client. From this parsing, logical device names are identified (step ). An application, such as application  in , is used to translate the alias name provided in the request into the actual device name. In this manner, a client using a specific application will have an application view of the system based on the client's set of defined aliases. The client does not require to know the actual device name. The alias device name is translated into the actual device or logical name. Next an action or interrogation is issued against the corresponding logical device or service classes (step ). Actions and interrogations are implemented as methods against either device objects or service objects. Once a library is online, the library has a list of cartridges and devices contained within it. The library object has methods that can satisfy most interrogations by retrieving data from its inventory lists.","In some cases the library object will invoke a request to the hardware via the encapsulated API in order to satisfy a request or action. When hardware requests are necessary, the library object updates its internal inventory to keep the inventory consistent with the hardware library that the inventory is representing.","This action or interrogation is initiated using an API contained within the servlet. This API is one that performs the appropriate call to the logical device or service classes.","In response to the action or interrogation issued, a result is received from the logical device or service classes (step ). The results may contain an indication that the action or interrogation has occurred successfully. Additionally, the result may include exceptions or errors occurring. A response is generated (step ) with the process terminating thereafter. In this example, an XML document containing the results is generated to return the response. If errors or exceptions occur, this information is placed into the XML document. If the action or interrogation is successful, any data gathered, as well as any other results of the actions are formatted into the XML document. In the depicted examples, device names are translated back into alias names, corresponding to the requester specified in the request field of the request received by the server.","In the examples illustrated above, the protocol used to transfer requests and responses over the network take the form of HTTP and XML. In particular, clients may use HTTP GET or HTTP POST methods to send requests to a server, such as media server  in FIG. . The actual format used depends on the implementation. The mechanism of the present invention may be implemented using HTTP, as found in () 1.1 , RFC 2616, which is available from the Internet Engineering Task Force. In these examples, all servlets will return an HTTP success status code of 200. The response information provided will contain specific details regarding the success or failure of the specific HTTP request. An HTTP success status code other than 200, e.g. a 404-status code, is an indication of a user error specifying the servlet URL or an improper server configuration. HTTP Informational status codes, 1xx, and Redirection status codes, 3xx, may be returned by the product as specified for the HTTP protocol.","In the depicted examples, each client request opens a new URL because of the servlet architecture and HTTP requests. This configuration means that each request opens a new socket connection to the server. Once the client application has written the request to the server, it can simply sit in a loop, reading any intermediate responses and the final response. The client application can be guaranteed that the only information received by the client application on that socket is response information for the request.","With respect to processing requests, XML is the protocol used in the depicted examples. Specifically, the requests are HTTP servlet requests using XML to convey the request content.","Turning now to , an illustration of an HTTP request using XML to convey request content is depicted in accordance with a preferred embodiment of the present invention. The general form of the request is illustrated in  in which MsApiServletName is the actual name of a servlet class, and the request XML content is a value associated with an XML key.","In the depicted examples below, a number of example request and responses are presented. The elements, in these examples, are illustrated on different lines and with indentation to more clearly illustrate the structure of requests and responses.","In , an example of an XML request is depicted in accordance with a preferred embodiment of the present invention. Request  illustrates the general form of a request processed by the mechanism of the present invention. Typically, XML requests include the structure illustrated in request  and should contain a string with no new line characters.","Turning next to , an example request to mount a tape is depicted in accordance with a preferred embodiment of the present invention. Request  is a specific example of the general form shown in request  in FIG. . Request  is a request used to mount a tape in a robotic storage library, such as ACS  in FIG. .","Turning now to , a diagram of an example response is depicted in accordance with a preferred embodiment of the present invention. Response  is an example of a response returned to a client. Responses are returned in a synchronous manner. As a result, clients that generate more than one request at one time are required to be multi-threaded to handle the responses. A response, such as response , is returned for each request. The server returns information back as terminated lines in request  to allow a client to retrieve the response in well defined groups, rather than waiting for a buffer to fill up.","With reference next to , an example response to a mount command is depicted in accordance with a preferred embodiment of the present invention. Response  is a specific example of the general form of the response shown in response  in FIG. .","Turning now to , a flowchart of a process illustrating the parsing of a request is depicted in accordance with a preferred embodiment of the preferred embodiment of the present invention. The process begins by reading request parameters from the request (step ). Thereafter, the requester field value is parsed from the parameter list (step ). The alias name is translated into the device name for all alias names in the parameter list using the requester value as a key for the application map (step ). Thereafter, the process waits for a response in which alias names are required (step ). The requester value is again used as a key for the application map to translate the device names back into alias names for all devices referenced in the response received (step ) with the process terminating thereafter. The requester value is a character string and is used as a key by using the character representation as an index to a hashtable.","Thus, the present invention provides an improved method and apparatus for controlling robotic storage libraries from remote locations. In particular, the mechanism of the present invention allows for a user to control a robotic storage library from different locations without requiring each location to have robotic storage library specific software. These advantages are provided through the use of protocols commonly used to communicate over a particular type of network, such as, for example, HTTP and XML. Processes specific to a particular robotic storage library are handled by servlets containing APIs for those specific robotic storage libraries. A server is employed to receive the request and hand the request to the appropriate servlet. The servlet processes the request and generates the appropriate call to the appropriate API. The API communicates with the robotic storage library in the protocol native to the robotic storage library. In this manner, the server handles the specifics of accessing the robotic storage library through the protocol native to the robotic storage library in response to receiving a request from a client.","Additionally, the server also may send an applet or an HTML page to a client to provide a GUI for controlling a robotic storage library. Thus, the mechanism of the present invention allows for a user to control a robotic storage library from almost any location across a network. In this manner, access to robotic storage libraries is provided to a number of different types of platforms without requiring a specific application to be developed for each type of platform.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. For example, although HTTP and XML are the protocols illustrated, other protocols common to a network may be used. For example, HTML or some other markup language may be used in place of XML. Further, the mechanism of the present invention also may be applied to other types of storage libraries other than robotic storage libraries handling tape. For example, the libraries may be those containing optical disks. Additionally, the mechanism of the present invention also may be applied to handling storage libraries, such as an array of disks. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"P-00011","num":"00011"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 9"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 10"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 11"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 12"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 13"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 14"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 15"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
