---
title: Distributed computing backup and recovery system
abstract: The distributed computing backup and recovery (DCBR) system and method provide backup and recovery for distributed computing models (e.g., NoSQL). The DCBR system extends the protections from server node-level failure and introduces persistence in time so that the evolving data set may be stored and recovered to a past point in time. The DCBR system, instead of performing backup and recovery for an entire dataset, may be configured to apply to a subset of data. Instead of keeping or recovering snapshots of the entire dataset which requires the entire cluster, the DCBR system identifies the particular nodes and/or archive files where the dataset resides so that backup or recovery may be done with a much smaller number of nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930320&OS=08930320&RS=08930320
owner: Accenture Global Services Limited
number: 08930320
owner_city: Dublin
owner_country: IE
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present description relates to identifying and managing the data to backup and restore based on user preferences. This description also relates to backing up and restoring a subset of data objects in a data set based on user preferences without backing up the entire data set.","With the advent of emerging data platforms (EDP), information technology (IT) backup and recovery functions are changing in ways that are not currently well understood. EDP technologies achieve read and write scale by leveraging a hash function that uniformly distributes a set of data across a number of server nodes. Replication which is currently built into most EDP technologies partially addresses backup requirements by protecting against node failures. Replication alone fails to render the idea of backup moot. Specifically the built-in replication within the EDP fails to address the persistence use-case for backup. Persistence and persisting refer to the availability of historic data rather than the fundamental reliability of data storage required by data storage systems. Datasets in the cloud environment are often extremely large, so regular and incremental backups require more storage and compute resources and more process coordination. Organizations' use of information technology (IT) and infrastructure computing resources are moving away from a static environment to a more dynamic and fluid computing environment. Traditionally, organizations' computing resources existed on fixed infrastructure owned by the organization and controlled directly by the organization. However, with the virtualization of computing resources, and shared computing environments (e.g., cloud computing), a computing resource consumer's application and computing service requests may reside on and use a variety of dynamic virtual systems and resources, and use any number of service providers to meet the users service-level agreements (SLAs).","Backups are performed for the purposes to provide availability to users or systems to access current \u201clive\u201d data, and the persistence to access data at a past point in time. Distributed architectures perform well regarding availability, so that at any time the data set with a replication factor is hosted across a number of servers. The user or another system may perform a read or write at any given time. Distributed architectures also do well regarding nodular failures such that when a server goes down the distributed architecture and replication factor recovers the data for that one server. Similarly, for zone failures (e.g., a data center goes down), a cluster may be arranged in a configuration distributed across multiple geographic zones to limit risk to server outages. Even so, backup for persisting data is not addressed by the replication built-in to distributed architectures. Instead, backup for persistence may be achieved by copying a snapshot of live data to on\/off-site disk at regular intervals (e.g., 24 hr or weekly). Replication to persisted snapshots (e.g., via SAN) may reduce the needed storage in the EDP, but requires the need to restore or synchronize systems. Current snapshot mechanisms protect the dataset in its entirety, but fail to protect data subsets that may include user, project and\/or specific file\/objects. Backups are performed for at least two purposes: 1) availability, and 2) persistence.","Distributed architectures do not account for persistence such that the user may roll back to a particular point in time and selectively recover data without also recovering the entire data set. For example, rolling back the environment to see what the users data looked like a week ago (e.g., a user profile may have been updated and the user desires to return to a previous known profile configuration). The known distributed architectures perform data restores of an entire EDP system in order to recover particular data (e.g., an individual users profile data such as a favorites list) from a full data set.","Availability guarantees data access in event of equipment failure. Indeed, NoSQL replicates data across nodes which protects against server failure. However, out-of-the-box NoSQL does not account for site failures (e.g., NoSQL cluster was hosted in Amazon Web Services' US East region). NoSQL maintains the current state of data. Also although the NoSQL platform otherwise uses a traditional backup snapshot for backups and recovery, NoSQL does not take into account persistence of user data. The NoSQL platform does not take into account persistence in terms of when data is updated (e.g., overwritten) by a user, and the historical information does not persist.","The distributed computing backup and recovery (DCBR) system includes a processor, a cluster of computing nodes in a computing environment, an interface controlled by the processor connected to a network in the computing environment, and a memory coupled to the processor. The memory includes a data object request received through the interface for a data object of a data set, and a hash function that is evaluated by the processor to determine where to store or locate the data object. The memory includes instructions executable by the processor that cause the processor to retrieve the data object, when the request is a request to retrieve the data object, and backup the data object, when the request is a request to backup the data object, where a copy of the data object is located on one or more of the nodes. The data object request includes a data object identifier and a time period, and a copy of the data object is located on one or more nodes. The DCBR system uses a backup log file that includes a backup record identifier corresponding to the data object request that the hash function uses to identify where in the computing environment the data object is stored. Replicas of the data object may be located on multiple nodes determined by the hash function. The DCBR system may return a preferred replica from the multiple replicas, where the preferred replica includes the most recent, and\/or the most correct copy of the data object or a combination of both.","The preferred replica is the same as the one used during the live operations of the EDP. For example, in one instantiation each node has a unique identifier that may be input into the same hash function as the data objects. Then the preferred replica is the one associated with the output of the hash function when applied to the object identifier. When there are N redundant replicas, for example one method of assignment may map those replicas reside on the next N nodes on the ring of nodes formed by ordering the results of the hashed node identifiers from smallest to largest, and then defining the smallest result to fall after the largest result. For example, in another instantiation, there may be another set of assignment functions that map the domain of the hash function applied to data objects onto the set of nodes. In this mapping a data object is first applied to the hash function, and then the hash function output is applied to the assignment function to determine the preferred and the redundant nodes on which the data objects should be stored. In another example, replicas may not fall on subsequent nodes. In Swift, each \u201czone\u201d has a separate ring, each ring has a separate set of nodes, and replicas are spread across zones so that each replica is assured to be on a separate node.","Other systems, methods, and features will be, or will become, apparent to one with skill in the art upon examination of the following figures and detailed description. It is intended that all such additional systems, methods, features and be included within this description, be within the scope of the disclosure, and be protected by the following claims.","The principles described herein may be embodied in many different forms. Not all of the depicted components may be required, however, and some implementations may include additional, different, or fewer components. Variations in the arrangement and type of the components may be made without departing from the spirit or scope of the claims as set forth herein. Additional, different or fewer components may be provided.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","102","102","104","106","108","110","112","106","104","114","116","104","102","116","118","106","120","122","124","104","126","120","116","128","104","104","120","120","120","120","120","110","112","118","130","132","120","102","134","136","124","120","138","120","110","112","124","102","140","138","140","120"]},"The DCBR system  and method extend the protections provide by distributed architectures from server node-level failure, and provide data persistence so that an evolving data set may be archived, and specified data may be recovered to a specified past point in time. The DCBR system  may perform backup and recovery for a subset of data, according to user preferences. For example, the DCBR system  and method identifies the nodes and\/or archive files where a specified data object resides so that the DCBR system  provides backups and\/or recoveries using a much smaller number of nodes. The DCBR system  provides targeted backup and recovery using configurable hash functions available in distributed architectures such as NoSQL. The DCBR system  allows the user to back up particular data without backing up an entire data set (e.g., in terms of how the data appears in the cluster), and\/or recover data at the granular level (e.g., a discrete data object).","Table 1 shows the current approach for backup\/restore of data and\/or subset of the data contained in the N-node cluster. The current approach does not leverage the distributed hash table (DHT) to backup and\/or restore a subset of data (e.g., 3 nodes of N-nodes) the current approach requires restoring all N-nodes. Similarly, where the data desired to be backed up only resides on 1 snapshot, the current approach requires restoring snapshots for the entire N-node cluster.",{"@attributes":{"id":"p-0022","num":"0021"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Current Approach to Backup and Recovery"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Backup at time t",{}]},{"entry":[{},"\u2003Individually snapshot all N nodes",{}]},{"entry":[{},"\u2003Save collected snapshots of N nodes together and",{}]},{"entry":[{},"\u2003associate with time t",{}]},{"entry":[{},"Restore to time t",{}]},{"entry":[{},"\u2003Gather the collected snapshots of all N nodes",{}]},{"entry":[{},"\u2003associated with time t",{}]},{"entry":[{},"\u2003Restore entire cluster of N nodes"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The DCBR system  and method identifies where within the distributed compute-data platform a subset of data is stored, and may use the identification mechanism to track where a subset of data resides in past archives. Identification of where data resides in the distributed platform allows backup and\/or recovery by the DCBR system  of those nodes that host the relevant data, instead of involving a backup and\/or recovery of the entire cluster. The DCBR system  provides user configurable preferences that may result in 1) less archival storage used because only relevant nodes may be backed up, and 2) faster restores because a smaller set of clusters may be involved with a subset of data. Without the ability to recover user selectable (e.g., relevant) nodes, recovery includes the entire dataset in the primary cluster, or the container of an entire replica of the physical primary cluster for the purpose of hosting recovery efforts. In an embodiment, the DCBR system , given a specified data object, determines which nodes, and\/or which stored images of nodes where the data object resides. The DCBR system  may orchestrate backup and recovery of the given data object using normal backup and archival techniques. The DCBR system  supports maintenance in terms of the backup and recovery of data associated with parallel distributed computing platforms that perform as super computers.","Distributed architectures are directed to addressing the technical problem of scaling to satisfy environments of hyper-sized numbers of nodes that manage large numbers of data read and write accesses. Distributed architectures include large clusters of nodes where the data is replicated distributed according to a configurable arrangement (e.g., one file mapped via a hash function (replicated) to one or multiple machines in the cluster). Most emerging data platform (EDP) solutions include at least 3 way replication of data by default, so that each copy of the data is copied two more times across different nodes. Each copy of a single piece of data is referred to as a replica. In the event the data somehow gets destroyed in one of the replicas, that replica is automatically replaced by a copy from another node.","Distributed architectures such as NoSQL leverage a distributed hash function for distributing the data. This distribution allows many parallel read and write accesses of data. The DCBR system  uses a hash function that is used to fulfill a request by mapping the request to a particular set of machines where the data to satisfy the request is located.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","202","102","204","102","206","208","210","102"]},"Table 2 describes the distributed hash table (DHT) used by distributed compute systems such as NoSQL and\/or peer-to-peer networks.",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Distributed Hash Table"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object \u2192 Hash Function \u2192 Key that is uniformly distributed \u2192",{}]},{"entry":[{},"Map to the distributed network or cluster",{}]},{"entry":[{},"\u2003Pass the object ID through the hash function (e.g.,",{}]},{"entry":[{},"\u2003message-digest algorithm md5(object_ID)). Every node in",{}]},{"entry":[{},"\u2003the cluster uses the same hash function with the same",{}]},{"entry":[{},"\u2003seed so that the resulting hash is the same for the same",{}]},{"entry":[{},"\u2003object ID.",{}]},{"entry":[{},"\u2003Note that the object ID may sometimes refer to an object ID",{}]},{"entry":[{},"\u2003for a data object.",{}]},{"entry":[{},"\u2003A key is the result from the hash function. Note that the",{}]},{"entry":[{},"\u2003hash function uniformly distributes the keys in a space.",{}]},{"entry":[{},"\u2003Apply any function that maps the range of the hash ID to",{}]},{"entry":[{},"\u2003one of the nodes. One example mapping of the keys to the",{}]},{"entry":[{},"\u2003nodes is as follows:",{}]},{"entry":[{},"\u2003\u2003Order the node keys from smallest to largest.",{}]},{"entry":[{},"\u2003\u2003Assign previous and next based on the ordering,",{}]},{"entry":[{},"\u2003\u2003with the largest node key pointing to the smallest",{}]},{"entry":[{},"\u2003\u2003node key as the next, and then the smallest to the",{}]},{"entry":[{},"\u2003\u2003largest as the previous. This forms a ring.",{}]},{"entry":[{},"\u2003\u2003The object key for a data object also maps to a value",{}]},{"entry":[{},"\u2003\u2003in the ring. Assign the node(s) that are next in the",{}]},{"entry":[{},"\u2003\u2003sequence to the object. The assigned node(s) is",{}]},{"entry":[{},"\u2003\u2003where the object will be stored."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The DCBR system  leverages the hash function to provide a way to recover one or more subsets of data from an entire data set (e.g., the individual user's profile favorites from last week or the user's email settings from 2 days ago) without recovering the entire cluster or data set. The DCBR system  may be configured to back up the environment by taking a snapshot of the entire data set, and store the hash function configuration that identifies the servers in the environment. During recovery, the DCBR system  retrieves specified data (e.g., a customer's user profile from last week) by looking up the hash function associated with the data set for the specified time period (e.g., last week) and mapping the hash function to the server(s) where the users profile data from last week resided, and recovers the particular snapshot of data for the requested users profile from the node backups where it resided. The DCBR system  saves the hash function, the data at each node in terms of the snapshots (e.g., according to a cluster backup configuration), and a configuration file that maps the node backups to the appropriate hash function (e.g., the list of node identifiers that when input into the hash function returns a range for which each node is responsible, or another assignment function that maps the hash domain to particular nodes). The DCBR system  recovers just the particular server images on which the requested data resides. The DCBR system  then queries each of the servers to retrieve the requested data.","Table 3 shows an approach the DCBR system  may implement to backup a subset of data S.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Backup a subset of data S."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Backup S at time t",{}]},{"entry":[{},"\u2003First compile a list of nodes to backup B. Initially B is",{}]},{"entry":[{},"\u2003empty (B = {}).",{}]},{"entry":[{},"\u2003\u2003For each object s in S",{}]},{"entry":[{},"\u2003\u2003\u2003Using the DHT*, lookup the set of nodes",{}]},{"entry":[{},"\u2003\u2003\u2003{n(1), n(2), . . . , n(k)}where s is stored.",{}]},{"entry":[{},"\u2003\u2003\u2003Append this set of nodes {n(1), n(2), . . . , ",{}]},{"entry":[{},"\u2003\u2003\u2003n(k)}to the list B.",{}]},{"entry":[{},"\u2003\u2003\u2003Update B = union(B, {n(1), n(2), . . . ,",{}]},{"entry":[{},"\u2003\u2003\u2003n(k)}).",{}]},{"entry":[{},"\u2003\u2003Individually snapshot all nodes in B.",{}]},{"entry":[{},"\u2003\u2003For example, referring to the assignment function",{}]},{"entry":[{},"\u2003\u2003described in Table 2, the node key is associated with",{}]},{"entry":[{},"\u2003\u2003the corresponding snapshot. Here the node key is",{}]},{"entry":[{},"\u2003\u2003the output of the node ID from the hash function.",{}]},{"entry":[{},"\u2003\u2003Node key and\/or object key associations are stored",{}]},{"entry":[{},"\u2003\u2003for respective assignment functions.",{}]},{"entry":[{},"\u2003\u2003Save collected snapshots of N nodes together.",{}]},{"entry":[{},"\u2003\u2003Associate this collection with time t.",{}]},{"entry":[{},"\u2003\u2003Note that if S is the entire data set, that B is the entire",{}]},{"entry":[{},"\u2003\u2003N-node cluster.",{}]},{"entry":[{},"\u2003\u2003(As a variation, the hash function may be saved in a",{}]},{"entry":[{},"\u2003\u2003separate file associated with the collection of",{}]},{"entry":[{},"\u2003\u2003snapshots)."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","102","102","302","102","304"]},"Alternatively, instead of a ring topology the DCBR system may use an assignment function that maps the objects to the appropriate nodes according to configurable criteria. The DCBR system  determines a list of nodes to restore R (, , ) where object d is stored, and restores the snapshots of nodes D (server images) found to include the data object d, and using the recovered cluster, the DCBR system  may query the nodes to lookup the object d ().","Table 4 shows an approach the DCBR system  may implement to restore a subset of data (object d) from D.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Restore a subset of data D"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Restore to time t",{}]},{"entry":[{},"\u2003Gather the collected snapshots associated subset B",{}]},{"entry":[{},"\u2003at time t.",{}]},{"entry":[{},"\u2003Note that B can be the entire N-node cluster.",{}]},{"entry":[{},"\u2003The list of node keys associated with the snapshots",{}]},{"entry":[{},"\u2003provides the ring topology for the subset of",{}]},{"entry":[{},"\u2003snapshots (e.g., referring to the assignment",{}]},{"entry":[{},"\u2003mechanism described in Table 2). For a more",{}]},{"entry":[{},"\u2003general assignment function, the stored assignment",{}]},{"entry":[{},"\u2003function may be used.",{}]},{"entry":[{},"\u2003If the hash function is stored in a separate file,",{}]},{"entry":[{},"\u2003continue to the next step.",{}]},{"entry":[{},"\u2003If the hash function is available, restore any one of",{}]},{"entry":[{},"\u2003the snapshots associated with the collection. Use",{}]},{"entry":[{},"\u2003the hash function contained within.",{}]},{"entry":[{},"\u2003Compile a list of nodes to restore R. Initially R is",{}]},{"entry":[{},"\u2003empty (R = { }).",{}]},{"entry":[{},"\u2003\u2003For each object d in D",{}]},{"entry":[{},"\u2003\u2003\u2003Using the DHT* and assignment",{}]},{"entry":[{},"\u2003\u2003\u2003function, lookup the set of nodes {m(1),",{}]},{"entry":[{},"\u2003\u2003\u2003m(2), . . . , m(k)}where d is stored.",{}]},{"entry":[{},"\u2003\u2003\u2003Append this set of nodes {m(1), m(2),",{}]},{"entry":[{},"\u2003\u2003\u2003. . . , m(k)}to the list D.",{}]},{"entry":[{},"\u2003\u2003\u2003Update D = union(D, {m(1), m(2), . . . ,",{}]},{"entry":[{},"\u2003\u2003\u2003m(k)}).",{}]},{"entry":[{},"\u2003Restore the snapshots of nodes in D.",{}]},{"entry":[{},"\u2003Using the recovered cluster, query the nodes to",{}]},{"entry":[{},"\u2003lookup the object d."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The DCBR system  may alternatively and\/or in combination with the previously described approach, save the node snapshots, and the configuration, but instead of saving the entire hash function, the DCBR system  specifies a hash function that is used throughout the running of the DCBR system , so that instead of saving the entire hash function, the DCBR system  saves a seed that is a random function based off of an initial seed that the DCBR system  stores and uses to recreate the hash function as the hash function varies in time.","The DCBR system  recovers just the particular server images on which the requested data resides. The DCBR system  then queries each of the servers to retrieve the requested data. The DCBR system  may specify a hash function that is used throughout the running of the environment, so that instead of saving the entire hash function, the DCBR system  saves a seed that is a random function based off of an initial seed that the DCBR system  stores and uses to recreate the hash function as the hash function may vary in time due to changes to the node configurations and assignments. The DCBR system  saves the node snapshots, and the configuration. When a user requests (e.g., recover) a particular data object, the DCBR system  uses the seed to recreate the hash function for the specified time to identify the location of the requested data object.","The DCBR system  may also provide user configurable options to selectively backup selected data and\/or data objects. For example, in an environment of 100 nodes, where the user only desires to back up a particular subset of data the DCBR system  may selectively backup the subset of the nodes where the specified data resides. The DCBR system  provides a recovery capability so that for example for a backup of 100 nodes a hash function is used to identify the subset of server images to recover where the data is located among a subset of the 100 nodes, and then the DCBR system  queries the server images determined to be where the specified data resides without recovering the entire data set.","The DCBR system  allows the user to identify what to back up (e.g., in terms of snapshots) and what to restore at a granular level (e.g., data object, user selectable), rather than merely full data set backups and restores. The DCBR system  also provides a way to configure the clusters (e.g., in an environment that implements replication), where for example a hash function replicates the data multiple times the user may configure variations where one or more combination of replicas are backed up (e.g., 2 of 3 replicas are backup instead of all 3 replicas). The DCBR system  may determine which of one or more combinations of replicas to back up based on user configurable criteria that determine the quality and accuracy of each replica.","The DCBR system  may allow the user to selectively configure which replicas to back up for a given time. For example, the DCBR system  may use another hash function that sets up a set of servers (e.g., a staging area) to make a copy of the data, and a second and third copy of the data distributed on another partition of servers (e.g., 99 servers where 33 servers have one copy of the data, and the other 66 servers store the other two replicas together).","As described above, a restore of a sizable number of files will result in the restoration of a large number of nodes, but will still be able to eliminate replicas for the restore, thus saving space. In a further refinement, however, the backed up files may be restored in a serial fashion (e.g., one node after the other with the appropriate files being re-injected through the API), thus reducing the amount of resources required for the restore process. The DCBR system  may analyze the nodes to be restored and implement various approaches to serially and\/or concurrently restore the nodes. For example, the nodes may be restored based on the amount of data to restore from each node (e.g., highest to lowest or vice versa). The number of nodes restored concurrently and\/or the sequence that nodes may be restored may be configurable based on available resources (e.g., available nodes).","The DCBR system  also provides a configurable option to record all activities occurring during a backup. When the DCBR system  initiates a backup, the DCBR system  also may record all interactions (e.g., write access activities) during the backup to capture data changes that occur during the backup, and provide a finer level of consistency regarding the backup and the actual state of the environment at the time of the backup.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["400","102","402","102","402","102","404","102","102","102","102","102"]},"In another example, backing up a cluster of 10 nodes, by the time the backup completes for the 10th node (e.g., backing up one node at a time serially) additional data and\/or activity may have occurred on node 1 that may be backed up by the DCBR system . The DCBR system  may create a copy of all inputs (data writes\u2014creating replicas of the newly arriving data) occurring during a backup to ensure consistency (e.g., copy a data stream from the network during the backup) and store the stream in another location (e.g., other than the location being backed up). During a recovery of the backup, the DCBR system  recovers the data set backed up, and plays back the data stream that was copied during the backup to provide a consistent restore. The DCBR system  starts a back up and a recording of data writes during the backup, and uses both the backup and the recording to perform a restore. The DCBR system  may also start recording in advance of a backup, and record and store data in a staging area, before backing up the data in some other location or medium (e.g., persistent CD-ROM, or tape).","The DCBR system  provides a way to ensure consistency when backing up a large number of machines in a asynchronous manner. The DCBR system  may copy the data to be backed up to a set of clusters, play the recording to record the data writes occurring during the backup, and create a snapshot of the set of clusters and the recorded data writes.","The DCBR system  provides a way for users to selectively target what data to back up and what data to restore. The DCBR system  may be configured for multiple users sharing the environment and who have different priorities and different service level agreements (SLA), and dependent on different types of data from the shared environment. The DCBR system  allows users to configure the user's preferences for data to backup (e.g., store) and recover. In this way the DCBR system  determines the data to back up and the data to persist.","The DCBR system  also provides a way to configure a disaster recovery (DR) subset of nodes in different data centers. The DCBR system  may determine how to partition the way objects or files are stored and distributed to efficiently to take a snapshot of a subset of a cluster (e.g., a cluster with a single replica of the data versus the entire cluster).","When the DCBR system  receives the request for a file (e.g., a data, object such as a record a user would like to retrieve) at a specified time (e.g., last week at 2:30 PM), the DCBR system  looks up a record identifier in a backup log and\/or configuration file for the backup record for the specified time (e.g., last week at 2:30 PM) and inputs the record identifier into a hash function, and the hash function outputs the corresponding server images where the requested data was recorded (located, and\/or stored). The DCBR system  queries the server images for the requested data and restores the appropriate data (e.g., most accurate, and\/or most current) based on user selectable preferences.","When the DCBR system  receives a request for data (e.g., data object) for a particular time when the data did not actually exist (e.g., a user request data or time period when the user was not a member), the DCBR system  may input the record identifier and the time period of interest for the non-existent data into the hash function, and the hash function may responsively output corresponding server images where the requested data would have been recorded had the data existed. The DCBR system  may return a status message when the data did not actually exist indicating that for the time period of interest the object (data) did not exist.","The DCBR system  may intercept data (e.g., write accesses) at the API level to manage targeted backups and recoveries. The DCBR system  API interfaces with various types of databases (e.g., traditional database, relational, and\/or NoSQL platform). The DCBR system  API identifies database resources as a data service to use to read\/write data from\/to one or more service providers. The DCBR system  API provides control over the distribution of the data backup to one or more service providers (e.g., data service) to provide security and backup reliability (e.g., backup distributed to multiple service providers according to any number of combinations, including a Redundant Array of Independent Disks\u2014RAID approach). For example, the DCBR system  API allows the user to stripe the data backup across multiple service providers, and various other combinations and\/or arrangements of multiple service providers. In another example, the DCBR system  API may strengthen security by encrypting the data and distributing segments to respected service providers for backup so that not only is the data encrypted but each of the service providers back up a portion of the encrypted data.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":["500","102"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 6","b":["600","102","102","102"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 7","b":["102","102"]},"The DCBR system  uses hash rings that map one namespace into an evenly distributed second (e.g., typically smaller) namespace using a mathematical hashing function. The second namespace is used to distribute the first namespace across nodes. For example, the files named \u2018Alex\u2019 and \u2018Alexa\u2019 would be right next to each other in the namespace of all words, but may be separated in an evenly hashed namespace. Alternatively, the hash function uniformly randomizes the object IDs into a namespace, and a second assignment function distributes the output of the node keys (the hashed node IDs) to the server-nodes.","The DCBR system  may be deployed as a general computer system used in a networked deployment. The computer system may operate in the capacity of a server or as a client user computer in a server-client user network environment, or as a peer computer system in a peer-to-peer (or distributed) network environment. The computer system may also be implemented as or incorporated into various devices, such as a personal computer (PC), a tablet PC, a set-top box (STB), a personal digital assistant (PDA), a mobile device, a palmtop computer, a laptop computer, a desktop computer, a communications device, a wireless telephone, a land-line telephone, a control system, a camera, a scanner, a facsimile machine, a printer, a pager, a personal trusted device, a web appliance, a network router, switch or bridge, or any other machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. In a particular embodiment, the computer system may be implemented using electronic devices that provide voice, video or data communication. Further, while a single computer system may be illustrated, the term \u201csystem\u201d shall also be taken to include any collection of systems or sub-systems that individually or jointly execute a set, or multiple sets, of instructions to perform one or more computer functions.","The computer system may include a processor, such as, a central processing unit (CPU), a graphics processing unit (GPU), or both. The processor may be a component in a variety of systems. For example, the processor may be part of a standard personal computer or a workstation. The processor may be one or more general processors, digital signal processors, application specific integrated circuits, field programmable gate arrays, servers, networks, digital circuits, analog circuits, combinations thereof, or other now known or later developed devices for analyzing and processing data. The processors and memories discussed herein, as well as the claims below, may be embodied in and implemented in one or multiple physical chips or circuit combinations. The processor may execute a software program, such as code generated manually (i.e., programmed).","The computer system may include a memory that can communicate via a bus. The memory may be a main memory, a static memory, or a dynamic memory. The memory may include, but may not be limited to computer readable storage media such as various types of volatile and non-volatile storage media, including but not limited to random access memory, read-only memory, programmable read-only memory, electrically programmable read-only memory, electrically erasable read-only memory, flash memory, magnetic tape or disk, optical media and the like. In one case, the memory may include a cache or random access memory for the processor. Alternatively or in addition, the memory may be separate from the processor, such as a cache memory of a processor, the memory, or other memory. The memory may be an external storage device or database for storing data. Examples may include a hard drive, compact disc (\u201cCD\u201d), digital video disc (\u201cDVD\u201d), memory card, memory stick, floppy disc, universal serial bus (\u201cUSB\u201d) memory device, or any other device operative to store data. The memory may be operable to store instructions executable by the processor. The functions, acts or tasks illustrated in the figures or described herein may be performed by the programmed processor executing the instructions stored in the memory. The functions, acts or tasks may be independent of the particular type of instructions set, storage media, processor or processing strategy and may be performed by software, hardware, integrated circuits, firm-ware, micro-code and the like, operating alone or in combination. Likewise, processing strategies may include multiprocessing, multitasking, parallel processing and the like.","The computer system may further include a display, such as a liquid crystal display (LCD), an organic light emitting diode (OLED), a flat panel display, a solid state display, a cathode ray tube (CRT), a projector, a printer or other now known or later developed display device for outputting determined information. The display may act as an interface for the user to see the functioning of the processor, or specifically as an interface with the software stored in the memory or in the drive unit.","Additionally, the computer system may include an input device configured to allow a user to interact with any of the components of system. The input device may be a number pad, a keyboard, or a cursor control device, such as a mouse, or a joystick, touch screen display, remote control or any other device operative to interact with the system.","The computer system may also include a disk or optical drive unit. The disk drive unit may include a computer-readable medium in which one or more sets of instructions, e.g. software, can be embedded. Further, the instructions may perform one or more of the methods or logic as described herein. The instructions may reside completely, or at least partially, within the memory and\/or within the processor during execution by the computer system. The memory and the processor also may include computer-readable media as discussed above.","The present disclosure contemplates a computer-readable medium that includes instructions or receives and executes instructions responsive to a propagated signal, so that a device connected to a network may communicate voice, video, audio, images or any other data over the network. Further, the instructions may be transmitted or received over the network via a communication interface. The communication interface may be a part of the processor or may be a separate component. The communication interface may be created in software or may be a physical connection in hardware. The communication interface may be configured to connect with a network, external media, the display, or any other components in system, or combinations thereof. The connection with the network may be a physical connection, such as a wired Ethernet connection or may be established wirelessly as discussed below. Likewise, the additional connections with other components of the DCBR system  may be physical connections or may be established wirelessly. In the case of a service provider server, the service provider server may communicate with users through the communication interface.","The network may include wired networks, wireless networks, or combinations thereof. The wireless network may be a cellular telephone network, an 802.11, 802.16, 802.20, or WiMax network. Further, the network may be a public network, such as the Internet, a private network, such as an intranet, or combinations thereof, and may utilize a variety of networking protocols now available or later developed including, but not limited to TCP\/IP based networking protocols.","The computer-readable medium may be a single medium, or the computer-readable medium may be a single medium or multiple media, such as a centralized or distributed database, and\/or associated caches and servers that store one or more sets of instructions. The term \u201ccomputer-readable medium\u201d may also include any medium that may be capable of storing, encoding or carrying a set of instructions for execution by a processor or that may cause a computer system to perform any one or more of the methods or operations disclosed herein.","The computer-readable medium may include a solid-state memory such as a memory card or other package that houses one or more non-volatile read-only memories. The computer-readable medium also may be a random access memory or other volatile re-writable memory. Additionally, the computer-readable medium may include a magneto-optical or optical medium, such as a disk or tapes or other storage device to capture carrier wave signals such as a signal communicated over a transmission medium. A digital file attachment to an e-mail or other self-contained information archive or set of archives may be considered a distribution medium that may be a tangible storage medium. The computer-readable medium is preferably a tangible storage medium. Accordingly, the disclosure may be considered to include any one or more of a computer-readable medium or a distribution medium and other equivalents and successor media, in which data or instructions may be stored.","Alternatively or in addition, dedicated hardware implementations, such as application specific integrated circuits, programmable logic arrays and other hardware devices, may be constructed to implement one or more of the methods described herein. Applications that may include the apparatus and systems of various embodiments may broadly include a variety of electronic and computer systems. One or more embodiments described herein may implement functions using two or more specific interconnected hardware modules or devices with related control and data signals that may be communicated between and through the modules, or as portions of an application-specific integrated circuit. Accordingly, the present system may encompass software, firmware, and hardware implementations.","The methods described herein may be implemented by software programs executable by a computer system. Further, implementations may include distributed processing, component\/object distributed processing, and parallel processing. Alternatively or in addition, virtual computer system processing maybe constructed to implement one or more of the methods or functionality as described herein.","Although components and functions are described that may be implemented in particular embodiments with reference to particular standards and protocols, the components and functions are not limited to such standards and protocols. For example, standards for Internet and other packet switched network transmission (e.g., TCP\/IP, UDP\/IP, HTML, and HTTP) represent examples of the state of the art. Such standards are periodically superseded by faster or more efficient equivalents having essentially the same functions. Accordingly, replacement standards and protocols having the same or similar functions as those disclosed herein are considered equivalents thereof.","The illustrations described herein are intended to provide a general understanding of the structure of various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus, processors, and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure, such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. Additionally, the illustrations are merely representational and may not be drawn to scale. Certain proportions within the illustrations may be exaggerated, while other proportions may be minimized. Accordingly, the disclosure and the figures are to be regarded as illustrative rather than restrictive. The above disclosed subject matter is to be considered illustrative, and not restrictive, and the appended claims are intended to cover all such modifications, enhancements, and other embodiments, which fall within the true spirit and scope of the description. Thus, to the maximum extent allowed by law, the scope is to be determined by the broadest permissible interpretation of the following claims and their equivalents, and shall not be restricted or limited by the foregoing detailed description."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The DCBR system and\/or method may be better understood with reference to the following drawings and description. Non-limiting and non-exhaustive descriptions are described with reference to the following drawings. The components in the figures are not necessarily to scale, emphasis instead being placed upon illustrating principles. In the figures, like referenced numerals may refer to like parts throughout the different figures unless otherwise specified.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4","b":"102"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
