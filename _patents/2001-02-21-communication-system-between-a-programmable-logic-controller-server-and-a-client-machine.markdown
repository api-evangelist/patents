---
title: Communication system between a programmable logic controller server and a client machine
abstract: This invention relates to a communication system between a programmable logic controller (PLC) equipped with an HTTP server and a client machine (C) via a network (B), characterized in that it comprises, in the central processing unit (CPU) of this controller, a means (API ) for adding “group sheets” (M, M. . . ) in XML format, whereon elements or signals for watching or controlling the process automated by the application of the programmable logic controller are grouped, as well as a means (API ) for adding/deleting elements or signals on these sheets, by specifying the type thereof, a means (API , API ) for reading or writing these elements, and a means (API , API , API ) for reading these sheets and for writing on these sheets upon a query from the HTTP server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07080137&OS=07080137&RS=07080137
owner: Schneider Automation
number: 07080137
owner_city: Valbonne
owner_country: FR
publication_date: 20010221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The present invention relates to a communication system between a programmable logic controller server and a client machine, via an open network.","An open network is used for connecting data processing devices, such as personal computers and automation appliances for controlling an automated process, e.g. in an industrial production workshop or an intelligent building. Open networks based on TCP\/IP technology are one example of an open network.","An industrial programmable logic controller is known, which is equipped in the signal processor with a query server that can be remote-polled via vendor-specific or standard protocols. This query server allows to read and write the objects processed by the application program of the programmable logic controller, i.e. application memory, organized in bits and words and controller status variables, system bits and words, input\/output.","This arrangement ensures independence between controller applications and client applications. However, this method has certain drawbacks in as far as security and the use of controller and network resources are involved.","Lack of security appears in a heterogeneous network and is also the result of data sampling being asynchronous with respect to the controller cycle. A client station transmits several queries for watching a process. These queries can be served at different controller cycles, with the possibility that the signals watched have changed in the meantime. Therefore, there is a risk related to acquiring an erroneous status.","Regarding the use of resources, as the query server operates by answering questions from the client application, the latter has to repeat its question constantly (e.g.: \u201cwhich is the value of a given memory bit\u201d). This mechanism is resource intensive at the controllers central processing unit. Indeed, this central processing unit must permanently decode questions, which are always the same, in a given time. By way of example, the average time for decoding such a query is about 5 ms as an controller. This means that for obtaining the status of 5 non consecutive bits of the controller's address space, the central processing unit will use up 25 ms of the controller's cycle time (from 50 to 100 ms as an average) to provide this service. Moreover, this mechanism uses up network resources, as the client is constantly sending queries. The more the information is \u201csplit up\u201d in the controller's \u201cmemory\u201d, the greater the number of queries will be and the longer the network will be busy. Finally, performance efficiency is bad. Indeed, the query \u201cquestion\u201d and the query \u201canswer\u201d for obtaining the status of one bit are coded on several bytes.","An industrial process is driven by applying guidelines and watching signal values, which will be called \u201cinterface signals\u201d hereafter. By convention, the controller programmer can define, e.g. that a memory bit % M will represent the on-status of a machine, the bit value being 1 when the machine is on, or 0 when it is off. A convention like the one above, i.e. \u201cbit % M represents the on-state of the machine\u201d is used implicitly by programmers of client applications on the network. If the controller programmer wishes to change said controller variable, e.g. by allocating the representation of the machine on-state to bit % M instead of % M, he must also make sure that the clients referencing this information change their definition, i.e. replace % M with % M. In conclusion, in a controller, memory is freely available and there is no mechanism allowing the definition of interface signals (watching and guidelines) of the driven process to be shared in complete safety between the program of the programmable logic controller and the client applications of the network, as these signals have not been declared explicitly by the controller programmer.","The object of the present invention is to improve security by simultaneously carrying signal definition and value, thereby reducing the risk of signal misinterpretation. Also, signal acquisition is done synchronously with respect to the cycle of the programmable logic controller, thereby avoiding the generation of erroneous statuses and operational hazards. It allows a greater number of signals to be processed in comparison with the current solution, for a given hardware architecture. The processing unit has less processing to do at each cycle and the network is used wore efficiently.","The invention allows to add interfaces to the programming languages of the programmable logic controllers of various vendors (provided there is an HTTP server in their central processing unit) and thus allows these various programmable logic controllers to be brought to cooperate while having interface signal consistency.","The communication system according to the invention is characterized in that it comprises, in the central processing unit of this controller, a means for adding sheets (so-called \u201cgroup sheets\u201d) in XML format, whereon elements or signals are grouped, which are to watch or control the process automated by the application of the programmable logic controller, as well as a means for adding or deleting elements on these sheets, by specifying their type, a means for reading and writing these elements, and a means for reading these sheets or for writing on these sheets upon a query from an HTTP server.","According to one feature, each of the elements or signals is in XML format and has a definition including the type of said signal and the binary value.","According to another feature, the system has a reading means, called complete reading means, generating an image of a \u201cgroup sheet\u201d, which is a complete replica of the \u201cgroup sheet\u201d designated by the URL-address of DNS or TCP\/IP type, the HTTP server port and the name of the \u201cgroup sheet\u201d.","The open network architecture illustrated in  has a programmable logic controller equipped with a central processing unit CPU, modules MM having an automation function, and a communication module MC with a server function. These modules and the central processing unit communicate via a private communication bus on the motherboard, This server controller PLC can be connected to other programmable logic controllers.","The central processing unit CPU of the programmable logic controller contains an application program written in a standard automation command language, \u201ccontact language\u201d, etc. . . . The operating system thereof manages input\/output and internal variables, which are the variables of the controller program.","The communication module CM is of Ethernet type and allows this controller to be connected to a TCP\/IP network. It is equipped with a central memory and a microprocessor, and can communicate, using the TCP\/IP protocol and via a communication bus B, with a client machine C (a computer in this case) connected to the same network and equipped with an XML capable browser.","A programming interfaced called API (\u201cApplication Programming Interface\u201d) is stored in the central processing unit CPU and is an extension of the controller's operating system.","A \u201cgroup sheet\u201d (E) is previously defined in XML format, with a tool compatible with the design software of the controller program, in order to group elements or \u201csignals\u201d of the automated process. The application programmer groups elements that are meaningful for watching or controlling the process automated by the automation application and which he wishes to make available with time consistency on the network (simultaneous sampling). Only the information he has defined on these sheets will be shared with client applications, i.e. client applications can gain access to this information only. The encoding scheme used is compliant with the XML standard of the W3C consortium.","By way of example, sheet E may have the following format:",{"@attributes":{"id":"p-0023","num":"0022"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<machine1>"]},{"entry":[{},"<machine_operating\u2003\u2003\u2003status\u2003\u2003\u2003dt:dt=\u201cbit\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"comment=\u201cmachine\u20031\u2003on\u201d,\u2003\u2002on=\u201c1\u201d,\u2003off=\u201c0\u201d,"]},{"entry":[{},"interface=\u201coutput\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<on_off\u2003\u2009dt:dt=\u201cbit\u201d,\u2003\u2009comment=\u201con\/off\u2003button"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"machine 1\u201d, on=\u201c1\u201d, off=\u201c0\u201d, interface=\u201cinput\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/machine1>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Interface API allows to add, in a specific memory area of the programmable logic controller (called \u201cgroup sheet\u201d memory), a \u201cgroup sheet\u201d like M or M . . . grouping previously defined elements or \u201csignals\u201d of the automated process. Each of these previously defined elements represents a \u201csignal\u201d of the process and allows to ensure replication on the network. It is defined in XML format.","The \u201cgroup sheets\u201d stored (M, M, . . . ) may change in the course of time (addition or deletion of signals). By way of example, the sheet for adding an element has the following format:","<machine1>","<time_counter dt:dt=\u201cstring\u201d, comment=\u201cNumber of operating hours\u201d, interface=\u201coutput\u201d\/>","<\/machine1>","Interface API allows to add\/delete an element on a sheet, by specifying the type (binary, integer, floating, bit matrix, word, . . . , character string, . . . ).","Interface API allows to read the value of an element in view of writing it into a controller variable of the same type, with a mechanism allowing to indicate whether the value of this element has changed with respect to the previous cycle of the controller program (HTTP write flags).","Interface API allows to write a controller variable into an element and to set information in the structure \u201cPLC write flags\u201d in order to enable (complete or subscribed) write services to know when an update has to be made.","This programming interface supports a communication protocol allowing the sheets to be replicated with client applications running e.g. on client machine C. Information replication is done by sending signal value and definition (including type) simultaneously.","Interface API strictly defines the rules for sampling replicated information, in synchronism with the controllers processing cycle. A client application therefore has an image of the information corresponding to a \u201cphotography\u201d of the information status at the end of the controller cycle. The controller application also has a consistent image of the information written by client applications.","An HTTP server is installed in the central processing unit CPU of the programmable logic controller. A sheet is addressed via a URL indicating the (DNS or TCP\/IP) address, the HTTP server port followed by the sheet name, The address thus appears in the form of http:\/\/<DNS or TCP\/IP address>:port\/<sheet name. When it is polled by a client appropriately encoding the URL (e.g., http:\/\/<DNS or TCP\/IP address>:port\/definition<sheet name), this HTTP server sends back the definition of the sheet and the elements thereof. Additional descriptive information (comments, . . . ) can be managed by an interface API . By means of the HTTP protocol, interface API  allows for two read alternatives, one of which is called full read and the other one subscribed read. Moreover, it allows writing between the remote client and the controller server. The first read alternative called full read and performed by interface API generates a \u201ccomplete read sheet\u201d (L), which is a complete replica of the \u201cgroup sheet\u201d designated by the URL (<sheet name>, e.g. \u201cmachine1\u201d).","By way of example, L has the following format:","<machine1>","<machine_on dt:dt=\u201cbit\u201d>0<\/machine_on>","<on_off dt:dt=\u201cbit\u201d>0<\/on_off>\n\n","This replicated sheet L has a definition of the signal, e.g. machine_on, data type \u201cbit\u201d and associated value 0 or 1.","The second read alternative called subscribed read and performed by interface APT generates a sheet L grouping element modifications of a \u201cgroup sheet\u201d, which happen between two successive server pollings. The prior subscription is performed by means of interface APT ","By way of example, L has the following format:","<machine1>","<machine_on dt:dt=\u201cbit\u201d>0<\/machine_on>","<\/machine 1>","A replicated sheet L includes the signal definition, e.g. machine_on, type \u201cbit\u201d, and associated value 0 or 1.","HTTP write queries are successively stored in the form of write sheets (E) in XML format.","By way of example, a sheet E has the following format:","<machine1>","<on_off dt:dt=\u201cbit\u201d>1<on_off>","<\/machine 1>","This sheet E includes the definition of the signal and associated value 0 or 1.","Sheet writing, which is done via interface API , is triggered by the controller application at the beginning of the cycle in order to update the sheets and their elements. It sets indicators (http write flags) enabling the controller program to test whether the value of an element has changed since the last processing cycle.","A replicated sheet (L or L and E) includes the signal definition, e.g. machine_on, type dt:dt=\u201cbit\u201d, and associated value 0 or 1. Providing the information is done by the controller programmer who links an internal controller variable with the signal machine_on (writing an element API and reading an element API ) It is then possible to modify said internal variable without having to inform all clients who only \u201csee\u201d the \u201cexternal\u201d signal machine_on.","Simultaneously carrying signal definition and value reduces the risk of signal misinterpretation.","Only the signals, which are explicitly declared as sheet elements (using interfaces API and API ) are made available to the network. It is up to the programmer to decide how it is possible to interact with the process he is controlling by explicitly declaring interface signals.","The fact that signal acquisition is synchronous with the programmable logic controller's cycle avoids the replication of inconsistent information that could generate erroneous statuses and therefore operating hazards (interface API ). Signals are sampled according to the acquisition scheme input\/processing\/output restoral.","If something changes in the process, it is then made available to the outside. The central processing unit is used when required and also to provide more in-depth information on signals (definition, value), using XML encoding.","A client having a question of several bytes (e.g. an HTTP read query generating the reply L or L) can find out about the complete status of the part of the machine it is interested in. Consequently, the load of the central processing unit is reduced and there is less processing to be done at each cycle. The network is used more efficiently due to the fact that is has more useful information in the same time unit in comparison with a known solution.","By means of the HTTP server, it is possible to generate sheets for defining group sheets (L) in XML format which allow to learn about this interfaces, i.e. to understand the meaning of such signals (API ).","By way of example, a sheet L has the following format:","<machine1>","<machine_on dt:dt=\u201cbit\u201d>comment=\u201cmachine 1 on\u201d, on=\u201c1\u201d, off=\u201c0\u201d, interface=\u201coutput\u201d\/>","<on_off dt:dt=\u201cbit\u201d>comment=on\/off button machine \u201c1\u201d, on=1, off=\u201c0\u201d, interface=\u201cinput\u201d\/>","<time_counter dt:dt=\u201cstring\u201d>comment=\u201cOperating hour counter\u201d, interface=\u201coutput\u201d\/>","<\/machine 1>","Optionally it is also possible, when the elements of these sheets are created, to add design comments, which will be helpful for the interpretation one is free to make of the interface signals in a controller's central processing unit during polling from a client station equipped with an XML capable browser.","Of course, and without departing from the scope of the invention, it is possible to imagine minor alternatives and developments and even to envisage using equivalent means.",{"@attributes":{"id":"p-0068","num":"0069"},"figref":"FIG. 2","i":"a ","ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":[{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["E DEFINE GROUP SHEET IN XML FORMAT","E ADD\/DELETE ELEMENTS OF GROUP SHEET IN XML FORMAT"]}},"APIA ADD GROUP SHEET FROM PLC","APIB ADD ELEMENTS IN GROUP SHEET FROM PLC","APIC READ ELEMENT FROM PLC WITH OR WITHOUT TESTING ASSOCIATED \u201cHTTP\u201d FLAG","APID WRITE ELEMENT FROM PLC ND SET ASSOCIATED PLC FLAG","APIE AT END OF PLC CYCLE, UPDATE SHEET VARIABLES BY SUBSCRIPTION AND RESET PLC WRITE FLAGS","M\/M GROUP SHEET MEMORY"]}},"HTTP WRITE FLAGS","ELEMENT MEMORY","PLC WRITE FLAGS","SHEET","MEMORY OF ELEMENTS WRITTEN SINCE LATEST POLLING",{"@attributes":{"id":"p-0074","num":"0083"},"figref":"FIG. 2","i":"b ","ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["API SHEET WRITING: UPDATE ELEMENTS AT BEGINNING OF PLC CYCLE","API COMPLETE READING OF SHEET VIA HTTP AT BEGINNING OF PLC CYCLE","API SUBSCRIBE TO SHEET VIA HTTP AT BEGINNING OF PLC CYCLE","API SUBSCRIBED READING OF SHEET VIA HTTP AT BEGINNING OF PLC CYCLE","API LEARN SHEET VIA HTTP","L SHEET FOR COMPLETE READING OF AN XML-FORMATTED GROUP SHEET","L SHEET FOR SUBSCRIBED READING OF AN XML-FORMATTED GROUP SHEET","L SHEET FOR DEFINITION READING OF AN XML-FORMATTED GROUP SHEET","E ELEMENT SHEET TO BE WRITTEN ON XML-FORMATTED GROUP SHEET","API STORE WRITE SHEET THROUGH HTTP","HTTP CLIENT QUERIES","API STORE WRITE SHEET THROUGH HTTP","HTTP CLIENT QUERIES","API  HTTP SERVER","HTTP REPLIES"]}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["The present invention will now be described more in detail with reference to an illustrative embodiment represented in the appended drawings where;",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},"FISG. and are a block diagram of the programming interface or API in accordance with the invention."]},"DETDESC":[{},{}]}
