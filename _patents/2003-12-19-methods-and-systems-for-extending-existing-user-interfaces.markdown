---
title: Methods and systems for extending existing user interfaces
abstract: Methods and systems that can be used to dynamically restructure user interfaces into a set of communicating processes. The methods and systems update new and wrapped legacy user interface components for repurposing of user interfaces. The methods and systems provide for changing one or more of at least an appearance, a behavior, and a state or condition of the user interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07823070&OS=07823070&RS=07823070
owner: Fuji Xerox Co., Ltd.
number: 07823070
owner_city: Tokyo
owner_country: JP
publication_date: 20031219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["1. Field of Invention","This invention generally relates to restructuring user interface components of computer applications.","2. Description of Related Art","Computer application user interface components, such as, for example, Web browsers, have become entrenched in computer use practices. For example, Web content designers will at times depend on the many features of existing browsers, such as for example, the content types supported by a browser, underlying data representations for specifying the display properties, e.g., the tags and parameters, and the like.","With the acceleration of technological development, system software designers are reaching the point where system software and their user interfaces become to some degree outdated \u2018legacy systems\u2019 as soon as they are released.","The dependence on the features of existing browsers becomes a problem if software designers want to create new applications that retain some or all of the representational abilities of the older software, but have new interaction requirements, such as, for example, defining new ways links get followed.","Maintaining, extending, overriding, and\/or adapting system software and their user interfaces while preserving the features that software developers depend on is advantageous.","This invention provides methods and systems that dynamically restructure user interfaces into a set of communicating processes.","This invention separably provides methods and systems that dynamically restructure and\/or update new and wrapped legacy user interface components to allow for repurposing of user interfaces.","This invention separably provides methods and systems that provide for changing the appearance, behavior, and state\/condition of user interfaces.","This invention separably provides methods and systems that connect or link a proposed state\/condition change of the user interface to other processes to enable these processes to override their actions in updating themselves to the new proposed state\/condition.","In various exemplary embodiments, the systems and methods according to this invention restructure a computer application user interface component by dynamically injecting a functionality into a first layer in the user interface component, communicating an event to a controlling process used in at least the first layer, and performing an action in the first layer based on the event. In various exemplary embodiments, the controlling process restructures at least one of an appearance, a functionality and a condition of at least the first layer.","In various exemplary embodiments, the systems and methods according to this invention further include indicating to a second layer, a change of the condition of the at least the first layer. In various exemplary embodiments, an action is performed in the second layer in response to the change of the condition of the at least the first layer. In various exemplary embodiments, the action performed in the second layer is the same as the action performed in the first layer. In various exemplary embodiments, the first layer is a content layer. In various exemplary embodiments, the second layer is a branding layer.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},"In various exemplary embodiments of the systems and methods according to this invention, a system  uses at least a controller  to inject one or more additional programming logic\/programming calls  into one or more computer applications . In various exemplary embodiments, the one or more computer applications  include any known or future developed computer applications, such as, for example, internet web browsers, e-mail applications, document productivity applications, multi-media processing and\/or presentation applications, information processing applications and the like.","In various exemplary embodiments, programming logic\/programming calls  allow the controller  to capture one or more events  from the one or more computer applications . Further, in various exemplary embodiments, the captured events  inject additional programming logic\/programming calls  or invoke other processing commands in the controller , in the modified application , in some other application (not shown) modified by the controller or a similar controller (not shown) as specified according to this invention, or in another unrelated application (not shown).",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 2"],"b":["200","210"]},"Methods for code expansion\/augmentation include but are not limited to manipulation within the interface of scripting languages, macros, parameters and configuration information, and invocation of application programming interfaces for code modification such as document object model manipulation. Operations by the expanded\/augmented code include, but are not limited to, adding or modifying communication of events occurring within the first layer to the other layers, redefinition of existing data structures within the first layer, incorporation of new data structures within the first layer, removal of data structures within the first layer, redefinition of existing functionality within the first layer, incorporation of new functionality within the first layer, and removal of functionality within the first layer.","In various exemplary embodiments, these expansions\/augmentations thereby create a Multi-Directionally communicating processes between multiple existing user interface components (S). The operation of the process shown in  terminates at step s.","As discussed above, the one or more user interface components are expanded and\/or augmented by instrumenting content in the user interface. Instrumenting content may include instrumenting at least a first layer, such as, for example, a content layer, using one or more instrumentation methods or techniques. Instrumentation methods or techniques are well known in the art.","In various exemplary embodiments, instrumenting content is performed by accessing an underlying data model of the content being displayed. In various exemplary embodiments, the underlying data model of the content being displayed includes a Document Object Model.","In various exemplary embodiments, instrumenting content is performed by embedding the user interface into an environment that provides a means to trap or lock in all input events. In various exemplary embodiments, embedding the user interface is performed using well known software code, such as, for example, including ActiveX controls in a Visual Basic form, including Web Services in a C# form, trapping X Window event streams and the like.","As discussed above, in step S, multi-directionally communicating processes are created by inserting or adding application level repurposing communication protocols into the existing user interface components. In various exemplary embodiments, the multi-directionally communicating processes, such as, for example, bi-directionally communicating processes, redefine the existing or original user interface. In various exemplary embodiments, the insertion\/addition of application level communication protocols into a first layer, for example, a content layer, redefines at least one of a presentation appearance and a behavior of the content layer.","In various exemplary embodiments, when the user interface is updated with content, software code that is appropriate to the user interface communication model is introduced into the user interface. In various exemplary embodiments, software code includes, for example, event stream data, HTTP\/HTML for Web-based applications, and the like.","In various exemplary embodiments, the software code re-specifies one or more user interface events in the user interface component with the following information. For example, in various exemplary embodiments, the command being invoked is specified at the application level, for example, application level \u2018Pause\u2019 vs. device level \u2018Mouse Down\u2019. In various further exemplary embodiments, the software code re-specifies one or more user interface events such as, for example, attributes related to that command, such as, for example, meta-data, parameters, qualifiers, properties specified by name-value pairs and the like. In additional exemplary embodiments, the software code re-specifies a callback method, such as, for example, code designation in the embedding context or in some other context accessible from the embedding context. In yet further, exemplary embodiments, the software code re-specifies one or more user interface events such as, for example, any combination or the omission of any of the above information.","Other repurposing protocol approaches, such as form example, XML documents, are applicable with the methods and systems of this invention.","Whenever user or system actions trigger the instrumented user interface elements, code in the embedding context applies processing rules that redefine a condition\/state and or behavior of the event processing. In various exemplary embodiments, the redefined event processing includes various actions or commands, such as, for example, ignore actions, process actions with the original user interface, perform new actions in the embedding context, pass information to some other context for processing, and the like.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 3-7","FIG. 3"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 5","FIG. 5","FIG. 6"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9","b":["1000","1000","1070","1070","1000","1070","1000"]},"As shown in , the system  includes one or more display devices  usable to display information to a user, and one or more user input devices  usable to allow the user or users to input data into the system . The one or more display devices  and the one or more input devices  are connected to the system  through an input\/output interface  via one or more communication links  and , respectively. The one or more communication links  and  are generally similar to the data connection  above.","In various exemplary embodiments, the system  includes at least one or more of a controller , a memory , a user interface augmentation circuit or routine , a content instrumenting circuit or routine , and a content repurposing circuit or routine , all of which are interconnected over one or more data and\/or control buses and\/or application programming interfaces .","In various exemplary embodiments, the controller  controls the operation of the other components of the system . In various exemplary embodiments, the controller  also controls the flow of data between various components of the system  as needed. In various exemplary embodiments, the memory  stores information coming into or going out of the system . In various exemplary embodiments, the memory  stores any necessary programs and\/or data implementing the functions of the system , and\/or stores data, such as, for example, data, actions, events required for restructuring a user interface component of a computer application.","In various exemplary embodiments, the memory  is implemented using any appropriate combination of alterable, volatile or non-volatile memory or non-alterable, or fixed, memory. In various exemplary embodiments, the alterable memory, whether volatile or non-volatile, is implemented using any one or more of static or dynamic RAM, a floppy disk and disk drive, a writable or re-rewriteable optical disk and disk drive, a hard drive, flash memory or the like. Similarly, in various exemplary embodiments, the non-alterable or fixed memory is implemented using any one or more of ROM, PROM, EPROM, EEPROM, an optical ROM disk, such as a CD-ROM or DVD-ROM disk, and disk drive or the like.","In various exemplary embodiments, the controller performs various functions, selected from a list including, but not limited to, augmenting one or more existing user interface components, instrumenting content viewed in one or more existing user interface components, creating one or more multi-directionally communicating processes between multiple existing user interface components, and other like functions. In creating multi-directionally communications between existing user interface components, the controller is able to define and redefine what behaviors, appearances, and content are being processed in and between any of the interface components of the system. This includes but is not limited to repurposing input event processing, showing different styles, modifying content, communicating state to other systems, and accepting state from other systems and distributing that to interface components with the repurposed system.","This invention has been described in conjunction with the exemplary embodiments outlined above. Various alternatives, modifications, variations, and\/or improvements are within the spirit and scope of the invention, whether known or presently unforeseen. Accordingly, the exemplary embodiments of the invention, as set forth above, are intended to be illustrative, not limiting. Various changes may be made without departing from the spirit and scope of the invention. Therefore, the invention is intended to embrace all known or later developed alternatives, modifications, variations and\/or improvements."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various exemplary embodiments of the systems and methods of this invention will be described in detail below, with reference to the following figures, in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 3-7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
