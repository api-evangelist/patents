---
title: IP unified agent using an XML voice enabled web based application server
abstract: A method for inter-process communication between non-persistent application instances includes establishing a first non-persistent application instance serving a first party and establishing a second non-persistent application instance serving a second party. In the first application instance, an HTML page is generated having instructions for a persistent browser instance having received the HTML page to initiate a new application session for the second party. Thus, inter-application communication is possible where one non-persistent application instance is able to notify and/or interrupt another non-persistent application instance by way of an associated real time component (web browser or proxy browser).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07836188&OS=07836188&RS=07836188
owner: Cisco Technology, Inc.
number: 07836188
owner_city: San Jose
owner_country: US
publication_date: 20000629
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["This application claims priority from provisional application No. 60\/152,316, filed Sep. 3, 1999, the disclosure of which is incorporated in its entirety herein by reference.","1. Field of the Invention","The present invention relates to generating and executing voice enabled web applications within a hypertext markup language (HTML) and hypertext transport protocol (HTTP) framework.","2. Description of Related Art","The evolution of the public switched telephone network has resulted in a variety of voice applications and services that can be provided to individual subscribers and business subscribers. Such services include voice messaging systems that enable landline or wireless subscribers to record, playback, and forward voice mail messages. However, the ability to provide enhanced services to subscribers of the public switched telephone network is directly affected by the limitations of the public switched telephone network. In particular, the public switched telephone network operates according to a protocol that is specifically designed for the transport of voice signals; hence any modifications necessary to provide enhanced services can only be done by switch vendors that have sufficient know-how of the existing public switched telephone network infrastructure.","An open standards-based Internet protocol (IP) network, such as the World Wide Web, the Internet, or a corporate intranet, provides client-server type application services for clients by enabling the clients to request application services from remote servers using standardized protocols, for example hypertext transport protocol (HTTP). The web server application environment can include web server software, such as Apache, implemented on a computer system attached to the IP network. Web-based applications are composed of HTML pages, logic, and database functions. In addition, the web server may provide logging and monitoring capabilities.","In contrast to the public switched telephone network, the open standards-based IP network has enabled the proliferation of web based applications written by web application developers using ever increasing web development tools. Hence, the ever increasing popularity of web applications and web development tools provides substantial resources for application developers to develop robust web applications in a relatively short time and an economical manner. However, one important distinction between telephony-based applications and web-based applications is that telephony-based applications are state aware, whereas web-based applications are stateless.","In particular, telephony applications are state aware to ensure that prescribed operations between the telephony application servers and the user telephony devices occur in a prescribed sequence. For example, operations such as call processing operations, voicemail operations, call forwarding, etc., require that specific actions occur in a specific sequence to enable the multiple components of the public switched telephone network to complete the prescribed operations.","The web-based applications running in the IP network, however, are state-less and transient in nature, and do not maintain application state because application state requires an interactive communication between the browser and back-end database servers accessed by the browsers via a HTTP-based web server. However, an HTTP server provides asynchronous execution of HTML applications, where the web applications in response to reception of a specific request in the form of a URL from a client, instantiate a program configured for execution of the specific request, send an HTML web page back to the client, and terminate the program instance that executed the specific request. Storage of application state information in the form of a \u201ccookie\u201d is not practical because some users prefer not to enable cookies on their browser, and because the passing of a large amount of state information as would normally be required for voice-type applications between the browser and the web application would substantially reduce the bandwidth available for the client.","Commonly-assigned, copending application Ser. No. 09\/480,485, filed Jan. 11, 2000, entitled Application Server Configured for Dynamically Generating Web Pages for Voice Enabled Web Applications, the disclosure of which is incorporated in its entirety herein by reference, discloses an application server that executes a voice-enabled web application by runtime execution of extensible markup language (XML) documents that define the voice-enabled web application to be executed. The application server includes a runtime environment that establishes an efficient, high-speed connection to a web server. The application server, in response to receiving a user request from a user, accesses a selected XML page that defines at least a part of the voice application to be executed for the user. The XML page may describe any one of a user interface such as dynamic generation of a menu of options or a prompt for a password, an application logic operation, or a function capability such as generating a function call to an external resource. The application server then parses the XML page, and executes the operation described by the XML page, for example dynamically generating an HTML page having voice application control content, or fetching another XML page to continue application processing. In addition, the application server may access an XML page that stores application state information, enabling the application server to be state-aware relative to the user interaction. Hence, the XML page, which can be written using a conventional editor or word processor, defines the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.","Hence, web programmers can write voice-enabled web applications, using the teachings of the above-incorporated application Ser. No. 09\/480,485, by writing XML pages that specify respective voice application operations to be performed. The XML documents have a distinct feature of having tags that allow a web browser (or other software) to identify information as being a specific kind or type of information. Hence, the XML documents define the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.","Web-based instant messaging applications have gained popularity since the applications provide a user immediate notification of a message from another party. More particularly, if a user is online and is running an instant messaging application, the user is registered with a server that tracks user sessions and activity. When the user sends a message to another party, the message is immediately apparent to the other party if the other party is online and a subscriber to the messaging service. If the other party is not online, the message is queued and can be retrieved at a later time. In this way, a user can respond if and when the user pleases, but the user has immediate knowledge of the other party's response. This type of communication is useful but limited, since all parties who wish to communicate with instant messages must be registered with the server using a proprietary application and must use a computer to employ the application to send and receive instant messages.","There is a need for an arrangement that enables users to deploy a scalable, open standards based unified interface for calling services and message management in a single architecture on an open standards based network such as an Internet Protocol (IP) network.","These and other needs are attained by the present invention, where an application server, configured for executing a messaging application defined by XML documents, provides an application runtime environment configured for dynamically generating, for a first party, a hypertext markup language (HTML) document having instructions for a browser to notify a second party of a new application session for the second party so as to present a message from the first party to the second party, based on a determination that the second party is available to receive the message. The application runtime environment is configured to access a common resource containing information regarding both the first and second parties.","Another aspect of the present invention provides a method for inter-process communication between non-persistent application instances. The method includes establishing a first non-persistent application instance serving a first party and establishing a second non-persistent application instance serving a second party. An HTML page is generated, in the first application instance, having instructions for a persistent browser instance, having received the HTML page, to initiate a new application session for the second party.","Hence voice-based instant messaging services, calling service and voice messaging services may be deployed on a platform that is customizable, scalable, and built upon open standards such as Internet protocol. By preserving multiple sessions, parties involved in instant messaging session, a voice messaging session or a calling session can suspend their present session or activity for a moment to create a new session to exchange audio messages and when finished, can instantly resume the suspended session. Thus, users have freedom of access providing them the means of making and receiving calls and message management anytime and virtually anywhere.","Additional advantages and novel features of the invention will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed out in the appended claims.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["42","42","64","44","42","44","50","42","56"],"i":["a ","b","a ","b "]},"As shown in , each of the clients (tiny clients, skinny clients, thin clients and fat clients) are able to communicate via a single, unified architecture  that enables voice communications services between different clients, regardless of whether the client actually has browser capabilities. Hence, the fat client and the thin client are able to execute voice enabled web applications without any hardware modification or any modification to the actual browser; rather, the browsers  in the clients and merely are provided with an executable voice resource configured for providing browser audio control, described below.","The user devices , , and , illustrated as a cordless telephone , a fax machine having an attached telephone, and an analog telephone , are referred to herein as \u201cskinny clients\u201d, defined as devices that are able to interface with a user to provide voice and\/or data services (e.g., via a modem) but cannot perform any control of the associated access subnetwork.","The wireless user devices , , and , illustrated as a cellular telephone (e.g., AMPS, TDMA, or CDMA) , a handheld computing device (e.g., a 3-Com Palm Computing or Windows CE-based handheld device) , and a pager , are referred to as tiny clients. \u201cTiny clients\u201d are distinguishable from skinny clients in that the tiny clients tend to have even less functionality in providing input and output interaction with a user, rely exclusively on the executable application in an access subnetwork to initiate communications; in addition, tiny clients may not be able to send or receive audio signals such as voice signals at all.","Hence, the skinny clients , , and and the tiny clients , , and access the voice messaging services in the unified network  via a proxy browser , configured for providing an IP and HTTP interface for the skinny clients and the tiny clients. In particular, browsers operate by interpreting tags within a web page supplied via an HTTP connection, and presenting to a user media content information (e.g., text, graphics, streaming video, sound, etc.) based on the browser capabilities; if a browser is unable to interpret a tag, for example because the browser does not have the appropriate executable plug-in resource, then the browser typically will ignore the unknown tag. Hence, the proxy browser  can provide to each of the skinny clients and tiny clients the appropriate media content based on the capabilities of the corresponding client, such that the cordless telephone and telephone would receive analog audio signals played by the proxy browser  and no text information (unless a display is available); the fax machine and pager would only receive data\/text information, and the cellular telephone and the handheld computing device would receive both voice and data information. Hence, the proxy browser  interfaces between the IP network and the respective local access devices for the skinny clients and the tiny clients to provide access to the messaging network .","The proxy browser  and the web browsers  within the fat client and the thin client execute voice enabled web applications by sending data and requests to a web server , and receiving hypertext markup language (HTML) web pages from the web server , according to hypertext transport protocol (HTTP). The web server  serves as an interface between the browsers and an application server  that provides an executable runtime environment for XML voice applications . For example, the web server  may access the application server  across a common gateway interface (CGI) as illustrated in , by issuing a function call across an application programming interface (API), or by requesting a published XML document or an audio file requested by one of the browsers  or . The application server , in response to receiving a request from the web server , may either supply the requested information in the form of an HTML page having XML tags for audio control by a voice resource within the browser, or may perform processing and return a calculated value to enable the browser  or  to perform additional processing.","The application server  accesses selected stored XML application pages  (i.e., XML pages that define an application) and in response generates new HTML pages having XML tags during runtime and supplies the generated HTML pages having XML tags to the web server . Since multiple transactions may need to occur between the browser  or  and the application server , the application server  is configured for storing for each existing user session a data record, referred to as a \u201cbrownie\u201d, that identifies the state of the existing user session; hence, the application server  can instantiate a procedure, return the necessary data, and terminate the procedure without the necessity of maintaining the instance running throughout the entire user session.","Hence, the application server  executes voice application operations from a stored XML document based on a transient application state, where the application server  terminates the application instance after outputting the generated XML media information to the browser  or .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 1"],"b":["66","66","64","56","62","18","66","68","66","68"]},"The voice application server  is configured for accessing database application programming interfaces (API's)  to external resources based on prescribed procedures that may be called during parsing of an XML tags in a selected XML document . As described below, the application server  issues function calls to APIs  for accessing the external resources for prescribed operations, such as IMAP , LDAP , Web Content , Text-to-Speech , Registry Server , enabling the deployment of a robust, scalable calling service and message management.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 3"],"b":["66","66","66","94","68","72","92","66","96","66","64"]},"The application server  also includes a runtime environment  for execution of the parsed XML documents. As described above, the runtime environment  may selectively execute any one of user interface operation , a logic operation , or a procedure call  as specified by the parsed XML document by executing a corresponding set of executable functions based on the rule set for the corresponding operation. In particular, the application runtime environment  includes a tag implementation module  that implements the XML tags parsed by the XML parser . The tag implementation module  performs relatively low-level operations, for example dynamically generating an XML menu page using executable functions specified by a menu rule set in response to detecting a menu tag, performing a logical operation using executable functions specified by a logic rule set in response to a decision tag, or fetching an audio (.wav) file in response to detecting a sound tag. Hence, the tag implementation module  implements the tag operations that are specified within the XML framework of the stored XML documents.","The application server  also includes a set of libraries  and  that may be implemented as dynamically linked libraries (DLLs) or application programming interface (API) libraries. The libraries ,  enable the runtime environment  to implement the procedures  as specified by the appropriate XML document. The application server  may issue a function call to one of a plurality of IP protocol compliant remote resources LDAP , IMAP , Registry Server , Text-To-Speech , or Fax Server . For example, the PHP hypertext processor includes executable routines capable of accessing the resources.","The LDAP data store  can include user information for instant messaging such as the identities and telephone numbers of persons that the user wishes to communicate with, and a list of persons and telephone numbers which the user wishes to block from instant messaging applications. The IMAP message store  can store greetings and\/or messages (e.g., voice, e-mail, or fax) in standard e-mail format with audio file attachments.","The registry server  is configured to keep track of users who are currently active in an application session, as will be explained in more detail below. In addition, the application server  may issue function calls for a text to speech resource , or an outgoing fax server , in order to deliver different-format messages to users, depending on the capability of the user devices. Hence, the voice application server  may access the text to speech resource  for converting an e-mail message into a audio-based message to be played for the user of the telephony device . Similarly, the voice application server  may determine that the proxy browser  does not interface with a telephony gateway device having facsimile transmission capabilities, hence the fax message retrieved from the IMAP message store  would be sent to the outgoing fax server  for retransmission to another telephone number identified as serving a fax machine. Note that the mechanisms for accessing the resources , , ,  and  should be established within the application server before use of XML documents that reference those services. Once the resources , , ,  and  are established, the application runtime environment  can perform a function operation by using executable functions specified by a function call rule set.","An arrangement for executing unified messaging application operations will now be described.","The application server  is configured for distributing messaging operations across multiple platforms by obtaining subscriber profile information from the LDAP message store , and storing and retrieving messages on the IMAP message store  in the form of e-mail messages having file attachments.","In particular, unified messaging involves the use of a directory structure and a message store capable of storing more than one type of message. The storage of e-mail messages within an IMAP message store  provides the advantage that messages can be stored according to subscriber directories, where each subscriber may have multiple subdirectories for storage of different messages, greetings, etc. In addition, the storage of the mail messages within the IMAP message store  by the application server  enables the application server  to store messages as attachments to the e-mail messages, so long as the attachments are compliant with the e-mail messaging protocols, such as simple mail transport protocol (SMTP) and RFC .","The voice application server  is configured for converting a received message, such as a voice message supplied by the proxy browser  as a MIME-encoded or DPIM-compliant audio file, into a standard protocol message supported by standardized protocols, such as simple mail transport protocol (SMTP). In particular, the application server  may implement the conversion of messages for example by generating a procedure call  to a prescribed API within the library . The application server  converts the .wav file, which is a binary file, by using a binary encode process to encode the .wav file into an ASCII string not to exceed 80 columns in width. The string is divided into 80 characters in length, and formatted to resemble a URL encoded string. The application server  also generates a header that includes messaging information, for example a \u201cTo\u201d field, a \u201cFrom\u201d field, a \u201cSubject\u201d field, date and timestamp field, and a message format field that specifies the MIME encoding of the original message, for example \u201c.wav\u201d for audio files, \u201c.txt\u201d for e-mail messages, or \u201c.tiff\u201d for image documents such as facsimile transmissions.","Message format conversion may also be necessary, depending on the capabilities of the device couple to the proxy browser . For example, a user having a conventional telephone capable only of audio input and output may need the text to speech resource  in order to listen to e-mail messages, or to listen to header information for a received fax. However if a user has an attached fax machine but the telephony interface device (e.g., a voice over IP gateway or PBX) coupled to the proxy browser  lacks facsimile transmission capabilities, the application server  may access the outgoing fax server  for actual transmission of an image stored in the IMAP message store .","Additional details of unified messaging service are disclosed in commonly assigned, co-pending application Ser. No. 09\/588,293, filed Jun. 7, 2000 entitled, \u201cUnified Messaging System Using Web Based Application Server For Management Of Messages Using Standardized Servers\u201d, the disclosure of which is incorporated in its entirety herein by reference.","An arrangement for executing calling services in a non-persistent application session will now be described.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 4"]},"As shown in , the application server  receives in step  an HTTP request from the proxy browser  for initiation of a session for a caller . The application server  generates a new brownie in step  if the caller  initiates a new session, else accesses an existing brownie from the registry  based on a valid session identifier specified within the HTTP URL request. In response to the HTTP request, the application server  generates in step  an HTML page with XML tags including an audio file (.wav file) specifying playing of the audio file, with prompts and updates the brownie with the current application state. The HTML page is forwarded for execution by the proxy browser  in step  causes to be played a message such as \u201cHello, this is your intelligent dial tone, what would you like to do? Press 1 for accessing your call list, press 2 if you know the name, telephone number or e-mail address of the person you want to call, press 3 for white pages, or simply enter the ten digit telephone number,\u201d etc.","The application server  then goes to a restful (non-persistent) state in step . Based on an input from the caller  received as an HTTP post in step , the application server  resumes the application session from the application state specified in the brownie, and accesses the LDAP data store  to obtain the called party information as defined by the caller. For example, if the caller knows the name and telephone number but not the e-mail address of a called party, the IP address and\/or e-mail address associated with the name is retrieved from the LDAP  by the application server , eliminating the necessity for existing telephony gate agents such as gatekeepers, call mangers, or virtual switch controllers. If necessary, for a specific calling service such as instant messaging, the application server  may also access registry server  () to determine if the called party is \u201cactive\u201d (e.g., currently in a valid session with its corresponding application server \u2032). Note that the LDAP directory  may also search other LDAP directories if the called party is unknown.","The application server, in step , generates a second HTML page with XML tags having instructions for contacting the called party and outputs the second HTML page. Depending on the nature of the calling service being requested by the calling party , the HTML page is sent to the proxy browser , or alternately to the proxy browser \u2032 for initiation of a new application session. In the former case, in step , the proxy browser  establishes a Real Time Protocol (RTP) session with the destination IP address (e.g., the PC web browser \u2032) or causes a telephony device (e.g., a PBX) to call the called party and bridge the call to connect the caller on telephone  with the called party on telephone \u2032 (). Alternately, the caller can be connected with the called party if the application server  sends a new session URL containing a request for an out-dial to proxy browser \u2032. In this case, the called party is not associated with proxy browser \u2032 until the call is answered.","The application server  determines in step  that the called party has hung up (ended session) for example, by receiving an HTTP request for the proxy browser  indicating the called party has ended the call. If the called party has not ended the session, the session continues in step . If the called party has ended the session, in step , the application server  outputs an HTML page to proxy browser  which plays a message such as \u201cWhat would you like to do next?\u201d, with prompts. Thus, in the disclosed embodiment, the caller can connect to multiple destinations from a single call. Similar variations may be utilized upon detecting an interval of inactivity indicating the calling party has been put on \u201chold\u201d.","Thus, the calling service operations described above employs the non-persistent application server . The invention also relates to inter-process communication between non-persistent applications by way of an associated real time component, such as a browser.","An example of one non-persistent application session initiating another non-persistent application session in the context of instant messaging application operations will now be described.","With reference to , a voice application server \u2032 permits a receiving party to participate in instant messaging with the sending party via web server \u2032, proxy browser \u2032, telephone \u2032 and common APIs . The application server \u2032 accesses selected stored XML application pages \u2032 (i.e., XML pages that define an application) and APIs  for function calls to the LDAP , IMAP , Registry Server , Text-To-Speech , or Fax Server  in a manner similar to application server  serving the sending party.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 5","FIG. 5"]},"As shown in , the application server  receives in step  an HTTP request from the proxy browser  for initiation of a session enabling a sending party to send an instant voice message. The application server  responds to the HTTP request in step  by accessing a selected XML document  from the document database  that specifies the application operations for generating an HTML document that includes an audible prompt menu for sending an instant message. The application server  also generates a new brownie in step  if the sending party is initiating a session with the application server , else accesses an existing brownie from the registry  based on a valid session identifier specified within the HTTP URL request. The application server  accesses, in step , the LDAP data store  of the sending party to obtain the sending party's profile including his or her \u201cbuddy list\u201d, and generates to HTML document including the instant message prompt menu for the browser  in step .","The application server  then accesses the registry server  in step  to update the registry to indicate that the sending party is now available for instant messaging by storing the sending party's identity and the session identifier that identifies the corresponding brownie. The registry server  can employ a SQL database or have an XML format.","The browser serving the sending party posts the user's input from the prompt menu and sends an HTTP request to the application server  identifying the receiving party in step .","The application server  accesses the LDAP data store  in step  to determine in step  if the receiving party has authorized the receipt of messages from the sending party. If the receiving party has not authorized receipt of a message from the sending party, messaging is blocked in step . If authorization is given, the application server  in step  generates an HTML page enabling the sending party to record a voice message for the receiving party.","The application server  accesses the registry server  in step  to determine if receiving party is available for instant messaging. If the receiving party is available (currently in a session with application server \u2032 via telephone \u2032), the application server  serving the sending party obtains the existing session identifier for the receiving party, and generates in step  a new brownie having a new session identifier for a new session for the receiving party. The session identifiers are cross-referenced in the existing brownie and the new brownie (e.g., new session ID stored in existing brownie and existing session ID stored in new brownie) to enable the voice application server \u2032 to \u201cinterrupt\u201d, in a controllable manner, the existing session with the new session providing the instant message.","The application server  generates another HTML page which includes a URL having instructions for initiating the new session, including the new session identifier for retrieval of the voice message. This HTML page is sent to the persistent proxy browser \u2032 of the receiving party in step . In step , the proxy browser \u2032 automatically posts the URL to the application server \u2032 which responds to the URL by accessing the specified XML document having tags specifying placing the existing brownie on \u201chold\u201d and accessing the new brownie for generation of a new HTML page; the new HTML page causes a prompt to be played for the receiving party such as, \u201cHello, you have an instant message from Mary Smith. Press 1 to listen, or press 2 to resume your present session.\u201d If the receiving party inputs 2 in step , the application server \u2032 deletes the new brownie, reactivates the brownie on \u201chold\u201d and resumes the present session in step . If 1 is inputted, in step , the instant message is played with prompts such as, \u201cTo respond to the message press 1, to connect with the sending party press 2, to store the message press 3\u201d. If the receiving party now inputs 1, in step , the receiving party can respond to the instant message by creating his or her own instant message in step . If the receiving party chooses to speak with the sending party, the receiving party inputs 2 and the call is bridged (via voice over IP) in step . If the receiving party wants to store the message, the receiving party inputs 3 and the message is stored in the IMAP message store  in step  so that the receiving party may listen to the message at a later time.","It can be appreciated that instead of having the application server \u2032 place the existing brownie on hold and access the new brownie, the proxy browser \u2032 alone can manage the \u201chold\u201d function. For example, the proxy browser \u2032 can be configured to distinguish between active and inactive HTML pages and chase the active page.","Thus, the proxy browser \u2032, a persistent process on behalf of the user of the telephony device \u2032, listens for unsolicited notification from authorized sources with additional information being sent to the proxy browser \u2032 to accommodate real-time interruptions. Additional details regarding execution of XML documents by the application server  are disclosed in the above-incorporated application Ser. No. 09\/480,485.","Hence, according to the disclosed embodiments, instant messaging services, voice messaging service, and calling services (unified agent applications) may interact on a platform that is customizable, scalable, and built upon open standards such as Internet protocol.","Further, according to the disclosed embodiment, inter-application communication is possible where one non-persistent application instance is able to notify and\/or interrupt another non-persistent application instance by way of an associated real time component (web browser or proxy browser).","While this invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not limited to the disclosed embodiments, but, on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is made to the attached drawings, wherein elements having the same reference numeral designations represent like elements throughout and wherein:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
