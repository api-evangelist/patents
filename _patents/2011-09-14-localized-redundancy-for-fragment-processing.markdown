---
title: Localized redundancy for fragment processing
abstract: A live media stream encoding system encodes live media streams into numerous variants of the live media streams each including multiple fragments. Live media streams are delineated, dispatched as jobs, and converted using distributed and dynamically scalable encoder and fragmenter resources without using any centralized encoding management system. Encoded fragments are maintained in shared storage and accessed as needed by devices during playback. Localized redundancy and/or geographic redundancy is provided throughout the system to prevent disruption upon failure of a particular node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09197900&OS=09197900&RS=09197900
owner: MobiTV, Inc.
number: 09197900
owner_city: Emeryville
owner_country: US
publication_date: 20110914
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","DESCRIPTION OF RELATED ART","DESCRIPTION OF EXAMPLE EMBODIMENTS","Example Embodiments"],"p":["The present disclosure relates to localized redundancy for fragment processing.","Live streams typically involve encoding or re-encoding prior to transmission to devices and users associated with the devices. In many instances, live streams are encoded into a format such as H.264 (MPEG-4 Part 10). H.264 is a block oriented motion compensation based codec that is widely used in Blu-ray Discs and streaming Internet sources. H.264 encoding can be resource intensive, and specialized hardware is often used to accelerate encoding particularly at high quality levels. In many implementations, live stream encoding servers are configured with application specific hardware to receive one or more channels or live streams and encode the channels or live streams into particular formats. The encoding servers may have the capacity to perform real-time live encoding on up to half a dozen live streams simultaneously.","However, real-time live encoding has a number of limitations. Consequently, the techniques and mechanisms of the present invention provide improved mechanisms for performing live stream encoding.","Reference will now be made in detail to some specific examples of the invention including the best modes contemplated by the inventors for carrying out the invention. Examples of these specific embodiments are illustrated in the accompanying drawings. While the invention is described in conjunction with these specific embodiments, it will be understood that it is not intended to limit the invention to the described embodiments. On the contrary, it is intended to cover alternatives, modifications, and equivalents as may be included within the spirit and scope of the invention as defined by the appended claims.","For example, the techniques of the present invention will be described in the context of live media streams. However, it should be noted that live streams include not only real-time live streams but other live and near live streams as well. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. Particular example embodiments of the present invention may be implemented without some or all of these specific details. In other instances, well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.","Various techniques and mechanisms of the present invention will sometimes be described in singular form for clarity. However, it should be noted that some embodiments include multiple iterations of a technique or multiple instantiations of a mechanism unless noted otherwise. For example, a system uses a processor in a variety of contexts. However, it will be appreciated that a system can use multiple processors while remaining within the scope of the present invention unless otherwise noted. Furthermore, the techniques and mechanisms of the present invention will sometimes describe a connection between two entities. It should be noted that a connection between two entities does not necessarily mean a direct, unimpeded connection, as a variety of other entities may reside between the two entities. For example, a processor may be connected to memory, but it will be appreciated that a variety of bridges and controllers may reside between the processor and memory. Consequently, a connection does not necessarily mean a direct, unimpeded connection unless otherwise noted.","Overview","A live media stream encoding system encodes live media streams into numerous variants of the live media streams each including multiple fragments. Live media streams are delineated, dispatched as jobs, and converted using distributed and dynamically scalable encoder and fragmenter resources without using any centralized encoding management system. Encoded fragments are maintained in shared storage and accessed as needed by devices during playback. Localized redundancy and\/or geographic redundancy is provided throughout the system to prevent disruption upon failure of a particular node.","A variety of mechanisms are used to deliver media streams to devices. Different devices and different networks may require different variants of a media stream. Some devices may request a higher bit rate or higher resolution stream while changes in network conditions may necessitate a stream or switching to a stream having a lower quality level. Some devices may be able to handle higher resolutions, while others may have limited processing resources or limited screen real estate. Consequently, many systems will encode numerous variants of each media stream. For example, a media provider covering 152 channels may encode 8 variants of each channel for a total of 1216 variants. In some instances, a media provider may actually encode each channel into 8 variants for each supported codec.","Encoding live media streams can be particularly delay and disruption sensitive. Consequently, resources for encoding live media streams are typically overprovisioned. Plentiful computing and network resources are allocated to live media stream encoding in order to ensure timely delivery of live media stream data to devices. According to various embodiments, a special purpose encoder may be able to simultaneously encode four variants of a media stream. Two special purpose encoders would be allocated to each channel. In some instances, backup special purpose encoders would simultaneously perform the same operations or sit in standby in the event that a particular special purpose encoder would fail.","However, overprovisioning, redundant encoders, and continuous encoding on special purpose encoders or even general purpose computing systems can be inefficient, particularly when assurances of redundancy, high reliability, latency, and throughput are required. Consequently, the techniques of the present invention provide mechanisms for localized redundancy and\/or geographically distributed redundancy for encoding of live media streams.","Multiple resources at each stage of an encoding and fragmentation process can perform the same operations. Media streams received from satellite or content provider sources can then be weighted, delineated, and distributed to redundant stateless encoders and fragmentation systems or fraggers. In some examples, media streams received from a satellite source as separated into Groups of Pictures (GOPs) and dispatched to different H.264\/MPEG-4 part 10 encoders and fraggers in a cloud environment. The encoders and fraggers process their particular assigned jobs and send encoded fragments to distributed storage. Users can then access fragments corresponding to a particular variant media stream of a selected channel. Additional encoders and fraggers can be brought online or taken offline on an as needed basis. According to various embodiments, multiple encoders and fraggers may both perform the same job and provide the same encoded fragments onto shared storage.","Conventional MPEG-4 files require that a player on a device parse the entire header before any of the data can be decoded. Parsing the entire header can take a notable amount of time, particularly on devices with limited network and processing resources. Consequently, the techniques and mechanisms of the present invention provide a fragmented MPEG-4 framework that allows playback upon receiving a first MPEG-4 file fragment. A second MPEG-4 file fragment can be requested using information included in the first MPEG-4 file fragment. According to various embodiments, the second MPEG-4 file fragment requested may be a fragment corresponding to a higher or lower bit-rate stream than the stream associated with the first file fragment.","MPEG-4 is an extensible container format that does not have a fixed structure for describing media types. Instead, MPEG-4 has an object hierarchy that allows custom structures to be defined for each format. The format description is stored in the sample description (\u2018stsd\u2019) box for each stream. The sample description box may include information that may not be known until all data has been encoded. For example, the sample description box may include an average bit rate that is not known prior to encoding.","According to various embodiments, MPEG-4 files are fragmented so that a live stream can be intelligent encoded in a distributed architecture on dynamically scalable hardware, recorded, and played back in a close to live manner. MPEG-4 files can be created without having to wait until all content is written to prepare the movie headers. To allow for MPEG-4 fragmentation without out of band signaling, a box structure is provided to include synchronization information, end of file information, and chapter information. According to various embodiments, synchronization information is used to synchronize audio and video when playback entails starting in the middle of a stream. End of file information signals when the current program or file is over. This may include information to continue streaming the next program or file. Chapter information may be used for video on demand content that is broken up into chapters, possibly separated by advertisement slots.","TCP is more widely used than UDP and networking technologies including switch, load balancer, and network card technologies are more developed for TCP than for UDP. Consequently, techniques and mechanisms are provided for delivering fragmented live media over TCP. Sequence information is also maintained and\/or modified to allow seamless client device operation. Timing and sequence information in a media stream is preserved.","Requests are exposed as separate files to clients and files should playback on players that handle fragmented MPEG-4. Live or near live, video on demand (VOD), and digital video record (DVR) content can all be encoded on distributed and dynamically scalable encoding resources and processed using fragmentation.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":"101"},"After the media stream is delineated into GOPs, a work dispatcher  is notified that a GOP is available. According to various embodiments, the work dispatcher  determines if it is the one assigned to work on it as well as what should be done with the GOP. According to various embodiments, the work dispatcher may determine that the GOP should be encoded into 8 different variants. In particular embodiments, the work dispatcher  creates a description of what needs to be done, assigns a weight or priority level to the job, and sends the job to job queues . According to various embodiments, job queues are first in first out (FIFO) queues that are empty most of the time. Encoders\/fraggers  request jobs and obtain them from the job queues . According to various embodiments, jobs may be ordered in a job queue based on weight. In particular embodiments, encoders\/fraggers  may select higher priority jobs first from the job queues.","In particular embodiments, different priority jobs are placed in different priority job queues. Multiple jobs may be taken from the higher priority job queues before a single job is taken from the lower priority job queues. According to various embodiments, highest priority jobs are processed before lower priority jobs. In particular embodiments, queues are assigned percentage of service values. A high priority queue may get serviced 40% of the time. A medium priority queue 30% of the time, and the remaining queues 20% and 10% of the time by the encoders\/fraggers. According to various embodiments, hundreds or thousands of encoders\/fraggers reside in a system. In particular embodiments, the same device performs both encoding and fragmentation, but it should be noted that separated devices can be used to perform these operations. According to various embodiments, additional encoder\/fraggers can be dynamically brought online when resource usage reaches a particular threshold. Alternatively, encoder\/fraggers can be taken offline when resources usage falls beneath a particular floor. According to various embodiments, encoder\/fragger  is a virtual machine that may reside on one or more physical servers that may or may not have specialized encoding hardware. In particular embodiments, a cloud service determines how many of these virtual machines to use based on established thresholds.","According to various embodiments, a unique identifier is provided for each GOP and a log of each step is maintained. After the encoder\/fragger  completes processing a job and outputs an encoded fragment, the encoded fragment is maintained in distributed and redundant storage . In one example, distributed and redundant storage  is a virtualized scale out network attached storage system. The distributed and redundant storage  allows a system to maintain numerous fragments on any number of virtualized storage devices.","According to various embodiments, fragments on distributed and redundant storage  are accessible by fragment server . The fragment server  provides the caching layer with fragments for clients. The design philosophy behind the client\/server API minimizes round trips and reduces complexity as much as possible when it comes to delivery of the media data to a client device. The fragment server  provides live streams and\/or DVR configurations.","According to various embodiments, a client device uses a media component that requests fragmented MPEG-4 files, allows trick-play, and manages bandwidth adaptation. In particular embodiments, each client device receives a media stream that is behind a live stream by 12 seconds or more. There may also be server buffering. According to various embodiments, GOP delineation, encoding, fragmentation can occur within a server buffering timeframe. By having numerous encoder\/fraggers, capacity can be increased or decreased by percentage points at any time. According to various embodiments, the encoding and fragmentation system at data center  can be replicated at a geographically separate data center . Data center  may have a work dispatcher , job queues , encoder\/fragger , distributed and redundant storage , and fragment servers  that perform substantially the same or a reduced set of operations as the encoding and fragmentation system at data center . In particular embodiments, a system at a redundant data center may encode a subset of variants to provide basic service using geographically separate redundancy to users upon catastrophic failure.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["201","201"]},"After the media stream is delineated into GOPs, an elastic load balancer  is used to distribute work to work dispatchers  and . According to various embodiments, a live stream variant encoding manager  monitors live stream variant consumption. If particular variant are not being consumed, jobs for creating those variants are no longer performed. If particular not yet available variants are requested, then jobs creating those variants can be generated by the work dispatcher  at the request of the live stream variant encoding manager . If a work dispatcher fails right as it takes a notification, another notification occurs to a different work dispatcher. Two notifications for the same GOP will end up on two different machines. At each work dispatcher  and , there may also be a proxy. According to various embodiments, the GOP delineator  resides on a different data center than the work dispatchers  and . Using proxies at work dispatchers  and  allows for a single transfer of a media stream GOP between data centers.","According to various embodiments, the work dispatchers  and  determine characteristics of a particular job and what should be done with the GOP. According to various embodiments, the work dispatchers  and  may determine that the GOP should be encoded into 8 different variants. In particular embodiments, the work dispatchers  and  create descriptions of what needs to be done and send jobs to job queues . According to various embodiments, job queues  include an active job queue and a standby job queue. According to various embodiments, job queues are first in first out (FIFO) queues that are empty most of the time. Timeouts may be associated with each job in the queue. Encoders\/fraggers , , and  request jobs and obtain them from the job queues . In particular embodiments, encoders\/fraggers , , and  are identical and can be dynamically activated or deactivated. According to various embodiments, hundreds or thousands of encoders\/fraggers reside in a system.","In particular embodiments, the same device performs both encoding and fragmentation, but it should be noted that separated devices can be used to perform these operations. According to various embodiments, additional encoder\/fraggers can be dynamically brought online when resource usage reaches a particular threshold. Alternatively, encoder\/fraggers can be taken offline when resources usage falls beneath a particular floor. According to various embodiments, encoder\/fragger , , and  is a virtual machine that may reside on one or more physical servers that may or may not have specialized encoding hardware. In particular embodiments, a cloud service determines how many of these virtual machines to use based on established thresholds.","According to various embodiments, encoders\/fraggers , , and  are stateless. According to various embodiments, a unique identifier is provided for each GOP and a log of each step is maintained. If a particular encoder\/fragger fails at any point in the process, another encoder\/fragger can perform encoding and fragmentation operations. After the encoders\/fraggers , , and  complete the jobs and generate encoded fragments, the encoded fragments are maintained in distributed and redundant storage . In one example, distributed and redundant storage  is a virtualized scale out network attached storage system. The distributed and redundant storage  includes nodes  and , allowing a system to maintain numerous fragments on any number of virtualized storage devices.","According to various embodiments, fragments on distributed and redundant storage  are accessible by fragment servers , , and . The fragment servers , , and  provide the caching layer with fragments for clients. The design philosophy behind the client\/server API minimizes round trips and reduces complexity as much as possible when it comes to delivery of the media data to a client device. The fragment servers , , and  provide live streams and\/or DVR configurations. According to various embodiments, fragment servers also operate without state. In particular embodiments, fragments servers operate using HTTP get requests. According to various embodiments, each process allows a flow to continue without having a centralized control point. An elastic load balancer  distributes fragment requests from a cloud front  to multiple fragment servers , , and .","According to various embodiments, a client device uses a media component that requests fragmented MPEG-4 files, allows trick-play, and manages bandwidth adaptation. In particular embodiments, each client device receives a media stream that is behind a live stream by 12 seconds or more. There may also be server buffering. According to various embodiments, GOP delineation, encoding, fragmentation can occur within a server buffering timeframe. By having numerous encoder\/fraggers, capacity can be increased or decreased by percentage points at any time. According to various embodiments, a system provides not only localized redundancy but geographic redundancy as well. A complete system including load balancers, work dispatchers, encoders\/fraggers, storage, fragment servers, etc., may be replicated at a geographically separate data center.","The resources at the geographically separate data center may be running simultaneously. If a particular data center fails, fragment requests may simply be routed to the backup data center fragment servers. However, it can be inefficient to run a complete system redundantly at a geographically separate data center. Consequently, the techniques and mechanisms of the present invention contemplate a geographically separate data center performing encoding and fragmentation for a reduced set of live stream variants. Instead of encoding ten or more different variants for each live media stream, only a single variant may be encoded. Resource consumption at the redundant data center would be reduced while still providing service at some level in the event of a service disruption at an active data center.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3","b":["301","303","305"]},"At , a work dispatcher determines that a GOP is available. According to various embodiments, the GOP delineator and the work dispatcher reside in different data centers and it is desirable to have a single GOP transfer instead of redundant GOP transfers. At , the work dispatcher creates descriptions of multiple jobs corresponding to different encoding quality levels and places the jobs in work queues. According to various embodiments, the jobs are assigned different weights and\/or priority levels. An encoder\/fragger at  pulls the job from the job queue and encodes the GOP into a format such as H.264. Encoded fragments are maintained on distributed storage at . A user can then continuously access the encoded fragments at a particular quality level through a fragment server at  that allows real-time or near real-time Internet Protocol (IP) distribution of the media stream fragments.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 4","b":["401","403","405"]},"At , the GOPs are transmitted to work dispatchers\/load balancers at geographically separate data centers. In particular embodiments, multiple work dispatchers at each data center at  create descriptions of multiple jobs corresponding to different encoding quality levels and places the jobs in work queues. According to various embodiments, jobs are placed in both active and standby job queues. According to various embodiments, the jobs are assigned different weights and\/or priority levels. In particular embodiments, multiple encoders\/fraggers at  pull the job from the active job queue in each respective data center and encode the GOP into a format such as H.264. Stateless encoders\/fraggers may keep logs of each process performed and commit each process prior to proceeding with a subsequent process. Encoded fragments are maintained on distributed storage at . A user can then continuously access the encoded fragments at a particular quality level through fragment servers at a selected data center at . The fragments allow real-time or near real-time Internet Protocol (IP) distribution of the media stream fragments. According to various embodiments, failure of a data center is detected at . Fragment requests are routed to fragments servers at the redundant data center at . According to various embodiments, additional variants are identified for encoding at . In particular embodiments, additional resolutions, audio quality levels, codecs, etc., may be selected for encoding. A redundant data center system can scale up to perform essentially the same operations as a failed data center.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":["501","503","511","509","513","505","511","507","511"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 6"},"According to various embodiments, the fragment writer command line arguments are the SDP file of the channel to record, the start time, end time, name of the current and next output files. The fragment writer listens to RTP traffic from the live video encoders and rewrites the media data to disk as fragmented MPEG-4. According to various embodiments, media data is written as fragmented MPEG-4 as defined in MPEG-4 part 12 (ISO\/IEC 14496-12). Each broadcast show is written to disk as a separate file indicated by the show ID (derived from EPG). Clients include the show ID as part of the channel name when requesting to view a prerecorded show. The fragment writer consumes each of the different encodings and stores them as a different MPEG-4 fragment.","In particular embodiments, the fragment writer writes the RTP data for a particular encoding and the show ID field to a single file. Inside that file, there is metadata information that describes the entire file (MOOV blocks). Atoms are stored as groups of MOOF\/MDAT pairs to allow a show to be saved as a single file. At the end of the file there is random access information that can be used to enable a client to perform bandwidth adaptation and trick play functionality.","According to various embodiments, the fragment writer includes an option which encrypts fragments to ensure stream security during the recording process. The fragment writer will request an encoding key from the license manager. The keys used are similar to that done for DRM. The encoding format is slightly different where MOOF is encoded. The encryption occurs once so that it does not create prohibitive costs during delivery to clients.","The fragment server responds to HTTP requests for content. According to various embodiments, it provides APIs that can be used by clients to get necessary headers required to decode the video, seek to any desired time frame within the fragment and APIs to watch channels live. Effectively, live channels are served from the most recently written fragments for the show on that channel. The fragment server returns the media header (necessary for initializing decoders), particular fragments, and the random access block to clients. According to various embodiments, the APIs supported allow for optimization where the metadata header information is returned to the client along with the first fragment. The fragment writer creates a series of fragments within the file. When a client requests a stream, it makes requests for each of these fragments and the fragment server reads the portion of the file pertaining to that fragment and returns it to the client.","According to various embodiments, the fragment server uses a REST API that is cache friendly so that most requests made to the fragment server can be cached. The fragment server uses cache control headers and ETag headers to provide the proper hints to caches. This API also provides the ability to understand where a particular user stopped playing and to start play from that point (providing the capability for pause on one device and resume on another).","In particular embodiments, client requests for fragments follow the following format:","http:\/\/{HOSTNAME}\/frag\/{CHANNEL}\/{BITRATE}\/[{ID}\/]{COMMAND}[\/{ARG}] e.g. http:\/\/frag.hosttv.com\/frag\/1\/H8QVGAH264\/1270059632.mp4\/fragment\/42. According to various embodiments, the channel name will be the same as the backend-channel name that is used as the channel portion of the SDP file. VoD uses a channel name of \u201cvod\u201d. The BITRATE should follow the BITRATE\/RESOLUTION identifier scheme used for RTP streams. The ID is dynamically assigned. For live streams, this may be the UNIX timestamp; for DVR this will be a unique ID for the show; for VoD this will be the asset ID. The ID is optional and not included in LIVE command requests. The command and argument are used to indicate the exact command desired and any arguments. For example, to request chunk  this portion would be \u201cfragment\/42\u201d.","The URL format makes the requests content delivery network (CDN) friendly because the fragments will never change after this point so two separate clients watching the same stream can be serviced using a cache. In particular, the headend architecture leverages this to avoid too many dynamic requests arriving at the Fragment Server by using an HTTP proxy at the head end to cache requests.","According to various embodiments, the fragment controller is a daemon that runs on the fragmenter and manages the fragment writer processes. We propose that it uses a configured filter that is executed by the Fragment Controller to generate the list of broadcasts to be recorded. This filter integrates with external components such as a guide server to determine which shows to record and the broadcast ID to use.","According to various embodiments, the client includes an application logic component and a media rendering component. The application logic component presents the UI for the user and also communicates to the front-end server to get shows that are available for the user and to authenticate. As part of this process, the server returns URLs to media assets that are passed to the media rendering component.","In particular embodiments, the client relies on the fact that each fragment in a fragmented MPEG-4 file has a sequence number. Using this knowledge and a well defined URL structure for communicating with the server, the client requests fragments individually as if it was reading separate files from the server simply by requesting urls for files associated with increasing sequence numbers. In some embodiments, the client can request files corresponding to higher or lower bit rate streams depending on device and network resources.","Since each file contains the information needed to create the URL for the next file, no special playlist files are needed, and all actions (startup, channel change, seeking) can be performed with a single HTTP request. After each fragment is downloaded the client assesses among other things the size of the fragment and the time needed to download it in order to determine if downshifting is needed, or if there is enough bandwidth available to request a higher bitrate.","Because each request to the server looks like a request to a separate file, the response to requests can be cached in any HTTP Proxy, or be distributed over any HTTP based CDN.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 7","b":["707","705","705","703","703","701","701","703","705"]},"The fragment may be cached for a short period of time at caching layer . The mediakit  identifies the fragment number and determines whether resources are sufficient to play the fragment. In some examples, resources such as processing or bandwidth resources are insufficient. The fragment may not have been received quickly enough, or the device may be having trouble decoding the fragment with sufficient speed. Consequently, the mediakit  may request a next fragment having a different data rate. In some instances, the mediakit  may request a next fragment having a higher data rate. According to various embodiments, the fragment server  maintains fragments for different quality of service streams with timing synchronization information to allow for timing accurate playback.","The mediakit  requests a next fragment using information from the received fragment. According to various embodiments, the next fragment for the media stream may be maintained on a different server, may have a different bit rate, or may require different authorization. Caching layer  determines that the next fragment is not in cache and forwards the request to fragment server . The fragment server  sends the fragment to caching layer  and the fragment is cached for a short period of time. The fragment is then sent to mediakit .",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 8","b":["800","801","803","811","815","801","801","801","811"]},"Particular examples of interfaces supports include Ethernet interfaces, frame relay interfaces, cable interfaces, DSL interfaces, token ring interfaces, and the like. In addition, various very high-speed interfaces may be provided such as fast Ethernet interfaces, Gigabit Ethernet interfaces, ATM interfaces, HSSI interfaces, POS interfaces, FDDI interfaces and the like. Generally, these interfaces may include ports appropriate for communication with the appropriate media. In some cases, they may also include an independent processor and, in some instances, volatile RAM. The independent processors may control such communications intensive tasks as packet switching, media control and management.","According to various embodiments, the system  is a fragment server that also includes a transceiver, streaming buffers, and a program guide database. The fragment server may also be associated with subscription management, logging and report generation, and monitoring capabilities. In particular embodiments, functionality for allowing operation with mobile devices such as cellular phones operating in a particular cellular network and providing subscription management. According to various embodiments, an authentication module verifies the identity of devices including mobile devices. A logging and report generation module tracks mobile device requests and associated responses. A monitor system allows an administrator to view usage patterns and system availability. According to various embodiments, the fragment server handles requests and responses for media content related transactions while a separate streaming server provides the actual media streams.","Although a particular fragment server is described, it should be recognized that a variety of alternative configurations are possible. For example, some modules such as a report and logging module and a monitor may not be needed on every server. Alternatively, the modules may be implemented on another device connected to the server. In another example, the server may not include an interface to an abstract buy engine and may in fact include the abstract buy engine itself. A variety of configurations are possible.","In the foregoing specification, the invention has been described with reference to specific embodiments. However, one of ordinary skill in the art appreciates that various modifications and changes can be made without departing from the scope of the invention as set forth in the claims below. Accordingly, the specification and figures are to be regarded in an illustrative rather than a restrictive sense, and all such modifications are intended to be included within the scope of invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The disclosure may best be understood by reference to the following description taken in conjunction with the accompanying drawings, which illustrate particular embodiments.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
