---
title: System and method for displaying a user interface object using an associated style
abstract: An improved system and method for displaying a user interface object using an associated style is provided. To this end, an application may include style declarations that may associate a style resource with a user interface object. The style resource may define property values that may be selectively applied to a user interface object, may specify a visual representation for the user interface object, such as a visual subtree, and may specify additional property values to be conditionally applied to a user interface object. A styling engine may be provided for applying a style resource to a user interface object. A visual representation of the user interface objects with the applied property values may be generated and then a display representation may be rendered for presentation on a user interface display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07447993&OS=07447993&RS=07447993
owner: Microsoft Corporation
number: 07447993
owner_city: Redmond
owner_country: US
publication_date: 20041012
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The invention relates generally to computer systems, and more particularly to an improved system and method for displaying a user interface object using an associated style.","When creating a computer application, a developer typically may chose a particular environment, or platform on which the application will ultimately be executed. For example, when writing an application, the developer may choose to develop the application to run on the Microsoft Windows\u00ae platform. As a result, the program developer may have different options available for defining how user interface objects will look during interactions with a user of the application.","An application developer may program the application with user interface elements provided by the platform or may create customized user interface elements by defining aspects of their appearance such as background color, font size, border thickness, and so forth, so that the chosen platform may render the display as intended by the application developer. Although functional, this process suffers certain drawbacks. For instance, in order to customize a user interface object for a particular system, a developer may be required to explicitly specify the property values for how each user interface object will be displayed. This may become a cumbersome and repetitive process since the customized style may only apply to one user interface object and the process of customizing the style for other user interface objects may need to be repeated for each user interface object.","What is needed is a way for an application developer to customize the style of any type of user interface object and more easily define how the user interface object will look during interactions with a user of the application. Moreover, such a system and method should allow a developer to define a customized style for displaying a user interface element only once so that the customized style may also be used for displaying other user interface objects.","Briefly, the present invention provides an improved system and method for displaying a user interface object using an associated style. To this end, an application may include style declarations that may associate a style resource with a user interface object. The style resource may define property values that may be selectively applied to a user interface object, may specify a visual representation for the user interface object, such as a visual subtree, and may specify additional property values to be conditionally applied to a user interface object. A styling engine may be provided for applying a style resource to a user interface object. Furthermore, a property engine may be provided for locating property values, a databinding engine may be provided for binding properties of the user interface elements with properties on data objects, and a tree assembler may be provided for generating a visual representation of user interface objects with the applied property values of a style resources. Finally, a rendering engine may be provided for rendering a display representation of the visual representation for presentation on a user interface display.","The present invention also provides methods for displaying a user interface object using an associated style. When a request is received to display user interface objects, style resources associated with the user interface objects may be located and property values of the style resources may be applied to the user interface objects. In applying the style resources, a visual representation of the user interface objects with the applied property values may be generated. A display representation may then be rendered for presentation on a user interface display. Upon occurrence of a condition specified by an applied style resource, additional property values may be applied to a user interface object. The visual representation of the user interface objects with the additional property values applied may be generated and a display representation may then be rendered for presentation on a user interface display. When the condition is no longer satisfied, the prior property values may be automatically restored, the visual representation of the user interface objects may be generated and a display representation may be rendered for presentation on a user interface display.","Advantageously, the present invention may associate shared style resources with several user interface objects for display. By sharing the style information, an application developer need only define the style once. Upon defining the style, the developer may declaratively associate any number of user interface elements with the defined style.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, headless servers, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as mouse, trackball or touch pad. Other input devices not shown in  may include a joystick, game pad, satellite dish, scanner, or other devices including a device that contains a biometric sensor, environmental sensor, position sensor, or other type of sensor. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Displaying a User Interface Element Using an Associated Style","The present invention is generally directed towards a system and method for displaying a user interface object using an associated style. In particular, the present invention relates to associating a shared set of style information with two or more user interface elements that are to be displayed. By sharing the style information, i.e., information defining characteristics of the visual display representation, a program developer may only need to define the style once. Upon defining the style, the developer may declaratively associate user interface elements with the defined style for displaying the user interface elements using the associated style. As will be seen, the architecture of the present invention may be used for development of many different applications. As will be understood, the various block diagrams, flow charts and scenarios described herein are only examples, and there are many other scenarios to which the present invention will apply.","Turning to  of the drawings, there is shown an exemplary illustration generally representing a user interface display for an application. The computer system , which may be representative of computer system  in , may render user interface elements for display on display screen . The display screen  is enlarged in  to show details of the display. The display  may relate to a display of an example company application used to manage different portions of a business, employee information for example. Those skilled in the art will appreciate that any other type of content or application may use the present invention.","In this particular example, the display  may have a title bar  and an employee window . There may be other windows for managing other information as indicated by scroll bar . Employee window  may have a title bar , a tool bar , and buttons , , , and  within flow panel . Tool bar  may provide user controls such as a search control  and an add employee control , among potentially many others. The user interface controls, buttons, title bars, scroll bars, tool bars and windows are generally known in the art as user interface elements. A user interface element may also be referred to as a user interface object and means, as used herein, any visual primitive used to build a graphical user interface screen including without limitation a listbox, combination box, menu, dialog box, a control, toolbar, a frame, a window, and so forth.","Within employee window , there are two sub-windows, such as employee list window  and employee detail window . In this particular example, employee window  displays a list of all the employees working for ABC Company. In a particular embodiment, each user interface element may be one of a group of user interface elements, such as window ,  and , which may be stored in a database or other data store. Each user interface element may have an associated set of properties. For example, the properties for a window user interface element may include a size property, a position property, a background color property and so forth.","The present invention relates to the associating of user interface objects, such as the user interface elements represented by  in display , with user interface style properties in order to provide a layout representation to a rendering engine, which in turn may create the display representation, as shown in . User interface objects , ,  and , for example, may each be displayed using the same basic style definition. For instance, the font size and background color used may be the same for each user interface object when displayed. In general, defining a basic style for displaying properties of a user interface element need only be done once by a developer of an application and that style may be used for other user interface elements that are to be displayed and, significantly, that style may be used by a developer for user interface elements in any number of other applications.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 3","FIG. 1","FIG. 3"],"b":["324","316","322","316","110"]},"An application  may be any executable software code including a kernel component, an application component, a linked library, an object, and so forth. Furthermore, an application  may be any number of different computer applications or programs developed for use on many different types of computer systems. For example, the application  may be an employee management application such as described in conjunction with . The application  may execute on a computer system such as computer system  to display elements of a user interface, among other things. In an embodiment, the application  may access a data store , which may persistently store, among other items, a plurality of user interface objects . Each user interface object  may include associated methods and events (not shown). In accordance with embodiments of the present invention, the objects may be user interface elements that may be independent of any associated style for rendering a display representation of the user interface elements.","In order to associate a style with a user interface element, the application  may access style resources . The style resources  may be style definitions developed or designed by the developer of the application  or the definitions  may be created by a third party. The style definitions relate to the actual style properties to be associated with the user interface objects  of an application in order for the user interface elements to be ultimately displayed. Among the style resources , there may be application styles  that may be used in general for developing an application. An application style may be stored separately from the user interface objects and may be relatively independent of the user interface objects themselves. An application style may influence the display of user interface objects in three principal ways: (1) by specifying property values for the user interface object itself, (2) by specifying an internal representation for the user interface object, such as a visual subtree, and (3) by specifying additional property values that may be applied conditionally to a user interface object, such as visual triggers. For instance, style definitions may include user interface element properties such as the background color, the foreground color, border thickness, font size (such as 12 or 10 point, etc.), font type (such as Arial or Courier, etc.), font color (such as black or red, etc.), attributes (such as bold or italics, etc.), and so forth. Also, the style definition may also describe a visual subtree to aid in the creation of an internal visual representation of the user interface objects, such as where a given user interface object should be displayed. The visual tree is discussed in more detail below.","In an embodiment, the application  may have style declarations that may associate properties of the style resources  to user interface objects . The style declarations  may provide the declarative program statement(s) that associates one or more user interface objects to an application style. Such an association may be made by explicitly identifying the object types and the application style for that type, or by providing a default style, or by inheritance from a parent object, or by some other method.","Application  may operate on platform . Platform  may include the framework or application programming interface (API) that may provide the necessary communication between the application  and the operating system of the computer, such as computer  shown in . As such, the platform  may provide the intermediate functions and services that may allow the application  to ultimately display user interface elements, such as user interface objects , on a user interface display . Although not shown, the operating system and its necessary operations occur between platform  and display . In a particular embodiment of the invention, the platform  may be the Microsoft Windows platform developed by Microsoft Corporation.","Within the platform , a tree assembler  parses the information received from the application  in order to build a \u201cvisual tree\u201d which is an internal representation of the display and thus represents the combination of the user interface objects  to be displayed and the information from the style resources  that describes how to display the data. The visual tree is described in more detail below in conjunction with . In an embodiment, the tree assembler  includes a styling engine  for locating and applying the appropriate style elements, a property engine  for locating the appropriate property values, and a data binding engine  to associate properties of the user interface elements with properties on data objects. In one embodiment, the application  may make requests to the styling engine  to lookup the correct style definition, then the application  may make requests to the property engine  to lookup the appropriate property values specified by the style definition, and finally the application  may make requests to the data binding engine  to bind properties of the user interface elements with properties on data objects. These requests may be declarative, i.e., interpreted by the tree assembler , or procedural, i.e., the application  calls the binding methods at runtime. Additionally, databinding can also be performed by aliasing to create associations between properties on the elements in a visual tree and the properties of the element being styled, also referred to as the styled parent. This may allow a user of a user interface object such as a component to manipulate properties of the visual tree via direct object manipulation on the component itself. In one embodiment, the association of the properties may be stored in the style. Moreover, the application styles , may also have a declarative request for binding to data as well. In such a case the data binding engine  may handle these requests too. More details of the binding process may be found in copending U.S. patent application Ser. No. 10\/440,081, titled \u201cSYSTEM AND METHOD FOR CONTROLLING USER INTERFACE PROPERTIES WITH DATA\u201d filed on Oct. 23, 2003, assigned to the assignee of the present application, and incorporated herein by reference for all that it discloses and teaches.","In an embodiment, the tree assembler  receives the user interface objects and the style information directly from the application . In other embodiments, the tree assembler  may access the required user interface objects directly from the data store  and the styles resources , respectively, through the operation of the data binding engine . In doing so, the tree assembler  understands where to look and what to find based on the style binding information received from the application's style declarations .","The tree assembler  may complete the visual tree and pass the tree to the rendering engine . In an embodiment, the tree may be passed relatively directly to the rendering engine , which, in turn may use the visual tree to render a display representation of the user interface elements on the user interface display . In an alternative embodiment, the visual tree may be passed first to a layout engine  that may add more information to the visual tree, using user interface elements from a user interface object factory to complete the tree. The layout engine, in an embodiment, may understand the physical properties of the display such that it may determine where to place certain display items and how large to make them relative to the physical characteristics of a particular computer system. The application  and the tree assembler  may typically operate in a dynamic environment whereby the tree assembler  may make an initial visual tree and, as the application  runs and display items may change, the tree assembler  may rewrite or modify the visual tree to update the display representation on the user interface display .","A style may be considered a set of property values that may be applied to a user interface element for presenting a display representation of the user interface element. Associating a set of property values with a user interface element may be accomplished in several ways so that the set of property values may be applied to the user interface element. For example, property values may be set on a user interface element directly, either as a local value or as a global value. A local value may be assigned or may be referenced through databinding. In the case of databinding, a user interface element of an application may be bound to a property that references a local value defined by the application. Alternatively, a user interface element may be bound to a property that references a property value of another user interface element. Or a property may reference a global value such as a defined resource value.","Property values may also be associated with a user interface element using a defined style.  presents an illustration generally representing exemplary markup language for defining a style and associating the defined style with a user interface element. The exemplary markup language, XAML, is one embodiment of the way in which the concepts described herein may be implemented and should not be considered limiting to the syntax shown. A style may be defined as a resource in a declaration of a user interface element as is shown in this embodiment. For example, lines  through  of  may define a user interface element, a FlowPanel which may be similar to FlowPanel  of . Within the declaration of the FlowPanel, lines - may represent a resource section named FlowPanel.Resources that may include resources that apply to the FlowPanel. In this resource section, there are shown two different style declarations that each may define a different style property set.","One style declaration may have an implicit name and is an example of a style declaration that may specify the type of user interface element to which it may be applied. A style declaration with an implicit name as used herein means an unnamed style that may apply any declared property values to the type of the declared user interface element whenever a specific property value for the user interface element is not otherwise applied by an explicit style declaration. Lines - show a style declaration with an implicit name for a property set that may apply to a user interface element of type button. When this style is applied to a button, it may make the background of the button red in the display representation of the button. The other style declaration shown is an example of an explicit style declaration for a property set in lines -. Notice that a name, \u201cBlueButtonStyle\u201d in this example, has been given to this style. An explicit style declaration as used herein means an explicitly named style that may apply any declared property values to the declared user interface element and takes precedence over any specific property value for the user interface element that may be declared by a style declaration with an implicit name. When this style is applied to a button, it may make the background of the button blue in the display representation of the button. Thus, a style may be declared by an application developer that may generally apply any declared set of property values to a type of user interface element, and a style may be explicitly declared by an application developer specifying a set of property values that may be applied to a given user interface element which may override any corresponding property values declared in general for that type of user interface element.","Lines  and  of  illustrate associating a defined style with a user interface element. For example, two user interface elements, namely buttons, are declared within the declaration of the FlowPanel. The first button declaration on line  assigns \u201cOK\u201d as the content of the button. The style associated with this button may be the style declaration of the set of property values on lines - which implicitly may apply any declared property values of the set as ambient values to all buttons in the user interface element unless a specific property value is otherwise explicitly declared to apply. The second button declaration on line  assigns \u201cBlueButtonStyle\u201d as the style for this button and assigns the value of the resource named \u201cContent\u201d as the content of the BlueButtonStyle resource. The style associated with this button may be the style declaration of the set of property values on lines - which may override any corresponding property values declared in general for that type of user interface element appearing on lines - and may explicitly apply the declared property values of the set on lines - to the button. Any property values implicitly declared for the user interface element of type button may also be applied to this button for any property values not explicitly declared by \u201cBlueButtonStyle\u201d.","In one embodiment, a style may be considered a resource that may be placed in a dictionary of object and associated key values. For instance, the braces surrounding the name \u201cBlueButtonStyle\u201d in line  may indicate that BlueButtonStyle is a named resource that may be located, for instance, in the resource section of the user interface element declaration and also be placed in the dictionary. The syntax of \u201cdef:name=\u201d in an explicit declaration of a style may be one way to provide a key to the style resource that is placed in the dictionary. In the case where a declared style is not explicitly named, then the type of the user interface element may automatically be used as a key to locate the style resource in the dictionary. Thus, the style declaration of line  with an implicit name may also provide a key which is a type named button. By default, a user interface element may therefore have a key that is the type of the user interface element. In another embodiment, if a style resource cannot be located for a given type, then the style resource with the nearest base type of that given type may be used.","Generally, any type of user interface element that may be defined can appear in a style declaration. Those skilled in the art will appreciate that a set of property values in a style definition may also be associated with a user interface element in other ways. For example, a set of property values may be applied through databinding. Consequently, when a style may be applied to a user interface element, its bindings may be applied to only those properties of the user interface element whose local values are not set. Moreover, style bindings applied to a user interface element that may not include an explicit source may use the ambient value of the property defined for that user interface element.","Besides defining a set of property values, a style may also define elements for building a visual tree used for presentation of the display representation of user interface elements. In one embodiment, a logical tree may be used which may abstract elements of the visual tree including styling of those elements. Each user interface element may define a model that represents logical children of the user interface element and may include a style for the logical children of the user interface element. For example, a button may define a single unit of content as a logical child and may define the style for presentation of the content. This may allow an interactive element to delegate its style of a visual presentation to a logical tree which may then be mapped to the element of the visual tree.","Lines - illustrate a style definition of a button that includes a definition of property values for building a visual tree in lines - for presentation of the button. The style declaration of line  assigns a font size of 12 to a user interface element of type button. Property values for building a visual tree for presentation of the button are defined in lines -. For example, line  may define the background of the border of the button, line  may define the thickness of the border of the button, and line  may define the content within the border of the button. When such style declarations may be applied to the visual tree, objects associated with the user interface element may be created within the visual tree. For instance, a representation of a border may be created as a child object underneath the object representing the button and a representation of the text, \u201cOK\u201d, with a font size of 12 may be created as an object underneath the object representing the border.","In setting the property values for building a visual tree, aliasing of property values may be employed for providing a consistent style. The syntax of \u201c*Alias\u201d in lines - may represent aliasing of a property value. In particular, aliasing allows the value of a style property of an object in the visual tree to be assigned the value of that property set for a style parent object in the visual tree. For example, the property value for the background color of the border in line  may be assigned the value of the background color of the button. Similarly, the property value for the border thickness in line  may be assigned the value of the border thickness for the button. Likewise, the property value for the text content in line  may be assigned the text content of the button. Thus aliasing of style property values may leverage element composition in assembling a rich hierarchy of style property values in building a visual tree.","In addition to defining a set of property values and defining a set of property values for building elements of a visual tree, a style may also define visual triggers which may be additional property values that may be applied conditionally to a style object. In one embodiment, there may be two types of visual triggers: property triggers and an event trigger. A visual trigger that is an event trigger may enable additional properties to be applied when an event occurs. In this case, the current values of the properties may be replaced by the values of the additional respective properties applied upon occurrence of the event. A visual trigger that is a property trigger may enable additional properties to be applied based on a change in the value of a property on a user interface element. In this case, the current values of the properties may be temporarily replaced by the values of the respective additional properties and may be automatically restored when the triggered condition is no longer satisfied. Moreover, in one embodiment, a property trigger may also define property value changes to apply when entering and exiting a triggered state. In general, a visual trigger may set a value of a property by specifying a value to apply and by specifying a path to the property.","Lines - of  illustrate a style definition of a visual trigger within the style definition of a button. In specific, a property trigger is defined in lines - that specifies if the value of the property \u201cIsPressed\u201d becomes \u201cTrue\u201d, then the color of the background filler of the button should become goldenrod and the font type should become italic. The property trigger illustrated in  is one kind of trigger of an extensible base class for providing a dynamic change of style. For example, a single trigger may be defined where property values may be set by specifying a list of conditions. Those skilled in the art will also appreciate that there may be other types of triggers used for providing a dynamic change of style. For instance, there may be event triggers that may be based upon events such as system events or user input events, or there may be triggers that may be based upon a command being executed, and so forth. Where there are multiple visual triggers defined, the order of the visual triggers may matter. In one embodiment, visual triggers defined later may override the behavior of visual triggers defined earlier in a sequence of visual trigger definitions.","A style may be explicitly based on another style. The derived style may be BasedOn a base style. Lines - generally illustrate a style definition of a set of property values for a base style and a style definition of a set of property values for a derived style. In lines -, a base style is explicitly declared which is named ButtonStyle and may make the background color red when applied to a button. In lines -, a derived style is then explicitly declared which is named OtherButtonStyle and may make the font size 12 and the foreground color yellow. This derived style may be derived from the base style named ButtonStyle as shown by the declaration in line  where the property set is based on the resource style named ButtonStyle. As a result, the set of property values that may be associated with a button include the combined property set values defined in the declaration of the base style named ButtonStyle and the derived style named OtherButtonStyle. When OtherButtonStyle is applied to a button, the button will not only get a font size of 12 and a foreground of yellow, the button will also get a background of red.","In order to combine the property set values of the base style and the derived style, the property set values may be merged. If there is more than one value declared for an identical property among the property sets to be merged, then the most derived property value may be chosen to be applied to the user interface element. The most derived property as used herein may mean the property value defined at the lowest level in the hierarchy of property values declared by basing a style upon another style. For example, if there is a background property value set in a base style and the background property value is also set in the derived style, then the background property value of the derived style may be applied to the user interface element since it is the most derived in the hierarchy of property values declared. Similarly, bindings of derived styles may be more derived than bindings of a base style.","Just as the property set of a style may be based on another property set of a style, a style definition of a visual tree may be based on another style definition of a visual tree. In general, a base style's visual tree may be inherited in the derived style where there is no visual tree specified in the derived style. When the derived style is using the base style's visual tree, the derived style may not modify the visual tree of the base style. Where a visual tree is specified in the derived style, the definition of the visual tree defined by the most derived style is chosen to be applied. When the visual tree specified in a derived style is applied, none of the property sets or visual triggers associated with the base style visual tree may be applied.","Additionally, a style definition for a visual trigger may be based on another style definition of a visual trigger. In one embodiment, if there is more than one value declared for an identical property among the property sets of visual triggers to be merged, then the most derived property value may be chosen to be applied to the user interface element. However, in this embodiment, only property values of visual triggers may be merged that may be applied to those elements that are defined in the visual tree for that user interface element associated with the derived visual trigger style. Property values of a base visual trigger style may not be merged with the property set of values of a derived visual trigger style where the property value of the base visual trigger style does not apply to an element defined within the visual tree for the user interface element associated with the derived visual trigger style.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 5","FIG. 4","FIG. 3"],"b":["402","424","502","316"]},"The first item shown in the visual subtree  is a FlowPanel item . When building the tree, the tree assembler may encounter the FlowPanel item declared on line  in . Upon encountering the FlowPanel declaration, a node for the FlowPanel item  may be created to be placed in the visual subtree. Next, an inquiry may be performed to determine the style information for the FlowPanel item. Such style information may include property values of the FlowPanel as well as property values of the visual subtree for the FlowPanel. This visual subtree might contain borders or shading information, a background color, and so forth.","The tree assembler may subsequently encounter the button item declared on line  in , and a node for the button item  may be created and placed underneath the node for the FlowPanel . An inquiry to determine the style information for the button item may then be performed that may locate the style resource declared with an implicit name at lines - of  which may apply to an element of type button. The properties  such as the background property and the content defined in that style resource may be stored with the node for the button .","Similarly, the tree assembler may then encounter the button item declared with an explicit style on line  in , and a node for this button item  may be created and placed underneath the node for the FlowPanel . An inquiry may then be performed to locate the style resource declared with an explicit name at lines - of . The properties  such as the background property and the content defined in that style resource may be stored with the node for the button . After creating the subtrees for the buttons and adding them to the node for the FlowPanel , the visual subtree for the FlowPanel may be completed.","Upon completing the visual subtree  and adding the visual subtree  to the visual tree, the visual tree may be passed to a layout engine, such as engine  in  for including additional user interface elements prior to being sent to the rendering engine . In another embodiment, the layout engine may call the tree assembler as needed to generate the tree just in advance of the layout process. Rendering engine  may render a display representation from the visual tree for presentation on a user interface display.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 6","FIG. 3","FIG. 3","FIG. 1"],"b":["302","314","110"]},"At step , a request to display one or more user interface objects may be received. Upon receiving the request, one or more style resources associated with the user interface objects may be located at step . To locate the style resources associated with the user interface objects, a style lookup may be performed to determine whether a style was declared by the application such as in style declarations  of , or whether a default style was provided for the user interface objects, or whether property values may be inherited from a parent user interface object if a style defining that property value is not found.","Upon locating the style resources associated with the user interface objects, the style resources may be applied to the user interface objects at step . In applying the style to a user interface object, any property values defined for the visual representation of the user interface object, such as a set of property values for building a visual tree, may be applied at step . To apply the property values defined for the visual tree, for instance as generally described with respect to the illustration of , the assigned property values may be set for the user interface object, a copy of the visual subtree specified by the style may be created for the user interface object, and the visual subtree for the user interface object may be added to the visual tree. Any property values declared in the style definition using databinding may also be resolved in building the visual tree. After applying the property values defined for the visual representation of the user interface object, a display representation of the visual representation may be rendered at step . Upon rendering the display representation, the process is finished.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 7","b":["702","704","706","708","710","712"]},"When a style that defines a visual trigger is applied, additional property values may be applied to a user interface object upon occurrence of a condition. In the case of a property trigger, the current values of the properties may be temporarily replaced by the values of the respective additional properties and then may subsequently be automatically restored when the triggered condition is no longer satisfied. When notification is received of a change in the property value set as a property trigger, then steps - may be performed to locate and apply the additional property values for rendering the user interface objects for display.  presents a flowchart generally representing example steps undertaken in one embodiment for automatically restoring the prior property values when the changed property value is restored.","At step , notification of the restored property value may be received. The style resources applied prior to the occurrence of the condition may be restored at step . In applying the previous property values of the style resources, any previous property values defined for the visual representation of the user interface object, such as a set of property values for building a visual tree, may be reapplied at step . And then a display representation of the visual representation may be rendered at step . Upon rendering the display representation, the process for automatically restoring the previous property values may be finished.","Using the above systems and methods, an application author may provide customized styles for user interface objects in an application. The defined styles can be used for one or more different user interface objects, in accordance with aspects of the present invention. Importantly, the application author can assign style information in a declarative manner to program how a user interface element may look when displayed and how an end user might interact with the user interface elements. In doing so, the style resources may be separated from the user interface elements. Consequently, the author or an end user may change the style resources without changing the user interface elements. Likewise, the author may adjust the user interface elements without changing the style resources.","As can be seen from the foregoing detailed description, the present invention provides an improved system and method for displaying a user interface object using an associated style. A style resource may be customized and applied to any type of user interface object to define how the user interface object will look during interactions with a user. The architecture of the present invention may support a number of ways to provide a style for a user interface object, including by name, by type, by default, and so forth. In general, defining a basic style for displaying properties of a user interface element need only be done once by a developer of an application and that style may be used for other user interface objects that are to be displayed and, significantly, that style may be used by a developer for user interface objects in any number of other applications. As is now understood, the system and method thus provide significant advantages and benefits needed in contemporary computing.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
