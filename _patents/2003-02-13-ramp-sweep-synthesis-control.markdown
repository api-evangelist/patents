---
title: Ramp sweep synthesis control
abstract: A signal generator produces a signal. The signal generator includes signal hardware that physically produces the signal and signal software that is used to control signal hardware. The signal software includes a higher level object and a plurality of lower level objects. The higher level object processes an instruction from a user to produce the signal such that the signal sweeps through a plurality of frequencies. The plurality of lower level objects serve as an interface between the higher level object and the signal hardware. At least one of the lower level objects communicates with the signal hardware and at least one of the lower objects communicates with the higher level object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06859750&OS=06859750&RS=06859750
owner: Agilent Technologies, Inc.
number: 06859750
owner_city: Palo Alto
owner_country: US
publication_date: 20030213
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention concerns software control of hardware and pertains particularly to ramp sweep synthesis control.","A wide variety of systems include hardware that is controlled by software. The software used to control hardware is often referred to as firmware. Instruments such as those used in test and measurement applications have firmware to control circuits that generate test signals and\/or obtain measurements.","For example, radio frequency (RF) and microwave signal sources typically include one or more control points that enable software to control a circuitry by writing values to the control points of the circuitry. The control points may be implemented as registers and\/or digital-to-analog converters, etc. The circuitry includes, for example, filters, oscillators, frequency multipliers, frequency dividers, amplifiers and\/or other hardware used for signal generation.","For different signal frequency ranges and\/or signal amplifier ranges different firmware commands are required to assure that the hardware accurately generates signals. For example, when a signal generator performs a frequency sweep over a broad range of signal frequencies (e.g., 100 kilohertz (kHz) to 100 megahertz (MHz)) it may be necessary to adjust and\/or change oscillators, frequency multipliers, frequency dividers and\/or filters used to generate the signal. Firmware commands are used to control this process.","It is common to make hardware component changes to a system when performing support or upgrade operations on the system. Hardware component changes to a system may involve modification and\/or replacement of existing components, and\/or the addition of new components. Such hardware changes typically require modifications to the firmware that controls the components. However, making hardware component changes can require significant firmware revision which can be quite programmer intensive because of the complexity of firmware typically used to control the components.","In accordance with the preferred embodiment of the present invention, a signal generator produces a signal. The signal generator includes signal hardware that physically produces the signal and signal software that is used to control signal hardware. The signal software includes a higher level object and a plurality of lower level objects. The higher level object processes an instruction from a user to produce the signal such that the signal sweeps through a plurality of frequencies. The plurality of lower level objects serve as an interface between the higher level object and the signal hardware. At least one of the lower level objects communicates with the signal hardware and at least one of the lower objects communicates with the higher level object.",{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 1","b":["11","13","15","14","12","16"]},"Based on a value in a latch , digital to analog (D\/A) converter  controls VCO . The signal loop through VCO , filter bank , frequency multiplier\/divider  and phase detect  operates as a phased locked loop that fine tunes the output of VCO .","Based on a value within latch , filter bank selects a filter to use in filtering a signal from VCO . For example, a first filter within filter bank  is used for signals in a frequency range between 10 MHz and 50 MHz, while, a second filter within filter bank  is used for signals in a frequency range between 50 MHz and 100 MHz.","Based on a value within latch , frequency multiplier\/divider  selects frequency multiply circuitry or frequency divider circuitry to multiply or divide the frequency of the signal from filter bank .","Based on a value in a latch , digital to analog (D\/A) converter  controls power amplifier  to control the amplitude of an output signal placed on circuit output .","A system processor , running firmware stored in system memory , writes information into latches , ,  and  in order to control signal generation.",{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 2","b":["152","1","301","101","103","302","102","303","201"]},"A synthesis access object  is used to control oscillator hardware control object  and filter hardware control object . An amplitude access object  is used to control amplitude hardware control object . A sweep orchestrator object  is used to control synthesis access object  and amplitude access object .","Sweep orchestrator object  is in an orchestration layer. Objects in the orchestration layer enable the implementation of high-level, feature-based algorithms in which there is little need for knowledge of the underlying hardware system.","Synthesis access object  and amplitude access object  are in an access layer. The access layer provides for encapsulation of hardware function circuits and enables implementation of control which is specific to the underlying circuitry. The access layer provides an application programming interface (API) to the underlying circuitry and enables use of the underlying circuit functionality without specific knowledge of the design of the underlying circuitry.","Oscillator hardware control object , filter hardware control object  and amplitude hardware control object  are within a hardware control layer. The hardware control layer is provided to abstract the specific digital interface to the underlying circuitry from the access layer.","The layered hierarchy allows for hardware modifications and replacements with minimum firmware code modifications. For example, minor changes to a portion of underlying circuitry may be made while not affecting the access layer. For example, the resolution of a control D\/A converter (DAC) may be changed with a corresponding change to the code in the hardware control layer while not affecting the code in the access layer. Major changes to a portion of underlying circuitry may affect the access layer, but not require changes to the orchestration layer.","When a user requests a ramp sweep, sweep orchestrator object  communicates with synthesis access object  and amplitude access object , querying for the frequency stopping points synthesis access object  requires within the requested sweep span. Sweep orchestrator object  builds up a dynamic list of points that is a composite of the frequency stopping points. When there are multiple frequency stopping points in the list, the algorithm splits up the requested sweep into segments that are divided at the frequency points in the dynamically generated list.","When the sweep is started, sweep orchestrator object  sweeps until a next frequency stopping point in the dynamic list is encountered. At each frequency stopping point, the necessary commands are given to update the hardware in preparation to continue the sweep to the next frequency stopping point. Each segment is swept, then the hardware associated with the requested frequency stopping points is updated.","In a preferred embodiment of the present invention, sweep orchestrator object  has the ability to consult a separate flexible band-crossing list. This enables sweep orchestrator object  to know when to ignore a frequency switch point returned by an access object. The benefit of this is that if the switch point is too close to the start or stop frequency of the sweep, then the point can be ignored so that the sweep is more time efficient for the user without degrading performance.","Table 1 below sets out C++ programming language pseudo code that defines objects used to implement sweep orchestrator object , synthesis access object  and amplitude access object .",{"@attributes":{"id":"P-d0e1427","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Struct List {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Array of frequencies:"]},{"entry":[{},"One to one list of access object to frequency array;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Sweep_Orchestrator {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Sweep_Orchestrator( . . . ); \/\/ Constructor"]},{"entry":[{},"\u02dcSweep_Orchestrator( . . . ); \/\/ Destructor"]},{"entry":[{},"Sweep_frequency_range(double start_frequency,"]},{"entry":[{},"double stop_frequency);"]},{"entry":[{},"Sweep_update_hardware_finished( );"]},{"entry":[{},"Synthesis Access *synth_access;"]},{"entry":[{},"Amplitude-Access *ampl_access;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"List sweep_frequency_point;"},{"entry":"};"},{"entry":"Class Synthesis-Access {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Synthesis_Access( . . . ); \/\/ Constructor"]},{"entry":[{},"\u02dcSynthesis_Access( . . . ); \/\/ Destructor"]},{"entry":[{},"Query_next_lowest_frequency(double current_frequency);"]},{"entry":[{},"Set_next_frequency(double new_frequency);"]},{"entry":[{},"Start_oscillator_sweep(double start_frequency,"]},{"entry":[{},"double stop_frequency);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"Class Amplitude Access {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Amplitude_Access( . . . ); \/\/ Constructor"]},{"entry":[{},"\u02dcAmplitude_Access( . . . ); \/\/ Destructor"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"Query_next_lowest_frequency(double current-frequency);"},{"entry":"Set_next_frequency(double new frequency);"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 3","b":["1","31","32","33"]},"In a block , a user requests a sweep. For example, the user requested sweep is from 15 MHz to 80 MHz. Sweep orchestrator object  (shown in ) receives the sweep request in a block .","In a block , sweep orchestrator object  requests information from synthesis access object . In a block , synthesis access object  responds with a value of 50 MHz. The value of 50 MHz corresponds to a frequency stopping point at which, for example, filter bank  (shown in ) needs to switch a filter. In a block , sweep orchestrator object  requests information from amplitude access object . In a block , amplitude access object  responds with a value of 60 MHz. The value of 60 MHz corresponds, for example, to a frequency point at which latch  (shown in ) needs updating.","In a block , sweep orchestrator object  evaluates the information returned from synthesis access object  and amplitude access object  and determines that the next lowest frequency stopping point must be 50 MHz. It adds that frequency stopping point to a dynamic list of points and associates that frequency stopping point with synthesis access object .","In a block , sweep orchestrator determines whether all frequency stopping points received in the pass are above the highest (stop) frequency in the sweep. Since 50 MHz is less than the stop frequency, sweep orchestrator object  loops, returning to block .","In block , sweep orchestrator object  requests information from synthesis access object . In block , synthesis access object  responds with a value of 100 MHz. In block , sweep orchestrator object  requests information from amplitude access object . In block , amplitude access object  again responds with a value of 60 MHz.","In block , sweep orchestrator object  evaluates the information returned from synthesis access object  and amplitude access object  and determines that the next lowest frequency stopping point is 60 MHz. It adds that frequency stopping point to a dynamic list of points and associates that frequency stopping point with amplitude access object .","In block , sweep orchestrator object  determines whether all frequency stopping points received in the pass are above the stop frequency in the sweep. Since 60 MHz is less than the stop frequency, sweep orchestrator object  loops, returning to block .","In block , sweep orchestrator object  requests information from synthesis access object . In block , synthesis access object  again responds with a value of 100 MHz. In block , sweep orchestrator object  requests information from amplitude access object . In block , amplitude access object  responds with a value of 125 MHz.","In block , sweep orchestrator object  evaluates the information returned from synthesis access object  and amplitude access object  and determines that there is no stopping frequency below the sweep stop frequency of 80 MHz.","In block , sweep orchestrator object  determines that all frequency stopping points received in the pass are above the stop frequency of 80 MHz. In a block , sweep orchestrator object  proceeds with executing the sweep.","Table 2 below sets out C++ programming language pseudo code within sweep orchestrator object , that implements setup of a sweep operation.",{"@attributes":{"id":"P-d0e2274","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Sweep_frequency_range(double start_frequency, double stop_frequency)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"sweep_start_frequency = start_frequency;"]},{"entry":[{},"sweep_stop_frequency = stop_frequency;"]},{"entry":[{},"current_frequency = start_frequency;"]},{"entry":[{},"while(current_frequency < stop_frequency)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"temp_freq1 = synth_access\u2212>Query_next_lowest_frequency(current_frequency);"]},{"entry":[{},"temp_freq2 = ampl access\u2212>Query_next_lowest_frequency(current_frequency);"]},{"entry":[{},"if(temp_freq1 <temp_freq2 and temp_freq1 <stop_frequency)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Add entry to sweep_frequency_point list with temp_freq1 and synth_access;"]},{"entry":[{},"current frequency = temp_freq1 + 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if(temp_freq1 == temp_freq2 and temp_freq1 <stop_frequency)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Add entry to sweep_frequency_point list with temp_freq1 and synth_access;"]},{"entry":[{},"Add entry to sweep_frequency_point list with temp_freq2 and ampl_access;"]},{"entry":[{},"current frequency = temp_freq1 + 1;}else if(temp_freq2 <stop_frequency)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"else if(temp_freq2<stop_frequency)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Add entry to sweep_frequency_point list with temp_freq2 and ampl_access;"]},{"entry":[{},"current_frequency temp_freq2 + 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"current_frequency = stop_frequency;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Set hardware for beginning sweep frequency;"]},{"entry":[{},"current_frequency = first_segment_stop_frequency;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"synth_access\u2212> Start_oscillator_sweep(start_frequency,"},{"entry":"first_segment_stop_frequency);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"P-00040","num":"00040"},"figref":"FIG. 4","b":["3","41","42","43","44"]},"In a block , sweep orchestrator object  begins the sweep. In a block , sweep orchestrator object  resets the signal generator hardware. For example, sweep orchestrator object  sends commands to the access level requesting the hardware be reset to a sweep start frequency of 15 MHz, which is the start frequency of the first sweep segment. In a block , sweep orchestrator object  finishes setting up the first sweep segment where the frequency stopping point of 50 MHz.","In a block , sweep orchestrator object  instructs synthesis access object  to start D\/A converter (DAC)  (shown in FIG. ). In a block , synthesis access object  loads a value into latch . In a block DAC  responds to the value in latch  by causing VCO  to start the sweep segment from 15 MHz to 50 MHz. Upon VCO  completing the first sweep segment, the hardware, as indicated by a block , notifies sweep orchestrator object  that the first sweep segment has been completed.","In a block , sweep orchestrator object  sets up the second sweep segment. As indicated by block , this includes synthesis access object  signaling filter bank , through latch , to change filters. As indicated by block , filter bank  responds to the value placed in latch  by changing filters. Upon the filter being changed, the second segment is swept from 50 MHz to 60 MHz.","Upon VCO  completing the second sweep segment, the hardware, as indicated by a block , notifies sweep orchestrator object  that the second sweep segment has been completed.","In a block , sweep orchestrator object  sets up the third sweep segment. As indicated by block , this includes amplitude access object , through latch , signaling DAC  to change amplitude of power amplifier . As indicated by block , DAC  responds to the value placed in latch  by changing the setting of power amplifier . Upon the setting being changed, the third segment is swept from 60 MHz to 80 MHz.","Upon VCO  completing the third sweep segment, the hardware, as indicated by a block , notifies sweep orchestrator object  that the second sweep segment is finished. In a block , sweep orchestrator object  restarts the sweep.","Table 3 below sets out C++ programming language pseudo code within sweep orchestrator object , that implements performance of a sweep operation.",{"@attributes":{"id":"P-d0e3162","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Sweep_update_hardware_finished( )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if(current_frequency >= last frequency point in sweep_frequency_point_list)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Set hardware for beginning sweep frequency;"]},{"entry":[{},"current-frequency = sweep_start_frequency;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"synth_access\u2212> Start_oscillator_sweep(start_frequency,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"first_segment_stop_frequency);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"temp_start_frequency = current_frequency;"]},{"entry":[{},"current-frequency = next point in sweep_frequency_point list that is >"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"temp_start_frequency;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(current frequency is associated with synth_access in sweep_frequency_point list)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"synth_access\u2212>Set_next_frequency(temp_start_frequency);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(current_frequency is associated with ampl_access is sweep_frequency_point list)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ampl_access\u2212>Set_next_frequency(temp_start_frequency);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"synth_access\u2212>Start_oscillator_sweep(temp_start_frequency, current_frequency);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The foregoing discussion discloses and describes merely exemplary methods and embodiments of the present invention. As will be understood by those familiar with the art, the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00008","num":"00008"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00009","num":"00009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"P-00010","num":"00010"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"P-00011","num":"00011"},"figref":["FIG. 4","FIG. 1"]}]},"DETDESC":[{},{}]}
