---
title: Secure seed generation protocol
abstract: Techniques for secure generation of a seed for use in performing one or more cryptographic operations, utilizing a seed generation protocol carried out by a seed generation client () and a seed generation server (). The seed generation server () provides a first string to the seed generation client (). The seed generation client () generates a second string, encrypts the second string utilizing a key (), and sends the encrypted second string to the seed generation server (). The seed generation client () generates the seed as a function of at least the first string and the second string. The seed generation server (s) decrypts the encrypted second string () and independently generates the seed as a function of at least the first string and the second string.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979707&OS=07979707&RS=07979707
owner: EMC Corporation
number: 07979707
owner_city: Hopkinton
owner_country: US
publication_date: 20040709
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION(S)","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present application claims the priority of U.S. Provisional Patent Application Ser. No. 60\/486,127, filed Jul. 10, 2003 and entitled \u201cSecure Seed Generation Protocol (SSGP),\u201d the disclosure of which is incorporated by reference herein.","The present invention relates generally to the field of cryptography, and more particularly to techniques for generating a shared secret or other type of seed for use in cryptographic operations.","In many secure communication applications, a seed is required in order to perform certain cryptographic operations such as encryption, decryption, authentication, etc. The seed may comprise, by way of example, a symmetric key or other secret shared by two or more entities.","One such application is in authentication tokens, such as the RSA SECURID\u00ae authentication token commercially available from RSA Security Inc. of Bedford, Mass., U.S.A. The RSA SECURID\u00ae authentication token is used to provide two-factor authentication. Authorized users are issued individually-registered tokens that generate single-use token codes, which change based on a time code algorithm. For example, a different token code may be generated every 60 seconds. In a given two-factor authentication session, the user is required to enter a personal identification number (PIN) plus the current token code from his or her authentication token. This information is supplied to an authentication entity. The authentication entity may be a server or other processing device equipped with RSA ACE\/SERVER\u00ae software, available from RSA Security Inc. The PIN and current token code may be transmitted to the authentication entity via an encryption agent equipped with RSA ACE\/AGENT\u00ae software, also available from RSA Security Inc. If the PIN and current token code are determined to be valid, the user is granted access appropriate to his or her authorization level. Thus, the token codes are like temporary passwords that cannot be guessed by an attacker, with other than a negligible probability.","A given RSA SECURID\u00ae token typically contains one or more seeds that are utilized in computing the token outputs. The authentication entity performing the verification of the token outputs requires access to one or more seeds associated with the token in question. Typically, such authentication entities have access to the same seed or set of seeds that the token uses to generate its output.","In certain situations it is desirable for the token and authentication entity to be configured to generate a seed for their joint use. Conventional seed generation techniques can be problematic in that use of such techniques may result in the seed becoming accessible in plaintext form to entities other than the token and the authentication entity. This problem may be addressed by requiring the token and the authentication entity to be pre-configured with certain trusted keys. However, such an approach is inefficient and may introduce additional security concerns.","Accordingly, a need exists for improved techniques for secure seed generation in authentication tokens and other applications.","The present invention provides methods and apparatus for secure seed generation which in an illustrative embodiment overcome one or more of the above-noted drawbacks of conventional techniques.","In accordance with one aspect of the invention, a secure seed generation protocol (SSGP) is carried out between a seed generation client and a seed generation server. The seed generation server provides a first string to the seed generation client. The seed generation client generates a second string, encrypts the second string utilizing a key, and sends the encrypted second string to the seed generation server. The seed generation client generates the seed as a function of at least the first string and the second string. The seed generation server decrypts the encrypted second string and independently generates the seed as a function of at least the first string and the second string.","The key utilized by the seed generation client to encrypt the second string may be, for example, a public key of the seed generation server, or a secret key shared by the seed generation client and the seed generation server.","In accordance with another aspect of the invention, the seed generation client may store the generated seed in an associated authentication token, and the seed generation server may store the generated seed in an associated authentication entity. For example, the generated seed may be used to replace a previously existing seed known to both the seed generation client and the seed generation server. As a more particular example, the authentication token may replace the existing seed with the generated seed after the receipt of a signal from the authentication entity, where the signal from the authentication entity may comprise a message authentication code (MAC) or other authentication code cryptographically derived from the seed. Similarly, the authentication entity may replace the existing seed with the generated seed after receipt of a signal from the authentication token, where the signal from the authentication token may comprise a MAC or other authentication code cryptographically derived from the seed.","The protocol in an illustrative embodiment advantageously provides a high level of assurance for both the seed generation client and the seed generation server that the seed has been correctly generated and not exposed to other entities.","These and other features and advantages of the present invention will become more readily apparent from the accompanying drawings and the following detailed description.","The present invention will be described herein with reference to an example network-based communication system in which a processing device communicates over a network with one or more other processing devices. It is to be appreciated, however, that the invention is not restricted to use in this or any other particular system configuration.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100","102","104","102","102","102","102"]},"The network  may represent a global computer network such as the Internet, a wide area network (WAN), a local area network (LAN), a satellite network, a telephone or cable network, or various portions or combinations of these and other types of networks.","In accordance with one aspect of the invention, the processing devices S and C are configured to implement a secure seed generation protocol (SSGP), for the purpose of generating at least one seed to be utilized by both devices. More particular examples of illustrative implementations of the protocol will be described below in conjunction with .","The server-side processing device S comprises an SSGP server S, and the client-side processing device C comprises an SSGP client C. Processing devices S and C further comprise respective processor and memory components S, S and C, C, as indicated in the figure. The SSGP server S, although shown in the figure as being separate from the processor S and memory S, may be implemented at least in part in the form of one or more software programs that are stored in memory S and executed by processor S. Similarly, the SSGP client C, although shown in the figure as being separate from the processor C and memory C, may be implemented at least in part in the form of one or more software programs that are stored in memory C and executed by processor C. The SSGP server S and SSGP client P may be viewed as examples of elements more generally referred to herein as a seed generation server and a seed generation client, respectively.","The term \u201cprocessing device\u201d as used herein refers generally to any processor-based device capable of implementing at least a portion of a secure seed generation technique as described herein.","A given one of the processing devices  may represent, by way of example and without limitation, a computer, a mobile telephone, a personal digital assistant (PDA), a smart card, an authentication token, a server, as well as various portions or combinations of these and other processing devices. The processing devices  may thus be implemented as otherwise conventional processing devices programmed to perform portions of a seed generation technique as described herein. Conventional aspects of such devices are well known to those skilled in the art, and are therefore not described in detail herein.","In an illustrative embodiment, the processing device S comprises or is otherwise associated with an authentication entity, such as a server or other processing device equipped with ACE\/SERVER\u00ae software, and the processing device C comprises or is otherwise associated with an authentication token, such as an RSA SECURID\u00ae authentication token. Although this embodiment is presented in the context of an authentication token, the described techniques are adaptable in a straightforward manner to a wide variety of other cryptographic processing devices.","The SSGP server S and SSGP client C may communicate directly with one another over the network , or may communicate via one or more intermediary processing devices. For example, if the processing device C comprises an authentication token, it may communicate with processing device S over network  using an intermediary device such a desktop or portable personal computer, mobile telephone or PDA. Such intermediary devices are not specifically shown in , but processing device C may be viewed as comprising, for example, a combination of an authentication token and an associated computer or other intermediary device. Similarly, processing device S may incorporate or communicate through one or more intermediary processing devices. As indicated above, the term \u201cprocessing device\u201d as used herein is intended to encompass such combinations of devices.","In operation, a seed may be generated by SSGP server S and SSGP client C in the system  in the following manner. The SSGP server S provides a first string to SSGP client C. The SSGP client C generates a second string, encrypts the second string utilizing a key, and sends the encrypted second string to the SSGP server. The SSGP client generates the seed as a function of at least the first string and the second string. The SSGP server decrypts the encrypted second string and independently generates the seed as a function of at least the first string and the second string. The key utilized by the SSGP client to encrypt the second string may be, for example, a public key of the SSGP server, or a secret key shared by the SSGP client and SSGP server.","The SSGP client may store the generated seed in an associated authentication token, and the SSGP server may store the generated seed in an associated authentication entity. For example, the generated seed may be used to replace a previously existing seed known to both the SSGP client and the SSGP server. As a more particular example, the authentication token may replace the existing seed with the generated seed after the receipt of a signal from the authentication entity, where the signal from the authentication entity may comprise an authentication code cryptographically derived from the seed. Similarly, the authentication entity may replace the existing seed with the generated seed after receipt of a signal from the authentication token, where the signal from the authentication token may comprise an authentication code cryptographically derived from the seed.","As will be described in greater detail below, such a protocol advantageously provides a high level of assurance for both the SSGP server S and the SSGP client C that the seed has been correctly generated and not exposed to other entities.","The SSGP protocol may be initiated, for example, by the SSGP server responsive to receipt of a management command from another entity of the system , by the SSGP server responsive to receipt of a request initiated by the SSGP client, or by any other suitable initiation mechanism.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2","FIG. 1"],"b":["200","100","110","110","202"]},"A user wishing to generate and store a seed for his or her authentication token connects to the SSGP server S using a desktop computer, mobile telephone, PDA or other processing device configured to implement or communicate with SSGP client C. The user provides suitable identifying information, after which the SSGP protocol is initiated. The SSGP client may provide information to the SSGP server about supported SSGP versions, one-time password (OTP) algorithms, and key-wrapping algorithms. Based on this information, the SSGP server provides a random number  to the SSGP client, along with information about a particular OTP algorithm to use, characteristics of the seed that is to be generated, and its own public key from key pair . As noted previously, a shared key may be used in place of the public key of the SSGP server.","The SSGP client generates a random number  and encrypts it in operation  with the public key supplied by the SSGP server. The SSGP client then sends the encrypted random number to the SSGP server. The SSGP client also calculates a seed  by applying a hash function  to a combination of the two random numbers  and  and the public key of the SSGP server. Again, a shared key may be used in place of the public key of the SSGP server.","The SSGP server decrypts the encrypted random number  in operation , and generates a seed  by applying a hash function  to a combination of the two random numbers  and  and its public key. The SSGP server sends the generated seed  and an associated serial number  to an authentication entity together with user identifying information. Upon receipt of indication of successful acknowledgment from the authentication entity, the SSGP server sends a corresponding acknowledgment to the SSGP client, along with the serial number. Upon receipt of the acknowledgment from the SSGP server, the SSGP client ensures that the authentication token associates the received serial number  with the generated seed .","Typically, if the authentication token has already been initialized, a re-initialization may occur only if the SSGP server proves knowledge of the existing seed. This is to protect against unauthorized overwriting of seeds.","The SSGP server S may therefore make use of the previously existing seed, known to the authentication entity and known to the token, for the purpose of authenticating and\/or synchronizing the SSGP server and SSGP client. For example, the SSGP server may send the previously existing seed, or a suitable derivative thereof, such as an authentication code computed using the seed, optionally with other information, to the SSGP client. When the seed generation protocol has successfully been executed, both the SSGP client and the SSGP server have a new seed. The new seed can be sent to the authentication entity by the SSGP server and used to replace the previously existing seed, or the new seed can be added to the set of previously existing seeds held by the authentication entity. Similarly, the new seed can be sent to the token by the SSGP client and used to replace the previously existing seed, or the new seed can be added to the set of previously existing seeds held by the token.","It should be understood that the particular processing operations of the protocol implemented in the illustrative embodiment of , and the protocols of other embodiments described herein, are not requirements of the invention.","Although reference is made to random numbers in the  embodiment, it is to be appreciated that the invention can be implemented using pseudorandom numbers or other types of strings of sufficient entropy. A given such string may also be referred to herein as a \u201cnonce.\u201d","The generated seed may be generated, for example, based on a combination of a pseudorandom string R_S chosen by the SSGP server, a pseudorandom string R_C chosen by the SSGP client, and the key used to protect R_C when it is sent from the SSGP client to the SSGP server. The key, as indicated previously, may be a public key K_S of the SSGP server, represented as an octet string or in another suitable format, or a shared symmetric key.","The strings R_S and R_C in this example correspond to the random numbers  and , respectively, referred to in the context of the illustrative embodiment of . Each of these strings should have at least as much entropy as the seed to be generated.","An additional benefit of the server string R_S is that it provides assurance to the server that it has contributed to the seed generation process, thereby preventing any replay attacks.","The string R_C may comprise a combination of at least two component strings, including at least a first component generated in the SSGP client by interaction with the SSGP server and a second component previously stored in the SSGP client. The latter component should be unique for each SSGP client for a given manufacturer.","The seed in this particular example may be generated by repeatedly applying an OTP algorithm or other cryptographic algorithm to successive portions of an additional string generated utilizing the first string R_S, the second string R_C and the key K_S. The additional string generated utilizing the first string, the second string and the key may comprise, for example, a concatenation of the first string, the second string and the key.","The cryptographic algorithm may comprise a one-way cryptographic operation, such as a hash function. Examples of suitable hash functions include SHA-1 and SHA-256. The cryptographic algorithm may alternatively comprise an encryption operation, such as an operation associated with the AES algorithm.","For an algorithm which takes two parameters but which is limited in terms of the length of those parameters, the additional string may be viewed as comprising n portions C[1], C[2], . . . C[n], with the seed being generated by computing:\n\n1]=Algorithm(12])\n\n2]=Algorithm(13])\n\n1]=Algorithm(2])\n\nseed=1],\n\nwhere Algorithm (A, B) denotes application of the cryptographic algorithm to portion B of the string concatenation utilizing an algorithm parameter denoted by A.\n","As a more particular example, in which the cryptographic algorithm comprises a hash algorithm such as SHA-1, let TS=R_S|K_S|R_C, where \u201c|\u201d denotes string concatenation. Divide TS into m-bit chunks (appending \u201800\u2019 bytes if necessary) C[1], C[2], . . . C[n], where m is the length of the hash algorithm output in bits. For SHA-1, m=160. After this, the hash algorithm may be applied as follows, where \u201c|\u201d again denotes string concatenation:\n\n1]=Hash(12])\n\n2]=Hash(13])\n\n1]=Hash(2])\n\nSeed=1].\n\nIntermediate results, each m bits long, may be copied into a DATA array, with the C chunks being copied into a KEY array.\n","An example in which the cryptographic algorithm comprises an AES algorithm is as follows. Divide TS into 128-bit chunks (appending \u201800\u2019 bytes if necessary) C\u2032[1], C\u2032[2], . . . C\u2032[n\u2032]. After this, AES (in ECB mode, since it cannot be assumed that tokens will support CBC mode) is applied as follows (AES (a, b) is the result of encrypting \u201cb\u201d with key \u201ca\u201d in AES ECB mode):\n\n1]=AES(12])\n\n2]=AES (13])\n\n1]=AES(2\n\nSeed=1].\n","The foregoing seed generation techniques are presented by way of illustrative example only, and should not be construed as limiting the scope of the invention in any way. Those skilled in the art will appreciate that the invention can be implemented using a wide variety of alternative cryptographic algorithms and processing steps.","As mentioned above, a given random number, pseudorandom number or other string generated by an SSGP client may be encrypted using the public key of the SSGP server or a secret key shared by the SSGP client and the SSGP server. If the public key is an RSA key, appropriate padding may be used, for example, in accordance with the padding scheme described in Public-Key Cryptography Standard (PKCS) #1, \u201cRSA Cryptography Standard,\u201d v2.1, published by RSA Laboratories. In the case of a shared secret key, the shared key may be used as an OTP seed with R_C applied as an input to the OTP algorithm. Using the notation from the above examples, this operation in the case of the hash algorithm example may be written as:\n\nEncrypted_nonce=Hash (shared_key|OtherInfo)\n\nwhere \u201cOtherInfo\u201d is optional additional information known both to the SSGP client and the SSGP server, and \u201cXOR\u201d denotes bit-wise addition modulo two. The output of the hash algorithm may need to be truncated to match the size of R_C.\n","The corresponding operation in the encryption algorithm example is given by:\n\nEncrypted_nonce=AES (shared_key, ).\n","Typically, the user connecting to the SSGP server will need to authenticate in order for the server to later on be able to couple the user to the newly-generated seed in the authentication entity. Conventional authentication techniques, of a type well known to those skilled in the art, may be used for this purpose. Once the seed has been generated, and the user authenticated, the SSGP server may provide a corresponding token record to the authentication entity, and, in a concurrent or subsequent step, inform the authentication entity about the association between user and the token.","A description of protocol data units (PDUs) in an exemplary implementation of the seed generation protocol, in ASN.1 format, is as follows. All PDUs in this particular embodiment should be DER-encoded before being sent.","SSGP Generic Request PDU",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SSGPRequestPDU ::= SEQUENCE {"]},{"entry":[{},"\u2003\u2003payLoad ClientPayload,"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"ClientPayLoad ::= CHOICE {"]},{"entry":[{},"\u2003\u2003client_1_PDU [1] SSGP_Client_1_PDU,"]},{"entry":[{},"\u2003\u2003client_2_PDU [2] SSGP_Client_2_PDU,"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"This type is a container for possible client requests.","SSGP Generic Response PDU",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SSGPResponsePDU ::= SEQUENCE {"]},{"entry":[{},"\u2003\u2003status Status,"]},{"entry":[{},"\u2003\u2003payload ServerPayload OPTIONAL,"]},{"entry":[{},"\u2003\u2003mac MAC OPTIONAL,"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"Status ::= ENUMERATED {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003success","(0),"]},{"entry":[{},"\u2003\u2003operationsError","(1),"]},{"entry":[{},"\u2003\u2003protocolError","(2),"]},{"entry":[{},"\u2003\u2003timeLimitExceeded","(3),"]},{"entry":[{},"\u2003\u2003OTPAlgorithmNotSupported","(4),"]},{"entry":[{},"\u2003\u2003other","(127),"]},{"entry":[{},"\u2003\u2003... -- For future values",{}]},{"entry":[{},"\u2003\u2003}",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ServerPayload ::= CHOICE {"]},{"entry":[{},"\u2003\u2003server_1_PDU [1] SSGP_Server_1_PDU,"]},{"entry":[{},"\u2003\u2003server_2_PDU [2] SSGP_Server_2_PDU,"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"MAC ::= OCTET STRING"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The components of the SSGP_PDU type have the following meaning:\n\n",{"@attributes":{"id":"p-0056","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SSGP_Client_1_PDU ::= SEQUENCE {"]},{"entry":[{},"\u2003\u2003version ProtocolVersion,"]},{"entry":[{},"\u2003\u2003supportedOTPAlgorithms SEQUENCE OF OTPAlgorithm,"]},{"entry":[{},"\u2003\u2003supportedWrappingAlgorithms\u2003\u2003SEQUENCE\u2003\u2003OF"]},{"entry":[{},"WrapAlgorithm,"]},{"entry":[{},"\u2003\u2003flags SSGPFlags OPTIONAL,"]},{"entry":[{},"\u2003\u2003tokenSerialNumber INTEGER (0..MAX) OPTIONAL,"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"ProtocolVersion ::= INTEGER {v1(1)}(v1,...)"]},{"entry":[{},"OTPAlgorithm ::= OBJECT IDENTIFIER"]},{"entry":[{},"WrapAlgorithm ::= OBJECT IDENTIFIER"]},{"entry":[{},"SSGPFlags ::= BIT STRING {initialized(0),...}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The components of this type have the following meaning:\n\n",{"@attributes":{"id":"p-0058","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SSGP_Server_1_PDU ::= SEQUENCE {"]},{"entry":[{},"\u2003\u2003chosenOTPAlgorithm OTPAlgorithm"]},{"entry":[{},"\u2003\u2003chosenWrappingAlgorithm WrappingAlgorithms"]},{"entry":[{},"\u2003\u2003wrappingKey WrappingKey,"]},{"entry":[{},"\u2003\u2003nonce Nonce,"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"WrappingKey ::= CHOICE {"]},{"entry":[{},"\u2003\u2003publicKey RSAPublicKey,"]},{"entry":[{},"\u2003\u2003sharedKey KeyIdentifier,"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"-- RSAPublicKey is imported from PKCS #1 v2.1"]},{"entry":[{},"KeyIdentifier ::= OCTET STRING (SIZE(16))"]},{"entry":[{},"Nonce ::= OCTET STRING (SIZE(8..16))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The components of this type have the following meaning:\n\n","This PDU may be accompanied by a MAC. As indicated previously, a MAC may be needed if the token already has been initialized. In this case, the SSGP server will have to prove to the SSGP client that the server knows the current seed and therefore is authorized to cause it to be overwritten. The MAC value may be computed as described above by letting the nonce component of the response, the actual value of the wrapping key and the old seed form the string \u2018TS\u2019 (i.e., TS=R_S|K_S| existing seed).","As an example, if the server PDU included an R_S=\u2018432365 . . . \u2019H, and identified a shared key with the hexadecimal value \u2018234 . . . 432\u2019H, and the existing seed value is \u2018312 . . . 213\u2019H, then the string TS will be:\n\n432365 . . . |234 . . . 432|312 . . . 213\n\nSuch a string would be 384 bits long, assuming the length of R_S was 16 bytes (128 bits), the length of the shared key 16 bytes (128 bits) and the length of the current seed 16 bytes (128 bits).\n\nSSGP Client Second PDU\n",{"@attributes":{"id":"p-0062","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SSGP_Client_2_PDU ::= SEQUENCE {"]},{"entry":[{},"\u2003\u2003encryptedNonce Nonce,"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The components of this type have the following meaning:\n\n",{"@attributes":{"id":"p-0064","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SSGP_Server_2_PDU ::= SEQUENCE {"]},{"entry":[{},"\u2003\u2003tokenSerialNumber INTEGER (0..MAX),"]},{"entry":[{},"\u2003\u2003... -- For future extensions"]},{"entry":[{},"\u2003\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The components of this type have the following meaning:\n\n","When receiving a response PDU with the status \u201csuccess,\u201d the SSGP client associates the generated seed with the token serial number, by appropriate storage of the corresponding data. After this operation, it will not be possible to re-generate the seed unless knowledge of the current seed is proven.","To avoid a false \u201cCommit\u201d message causing the token to end up in an initialized state for which the server does not know the seed, SSGP_Server2_PDU messages should always be sent with a MAC. The MAC may be made as described above for SSGP_Server1_PDU messages, with the exception that the input would comprise the newly generated seed and R_C, i.e., TS will be the concatenation of the newly generated seed, the wrapping key, and R_C:\n\nTS=new seed|K_S|R_C.\n","The foregoing protocol PDU descriptions should be considered illustrative examples, and alternative PDUs or other message formats can be used in other embodiments.","The PDUs described above can be bound to HTTP\/1.1 or numerous other communication protocols, as will be apparent to those skilled in the art.","In an implementation utilizing HTTP, the HTTP client normally will be different from the SSGP client, i.e., the HTTP client will only exist to \u201cproxy\u201d SSGP messages from the SSGP client to the SSGP server. Likewise, on the HTTP server side, the SSGP server may receive SSGP PDUs from the HTTP server.","For such an implementation, persistent connections as defined in HTTP\/1.1 may be assumed. SSGP requests are mapped to HTTP POST operations. SSGP responses are mapped to HTTP responses. For all SSGP messages, the Content-Type may be set to \u201capplication\/x-vnd.rsa.ssgp.\u201d The Request-URI may be set to that of the SSGP server.","Errors relating to the connection may be transferred to the HTTP client as HTTP errors. Errors relating to the SSGP protocol will be transparent to the HTTP client as they will be sent to the SSGP client in SSGP PDUs.",{"@attributes":{"id":"p-0073","num":"0086"},"figref":"FIG. 3","b":["300","100","102","302","102","110","304","302","102","302","110","110","102","104"]},"A secure connection is established between the SSGP server S\u2032 and the browser portion , in a conventional manner, through the SSL protocol. The user name and shared secret are then sent from the browser portion to the SSGP server. The SSGP server checks the user name and shared secret, and if appropriate initiates the SSGP protocol. The SSGP client provides supported algorithm information back to the SSGP server, and the SSGP server responds with used algorithm information, a token serial number, the string R_S and the string K_S. The SSGP client responds by generating R_C, encrypting R_C using K_S, and sending the result back to the SSGP server. In the figure, E(A,B) denotes the encryption of B with key A, K_S denotes the public key of the SSGP server, R_S denotes a random number chosen by the SSGP server, and R_C denotes a random number chosen by SSGP client.","The SSGP server decrypts R_C and generates a seed by applying a hash function to a combination of R_S, K_S and R_C. The SSGP client also generates a seed in a similar manner, although this operation is not explicitly shown in the figure. The SSGP server registers the user and generated seed with an authentication entity, such as a server equipped with RSA ACE\/SERVER\u00ae software. The SSGP server then sends a commit message to the SSGP client. The SSGP client then stores the serial number with the generated seed.","The initial request PDU from the SSGP client in the  embodiment may be of the following form:",{"@attributes":{"id":"p-0077","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"POST https:\/\/tokens-r-us.com\/cgi-bin\/ssgp-server HTTP\/1.1"]},{"entry":[{},"Cache-Control: no-cache"]},{"entry":[{},"Pragma: no-cache"]},{"entry":[{},"Host: tokens-r-us.com"]},{"entry":[{},"Content-Type: application\/x-vnd.rsa.ssgp"]},{"entry":[{},"Content-Length: <some value>"]},{"entry":[{},"binary data (selected version, supported algorithms,...)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0078","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"Cache-Control: no-cache"]},{"entry":[{},"Content-Type: application\/x-vnd.rsa.ssgp"]},{"entry":[{},"Content-Length: <some other value>"]},{"entry":[{},"binary data (random nonce, public key,...)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Advantageously, the secure seed generation techniques disclosed herein overcome one or more of the problems and limitations associated with the above-described conventional techniques. For example, in the illustrative embodiments, the SSGP protocol is configured such that the generated seed is not exposed in plaintext form to any entity other than the SSGP server and the SSGP client, for example, where the server and client comprise an authentication entity and authentication token, respectively. Also, the SSGP protocol does not require any substantial changes to existing infrastructure, such as existing authentication entity and authentication token infrastructure. Furthermore, the SSGP protocol is easy to administer, and scales well to applications involving large numbers of devices.","Details regarding certain conventional cryptographic techniques suitable for use in conjunction with the present invention may be found in, e.g., A. J. Menezes et al., Handbook of Applied Cryptography, CRC Press, 1997, which is incorporated by reference herein.","It should again be emphasized that the particular secure seed generation techniques described above are provided by way of illustration, and should not be construed as limiting the present invention to any specific embodiment or group of embodiments. For example, the invention can be implemented in other types of systems, using different arrangements of processing devices and processing operations. Also, the particular message formats and communication protocols utilized may be varied in alternative embodiments. Moreover, the various simplifying assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the invention. Numerous alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 2 and 3"}]},"DETDESC":[{},{}]}
