---
title: Undo/redo architecture across multiple files
abstract: Editing operations are monitored for operations for which information must be stored in order to properly apply an undo or undo/redo sequence to plurality of files. A snapshot is taken and persisted before such an operation is performed. Upon the execution of an undo or redo command, the persisted snapshot is retrieved and applied to the newly generated editing element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07823060&OS=07823060&RS=07823060
owner: Microsoft Corporation
number: 07823060
owner_city: Redmond
owner_country: US
publication_date: 20020607
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE\/PERMISSION","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Conclusion"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings hereto: Copyright\u00a9 2002, Microsoft Corporation, All Rights Reserved.","This invention relates to the field of computing and in particular to the field of editing tools.","In some editors it is possible to \u201cback out\u201d and \u201cre-instate\u201d changes made to a document. For example, in MICROSOFT WORD, a user can use an \u201cundo\u201d and \u201credo\u201d function available from the standard toolbar to \u201cundo\u201d a change that was previously made or \u201credo\u201d a change that was previously undone. This function can be performed multiple times. In other words, activating \u201cundo\u201d four times will undo the last four changes made to a document. Subsequently activating \u201credo\u201d three times will redo three of those last four changes, effectively resulting in the same effect as activating \u201cundo\u201d once.","When performing certain types of tasks, such as performing certain types of programming projects using certain editors, the editor may open several documents. When a user edits or changes one document, changes are made to the other document or documents automatically to reflect the changes the user made to the first document. Typically, however, the undo\/redo function does not extend across multiple documents. Hence problems may arise when, for example, an element is deleted from a document and then the delete function is undone. The element may be deleted in the first document and then be reinstated to its original condition (by the undo) but the corresponding changes to the related document may not be made, so that the related document is not properly reinstated to its original condition.","For example, in an active server page (ASP) file declarative tags (HTML, ASP directives, server controls and static text, and the user interface (UI) part) are combined with the code. In certain environments, the code either can be stored on the same page as the tags or on a separate page known herein as the Code-Behind page. When an element such as a control is deleted in the UI component, associated elements such as the declaration, events and properties of the control are deleted from the code file. Problems arise, however, for example, when the delete is undone. When the delete is undone, the declaration, properties and events should be reapplied to the related Code-Behind file, however, heretofore, no known method has been available to apply the undo (or undo\/redo, etc.) to the related document because the undo\/redo function has been confined to a single document. Hence it would be helpful if an undo\/redo function could support undo\/redo changes across multiple documents.","Editing operations are monitored for operations for which information must be stored in order to properly apply an undo, redo, or undo\/redo sequence or the like to a plurality of files. A snapshot is taken and persisted before such an operation is performed. Upon the execution of an undo or redo command, the persisted snapshot is retrieved and applied to the newly generated editing element. Hence editing operations such as but not limited to undo\/redo operations are performed essentially simultaneously to multiple files, wherein an editing operation such as an undo, a redo or the like, performed on one file is propagated to a related file or files automatically.","Exemplary Computing Environment",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Undo\/Redo System and Method","Overview",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["214","216","300","500","300","500","216","214"]},"When an editing operation is performed on an element (element one) in a first file, the editing operation associated with another element (element two) in a related file or files, a notification is sent to a listener object such as Listener Manager . If the operation is one for which information must be captured in order for an undo or a redo to be correctly performed, a snapshot (element three) of an aspect of element one of the first file or a snapshot of element two from the related file or files is taken by a serializer\/deserializer  before the selection is operated on. The snapshot is stored in a snapshot store. In one embodiment, the snapshot is stored as an object in an object store . An operation unit including the operation and the element on which the operation was performed is added to an operation store . If an operation such as, for example, an \u201cundo\u201d is received, the appropriate operation and element are retrieved from the operation store , the snapshot is retrieved from the snapshot store and applied to the element of the first file to generate the element of the second file or the snapshot of the second element is retrieved from the snapshot store and is applied to the related file or files. An operation unit (e.g., custom undo unit) for the undo is stored in an operation store  maintained by Listener Manager .","For example, assume that two homogeneous or heterogeneous documents are being simultaneously edited and that document  is associated with a block of text comprising the words \u201cSoftware Version 1.0\u201d. Assume further that the words \u201cSoftware Version 1.0\u201d are associated with the words \u201cMixItWell Package\u201d in document . If an editing operation such as \u201cdelete\u201d or \u201ccut\u201d of \u201cSoftware Version 1.0\u201d is received, typically, \u201cSoftware Version 1.0\u201d will be deleted from document  and \u201cMixItWell Package\u201d will be deleted from document . In accordance with one embodiment of the invention, before \u201cSoftware Version 1.0\u201d is deleted from document  and before \u201cMixItWell Package\u201d is deleted from document , a notification is sent to Listener Manager  so that a snapshot of \u201cMixItWell Package\u201d is taken and stored in a snapshot store so that if the deletion of \u201cSoftware Version 1.0\u201d is undone, restoring \u201cSoftware Version 1.0\u201d to document , \u201cMixItWell Package\u201d is likewise restored to document .","In this case receipt of a undo delete command would result in \u201cSoftware Version 1\u201d being re-instated in document  and \u201cMixItWell Package\u201d being retrieved from the snapshot store and re-applied to document . An operation unit is added to the operation store . The operation unit includes an identifier of the edited element (e.g., \u201cSoftware Version 1\u201d and the operation performed (e.g., delete undo).","Undo\/Redo Across Multiple Files in the NET Environment","One of the four major pieces of the NET framework is ASP.NET, the successor to Active Server Pages (ASP). ASP.NET is a programming environment for Web applications that run on the Internet Information Services (IIS) Web server and interact with users through a browser. ASP.NET loads dynamic Web pages, parses the pages for .NET code (i.e., code written in Visual Basic.NET, C#, JScript, or other .NET languages), and passes the code along to .NET language compilers and the CLR (Common Language Runtime). ASP.NET supports the CLR libraries, and languages. ASP.NET reduces the amount of code required to write a Web application or Web service and introduces new methods for implementing Web services. Additional information concerning the .NET platform produced by Microsoft Corporation of Redmond, Washington is described in PCT Publication WO 01\/98936, having an international filing date of Jun. 22, 2001 and incorporated herein by reference.","ASP.NET developers create pages by assembling and customizing the Web Forms controls provided by the class libraries. Developers customize controls by setting properties, such as but not limited to font, size, placement and by supplying application-specific \u201cevent handler\u201d code. This code is invoked upon each user request or response. Developers can also create custom controls, which could allow commercial independent software vendors (ISVs) to offer add-on libraries of ASP.NET controls similar to the libraries of ActiveX controls available for Visual Basic today.","Visual Studio Integrated Development Environment (IDE)","Visual Studio.NET provides tools including an editor for writing source code and wizards that automatically generate source code for common programming tasks. For example, developers can automatically generate the code required to call a Web service by dragging and dropping a link to the Web service site into the client application's source code in the IDE. Graphical editors in Visual Studio. NET enable developers to build Web Forms by dragging and dropping fields and other components from a toolbox. Visual Studio.NET provides a single Integrated Design Environment (IDE) that supports all of its programming languages and covers Web applications and desktop applications.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["200","206","210","208","212","200","206","210","208","212","200"]},"Hence the .NET platform enables the separation of the UI portion  (called a Web form and preferably denoted by a file extension of \u201caspx\u201d or \u201cascx\u201d) of the ASP.NET page from the code part  (preferably denoted by a file extension of \u201ccs\u201d if the code is written in C# or \u201cvb\u201d, if the code is written in Visual Basic). The file that contains the code part is called herein the \u201cCode-Behind\u201d or \u201cCode-Beside\u201d file. At runtime, the two files are compiled into one file.","Within the Design Editor  of the IDE , an ASP.NET developer can create a page by assembling and customizing the Web Forms controls provided by the class libraries. A Web Form control is a component embedded in a Web page and that runs on a Web server. When a page is accessed, the Web Forms controls embedded in the page accept and validate the user's input and generate the appropriate HTML output in response. Web Forms controls include simple form input fields and buttons and complex elements such as a grid control that enables users to view and edit live database data as is done, for example, in a spreadsheet like Excel. Web Forms provide built-in code to handle common tasks such but not limited to:\n\n","A developer can customize a control by setting the properties of provided controls. The properties used for customization may include but are not limited to font, size, and placement. Controls can also be customized by supplying application-specific \u201cevent handler\u201d code which is invoked upon a user request or response. A developer can also create a custom control, (e.g., a custom control may be developed by a commercial independent software vendor (ISV) so that add-on libraries of ASP.NET controls could be added similar to the libraries of ActiveX controls available for Visual Basic today).","Typically, a control is uniquely identified in the Code-Behind file using the attribute ID (e.g., ID=Button might identify a first button on a page.) Hence in the Code-Behind file a declaration for the control will exist, as will events and properties associated with the control. Each event is associated with an event handler. During runtime, an instance of a class (e.g., an instance of a Button class) is generated for each control. The instance of a class (the object) is associated with the defined properties such as ID (e.g., Button), backcolor (e.g., red), text (e.g., \u201cHello\u201d), an event (e.g., a click event) and so on.","Now assume that two heterogeneous files are being edited, where the first file is a WebForm document  and the second file is the Code-Behind file . It should be understood that while in this example the two files are heterogeneous, the files in question could alternatively be homogeneous files. Assume that WebForm document  includes a control . Control  may be associated with state, that is, particular values to which characteristics or properties of the control have been set. The state of the control may be associated with particular code in Code-Behind file  such as a ClickEvent and event handler. Assume that user input has been received that indicates that an editing operation (e.g., a delete of control ) has been received. Before the control is deleted from the WebForm document  and the code associated with the state of the control is deleted from the Code-Behind file , a notification is sent to a listener object (e.g., Listener Manager ) and a snapshot of the state of the control being deleted is taken by the serializer\/deserializer  and stored (e.g., as an object) in a snapshot store, (e.g., object store ).","For example, if the input received indicates that the control  (e.g., Button) is to be deleted from WebForm , a notification is sent to Listener Manager  so that before Button is deleted from the form, a snapshot of the state of Button is taken by the serializer\/deserializer  and stored as an object in object store .","Thus, it should be understood that any element or any aspect of the element may be captured by the snapshot. The use of state in the example above is merely exemplary. In one embodiment, operations on an element for which a snapshot is required (e.g., cut, delete and the like) may be determined by the presence of an \u201caccountable\u201d attribute, but any suitable method of determining such operations is contemplated by the invention. Similarly, it should be understood that serializer\/deserializer  may be any appropriate module capable of capturing an element or aspect of an element, such as but not limited to, the state of a control. The captured element or aspect of an element, in one embodiment of the invention, is a code object and is stored in an object store  but it should be understood that the element or aspect of the element may be captured as an object, code object, string, XML, BLOB or in any other suitable fashion and may be stored in any suitable store. An operation unit (e.g. custom undo unit) that identifies an editing operation on an element is stored in an operation store . In one embodiment of the invention, the operation store  is a LIFO stack. The operation store  may include different kinds of operations (e.g., both undo and redo operations and the like) or one store may be maintained for each different type of operation (e.g., undo operations may be stored in an undo store and redo operations may be stored in a redo store).","For example, if an undo is subsequently received for the deletion of Button, a new instance of Button is re-instated in WebForm document , the pre-deletion state of Button is retrieved by retrieving the snapshot stored in object store  for Button, the retrieved code object is applied to Button and the resultant code is applied to Code-Behind file . An operation unit that identifies Button (the control that was deleted) and the operation (undo delete) is added to the operation store . An operation unit is added to the operation store  so that a subsequent redo operation can be performed, if requested. While the examples above have detailed a delete operation followed by an undo, it should be understood that other operations requiring the capture of additional information such as state of a control are contemplated by the invention (e.g., the redo of an \u201cundone\u201d operation or any sequence of undo\/redo operations or the like).","For example, and referring now to , a blank default WebForm document , containing no controls, etc. is illustrated.  illustrates the WebForm document  to which a Button server control (Button)  was added from the toolbox . The control is selected by default after being inserted into the document . Upon double-clicking on the button  (or by selecting the control and pressing the \u201cEnter\u201d key) a default event handler for the control is generated and a window displaying the code-behind is displayed. In the case of the Button server control , a Click handler is generated.  illustrates the code-behind document . The declaration  for Button  is illustrated. Code for the event handler that was generated as a result of the double-click action is referenced by reference numeral . The \u201cHandles\u201d clause is the way the event handler function is hooked to the corresponding control in VisualBasic (in this case Button, ).",{"@attributes":{"id":"p-0050","num":"0052"},"figref":["FIG. 7","FIG. 8"],"b":["300","1","402","500","1","504","502","1"],"i":"a","sub":"13 "},{"@attributes":{"id":"p-0051","num":"0053"},"figref":["FIG. 9","FIG. 10","FIG. 11"],"b":["300","802","804","1","402","300","500","902","1","1","216","1","1004","1002"],"i":"a "},{"@attributes":{"id":"p-0052","num":"0054"},"figref":"FIG. 12","b":["1202","1204","1206","1208","1210","1212","1206","1214","1204","1215","1216","1218","1204"]},"Referring again to , for example, at step , the Design Editor  is accessed and WebForm document  is opened. Assume that WebForm document  includes Button  (element one). Preferably, associated Code-Behind document  is also opened automatically by the Design Editor . Assume that associated Code-Behind file  contains a declaration  and an event  associated with Button , automatically placed in Code-Behind file  by Design Editor  as a result of adding Button  in WebForm . The event  is associated with an event handler clause . Event  and event handler clause comprise particular code (element two) of Code-Behind file  associated with Button (element one) of WebForm document .","At step , an editing operation is performed. For example, assume that a button is moved from one location to another within document , or background color is changed. At step , a notification is sent to Listener Manager . Listener Manager  determines that this editing operation is not one that requires additional information such as state to be saved. At step , it is determined that this is not an undo or redo operation so processing returns to step . At step  a control (e.g., Button ) is selected and deleted. At step , a notification is sent to Listener Manager . In one embodiment, a change service notification (e.g., OnComponentRemoving) is used to detect that a control (i.e., Button) is being removed from the WebForm document . Preferably notifications fired as part of destroying or closing document  are ignored. It is determined that this is an operation for which state needs to be saved, so processing continues at step .","At step , a snapshot is taken. In one embodiment the snapshot is taken by calling a module (e.g., CodeDomSerializer.Serialize) on the serializer associated with the type of control, (in this case, a Button control). At step  the snapshot is stored. In one embodiment, the snapshot is a code object generated by the serializer. In one embodiment the code object is stored in a hash table keyed off the unique identifier of the control (e.g., Button). The hash table includes the key (Button) and a value (the code object).","An operation unit is added to the operation store at step . In one embodiment the Undo\/Redo Manager keeps track of operations than can be undone or redone by maintaining a LIFO (last in first out) stack of undo and redo units. Every editing operation that can be undone generates an undo unit. Every undo operation generates a redo unit. Hence, when an element such as Button is deleted, a parent undo unit is created and is added to the stack of undo units. When the notification is fired, a new instance of a custom undo unit (i.e., an operation unit) is created. The pre-made operation unit itself may be customized or overridden. The operation unit is created to hold the code-behind data (e.g., the state of Button) from Code-Behind document  and in one embodiment is added as a child of the parent undo unit created when Button was deleted from WebForm document . In one embodiment, the child undo unit is added to the parent undo unit through IOleUndoManager.Add. In one embodiment, operation units cache the code object and respective code DOM serializer(s) and do not hold references to live controls or to their corresponding designer instances.","Processing returns to step . Assume that the next editing operation that is performed is \u201cundo\u201d, that is, just-deleted Button is to be re-instated in WebForm . When Button is regenerated by the undo, Button does not have the original properties associated with it in the Code-Behind file. At step  it is determined that the editing operation is not an operation requiring state to be stored, and processing proceeds to step . At step  it is determined that the editing operation is an undo or redo. The editing operation is undone on the first file. In one embodiment a notification is sent that preferably includes the unique ID (Button), and the operation (undo). In one embodiment, this notification is a call to OleUndoUnit::Do. At step , the appropriate operation unit is retrieved. (e.g., through IOleUndoUnit::Do). In one embodiment Undo\/Redo Manager implements the undo. Undo\/Redo Manager retrieves the operation unit from the operation store and calls IOleUndoUnit::Do. IOleUndoUnit::Do places the new operation (undo) unit on a redo stack and adds Button back to WebForm document . When Button is regenerated by Undo\/Redo Manager, Button does not have the original properties associated with it in the Code-Behind file. At step  a notification is sent indicating that a control whose unique ID is \u201cButton\u201d has been added to WebForm . In one embodiment the cached code-behind information is retrieved from the hash table from the unique key (e.g., Button) and the state stored in the code object is applied on the appropriate control instance by calling CodeDomSerializer.Deserialize. Deserialization applies the state stored in the code object to an instance (e.g., Button). Hence, the code object that the serializer returned in step  is retrieved from the hash table and the deserializer applies the properties stored in the code object to the Button control. Preferably, the code object can be applied to the same instance or to a different instance of the same type of control.","Hence Button (element one) is added back to WebForm , and the appropriate code (element two) is added back to Code-Behind file . At step , the undo operation unit is added to the operation store. In one embodiment the operation unit is added to the operation store by calling IOleUndoManager.Add). The operation unit is added to the operation store so that the operation can be redone, if desired. It should be understood that although the example demonstrated a delete and an undo, an undo and a redo, any combination of undos and redos or the like may be performed, limited only by the size of the operation store or stores. Processing continues at step .","It is noted that the foregoing examples have been provided merely for the purpose of explanation and are in no way to be construed as limiting of the present invention. While the invention has been described with reference to various embodiments, it is understood that the words which have been used herein are words of description and illustration, rather than words of limitation. Further, although the invention has been described herein with reference to particular means, materials and embodiments, the invention is not intended to be limited to the particulars disclosed herein; rather, the invention extends to all functionally equivalent structures, methods and uses, such as are within the scope of the appended claims. Those skilled in the art, having the benefit of the teachings of this specification, may effect numerous modifications thereto and changes may be made without departing from the scope and spirit of the invention in its aspects."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 7","FIG. 4","FIG. 4"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 9","FIG. 4"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
