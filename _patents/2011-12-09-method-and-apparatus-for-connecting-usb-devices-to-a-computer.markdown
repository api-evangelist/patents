---
title: Method and apparatus for connecting USB devices to a computer
abstract: A method and apparatus are provided to enable a plurality of standard USB peripheral devices, utilizing the USB specification, to be distributed at various nodes across a network, wherein communications across the network may take advantage of any pre-existing network connectivity of a standard, non-modified USB host computer. In particular, a virtual host controller function is added to the host computer in order to direct data communications towards a pre-existing network transceiver. As a result, the host computer is not required to be provided with USB hardware and is able to communicate across the network using pre-existing data communication components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856388&OS=08856388&RS=08856388
owner: Icron Technologies Corporation
number: 08856388
owner_city: Burnaby, BC
owner_country: CA
publication_date: 20111209
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE PRIOR ART","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates to methods and apparatus for transmitting signals between computers and devices using Universal Serial Bus (USB) ports, and, in particular, to a method for operating a plurality of USB peripheral devices from a host computer that is equipped with a data network connection.","Universal Serial Bus (USB) is a technology designed to permit a wide range of peripheral devices to be attached to personal computers by the average user. The technology supports all of the common peripheral devices such as keyboards, mice, speakers, joysticks, cameras, flash drives, hard drives, DVD drives and many others, and its use in current computers is common.","The specifications defining USB (e.g. Intel et al., Universal Serial Bus Specification, Revision 1.0, January 1996; and updated as Revision 1.1 in Sep. 23, 1998, and further updated as Revision 2.0 in April 2000, and subsequent updates, additions and modifications\u2014hereinafter collectively referred to as the \u201cUSB Specification\u201d, which term can include future additions, modifications and revisions and in particular those additions under development for release as USB 3.0) are non-proprietary and are managed by an open industry organization known as the USB Implementers Forum (USB-IF). The USB Specification establishes a number of criteria which must be met in order to comply with USB standards. The USB Specification also defines a number of terms, which definitions are adopted for the purposes of this specification, and incorporated herein by reference.","Under the USB specification, USB data communication is managed by a USB host controller unit installed, preferably, in a host computer. Furthermore, the data communication occurs in a series of USB transactions wherein each USB transaction is initiated by a USB host controller and is composed of one, two or three subactions. Each subaction may be composed of one or more packets and is typically terminated by a reversal in the direction of data flow.","In Applicant's U.S. Pat. No. 6,381,666, the contents of which are incorporated herein by reference, a method and apparatus for extending the distance between a host computer and a peripheral device is provided which increased the useable distance to 100 meters or more. This greatly extended the 5 meter distance normally allowed under the USB Specification. However, while the approach described in U.S. Pat. No. 6,381,666, and later enhanced in Applicant's U.S. Pat. No. 7,149,833 (the contents of both of which are also incorporated herein by reference), made it possible to operate USB peripheral devices over an extended distance and in the presence of long transmission delays, it did not describe a configuration in which extended range was obtained by using the networking capabilities of the host computer.","In Applicant's U.S. Pat. No. 7,818,486, the contents of which are also incorporated herein by reference, a method and apparatus for connecting USB devices to a host computer is provided which enabled operation across a standard data communications network. While the approach detailed in U.S. Pat. No. 7,818,486 made it possible to reuse the data networking hardware and software of the host computer for USB communications, it did not describe a configuration in which USB hardware at the host computer could be eliminated.","U.S. Pat. No. 5,890,015 attributed to Gamey et al. discloses a method and apparatus for implementing a wireless universal serial bus host controller by interfacing a universal serial bus hub as a universal serial bus device. Gamey et al disclose that a USB host controller can be made to operate remotely by communicating with said remote USB host controller through a local USB port. However, the disclosure of Garney et al. is limited to computer input\/output through USB ports and does not enable the data communications capabilities of a host computer containing said local USB port to also be utilized for USB-related purposes. Furthermore, the disclosure of Garney et al. does not enable USB hardware at the host computer to be eliminated","U.S. Pat. No. 6,904,489 attributed to Zarns discloses methods and systems for remotely accessing universal serial bus devices. Zarns discloses that USB devices can be connected to a host computer over a data communications network. However, the disclosure of Zarns requires that the standard chain of USB driver processing be altered by intercepting, detecting and interrupting the handling of requests targeted at said remote USB devices. The disclosure of Zarns is thereby limited to systems in which the computer operating system enables such intercepting, detecting and interrupting to be performed in a reliable and efficient manner. Furthermore, the disclosure of Zarns does not enable USB hardware at the host computer to be eliminated","A publication attributed to Hirofuchi et al. (\u201cUSB\/IP\u2014a Peripheral Bus Extension for Device Sharing over IP Network\u201d, USENIX, Association, FREENIX Track: 2005 USENIX Annual Technical Conference, pg. 47) discloses methods and apparatus for extending a peripheral bus across an IP network for the purpose of USB device sharing. However, the publication of Hirofuchi et al. requires that a personal computer capable of running a USB software driver stack be provided at both the local and remote locations. The publication of Hirofuchi et al. further requires that a stub driver be inserted in the software stack of the computer to which the peripheral devices are directly connected and that said stub driver shall be able to communicate with a set of co-located USB device drivers. Furthermore, the publication of Hirofuchi et al. requires the communication of USB Request Blocks (URB's) which limits the responsiveness and performance of the system.","Therefore, it would be desirable to provide methods and apparatus for connecting remote devices to a host computer in which connectivity can be performed using the data communication interfaces commonly included in such host computers and in which it is not necessary to interrupt or otherwise disturb the connectivity of the USB driver software stack. Further, what would also be desired is that said remote devices need not be directly connected to a computer that is capable of running a USB software driver stack and\/or that said host computer need not be equipped with USB hardware. Further, what would also be desired is that the performance of said methods and apparatus should not be limited by the aggregation of USB transactions into USB Request Blocks.","The ability to reuse the often pre-existing network connectivity of a host computer rather than providing a dedicated network connection for USB extension purposes would be particularly beneficial when the cost of the network attachment hardware is significantly higher than the cost of the USB attachment hardware. By way of example, the cost of a transceiver that provides a wireless connection to an Ethernet network is considerably more than the cost of a USB transceiver. If the host computer were already equipped with a wireless transceiver for network attachment and USB traffic could be directed to the host computer's pre-existing wireless networking port, then the cost of an additional wireless transceiver can be avoided. Networks that employ fiber-optic or power-line technology which also exhibit high transceiver costs could also benefit from this same approach. Further, the possibility to eliminate USB ports altogether in a device, would further reduce costs by elimination of one or more USB transceivers.","Moreover, the approaches described in U.S. Pat. Nos. 6,381,666 and 7,149,833 did not require that any changes or additions to existing host computer operating software be made to obtain the extended distance capability. The approach described in U.S. Pat. No. 7,818,486 did not require that any changes to existing host computer operating software be made to obtain the extended distance capability. It would be advantageous if the attribute of no changes to existing operating software could be maintained in order to provide the most widely applicable solution and in order to preserve ease of use of the system. It would be further advantageous if any incremental software were to comply with existing operating system driver models.","Accordingly, while the range extending USB technology, as described in U.S. Pat. No. 6,381,666 and U.S. Pat. No. 7,149,833 has proven to be useful in linear configurations, and the transceiver reuse technology described in U.S. Pat. No. 7,818,486 has proven to be useful in networked configurations, it would still be desirable to provide improvements to the technology by providing an improved method and apparatus for enabling a plurality of USB peripheral devices, utilizing the USB specification, to be distributed at various nodes across a network, wherein communications across the network between a USB host computer and the USB peripheral devices may take advantage of, and use, any pre-existing network connectivity of the USB host computer and wherein said USB host computer is not required to be equipped with USB hardware.","Therefore, it is an objective of the present invention to provide methods and apparatus to enable a plurality of USB peripheral devices, utilizing the USB specification, to be distributed at various nodes across a network, wherein communications across the network between a USB-enabled host computer and the USB peripheral devices may take advantage of, and use, any pre-existing network connectivity of the USB-enabled host computer. In particular, it is an objective of the present invention to use pre-existing network transceivers as much as possible, during the transmission of data across the network.","It is a further object of the present invention that the methods and apparatus shall accommodate the transmission delays introduced by the data communications network and which delays may exceed the parameters defined by the USB specifications.","It is a further object of the present invention that the data communications network may transport additional traffic unrelated to the operation of the USB peripheral devices.","It is a further object of the present invention that the host computer may be connected to the data communications network by any conventional means.","It is a further object of the present invention that the host computer need not be equipped with USB hardware in order to communicate with said remote USB devices.","It is a further object of the present invention that no changes need be made to any pre-existing software drivers required to operate the host computer or the USB peripheral devices.","It is a further object of the present invention that no changes be required to the data communications network driver software running on the host computer.","It is a further object of the present invention that any additional software required to operate the host computer shall be compatible with the standard USB driver model.","It is a further object of the present invention that the performance and responsiveness of the system shall not be limited by the aggregation of USB transactions into higher level structures such as USB Request Blocks.","It is a further object of the present invention that the plurality of USB peripheral devices may be connected to the data communications network through a remote extender unit.","It is a further object of the present invention that USB traffic arriving at the remote extender unit may be distributed to a plurality of USB peripheral devices.","It is a further object of the present invention that corresponding capabilities may be provided in the reverse direction where USB traffic originates at a plurality of USB peripheral devices and terminates at the host computer.","These and other objects of the invention, which will become apparent herein, are fully or at least partially attained by the present invention which invention provides a method and related apparatuses, wherein a network adapter of a first host computer is connected to a data communications network to which one or a plurality of remote extender unit units may also be connected. Each remote extender unit may, in turn, be connected to one or a plurality of USB peripheral devices.","Accordingly, in a first aspect, the present invention provides a computer system for transmitting USB traffic between a host computer and one or a plurality of USB peripheral devices, wherein the host computer and the one or a plurality of USB peripheral devices are connected by a data communications network and wherein the host computer is equipped with a virtual USB host controller. In particular, the present invention provides a computer system for transmitting USB traffic between a host computer and one or a plurality of USB peripheral devices, wherein the host computer and the one or a plurality of USB peripheral devices are connected one to the other by a data communications network, the computer system comprising:\n\n","In a further aspect, the present invention also provides a method for transmitting USB information from a host computer to a USB peripheral device across a data communications network, wherein said method is as of the present invention is as described herein with respect to the aforegoing disclosure and appended drawings. In particular, the present invention also provides a method for transmitting USB information from a host computer to a USB peripheral device across a data communications network, said method comprising;\n\n","In a still further aspect, the present invention also provides a method for transmitting USB information from a USB peripheral device to a host computer across a data communications network, said method comprising;\n\n","In a preferred embodiment of a USB system, the host computers and the USB peripheral devices can be any standard units or devices that support the USB specifications. Preferably, the units and devices shall support the most recent version of the USB specifications, but units and devices that support only earlier versions of the USB specifications are also permissible.","In one preferred embodiment of the data communications network, the data communications network is comprised of a dedicated link connecting a host computer and a remote extender unit.","In a further preferred embodiment of the data communications network, the data communications network is comprised of a network, and more preferably a shared network that may carry other traffic in addition to the USB traffic travelling between the host computer and the remote extender unit. Networks such as those based on wired Ethernet, wireless Ethernet, the public Internet, private intranets and combinations of these networks are, for example, suitable for this application.","In a preferred embodiment, a USB transceiver, and preferably a USB 2.0 or USB 3.0 transceiver, or the like, shall be provided at the remote extender unit, for connection to any peripheral devices, or USB hubs, as desired, using a USB cable that conforms to the USB Specification.",{"@attributes":{"id":"p-0047","num":"0094"},"figref":"FIG. 1","b":["10","17","16"]},"In , and in any following figures, dotted lines are used to represent additional connections or devices since the USB Specification is not limited to the number of connections and devices shown in the figure.",{"@attributes":{"id":"p-0049","num":"0096"},"figref":"FIG. 2","b":["10","17","12","13","15","16","15","17"]},"In a \u201cdata-read\u201d example under this scheme, central processor unit () within host computer () operates upon USB host controller () to send a first USB subaction to local extender unit () across USB cable (). The first USB subaction is received by USB transceiver () and forwarded to local extender logic (). The local extender logic () formats the first USB subaction for transmission through network transceiver (), long cable () and network transceiver () to remote extender logic (). Local extender logic () may also generate an acknowledgement subaction for transmission through USB transceiver () and USB cable () to host computer (). Upon receipt of the first USB subaction, remote extender logic () converts the format of the first USB subaction for transmission over USB and forwards the first USB subaction as a sequence of one, two or three USB packets through USB transceiver (), USB cable () and (optionally) USB hub () to USB peripheral device ().","Upon receipt of the first USB subaction at USB peripheral device (), the USB peripheral device may generate a response subaction and forward the response subaction through USB cable () and USB transceiver () to remote extender logic unit (). The remote extender logic unit () formats the response subaction for transmission through network transceiver (), long cable () and network transceiver () to local extender logic () where the response subaction is then stored for later use. The remote extender logic () may also generate a second acknowledgement subaction for transmission through USB transceiver () and USB cable () to USB peripheral device ().","At a later time, host computer () will repeat the original first USB subaction intended for USB peripheral device (). This repeated subaction is also transmitted through USB cable () and USB transceiver () to local extender logic (). When the repeated USB subaction is received by local extender logic (), the local extender logic () retrieves the previously received response subaction from storage and transmits the response subaction to host computer () through USB transceiver () and USB cable ().","It will be apparent to those skilled in the art that long cable () may be any suitable form of a data transmission device, including cables such as a CAT-5 twisted pair cable, or fiber optic cable, but can also be replaced by a data communications network having connections to a local extender unit () and to a remote extender unit ().","It will be further apparent to those skilled in the art that a \u201cdata-write\u201d operation, or any other USB-related function, can follow a similar sequence to that described previously.","It will be noticed that the prior art system of  requires that two network transceivers (, ) be provided, one at each end of long cable (). This is in addition to a further network transceiver which is typically installed in host computer () as indicated by network adapter ().","With respect to the present invention, it will be apparent to those skilled in the art that network transceivers can be expensive components and can thereby dominate the cost of the local extender and the remote extender units. It will be further apparent that if network transceiver () can be eliminated from local extender unit (), then a significant reduction in the cost of the complete USB extender system can be achieved. It will also be apparent to those skilled in the art that host computers are often pre-equipped with a network transceiver for data communication purposes.","It will also be apparent to those skilled in the art that a network transceiver must be associated with, or must incorporate, a means for physically connecting the network transceiver to long cable () or equivalent data communications network. The physical connection means may typically take the form of an antenna for wireless communications, an RJ45 receptacle for electrical communications or a dual-LC receptacle for optical communications. It will be further apparent that if the physical connection means associated with network transceiver () can also be eliminated, then the physical size of local extender unit () can be reduced and the requirement for the local extender unit to be accessible and robust for cable attachment purposes can be eliminated.","It will also be apparent to those skilled in the art that a network transceiver may consume a significant quantity of electrical power in order to achieve reliable communications over extended distances. By eliminating network transceiver () from local extender unit (), a significant reduction in power consumption by local extender unit () can be achieved, resulting in lower heat dissipation and yet lower size and cost.","It will be further apparent to those skilled in the art that still greater savings in cost, size and power consumption may be realized if the local extender unit can be eliminated in its entirety.",{"@attributes":{"id":"p-0060","num":"0107"},"figref":"FIG. 3","b":["10","21","17","13","15","16","15","17"]},"In a \u201cdata-read\u201d example under this scheme, central processor unit () within host computer () operates upon network adapter () to transmit a first USB subaction. (The interaction between central processor () and network adapter () is further described in  and ). Network adapter () formats the first USB subaction for transmission through long cable () and network transceiver () to remote extender logic (). Upon receipt of the first USB subaction, remote extender logic () converts the format of the first USB subaction for transmission over USB and forwards the first USB subaction through USB transceiver (), USB cable () and (optionally) USB hub () to USB peripheral device ().","Upon receipt of the first USB subaction at USB peripheral device (), the USB peripheral device may generate a response subaction and forward the response subaction through USB cable () and USB transceiver () to remote extender logic unit (). The remote extender logic unit formats the response subaction for transmission through network transceiver (), long cable () and network adapter () to central processor unit () where the response subaction is then stored for later use. The remote extender logic () may also generate a second acknowledgement subaction for transmission through USB transceiver () and USB cable () to USB peripheral device ().","The stored response subaction is operated upon by central processor unit () to extract its information content and to provide said content to a USB software driver stack installed on central processor unit (). This operation is described in more detail in .","It will be apparent to those skilled in the art that long cable () may again be replaced by a data communications network having a connection to host computer () and another connection to remote extender unit ().","It will be further apparent to those skilled in the art that a \u201cdata-write\u201d operation can follow a similar sequence.",{"@attributes":{"id":"p-0066","num":"0113"},"figref":"FIG. 4","b":["17","15","16","14","10","14","10","17","10","14","15","14","15","15","15","15","17","16","17","10"]},"In this embodiment of the present invention, a particular arrangement of three remote extender units and two host computers has been chosen. It will be apparent to those skilled in the art that this selection of units is not intended as a limitation on the scope of the invention, and that different populations of these remote extender units and host computers might be used and that alternative connection arrangements are possible.","Also in this embodiment of the present invention, data communications network () is shown as supporting a plurality of connections. It will again be apparent to those skilled in the art that the data communications network may support only a single connection to a single host computer () and a single connection to a single remote extender unit () and thereby may be replaced by a point-to-point connection between the single host computer and the single remote extender unit.","For example,  is a block diagram of an alternative embodiment of a preferred USB system according to the present invention. In this configuration, only a single host computer () is connected to network ().","Alternatively,  is a block diagram of a further preferred USB system according to the present invention. In this arrangement, a point-to-point connection (), acting as a simple data communication network, is provided between host computer () and remote extender unit (). Again, it will be apparent to those skilled in the art that the point-to-point connection () may be provided by a variety of communications media including twisted-pair cable, coaxial cable, fiber-optic cable and wireless.",{"@attributes":{"id":"p-0071","num":"0118"},"figref":"FIG. 7","b":["30","31","31","33","32","31","33"]},"The USB core driver () is responsible for directing USB requests issued by the higher layer drivers to the hardware on which the requests are implemented. The USB hardware takes the form of a USB host controller (). Common forms of USB host controller include OHCI (Open Host Controller Interface), UHCI (Universal Host Controller Interface) and EHCI (Enhanced Host Controller Interface). A particular host controller driver () is associated with each USB host controller ().The data structure used to communicate between USB core driver () and host controller driver () is again the URB. The data structure used to communicate between the host controller driver () and the host controller hardware is the Transfer Descriptor (TD). The TD is a low-level structure highly correlated with the format of the physical (wire-level) packets issued by USB host controller () onto the USB cable (). Each individual URB is translated into a sequence of TD's by host controller driver ().",{"@attributes":{"id":"p-0073","num":"0120"},"figref":"FIG. 8","b":["40","10","80","15"]},"The host computer software stack () is comprised of a USB driver stack (units , , ,  and ) and a communications stack (, and ) linked by a virtual host application ().","The host computer USB driver stack is comprised of software arranged in layers. At the top of the stack are the USB device drivers () that implement functions required by a particular class of device, such as mass storage class, human interface class and others. The USB device drivers () issue requests to the USB core driver () across standard interface () known as the USB driver interface (USBDI). The data structure used to communicate between USB device driver () and USB core driver () is the USB Request Block (URB). The preservation of this architecture enables the system to operate with all standard operating systems and USB device class drivers. As such, the host computer is USB-enabled, and is non-modified in the sense that no hardware or operating system software has been modified.","Below the USB core driver () is a virtual host controller driver () and a virtual host controller (). When the USB core driver () receives an URB that pertains to a USB device connected to a remote extender (), the USB core driver () issues an URB to virtual host controller driver (), whereupon virtual host controller driver () \u201cdecomposes\u201d the received URB into a sequence of Transfer Descriptors which are then applied to virtual host controller (). Virtual host controller () translates each received TD into a packet format whose information content is equivalent to that of a wire-line USB packet. The translated TD packet format is then issued by virtual host controller () on software interface () as a Virtual USB packet (VUSB).","The virtual host controller () and virtual host controller driver () may be added to the operating software of a host computer by installing the corresponding software modules. This can be accomplished by downloading the installation files containing the software modules over the internet or from an external storage medium such as a USB flash drive. Once present on the host computer, the installation files are executed to install the virtual host controller () and virtual host controller driver () modules into the file system of the host computer operating system. Additionally, the installation files will call the operating system Application Programming Interface (API) in order to make the USB Core Driver () aware that a new resource\u2014the virtual host controller driver ()\u2014is available. Preferably, the installation files will also call the device management API to add the virtual host controller () to the list of hardware devices present on the host computer, thereby enabling the user to view the status and connectivity of the virtual host controller () through the same interface as would be used for a hardware-based USB host controller ().","The host computer communications stack is composed of a transport layer () and a network layer () that perform successive levels of encapsulation upon packets supplied by virtual host application () for presentation to network transceiver (). These components are similarly responsible for removing the encapsulation when packets travel in the reverse direction from network transceiver () to virtual host application ().","It will be apparent to those skilled in the art that various arrangements of transport layer () and network layer () are possible and that the layers can be combined or eliminated in particular applications. In a preferred embodiment of the host computer communications stack the transport layer () implements the Transmission Control Protocol (TCP) and the network layer () implements the Internet Protocol (IP).","The remote extender software stack () is comprised of a USB driver stack (units  and ) and a communications stack (, and ) linked by a remote host application ().","The remote extender USB driver stack is composed of a slave host controller driver () and a slave host controller (). The slave host controller driver () is responsible for scheduling USB transactions to be generated by slave host controller ().","It will be apparent to those skilled in the art that various arrangements of slave host controller driver () and slave host controller () are possible and that the units can be combined or eliminated in particular applications. In a preferred embodiment of the remote extender USB driver stack the slave host controller is a UHCI, OHCI or EHCI unit.","The remote extender communications stack is typically identical in function to that of the host computer.","The operation of this system will now be explained by way of an example in which data is read from a USB mass storage device. The operation is initiated by user action which causes USB device driver () to issue a USB Request Block (URB) across interface USBDI (). The URB is targeted at USB device (). USB core driver () receives the URB from USB device driver (), recognizes that the USB device is serviced by virtual host controller driver (), and forwards the URB to virtual host controller driver (). Virtual host controller driver () translates the single URB into a sequence of Transfer Descriptors (TD's) which it then applies to virtual host controller ().Virtual host controller () operates on each individual TD to generate a virtual USB packet containing a USB Packet Identifier (PID), a USB address and an optional data payload. Examples of USB PID's that may be used in this context include an IN PID when data is required from the USB device and an OUT PID when data is required to be sent to the USB device.","Virtual host controller () sends each virtual USB packet (corresponding to an individual Transfer Descriptor) to the virtual host application () on a schedule that is consistent with the operation of a physical USB host controller. Virtual host application () operates on a network communications stack, comprising transport layer () and network layer () to cause the contents of each virtual USB packet to be transmitted by network transceiver () over long cable ().","After transmission over long cable (), each virtual USB packet is received by network transceiver () and communicated up the network communications stack through network layer () and transport layer () to remote host application (). Each virtual USB packet is then examined by remote host application () to determine the identity of the host controller responsible for the target device and delivered to the selected slave host controller driver (). The slave host controller driver () operates upon slave host controller () to convert the virtual USB packet into a standard USB subaction for delivery to USB device () over USB cable ().","If the PID of the delivered USB subaction indicates an IN command then the USB peripheral device normally responds with a DATA0, DATA1, or NAK packet. If the PID of the standard USB packet is an OUT command then the USB device normally responds with an ACK, NAK or NYET packet. If USB device () expects to receive an acknowledgement of its response (such as when the USB device supplies a DATA0 or DATA1 packet), then this acknowledgement is provided by slave host controller () over USB cable ().","The response generated by USB device () is received by slave host controller () and forwarded to slave host controller driver () where it is converted into a virtual USB packet. The Virtual USB packet is then forwarded to remote host application () which determines the identity of the virtual host controller that initiated the transaction. The remote host application () determines the network address of the initiating virtual host controller and operates upon transport layer (), network layer () and network transceiver () to encapsulate the virtual USB packet for transmission across long cable () to host computer software stack ().","The Virtual USB packet is received at host computer software stack () by network transceiver () and forwarded up the communications stack through network layer () and transport layer () to virtual host application (). The virtual host application () examines the virtual USB packet and determines that the packet is to be routed to virtual host controller (). Virtual host controller () receives the Virtual USB packet over software interface () and converts the Virtual USB packet into a Transfer Descriptor for delivery to virtual host controller driver (). Virtual host controller driver () assembles one or a plurality of delivered Transfer Descriptors into a USB Request Block and forwards the URB through USB core driver () to the original USB device driver ().","It will be observed that, in comparison with the prior art, virtual host controller () is not required to issue repeated requests to obtain a single Virtual USB packet. The prior art is constrained by the turn-around timer implemented in every EHCI, UHCI and OHCI host controller. This turn-around timer requires that a response to a USB command must be provided within approximately 1.5 microseconds. The prior art accommodates this requirement by storing a response to a first USB command until a second or subsequent USB command is issued by the host controller. A virtual host controller, however, may be configured to operate with a longer or infinite turn-around timer such that the virtual host controller can issue a first USB command and then wait until the response is available. Network delays of 1.5 microseconds or more can be accommodated with this approach.","It will be apparent to those skilled in the art that a similar process occurs when data is written, in the reverse direction, to a USB mass storage device.",{"@attributes":{"id":"p-0092","num":"0139"},"figref":"FIG. 9"},"In comparison with , the USB stack is expanded to include a plurality of virtual host controller drivers (. . . ) and a plurality of virtual host controllers (. . . ). Also in comparison with , the communications stack is expanded to include a plurality of transport layers (. . . ), a plurality of network layers (. . . ) and a plurality of network transceivers (. . . ) feeding a plurality of network connections (. . . ).",{"@attributes":{"id":"p-0094","num":"0141"},"figref":"FIG. 10","b":["33","34","34","61","61","61","62","62","63","13"]},"In a preferred embodiment of this arrangement host controller driver () is a Universal Host Controller Driver and host controller emulator () emulates a UHCI controller.","In a further preferred embodiment of this arrangement host controller driver () is an Open Host Controller Driver and host controller emulator () emulates an OHCI controller.","In a yet further preferred embodiment of this arrangement host controller driver () is an Enhanced Host Controller Driver and host controller emulator () emulates an EHCI controller.","In this arrangement, external communications is through long wire (). It will be apparent to those skilled in the art that long wire () can be replaced by network () without alteration to the invention.",{"@attributes":{"id":"p-0099","num":"0146"},"figref":"FIG. 11"},"The behavior shown by sequence () is executed by the logic implemented within USB core driver (). The behavior shown by sequence () is executed by the logic implemented within virtual host controller driver (). The behavior shown by sequence () is executed by the logic implemented within virtual host (). The behavior shown by sequence () is executed by the logic implemented within slave host controller driver (). The behavior shown by sequence () is executed by the logic implemented within slave host controller (). The behavior shown by sequence () is executed by the logic implemented within USB device (). The contribution of the communications stacks and host applications are not shown in the diagram since these components are involved only in the routing and remote delivery of packet information and do not have any effect on the format or content of the data that is presented to the USB components. The end-to-end behavior is consistent with the physical arrangement shown in .","The sequence is initiated when the USB core driver () in a host computer () issues a USB Request Block (URB) to the virtual host controller driver (). The virtual host controller driver () translates the URB into a sequence of Transfer Descriptors (TD) which are applied to the virtual host controller (). The virtual host controller () converts each TD into a Virtual USB (VUSB) packet which is transmitted over a communications system and arrives unchanged at a slave host controller driver () in a remote extender (). The slave host controller driver () converts each Virtual USB packet into a Virtual Transfer Descriptor (VTD) and schedules the VTD for execution by the slave host controller (). The slave host controller () translates each VTD into a standard USB subaction and issues the USB subaction as a USB command subaction on the physical bus according to USB priority and timing requirements. The USB command subaction is received by USB device () and a USB response packet may be generated by USB device () depending upon the PID of the USB command subaction and the type of the USB endpoint (Bulk, Control, Interrupt or Isochronous) to which the USB command subaction was addressed. A further USB acknowledgement packet may be issued by slave host controller () to USB device () to complete the USB transaction. The slave host controller () continues to issue USB command subactions for as long as it is supplied with Virtual Transfer Descriptors.","When slave host controller () receives a USB response packet from USB device (), the slave host controller () converts each USB response packet into a Virtual Transfer Descriptor and forwards the VTD to slave host controller driver (). The slave host controller driver () receives each VTD from slave host controller (), converts the VTD into a Virtual USB packet and forwards the Virtual USB packet across the data communications network to the virtual host controller () in host computer ().","The virtual host controller () receives each Virtual USB packet from slave host controller driver (), converts each Virtual USB packet into a Transfer Descriptor and supplies each TD to the virtual host controller driver (). The virtual host controller driver () receives each TD from virtual host controller () and assembles a USB Request Block for delivery to USB core driver ().","For clarity,  shows the transmissions in the upstream direction from slave host controller () to slave host controller driver () as occurring after all transmissions in the downstream direction have completed. It will be apparent to those skilled in the art that this restriction is not necessary and that upstream transmissions can begin as soon as a first USB response packet is received from USB device () and that upstream and downstream transmissions can occur virtually simultaneously at any point in the system.","Thus, it is apparent that there has been provided, in accordance with the present invention, a method and apparatus for connecting USB devices to a remote computer, which fully satisfies the goals, objects, and advantages set forth hereinbefore. Therefore, having described specific embodiments of the present invention, it will be understood that alternatives, modifications and variations thereof may be suggested to those skilled in the art, and that it is intended that the present specification embrace all such alternatives, modifications and variations as fall within the scope of the appended claims.","Additionally, for clarity and unless otherwise stated, the word \u201ccomprise\u201d and variations of the word such as \u201ccomprising\u201d and \u201ccomprises\u201d, when used in the description and claims of the present specification, is not intended to exclude other additives, components, integers or steps.","Moreover, the words \u201csubstantially\u201d or \u201cessentially\u201d, when used with an adjective or adverb is intended to enhance the scope of the particular characteristic; e.g., substantially planar is intended to mean planar, nearly planar and\/or exhibiting characteristics associated with a planar element.","Further, use of the terms \u201che\u201d, \u201chim\u201d, or \u201chis\u201d, is not intended to be specifically directed to persons of the masculine gender, and could easily be read as \u201cshe\u201d, \u201cher\u201d, or \u201chers\u201d, respectively.","Also, while this discussion has addressed prior art known to the inventor, it is not an admission that all art discussed is citable against the present application."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features which are believed to be characteristic of the present invention, as to its structure, organization, use and method of operation, together with further objectives and advantages thereof, will be better understood from the following drawings in which a presently preferred embodiment of the invention will now be illustrated by way of example. It is expressly understood, however, that the drawings are for the purpose of illustration and description only and are not intended as a definition of the limits of the invention. Embodiments of this invention will now be described by way of example in association with the accompanying drawings in which:",{"@attributes":{"id":"p-0036","num":"0083"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0037","num":"0084"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0038","num":"0085"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0039","num":"0086"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0040","num":"0087"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0041","num":"0088"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0042","num":"0089"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0043","num":"0090"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0044","num":"0091"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0045","num":"0092"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0046","num":"0093"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
