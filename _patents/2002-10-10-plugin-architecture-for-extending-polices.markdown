---
title: Plugin architecture for extending polices
abstract: An architecture for allowing extensibility to policies. The architecture has a policy component program that is able to evaluate and enforce polices. The architecture also has plugin modules for allowing a user to customize the polices. The policy component program is able to present interfaces to the user for customizing the polices. The policy component program is further able to integrate customized polices into a framework of the policy component program in response to user input that is based on the interfaces presented to the user. The presented interfaces may be for defining subjects in the policy program, defining conditions in the policy program, defining referrals in the policy program, defining resource names in the policy program, and defining how conflicts will be resolved in the policy program. The interfaces may be compliant with the JAVA programming language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07296235&OS=07296235&RS=07296235
owner: Sun Microsystems, Inc.
number: 07296235
owner_city: Santa Clara
owner_country: US
publication_date: 20021010
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Notation and Nomenclature","Customized Extensions to Policies","Exemplary Interfaces"],"p":["1. Field of the Invention","The field of the invention relates to data processing. More specifically, embodiments of the present invention relate to allowing extensions to user policies for defining access to resources or services.","2. Related Art","Computer systems typically include a combination of hardware (e.g., semiconductors, circuit boards, etc.) and software (e.g., computer programs). As advances in semiconductor processing and computer architecture push the performance of computer hardware higher, more sophisticated computer software has evolved to take advantage of the higher performance of the hardware.","Other changes in technology have also profoundly affected how people use computers. For example, the widespread proliferation of computers prompted the development of computer networks that allow computers to communicate with each other. With the introduction of the personal computer (PC), computing became accessible to large numbers of people. Networks for personal computers were developed to allow individual users to communicate with each other. In this manner, a large number of people within a company could communicate at the same time with a central software application running on one computer system. As a result of sharing a software application with numerous users, policies are defined and enforced that control the access and use of resources, such as applications on a server system. Policies may protect other resources and services, as well.","Referring now to Prior Art , a block diagram of a generic server system  is shown. The generic server system  comprises a user  connected to a server  by a data connection . Typically, the user  will access an application  that is stored on server  over the Internet. In a corporate environment, the user  could be connected to the server  by an internal network, for example, an Intranet. In addition, server  stores a set of user policies in a database  for authenticating access to software application . Typically, the user policy database  comprises user names and associated passwords. When a user provides credentials to access secure applications, the credentials are checked against the stored values.","It may be stated that the policies determine who can do what to whom under what conditions. In the previous statement, the who may be, for example, a person, a service, or an application. The whom may be, for example, a resource or service to which access is sought. The condition may be, for example, based on time, class of user, etc. Only if the condition is met will the resource or service be made available.","Typically, organizations require a wide variety of policies, depending on factors such as the resource or service to protect and the user seeking access. For example, one set of user policies defined for a human resources server prevent other personnel from viewing confidential salary information and other sensitive data. Another set of user policies for an engineering server allow authorized personnel from many internal segments of a company to publish and share research and development information. Such user policies restrict external partners from gaining access to proprietary information while allowing access to the correct people inside an organization.","Clearly, organizations require a myriad of different policies to adequately protect their resources and services. Thus, it is beneficial to create user policies that are tailored for the specific environment. However, creating and managing the enormous range of user policies needed can be a hindrance to the performance of a server system because the server accesses a very large user policy database each time an application is accessed.","Moreover, it is very difficult to anticipate the policy that is best suited to protect the resource in question, when providing a system such as in . Hence, the most effective user policies cannot be put into place at the time the system is initially installed.","A still further concern is that organizations are constantly evolving. Hence a set of polices that were put into place initially may fail to provide adequate protection or may overprotect as the organization evolves.","Therefore, a problem with conventional methods of providing a policy system is that the policies that are delivered with the system may fail to be tailored to the user's requirements. A still further problem is that the system may require an enormous number of policies to cover the different conditions an organization may face and hence system performance may be poor. A still further problem is that it is impossible to anticipate an organization's present and future requirements and hence the policies that are first installed with a system may not be the most effective at protecting services and resources.","The present invention provides a computer-controlled method for allowing customized extensions to policies. Embodiments of the present invention provide a policy system that may be tailored to an organization's needs. Embodiments of the present invention provide a high-performance policy system. Embodiments of the present invention provide a policy system that allows a user to design effective policies to meet the organization's unique and changing requirements. The present invention provides these advantages and others not specifically mentioned above but described in the sections to follow.","In one embodiment, an architecture for allowing extensibility to policies is presented. One embodiment of the present invention comprises a computer readable medium having stored therein a policy component. The policy component comprises a policy program for evaluating and enforcing pre-defined policies. The policy component further comprises a plurality of interfaces for defining customized policies in the policy program. The policy component is operable to receive user defined customized policies and integrate the customized policies into the policy program.","Another embodiment is an architecture for extending policies. The architecture comprises a computer readable medium having stored thereon instructions for implementing a policy component program. The policy component program is able to evaluate and enforce polices. The architecture also has plugin modules for allowing a user to customize the polices. The policy component program is able to present interfaces to the user for customizing the polices. The policy component program is further able to integrate customized polices into a framework of the policy component program in response to user input that is based on the interfaces presented to the user.","Another embodiment of the present invention is a computer-implemented method of allowing policy customization. The method comprises providing an interface that defines how to create a customized policy in a policy program. Next, a user supplied policy definition that is compliant with the provided interface is received. Then, the user supplied policy definition is integrated into the policy program. In this fashion, a policy in the policy program is extended to include the user customization.","In various embodiments of the present invention the interface is for defining subjects in the policy program, defining conditions in the policy program, defining referrals in the policy program, defining resource names in the policy program, and defining how conflicts will be resolved in the policy program. In some embodiments, the interface is compliant with the JAVA programming language.","These and other objects and advantages of the present invention will no doubt become obvious to those of ordinary skill in the art after having read the following detailed description of the preferred embodiments, which are illustrated in the various drawing figures.","Reference will now be made in detail to the preferred embodiments of the invention, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the preferred embodiments, it will be understood that they are not intended to limit the invention to these embodiments. On the contrary, the invention is intended to cover alternatives, modifications and equivalents, which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore, in the following detailed description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be obvious to one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the present invention.","Some portions of the detailed descriptions that follow are presented in terms of procedures, logic blocks, processing, and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure, logic block, process, etc., is here, and generally, conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, bytes, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present invention, discussions utilizing terms such as \u201cinstantiating,\u201d \u201cstoring,\u201d \u201cproviding,\u201d \u201creceiving,\u201d \u201csending,\u201d \u201cintegrating,\u201d \u201centering,\u201d or the like, refer to the action and processes (e.g., process ) of a computer system or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the present invention allow for policies to be extended by a user. The policies may contain rules, subjects and conditions that are evaluated to determine whether a resource or service will be made available to the subject seeking access.","The following is an exemplary format that may be used to define a policy, although embodiments of the present invention are not so limited.\n\n","There may be one or more rules in the policy. Moreover, a policy may be defined without a subject, referral, and\/or condition. An application (or service) can have more than one policy associated with it. Examples of having multiple policies for an application (or service) would typically exist in a ISP (Internet Service Provider) and ASP (Application Service Provider) environments hosting multiple organizations and each organization having its own specific policy.","A rule may specify the resources or services that are to be protected and the actions allowed. A resource may be, for example, a website or an application. For example, the resource could be a uniform resource locator (URL) of a website. The following is an exemplary rule, although embodiments of the present invention are not so limited.\n\n","Using an example in which the resource is a website, an action may be a get, put, delete, or post operation according the hypertext transport protocol (HTTP). Using an example in which the resource a paycheck application, the action may be, for example, changing a salary or giving a bonus.","For each action, there may be an action value, such as, allow\/deny or yes\/no. Thus, the action value may define whether the action is permitted.","The previous examples illustrate binary actions. Non-binary actions are possible, as well. For example, a catalog service could have the following actions: allowedDiscount, purchaseOptions, etc. Another example is a calendar service, which may have the following actions: maximumQuota, notificationMechanism, etc. For the catalog service the allowedDiscount action may have a number as its action value, and similarly maximumQuota action for Calendar server. However, the actions purchaseOptions and notificationMechanism specified for the catalog and calendar services respectively may have certain pre-defined strings as its action values. Hence action values may be arbitrary, e.g., Boolean, numeric, string, single value or multi-valued.","A subject may define a collection of users to whom the policy applies. In other words, a subject may refer to a user (or an entity) accessing a service (or an application). Usually, persons or entities identify themselves during the authentication process. Once they have been authenticated, they are provided with one or more identities called \u2018principal.\u2019 The term \u2018principal\u2019 may refer to an identify of the user (or an entity) as represented (or understood) by an application, or a server, or a device.","Hence, a subject may represent a collection of identities, wherein each identity is represented as a principal. For example, Jane Doe is a subject. Jane Doe may have a first e-mail account under the principal name \u2018jdoe\u2019, a second e-mail account under the principal name \u2018janedoe\u2019 and an e-commerce buyer service account under the principal name \u2018jane_doe\u2019. Thus, the same subject, Jane Doe, has three principal names (or identities) based on which service she accesses. Principals usually become associated with a subject upon successful authentication to a service. Since a subject may represent a nameless container holding relevant information for a user, while principals may represent named identities for that subject, the set of permissions granted to a subject depends on the principals associated with that subject and not on the subject itself.","When a resource is subject to an access control policy, a request for access to the resource is evaluated by a \u201cpolicy evaluator.\u201d The policy evaluator may be also referred to as a policy decision point or as a policy engine. The policy evaluator returns a \u201cpolicy decision.\u201d A policy decision refers to the value(s) returned by the policy evaluator. For example, in the case of Boolean action, values for the policy decision may be true\/false (or allow\/deny or yes\/no). The policy decision can be used to grant access to a resource, and to define the actions that may be performed on or using the resource after access is gained.","The referral may involve a concept of forwarding the request for the policy decision. In an ISP\/ASP environment (and possibly within an enterprise) it may be necessary to delegate the policy definitions and decisions for a resource to other organizations or sub-organizations. Additionally it is possible to delegate the policy decisions for a resource to other policy products. Taking the example of a web service, an ISP may refer the policy decision for the resource represented by the URL for ACME to the ACME organization, and similarly for the resource represented by a SUN URL resource to the SUN organization. The referral concept is described in co-pending U.S. patent application Ser. No. 10\/269,957, filed concurrently herewith, entitled \u201cPOLICY DELEGATION FOR ACCESS CONTROL,\u201d by Bhat et al., and assigned to the assignee of the present invention and incorporated herein by reference.","According to the present embodiment of the present invention, either a first policy engine or a second policy engine will perform the policy evaluation and return policy values (policy decisions) for enforcement. Which of these policy engines performs the policy evaluation depends on whether or not a referral policy for the resource of interest is in place in the first policy engine. In essence, if a referral policy applicable to the resource of interest is in place, the policy evaluation is performed by the second policy engine; otherwise, the policy evaluation is performed by the first policy engine.","A condition may represent the constraints on a rule or a policy. For example, a constraint may be that an action of updating a catalog may only take place from 8:00 AM-8:00 PM. Another constraint may grant this action only if the request originates from a given set of IP addresses or from the company Intranet.","A policy component may have a policy program for evaluating and enforcing pre-defined policies. Moreover, the policy component allows a user to extend the pre-defined polices in a very efficient and simple manner. The policy component may have at least one module for presenting an interface for defining customized policies in the policy program. For example, the module is able to make the interface available to an administrator or client. Tables 1-4 herein illustrate several exemplary interfaces, which those of ordinary skill in the art will recognize provide guidelines for a user (e.g., administrator) to write a small piece of code that may serve as an extension to a policy. The policy component is able to receive the user-defined extensions and to integrate the extensions into the policy program. In this fashion, the user is allowed to write their own customized version of the generic polices that may be pre-defined. Advantageously, the user does not need to write an entire new policy.",{"@attributes":{"id":"p-0042","num":"0043"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","201","210","201","230","230"]},"The policy component  has policy administrator APIs , which may be for administrators to manage (e.g., set\/modify\/delete) policy rules. The target audience for policy administrator APIs  may be administrators managing the policies via either a browser  (e.g., using html\/http) or command line interfaces . The policy administrator APIs  and the policy evaluation APIs  may be implemented with Java or C, although embodiments of the present invention are not so limited.","Still referring to , the policy architecture  also has a web server interface . The end-user may access the policy component  by an application or service  through the web server interface , although this is not required. The application or service  has numerous ways to reach the policy component . For example, path  may be implemented by a JAVA interface. If an application  is written in another language, the XML interface  may be used to reach the policy component  via path . Still other techniques may be used, such as, for example, JNI (JAVA Native Interface) to evaluate policies. The web server interface  also has custom servlets  and policy HTML GUI servlet .","The Policy Framework  may connect to a directory server  using, for example, LDAP(s). The directory server  may store the various policy rules.","In some cases, an application  may have a firewall separating it from the directory server , which may not allow LDAP traffic (although the firewall may allow http traffic). In order to support this application  (written in languages other than Java and C), and to overcome firewall issues, the policy XML service servlet  may be used. Hence, applications  can construct policy queries using XML and either evaluate the policy or get the policy definitions via the policy XML service servlet .","The policy component  may provide many different types of plugin interfaces, allowing for user customization or extensions to policies.  illustrates five such plugin interfaces, although embodiments of the present invention are not limited to those five. They are shown in  as subject plugin SPI (Service Provider Interface) , policy referral plugin SPI , policy condition plugin SPI , resource name plugin SPI , and conflict resolution plugin SPIs . Each of which may plug into the policy framework .","As shown in , the policy component , by default, may provide generic plugins for these SPIs (-). Users can plug in their own customized modules, which are represented as -). There may be multiple user-defined modules of each type. Plugins may be installed and configured using the policy admin APIs  or using the interface to the policy framework, although embodiments of the present invention are not so limited. Exemplary plugin interfaces are illustrated in Tables 1-4.","Further details of a policy architecture that may be used in embodiments of the present invention are described in co-pending U.S. patent application Ser. No. 10\/246,072, filed Sep. 17, 2002, entitled \u201cA SYSTEM AND METHOD FOR ENFORCING USER POLICIES ON A WEB SERVER,\u201d by Chakraborty et al., and assigned to the assignee of the present invention and incorporated herein by reference.","An embodiment of the present invention provides for a method of allowing extensions to be added to policies. Steps of process  of  may be stored as instructions on a computer readable medium and executed on a general-purpose processor. For example, computer system  in  or the like may be used to implement process . In step , an interface for defining customized policies in a policy program is provided, in response to a request for the interface.","For example, a policy administrator may access the policy program through a command line interface, a browser, or an application as shown in . Once the administrator has accessed the policy program, the administrator may be able to select from among several interfaces. Once selected, the policy program initiates steps such that the interface is displayed to the administrator. The administrator may now write a small piece of code, using the interface as a guideline. Exemplary interfaces are shown in Tables 1-4.","In step , a user supplied policy definition that is compliant with the interface is received. For example, the policy program receives the code that the administrator wrote based on the interface. As discussed herein, this allows the user to modify a condition, subject, referral, resource name, etc.","In step , the user supplied policy definition is integrated into the policy program. In this fashion, the extension to the policy may be available whenever a relevant policy decision is made. Process  then ends.","Various embodiments of the present invention provide for interfaces that may be used to extend policies. Tables 1-4 describe four such interfaces; however, embodiments of the present invention are not limited thereto.","An embodiment of the present invention is an interface that may define a method to extend the subject of a policy. Table 1 represents an exemplary interface suitable for extending subjects.",{"@attributes":{"id":"p-0056","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"****************************************************************"},{"entry":"public interface Subject {"},{"entry":"\/**"},{"entry":"* Determines if the user belongs to this instance"},{"entry":"* of the <code>Subject<\/code> object."},{"entry":"* For example, a Role implementation"},{"entry":"* would return <code>true<\/code> if the user belongs"},{"entry":"* the specified role; <code>false<\/code> otherwise."},{"entry":"*"},{"entry":"* @ param token single-sign-on token of the user"},{"entry":"*"},{"entry":"* @ return <code>true<\/code> if the user is member of the"},{"entry":"* given subject; <code>false<\/code> otherwise."},{"entry":"*"},{"entry":"* @ exception SSOException if SSO token is not valid"},{"entry":"* @ exception PolicyException if an error occurred while"},{"entry":"* checking if the user is a member of this subject"},{"entry":"*\/"},{"entry":"public Boolean isMember(SSOToken token)"},{"entry":"throws SSOException, PolicyException;"},{"entry":"}"},{"entry":"*******************************************************************************"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The interface in Table 1 describes the parameters (param), the returned value, the exceptions thrown, as well as method(s). Thus, by writing suitable code that complies with the defined method(s) a user may extend the policy. Table 1 defines a method(s) to determine if a user (e.g., as identified by SSO (single-sign-on) token) is a member of this subject. The class \u2018<code>Subject<\/code>\u2019 may define a collection of users (or subjects to whom the specified policy is applied. A complete implementation of the interface in Table 1 may have complex Boolean operations to determine if the given user identified by the <code>SSOToken<\/code> belongs to this collection. The interfaces may separated into administrative interfaces and evaluation interfaces. The administrative interfaces may be used by policy HTML GUI or command line interface (e.g., , , ) to create a <code>Subject<\/code> object. The evaluation interfaces may be used by the policy evaluator.","An embodiment of the present invention is an interface for extending conditions in a policy. The exemplary interface in Table 2 defines method(s) to constrain a policy based on parameters other than user's credentials.",{"@attributes":{"id":"p-0059","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"*******************************************************************************"},{"entry":"public interface Condition {"},{"entry":"\/**"},{"entry":"* Gets the decision computed by this condition object, based on the"},{"entry":"* map of environment parameters"},{"entry":"*"},{"entry":"* @ param token single-sign-on token of the user"},{"entry":"* @ param env request specific environment map of key\/value pairs"},{"entry":"*"},{"entry":"* For example, this would contain IP address of remote client for an"},{"entry":"* IPCondition"},{"entry":"*"},{"entry":"* @ return the condition decision."},{"entry":"*"},{"entry":"*The condition decision encapsulates whether a policy applies for the"},{"entry":"* request and advice messages generated by the condition."},{"entry":"*"},{"entry":"* Policy framework continues evaluating a policy only if it applies"},{"entry":"* to the request as indicated by the ConditionDecision. Otherwise,"},{"entry":"* further evaluation of the policy is skipped. However, the advice"},{"entry":"* messages encapsulated in the ConditionDecision are aggregated"},{"entry":"* and passed up, encapsulated in the policy decision."},{"entry":"*"},{"entry":"* @ throws PolicyException if the decision could not be computed"},{"entry":"* @ throws SSOException if SSO token is not valid"},{"entry":"*"},{"entry":"* @ see com.sun.identity.policycom.sun.identity.policy.ConditionDecision"},{"entry":"*\/"},{"entry":"public ConditionDecision getConditionDecision(SSOToken token, Map env)"},{"entry":"throws PolicyException, SSOException;"},{"entry":"}"},{"entry":"*******************************************************************************"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Referring to Table 2, the constraint may be the time of the day, IP address, etc. The class <code>Condition<\/code> may define an interface to allow pluggable condition. These may be used to control policy decisions based on parameters such as time, authentication level of the user session, and IP address from which the user is making the request. A condition may compute a condition decision based on the state of condition object and the environment passed in a map of key\/value pairs. Condition Decision may encapsulate whether a policy applies for the request and advice messages generated by the condition.","Another embodiment of the present invention provides for extending policies based on a referral. The exemplary interface in Table 3 defines methods to delegate a resource to other organizations or other policy servers.",{"@attributes":{"id":"p-0062","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"*******************************************************************************"},{"entry":"public interface Referral {"},{"entry":"\/**Gets policy results"},{"entry":"* @ param token SSOToken"},{"entry":"* @ param resourceType resourceType"},{"entry":"* @ param resourceName name of the resource"},{"entry":"* @ param resourceName name of the resource"},{"entry":"* @ param actionNames a set of action names"},{"entry":"* @ param envParameters a map of environment parameters."},{"entry":"* Each key is an environment parameter name."},{"entry":"* Each value is a set of values for the parameter."},{"entry":"* @ return policy decision"},{"entry":"*"},{"entry":"* @ throws PolicyException"},{"entry":"* @ throws SSOException"},{"entry":"*\/"},{"entry":"PolicyDecision getPolicyDecision(SSOToken token, String resourceType, String"},{"entry":"resourceName, Set actionNames, Map envParameters)"},{"entry":"throws SSOException, PolicyException;"},{"entry":"}"},{"entry":"*******************************************************************************"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Referring to Table 3, there may be many implementations with different policy delegation mechanisms such as delegating to peer organizations only or delegating to sub organizations only.","Another embodiment of the present invention provides for extending policies based on a resource name. The exemplary interface in Table 4 defines methods to work with resource names for a given service type.",{"@attributes":{"id":"p-0065","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"*******************************************************************************"},{"entry":"public interface ResourceName {"},{"entry":"\/**"},{"entry":"* Compares two resources."},{"entry":"*"},{"entry":"* @ param origRes name of the resource which will be compared"},{"entry":"* @ param compRes name of the resource which will be compared with"},{"entry":"* @ param wildcardCompare flag for wildcard comparison"},{"entry":"*"},{"entry":"* @ return returns <code>ResourceMatch<\/code> that"},{"entry":"* specifies whether the resources are exact match or otherwise."},{"entry":"*"},{"entry":"* ResourceMatch.NO_MATCH means two resources do not match"},{"entry":"* ResourceMatch.EXACT_MATCH means two resources match"},{"entry":"* ResourceMatch.SUB_RESOURCE_MATCH means compRes is the"},{"entry":"* sub resource of the origRes"},{"entry":"* ResourceMatch.SUPER_RESOURCE_MATCH means compRes is the"},{"entry":"* super resource of the origRes"},{"entry":"* ResourceMatch.WILDCARD_MATCH means two resources match with"},{"entry":"* respect to the wildcard"},{"entry":"*\/"},{"entry":"public ResourceMatch compare(String origRes, String compRes, Boolean"},{"entry":"wildcardCompare);"},{"entry":"}"},{"entry":"*******************************************************************************"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Referring to Table 4, the exemplary method(s) check if two resource names are the same, or if one is a sub-resource of the other, etc. Service developers may provide an implementation of an interface that will determine the hierarchy of resource names during policy evaluation and also its display in the GUI. A class that implements this interface may have an empty constructor, in some embodiments of the present invention.","Other interfaces, such as one for defining how conflicts may be handled, are also within the scope of embodiments of the present invention. This may be used if multiple policies are created for the same resource. The conflict resolution may be per organization and may be based on priority of the policies, resource name being accessed, and the schema of the action values. Embodiments of the present invention provide for a pluggable architecture, in which customers are able to customize conflict resolution based on various parameters. For example, conflict resolution may be based only on priority, or exact resource name match, or least restrictive (e.g., if there is a single deny the policy results will be a deny), or a combination of them.","During policy evaluation, a policy engine may walk a resources tree and identify the policies that apply to the user based on a token and also satisfying the constraints. The identified policies may then be processed through the conflict resolution to obtain the final policy results. As discussed earlier, the parameters used in the conflict resolution may be policy priority, resource name being accessed, and the action values. Of these, policy priority and resource names may be well defined and can be explicitly used by the conflict resolver plugin (e.g., , ).","However, the action values could be Boolean, single-valued, or multi-valued. Hence, the conflict resolver may specify the type of action values that can be applied (or a combination of them). The conflict resolution may be, for example, Boolean conflict resolution, single-valued conflict resolution, multi-valued conflict resolution.","Exemplary conflict resolution plugins may be creating a union of the values, intersection of the values, or a combination of the values. Additionally, the conflict resolution plugins may use priority and resource name matches to determine the policy results. For example, a Boolean plugin may first narrow the action values based on priority and\/or closest resource name matches and then apply either most restrictive or least restrictive rules. Those of ordinary skill in the art will recognize that there are many ways to practice a conflict resolution plug-in within the scope of embodiments of the present invention.","Referring now to , a block diagram of exemplary computer system  is shown. It is appreciated that computer system  of  described herein illustrates an exemplary configuration of an operational platform upon which embodiments of the present invention can be implemented. Nevertheless, other computer systems with differing configurations can also be used in place of computer system  within the scope of the present invention. For example, computer system  could be a server system, a personal computer or an embedded computer system such as a mobile telephone or pager system.","Computer system  includes an address\/data bus  for communicating information, a central processor  coupled with bus  for processing information and instructions, a volatile memory unit  (e.g., random access memory, static RAM, dynamic RAM, etc.) coupled with bus  for storing information and instructions for central processor  and a non-volatile memory unit  (e.g., read only memory, programmable ROM, flash memory, EPROM, EEPROM, etc.) coupled with bus  for storing static information and instructions for processor . Computer system  may also contain an optional display device  coupled to bus  for displaying information to the computer user. Moreover, computer system  also includes a data storage device  (e.g., disk drive) for storing information and instructions. In one embodiment of the present invention, data storage device  is a cache memory.","Also included in computer system  of  is an optional alphanumeric input device . Device  can communicate information and command selections to central processor . Computer system  also includes an optional cursor control or directing device  coupled to bus  for communicating user input information and command selections to central processor . Computer system  also includes signal communication interface , which is also coupled to bus , and can be a serial port. Communication interface  can also include number of wireless communication mechanisms such as infrared or a Bluetooth protocol.","Although the embodiments of the present invention may be implemented in a variety of different electronic systems such as a mobile computer system, an embedded system, etc., one exemplary embodiment includes the implementation on a computer server system. It should be understood that the descriptions corresponding to  provide some general information about an exemplary computing system.","Embodiments of the present invention, a plugin architecture for allowing extensions to polices have been described. While the present invention has been described in particular embodiments, it should be appreciated that the present invention should not be construed as limited by such embodiments, but rather construed according to the following claims.","The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, and obviously many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and it's practical application, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
