---
title: System and method for managing transaction messages in computer communications
abstract: A transaction manager facilitates modification and maintenance of data used to provide information regarding computer communications between computer systems. The transaction manager uses a manager file that contains transaction codes-attribute strings and corresponding action values. The transaction code-attribute strings can include mask characters that act as substitution values. When a transaction takes place requiring information regarding a particular attribute of that transaction be sent, the transaction manager consults the manager file to obtain the action value corresponding to the transaction and attribute, or the transaction code-attribute string containing mask characters that can be substituted for the transaction and attribute. The transaction manager performs the action associated with the action value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06871209&OS=06871209&RS=06871209
owner: BellSouth Intellectual Property Corp.
number: 06871209
owner_city: Wilmington
owner_country: US
publication_date: 20001116
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of Invention","The present invention relates generally to the field of computer communications systems. More specifically, the present invention relates to the field of managing transaction messages between computer systems.","2. Background of the Invention","Modern computer systems generally consist of a number of applications working with one another to provide services for users. The applications pass messages between one another containing information and data needed by the applications to perform various tasks. A single communication between the applications, including any messages, protocol handshaking and the like is commonly referred to as a transaction. There are many kinds of transactions that are performed in modern computing environments. Each type of transaction is generally identified by a transaction code (TC).","One area in which messaging between computer systems is required is where companies having existing computing systems, known as legacy systems, must communicate with third party systems. This situation occurs frequently, for example, in the case of telephone companies that have existing legacy systems that must communicate with third party systems to perform various tasks, including ordering services, requesting maintenance, checking statuses and changing service.","The third party computers communicate with the telephone company's legacy systems through an interface called an application programming interface (\u201cAPI\u201d). The API provides a common set of routines that third party computers can invoke to gain access to the legacy systems. The API generally executes on a gateway computer. The gateway computer provides communication and security services for the communication between the legacy systems and the third party computers.","After a transaction is complete, whether successfully or unsuccessfully, it is generally assigned a status indicator (SI), which indicates the result of the transaction. A transaction code\/status indicator pair is commonly referred to as a TCSI. The TCSI contains a transaction code representative of a particular transaction, and a status indicator indicating the status of the transaction.","An exemplary conventional system for providing communication between a telephone company's legacy systems and third party computers through a gateway is shown in FIG. . Specifically, third party computers - communicate with legacy systems  through gateway . In this example, third party computers - communicate through the Internet , whereas third party computers  and  have direct connections to gateway . A firewall  can be provided by gateway  to provide security for the legacy systems.","Third party computers - query legacy systems  for information. Conventionally, the request is made by completing a request window or screen displayed to the requester. This request window is part of an API . To perform the query, a third party computer, for example, third party computer , issues a data request to legacy systems  through gateway . Gateway  provides security and request formatting functions for the particular transaction. That is, gateway  reformats the request into a request that legacy systems  understand. Gateway  receives the information requested and formats it into a response that the requester (third party computer  in this case) understands. In the system shown in , messages between the third party computers - and gateway  conform to the ANSI standard, ANSI T1.246-1999, Telecommunications, Operations, Administration, Maintenance and Provisioning (OAM&P)\u2014Information Model and Services for Interfaces between Operations Systems across Jurisdictional Boundaries to Support Configuration Management, which is incorporated by reference herein in its entirety.","A significant problem with this communication paradigm is keeping all communicating computers in conformance with the T1.246 standard when changes to the standard are requested. This problem occurs because of the magnitude of the updating that is required to effectuate a change to the standard. There are a few hundred messages in the standard. Each message can have up to 80 fields of data. When a change is requested, all of the fields in all of the messages may have to be updated in accordance with the change.","Under the T1.246 standard, transactions are categorized into transaction types. Whether a transaction is inbound or outbound is defined with reference to the legacy systems. Thus, inbound transactions are those transactions from the third party systems and outbound transactions are those transactions to the third party systems. There are five inbound transaction types. There can be many outbound message types that correspond to the five inbound message types.","For example, when a third party computer sends a request, for example, an ordering request, the resulting response can include up to 80 fields. Due to incomplete information, or prior agreement, not all 80 fields need be sent in each response. The aforementioned problem arises when, for example, one of the third parties decides to change the information that its computer receives in a given response (outbound) transaction. Consequently, even simple changes conventionally require a complete revision and re-release of the software executing on gateway  even though the data elements are defined in the T1.246 standard. New revisions of code require code modification, rebuilding and testing. This is a time consuming and expensive process that can take more than four months to complete.","Thus, there is a need for a system and method for facilitating these changes without requiring modification to the software executing on the gateway and its consequent rebuilding and testing.","The present invention solves the problems described above by significantly simplifying the management of transaction codes and their associated attributes. Rather than statically managing the many transaction types and attributes individually in the software, the present invention compresses the transaction types using masks. In this manner, attributes for transaction types requiring similar treatment are provided that treatment using a single mask representation of the transaction type, rather than repeating that information for each of the attributes to be afforded common treatment.","Each mask is a template that can apply to one or a plurality of attributes. An action value is associated with each mask. That action value applies to all messages satisfying the mask. The masks and associated attributes are stored in a file that is easily accessed and modified by the user.","For example, every outbound transaction includes a TCSI attribute, described above. To provide the appropriate mask for every attribute, the prefix \u201cXXXX\u201d replaces the transaction type of a conventional system. For example, the present invention replaces the eight lines:\n\n","This compression becomes much more pronounced as the file size increases from eight lines to the tens of thousands of lines in conventional transaction type-attribute files. For example, consider changing all the TCSI attributes from M to MM. To make this change in a conventional system requires searching for all of the TCSI attributes in a file\u2014there could be literally hundreds\u2014and making the change. Using the present invention, this change is accomplished virtually instantaneously by changing a single line, XXXX_TCSI=MM. Thus, the present invention significantly facilitates managing transaction types and responding to changing requirements. Thus, the present invention eliminates the need for software rebuilds and code testing to implement changes.","In one embodiment, the present invention is a system for managing transactions between a first computer system and a second computer system. The system includes a management file containing at least one transaction type-attribute string having a mask format with a corresponding action value. A process executing on a computer determines what action to take in accordance with the at least one transaction type-attribute string.","In another embodiment, the present invention is a method for managing transactions between a first computer system and a second computer system. The method includes the steps of creating a manager file containing at least one transaction type attribute string having a masked format and a corresponding action value. At some point an inbound transaction request is received. The inbound transaction request is processed. A response transaction type-attribute string having an appropriate attribute for responding to the inbound transaction request is determined. The method then performs the step of determining if the response transaction type-attribute string matches one of the at least one transaction type-attribute strings in the manager file. If a match is found, the method performs the step of responding to the input transaction request in accordance with the action value associated with the action value corresponding to the transaction type-attribute string that matched the response transaction type-attribute string.","Thus, one object of the present invention is to facilitate management of TCSI codes.","Another object of the present invention is to facilitate responding to changing TCSI code requirements.","Another object of the present invention is to reduce the file size and memory requirements for storing TCSI codes.","Another object of the present invention is to ease updating and maintenance of files used to store TCSI codes.","Another object of the present invention is to reduce the likelihood of errors generated by changing TCSI code requirements.","Another object of the present invention is to reduce the time required to react to changing TCSI code requirements.","These and other objects of the present invention are described in greater detail in the detailed description of the invention, the appended drawings and the attached claims.","The present invention is a message manager for managing transaction messages between legacy systems at a telephone company and third party requesters through a gateway. For example, such messages include request messages from third party requesters and response messages from legacy systems.  is a schematic diagram of a system incorporating a preferred embodiment of the present invention. The system in  is similar to the system in , but adds a process  and a data structure, or table,  that is stored in a computer memory. The data structure is a transaction code manager file. Briefly, when a third party computer makes a request of the legacy systems, process  analyzes the request to determine the proper format for a response to the request. To make the determination, process  consults table . Table  contains masked transaction code-attribute string pairs that facilitate managing and modifying the transaction code-attribute pairs. Process  and table  are described in greater detail below.",{"@attributes":{"id":"P-00046","num":"00046"},"figref":"FIG. 2A","b":"200"},{"@attributes":{"id":"P-00047","num":"00047"},"figref":["FIG. 2B","FIG. 2A"],"sup":["nd","th","th ","nd","th"],"b":["200","2"]},{"@attributes":{"id":"P-00048","num":"00048"},"figref":["FIG. 2C","FIG. 2A"],"sup":["nd","th","th","nd","th"],"b":["200","13"]},{"@attributes":{"id":"P-00049","num":"00049"},"figref":"FIG. 3","b":["300","300","300","300"]},"Manager file  contains a list of transaction type-attribute strings. Associated with each transaction type-attribute string is a requirement for the attribute in the transaction type. For example, in , the transaction type-attribute string \u201c2112_TCSI\u201d has the action value M. This means that for a 2112 transaction, a TCSI attribute is mandatory. The possible transaction types are well-known to those skilled in the art and can be found in the T1.246 standard referenced above.","A list of requirement values according to the preferred embodiment of the present invention is given in Table I.",{"@attributes":{"id":"P-d0e1153","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Transaction type-field requirement values"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Requirement","Meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"M","Mandatory - The attribute must be present in"]},{"entry":[{},{},"the transaction message."]},{"entry":[{},"MZ","Zeroes - Set attribute to \u201czeroes\u201d if there is no"]},{"entry":[{},{},"data already present."]},{"entry":[{},"FZ","Force Zeroes - The attribute must be set to zero"]},{"entry":[{},{},"no matter the response data."]},{"entry":[{},"MM","Mirror Maybe - Return what is in the request"]},{"entry":[{},{},"(invoke) message if there is no data already"]},{"entry":[{},{},"present in the original return data."]},{"entry":[{},"FM","Force Mirror - Always return what is in the"]},{"entry":[{},{},"request (invoke) message."]},{"entry":[{},"FS","Force Space - Set attribute to \u201cspaces\u201d always."]},{"entry":[{},"B","Blanks - Attribute may be a blank (space) that"]},{"entry":[{},{},"means something."]},{"entry":[{},"N","Not Sent - Do not send attribute."]},{"entry":[{},"Y","Sent - Send attribute. This is typically the"]},{"entry":[{},{},"default case."]},{"entry":[{},"MS","Set attribute to \u201cspaces\u201d if there is no data"]},{"entry":[{},{},"already present"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Exemplary transaction type-attribute entries and corresponding attribute requirements values for 3 transaction types, 2112, 2311 and 2140, stored in manager file  are shown in FIG. . In T1.246 messaging, there are approximately 200 transaction types. As described above each transaction type has 80 attributes. Thus, manager file  could have more than 16000 entries if all entries are populated. As a result, its management is a time-consuming, costly and cumbersome task that is prone to error. For example, to change a value for all TCSI fields, the operator must search for the TCSI field in every translation type.","The present invention avoids the need for listing, and consequently, managing every transaction type and every attribute, by using substitution masks. The substitution masks are essentially global place holders that values are substituted for.  shows an exemplary use of the masks of the present invention. Referring to , there is shown a manager file  having 3 transaction type-attribute strings ,  and .","If a request comes in requiring a 2317 response for the ZIP2 attribute, software according to the present invention, executing on a computer such as gateway , consults manager file  to try to find a transaction type-attribute string having a value of \u201c2317_ZIP2.\u201d In this case, process  finds the transaction type-attribute string . Process  obtains the requirement value associated with transaction type-attribute string  (B in this case) and performs the appropriate action for that requirement value.","If a request comes in requiring a 2317 response for the ZIP1 attribute, software according to the present invention, executing on a computer such as gateway , consults manager file  to try to find a transaction type-attribute string \u201c2317_ZIP1.\u201d In this case, process  does not find transaction type-attribute string \u201c2317_ZIP1.\u201d When it cannot find the exact transaction type-attribute string, process  looks for a mask that matches the transaction type-attribute string. In this case, process  finds transaction string  \u201c23XX_ZIP1.\u201d The \u201cXX\u201d in transaction string  is the substitution mask. The \u201cXX\u201d can take on any value. That is, the transaction type-attribute applies to any transaction type having the first two numbers  and, in this case, attribute ZIP1. Process  obtains the requirement value, MM in this case, and performs the appropriate action for that requirement value.","If a request comes in requiring a 2317 response for the TCSI attribute, process  consults manager file  to try to find a transaction type-attribute string \u201c2317_TCSI.\u201d In this !5 case, process  does not find a transaction type-attribute string \u201c2317_TCSI.\u201d When it cannot find the exact transaction type-attribute string, process  looks for a mask that matches the transaction type-attribute string. In this case, process  finds transaction string  \u201cXXXX_TCSI.\u201d As before, the \u201cXXXX\u201d in transaction string  is a substitution mask. The \u201cXXXX\u201d can take on any value. In this case, the transaction type-attribute applies to any transaction type and, in this case, attribute TCSI. Process  obtains the requirement value, M in this case, and performs the appropriate action for that requirement value.","In the preferred embodiment of the present invention, process  looks first for a literal match, and then looks for matches through masks. In addition, preferably, process  looks for the least amount of masking possible. For example, for a request requiring a 2317_ZIP1 response, process  uses the requirement value associated with 23XX_ZIP1, rather than XXXX_ZIP1, if both are present in a manager file. Thus, in the preferred embodiment literal matches override masked matches.","It can be seen then that the generic masks of the present invention allow for the compression of large numbers of the transaction type-attribute entries into a relatively small number of entries. For example, because the TCSI attributes are required for every transaction type, providing a transaction type-attribute string \u201cXXXX_TCSI=M\u201d in a manager file according to the present invention reduces what conventionally required  entries (one for each transaction type), to only one entry. The optimization of this compression depends on the requirements of the second computer system.","In the preferred embodiment of the present invention, manager file  is loaded into a data structure in memory at runtime. This process requires reading each of the transaction type-attribute entries along with their corresponding requirement values and storing them in a table in a data structure in runtime memory, for example table . Creating table  from manager file  at runtime would be apparent to those of skill in the art.","In the preferred embodiment of the present invention, comments can be added to manager file . Comments can be provided for any purpose, for example, for explanations. In the preferred embodiment, comments are indicated by a \u201c#\u201d symbol as the first character of a line in manager file .","A flow chart for process  according to a preferred embodiment of the present invention is illustrated in FIG. . Referring to , when a response, identified by a transaction type, is received by gateway  from legacy systems , process , for each attribute in the response, first determines if there is a literal match for the attribute and corresponding transaction type in step . If there is such a match, process  continues in step  where it obtains the requirement value associated with the transaction type-attribute string and fills in the value of the response in accordance with the requirement value associated with the transaction type-attribute string. If there is no literal match, process  determines, in step , whether there is a mask that matches the response. As described above, step  tries to find the mask that is closest to a literal match. If there is a matching mask, process  continues in step  where it obtains the requirement value associated with the transaction type-attribute string and fills in the value of the response in accordance with the requirement value associated with the transaction type-attribute string. If there is no matching mask, then in step  process  indicates that an error has occurred. Whether an appropriate action has been taken in step  or an error is indicated in step , process  continues in step , where it determines if there are any more attributes in the response. If there are more attributes, process  gets the next attribute in step . If there are no more attributes process  ends in step a .","The message manager of the present invention is primarily related to the outbound messages, as inbound messages are not expected to change frequently. However, should this assumption prove erroneous, the techniques described herein can be applied to inbound transaction messages as well.","The foregoing disclosure of embodiments of the present invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many variations and modifications of the embodiments described herein will be obvious to one of ordinary skill in the art in light of the above disclosure. The scope of the invention is to be defined only by the claims appended hereto, and by their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00038","num":"00038"},"figref":"FIG. 2A"},{"@attributes":{"id":"P-00039","num":"00039"},"figref":"FIG. 2A"},{"@attributes":{"id":"P-00040","num":"00040"},"figref":"FIG. 2B"},{"@attributes":{"id":"P-00041","num":"00041"},"figref":"FIG. 2C"},{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00044","num":"00044"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
