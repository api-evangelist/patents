---
title: Class loading in a virtual machine for a platform having minimal resources
abstract: A virtual machine with mechanisms for class loading and class structure management in a device having limited file system and/or memory resources. The virtual machine includes a class loader that obtains one or more of a set of predefined classes from a network server, thereby reducing or eliminating the need for a local file system in the device. The class loader stores the predefined classes into a class structure in memory in the device. The virtual machine further includes a memory manager that purges selected ones of the predefined classes from the class structure so as to optimize the use of the memory consumed by the predefined classes in the class structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07296265&OS=07296265&RS=07296265
owner: Hewlett-Packard Development Company, L.P.
number: 07296265
owner_city: Houston
owner_country: US
publication_date: 19990309
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of Invention","The present invention pertains to the field of processing systems. More particularly, this invention relates to class loading by a virtual machine.","2. Art Background","Computer systems and devices having embedded processing resources typically conform to one of a variety of differing architectures. Each architecture is usually defined by a particular instruction set, hardware register set, and memory arrangement, etc. An architecture may also be referred to as a hardware platform for software execution. Software such as application programs which are written or compiled to be executed on a particular hardware platform may be referred to as native code. An application program in the native code of a particular hardware platform usually does not run on other non compatible hardware platforms.","Some software environments enable application programs to execute on a variety of differing hardware platforms. Typically, such a software environment provides a set of predefined services which are specified in terms of application programming interfaces (APIs). Such a software environment is commonly implemented in an object-oriented programming language in which the predefined services are implemented as predefined classes.","One example of such a software environment is a Java virtual machine. A typical Java virtual machine supports a set of predefined classes. Typically, a Java virtual machine includes a class loader that loads the predefined classes into memory as needed when executing a Java application program. Prior java virtual machines typically load the predefined classes from class libraries contained in a local or a remote file system.","Unfortunately, such class loading may limit the applicability of such a software environment. For example, such a software environment may have limited applicability to embedded systems which may have little or no file system resources for storing the class libraries. In addition, the costs of providing the network access resources needed to load classes from remote class libraries and\/or the costs of providing network servers to hold the remote class libraries may be prohibitively high for embedded systems.","A virtual machine is disclosed with mechanisms for class loading and class structure management in a device having limited file system and\/or memory resources. The virtual machine includes a class loader that obtains one or more of a set of predefined classes from a network server, thereby reducing or eliminating the need for a local file system in the device. The class loader stores the predefined classes into a class structure in memory in the device. The virtual machine further includes a memory manager that purges selected ones of the predefined classes from the class structure so as to minimize an amount of the memory consumed by the predefined classes in the class structure and to minimize class loading activities via a network. The class loader uses network prevalent mechanisms such as HTTP to minimize costs of network class loading.","Other features and advantages of the present invention will be apparent from the detailed description that follows.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["12","24","10","10","10"]},"The virtual machine  enables execution of one or more application programs such as the application program . The application program  is written to invoke one or more of a set of predefined classes that are supported by the virtual machine . The virtual machine  loads these predefined classes into a class structure  as needed during execution of the application program . In one embodiment, the predefined classes are Java classes and the virtual machine  is a Java virtual machine.","The virtual machine  includes a class loader  that reduces or eliminates the need for providing a file system in the device  by loading the predefined classes via a network . In one embodiment, the predefined classes are loaded from a set of class files  contained on a network server . In other embodiments, the class files  may be distributed among several network servers accessible via the network .","The class loader  includes a network client  for accessing the network server  and an underlying network protocol stack  for communicating with the network server  via the network . The particular protocol for communication between the network client  and the network server  is preselected so as to minimize development and\/or manufacturing costs associated with the device . In one embodiment, the network server  is a hyper-text transfer protocol (HTTP) server and the network client  is an HTTP client. The network protocol stack  in this embodiment includes the TCP\/IP layers and layers that provide communication according to the particular physical implementation of the connection to the network .","The HTTP protocol may be preferred in that it is widely used network prevalent protocol. As a consequence, HTTP client and network protocol stacks are readily available for a variety of platforms. This helps minimize the cost and reduce the development time and ease the implementation of the virtual machine  in a variety of devices. For example, the device  may be implemented using a platform in which HTTP client and underlying layers are readily available and need not be independently developed. Moreover, the relatively low cost and wide availability of existing HTTP servers offers additional advantages. For example, the network server  may be an existing HTTP server to which the class files  are added to support the device . This would eliminate the costs associated with installing a network server which is dedicated to providing class files to the device .","The virtual machine  includes a memory manager  that minimizes the amount of memory resources needed in the device  to hold the predefined classes being used for execution of the application program . The memory manager  monitors the classes stored in the class structure  and purges selected ones of the classes from the class structure  so as to provide optimal use of the memory resources in the device . In addition, the memory manager  monitors the classes stored in the class structure  and purges selected ones of the classes from the class structure  so as to minimize the amount of class loading performed via the network .","The device  represents any device which may benefit from the advantages provided by the virtual machine . This may include devices with relatively little or no file system resources and or minimal memory resources. The device  may be an embedded system. Examples of embedded systems include telephones, audio and video equipment, home appliances, and computer peripherals.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["16","16","12","24","24"]},"At step , the class loader  obtains a uniform resource locator (URL) for the network class files . In one embodiment, the appropriate URL or URLs for the network class files  are specified in one or more NETWORK CLASS PATH definition statements which are provided to the virtual machine . An example NETWORK CLASS PATH definition statement is as follows.","NETWORK CLASS PATH=\u201cnetserver\/80\u201d","where \u201cnetserver\/80\u201d is a URL of the class files . The class files  are exported by the network server .","At step , the class loader  generates an HTTP GET command that specifies the particular class file being requested. The HTTP GET command is provided to the network client  which in turn issues the HTTP GET command to the network server  via the network protocol stack . An example of an HTTP GET command is as follows:","GET \u201cnetserver\/80\/foo.class\u201d","where \u201cfoo.class\u201d is the particular class being loaded, and \u201cnetserver\/80\u201d is a URL specified in a NETWORK CLASS PATH definition statement. If multiple URLs are specified in NETWORK CLASS PATH definition statements then the class loader  generates an HTTP GET command for each at step  until the particular class file is found. The multiple URLs may be sub-paths on one network server such as the network server  or pathnames for multiple network servers or any combination thereof.","In response to an HTTP GET command issued at step , the network server  returns a data stream containing the particular class file to the network client . The network client  provides the returned file data stream to the class loader  at step .","At step , the class loader  converts the class file data stream into a predefined class definition format and loads it into the class structure . In one embodiment, the predefined class definition format includes arrays and tables for storing methods and references or addresses to the methods in accordance with the Java object-oriented programming language. Thereafter, the virtual machine  may create instances of the newly loaded particular class for use by the application program .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["14","10","22","10"]},"At step , the memory manager  determines which of a set of classes currently stored in the class structure  is the least recently used class. The virtual machine  may associate a time value to each class contained in the class structure  that indicates a time at which an instance of the corresponding class was created. The memory manager  may select the least recently used class by selecting on oldest of these time values. Alternatively, count values or other metrics may be used to indicate a relative ordering of the creation of objects from the classes contained in the class structure .","The memory manager  selects the least recently used class as a candidate to purge from the class structure . In this embodiment, a purging of the least recently used class may minimize class loading via the network  because more recently used classes are more likely to be needed by the virtual machine  to create new objects. The need for subsequent class loading operations on the more recently used classes may be reduced if these classes are retained in the class structure . In other embodiments, other criteria for selecting classes as candidates for purging may be employed. For example, certain types of classes or classes that perform particular types of functions are known to be relatively infrequently invoked and may be selected at step .","At step , the memory manager  determines whether the class selected from step  is in use. The selected class is in use if it is associated with one or more objects being used by the application program . For example, if an object used by the application program  is an instance of the selected class then the selected class is in use for the purposes of step . Similarly, if an object used by the application program  is an instance of a subclass or a parent class of the selected class then the selected class is in use for the purposes of step . The virtual machine  may maintain a list that specifies the hierarchical associations, i.e. parent and child relationships, of the classes contained in the class structure . The memory manager  may use this list of associations to render the determination at step .","If the selected class is in use at step  then the memory manager performs step . At step , the memory manager  determines the next least recently used class and proceeds to step  to determine whether the next least recently used class is in use. The memory manager  loops through steps  and  until a candidate for purging is selected. The memory manager then proceeds to step  if an appropriate class can be selected.","At step , the memory manager  purges the class selected at step  or  from the class structure . At step , the memory manager  deletes objects from memory that are associated with the purged class. The virtual machine  may maintain a list of associations between the classes contained in the class structure  and instances of these classes, i.e. objects, contained in memory in the device . The memory manager  may use this list to locate objects to be deleted at step .","In an alternative embodiment, the memory manager  deletes the selected class and all of its associated objects regardless of whether the selected class is in use.","In addition, the memory manager  may provide a function for explicitly deleting one or more classes which is callable by application programs such as the application program . This enables an application program to clean up unneeded classes from memory. This helps prevent unneeded classes from cluttering what may be a relatively limited memory space in the device .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["10","96","12","24","10","90","90","22","24","12","22","24","12","10"]},"In this embodiment, the limited file system resources of the device  are represented by a set of file system resources . The file system resources  may represent elements such as magnetic media including rotating media or solid-state devices or other storage mechanisms. In other embodiments, the device  does not have any file system resources.","The device  also includes a set of network access resources . The network access resources  represent the appropriate hardware and software elements that enable communication via a network  using the hyper-text transfer protocol (HTTP). The physical communication path supported by network access resources  may be a communication link such as Ethernet, a wireless communication link including infrared, a radio link including cellular radio, or a serial or parallel communication link depending on the nature and cost constraints associated with the design of the device .","The foregoing detailed description of the present invention is provided for the purposes of illustration and is not intended to be exhaustive or to limit the invention to the precise embodiment disclosed. Accordingly, the scope of the present invention is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is described with respect to particular exemplary embodiments thereof and reference is accordingly made to the drawings in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
