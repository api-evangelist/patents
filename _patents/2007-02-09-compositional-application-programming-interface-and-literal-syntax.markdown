---
title: Compositional application programming interface and literal syntax
abstract: A compositional application programming interface (API) permits non-sequential construct declaration independent of other API calls. A wrapper is applied to an imperative API to provide a compositional interface that enables arbitrary and autonomous construct declaration. Additionally, a literal syntax (e.g., code literals, graphic literals . . . ) affords a convenient declaration mechanism for such constructs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08387004&OS=08387004&RS=08387004
owner: Microsoft Corporation
number: 08387004
owner_city: Redmond
owner_country: US
publication_date: 20070209
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Computer programs are groups of instructions and organizational constructs that govern actions to be performed by a computer or other processor-based device. When a computer program is executed on computer hardware, the computer will behave in a predetermined manner by following the instructions of the computer program. Accordingly, the computer becomes a specialized machine that performs the tasks prescribed by the instructions. Computer programs can be generated by programmers manually and\/or with assistance of development tools. Alternatively, programs can be created automatically by other programs.","A significant class of programs include programs that create other programs. Everyday programmers employ compilers, form designers and\/or database application generators, which are examples of this class of programs. Further, games and other graphic-intensive applications dynamically create miniature programs that run concurrently inside graphics co-processors. In addition, business analysis, reporting and visualization tools often create other programs for specialized purposes as a side effect. Still further yet, a web server application that embeds scripts in HTML (HyperText Markup Language) pages is a program that creates a program (HTML page) that creates another program (scripts).","Generally speaking, the technology for creating programs is code generation. The input information for code generation can come from any number of sources. For instance, input information can be embedded statically in a code generator, housed in files or databases or provided by direct user input such as mouse actions in a designer tool. The output of code generation can be designed to execute immediately after being created, under control of the program that created it, or alternatively saved for later execution independent of the code generator.","Whether a standard program or a program that creates programs, application programming interfaces (APIs) can be utilized to aid development. APIs are source code tools that provide a set of services, routines, functions or the like employable by a computer program. These tools provide a convenient mechanism to extend program functionality and\/or provide fundamental program building blocks. For example, code generation APIs can be employed to facilitate generation of programs that create programs.","The following presents a simplified summary in order to provide a basic understanding of some aspects of the claimed subject matter. This summary is not an extensive overview. It is not intended to identify key\/critical elements or to delineate the scope of the claimed subject matter. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.","Briefly described, the subject disclosure pertains to APIs modifications that facilitate computer programming. APIs can be generated in a manner that enables independent calls thereto. Stated differently, users need not be forced to call APIs in a particular manner dictated by a creator of the API. APIs can be constructed to support increased modularity, independence and composability. In addition, an abbreviated syntax is supported to further aid program development.","In accordance with one aspect of the subject disclosure, a wrapper is provided for imperative style APIs. The wrapper can provide a unique interface to or view for an imperative API. For example, the wrapper component can provide a compositional interface or view that enables users to compose or declare programmatic constructs in an independent fashion free from restrictions imposed by an associated imperative API.","In accordance with another aspect of the disclosure, a literal syntax is supported. For instance, constructs can be declared or define utilizing code and\/or graphic literals. This provides users with an easy way to define programmatic constructs that can be translated behind the scenes to an alternate representation, if necessary.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the subject matter may be practiced, all of which are intended to be within the scope of the claimed subject matter. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.","Systems and methods are disclosed with respect to APIs that support independent and\/or arbitrarily ordered calls. Wrappers can be applied to imperative APIs that require adherence to a rigid, sequential order of calls to provide a compositional interface or view. More particularly, API concerns can be separated or decoupled, for example such that imperative API constructs can be declared arbitrarily and\/or autonomously. Furthermore, literal syntax such as code literals and\/or graphic literals can be employed to facilitate construct declaration.","Various aspects of the subject disclosure are now described with reference to the annexed drawings, wherein like numerals refer to like or corresponding elements throughout. It should be understood, however, that the drawings and detailed description relating thereto are not intended to limit the claimed subject matter to the particular form disclosed. Rather, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the claimed subject matter.","Referring initially to , a block diagram of an application programming interface system  is depicted in accordance with an aspect of the claimed subject matter. System  includes an existing imperative API component  that requires adherence to a rigid, sequential order of calls, among other things. In other words, although the imperative API  includes a number of seemingly independent functions, routines or the like, in fact, it is necessary to call such functionality in a certain order. For example, consider construction of a nested structure. In this case, a container needs to be created before anything can be added to the container. If calls are not made in the proper order, such as by creating an expression to be added to a container (e.g., ExpressionContainer) before creation of the container, then nothing will work.","Often, the rigidity associated with the imperative API component  is not strictly necessary but rather stems from a creator of the API. In general, there are two groups of people associated with APIs; those that create APIs and those that use them. The users are thus the client or customer of the creators. The creators of imperative style APIs implement them in a manner that is most easy and logical for them. For example, authors of APIs such as those associated with code generation need to ensure a required structure is generated regardless of user actions. The easiest way to accomplish that is to force users into a particular sequence of calls. For instance, if element B is dependent on element A, then an API author will compel creation of element A prior to element B in accordance with a top-down approach. This enables the context for every element to be known upon creation. However, such a sequence is not logically required. Element B could be created first and element A created second, and subsequently elements A and B could be linked together in accordance with a bottom-up approach. In most instances, however, the required sequence is tailored to the convenience of the creators or authors of the APIs rather than to its users.","Wrapper component  can be coupled to the imperative API component  to afford a different interface or view thereto. In one embodiment, the wrapper component  can provide functionality to reduce the rigidity associated with direct interaction with the imperative API component . More specifically, imperative functionality can be analyzed and the wrapper component  can provide less constrained interaction with respect to some or all functionality provided by the imperative API . In some instances, this can lead to decoupling of mixed API functionality.","In accordance with one particular aspect of the claimed subject matter, the wrapper component  can provide a compositional interface, view thereto, or alternatively convert the imperative API component  to a compositional API. Compositional APIs support independent and\/or arbitrarily ordered calls. Accordingly, clients or customers of such APIs are not forced into any sequence of calls to the API.","The benefits associated of such an approach are at least twofold. First, compositional APIs allow more flexibility to be able to mix and match things at will. More specifically, such APIs provide for increased modularity, independence and composability. Second, they support the way programmers think. Programmers tend not to build programs from the inside out. They tend to be much more organic in the way they generate code.","The degree of independence and\/or composability provided by the wrapper component  can vary in accordance with the type and function of a particular API, among other things. More particularly, API concerns can be decoupled into those concerns that actually require a strict sequence of calls (e.g., third party restrictions, architecture . . . ) and those that do not. The wrapper component  can facilitate arbitrary interaction for some, if not all, concerns that do not require a strict sequence. For example, with respect to APIs relating to code generation concerns relating to declaration of constructs, objects, elements or the like can be separated from those pertaining to building objects, wherein the wrapper component  provides functionality associated with construct declaration.","Rather than interacting directly with the imperative API component , users of the API can interact with the wrapper component . The wrapper component  can provide additional methods, services, routines or the like associated with independent and\/or arbitrary construct declaration, among other things. Users can call such mechanisms when generating constructs in this manner. The wrapper component  can interact with the imperative API component  to provide constructs to the API in the manner and\/or order it expects them. The wrapper can also allow pass-through of other calls such as those related to building objects directly to the imperative API component . Accordingly, the wrapper component  can provide a compositional view on an imperative API component .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["120","120","120","210","220"]},"The constructor component  provides mechanism to facilitate independent, context-free specification of programmatic elements, constructs or the like. For example, the constructor component  can correspond to a library, API, factory or the like that enables creation of an instance of a particular programmatic element independent of any contextual information. For example, there can be type factories, method factories, expression factories with respect to a code generation API. In accordance with one embodiment, constructor component can save instances of programmatic elements as objects or functions that expect and accept a context.","The context component  facilitates provisioning of context information to programmatic constructs concurrently with and\/or subsequent to their creation via constructor component . This enables all cross references, dependencies and other contextual information to be associated with programmatic constructs or more particularly instances thereof. Similar to the constructor component , such functionality can be embodied in one or more libraries, APIs or the like. API users can utilize such functionality to specify context for a plurality of initially declared constructs.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 3-4"},"By way of example, consider the simple expression \u201cx+y.\u201d In essence, this is an add expression that contains to two parameters expressions that in this instance correspond to variables \u201cx\u201d and \u201cy.\u201d An imperative API can force a user to specify parameters sequentially, for example from the top down as follows:\n\n","A compositional approach can allow such expressions to be generated without a required ordering. Accordingly, the expressions can each be declared separately without initial specification of context information associated relations or cross-references between expressions. As depicted in , each expression container \u201ca,\u201d \u201cb,\u201d, \u201cc,\u201d \u201cd,\u201d and \u201ce\u201d can be declared separately. For illustrative purposes, each container includes a \u201cdangling wire\u201d that can be \u201cconnected\u201d to another container to provide context. As a result, the containers, representative of programmatic constructs, can be generated in any order specified by a user. For example, a user can construct the same expression \u201cx+y\u201d in accordance with a bottom-up approach. In particular, first the variable expressions \u201cd\u201d and \u201ce\u201d are created, followed by the parameter expressions \u201cb\u201d and \u201cc\u201d and finally the larger add expression container \u201ca.\u201d This could be denoted programmatically as follows:",{"@attributes":{"id":"p-0040","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Make Add Expression ("]},{"entry":[{},"\u2003\u2003Left Expression (var (\u201cx\u201d));"]},{"entry":[{},"\u2003\u2003Right Expression (var (\u201cy\u201d));"]},{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["120","110","110","120"],"figref":"FIG. 1"},"Turning attention to , a system  that facilitates program specification is illustrated in accordance with an aspect of the claimed subject matter. As previously described with respect to , the constructor component  can provide one or more mechanisms to facilitate generation of instances of programmatic constructs. For example, one or more libraries, APIs, factories or the like can provide callable functionality related to such generation.","System  provides an extension to the manner in which constructs like expressions can be declared. More specifically, code literal component  is operable to identify and provision code literals to the constructor component . Code literals pertain to literal expressions of code desired to be inserted. Once again, one or more libraries, APIs, factories or the like can be provided to support such functionality. Among other things, this is extremely useful with respect code generation applications as particular segments of code to be produced can be explicitly specified. Recall the previous \u201cx+y\u201d example specified as follows:",{"@attributes":{"id":"p-0043","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Make Add Expression ("]},{"entry":[{},"\u2003\u2003Left Expression (var (\u201cx\u201d));"]},{"entry":[{},"\u2003\u2003Right Expression (var (\u201cy\u201d));"]},{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{},{}],"in-line-formulae":[{},{}],"i":"x+y\u2510. ","b":["510","210","510","510"]},"The code literal component  and construct component  can also interact with type inference component  to allow specification to be even simpler. The type inference component  is a mechanism that can infer or otherwise determine types as a function of context. Accordingly, this can allow code literals to be expressed without associated types such as:\n\nDim Expression=\u250c\n\nBased on the code literal specification of \u201cx+y,\u201d the type inference component  can infer that the type of \u201cExpression\u201d is \u201cExpressionFactory.\u201d This information can then be provided to one or more of code literal component  and constructor component  to enable the appropriate code to be generated.\n","It is also to be noted that code literal component  supports code literals with unquoted or de-referenced values. Unquoted portions of a code literal can be retrieved from the ambient environment. Consider the following code literal: \u250cx+\u2514d\u2518\u2510. Here, the \u201cd\u201d is unquoted. Accordingly, its value will be retrieved by code literal component  from the environment. If \u201cd\u201d is assigned the value \u201cy\u201d for example denoted as: \u201cd=\u250cy\u2510,\u201d then the expression will be equivalent to the previous expression, namely \u250cx+y\u2510. Similarly, this expression is equivalent to the following longer version, perhaps supported by the constructor component .",{"@attributes":{"id":"p-0046","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"d = var(\u201cy\u201d);"]},{"entry":[{},"Make Add Expression ("]},{"entry":[{},"\u2003\u2003Left Expression (var (\u201cx\u201d));"]},{"entry":[{},"\u2003\u2003Right Expression (d);"]},{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["510","210","210"]},"Referring to , a system  is provided to facilitate programmatic specification in accordance with an aspect of the claimed subject matter. Similar to system  of , the system  includes the constructor component  and type inference component , as previously described. In addition, the system  includes a graphical code literal component  communicatively coupled with the constructor component  and the inference component . The graphical code literal component  provides support for another embodiment of code literals or a specific instance thereof, namely graphical literals. Graphical literals enable variables or other programmatic constructs to be assigned a value as a function of a graphical depiction. The graphical code literal component  can identify a graphical literal and produce or otherwise identify code associated with the literal. For example, the component  can translate an instance of a graphical literal directly to code supported by the constructor component  and provided it thereto. Still further yet, the type inference component  can be employed to infer types associated with assigned constructs, among other things, to further simplify what a user needs to specify.","In accordance with one embodiment, graphical literals can be provided to a user for use in code specification. Each provided literal can include or be linked to code needed for its generation. Where multiple graphical literals are specified, the graphical interpreter component can facilitate generating the connecting code. Further yet, graphical literals can also support both quoting and unquoting, or the like, similar to the functionality with respect to code literals. This can facilitate reuse of graphical literals, among other things.","Referring to -, a number of graphical literal examples are provided to aid understanding. More specifically each figure provides an example of variable assignment utilizing graphical literals. Note that variable types are not specified as they can be inferred from each graphical literal and\/or other context information.",{"@attributes":{"id":"p-0050","num":"0054"},"figref":"FIG. 7","i":"a "},{"@attributes":{"id":"p-0051","num":"0055"},"figref":"FIG. 7","i":"b "},"Multiple graphical literals can be combined to specify a variable. illustrates use of multiple literals, wherein the graphical literals of and are combined and assigned to variable \u201cY.\u201d depicts an equivalent assignment with respect to variable \u201cZ.\u201d However, here the variable \u201cX\u201d is inside the graphical window in an unquoted form. This indicates that the value of \u201cX\u201d should be specified within the window. Since the value of \u201cX\u201d is a button, the values of variables \u201cY\u201d and \u201cZ\u201d are the same.","It is to be appreciated that other mechanisms can be employed to facilitated code specification including the foregoing aspects, among other things. For example, intelligent assistance can be afforded to provide code suggestions to users or auto-fill portions of code. Furthermore, syntax coloring can be utilized to aid program specification and comprehension. In general, programming utilizing APIs and literal syntax associated therewith can be accomplished in a manner similar an integrated development environment (IDE) including like mechanisms.","Turning to , a programming system  is illustrated in accordance with yet another aspect of the claimed subject matter. Similar to system , system  includes the constructor component , code literal component  and type inference component , as previously shown and described. In addition, the system  includes a serialization component .","The serialization component  is operable to serialize and\/or deserialize literals among other programmatic constructs to and from a data store . In this manner, literals can be specified with respect to references to databases or storage mechanisms. More particularly, initially generated literals can be serialized to the data store . Subsequently, code can employ these literals via reference thereto. For example, a calculator program could have code that implements calculator buttons persisted in a database. When the calculator initializes, it can read code in from a database as code literals, interpret and bind it to user interface buttons such that when the buttons are pressed or otherwise selected, the code is executed.","The aforementioned systems, architectures and the like have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub-components specified therein, some of the specified components or sub-components, and\/or additional components. Sub-components could also be implemented as components communicatively coupled to other components rather than included within parent components. Further yet, one or more components and\/or sub-components may be combined into a single component to provide aggregate functionality. Communication between systems, components and\/or sub-components can be accomplished in accordance with either a push and\/or pull model. The components may also interact with one or more other components not specifically described herein for the sake of brevity, but known by those of skill in the art. It is also to be noted that although APIs can related to code generation applications including compilers, other compilers can be employed to perform functionality associated with the above-described components. For example, a compiler can facilitate transformation of code specified in a compositional manner to an imperative manner associated with a particular API. Additionally or alternatively, a compiler can be employed to aid translation of literal syntax to more conventional code. Further yet, a compiler can determine a value associated with an unquoted element from an ambient environment and replace the unquoted element with the value. As will be appreciated from a more detailed example provided infra, compiler can also utilized and benefit from the same functionality it helps implement. For example, the compiler can take advantage of a compositional API to weave code-generation code together in sophisticated ways.","Furthermore, as will be appreciated, various portions of the disclosed systems and methods may include or consist of artificial intelligence, machine learning, or knowledge or rule based components, sub-components, processes, means, methodologies, or mechanisms (e.g., support vector machines, neural networks, expert systems, Bayesian belief networks, fuzzy logic, data fusion engines, classifiers . . . ). Such components, inter alia, can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent. By way of example and not limitation, such mechanisms can be employed to facilitate optimal decoupling of API functionality and\/or type inference related to literals.","In view of the exemplary systems described supra, methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation, the methodologies are shown and described as a series of blocks, it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks, as some blocks may occur in different orders and\/or concurrently with other blocks from what is depicted and described herein. Moreover, not all illustrated blocks may be required to implement the methodologies described hereinafter.","Referring to , a method of providing compositional functionality with respect to an imperative API  is depicted in accordance with an aspect of this disclosure. In particular, an imperative API can be identified at reference numeral . For example, such an API can provide functionality with respect to code generation. At reference numeral , a wrapper can be applied to the imperative API. The wrapper can provide a compositional interface or view to the imperative API. More specifically, code can be provided with respect to at least a portion of functionality provided by the imperative API to enable calls to be made independent of other calls thereby increasing code modularity and composability as well as independence.",{"@attributes":{"id":"p-0060","num":"0064"},"figref":"FIG. 10","b":["1000","1010","1020","1030","1040"]},{"@attributes":{"id":"p-0061","num":"0065"},"figref":"FIG. 11","b":["1100","1110","1120"]},"The following is a detailed example relating to portions of the claimed subject matter to further facilitate clarity and understanding. What follows is purely exemplary and is not meant to limit the claimed subject matter. In particular, the example illustrates application of a few of the aforementioned aspects of the disclosure with respect to a conventional imperative API for code generation.","Referring to , a graphical illustration of a code generation API  is provided. As shown, the code generation includes three distinct groups of calls ,  and . Group  supplies calls for creating code in methods, types, modules and an assembly. Group  provides calls for saving an assembly to a file for later execution, and group  affords calls for executing methods dynamically. As shown, the API  is imperative in that it requires a rigid, sequence of calls. In other words, an author of a code generator must call the API in a top-down manner that creates an assembly before calling an API that creates modules, before calling an API that creates types, and so on. However, since any bottom level statement or expression can refer to any other type or member, whether nested or not, the sequence required by the API is not logically necessary. In fact, it is tailored to the convenience of the author of the API rather than to its user, who authors a code generator.","The author of the code generation API must ensure that whatever a user does the generated assembly has the required nested structure. The easiest way to do this is to force the user to create things in sequence. However, the final assembly is both a network of cross references and a nested structure of containers. The user of the API, the author of a code generator, must specify both the network of references and the nested structure of containers. Specifying the network of cross references or declarations does not logically require sequential calls, but is done most naturally in a bottom up fashion.","The following code snippet provides an example of usage of API  to generate another program that prints \u201chello world:\u201d",{"@attributes":{"id":"p-0066","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"With Thread.GetDomain.DefineDynamicAssembly(New"},{"entry":"AssemblyName(\u201cHWAsbly\u201d), "},{"entry":"\u2003\u2002AssemblyBuilderAccess.RunAndSave)"},{"entry":"\u2003Dim mtdBld As MethodBuilder"},{"entry":"\u2003With .DefineDynamicModule(\u201cHW\u201d, \u201cHW.exe\u201d).DefineType(\u201cHWT\u201d,"},{"entry":"TypeAttributes.Public)"},{"entry":"\u2003\u2003mtdBld = .DefineMethod(\u201cMain\u201d, MethodAttributes.Static Or "},{"entry":"\u2003\u2003\u2002MethodAttributes.Public, GetType(Void), Nothing)"},{"entry":"\u2003\u2003With mtdBld"},{"entry":"\u2003\u2003\u2003With .GetILGenerator"},{"entry":"\u2003\u2003\u2003\u2003.EmitWriteLine(\u201chello, world\u201d)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"What follows is a functionally identical rewrite of the code above in a more functional style, avoiding the \u201cWith\u201d statement and introducing temporary variables at every level of the sequence. This makes the required sequence crystal clear at the expense of reflecting the implied nesting structure:",{"@attributes":{"id":"p-0068","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Dim asmNym = New AssemblyName(\u201cHWAsbly\u201d)"},{"entry":"Dim hwaBld As AssemblyBuilder ="},{"entry":"Thread.GetDomain.DefineDynamicAssembly(asmNym, _Assembly-"},{"entry":"\u2003BuilderAccess.RunAndSave)"},{"entry":"Dim mdlBld As ModuleBuilder = hwaBld.DefineDynamicModule(\u201cHW\u201d,"},{"entry":"\u201cHW.exe\u201d)"},{"entry":"Dim tpeBld As TypeBuilder = mdlBld.DefineType(\u201cHWT\u201d,"},{"entry":"TypeAttributes.Public)"},{"entry":"Dim mtdBld As MethodBuilder = tpeBld.DefineMethod(\u201cMain\u201d,"},{"entry":"MethodAttributes.Static Or _MethodAttributes.Public,"},{"entry":"\u2003GetType(Void), Nothing)"},{"entry":"Dim ilGntr As ILGenerator = mtdBld.GetIlGenerator"},{"entry":"ilGntr.EmitWriteLine(\u201chello, world\u201d)"},{"entry":"ilGntr.Emit(OpCodes.Ret)"},{"entry":"Dim theTpe As System.Type = tpeBld.CreateType"},{"entry":"theTpe.GetMethod(\u201cMain\u201d).Invoke(Nothing, Nothing)"},{"entry":"hwaBld.SetEntryPoint(mtdBld, PEFileKinds.ConsoleApplication)"},{"entry":"hwaBld.Save(\u201cHW.exe\u201d)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The above code is now discussed line by line for purposes of clarity. First, a name is created for the assembly about to be created:\n\n",{"@attributes":{"id":"p-0070","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim hwaBld As AssemblyBuilder ="]},{"entry":[{},"Thread.GetDomain.DefineDynamicAssembly(asmNym, _Assembly-"]},{"entry":[{},"\u2002BuilderAccess.RunAndSave)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0071","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Dim mdlBld As ModuleBuilder = hwaBld.DefineDynamicModule(\u201cHW\u201d,"},{"entry":"\u201cHW.exe\u201d)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0072","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim tpeBld As TypeBuilder = mdlBld.DefineType(\u201cHWT\u201d,"]},{"entry":[{},"TypeAttributes.Public)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0073","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim mtdBld As MethodBuilder = tpeBld.DefineMethod(\u201cMain\u201d,"]},{"entry":[{},"MethodAttributes.Static Or"]},{"entry":[{},"\u2002MethodAttributes.Public, GetType(Void), Nothing)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":"Dim ilGntr As ILGenerator=mtdBld.GetIlGenerator\n\nNext, the \u201cILGenerator\u201d is used to emit code that will, when called dynamically or at another time via a stored assembly, write a line of text to the console and return:\n"}},{"@attributes":{"id":"p-0074","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ilGntr.EmitWriteLine(\u201chello, world\u201d)"]},{"entry":[{},"ilGntr.Emit(OpCodes.Ret)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0075","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim theTpe As System.Type = tpeBld.CreateType"]},{"entry":[{},"theTpe.GetMethod(\u201cMain\u201d).Invoke(Nothing, Nothing)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0076","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"hwaBld.SetEntryPoint(mtdBld, PEFileKinds.ConsoleApplication)"]},{"entry":[{},"hwaBld.Save(\u201cHW.exe\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Although there are few options, concerns can be separated into concerns of declaring things, which does not logically require a sequence, and building things, which does. For the first part of the job, a factory pattern can be employed. Generally, factories are objects that hold declaration information and wait for one more required input before constructing a builder. The builders actually generate code and need to be called in the required sequence. The factories are new things; the builders (e.g., module, type, method, expression . . . ) are the existing things associated with the API. Consider the following where new types and constructors are italicized:\n\n",{"@attributes":{"id":"p-0078","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim xpr As = New"]},{"entry":[{},{"i":"StaticMethodCallFactory"}]},{"entry":[{},"\u2003world\u201d)"]},{"entry":[{},"REM Any method call is a kind of Expression, therefore, its factory"]},{"entry":[{},"REM is a subclass of ExpressionFactory"]},{"entry":[{},"Dim mtd = New (\u201cMain\u201d, MethodAttributes.Static Or"]},{"entry":[{},"MethodAttributes.Public, "]},{"entry":[{},"\u2003GetType(Void), Nothing)"]},{"entry":[{},"Dim mdl = New (\u201cHW\u201d, \u201cHW.exe\u201d)"]},{"entry":[{},"Dim tpe = New (\u201cHWT\u201d, TypeAttributes.Public)"]},{"entry":[{},"Dim asmNym = New AssemblyName(\u201cHWAsbly\u201d)"]},{"entry":[{},"Dim hwaBld As AssemblyBuilder ="]},{"entry":[{},"Thread.GetDomain.DefineDynamicAssembly(asmNym, _Assembly-"]},{"entry":[{},"\u2003BuilderAccess.RunAndSave)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["REM Rigidly sequenced code, exactly the same sequence as before, but threading through","REM the particular artifacts implied above via hwaBld, mdl, tpe, mtd, and xpr"]}},{"@attributes":{"id":"p-0079","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim mdlBld As ModuleBuilder = mdl.(hwaBld)"]},{"entry":[{},"Dim tpeBld As TypeBuilder = tpe.(mdlBld)"]},{"entry":[{},"Dim mtdBld As MethodBuilder = mtd.(tpeBld)"]},{"entry":[{},"Dim xprBld As = xpr.(mtdBld)"]},{"entry":[{},"xprBld.Emit( )"]},{"entry":[{},"tpeBld.CreateType.GetMethod(\u201cMain\u201d).Invoke(Nothing, Nothing)"]},{"entry":[{},"hwaBld.SetEntryPoint(mtdBld, PEFileKinds.ConsoleApplication)"]},{"entry":[{},"hwaBld.Save(\u201cHW.exe\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Notice above that while emphasizing decoupling, improvement was added to the conventional API . Instead of writing intermediate language code, an \u201cExpressionFactory\u201d and \u201cExpressionBuilder\u201d were created to express generated code. Instead of generating intermediate language code that calls Console.WriteLine which is:",{"@attributes":{"id":"p-0081","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ilGntr.EmitWriteLine(\u201chello, world\u201d)"]},{"entry":[{},"ilGntr.Emit(OpCodes.Ret),"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0082","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ilGntr.Emit(OpCodes.ldstr, "]},{"entry":[{},"\u2003myModule.ResolveString(myHelloWorldStringToken))"]},{"entry":[{},"ilGntr.EmitCall(OpCodes.[Call],"]},{"entry":[{},"\u2003myModule.ResolveMember(myConsoleWriteLineMethodToken),"]},{"entry":[{},"Nothing),"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0083","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim xpr As ExpressionFactory = New"]},{"entry":[{},"StaticMethodCallFactory(\u201cConsole.Writeline\u201d, "]},{"entry":[{},"\u2003\u2003\u201chello, world\u201d)"]},{"entry":[{},"\u2003..."]},{"entry":[{},"\u2003Dim xprBld As ExpressionBuilder = xpr.MakeBuilder(mtdBld)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"This can be improved further if a compiler or like component can identify a desired expression. This is easy since that is exactly what it does with code users write. Still further improvement can be made if the compiler or like component can be directed to look at code desired to be generated. This can be accomplished via quasiquote-unquote type technique, which transforms specially quoted code into calls of the factory constructors. For example, the following can be written to mean exactly the same thing as above:",{"@attributes":{"id":"p-0085","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Dim xpr As ExpressionFactory = \u250cConsole.Writeline(\u201chello, world\u201d)\u2510 ..."},{"entry":"Dim xprBld As ExpressionBuilder = xpr.MakeBuilder(mtdBld)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"Dim xpr=\u250cConsole.Writeline(\u201chello, world\u201d)\u2510\n\nThe compiler or like component can inspect the content of the quotes, determine it is a call to a static method, and replace the quoted expression with the appropriate call to the \u201cStaticMethodCallFactory\u201d constructor.\n"}},"Such a technique can be employed more extensively as follows:",{"@attributes":{"id":"p-0087","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim mtd = \u250cPublic Static Sub Main( )"]},{"entry":[{},"\u2003\u2002Console.WriteLine(\u201chello, world\u201d)"]},{"entry":[{},"\u2003End Sub\u2510"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0088","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim xprs As New List(Of ExpressionFactory)"]},{"entry":[{},"xprs.Add( \u250cConsole.Writeline(\u201chello, world\u201d) \u2510)"]},{"entry":[{},"\u2003Dim mtd = New MethodFactory(\u201cMain\u201d, "]},{"entry":[{},"\u2003\u2003MethodAttributes.Static Or MethodAttributes.Public, "]},{"entry":[{},"\u2003\u2003GetType(Void), Nothing, xprs)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0089","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim xprs As New List(Of ExpressionFactory)"]},{"entry":[{},"\u2003xprs.Add(New StaticMethodCallFactory(\u201cConsole.Writeline\u201d, "]},{"entry":[{},"\u2003\u2003\u201chello, world\u201d))"]},{"entry":[{},"\u2003Dim mtd = New MethodFactory(\u201cMain\u201d, "]},{"entry":[{},"\u2003\u2003MethodAttributes.Static Or MethodAttributes.Public, "]},{"entry":[{},"\u2003\u2003GetType(Void), Nothing, xprs)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"This can further be extended with respect to class as follows:",{"@attributes":{"id":"p-0091","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim typ = \u250cPublic Class HWT"]},{"entry":[{},"\u2003\u2003Public Static Sub Main( )"]},{"entry":[{},"\u2003\u2003\u2003Console.WriteLine(\u201chello, world\u201d)"]},{"entry":[{},"\u2003\u2003End Sub"]},{"entry":[{},"\u2003End Class \u2510"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0092","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Dim mtds As New List(Of MethodFactory)"},{"entry":"\u2003mtds.add(\u250cPublic Static Sub Main( )"},{"entry":"\u2003\u2003\u2003Console.WriteLine(\u201chello, world\u201d)"},{"entry":"\u2003\u2003End Sub \u2510)"},{"entry":"\u2003Dim tpe = New TypeFactory(\u201cHWT\u201d, TypeAttributes.Public, mtds)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0093","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Dim xprs As New List(Of ExpressionFactory)"},{"entry":"\u2003xprs.Add( \u250cConsole.Writeline(\u201chello, world\u201d) \u2510)"},{"entry":"\u2003Dim mtds As New List(Of MethodFactory)"},{"entry":"\u2003mtds.add(New MethodFactory(\u201cMain\u201d, "},{"entry":"\u2003\u2003MethodAttributes.Static Or MethodAttributes.Public, "},{"entry":"\u2003\u2003GetType(Void), Nothing, xprs))"},{"entry":"\u2003Dim tpe = New TypeFactory(\u201cHWT\u201d, TypeAttributes.Public, mtds)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0094","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Dim xprs As New List(Of ExpressionFactory)"},{"entry":"\u2003xprs.Add(New StaticMethodCallFactory(\u201cConsole.Writeline\u201d, "},{"entry":"\u2003\u2003\u201chello, world\u201d))"},{"entry":"\u2003Dim mtds As New List(Of MethodFactory)"},{"entry":"\u2003mtds.add(New MethodFactory(\u201cMain\u201d, "},{"entry":"\u2003\u2003MethodAttributes.Static Or MethodAttributes.Public, "},{"entry":"\u2003\u2003GetType(Void), Nothing, xprs))"},{"entry":"\u2003Dim tpe = New TypeFactory(\u201cHWT\u201d, TypeAttributes.Public, mtds)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"This is the highest abstraction that should be employed with quote syntax, since the subject language used in this example (e.g., Visual Basic) has no intrinsic syntax for modules and assemblies. Accordingly, it makes little sense to try to define a quoted syntax for them. However, given a different language this is possible and within the scope of the subject innovation.","One sub-feature remains for quoted code, namely unquoting or splicing. Suppose one did not want to commit to the name of the method, rather allowing a user to input it when running the code-generator. In this scenario, the code could be written as follows:",{"@attributes":{"id":"p-0097","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim typ = \u250cPublic Class HWT"]},{"entry":[{},"Public Static Sub \u2514 Console.ReadLine( ) \u2518 ( )"]},{"entry":[{},"\u2003\u2003\u2003Console.WriteLine(\u201chello, world\u201d)"]},{"entry":[{},"\u2003\u2003End Sub"]},{"entry":[{},"\u2003End Class \u2510"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0098","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim xpr = \u250cConsole.WriteLine(\u201chello, world\u201d) \u2510"]},{"entry":[{},"\u2003Dim typ = \u250cPublic Class HWT"]},{"entry":[{},"Public Static Sub \u2514Console.ReadLine( )\u2518( )"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2514 xpr \u2518"]},{"entry":[{},"\u2003\u2003\u2003End Sub"]},{"entry":[{},"\u2003\u2003End Class \u2510"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0099","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim xprs As New List of ExpressionFactory"]},{"entry":[{},"\u2003xprs.Add(\u250cConsole.WriteLine(\u201chello, world\u201d) \u2510)"]},{"entry":[{},"xprs.Add(\u250cConsole.Write(\u201cPress any key to end this program ...\u201d) \u2510)"]},{"entry":[{},"\u2003xprs.Add(\u250cConsole.ReadKey( )\u2510)"]},{"entry":[{},"\u2003Dim typ = \u250cPublic Class HWT"]},{"entry":[{},"Public Static Sub \u2514Console.ReadLine( ) \u2518 ( )"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2514xprs \u2518"]},{"entry":[{},"\u2003\u2003\u2003End Sub"]},{"entry":[{},"\u2003\u2003End Class \u2510"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0100","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim typ = \u250cPublic Class HWT"]},{"entry":[{},"\u2003Public Static Sub \u2514Console.ReadLine( ) \u2518 ( )"]},{"entry":[{},"\u2003\u2003Console.WriteLine(\u201chello, world\u201d)"]},{"entry":[{},"\u2003\u2003Console.Write(\u201cPress any key to end this program ...\u201d)"]},{"entry":[{},"\u2003\u2003Console.ReadKey( )"]},{"entry":[{},"\u2003End Sub"]},{"entry":[{},"End Class \u2510"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As used herein, the terms \u201ccomponent,\u201d \u201csystem\u201d and the like are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an instance, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a computer and the computer can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","The word \u201cexemplary\u201d is used herein to mean serving as an example, instance or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs. Furthermore, examples are provided solely for purposes of clarity and understanding and are not meant to limit the subject innovation or relevant portion thereof in any manner. It is to be appreciated that a myriad of additional or alternate examples could have been presented, but have been omitted for purposes of brevity.","As used herein, the term \u201cinference\u201d or \u201cinfer\u201d refers generally to the process of reasoning about or inferring states of the system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources. Various classification schemes and\/or systems (e.g., support vector machines, neural networks, expert systems, Bayesian belief networks, fuzzy logic, data fusion engines . . . ) can be employed in connection with performing automatic and\/or inferred action in connection with the subject innovation.","Furthermore, all or portions of the subject innovation may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed innovation. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device or media. For example, computer readable media can include but are not limited to magnetic storage devices (e.g., hard disk, floppy disk, magnetic strips . . . ), optical disks (e.g., compact disk (CD), digital versatile disk (DVD) . . . ), smart cards, and flash memory devices (e.g., card, stick, key drive . . . ). Additionally it should be appreciated that a carrier wave can be employed to carry computer-readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network (LAN). Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.","In order to provide a context for the various aspects of the disclosed subject matter,  as well as the following discussion are intended to provide a brief, general description of a suitable environment in which the various aspects of the disclosed subject matter may be implemented. While the subject matter has been described above in the general context of computer-executable instructions of a program that runs on one or more computers, those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally, program modules include routines, programs, components, data structures, etc. that perform particular tasks and\/or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the systems\/methods may be practiced with other computer system configurations, including single-processor, multiprocessor or multi-core processor computer systems, mini-computing devices, mainframe computers, as well as personal computers, hand-held computing devices (e.g., personal digital assistant (PDA), phone, watch . . . ), microprocessor-based or programmable consumer or industrial electronics, and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However, some, if not all aspects of the claimed subject matter can be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary environment  for implementing various aspects disclosed herein includes a computer  (e.g., desktop, laptop, server, hand held, programmable consumer or industrial electronics . . . ). The computer  includes a processing unit , a system memory  and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available microprocessors. It is to be appreciated that dual microprocessors, multi-core and other multiprocessor architectures can be employed as the processing unit .","The system memory  includes volatile and nonvolatile memory. The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory. By way of illustration, and not limitation, nonvolatile memory can include read only memory (ROM). Volatile memory includes random access memory (RAM), which can act as external cache memory to facilitate processing.","Computer  also includes removable\/non-removable, volatile\/non-volatile computer storage media.  illustrates, for example, mass storage . Mass storage  includes, but is not limited to, devices like a magnetic or optical disk drive, floppy disk drive, flash memory or memory stick. In addition, mass storage  can include storage media separately or in combination with other storage media.",{"@attributes":{"id":"p-0109","num":"0119"},"figref":"FIG. 13","b":["1328","1310","1328","1324","1312","1316","1324"]},"The computer  also includes one or more interface components  that are communicatively coupled to the bus  and facilitate interaction with the computer . By way of example, the interface component  can be a port (e.g., serial, parallel, PCMCIA, USB, FireWire . . . ) or an interface card (e.g., sound, video, network . . . ) or the like. The interface component  can receive input and provide output (wired or wirelessly). For instance, input can be received from devices including but not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, camera, other computer and the like. Output can also be supplied by the computer  to output device(s) via interface component . Output devices can include displays (e.g., CRT, LCD, plasma . . . ), speakers, printers and other computers, among other things.",{"@attributes":{"id":"p-0111","num":"0121"},"figref":"FIG. 14","b":["1400","1400","1410","1410","1400","1430","1400","1430","1430","1410","1430"]},"The system  includes a communication framework  that can be employed to facilitate communications between the client(s)  and the server(s) . The client(s)  are operatively connected to one or more client data store(s)  that can be employed to store information local to the client(s) . Similarly, the server(s)  are operatively connected to one or more server data store(s)  that can be employed to store information local to the servers . For example, programmers on client(s)  can request and receive APIs or the like from server(s)  or vice versa. Additionally or alternatively, generated code can be distributed across both client(s)  and server(s) .","What has been described above includes examples of aspects of the claimed subject matter. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter, but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly, the disclosed subject matter is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the terms \u201cincludes,\u201d \u201chas\u201d or \u201chaving\u201d or variations in form thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3","i":["a","e "]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 7","i":["a","d "]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
