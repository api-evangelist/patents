---
title: System and method including a merging driver for accessing multiple data sources
abstract: A method enables access of a plurality of data sources by a single access operation where each data source in the plurality of data sources requires a different driver to access the data source so that there is a plurality of different drivers. The method includes using an application programming interface (API) for each driver in the plurality of different drivers. The API is substantially identical for each of the drivers in the plurality of different drivers. A merging driver receives the single access operation, and in response to the single access operation, the merging driver accesses the plurality of different drivers through the API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07406697&OS=07406697&RS=07406697
owner: Sun Microsystems, Inc.
number: 07406697
owner_city: Palo Alto
owner_country: US
publication_date: 20001213
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The present invention relates to the access of a database having multiple data sources, and more particularly, to the access of multiple data sources by a single query.","2. Description of Related Art","There are known databases where the data to be accessed is distributed over multiple data sources, such as different directories, different servers, etc., and where the different data sources have different formats. In this case, in known systems, only one data source can be accessed by a single search or a query. To access multiple sources, the user has to dispatch multiple queries directed to the multiple sources.","According to an aspect of the present invention there is provided a method for accessing a plurality of data sources by a single access operation or query. Each data source in the plurality of data sources requires a separate driver to access the data source so that there is a plurality of separate drivers. Each driver in the plurality of separate drivers uses an application programming interface (API). The API is substantially identical for each of the drivers in the plurality of separate drivers.","A merging driver receives the single access operation. In response to the single access operation, the merging driver accesses the plurality of separate drivers through the API and consequently accesses each of the data sources. In one embodiment, a user selects each data source to be included in the plurality of data sources.","The provision of the merging driver provides a kind of a \u201cvirtual\u201d database, where multiple sources requiring individual drivers are accessed under the roof of a common API. The merging driver uses the common API to access the multiple sources such that the multiple sources can be queried through a single query. An application program or a user interface may access the merging driver through its API to access multiple sources by a single access operation.","The multiple data sources can be databases, which are separate from one another. The multiple data sources may be in different locations, may be different kinds, and may require the use of different query engines to access their data.","A user by a single query (or any other access operation, e.g. for editing) can access data, which may be distributed over multiple sources. By specifying the sources to be accessed, a user can \u201cmerge\u201d different sources into a \u201cvirtual\u201d database, which looks to the user like a single database, but which is actually a grouping of several databases or sources selected by the user, so that a single query can provide the user with results, which are retrieved from different sources.","According one embodiment of the present invention, a method  for accessing multiple data sources , , ,  using a single access operation or query eliminates the prior art need for a user to use multiple queries. Multiple data sources , , ,  may have different formats and may need to be accessed by different drivers, e.g., drivers , , , and , respectively.","As explained more completely below, a common application programming interface (API) is used for individually accessing each of drivers  to , and consequently data sources , , , and . The access to multiple data sources , , , and  by a single access operation is achieved using a merging driver , which accesses the plurality of data sources , , , and  by accessing the corresponding drivers  to  through the common API.","In other words, for each data source having a different format, there is a corresponding separate driver. Each of this plurality of drivers is accessed through a common API. The merging driver utilizes the common API to access this plurality of data sources.","Thus, merging driver  uses the common API to perform access operations to the plurality of data sources , , , and  in response to a single access operation to merging driver . Merging driver , therefore, acts as a generator for generating a plurality of queries, in response to a single query to merging driver , to different data sources having different formats or requiring separate drivers for some other reason.","Merging driver  provides a \u201cvirtual\u201d database, where multiple data sources requiring individually different drivers are accessed under the roof of a common API. Merging driver  uses the common API to access the multiple data sources such that they can be queried through a single query. An application program or a user interface may access merging driver  through its API to access multiple sources by a single access operation.","From a user's point of view, merging driver  is configured such that merging driver  looks to the outside world, or better to say to the user interface, like a data source itself. This means that the user can access merging driver  like a single data source. However, this single data source actually is multiple data sources , , , and , which are accessed using the single access operation.","In one embodiment, application  is an address book of the STAROFFICE Software Package produced by Sun Microsystems, Palo Alto, Calif. Data source  is, for example, a lightweight directory access protocol (LDAP) source, which means that the data in this source is stored according to the LDAP format. Hence, driver  is a LDAP driver.","Data source  has data stored in tables  to  according to a format specified by a database software application, such as the StarBase database management application that is part of the STAROFFICE Software Package. (STAROFFICE is a trademark of Sun Microsystems, Inc. of Palo Alto, Calif.) Thus, data source  is accessed by a different driver , which in fact is the driver for the StarBase database management application.","Data source  is another source also requiring a driver  different from the drivers  and  for data sources  and , respectively. Finally, data source  is yet another source requiring again a different driver . Data source , for example, may be the source \u201cSCHEDULE\u201d containing the users, which are registered as users of the STAROFFICE schedule software.","From the perspective of a user interface  (), these different drivers can be accessed through a common API. This means that a user can access, through user interface , an API, which is the same for all of the different drivers  to . Thus, there is only one single API through which such an access to the different data sources can be carried out. Based on such a configuration and by further providing merging driver , a user can simultaneously access a plurality of different data sources by a single access operation.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["190","135","140","150","160","170","140","150","160","170","125","190","205","190"]},"Merging drive  distributes the access operation to each of different drivers  to  using corresponding driver APIs A to D, respectively. Each of APIs A to D is substantially identical, which means that each appears the same to merging driver . Thus, merging driver  performs a kind of demultiplexing operation for any access operation received by merging driver . Any corresponding instruction or sequence of instructions is distributed by merging driver  to the different data sources through their corresponding drivers and their common API, as required.","Specifically, each driver API i, where i goes from A to D, passes the access operation from merging driver  to the corresponding driver, e.g., API A passes the access operation to driver , that in turn performs the access operation on the data source, e.g., data source , for that driver. The driver passes any response to the access operation to the driver API that in turn passes the response back to merging driver .","Hence, merging driver  generates multiple queries for the individual data sources , , , and  by distributing the single query to the different data sources where one query is generated for each of the different data sources , , , and  requiring separate drivers. Through the generation of multiple queries and the usage of corresponding multiple drivers, each with a substantially identical API, a query result is obtained and ordered, as described more completely below.","In one embodiment, merging driver  is used in connection with an option for autocompletion, which means that after having input only a part of the desired query, the response to the partial query is automatically completed. Such an autocompletion procedure, generally, requires a lot of RAM, and therefore, for example, there may be configured one merging driver for only those data sources for which the autocompletion makes sense. Another merging driver, which works without autocompletion, may be configured for a different combination of data sources.","In case of the above-described \u201cvirtual\u201d database, which can be queried by a single query through merging driver , being an address book, the user can, based on a single query, generate serial letters or form letters although the data the user needs for generating the serial letters is distributed over multiple data sources actually requiring different drivers.","Merging driver  not only may be accessed by a user interface, but also by any application program, which is capable of accessing the API that merging driver  offers to the outside world. Such an application program may for example be a word processor, a database program, or any other application program for which it makes sense to access the \u201cvirtual database\u201d described hereinbefore. Merging driver  can be used not only for distributing a single query to multiple sources, but also for any operation (any access operation) performed on multiple sources, such as updating or editing data in the sources that can be carried out based on a single input access operation.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["125","310","125","190","320"]},"As explained more completely below, when merging driver  receives a query in operation , the user has previously configured the virtual database, e.g., data sources , , , and , associated with merging driver . Consequently, in distribute query operation , merging driver  converts the query received from user interface API  to a plurality of queries that includes a query that can be passed to each of drivers  to  using driver API . Merging driver  sends the query to each driver API and then transfers to obtain and order results operation .","The operations performed in obtain and order results operation  depend on the query that was received. As is known to those of skill in the art, some queries simply request all data that matches filter criteria, while other queries request that the data that matches the filter criteria be presented in a particular order, e.g., largest to smallest or conversely, alphabetically by string position and so on.","If only the raw results are requested in the query, operation  upon receipt of the results from drivers  to , marshals the results so that the results can be passed via user interface API  to application . Conversely, if the results must be ordered, operation  either obtains the results in an ordered fashion, or orders the results obtained, and then marshals the ordered results for passing to application . Operation  transfers processing to return result operation . Operation  outputs the results to user interface  of application .","The specific operations performed in obtain and order results operation  can be implemented in a number of different ways. In one embodiment, ordering the results is performed in combination with obtaining the result by obtaining a result from a data source only if that result matches the ordering criterion. If the ordering criterion is \u201corder alphabetically according to title\u201d, for example, a result starting with character \u201cB\u201d from one data source is not obtained as long as the other data sources offer higher-ranking results, such as results starting with character \u201cA\u201d.  is a process flow diagram for this embodiment of obtain and order results operation .","In receive result offer operation , a result is offered to merging driver  by one of data sources , , , and  through its driver , , , and , respectively. Merging driver  temporarily stores this offer, and transfers to order results check operation .","If the access operation to merging driver  did not specify that the results be ordered, check operation  transfers processing to obtain results operation  that is described below, and otherwise transfers processing to result offers complete check operation .","Result offers complete check operation  determines whether merging driver  has received a result offer from each of the data source drivers that still have data responsive to the query. If a result offer has been received from each such data source driver, check operation  transfers processing to determine highest rank operation , and otherwise transfers processing to receive result offer operation .","Processing remains in receive result offer operation  until another driver makes a result offer to merging driver  and then processing returns to result offers complete check operation . Hence, processing transfers between operations  and  until merging driver  receives a results offer from all data source drivers that still have data available that is responsive to the query.","Thus, when processing transfers to determine highest rank operation , merging driver  determines which of the drivers offers the result that is next in the ordered results. The driver offering the result that is next in the ordered results is identified as the current driver, and processing transfers to obtain results operation . Merging driver  retains the result offers from the other drivers in this embodiment.","Obtain results operation  uses the current driver to obtain the offered result from the data source. Recall that each data source requires a different driver and to obtain data from a different data source, the driver for the different data source must be used.","The result obtained in operation  may be returned as an output immediately, e.g., operation  is included within operation . However, the result also may, be buffered to return a plurality of results simultaneously. In either case, more results check operation  determines whether all of the data has been received from each of data sources , , , and . If additional data is available, processing returns to receive result offer operation  and otherwise to operation .","The sequence and number of operations presented in  is illustrative only and is not intended to limit the invention to the sequence shown. Those of skill in the art will appreciate, for example, that receive result operations  and  may be a single module that is called at appropriate times. Similarly, order results check operation  may be performed only once for each query or access operation and not in every loop as illustrated in .","In the embodiment, described above, only data sources , , , and  that were available through merging driver  were considered. However, in a more general configuration, as illustrated in , data sources , , , and  appear to user interface  as a single source  in a plurality of sources , , , and . User interface  accesses each of sources , , , and  through a driver API A to D, respectively. Each of driver APIs A to D is substantially identical.","Herein, source  is a merging source, which means that an access to source  is actually an access to a plurality of different data sources , , , and , which are dissimilar. The access to merging source  was described above. From the outside world, merging source  does not look different from any of the other sources , , and . Hence, to user application , merging source  is just another source that is available to the user.","Those skilled in the art will readily recognize that with this concept, any or all of sources , , and  may also be merging sources that are different from merging source . Therefore, through the concept of the provision of a common API for all of the different drivers, and further through the provision of a merging driver performing a demultiplex operation to distribute a query to the different sources, the grouping of different sources as a \u201cvirtual database,\u201d which looks from the outside world like a single database, becomes possible in a very easy manner. Moreover, each of the individual sources grouped together in such a \u201cvirtual database\u201d may itself consist of a grouping of different sources.","According to an embodiment of the present invention, a merging driver operates on a plurality of differently formatted data sources. Data sources , , , and , upon which merging driver  operates, may be selected or specified by a user in configuring the merging driver.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":["600","125","601","602"]},"In select sources operation , a merge sources dialogue window A is presented to the user on display screen  so that the user can select the sources that are to be merged. In this embodiment, merge sources dialogue window A, as shown in , includes an available sources window A, and a selected sources window A.","All possible sources are listed in available sources window A. In this example, the sources of  are shown. The user can select a source by highlighting the source in window A, and then activating button add . This causes the selected source to be moved from window A to window A. Similarly, the user can remove a selected source by highlighting the source in window A and activating button remove . This causes the selected source to be moved from window A to window A, i.e., a selected source is deselected. By activating button OK , the user completes select sources operation , and selects the sources listed in window A.","In , merge sources dialogue window is presented for the sources of . Note that source , which is a merged source as described above, appears as just another source that can be included within another merged source that is being created using operation .","Upon completion of operation , processing transfers to create driver operation .  illustrates a merging driver  created in one embodiment of the present invention in accordance with the user's selections for merging driver . Each merging driver includes a receiving module  for receiving queries or access instructions from a user interface (or any application program). A merging driver includes a different query module for each source selected in operation . In this example, four sources were selected so create driver operation  uses fours query modules , , , and  for sources , , , and , respectively. Each query module receives a query from receiving module  and in response to that query, queries the corresponding data source. Each query module provides the query response to ordering module . Ordering module  orders the results, which are retrieved from different data sources , , , and , and returns the ordered results to the user interface.","Merging driver , upon creation according to the user's preferences, may be stored and may be given a name chosen by the user. Hence, as illustrated in , both merging driver , and the merged source defined by merging driver  are available at any later stage for simultaneous access to the multiple sources for which merging driver  has been configured.","Those skilled in the art will readily recognize that the individual operations and elements of the invention, as explained above, can be implemented by a software tool or a computer program. In this case, the operations and elements represent corresponding computer program code portions, which cause the CPU of the computer to execute instructions, which finally represent the corresponding operations or elements of the present invention. It will be understood that the various process flow diagrams represent actions performed by the CPU of a computer in accordance with computer instructions of a software tool or a computer program.","The present invention is applicable to a hardware configuration like a personal computer or workstation as illustrated schematically in  by computer system  where all the data sources of interest as well as method  are stored on that computer system.","The invention, however, may also be applied to a client-server configuration  that also is illustrated in  where the data sources are distributed across a network . The access operations may be initiated using client device  while some or all operations of method  are carried out on a server computer A accessible by client device  over data network , such as the Internet, using a browser application or the like.","Herein, a computer program product comprises a medium configured to store or transport computer readable code for method  or in which computer readable code for method  is stored. Some examples of computer program products are CD-ROM discs, ROM cards, floppy discs, magnetic tapes, computer hard drives, servers on a network and signals transmitted over a network representing computer readable program code.","As illustrated in , this storage medium may belong to computer system  itself. However, the storage medium also may be removed from computer system . For example, method  and application  may be stored in memory A that is physically located in a location different from processor . The only requirement is that processor  is coupled to the memory containing method . This could be accomplished in a client-server system , e.g. system  is the client and system A is the server, or alternatively via a connection to another computer via modems and analog lines, or digital interfaces and a digital carrier line.","For example, memory A could be in a World Wide Web portal, while display unit  and processor  are in a personal digital assistant (PDA), or a wireless telephone, for example. Conversely, the display unit and at least one of the input devices could be in a client computer, a wireless telephone, or a PDA, while the memory and processor are part of a server computer on a wide area network, a local area network, or the Internet.","More specifically, computer system , in one embodiment, can be a portable computer, a workstation, a two-way pager, a cellular telephone, a digital wireless telephone, a personal digital assistant, a server computer, an Internet appliance, or any other device that includes the components shown and that can execute method , or at least can provide the input instructions to method  that is executed on another system. Similarly, in another embodiment, computer system  can be comprised of multiple different computers, wireless devices, cellular telephones, digital telephones, two-way pagers, or personal digital assistants, server computers, or any desired combination of these devices that are interconnected to perform method  as described herein.","Herein, a computer memory refers to a volatile memory, a non-volatile memory, or a combination of the two in any one of these devices. Similarly, a computer input unit and a display unit refer to the features providing the required functionality to input the information described herein, and to display the information described herein, respectively, in any one of the aforementioned or equivalent devices.","In view of this disclosure, method  can be implemented in a wide variety of computer system configurations. In addition, method  could be stored as different modules in memories of different devices. For example, method  could initially be stored in a server computer A, and then as necessary, a module of method  could be transferred to a client device  and executed on client device . Consequently, part of method  would be executed on the server processor A, and another part of method  would be executed on processor  of client device . In view of this disclosure, those of skill in the art can implement the invention of a wide-variety of physical hardware configurations using an operating system and computer programming language of interest to the user. For example,  shows input devices  and , but other input devices, such as speech recognition software and\/or hardware could be used to input the selections and data for method .","In yet another embodiment, method  is stored in memory A of system A. Stored method  is transferred over network  to memory  in system . In this embodiment, network interface A and I\/O interface  would include analog modems, digital modems, or a network interface card. If modems are used, network  includes a communications network, and method  is downloaded via the communications network.","Method  of the present invention may be implemented in a computer program including a comprehensive STAROFFICE office application that is available from Sun Microsystems, Inc. of Palo Alto, Calif. (STAROFFICE is a trademark of Sun Microsystems.) Such a computer program may be stored on any common data carrier like, for example, a floppy disk or a compact disc (CD), as well as on any common computer system's storage facilities like hard disks. Therefore, the present invention also relates to a data carrier for storing a computer program for carrying out the inventive method. The present invention also relates to a method for using a computer system for carrying out the presented inventive method. The present invention further relates to a computer system with a storage medium on which a computer program for carrying out the presented inventive method is stored.","While the present invention has been explained in connection with certain embodiments thereof, other embodiments will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed therein. It is intended that the specification and examples be considered as exemplary only, without limiting the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 8","FIG. 1"]},"In the drawings and the detailed description that follows, elements with the same reference numeral are the same element. Also, the first digit of a reference numeral for an element indicates the first drawing in which that element appeared."]},"DETDESC":[{},{}]}
