---
title: Parameterizing system and method
abstract: A system for intelligently parameterizing and configuring a file is provided. The system includes a parameterizing tool that facilitates identifying items to be parameterized. The parameterizing tool also facilitates creating code (e.g., XML elements and/or attributes) that stores information associated with the parameterized item. The system also includes a configuration tool that facilitates making configuration choices for the parameterized item. The system also includes a merge tool that facilitates creating a configured file based on the original file, the stored information concerning the parameterized item, and the configuration choices for the parameterized item.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06907420&OS=06907420&RS=06907420
owner: Vibren Technologies, Inc.
number: 06907420
owner_city: Boxborough
owner_country: US
publication_date: 20021114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The systems, methods, application programming interfaces (API), graphical user interfaces (GUI), data packets, carrier waves, and computer readable media described herein relate generally to computer programming and more particularly to designing, storing, and utilizing parameterized, configured files using an extensible markup language (e.g., XML).","Some computer related tasks, like software development and systems configuration, include modifying files like text files, data files, source code files, configuration files, and so on. The modifying may be done by a person and\/or process who is not the author\/creator of the file. When modifying, the modifier may not have and\/or understand information concerning the modifications that they are making. Such knowledge, if it exists at all, likely resides in the accumulated expertise of the author\/creator and\/or a designer. Thus, some modifications may produce unexpected and\/or undesired results. Unexpected and\/or undesired results are also likely when the modifier is less proficient than the author\/creator\u2014if proficient at all\u2014with the syntax, semantics, style, content, and so on of the file being modified. Even careful, complete, and systematic documentation by the author may not prevent such unexpected and\/or undesired results.","While modifying a file, a change made by a user may render portions of the remainder of the file damaged, inoperative, and\/or meaningless, thereby reducing and\/or eliminating the purpose in configuring the affected portion(s). Conversely, a change made by a user may necessitate that other, related changes be made in other portions of the file. While the author\/creator may at one point have understood these intertwinings, such relationships may become lost, or, to the end user, may never become known. Even if the relationships are well-documented, the modifier must still read, understand, and heed the directions. Thus, more unexpected and\/or undesired results are likely.","Files associated with computer related tasks are typically not static entities. For example, an author\/creator may revise their original creation (e.g., adding functionality to a device driver.) End users who wish to benefit from the revisions (e.g. bug fixes) must become aware of the update, evaluate whether it applies to them, understand what was changed, understand how it was changed, be able to effect the changes themselves, and so on. This is frequently a difficult task, if it can be performed at all. The difficulty of the task is complicated by the nature of computer files, where a change in one portion (e.g., data definition) can have ripple effects in other portions.","Conventional attempts to extract, maintain in a transferable form, undo, understand, and so on, changes made in a file include the use of \u201cdiff\u201d, \u201cdelta\u201d, and \u201cpatch\u201d utilities, for example. Diff and delta utilities facilitate locating differences between files and changes made to files. Patch utilities facilitate taking discovered changes and applying them to other files. While such utilities may simplify finding modifications, conventionally they do not simplify understanding changes, and\/or unwinding the changes.","Previous attempts to facilitate end user modification of source files without recoding the source files, or perhaps without even knowing how to recode the source file, have often left the end user with the ability to change a value in a file, but without any insights into what are acceptable values, why they are acceptable, what is recommended and so on. For example, U.S. Pat. No. 6,427,228, entitled Combining A Metadata File and Java Source Code To Dynamically Create Java Classes and JavaBeans, issued Jul. 30, 2002, concerns a technique for combining a metadata file and a Java source code to dynamically create Java classes and JavaBeans. While this increases flexibility by using placeholders for parameters in a main source code file and storing values to be substituted for the placeholders in an auxiliary file (e.g., metadata file), it does not help the author of the original file to convey information and\/or control modifications of the original file. Furthermore, it does not guide the editor of the metadata file in understanding the configuration possibilities, or the consequences of configuration choices. Furthermore, attempts like that described in the '228 patent tend to be limited to macro expansions, which reduces the ability to parameterize file contents.","Other attempts to parameterize items (e.g., objects) have focused on supplying data, parameters, and\/or values during and\/or after item construction (e.g., object instantiation). Such attempts have employed diverse property mechanisms to parameterize component objects in an attempt to provide a uniform mechanism of accessing data. However, the user is often confronted with uninformed choices which, if handled poorly, can have negative impacts on the code, item, object, etc. that they desire to configure. For example, U.S. Pat. No. 6,226,692, entitled Method And System For Constructing Software Components And Systems As Assemblies Of Independent Parts, issued May 1, 2001, concerns assembling software components and systems from independent parts. While the mechanism can be employed for parameterization and serialization of objects, as well as providing structured storage, it leaves the configuring party (e.g., end user) directionless concerning the author\/creator design decisions, documentation, guidelines, ranges, and so on.","Other attempts have been made to facilitate making quantified programmatic assertions over programs that otherwise are not annotated to receive assertions. These attempts try to facilitate describing desired behavior in a program without updating the actual program, or even without knowledge of how such an update would be made. For example, aspect oriented programming as described in Source-Code Instrumentation and Quantification of Events, Filman & Havelund, (2002), , Ron and Leavens, Gary, Eds., -2002, Twente, Netherlands., pp 45-49, describe adding event\/action pairs to code to simplify customizing the behavior of programs. But, systems that employ, for example, sets of event\/action pairs along with programs and\/or compilers to analyze and\/or process such pairs, may once again present a user with configuration choices without presenting the user with information, guidance, boundaries, recommendations, and so on, as produced by the original code author, that guide the user in making wise or appropriate choices. Thus, unreasoned configuration choices may be made, leading to unanticipated and\/or undesired results.","The following presents a simplified summary of methods, systems, computer readable media and so on for intelligently parameterizing and configuring files, and memorializing such parameterizing and configuring in XML to facilitate providing a basic understanding of these items. This summary is not an extensive overview and is not intended to identify key or critical elements of the methods, systems, computer readable media, and so on or to delineate the scope of these items. This summary provides a conceptual introduction in a simplified form as a prelude to the more detailed description that is presented later.","This application describes example systems, methods, and so on for designing, storing, and using parameterized files using XML. The method facilitates people and\/or processes other than an original file author to make, store, track, transfer, unwind, and so on, modifications to a file, where such actions are limited, assisted, guided, and so on, by the author's design. Of course, an original author may also employ the systems, methods, and so on described herein to facilitate configuring parameterized files. Thus, the systems, methods, and so on described herein facilitate a modifier (e.g., end user, internationalizing program, porting program), to modify a file in accordance with an author's designs. Such modifications can be made without the modifier necessarily having to interact with the file contents.","Example systems, methods and so on described herein concern parameterizing a file in a manner that facilitates a modifier (e.g., end user), modifying a file in accordance with an author's designs, thus mitigating problems associated with unanticipated and\/or undesired effects due to unreasoned configuration choices. In addition to parameterizing a file, the systems, methods, and so on described herein facilitate associating author design notes and constraints (e.g., commentary, advice, restrictions) with modifiable sections of a file, without altering the original file. Furthermore, the systems, methods, and so on facilitate establishing modification relationships between various portions of a file. For example, if a first change in a file mandates other changes, then such a relationship can be established in an XML file related to the original file. Similarly, if a second change obviates the need to configure another portion of a file, then this type of relationship can also be stored in an XML file related to the original file. Establishing these relationships facilitates guiding a modifier to a relevant file section for modifying.","The application describes a parameterizing tool which may be, for example, a computer component, logic, or software, that converts a computer file (e.g. text, source code, data) into an XML file and facilitates designating sections of the file as configurable parameters. The parameterizing tool also facilitates establishing limits, rules, guidelines and so on concerning acceptable values for configurable parameters. Furthermore, the parameterizing tool facilitates establishing and documenting relationships between configurable parameters. The parameterizing tool may produce, for example, a parameterized file.","The application also describes a configuration tool, which may be, for example, a computer component, software, or logic, that inputs a parameterized file and through an interface (e.g., GUI), interacts with a modifier (e.g., end user) to facilitate establishing values for configurable parameters. The configuration tool may, depending on its own configuration status, for example, guide, hide, limit, and so on, the modifier's visibility into configurable parameters and\/or file contents. The configuration tool may produce, for example, a value file in XML.","The application also describes a merge tool that may be, for example, a computer component, software, or logic, for combining a parameterized file with a value file to produce a configured file. The configured file may be, in one example, the same type as the original file (e.g., C in, C out), or it may, in another example, be a different file (e.g. C in, HTML out). The merge tool may perform validation (e.g., range checking, relationship analysis) while merging the files.","Example systems, methods and so on described herein employ extensible markup languages like XML. An extensible markup language (e.g., XML) facilitates producing self-describing data structures with varying depths and complexities. XML documents can contain optional grammar descriptions for use by applications seeking to perform structured validation of XML files. XML facilitates users defining new tags, attributes, attribute names, and so on. Furthermore, XML facilitates nesting document structures to varying levels of complexity. Thus, XML facilitates creating a parameterized file, a value file, and a configured file by facilitating designing, storing, validating, establishing, and utilizing configurable parameters. A helpful examination of XML can be found in, XML IN A NUTSHELL, A Desktop Quick Reference, Harold and Means, O'Reilly & Associates, Inc., 2001, ISBN 0-596-00058-8, which is illustrative of material with which one skilled in the art would be familiar.","Certain illustrative example methods, systems, computer readable media, and so on are described herein in connection with the following description and the annexed drawings. These examples are indicative, however, of but a few of the various ways in which the principles of the methods, systems, computer readable media, and so on may be employed and thus are intended to be inclusive of equivalents. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.","Example systems, methods, computer media, and so on are now described with reference to the drawings, where like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to facilitate thoroughly understanding the methods, systems, computer readable media, and so on. It may be evident, however, that the methods, systems, computer readable media, and so on, can be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to simplify description.","As used in this application, the term \u201ccomputer component\u201d refers to a computer-related entity, either hardware, firmware, software, a combination thereof, or software in execution. For example, a computer component can be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program and a computer. By way of illustration, both an application running on a server and the server can be computer components. One or more computer components can reside within a process and\/or thread of execution and a computer component can be localized on one computer and\/or distributed between two or more computers.","\u201cComputer communications\u201d, as used herein, refers to a communication between two or more computers and can be, for example, a network transfer, a file transfer, an applet transfer, an email, a hypertext transfer protocol (HTTP) message, a datagram, an object transfer, a binary large object (BLOB) transfer, and so on. A computer communication can occur across, for example, a wireless system (e.g., IEEE 802.11), an Ethernet system (e.g., IEEE 802.3), a token ring system (e.g., IEEE 802.5), a local area network (LAN), a wide area network (WAN), a point-to-point system, a circuit switching system, a packet switching system, and so on.","\u201cLogic\u201d, as used herein, includes but is not limited to hardware, firmware, software and\/or combinations of each to perform a function(s) or an action(s). For example, based on a desired application or needs, logic may include a software controlled microprocessor, discrete logic such as an application specific integrated circuit (ASIC), or other programmed logic device. Logic may also be fully embodied as software.","An \u201coperable connection\u201d is one in which signals and\/or actual communication flow and\/or logical communication flow may be sent and\/or received. Usually, an operable connection includes a physical interface, an electrical interface, and\/or a data interface, but it is to be noted that an operable connection may consist of differing combinations of these or other types of connections sufficient to allow operable control.","\u201cSignal\u201d, as used herein, includes but is not limited to one or more electrical or optical signals, analog or digital, one or more computer instructions, a bit or bit stream, or the like.","\u201cSoftware\u201d, as used herein, includes but is not limited to, one or more computer readable and\/or executable instructions that cause a computer or other electronic device to perform functions, actions and\/or behave in a desired manner. The instructions may be embodied in various forms like routines, algorithms, modules, methods, threads, and\/or programs. Software may also be implemented in a variety of executable and\/or loadable forms including, but not limited to, a stand-alone program, a function call (local and\/or remote), a servelet, an applet, instructions stored in a memory, part of an operating system or browser, and the like. It is to be appreciated that the computer readable and\/or executable instructions can be located in one computer component and\/or distributed between two or more communicating, co-operating, and\/or parallel processing computer components and thus can be loaded and\/or executed in serial, parallel, massively parallel, and other manners.","The example systems, methods, and so on described herein concern simplifying the task of an author and simplifying\u2014or even making possible\u2014the task of modifying the author's creation. The author has likely written a software program (e.g. a device driver) that can benefit from being parameterized. Alternatively, the author may have written another type of file (e.g., recipes, compounds, text, data) that could also benefit from being parameterized.","Being intelligently parameterized means, in the context of this application, creating a parameterized item, associating information with the parameterized item so that the value of the item can be configured by a configuring person and\/or process in accordance with design decisions, guidelines, and\/or rules to mitigate problems associated with unreasoned and\/or uninformed configuration choices. The design decisions can include, but are not limited to, a maximum value, a minimum value, a range, a recommended value, configuration relationships, revealing documentation, and so on. Configuring intelligently means that the configurer has guidance, direction, and\/or limits placed on the values they choose for a parameter, with, in some examples, commentary available to help in the configuration decision. The types of things that can be intelligently parameterized and\/or configured include, but are not limited to, variables, constants, statements, code fragments, text items, data items, and so on. Intelligent configuring also includes, in one example, the ability to unwind a configuration choice (e.g., return a parameter to its value before configuration). Intelligent configuring also includes, in another example, the ability to store a configuration choice so that it can be applied to another file or set of files. Intelligent parameterizing and configuring is facilitated by creating code in an extensible markup language (e.g., XML) that stores parameterizing information, options, and values.","Thus, intelligently parameterizing includes identifying an item (e.g. variable, constant, statement, code fragment, text item, data item) to be parameterized, creating a parameter, and associating information (e.g., name, type, identifier, max, min, range, guidelines, help text, related parameterized entities) with the item. Once the item has been parameterized, the item can be configured. Intelligently configuring the parameterized item includes, but is not limited to, presenting configuration choices, presenting configuration guidelines, counseling a configurer concerning configuration choices, performing range checking, and storing the configuration choices for the parameterized item. The storing is facilitated by creating code (e.g., XML elements and\/or attributes) that store the value information and choices.","Referring initially to , a system  for intelligently parameterizing and configuring a file is illustrated. The system  includes a parameterizing tool  that receives an original file , a basic file , and\/or a parameterized file . The parameterizing tool  can intelligently parameterize items including, but not limited to, variables, constants, statements, code sections, definitions, conditionals, text, data, and so on. The intelligently parameterized file , when implemented as an XML file, stores identifiers that identify parameterized items, XML wrapped items from the original file , parameterized items, and parameter characteristics related to the parameterized items. The parameter characteristics facilitate making informed choices concerning a parameterized item. For example, a configurer may desire to configure an integer variable with a range of ten, a maximum value of twelve and a minimum value of two. During intelligent parameterizing, the parameterizing tool  could identify the variable to be parameterized, create a universally unique identifier (uuid) for the parameter, create XML elements and\/or attributes to store the range, maximum and minimum, and help text to guide a configurer. Then, during configuration, the configurer could examine the parameter characteristics, and the rationale behind them, before making a configuration choice. Thus, problems associated with unreasoned configuration choices can be mitigated.","By way of illustration, an original file  (e.g. C program) is processed into a basic XML file  that stores header information (e.g., identifying information) and encapsulates the \u201cbody\u201d of the original file . The basic XML file  is then input to the parameterizing tool , which facilitates the author parameterizing items in the code. The author selects an item to parameterize then builds the list of characteristics of the parameters, acceptable values for the characteristics, descriptions of the characteristics, names of the characteristics, helpful text concerning the characteristics of the parameterized item and so on.","Changes that are made to the original file  can be memorialized by updating the basic XML file  and\/or creating a new XML file, (e.g., a parameterized file ). The XML files may have, for example, elements and attributes updated to reflect the changes. Also, a uuid is associated with a parameter and its creation. The uuid facilitates locating an item and also facilitates establishing relationships between items. For example, the uuid can be employed as a key for searching for items. Thus, the intelligently parameterized file  can include a parameterized item and parameter characteristics related to the parameterized item. The parameter characteristics can include, but are not limited to, a maximum value, a minimum value, a range, a type, a limit, rules for establishing acceptable values, guidelines for establishing acceptable values, recommended values, a uuid, related parameter identifiers, and conditional expression(s) that control whether and\/or how a parameterized item can be configured.","The system  also includes a configuration tool . The configuration tool  inputs the intelligently parameterized file , and selectively presents choices for configurable parameters. Whether the configurer is presented with a configurable parameter can be controlled, for example, by configuration tool  choices, parameterizing tool  choices, author choices, end user choices, evaluation of conditions in the parameterized file  code, and so on. In one example, the configuration tool  employs a GUI to present choices to a configurer.","As the values are set by the configuration tool , a value file  is created and\/or updated. The value file  stores the selected values and\/or information concerning which parameters have been updated, how they were updated (e.g., which characteristics, what values), and a uuid that facilitates tracking, for example, what changes were made by what people at what time to a parameterized item. The value file  can be, for example, an XML file. When the value file  is implemented as an XML file, it can include XML elements and\/or attributes that store the parameter values and related information.","The system  also includes a merge tool  that can input, for example, the value file , the basic file , and\/or the original file  to produce a configured file  ready for subsequent processing (e.g., compiling, interpreting, running, controlling a computer component).","While using the parameterizing tool , it can be specified when and\/or how a parameterized item will be presented to a configurer for choice making during configuration. For example, a first item may always have to be configured (e.g., adding an enabling product identification code to unlock a software license). Whether a second item has to be configured may depend on whether a certain other item has been configured. A third item may only have to be configured under certain conditions (e.g., number of devices less than X, number of users greater than Y), where the conditions may be established when other items are configured. A fourth item may only have to be configured if the configuration tool  is set to a certain level (e.g., beginner, novice, professional, expert, guru). While four situations are described above, it is to be appreciated that a greater and\/or lesser number of situations can be established by an author and\/or the parameterizing tool . Furthermore, whether a parameterized item is presented for configuration by the configuration tool  can be based on a conditional expression. The conditional expression can be associated with the item (e.g., bracket the code) to facilitate locating the conditional expression.","As mentioned above, different items can be parameterized. One type of item that can be parameterized is a variable. By way of illustration, the following line of C code declares and initializes a variable.","int k=value_of_k; \/\/ declare integer k and assign value of literal value_of_k","The above line of C code might be included in a .c file, for example. Similarly, the following line of C code might be located in a .h file.","#define value_of_k 7; \/\/ define 7 for literal value_of_k","Conventionally, a compiler would encounter the literal value_of_k in the .c file, look in the .h file, replace value_of_k with 7 and move on to other compilation tasks. Programmers might then change the operation of the .c file by updating the literal in the .h file and recompiling. In isolation, examining the line defining the literal value_of_k provides little, if any, information to an end user trying to configure a system where the configuring includes updating the value for value_of_k.","If a parameterizer wants the #define line to be parameterized, the #define line could be placed in a basic XML file . XML elements could then be created that describe how to configure the parameterized item, and that provide samples, guidelines, documentation, rules, relationships and so on associated with the parameterized item. These elements could then be stored in the intelligently parameterized file . Then, the configuration tool  can process the parameterized file  and selectively display choices to a configurer, which choices are memorialized in the XML value file  in entities and\/or attributes, for example. Ultimately, the value XML file  is merged back with other files to create a new .h and\/or .c file, which can then be further processed (e.g., compiled). The new .c and\/or .h file can be referred to as a configured file . While a .c and .h file are described above, it is to be appreciated that the systems, methods, and so on described herein are not limited to C programming language files, and that other programming languages, data representation languages, and other file types (e.g., data, text) can be processed by the example systems and methods described herein. For example, a text file could be internationalized using the systems, methods and so on described herein.","By way of further illustration, the following line of C code defines a literal in a .c file whose definition can be found in a related .h file:","code_fragment; \/\/ literal for a code fragment","The following lines of C code provide the definition for the literal","#define code_fragment",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"instruction;"]},{"entry":[{},"instruction;"]},{"entry":[{},". . ."]},{"entry":[{},"instruction;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The parameterizing tool  can be employed to select the code_fragment as an item to be parameterized. For example, a GUI can be employed to highlight and identify a section of a file. Artificial intelligence (e.g. pattern matching, neural network) can then be employed to categorize the item as, for example, code, text, data, and so on, to facilitate suggesting parameterizing characteristics. Thus, the #define line from the original .h file can be encapsulated in a basic XML file . Using the parameterizing tool , the author can describe how the item can be configured. For example, configuration choices including, but not limited to, instructions\/guidance\/commenting for configuring, order of instructions, type of instructions, range of instructions, number of instructions, result types for instructions, conditional (in)exclusion, and so on can be specified. Entities and\/or attributes in an XML file record these parameterized item characteristics. Thus, employing the configuration tool , a configurer can make reasoned value choices concerning the characteristics, which value choices are then stored in an XML value file . Ultimately, the value file  can be merged back and a configured file  is created.","The parameterizing tool  facilitates creating parameters. One aspect of creating parameters as described herein is assigning a uuid to the parameterized item. The uuid facilitates tracking and resolving changes made to an original file  and\/or by a configurer as configuration choices. The configuration tool  can guide a configurer through the process of reconciling values desired by the configurer with recommended\/required values. The reconciling is facilitated by pairing uuids assigned to the parameters.","A configurer (e.g. end user) makes choices, and the configuration tool  creates\/updates an entry in a value file . In one example, for a configuration choice for a parameterized item, the configuration tool  adds a child element to a parent element and establishes a value for the child element. Additionally, the configuration tool  associates a uuid with the child element and value. The uuid facilitates identifying facts like, when a parameterized item was configured, by whom it was configured, its previous value, and the like. While three facts are described in relation to the uuid, it is to be appreciated that a greater and\/or lesser number of facts can be associated with the uuid.","Turning now to , a parameterizing tool  is illustrated inputting an original file  and outputting a basic file . The parameterizing tool  processes the body of the original file  into the basic file  by, for example, wrapping the body of the original file  in semantic and\/or syntactical components of an extensible markup language (e.g., XML). In one example, the parameterizing tool  adds basic identifying information (e.g., author name, author identifier, file name, file location, file size, file protections, settings for parameterizing tool , settings for configuration tool) to the basic file  to facilitate later merging a value file with the original file  and\/or the basic file .","In another example, the parameterizing tool  adds information to the basic file  concerning resolving external file references which again facilitates later merging.",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"By way of illustration, an original C file:"]},{"entry":[{},"#define voi 7;"]},{"entry":[{},"main( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int i voi;"]},{"entry":[{},"int j;"]},{"entry":[{},"j = i;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"may be processed by the parameterizing tool 220 into:"]},{"entry":[{},"<header>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<header_param> . . . <\/header_param>"]},{"entry":[{},"<header_param> . . . <\/header_param>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/header>"]},{"entry":[{},"<body>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define voi 7;"]},{"entry":[{},"main( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int i voi;"]},{"entry":[{},"int j;"]},{"entry":[{},"j = i;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/body>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"While the above description illustrates one possible wrappering and translation to XML, it is to be appreciated that other wrapperings and translations can be employed in accordance with the systems, methods, and so on described herein.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 3","b":["350","310","320","330","340","360","350","350","360","350","350"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 3","b":["340","340","350","310","330","360"]},"Turning now to , a parameterizing tool  accepting a basic file  and producing an intelligently parameterized file  is illustrated. The parameterizing tool  may employ a GUI that facilitates locating and\/or selecting items to parameterize. The GUI may also facilitate visualizing parameterizing choices. Thus, one example GUI window  can display, for example, code sections in the basic file . Similarly, another example GUI window  can display, for example, a tree of parameter characteristics that can be selected for a parameter. By way of illustration, if the integer j, as declared in the line:","Int j;","displayed in window , were selected for parameterizing, then the window  could display a tree of parameter characteristic choices for an integer (e.g., name, type, range, maximum, minimum, length, precision, set of valid choices, guidelines, documentation, relationships with other parameterized items). In this way, a parameterizer (e.g., designer, programmer) can be prodded and\/or required to record information about the parameterized item, which facilitates later conifgurers making informed, reasoned configuration choices, thus mitigating unanticipated and\/or unexpected results. Additionally and\/or alternatively, the parameterizing tool  could display a menu to facilitate parameterizing choices. Thus, in one example, in a computer system having a graphical user interface with a display and a selection device, the parameterizing tool  may employ a method of providing and selecting from a set of data entries on the display. The method may include retrieving a set of data entries that represent a set of parameterization choices for a portion of a file and displaying the set of entries on the display. The method may also include receiving a data entry selection signal indicative of the selection device selecting a selected data entry and, in response to the data entry selection signal, initiating an operation associated with the selected data entry.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 5","b":["520","550","520","510"]},"#define k 7","The parameterizing tool  may employ a GUI window  to display the item, which facilitates identifying an item to parameterize. Artificial intelligence can analyze a selected item (e.g., line of code) to categorize the item and suggest possible parameter characteristic sets. Thus a parameterizer can be lead and\/or required to choose and complete a set of parameter characteristics. Similarly, the parameterizing tool  may employ a GUI window  to display parameterizing choices for the item. Thus, parameter characteristics for an integer may be displayed. While eight parameterizing choices are illustrated in window , it is to be appreciated that a greater and\/or lesser number of choices can be employed. Furthermore, a configurer may create parameter characteristics not seen in window  and\/or may choose some, none, or all of the parameter characteristics. After the processing of the parameterizing tool , the intelligently parameterized file  may hold XML code storing elements and\/or attributes related to a parameterized item. By way of illustration, the file  could hold:",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<param name=\u2018k\u2019init_val=\u20187\u2019>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<type>integer<\/type>"]},{"entry":[{},"<min>0<\/min>"]},{"entry":[{},"<max>7<\/max>"]},{"entry":[{},"<valid_choice>0<\/valid choice>"]},{"entry":[{},"<valid_choice>3<\/valid choice>"]},{"entry":[{},"<valid_choice>7<\/valid choice>"]},{"entry":[{},"<documentation>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<description>sample text abc<\/description>"]},{"entry":[{},"<help_text>more sample text abc<\/help_text>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/documentation>"]},{"entry":[{},"<related_params>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<rp name=\u2018rp1\u2019><\/rp>"]},{"entry":[{},"<rp name=\u2018rp2\u2019><\/rp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/related_params>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/param>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Concerning the related parameters listed in the parameter characteristics, the parameterizing tool  can search the basic file  and\/or other file(s) in a software project to locate references to the item being parameterized. Then, depending, for example, on setup choices, the parameterizing tool  can selectively present these found references to query for whether they should be related to the item being parameterized. Similarly, depending, for example, on setup choices, the parameterizing tool  may selectively present other parameterized(able) items to the user for a decision on whether they should be related.","Concerning the conditional expression listed in the parameter characteristics, the parameterizing tool  can define a region\/item that has a conditional associated with it. If, for example, the conditional evaluates to TRUE, a configurer will be presented with the item to configure. Conditionals can have qualifiers that specify whether an item is required, recommended, optional, to be hidden, and so on. In one example, a parameterized file ",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<conditional>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<expression=\u2018disk>3\u2019><\/expression>"]},{"entry":[{},"<code>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<line>#ifSCSI<\/line>"]},{"entry":[{},"<line>#define k 7<\/line>"]},{"entry":[{},"<line>#endif<\/line>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/code>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/conditional>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"While one example XML segment is described, it is to be appreciated that other XML translations and collections of entities and\/or attributes can be employed with the systems and methods described herein.","Turning now to , a configuration tool  is illustrated receiving an intelligently parameterized file  and producing a value file . In one example, the configuration tool  inputs parameters and\/or parameter characteristics from the file  and selectively presents configuration choices to a configurer. For example, the configuration tool  may employ a GUI to display the parameters and\/or configuration choices. Therefore, a configurer can be lead through and\/or required to complete certain configuration choices only after being presented with parameter characteristic information like valid choices, recommended choices, and\/or textual descriptions of the parameter and the effects of configuring it in a certain way. This facilitates making informed configuration choices and thus mitigating unexpected and\/or unanticipated results. In one example, in a computer system having a graphical user interface with a display and a selection device, the configuration tool  may employ a method of providing and selecting from a set of data entries on the display. The method may include retrieving a set of data entries that represent a set of configuration choices for a portion of a file (e.g., an item) and displaying the set of entries on the display. The method may also include receiving a data entry selection signal indicative of the selection device selecting a selected data entry and, in response to the data entry selection signal, initiating an operation associated with the selected data entry. Furthermore, the configuration tool  facilitates validating configuration choices and storing such validated choices in the value file .","The following two XML code samples illustrate code entries before and after configuration, where values and uuids are associated with attributes.",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Before;"},{"entry":"<parameter>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<attribute><\/attribute>"]},{"entry":[{},"<attribute><\/attribute>"]},{"entry":[{},". . .\u2003\u2003\u2003. . ."]},{"entry":[{},"<attribute><\/attribute>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/parameter>"},{"entry":"After:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<parameter>"]},{"entry":[{},"<attribute>value uuid<\/attribute>"]},{"entry":[{},"<attribute>value uuid<\/attribute>"]},{"entry":[{},". . .\u2003\u2003\u2003. . ."]},{"entry":[{},"<attribute>value uuid<\/attribute>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/parameter>"},{"entry":"One skilled in the art can readily envision how an XML entry like:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<parameter>"]},{"entry":[{},"<attribute>value uuid<\/attribute>"]},{"entry":[{},"<attribute>value uuid<\/attribute>"]},{"entry":[{},". . .\u2003\u2003\u2003. . ."]},{"entry":[{},"<attribute>value uuid<\/attribute>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/parameter>"},{"entry":"could be mapped to a code section like"},{"entry":"object parameter"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int attribute= value;"]},{"entry":[{},"float attribute= value;"]},{"entry":[{},". . ."]},{"entry":[{},"char attribute= value;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"with uuids being employed as an index into a database table that tracks changes associated with parameterized items. Thus, rather than employ conventional techniques like diff and patch utilities, parameterized item configurations, changes, and so on can be tracked using the uuid and various data processing techniques (e.g., database retrieval, file processing, list processing, stack processing).","In view of the exemplary systems shown and described herein, example methodologies that are implemented will be better appreciated with reference to the flow diagrams of . While for purposes of simplicity of explanation, the illustrated methodologies are shown and described as a series of blocks, it is to be appreciated that the methodologies are not limited by the order of the blocks, as some blocks can occur in different orders and\/or concurrently with other blocks from that shown and described. Moreover, less than all the illustrated blocks may be required to implement an example methodology. Furthermore, additional and\/or alternative methodologies can employ additional, not illustrated blocks. In one example, methodologies are implemented as computer executable instructions and\/or operations, stored on computer readable media including, but not limited to an application specific integrated circuit (ASIC), a compact disc (CD), a digital versatile disk (DVD), a random access memory (RAM), a read only memory (ROM), a programmable read only memory (PROM), an electronically erasable programmable read only memory (EEPROM), a disk, a carrier wave, and a memory stick.","In the flow diagrams, rectangular blocks denote \u201cprocessing blocks\u201d that may be implemented, for example, in software. Similarly, the diamond shaped blocks denote \u201cdecision blocks\u201d or \u201cflow control blocks\u201d that may also be implemented, for example, in software. Alternatively, and\/or additionally, the processing and decision blocks can be implemented in functionally equivalent circuits like a digital signal processor (DSP), an ASIC, and the like.","A flow diagram does not depict syntax for any particular programming language, methodology, or style (e.g., procedural, object-oriented). Rather, a flow diagram illustrates functional information one skilled in the art may employ to program software, design circuits, and so on. It is to be appreciated that in some examples, program elements like temporary variables, routine loops, and so on are not shown.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 7","b":["700","700","710"]},"At , an original, non-parameterized file is received. The file may include, for example, one or more items that are candidates to be parameterized. The file may be, for example, a text file, a data file, a code file, and the like. At , the contents of the original file can be wrapped in components of an extensible markup language (e.g., XML) to produce a basic file. The basic file can include, for example, XML elements and attributes that facilitate identifying the original file and which may also facilitate navigating inside the basic file. The basic file may also include XML elements and\/or attributes for storing regions\/items from the original file.","At , an intelligently parameterized file is produced. This can include identifying items in the basic file to parameterize, creating a parameter for an identified item and storing the parameter in the intelligently parameterized file. Rather than simply storing a placeholder for a parameter, as is conventional, the method includes creating parameter characteristics, associating them with the parameter, and storing them in the intelligently parameterized file. For example, if the parameter is stored as an element in an XML file, then the parameter characteristics could be associated with the parameter by storing them as sub elements, separate related elements, and\/or as attributes associated with the parameter element. The association may be made, for example, by uuids.","At , parameters and\/or parameter characteristics, including reasoning guidelines for configuring choices can be selectively displayed to a configurer. Thus, values for parameters can be established and stored, at , in a value file.","In one example, creating a parameter associated with an item to be parameterized includes establishing a name for a parameter, selecting parameter characteristics for the parameter, and selecting configuration options (e.g., do always, do selectively, do conditionally). Creating a parameter can also include, for example, updating XML code in an intelligently parameterized file to store the name, characteristics, options, and so on. In one example, the name, characteristics, options and so on are stored in XML elements and\/or attributes.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 8","b":["800","810","820","830","830"]},"At , the files are merged, which includes replacing parameterized items with their configured values to produce an intelligently configured file. Thus, rather than a conventional configuration where values are applied to placeholders or macros are expanded without consideration of intelligent parameterization, here, reasoned choices with guidelines, documentation, validation and unique identifiers can occur.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 9","b":["900","902","904","906","910","912","908","900","900","902","904","906","906","904","914","916","906","904","900"]},"The bus  can be a single internal bus interconnect architecture and\/or other bus architectures. The bus  can be of a variety of types including, but not limited to, a memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus. The local bus can be of varieties including, but not limited to, an industrial standard architecture (ISA) bus, a microchannel architecture (MSA) bus, an extended ISA (EISA) bus, a peripheral component interconnect (PCI) bus, a universal serial (USB) bus, and a small computer systems interface (SCSI) bus.","The computer  interacts with input\/output devices  via input\/output ports . Input\/output devices  can include, but are not limited to, a keyboard, a microphone, a pointing and selection device, cameras, video cards, displays, and the like. The input\/output ports  can include but are not limited to, serial ports, parallel ports, and USB ports.","The computer  can operate in a network environment and thus is connected to a network  by a network interface . Through the network , the computer  may be logically connected to a remote computer . The network  can include, but is not limited to, local area networks (LAN), wide area networks (WAN), and other networks. The network interface  can connect to local area network technologies including, but not limited to, fiber distributed data interface (FDDI), copper distributed data interface (CDDI), ethernet\/IEEE 802.3, token ring\/IEEE 802.5, and the like. Similarly, the network interface  can connect to wide area network technologies including, but not limited to, point to point\/links, and circuit switching networks like integrated services digital networks (ISDN), packet switching networks, and digital subscriber lines (DSL).","Referring now to , information can be transmitted between various computer components associated with intelligently parameterizing and configuring a file as described herein via a data packet . An exemplary data packet  is shown. The data packet  includes a header field  that includes information such as the length and type of packet. A source identifier  follows the header field  and includes, for example, an address of the computer component from which the packet  originated. Following the source identifier , the packet  includes a destination identifier  that holds, for example, an address of the computer component to which the packet  is ultimately destined. Source and destination identifiers can be, for example, globally unique identifiers (guids), uniform resource locators (URLs), path names, and the like. The data field  in the packet  includes various information intended for the receiving computer component. The data packet  ends with an error detecting and\/or correcting  field whereby a computer component can determine if it has properly received the packet . While six fields in one particular order are illustrated in the data packet , it is to be appreciated that a greater and\/or lesser number of fields arranged in varying orders can be present in data packets.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 11","b":["1100","1050","10","1100","1100","1110","1100","1120","1100","1130","1120","1100","1140","1150","1140","1100"]},"Referring now to , an API  is illustrated providing access to a system  for intelligently parameterizing files and configuring the parameterized items in a parameterized file. The API  can be employed, for example, by programmers  and\/or processes  to gain access to processing performed by the system . For example, a programmer  can write a program to access a parameterizing and configuring tool  (e.g., to invoke its operation, to monitor its operation, to access its functionality) where writing a program is facilitated by the presence of the API . Thus, rather than the programmer  having to understand the internals of the parameterizing and configuring tool , the programmer's task is simplified by merely having to learn the interface to the parameterizing and configuring tool . This facilitates encapsulating the functionality of the parameterizing and configuring tool  while exposing that functionality.","Similarly, the API  can be employed to provide data values to the system  and\/or retrieve data values from the system . For example, a process  that retrieves parameterizing information can provide parameterizing information to the parameterizing and configuring tool  and\/or a programmer  via the API  by, for example, using a call provided in the API . Thus, in one example of the API , a set of application program interfaces can be stored on a computer-readable medium. The interfaces can be executed by a computer component to gain access to a parameterizing and configuring tool . The interfaces can include, but are not limited to, a first interface  that receives parameterizing information associated with parameterizing an item, a second interface  that receives configuration information associated with configuring a parameterized item, and a third interface  that receives merge information associated with applying configuration information to a parameterized item.","The systems, methods, and objects described herein may be stored, for example, on a computer readable media. Media can include, but are not limited to, an ASIC, a CD, a DVD, a RAM, a ROM, a PROM, a disk, a carrier wave, a memory stick, and the like. Thus, an example computer readable medium can store computer executable instructions for method for intelligently parameterizing and configuring a file. The method can include receiving an original, non-parameterized file, wrapping a portion of the original, non-parameterized file in XML to produce a basic file, and identifying portions of the basic file to be parameterized. The method can also include creating a parameter associated with the identified portion and storing the parameter in the intelligently parameterized file. Once the parameter has been identified, created, and\/or stored, the method can also include adding the intelligence to the parameter, which includes creating parameter characteristics associated with the parameter and storing the parameter characteristics in the intelligently parameterized file. With the intelligently parameterized file created, intelligent configuration can occur, which can include, establishing values for the parameters in the intelligently parameterized file to produce a value file, and merging the non-parameterized file, the basic file, the intelligently parameterized file, and\/or the value file to produce an intelligently configured file.","Similarly, a computer readable medium can store computer executable components of a system for intelligently parameterizing and configuring a file. The system can include a parameterizing tool that accepts an original file and\/or a previously parameterized file, and produces an intelligently parameterized file. The system can also include a configuration tool that accepts an intelligently parameterized file, and\/or a previously processed value file, and produces a value file. The system can also include a merge tool that accepts an intelligently parameterized file, a value file, and\/or an original file, and produces an intelligently configured file by merging configuration choices back into parameterized items.","What has been described above includes several examples. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems, methods, computer readable media and so on employed in intelligently parameterizing and configuring a file. However, one of ordinary skill in the art may recognize that further combinations and permutations are possible. Accordingly, this application is intended to embrace alterations, modifications, and variations that fall within the scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is employed in the detailed description or the claims, it is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as that term is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
