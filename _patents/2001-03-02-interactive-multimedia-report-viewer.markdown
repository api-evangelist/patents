---
title: Interactive multimedia report viewer
abstract: A method and system for controlling plural software components to communicate and share a single virtual or real monitor or display. By (1) sending messages to applications aware of data control messages and (2) killing and restarting non-aware applications, a consistent set of information (e.g., images and textual data) can be presented within a single user interface, even if the components used are not originally written with the intention of working together.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06889363&OS=06889363&RS=06889363
owner: The Arizona Board of Regents on behalf of the University of Arizona
number: 06889363
owner_city: Tucson
owner_country: US
publication_date: 20010302
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Field of the Invention","The present invention is directed to a method and system for coordinating multiple software components to communicate and share a portion of a computer monitor or display.","2. Discussion of the Background","Numerous program display control systems have been used to coordinate the display of some number of programs on a single (virtual or real) display\/monitor. In the X Windows environment, such a control system is called a windows manager. Examples of known windows managers include: FVWM, FVWM95, TWM\/VTWM, MWM, CTWM, OLWM\/OLVWM, wm2\/wmx, AfterStep, AmiWM, Enlightenment, WindowMaker, SCWM, IceWM, Sawfish, and Blackbox. Using configuration files for the applications run under the X Windows window managers, certain windowing parameters (e.g., windows locations and colors) can be set at application start-up time.","In X Windows, libraries of various re-usable components have been built to standardize the look and feel of various components within a graphical user interface. Such libraries include OpenLook and Motif and implement \u201cwidgets\u201d having a variety of functions (e.g., buttons and menus).","A consortium of participants in the health care industry have combined to form the Clinical Context Object Workgroup (CCOW), which, according to its 1998 White Paper, \u201cpublishes standards for the visual integration of cooperative interaction among independently authored healthcare applications at the point of use.\u201d As further stated therein \u201cVersion 1 of the standard [ratified in April 1999], the Patient Link, supports synchronizing the applications for a selected patient. When the user of an application changes the selected patient, the other applications on the workstation follow the change. The cooperation frees the user from the tedium of repeating the action in more than one application.\u201d Subsequently versions 1.1 and 1.2 were ratified in January and May, 2000, respectively.","The present invention is directed to a method and system for displaying synchronized data across plural independently developed components. In one embodiment of the present invention, the access to the data is read-only; however, in an alternate embodiment, at least a portion of the data is writeable by one of the components.","This and other objects of the present invention are addressed by providing a series of components that can be instantiated with a series of run-time display parameters. In one embodiment thereof, at least one component can either (1) signal other components of a change in data of common interest or (2) kill the other components and restart them with new run-time parameters such that the display areas of the components form a single consistent display.","Referring now to the drawings, wherein like reference numerals designate identical or corresponding parts throughout the several views,  is a schematic illustration of a network of computers , , and that share a common information storage system  that is accessed via information integration tools and\/or application programming interfaces (APIs) . Domain-specific user interfaces (DSUIs) can be developed using the APIs . The exemplary DSUIs of computers , , and are (a) an orthopedics display, (b) an intensive care unit (ICU) display, and (c) an internal medicine display, respectively. Other DSUIs are also possible, in both the medical domain as well as other domains, where the displays of multiple components need to be kept in synchronization, either (1) in their independent windows or (2) within the bounds of a single integrated window.","In complex systems, such as patient information systems acting as DSUIs, data is generated by many sources and stored within the information storage system  in a variety of formats. For example, radiological data may be stored in a first database as images and other patient information (e.g., EKG traces or pathological results) information may stored in a second database as at least one of images and text. Demographic information may be stored in the same or a different database and is associated with the other patient information. In addition, read and write access to the data of the information storage system  is preferable for at least one component. Data preferably is also communicated in a variety of formats (e.g., DICOM, HL7), wherein representations facilitating use by the components directly are the most preferable. The eXtensible Markup Language (XML) provides a simple and robust extendible standard for data representation and exchange. Since XML file are distributed with their own descriptions, XML creates an integrated information object. Thus, XML is (1) structured, (2) extensible and (3) provides validation. XML provides a structure to store and identify information (e.g., patient information in a medical context or suspect\/criminal information in a criminal context). The information is structured hierarchically much like objects within the software design. The XML structure can be extended as new information becomes available. XML provides mechanisms to ensure data validity and can be searched directly using query language tools such as XMLSQL.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1B"},"A user's login information can be validated in any manner (e.g., NT authentication or CORBA Security Services). Generally, though, an Authentication Agent acts as a gatekeeper between users and data. In one embodiment, the authentication process allows a user to access user preferences for those features of a DSUI that are customizable. More importantly, though, once authenticated, the user is given the type and scope of access that corresponds to the access rights authorized by the system. Some users may have read-only access, while others have read and write access. Moreover, not all users will be able to see all the data of a system. For example, while hospital administrators may be able to see billing information about a patient's visit, the actual radiographic or diagnostic information is not available. Thus, in one embodiment, the Authentication Agent acts as a continuous middleman during the process of selecting patient records.","Such selection can be through a number of mechanisms (e.g., by number, by location). In a medical environment, the Authentication Agent sends the patient record selection information to an Integration Agent. This selection information will be used to build patient information for display and return to the user. However, since a user may have customized part of a display interface, a Display Agent also accesses that customization information to properly format the results to be displayed. As discussed in greater detail below, users of a standard interface may rearrange that interface in order to suit the user's preference. One such rearrangement includes the internationalization of the interface to accommodate languages read right-to-left instead of left-to-right.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1C"},"The Display Agent accesses a local store of Layout structures (e.g., in an XML-format). These structures are developed by the layout editor (see ) and stored in a portion of the database that corresponds to display constraints.","Finally, the data and layout are combined (i.e., rendered) by the Rendering component. This process combines the retrieved Patient information with the layout information. The Rendering component may also utilize context information about the information to be displayed (e.g., a patient's records) before forwarding the complete report to the user.","According to a preferred embodiment, the single integrated window is used as a component-based application within a web-based architecture. Generally, the component architecture allows system developers to create reusable, portable software components that are designed for a specific purpose. Preferably, those components are small, easy to understand and maintain, and fulfill a narrow function within a larger application. By encapsulating functionality in software components, the applications developer can then have a library of common components that can be used to build up applications rapidly. By keeping the functionality of components narrow, individual components may be used (or reused) by many applications. The resulting componentware can be developed more rapidly and can accommodate portability.","To facilitate reuse, a series of standard interfaces and component technologies are preferably used. There are many technologies available that abstract the details of the system implementation away from the development of software. Using the web paradigm, systems communicate regardless of the platform O\/S (e.g., Windows 9X, Mac, UNIX, Windows NT). The web server hides the details of the implementation from the client. Servers can utilize technologies such as Common Gateway Interface (CGI) and Active Server Pages (ASP) to represent results in HTML format. However, HTML lacks the richness and self-descriptive properties of XML. In addition, server-side components (e.g., CGI scripts and programs) are often machine-dependent. Thus, although CGI helps to move towards platform independence, it has portability disadvantages. The use of Java virtual machines and bytecodes increases portability for component-based software systems in an environment of multiple operating systems and diverse development languages. In addition to using lower-level components as building blocks of systems, higher level components (or complete applications) manage the presentation and integration of the lower-level components.","Cross platform portability is enhanced by a variety of complementary technologies which include Java, Enterprise Java Beans (EJB) and CORBA. Moreover, other object models (e.g., DCOM) can also be used, as long as the operation of the components is separated from the function of the context framework. The relationship of some of those technologies is illustrated in FIG. . CORBA provides mechanisms to distribute components among disparate systems. In addition it provides services (e.g., security, naming, transaction processing) to further insulate applications from the details of components' implementation. EJB goes one step further than CORBA by providing a container that acts as a Web Operating System. The container maintains the details of an implementation, providing an additional layer of abstraction for applications.","By using the component technologies described above, it is possible to create various DSUIs that act as applets. (Non-applet based technologies are also possible, as described in greater detail below with reference to .) One such DSUI is the pulmonologist interface illustrated in FIG. . That DSUI provides a variety of display controls, including six tabs , six panels , and an information status bar . Each of the six tabs  corresponds to a page selection (much like selecting tabbed index cards from a box). Each of the six panels  is kept in synchronization with the information contained in the status bar , and vice versa. Thus, if the user of the pulmonologist interface changes to a different user using one display control (e.g., by selecting a new visit from a visit list (e.g., implemented as any one of a textual list, a drop-down box, a scrolling list and a set of radio buttons)), all the remaining display controls are controlled to change accordingly (e.g., using messaging as described below).",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["100","102","104","106","108","100","122","124","110","120","100","114","119","112","100","118","119","119"]},"As stated above, the system includes at least one computer readable medium. Examples of computer readable media are compact discs , hard disks , floppy disks, tape, magneto-optical disks, PROMs (EPROM, EEPROM, Flash EPROM), DRAM, SRAM, SDRAM, etc. Stored on any one or on a combination of computer readable media, the present invention includes software for controlling both the hardware of the computer  and for enabling the computer  to interact with a human user. Such software may include, but is not limited to, device drivers, operating systems and user applications, such as development tools. Such computer readable media further includes the computer program product of the present invention for providing coordinated control of display controls or components. As described herein, the computer code devices of the present invention can be any interpreted or executable code mechanism, including but not limited to scripts (including CGI scripts), interpreters, dynamic link libraries, Java classes, Java beans, Active X controls, CCOW-compliant controls and complete executable programs. Moreover, the computer code devices can be downloaded dynamically from a computer network adapter acting as an equivalent to a computer readable medium. In addition, the number of components that are implemented by a single computer code device, or the number of computer code devices that are required to make up a single component can vary from component-to-component.","By providing a hierarchical set of components, components can be divided by functionality. An exemplary division of labor includes (1) components to access and store information in existing hospital systems, (2) components to configure information using XML meta-structures, and (3) components to handle data presentations (e.g., graphing components, image components for displaying images in a variety of formats (e.g., TIFF, GIF, JPEG, bitmap)).","Such a set of components also allows security to be addressed separately. At least two general approaches are possible for Security. First, the security features implemented within components themselves can be used. Basically, this means that security is not an issue of the overall system, but rather of the components utilized by the system. As the security capabilities of components evolve, the system automatically incorporate these components.","The second approach utilizes a \u201csecurity component\u201d or uses one of the horizontal services provided by CORBA. Such a component can take responsibility for validating user access and can mediate communications by components to ensure that security policies are enforced. This approach provides a greater level of security but requires increased cooperation from other components. Use of such a security component as well as CORBA services thus needs to be standardized, thereby reducing the ability to utilize 3rd party components.","A hierarchical component organization also localizes specialized access and display programming. When no access standard is in place, access to the proprietary information can be isolated in a manageable location. XML provides mechanisms (e.g., CSS, XSLT, XSL) to render information for display. Those mechanisms allow the same information to be associated with different display characteristics depending on the user and the task. For example, a patient's age may place him\/her in a low risk group for one characteristic or disease but in a high risk group for another characteristic or disease.","By accessing data via named Element Tags in an XML-based Document Object Model, components can be configured with an additional level of indirection. The name of the tag (i.e., the programming variable) that contains the information needed is known in advance. This allows the implementation of a generalized wrapper component that can be used to allow existing software (e.g., an Algotec MediSurf Viewer) to be integrated with the Patient Context Component. For example, if it is necessary to invoke MediSurf with the StudyInstanceUID such as:\n\n","an external specification (within the layoutXML) is created to send the contents of the StudyInstanceUID to the named application. Using the same method, other software can be wrapped as long as the parameters to the software are included in a Patient description language (e.g., an XML-based DTD). Because of this additional level of indirection the software can send any instance of a tagged parameter to the software component. A component can be programmed to send the most recent, the most recent previous or any other instance of the tagged element to the external component.","Components within the system of the present invention are assumed to be \u201cwellbehaved.\u201d Accordingly, such components are assumed to enforce data integrity (e.g., concurrency control), utilize authentication (e.g., user-level authentication for patient and exam information), and co-operate with dissimilar component types (CORBA, EJB and DCOM). For components that are not considered to be well behaved or are found to not enforce assumptions of the system, those components are isolated from the other components to prevent data corruption, etc.","Returning to , domain-specific information (e.g., patient information), layout information and context information are combined to form an exemplary DSUI. An exemplary structure for patient description language is illustrated in . (By using XML and DOM to hold the patient information, named tags can be associated with components).","Using the DSUI of , the tabs  represent six different information views: (1) Pulmonologist: a view that provides summary information, (2) Drugs: a listing of the patient's medications, (3) Bronchoscopy: views of visible light images of the bronchus, (4) CR: views of CR images, (5) CT: views of CT images, and (6) ECG: views of scanned ECG images. Preferably, each of those tabs is at least partially configurable (e.g., configuring the name tab, the order of the views, and the contents of the view).","The context of a DSUI provides a consistent view of the information among all of the tabbed pages as the end-user interacts with the information. In a medical environment, a context may include variables such as \u2018ActiveVisit\u2019, \u2018Active CRStudy\u2019, \u2018Active Series\u2019, etc. A component can be configured to track (or remain consistent with) a Context Variable. Utilizing the example of , information related to a visit on Jan. 11, 1999 is displayed. The first view in the layout, the Pulmonologist view, includes the visit list component, the visit summary component, the study list component and two image display components. Each of those components displays information related to the Jan. 11, 1999 visit. In addition, there is a demographic component that displays information in a status bar that is related to the patient. That component contains information that does not change with the visit. Additional views (not shown), for example the CR view, may also contain information relevant to the Jan. 11, 1999 visit.","When a user subsequently selects the Oct. 3, 1999 visit from the visit list component of the Pulmonologist view, that view changes so that the components that relate to the visit also change (e.g., the visit summary component provides information about the Oct. 3, 1999 visit, the study list component displays a list of studies for the Oct. 3, 1999 visit, the images change to coincide with the study being displayed, and other views that relate to the active visit change). Additionally, views on other pages may be updated as well. For example, the CR view (4th tab) remains consistent with the Pulmonologist view (first tab) which contains information relevant to the Oct. 3, 1999 visit after the change. However, as noted above, some display elements do not change information (e.g., demographic information may not change (and should not change in the illustrated example) between visits for the same person).","The functionality of creating an active component that follows a Context Variable is configurable. A component can be configured to track a Context Variable or to remain set to a static view. For example, the CR Study viewer above tracks the active visit. The same component can be configured to display only the most recent CR Study. Therefore, when the user changes the active visit, the most recent CR study will always be displayed.","Preferably, the structure of the Context Variables is also stored in a hierarchical structure (e.g., a structure similar to the Patient description language). The Context Structure contains a variable for each branch in the patient-tree structure. By doing this, the active portion of the patient information can be tracked.","As shown in an exemplary entity-relationship diagram of , a component includes three types of information stored in the form of properties: View, Status and Implementation properties. Generally, this component model is applicable to either (1) an implementation that stores data independently from the components (as described above) or (2) an implementation that stores data with the components (e.g., by storing the configuration of a Java Bean within the Bean itself).","View properties suggest how the component should be displayed, but a layoutController, a driving component in the Patient Context component, controls how the component will look in its final presentation. As illustrated in , exemplary properties include: (1) the minimum height and width, MinHeight and MinWidth, respectively, in which the component should be displayed and (2) the optimal background color, BGColor.","Similarly, the StatusProperties of components describe how the component should behave in the context of the application. Exemplary properties refer to initial setting specifying how the component will be invoked. The status variables are variables that correspond to element tags (e.g., visit in ) of the Patient description language. Numeric value may include pre-defined meanings (e.g., 0=most recent, 1=most recent previous, 2=second most recent previous, etc.). Other status properties describe how the component behaves as the user works. That behavior includes changing the state of the overall system, e.g., by selecting a new active visit from a VisitList Component.","The Active property is a boolean expression that describes if the component should change with the active status or if it should remain at its initial settings throughout the duration of the session. A \u201cYes\u201d status indicates that the component should change to follow the settings of other components. A \u201cNo\u201d status indicates that the component should remain at its initial settings.","The TagToFollow property indicates the lowest level tag in the status hierarchy that should be used to modify the component's state. For example, the CRImageViewer tracks the status tag CRStudy. Whenever the user selects a different CRStudy (i.e., the status of CRStudy changes) the CRImageViewer will change to track the value of CRStudy.","The Implementation property describes the actual implementation of the component. It allows the system to create a wrapper to invoke the actual run-time component with the proper parameters. The BuilderClass property describes the type of the component. As described above, numerous types (e.g., JavaClasses) of implementation technologies can be used according to the present invention. The Path property describes the location of the software to be executed. The Parameter property provides any additional start-up parameters that are not specified in StatusProperties.InitialSettings variables (e.g., user identification and passwords).","Although other structures or formats could be used to describe the properties described above with reference to , in the preferred embodiment, the properties are described using an XML-based grammar. In , the view properties and status properties of  are specified with exemplary values for a Study List Component that displays information about CR and Derm Studies. The minimum height and width of the components are specified as 180 and 320 pixels, respectively. The background color is specified as black. Visit and study both utilize the most recent values (i.e., the most recent visit and study, respectively). Also, the component is active so that it tracks changes in other components by following the visit variable.","The highest level of the description language contains identifying information about the patient. It allows demographics and visit information to be expandable therefrom. The patient description language is essentially taken from the DICOM view of the \u2018real world\u2019. It connects patient information with visits. Visits are used to group care episodes into meaningful chunks, especially in a hospital setting. In an outpatient or clinic setting a more useful grouping might be Diagnostic Code or some other piece of information that groups patient information into episodes of care. For example, it would group information related to a broken leg together and logically separate that information from information about a heart condition.","This information could also be stored in the format of another standard\u2014like the HL7 RIM model. However, this information does not need to be structured in the same format as it is structured in the database as long as its structure supports the task.","Context Variables within the application are maintained for points where the patient structure tree branches. If a branch of the tree is maintained for each type of study (e.g., CRStudy, DermStudy, CTStudy), context information can be maintained for these variables since it is known which study is active at any given time. Visit variables contain information about visits (e.g., what group studies a visit corresponds to and what medications were utilized or prescribed).","CRStudy contains only CR Modality information. It contains some general information about the study and one or more Series elements. The actual images are contained at the Series level.","The format of the ECGStudy element parallels that of the CRStudy. Again, the highest level contains general information about the study, and there are one or more Series elements. The images are contained at the Series level.","In order to further facilitate re-use, in one embodiment, components that are modality specific are separated from those which are modality independent. Modality specific components will generally be those which control physical hardware processes unique to a given modality. At the \u201cbottom\u201d interface these components will control transducers or digital I\/O interfaces that are necessary for controlling the generation of radiation, mechanical operation or other hardware activities. At the \u201ctop\u201d these components should be designed to provide a common interface to the next layer of abstraction that is independent of any modality. Modality independent software may include DICOM communications and formatting software components, file management components, systems management and maintenance tools, DICOM modality worklist components, DICOM MPPS components, etc (see FIG. ).","Such an implementation allows for more general purpose definition of DSUIs through \u201clayouts\u201d for user-interfaces for modalities that are customized to individual needs (e.g., hospital sites or individual medical professionals (e.g., doctors, nurses and medical administrators)). The design, creation and modification of custom layouts may be accomplished by end-users working with a layout editor tool. New layouts, or management\/maintenance layout may further be downloaded using standard web communications protocols. Maintenance layouts may access specialized components that are not accessible to end-users layouts.","A single page of a layout is described by a hierarchical structure that contains a recursive nesting of panels. This enables a layout to become a sub-layout transparently to the layout, simply by referencing the layout in a \u201chigher level\u201d layout. At each level the panel has display properties to help control and reference the layout. Exemplary properties are illustrated in FIG. B.","The Title property is an optional property that may be used to associate a name to be displayed as part of a particular layout. The Model property is utilized for determining whether the area assigned to the component will be sub-divided. Exemplary types of Model parameters include:\n\n","However, as would be appreciated, additional divisions are possible and encompassed within the scope of the invention.","The Location property can include Directional coordinates such as North, South, East, and West. These indicate which panels are being referenced within the properties.","As shown in , various panels (which may incorporate sub-panels) can be specified for various functions. The Full model may be used for image display. The Horizontal Half model may be used to display two comparison images. The Vertical Third model may be used to display a study list and two images.","If, however, four images were to be displayed on the screen as shown in , no one component, of the components described above, can be used to provide that functionality directly. Accordingly, the components are used hierarchically to simulate the desired behavior. For example, a Horizontal Half Model where each of the panels contained a Vertical Half Model produces the desired result. An exemplary XML-based description for achieving the four panel display of  is illustrated in FIG. A. Such a layout can then be stored in a library of layouts for re-use later.","Rather than create all new layouts by hand, it is preferable to utilize a layout editor, such as is shown in FIG. . The Layout Editor uses component information (e.g., stored in a local data source). Preferably, the component information describing the layout is stored in an XML structure as described above. Since panels can include panels as components, the layouts can be created rather quickly. An exemplary grammar for describing layouts (either generated by hand or through the layout editor) is illustrated in FIG. . Such a grammar describes the elements of a layout and in what order the elements are to appear (including any repetitions or optional elements).","Although the above-description has focused on an implementation using applets as illustrated in , other implementation technology not based on applets is also possible, and indeed is preferable. One drawback in utilizing applets is that applets cannot share their display screens with other software modules (e.g., ActiveX Controls, other Applets). This restriction runs counter to allowing the integration of third-party software into a single display environment.","A first alternate implementation technique, not based on applets, includes a native windows application. The basic structure of the software would remain the same but the container would be changed from an applet to an application. A second alternate implementation technique, not based on applets, includes a thin client, as shown in FIG. . It is this alternate implementation technique that is described in greater detail below. Such a technique may utilize servlets, DHTML, CSS and COM.","Both such implementations may be extended to allow applications, including third-party software, to share a common context (e.g., information about an active patient or visit) that can change. Applications written to expressly handle such sharing messages are referred to hereinafter as \u201ccontext-aware\u201d applications. Integrated sharing, however, is hindered by applications that were not written to expect events or communications from sources other than input devices (e.g., the keyboard and mouse). Such applications are referred to hereinafter as \u201ccontext-unaware\u201d applications. For such context-unaware applications, sharing can be achieved by utilizing a context or display manager (CDM) that terminates the context-unaware applications and restarts them with the appropriate parameters. One messaging standard that can be used for context-aware applications is CCOW, as discussed above, and tools (e.g., from Sentillion) facilitate creation of such CCOW-based applications. The Sentillion development package contains:\n\n","Returning to ,  illustrates a conceptual model using a thin client architecture that distributes services between a client (e.g., using a browser as a client interface) and at least one server. In a first embodiment, a series of HTML pages are used, including a first set of pages that interact with a server (e.g., using a Login Servlet) to validate the user and determine the patient. The second set of pages includes plural frames (e.g., 3 frames). An exemplary page generated according to the present invention was discussed above with reference to FIG. . Each of the frames interacts with the server (using servlets). In such an environment, context information is kept within the client and is based on a messaging protocol (e.g., CCOW). The client context is maintained within a context server on the client, and the components interact directly with the client context.","Preferably, the thin-client is constructed in a two-phase initialization process. The first phase of the initialization builds a layout (e.g., using an HTML page) of the components to be used in the DSUI, and in the second phase, the client activates the components thereof. During operation, a user can interact with each of the control component (e.g., by selecting tabs from the tab bar of FIG. ). This changes the page of information that is being displayed. The user can also interact directly with components. These components communicate directly with the context manager or context object.",{"@attributes":{"id":"p-0082","num":"0089"},"figref":"FIG. 14"},"In the exemplary embodiment of , three frames (i.e., a selector panel frame, a component panel frame, and a demo panel frame) are used as page layout controls. The SelectorPanel Frame includes a reference to the SelectorPanel Servlet with a display layout parameter. The SelectorPanel Servlet sends back a control layout (labeled SelectorPanelHTML) that produces the tab bar at the top of the interface. Preferably the tab bar is implemented in DHTML so all visual changes to the tab bar take place on the client (e.g., the tabs changing color when the cursor moves over them).","The component panel frame includes a reference to the ComponentPanel Servlet. The client interface activates the ComponentPanel Servlet reference with the ActivePatient and display layout information. The ComponentPanel further subdivides its display area to correspond with a specified layout (e.g., divided in vertical or horizontal halves, or vertical or horizontal thirds). The ComponentPanel Servlet then inserts a fully qualified reference to the component (e.g., the ActiveX component) in each of the frames that it has created. This control layout (labeled ComponentPanelHTML) is returned to the client interface for display.","The DemoPanel Frame includes a reference to the DemoPanel Servlet. The client interface activates the DemoPanel Servlet reference with the ActivePatient parameter. The DemoPanel Servlet creates a patient demographic display from the patient description language structure.","The three servlets process independently and produce display pages (e.g., HTML) as an output. It is very simple to change the look of thin-client by changing the display pages that are output. For example, the tab panel can be moved to the bottom, font and background colors can be easily changed, and frame and font sizes can be modified by simply changing the style sheet.",{"@attributes":{"id":"p-0087","num":"0094"},"figref":"FIG. 15"},"Returning to the user interface of , the user can change the display page (e.g., by selecting a tab from the tab bar) or interact directly with an application that is being displayed in one of the component areas frames of the ComponentPanel Frame.  illustrate the sequence of steps used in the changes and interactions, respectively.","In one embodiment of the present invention, the SelectorPanel Servlet and the SelectorPanelFrame create the initial display for the tab bar in the CIMR display. In such an embodiment, the frame contains dynamic control (e.g., DHTML) and all cursor movement and display update occurs within the display through scripts (e.g., through JavaScript-based DHTML). In one embodiment, each of the tabs is a \u201csubmit button\u201d that, when selected by the user, sends a message to a Servlet. In the initialization, SelectorPanel Servlet determines which page of the DisplayLayout corresponds with each tab. The identification for the DisplayLayout page is inserted into the dynamic control reference that corresponds with the \u201csubmit button\u201d related to the tab display. Thus, the dynamic control takes care of changes in the display (e.g., highlighting the tab when the cursor moves over it, making the selected tab appear to be displayed in the front of the other tabs) and the SelectorPanel display corresponds directly with the ComponentPanel Servlet.","The client interface activates the ComponentPanel Servlet reference with information that is contained within the \u201csubmit button\u201d reference. As it did in the initialization, the control layout further subdivides its display area to correspond with the active page (e.g., divided in vertical or horizontal halves, vertical or horizontal thirds). The ComponentPanel Servlet then inserts a fully qualified reference to the component in each of the controls that it has created. This control layout is returned to the client interface for display (e.g., as an HTML page).","Once the control layout is returned to the Browser, the client interface activates the related components in the same manner that is described in FIG. . Each of the components joins the active context and gets the active context from the Clinical Context object.","The second type of user interaction involves the user interacting directly with a component. The component, not the user, interacts with the shared environment by sending and receiving context information from the context manager or context object. In one embodiment, the context-changing interaction occurs completely on the client without communication with the server side. In an alternate embodiment, context-changing may occur with communication to the server (e.g., to record when components were interacted with).",{"@attributes":{"id":"p-0093","num":"0100"},"figref":["FIG. 17","FIG. 17"]},"It is also possible that not all components accept, so other responses, as described below, are also valid. Exemplary responses (that are not \u201cAccept\u201d) include:\n\n","To avoid information loss, the context changer utilizes a token in order to make any changes. Also, the context participant that is making changes must be able to deal with busy participants. The application must include either code to make a decision regarding whether the context change should proceed or code to prompt the user as to whether or not to proceed with a context change. Although conceptually it would be preferable to not involve a user in a system decision (e.g., the display program is busy do you still want to change the active visit), code to make the decision automatically may not be practical.","Clearly, numerous modifications and variations of the present invention are possible in light of the above teachings. It is therefore to be understood that, within the scope of the appended claims, the invention may be practiced otherwise than as specifically described herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete appreciation of the invention and many of the attendant advantages thereof will be readily obtained as the same becomes better understood by reference to the following detailed description when considered in connection with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 9A-9D"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
