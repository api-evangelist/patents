---
title: Method and apparatus for generating user interfaces based upon automation with full flexibility
abstract: A method, computer readable medium and system are provided which generate a model driven form user interface to represent an application model. The method includes selecting which of multiple different logical form types to use to generate the form user interface to represent the application model. The method also includes providing a first map. A display target independent logical form is generated using the application model, the selected form type and the first map.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424485&OS=07424485&RS=07424485
owner: Microsoft Corporation
number: 07424485
owner_city: Redmond
owner_country: US
publication_date: 20040603
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["Reference is hereby made to the following co-pending and commonly assigned patent applications U.S. application Ser. No. 10\/860,226, filed Jun. 3, 2004, entitled \u201cMETHOD AND APPARATUS FOR GENERATING FORMS USING FORM TYPES\u201d and U.S. application Ser. No. 10\/860,225, filed Jun. 3, 2004, entitled \u201cMETHOD AND APPARATUS FOR MAPPING A DATA MODEL TO A USER INTERFACE MODEL\u201d, both of which are hereby incorporated by reference in their entirety.","The present invention relates to the generation of forms. More particularly, the present invention relates to methods and apparatus for generating form user interfaces (UIs).","In typical business software products and applications, such as enterprise resource planning (ERP) systems and customer relationship management (CRM) systems, a large number of forms or form user interfaces are used. A form is a window, a dialog, a page, or another UI element for viewing and\/or entering data. It is not uncommon for the number of forms which are used in conjunction with a business software application to exceed several thousand. Developing a large number of forms has traditionally been a labor-intensive task for software developers.","Further, complexity in business application such as ERP systems, CRM systems, and other forms based applications is growing. This is caused by a number of factors including: (1) an increasing number of forms in each system which is due to increased functionality; (2) an increasing focus on usability originating from end users who have become accustomed to web page usability; (3) an increasing number of different platforms, devices, and technologies; (4) an increasing focus on security which can result in different forms depending on user rights; and (5) an increasing demand on flexibility, efficiency, and personalization. At the same time there is a push to develop system faster and with higher quality.","As an example of a real life business application, consider Microsoft Business Solutions-Axapta\u00ae, which has close to 3,000 tables, resulting in close to 2,000 forms. Each form has to be aligned with the layout of each table from which the run-time data is bound. The forms and related form logic have to be aligned whenever the table layout changes and when business logic changes. Adding to the complexity is the increasing number of different client platform technologies. The classic Windows UI is now accompanied by the Web Browser. In the near future, personal digital assistant (PDA), cell phone, and other UI technologies will be adding to complexity.","The Internet has taught end users that they do not need a 14 day course to learn how to use an application. End users expect applications to guide them via tasks, and they expect the application to look appealing. Because more user roles are exposed to the information technology presented through business applications, there is an increasing demand that forms reflect the information each user needs and the tasks that each role has to achieve. All in all the demands on user experience are increasing.","Typically, the user experience and developer experience pull in opposite directions. Good user experience takes longer for an application developer to create and maintain. The vision of having an excellent user experience, and at the same time, supporting high developer productivity, can seem contradictory. This is particularly true in the area of forms generation for business applications.","Applications presenting information must provide their users with as rich an experience as possible on platforms of very diverse capabilities (ranging from rich clients running on the user's desktop, to Web clients running in the user's browser, to Pocket Digital assistants, telephony based devices, and even speech interfaces). A business architect uses his or her knowledge in business engineering to solve problems for the customer. This person is not a computer program developer, and should be protected from the intricacies of program development.","The present invention provides solutions to one or more of the above-described problems and\/or provides other advantages over the prior art.","A method, computer readable medium and system are provided which generate a model driven form user interface to represent an application\/business model (also referred to as a data model or a problem domain model). The method includes selecting which of multiple different logical form types to apply to a logical form to generate the form user interface to represent the application model. The method also includes providing a first map. A display target independent logical form is generated using the application model, the selected form type and the first map. In embodiments of the present invention, the first map is a declarative map, though it may have imperatively defined functions or aspects in some embodiments.","Generating the display target independent logical form using the first map includes mapping property types of datum of the application model to display target independent logical controls in the display target independent logical form. In some embodiments, the first map is external to a mapping engine used to generate the display target independent logical form.","In some embodiments, declaratively applied behaviors add functionality to the display target independent logical form. The declaratively applied behaviors are attached to the display target independent logical form, and are activated by events in the form. The declarative behaviors can be patterns of logic which, depending upon values and properties of the logical controls, set properties on other controls.","The method can also include the further step of mapping the logical form to a physical form using a second map. While the logical form contains a plurality of logical controls, the physical form has a plurality of physical controls available for use in rendering the logical form on a display target. Mapping the logical form to the physical form using the second map includes mapping each of the logical controls in the logical form to one of the plurality of available physical controls. It typically also includes mapping to a specific layout for the particular form type on the particular display target.","Other features and benefits that characterize embodiments of the present invention will be apparent upon reading the following detailed description and review of the associated drawings.","With the ever increasing complexity in business applications and other administrative or forms based software applications, the demand for automation is increasing. The present invention provides a method of facilitating and enhancing such automation. The present invention utilizes an automated and declarative approach for developing user interfaces without jeopardizing the freedom to innovate.","Using the systems and methods of the present invention, application developers can focus on developing a business model. The business model (UML, ER diagram, class, etc.) is later mapped to a technology independent intermediate format which again\u2014in one or more steps\u2014is mapped to the display target specific technology and layout (Windows, Web Browser, PDA, phone, etc). Framework developers can then, independently of the application developers, enrich the display target specific technology, and have it apply to the entire developed application. The intermediate format is created once per form and used across several display targets. The mapping is inherently flexible due to open and changeable maps used by the mapping engines. The intermediate UI models and the final display target formats are also open and changeable allowing for a unique level of flexibility. The following discussions illustrated the inventive concepts further.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data . A particular group of application programs are called business applications. These are targeted at the management of companies including\u2014but not limited to\u2014handling the general ledger, inventory, salaries, customers, sales, purchases, financial reports and any other data relevant for a business.","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). The input devices are used for creating, modifying, and deleting data. Input devices can also be used for controlling (starting and stopping) the application programs and particular functions herein. The functions include opening (showing) forms and closing the forms. A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface . The monitor or other display device is used to show (render) forms.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2","b":["200","200","202","204","206","208","210"]},"Memory  is implemented as non-volatile electronic memory such as random access memory (RAM) with a battery back-up module (not shown) such that information stored in memory  is not lost when the general power to mobile device  is shut down. A portion of memory  is preferably allocated as addressable memory for program execution, while another portion of memory  is preferably used for storage, such as to simulate storage on a disk drive.","Memory  includes an operating system , application programs  as well as an object store . During operation, operating system  is preferably executed by processor  from memory . Operating system , in one preferred embodiment, is a WINDOWS\u00ae CE brand operating system commercially available from Microsoft Corporation. Operating system  is preferably designed for mobile devices, and implements database features that can be utilized by applications  through a set of exposed application programming interfaces and methods. The objects in object store  are maintained by applications  and operating system , at least partially in response to calls to the exposed application programming interfaces and methods.","Communication interface  represents numerous devices and technologies that allow mobile device  to send and receive information. The devices include wired and wireless modems, satellite receivers and broadcast tuners to name a few. Mobile device  can also be directly connected to a computer to exchange data therewith. In such cases, communication interface  can be an infrared transceiver or a serial or parallel communication connection, all of which are capable of transmitting streaming information.","Input\/output components  include a variety of input devices such as a touch-sensitive screen, buttons, rollers, and a microphone as well as a variety of output devices including an audio generator, a vibrating device, and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition, other input\/output devices may be attached to or found with mobile device .","Layered and Mapped UI Architecture and Method","As described above, applications presenting information must provide users with as rich an experience as possible on platforms (for example display targets) of very diverse capabilities. These platforms range from rich clients running on the user's desktop, to Web clients running in the user's browser, to PDAs, to telephony based devices, and even speech interfaces. Other platforms are also possible. In accordance with embodiments of the present invention, a schema is employed that prescriptively defines how data types map onto native controls on the platform in question.","A business architect uses his or her knowledge in business engineering to solve problems for his or her customers. However, this person is typically not a computer program developer, and is ideally protected from the intricacies of program development. The present invention provides methods and apparatus which allow a business architect (user) to focus on the business logic of an application, and not on how data is presented on a given platform. The presented invention allows application developers to, based on a model of the business, derive the user interface which targets multiple display targets and which exploit the technological capabilities of each display target.","This is achieved by a layered UI definition which allows the developer to focus the intellectual effort to the layer which has the \u201cright\u201d level of abstraction. Patterns are captured and re-used at each abstraction level. Maps\u2014from higher levels of abstraction to more specific levels\u2014capture patterns in the mapping process, but also allow the application developer to fine tune the results. The present invention uses these maps, along with controls, logical form types and behaviors, to map the business model to display target specific physical models.","In the methods of the present invention, the business model is the master. The intellectual work put into the business model is preserved and used as basis for generating the user interface. The model can be described in Unified Modeling Language (UML), enterprise resource (ER) diagram or any other graphical or non-graphical modeling language. Business models can also be found in classic object oriented programs, in relational databases, or in other formats. As described below, in some exemplary embodiments of the present invention, the business models is a class hierarchy of entities with properties.","In embodiments of the present invention, the business model is mapped to an intermediate model of the user interface which is independent of the display target. The UI model is described in a high level of abstraction allowing the application developer to view and modify it without needing any technical knowledge of the final display target. Code can be added to the UI model which will work for all display targets. Patterns in the UI models are captured and they can be re-used, resulting in a homogeneous UI. The building blocks used to describe the UI model can also be extended.","As will be described below in greater detail, in some embodiments of the invention the entities are mapped to a UI model called \u201cthe logical UI\u201d which includes a logical form with logical controls. The entities and properties are mapped to respectively logical forms and logical controls at design time. At runtime the logical forms and logical controls data bind to the entities and properties. The patterns in the forms are called form types. The forms and controls are used by, but are not a part of, the core client mapping engine. The core client is the display target independent part of the UI client In embodiments of the invention, the list of logical controls and form types can be extended. A further discussion of these aspects of the invention is also provided below.","In some embodiments of the invention, the UI model is mapped to a display target specific markup language such as the active server page language (ASP.NET), the wireless markup language (WML), the hypertext markup language (HTML), etc. The UI model can also be mapped to other display technologies (for example, Win32, WinForms, PocketPC). In one particular example embodiment of the invention, the logical forms are mapped to a Web Client display target, a WinForms Client display target, etc., and new display targets can dynamically be added.","In accordance with embodiments of the invention, the mappings are based on declarative maps which are open and changeable. Patterns in the UI are captured in the maps. The maps can be done based on several conditions which results in a high level of flexibility. The different models can be modified manually (including through code) after they have been mapped. This gives the developer the final level of flexibility. The dynamic nature of the maps allows for development and use of new UI elements such as controls. New controls are simply enabled on a form, by mapping properties to the new controls. The new controls must abide to a certain contract\u2014in this embodiment the new controls must inherit from a specified base class. At runtime, the logical form binds to the entities and the display target binds to the logical layer. This allows all functionality which is common between the display targets (security, personalization, intra form logic) to be implemented once in the logical layer and used in many instances.","Form Types","The present invention utilizes the concepts of logical forms and logical form types to provide a new method of building form user interfaces (forms) for business and other applications. While in exemplary embodiments or implementations of the invention logical forms and logical form types are used, the use of the logical layer is not required in all embodiments. Thus, the present invention applies to the use of form types to create forms in general. Business applications of today typically consists of a large number of forms which often fall into a few categories or follow a similar pattern. The number of categories is typically between two and twenty, but more can be defined. The form types of the present invention facilitate model-driven user interfaces by preserving and acting on the business or application model both at design-time and at run-time. This provides a high level of abstraction to a software developer. Further, the use of form types in accordance with the present invention ensures re-use (one layout is used many times), a much more homogeneous set of form user interfaces since all forms fall into a few distinct types, and forms that are easier to maintain (the layout of the type can be changed without changing the form and a different type can be applied without changing the form). The invention ensures that application developers have complete control, across multiple display targets, of the look and feel of the application and how navigation within the application takes place. Examples of display targets include each of the multiple types of current and future operating systems, as well as each of the many available or future mobile devices. As another example, each rendering technology on a particular operating system can also be a display target.","Using the concepts of the present invention, a logical form contains display target independent logical controls, which makes the logical form independent of display targets itself. A logical form refers to a logical form type which defines the pattern that the logical form must follow. The logical form type referred to by a logical form can be selected from multiple different logical form types to quickly establish the look and contents of the logical form. In embodiments of the present invention, the logical form types are models that, when combined with a business or other application model, results in the generation of a logical form.","The logical form type exposes the schema (which describes the structure of the form, which elements it can contain, etc.) that the form must conform to, the Maps (or Rules) which map (automatically or manually via an application developer) the business model to the logical model and from this to the physical model. Further, the form type can contain code modifying the dynamic behavior of the (logical) form. Hence, form types expose style and layout information, and other types of information specific to a display target. However, since they also specify rules for the logical form and its contents they play a much bigger role. Certain aspects of the form types of the present invention are introduced as follows:","Different Form Types","As mentioned, in a typical use of the present invention, multiple different form types are provided for use by an application developer in creating forms. For example, in one example embodiment, form types could include a Dialog form type, a Card or CardView form type, a ListView form type, an EntityOverview form type, and an ActivityCenter form type. These form types correspond to typical different categories of forms used in a business application in one example. Thus, providing the multiple form types allows application developers to build all the forms that make up a state-of-the-art business application. As will be understood by those of skill in the art, these particular form types are simply an example, and the present invention is not limited to any particular form types or to any particular number of form types.","Form Type Layout","The contents and structure of the layout information may be different for each form type. Further, the layout information may be display target specific. For instance, the layout information for the ActivityCenter form type could have support for Themes\/Skins\/Styles and Master Pages which will be used by the HTML (i.e., World Wide Web or Internet) display target for displaying the form on a particular operating system platform. This gives the business developer the freedom to innovate on different display targets and tweak the form user interface as much as needed.","Pluggable and Extensible","Form types offer full flexibility and extensibility as an independent software vendor (ISV) can modify or extend them and create new form types, thereby changing the look and feel for the entire application.","Referring now to  and -, shown are diagrammatic illustrations of a Sales Order logical form created using a Card form type in accordance with an example embodiment of the present invention. In this example, the Sales Order logical form contains a set of logical controls grouped into three different logical control groups. As will be described further below, the Card form type defines how and where the controls will appear on the physical forms on different display targets.  and - illustrate the same information, with  including arrows illustrating relationships and origins of information between the logical form type and the logical form, and the generation of a physical form from the logical form.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIGS. 3-1","b":["3","2","305","300","310","305","306","300","301","320","305","370","306","301","370","370"]},"Form type  includes two parts, a schema  that defines what has to be included in particular forms using the form type, and a layout  that includes controls which specify how the form should be rendered or drawn on a specific display target. A form type can also include a code-behind class. By having different layouts which can be used by a form type, the forms created using the form type can be tailored to different display targets (e.g., cell phone displays, personal digital assistant displays, personal computer monitors, etc.). With form type  representing a captured pattern to be used in multiple forms, multiple form instances  can be generated using form type .","Consider for this example a process that a developer could go through to create a form for a Sales Order entity or object model (i.e., the business or application model). First, the developer could look to see which kinds of forms he or she has to choose from. Selecting the \u201cCard\u201d form type, as shown at  in  and -, calls up or designates the Card Schema  as is represented by arrow  in .","When the developer specifies a particular form type and associated schema, he or she is in some embodiments choosing to include in the form the information or fields dictated by the schema, with meta data from the user's business or other model populating the field values. For example, by selecting the Card form type  (and associated Card schema ), the logical form  will include a Content Area  corresponding to Content Area  defined in the schema . The origin of Content Area  corresponding to Content Area  is represented by arrow  in . Likewise, because the schema  of the Card form type includes a UI Part Area , a Related Entity UI Part Area , and an Action Area , the logical form  includes these areas or fields as well as shown at ,  and . Again, the origins of these fields are represented diagrammatically by arrows ,  and .","As mentioned above, each form type also includes at least one layout  (usually one per display target) that includes controls which specify how the form should be rendered or drawn on a specific display target. As shown diagrammatically in  and -, the layout for the card form type includes controls which cause a display target  to include a Content Area , a UI Part Area , a Related Entity IU Part Area , and an Action Area . Arrows , ,  and  illustrate the correlation of these areas in the card layout to their corresponding areas in the Card schema. The logical form , which is generated using the selected logical form type and meta data from the application model (in this example a Sales Order entity), is rendered as a physical form  on display target . This process is illustrated in  using arrows  and .","Models and Maps","Many information systems use models. Examples of models are: object diagrams, Extensible Markup Language (XML) schemas, database definitions, and form definitions. A model is often identified as a set of objects, each of which has properties, compositions, and associations. In business UIs, the control hierarchies used to render the forms can be regarded as models, such as Windows control trees and Hypertext Markup Language (HTML) object models. Also, syntax such as Unified Modeling Language (UML) can be used to define a model (e.g., the class definitions). In an example framework used to illustrate the methods of the present invention, applications are modeled using business entities. Thus, the business model consists of these business objects called entities, relations between entities, and properties on the entities. See for an example of a simple model  the entities , ,  and  shown in . The entities have properties (see for example properties  of entity ) and relationships with other entities (see for example relationship  between entities  and ).","When a model is transformed into another model, a map is used explicitly or sometimes implicitly. Maps describe the relationships between models. Some examples include: Extensible Stylesheet Language Transformation (XSLT) which is intended to map XML to XML; controls which are used to render an object model on a specific device surface; mappings of orders from one application to another (because orders in different applications may have different formats); and Computer Aided Software Engineering (CASE) tools which map UML to class definitions.","In current business applications, maps are mostly programmed using object-at-a-time mappings, meaning that mappings are coded as \u201cswitch\u201d statements in code, which take a particular object as input and return another object. Thus, conventional business applications typically use imperative maps, maps written in the code of a typical programming language. By using model-at-a-time in accordance with the present invention, it is submitted that productivity can be improved by an order of magnitude. Besides productivity gain, there is a mental gain in perceiving the UI generation problem as a mapping of models to other models using maps. Further, another benefit is the higher abstraction level found in the declaratively defined maps of the present invention. The present invention allows the maps to be explicit and declarative. In the present invention, the maps can be either declarative or imperative (due to the fact that one can override the mapping in code).","The explicit nature of the maps means that the maps are external to the generation engine used to do the mapping or rendering, and that the maps are themselves models. Stated another way, the explicit nature of the maps means that they are defined separately from the controls and the forms. Conventionally, this mapping has been done implicitly inside the controls code or forms code. The declarative nature of the maps means that the maps are not imperative (coded in a typical programming language). As used herein, the phrase \u201cdeclaratively defined\u201d means that the maps are not just defined in code as has conventionally been the case, but they are defined in a format which allows the maps to easily be changed. Examples of a declaratively defined format include, but are not restricted to, XML documents, comma-separated files, BizTalk Maps (mapping one data schema to another), and MBF Entity Maps (mapping an object model to a database schema). A wide variety of declarative mapping formats can be used in accordance with the present invention, and which format is chosen is not of particular importance. It is important that the declarative map have a limited set of possibilities, therefore making it easier to provide an intuitive design tool to define the map. In contrast, an imperative map (using code) has nearly unlimited possibilities through the programming language, and therefore it is extremely difficult to create an intuitive design tool. Instead, programming skills are required to create it.","It must be noted that in embodiments of the present invention using declarative maps, the maps need not be only declarative. In instances where it is necessary to create a map that is too complex to be defined declaratively, imperative mapping aspects can be included in the otherwise declarative map. For example, complex functions can be created and included in the map. An example could be that if an Invoice Address and Shipping Address are nearly the same, then only the Invoice Address is shown on the Form. The algorithm for determining whether two addresses are nearly the same could be an implicitly defined function used in the Map.","The present invention provides programming abstractions and a prescriptive architecture suitable for the development and deployment of business applications based on a distributed, service-oriented architecture. The framework insulates business logic written to these abstractions from changes to underlying technologies, preserving the critical asset of a business application development team. The present invention extends approaches to model-driven development, moving from a design-time model with code generation to having true \u201cmodel aware application services\u201d, which can interpret the business model at runtime.","Model-Driven UI Based on Maps","Having the application model is an important feature when generating the UI for a business application built in embodiments of the present invention. A large majority of the UI can be generated solely based on the model of the business logic and maps. When an application developer has modeled a new entity, the UI is derived from this. This is illustrated diagrammatically in  which illustrates business model  being mapped (as shown at ) to a UI model . Arrow  represents the mapping process, as well as a suitably configured mapping engine which uses a map to conduct the mapping process.","Although this mapping can be achieved using traditional coding techniques, the mapping is not as straightforward if certain challenges are to be met. The challenge is that when new property types are created and used in an entity, the coded transformation might not know how to handle the new type and the transformation therefore has to be modified and re-compiled. Another challenge is handling newly developed controls that will only be of value if they are included in the transformation\u2014again this results in re-programming the transformation. The mapping techniques of the present invention are able to meet these challenges. Note that any modification of the UI at runtime (through code) can also be considered a mapping. The platform used in the present invention exposes a layered UI model, and uses maps to transform models from one layer to another. This is described below in greater detail.","The methods and apparatus of the present invention provide a way of calculating how to present business information to the user on a given platform. The invention builds upon the mapping of models onto other models, working from a very abstract model (describing the business entities to interact with) to a concrete model (specifying exactly which device specific control should be used to render the business information). In general, this mapping may involve any number of steps.","For example, consider the block diagram  shown in  which illustrates a process of mapping from a master model  to a specialized model  using two explicit and declarative mapping steps. Master model  (i.e., \u201cmodel A\u201d) can be, for example, a database, table, entity, object, or other types of models in a problem domain specific to a user. Master model  is mapped to an intermediate model  (i.e., \u201cmodel B\u201d) with the mapping step illustrated at  using a map  (i.e., \u201cA-B map\u201d). Intermediate model  can be a display target independent model having logical controls, as will be described below in greater detail. Intermediate model  is then mapped to a specialized model  (i.e., \u201cmodel C\u201d) with the mapping step illustrated at  using a second map  (i.e., \u201cB-C Map\u201d). Specialized model  can be a display target specific model having physical controls, as will also be described below in greater detail. The arrows used to represent mapping steps  and  also represent mapping engines which are configured to utilize maps  and  to implement the mapping steps.","In accordance with some embodiments of the present invention, the mapping scheme involved in determining how to allow the user to interact with business information on the client platform involves at least three steps, as described below and as shown diagrammatically in block diagram  of . The initial model  (see also master model  shown in ) contains information about the business entities that the user must interact with. Each datum of this application model is of a particular type. The first step involves determining which logical control to employ for a given type (string, integer, decimal type representing monetary values, addresses containing other values etc) of datum to present.","The logical control to use for the given type is determined using a mapping from data type in model  onto logical control in model . The mapping process is illustrated at , and utilizes a map  (i.e., the \u201cdatum type to logical control map\u201d). Logical controls have several useful properties. They are completely free from dependencies to any specific display target, but hold properties that govern the behavior of device specific physical controls. The lookup of the logical control is performed taking the type hierarchy into account. If no logical control is specifically suitable for encapsulating the properties of a specific type, the search continues with a base type, until a logical control is found to handle the type.","Once a logical control has been identified from the type of data to represented, the physical control used to actually perform the rendering on the given platform must be found. These physical controls are sometimes referred to as \u201cadapters\u201d. This is done using another mapping, yielding the physical control from the logical control and the display target. The mapping process is illustrated at , and uses map  (i.e., the \u201clogical control to physical control map\u201d) to generate physical control model  from logical control model .","When the client runs on the user's display target, the physical control will be used to create instances of the native controls used to interact with the user. This is done by a third mapping, yielding a set of native controls from the physical control. For instance, if the physical control was an address control, the physical control would map onto native controls for street, city, country. The mapping process is illustrated at , and uses map  (i.e., the \u201cphysical control to native control map\u201d) to generate native control model  from physical control model . In some embodiments, this is an imperative map\u2014but it does not have to be. Again, arrows ,  and  also represent the mapping engine(s) used to implement the mapping functions as specified by maps ,  and .","The mapping described above may be augmented with other mappings to achieve the desired result. Other factors include the type of form rendered (card or list view), the user role (possibly restricting the information offered to the user). The process of arriving from the abstract model to the concrete model is purely prescriptive (by describing the mappings involved), and flexibility is afforded by being able to change these mappings.","As another example,  illustrates a block diagram  showing a mapping process for getting from a customer's name and identification number (ID) to the HTML used to render this information in a browser. The master or initial business model  is an entity (or object) or class of entities (or class of objects) having the customer's name and ID as properties. The \u201cName\u201d and \u201cID\u201d properties of model  are of types \u201cString\u201d and \u201cNumber\u201d, respectively. Model  is mapped to a logical control layer of model  using a prescriptive map . The mapping process is represented at . In this example, the data type \u201cString\u201d is mapped to a \u201cTextBox\u201d logical control, while the data type \u201cNumber\u201d is mapped to a \u201cNumberBox\u201d logical control.","Next, logical control model  is mapped to an HTML model  using map . The mapping process is represented at . In this example, model  is a physical control model in the form of an HTML model. Thus, map  maps the logical controls of model  to HTML tags or elements in model . HTML model  is then used to render the information from model  in a browser. Again, the arrows used to represent mapping steps  and  also represent suitably configured mapping engines which utilize maps  and  to implement the mapping process.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 5-4","FIG. 5"],"b":["550","560","561","580","555","560","570","571","565","566","565","561","560"]},"Next, logical layer model  is mapped to display target model  having physical controls  specific to a particular display target. Model  is mapped to model  using map , with the process and mapping engine represented at . Map  maps the logical control types \u201cNumber\u201d and \u201cString\u201d of model  to the physical control type \u201cTextBox\u201d of model , illustrating again that several different types from a particular model can be mapped to a single type on another model. By extension, several different property types from a business model can be mapped to the same final (for example \u201cphysical\u201d) control.","Developer Experience","When a developer creates a new entity, which is built only from existing types, a default UI is also built via the maps. If the default UI does not offer the desired user experience, the developer can choose to:\n\n","There are a number of benefits to changing the map instead of the more traditional modification of models. First of all, the changes can have a wider scope. If the map entry used in the previous example was changed, all entities using the \u201cIDType\u201d would automatically get the update. This would result in a very consistent UI, which the end user would benefit from.","Another benefit becomes evident when looking at maintenance and future versions of an application. By changing the way models are generated, but not changing the generated models, the master model can be updated, and hereafter the depending models can be regenerated without any risk of conflicts. Not regenerating the forms at all could result in inconsistencies between entities and the forms used to view and edit them. Maps also break the large generation task down into several small declarative map entries.","If the developer creates a new property type, such as \u201cMoney\u201d, this can be used instantly because the UI will be generated efficiently if only a single map entry is added. In this example the new \u201cMoney\u201d property could map to a \u201cNumber\u201d control. The developer could also choose to exploit the added metadata information, and create a \u201cMoney\u201d Control, and have the property map to the new control. The mapping technology makes both scenarios valid.","The Mapping Language","Mapping uses a simple declarative mapping language which is extensible. Mapping takes one or more tokens as input and returns one or more tokens as output. Given a property type as input, one or more logical controls can be specified as output. It must also be possible to specify the output as null. For example, the \u201cIDType\u201d could be a computer generated field, which the user cannot edit or see, in which case the type maps to nothing. Also, the mapping can control parameters on the output. For example, the \u201cString\u201d property could result in a wider TextBox compared to the other TextBoxes on the form.","To handle the scoping problem addressed earlier, a scope condition is needed\u2014on the previously discussed example form, \u201cIDTypes\u201d map to \u201cIDControls\u201d, but on all other forms a \u201cNumber\u201d control is used. Other parameters can also be used as scope, including the business entity, the entity stereotype, the form type, etc. There are other conditions which it would be beneficial to take into consideration when a map is to be performed. One example is the parent control. If the parent control is a list, an enumerator property might choose to map to a drop-down list and not a radio button. Another condition could be the number of possible selections in the enumerator; radio buttons could be used if there are two or three, but more choices could result in a list. Going down this road, the mapping language will end up being very complex compared to the initial requirement, and another abstraction level on top of the map is needed for developers to understand the maps. This pattern has been seen with Extensible StyleSheet Language Transformations (XSLT), where several tools have been implemented to hide the complexity.","Logical Forms\u2014A UI Model","When mapping from the model of the business logic to the UI model, a layout independent layer, also called a logical layer, is inserted. If it is believed that the model of the business logic can be mapped to the final UI regardless of the display target, the logical layer is a straightforward abstraction. Some metadata will be common for all the display targets such as the business entity itself, and some parts will be specific for the specific display target. The logical layer is the common part.",{"@attributes":{"id":"p-0093","num":"0095"},"figref":"FIG. 6","b":["605","610"]},"At run-time, the models or forms are mapped to logical layer model . Logical layer model  is also generated using run-time data stored in database  applied to business logic . Also at run-time, logical layer model  is mapped to a display target model  as described previously.","The logical layer-including forms and controls\u2014is the bridge between the business logic  and the display targets . It has limited knowledge of layout and limited knowledge of the business logic. The logical layer defines the content of a form based on the business entities, and handles common run-time issues such as data binding forms to the run-time instance of the business entities. Furthermore, the logical layer handles security common to all display targets; it provides metadata to each display target and the logical layer can handle input validation.","A business architect or developer can focus on domain-specific business logic and data. When focus is shifted to the UI, the layout details, data binding issues, plumbing code, input validation, hiding of non-readable properties, error handling, etc., is all hidden in the high level of abstraction found in the logical layer. The domain specialist can focus on the contents of the UI-what makes sense for the user to see-and does not need to have in-depth knowledge about specific display targets and their different rendering technologies.","As discussed, the logical forms or logical layer models are built using logical controls. New controls can easily be added, making the logical layer very flexible and extendable. When a new control is developed, it is simply added to existing forms by changing the used maps. Each display target will benefit from the new functionality without having to implement new controls, but if it makes sense, a new control could be introduced.","Display Targets","The logical forms and controls are mapped to specific rendering technologies used by the display targets. As in other FIGS., this is illustrated in  in which logical layer model or form  is mapped to several specific display targets. In this particular example, display target  uses Windows rendering technology, while display target  uses a Web rendering technology. The display targets are responsible for handling all user interactions, including rendering the forms and controls and handling the user input. Each display target needs a number of controls so that the controls in the logical layer are mapped to something meaningful. That is, the property has to be compatible with the value types which the control can handle and the control should render that value in a sensible way. In other words, there are not a specific number of controls that need to be available in each display target, as the mapping technology has a significant impact on this.","The display targets control the user interaction and essentially also the interaction paradigm. A Web page and a Windows Forms window might be generated based on the same logical form, but whether they use a chatty interaction policy or a chunky post back policy is naturally determined by the display target. Each display target chooses how much of a form that is displayed to the user. A Windows form can hide information on tab pages, while a Web page can choose to show all the information at once. These decisions are made based on the logical form, and thus also the form type, which the display targets obtain. Different display targets need additional information to make such paging decisions, and similarly the logical forms and controls can be annotated with display target specific information.","Behaviors\u2014Declarative Form Logic","As the forms are made up of logical controls, which define the content, there is still a need to add dynamics to the forms. This could be done using code. But it is not easy to map code onto a form, and therefore a declarative abstraction level is needed. At the same time, there are many patterns in the code, which are added to forms. For example, code to disable a field if another field is filled out is found in many forms. If \u201cCash\u201d is selected as a payment type on a form, the \u201cCredit Card Number\u201d is grayed or even hidden.","These patterns are captured in a concept called \u201cbehaviors.\u201d Behaviors are declaratively added to the forms and are activated via events in the form. The behaviors can, depending on values and properties of the controls, set properties on other controls, but behaviors are not limited to this use. Behaviors are mainly mapped based on constraints in the entities, or on other metadata properties. Entities are responsible for handling the business logic, and behaviors are responsible for the UI logic. In other words, behaviors should not implement any business logic as this would violate the separation of concerns.","Layered System and Method Example","Referring now to , shown is a diagrammatic illustration of a layered system and method which implements the various concepts described above (i.e., logical form types, UI maps, controls, behaviors, etc) in combination. As shown in , system or method  is implemented using a business framework  which can include business applications and computing systems, a core client mapping engine or component  and one or more display targets . For illustrative purposes,  is segmented to show maps  (including maps  and ), models  (including application or business model , logical form model  and physical model ), and libraries .","Libraries  include property types library , in business framework , which defines the various property types  of datum in application model . In core client , libraries  include logical controls library , behaviors library , and logical form types library . As described above, logical controls library  defines the various logical controls  which the datum or property types  of model  can be mapped to. This mapping between application model  and logical form model  is performed by the core client mapping engine using map .","Behaviors library  and logical form types library  are used by the core client mapping engine  in the process of designing and generating forms as was described previously. Libraries  also include style library , physical or native controls library , and form types library  which are used by the display target  to generate the physical form model , and thus to render the physical form. Controls library  defines the various physical controls  for a particular display target which logical controls  can be mapped to using map .","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3-1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3-2","FIG. 3-1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4-1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4-2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5-1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5-2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 5-3","FIGS. 4-1"],"b":["4","2"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5-4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
