---
title: Logical application data restore from a database backup
abstract: A system and method for managing data in a computer system. A backup server is configured to harvest data indicative of logical relationships among data entries in a backup data set. The harvested data and backup data set are stored on a backup medium. Catalog entries are created for both the backup data set and the harvested data. The computer system allows a user to browse the backup catalog, including the logical structure of the content of a particular backup data set. The user may select particular items for restoration from the catalog. In response, the server restores the backup data set and harvested data to a temporary location, identifies data in the harvested data which corresponds to the user's selections, searches the backup data set for the selected items, and initiates restoration of the selected items.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07558928&OS=07558928&RS=07558928
owner: Symantec Operating Corporation
number: 07558928
owner_city: Cupertino
owner_country: US
publication_date: 20041231
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to restoring selected portions of a datastore from a backup datastore.","2. Description of the Related Art","It has become common for organizations to employ large-scale, complex applications to manage a wide variety of information that may be critical to their operations. For example, Microsofti Exchange Server provides an organization with a messaging (e-mail) and collaboration environment. Another example, Microsofti SharePoint Portal Server, provides a unified view (on a website) of information from various applications. Additional examples of large-scale applications, available from various vendors, are well known to those having ordinary skill in the art.","In order for an application, such as those noted above, to provide its desired functionality, it will generally be configured to store a large quantity of data in a datastore. For example, a large-scale application may store data in one or more database repositories, file systems, or other storage media, either local or remote. In order to avoid the loss of data associated with an application, a data protection application is commonly employed to manage backup and restore operations on the datastore.","To backup the data from a datastore, a data protection application may copy the entire contents of the datastore and store the data on backup media. To restore the data to a datastore, a data protection application may execute an operation to restore all of the data to the datastore. However, in some cases it may be desirable to restore only a portion of the data associated with an application to the datastore. For example, in the event that a single mailbox, message, calendar event, or other data item is inadvertently deleted, restoration of only the deleted item may be desired. Unfortunately, given the nature of backup up datasets, selectively restoring particular items may be relatively difficult and inefficient.","Generally speaking, data is backed up to a media that does not support random access. For example, tape is often used as a backup medium. Consequently, in order to gain access to a particular item within the backup dataset, it is generally necessary to first restore the entire backup dataset to a temporary location and then search the restored data for the particular items of interest. However, when selecting a particular backup dataset for restoration, a user generally is not provided with any detailed information concerning the contents of that backup dataset. Rather, a catalog of backups is generally maintained which only provides basic information concerning the backup dataset (e.g., date, size, name, etc.). Therefore, a user must generally make a \u201cbest guess\u201d as to which backup dataset contains the item of interest and restore that backup dataset. The user may then search the restored dataset for the item(s) of interest. However, as may be appreciated, the user may not always be correct in guessing which backup dataset includes the item of interest. Consequently, the user may restore and search an entire backup dataset only to find it does not contain the item(s) of interest. Therefore, time and effort may be wasted.","Accordingly, an efficient method and mechanism for restoring data is desired.","Various embodiments of a computer system and method are disclosed. In one embodiment, a computer system comprises a plurality of data entries and a backup server coupled to a data storage device. The backup server may be configured to harvest a data set indicative of a logical relationship among the plurality of data entries, associate the harvested data set with the corresponding backup data set, and store the harvested data set and the backup data set on the data storage device. Entries are created in a backup catalog that correspond to both the backup data set and the harvested data set. During a restoration procedure, a user may browse the catalog in order to identify a backup data set, or portion of a backup data set, for restoration. Utilizing the catalog entries corresponding to the harvested data set, the user may view the structure and relationships between data items in the corresponding backup data set. The user may select for restoration particular items of data from the backup data set. In response, the backup data set(s) and harvested data set(s) corresponding to the selected items are restored to a temporary location. Data within the restored harvested data which corresponds to the user's selections is then identified. The identified data is then used to locate in the backup data set the selected items for restoration.","In a further embodiment, the logical relationship comprises a hierarchy of groups and each data entry is a member of one or more groups. Each data entry comprises one or more values, each value corresponding to a selection parameter of one or more pre-determined selection parameters. The harvested data set includes a plurality of references, each reference corresponding to one of the plurality of data entries, and each reference comprising data corresponding to the one or more values of a corresponding data entry.","These and other embodiments will become apparent upon reference to the following description and accompanying figures.","While the invention is susceptible to various modifications and alternative forms, specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that drawings and detailed descriptions thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the invention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},"In one embodiment, a user may request either to backup data from a live datastore associated with an application whose data is being protected or restore previously backed-up data to the live datastore (decision block ). As used herein, a datastore refers to any combination of suitable data storage media such as RAM, disk storage, flash memory or other computer-readable storage media that an application may use to store its data. If a backup operation is selected, a data set may be harvested from a backup data set that corresponds to contents of the live datastore (block ). Generally, the process of harvesting a data set comprises determining the logical relationships that exist between data entries in the backup data set. Once the backup server has harvested a data set from the backup data set, the backup server may store both the harvested and backup data sets on a backup medium (block ) and a catalog corresponding to the backup data set may be created or updated (block ) to reflect the new backup. In addition, data corresponding to the harvested data set which provides a logical view, or representation, of the backup data set is also cataloged (block ). Generally speaking, the harvested data is relatively small compared to the backup data set itself.","Continuing to refer to the embodiment shown in , if a restore operation is selected in decision block , the backup server may wait for additional information which indicates whether the user desires to perform a full restoration or a selective restoration (decision block ). Generally speaking, when initiating a restore operation, the user accesses a catalog(s) that correspond to previously backed-up data sets and selects a particular backup for restore. If a full restoration is desired, the user may simply select a particular backup for restoration and the backup sever may transfer the backup data set from the backup medium to the live data store (block ). Alternatively, if a selective restore is desired (block ), the user may browse (block ) the previously harvested and cataloged data which provides a logical view of the contents of previously performed backups. Upon identifying the desired items, the user may select (block ) the desired items for restoration. In response, the backup server may then restore the corresponding backup data set (block ) to a temporary location, automatically initiate a query to locate the items of interest (block ) within the backup data set, and then cause the items of interest to be restored to the live datastore (block ). In this manner, the user may not only accurately identify which backup dataset includes the item(s) of interest, but the multi-step process of restoring the backup data set, searching the restored data for the items of interest, and selectively restoring those items to the live datastore may be transparent to the user in the sense that it appears to be a single step process. That is, from the user's perspective, it is only necessary to select the desired items for restoration and the desired items are restored to the live datastore.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["200","200","110","210","220"]},"Generally speaking, the type of data to be harvested may depend on the logical relationships among data entries in the datastore. For example, in one embodiment, data may be stored in a hierarchical database. In such an embodiment, harvesting may include creating data that corresponds to a map or a tree-structure representing the hierarchy. Alternatively, data entries may be represented as rows in a table, each column of which corresponds to a parameter having a value associated with each data entry. In that case, harvesting may include creating a table that contains a pointer to each data entry and a selected subset of the columns containing the values of a selected subset of the parameters for each data entry. In a still further embodiment, each data entry may include one or more group associations. For example, a folder containing files may be considered a group. In such a case, harvesting may include creating a data set that corresponds to the group associations of each data entry. These and other embodiments may be part of the harvesting process.","The harvesting process may depend, as well, on application programming interfaces (APIs) or utilities that may be provided by the application for accessing the data, metadata related to the data, or data describing the logical organization of the data stored in the datastore. For example, harvesting may include execution of a sequence of parametric queries against the backup data set to determine the group associations of each data entry. Alternatively, the application may provide specific APIs through which to request data representing the logical relationships among the data entries in the datastore. In various embodiments, the harvesting process may include these and other methods of obtaining a data set from the backup data set.","Once the backup server has harvested a data set from the backup data set, in the embodiment illustrated in , a backup catalog is updated (or created if necessary) with information corresponding to the new backup (block ). In addition to providing general information concerning the backup, the catalog is also updated to include information related to the harvested data set. Generally speaking, the catalog is updated with information which enables a user to view (or \u201cbrowse\u201d) the contents of a particular backup in greater detail that would otherwise be possible. The user may not generally be able to browse all of the contents of a particular backup data set. Rather, the catalog may enable the user to view a logical representation of the data in the backup with some degree of detail. For example, a user may be able to view a hierarchy of directories and files within those directories. However, the actual content of the files themselves may not be included in the catalog. Subsequently, the backup server may then transfer the backup and harvested data sets to a backup medium (block ). In some embodiments, the backup server may append the harvested data set to the backup data set (block ) and transfer the resulting data set to the backup medium. The backup medium may be any of a number of data storage devices including disk, tape, flash memory, or other suitable devices. Depending on the configuration of the computer system or systems hosting the application and the backup server, the backup medium may be coupled to the computer that hosts the backup server or to a remote system. It is noted that all of the figures described herein are intended to be exemplary only. The steps or processes depicted by these figures may be performed in a different order than that depicted, or in some cases concurrent with other steps.","Turning now to -, the data flow corresponding to one embodiment of a backup operation is illustrated. illustrates one embodiment of data flow during the creation of a backup data set. illustrates one embodiment of data flow during the harvesting of a data set. illustrates one embodiment of data flow during the storage of a data set and a backup data set.","As shown in , an application  may store data entries  as part of a live application data store . Data entries  may include a variety of items depending on the functionality provided by application . For example, data entries  may correspond to e-mail messages, attachments, mailboxes, etc. Data entries  may also be entries in database tables or content items in a content management system. Alternatively, data entries  may include configuration data, encryption keys, metadata, and\/or other types of data used by application . Any of the above types of data, or other types of data that may be stored in a datastore, or combinations of the above may constitute data entries .","In one embodiment, a backup server may take a snapshot of data entries  from live application datastore  (process ) and store a resulting backup data set  in a working datastore . In various embodiments, process  may include one or more of: locking live application datastore , creating a copy  of the data entries  on the same host as live application datastore , or creating a copy  of the data entries  on a different host. In one embodiment, working datastore  contains data corresponding to all of data entries  from live application datastore . In other embodiments, the working datastore  contains data entries corresponding to data entries  from live application datastore  that have changed since the last backup operation (e.g., as would be found in an incremental backup). To simplify the example, it is assumed that the working datastore contains data corresponding to all of data entries  from live application datastore .","As shown in , the backup server may harvest a data set  from backup data set  stored in the working data store (process ). Using one or more of the harvesting processes described above, the backup server may harvest data that is indicative of relationships (e.g., logical relationships) among data entries within the backup data set . Once a data set has been harvested, the backup server may append or otherwise associate the harvested data set  to backup data set  in the working datastore as shown. In one embodiment, the harvested data set is not only indicative of logical relationships among the data, but may also include an indication as to the location of particular items within the corresponding backup data set. The backup server, as shown in , may store both harvested data set  and backup data set  (process ) on backup medium , thus completing the backup operation. As part of the above backup procedure, a backup catalog is also updated to reflect the newly created backup. In one embodiment, the catalog is updated to reflect both the stored backup data and corresponding harvested data. In this manner, the catalog not only identifies a particular backup data set, but also provides a representative view of the contents of the particular backup data set.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","b":["325","345","330","325","345","330","325","345"]},"In the example illustrated, working datastore  may include data entries A-E, etc. that correspond to data entries A-E, etc. respectively from live application datastore . As shown, working datastore  may also contain harvested data set . Data set , in one embodiment, is representative of a set of hierarchical groups , , , , , and . For example, if backup data set  corresponds to an e-mail server, the groups depicted in  may correspond to mailboxes and\/or folders. While hierarchical groups are used for purposes of discussion, other logical relationships are possible and are contemplated. Group  is shown containing groups  and . Group  is shown containing group , which contains group . Each group may contain one or more references corresponding to one or more of data entries A-E in backup data set . Each reference may include an identifier (such as a pointer) that corresponds to a respective data entry  and a set of values corresponding to each of a set of parameters for each data entry . For example, in one embodiment, group  may contain pointer  pointing to data entry A and values A-C corresponding to parameters A-C respectively. Additionally, pointer  and values A-C may correspond to a single reference. Similarly, group  may contain pointers  and  pointing to data entries B and C and values A-C and A-C corresponding to parameters A-C respectively. Also, group  may contain pointers  and  pointing to data entries D and E and values A-C and A-C corresponding to parameters A-C respectively.","It is noted that, in the illustrated embodiment, groups may contain other groups. In this and other embodiments, groups may contain both other groups and references. Furthermore, groups may contain any number of references with various numbers of values, depending on the structure and content of backup data set . It is further noted that each group may contain the same number of parameters in each reference or a different number of parameters in each reference, or different parameters in each column, depending on the structure and content of backup data set . In addition, as noted, groups may be representative of a number of different container objects such as folders, mailboxes, and directories, etc. As may be seen in , the harvested data  generally provides a logical view of the data in the backup data set  and also identifies a location of each entry within the corresponding backup data set . As will be depicted in relation to , the catalog entries corresponding to the harvested data may provide a logical view of the corresponding data, but may not include the locations of the items themselves. So, for example, while the catalog may display a particular folder within a particular mailbox, the catalog may not include information which identifies the actual location of the particular folder in the corresponding backup data set. Rather, selection of the particular folder in the catalog may result in an access to the corresponding harvested data. The harvested data may then provide an indication as to where the particular folder is stored.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5","b":["500","200","500","110","510","520","530"]},"If while browsing a backup catalog the user chooses only a selected portion of a backup for restoration, a selective restore is indicated (block ). In one embodiment, the backup server may provide a catalog interface to a user through which the user may browse the data set and optionally select criteria that may be used to locate or retrieve selected data entries for restoration. In response to detecting a selective restore is desired, the backup data set and corresponding harvested data set are restored from the backup medium to a temporary location (block ). Based upon the user's selection, data within the restored harvested data which corresponds to the user's selection is identified (block ). Based upon the identified information, queries are automatically generated which locate and retrieve the corresponding data within the backup data set (block ). The retrieved data is then transferred for restoration to the live data stored. (block ).","In some embodiments, an application may include utilities through which selected data may be restored to a live datastore. Accordingly, in one embodiment, the application utilized may itself be used during restoration of the selected data entries to the live data store. In other embodiments, the backup server may be operable to restore selected data entries to the live data store without intervention from the application.","Turning now to , one embodiment of a user interface  for browsing a data set's logical relationships is illustrated. Generally speaking, the interface depicted in  may be part of a catalog viewing utility or application. For purposes of discussion in , it is assumed that a particular backup has already been chosen for viewing. In the embodiment shown, user interface  presents a view of the data set that may be similar to that of a typical e-mail application's graphical user interface. As shown, interface  includes two panes. A right pane may display a table in which each row represents a data entry. Within each row are shown columns of values. Each column may correspond to one selection parameter. A left pane may display logical relationships between these data entries. In the example shown, a hierarchical folder structure is depicted in the left pane.","In the example shown, folders may generally correspond to the groups as previously described in the discussion of . As illustrated, in one embodiment, folders may contain other folders. For example, Folder  may contain folders ., ., and .. In the illustrated embodiment, folder . is highlighted indicating that the user has selected it. Accordingly, the rows displayed in the right pane may correspond to the data entries associated with folder .. In the right pane, four columns are illustrated for purposes of discussion. The first column contains an icon that may represent an e-mail attachment. In one embodiment, any row that displays this icon is associated with a data entry that has an attachment. The second column, labeled \u201cFrom\u201d, corresponds to a parameter whose values correspond to the sender of an e-mail message. The third column, labeled \u201cSubject\u201d, corresponds to a parameter whose values correspond to the text in the subject line of an e-mail message. The fourth column, labeled \u201cReceived\u201d, corresponds to a parameter whose values correspond to the date and time at which an e-mail message was received.","During a selective restore operation, a user may highlight a folder or other group represented on the left pane of user interface . Once a folder is highlighted, the contents of the right pane may be browsed. The user may then select specific values of specific parameters (i.e., specific row-column locations). For example, rows in which the \u201cFrom\u201d parameter has a value of \u201cSender \u201d are highlighted, indicating that the user has chosen to restore all messages in Folder . that were sent from Sender . Upon completing the selection, such as by hitting the \u201cENTER\u201d key, the backup server may proceed to execute a selective restoration as described above. It is noted that the numerous ways of selecting data and items for restoration. In addition, searches on the data may be performed as well. All such alternatives are contemplated. In addition, other user interfaces, including either graphical or command-line interfaces, may be implemented to provide a method for selecting criteria for a selective restoration. The arrangement of information on the screen, selection procedures, and functionality such as the ability to make multiple selections from one screen may vary from embodiment to embodiment.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIGS. 7","FIG. 7","FIG. 7"],"i":["a ","b ","a ","b "],"b":"7"},"As shown in , a backup server may retrieve backup data set  from backup medium  and store it in working datastore  (process ) upon receipt of a request for a full restoration. Once the backup server has stored backup data set  in working data store , the backup server may restore backup data set  to live application datastore  (process ). Alternatively, in some embodiments, the backup server may restore backup data set  from backup medium  to live application datastore  without first storing backup data set  on working datastore . Typically, the data entries in live application datastore  may be locked for the duration of the restoration process, affecting the availability of the data to application . The restoration process may be slower if the backup server restores backup data set  from backup medium  to live application datastore  without first storing backup data set  on working datastore . Accordingly, in one embodiment, the backup server may retrieve backup data set , then lock live application datastore , and then restore backup data set  so as to reduce the duration of the time that live application datastore  is locked.","As shown in , the backup server may retrieve backup data set  and data set  from backup medium  and store them in working datastore  (process ) upon receipt of a request for a selective restoration. As discussed above, an indication that a selective restore is desired is generally responsive to a selection  of backup catalog items by a user. Once the backup server has stored the corresponding backup data set  and harvested data set  in working data store , the backup server may then utilize the selections made by the user to identify corresponding data or entries  in the restored data set . In one embodiment, the retrieved harvested data entries  include identifying information which may be used to retrieve the correspond data from the backup data set.","Based upon the retrieved harvested data , queries  may be generated  for a query engine . As discussed above, the application to which the data is being restored may itself include utilities for selectively restoring items of data to a live data store. In such an embodiment, the query engine  may correspond to APIs of the application itself. In other embodiments, the backup\/restore software may include the query engine . For example, in one embodiment, query engine  may be a Messaging Application Programming Interface (MAPI) compliant e-mail application and query  may comprise executing a MAPI request to restore selected data entries to an email message store. Alternatively, in some embodiments, the backup server may restore selected data entries  to live application datastore  without intervention by application , as described above in the example of a full restoration. In response to the queries, corresponding data  is retrieved and restored  to the live data store . It is noted that restoration of a selected item may generally include restoration of other items which are not explicitly selected for restoration. For example, if a user selects a particular folder for restoration, it may be necessary to also restore folders or directories which contain the selected folder. In other cases, logical relationships between data entries may indicate dependencies between the entries. In such a case, restoration of the other data entries in a dependent relationship may be automatically performed as well.","Turning now to , one embodiment of a computer system in which the above described methods and mechanisms may be utilized is shown. In the illustrated embodiment, a storage area network (SAN) environment is formed by one or more host systems or servers  (e.g., servers A, B and ) that are interconnected with one or more associated storage devices  (e.g., storage devices A, B . . . ) through an interconnect fabric . One or more client systems A-D may access the SAN by accessing one or more of the servers  via a network . Network  may include wired or wireless communication mechanisms such as, for example, Ethernet, LAN (Local Area Network), WAN (Wide Area Network), or modem, among others. Note that throughout this disclosure, drawing features identified by the same reference number followed by a letter (e.g., servers A-) may be collectively referred to by that reference number alone (e.g., servers ).","Each of the storage devices  may include any of one or more types of storage devices including, but not limited to, storage systems such as RAID (Redundant Array of Independent Disks) systems, disk arrays, JBODs (Just a Bunch Of Disks, used to refer to disks that are not configured according to RAID), tape devices, and optical storage devices. These devices may be products of any of a number of vendors including, but not limited to, Compaq\u00ae Inc., EMC\u00ae Corp., and Hitachi\u00ae Ltd. Servers  may run any of a variety of operating systems such as a Unix\u00ae operating system, Solaris\u00ae operating system, or a Windows\u00ae operating system. Each server  may be connected to the fabric  via one or more Host Bus Adapters (HBAs).","Fabric  includes hardware that connects servers  to storage devices . The fabric  may enable server-to-storage device connectivity through Fibre Channel switching technology. The fabric  hardware may include one or more switches (also referred to as fabric switches), bridges, hubs, or other devices such as routers, as well as the interconnecting cables (e.g., for Fibre Channel SANs, fibre optic or copper cables), as desired.","In one embodiment, the SAN may use the Network File System (NFS) protocol to provide access to shared files on the SAN. Using NFS, each server  may include a logical hierarchy of files (e.g., a directory tree) physically stored on one or more of storage devices  and accessible by the client systems  through the server . These hierarchies of files, or portions or sub-trees of the hierarchies of files, are referred to herein as \u201cfile systems.\u201d In one embodiment, the SAN components may be organized into one or more clusters to provide high availability, load balancing, and\/or parallel processing. For example, in , a selected set of the servers A, B . . . may be operated in a cluster configuration. Generally speaking, any of servers  or clients  may be configured to perform backup and restore operations as described above.","It is noted that the above described embodiments may comprise software. In such an embodiment, the program instructions which implement the methods and\/or mechanisms may be conveyed or stored on a computer accessible medium. Numerous types of media which are configured to store program instructions are available and include hard disks, floppy disks, CD-ROM, DVD, flash memory, Programmable ROMs (PROM), random access memory (RAM), and various other forms of volatile or non-volatile storage. Still other forms of media configured to convey program instructions for access by a computing device include terrestrial and non-terrestrial communication links such as network, wireless, and satellite links on which electrical, electromagnetic, optical, or digital signals may be conveyed. Thus, various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer accessible medium.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3","i":"b "},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3","i":"c "},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7","i":"a "},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7","i":"b "},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
