---
title: Method and apparatus for handling requests for files in a data processing system
abstract: A method, apparatus, and computer instructions for use in an operating system for managing requests for files. A request for a switch file from an application is received. The application points to the switch file. Many files may point to the same switch file. Location information for the switch file points to a set of files. A file from the set of files based on system information to form an identified file is identified. The identified file passes to the application. The system information may be already present within the system or passed to the system by a user or process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07302452&OS=07302452&RS=07302452
owner: International Business Machines Corporation
number: 07302452
owner_city: Armonk
owner_country: US
publication_date: 20030605
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates generally to an improved data processing system and in particular, to a method and apparatus for processing data. Still more particularly, the present invention provides a method, apparatus, and computer instructions for managing requests for files.","2. Description of Related Art","An operating system is a master control program that runs the computer. The first program loaded when the computer is turned on is referred to as the \u201ckernel\u201d and is the main part of the operating system, which resides in memory at all times. The operating system sets the standards for all application programs that run in the computer. The applications \u201ctalk to\u201d the operating system for all user interface and file management operations.","Data management is a function provided by the operating system. This function keeps track of the data on storage devices, such as disk, tape and optical storage devices. An application or program deals with data by file name and a particular location within the file. The operating system's file system knows where that data is physically stored (which sectors on disk) and intersection between the application and operating system is through the programming interface. Whenever an application needs to read or write data, it makes a call to the operating system. This call is also referred to as an application programming interface (API) call. The operating system employs a file system to allow for easy storage, location, and retrieval of data.","It is common for users to have multiple applications that use the same library file in a file system. These applications, however, may require different levels or versions of the library file to run correctly. Further, in some cases, different users may require different configuration files for the same application. Currently, a user must remove one file and install a second file if a particular library is needed. Both libraries use the same name, but are different versions, and, oftentimes, one application may not run correctly without the appropriate version of the library. In some cases, a user may execute a script and run the script prior to executing the application. These types of mechanisms for accessing the appropriate file require much time and effort for users.","Therefore, it would be advantageous to have an improved method, apparatus, and computer instructions for managing access to files in a data processing system.","The present invention provides a method, apparatus, and computer instructions for use in an operating system for managing requests for files. A request for a switch file from an application is received. The application points to the switch file. Many applications may point to the same switch file. Location information for the switch file points to a set of files. A file from the set of files based on system information to form an identified file is identified. The identified file passes to the application. The system information may be already present within the system, or passed to the system by a user or process.","With reference now to the figures and in particular with reference to , a pictorial representation of a data processing system in which the present invention may be implemented is depicted in accordance with a preferred embodiment of the present invention. A computer  is depicted which includes system unit , video display terminal , keyboard , storage devices , which may include floppy drives and other types of permanent and removable storage media, and mouse . Additional input devices may be included with personal computer , such as, for example, a joystick, touchpad, touch screen, trackball, microphone, and the like. Computer  can be implemented using any suitable computer, such as an IBM eServer computer or IntelliStation computer, which are products of International Business Machines Corporation, located in Armonk, N.Y. Although the depicted representation shows a computer, other embodiments of the present invention may be implemented in other types of data processing systems, such as a network computer. Computer  also preferably includes a graphical user interface (GUI) that may be implemented by means of systems software residing in computer readable media in operation within computer .","With reference now to , a block diagram of a data processing system is shown in which the present invention may be implemented. Data processing system  is an example of a computer, such as computer  in , in which code or instructions implementing the processes of the present invention may be located. Data processing system  employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor  and main memory  are connected to PCI local bus  through PCI bridge . PCI bridge  also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus  may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter , small computer system interface SCSI host bus adapter , and expansion bus interface  are connected to PCI local bus  by direct component connection. In contrast, audio adapter , graphics adapter , and audio\/video adapter  are connected to PCI local bus  by add-in boards inserted into expansion slots. Expansion bus interface  provides a connection for a keyboard and mouse adapter , modem , and additional memory . SCSI host bus adapter  provides a connection for hard disk drive , tape drive , and CD-ROM drive . Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.","An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in . The operating system may be a commercially available operating system such as Windows XP, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . \u201cJava\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented programming system, and applications of programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processor .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash read-only memory (ROM), equivalent nonvolatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the present invention may be applied to a multiprocessor data processing system.","For example, data processing system , if optionally configured as a network computer, may not include SCSI host bus adapter , hard disk drive , tape drive , and CD-ROM . In that case, the computer, to be properly called a client computer, includes some type of network communication interface, such as LAN adapter , modem , or the like. As another example, data processing system  may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system  comprises some type of network communication interface. As a further example, data processing system  may be a personal digital assistant (PDA), which is configured with ROM and\/or flash ROM to provide non-volatile memory for storing operating system files and\/or user-generated data.","The depicted example in  and above-described examples are not meant to imply architectural limitations. For example, data processing system  also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system  also may be a kiosk or a Web appliance.","The processes of the present invention are performed by processor  using computer implemented instructions, which may be located in a memory such as, for example, main memory , memory , or in one or more peripheral devices -.","The present invention provides a method, apparatus, and computer instructions for managing requests made by applications for files. A switch file type is used to allow for multiple applications to point to the same file, but access different files. A switch file type is similar to a link, except this type of data structure points to different files based on system information. This system information may be, for example, a user identification or an identification of an application. Other types of system information may be any indentifier that is available to the operating system. This type of system information may include, for example, a group ID, a process group ID, a machine architecture, a number of processors, a uname, and environmental variable. Further, system information could be made available to the system in which this information is passed by a user or process to the operating system. The switch file type in these examples is a data structure that may take different forms. For example, the data structure may be a record in a file system or a table in the operating system.","Turning next to , a diagram illustrating components used in managing requests for files is depicted in accordance with a preferred embodiment of the present invention. In this example, operating system  includes switch file process , which is employed to create switch file records . These records include the information needed to point to the appropriate files based on system information. The different records in switch file records  may be created by various mechanisms. For example, a user may issue a command to create the switch file record. Alternatively, a graphical use interface may provide a conduit for prompting and receiving information to create associations of files with system information.","For example, a user may issue a command to create a switch file using the following command and parameters: <create> <switch_file> <target_file> <additional_info>","The parameter <switch_file> is the name and path of the file that will be called by the application. The parameter <target_file> is the name of the file that is to be used and includes the path to the file. The parameter <additional_info> defines the system information that is to be used to select the target file. For example, to link a user ID Luke to version 1.3 of \/usr\/lib\/library, the following command is issued: crsf\/usr\/lib\/library\/usr\/lib\/library.1.3 userid Luke.","In response to this command, switch process  creates a record in switch file records  to link the switch file to the application and to provide for the redirect to the appropriate file based on the system information. Additional links may be placed in the record by additional commands. For example, an additional link to the switch file record described above may be made for a different user ID as follows: crsf\/usr\/lib\/library\/usr\/lib\/library.1.4 userid Joe.","Applications , , and  may generate requests , , and , which are handled by file system . File system  provides access to files, such as files , , , and . These files may take different forms, such as library files, configuration files, executable files, dynamic link library files, and other types of data files.","If the file request is for a switch file record in switch file records , that record is used to identify the appropriate file to be returned to the applications. If the system information used is a user ID, the appropriate file within a switch file record may be identified based on the current user that is logged into the system or application. Other types of system information may be used, such as the name of an application. When the appropriate file is identified, this file is passed to the application making the request.","Turning next to , a diagram of data structures used in a switch file system is depicted in accordance with a preferred embodiment of the present invention. In this example, the file system is a UNIX based file system, which may be implemented as file system  in . In this example, switch file records, such as switch file records , take the form of switch inodes. In these examples, a file is represented by an inode, which is basically a record that stores information about a specific file on a disk. An inode is also referred to as an index node and contains information, such as user and group identifiers of the file, the times of last modification and access, a count of the number of hard links to the file, and the type of file. Additionally, an inode contains pointers to disk blocks, containing the data contents of the files.","In these examples, a modified version of the inode, referred to as a switch inode is employed to act as a switch file type. Inode  is set up based on user IDs. Inode  includes entries , , and  in these examples. These entries are direct entries, which contain pointers that point to file inode  and file inode . These file inodes point to data blocks for the actual files. Entry  contains the user ID named \u201cUser A\u201d, entry  contains the user ID named \u201cUser B\u201d. Both of these entries contain path information to file 1. File 1 is represented by file inode . Entry  contains the user ID named \u201cUser C\u201d. This entry points to file inode .","These different file inodes point to different files, such as configuration files. In this example, switch inode  points to two different file inodes, file inode  and file inode . These file inodes point to the actual data for the files. When the appropriate file inode is selected, the file system will return the file associated with the selected inode to the application.","In addition to pointers to direct blocks as illustrated in entries , , and , indirect entries may be employed. For example, single indirect entry  points to switch inode , which in turn points to file inode  and file inode . With indirect switch inodes, the file system is able to point to larger amounts of data. Thus, if enough data is present in the different files associated with user IDs, an indirect entry, such as single indirect entry  may be used.","In this example, entry  is a double indirect entry, which points to switch inode . In turn, switch inode  points to switch inode  and switch inode . Switch inode  points to file inode  and file inode . In a similar fashion, switch inode  points to file inode  and file inode . Further, higher levels of indirects, such as a triple indirect in entry  may be employed, if needed. In addition, the system information used in this example are user IDs. Of course, other types of system information may be implemented depending on the particular selection.","Turning next to , a flowchart of a process for creating a switch file type is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  may be implemented as switch file process  within operating system  in .","The process begins by receiving a request to create a switch file type (step ). The switch file type is a data structure that may take various forms, such as an inode of other data structure employed in a file system, depending on the actual implementation. Thereafter, the type of information is identified (step ). Step  is used to identify the type of system information that is to be stored in the record. This system information may be, for example, a user ID.","Thereafter, the data for the type of information is identified (step ). The actual user ID is identified in this step. The file is then identified (step ). In these examples, the data is the location and name of the file. This information is stored as a pointer to the data for the file. In particular, the pointer points to a file inode, which points to the actual file data. The information identified in steps  and  may be obtained using various mechanisms. For example, this information may be obtained from parameters in a command entered by a user. Additionally, a graphical user interface may be employed to prompt for and receive the information.","After the information has been identified, the data and the file are stored in the switch file record (step ). A determination is then made as to whether more entries are to be made for the switch file record (step ). If additional entries are to be made, the process returns to step . Otherwise, the process terminates.","Turning next to , a flowchart of a process for handling requests for files is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  may be implemented in file system  in these examples. As illustrated, file system  includes switch inodes as described with respect to  and  above.","The process begins by receiving a request for a file (step ). In these examples, the request is received from an application, such as application  in . This request typically includes a path and file name. A determination is made as to whether the request is for a switch type file (step ). If the request is for a switch type file, then information for the switch file is identified (step ). Information identified in step  is information such as a user ID or application name. This information may be readily available to the system of the user may be prompted to enter information depending on the implementation.","Thereafter, the actual file is located using the identified information and the request (step ). This step is performed by examining switch file records, such as inode  in  to determine an actual file to be returned to the requesting application. With a switch file record, the system information is used as an index or key to find the appropriate entry within the switch inode. The identified entry contains a pointer to a file inode, which points to the actual file. Thereafter, the file identified is returned to the application (step ), with the process terminating thereafter.","With reference again to step , if the file is not for a switch type file, the file requested is returned to the application using only the request (step ), with the process terminating thereafter. In this instance, the file system only identifies a file inode to obtain pointers to the location of the data making up the file. In these examples, a pointer to the inode is indirectly passed to the application requesting the file. The application receives a file descriptor used by the kernel to index a table of open files for the current process. Each table entry contains a pointer to a file structure that in turn points to the inode.","In this manner, the present invention provides a method, apparatus, and computer instructions for managing file requests. The mechanism of the present invention allows for the same file to be requested by an application, but allowing for the return of different files depending on system information. For example, a browser program requesting a configuration file may receive different files depending on the particular user ID that is currently on the system. Further, two versions of an application used on a system may both request the same dynamic link library file. In other words, both applications request a file having the same file name and path. Each application may require a different version of the dynamic link library in order to properly execute. The mechanism of the present invention may result in different versions of a dynamic link library file being returned depending on the version of the application requesting the file.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
