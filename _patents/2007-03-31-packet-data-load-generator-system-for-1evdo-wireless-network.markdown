---
title: Packet data load generator system for 1×-EVDO wireless network
abstract: A packet data load generator (PDLG) system, and method for testing the PDLG system, includes a Linux-based computer terminal having multiple 1x-EVDO wireless interface cards, e.g., Sierra Wireless AirCards®, directly interfaced therewith. PCI-to-PCMCIA adapter cards are used for connecting the wireless cards to the terminal. The terminal also includes a Linux control program for controlling the multiple wireless cards on a single terminal. In operation, the wireless interface cards are controlled to establish multiple simultaneous 1x-EVDO calls between the terminal and a 1x-EVDO wireless network, e.g., each wireless interface card supports one call with the network. Packet data is transferred between the terminal and the network, in effect simulating a multiple 1x-EVDO call load on the network. PDLG software in place on the network is monitored and/or tested. Multiple similarly configured terminals may be provided for a large number of 1x-EVDO calls, e.g., 40-50, in a laboratory setting.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07894384&OS=07894384&RS=07894384
owner: Alcatel-Lucent USA Inc.
number: 07894384
owner_city: Murray Hill
owner_country: US
publication_date: 20070331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to communications and, more particularly, to wireless communication systems.","Wireless, radio frequency communication systems enable people to communicate with one another over long distances without having to access landline-connected devices such as conventional telephones. While early systems were primarily configured for voice communications, technological improvements have enabled the development of \u201c3-G\u201d (third generation) and similar wireless networks for both voice and high-speed packet data transfer. For example, CDMA-based, \u201c1x-EVDO\u201d (Evolution Data Optimized) wireless communication networks, now implemented in many parts of the U.S. and elsewhere, use the CDMA2000\u00ae 3-G mobile telecommunications protocol\/specification for the high-speed wireless transmission of both voice and non-voice data. A typical 1x-EVDO wireless network  is shown in simplified form in . The network  includes one or more fixed base stations  having various transceivers and antennae for wireless communications with a number of distributed wireless units such as mobile phones and wireless-equipped portable computer terminals , e.g., laptop computers. For conducting wireless communications between the base stations  and the wireless units , , the network  utilizes a CDMA (code division multiple access) spread-spectrum multiplexing scheme. In CDMA-based networks, transmissions from wireless units to base stations are across a single frequency bandwidth known as the reverse link , e.g., a 1.25 MHz or greater bandwidth centered at a first designated frequency. Generally, each wireless unit , is allocated the entire bandwidth all the time, with the signals from individual wireless units being differentiated from one another using an encoding scheme. Transmissions from base stations to wireless units are across a similar frequency bandwidth (e.g., a 1.25 MHz or greater bandwidth centered at a second designated frequency) known as the forward link . The forward and reverse links may each comprise a number of traffic channels and signaling or control channels, the former primarily for carrying voice data, and the latter primarily for carrying the control, synchronization, and other signals required for implementing CDMA communications. Under 1x-EVDO, the network  also utilizes another radio channel  (e.g., a third 1.25 MHz or greater frequency bandwidth) dedicated to carrying high-speed packet data, with forward data rates up to 3.1 Mbit\/s and reverse rates up to 1.8 Mbit\/s. The network  may be geographically divided into contiguous cells, each serviced by a base station, and\/or into sectors, which are portions of a cell typically serviced by different antennae\/receivers supported on a single base station.","For high-speed packet data communications over the 1x-EVDO data channel , a laptop terminal , for example, will typically be provided with a 1x-EVDO wireless interface card , e.g., a miniaturized 1x-EVDO transceiver\/chipset, antenna, and computer interface. For example, the wireless interface card  may be configured as a PCMCIA card for insertion into a PCMCIA card expansion slot  of the laptop. One example of this type of 1x-EVDO wireless interface card is the AirCard\u00ae brand from Sierra Wireless. A driver program  is provided along with the wireless interface card  for controlling the interface card  for data transfer over the 1x-EVDO airlink . Typical driver programs  are compatible with the Microsoft Windows\u00ae operating system , and support a single laptop computer . For wirelessly transferring data in ongoing operations, e.g., downloading a large file from the Internet  to the laptop , the driver  controls the interface card  in a standard manner to open a communication link between the laptop and the wireless network . Depending on the particular characteristics of the wireless network  and interface card , the link may be \u201calways on.\u201d Data addressed to the interface card \/laptop is sent in packet form from the Internet , possibly through a security firewall  of the network , through a core IP or other packet data network  portion of the network , and to a packet data serving node (\u201cPDSN\u201d) . From the PDSN , the packet data is routed to a packet control function (\u201cPCF\u201d)  in place on a radio network controller (\u201cRNC\u201d) , which manages the relay of data packets between the PDSN  and base stations . (As should be appreciated, if the network  has more than one RNC, the data addressed to the laptop terminal is sent to the RNC  that is linked to the base station  in communication with the laptop .) The packet data is sent from the PCF  to the base station  for transmission to the laptop . The network side may include packet data load generator (\u201cPDLG\u201d) server software  for generating data packets for transmission over the air interface , , . Correspondingly, the terminals , will include PDLG client software  for receiving 1x-EVDO data packets, which may be part of the driver program .","The PDLG server software  is used to generate packet data transmissions. Originally, PDLG software was designed to support CDMA \u201c3G-1x\u201d mobile phones. (3G-1x was an early third-generation technology featuring data transmissions of up to 153 kbps on both the forward and reverse links.) In 2001, when 1x-EVDO was introduced (1x-EVDO was originally called \u201cHDR,\u201d which stood for high data rate), the PDLG software was modified to support 1x-EVDO access terminals for generating data call load on 1x-EVDO base stations. By the beginning of 2002, the PDLG software was able to support \u201cHornet\u201d and \u201cChester\u201d access terminals, both of which were early 3-G 1x-EVDO access terminal prototypes. In the same year Sierra Wireless introduced the first commercial access terminal, called the AirCard\u00ae 575, to support high-speed data calls over the 1x EV-DO network. The PDLG software was revised to support the AirCard\u00ae 575.","To test PDLG software , it is typically the case that the software is set up and executed in a test environment (e.g., a testing lab) that mimics the actual wireless operating environment, including carrying out multiple calls\/transmissions at one time. Thus, the PDLG software  is tested in use with a plurality of actual AirCards\u00ae, each of which requires a separate laptop terminal to support a single call. Also, the AirCard\u00ae driver program  only works with the Microsoft Windows\u00ae operating system , and supports only one AirCard\u00ae per laptop. Because of these factors, 1x-EVDO testing facilities are unreliable and expensive to build.","In particular,  shows an existing test facility . The facility  includes a PDLG client terminal  (running Linux), which has multiple network interfaces -. One interface is connected to the wireless network  (or possibly to an internal network), while the other interfaces , are connected to network interconnection hubs , . For example, each hub , may be a 24-port hub, with one of the ports being connected to the PDLG client terminal and the other 23 ports being respectively connected to a plurality of laptops -, each of which is used for supporting a single call\/communication. Thus, by using two 24-port hubs and one 4-port hub, it is possible to connect  laptops -to the PDLG client terminal  for testing operation of the PDLG software in the context of 48 simultaneous 1x-EVDO calls. Each laptop -includes a network interface  or the like, an expansion slot  for receiving a PCMCIA card, and an AirCard\u00ae  (with a PCMCIA connector) connected to the laptop via the expansion slot . Similar to as shown in , each laptop -runs the Windows\u00ae operating system  and includes a Windows\u00ae-based AirCard\u00ae driver program . Each AirCard\u00ae  is connected to the RF interface  of the network , either wirelessly using the AirCard\u00ae's built-in antenna or via an RF feed cable attached to the AirCard\u00ae's antenna input. The RF interface  may be an actual base station, or it may be a transceiver system for simulating the operation of a base station. The laptops -, hubs , , and one or more electric fan units  are housed in a storage cabinet . In operation, a PDLG script  is run on the PDLG client terminal  to generate the call load on one or more of the laptops -. Once the calls are established on the laptops -, data is moved between the laptops -and a PDLG server terminal  located on the PDSN side of the network .","Considering the large number of laptop terminals -, AirCards\u00ae , and support components (e.g., fan units  and hubs , ), as well as the cabinet , test facilities  are very expensive and time consuming to set up and operate. For example, to build one fully loaded cabinet  with forty-eight laptops may cost as much as $70,000. Also, it may involve two to three persons working for up to two weeks to build the physical cabinet and two persons working for two to three weeks to install and configure the laptop terminals -and the PDLG client terminal . System reliability issues are also a problem, including laptop terminal lock-up due to over heating, computer virus infection exacerbated through the use of the Windows\u00ae operating system , incompatibility problems between the AirCard\u00ae drivers  and Windows\u00ae , and that maintaining hundreds of laptop terminals is very time consuming and prone to error.","An embodiment of the present invention relates to a packet data load generator (\u201cPDLG\u201d) system for a 1x-EVDO wireless communication network, and to a method for communicating over the network, e.g., for testing the PDLG system. Initially, a plurality of discrete communication links are established between a single terminal and the wireless network using a plurality of wireless units connected to the terminal. By \u201cdiscrete,\u201d it is meant that each wireless unit establishes a logically separate and distinguishable communication channel for transferring one or more separate data streams. Then, packet data is transferred between the terminal and wireless network over the communication links. The wireless units are electronic devices configured for transmitting and receiving data over a radio-frequency (RF) communication link. The terminal may be a computer terminal or other processor-based electronic device configured to control the wireless units for transmitting and receiving data. The wireless units are directly interfaced with the terminal, meaning that no other general-purpose processor-based devices are interposed between the terminal and wireless units and\/or required for operating the wireless units.","In another embodiment, thereby, the single terminal (with the plurality of wireless units connected thereto) obviates the need to provide a large number of laptop or other computer terminals for operating the wireless units. The operation of a PDLG in place on the network (e.g., at a base station) may be monitored while packet data is being transferred to and from the terminal over the communication links. As should be appreciated, the communication links simulate a plurality of separate calls over the wireless network. Operation of the PDLG is monitored in regards to the plurality of simulated calls, for testing purposes.","In another embodiment, the method is used for communications over a 1x-EVDO wireless network. In such a case, the communication links are 1x-EVDO data channels, and the wireless units are 1x-EVDO wireless interface cards such as Sierra Wireless AirCards\u00ae.","In another embodiment, the system includes two or more computer terminals each having a number of wireless units directly interfaced therewith. For example, each terminal may have up to ten wireless units attached to the terminal's local bus, e.g., a PCI bus. The terminals are used to simulate a large number of wireless network calls\/communications, for testing operation of the PDLG in \u201creal world\u201d conditions.","With reference to FIGS.  and -B, various embodiments of a packet data load generator (\u201cPDLG\u201d) system  and a method for communicating over a network, e.g., for testing the PDLG system, are implemented on or as part of a wireless communication network , e.g., a CDMA-based 1x-EVDO network or other wireless network. The system includes a client terminal  (e.g., a computer terminal or other processor-based device) having one or more built-in card expansion slots , e.g., one or more standard PCI expansion slots. A number of wireless units, e.g., 1x-EVDO capable wireless interface cards -, are directly connected to the card expansion slot(s) , that is, there are no other general-purpose processor-based devices disposed between the interface cards -and terminal  and\/or required for operating the wireless interface cards -. Each wireless interface card -is a transceiver-equipped device configured for carrying out RF communications, for transferring data over a 1x-EVDO channel  or the like between the terminal  and the wireless network . The terminal  may include a standard network interface card  for connecting the terminal  to the wireless network . Also, the terminal  may run the Linux operating system  in conjunction with a Linux-based PDLG control program  for controlling the wireless interface cards -. The control program  supports the use of multiple wireless interface cards -and multiple simultaneous calls\/communication links on a single terminal .","In operation, the control program  controls the 1x-EVDO wireless interface cards -to establish a discrete communication link between each card -and the wireless network , over the RF interface  of the wireless network . In effect, the wireless interface cards -are controlled to mimic a plurality of simultaneous 1x-EVDO calls\/data links on the wireless network , just as if a number of individual users were accessing the network  for separate and discreet 1x-EVDO communications such as downloading large files from the Internet. Packet data or other data is transferred between the terminal  and the wireless network  using the wireless interface cards -. As the data is being transferred (simulating a number of simultaneous 1x-EVDO calls on the network), a PDLG  in place on the network (e.g., at a base station, a PDLG server terminal , or elsewhere) may be monitored to test its operation on the network.","As should be appreciated, because multiple wireless interface cards -are directly interfaced with the client terminal , and with the control program  being configured to control the multiple wireless interface cards -for establishing and\/or maintaining a number of simultaneous calls\/communications links with the network , there is no longer a need to provide a separate laptop or other terminal for each wireless interface card -. Thus, the need for cabinets, fan units, hubs, and the like is eliminated, as is the need to setup and maintain the multiplicity of laptops. Additionally, because the control program  is a Linux-based program, with the terminal  running Linux as its operating system, the system  is much more reliable, especially in terms of virus protection, than a system that uses Microsoft Windows\u00ae.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["80","82","94","96","98","100","90","92","98","94","100","102","104","106","106","102","82","106","106","106","106","108","108","108","108","106","106","106","106","108","108","110","108","108","106","106","82","110","110","110","62","10"],"i":["a","e ","a","e ","a","e ","a","e ","a","e ","a","e ","a","e ","a","e ","a","e ","a","e"]},"The system  shown in  works similarly to the system shown in . The CPU  and Linux operating system  execute the control program  in a standard manner. The control program  controls the wireless interface cards  directly through the PCI\/PCMCIA slots to establish a number of discrete 1x-EVDO communication links between the terminal  and the wireless network , e.g., there is one 1x-EVDO communication link between each wireless interface card  and the wireless network . (In the system as illustrated in  there would be up to 10 simultaneous discreet communication links.) Packet data is transferred between the terminal  and the wireless network  over the various communication links, in effect simulating a plurality of 1x-EVDO calls. (More specifically, the transmissions are actual 1x-EVDO calls, but simulate the situation of a number of different users simultaneously accessing the network for separate 1x-EVDO calls.) As the data is transferred, PDLG software on the network  is monitored\/tested, e.g., for determining how the PDLG software functions with respect to a plurality of 1x-EVDO calls.","For a PDLG testing laboratory, it will typically be the case that a large number of 1x-EVDO communication links are required for simulating actual network conditions. For example, forty to fifty links may be required. If a single terminal  has enough PCI slots, or if the PCI-to-PCMCIA adapters -each have more than two PCMCIA slots, a single terminal may be suitable for the system. Otherwise, four or five terminals configured as shown in  may be provided, each carrying ten wireless interface cards , for a total of 40-50 wireless interface cards. As should be appreciated, coordination between the terminals  is not required since each wireless interface card  is controlled to establish a discreet communication link\u2014a greater number of terminals and wireless interface cards simply increases the available potential call load.","As noted, the PDLG control program  is configured to control multiple wireless interface cards , through their direct connection to the local buses ,  by way of the PCI\/PCMCIA slots, for establishing multiple 1x-EVDO calls from the single computer terminal . Operation of the control program  will be further explained herein for the system configuration where each wireless interface card  is a Sierra Wireless AirCard\u00ae 580. However, control programs  can be easily adapted for controlling different types of wireless interface cards using standard programming methods.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5","b":["112","114","116","116","118","118","120","114","116","116","122","112","124","92","124","128","116","116","122","128","114","116","116","122","128","124","130"],"i":["a","d ","a","d ","a","d","a","c ","a","b "]},"Each wireless interface card  (e.g., AirCard\u00ae 580) includes an internal chipset that implements the 1x-EVDO communication functionality. The card internally configures itself as a USB hub that emulates two USB serial devices or ports. The first USB serial port is the \u201cmodem,\u201d e.g., it provides a serial modem interface that accepts AT commands and PPP data. The second USB serial port is reserved for diagnostics purposes and is unused. When the wireless interface card  is attached to a PCI-to-twin-PCMCIA adapter , the Linux file system  generates information  relating to the USB serial ports emulated by the interface card . Based on this information, the manager program  generates node files , for the two USB serial ports. Within the context of the PDLG system , one of the serial ports is unused, and the other is used to make 1x-EVDO data calls.","As part of the process of configuring the Linux system  for controlling the wireless interface cards , a device driver is associated with the wireless interface cards . Because the wireless interface cards emulate USB serial ports, a generic USB-to-serial driver is typically used, which is registered with the Linux kernel . For this, the driver is registered with both a USB-to-serial core\/layer portion of the kernel, and with a USB core portion of the kernel . (The USB core is a subsystem in the Linux operating system, with a specific application programming interface to support USB devices and host controllers. The USB-to-serial layer acts as an interface or subsystem for accommodating serial port drivers.) Registering with the USB-to-serial core tells it to call the driver when new devices are detected, while registering with the USB core is required for informing it regarding what kind of devices the driver can accept.","To register with the USB core, a list of the USB devices with which the driver functions is entered into the Linux kernel , in typical USB device ID format:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"static struct usb_device_id id_table [ ] = {"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x0018) }, \/* Sierra Wireless MC5720 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x0020) }, \/* Sierra Wireless MC5725 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x0017) }, \/* Sierra Wireless EM5625 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x0012) }, \/* Sierra Wireless AirCard 580 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x0019) }, \/* Sierra Wireless AirCard 595 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x6802) }, \/* Sierra Wireless MC8755 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x6803) }, \/* Sierra Wireless MC8765 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x6812) }, \/* Sierra Wireless MC8775 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1199, 0x6820) }, \/* Sierra Wireless AirCard 875 *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0xf3d, 0x0112) }, \/* AirPrime CDMA Wireless PC Card *\/"},{"entry":"\u2003\u2003{ USB_DEVICE(0x1410, 0x1110) }, \/* Novatel Wireless Merlin CDMA *\/"},{"entry":"\u2003\u2003{ }"},{"entry":"};"},{"entry":"MODULE_DEVICE_TABLE(usb, id_table);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"80"},"Subsequently, the USB device-driver structure is created using this ID information:",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static struct usb_driver sierra_driver = {"]},{"entry":[{},"\u2003\u2003.name \u2003\u2002= \u201csierra\u201d,"]},{"entry":[{},"\u2003\u2003.probe \u2003= usb_serial_probe,"]},{"entry":[{},"\u2003\u2003.disconnect = usb_serial_disconnect,"]},{"entry":[{},"\u2003\u2003.id_table \u2002= id_table,"]},{"entry":[{},"\u2003\u2003.no_dynamic_id = 1,"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":[{},{},{},{}]},"For disconnecting the wireless interface cards , the same steps are carried out, but in reverse order. First, the device driver is de-registered with the USB-to-serial core:","usb_serial_unregister (&sierra_driver);","Then, it is de-registered with the USB core:","usb_unregister (&sierra_driver);","Once the wireless interface cards  are connected and set up as described above, a message log (partially reproduced below) will reveal that the devices  are identified on the Linux system , as follows:","usbserial_generic 6-1:1.0: Generic converter detected","usb 6-1: Generic converter now attached to ttyUSB0","usbserial_generic 6-1:1.1: Generic converter detected","usb 6-1: Generic converter now attached to ttyUSB1","usbserial_generic 11-1:1.0: Generic converter detected","usb 11-1: Generic converter now attached to ttyUSB2","usbserial_generic 11-1:1.1: Generic converter detected","usb 11-1: Generic converter now attached to ttyUSB3","usbserial_generic 7-1:1.0: Generic converter detected","usb 7-1: Generic converter now attached to ttyUSB4","usbserial_generic 7-1:1.1: Generic converter detected","usb 7-1: Generic converter now attached to ttyUSB5 . . . .","usbcore: registered new driver usbserial_generic","usbcore: registered new driver usbserial","As discussed above, each wireless interface card  is recognized as having two USB serial ports. Thus, in the message log above, the first wireless interface card  is assigned \u201cttyUSB0\u201d and \u201cttyUSB1,\u201d with the former being the modem port for making data calls. The message log also indicates that the drivers have been registered.","After setting up the operating system  for use with the wireless interface cards , the PDLG control program  is used to invoke the calls or call load and to transfer data to the wireless cards  for transmission. The control program  includes a master PDLG script  and a bash script . (The \u201cbash\u201d script  is a program listing that runs on bash, which is the default shell or user interface on most Linux operating systems, i.e., the script  is a set of commands recognized by the Linux operating system .) The bash script  is used to invoke the master PDLG script , including obtaining certain data required for operating the PDLG script , while the master PDLG script  is configured to invoke sessions, establish calls, and transfer data. A sample user-defined script , referred to as \u201cxx.pdlg,\u201d is shown below:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[pdlg@2e1evdo5 ~]$"},{"entry":"[pdlg@2e1evdo5 ~]$ pwd"},{"entry":"\/home\/pdlg"},{"entry":"[pdlg@2e1evdo5 ~]$ cat xx.pdlg"},{"entry":"! \/bin\/bash"},{"entry":"DEF_MIN=5 \u2003\u2003# Default run minutes"},{"entry":"RUNMIN=${1:-$DEF_MIN}"},{"entry":"SESSIONS_FILE=sessions\u2003\u2003# Default sessions file is \u201csessions.\u201d"},{"entry":"TESTDIR=\u2018pwd\u2018\/\u2018date +%m%d-%H:%M\u2018"},{"entry":"mkdir $TESTDIR"},{"entry":"cp $SESSIONS_FILE $TESTDIR"},{"entry":"pdlg -sesfile $SESSIONS_FILE -network -logpath $TESTDIR -duration"},{"entry":"$RUNMIN -reportfreq 60 2>&1 | tee -i $TESTDIR\/cout"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the example above, two inputs are taken from the user, \u201csessions\u201d and \u201ctime.\u201d The former refers to a session file , which defines the data to be transferred and manner of transference, e.g., FTP, HTTP, and\/or UDP. The default name for the session file is simply \u201csessions.\u201d The \u201ctime\u201d value indicates how long the call load is to be run. The default call load time in this example is 5 minutes. \u201cpdlg\u201d refers to the master PDLG script , which is invoked by the bash script . As indicated, the bash script  passes various values\/fields to the PDLG script , including the identity of the sessions file, the duration time, and the path for logging data ($TESTDIR).","The following is illustrative of a sample \u201csession\u201d file :",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[pdlg@2e1evdo5 ~]$ cat sessions"},{"entry":"# echo -data r -time r -iat r -random -file filename [ -load r ]"},{"entry":"#\u2003\u2003[ -pksize r ] [ -window n ]"},{"entry":"#"},{"entry":"# max -data r -time r -iat r [ -load n ] [ -pksize n ]"},{"entry":"#"},{"entry":"# delay_echo -data r -delay r -iat r -random -file filename [ -load n ]"},{"entry":"# \u2003\u2003\u2003[-pksize n ]"},{"entry":"#"},{"entry":"# ftp -upload junk_hp [ -iat r ] [ -repeat r ] [ -pksize r ]"},{"entry":"#"},{"entry":"# ftp [ -iat r ] [ -download filename ] [ -upload filename ] [ -passive ]"},{"entry":"#"},{"entry":"############################################################"},{"entry":"(100 (ftp -upload junk_hp -iat 12)) (100 (ftp -download junk_hp -iat 12))"},{"entry":"(101 (ftp -upload junk_hp -iat 12)) (101 (ftp -download junk_hp -iat 12))"},{"entry":"(102 (ftp -upload junk_hp -iat 12)) (102 (ftp -download junk_hp -iat 12))"},{"entry":"(103 (ftp -upload junk_hp -iat 12)) (103 (ftp -download junk_hp -iat 12))"},{"entry":"(104 (ftp -upload junk_hp -iat 12)) (104 (ftp -download junk_hp -iat 12))"},{"entry":"(105 (ftp -upload junk_hp -iat 12)) (105 (ftp -download junk_hp -iat 12))"},{"entry":"(106 (ftp -upload junk_hp -iat 12)) (106 (ftp -download junk_hp -iat 12))"},{"entry":"(107 (ftp -upload junk_hp -iat 12)) (167 (ftp -download junk_hp -iat 12))"},{"entry":"(108 (ftp -upload junk_hp -iat 12)) (108 (ftp -download junk_hp -iat 12))"},{"entry":"(109 (ftp -upload junk_hp -iat 12)) (109 (ftp -download junk_hp -iat 12))"},{"entry":"(110 (ftp -upload junk_hp -iat 12)) (110 (ftp -download junk_hp -iat 12))"},{"entry":"(111 (ftp -upload junk_hp -iat 12)) (111 (ftp -download junk_hp -iat 12))"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The functional configuration of the PDLG master script  is shown in , as it interrelates to the operation of the bash script  as described above and as shown in . It is assumed that the wireless interface cards  have been connected and the Linux system  set up for operation therewith, as described above, as at Step .","At Step , a user invokes the bash script , e.g., by entering an identifier of the script into the Linux bash shell by way of a command line prompt. At Step , the bash script  is executed by the Linux system , including prompting the user for the identity of the sessions file  and the time value for how long the call load is to be run. (Default values are used otherwise.) At Step , the bash script  invokes the PDLG master script , including passing the values noted above.","Subsequent to invocation of the PDLG master script  by the bash script , the PDLG script  will typically access one or more configuration files , which are stored in one or more designated directories. The configuration files  contain information relating to the wireless cards  and their interfaces, which is used by the PDLG script  for establishing calls and transferring data over the wireless cards . Thus, for example, at Step  in  the PDLG master script  accesses an \u201capplication configuration\u201d file, which includes information relating to the PDLG server . A sample application configuration file is as follows:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"[pdlg@2e1evdo5 conf]$ cat conf.apps"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#","Application Configuration File"]},{"entry":["#",{}]},{"entry":["#",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["echo","pdlg_echo_client","-type echo ","-port 8200"]},{"entry":["max","pdlg_echo_client","-type max ","-port 8201"]},{"entry":["delay_echo","pdlg_echo_client","-type delay ","-port 8202"]},{"entry":["ping","pdlg_pftp_client","-type ping",{}]},{"entry":["ftp","pdlg_ftp_client","-type ftp","-lanserver"]},{"entry":[{},{},{},"[\u201cip_address.com\u201d]"]},{"entry":[{},{},"-port 21 ","-user pdlgftp "]},{"entry":[{},{},{},"-pass pdlgftp"]},{"entry":["http","pdlg_jhttp_client","-port 80",{}]},{"entry":["udp","pdlg_judp_client","-controlServer pdlgs08","-controlPort 2200"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"By way of the application configuration file, the user has the privilege to define different data transfer applications, and according to user selection after initiating calls the wireless cards  will move data. The applications noted above are supported in current PDLG software.","\u201cEcho Client\u201d has the following format:","(echo{-data r | -time r }{-random | -file filename}[-iat r][-load r][-pksize r][-window n])","Echo will send data to the echo server, which then echoes the same data back as quickly as possible. \u201c-data r\u201d specifies the amount of data to transfer (in bytes). Note that the count is performed when data is received, so whenever \u201cn\u201d data is received from the server, transfer stops. There will be some data still in transit at this point, which will be lost. \u201c-time r\u201d is the time to transfer data (in seconds). \u201c-random\u201d specifies that random binary data will be used. \u201c-file filename\u201d indicates that data from a file \u201cfilename\u201d will be used. \u201c-iat r\u201d is the inter-arrival time, which is the time to wait from the finish of one transfer before starting a new transfer (in seconds). The default is 0 seconds. \u201c-load r\u201d is not yet supported. \u201c-pksize r\u201d specifies the packet size (in bytes), which is the amount of data sent to the TCP layer in a single \u201csend\u201d call. If not specified, a default of 512 bytes is used. Note that the various network layers might further fragment or pool these packets into other packets of varying size. \u201c-window n\u201d specifies a sliding window size (in bytes), which is the maximum amount of data sent before expecting a reply from server. If not specified, a default of 2048 bytes will be used.","At least one of -data or -time must be specified to control the transfer. Both -data and -time can be specified, in which case the first to expire will end the transfer (either the time has elapsed, or \u201cr\u201d data has been transferred). Also, at least one of -random or -file must be specified, but not both.","\u201cDelay Echo Client\u201d has the following format:","(delay_echo -data r -delay r{-random | -file filename}[-iat r][-load n][-pksize n])","Delay echo will send a specified amount of data to the delay echo server, which will collect it. When all data has been transferred to the server, the server will wait for the specified delay period, and then send all the data back. Here, \u201c-data r\u201d is the amount of data to transfer (in bytes). \u201c-delay r\u201d is the time to keep data on the server before sending it back, which is used to let the mobile go dormant before data is returned. \u201c-random\u201d specifies that random binary data will be used. \u201c-file filename\u201d specifies that data from a file \u201cfilename\u201d will be used. \u201c-iat r\u201d is the inter-arrival time, which is the time to wait from the finish of one transfer before starting a new transfer (in seconds). The default is 0 seconds. \u201c-pksize r\u201d is the packet size (in bytes), which is the amount of data sent to the TCP layer in a single \u201csend\u201d call. If not specified, a default of 512 bytes is used. Again, it should be noted that the various network layers might further fragment or pool these packets into other packets of varying size.","\u201cMax Client\u201d has the following format:","(max{-data r | -time r}[-iat r][-load n][-pksize n][-dlonly])","Max client will both send and receive independent streams of random binary data in both the transmission and reception directions, as quickly as possible. Here, \u201c-data r\u201d is the amount of data to transfer (in bytes). Note that the count is performed when data is received, so whenever \u201cn\u201d data is received from the server, transfer stops. \u201c-time r\u201d specifies the time to transfer data (in seconds). \u201c-iat r\u201d is the inter-arrival time, which is the time to wait from the finish of one transfer before starting a new transfer (in seconds). The default is 0 seconds. \u201c-pksize r\u201d is the packet size (in bytes), which is the amount of data sent to the TCP layer in a single \u201csend\u201d call. If not specified, a default of 512 bytes is used. \u201c-dlonly\u201d specifies receive data only, e.g., no data will be transmitted. This is supported only in PDLG 1.04-010 or newer. At least one of -data or -time must be specified to control the transfer. Both -data and -time can be specified, in which case the first to expire will end the transfer (either the time has elapsed, or \u201cr\u201d data has been received).","\u201cPing Client\u201d has the following format:","(ping[-iat r][-repeat r][-pksize r])","Ping client will send a specified number of ICMP ping packets to the destination host, with a specified amount of data, and report the RTT for each. \u201c-iat r\u201d is the inter-arrival time, which is the time to wait before starting a next block of pings. The default is zero seconds. \u201c-repeat r\u201d is the number of pings in each block, with a default of 1. \u201c-pksize r\u201d is the packet size, for the amount of data sent in the ICMP packet in bytes, from 0-1024 bytes. The default is 0 bytes.","\u201cFTP Client\u201d has the following format:","(ftp{-download filename | -upload filename}[-iat r][-passive])","FTP client performs FTP downloads and uploads. \u201c-download filename\u201d specifies the file to download. The file will be first uploaded to the server via LAN, and then downloaded repeatedly through the PPP connection. \u201c-upload filename\u201d specifies the file to upload. \u201c-iat r\u201d is the inter-arrival time, which is the time to wait between transfers. The default is 0 seconds. \u201c-passive\u201d specifies that the PASV mode is used to transfer files instead of PORT mode. At least one of -download and -upload must be specified. If both are specified, first a file is downloaded, then a file is uploaded, and then the client sleeps for \u201ciat\u201d seconds before repeating. Note that the files can be different and have different sizes.","At Step , the PDLG script  accesses a \u201cmobile configuration\u201d file. This file contains information relating to the wireless cards' interface, their IP addresses, and their user names. A sample mobile configuration file is given below, for the first four wireless cards (index numbers 100-103):",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[pdlg@2e1evdo5 conf]$ cat conf.mobiles"},{"entry":"#"},{"entry":"# labindex mobiletype device serverip options"},{"entry":"#"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["100 qcp 1960-3G1x \/dev\/ttyUSB0 xxx.x.xx.100","-chatscript 3g1x"]},{"entry":[{},"-pppdopts 3g1x"]},{"entry":[{},"-pppduser PDLG0634"]},{"entry":["101 qcp1960-3G1x \/dev\/ttyUSB2 xxx.x.xx.101 ","-chatscript 3g1x"]},{"entry":[{},"-pppdopts 3g1x "]},{"entry":[{},"-pppduser PDLG0635"]},{"entry":["102 qcp1960-3G1x \/dev\/ttyUSB4 xxx.x.xx.102 ","-chatscript 3g1x"]},{"entry":[{},"-pppdopts 3g1x "]},{"entry":[{},"-pppduser PDLG0636"]},{"entry":["103 qcp1960-3G1x \/dev\/ttyUSB6 xxx.x.xx.103 ","-chatscript 3g1x"]},{"entry":[{},"-pppdopts 3g1x"]},{"entry":[{},"-pppduser PDLG0637 ..."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"At Step , the PDLG script  accesses the sessions file . At Step , the PDLG script  creates a PPPD file associated with each wireless card according to the information in the sessions file . \u201cPPPD\u201d refers to the point-to-point protocol daemon used to manage network connections between two nodes on Unix-like operating systems (e.g., Linux). A PPPD is configured using command-line arguments and configuration files. Here, therefore, each PPPD file contains a listing of commands\/arguments, which may reference one or more of the aforementioned configuration files, for managing a network connection between a designated one of the wireless cards  and the PDLG server . Information in the PPPD file specific to the designated wireless card is derived from the entry in the sessions file relating to that wireless card, and possibly from the other configuration files such as the mobile configuration file.","The PDLG master script creates a PPPD file for each individual wireless interface card. A sample PPPD file is as follows:",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[root@2e1evdo3 peers]# pwd"},{"entry":"\/etc\/ppp\/peers"},{"entry":"[root@2e1evdo3 peers]# cat ttyUSB0"},{"entry":"modem"},{"entry":"noauth"},{"entry":"usepeerdns"},{"entry":"show-password"},{"entry":"crtscts"},{"entry":"deflate 0"},{"entry":"nobsdcomp"},{"entry":"debug"},{"entry":"nodetach"},{"entry":"persist"},{"entry":"holdoff 30"},{"entry":"maxfail 100"},{"entry":"user PDLG0621"},{"entry":"115200"},{"entry":"\/dev\/ttyUSB0"},{"entry":"ipparam xxx.x.xx.xx"},{"entry":"connect \u201c\/usr\/sbin\/chat -v -s -S -f \/usr\/local\/pdlg\/pdlg\/conf\/chat_script_3g1x\u201d"},{"entry":"[root@2e1evdo3 peers]# cat \/usr\/local\/pdlg\/pdlg\/conf\/chat_script_3g1x"},{"entry":"ABORT \u2018NO DIALTONE\u2019"},{"entry":"TIMEOUT 30"},{"entry":"REPORT CONNECT ABORT BUSY ABORT ERROR \u201d AT OK"},{"entry":"AT!SWI=97 OK"},{"entry":"AT!NV=408,43,00 OK ATE0V1&F&D2&C1&C2S0=0 OK ATE0V1"},{"entry":"OK ATS7=60"},{"entry":"OK ATDT#777 CONNECT"},{"entry":"[root@2e1evdo3 peers]#"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"At Step , the PDLG script  carries out one or more pre-session tasks, such as uploading any necessary files to the server  before making calls, e.g., the file to be transferred from the server to the client . At Step , the PDLG script  invokes the PPPD files, for initiating operation of the wireless cards  for making data calls. For invoking the PPPD files, the PDLG script  may execute a sub-routine or other program configured for this purpose. In a typical case, once a PPPD is invoked for controlling a designated wireless card, it sets the parameters of the wireless card's serial modem port (e.g., \u201cttyUSB0\u201d), such as speed. Then, it runs an external \u201cchat\u201d program to establish the connection, which sends the connection command to the wireless card modem. The chat program waits for a \u201cconnect\u201d acknowledgement from the serial port. Receipt of an acknowledgement indicates that a connection has been established. At that point, the PPPD program takes over again. If the connection could not be established, the PPPD will exit and return an error. Otherwise, it will communicate with the PPPD on the other end of the connection.","In the example given above, the system uses a chat program referred to as \u201cchat_script3g1x\u201d to make calls. See, e.g., the sample mobile configuration file. A sample \u201cchat_script3g1x\u201d file is as follows:",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[pdlg@2e1evdo5 conf]$ cat chat_script_3g1x"]},{"entry":[{},"ABORT \u2018NO DIALTONE\u2019"]},{"entry":[{},"TIMEOUT 30"]},{"entry":[{},"REPORT CONNECT ABORT BUSY ABORT ERROR \u201d AT OK"]},{"entry":[{},"AT!SWI=97 OK"]},{"entry":[{},"AT!NV=10,00,04,00 OK AT!NV=562,00,00 OK AT!STATUS OK"]},{"entry":[{},"AT!ESN? OK"]},{"entry":[{},"ATE0V1&F&D2&C1&C2S0=0 OK ATE0V1 OK ATS7=60 OK"]},{"entry":[{},"ATDT#777"]},{"entry":[{},"CONNECT"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"At Step , the PDLG script  initiates the transfer of data over the communications established in Step , for establishing a call load. For doing so, different subroutines may be invoked depending on the type of data transfer, e.g., FTP, echo, http, and UDP. At Step , the PDLG script  generates one or more intermediate reports relating to the data transfer. At Step , after the designated run time, the communications are deactivated, and the PDLG script  carries out one or more standard \u201cclean up\u201d or housekeeping operations, such as deleting the PPPD files.","The scripts and programs described above are exemplary only, and may be modified and revised as needed using standard Linux programming methods. Similarly, and other control functions noted above, for which sample scripts\/programs are not provided, can be implemented using existing standard Linux programs and\/or standard programming methods.","Since certain changes may be made in the above-described packet data load generator system, without departing from the spirit and scope of the invention herein involved, it is intended that all of the subject matter of the above description or shown in the accompanying drawings shall be interpreted merely as examples illustrating the inventive concept herein and shall not be construed as limiting the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be better understood from reading the following description of non-limiting embodiments, with reference to the attached drawings, wherein below:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 3 and 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 6A and 6B","FIGS. 3 and 4"]}]},"DETDESC":[{},{}]}
