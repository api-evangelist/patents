---
title: Transfer of runtime-based application code
abstract: A transfer of runtime-based application code is described. According to one embodiment of the invention, the application code includes an application code segment. An application code segment tag identifies the application code segment. The application code segment is sent via a messaging protocol to a first server that processes the application code and returns the results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07305677&OS=07305677&RS=07305677
owner: Intel Corporation
number: 07305677
owner_city: Santa Clara
owner_country: US
publication_date: 20030327
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the invention relate to the field of distributed computing; and more specifically, to the transfer of dynamic runtime application code.","At times a local application server may access a remote server to perform a specific function within an application code. For example, the application code processing on a local server may include an application programming interface (\u201cAPI\u201d) function call to a remote server. The API function call allows a local application on a local server to access a remote server to perform a specific function. After processing the function, the remote server returns the result values of the function call to the local server.","However, a constraint of using the API function call is that the application code must be edited (and possibly re-compiled) to update the application code with another remote server to be called. The updating of the application code to manage the remote servers that are to be utilized has the disadvantage of not being able to rapidly adapt to changes in the network environment, such as adding and removing servers from the network.","Furthermore, as an API function call must be pre-defined within the application code, the application code may not dynamically request an API function call to a remote server upon a change in the local processing environment.","In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures and techniques have not been shown in detail in order not to obscure the understanding of this description.","A mechanism to transfer dynamic runtime-based application code is described. According to one aspect of the invention, specific segments of application code in a dynamic runtime-based application are transferred to dynamic runtime implementations suited to process the workload associated with the application code. The results would then be returned to the original runtime implementation where the application is being processed.","The following description describes embodiments of the invention that include enhancements to a standards-based protocol called web services routing protocol (\u201cWS-Routing\u201d). WS-Routing is based on the Simple Object Access Protocol (\u201cSOAP\u201d) standard defined by the World Wide Web Consortium and the Extended Markup Language (\u201cXML\u201d). However, those of ordinary skill in the art will recognize that alternative protocols may be used and enhanced without departing from the scope of the description.","A dynamic runtime specifies a platform execution environment for application software. In one embodiment, code that is processed in a dynamic runtime environment is first compiled to a common language above platform specific, native code. That common language is compiled to be processed on a given native platform using a mechanism well known to those of ordinary skill in the art. An example of a dynamic runtime environment is the European Computer Manufactures Association (\u201cECMA\u201d) standard Common Language Infrastructure (\u201cCLI\u201d) that has the concept of declarative, custom attributes that can be inserted on top of code.","As will be described in the embodiments below, application code is compiled into the CLI's common intermediate language and executed on a CLI implementation. The CLI implementation is enhanced to monitor executing applications for tags specifying code functionality; to maintain a database of servers for which code can be executed (e.g., on other dynamic runtime enabled servers); and to maintain an execution state for code transferred to different servers in order to pass results back to the source application at the appropriate time, as will be described further below. This CLI implementation also has access to a library that contains an implementation of the WS-Routing specification.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 2","FIG. 2"],"b":["100","100","5","10","15","20","200","202","10","10","15","20"]},"A specialty server includes a runtime implementation on a platform more suited to process the application code or a specific application code segment, as will be described. For example, at times the application server  may not have the bandwidth or processing power to execute certain code segments. Therefore, upon encountering such a piece of code, the application server may transfer that code to another, similar runtime implementation which is on a platform more suited to execute that piece of code and get the results back to the original source application.","At block , application code on the application server  is processed. The application code has one or more application code segments.","At block , the application server  monitors and identifies one or more of the application code segments within the application code. Each application code segment may include code that has specific processing functionalities. A code segment tag may identify the application code segment.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3A","FIG. 3A"],"b":["300","305","310","305","310"]},"At block , the application server  determines which specialty server is to process the application code segment. For example, the application server  may examine the metadata associated with the identified tag and search in a lookup table or database to locate the appropriate specialty server to process the tagged code segment.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3B","FIG. 3B"],"b":["320","320","325","330","5","5","10","330"]},"At block , the application server  generates a message to send to the specialized server associated with the identified application code segment. In one embodiment, the message includes the application code segment. In another embodiment, the message includes the entire application code. In yet another embodiment, the message includes a function call and parameters. The message may also include other programming elements such as a programming class, functions embedded within the class, Dynamic Language Libraries (\u201cDLL\u201d) and other programming elements well known to those of ordinary skill in the art.","In one embodiment, the code is enclosed in a WS-Routing message. The WS-Routing message is used to transfer messages within the dynamic runtime environment . The WS-Routing is a SOAP-based, stateless protocol for exchanging XML-based messages from an initial sender to an ultimate receiver, possibly via a set of intermediaries. Bi-directional message exchange patterns are implemented via a reverse message path that is described in the WS-Routing specification.","In one embodiment, the message may also include information on the ordering of results. For example, tagging of the application code may also include providing information on the ordering of segment code results processed on a specialty server and returned. As the application server  encounters tagged code segments, it will examine the ordering information and create unique identifiers for the code segment that is about to be transferred as well as other code segments that are dependant on this code. The application server  maintains this list of identifiers and ensures that the application server  will only process the results of the related code segment in processing order when all of the results of the dependent code have been returned back to the source application.","At block , the message is sent to the identified specialty server associated with the specialty tag. For example, the application server  will send the application code segment associated with a multimedia intensive segment to specialty server . Specialty server  may have an Intel MMX based processor, by Intel Corporation of Santa Clara, Calif., which is designed to process multimedia-based applications efficiently.","At block , the specialty server receives the message.","At block , the specialty server processes the received application code segment.","At block , the specialty server generates a message to return one or more results of the processing of the application code to the application server .","At block , the specialty server sends the message to the application server.","At block , the application server  receives the message from the specialty server.","At block , the application server  continues processing the application code. This may include processing the results from the specialty server in the proper processing order.","It should be understood that, while the primary use of WS-Routing will be in the exchange of messages between web services, WS-Routing can also be used to pass messages directly to the application runtime environment. This is possible because WS-Routing-enabled messages neither know nor care about the content of the data contained within them, just that they follow the rules for describing a logical message path. In other words, as long as the platform that receives WS-Routing based messages can parse WS-Routing messages, and the message conforms to the WS-Routing schema, it does not matter how the messages being passed are going to be used.","It should also be understood the application code may block while waiting for the results to be returned from a specialty server. Alternatively, specific application code segments may be performed in parallel (e.g., multiple specialty servers performing multiple application code segments in parallel, processing the application code while the specialty server is processing an application code segment, etc.).",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 3B"],"b":["400","400","25","30","35","40","45","30","25"]},"In one embodiment, the Web Services Referral Protocol (\u201cWS-Referral\u201d) is used. WS-Referral is a SOAP-based, stateless protocol for inserting, deleting and querying routing entries in a SOAP router (where a SOAP router is, for example, a server that supports the WS-Routing protocol). The WS-Referral provides a mechanism to dynamically configure a message path based upon the satisfying of pre-defined conditions.","For example, the pre-defined conditions may include instructions on the referral server  describing what to do with a message bound for specialty server . This embodiment of the invention describes a mechanism where, using enhancements within a dynamic runtime environment, WS-Routing and WS-Referral application code can be dynamically transferred to other dynamic runtime environments implemented on platforms that are best suited to run the application code.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 5","FIG. 4","FIG. 5"],"b":["500","502","25","30","503","30","35","40","45"]},"At block , application code on the application server  is processed. The application code having one or more application code segments.","At block , the application server  monitors and identifies one or more of the application code segments within the application code. Each application code segment may include code that has specific processing functionalities. The application code segment may be identified with a code segment tag, as described in  above.","At block , the application server  generates a message to send to the referral server . In one embodiment, the message includes the application code segment. In another embodiment, the message includes the entire application code. In one embodiment, as the application server  identifies the tagged code segment, it packages up the associated code fragment in a WS-Routing message. WS-Routing provides the infrastructure to specify an ultimate endpoint, as well as a reverse path, so that ultimate endpoint can communicate the results back to the initial sender.","At block , the application server  sends the message to the referral server . The referral server  having implemented the enhanced WS-Referral specification to determine which specialty server to forward the message.","At block , referral server  receives the message.","At block , the referral server  will examine the WS-Routing message sent by the initial runtime environment implementation to determine the functional purpose of that code. The routing server  locates the appropriate specialty server , , or  to process the tagged application code segment from the application server . For example, the routing server  may search in a lookup table similar to the lookup table described above in , among other examples.","At block , the referral server  generates a message to send to the specialized server associated with the application code segment. For example, the referral server , having knowledge of the location and specialties of each runtime environment implementation (e.g., specialty server , specialty server  and specialty server ), will insert the location of the specialty server within the WS-Routing message that specifies a runtime implementation that is suited to handle the code workload.","At block , the message is sent to the identified specialty server associated with the specialty tag. In one embodiment, the referral server  includes its location (e.g., IP address) in the reverse path with the message to enable the identified specialty server to return the results to the referral server .","At block , the identified specialty server receives the message.","At block , the identified specialty server processes the received application code segment.","At block , the specialty server generates a message to return one or more results of the processing of the application code segment. In one embodiment, the identified specialty server will end the results, via the reverse path of the initial WS-Routing message, back to the original dynamic runtime implementation where the application was initially executed.","At block , the identified specialty server sends the message to the application server . In another embodiment, the specialty server returns the message to the referral server , which will then return the message to the application server.","At block , the application server  receives the message from the identified specialty server.","At block , the application server  continues with the processing of the application code. This may include processing the results from the specialty server in the proper processing order based on the information on the ordering of the results, as described above.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 6","b":["600","600","50","55","60","65"]},"In one embodiment, each server has implemented the WS-Routing specification and understands WS-Routing, SOAP-based messages. Thus, when a given runtime encounters an application that may burden the platform on which the application will be running, the runtime will determine the application server on which the application may run, specify one of the servers as the ultimate receiver (e.g., application server ) and the others as intermediaries (e.g., application server  and application server ), package up that code into a WS-Routing message and finally transfer the code to a first server (e.g., application server ) in the message path. The message continues to follow the message path (each application server inserting itself into the reverse path along the way) until an application server is encountered that has the bandwidth to execute the application code. The application server that ultimately executes the application will then, in turn, send the results, if necessary, via the reverse path of the initial WS-Routing message, back to the original runtime implementation (e.g., application server ) where the application began its initial execution, as will be described.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 7","FIG. 6"],"b":"700"},"As described, this embodiment of the invention uses WS-Routing and SOAP-based message protocols to transfer application code to (and results from) processing servers.","At block , the application server  receives an indication to process application code.","At block , the application server  loads a runtime environment instance. Any time a new application is loaded to be processed, a new instance of the runtime environment is usually loaded.","At block , the application server  includes a resource monitor process, which is awakened.","At block , the resource monitor process determines whether a resource threshold state has been reached. For example, if there are enough resources on the local application server  to process the application code, control passes to block . If there are not enough resources on the local application server  to process the application code, control passes to block .","At block , the application server  processes the application code and control passes to block .","At block , the application server  generates a message to be sent to an application server. The message includes a list of application servers that might process the application code. For example, the list of application servers may include application server , application server  and application server . In one embodiment, the message also includes the entire application code. In another embodiment, the message also includes a code segment of the application code.","In one embodiment, WS-Routing provides the infrastructure to specify a message path that includes an ultimate endpoint server (e.g., application server ), intermediary server (e.g., application server  and application server ), and a reverse path so that ultimate endpoint can communicate the results back to the application server . The application server  includes this in a WS-Routing message. It should be understood that if an intermediary server processes the application code, the message path might be \u201cshort-circuited,\u201d as will be described.","block , the application server  sends the message to the application server as defined in the message path. To continue the example, the application server  sends the message to application server . The application server  would receive the message and perform process  on its platform, as indicated by dashed line .","At block , the application server  determines whether the result of the processed application code is to be returned to the original application. For example, the application server  may inspect the reverse path to locate a reverse path entry. If there is a reverse path entry, control passes to block . If there is not a reverse path entry, control passes to block .","At block , the application code has been processed and the runtime instance may be closed.","At block , the application server  generates a return message based on the reverse path; the return message to include the results of the processed application code.","At block , the application server  sends the return message based on the reverse path.","It should be appreciated that when an application is to run on a given dynamic runtime implementation, this invention would allow the runtime to determine when the platform on which it is running is overloaded and then transfer future application execution requests to other implementations of dynamic runtimes on different application servers. This would alleviate the processing demands on the initial platform, thus providing a load-balancing infrastructure.","It should be appreciated that a WS-Routing message can be short-circuited, as shown in . This implies that a message does not have to travel the whole message path if an intermediary application server can accomplish a task on behalf of the ultimate receiver. It should also be understood that message path might be edited on the fly as the WS-Routing message travels from application server to application server. Thus, for example, if the application server that represents the ultimate receiver is also overloaded, it can insert another application server in the path.","One embodiment of a computer system suitable to perform dynamic runtime-based applications is illustrated in . The computer system  includes a processor , a memory  and input\/output capability  coupled to a system bus . The memory  is configured to store instructions which, when executed by the processor , perform the methods described herein. The memory  may also include a database or lookup table as illustrated in . Input\/output  includes a transmission component and a receiver component, such as a network interface card capable of wire and wireless communications between computer systems (e.g., application, referral and specialty servers). Input\/output  also provides for the delivery and display of the video content or portions or representations thereof. Input\/output  also encompasses various types of machine-readable media, including any type of storage device that is accessible by the processor .","The description of  is intended to provide an overview of computer hardware and other operating components suitable for implementing embodiments of the invention, but is not intended to limit the applicable environments. It will be appreciated that the computer system  is one example of many possible computer systems that have different architectures. A typical computer system will usually include at least a processor, a memory, and a bus coupling the memory to the processor. One of skill in the art will immediately appreciate that embodiments of the invention can be practiced with other computer system configurations, including multiprocessor systems, minicomputers, mainframe computers and the like.","It will be appreciated that more or fewer processes may be incorporated into the method(s) illustrated in ,  and  without departing from the scope of the invention, and that no particular order is implied by the arrangement of blocks shown and described herein. It further will be appreciated that the method(s) described in conjunction with ,  and  may be embodied in machine-executable instructions, e.g. software. The instructions can be used to cause a general-purpose or special-purpose processor that is programmed with the instructions to perform the operations described. Alternatively, the operations might be performed by specific hardware components that contain hardwired logic for performing the operations, or by any combination of programmed computer components and custom hardware components. The methods may be provided as a computer program product that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer (or other electronic devices) to perform the methods. For the purposes of this specification, the terms \u201cmachine-readable medium\u201d shall be taken to include any medium that is capable of storing or encoding a sequence of instructions for execution by the machine and that cause the machine to perform any one of the methodologies of the present invention. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic disks and. Furthermore, it is common in the art to speak of software, in one form or another (e.g., program, procedure, process, application, module, logic, etc.), as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computer causes the processor of the computer to perform an action or produce a result.","Thus, a mechanism to transfer runtime-based application code has been described. Embodiments of the invention allow dynamic runtime-based application code to be transferred to platforms that contain a runtime implementation specialized for processing specific workloads, as well as to have those results passed back to the original application.","It should be appreciated that since a dynamic runtime-based application is processed at the application level, the dynamic runtime abstracts the processor instruction set (and operating system), in effect making the processor instruction set a commodity in application development. For example, some silicon-based processors are designed to maximize productivity for certain types of code bases. For example, the Intel MMX-based processors, from Intel Corporation of Santa Clara, Calif., are designed to run multimedia-based applications well. In this way, many applications may contain code that can be segmented out into groups of functionality for processing. Also, this allows for application code to be processed in parallel with other pieces of code in the same application.","In addition, embodiments of this invention make use of a central referring server that performs the mapping of code functionality to the specific location of a platform to execute that functionality. It should be understood that the runtime embodiment may include various combinations of the runtime environments disclosed in ,  and  and the invention is not limited to only those illustrated. For example, an application server may include a lookup table of multiple referral servers, which may include a lookup table of additional referral, application and\/or specialty servers.","It should be appreciated that the embodiments of the invention, as described, could also be used to alleviate the processing burden for any dynamic runtime environment by providing a load balancing mechanism where the application code is transferred to other dynamic runtime implementations on other platforms when a given application server is nearing or has reached a resource threshold. For example, a mechanism to load-balance an application server containing a dynamic runtime environment may be implemented by having a feature within the runtime to monitor the application server for an overloaded state and transfer any future applications, via WS-Routing, to other application servers containing a dynamic runtime environment. The results, if necessary, would then be returned to the original dynamic runtime implementation where the application is actually running.","In today's software industry, many applications require heavy processing power. A server can become overloaded and sluggish if it tries to process and execute too many of these types of applications simultaneously. For example, thousands of consumers executing a sale script could overload a server. Another example includes high computation, mathematical-based applications. This may be relevant, for example, to transfer the processing of customer orders to a specialty server when an application server becomes overloaded with order requests.","Another example includes a loop-intensive dynamic runtime application running on an application server with limited processing power, where that server has the knowledge of a powerful server with a dynamic runtime implementation that could handle many, if not all, of those loop computations, with the results passed back to the original server.","While the invention has been described in terms of several embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described. The method and apparatus of the invention can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting on the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by referring to the following description and accompanying drawings that are used to illustrate embodiments of the invention. In the drawings:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
