---
title: System and method for communicating file system events using a publish-subscribe model
abstract: A system and method for communicating file system events using a publish-subscribe model. In one embodiment, the system may include a storage device configured to store data and a file system configured to manage access to the storage device and to store file system content. The file system may be further configured to detect a file system content access event, and in response to detecting the file system content access event, to publish a record of the file system content access event to a publish-subscribe channel accessible by one or more applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437375&OS=07437375&RS=07437375
owner: Symantec Operating Corporation
number: 07437375
owner_city: Cupertino
owner_country: US
publication_date: 20040817
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to file-based storage systems.","2. Description of the Related Art","Computer systems often process large quantities of information, including application data and executable code configured to process such data. In numerous embodiments, computer systems provide various types of mass storage devices configured to store data, such as magnetic and optical disk drives, tape drives, etc. To provide a regular and systematic interface through which to access their stored data, such storage devices are frequently organized into hierarchies of files by software such as an operating system. Often a file defines a minimum level of data granularity that a user can manipulate within a storage device, although various applications and operating system processes may operate on data within a file at a lower level of granularity than the entire file.","During the course of system operation, files may be created, manipulated and deleted, and the data stored in files may be read and\/or modified. In conventional storage systems, applications may receive information about various events that transpire with respect to files or their content through a request-response interface. In typical request-response interfaces, a requesting application may convey a request to an information source, such as through a function call that may pass through a network (if the requesting application executes on a system that is remote to the information source). The requesting application may then wait for a response including the requested information, during which time the application may not perform any other tasks (i.e., the request may be a blocking call).","The request-response model has several disadvantages, however. Blocking requests may cause the application to stall for lengthy periods if the information source is busy or if the communication path to the source is slow or congested, decreasing application performance. In the worst case, deadlock or undesirable side effects may occur if a request or response is lost in transit or if either the requestor or the responding source becomes unavailable during the transaction. Additionally, the request-response model generally requires that each requesting application make a request even if the desired information is not available, and may require that the requesting application cull through irrelevant information to find information of interest, both of which increase processing overhead.","Various embodiments of a system and method for communicating file system events using a publish-subscribe model are disclosed. In one embodiment, the system may include a storage device configured to store data and a file system configured to manage access to the storage device and to store file system content. The file system may be further configured to detect a file system content access event, and in response to detecting the file system content access event, to publish a record of the file system content access event to a publish-subscribe channel accessible by one or more applications.","In one specific implementation, the system further includes a query system configured to evaluate queries formulated in a query language, where a given query is associated with the publish-subscribe channel, and where the record is published to the publish-subscribe channel in response to determining that the file system content access event satisfies the given query.","A method is further contemplated that, in one embodiment, includes detecting a file system content access event, and in response to detecting the file system content access event, publishing a record of the file system content access event to a publish-subscribe channel accessible by one or more applications.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Computer System Overview","Turning now to , a block diagram of one embodiment of a computer system is shown. In the illustrated embodiment, system  includes a plurality of host devices and coupled to a plurality of storage devices and via a system interconnect . Further, host device includes a system memory  in the illustrated embodiment. For simplicity of reference, elements referred to herein by a reference number followed by a letter may be referred to collectively by the reference number alone. For example, host devices and and storage devices and may be referred to collectively as host devices  and storage devices .","In various embodiments of system , host devices  may be configured to access data stored on one or more of storage devices . In one embodiment, system  may be implemented within a single computer system, for example as an integrated storage server. In such an embodiment, for example, host devices  may be individual processors, system memory  may be a cache memory such as a static RAM (SRAM), storage devices  may be mass storage devices such as hard disk drives or other writable or rewritable media, and system interconnect  may include a peripheral bus interconnect such as a Peripheral Component Interface (PCI) bus. In some such embodiments, system interconnect  may include several types of interconnect between host devices  and storage devices . For example, system interconnect  may include one or more processor buses (not shown) configured for coupling to host devices , one or more bus bridges (not shown) configured to couple the processor buses to one or more peripheral buses, and one or more storage device interfaces (not shown) configured to couple the peripheral buses to storage devices . Storage device interface types may in various embodiments include the Small Computer System Interface (SCSI), AT Attachment Packet Interface (ATAPI), Firewire, and\/or Universal Serial Bus (USB), for example, although numerous alternative embodiments including other interface types are possible and contemplated.","In an embodiment of system  implemented within a single computer system, system  may be configured to provide most of the data storage requirements for one or more other computer systems (not shown), and may be configured to communicate with such other computer systems. In an alternative embodiment, system  may be configured as a distributed storage system, such as a storage area network (SAN), for example. In such an embodiment, for example, host devices  may be individual computer systems such as server systems, system memory  may be comprised of one or more types of dynamic RAM (DRAM), storage devices  may be standalone storage nodes each including one or more hard disk drives or other types of storage, and system interconnect  may be a communication network such as Ethernet or Fibre Channel. A distributed storage configuration of system  may facilitate scaling of storage system capacity as well as data bandwidth between host and storage devices.","In still another embodiment, system  may be configured as a hybrid storage system, where some storage devices  are integrated within the same computer system as some host devices , while other storage devices  are configured as standalone devices coupled across a network to other host devices . In such a hybrid storage system, system interconnect  may encompass a variety of interconnect mechanisms, such as the peripheral bus and network interconnect described above.","It is noted that although two host devices  and two storage devices  are illustrated in , it is contemplated that system  may have an arbitrary number of each of these types of devices in alternative embodiments. Also, in some embodiments of system , more than one instance of system memory  may be employed, for example in other host devices  or storage devices . Further, in some embodiments, a given system memory  may reside externally to host devices  and storage devices  and may be coupled directly to a given host device  or storage device  or indirectly through system interconnect .","In many embodiments of system , one or more host devices  may be configured to execute program instructions and to reference data, thereby performing a computational function. In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store such program instructions and data. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM included in system  as storage devices . A computer-accessible medium may also include volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of system  as system memory . Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link, which may be included in some embodiments of system  as system interconnect .","In some embodiments, program instructions and data stored within a computer-accessible medium as described above may implement an operating system that may in turn provide an environment for execution of various application programs. For example, a given host device  may be configured to execute a version of the Microsoft Windows operating system, the Unix\/Linux operating system, the Apple Macintosh operating system, or another suitable operating system. Additionally, a given host device may be configured to execute application programs such as word processors, web browsers and\/or servers, email clients and\/or servers, and multimedia applications, among many other possible applications.","During execution on a given host device , either the operating system or a given application may generate requests for data to be loaded from or stored to a given storage device . For example, code corresponding to portions of the operating system or an application itself may be stored on a given storage device , so in response to invocation of the desired operation system routine or application program, the corresponding code may be retrieved for execution. Similarly, operating system or application execution may produce data to be stored","In some embodiments, the movement and processing of data stored on storage devices  may be managed by a software-based storage management system. One such embodiment is illustrated in , which shows an application layer  interfacing to a plurality of storage devices A-C via a storage management system . Some modules illustrated within  may be configured to execute in a user execution mode or \u201cuser space\u201d, while others may be configured to execute in a kernel execution mode or \u201ckernel space.\u201d In the illustrated embodiment, application layer  includes a plurality of user space software processes A-C. Each process interfaces to kernel space storage management system  via an application programming interface (API) . In turn, storage management system  interfaces to storage devices A-C. In some embodiments, as described in greater detail below in conjunction with the descriptions of , additional software systems may be provided between or in addition to application layer  and storage management system . It is contemplated that in some embodiments, an arbitrary number of processes  and\/or storage devices  may be implemented.","In one embodiment, each of processes  may correspond to a given user application, and each may be configured to access storage devices A-C through calls to API . API  provides processes  with access to various components of storage management system . For example, in one embodiment API  may include function calls exposed by storage management system  that a given process  may invoke, while in other embodiments API  may support other types of interprocess communication. In one embodiment, storage devices  may be illustrative of storage devices  of . Additionally, in one embodiment, any of the components of storage management system  and\/or any of processes  may be configured to execute on one or more host devices  of , for example as program instructions and data stored within a computer-accessible medium such as system memory  of .","Storage Management System and File System","As just noted, in some embodiments storage management system  may provide data and control structures for organizing the storage space provided by storage devices  into files. In various embodiments, the data structures may include one or more tables, lists, or other records configured to store information such as, for example, the identity of each file, its location within storage devices  (e.g., a mapping to a particular physical location within a particular storage device), as well as other information about each file as described in greater detail below. Also, in various embodiments, the control structures may include executable routines for manipulating files, such as, for example, function calls for changing file identities and for modifying file content. Collectively, these data and control structures may be referred to herein as a file system, and the particular data formats and protocols implemented by a given file system may be referred to herein as the format of the file system.","In some embodiments, a file system may be integrated into an operating system such that any access to data stored on storage devices  is governed by the control and data structures of the file system. Different operating systems may implement different native file systems using different formats, but in some embodiments, a given operating system may include a file system that supports multiple different types of file system formats, including file system formats native to other operating systems. In such embodiments, the various file system formats supported by the file system may be referred to herein as local file systems. Additionally, in some embodiments, a file system may be implemented using multiple layers of functionality arranged in a hierarchy, as illustrated in .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 2","FIG. 1","FIG. 1"],"b":["200","205","224","230","150","200","200","200","20","25"]},"As described above with respect to system  of , a given host device  may reside in a different computer system from a given storage device , and may access that storage device via a network. Likewise, with respect to storage management system , in one embodiment a given process such as process A may execute remotely and may access storage devices  over a network. In the illustrated embodiment, file system  includes network protocols  to support access to the file system by remote processes. In some embodiments, network protocols  may include support for the Network File System (NFS) protocol or the Common Internet File System (CIFS) protocol, for example, although it is contemplated that any suitable network protocol may be employed, and that multiple such protocols may be supported in some embodiments.","File system  may be configured to support a plurality of local file systems. In the illustrated embodiment, file system  includes a VERITAS (VxFS) format local file system A, a Berkeley fast file system (FFS) format local file system B, and a proprietary (X) format local file system X. However, it is contemplated that in other embodiments, any number or combination of local file system formats may be supported by file system . To provide a common interface to the various local file systems , file system  includes a virtual file system . In one embodiment, virtual file system  may be configured to translate file system operations originating from processes  to a format applicable to the particular local file system  targeted by each operation. Additionally, in the illustrated embodiment storage management system  includes device drivers  through which local file systems  may access storage devices . Device drivers  may implement data transfer protocols specific to the types of interfaces employed by storage devices . For example, in one embodiment device drivers  may provide support for transferring data across SCSI and ATAPI interfaces, though in other embodiments device drivers  may support other types and combinations of interfaces.","In the illustrated embodiment, file system  also includes filter driver . In some embodiments, filter driver  may be configured to monitor each operation entering file system  and, subsequent to detecting particular types of operations, to cause additional operations to be performed or to alter the behavior of the detected operation. For example, in one embodiment filter driver  may be configured to combine multiple write operations into a single write operation to improve file system performance. In another embodiment, filter driver  may be configured to compute a signature of a file subsequent to detecting a write to that file. In still another embodiment, filter driver  may be configured to store and\/or publish information, such as records, associated with particular files subsequent to detecting certain kinds of operations on those files, as described in greater detail below. It is contemplated that in some embodiments, filter driver  may be configured to implement one or more combinations of the aforementioned operations, including other filter operations not specifically mentioned.","An embodiment of filter driver  that is configured to detect file system operations as they are requested or processed may be said to perform \u201cin-band\u201d detection of such operations. Alternatively, such detection may be referred to as being synchronous with respect to occurrence of the detected operation or event. In some embodiments, a processing action taken in response to in-band detection of an operation may affect how the operation is completed. For example, in-band detection of a file read operation might result in cancellation of the operation if the source of the operation is not sufficiently privileged to access the requested file. In some embodiments, in-band detection of an operation may not lead to any effect on the completion of the operation itself, but may spawn an additional operation, such as to record the occurrence of the detected operation in a metadata record as described below.","By contrast, a file system operation or event may be detected subsequent to its occurrence, such that detection may occur after the operation or event has already completed. Such detection may be referred to as \u201cout of band\u201d or asynchronous with respect to the detected operation or event. For example, a user process  may periodically check a file to determine its length. The file length may have changed at any time since the last check by user process , but the check may be out of band with respect to the operation that changed the file length. In some instances, it is possible for out of band detection to fail to detect certain events. Referring to the previous example, the file length may have changed several times since the last check by user process , but only the last change may be detected.","It is noted that although an operation or event may be detected in-band, an action taken in response to such detection may occur either before or after the detected operation completes. Referring to the previous example, in one embodiment each operation to modify the length of the checked file may be detected in-band and recorded. User process  may be configured to periodically inspect the records to determine the file length. Because length-modifying operations were detected and recorded in-band, user process  may take each such operation into account, even though it may be doing so well after the occurrence of these operations.","It is noted that filter driver  is part of file system  and not an application or process within user space . Consequently, filter driver  may be configured to operate independently of applications and processes within the user space . Alternatively, or in addition to the above, filter driver  may be configured to perform operations in response to requests received from applications or processes within the user space .","It is further noted that in some embodiments, kernel space  may include processes (not shown) that generate accesses to storage devices , similar to user space processes . In such embodiments, processes executing in kernel space  may be configured to access file system  through a kernel-mode API (not shown), in a manner similar to user space processes . Thus, in some embodiments, all accesses to storage devices  may be processed by file system , regardless of the type or space of the process originating the access operation.","Numerous alternative embodiments of storage management system  and file system  are possible and contemplated. For example, file system  may support different numbers and formats of local file systems , or only a single local file system . In some embodiments, network protocol  may be omitted or integrated into a portion of storage management system  external to file system . Likewise, in some embodiments virtual file system  may be omitted or disabled, for example if only a single local file system  is in use. Additionally, in some embodiments filter driver  may be implemented within a different layer of file system . For example, in one embodiment, filter driver  may be integrated into virtual file system , while in another embodiment, an instance of filter driver  may be implemented in each of local file systems .","Files and Metadata","As described above, file system  may be configured to manage access to data stored on storage devices , for example as a plurality of files stored on storage devices . In many embodiments, each stored file may have an associated identity used by the file system to distinguish each file from other files. In one embodiment of file system , the identity of a file may be a file name, which may for example include a string of characters such as \u201cfilename.txt\u201d. However, in embodiments of file system  that implement a file hierarchy, such as a hierarchy of folders or directories, all or part of the file hierarchy may be included in the file identity. For example, a given file named \u201cfile1.txt\u201d may reside in a directory \u201csmith\u201d that in turn resides in a directory \u201cusers\u201d. The directory \u201cusers\u201d may reside in a directory \u201ctest1\u201d that is a top-level or root-level directory within file system . In some embodiments, file system  may define a single \u201croot directory\u201d to include all root-level directories, where no higher-level directory includes the root directory. In other embodiments, multiple top-level directories may coexist such that no higher-level directory includes any top-level directory. The names of the specific folders or directories in which a given file is located may be referred to herein as the given file's path or path name.","In some embodiments of file system  that implement a file hierarchy, a given file's identity may be specified by listing each directory in the path of the file as well as the file name. Referring to the example given above, the identity of the given instance of the file named \u201cfile1.txt\u201d may be specified as \u201c\/test1\/users\/smith\/file1.txt\u201d. It is noted that in some embodiments of file system , a file name alone may be insufficient to uniquely identify a given file, whereas a fully specified file identity including path information may be sufficient to uniquely identify a given file. There may, for example, exist a file identified as \u201c\/test2\/users\/smith\/file1.txt\u201d that, despite sharing the same file name as the previously mentioned file, is distinct by virtue of its path. It is noted that other methods of representing a given file identity using path and file name information are possible and contemplated. For example, different characters may be used to delimit directory\/folder names and file names, or the directory\/folder names and file names may be specified in a different order.","The files managed by file system  may store application data or program information, which may collectively be referred to as file data, in any of a number of encoding formats. For example, a given file may store plain text in an ASCII-encoded format or data in a proprietary application format, such as a particular word processor or spreadsheet encoding format. Additionally, a given file may store video or audio data or executable program instructions in a binary format. It is contemplated that numerous other types of data and encoding formats, as well as combinations of data and encoding formats, may be used in files as file data.","In addition to managing access to storage devices, the various files stored on storage devices, and the file data in those files as described above, in some embodiments file system  may be configured to store information corresponding to one or more given files, which information may be referred to herein as metadata. Generally speaking, metadata may encompass any type of information associated with a file. In various embodiments, metadata may include information such as (but not limited to) the file identity, size, ownership, and file access permissions. Metadata may also include free-form or user-defined data such as records corresponding to file system operations, as described in greater detail below. In some embodiments, the information included in metadata may be predefined (i.e., hardcoded) into file system , for example as a collection of metadata types defined by a vendor or integrator of file system . In other embodiments, file system  may be configured to generate new types of metadata definitions during operation. In still other embodiments, one or more application processes  external to file system  may define new metadata to be managed by file system , for example via an instance of API  defined for that purpose. It is contemplated that combinations of such techniques of defining metadata may be employed in some embodiments. Metadata corresponding to files (however the metadata is defined) as well as the data content of files may collectively be referred to herein as file system content.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4","FIG. 3"],"b":["205","205","221","250","255","260","250","260","255","270","250","260","250","260","250","260","250","260","250","260","255"],"i":["a","n","a","n ","a","n","a","n ","a","n ","a","n ","a","n "]},"Files  may be representative of files managed by file system , and may in various embodiments be configured to store various types of data and program instructions as described above. In hierarchical implementations of file system , one or more files  may be included in a directory  (which may also be referred to as a folder). In various embodiments, an arbitrary number of directories  may be provided, and some directories  may be configured to hierarchically include other directories  as well as files . In the illustrated embodiment, each of files  and directory  has a corresponding named stream . Each of named streams  may be configured to store metadata pertaining to its corresponding file. It is noted that files , directory  and named streams  may be physically stored on one or more storage devices, such as storage devices  of . However, for purposes of illustration, files , directory  and named streams  are shown as conceptually residing within file system . Also, it is contemplated that in some embodiments directory  may be analogous to files  from the perspective of metadata generation, and it is understood that in such embodiments, references to files  in the following discussion may also apply to directory .","In some embodiments, filter driver  may be configured to access file data stored in a given file . For example, filter driver  may be configured to detect read and\/or write operations received by file system , and may responsively cause file data to be read from or written to a given file  corresponding to the received operation. In some embodiments, filter driver  may be configured to generate in-band metadata corresponding to a given file  and to store the generated metadata in the corresponding named stream . For example, upon detecting a file write operation directed to given file , filter driver  may be configured to update metadata corresponding to the last modified time of given file  and to store the updated metadata within named stream . Also, in some embodiments filter driver  may be configured to retrieve metadata corresponding to a specified file on behalf of a particular application.","Metadata may be generated in response to various types of file system activity initiated by processes  of . In some embodiments, the generated metadata may include records of arbitrary complexity. For example, in one embodiment filter driver  may be configured to detect various types of file manipulation operations such as file create, delete, rename, and\/or copy operations as well as file read and write operations. In some embodiments, such operations may be detected in-band as described above. After detecting a particular file operation, filter driver  may be configured to generate a record of the operation and store the record in the appropriate named stream  as metadata of the file  targeted by the operation.","More generally, any operation that accesses any aspect of file system content, such as, for example, reading or writing of file data or metadata, or any or the file manipulation operations previously mentioned, may be referred to as a file system content access event. In one embodiment, filter driver  may be configured to generate a metadata record in response to detecting a file system content access event. It is contemplated that in some embodiments, access events targeting metadata may themselves generate additional metadata. As described in greater detail below, in the illustrated embodiment, event log  may be configured to store records of detected file system content access events independently of whether additional metadata is stored in a particular named stream  in response to event detection.","The stored metadata record may in various embodiments include various kinds of information about the file  and the operation detected, such as the identity of the process generating the operation, file identity, file type, file size, file owner, and\/or file permissions, for example. In one embodiment, the record may include a file signature indicative of the content of file . A file signature may be a hash-type function of all or a portion of the file contents and may have the property that minor differences in file content yield quantifiably distinct file signatures. For example, the file signature may employ the Message Digest 5 (MD5) algorithm, which may yield different signatures for files differing in content by as little as a single bit, although it is contemplated that any suitable signature-generating algorithm may be employed. The record may also include additional information other than or instead of that previously described.","In one embodiment, the metadata record stored by filter driver  subsequent to detecting a particular file operation may be generated and stored in a format that may include data fields along with tags that describe the significance of an associated data field. Such a format may be referred to as a \u201cself-describing\u201d data format. For example, a data element within a metadata record may be delimited by such tag fields, with the generic syntax:\n\n<descriptive_tag>data element<\/descriptive_tag>\n\nwhere the \u201cdescriptive_tag\u201d delimiter may describe some aspect of the \u201cdata element\u201d field, and may thereby serve to structure the various data elements within a metadata record. It is contemplated that in various embodiments, self-describing data formats may employ any of a variety of syntaxes, which may include different conventions for distinguishing tags from data elements.\n","Self-describing data formats may also be extensible, in some embodiments. That is, the data format may be extended to encompass additional structural elements as required. For example, a non-extensible format may specify a fixed structure to which data elements must conform, such as a tabular row-and-column data format or a format in which the number and kind of tag fields is fixed. By contrast, in one embodiment, an extensible, self-describing data format may allow for an arbitrary number of arbitrarily defined tag fields used to delimit and structure data. In another embodiment, an extensible, self-describing data format may allow for modification of the syntax used to specify a given data element. In some embodiments, an extensible, self-describing data format may be extended by a user or an application while the data is being generated or used.","In one embodiment, Extensible Markup Language (XML) format, or any data format compliant with any version of XML, may be used as an extensible, self-describing format for storing metadata records, although it is contemplated that in other embodiments, any suitable format may be used, including formats that are not extensible or self-describing. XML-format records may allow arbitrary definition of record fields, according to the desired metadata to be recorded. One example of an XML-format record is as follows:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<record sequence=\u201c1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"<type>application\/pdf<\/type>"]},{"entry":[{},"<user id=1598>username<\/user>"]},{"entry":[{},"<group id=119>groupname<\/group>"]},{"entry":[{},"<perm>rw-r--r--<\/perm>"]},{"entry":[{},"<md5>d41d8cd98f00b204e9800998ecf8427e<\/md5>"]},{"entry":[{},"<size>0<\/size>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["260","250","250","250","205","250","221","221","250","221","250","221","250"],"i":["a","a","a","a ","a "]},"It is noted that in some embodiments, metadata may be stored in a structure other than a named stream. For example, in one embodiment metadata corresponding to one or more files may be stored in another file in a database format or another format. Also, it is contemplated that in some embodiments, other software modules or components of file system  may be configured to generate, store, and\/or retrieve metadata. For example, the metadata function of filter driver  may be incorporated into or duplicated by another software module.","In the illustrated embodiment, file system  includes event log . Event log  may be a named stream similar to named streams ; however, rather than being associated with a particular file, event log  may be associated directly with file system . In some embodiments, file system  may include only one event log , while in other embodiments, more than one event log  may be provided. For example, in one embodiment of file system  including a plurality of local file systems  as illustrated in , one history stream per local file system  may be provided.","In some embodiments, filter driver  may be configured to store a metadata record in event log  in response to detecting a file system operation or event. For example, a read or write operation directed to a particular file  may be detected, and subsequently filter driver  may store a record indicative of the operation in event log . In some embodiments, filter driver  may be configured to store metadata records within event log  regardless of whether a corresponding metadata record was also stored within a named stream . In some embodiments event log  may function as a centralized history of all detected operations and events transpiring within file system .","Similar to the records stored within named stream , the record stored by filter driver  in event log  may in one embodiment be generated in an extensible, self-describing data format such as the Extensible Markup Language (XML) format, although it is contemplated that in other embodiments, any suitable format may be used. As an example, a given file named \u201c\/test1\/foo.pdf\u201d may be created, modified, and then renamed to file \u201c\/test1\/destination.pdf\u201d in the course of operation of file system . In one embodiment, event log  may include the following example records subsequent to the rename operation:",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<record>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<op>create<\/op>"]},{"entry":[{},"<path>\/test1\/foo.pdf<\/path>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/record>"]},{"entry":[{},"<record>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<op>modify<\/op>"]},{"entry":[{},"<path>\/test1\/foo.pdf<\/path>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/record>"]},{"entry":[{},"<record>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<op>rename<\/op>"]},{"entry":[{},"<path>\/test1\/destination.pdf<\/path>"]},{"entry":[{},"<oldpath>\/test1\/foo.pdf<\/oldpath>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}],"b":["250","250","250","221","270"],"i":["a ","b ","a"]},"As described above, in various embodiments different types of file system content access events may occur during the course of operation of file system , and such events may be recorded in a variety of ways, such as in named streams, an event log, or through other techniques or structures. In some embodiments, an application (such as may be represented by one or more of processes ) may be interested not only in file system content itself (e.g., file data), but also in events relevant to file system content. That is, an application may be interested in the dynamics of file system content, and may take various actions depending on whether particular file system content is created, deleted, or modified in a particular way. For example, a user may wish to be notified via an application if a file system content access event occurs that results in modification of a spreadsheet such that a revenue figure stored in a particular spreadsheet cell exceeds a predetermined value.","In some embodiments, applications interested in file system content or content-related events may be configured to execute on the same computer system as the file system managing the content and\/or events, while in other embodiments, some such applications may be configured to execute on a different computer system and to communicate with the file system via a network or other type of interconnect. In a system employing a conventional request\/response model for interfacing applications to other processes or entities (such as storage management system  or file system ), an application may make a synchronous request for information, such as content access event information, from a source such as file system , for example. If the information source executes on a remote system with respect to the requesting application, the application may further need to specifically identify the remote system (such as by determining the Internet Protocol (IP) address of the remote system) and to direct its request to the remote system using appropriate programming conventions and communication protocols. For example, the application may invoke a Remote Procedure Call (RPC) that results in the information request being transmitted to the identified remote system via a transport protocol such as Transmission Control Protocol (TCP). Typically, such a request is made synchronously, such that the requesting application waits for an eventual response from the remote system before proceeding.","The conventional synchronous request\/response programming model may present several challenges, particularly in conveying event-oriented information to interested recipients. For example, each requesting application may need to submit a request to the information source, which may be redundant if multiple applications are requesting information about the same events or if no new events have occurred since the last request was made. Requiring a requestor to track the specific identity of an information source (e.g., to perform an RPC) may add programming and execution overhead to the requesting application. Further, performance may suffer if the requesting application synchronously waits for a response from the source, particularly if no new information is conveyed by the response. Additionally, if a request or a response is lost in transit, for example due to a communications failure or a failure of the system hosting the requested source, a requesting application could experience deadlock or malfunction.","Alternatively, in one embodiment, applications may be configured to receive information about file system content access events using a publish-subscribe programming model. Generally speaking, a publish-subscribe programming model may provide for asynchronous transfer of information from a source to a recipient. Specifically, in a typical publish-subscribe model, a source (or \u201cpublisher\u201d) may publish, or make available, different types of information to which individual recipients (\u201csubscribers\u201d) may subscribe. Subscribers may receive only those types of information to which they have subscribed. Further, in some instances subscribers may receive such information in response to its publication, without specifically making a request for that information. It is contemplated that in some embodiments, an application, system or other entity may be a publisher with respect to some information and a subscriber with respect to other information.","In some publish-subscribe programming model embodiments, publish-subscribe channels (or simply \u201cchannels\u201d) may be used to mediate information transfer between publishers and subscribers. Generally speaking, a publish-subscribe channel may be a software entity configured to receive information published by a publisher and to notify subscribers of the availability of published information. In some embodiments, a publish-subscribe channel may include queuing or other storage functionality configured to store published information before it is delivered to subscribers. In various embodiments, a publish-subscribe channel may deliver published information to subscribers directly in response to publication, or the channel may deliver a notification or indication of new publications and may deliver the actual published information in response to a request by the subscriber. A channel may also be configured to archive publications for a period of time, so that a new subscriber may be able to retrieve information that was published prior to subscription.","In one embodiment, different channels may correspond to different categories or types of information to which a subscriber may subscribe. For example, a newspaper's web server may publish stories corresponding to one or more different categories such as \u201cnews,\u201d \u201csports,\u201d and \u201cbusiness.\u201d Each category may have a corresponding channel to which users may subscribe through an application, such as a publish-subscribe-aware web browser or aggregator. When the web server publishes a given story, the story may be placed in the appropriate channel or channels. Responsively, upon receiving the story, a given channel may notify subscribers to that channel that new content is available, and\/or may deliver that content directly to subscribers. In some embodiments, multiple publishers may be configured to publish information to a single set of channels.","In some embodiments of publish-subscribe channels, publishers may not be aware of what subscribers are receiving published information; the publish-subscribe system including the channels may be configured to manage subscriber information. Similarly, subscribers need not precisely identify publishers in order to receive information, as is often the case in the request\/response model. Further, the publisher need not necessarily be available at the time the subscriber receives published information, or vice versa. The channel may serve to decouple content delivery such that neither publisher nor subscriber is waiting for action on the part of the other.","Information conveyed by the channel from publishers to subscribers may be formatted according to any suitable protocol. For example, in one embodiment published information may be stored in a data format compliant with a version of the Extensible Markup Language (XML) format, although other formats such as Hypertext Markup Language (HTML), Rich Text Format (RTF) or other standard or proprietary formats are also contemplated. Additionally, the channel may use a particular syndication protocol to manage published information, subscription information, etc. For example, in one embodiment a channel may be compliant with a version of Resource Description Framework (RDF) Site Summary (RSS) protocol, such as RSS 0.9x, RSS 1.0, RSS 2.0, or another suitable syndication protocol.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5","FIG. 2","FIG. 5"],"b":["205","500","500","510","500","205","510","112","100","510","500","510","205","500","500"],"i":["a","c ","a","c ","a","c "]},"As described previously, in some embodiments file system  may be configured to detect various types of file system content access events. For example, filter driver  may be configured to perform in-band detection of such events as file open, close, create, delete, modify or rename operations, or other operations. In response to detection of such an event, file system  may be configured to publish a record of the event to publish-subscribe channel . For example, filter driver  may be configured to generate an XML record of the event similar to the record created for storage in event log , described above. Rather than storing the record in an event log, however, filter driver  (or another component of file system ) may be configured to invoke a publication API or other mechanism exposed by channel , through which the record corresponding to the detected event may be conveyed to the channel.","After receiving a record of a file system content access event from file system , channel  may store the record internally, for example in a queue. Additionally, channel  may consult subscription information, which may be maintained internally to the channel in some embodiments or in a central subscription server in other embodiments (e.g., embodiments including multiple different types of channels , such as described in greater detail below). In one embodiment, channel  may send a notification to each subscriber  indicating that one or more file system content access events have been published and are available, but may not send the event records themselves until a given subscriber  sends an explicit request. In another embodiment, channel  may attempt immediate delivery of event records to subscribers  without waiting for a subscriber request. Channel  may retain a given record internally until it has been delivered to each subscriber  known to channel , after which channel  may delete the event record or retain it indefinitely.","In some cases, not all subscribers  may be available at the time channel  attempts to send an event record or an event notification. For example, a computer system hosting a given subscriber  may fail or be disconnected from a network. In some embodiments, channel  may maintain state information corresponding to each subscriber  indicative of the published events that have successfully been delivered to each subscriber . For example, channel  may associate a timestamp with each event published by file system , where the timestamp identifies the time and\/or date of publication. Channel  may further store, for each subscriber , a timestamp indicative of the last event successfully delivered to that subscriber, and may use such stored timestamps to manage notification and delivery of events to subscribers . In an alternative embodiment, each subscriber  may maintain its own state information, e.g., a timestamp indicating the last event successfully received, and may convey this timestamp to channel  as part of a request for event records. In response to such a request, channel  may be configured to deliver those records published more recently than the time indicated by the conveyed timestamp.","It is noted that while in some embodiments, file system  may record information about file system content access events in named streams  and event log  in addition to publishing file system content access events to channel , named streams  and event log  are in no way essential to the publication of such events to channel . In some embodiments, it is contemplated that named streams  and\/or event log  may be omitted while the publish-subscribe interface centering around channel  may be retained.","Customizing Publish-Subscribe Channels Using Queries","In the embodiment just described, a single channel  was illustrated. In one embodiment, file system  may be configured to publish all detected file system content access events to channel , such that channel  serves as a \u201craw\u201d or unfiltered channel for conveying events to subscribers. (It is noted that in some embodiments, not all possible file system content access events that may occur may be detected for the purposes of publication. For example, file read events may be numerous, and to publish all file read events may consume considerable resources and bandwidth compared to other types of events. Consequently, in one embodiment filter driver  may be configured not to publish file read events, or any other particular type of event.)","While having a raw event channel of global scope with respect to file system  may be useful for some applications (e.g., performance monitoring, system administration, security or data mining applications), for other applications the majority of events published via a raw channel may be superfluous. For example, some applications may be interested in events pertaining to file system content of a particular type, such as spreadsheet files or word processor document files, for example. Further, some applications may be interested in events pertaining to specific content within a file, such as a spreadsheet cell or a particular section of a text document.","In some embodiments, specific events may be selected for publication to a given channel dependent on whether the events satisfy a query that specifies particular criteria for selection. That is, events may be filtered prior to publication to a specific channel dependent upon various criteria. The available criteria for such query-based filtering may depend on the format in which the file system content access events and\/or the underlying file system content is stored. For example, in one embodiment file system content may be stored in a fixed, non-extensible format, such as a tabular data structure where a data item's description is inherited from row and column definitions rather than from a self-describing format tag. Further, events related to such content may also be conveyed in a similar fixed format. In such an embodiment the criteria by which events may be selected may be determined by the defined structure of the format, such as the available row and column definitions. In embodiments where file system content is stored in an extensible, self-describing format, such as the XML format described above, the criteria available for selecting desired file system content may include any of the self-describing features of that content.","One embodiment of a system configured to selectively publish file system content access events to publish-subscribe channels dependent upon evaluation of queries is illustrated in . In the illustrated embodiment, file system  may be configured to publish events to a publish-subscribe system , which includes a plurality of publish-subscribe channels -. Each channel -has a respective subscriber -, which may be configured similarly to subscribers -described above. Additionally, publish-subscribe system  is configured to interact with a query system  to filter events for publication to one or more of channels . File system  may also be configured to convey events and file system content directly to query system .","Each of channels -may be generally illustrative of channel . However, in the illustrated embodiment, some or all of channels  may be associated with a respective query, where a given event generated by file system  may be published to a given channel  dependent on whether the given event satisfies a query corresponding to the given channel. In some embodiments, one of channels  may be configured as a default or raw channel to which all detected events may be published, as described above in conjunction with the description of . It is noted that in various embodiments, more or fewer channels may be implemented, and that multiple subscribers  may subscribe to a given channel .","Query system  may be configured to evaluate queries on behalf of channels . Generally speaking, a query may specify how a subset of data is to be selected from a larger set of data, for example through the evaluation of one or more data fields of a record stored in a self-describing format. For example, a user, via an application, may wish to select all events that correspond to the file \/test1\/foo.pdf for further analysis. Correspondingly, the user may construct a query that specifies the selection of all events having a data field tagged \u201cpath\u201d where the data field equals a particular value, such as \u201c\/test1\/foo.pdf\u201d. A query may specify a particular state or states of file system content in addition to or instead of a particular type of event. For example, a user may be interested in writes of particular data to a set of files. A corresponding query may include specification of a write event as well as content state. In some embodiments, it is contemplated that the entirety of file system content may be queried, including file data stored within files  as well as metadata stored within named streams , whether generated in-band, e.g., by filter driver , or out-of-band, or whether the metadata is defined and\/or generated externally to file system , e.g. by an application process  via API .","Queries may be constructed in a query language, which may provide syntactic constructs for the selection of sets of data based on the value of one or more tagged data fields. In some embodiments, a given query language may support procedural features, such as functions, for example, in addition to set-selection features. Further, in some embodiments a given query language may support the embedding within a query of procedural routines coded in other programming languages, such as Java or C, for example. Where the XML format is used to structure file system content, a given application may construct a query to select particular file system content in the XML Query (XQuery) language as specified by the World Wide Web Consortium (W3C) or any future XQuery standard or variant thereof. However, it is contemplated that any suitable query language may be employed.","In the illustrated embodiment, query system  further includes query engine  and index\/commit engine . In one embodiment, query engine  may be configured to parse and evaluate queries submitted to query system  by channels . For example, query engine  may receive a query corresponding to a given channel  that specifies the selection of all word processing document files exceeding a given file size. Query engine  may parse the query for syntactic correctness, and may return an error condition if the query is malformed. In some embodiments, query engine  may also perform structural transformations to the query, for example to decompose the query into multiple queries and\/or to optimize the query for performance. Next, query engine  may examine one or more event records (i.e., generated by file system ) to determine whether the events satisfy the query. For example, query engine  may examine metadata records stored in named streams  to determine whether a file named in an event record is of the specified document type and size. Query engine  may further indicate to publish-subscribe system  whether the query has been satisfied. If a given event satisfies a query associated with a given channel , a record of the event may be published to given channel  as described previously. Numerous implementations of query engine  configured for parsing and evaluating queries are possible and contemplated.","In some embodiments, query engine  may interact directly with file system  (or more generally, with storage management system ) to access file system content in response to evaluation of a query. However, in some instances, query evaluation performance may be improved by creating one or more indexes of file system content and using these indexes to assist in query evaluation. In the illustrated embodiment, index\/commit engine  may be configured to generate and maintain these indexes, and to provide index information to query engine  during the evaluation of queries.","Generally speaking, an index may be any data structure that organizes a collection of data according to some aspect or attribute, facilitating querying of the data by the indexed aspect or attribute. For example, in one embodiment an index may be a list of names of all files  defined with file system , organized alphabetically. In some embodiments, multiple indexes of file system content may be employed. For example, if file system content is frequently queried by name, associated user, and content creation\/modification time, individual indexes that sort or organize file system content by each of these attributes may be created. In some embodiments, more complex indexing schemes may be employed, including indexes that combine multiple content attributes into complex state spaces. Additionally, it is contemplated that indexes may be implemented using any suitable data structure, including lists, tables, trees, and higher-order data structures.","In some embodiments, query system  may include other functionality not shown. For example, in one embodiment query system  may be configured to execute on a computer system distinct from that hosting publish-subscribe system , and to communicate with multiple computer systems via a network to receive queries for evaluation. In one such embodiment, query system  may include connection management functionality configured to authenticate remote applications and to process query requests from multiple source. Also, in some embodiments query system  may include data layout management functionality to facilitate the management and storage of indexes. In one embodiment, query system  may be configured to provide a generalized query interface accessible directly by applications within application layer , in addition to providing query evaluation for publish-subscribe system . For example, in one such embodiment query system  may logically reside between application layer  and storage management system  of , and may expose an API  through which various applications  may query file system content stored via storage management system .","Through the association of particular queries with specific channels , the set of events conveyed to a given individual subscriber  may be narrower in scope than the total set of events published by file system . In various embodiments, the evaluation of queries associated with channels  may be performed in different ways with respect to event publication. For example, in one embodiment, query evaluation may occur in response to event publication. Specifically, file system  may publish events to publish-subscribe system . Responsively, publish-subscribe system  may convey an indication of a published event (e.g., an XML or other type of record of the event) to query system  along with the queries (if any) corresponding to each of channels . Query system  may then evaluate the queries with respect to the published event (as well as any file system content specified by the query) and may indicate to publish-subscribe system  whether any queries have been satisfied. Any channel  having a corresponding query satisfied by the event may publish the event to its subscribers  as described previously. If a given event satisfies no queries corresponding to channels , and there is no raw or default channel , the given event may be discarded by publish-subscribe system .","In an alternative embodiment, evaluation of queries may occur in response to receiving a request for channel content from one or more subscribers . For example, a subscriber  may request that any new events be delivered independently of whether that subscriber  received a notification that such new events had been published. In one embodiment, publish-subscribe system  may store events published by file system  in a queue or in a default channel . Upon receiving a channel content request from one of subscribers , query evaluation as described above may occur with respect to those stored events not yet published to specific channels .","In addition to management of channels  and interfacing with query system  for query evaluation, publish-subscribe system  may perform other functions. For example, publish-subscribe system  may maintain a database of information pertaining to available channels  and associated subscribers . Publish-subscribe system  may also present an interface to applications whereby applications may determine the channels  that are available for subscription and may request the creation of new channels  (along with associated filtering queries) if necessary. Additionally, in some embodiments, either publish-subscribe system  or individual channels  may maintain state information, such as timestamp information corresponding to published events that have been delivered to subscribers . Alternatively, an event published to a specific channel  may be delivered to a subscriber  dependent upon whether the event occurred more recently than a time indicated by a timestamp provided by the subscriber .","In the illustrated embodiment, publish-subscribe system  has been shown as distinct from query system , and state associated with channels  (such as a query associated with a channel) may be stored by publish-subscribe system  externally to query system . However, in some embodiments, channels  and their associated state (including subscription information and other management details handled by publish-subscribe system ) may be implemented directly within query system .","One embodiment of a method of publishing file system content access events using a publish-subscribe system is illustrated in . Referring collectively to  through , operation begins in block  where a file system content access event is detected. For example, filter driver  may be configured to perform in-band detection of various types of events as described above.","In response to event detection, a record of the event is published to a publish-subscribe channel accessible by one or more applications (block ). For example, file system  may publish the detected event to a default channel  (i.e., a channel with no associated query filter) within publish-subscribe system . Additionally, default channel  may have one or more subscribers  as described above. It is contemplated that in some embodiments, unconditional publication of events to a default channel may be omitted. Additionally, as described above, in some embodiments not every detectable event may be published; rather, file system  may be configured to publish a subset of all possible event types.","In the illustrated embodiment, a query associated with a given channel is evaluated with respect to the detected event (block ). For example, one or more channels  may be associated with respective queries, which may be conveyed to query system  for evaluation with respect to a given event. As described above, such evaluation may occur in response to generation of the event by file system , in response to a channel content request from a subscriber , or at another suitable time.","In response to determining that the detected event satisfies a particular query (block ), that event is published to a channel associated with the particular query (block ). If an event satisfies no query, it may be published to a default channel if one is provided (as in block ) or not published.","Content Processing System and Transactional Events","As described above, in some embodiments file system  may be configured to perform in-band detection of various file system content access events, and to generate metadata and\/or publish events in response to such detection. These events may arise, in some instances, as the result of the execution of various application processes. For example, a given application may cause a file to be manipulated in any of various ways (such as opening, closing, reading, writing, copying, renaming, or any other type of file activity) for which a corresponding metadata record may be generated. In such embodiments, the resulting event records may enable the systematic tracking of file system activity generated by a given application or process, where such tracking may be performed to an arbitrary degree of specificity and may be transparent to the application.","In some instances, numerous applications may interact with storage management system  as part of a complex, heterogeneous data processing system. For example, an enterprise may use a database application to manage inventory and production, an accounting application to track billing and receipts, a finance application to generate quarterly reporting, and a human resources application to identify personnel details. Additional or different applications may be provided in various embodiments.","Some of these applications may be versions of the same application (for example, accounting and finance may use common or related applications), or they may be tightly coupled applications, i.e., they may be substantially aware of each other's presence and data, such as by sharing a common API through which they may directly communicate and coordinate. For example, upon processing a bill, the accounting application may directly notify the finance application to update a budget. Other applications may be provided by different vendors and may be only loosely coupled, i.e., they may share a common data format, but may possess limited ability to directly communicate and coordinate each other's operation. For example, the finance application may be capable of importing salary and benefits information generated by the human resources application in response to a user's intervention, but may not be capable of directly requesting and receiving that information without some such intervention. Finally, in some cases, certain applications may be entirely incompatible, lacking the ability either to share data or directly interact.","Certain complex enterprise operations may involve not just one, but several applications, not all of which may be tightly coupled to one another. Such operations, which may be referred to as transactions, may include a series of operations to be undertaken by one or more applications in a particular order or in response to a particular event. The series of operations comprising a transaction may also be referred to as the process or procedure implemented by the transaction, and may be arbitrarily defined according to the capabilities of the various applications available. Additionally, a transactional event may be associated with the completion of a transaction or completion of an identified step or state in the process implemented by the transaction. In some embodiments, a transactional event may occur in response to detection of a file system content access event (such as arising from the activity of one or more applications as described below) or to detection of a particular state of file system content, such as a particular data value. Generally, however, transactional events may occur within the context of a particular transaction, whereas file system content access events in themselves may lack transactional context.","The status of a transaction may not be evident from the activity of a single constituent application; rather, the transaction may be a function of the activity of all relevant applications taken together with information regarding the process defining the transaction. For example, depending on the procedure defined in a given enterprise, processing of a purchase order may involve several steps. The purchase order may first be entered, such as through a dedicated application or email interface. Once entered, the identity and authority of the requestor may be validated, such as by verifying that the requestor is an employee with the appropriate signature authority using a human resources application. Subsequently, financial approval may be obtained, which may include using a financial application to verify that the request falls within the budget of the individual or organization requesting the order. Depending on the results of these various steps and the complexity of the enterprise's policy, additional verifications such as management approvals may be obtained. When all requirements are satisfied, the order may be transmitted to a vendor, completing the purchase order transaction process.","Any of the applications functioning in support of a complex transaction may generate activity within storage management system  as file system content is manipulated. File system content, including file data and\/or metadata records corresponding to the activity, as well as content access events may be generated in response to such activity as described above. However, as previously noted, in some instances, the progress of a given transaction through its defined process (such as may be indicated by transactional events) may not be evident from the activity of a given application as reflected in the file system content corresponding to its activity. For example, a human resources application may reflect personnel data, but not budget data. Consequently, querying the human resources application may result in verification that a given individual has appropriate signature authority for a particular purchase, the result of which querying may be indicated in file system content. However, the human resources application may not be capable of determining whether sufficient budget exists for the purchase. In fact, in some instances any given application, such as the human resources application, may generally be unaware of a broader transactional context for its operation. That is, the application may be unable to distinguish whether a given query is or is not part of the process of a given transaction that may span multiple applications.","To configure each application that may potentially participate in a given transaction to be able to directly interact with other applications may be difficult or impractical. For example, if the functionality of one or more applications is fixed by an external supplier, it may not be possible to perform such configuration. In the embodiment illustrated in , content processing system  is added to the system illustrated in . In various embodiments, content processing system  may be configured to monitor file system content and related file system content access events stored by file system , and to generate transactional events in response to such monitoring. These transactional events may be published to channels  of publish-subscribe system  in a manner similar to the publication of file system content access events described above.","In the illustrated embodiment, content processing system  includes a content processing daemon  configured to interact with a plurality of content type specific processors -, which may also be referred to simply as content processors . Content processing daemon  may be configured to interact with files , named streams , and event log  of file system . Additionally, content processing daemon  may be configured to interact with publish-subscribe system .","In the illustrated embodiment, content processing daemon  may be configured to perform out-of-band detection of operations and events that have been detected in-band and recorded by filter driver . For example, content processing daemon  may occasionally scan event log  or a default channel  to determine what file system content access events have occurred since the last scan. In response to detected events, content processing daemon  may generate transactional events and\/or additional file system content as described in greater detail below. In some embodiments, it is contemplated that content processing daemon  may scan files  and\/or named streams  directly, while in other embodiments content processing daemon  may use event log  to access those files  and named streams  corresponding to recorded events. Additionally, it is contemplated that in some embodiments, content processing system  may include its own log of events updated in response to notification by filter driver , or may use a default channel  configured to record all detected file system content access events, rather than using event log .","Content processing daemon  may be configured to publish a transactional event determined by one or more of content processors . In one embodiment, a content processor  may include procedural code or logic configured to monitor the defined process of a particular transaction. For example, a given content processor  may implement an algorithm or state machine that describes a sequence of operations and any transactional events defined as part of a particular transaction. A content processor  may also include identifying information for the file system content relevant to the transaction, such as particular files  that may be accessed during the course of the transaction. Additionally, a content processor  may include information to identify the specific applications corresponding to various operations. For example, if a given transaction includes a step to be performed by an accounting application, a corresponding content processor  may include the specific application identifying information, such as an application name or identifying code, that may be included in a metadata record generated by filter driver  for a given file  when that file is accessed by the accounting application.","In some embodiments, a given content processor  may be configured to process all instances of a particular transaction. For example, a content processor  configured to monitor the purchase order transactions described above may be configured to process all purchase order transactions that are in progress at a given time. In such embodiments, given content processor  may include data structures whereby individual transactions may be distinguished within the processor, such as by a timestamp or unique identifier. In other embodiments, each content processor  may correspond to a single instance of a given transaction. For example, when a new transaction is detected, a new instance of a content processor  may be spawned from an existing instance (such as a template) or from content processing daemon . It is contemplated that in some embodiments, content processors  and content processing daemon  may be implemented as a single processing entity, such as a single software module.","The operation of a given content processor  may be determined by the algorithm it implements in combination with file system content access event information received via content processing daemon . In one embodiment a content processor  may initially be in an inactive or idle state until triggered by a particular file system content access event. For example, in a system where a purchase order is initiated by emailing the purchase order to a particular email account, filter driver  may create a metadata record within event log  and\/or publish an event to publish-subscribe system  in response to appending the contents of a received purchase order to a file associated with the particular email account. Subsequently, content processing daemon  may detect the record and convey an indication of the record to a purchase order content processor , which may responsively activate. In an alternative embodiment, individual instances of content processors  may be spawned by content processor daemon  in response to detection of an appropriate activating event.","In one embodiment, a content processor  may be a passive monitor that functions to detect when a given sequence of file system content access events has transpired or a given state of file system content has occurred. Content processor  may responsively publish one or more transactional events to publish-subscribe system , which may be published to specific channels  dependent upon whether the transactional event satisfies a respective query associated with a given channel , as described above. For example, a content processor  may be configured to detect whether a sequence of events, such as the steps of an approval process, have been executed in the appropriate order by examining metadata records generated by filter driver  in response to application activity undertaken during the process. A transactional event may be generated if the specified sequence of content access events has occurred. In another case, a content processor  may be configured to determine whether file system content is well-formed, according to a particular syntax or schema. For example, a content processor  may examine metadata records or file data following an update to determine whether it is syntactically correct, properly structured (i.e., required data is present), etc.","In another embodiment, a content processor  may be configured to actively modify file system content, and\/or to invoke other applications in response to detecting various transactional events, in addition to publishing such transactional events to publish-subscribe system . For example, in a document publishing environment, a given document may be made available to users in several different formats (e.g., Portable Document Format (PDF), HTML format, Microsoft Word format). In such an environment, a content processor  may be configured to automate the generation of necessary versions of a given document, and to publish one or more transactional events indicated such generation. For example, a content processor  may be configured to detect when a master version of a document in a given file  has been updated, by detecting a metadata record of an update to that file in named stream  and\/or event log . Upon detecting the update, content processor  may invoke the appropriate generator or translator applications to convert the updated master version to each of the desired formats. Such conversion may occur transparently to the user or application updating the master document, or that application (or any other application subscribing to the transactional event) may detect the update when the corresponding transactional event is published to channels .","In some embodiments, content processors  may be configured to generate different forms of output in addition to publication of transactional events. In one embodiment, a content processor  may generate an out-of-band metadata record in response to its processing. For example, a content processor  configured to perform schema validation of structured data in a given file  may generate a metadata record indicating the status of its check within the corresponding named stream . In other embodiments, content processors  may be configured to generate or modify file data instead of or in addition to metadata. For example, the aforementioned schema validator may be configured to correct certain defects detected while validating structured data, such as by truncating malformed records or filling in missing data fields. As another example, content processors  may be configured to interact with applications or users. For example, a content processor  may be configured to invoke an application's API in response to detecting a particular event such as a document content update. It is contemplated that in one embodiment, one or more content processors  may be configured to generate metadata records in an extensible, self-describing data format such as described above, which may include a format compliant with any version of the XML format.","It is noted that while content processing system  and its various components may interact with applications that are processes  within application layer  as described above, content processing system  and its various components are distinct from applications. In general, particular applications may not be aware of the activity of other applications and may not have access to the metadata generated during the course of operation of file system . However, in the illustrated embodiment content processing system  does have access to such metadata, and by virtue of such access may be configured to detect transactional events not fully represented by the operation of a particular application.","It is further noted that publication of transactional events to publish-subscribe system  may be performed similarly to the publication of file system content access events as illustrated in  and described above. Additionally, it is contemplated that any of the elements illustrated in , including file system , content processing system , channels , subscribers\/applications , publish-subscribe system , and query system  may be implemented as program instructions and data stored and\/or conveyed by a computer-accessible medium as described above.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
