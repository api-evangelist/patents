---
title: Telephony voice server
abstract: A voice server for hosting telephony services can include a stack interface configured to exchange telephony signaling information with a circuit-switched to packet-switched interface and a plurality of core clients, each having a call model stored therein. Each core client can be configured to select and execute at least one voice service associated with a call. The voice server further can include a speech processing system configured to convert speech to text and to convert text to speech for processing the call as well as a core processor. The core processor can be configured to distribute the telephony signaling information to the core clients and coordinate operation of the core clients and the speech processing system. The core processor also can exchange telephony signaling information with the circuit-switched to packet-switched interface via the stack interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07103156&OS=07103156&RS=07103156
owner: International Business Machines Corporation
number: 07103156
owner_city: Armonk
owner_country: US
publication_date: 20021204
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Technical Field","The invention relates to the field of telecommunications and, more particularly, to an architecture for providing voice services in or to a telecommunications network.","2. Description of the Related Art","Telecommunication companies continually create new telephony services and\/or features (hereafter \u201cvoice services\u201d) to be offered to subscribers. Voice services are a blend of voice processing technology, call control, and enterprise applications. Voice processing technology is used to recognize both spoken inputs and touch tone inputs from users over a telecommunication link. These inputs direct how a user call is to be handled by the voice service. The inputs also can determine whether a call will be and subsequently is provided to one or more enterprise applications.","Voice servers implement interactive voice response technology with telephony call control. A voice server can execute voice services which can interact with a caller and also redirect calls responsive to user inputs. Accordingly, many businesses rely upon these solutions to direct incoming calls to various locations within an office. Similar to conventional voice response unit (VRU) type systems, more sophisticated voice server solutions can incorporate enterprise data. For example, an inbound call to an employee can be redirected automatically to a telephone number listed in the electronic calendar of the employee.","Although voice servers mark a significant improvement over VRU technology, still, conventional voice servers do have disadvantages. Conventional voice servers utilize an architecture wherein high bandwidth data such as speech is routed throughout the voice server, including to voice and telephony services, thereby requiring the voice server to handle a significant amount of bandwidth throughout the internal communication channels of the voice server. For example, conventional voice servers utilize an architecture which includes a core processor that interacts with a core client. The core client serves as an interface to one or more telephony services. Within such voice server architectures, high bandwidth data typically is routed between the core client and the core processor. The significant amount of bandwidth necessary to route speech data throughout the voice server can place a heavy load on the voice server.","Another disadvantage of conventional voice servers is that such systems are commonly viewed as a single entity comprised of both the voice processing hardware and software components. In consequence, conventional voice servers locate both telephony services and call control including signal routing within the same software component. As a voice processing system expands beyond a single voice server, each added voice server implements and supports its own individual and single call model, resulting in multiple call models. An expanded system architecture of multiple voice servers, however, can become less reliable as the system is unlikely to function as expected, that is as a single, unified entity.","Another disadvantage of conventional voice server architectures, is that the core processor includes the call model. This configuration can reduce operational efficiency as well as complicate expandability of the voice server. More particularly, when multiple core clients are introduced into the voice server, complex call model and communication facilities must be included in the voice server architecture to coordinate and manage the core clients and other components of the voice server.","The invention disclosed herein provides a voice server architecture which provides improved call handling ability and improved scalability over conventional voice servers. The present invention routes high bandwidth data such as speech within the voice server in such a way as to minimize needed bandwidth. Additionally, the core clients can include the call model, while the core processor can include lookup services and\/or lookup functionality. Service creation also can be improved by providing for an interface between the service logic and the core client.","One aspect of the present invention can include a voice server for hosting telephony services. The voice server can include a stack interface configured to exchange telephony signaling information with a circuit-switched to packet-switched interface. One or more core clients, each having a call model stored therein, can be included, wherein each of the core clients is configured to select and execute at least one voice service associated with a call. The call model disposed in the core clients can include an inbound call model and an outbound call model. According to another embodiment of the present invention, the core clients can include an application programming interface for communicating with the voice services. Notably, each core client can be associated with a virtual machine within which the one or more voice services can execute. The voice server can include a speech processing system configured to convert speech to text and to convert text to speech for processing the call.","The voice server also can include a core processor. The core processor can be configured to distribute the telephony signaling information to the core clients and coordinate operation of the core clients and the speech processing system. The core processor further can exchange telephony signaling information with the circuit-switched to packet-switched interface via the stack interface. Additionally, the core processor can be configured to perform lookup services.","Notably, according to the present invention, audio information within the voice server is routed to and from the speech processing system without being provided or routed to the core processor or the core clients. Also, the core clients, the speech processing system, and the core processor can communicate with one another via a packet-switched communications network.","The voice server can include an application programming interface to the speech processing system through which the core processor can interact with the speech processing system and through which the speech processing system can exchange text with the voice services via the core clients. The speech processing system can include a speech recognition system and a text-to-speech system. Notably, the speech processing system also can process dual tone multi-frequency signals.","If the speech processing system includes a speech recognition system and a text-to-speech system, the voice server can include an application programming interface through which the core processor interacts with the speech recognition system and through which the speech recognition system exchanges text with the voice services via the core clients. Another application programming interface through which the core processor interacts with the text-to-speech system and through which the text-to-speech system exchanges text with the voice services via the core clients can be included.","According to one embodiment of the present invention, the voice server can include at least one real-time streaming engine configured to convert audio data between a streamed audio format and a packetized data format for exchanging the audio data between the speech processing system and the circuit-switched to packet-switched interface. According to another embodiment of the present invention, two real-time streaming engines can be included. For example, a real-time streaming engine configured to convert streamed audio from the circuit-switched to packet-switched interface to packetized data to be provided to the speech recognition engine can be included as well as a second real-time streaming engine configured to convert packetized data from the text-to-speech processor to streamed audio to be provided to the circuit-switched to packet-switched interface.","The voice server of the present invention also can include a data store which associates voice services with the telephony signaling information, wherein each association of telephony signaling information with a voice service further specifies voice server resources required for implementing the voice service. The telephony signaling information can specify at least a called number and a calling number such that the core processor can access the data store to determine at least one voice service associated with the call and resources associated with the voice service. The core processor can be configured to determine an available one of the core clients and to provide to the available one of the core clients the called number, the calling number, the determined voice services, and the determined voice server resources associated with the call.","The stack interface can include one or more stack interfaces for exchanging telephony signaling information. Each of the stack interfaces can be dedicated to a particular telephony protocol. A consolidation processor can be included for coordinating communications between the core processor and the stacks. For example, the consolidation processor can be configured to read telephony signaling information from each of the stack interfaces and provide the telephony signaling information to the core processor. The consolidation processor further can be configured to receive telephony signaling information from the core processor and distribute the telephony signaling information to an appropriate one of the stack interfaces.","Another aspect of the present invention can include a method of processing calls within a voice server. The method can include identifying, within a core processor of the voice server, telephony signaling information for a call. The core processor can perform a lookup function with the telephony signaling information to determine voice services for processing the call. The telephony signaling information can be provided to a core client within the voice server. Notably, the core client can have a call model stored therein. The core client can use the received telephony signaling information to retrieve a voice service associated with the call. Accordingly, the core client can execute the voice service to process the call according to the executing voice service and the call model. In processing the call, the core client can exchange textual information with the speech processing system such that the core client does not receive or process an audio channel.","The method also can include receiving the call within a circuit switched to packet switched telephony interface and separating audio information of the call from telephony signaling information for the call. Audio information from the call can be formatted as streaming audio and can be provided to a speech recognition engine to convert the audio information to text to be provided to the executing voice service.","The telephony signaling information to be provided to the core processor can be placed on a telephony stack. Notably, telephony signaling information to be provided to the core processor can be placed on at least one of several telephony stacks, wherein each telephony stack corresponds to a particular messaging protocol. The telephony signaling information can be selectively provided to the core processor from one of the telephony stacks. The voice service also can provide playback text to a text-to-speech engine for playback. Accordingly, the playback text can be converted to speech. The speech can be formatted as streaming audio and can be provided to the circuit switched to packet switched telephony interface for playback over the call.","Another aspect of the present invention can include a method of processing calls within a voice server which includes executing a telephony voice service, and within the voice server, receiving audio over an established telecommunications link. The audio can be routed to a speech recognition engine for conversion to speech recognized text and can be provided to the telephony voice service for processing. The telephony voice service can determine text for playback and can provide the playback text to a text-to-speech engine for playback over the telecommunications link, such that audio is not processed by the telephony voice service.","The invention disclosed herein provides a voice server architecture, which provides improved call handling ability and improved scalability over conventional voice servers. In particular, the present invention provides a voice server which partitions voice services into four primary parts: network stacks, speech processing resources, a core processor, and core clients. In accordance with the inventive arrangements disclosed herein, high bandwidth data such as speech is not routed to the core clients. Additionally, the core processor can include lookup services while the call models can be included within the core clients.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","100","105","110","115","120","125","130","100"]},"The core processor  can communicate with and coordinate the operation of the various components of the voice server . The core processor  can process telephony signaling information for calls, perform lookup functions to determine services associated with received calls, as well as allocate resources required for processing a telephone call. For example, the core processor  can identify available core clients  for processing a telephone call as well as allocate speech processing resources.","Although the core processor  can receive telephony signaling information, audio or speech data for calls is not routed through the core processor . The core processor  does, however, include lookup services for querying data stores to determine telephony related information for a caller or call. Generally, lookup services enable communications over a network. As such, the core processor  can use a lookup protocol to obtain information regarding remote programs or machines and use that information to establish a communications link.","Each of the core clients  can serve as an interface between the core processor  and a voice service . One core client  can be allocated per voice service . The core clients   can store call models for both incoming and outgoing calls. The core clients can fetch and execute voice services as required for processing a given call. According to one embodiment of the invention, the core clients  can include virtual machines. Alternatively, the core clients  can be associated with or instantiate one or more virtual machines, such as voice browsers, in which the voice services can be executed. The voice service , upon execution, can provide interactive access to a caller as well as interface with any enterprise applications as may be required. Notably, the voice service , once executing, can interact with the core processor  via the core client  to instruct the core processor  as to where to route the speech data for telephone calls. The core client  can include a defined application programming interface (API) which facilitates communication between the voice services  and the core client .","The speech processing resources  of the voice server  can include speech recognition systems  and  as well as text-to-speech (TTS) systems  and . The speech recognition systems  and  can convert received speech to text. The TTS systems  and  can convert text to speech to be played to a caller. The speech recognition system  and the TTS system  can be incorporated into or provided as part of the voice server , while the speech recognition system  and the TTS system  can be third-party systems which can be added to or work cooperatively with the voice server .","The voice sewer  can be communicatively linked to a circuit-switched telecommunications network via a gateway  which serves as an interface between the telecommunications network and packet-switched network. More particularly, the gateway  can receive telephony information including telephony signaling information and audio or speech information over Tl links, integrated services digital network (ISDN) links, and\/or channel associated signaling (CAS) links. The gateway  can separate telephony signaling information from the speech and\/or audio data, as well as combine the two for transmission over the telecommunications network. Audio information for received calls can be converted to one or more streams of audio formatted in a suitable protocol such as Real-Time Transport Protocol. Similarly, one or more channels of streamed audio can be received in the gateway  and format converted for transmission over the telecommunications network.","The telephony signaling information can be converted from a circuit-switched format to a packet-switched format and placed on an appropriate stack conforming to one of multiple supported communications protocols. For example, received signaling information can be placed on the stack  conforming to an H.323 stack or the stack  conforming to a Session Initiation Protocol (SIP) stack. Notably, both stacks  and  can be implemented as Java stacks. The consolidator  can serve as an interface between any protocol stacks and the core processor . Accordingly, through the consolidator , the core processor  can receive or read telephony signaling information from the stacks  and  as well as write telephony signaling information back to the stacks  and .","In operation, the gateway  can receive an inbound call. As mentioned, the telephony signaling information can be separated from the audio information. Accordingly, the gateway  can format the received telephony signaling information for use with a packet-switched network and place the telephony signaling information on an appropriate stack such as the H.323 stack or the SIP stack. The consolidator  can take events from the stacks  and  and provide the telephony signaling information to the core processor  via a TCP\/IP connection.","Audio information from the inbound call can be format converted by the gateway  into a channel of streamed audio which can be routed to the real time streaming (RTS) engine . The real time streaming engine  can coordinate one or more channels of streaming audio, synchronize the channels, as well as link one or more of the streaming audio channels to the speech recognition system  or  for conversion to text.","The core processor , having received the telephony signaling information for the inbound call can perform one or more functions. As the telephony signaling information can specify the called number and the calling number, the core processor  can query the data store  and\/or  to determine one or more voice services to be implemented as well as any voice server resources  that may be required to process the call. The data stores  and  can include associations of telephony signaling data and voice services, references to voice services, as well as a listing of voice server resources required to implement the voice services. As shown in , the core processor  can query the data store  directly or can query the data stores via an appropriate interface such as API  and\/or .","The core processor , having determined one or more voice services  to be executed for processing the inbound call, can allocate the necessary voice server resources . For example, the core processor  can identify an idle core client  which is not being used by a voice service . The core processor  can pass the identified core client  the called number, the calling number, information describing the resources which have been allocated for processing the inbound call, as well as the services which are associated with the call.","The core client  can fetch the designated voice services, for example from another data store or an application server, and execute the voice service. The voice service determines whether the call will be accepted. If so, the voice service signals the core processor , via the core client , to accept the call and to route the voice channel to the appropriate speech processing device. Audio received via the inbound call can be processed by the speech recognition system  and can be routed to the voice service  as text strings. The speech recognition systems  and  can communicate with the core processor  and the core clients  via the speech recognition system API  as shown. Notably, the speech recognition system , being integrated into the voice server , can include an additional interface, such as an application toolkit providing further functionality for the speech recognition system .","The voice service  also can send text, whether generated by the voice service or obtained from another enterprise application, to the TTS system . Similar to the speech recognition systems, the core processor  and the core client  can communicate with the TTS system  via the TTS API . Additionally, as the TTS system  is integrated into the voice server , the TTS system  can include an additional interface, such as an application toolkit providing further functionality for the TTS system . Accordingly, text which is converted to speech via the TTS system  and\/or , can be provided to the RTS engine . The RTS engine  can receive speech from the TTS systems  and , and convert the received audio into one or more channels of streamed audio. As was the case with the RTS Engine , the RTS engine  can coordinate one or more channels of streaming audio, synchronize the channels, and provide the streaming audio channels to the gateway .","The gateway  can receive the streaming audio channels and convert the audio into a format suitable for transmission over the telecommunications network. Notably, the audio can be routed according to telephony signaling information provided to the gateway  by the core processor  via the consolidator  and the stacks  and .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["100","100","105","110","110","198","110","198","110","198","110","198"]},"The voice services to be executed to process an inbound call or initiate an outbound call can be retrieved from the Hypertext Transfer Protocol (HTTP) server  from the data store . The data store  can include a plurality of voice services which can be implemented in Voice Extensible Markup Language (VoiceXML), Java, Java Server Pages, Enterprise JavaBeans\u2122 (EJB), Servlets, and other types of scripts and\/or application programs. According to one embodiment of the present invention, the voice services can be stored using Java Archive file format. Data store  can include any required audio clips or segments for use with the voice processing services. Notably, the voice browser  can establish secure HTTP connections with the HTTP server  using secured socket layer (SSL).","During operation, the voice service , which is retrieved from the HTTP server  from the data store , can send text or application text to the TTS system  for conversion to speech which can be routed to a caller over an established telecommunications link. Speech or other audio signals such as dual tone multi-frequency signals received over the established telecommunications link can be recognized and\/or processed in the speech recognition system . The resulting textual representation of the processed audio can be routed or sent to the appropriate voice service . As noted, communications between the voice processing resources and the voice services can be facilitated through a packet-switched data link using, for example TCP\/IP.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","305","310","315","320","320","305"]},"If in wait state , a \u201cCONNECT\u201d command is received from the voice browser, the call model can proceed to state  where a \u201cCONN\u201d or connect command can be sent to the core processor. After state , the call model can proceed to wait state . If in wait state  a \u201cSTOP\u201d command is received from the voice browser, the call model can proceed to state  where an \u201cEND SESSION\u201d command is sent to the core processor. After state , the call model can proceed to wait state .","If in wait state  an \u201cEND SESSION\u201d command is received from the core processor, the call model can proceed to state , where a \u201cSTOP\u201d command is sent to the voice browser. After state , the call model can proceed to state  and then to wait state . If in wait state  an \u201cEND SESSION\u201d or \u201cTIMEOUT\u201d command is received from the core processor, the call model can proceed to state  where a \u201cSTOP\u201d command can be sent to the voice browser. The call model can proceed accordingly. If in wait state  a \u201cSTOP\u201d command is received from the voice browser, however, the call model can proceed to state  where an \u201cEND SESSION\u201d command can be sent to the core processor. The call model can proceed accordingly to wait state .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 4","FIG. 1"],"b":"400"},"The outbound call model can begin in wait state . If a \u201cDIAL\u201d command is received from the voice browser during execution of a voice service, the call model can proceed to state  where a \u201cSETUP\u201d command can be sent to the core processor. After state , the call model can proceed to wait state . In wait state , if an \u201cALERT\u201d is received from the core processor, then a \u201cRING\u201d command can be sent to the voice browser in state . After state , the call model can return to wait state .","If in wait state , a \u201cCONN\u201d or connect is received from the core processor, the call model can proceed to wait state . The call model can remain in wait state  until a \u201cSTOP\u201d command is received from the voice browser or an \u201cEND SESSION\u201d command is received from the core processor. If a \u201cSTOP\u201d command is received from the voice browser, the call model can proceed to state  where an \u201cEND SESSION\u201d command can be sent to the core processor. The call model then can return to wait state . If, however, an \u201cEND SESSION\u201d command is received from the core processor when in wait state , then the call model can proceed to state  where a \u201cSTOP\u201d command can be sent to the voice browser. The call model then can proceed to state  where an \u201cEND SESSION\u201d command can be sent to the core processor. The call model then can return to wait state .","If in wait state  a \u201cTIMEOUT\u201d or an \u201cEND SESSION\u201d command is received from the core processor, the call model can proceed to state  where a \u201cSTOP\u201d command can be sent to the voice browser. The call model then can proceed to state  and eventually return to wait state .","In the Appendix, several call processing conditions or scenarios have been illustrated which depict exemplary message flows between the various components of the voice server and the telecommunications network. For example, the Appendix illustrates message flows for the following call scenarios: a failed outbound call, an inbound call that is terminated locally, an inbound call that is terminated externally, an inbound call that is transferred, an inbound call that is rejected, an outbound call that is terminated locally, and an outbound call that is terminated externally.","The present invention can be realized in hardware, software, or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program or application in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.","This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention. \n\n\n\n\n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings embodiments which are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 4","FIG. 1"]}]},"DETDESC":[{},{}]}
