---
title: Method and system for coordinating client and host security modules
abstract: A system and methods for coordinating the operation of a client security module and a host security module on a mobile electronic device. The modules communicate with each other through a platform abstraction layer using application programming interfaces to coordinate their activities. In particular, the client security module instructs the host security module when to lock and unlock the device, and the host security module alerts the client security module to attempts by the user to lock or unlock the device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996908&OS=07996908&RS=07996908
owner: Research In Motion Limited
number: 07996908
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20041110
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF TECHNOLOGY","BACKGROUND INFORMATION","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present application claims priority to U.S. provisional patent application Ser. No. 60\/592,141, filed Jul. 30, 2004 and owned in common herewith.","The present application relates to a client application operating upon a third-party host device and, in particular, coordinating the operations of a client security module and a host security module.","Successful client applications providing a particular functionality are often desirable additions to third-party devices directed to related but different functions. For example, mobile telephones, which typically provide voice call capability and text messaging functions, may find it advantageous to incorporate a client application provided by another entity that enables the mobile phone to be used for wireless data communication. In one example, the client application may enable e-mail communications using the mobile phone.","Placing an existing client application on a mobile phone having its own architecture and operating platform may result in conflicts between specific modules within the client application and certain modules operating within the mobile phone host system. For example, the client application may include a security module for implementing a set of client security policies. The mobile phone may feature its own host security module for implementing its security features. The security features implemented by the host security module for the mobile phone may differ or conflict with the security policies implemented by the client security module. Accordingly, there is a need to ensure that the client security module and the host security module coordinate their security activities to maintain an adequate level of data security.","The present application describes a system and methods for coordinating the operation of a client security module and a host security module. The modules communicate with each other through a platform abstraction layer using application programming interfaces to coordinate their activities. In particular, the client security module instructs the host security module when to unlock the device, and the host security module alerts the client security module to attempts to lock or unlock the device.","In one aspect, the present application provides a method for coordinating a client security module with a host security module, wherein both modules are resident on a mobile electronic device. The method includes the steps of detecting a lock event; implementing a first lock operation by one of the client security module and the host security module; sending a lock command from the one of the client security module and the host security module to the other of the client security module and the host security module; and initiating a lock operation at the other of the client security module and the host security module in response to the lock command.","In another aspect, the present application provides a method for coordinating a client security module with a host security module, wherein both modules are resident on a mobile electronic device. The method includes the steps of receiving a user security input; validating the received user security input; performing a first unlock operation by one of the client security module and the host security module; sending an unlock command from the one of the client security module and the host security module to the other of the client security module and the host security module; and initiating a second unlock operation at the other of the client security module and the host security module in response to the unlock command.","In yet another aspect, the present application provides a mobile electronic device. The device includes a host operating system and a host security module, wherein the host operating system and the host security module are resident on a host-side of the device. The device also includes a client application, the client application including a client security module, wherein the client application is resident on a client-side of the device. An abstraction interface layer is provided between the client-side and the host-side, the abstraction layer including a plurality of application programming interfaces for exchanging communications between the client security module and the host security module.","Other aspects and features of the present application will be apparent to one of ordinary skill in the art in light of the following detailed description and drawings depicting one or more embodiments.","Like reference numerals are used throughout the Figures to denote similar elements and features.","Referring first to , there is a block diagram of a communication system  and mobile electronic device  to which example embodiments of the present application may be applied. The communication system  includes mobile electronic devices  (only one of which is shown in ), a wireless network  for communicating with the mobile electronic devices , and a wireless network gateway  for interfacing the wireless network  with a Wide Area Network (WAN) .","In the embodiment of , the mobile electronic device  is a hand-held two-way mobile communication device  having at least data and possibly also voice communication capabilities. In an example embodiment, the device has the capability to communicate with other computer systems on the Internet. In various embodiments, mobile electronic devices  includes data communication devices, multiple-mode communication devices configured for both data and voice communication, mobile telephones, mobile communication devices, PDAs enabled for wireless communications, 1-way or 2-way pagers, wireless modems operating in conjunction with computer systems, and any type of mobile wireless communication devices. In the presently described embodiment, each of the mobile electronic devices  is configured to operate within the wireless network . It should be appreciated however that the present application is in no way limited to these example types of devices and may be implemented in other devices. Example embodiments may also be applied to non-wireless enabled devices.","The device  includes a communication subsystem , including a receiver , a transmitter , and associated components such as one or more, preferably embedded or internal, antenna elements  and , and a processing module such as a digital signal processor (DSP) . In some embodiments, the communication subsystem includes local oscillator(s) (LO) , and in some embodiments the communication subsystem and microprocessor  share an oscillator. As will be apparent to those skilled in the field of communications, the particular design of the communication subsystem  will be dependent upon the communication network in which the device is intended to operate.","Signals received by the antenna  through a wireless communication network  are input to the receiver , which may perform such common receiver functions as signal amplification, frequency down conversion, filtering, channel selection and the like, and in some embodiments, analog to digital conversion. In a similar manner, signals to be transmitted are processed, including modulation and encoding for example, by the DSP  and input to the transmitter  for digital to analog conversion, frequency up conversion, filtering, amplification and transmission over the communications network  via the antenna .","The device  includes a microprocessor  that controls the overall operation of the device. The microprocessor  interacts with communications subsystem  and also interacts with further device subsystems such as the display , flash memory , random access memory (RAM) , auxiliary input\/output (I\/O) subsystems  (which may include a thumb-wheel, for example), serial port , keyboard or keypad , speaker , microphone , a short-range communications subsystem , and any other device subsystems generally designated as .","Some of the subsystems shown in  perform communication-related functions, whereas other subsystems may provide \u201cresident\u201d or on-device functions. Notably, some subsystems, such as keyboard  and display  for example, may be used for both communication-related functions, such as entering a text message for transmission over a communication network, and device-resident functions such as a calculator or task list.","Host operating system software  and various host software applications  used by the microprocessor  are, in one example embodiment, stored in a persistent store such as flash memory  or similar storage element. Host software applications  may include a wide range of applications, including a text messaging application, a ring tone application, a contacts application, and\/or a game application. Those skilled in the art will appreciate that the host operating system , specific host applications , or parts thereof, may be temporarily loaded into a volatile store such as RAM . It is contemplated that received communication signals may also be stored to RAM .","The microprocessor , in addition to its operating system functions, enables execution of host software applications  on the device. A predetermined set of host applications  which control basic device operations, including at least voice communication applications for example, will normally be installed on the device  during manufacture. Further applications may also be loaded onto the device  through the network , an auxiliary I\/O subsystem , serial port , short-range communications subsystem  or any other suitable subsystem , and installed by a user in the RAM  or a non-volatile store for execution by the microprocessor . Such flexibility in application installation increases the functionality of the device and may provide enhanced on-device functions, communication-related functions, or both. For example, secure communication applications may enable electronic commerce functions and other such financial transactions to be performed using the device .","In a communication mode, a received signal such as a voice call, a text message, or web page download will be processed by the communication subsystem  and input to the microprocessor , which will preferably further process the received signal for output to the speaker  or the display , or alternatively to an auxiliary I\/O device . A user of device  may also compose data items such as text messages for example, using the keyboard  in conjunction with the display  and possibly an auxiliary I\/O device . Such composed items may then be transmitted over a communication network through the communication subsystem .","The serial port  in  would normally be implemented in a personal digital assistant (PDA)-type communication device for which synchronization with a user's desktop computer (not shown) may be desirable, but is an optional device component. Such a port  would enable a user to set preferences through an external device or software application and would extend the capabilities of the device by providing for information or software downloads, including user interface information, to the device  other than through a wireless communication network.","A short-range communications subsystem  is a further component which may provide for communication between the device  and different systems or devices, which need not necessarily be similar devices. For example, the subsystem  may include an infrared device and associated circuits and components or a Bluetooth\u2122 communication module to provide for communication with similarly enabled systems and devices.","Wireless mobile network  is, in an example embodiment, a wireless packet data network, (e.g. Mobitex\u2122 or DataTAC\u2122), which provides radio coverage to mobile electronic devices , although it could be any other types of wireless networks. Wireless mobile network  may also be a voice and data network such as GSM (Global System for Mobile Communication) and GPRS (General Packet Radio System), CDMA (Code Division Multiple Access), or various other third generation networks such as EDGE (Enhanced Data rates for GSM Evolution) or UMTS (Universal Mobile Telecommunications Systems).","The device  includes a host security module . The host security module  may be one of the host software applications  resident on the device . The host security module  implements security measures in accordance with the security policies of the device . For example, the host security module  may monitor idle time of the device and display a security screen, i.e. screen saver, if an idle threshold time is exceeded. In some embodiments, the host security module  may permit a user to lock the keyboard or keypad . Those of ordinary skill in the art will appreciate that other security or locking features may be implemented by the host security module . It will be appreciated by those of ordinary skill in the art that the host security module , while depicted as a distinct entity in , may be spread across multiple entities. For example, the host security module  may comprise a module for monitoring idle time, a module for displaying a security screen for blocking device access, and a module for locking the keypad. In various embodiments, these or other modules may be stand-alone modules, may be implemented within the host operating system , or may implemented within one or more of the host software applications . It will be appreciated that references herein to the host security module are intended to encompass all of these variations and alternatives.","In addition to the host applications  resident on the device , a client application  is included with the device . The client application  may be, for example, a wireless data communication application. The wireless data communication application may, for example, enable the receipt and transmission of electronic messages. In one embodiment, the wireless data communication application may provide for electronic messaging, i.e. E-mail, that is synchronised and co-ordinated with a remote electronic messaging server, wherein the remote electronic messaging server is coupled to the WAN  at a remote location. Electronic messaging functions provided by the wireless data communication application may include composing messages, saving messages, and displaying messages. Other functions or features may include a contacts list or directory, a calendar application, a task list application, a web browser, and other modules or applications. The client application  is a self-contained stand-alone entity that may have been designed to operate upon a specific \u2018native\u2019 device, as will be described in greater detail below.","The client application  is typically created and developed by a separate entity than the remainder of the mobile electronic device . The client application  is also typically associated with a native environment or device in association with which it was originally developed. Accordingly, the client application  includes the functions and features associated with its operation on its native device, but packaged as a stand-alone software entity designed to run on top of a third-party platform in a third-party device. To enable the client application  to interact and exchange messages and events with the host operating system  and\/or the host security module  and other host applications , the device  may further include an abstraction layer . The abstraction layer  contains or defines a set of application programming interfaces (APIs) that may be used by the client application  or by the host operating system  and\/or host security module  and\/or the host applications  to exchange instructions, messages or events between the host-side of the device  and the client application .","Although the set of APIs is depicted in  as being contained in the abstraction layer , those of ordinary skill in the art will appreciate that the APIs that make up the abstraction layer  need not be collected and contained within a single library or file. It will also be appreciated that the term \u201capplication programming interface\u201d in this context is intended to encompass a wide range of inter-process communications taking many forms. For example, in one embodiment, the APIs may comprise defined functions that are called by a process. In another embodiment, the APIs may comprise the posing of messages from one process to another process. Those of ordinary skill in the art will appreciate the range of possible interfaces that may be employed for inter-process communication. References herein to \u201ccalling\u201d an API are not intended to limit the scope of the operation to calling a predefined function, but instead are intended to encompass all possible forms of interfacing.","Reference is now made to , which diagrammatically shows a system software architecture  for a mobile electronic device, such as the device  shown in . As shown in , the client application , the host security module , and the host applications  operate on top of the host operating system  layer.","The client application  includes a client operating system layer . The client operating system layer  may, under some definitions, not be considered an \u201coperating system\u201d per se, but instead may be referred to as an I\/O management layer or a platform. The client operating system layer  manages certain basic functions for the client application , including file structure and I\/O. The client operating system layer  provides an independent platform upon which client-specific applications can run.","On top of the client operating system layer , the client application  may include a Java layer  or Java Virtual Machine, within which various client modules  operate including a client security module . The client security module  manages the security features of the client application . For example, the client security module  may implement a password lock-out function, whereby the client application  and related data are inaccessible to a user without entering a valid password. In another embodiment, the client security module  may implement a \u201ckeypad\u201d locking system requiring a certain keystroke sequence or key combination to unlock the keypad or keyboard. The client security module  may include a user interface for receiving a user password.","The system software architecture  further includes the platform abstraction layer . The platform abstraction layer  may be notionally divided into a host-side platform abstraction layer and a client-side platform abstraction layer . The platform abstraction layer  enables the communication of messages and events back and forth between the client application  and the host operating system  and\/or the host security module  and\/or the host applications . The platform abstraction layer  may be implemented through use of one or more APIs. The platform abstraction layer  allows the client application  to operate on a platform-independent basis from the host operating system , the host applications , and the host security module .","The client security module  typically implements a set of security features to protect the user data and other data associated with the client application . In its native environment, the client security module  may maintain a certain level of security with regard to the client application  that differs from the security normally associated with the device  as provided by the host security module . The host security module  may implement security features that are inadequate for the level of security wanted by the client application . Because some user data or other data associated with the client application  may be mirrored or copied to storage on the host-side of the device , some coordination between the security modules ,  may be needed to ensure adequate security protection for the data. In particular, the client security module  and the host security module  coordinate their activities so as to lock and unlock the device in accordance with the same security policies.","It will be appreciated that certain functions of the device  continue to operate in spite of the locks although the user cannot access the applications , . For example, where the client application  comprises a wireless data communication application, the wireless data communication application may continue to communicate with a wireless network to receive and\/or exchange data.","Reference is now made to , which shows, in flowchart form, a method  of coordinating operation of separate security modules on a mobile device. The method  is based upon a device having a client application with a client security module that implements a password protection feature. The device also has a host security module that implements a screen saver mode. It will be appreciated that the security modules may implement alternative or additional security features. For example, the host security module may implement a keypad lock feature.","The method  begins with the presumption that the device is in an unlocked state. At step , the device determines if a client lock has been initiated by a user or a remote administrator. The client security module may allow a user to select a \u2018lock device\u2019 operation, for example from a menu. If the device, or more particularly, the client application, receives a client instruction or a remote administrator instruction to perform a client lock, then the method  continues to step . If not, then it continues at step , wherein the device assesses whether it has received a host lock instruction.","The host operating system may recognize various events as constituting a host lock instruction. For example, if the device is idle for a set period of time, it may trigger a host lock. It will be understood by those of ordinary skill in the art that the idle timeout may need to be monitored by the host operating system, rather than the client application, since the client application may not always be in foreground on the device. Other applications may have control of the device processor. Accordingly, the client application may not be able to monitor for idle timeout in all situations. Therefore, an idle timeout may be determined by the host operating system. An idle timeout may be a host lock instruction event under step . There may be other events that are defined as host lock instructions. For example, a particular user key combination may trigger a host lock. If no host lock instruction is detected in step , then the method  continues to await a client or host lock event.","If a host lock instruction is received in step , then in step  the occurrence of the lock event is communicated to the client application. In particular, the host operating system communicates with the client application through the platform abstraction layer. In other words, it calls an API designed to alert the client application to the receipt of a host lock event. Once this API is called, then the method  continues in step .","In step , the client application starts the client security module. It recognizes the need to start the client security module from either the user selection of a client lock in step  or the notification received as a result of the API called by the host operating system in step . Once the client security module is brought up, then in step  the client security module implements a client lock. At step  the client security module then relays a message back down to the host operating system or the host security module to instruct them to perform their own lock operations. This step  involves calling an API to trigger the host operating system to implement a host lock, or to launch the host security module so as to implement a host lock. Accordingly, having locked the client application in step  control is now passed back to the host side of the device to perform a host lock. At step , the host lock is implemented. In one embodiment, the host lock comprises displaying a security screen, i.e. a screen saver. In other embodiments, it may include implementing a keyboard or keypad lockout as an alternative to, or in addition to, the security screen. Once the host security module implements the host lock the user is denied access to the host applications until the user performs a set of actions to unlock the device (as described below). Typically the security screen remains in the foreground until the user performs certain actions to begin unlocking the device, thereby preventing the user from accessing any host applications without satisfying the security requirements.","Following step , the device is in a locked state. Having detected a lock event, either on the client side or on the host side, the device has been placed in a locked state by first implementing a client lock to prevent access to the client application, and by then activating the host lock to prevent access to any of the host applications.","In some cases, the client application may demand greater security than the host device. Accordingly, it may have more robust security measures. However, running the client application on top of the host operating system may expose certain areas of the client application, such as for example user-specific data stored in memory. Under some circumstances, it may be possible to access information or operations despite the existence of client security measures. Accordingly, the remaining steps of the method  ensure that a user cannot disable the host lock without first satisfying the client unlocking procedure.","When in a locked state, the device displays the security screen and the host operating system or the host security module awaits entry of a keystroke in step . In some embodiments, the host security module implements a keypad or keyboard lock when the device is in a locked state. A particular key sequence, such as pressing the hash \u2018#\u2019 key for a predetermined length of time or pressing a combination of keys, may be required to unlock the keyboard. In an embodiment wherein the host security module implements a keypad lock, then in step  the host security system evaluates whether the received keystroke detected by the host operating system satisfies the keypad unlocking requirements. If the detected keystroke does not meet the requirements, then it is ignored and the device continues to await a proper keystroke or key sequence. If the detected keystroke is the appropriate key sequence, then the host security module unlocks the keypad and proceeds to step .","At step , the host security module (or in some embodiments, the host operating system) alerts the client application to the receipt of a keystroke. In particular, the host security module calls an appropriate API to notify the client security module of the receipt of the keystroke. In one embodiment, wherein the host security application does not implement a keypad lock, the API passes the received keystroke to the client security module so that the client security module may use the received keystroke as the first character of a user-entered password. Either the client security module or the API called by the host security module may evaluate whether or not the received keystroke makes sense as a password character. For example, the entry of a directional key, like a down arrow, may be ignored by the client security module or it may cause a menu or options list to be displayed; whereas the entry of a text character may be treated as the first character of a password. When the host security module (or host operating system) calls the API to alert the client security module to the receipt of the keystroke, then control passes to the client security module.","The client security module brings a user password entry screen to the foreground on the display of the device and awaits entry of a user password. At step , the client security module may, in some embodiments, determine if the user has elected to cancel the password entry operation, i.e. has decided to leave the device locked. Some embodiments of the client security module may recognize a particular key combination or keystroke as a \u201ccancel\u201d command. The client security module may also timeout if a password is not entered after a predetermined duration. For example, if no keystrokes are received by the client security module for two minutes, then it may be deemed to have timed out. Upon cancellation or time-out, the client security module may restore control to the host security module in step , whereupon the host security module re-establishes its security features, such as a keypad lock and display of a screen saver. The client security module may pass control to the host security module by calling the lock command API, as was called in step . The device is thus returned to a locked state and waits in step  for entry of a keystroke.","If the user does not indicate a cancellation or time out, then the client security module evaluates the password entered by the user in step . If the password is invalid, then the client security module applies its password retry policies in step  to determine whether or not the user is entitled to retry the password entry. The policies may establish a maximum number of attempts. In some embodiments, as shown by step , after the maximum number of attempts is reached, the device is disabled through a \u201ckill device\u201d operation in which the user data stored on the device is deleted. This may also involve calling a kill API to cause the host operating system or the host security module to delete or wipe particular user data from the system. Other actions may be taken in addition to or as an alternative to the \u201ckill operation\u201d in response to a maximum number of password attempts.","If the password is valid, then the method  continues as step , wherein the client security module unlocks the client-side of the device. In step , the client security module then passes control to the host security module with instructions to unlock the device. It may pass control by calling a host unlock API to alert the host security module to the successful entry of a password for unlocking the device. The client security module may also close after unlocking the client-side of the device. In step , the host security module performs operations necessary to unlock the host-side of the device, such as closing or minimizing a screen saver or other actions. The host security module may then be closed in step .","Following step , the device is in an unlocked state and the method  returns to step  to await the initiation of further lock operations.","It will be appreciated by those of ordinary skill in the art that the method  may include other steps or actions to accommodate devices or security module having different features. For example, the security modules may permit the user to make E911 emergency calls while the device is locked. Accordingly, at around step , the client security module may detect a user selection of a E911 emergency call. This may be a selectable menu action item presented to the user on the client password entry interface screen. When the user selects an E911 emergency call, the client security module may call an E911 API to instruct the host operating system or other host applications to place the emergency call, despite the locked state of the device.","It will also be appreciated that the user or another entity, such as a client administrator, may elect to change the idle timeout value or other relevant configuration values or options. If the timeout value is changed, for example by the user through a menu option presented by the client application, then the client application calls an idle timeout change API to instruct the host operating system to update the idle timeout value, since this value is monitored by the host operating system. The current idle timeout value may be communicated to the host operating system by the client application upon start-up of the device through the call of the same or a similar API.","Other variations to the method  will be understood by those of ordinary skill in the art in view of the foregoing description.","In one embodiment, the unlocking operation on start-up may differ from the unlocking operation described in the method  shown in . When powering on a mobile device, it may power up in a locked state. The start-up or power-on process may, in some embodiments, take an unacceptable length of time. In particular, it may take an unacceptable length of time for the Java Virtual Machine to load and for the client security module to be started. Until the JVM and the client security module are started, the user cannot enter a password to enable the device. The result is that the user is unable to use the mobile device, even for host applications, such as mobile telephony, until the client applications are loaded and available.","The client security module typically performs password verification by calling a validation function. The password information is stored in persistent storage on the device and the validation function is designed to compare user input information with the stored password information. The validation function does not depend on initialization of the client security module to be accessible. Accordingly, in one embodiment, an API is provided in the platform abstraction layer to enable the host-side to call the validation function.","To address the delay on start-up, in one embodiment the host includes a host start-up module that essentially mirrors the dialog of the client security module in requesting an unlock password. Accordingly, on start-up the host start-up module displays a user input dialog screen to prompt the user to enter a valid password. Once the user enters a password, the host calls the client-side validation function through the platform abstraction layer and passes it the entered password. The validation function determines whether or not the password is valid and returns an answer to the host start-up module. If the password is valid, then the host start-up module notifies the host security module and the host-side is unlocked. In some embodiments, the client-side is not locked on start-up, so the full range of device applications is available once the host-side is unlocked. In another embodiment, the client-side is locked on start-up, so either the validation function or the host start-up module notify the client security module that a valid password has been entered so that the client-side is also unlocked once the client-side applications have been initialized. It will be understood that the host start-up module may comprise a part of the host security module. The client security module may be configured to suppress its password dialog screen on start-up on the assumption that password input will be handled by the host-side in this situation.","Reference is now made to , which shows, in flowchart form, a method  for unlocking a mobile device on start-up. The method  begins in step  with the start-up or powering-on of the device. In the present embodiment, the device powers on with a host lock in place, meaning that the user cannot access the host or client applications.","On start-up the host launches the host start-up module, which may comprise a portion of the host security module, to display a password dialog to solicit user password input, as shown in step . The device awaits user input in this state. In one embodiment, the device may have a cancel option, or may timeout while waiting for user input, as shown in step . If so, then the host security module  may display a security screen in step  and await a keystroke in step  before re-displaying the password dialog to solicit user password input.","If a password is received, then in step  the device evaluates whether it is a valid password. In particular, the host start-up module (or host security module) calls the validation function through an API provided via the platform abstraction layer and passes the received passwords. A result is returned indicating whether or not the entered password is valid. If it is not valid, then in step  the host start-up module assesses whether the user should be permitted to retry. As outlined above, there may be a predefined maximum number of attempts permitted. If the maximum number is exceeded, then certain \u201ckill device\u201d operations may be implemented in step .","If the password is valid, then in step  the host-side of the device is unlocked. As noted above, in many embodiments, the client-side will not be locked on start-up, meaning that only the host-side must be unlocked. If the client-side is locked on start-up, then the method  includes a further step (not shown) in which the host start-up module (or host security module) calls a client unlock API to instruct the client security module to unlock the client-side of the device.","The above-described embodiments of the present application are intended to be examples only. Alterations, modifications and variations may be effected to the particular embodiments by those skilled in the art without departing from the scope of the application, which is defined by the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments will now be described, by way of example only, with reference to the attached Figures, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
