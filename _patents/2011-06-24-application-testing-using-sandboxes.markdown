---
title: Application testing using sandboxes
abstract: Various exemplary embodiments relate to a method and related network node including one or more of the following: determining, by the session establishment node, that a session should be established for the developer; transmitting, to a sandbox server, an instruction to establish a sandbox for the session; transmitting to the sandbox server, an identification of an emulator associated with the session; and notifying the developer when the sandbox is available for use. Various exemplary embodiments relate to a method and related network node including one or more of the following: receiving, by the sandbox server, an instruction to establish a sandbox; establishing the sandbox on the sandbox server; and instantiating a device emulator on the sandbox.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08799862&OS=08799862&RS=08799862
owner: Alcatel Lucent
number: 08799862
owner_city: Boulogne-Billancourt
owner_country: FR
publication_date: 20110624
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Various exemplary embodiments disclosed herein relate generally to application development.","As a result of the widespread adoption of smart-phones, the number of different platforms available for execution of applications has exploded. In addition to the relatively few operating systems available for other devices such as personal computers, application developers must now consider a number of new mobile operating systems (such as WINDOWS MOBILE, GOOGLE ANDROID, APPLE IOS, and NOKIA SYMBIAN operating systems) in order to ensure broad operability. Adding to this dilemma, equipment and service providers often add to or otherwise alter open operating systems such as GOOGLE ANDROID, thereby requiring application developers to take numerous versions of the same operating system into account when testing an application.","In many cases, the only way to ensure that an application will operate correctly on these various devices is to test the application on each such device or using an associated software development kit (SDK). This process, however, is time consuming and requires the developer to obtain the devices or SDKs to be evaluated before testing and debugging may commence.","Various exemplary embodiments relate to a method performed by a session establishment node for providing a sandbox to a developer, the method including one or more of the following: determining, by the session establishment node, that a session should be established for the developer; transmitting, to a sandbox server, an instruction to establish a sandbox for the session; transmitting to the sandbox server, an identification of an emulator associated with the session; and notifying the developer when the sandbox is available for use.","Various embodiments are described wherein the step of transmitting to the sandbox server, an identification of an emulator associated with the session comprises transmitting the device emulator to the sandbox server.","Various embodiments additionally include one or more of the following: transmitting a second device emulator to the sandbox server, wherein the device emulator and the second device emulator emulate different types of devices; and transmitting a test tool associated with the session to the sandbox server.","Various embodiments are described wherein the step of determining that a session should be established for the developer includes one or more of the following: receiving, by the session establishment node from the developer, a request for a session; scheduling the establishment of the session in association with a time slot; and determining, based on a current time and the time slot, that the session should be established for the developer.","Various embodiments are described wherein the sandbox server is associated with a cloud computing architecture, wherein the step of notifying the developer that the sandbox is available for use includes transmitting a uniform resource locator (URL) for accessing the sandbox, and\/or wherein the session establishment node and the cloud server are different physical devices.","Various exemplary embodiments relate to a method performed by a sandbox server for providing a sandbox to a developer, the method including one or more of the following: receiving, by the sandbox server, an instruction to establish a sandbox; establishing the sandbox on the sandbox server; and instantiating a device emulator on the sandbox.","Various alternative embodiments additionally include one or more of the following: instantiating a second device emulator on the sandbox, wherein the device emulator and the second device emulator emulate different types of devices; instantiating a test tool on the sandbox; receiving application code from the developer; configuring the device emulator to run the application code; managing the distribution of processing resources among a plurality of sandboxes; and providing a user interface to the developer, wherein the user interface enables the developer to: transmit commands to the device emulator, and transmit commands to at least one test tool.","Various embodiments are described wherein the step of establishing the sandbox includes reserving cloud resources for use by the developer.","Various exemplary embodiments relate to a method performed by a developer device for testing an application, the method including one or more of the following: transmitting, to a session establishment node, a request for a sandbox; receiving a notification that the developer device may access the sandbox at a sandbox server; and transmitting, to the sandbox server, a request to access the sandbox.","Various embodiments are described wherein the session establishment node and the sandbox server are different physical devices, wherein the request for a sandbox includes an indication of at least one requested device emulator and at least one requested testing tool, and\/or wherein the step of transmitting a request to access the sandbox includes accessing a web user interface.","Various alternative embodiments additionally include transmitting application code to the sandbox server.","To facilitate understanding, identical reference numerals have been used to designate elements having substantially the same or similar structure and\/or substantially the same or similar function.","In view of the foregoing, it would be desirable to provide a method for testing an application on multiple types of devices from a single interface using an aggregated tool set. It would further be desirable to perform such testing in a hosted environment. Accordingly, various embodiments enable an all-in-one testing environment to be established for a developer on a hosted sandbox. As used herein, the term \u201csandbox\u201d will be understood to refer to a testing environment having dedicated resources for use in testing code.","Referring now to the drawings, there are disclosed broad aspects of various exemplary embodiments.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","110","120","130","140"]},"Packet data network may be a device or group of devices adapted to provide communication between devices such as developer device , session establishment node , and sandbox server . Accordingly, packet data network may include a number of routers and\/or switches for forwarding packets of to appropriate destinations. In various embodiments, packet data network is the Internet.","Developer device  may be any device used by a developer to communicate with session establishment node  and\/or sandbox server . Accordingly, developer device may be a personal or laptop computer, server, tablet, wireless email device, cell phone, smart phone, television set-top box, or any other device capable of communicating with other devices via packet data network . Developer device  may additionally include software for enabling various forms of communication such as a web browser and\/or email software.","Session establishment node  may be any device adapted to establish sandbox sessions at sandbox server  on behalf of developers. Accordingly, session establishment node  may be a personal or laptop computer, server, tablet, wireless email device, cell phone, smart phone, television set-top box, or any other device capable of receiving and fulfilling requests for sandbox sessions. In various embodiments, session establishment node  may be adapted to receive a request for a session from developer device  and subsequently instruct sandbox server  to establish a sandbox session. Session establishment node  may perform additional functions such as session scheduling, installation of device emulators on sandbox server , and\/or installation of test tools on sandbox server . The detailed operation of session establishment node  will be described in greater detail, below.","Sandbox server  may be any device or group of devices for providing one or more sandboxes for various developers to use in testing applications. Accordingly, sandbox server may include a personal or laptop computer, server, tablet, wireless email device, cell phone, smart phone, television set-top box, and\/or any other device capable of supporting and providing access to one or more sandbox. In various embodiments, upon instruction by session establishment node , sandbox server  may establish a new sandbox. Sandbox server may further instantiate various device emulators and testing tools within the sandbox, as will be described in further detail below. Sandbox server  may also provide developer device  with access to one or more such sandboxes. Such access may include installation of code on device emulators, other manipulation of device emulators, and\/or utilization of testing tools.","In various embodiments, sandbox server may be or may otherwise include cloud-computing resources for supporting various sandboxes. Accordingly, sandbox server  may be a cloud-computing system such as, for example, Amazon Elastic Compute Cloud (EC2). The detailed operation of sandbox server  will be described in greater detail, below.","Note that in various embodiments, session establishment node  and sandbox server  may be located on the same premises. In such embodiments, session establishment node  and sandbox server  may communicate in a more direct manner that does not utilize packet data . In various embodiments, session establishment node  and sandbox server  may be the same device that performs both sets of functions.","Having described the components of exemplary network , a brief summary of the operation of network  will be provided. It should be apparent that the following description is intended to provide an overview of the operation of network  and is therefore a simplification in some respects. The detailed operation of network  will be described in further detail below in connection with .","According to various exemplary embodiments, developer device  transmits a request message  to session establishment node . In various embodiments, request message  may be a hypertext transfer protocol secure (HTTPS) message. This request message may indicate that a developer would like to use a sandbox from 2:00-3:00 PM and that the sandbox should have an emulator of an HTC EVO mobile phone and a bandwidth performance testing tool. In response, session establishment node  schedules the requested session for the 2:00-3:00 PM time slot. Subsequently, when the current time is approximately 2:00 PM, session establishment node  may send an instruction  to sandbox server  to establish a sandbox for the developer. Session establishment node  may also send the requested emulator and tool to sandbox server . Upon receiving the emulator and tool, sandbox server instantiates the two objects on the newly established sandbox. Thereafter, developer device  may communicate  with sandbox server  for access to the sandbox. For example, developer device  may upload application code, which sandbox server may install on the emulator and subsequently use the testing tool to evaluate the bandwidth performance of the HTC EVO mobile phone emulator while running the uploaded application.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2","b":["200","200","225","130","140","200","130","140"]},"Developers  may include one or more application developers. Developers  may access the other entities using one or more developer devices such as developer device . Developers  may create application software for use on various devices, either locally or in connection with an API provided by session establishment node  or some other third party node (not shown).","Session establishment node  may include a scheduling graphical user interface (GUI) , scheduling server , and session controller , each of which may include hardware and\/or executable instructions stored on a machine-readable medium. In various embodiments, scheduling GUI , scheduling server , and\/or session controller  may share components. For example, session establishment node  may include a microprocessor that executes instructions associated with each of scheduling GUI , scheduling server , and\/or session controller . Accordingly, this microprocessor may be included in each of these components.","When developers  wish to request the use of a sandbox, they may access scheduling GUI . In various exemplary embodiments, scheduling GUI  may be a web page and developers  may access scheduling GUI  via the World Wide Web. Scheduling GUI  may present developers  with a list of currently scheduled sessions and\/or a list of currently available time slots for sessions. Using this information, developers  may request a particular time slot for establishment of a sandbox session. Scheduling GUI  may pass this request to scheduling server , which may store the scheduled session information for later use. In various alternative embodiments, developers  may not be given an opportunity to request a specific time and, instead, an available time slot may be assigned to the request by scheduling server .","In various embodiments, scheduling GUI  may present a number of additional options for a scheduled session. For example, scheduling GUI  may present a list of available device emulators and\/or testing tools. Developers  may select one or more of such emulators and\/or tools for use during the requested session. Accordingly, scheduling GUI  may pass this information to scheduling server , which may store this additional information for later use.","Scheduling GUI , or some other component of session establishment node , may additionally notify developers  of how to access the requested sandbox. For example, upon scheduling a session, scheduling GUI  may display the scheduled time slot and a URL for accessing the sandbox upon establishment. Alternatively, this information may be sent to developers  in an email or short message service (SMS) message. Further, this information may be conveyed immediately upon scheduling the session, at a predetermined time period prior to session establishment, or after actual establishment of the session.","Scheduling server  may be responsible for maintaining a session schedule and notifying session controller  when sessions should be established and terminated. Scheduling server  may maintain a schedule of various sessions for different time slots, as described above in connection with scheduling GUI . Periodically, scheduling server  may assess this schedule in light of the current time to determine whether any sessions are expiring. For each expiring session, scheduling server may indicate to session controller  that the particular session should be torn down and associated temporary data should be cleaned up such that the system resources are ready for reassignment.","Scheduling server  may additionally determine periodically, based on the schedule and current time, whether any scheduled sessions should be established. If so, scheduling server may instruct session controller  to establish a new session. Scheduling server  may further indicate to session controller any options, such as emulators and\/or tools, that are to be included in the session.","Session controller  may be responsible for communicating with sandbox server  to terminate, establish, and configure sandboxes. Accordingly, session controller  may include an application programming interface for controlling sandbox server. Upon receiving an instruction from scheduling server  to terminate a session, session controller may identify one or more sandboxes associated with the session and transmit a command to sandbox server  to terminate those sandboxes. Likewise, upon receiving an instruction from scheduling server  to establish a new session, scheduling server may determine various establishment parameters such as, for example, an amount of memory or share of processing power, for at least one new sandbox and transmit an instruction to sandbox server  to establish the new sandboxes according the establishment parameters. In various embodiments, session controller  or sandbox server  may send a notification to developers at this time to indicate that the session has been established.","In various exemplary embodiments wherein scheduling server  further indicates one or more tools or emulators to be associated with a session, session controller  may locate any sets of machine-executable instructions defining or otherwise associated with the identified tools and\/or emulators. Session controller  may then transmit the located machine-executable instructions to sandbox server  for instantiation in the new sandbox.","Sandbox server  may support multiple sandboxes , ,  for use by various developers . Each sandbox may be uniquely associated with one or more portions of memory in sandbox server  so as to isolate any code executing within one sandbox from all other code on the system. Further, code within such portions of memory may be prevented from accessing any other portions of memory not associated with the sandbox. These sandboxes , ,  may also share processing time on one or more processors of sandbox server . For example, each sandbox may receive an equal share of processing time in a round robin manner. Alternatively, sandboxes , ,  may each be configured to receive a different share of processing time. For example, sandbox   may receive twice as much processing time as the other sandboxes , . Various additional methods of dividing the total processing resources available between sandboxes , ,  will be apparent to those of skill in the art.","Sandboxes , ,  may also include one or more device emulators. As an example, sandbox   includes device emulators , . Device emulators ,  may each emulate a particular device. For example, Emulator   may emulate an HTC EVO mobile phone, while emulator N  may emulate an APPLE IPHONE device. Accordingly, such emulators may include an operating system and\/or code designed to simulate various hardware features of those devices. Various methods for implementing such features will be apparent to those of skill in the art.","Likewise, each sandbox , ,  may similarly include one or more testing tools (not shown). Such testing tools may include machine-executable instructions adapted to perform various tests and simulate various conditions. For example, testing tools may be defined to monitor bandwidth performance, processing latency, network load, and\/or to execute user-defined test scripts. Various other tools useful for testing application code will be apparent to those of skill in the art.","Sandbox server  may additionally include a sandbox GUI  for providing an interface between developers  and sandboxes , , . In various exemplary embodiments, sandbox GUI  may be a web page and developers  may access sandbox GUI  via the World Wide Web. For each developer  that accesses sandbox GUI , sandbox GUI  may identify a sandbox , ,  associated with the developer  and provide access to that sandbox , , . For example, sandbox GUI  may receive a session or sandbox identifier in the requested URL or input by developer  in a webpage requesting such identifier. After identifying the appropriate sandbox , , , sandbox GUI  may present developers  with access to the emulators and tools running on that sandbox. Sandbox GUI  may further allow developers to upload and install application code on various emulators within the sandbox.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3","FIGS. 1-2"],"b":["300","300","130","140","300","305","310","315","320","325","330","335","340","345","350","355"]},"Network interface  may be an interface comprising hardware and\/or executable instructions encoded on a machine-readable storage medium configured to communicate with at least one other network node. For example, network interface  may communicate with various developer devices such as developer device . Accordingly, network interface  may include one or more Ethernet interfaces for communication via a packet data network such as the Internet.","Developer interface  may include hardware and\/or executable instructions on a machine-readable storage medium configured to provide a user interface to developers for requesting test sessions. In various embodiments, developer interface  may include a web server and one or more web pages. Developer interface  may first require that a developer provide authentication credentials prior to scheduling a session. For example, in various embodiments, developers may be required to maintain an account and\/or pay a subscription fee for use of sandboxes and\/or other service provided by session establishment node  or related devices. Upon receiving credentials, such as a user name and password, developer may read the records stored in account storage  to determine whether the credentials match a known account and\/or whether the account is entitled to schedule a new session. In various embodiments, an account may not be entitled to schedule a new session if the account subscription does not include that service, if the maximum number of sessions for a particular time period has been previously reached, or if the maximum number of concurrent sessions for the account has been met for a particular time slot.","Developer interface  may be configured to display a schedule of sessions and\/or open time slots. Using this display, an authenticated developer may be able to select a time slot for the requested session. The developer may also be able to select various emulators and tools to be included in the session, as previously described.","Account storage  may be any machine-readable medium capable of storing data related to developer accounts. Accordingly, account storage  may include a machine-readable storage medium such as read-only memory (ROM), random-access memory (RAM), magnetic disk storage media, optical storage media, flash-memory devices, and\/or similar storage media. Account storage  may store a number of account records including various information such as user names, passwords, maximum numbers of sandboxes, email addresses, associated parent accounts, etc.","Session scheduler  may include hardware and\/or executable instructions on a machine-readable storage medium configured to report scheduled sessions and open time slots to developer interface  for the purpose of conveying this information to developers. Session scheduler  may further be configured to receive and process requested session information. For example, upon receiving data defining a requested session from developer interface , session scheduler  may read session schedule storage  to determine whether the request may be fulfilled. For example, if there is no available slot for the requested time, session scheduler  may return an error to developer interface . If the session can be scheduled, session scheduler may create a new record represented the requested session and store the record in session schedule storage  for future use.","Session schedule storage  may be any machine-readable medium capable of storing data related to scheduled sessions. Accordingly, session schedule storage  may include a machine-readable storage medium such as read-only memory (ROM), random-access memory (RAM), magnetic disk storage media, optical storage media, flash-memory devices, and\/or similar storage media. In various embodiments, session schedule storage  may be the same component as account storage . Session schedule storage  may store a number of scheduled session records defining sessions to be established in the future. An exemplary data arrangement for storing such records will be described in greater detail below with respect to .","Sandbox server interface  may be an interface comprising hardware and\/or executable instructions encoded on a machine-readable storage medium configured to communicate with at least one sandbox server such as sandbox server . In various embodiments, sandbox server interface  may communicate with sandbox servers via a packet data network such as a local area network (LAN), wide area network (WAN), or the Internet. Accordingly, sandbox server interface  may include one or more Ethernet interfaces. In various embodiments, sandbox server interface  may be the same component as network interface .","Sandbox establishment module  may include hardware and\/or executable instructions on a machine-readable storage medium configured to communicate via sandbox server interface  to establish sandboxes as appropriate. In various embodiments, sandbox establishment module  may periodically evaluate the data stored in session schedule storage  to determine whether any new sandboxes should be established. For example, sandbox establishment module  may compare a current time to various time slots to determine whether a particular session should be activated. Upon determining that a session should be activated, sandbox establishment module  may transmit an instruction via sandbox server interface  to establish a new sandbox. Sandbox establishment module  may also transmit information related to one or more accounts that will access the sandbox such as, for example, authentication information stored in account storage . Sandbox establishment module  may then wait to receive a confirmation message via sandbox server interface , indicating whether the sandbox was successfully established. Once the session is established, sandbox establishment module may then indicate to resource provisioning module  that the sandbox may now be configured.","Resource provisioning module  may include hardware and\/or executable instructions on a machine-readable storage medium configured to further configure an established sandbox based on various options requested by a developer. For example, using the scheduled session record, resource provisioning module  may identify one or more emulators and\/or testing tools. Subsequently, resource provisioning module may locate code defining any requested emulators or tools in emulator storage  or testing tool storage , respectively. Resource provisioning module  may then transmit such code via sandbox server interface  for instantiation within the newly established sandbox. In various alternative embodiments, the code defining various emulators and\/or tools may be stored elsewhere such as, for example, on a sandbox server. Accordingly, resource provisioning module  or sandbox establishment module  may simply transmit an identifier for the requested emulators or tools.","Emulator storage  may be any machine-readable medium capable of storing code defining various device emulators. Accordingly, emulator storage  may include a machine-readable storage medium such as read-only memory (ROM), random-access memory (RAM), magnetic disk storage media, optical storage media, flash-memory devices, and\/or similar storage media. In various embodiments, emulator storage  may be the same component as account storage  and\/or session schedule storage . Emulator storage  may store code defining device emulators in association with respective unique emulator identifiers.","Testing tool storage  may be any machine-readable medium capable of storing code defining various testing tools. Accordingly, testing tool storage  may include a machine-readable storage medium such as read-only memory (ROM), random-access memory (RAM), magnetic disk storage media, optical storage media, flash-memory devices, and\/or similar storage media. In various embodiments, testing tool storage  may be the same component as account storage , session schedule storage , and\/or emulator storage . Emulator storage  may store code defining testing tools in association with respective unique tool identifiers.","Developer notifier  may include hardware and\/or executable instructions on a machine-readable storage medium configured to transmit a notification to a developer when a sandbox is ready for use. Accordingly, upon receiving an indication from sandbox establishment module  or resource provisioning module  that a sandbox has been established and\/or configured, developer notifier may transmit a notification, such as an email or SMS message, to the developer. Alternatively, developer notifier  may monitor session schedule storage  and transmit such an indication a predetermined time prior to establishment of the sandbox. For example, developer notifier  may send a reminder email to a developer fifteen minutes before the developer's scheduled time slot opens. Whenever developer notifier  transmits such an indication, developer notifier  may also include an indication of how to access the sandbox. For example, developer notifier  may include a unique sandbox identifier and\/or a unique URL for accessing the particular sandbox. Using this information, a developer may access the scheduled sandbox at an appropriate time.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 4","FIGS. 1-2"],"b":["400","400","130","140","400","405","410","415","420","425","430","435"]},"Session establishment node interface  may be an interface comprising hardware and\/or executable instructions encoded on a machine-readable storage medium configured to communicate with at least one session establishment node such as session establishment node . In various embodiments, session establishment node interface  may communicate with sandbox servers via a packet data network such as the LAN, WAN, or the Internet. Accordingly, session establishment node interface  may include one or more Ethernet interfaces.","Sandbox creator  may include hardware and\/or executable instructions on a machine-readable storage medium configured to receive instructions to create sandboxes via session establishment node interface  and to subsequently create such requested sandboxes. In particular, upon receiving a request for a sandbox, sandbox creator  may update sandbox definition storage  to include a record defining the new sandbox. This record may include information such as a session identifier, emulator identifiers, tool identifiers, and\/or developer authentication information. Sandbox creator  may further reserve various system resources to create the new sandbox . For example, sandbox creator  may reserve a portion of memory and\/or cloud resources to support the new sandbox .","Sandbox definition storage  may be any machine-readable medium capable of storing code defining various device emulators. Accordingly, sandbox definition storage  may include a machine-readable storage medium such as read-only memory (ROM), random-access memory (RAM), magnetic disk storage media, optical storage media, flash-memory devices, and\/or similar storage media. Sandbox definition storage  may store records for tracking the sandboxes  established on sandbox server .","Sandboxes  may include hardware and\/or executable instructions on a machine-readable storage medium configured to provide isolated environments for testing application code. Accordingly, sandboxes  may each constitute an isolated portion of memory and may each be provided with a share of processor cycles available in the system. In various embodiments, sandboxes  may be resident in or otherwise supported by cloud resources. Sandboxes may further each include device emulators and\/or testing tools.","Sandbox manager  may include hardware and\/or executable instructions on a machine-readable storage medium configured to ensure proper operation of sandboxes . For example, sandbox manager  may deny any request to access memory outside of the requesting sandbox. Sandbox manager  may further be responsible for ensuring proper distribution of processor cycles. For example, sandbox manager  may implement a round robin or other scheduling algorithm for determining which sandbox  should be given access to an available processor.","Network interface  may be an interface comprising hardware and\/or executable instructions encoded on a machine-readable storage medium configured to communicate with at least one other network node. For example, network interface  may communicate with various developer devices such as developer device . Accordingly, network interface  may include one or more Ethernet interfaces for communication via a packet data network such as the Internet. In various embodiments, network interface  may be the same component as session establishment node interface .","Developer interface  may include hardware and\/or executable instructions on a machine-readable storage medium configured to provide an interface for developers to communicate with sandboxes . In various embodiments, developer interface  may include a web server and one or more web pages. Upon receiving an access request, developer interface may identify the requested sandbox . For example, developer interface may attempt to match the requested URL or a portion thereof with a sandbox definition in sandbox definition storage . Developer interface  may require that a developer provide authentication credentials prior to accessing the sandbox. Again, developer interface  may validate this credential information against data in the associated sandbox definition.","Once the developer has been properly authenticated, developer interface  may provide access to the appropriate sandbox . In various embodiments, developer interface  may allow a developer to upload application code and subsequently install such code on any device emulators instantiated in the sandbox. Developer interface  may further allow a developer to manipulate device emulators. For example, developer interface  may display a \u201cscreen\u201d of the device emulator and allow the developer to \u201cpush\u201d buttons and navigate the device menus. Developer interface  may also provide access to any instantiated tools within the sandbox . Various additional features of developer interface  for facilitating application testing will be apparent to those of skill in the art.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 5","b":["500","500","325","500","500","500","505","510","515","520"]},"Time slot field  may store an indication of a time period associated with each session. In the illustrated example, each time slot is one hour long. However, various embodiments may alternatively or additionally support other time periods such as, for example, 30 minute or 45 minute periods. Session ID field  may store an identifier for the requested session. Such identifier may be used to identify a session and\/or sandbox among various components of a sandbox testing system. User identifier  may be a unique identifier indicating a developer that requested and\/or will use a particular session. Emulator IDs field  may store a set of identifiers specifying various device emulators to be instantiated for a particular session. Likewise, tool IDs field  may store a set of identifiers specifying various testing tools to be instantiated for a particular session.","As an example, data arrangement  illustrates a number of time slots. Time slot  is applicable between 11:00 AM and 12:00 PM and is associated with scheduled sessions , , and . Time slot  is applicable between 12:00 PM and 1:00 PM and is associated with scheduled sessions , . Data arrangement  may include numerous additional time slots and scheduled sessions .","Exemplary scheduled session  has a session ID 0x4EF1 and was requested by user 0x12D102. This session should include an emulator identified as 0xDD and testing tools identified as 0x3, 0x4, 0x8, and 0xF. As another example, scheduled session  is scheduled for the same time slot and has a session ID 0x82D5. This exemplary session was requested by user 0x764E54 to include one tool, identified as 0x3, and three device emulators, identified as 0xFE, 0xDD, and 0x10. It should be noted that, while both scheduled sessions  and  have requested the use of emulator 0xDD, these sessions, where possible may have access to two different instantiations of the device emulator identified as 0xDD. Likewise, the sessions may also have access to two different instantiations of the testing tool identified as 0x3. Data arrangement  includes additional examples of scheduled sessions , , , the meanings of which will be apparent in view of the foregoing.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 6","b":["600","600","300","310","320"]},"Method  may begin in step  and proceed to step , where session establishment node  receives a request to schedule a session. Such request may include a requested time slot, requested device emulators, requested testing tools, other desired parameters, etc. As previously described, the information included in a request may be specified and\/or selected by a developer using a web page or other interface. For example, a developer may specify a requested time slot by selecting a time slot from a plurality of time slots presented via a web page as available for session scheduling. Session establishment node  may further authenticate the user before or after step , as described above. After receiving the request, method  may proceed to step , where session establishment node  may determine whether the requested time slot is available by, for example, comparing the number of sessions currently scheduled during any portion of the requested time slot to a maximum number of sessions allowable for the developer, for a group to which the developer belongs, and\/or for all developers using the system. If the time slot is available, session establishment node  may add the requested session to a list of scheduled sessions in step  and proceed to end in step .","If, however, the requested time slot is not available, method  may instead proceed to step . In step , session establishment node  may return a notification such as an error message indicating that the requested session could not be scheduled. Session establishment node  may then allow the developer to request a session for a different time period. In various alternative embodiments, session establishment node  may instead select an alternative time slot for the session and either automatically schedule the session for that time slot or propose the alternative time slot to the developer in step . In various alternative embodiments, session establishment node may provide a develop to select an \u201cad-hoc\u201d option when a time slot is immediately available. Upon selection of such an option, session management node may schedule the session for the current time slot or otherwise immediately establish the requested session. Method  may then proceed to end in step .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 7","b":["700","700","300","335","340","355","700"]},"Method  may begin in step  and proceed to step  where session establishment node  retrieves an expiring session. For example, session establishment node  may refer to a session schedule to determine whether any time windows that were open during the last execution of method  are now closed. Session establishment node  may then retrieve a session associated with one such window. Session establishment node  may then send a message to a sandbox server requesting that any sandboxes associated with the session be terminated. Method  may then proceed to step  where session establishment node  may determine whether any additional expiring sessions should be processed. If the current session is not the last expiring session, method  may loop back to step . Otherwise, method  may proceed to step . In various alternative embodiments, a sandbox server may be configured to automatically terminate sandboxes without request by session establishment node . For example, each sandbox may expire after a predetermined time has elapsed or may be configured upon establishment with an expiration time. In such embodiments, method  may not include steps , , .","In step , session establishment node  may retrieve a new session to establish. For example, session establishment node  may refer to a session schedule to determine whether any time windows that were closed during the last execution of method  are now open. Upon retrieving such a session, method  may proceed to step  where session establishment node  may send a request message to a sandbox server for the establishment of at least one sandbox in connection with the session. Next, in step , session establishment node  may upload any device emulators requested for the session to the sandbox server. In various alternative embodiments, a sandbox server may already store code associated with one or more device emulators. In such embodiments, session establishment node  may simply send one or more device emulator identifiers to the sandbox server in step . Method  may then proceed to step , where session establishment node  may upload one or more testing tools to the sandbox server. In various alternative embodiments, a sandbox server may already store code associated with one or more testing tools. In such embodiments, session establishment node  may simply send one or more testing tool identifiers to the sandbox server in step .","Next, in step , session establishment node  may send a URL or other notification to a developer when the sandbox is ready. For example, session establishment node  may send such a message to the developer upon establishment upon transmission of the request for establishment of the session. As another example, session establishment node may transmit a notification at another time, indicating when the session will be established. Accordingly, step  may be performed at another time or in another method such as, for example, method .","Method  may then proceed to step , where session establishment node  may determine whether any additional sessions remain to be established. If the current session is not the last new session, method  may loop back to step . Otherwise, method  may proceed to end in step .",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 8","b":["800","800","400","410","420"]},"Method  may begin in step  and proceed to step , where sandbox server  may receive a request for the establishment of a sandbox. For example, sandbox server  may receive such a request from a session establishment entity. Then, in step , sandbox server  may determine whether sandbox server  has sufficient resources to establish the requested sandbox. For example, sandbox server  may compare an amount of memory requested or necessary for establishing the sandbox to an amount of free memory currently available. In various embodiments, sandbox server  may request additional resources from a cloud computing system. If there are not enough resources to fulfill the request, sandbox server  may reject the request and respond to the requesting device with an error message. Method  may then end in step .","If, on the other hand, sandbox server  determines that enough resources are available to fulfill the request, method  may proceed to step . In step , sandbox server  may add a new definition for the new sandbox to a list of sandbox definitions, as described in greater detail above. For example, the sandbox definition may include an indication of a developer to which the sandbox belongs and an area of memory where the sandbox will reside. Method  may then proceed to step , where sandbox server  may establish the new sandbox in the available system resources. Various methods for establishing a testing sandbox will be apparent to those of skill in the art. It should be noted that, in various embodiments, steps  and  may be performed in reverse order. For example, sandbox server  may add the sandbox definition after establishing the sandbox.","Next, in step , sandbox server  may receive device emulator code and\/or identifiers for device emulators from a requesting device. Sandbox server  may then instantiate the received emulators within the new sandbox. For example, sandbox server  may install or otherwise store the corresponding device emulator code within the portion of memory allocated to the sandbox. Sandbox server  may also initiate a process for each such emulator for executing the associated code. Likewise, in step , sandbox server  may receive testing tool code and\/or identifiers for testing tools from a requesting device. Then, in step , sandbox server  may instantiate the received tools within the sandbox. For example, sandbox server  may install or otherwise store the corresponding testing tool code within the portion of memory allocated to the sandbox. Sandbox server  may also initiate a process for each such tool for executing the associated code. Method  may then end in step .",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 9","b":["900","900","400","420","425","435"]},"Method  may begin in step  and proceed to step  where sandbox server  may receive an access request for a sandbox. Such request may be, for example, an http(s) request that identifies a particular sandbox and\/or user. In step , sandbox server  may attempt to identify the requested sandbox by, for example, consulting a list of sandbox definitions. In step , sandbox server  may determine whether the identified sandbox exists. For example, sandbox server  may determine that the sandbox does not exist if sandbox server  could not identify any sandbox in step . If the sandbox does not exist, sandbox server  may simply return an error to the requesting device in step , and method  may proceed to end in step .","If, on the other hand, sandbox server  is able to identify an active sandbox, method  may proceed from step  to step . In step , sandbox server  may attempt to authenticate the user. For example, sandbox server  may compare a session identifier, user identifier, and\/or password to data stored in the associated sandbox definition. If the compared data does not match the sandbox definition, method  may simply end. Otherwise, method  may proceed to step  where sandbox server  determines whether the access request is a request to upload application code to a device emulator. If so, sandbox server  may proceed to receive and install the application code on at least one emulator in the sandbox in step . Method  may then proceed to step .","If sandbox server  determines in step  that the request does not include application code for installation, method  may instead proceed to step , where sandbox server  may determine whether the access request includes a command for a device emulator. If so, method  may proceed to step , where sandbox server  may perform the specified command on the device emulator. For example, the access request may specify that a particular button should be \u201cpressed\u201d on the emulator or that a device should be \u201ctilted\u201d a specified direction. The sandbox server may emulate the requested command and method  may proceed to step .","In step , sandbox server  may return an emulator display and\/or any other results of the command. In various embodiments, this may include returning an html or other web page displaying an emulated device screen. Such web page may be operable for transmitting further access requests to the sandbox server . Method  may then end in step .","In step , if the sandbox server  determines that the access request does not include an emulator command, method  may instead proceed to step , where sandbox server  may determine whether the access request includes a tools command. For example, the access request may request the execution and\/or results from a testing tool. If the access request includes such a command, sandbox server  may execute the testing tool in step  and return tool results to the developer in step . In various embodiments, this may include returning an html or other web page displaying a testing tool report. Such web page may be operable for transmitting further access requests to the sandbox server . Method  may then end in step .","If, on the other hand, sandbox server  determines at step  that the access request does not include a tool command, method  may instead proceed to step . In step , sandbox server  may perform other processing in order to fulfill the access request. For example, such processing may include changing the parameters of a sandbox, terminating a sandbox, or saving the current state of a sandbox for future use. Various additional types of access request useful in testing applications will be apparent to those of skill in the art. Step  may also include presenting a web page to a developer that may be operable for transmitting further access requests to the sandbox server . Method  may then end in step .","It should be apparent from the foregoing description that various exemplary embodiments of the invention may be implemented in hardware and\/or firmware. Furthermore, various exemplary embodiments may be implemented as instructions stored on a machine-readable storage medium, which may be read and executed by at least one processor to perform the operations described in detail herein. A machine-readable storage medium may include any mechanism for storing information in a form readable by a machine, such as a personal or laptop computer, a server, or other computing device. Thus, a tangible and non-transitory machine-readable storage medium may include read-only memory (ROM), random-access memory (RAM), magnetic disk storage media, optical storage media, flash-memory devices, and similar storage media.","It should be appreciated by those skilled in the art that any block diagrams herein represent conceptual views of illustrative circuitry embodying the principles of the invention. Similarly, it will be appreciated that any flow charts, flow diagrams, state transition diagrams, pseudo code, and the like represent various processes which may be substantially represented in machine readable media and so executed by a computer or processor, whether or not such computer or processor is explicitly shown.","Although the various exemplary embodiments have been described in detail with particular reference to certain exemplary aspects thereof, it should be understood that the invention is capable of other embodiments and its details are capable of modifications in various obvious respects. As is readily apparent to those skilled in the art, variations and modifications can be effected while remaining within the spirit and scope of the invention. Accordingly, the foregoing disclosure, description, and figures are for illustrative purposes only and do not in any way limit the invention, which is defined only by the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to better understand various exemplary embodiments, reference is made to the accompanying drawings, wherein:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
