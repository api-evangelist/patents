---
title: Initializing platform-specific features of a platform during early stages of booting the kernel
abstract: Techniques are described for providing a kernel with the ability to execute functions from a kernel module during processor initialization and initializing a platform using platform-specific modules. An initialization function of the platform-specific module is executed before a platform-independent phase of the kernel of the operating system is executed. In one example, a device includes a computer-readable medium that stores instructions for a platform-specific module comprising an initialization function, and instructions for an operating system comprising a kernel, wherein the kernel comprises a boot sequence comprising a platform-dependent phase and a platform-independent phase, and a processor to execute instructions stored in the computer-readable medium. The processor executes the initialization function of the platform-specific module to initialize the device during the platform-dependent phase of the kernel boot sequence, and wherein the processor executes the platform-independent phase of the kernel boot sequence after executing the initialization function of the platform-specific module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08176311&OS=08176311&RS=08176311
owner: Juniper Networks, Inc.
number: 08176311
owner_city: Sunnyvale
owner_country: US
publication_date: 20090701
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/146,935, filed Jan. 23, 2009, which is hereby incorporated by reference in its entirety.","This disclosure relates to computing devices and, more particularly, to the boot-up cycle of computing devices.","Conventional computing platforms often utilize an operating system that acts as an interface between software applications and hardware devices. The operating system provides application programming interfaces (APIs) that provide functions for the software applications. The operating system receives instructions through the APIs and controls hardware devices of the computing platform, e.g., through device drivers. A kernel of an operating system generally is responsible for allocating platform resources to a process and executing the process. During execution of a process, the kernel interacts with various resources, including hardware devices, of the computing platform. The kernel must therefore be written to interact with all of the available resources of any computing platform on which the operating system is to be installed. During boot-up of the computing platform, the kernel initializes the computing platform and hardware devices thereof.","Operating systems are conventionally written to operate on many different computing platforms. Network platforms that utilize operating systems include, for example, routers, switches, security devices, firewalls, inspection devices, intrusion detection and intrusion prevention devices, web servers, database servers, e-mail servers, management devices, and other platforms. Programmers often write a single operating system that can accommodate all of these different platforms. This simplifies the task of writing the operating system because multiple variations of the entire operating system do not need to be written.","In general, techniques are described for invoking platform-specific functions in loadable modules, thereby reducing the size of an operating system kernel loaded into memory for platforms that do not need a particular kernel module. In accordance with the techniques described herein, functions of one or more platform-specific modules are called during early stages of bootup of the operating system, such as during central processing unit (CPU) initialization. The functions of the platform-specific modules perform initialization procedures for the platform on which the operating system is installed during a platform-dependent phase of the boot-up cycle, and potentially other procedures after the boot-up cycle. For example, the functions of the platform-specific modules may initialize hardware devices of the platform on which the operating system is installed.","At the beginning of the boot-up cycle, e.g., after the platform is powered on, the boot loader of the platform loads the kernel and the platform-specific modules. The CPU then executes the kernel, the execution of which includes a platform-dependent phase and a platform-independent phase. During the platform-dependent phase of kernel boot-up, the kernel invokes initialization functions in the modules. These functions may initialize platform-dependent features of the platform, such as a watchdog timer of the platform and a translation lookaside buffer, which may be platform-specific. The kernel then executes the platform-independent phase of the boot-up cycle, which is common across all platforms. After the boot-up cycle of the kernel, the operating system may execute functions of the platform-specific modules to, for example, interact with a particular hardware device that is specific to the platform. In this manner, the kernel of the operating system may perform all of the boot-up procedures required by the operating system without becoming bloated by loading instructions (either as a module or in the base implementation) that are not going to be used by the kernel, which may otherwise be necessary for a conventional operating system for a particular platform.","In one example, a method includes loading a kernel of an operating system of a platform during initialization of a processor of the platform, wherein the platform comprises a computing device, loading an initialization function of a platform-specific module during initialization of the processor of the platform, wherein the initialization function of the platform-specific module is configured to initialize at least a portion of the platform, executing, by the kernel, the initialization function of the platform-specific module during a platform-dependent phase of a kernel boot sequence for the kernel, and executing, by the kernel, a platform-independent phase of the kernel boot sequence after executing the initialization function of the platform-specific module. Only after executing the function of the platform-specific module is the rest of the kernel initialized.","In another example, a device includes a computer-readable medium that stores instructions for a platform-specific module comprising an initialization function, and instructions for an operating system comprising a kernel, wherein the kernel comprises a boot sequence comprising a platform-dependent phase and a platform-independent phase, and a processor to execute instructions stored in the computer-readable medium, wherein the processor executes the initialization function of the platform-specific module to initialize the device during the platform-dependent phase of the kernel boot sequence, and wherein the processor executes the platform-independent phase of the kernel boot sequence after executing the initialization function of the platform-specific module.","In another example, a computer-readable medium, such as a computer-readable storage medium, of a platform contains instructions. The instructions cause a programmable processor to load a kernel of an operating system of the platform during initialization of the processor from a computer-readable medium of the platform, load an initialization function of a platform-specific module during initialization of the processor, wherein the initialization function of the platform-specific module is configured to initialize the platform, execute the initialization function of the platform-specific module during a platform-dependent phase of a kernel boot sequence for the kernel, and execute a platform-independent phase of the kernel boot sequence after executing the initialization function of the platform-specific module.","The techniques described herein may present several advantages. For example, because the kernel of the operating system does not need to include code that would support each of a variety of different platforms, the kernel of the operating system may not become bloated or oversized as a result of including such support. As another example, the platform-specific functions of the modules called by the kernel in the early bootup stage do not have to reside in the kernel and can be isolated to modules. In this manner, the kernel may include the framework to load and execute modules that may support any platform on which the operating system is installed, yet the kernel need not directly support each and every feature of these various platforms.","The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["2","4","4","4","10","4","6","4","8","8","8","4","4","8","4","8","4","8","4"]},"When one of computing devices  is initially started, the central processing unit of the one of computing devices  loads and executes a boot loader, which loads a kernel of operating system , as well as the corresponding one or more platform-specific modules . This disclosure uses the term \u201cload\u201d to mean that corresponding instructions are written to their proper memory addresses for execution. The kernel of operating system  generally executes a boot-up procedure in two phases: a platform-dependent phase and a platform-independent phase. The kernel of operating system  executes the platform-dependent phase and the platform-independent phase in this order. During the platform-dependent phase, the kernel initializes the platform, including platform-specific features, such as particular hardware devices, a watchdog timer, a translation look-aside buffer (TLB), and\/or other platform-specific features. The platform-dependent phase generally includes the initialization of a processor of the platform. That is, the platform-dependent phase may correspond to the time during which the CPU is initialized. The platform-independent phase generally corresponds to system startup tasks such as initialization processes, mounting of root filesystem, initialization of TCP\/IP protocol stack, and the like.","In accordance with the techniques of this disclosure, the kernel of operating system  executes functions of platform-specific modules  during the platform-dependent phase of kernel boot-up to initialize the platform. Conventional operating systems only support modules, e.g., execution of functions provided by modules, during the platform-independent phase of kernel execution, at which time the platform has already been initialized. That is, conventional operating systems do not support execution of modules during the platform-dependent phase of kernel boot-up. Therefore, the loaded kernel of a conventional operating system must include instructions to initialize any platform on which the operating system is installed, even if those instructions are to initialize a hardware device or other feature of the platform that is not present on the particular platform on which the operating system is installed.","In accordance with the techniques of this disclosure, and contrary to conventional operating systems, the kernel of operating system  supports calling of functions from modules during the platform-dependent phase of kernel execution. In particular, platform-specific modules  may perform the initialization procedures conventionally performed by the kernel itself. Therefore, computing devices  may load instructions, in the form of the platform-specific modules , for particular features of the one of computing devices  and thus avoid loading instructions that may not be executed during the platform-dependent phase, such as instructions for initializing features of a different platform. In this manner, the kernel of operating system  may avoid becoming bloated with code that may not be executed during initialization.","As an example, computing device A includes platform-specific modules A, which are configured for computing device A. When computing device A is turned on, computing device A loads the kernel of operating system , as well as platform-specific modules A. Platform-specific modules A each include functions that initialize the \u201cplatform,\u201d i.e., computing device A. In this manner, the kernel of operating system  need not include specific code for initializing particular features of computing device A. Moreover, the kernel of operating system  need not include code for initializing particular features of any other ones of computing devices , such as computing device B, which may include hardware devices and other features not found on computing device A. In this manner, the base (or core?) kernel of operating system  may remain platform-independent, while also being able to execute functions of platform-specific modules A to initialize computing device A. Likewise, computing device B includes platform-specific modules B that are configured to initialize computing device B, and the platform-specific modules B for computing device B may be different than platform-specific modules A of computing device A, e.g., if computing device A and computing device B are different platforms.","Each of computing devices  may correspond to any type of computing device that includes an operating system. For example, any or all of computing devices  may be workstation computers, stand-alone computers, gaming consoles, handheld devices such as cellular phones, personal digital assistants (PDAs), or music\/mp3 players, network devices such as routers, switches, servers, intrusion detection and prevention (IDP) devices, firewalls, or other devices that include an operating system. Although depicted as being connected to network  in the example of , one or more of computing devices  need not be connected to a network.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["8","8","12","20","24","28","32","36","10","18","4","18","12","14","20","22","24","26","28","30","32","34","36","38"]},"In general, a platform-specific module performs platform-specific functions, e.g., during initialization of the platform. For example, a platform-specific module may initialize particular devices of the platform, such as network interface cards. In accordance with the techniques described herein, the platform-specific module executes platform-specific initialization functions during initialization of a central processing unit (CPU) or other general purpose or specialized processor of the platform, and hence before a kernel of operating system  is completely booted, thus during the early part of the bootup cycle of the kernel.","The platform-specific module may perform various functions for the particular platform on which the platform-specific module is installed. For example, the platform-specific module may initialize a watchdog timer of the platform. As another example, the platform-specific module may initialize a translation lookaside buffer of the platform. As another example, the platform-specific module may initialize devices of the platform, e.g., network interface cards, user interfaces, or other devices. Certain platform-specific modules may be installed on two or more different platforms. For example, a module to initialize a packet forwarding engine (PFE) may be installed on both router  as one of router modules  and on switch  as one of switch modules .","As one example of platform-specific modules, router modules  may set a routing engine type for router , initialize the routing engine of router , and initialize a forwarding engine of router . As another example, switch module  may initialize a forwarding engine of switch . As another example, IDP module  may initialize an application identification engine, a signature engine, a random number generator, and a protocol identification engine of IDP .","When operating system  is first installed on one of the example platforms of , a user, e.g., an administrator, configures a boot loader to identify one or more platform-specific modules and corresponding initialization functions provided by the platform-specific modules to be called during an early bootup stage of the kernel, which also performs CPU initialization. The platform is then ready for use.","When the platform is turned on or otherwise booted up (e.g., restarted), the loader loads the kernel of operating system  as well as the platform-specific modules for the platform. Upon first receiving power, the CPU retrieves instructions from a boot sector, e.g., of a computer-readable medium, that stores a location of instructions corresponding to a boot loader. During CPU initialization, the CPU retrieves and executes the boot loader instructions. The boot loader instructs the CPU to load the kernel of operating system  and the one or more platform-specific modules in accordance with the configuration received from the administrator. The configuration may be stored in a computer file, such as \u201cloader.conf.\u201d Thus the administrator may modify loader.conf to configure the kernel. The CPU then executes the platform-dependent phase of the kernel of operating system .","As the CPU begins executing the platform-dependent phase of the kernel of operating system , the kernel calls the initialization function of the one or more platform-specific modules, according to the configuration from the administrator, to initialize the platform. The kernel also relocates and links the module. The kernel also builds a symbol table and resolves symbols of the platform-specific modules in the symbol table. That is, the kernel stores symbols of the platform-specific modules (e.g., function names, variable names, etc. of the platform-specific modules) and corresponding memory addresses of the symbols in the symbol table. The kernel then executes initialization functions of each of the platform-specific modules, which includes instructions to execute the particular platform on which the operating system is installed. Finally, after execution of the initialization function of the platform-specific modules, the kernel of operating system  executes the platform-independent phase of the kernel bootup. Operating system  may interact with the platform-specific modules after boot-up by referencing the symbol table.","In this manner, operating system  may be installed on each of the example platforms of , while the kernel of operating system  may interact with the platform-specific modules of each of the example platforms of . However, in this manner, the kernel of operating system  need not include platform-specific code for each of the platforms portrayed in . Therefore, the kernel of operating system  may occupy relatively less memory space than that of a conventional operating system, yet each of the platforms may be initialized properly, and the kernel may properly initialize and interact with devices of each of the platforms through the platform-specific modules.","The platform-specific modules of  may present several advantages. For example, because the kernel of operating system  does not need to load code that would support each of the platforms of, e.g., , the kernel of operating system  may avoid becoming bloated as a result of including such support. Operating system  may achieve modularity and include a smaller kernel than conventional operating systems. Operating system  may utilize less memory than conventional operating systems, thus achieving a smaller memory footprint in the platform. When the platform changes, or otherwise when a change to the initialization of the platform is required, only one or more of the platform-specific modules may need to be updated, rather than all of operating system , which would require that the kernel be updated and recompiled.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIG. 1","FIG. 2","FIG. 3"],"b":["50","50","52","50","50","52","50","65","66","60","60","72"]},"The processor of platform  refers to the boot sector of storage media  to identify the instructions to execute boot loader . Each set of platform-specific module instructions  includes initialization function instructions  and instructions for one or more module functions . The processor executes boot loader  to load operating system instructions  into memory as operating system , which includes kernel  and one or more modules . Boot loader  also loads platform-specific module instructions  as one or more of modules . Modules  may also include traditional operating system modules, which are loaded and executed after the platform-dependant phase of boot-up.","In the example of , boot loader  includes identifiers . Identifiers  include a plurality of location identifiers, such as file names, to locations in storage media , corresponding to platform-specific module instructions , operating system instructions , and other sets of instructions such as traditional modules (not shown). Identifiers  also include identifiers of initialization function instructions  within the platform-specific module instructions . In one example, identifiers  are configured during installation of operating system , as described in greater detail with respect to . Module identifiers , for example, may comprise names of modules in storage media  corresponding to platform-specific module instructions . Boot loader  also stores initialization function identifiers . Initialization function identifiers  identify names of initialization functions corresponding to initialization function  within each set of platform-specific module instructions .","In one example, initialization function instructions  within one of the sets of platform-specific module instructions  may comprise a function named \u201cinit_module( )\u201d Accordingly, a corresponding one of initialization function identifiers  identifies the initialization function of the platform-specific module instructions  as \u201cinit_module( )\u201d in this example. In another example, the initialization function  corresponding to one set of platform-specific module instructions  may be named \u201cearly_boot_init( )\u201d in which case the corresponding one of initialization function identifiers  identifies the initialization function of the platform-specific module instructions  as \u201cearly_boot_init( )\u201d In any case, initialization function identifiers  generally identify initialization function instructions  of corresponding platform-specific module instructions . Kernel identifier  represents the file path of the kernel of operating system instructions  in storage media .","Boot loader  executes and loads the instructions identified by identifiers  from storage media  into main memory, such as RAM. For example, as shown in , boot loader  loads operating system instructions  into main memory of operating system . Boot loader  also loads each set of platform-specific module instructions  as one of modules .","Modules  corresponding to a set of platform-specific module instructions  generally perform initialization procedures for platform  when executed by kernel  during a platform-dependent boot-up phase. In particular, the initialization function instructions  initialize the one of the platform-specific modules along with initializing the platform, when executed by the kernel. For example, one of the platform-specific modules may initialize a network-interface card of platform . The initialization function instructions  corresponding to one of the platform-specific modules may also refer to internal module functions  of the corresponding set of platform-specific module instructions .","Kernel  is configured, according to the techniques of this disclosure, to execute the initialization functions  corresponding to each set of platform-specific module instructions  during a platform-dependent phase of execution. During execution of initialization function instructions , kernel  constructs symbol table , which provides memory location identifiers for \u201csymbols,\u201d such as names of modules, names of functions, names of variables, or other symbols. The memory location identifiers refer to the memory locations for the instructions corresponding to the symbol when the symbol refers to a procedure or function or the value for a variable or other data object. For example, symbol table  includes module locations , which refers to the loaded memory location of the modules as modules . That is, module location  identifies the location of platform-specific module  as a loaded one of modules , e.g., in RAM, whereas module identifier  identifies a location of instructions for the platform-specific modules in storage media , e.g., in ROM or on a hard disk.","After executing the initialization function instructions  corresponding to each set of platform-specific module instructions , kernel  may proceed to the platform-independent phase of boot-up. Operating system  may also include traditional kernel modules among modules  with which kernel  may interact after execution of the platform-independent phase of boot-up. Kernel  also stores the memory locations of the traditional ones of modules  in symbol table  during or after kernel  has been initialized and after kernel  has initialized those modules.","Platform-specific module instructions  may generally include any instructions provided by the kernel during the platform-dependent phase of execution, as well as any functions implemented by module function instructions . During the platform-dependent phase, the kernel typically has not executed instructions that provide dynamic memory allocation functionality, such as, for example, a \u201cmalloc( )\u201d function in C\/C++. Thus, unless one or more of the platform-specific modules implements a dynamic memory allocation scheme, the platform-specific modules generally do not dynamically allocate memory using a function call such as \u201cmalloc( )\u201d according to one aspect.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIG. 1","FIG. 2"],"b":["80","80","50","80","92","82","84","96","86","88","90","80","90","84"]},"An administrator, such as administrator , configures platform  through I\/O interface , which may be a graphical user interface (GUI), a command line interface (CLI), or other interface. Administrator  may also configure platform  remotely via a management device across a network, e.g., using SNMP, via IFC . In any case, administrator  may perform various administrative tasks on platform . For example, administrator  may install an operating system for platform  onto storage media , which may comprise, for example, a hard drive, a floppy disk, a CD-ROM, a flash drive, magnetic media, optical media, or other permanent storage media. In accordance with the techniques described herein, the administrator also installs platform-specific modules onto storage media . During installation of the platform-specific modules, instructions for the platform-specific modules are loaded onto storage media  (e.g., shown as platform-specific module instructions  in ).","ROM  includes an identifier of the location of the bootable sector of storage media . When processor  initially receives power, processor  performs a processor initialization function, loaded from ROM . The processor initialization function causes the processor to locate the operating system instructions and the instructions for the platform-specific modules on storage media . The processor initialization function also loads a boot loader, which in turnloads the operating system instructions and the platform-specific module instructions into RAM . The platform-specific module instructions include an initialization function for the corresponding platform-specific module. The processor executes a platform-dependent phase of the kernel first that, according to the techniques of this disclosure, is configured to execute the initialization functions for each of the platform-specific modules. In one example, platform  may correspond to platform  of , in which case the processor initialization function would execute the functions corresponding to initialization function instructions  of the set of platform-specific module instructions . The following pseudocode provides an example of an initialization function that processor  may execute from RAM :","\/*","* cpu init function, called during early stages of boot up","*\/","cpu_init( ) {\n\n","}","\/*","* Lookup the platform module and call the early boot callback function in","* the module","*\/","platform_early_bootup_callback( ) {\n\n","}","The pseudocode for the class \u201cP_S_Module\u201d is given below. In the example, the code for P_S_Module is installed on storage media , rather than stored within ROM .","\/*","* platform callback function called during early stages of bootup","*\/","class_P_S_Module {\n\n","}","In an alternative example, the class P_S_Module may include generic data elements and functions that are used for initializing any platform. The class may then be extended to include platform-specific functions and data objects. For example, the base P_S_Module class may be extended to a P_S_Router_Module class that includes functions for initializing a router, a P_S_Switch_Module class that includes functions for initializing a switch, a P_S_Server_Module class that includes functions for initializing a server, a P_S_Firewall_Module class that includes functions for initializing a firewall, a P_S_IDP_Module class that includes functions for initializing an IDP, and a P_S_Mgmt_Module class that includes functions for initializing a management device. Each of these modules may be further extended to include functions or objects for a particular version of the platform; for example, the P_S_Router_Module class may be further extended to P_S_Router_Module1, P_S_Router_Module2, and P_S_Router_Module3 for versions 1, 2, and 3 of a router, respectively.","In any case, the processor  executes the initialization function of the platform-specific module from the module instructions stored in RAM . The initialization function of the platform-specific module, executed by processor , initializes devices corresponding to the particular platform-specific module. For example, the initialization function of a first platform-specific module may initialize IFC  and the initialization function of a second platform-specific module may initialize I\/O interface . The initialization function of the platform-specific module may also initialize one or more file systems of storage media  or other devices and features of platform .","After the initialization function of the platform-specific module has finished executing, processor  executes the remaining platform-dependent phase of the kernel of the operating system. The kernel, executed by processor , then executes the platform-independent phase of the initialization process by performing platform-independent initialization functions. Once the kernel has finished executing the platform-independent phase, platform  is ready for use.",{"@attributes":{"id":"p-0065","num":"0090"},"figref":["FIG. 5","FIG. 5"]},"Initially, a user customizes one or more platform-specific modules for the platform (). The user also customizes an initialization function for each of the platform-specific modules for the particular platform on which the platform-specific modules are to be installed. This may be done shortly before setting up the platform, although more typically, this step will be performed concurrently with programming the operating system. This step may include, for example, customizing platform-specific modules to configure a watchdog timer for the platform, to set a configuration for a translation lookaside buffer, to initialize particular hardware devices of the platform, and other platform-specific features.","The watchdog timer is a timer that triggers a reset of the platform when the timer reaches zero. Components of the platform regularly reset the watchdog timer to keep the system alive. Therefore, when the platform experiences a freeze or a hang, the watchdog timer will enable the platform to restart. The initialization performed by the platform-specific module may initially set the watchdog timer and set a maximum value for the timer from which the watchdog timer counts down. Because different platforms include different mechanisms to reset and\/or initialize the watchdog timer, and because the addresses of corresponding registers may be different on various platforms, the platform-specific module is specifically configured for the corresponding platform with, for example, the proper mechanisms and functions needed for manipulation of registers. In this manner, the initialization function of the platform-specific module does what is needed for the platform.","The translation look-aside buffer is a cache in the CPU of the platform that includes a number of page table entries that map virtual addresses onto physical addresses. The translation look-aside buffer (TLB) is used to improve the speed of translation between virtual addresses and physical addresses. The module may, for example, set up the TLB with platform specific address ranges.","This step may also be used to perform other platform-specific configuration functions. For example, when the platform is a router, the user may customize a platform-specific module to set a routing engine type and initialize a routing engine. As another example, when the platform is a switch, the user may customize a platform-specific module to initialize a forwarding engine. As another example, when the platform is an IDP platform, the user may customize a platform-specific module to initialize signatures or protocol detectors of an attack detection engine.","A user then installs the operating system and the platform-specific modules onto a platform (). The user may be the user who customized the platform-specific module, or a separate user, e.g., an administrator of the platform. The operating system is an operating system that is designed to be installed on various platforms. A kernel of the installed operating system also recognizes modules that are used to extend the functionality of the kernel, both during the platform-dependent phase of boot-up and during and after the platform-independent phase of boot-up. During installation of the operating system, a boot loader is also installed in a bootable sector of storage media of the platform.","Next, the user configures the boot loader to load the kernel and the platform-specific modules (). That is, the platform receives a set of location identifiers to identify locations of the platform-specific modules. Therefore, when the platform is turned on during a normal boot-up sequence, the boot loader will be able to recognize the location of the platform-specific modules. The user also configures an identifier of an initialization function of each of the platform-specific modules (). Therefore, the boot loader will be able pass the name of the initialization function to the kernel such that the kernel may call the initialization functions of the platform-specific modules during the kernel's execution of the platform-dependent phase of boot-up.",{"@attributes":{"id":"p-0072","num":"0097"},"figref":"FIG. 6","b":["120","122"]},"The boot loader first loads a kernel of the operating system (). The boot loader identifies the location of the kernel from, e.g., kernel identifier  (). A computer file, such as \u201cloader.conf,\u201d may include a configuration that identifies the location of the kernel in storage media for the boot loader. In this manner, loader.conf may provide the location (file path) of the kernel in the storage media. In some examples, one or more environmental variables in loader.conf may identify platform-specific modules, and\/or initialization functions thereof, to load and execute. The boot loader then retrieves each instruction of the kernel and copies the instructions for the kernel to main memory, e.g., according to the configuration. In one example, the loader may use a configuration established according to the method described with respect to .","The boot loader then loads each set of platform-specific module instructions (). The boot loader identifies the set of instructions for each platform-specific module, e.g., using platform-specific module identifiers  (). The boot loader then passes control to the kernel. The kernel constructs a symbol table and stores identifiers of the platform-specific modules in the symbol table (). The kernel also links each of the platform-specific modules (). That is, when a platform-specific module is written, memory references within functions of the module are relative to the first instruction having an address of \u201c0,\u201d according to one aspect. The relocation phase modifies these memory references relative to the memory location of the module as loaded. This procedure is also known as relocation. The kernel then executes initialization functions of each of the platform-specific modules (). The initialization functions initialize devices and features specific to the platform, as described above.","After the initialization function of the platform-specific module has finished, the kernel of the operating system performs the platform-independent phase of boot-up (). The platform-independent phase causes the platform to finally become operational. The platform-independent phase includes operations that are universal among platforms on which the operating system is installed. For example, the platform-independent phase includes providing memory allocation functionality to processes executing over the operating system. The kernel may access the module functions provided by the platform-specific modules by referring to the symbol table to identify the locations of these module functions. Therefore, the kernel may receive instructions through APIs from processes of the platform that request access to, e.g., hardware devices specific to the platform (for example, particular IFCs, I\/O interfaces, or other devices), or other features of the platform.","The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware or any combination thereof. For example, various aspects of the described techniques may be implemented within one or more processors, including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. The term \u201cprocessor\u201d or \u201cprocessing circuitry\u201d may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry.","Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware or software components, or integrated within common or separate hardware or software components.","The techniques described herein may also be embodied in a computer-readable medium, such as a computer-readable storage medium, containing instructions. Instructions embedded in a computer-readable medium may cause a programmable processor, or other processor, to perform the method, e.g., when the instructions are executed. Computer-readable storage media may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a CD-ROM, a floppy disk, a cassette, magnetic media, optical media, or other computer readable media.","Various examples have been described. These and other examples are within the scope of the following claims."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
