---
title: Systems and methods for GSLB MEP connection management across multiple core appliances
abstract: The present disclosure presents systems and methods for obtaining metric information by a multi-core GSLB intermediary device and providing global server load balancing services using the obtained information. A first core of a multi-core GSLB appliance establishes a transport layer connection to a remote load balancer at a site of a plurality of sites. The first core transmits a message to each of the other cores of the multi-core GSLB appliance that that the first core is a master core for receiving metric information from the load balancer. The first core receives metric information of the remote site from the load balancer. The first core propagates the metric information to each of the other cores of the GSLB appliance. A GSLB virtual server on a slave core receives a DNS request. The GSLB virtual server determines a DNS resolution for the DNS request based on the metric information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08412832&OS=08412832&RS=08412832
owner: Citrix Systems, Inc.
number: 08412832
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20091223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the file or records of the Patent and Trademark Office, but otherwise reserves all copyright rights whatsoever.","The present application generally relates to data communication networks. In particular, the present application relates to systems and methods for performing global service load balancing (GSLB) by a network device.","A corporate or enterprise may deploy a number of services across a network to enhance the quality of service provided by the enterprise to the clients accessing the services via servers of the enterprise. The servers of the enterprise may be optimized in a number of ways to meet the demand and load from the volume of clients' requests. In some configurations, the enterprise may further provide one or more intermediaries to manage the network traffic from the clients requesting access to one or more enterprise servers. The enterprise may further provide one or more load balancing network devices manage the network traffic handled by the enterprise servers.","In some instances, a global server load balancing (GSLB) device may be deployed to manage network traffic distributed across a plurality of sites. Each site may comprise one or more load balancing network devices managing traffic across a plurality of servers from each of the sites. The servers may receive client requests accessing various services or resources provided by the servers. Load balancing devices may distribute the network traffic to optimize the performance of the servers and avoid any of the servers being overburdened or crashing. The GSLB device may receive any DNS requests from any clients in order to provide the internet protocol addresses for the clients to access the desired resources on the servers.","In some embodiments, the GSLB device may be a multi-core GSLB device which comprises a plurality of cores, each comprising a GSLB virtual server capable of providing and performing the global server load balancing for the each of the load balancers at each of the sites. The GSLB virtual server load balancers at each of the cores may perform the load balancing based on the metrics and\/or information available to each of the cores. However, as the metrics change the performance of each of the GSLB virtual server may begin to deteriorate as the GSLB virtual servers may use outdated or incorrect metrics or information to perform the load balancing. As the network traffic load may continuously change, the multi-core GSLB device may update, maintain and consolidate all the metrics used for global server load balancing and then distribute the updated and consolidated metrics to each of the cores. The GSLB virtual servers at each of the cores may then continue to provide global service load balancing without the deterioration, since the metrics used by each of the GSLB virtual servers at each of the cores would be updated using the updated metrics from the consolidator of the master core.","In some aspects, present disclosure relates to a method of obtaining metric information by a multi-core intermediary device for providing global server load balancing. A first core of a plurality of cores of a first intermediary device providing global server load balancing (GSLB) to a plurality of remote sites may establish a first transport layer connection to a second intermediary device providing services to a first remote site of the plurality of remote sites. The first core of the first intermediary device may transmit a message to each of the other cores of the plurality of cores of the first intermediary device that the first core is a master core for receiving metric information from the second intermediary device. The first core may receive, via the first transport layer connection, metric information of the remote site from the second intermediary device. The first core may propagate the metric information to each of the other cores of the plurality of cores. A GSLB virtual server executing on a second core of the plurality of cores of the first intermediary device may receive a domain name service (DNS) request. The GSLB virtual server may determine a DNS resolution to one of the plurality of remote sites for the DNS request based on the metric information.","In some embodiments, the first intermediary device determines that an internet protocol address of the first intermediary device is lower than a second internet protocol address of the second intermediary device and responsive to the determination, establishes the first transport layer connection. In some embodiments, the second core of the plurality of cores of the first intermediary device establishes a second transport layer connection to a third intermediary device providing services to a second remote site. In further embodiments, the second core transmits a second message to each of the other cores of the plurality of cores that the second is the master core for receiving metric information from the third intermediary device. In further embodiments, the second core receives, via the second transport layer connection, metric information of the second remote site from the third intermediary device. The second core may propagate the metric information of the second remote site to each of the other cores of the plurality of cores. In further embodiments, the second core receives an update of metric information for the first remote site from a third core and ignores the update responsive to identifying that the third core is not the master core for the first remote site. In some embodiments, the first core transmits an update message to the other cores, the update message identifying a difference between a currently obtained value of a metric and a previous value of the metric. In certain embodiments, the first core establishes a monitor to monitor a status of the first remote site. In specific embodiments, the first core determines, responsive to the monitor, that the first remote site is down and transmits a second message to the other cores that the first remote site is down. In further embodiments, by the GSLB service of the second core receives a second DNS request and does not including the first remote site in determining a resolution for the second DNS request.","In some aspects, the present disclosure relates to a system of obtaining metric information by a multi-core intermediary device for providing global server load balancing. A first core of a plurality of cores of a first intermediary device may provide global server load balancing (GSLB) to a plurality of remote sites and establish a first transport layer connection to a second intermediary device providing services to a first remote site of the plurality of remote sites. The first core may transmit a message to each of the other cores of the plurality of cores of the first intermediary device that the first core is a master core for receiving metric information from the second intermediary device. A GSLB virtual server executing on a second core of the plurality of cores of the first intermediary device may receive a domain name (DNS) request and determine a DNS resolution to one of the plurality of remote sites for the DNS request based on the metric information. The first core may receive, via the first transport layer connection, the metric information of the remote site from the second intermediary device and propagate the metric information to each of the other cores of the plurality of cores.","In some embodiments, the first intermediary device determines that an internet protocol address of the first intermediary device is lower than a second internet protocol address of the second intermediary device and responsive to the determination, establishes the first transport layer connection. In some embodiments, the second core of the plurality of cores of the first intermediary device establishes a second transport layer connection to a third intermediary device providing services to a second remote site. In further embodiments, the second core transmits a second message to each of the other cores of the plurality of cores that the second is the master core for receiving metric information from the third intermediary device. In still further embodiments, the second core receives, via the second transport layer connection, metric information of the second remote site from the third intermediary device and propagates the metric information of the second remote site to each of the other cores of the plurality of cores. In yet further embodiments, the second core receives an update of metric information for the first remote site from a third core and ignores the update responsive to identifying that the third core is not the master core for the first remote site. In some embodiments, the first core transmits an update message to the other cores, the update message identifying a difference between a currently obtained value of a metric and a previous value of the metric. In yet further embodiments, the first core establishes a monitor to monitor a status of the first remote site. In some embodiments, the first core determines, responsive to the monitor, that the first remote site is down and transmits a second message to the other cores that the first remote site is down. In certain embodiments, the GSLB service of the second core receives a second DNS request and does not include the first remote site in determining a resolution for the second DNS request.","In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements.","For purposes of reading the description of the various embodiments below, the following descriptions of the sections of the specification and their respective contents may be helpful:\n\n","Prior to discussing the specifics of embodiments of the systems and methods of an appliance and\/or client, it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to , an embodiment of a network environment is depicted. In brief overview, the network environment comprises one or more clients -(also generally referred to as local machine(s) , or client(s) ) in communication with one or more servers -(also generally referred to as server(s) , or remote machine(s) ) via one or more networks , \u2032 (generally referred to as network ). In some embodiments, a client  communicates with a server  via an appliance .","Although  shows a network  and a network \u2032 between the clients  and the servers , the clients  and the servers  may be on the same network . The networks  and \u2032 can be the same type of network or different types of networks. The network  and\/or the network \u2032 can be a local-area network (LAN), such as a company Intranet, a metropolitan area network (MAN), or a wide area network (WAN), such as the Internet or the World Wide Web. In one embodiment, network \u2032 may be a private network and network  may be a public network. In some embodiments, network  may be a private network and network \u2032 a public network. In another embodiment, networks  and \u2032 may both be private networks. In some embodiments, clients  may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network  to the servers  located at a corporate data center.","The network  and\/or \u2032 be any type and\/or form of network and may include any of the following: a point to point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network. In some embodiments, the network  may comprise a wireless link, such as an infrared channel or satellite band. The topology of the network  and\/or \u2032 may be a bus, star, or ring network topology. The network  and\/or \u2032 and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.","As shown in , the appliance , which also may be referred to as an interface unit  or gateway , is shown between the networks  and \u2032. In some embodiments, the appliance  may be located on network . For example, a branch office of a corporate enterprise may deploy an appliance  at the branch office. In other embodiments, the appliance  may be located on network \u2032. For example, an appliance  may be located at a corporate data center. In yet another embodiment, a plurality of appliances  may be deployed on network . In some embodiments, a plurality of appliances  may be deployed on network \u2032. In one embodiment, a first appliance  communicates with a second appliance \u2032. In other embodiments, the appliance  could be a part of any client  or server  on the same or different network ,\u2032 as the client . One or more appliances  may be located at any point in the network or network communications path between a client  and a server .","In some embodiments, the appliance  comprises any of the network devices manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla., referred to as Citrix NetScaler devices. In other embodiments, the appliance  includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks, Inc. of Seattle, Wash. In another embodiment, the appliance  includes any of the DX acceleration device platforms and\/or the SSL VPN series of devices, such as SA 700, SA 2000, SA 4000, and SA 6000 devices manufactured by Juniper Networks, Inc. of Sunnyvale, Calif. In yet another embodiment, the appliance  includes any application acceleration and\/or security related appliances and\/or software manufactured by Cisco Systems, Inc. of San Jose, Calif., such as the Cisco ACE Application Control Engine Module service software and network modules, and Cisco AVS Series Application Velocity System.","In one embodiment, the system may include multiple, logically-grouped servers . In these embodiments, the logical group of servers may be referred to as a server farm . In some of these embodiments, the serves  may be geographically dispersed. In some cases, a farm  may be administered as a single entity. In other embodiments, the server farm  comprises a plurality of server farms . In one embodiment, the server farm executes one or more applications on behalf of one or more clients .","The servers  within each farm  can be heterogeneous. One or more of the servers  can operate according to one type of operating system platform (e.g., WINDOWS NT, manufactured by Microsoft Corp. of Redmond, Wash.), while one or more of the other servers  can operate on according to another type of operating system platform (e.g., Unix or Linux). The servers  of each farm  do not need to be physically proximate to another server  in the same farm . Thus, the group of servers  logically grouped as a farm  may be interconnected using a wide-area network (WAN) connection or medium-area network (MAN) connection. For example, a farm  may include servers  physically located in different continents or different regions of a continent, country, state, city, campus, or room. Data transmission speeds between servers  in the farm  can be increased if the servers  are connected using a local-area network (LAN) connection or some form of direct connection.","Servers  may be referred to as a file server, application server, web server, proxy server, or gateway server. In some embodiments, a server  may have the capacity to function as either an application server or as a master application server. In one embodiment, a server  may include an Active Directory. The clients  may also be referred to as client nodes or endpoints. In some embodiments, a client  has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients -","In some embodiments, a client  communicates with a server . In one embodiment, the client  communicates directly with one of the servers  in a farm . In another embodiment, the client  executes a program neighborhood application to communicate with a server  in a farm . In still another embodiment, the server  provides the functionality of a master node. In some embodiments, the client  communicates with the server  in the farm  through a network . Over the network , the client  can, for example, request execution of various applications hosted by the servers -in the farm  and receive output of the results of the application execution for display. In some embodiments, only the master node provides the functionality required to identify and provide address information associated with a server \u2032 hosting a requested application.","In one embodiment, the server  provides functionality of a web server. In another embodiment, the server receives requests from the client , forwards the requests to a second server and responds to the request by the client  with a response to the request from the server . In still another embodiment, the server  acquires an enumeration of applications available to the client  and address information associated with a server  hosting an application identified by the enumeration of applications. In yet another embodiment, the server  presents the response to the request to the client  using a web interface. In one embodiment, the client  communicates directly with the server  to access the identified application. In another embodiment, the client  receives application output data, such as display data, generated by an execution of the identified application on the server .","Referring now to , an embodiment of a network environment deploying multiple appliances  is depicted. A first appliance  may be deployed on a first network  and a second appliance \u2032 on a second network \u2032. For example a corporate enterprise may deploy a first appliance  at a branch office and a second appliance \u2032 at a data center. In another embodiment, the first appliance  and second appliance \u2032 are deployed on the same network  or network . For example, a first appliance  may be deployed for a first server farm , and a second appliance  may be deployed for a second server farm \u2032. In another example, a first appliance  may be deployed at a first branch office while the second appliance \u2032 is deployed at a second branch office\u2032. In some embodiments, the first appliance  and second appliance \u2032 work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server","Referring now to , another embodiment of a network environment deploying the appliance  with one or more other types of appliances, such as between one or more WAN optimization appliance , \u2032 is depicted. For example a first WAN optimization appliance  is shown between networks  and \u2032 and a second WAN optimization appliance \u2032 may be deployed between the appliance  and one or more servers . By way of example, a corporate enterprise may deploy a first WAN optimization appliance  at a branch office and a second WAN optimization appliance \u2032 at a data center. In some embodiments, the appliance  may be located on network \u2032. In other embodiments, the appliance \u2032 may be located on network . In some embodiments, the appliance \u2032 may be located on network \u2032 or network \u2033. In one embodiment, the appliance  and \u2032 are on the same network. In another embodiment, the appliance  and \u2032 are on different networks. In another example, a first WAN optimization appliance  may be deployed for a first server farm  and a second WAN optimization appliance \u2032 for a second server farm \u2032","In one embodiment, the appliance  is a device for accelerating, optimizing or otherwise improving the performance, operation, or quality of service of any type and form of network traffic, such as traffic to and\/or from a WAN connection. In some embodiments, the appliance  is a performance enhancing proxy. In other embodiments, the appliance  is any type and form of WAN optimization or acceleration device, sometimes also referred to as a WAN optimization controller. In one embodiment, the appliance  is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In other embodiments, the appliance  includes any of the product embodiments referred to as BIG-IP link controller and WANjet manufactured by F5 Networks, Inc. of Seattle, Wash. In another embodiment, the appliance  includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks, Inc. of Sunnyvale, Calif. In some embodiments, the appliance  includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco, Calif. In other embodiments, the appliance  includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland, N.J. In one embodiment, the appliance  includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino, Calif., such as the PacketShaper, iShared, and SkyX product embodiments provided by Packeteer. In yet another embodiment, the appliance  includes any WAN related appliances and\/or software manufactured by Cisco Systems, Inc. of San Jose, Calif., such as the Cisco Wide Area Network Application Services software and network modules, and Wide Area Network engine appliances.","In one embodiment, the appliance  provides application and data acceleration services for branch-office or remote offices. In one embodiment, the appliance  includes optimization of Wide Area File Services (WAFS). In another embodiment, the appliance  accelerates the delivery of files, such as via the Common Internet File System (CIFS) protocol. In other embodiments, the appliance  provides caching in memory and\/or storage to accelerate delivery of applications and data. In one embodiment, the appliance  provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment, the appliance  provides transport layer protocol optimizations, flow control, performance enhancements or modifications and\/or management to accelerate delivery of applications and data over a WAN connection. For example, in one embodiment, the appliance  provides Transport Control Protocol (TCP) optimizations. In other embodiments, the appliance  provides optimizations, flow control, performance enhancements or modifications and\/or management for any session or application layer protocol.","In another embodiment, the appliance  encoded any type and form of data or information into custom or standard TCP and\/or IP header fields or option fields of network packet to announce presence, functionality or capability to another appliance \u2032. In another embodiment, an appliance \u2032 may communicate with another appliance \u2032 using data encoded in both TCP and\/or IP header fields or options. For example, the appliance may use TCP option(s) or IP header fields or options to communicate one or more parameters to be used by the appliances , \u2032 in performing functionality, such as WAN acceleration, or for working in conjunction with each other.","In some embodiments, the appliance  preserves any of the information encoded in TCP and\/or IP header and\/or option fields communicated between appliances  and \u2032. For example, the appliance  may terminate a transport layer connection traversing the appliance , such as a transport layer connection from between a client and a server traversing appliances  and \u2032. In one embodiment, the appliance  identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance  via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance \u2032 via a second transport layer connection.","Referring now to , a network environment for delivering and\/or operating a computing environment on a client  is depicted. In some embodiments, a server  includes an application delivery system  for delivering a computing environment or an application and\/or data file to one or more clients . In brief overview, a client  is in communication with a server  via network , \u2032 and appliance . For example, the client  may reside in a remote office of a company, e.g., a branch office, and the server  may reside at a corporate data center. The client  comprises a client agent , and a computing environment . The computing environment  may execute or operate an application that accesses, processes or uses a data file. The computing environment , application and\/or data file may be delivered via the appliance  and\/or the server .","In some embodiments, the appliance  accelerates delivery of a computing environment , or any portion thereof, to a client . In one embodiment, the appliance  accelerates the delivery of the computing environment  by the application delivery system . For example, the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location, such as a branch office of the company. In another embodiment, the appliance  accelerates transport layer traffic between a client  and a server . The appliance  may provide acceleration techniques for accelerating any transport layer payload from a server  to a client , such as: 1) transport layer connection pooling, 2) transport layer connection multiplexing, 3) transport control protocol buffering, 4) compression and 5) caching. In some embodiments, the appliance  provides load balancing of servers  in responding to requests from clients . In other embodiments, the appliance  acts as a proxy or access server to provide access to the one or more servers . In another embodiment, the appliance  provides a secure virtual private network connection from a first network  of the client  to the second network \u2032 of the server , such as an SSL VPN connection. It yet other embodiments, the appliance  provides application firewall security, control and management of the connection and communications between a client  and a server .","In some embodiments, the application delivery management system  provides application delivery techniques to deliver a computing environment to a desktop of a user, remote or otherwise, based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques, a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment, the application delivery system  may reside or execute on a server . In another embodiment, the application delivery system  may reside or execute on a plurality of servers -. In some embodiments, the application delivery system  may execute in a server farm . In one embodiment, the server  executing the application delivery system  may also store or provide the application and data file. In another embodiment, a first set of one or more servers  may execute the application delivery system , and a different server may store or provide the application and data file. In some embodiments, each of the application delivery system , the application, and data file may reside or be located on different servers. In yet another embodiment, any portion of the application delivery system  may reside, execute or be stored on or distributed to the appliance , or a plurality of appliances.","The client  may include a computing environment  for executing an application that uses or processes a data file. The client  via networks , \u2032 and appliance  may request an application and data file from the server . In one embodiment, the appliance  may forward a request from the client  to the server . For example, the client  may not have the application and data file stored or accessible locally. In response to the request, the application delivery system  and\/or server  may deliver the application and data file to the client . For example, in one embodiment, the server  may transmit the application as an application stream to operate in computing environment  on client .","In some embodiments, the application delivery system  comprises any portion of the Citrix Access Suite\u2122 by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server\u2122 and\/or any of the Microsoft\u00ae Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application delivery system  may deliver one or more applications to clients  or users via a remote-display protocol or otherwise via remote-based or server-based computing. In another embodiment, the application delivery system  may deliver one or more applications to clients or users via steaming of the application.","In one embodiment, the application delivery system  includes a policy engine  for controlling and managing the access to, selection of application execution methods and the delivery of applications. In some embodiments, the policy engine  determines the one or more applications a user or client  may access. In another embodiment, the policy engine  determines how the application should be delivered to the user or client , e.g., the method of execution. In some embodiments, the application delivery system  provides a plurality of delivery techniques from which to select a method of application execution, such as a server-based computing, streaming or delivering the application locally to the client  for local execution.","In one embodiment, a client  requests execution of an application program and the application delivery system  comprising a server  selects a method of executing the application program. In some embodiments, the server  receives credentials from the client . In another embodiment, the server  receives a request for an enumeration of available applications from the client . In one embodiment, in response to the request or receipt of credentials, the application delivery system  enumerates a plurality of application programs available to the client . The application delivery system  receives a request to execute an enumerated application. The application delivery system  selects one of a predetermined number of methods for executing the enumerated application, for example, responsive to a policy of a policy engine. The application delivery system  may select a method of execution of the application enabling the client  to receive application-output data generated by execution of the application program on a server . The application delivery system  may select a method of execution of the application enabling the local machine  to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment, the application delivery system  may select a method of execution of the application to stream the application via the network  to the client .","A client  may execute, operate or otherwise provide an application, which can be any type and\/or form of software, program, or executable instructions such as any type and\/or form of web browser, web-based client, client-server application, a thin-client computing client, an ActiveX control, or a Java applet, or any other type and\/or form of executable instructions capable of executing on client . In some embodiments, the application may be a server-based or a remote-based application executed on behalf of the client  on a server . In one embodiments the server  may display output to the client  using any thin-client or remote-display protocol, such as the Independent Computing Architecture (ICA) protocol manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. or the Remote Desktop Protocol (RDP) manufactured by the Microsoft Corporation of Redmond, Wash. The application can use any type of protocol and it can be, for example, an HTTP client, an FTP client, an Oscar client, or a Telnet client. In other embodiments, the application comprises any type of software related to VoIP communications, such as a soft IP telephone. In further embodiments, the application comprises any application related to real-time data communications, such as applications for streaming video and\/or audio.","In some embodiments, the server  or a server farm  may be running one or more applications, such as an application providing a thin-client computing or remote display presentation application. In one embodiment, the server  or server farm  executes as an application, any portion of the Citrix Access Suite\u2122 by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server\u2122, and\/or any of the Microsoft\u00ae Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application is an ICA client, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla. In other embodiments, the application includes a Remote Desktop (RDP) client, developed by Microsoft Corporation of Redmond, Wash. Also, the server  may run an application, which for example, may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond, Wash., a web or Internet server, or a desktop sharing server, or a collaboration server. In some embodiments, any of the applications may comprise any type of hosted service or products, such as GoToMeeting\u2122 provided by Citrix Online Division, Inc. of Santa Barbara, Calif., WebEx\u2122 provided by WebEx, Inc. of Santa Clara, Calif., or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond, Wash.","Still referring to , an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service  may include monitoring, measurement and\/or management software and\/or hardware, including data collection, aggregation, analysis, management and reporting. In one embodiment, the performance monitoring service  includes one or more monitoring agents . The monitoring agent  includes any software, hardware or combination thereof for performing monitoring, measurement and data collection activities on a device, such as a client , server  or an appliance , . In some embodiments, the monitoring agent  includes any type and form of script, such as Visual Basic script, or Javascript. In one embodiment, the monitoring agent  executes transparently to any application and\/or user of the device. In some embodiments, the monitoring agent  is installed and operated unobtrusively to the application or client. In yet another embodiment, the monitoring agent  is installed and operated without any instrumentation for the application or device.","In some embodiments, the monitoring agent  monitors, measures and collects data on a predetermined frequency. In other embodiments, the monitoring agent  monitors, measures and collects data based upon detection of any type and form of event. For example, the monitoring agent  may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example, the monitoring agent  may collect data upon detection of any user input events, such as a mouse click. The monitoring agent  may report or provide any monitored, measured or collected data to the monitoring service . In one embodiment, the monitoring agent  transmits information to the monitoring service  according to a schedule or a predetermined frequency. In another embodiment, the monitoring agent  transmits information to the monitoring service  upon detection of an event.","In some embodiments, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any network resource or network infrastructure element, such as a client, server, server farm, appliance , appliance , or network connection. In one embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any transport layer connection, such as a TCP or UDP connection. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures network latency. In yet one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures bandwidth utilization.","In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures end-user response times. In some embodiments, the monitoring service  performs monitoring and performance measurement of an application. In another embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any session or connection to the application. In one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a browser. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of HTTP based transactions. In some embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of a Voice over IP (VoIP) application or session. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of a remote display protocol application, such as an ICA client or RDP client. In yet another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of any type and form of streaming media. In still a further embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a hosted application or a Software-As-A-Service (SaaS) delivery model.","In some embodiments, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of one or more transactions, requests or responses related to application. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures any portion of an application layer stack, such as any .NET or J2EE calls. In one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures database or SQL transactions. In yet another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures any method, function or application programming interface (API) call.","In one embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of a delivery of application and\/or data from a server to a client via one or more appliances, such as appliance  and\/or appliance . In some embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a virtualized application. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a streaming application. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a desktop application to a client and\/or the execution of the desktop application on the client. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a client\/server application.","In one embodiment, the monitoring service  and\/or monitoring agent  is designed and constructed to provide application performance management for the application delivery system . For example, the monitoring service  and\/or monitoring agent  may monitor, measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example, the monitoring service  and\/or monitoring agent  monitors individual ICA sessions. The monitoring service  and\/or monitoring agent  may measure the total and per session system resource usage, as well as application and networking performance. The monitoring service  and\/or monitoring agent  may identify the active servers for a given user and\/or user session. In some embodiments, the monitoring service  and\/or monitoring agent  monitors back-end connections between the application delivery system  and an application and\/or database server. The monitoring service  and\/or monitoring agent  may measure network latency, delay and volume per user-session or ICA session.","In some embodiments, the monitoring service  and\/or monitoring agent  measures and monitors memory usage for the application delivery system , such as total memory usage, per user session and\/or per process. In other embodiments, the monitoring service  and\/or monitoring agent  measures and monitors CPU usage the application delivery system , such as total CPU usage, per user session and\/or per process. In another embodiments, the monitoring service  and\/or monitoring agent  measures and monitors the time required to log-in to an application, a server, or the application delivery system, such as Citrix Presentation Server. In one embodiment, the monitoring service  and\/or monitoring agent  measures and monitors the duration a user is logged into an application, a server, or the application delivery system . In some embodiments, the monitoring service  and\/or monitoring agent  measures and monitors active and inactive session counts for an application, server or application delivery system session. In yet another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors user session latency.","In yet further embodiments, the monitoring service  and\/or monitoring agent  measures and monitors measures and monitors any type and form of server metrics. In one embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to system memory, CPU usage, and disk storage. In another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to page faults, such as page faults per second. In other embodiments, the monitoring service  and\/or monitoring agent  measures and monitors round-trip time metrics. In yet another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to application crashes, errors and\/or hangs.","In some embodiments, the monitoring service  and monitoring agent  includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In another embodiment, the performance monitoring service  and\/or monitoring agent  includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto, Calif. In one embodiment, the performance monitoring service  and\/or monitoring agent  includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco, Calif. In other embodiments, the performance monitoring service  and\/or monitoring agent  includes any portion of the business service management products, such as the BMC Performance Manager and Patrol products, manufactured by BMC Software, Inc. of Houston, Tex.","The client , server , and appliance  may be deployed as and\/or executed on any type and form of computing device, such as a computer, network device or appliance capable of communicating on any type and form of network and performing the operations described herein.  depict block diagrams of a computing device  useful for practicing an embodiment of the client , server  or appliance . As shown in , each computing device  includes a central processing unit , and a main memory unit . As shown in , a computing device  may include a visual display device , a keyboard  and\/or a pointing device , such as a mouse. Each computing device  may also include additional optional elements, such as one or more input\/output devices -(generally referred to using reference numeral ), and a cache memory  in communication with the central processing unit .","The central processing unit  is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments, the central processing unit is provided by a microprocessor unit, such as: those manufactured by Intel Corporation of Mountain View, Calif.; those manufactured by Motorola Corporation of Schaumburg, Ill.; those manufactured by Transmeta Corporation of Santa Clara, Calif.; the RS\/6000 processor, those manufactured by International Business Machines of White Plains, N.Y.; or those manufactured by Advanced Micro Devices of Sunnyvale, Calif. The computing device  may be based on any of these processors, or any other processor capable of operating as described herein.","Main memory unit  may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor , such as Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM), Dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM). The main memory  may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein. In the embodiment shown in , the processor  communicates with main memory  via a system bus  (described in more detail below).  depicts an embodiment of a computing device  in which the processor communicates directly with main memory  via a memory port . For example, in  the main memory  may be DRDRAM.",{"@attributes":{"id":"p-0075","num":"0083"},"figref":["FIG. 1F","FIG. 1F","FIG. 1F","FIG. 1F"],"b":["101","140","101","140","150","140","122","101","130","150","101","130","124","101","124","100","101","130","101","130","130"],"i":["b ","b ","a "]},"The computing device  may support any suitable installation device , such as a floppy disk drive for receiving floppy disks such as 3.5-inch, 5.25-inch disks or ZIP disks, a CD-ROM drive, a CD-R\/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs such as any client agent , or portion thereof. The computing device  may further comprise a storage device , such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs such as any program related to the client agent . Optionally, any of the installation devices  could also be used as the storage device . Additionally, the operating system and the software can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX\u00ae, a bootable CD for GNU\/Linux that is available as a GNU\/Linux distribution from knoppix.net.","Furthermore, the computing device  may include a network interface  to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. The network interface  may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device  to any type of network capable of communication and performing the operations described herein.","A wide variety of I\/O devices -may be present in the computing device . Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets. Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers. The I\/O devices  may be controlled by an I\/O controller  as shown in . The I\/O controller may control one or more I\/O devices such as a keyboard  and a pointing device , e.g., a mouse or optical pen. Furthermore, an I\/O device may also provide storage  and\/or an installation medium  for the computing device . In still other embodiments, the computing device  may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif.","In some embodiments, the computing device  may comprise or be connected to multiple display devices -, which each may be of the same or different type and\/or form. As such, any of the I\/O devices -and\/or the I\/O controller  may comprise any type and\/or form of suitable hardware, software, or combination of hardware and software to support, enable or provide for the connection and use of multiple display devices -by the computing device . For example, the computing device  may include any type and\/or form of video adapter, video card, driver, and\/or library to interface, communicate, connect or otherwise use the display devices -. In one embodiment, a video adapter may comprise multiple connectors to interface to multiple display devices -. In other embodiments, the computing device  may include multiple video adapters, with each video adapter connected to one or more of the display devices -. In some embodiments, any portion of the operating system of the computing device  may be configured for using multiple displays -. In other embodiments, one or more of the display devices -may be provided by one or more other computing devices, such as computing devices and connected to the computing device , for example, via a network. These embodiments may include any type of software designed and constructed to use another computer's display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device  may be configured to have multiple display devices -","In further embodiments, an I\/O device  may be a bridge  between the system bus  and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire 800 bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI\/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus.","A computing device  of the sort depicted in  typically operate under the control of operating systems, which control scheduling of tasks and access to system resources. The computing device  can be running any operating system such as any of the versions of the Microsoft\u00ae Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS\u00ae for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, and WINDOWS XP, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MacOS, manufactured by Apple Computer of Cupertino, Calif.; OS\/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, or any type and\/or form of a Unix operating system, among others.","In other embodiments, the computing device  may have different processors, operating systems, and input devices consistent with the device. For example, in one embodiment the computer  is a Treo 180, 270, 1060, 600 or 650 smart phone manufactured by Palm, Inc. In this embodiment, the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five-way navigator device. Moreover, the computing device  can be any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","As shown in , the computing device  may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data. In some embodiments, the computing device  may comprise a parallel processor with one or more cores. In one of these embodiments, the computing device  is a shared memory parallel device, with multiple processors and\/or multiple processor cores, accessing all available memory as a single global address space. In another of these embodiments, the computing device  is a distributed memory parallel device with multiple processors each accessing local memory only. In still another of these embodiments, the computing device  has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors. In still even another of these embodiments, the computing device , such as a multi-core microprocessor, combines two or more independent processors into a single package, often a single integrated circuit (IC). In yet another of these embodiments, the computing device  includes a chip having a CELL BROADBAND ENGINE architecture and including a Power processor element and a plurality of synergistic processing elements, the Power processor element and the plurality of synergistic processing elements linked together by an internal high speed bus, which may be referred to as an element interconnect bus.","In some embodiments, the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data (SIMD). In other embodiments, the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data (MIMD). In still other embodiments, the processor may use any combination of SIMD and MIMD cores in a single device.","In some embodiments, the computing device  may comprise a graphics processing unit. In one of these embodiments, depicted in , the computing device  includes at least one central processing unit  and at least one graphics processing unit. In another of these embodiments, the computing device  includes at least one parallel processing unit and at least one graphics processing unit. In still another of these embodiments, the computing device  includes a plurality of processing units of any type, one of the plurality of processing units comprising a graphics processing unit.","In some embodiments, a first computing device executes an application on behalf of a user of a client computing device . In other embodiments, a computing device executes a virtual machine, which provides an execution session within which applications execute on behalf of a user or a client computing devices . In one of these embodiments, the execution session is a hosted desktop session. In another of these embodiments, the computing device  executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments, the execution session provides access to a computing environment, which may comprise one or more of: an application, a plurality of applications, a desktop application, and a desktop session in which one or more applications may execute.","B. Appliance Architecture",{"@attributes":{"id":"p-0087","num":"0095"},"figref":["FIG. 2A","FIG. 2A","FIG. 2"],"b":["200","200","200","206","202","204"]},"Hardware layer  provides the hardware elements upon which programs and services within kernel space  and user space  are executed. Hardware layer  also provides the structures and elements which allow programs and services within kernel space  and user space  to communicate data both internally and externally with respect to appliance . As shown in , the hardware layer  includes a processing unit  for executing software programs and services, a memory  for storing software and data, network ports  for transmitting and receiving data over a network, and an encryption processor  for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments, the central processing unit  may perform the functions of the encryption processor  in a single processor. Additionally, the hardware layer  may comprise multiple processors for each of the processing unit  and the encryption processor . The processor  may include any of the processors  described above in connection with . For example, in one embodiment, the appliance  comprises a first processor  and a second processor \u2032. In other embodiments, the processor  or \u2032 comprises a multi-core processor.","Although the hardware layer  of appliance  is generally illustrated with an encryption processor , processor  may be a processor for performing functions related to any encryption protocol, such as the Secure Socket Layer (SSL) or Transport Layer Security (TLS) protocol. In some embodiments, the processor  may be a general purpose processor (GPP), and in further embodiments, may have executable instructions for performing processing of any security related protocol.","Although the hardware layer  of appliance  is illustrated with certain elements in , the hardware portions or components of appliance  may comprise any type and form of elements, hardware or software, of a computing device, such as the computing device  illustrated and discussed herein in conjunction with . In some embodiments, the appliance  may comprise a server, gateway, router, switch, bridge or other type of computing or network device, and have any hardware and\/or software elements associated therewith.","The operating system of appliance  allocates, manages, or otherwise segregates the available system memory into kernel space  and user space . In example software architecture , the operating system may be any type and\/or form of Unix operating system although the invention is not so limited. As such, the appliance  can be running any operating system such as any of the versions of the Microsoft\u00ae Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS\u00ae for Macintosh computers, any embedded operating system, any network operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices or network devices, or any other operating system capable of running on the appliance  and performing the operations described herein.","The kernel space  is reserved for running the kernel , including any device drivers, kernel extensions or other kernel related software. As known to those skilled in the art, the kernel  is the core of the operating system, and provides access, control, and management of resources and hardware-related elements of the application . In accordance with an embodiment of the appliance , the kernel space  also includes a number of network services or processes working in conjunction with a cache manager , sometimes also referred to as the integrated cache, the benefits of which are described in detail further herein. Additionally, the embodiment of the kernel  will depend on the embodiment of the operating system installed, configured, or otherwise used by the device .","In one embodiment, the device  comprises one network stack , such as a TCP\/IP based stack, for communicating with the client  and\/or the server . In one embodiment, the network stack  is used to communicate with a first network, such as network , and a second network . In some embodiments, the device  terminates a first transport layer connection, such as a TCP connection of a client , and establishes a second transport layer connection to a server  for use by the client , e.g., the second transport layer connection is terminated at the appliance  and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments, the device  may comprise multiple network stacks, for example  and \u2032, and the first transport layer connection may be established or terminated at one network stack , and the second transport layer connection on the second network stack \u2032. For example, one network stack may be for receiving and transmitting network packet on a first network, and another network stack for receiving and transmitting network packets on a second network. In one embodiment, the network stack  comprises a buffer  for queuing one or more network packets for transmission by the appliance .","As shown in , the kernel space  includes the cache manager , a high-speed layer 2-7 integrated packet engine , an encryption engine , a policy engine  and multi-protocol compression logic . Running these components or processes , , ,  and  in kernel space  or kernel mode instead of the user space  improves the performance of each of these components, alone and in combination. Kernel operation means that these components or processes , , ,  and  run in the core address space of the operating system of the device . For example, running the encryption engine  in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel, thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example, data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode, such as from a kernel level data structure to a user level data structure. In another aspect, the number of context switches between kernel mode and user mode are also reduced. Additionally, synchronization of and communications between any of the components or processes , , ,  and  can be performed more efficiently in the kernel space .","In some embodiments, any portion of the components , , ,  and  may run or operate in the kernel space , while other portions of these components , , ,  and  may run or operate in user space . In one embodiment, the appliance  uses a kernel-level data structure providing access to any portion of one or more network packets, for example, a network packet comprising a request from a client  or a response from a server . In some embodiments, the kernel-level data structure may be obtained by the packet engine  via a transport layer driver interface or filter to the network stack . The kernel-level data structure may comprise any interface and\/or data accessible via the kernel space  related to the network stack , network traffic or packets received or transmitted by the network stack . In other embodiments, the kernel-level data structure may be used by any of the components or processes , , ,  and  to perform the desired operation of the component or process. In one embodiment, a component , , ,  and  is running in kernel mode  when using the kernel-level data structure, while in another embodiment, the component , , ,  and  is running in user mode when using the kernel-level data structure. In some embodiments, the kernel-level data structure may be copied or passed to a second kernel-level data structure, or any desired user-level data structure.","The cache manager  may comprise software, hardware or any combination of software and hardware to provide cache access, control and management of any type and form of content, such as objects or dynamically generated objects served by the originating servers . The data, objects or content processed and stored by the cache manager  may comprise data in any format, such as a markup language, or communicated via any protocol. In some embodiments, the cache manager  duplicates original data stored elsewhere or data previously computed, generated or transmitted, in which the original data may require longer access time to fetch, compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element, future use can be made by accessing the cached copy rather than refetching or recomputing the original data, thereby reducing the access time. In some embodiments, the cache memory element may comprise a data object in memory  of device . In other embodiments, the cache memory element may comprise memory having a faster access time than memory . In another embodiment, the cache memory element may comprise any type and form of storage element of the device , such as a portion of a hard disk. In some embodiments, the processing unit  may provide cache memory for use by the cache manager . In yet further embodiments, the cache manager  may use any portion and combination of memory, storage, or the processing unit for caching data, objects, and other content.","Furthermore, the cache manager  includes any logic, functions, rules, or operations to perform any embodiments of the techniques of the appliance  described herein. For example, the cache manager  includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client  or server . In some embodiments, the cache manager  may operate as a program, service, process or task executing in the kernel space , and in other embodiments, in the user space . In one embodiment, a first portion of the cache manager  executes in the user space  while a second portion executes in the kernel space . In some embodiments, the cache manager  can comprise any type of general purpose processor (GPP), or any other type of integrated circuit, such as a Field Programmable Gate Array (FPGA), Programmable Logic Device (PLD), or Application Specific Integrated Circuit (ASIC).","The policy engine  may include, for example, an intelligent statistical engine or other programmable application(s). In one embodiment, the policy engine  provides a configuration mechanism to allow a user to identify, specify, define or configure a caching policy. Policy engine , in some embodiments, also has access to memory to support data structures such as lookup tables or hash tables to enable user-selected caching policy decisions. In other embodiments, the policy engine  may comprise any logic, rules, functions or operations to determine and provide access, control and management of objects, data or content being cached by the appliance  in addition to access, control and management of security, network traffic, network access, compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.","The encryption engine  comprises any logic, business rules, functions or operations for handling the processing of any security related protocol, such as SSL or TLS, or any function related thereto. For example, the encryption engine  encrypts and decrypts network packets, or any portion thereof, communicated via the appliance . The encryption engine  may also setup or establish SSL or TLS connections on behalf of the client -, server -, or appliance . As such, the encryption engine  provides offloading and acceleration of SSL processing. In one embodiment, the encryption engine  uses a tunneling protocol to provide a virtual private network between a client -and a server -. In some embodiments, the encryption engine  is in communication with the Encryption processor . In other embodiments, the encryption engine  comprises executable instructions running on the Encryption processor .","The multi-protocol compression engine  comprises any logic, business rules, function or operations for compressing one or more protocols of a network packet, such as any of the protocols used by the network stack  of the device . In one embodiment, multi-protocol compression engine  compresses bi-directionally between clients -and servers -any TCP\/IP based protocol, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In other embodiments, multi-protocol compression engine  provides compression of Hypertext Markup Language (HTML) based protocols and in some embodiments, provides compression of any markup languages, such as the Extensible Markup Language (XML). In one embodiment, the multi-protocol compression engine  provides compression of any high-performance protocol, such as any protocol designed for appliance  to appliance  communications. In another embodiment, the multi-protocol compression engine  compresses any payload of or any communication using a modified transport control protocol, such as Transaction TCP (T\/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol.","As such, the multi-protocol compression engine  accelerates performance for users accessing applications via desktop clients, e.g., Microsoft Outlook and non-Web thin clients, such as any client launched by popular enterprise applications like Oracle, SAP and Siebel, and even mobile clients, such as the Pocket PC. In some embodiments, the multi-protocol compression engine  by executing in the kernel mode  and integrating with packet processing engine  accessing the network stack  is able to compress any of the protocols carried by the TCP\/IP protocol, such as any application layer protocol.","High speed layer 2-7 integrated packet engine , also generally referred to as a packet processing engine or packet engine, is responsible for managing the kernel-level processing of packets received and transmitted by appliance  via network ports . The high speed layer 2-7 integrated packet engine  may comprise a buffer for queuing one or more network packets during processing, such as for receipt of a network packet or transmission of a network packet. Additionally, the high speed layer 2-7 integrated packet engine  is in communication with one or more network stacks  to send and receive network packets via network ports . The high speed layer 2-7 integrated packet engine  works in conjunction with encryption engine , cache manager , policy engine  and multi-protocol compression logic . In particular, encryption engine  is configured to perform SSL processing of packets, policy engine  is configured to perform functions related to traffic management such as request-level content switching and request-level cache redirection, and multi-protocol compression logic  is configured to perform functions related to compression and decompression of data.","The high speed layer 2-7 integrated packet engine  includes a packet processing timer . In one embodiment, the packet processing timer  provides one or more time intervals to trigger the processing of incoming, i.e., received, or outgoing, i.e., transmitted, network packets. In some embodiments, the high speed layer 2-7 integrated packet engine  processes network packets responsive to the timer . The packet processing timer  provides any type and form of signal to the packet engine  to notify, trigger, or communicate a time related event, interval or occurrence. In many embodiments, the packet processing timer  operates in the order of milliseconds, such as for example 100 ms, 50 ms or 25 ms. For example, in some embodiments, the packet processing timer  provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2-7 integrated packet engine  at a 10 ms time interval, while in other embodiments, at a 5 ms time interval, and still yet in further embodiments, as short as a 3, 2, or 1 ms time interval. The high speed layer 2-7 integrated packet engine  may be interfaced, integrated or in communication with the encryption engine , cache manager , policy engine  and multi-protocol compression engine  during operation. As such, any of the logic, functions, or operations of the encryption engine , cache manager , policy engine  and multi-protocol compression logic  may be performed responsive to the packet processing timer  and\/or the packet engine . Therefore, any of the logic, functions, or operations of the encryption engine , cache manager , policy engine  and multi-protocol compression logic  may be performed at the granularity of time intervals provided via the packet processing timer , for example, at a time interval of less than or equal to 10 ms. For example, in one embodiment, the cache manager  may perform invalidation of any cached objects responsive to the high speed layer 2-7 integrated packet engine  and\/or the packet processing timer . In another embodiment, the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer , such as at every 10 ms.","In contrast to kernel space , user space  is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space  directly and uses service calls in order to access kernel services. As shown in , user space  of appliance  includes a graphical user interface (GUI) , a command line interface (CLI) , shell services , health monitoring program , and daemon services . GUI  and CLI  provide a means by which a system administrator or other user can interact with and control the operation of appliance , such as via the operating system of the appliance . The GUI  or CLI  can comprise code running in user space  or kernel space . The GUI  may be any type and form of graphical user interface and may be presented via text, graphical or otherwise, by any type of program or application, such as a browser. The CLI  may be any type and form of command line or text-based interface, such as a command line provided by the operating system. For example, the CLI  may comprise a shell, which is a tool to enable users to interact with the operating system. In some embodiments, the CLI  may be provided via a bash, csh, tcsh, or ksh type shell. The shell services  comprises the programs, services, tasks, processes or executable instructions to support interaction with the appliance  or operating system by a user via the GUI  and\/or CLI .","Health monitoring program  is used to monitor, check, report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program  comprises one or more programs, services, tasks, processes or executable instructions to provide logic, rules, functions or operations for monitoring any activity of the appliance . In some embodiments, the health monitoring program  intercepts and inspects any network traffic passed via the appliance . In other embodiments, the health monitoring program  interfaces by any suitable means and\/or mechanisms with one or more of the following: the encryption engine , cache manager , policy engine , multi-protocol compression logic , packet engine , daemon services , and shell services . As such, the health monitoring program  may call any application programming interface (API) to determine a state, status, or health of any portion of the appliance . For example, the health monitoring program  may ping or send a status inquiry on a periodic basis to check if a program, process, service or task is active and currently running In another example, the health monitoring program  may check any status, error or history logs provided by any program, process, service or task to determine any condition, status or error with any portion of the appliance .","Daemon services  are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments, a daemon service may forward the requests to other programs or processes, such as another daemon service  as appropriate. As known to those skilled in the art, a daemon service  may run unattended to perform continuous or periodic system wide functions, such as network control, or to perform any desired task. In some embodiments, one or more daemon services  run in the user space , while in other embodiments, one or more daemon services  run in the kernel space.","Referring now to , another embodiment of the appliance  is depicted. In brief overview, the appliance  provides one or more of the following services, functionality or operations: SSL VPN connectivity , switching\/load balancing , Domain Name Service resolution , acceleration  and an application firewall  for communications between one or more clients  and one or more servers . Each of the servers  may provide one or more network related services -(referred to as services ). For example, a server  may provide an http service . The appliance  comprises one or more virtual servers or virtual internet protocol servers, referred to as a vServer, VIP server, or just VIP -(also referred herein as vServer ). The vServer  receives, intercepts or otherwise processes communications between a client  and a server  in accordance with the configuration and operations of the appliance .","The vServer  may comprise software, hardware or any combination of software and hardware. The vServer  may comprise any type and form of program, service, task, process or executable instructions operating in user mode , kernel mode  or any combination thereof in the appliance . The vServer  includes any logic, functions, rules, or operations to perform any embodiments of the techniques described herein, such as SSL VPN , switching\/load balancing , Domain Name Service resolution , acceleration  and an application firewall . In some embodiments, the vServer  establishes a connection to a service  of a server . The service  may comprise any program, application, process, task or set of executable instructions capable of connecting to and communicating to the appliance , client  or vServer . For example, the service  may comprise a web server, http server, ftp, email or database server. In some embodiments, the service  is a daemon process or network driver for listening, receiving and\/or sending communications for an application, such as email, database or an enterprise application. In some embodiments, the service  may communicate on a specific IP address, or IP address and port.","In some embodiments, the vServer  applies one or more policies of the policy engine  to network communications between the client  and server . In one embodiment, the policies are associated with a vServer . In another embodiment, the policies are based on a user, or a group of users. In yet another embodiment, a policy is global and applies to one or more vServers -, and any user or group of users communicating via the appliance . In some embodiments, the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication, such as internet protocol address, port, protocol type, header or fields in a packet, or the context of the communication, such as user, group of the user, vServer , transport layer connection, and\/or identification or attributes of the client  or server .","In other embodiments, the appliance  communicates or interfaces with the policy engine  to determine authentication and\/or authorization of a remote user or a remote client  to access the computing environment , application, and\/or data file from a server . In another embodiment, the appliance  communicates or interfaces with the policy engine  to determine authentication and\/or authorization of a remote user or a remote client  to have the application delivery system  deliver one or more of the computing environment , application, and\/or data file. In yet another embodiment, the appliance  establishes a VPN or SSL VPN connection based on the policy engine's  authentication and\/or authorization of a remote user or a remote client  In one embodiment, the appliance  controls the flow of network traffic and communication sessions based on policies of the policy engine . For example, the appliance  may control the access to a computing environment , application or data file based on the policy engine .","In some embodiments, the vServer  establishes a transport layer connection, such as a TCP or UDP connection with a client  via the client agent . In one embodiment, the vServer  listens for and receives communications from the client . In other embodiments, the vServer  establishes a transport layer connection, such as a TCP or UDP connection with a client server . In one embodiment, the vServer  establishes the transport layer connection to an internet protocol address and port of a server  running on the server . In another embodiment, the vServer  associates a first transport layer connection to a client  with a second transport layer connection to the server . In some embodiments, a vServer  establishes a pool of transport layer connections to a server  and multiplexes client requests via the pooled transport layer connections.","In some embodiments, the appliance  provides a SSL VPN connection  between a client  and a server . For example, a client  on a first network  requests to establish a connection to a server  on a second network \u2032. In some embodiments, the second network \u2032 is not routable from the first network . In other embodiments, the client  is on a public network  and the server  is on a private network \u2032, such as a corporate network. In one embodiment, the client agent  intercepts communications of the client  on the first network , encrypts the communications, and transmits the communications via a first transport layer connection to the appliance . The appliance  associates the first transport layer connection on the first network  to a second transport layer connection to the server  on the second network . The appliance  receives the intercepted communication from the client agent , decrypts the communications, and transmits the communication to the server  on the second network  via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such, the appliance  provides an end-to-end secure transport layer connection for the client  between the two networks , \u2032.","In one embodiment, the appliance  hosts an intranet internet protocol or IntranetIP  address of the client  on the virtual private network . The client  has a local network identifier, such as an internet protocol (IP) address and\/or host name on the first network . When connected to the second network \u2032 via the appliance , the appliance  establishes, assigns or otherwise provides an IntranetIP address , which is a network identifier, such as IP address and\/or host name, for the client  on the second network \u2032. The appliance  listens for and receives on the second or private network \u2032 for any communications directed towards the client  using the client's established IntranetIP . In one embodiment, the appliance  acts as or on behalf of the client  on the second private network . For example, in another embodiment, a vServer  listens for and responds to communications to the IntranetIP  of the client . In some embodiments, if a computing device  on the second network \u2032 transmits a request, the appliance  processes the request as if it were the client . For example, the appliance  may respond to a ping to the client's IntranetIP . In another example, the appliance may establish a connection, such as a TCP or UDP connection, with computing device  on the second network  requesting a connection with the client's IntranetIP .","In some embodiments, the appliance  provides one or more of the following acceleration techniques  to communications between the client  and server : 1) compression; 2) decompression; 3) Transmission Control Protocol pooling; 4) Transmission Control Protocol multiplexing; 5) Transmission Control Protocol buffering; and 6) caching. In one embodiment, the appliance  relieves servers  of much of the processing load caused by repeatedly opening and closing transport layers connections to clients  by opening one or more transport layer connections with each server  and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as \u201cconnection pooling\u201d.","In some embodiments, in order to seamlessly splice communications from a client  to a server  via a pooled transport layer connection, the appliance  translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as \u201cconnection multiplexing\u201d. In some embodiments, no application layer protocol interaction is required. For example, in the case of an in-bound packet (that is, a packet received from a client ), the source network address of the packet is changed to that of an output port of appliance , and the destination network address is changed to that of the intended server. In the case of an outbound packet (that is, one received from a server ), the source network address is changed from that of the server  to that of an output port of appliance  and the destination address is changed from that of appliance  to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement numbers expected by the client  on the appliance's  transport layer connection to the client . In some embodiments, the packet checksum of the transport layer protocol is recalculated to account for these translations.","In another embodiment, the appliance  provides switching or load-balancing functionality  for communications between the client  and server . In some embodiments, the appliance  distributes traffic and directs client requests to a server  based on layer 4 or application-layer request data. In one embodiment, although the network layer or layer 2 of the network packet identifies a destination server , the appliance  determines the server  to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment, the health monitoring programs  of the appliance  monitor the health of servers to determine the server  for which to distribute a client's request. In some embodiments, if the appliance  detects a server  is not available or has a load over a predetermined threshold, the appliance  can direct or distribute client requests to another server .","In some embodiments, the appliance  acts as a Domain Name Service (DNS) resolver or otherwise provides resolution of a DNS request from clients . In some embodiments, the appliance intercepts a DNS request transmitted by the client . In one embodiment, the appliance  responds to a client's DNS request with an IP address of or hosted by the appliance . In this embodiment, the client  transmits network communication for the domain name to the appliance . In another embodiment, the appliance  responds to a client's DNS request with an IP address of or hosted by a second appliance \u2032. In some embodiments, the appliance  responds to a client's DNS request with an IP address of a server  determined by the appliance .","In yet another embodiment, the appliance  provides application firewall functionality  for communications between the client  and server . In one embodiment, the policy engine  provides rules for detecting and blocking illegitimate requests. In some embodiments, the application firewall  protects against denial of service (DoS) attacks. In other embodiments, the appliance inspects the content of intercepted requests to identify and block application-based attacks. In some embodiments, the rules\/policy engine  comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities, such as one or more of the following: 1) buffer overflow, 2) CGI-BIN parameter manipulation, 3) form\/hidden field manipulation, 4) forceful browsing, 5) cookie or session poisoning, 6) broken access control list (ACLs) or weak passwords, 7) cross-site scripting (XSS), 8) command injection, 9) SQL injection, 10) error triggering sensitive information leak, 11) insecure use of cryptography, 12) server misconfiguration, 13) back doors and debug options, 14) website defacement, 15) platform or operating systems vulnerabilities, and 16) zero-day exploits. In an embodiment, the application firewall  provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following: 1) required fields are returned, 2) no added field allowed, 3) read-only and hidden field enforcement, 4) drop-down list and radio button field conformance, and 5) form-field max-length enforcement. In some embodiments, the application firewall  ensures cookies are not modified. In other embodiments, the application firewall  protects against forceful browsing by enforcing legal URLs.","In still yet other embodiments, the application firewall  protects any confidential information contained in the network communication. The application firewall  may inspect or analyze any network communication in accordance with the rules or polices of the engine  to identify any confidential information in any field of the network packet. In some embodiments, the application firewall  identifies in the network communication one or more occurrences of a credit card number, password, social security number, name, patient code, contact information, and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences, in one embodiment, the application firewall  may take a policy action on the network communication, such as prevent transmission of the network communication. In another embodiment, the application firewall  may rewrite, remove or otherwise mask such identified occurrence or confidential information.","Still referring to , the appliance  may include a performance monitoring agent  as discussed above in conjunction with . In one embodiment, the appliance  receives the monitoring agent  from the monitoring service  or monitoring server  as depicted in . In some embodiments, the appliance  stores the monitoring agent  in storage, such as disk, for delivery to any client or server in communication with the appliance . For example, in one embodiment, the appliance  transmits the monitoring agent  to a client upon receiving a request to establish a transport layer connection. In other embodiments, the appliance  transmits the monitoring agent  upon establishing the transport layer connection with the client . In another embodiment, the appliance  transmits the monitoring agent  to the client upon intercepting or detecting a request for a web page. In yet another embodiment, the appliance  transmits the monitoring agent  to a client or a server in response to a request from the monitoring server . In one embodiment, the appliance  transmits the monitoring agent  to a second appliance \u2032 or appliance .","In other embodiments, the appliance  executes the monitoring agent . In one embodiment, the monitoring agent  measures and monitors the performance of any application, program, process, service, task or thread executing on the appliance . For example, the monitoring agent  may monitor and measure performance and operation of vServers A-N. In another embodiment, the monitoring agent  measures and monitors the performance of any transport layer connections of the appliance . In some embodiments, the monitoring agent  measures and monitors the performance of any user sessions traversing the appliance . In one embodiment, the monitoring agent  measures and monitors the performance of any virtual private network connections and\/or sessions traversing the appliance , such an SSL VPN session. In still further embodiments, the monitoring agent  measures and monitors the memory, CPU and disk usage and performance of the appliance . In yet another embodiment, the monitoring agent  measures and monitors the performance of any acceleration technique  performed by the appliance , such as SSL offloading, connection pooling and multiplexing, caching, and compression. In some embodiments, the monitoring agent  measures and monitors the performance of any load balancing and\/or content switching  performed by the appliance . In other embodiments, the monitoring agent  measures and monitors the performance of application firewall  protection and processing performed by the appliance .","C. Client Agent","Referring now to , an embodiment of the client agent  is depicted. The client  includes a client agent  for establishing and exchanging communications with the appliance  and\/or server  via a network . In brief overview, the client  operates on computing device  having an operating system with a kernel mode  and a user mode , and a network stack  with one or more layers -. The client  may have installed and\/or execute one or more applications. In some embodiments, one or more applications may communicate via the network stack  to a network . One of the applications, such as a web browser, may also include a first program . For example, the first program  may be used in some embodiments to install and\/or execute the client agent , or any portion thereof. The client agent  includes an interception mechanism, or interceptor , for intercepting network communications from the network stack  from the one or more applications.","The network stack  of the client  may comprise any type and form of software, or hardware, or any combinations thereof, for providing connectivity to and communications with a network. In one embodiment, the network stack  comprises a software implementation for a network protocol suite. The network stack  may comprise one or more network layers, such as any networks layers of the Open Systems Interconnection (OSI) communications model as those skilled in the art recognize and appreciate. As such, the network stack  may comprise any type and form of protocols for any of the following layers of the OSI model: 1) physical link layer, 2) data link layer, 3) network layer, 4) transport layer, 5) session layer, 6) presentation layer, and 7) application layer. In one embodiment, the network stack  may comprise a transport control protocol (TCP) over the network layer protocol of the internet protocol (IP), generally referred to as TCP\/IP. In some embodiments, the TCP\/IP protocol may be carried over the Ethernet protocol, which may comprise any of the family of IEEE wide-area-network (WAN) or local-area-network (LAN) protocols, such as those protocols covered by the IEEE 802.3. In some embodiments, the network stack  comprises any type and form of a wireless protocol, such as IEEE 802.11 and\/or mobile internet protocol.","In view of a TCP\/IP based network, any TCP\/IP based protocol may be used, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In another embodiment, the network stack  comprises any type and form of transport control protocol, such as a modified transport control protocol, for example a Transaction TCP (T\/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol. In other embodiments, any type and form of user datagram protocol (UDP), such as UDP over IP, may be used by the network stack , such as for voice communications or real-time data communications.","Furthermore, the network stack  may include one or more network drivers supporting the one or more layers, such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device  or as part of any network interface cards or other network access components of the computing device . In some embodiments, any of the network drivers of the network stack  may be customized, modified or adapted to provide a custom or modified portion of the network stack  in support of any of the techniques described herein. In other embodiments, the acceleration program  is designed and constructed to operate with or work in conjunction with the network stack  installed or otherwise provided by the operating system of the client .","The network stack  comprises any type and form of interfaces for receiving, obtaining, providing or otherwise accessing any information and data related to network communications of the client . In one embodiment, an interface to the network stack  comprises an application programming interface (API). The interface may also comprise any function call, hooking or filtering mechanism, event or call back mechanism, or any type of interfacing technique. The network stack  via the interface may receive or provide any type and form of data structure, such as an object, related to functionality or operation of the network stack . For example, the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments, the data structure comprises a portion of the network packet processed at a protocol layer of the network stack , such as a network packet of the transport layer. In some embodiments, the data structure  comprises a kernel-level data structure, while in other embodiments, the data structure  comprises a user-mode data structure. A kernel-level data structure may comprise a data structure obtained or related to a portion of the network stack  operating in kernel-mode , or a network driver or other software running in kernel-mode , or any data structure obtained or received by a service, process, task, thread or other executable instructions running or operating in kernel-mode of the operating system.","Additionally, some portions of the network stack  may execute or operate in kernel-mode , for example, the data link or network layer, while other portions execute or operate in user-mode , such as an application layer of the network stack . For example, a first portion of the network stack may provide user-mode access to the network stack  to an application while a second portion of the network stack  provides access to a network. In some embodiments, a first portion of the network stack may comprise one or more upper layers of the network stack , such as any of layers 5-7. In other embodiments, a second portion of the network stack  comprises one or more lower layers, such as any of layers 1-4. Each of the first portion and second portion of the network stack  may comprise any portion of the network stack , at any one or more network layers, in user-mode , kernel-mode, , or combinations thereof, or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user-mode  and kernel-mode .","The interceptor  may comprise software, hardware, or any combination of software and hardware. In one embodiment, the interceptor  intercept a network communication at any point in the network stack , and redirects or transmits the network communication to a destination desired, managed or controlled by the interceptor  or client agent . For example, the interceptor  may intercept a network communication of a network stack  of a first network and transmit the network communication to the appliance  for transmission on a second network . In some embodiments, the interceptor  comprises any type interceptor  comprises a driver, such as a network driver constructed and designed to interface and work with the network stack . In some embodiments, the client agent  and\/or interceptor  operates at one or more layers of the network stack , such as at the transport layer. In one embodiment, the interceptor  comprises a filter driver, hooking mechanism, or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack, such as via the transport driver interface (TDI). In some embodiments, the interceptor  interfaces to a first protocol layer, such as the transport layer and another protocol layer, such as any layer above the transport protocol layer, for example, an application protocol layer. In one embodiment, the interceptor  may comprise a driver complying with the Network Driver Interface Specification (NDIS), or a NDIS driver. In another embodiment, the interceptor  may comprise a mini-filter or a mini-port driver. In one embodiment, the interceptor , or portion thereof, operates in kernel-mode . In another embodiment, the interceptor , or portion thereof, operates in user-mode . In some embodiments, a portion of the interceptor  operates in kernel-mode  while another portion of the interceptor  operates in user-mode . In other embodiments, the client agent  operates in user-mode  but interfaces via the interceptor  to a kernel-mode driver, process, service, task or portion of the operating system, such as to obtain a kernel-level data structure . In further embodiments, the interceptor  is a user-mode application or program, such as application.","In one embodiment, the interceptor  intercepts any transport layer connection requests. In these embodiments, the interceptor  execute transport layer application programming interface (API) calls to set the destination information, such as destination IP address and\/or port to a desired location for the location. In this manner, the interceptor  intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor  or client agent . In one embodiment, the interceptor  sets the destination information for the connection to a local IP address and port of the client  on which the client agent  is listening. For example, the client agent  may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments, the client agent  then communicates the redirected transport layer communication to the appliance .","In some embodiments, the interceptor  intercepts a Domain Name Service (DNS) request. In one embodiment, the client agent  and\/or interceptor  resolves the DNS request. In another embodiment, the interceptor transmits the intercepted DNS request to the appliance  for DNS resolution. In one embodiment, the appliance  resolves the DNS request and communicates the DNS response to the client agent . In some embodiments, the appliance  resolves the DNS request via another appliance \u2032 or a DNS server .","In yet another embodiment, the client agent  may comprise two agents  and \u2032. In one embodiment, a first agent  may comprise an interceptor  operating at the network layer of the network stack . In some embodiments, the first agent  intercepts network layer requests such as Internet Control Message Protocol (ICMP) requests (e.g., ping and traceroute). In other embodiments, the second agent \u2032 may operate at the transport layer and intercept transport layer communications. In some embodiments, the first agent  intercepts communications at one layer of the network stack  and interfaces with or communicates the intercepted communication to the second agent \u2032.","The client agent  and\/or interceptor  may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example, in one embodiment, the interceptor  operates or interfaces with the transport layer of the network stack  transparently to any protocol layer below the transport layer, such as the network layer, and any protocol layer above the transport layer, such as the session, presentation or application layer protocols. This allows the other protocol layers of the network stack  to operate as desired and without modification for using the interceptor . As such, the client agent  and\/or interceptor  can interface with the transport layer to secure, optimize, accelerate, route or load-balance any communications provided via any protocol carried by the transport layer, such as any application layer protocol over TCP\/IP.","Furthermore, the client agent  and\/or interceptor may operate at or interface with the network stack  in a manner transparent to any application, a user of the client , and any other computing device, such as a server, in communications with the client . The client agent  and\/or interceptor  may be installed and\/or executed on the client  in a manner without modification of an application. In some embodiments, the user of the client  or a computing device in communications with the client  are not aware of the existence, execution or operation of the client agent  and\/or interceptor . As such, in some embodiments, the client agent  and\/or interceptor  is installed, executed, and\/or operated transparently to an application, user of the client , another computing device, such as a server, or any of the protocol layers above and\/or below the protocol layer interfaced to by the interceptor .","The client agent  includes an acceleration program , a streaming client , a collection agent , and\/or monitoring agent . In one embodiment, the client agent  comprises an Independent Computing Architecture (ICA) client, or any portion thereof, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla., and is also referred to as an ICA client. In some embodiments, the client  comprises an application streaming client  for streaming an application from a server  to a client . In some embodiments, the client agent  comprises an acceleration program  for accelerating communications between client  and server . In another embodiment, the client agent  includes a collection agent  for performing end-point detection\/scanning and collecting end-point information for the appliance  and\/or server .","In some embodiments, the acceleration program  comprises a client-side acceleration program for performing one or more acceleration techniques to accelerate, enhance or otherwise improve a client's communications with and\/or access to a server , such as accessing an application provided by a server . The logic, functions, and\/or operations of the executable instructions of the acceleration program  may perform one or more of the following acceleration techniques: 1) multi-protocol compression, 2) transport control protocol pooling, 3) transport control protocol multiplexing, 4) transport control protocol buffering, and 5) caching via a cache manager. Additionally, the acceleration program  may perform encryption and\/or decryption of any communications received and\/or transmitted by the client . In some embodiments, the acceleration program  performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally, the acceleration program  can perform compression on any of the protocols, or multiple-protocols, carried as a payload of a network packet of the transport layer protocol. The streaming client  comprises an application, program, process, service, task or executable instructions for receiving and executing a streamed application from a server . A server  may stream one or more application data files to the streaming client  for playing, executing or otherwise causing to be executed the application on the client . In some embodiments, the server  transmits a set of compressed or packaged application data files to the streaming client . In some embodiments, the plurality of application files are compressed and stored on a file server within an archive file such as a CAB, ZIP, SIT, TAR, JAR or other archive. In one embodiment, the server  decompresses, unpackages or unarchives the application files and transmits the files to the client . In another embodiment, the client  decompresses, unpackages or unarchives the application files. The streaming client  dynamically installs the application, or portion thereof, and executes the application. In one embodiment, the streaming client  may be an executable program. In some embodiments, the streaming client  may be able to launch another executable program.","The collection agent  comprises an application, program, process, service, task or executable instructions for identifying, obtaining and\/or collecting information about the client . In some embodiments, the appliance  transmits the collection agent  to the client  or client agent . The collection agent  may be configured according to one or more policies of the policy engine  of the appliance. In other embodiments, the collection agent  transmits collected information on the client  to the appliance . In one embodiment, the policy engine  of the appliance  uses the collected information to determine and provide access, authentication and authorization control of the client's connection to a network .","In one embodiment, the collection agent  comprises an end-point detection and scanning mechanism, which identifies and determines one or more attributes or characteristics of the client. For example, the collection agent  may identify and determine any one or more of the following client-side attributes: 1) the operating system an\/or a version of an operating system, 2) a service pack of the operating system, 3) a running service, 4) a running process, and 5) a file. The collection agent  may also identify and determine the presence or versions of any one or more of the following on the client: 1) antivirus software, 2) personal firewall software, 3) anti-spam software, and 4) internet security software. The policy engine  may have one or more policies based on any one or more of the attributes or characteristics of the client or client-side attributes.","In some embodiments, the client agent  includes a monitoring agent  as discussed in conjunction with . The monitoring agent  may be any type and form of script, such as Visual Basic or Java script. In one embodiment, the monitoring agent  monitors and measures performance of any portion of the client agent . For example, in some embodiments, the monitoring agent  monitors and measures performance of the acceleration program . In another embodiment, the monitoring agent  monitors and measures performance of the streaming client . In other embodiments, the monitoring agent  monitors and measures performance of the collection agent . In still another embodiment, the monitoring agent  monitors and measures performance of the interceptor . In some embodiments, the monitoring agent  monitors and measures any resource of the client , such as memory, CPU and disk.","The monitoring agent  may monitor and measure performance of any application of the client. In one embodiment, the monitoring agent  monitors and measures performance of a browser on the client . In some embodiments, the monitoring agent  monitors and measures performance of any application delivered via the client agent . In other embodiments, the monitoring agent  measures and monitors end user response times for an application, such as web-based or HTTP response times. The monitoring agent  may monitor and measure performance of an ICA or RDP client. In another embodiment, the monitoring agent  measures and monitors metrics for a user session or application session. In some embodiments, monitoring agent  measures and monitors an ICA or RDP session. In one embodiment, the monitoring agent  measures and monitors the performance of the appliance  in accelerating delivery of an application and\/or data to the client .","In some embodiments and still referring to , a first program  may be used to install and\/or execute the client agent , or portion thereof, such as the interceptor , automatically, silently, transparently, or otherwise. In one embodiment, the first program  comprises a plugin component, such an ActiveX control or Java control or script that is loaded into and executed by an application. For example, the first program comprises an ActiveX control loaded and run by a web browser application, such as in the memory space or context of the application. In another embodiment, the first program  comprises a set of executable instructions loaded into and run by the application, such as a browser. In one embodiment, the first program  comprises a designed and constructed program to install the client agent . In some embodiments, the first program  obtains, downloads, or receives the client agent  via the network from another computing device. In another embodiment, the first program  is an installer program or a plug and play manager for installing programs, such as network drivers, on the operating system of the client .","D. Systems and Methods for Providing Virtualized Application Delivery Controller","Referring now to , a block diagram depicts one embodiment of a virtualization environment . In brief overview, a computing device  includes a hypervisor layer, a virtualization layer, and a hardware layer. The hypervisor layer includes a hypervisor  (also referred to as a virtualization manager) that allocates and manages access to a number of physical resources in the hardware layer (e.g., the processor(s) , and disk(s) ) by at least one virtual machine executing in the virtualization layer. The virtualization layer includes at least one operating system  and a plurality of virtual resources allocated to the at least one operating system . Virtual resources may include, without limitation, a plurality of virtual processors , , (generally ), and virtual disks , , (generally ) as well as virtual resources such as virtual memory and virtual network interfaces. The plurality of virtual resources and the operating system  may be referred to as a virtual machine . A virtual machine  may include a control operating system  in communication with the hypervisor  and used to execute applications for managing and configuring other virtual machines on the computing device .","In greater detail, a hypervisor  may provide virtual resources to an operating system in any manner which simulates the operating system having access to a physical device. A hypervisor  may provide virtual resources to any number of guest operating systems , (generally ). In some embodiments, a computing device  executes one or more types of hypervisors. In these embodiments, hypervisors may be used to emulate virtual hardware, partition physical hardware, virtualize physical hardware, and execute virtual machines that provide access to computing environments. Hypervisors may include those manufactured by VMWare, Inc., of Palo Alto, Calif.; the XEN hypervisor, an open source product whose development is overseen by the open source Xen.org community; HyperV, VirtualServer or virtual PC hypervisors provided by Microsoft, or others. In some embodiments, a computing device  executing a hypervisor that creates a virtual machine platform on which guest operating systems may execute is referred to as a host server. In one of these embodiments, for example, the computing device  is a XEN SERVER provided by Citrix Systems, Inc., of Fort Lauderdale, Fla.","In some embodiments, a hypervisor  executes within an operating system executing on a computing device. In one of these embodiments, a computing device executing an operating system and a hypervisor  may be said to have a host operating system (the operating system executing on the computing device), and a guest operating system (an operating system executing within a computing resource partition provided by the hypervisor ). In other embodiments, a hypervisor  interacts directly with hardware on a computing device, instead of executing on a host operating system. In one of these embodiments, the hypervisor  may be said to be executing on \u201cbare metal,\u201d referring to the hardware comprising the computing device.","In some embodiments, a hypervisor  may create a virtual machine -(generally ) in which an operating system  executes. In one of these embodiments, for example, the hypervisor  loads a virtual machine image to create a virtual machine . In another of these embodiments, the hypervisor  executes an operating system  within the virtual machine . In still another of these embodiments, the virtual machine  executes an operating system .","In some embodiments, the hypervisor  controls processor scheduling and memory partitioning for a virtual machine  executing on the computing device . In one of these embodiments, the hypervisor  controls the execution of at least one virtual machine . In another of these embodiments, the hypervisor  presents at least one virtual machine  with an abstraction of at least one hardware resource provided by the computing device . In other embodiments, the hypervisor  controls whether and how physical processor capabilities are presented to the virtual machine .","A control operating system  may execute at least one application for managing and configuring the guest operating systems. In one embodiment, the control operating system  may execute an administrative application, such as an application including a user interface providing administrators with access to functionality for managing the execution of a virtual machine, including functionality for executing a virtual machine, terminating an execution of a virtual machine, or identifying a type of physical resource for allocation to the virtual machine. In another embodiment, the hypervisor  executes the control operating system  within a virtual machine  created by the hypervisor . In still another embodiment, the control operating system  executes in a virtual machine  that is authorized to directly access physical resources on the computing device . In some embodiments, a control operating system on a computing device may exchange data with a control operating system on a computing device , via communications between a hypervisor and a hypervisor . In this way, one or more computing devices  may exchange data with one or more of the other computing devices  regarding processors and other physical resources available in a pool of resources. In one of these embodiments, this functionality allows a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In another of these embodiments, multiple hypervisors manage one or more of the guest operating systems executed on one of the computing devices .","In one embodiment, the control operating system  executes in a virtual machine  that is authorized to interact with at least one guest operating system . In another embodiment, a guest operating system  communicates with the control operating system  via the hypervisor  in order to request access to a disk or a network. In still another embodiment, the guest operating system  and the control operating system  may communicate via a communication channel established by the hypervisor , such as, for example, via a plurality of shared memory pages made available by the hypervisor .","In some embodiments, the control operating system  includes a network back-end driver for communicating directly with networking hardware provided by the computing device . In one of these embodiments, the network back-end driver processes at least one virtual machine request from at least one guest operating system . In other embodiments, the control operating system  includes a block back-end driver for communicating with a storage element on the computing device . In one of these embodiments, the block back-end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .","In one embodiment, the control operating system  includes a tools stack . In another embodiment, a tools stack  provides functionality for interacting with the hypervisor , communicating with other control operating systems  (for example, on a second computing device ), or managing virtual machines , on the computing device . In another embodiment, the tools stack  includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments, at least one of the tools stack  and the control operating system  include a management API that provides an interface for remotely configuring and controlling virtual machines  running on a computing device . In other embodiments, the control operating system  communicates with the hypervisor  through the tools stack .","In one embodiment, the hypervisor  executes a guest operating system  within a virtual machine  created by the hypervisor . In another embodiment, the guest operating system  provides a user of the computing device  with access to resources within a computing environment. In still another embodiment, a resource includes a program, an application, a document, a file, a plurality of applications, a plurality of files, an executable program file, a desktop environment, a computing environment, or other resource made available to a user of the computing device . In yet another embodiment, the resource may be delivered to the computing device  via a plurality of access methods including, but not limited to, conventional installation directly on the computing device , delivery to the computing device  via a method for application streaming, delivery to the computing device  of output data generated by an execution of the resource on a second computing device \u2032 and communicated to the computing device  via a presentation layer protocol, delivery to the computing device  of output data generated by an execution of the resource via a virtual machine executing on a second computing device \u2032, or execution from a removable storage device connected to the computing device , such as a USB device, or via a virtual machine executing on the computing device  and generating output data. In some embodiments, the computing device  transmits output data generated by the execution of the resource to another computing device \u2032.","In one embodiment, the guest operating system , in conjunction with the virtual machine on which it executes, forms a fully-virtualized virtual machine which is not aware that it is a virtual machine; such a machine may be referred to as a \u201cDomain U HVM (Hardware Virtual Machine) virtual machine\u201d. In another embodiment, a fully-virtualized machine includes software emulating a Basic Input\/Output System (BIOS) in order to execute an operating system within the fully-virtualized machine. In still another embodiment, a fully-virtualized machine may include a driver that provides functionality by communicating with the hypervisor . In such an embodiment, the driver may be aware that it executes within a virtualized environment. In another embodiment, the guest operating system , in conjunction with the virtual machine on which it executes, forms a paravirtualized virtual machine, which is aware that it is a virtual machine; such a machine may be referred to as a \u201cDomain U PV virtual machine\u201d. In another embodiment, a paravirtualized machine includes additional drivers that a fully-virtualized machine does not include. In still another embodiment, the paravirtualized machine includes the network back-end driver and the block back-end driver included in a control operating system , as described above.","Referring now to , a block diagram depicts one embodiment of a plurality of networked computing devices in a system in which at least one physical host executes a virtual machine. In brief overview, the system includes a management component  and a hypervisor . The system includes a plurality of computing devices , a plurality of virtual machines , a plurality of hypervisors , a plurality of management components referred to variously as tools stacks  or management components , and a physical resource , . The plurality of physical machines  may each be provided as computing devices , described above in connection with  and A.","In greater detail, a physical disk  is provided by a computing device  and stores at least a portion of a virtual disk . In some embodiments, a virtual disk  is associated with a plurality of physical disks . In one of these embodiments, one or more computing devices  may exchange data with one or more of the other computing devices  regarding processors and other physical resources available in a pool of resources, allowing a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In some embodiments, a computing device  on which a virtual machine  executes is referred to as a physical host  or as a host machine .","The hypervisor executes on a processor on the computing device . The hypervisor allocates, to a virtual disk, an amount of access to the physical disk. In one embodiment, the hypervisor  allocates an amount of space on the physical disk. In another embodiment, the hypervisor  allocates a plurality of pages on the physical disk. In some embodiments, the hypervisor provisions the virtual disk  as part of a process of initializing and executing a virtual machine .","In one embodiment, the management component is referred to as a pool management component . In another embodiment, a management operating system , which may be referred to as a control operating system , includes the management component. In some embodiments, the management component is referred to as a tools stack. In one of these embodiments, the management component is the tools stack  described above in connection with . In other embodiments, the management component  provides a user interface for receiving, from a user such as an administrator, an identification of a virtual machine  to provision and\/or execute. In still other embodiments, the management component  provides a user interface for receiving, from a user such as an administrator, the request for migration of a virtual machine from one physical machine  to another. In further embodiments, the management component identifies a computing device on which to execute a requested virtual machine and instructs the hypervisor on the identified computing device to execute the identified virtual machine; such a management component may be referred to as a pool management component.","Referring now to , embodiments of a virtual application delivery controller or virtual appliance  are depicted. In brief overview, any of the functionality and\/or embodiments of the appliance  (e.g., an application delivery controller) described above in connection with  may be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the application delivery controller being deployed in the form of an appliance , such functionality may be deployed in a virtualized environment  on any computing device , such as a client , server  or appliance .","Referring now to , a diagram of an embodiment of a virtual appliance  operating on a hypervisor  of a server  is depicted. As with the appliance  of , the virtual appliance  may provide functionality for availability, performance, offload and security. For availability, the virtual appliance may perform load balancing between layers  and  of the network and may also perform intelligent service health monitoring. For performance increases via network traffic acceleration, the virtual appliance may perform caching and compression. To offload processing of any servers, the virtual appliance may perform connection multiplexing and pooling and\/or SSL processing. For security, the virtual appliance may perform any of the application firewall functionality and SSL VPN function of appliance .","Any of the modules of the appliance  as described in connection with  may be packaged, combined, designed or constructed in a form of the virtualized appliance delivery controller  deployable as one or more software modules or components executable in a virtualized environment  or non-virtualized environment on any server, such as an off the shelf server. For example, the virtual appliance may be provided in the form of an installation package to install on a computing device. With reference to , any of the cache manager , policy engine , compression , encryption engine , packet engine , GUI , CLI , shell services  and health monitoring programs  may be designed and constructed as a software component or module to run on any operating system of a computing device and\/or of a virtualized environment . Instead of using the encryption processor , processor , memory  and network stack  of the appliance , the virtualized appliance  may use any of these resources as provided by the virtualized environment  or as otherwise available on the server .","Still referring to , and in brief overview, any one or more vServers A-N may be in operation or executed in a virtualized environment  of any type of computing device , such as any server . Any of the modules or functionality of the appliance  described in connection with  may be designed and constructed to operate in either a virtualized or non-virtualized environment of a server. Any of the vServer , SSL VPN , Intranet UP , Switching , DNS , acceleration , App FW  and monitoring agent may be packaged, combined, designed or constructed in a form of application delivery controller  deployable as one or more software modules or components executable on a device and\/or virtualized environment .","In some embodiments, a server may execute multiple virtual machines -in the virtualization environment with each virtual machine running the same or different embodiments of the virtual application delivery controller . In some embodiments, the server may execute one or more virtual appliances  on one or more virtual machines on a core of a multi-core processing system. In some embodiments, the server may execute one or more virtual appliances  on one or more virtual machines on each processor of a multiple processor device.","E. Systems and Methods for Providing a Multi-Core Architecture","In accordance with Moore's Law, the number of transistors that may be placed on an integrated circuit may double approximately every two years. However, CPU speed increases may reach plateaus, for example CPU speed has been around 3.5-4 GHz range since 2005. In some cases, CPU manufacturers may not rely on CPU speed increases to gain additional performance. Some CPU manufacturers may add additional cores to their processors to provide additional performance. Products, such as those of software and networking vendors, that rely on CPUs for performance gains may improve their performance by leveraging these multi-core CPUs. The software designed and constructed for a single CPU may be redesigned and\/or rewritten to take advantage of a multi-threaded, parallel architecture or otherwise a multi-core architecture.","A multi-core architecture of the appliance , referred to as nCore or multi-core technology, allows the appliance in some embodiments to break the single core performance barrier and to leverage the power of multi-core CPUs. In the previous architecture described in connection with , a single network or packet engine is run. The multiple cores of the nCore technology and architecture allow multiple packet engines to run concurrently and\/or in parallel. With a packet engine running on each core, the appliance architecture leverages the processing capacity of additional cores. In some embodiments, this provides up to a 7\u00d7 increase in performance and scalability.","Illustrated in  are some embodiments of work, task, load or network traffic distribution across one or more processor cores according to a type of parallelism or parallel computing scheme, such as functional parallelism, data parallelism or flow-based data parallelism. In brief overview,  illustrates embodiments of a multi-core system such as an appliance \u2032 with n-cores, a total of cores numbers  through N. In one embodiment, work, load or network traffic can be distributed among a first core A, a second core B, a third core C, a fourth core D, a fifth core E, a sixth core F, a seventh core G, and so on such that distribution is across all or two or more of the n cores N (hereinafter referred to collectively as cores .) There may be multiple VIPs  each running on a respective core of the plurality of cores. There may be multiple packet engines  each running on a respective core of the plurality of cores. Any of the approaches used may lead to different, varying or similar work load or performance level  across any of the cores. For a functional parallelism approach, each core may run a different function of the functionalities provided by the packet engine, a VIP  or appliance . In a data parallelism approach, data may be paralleled or distributed across the cores based on the Network Interface Card (NIC) or VIP  receiving the data. In another data parallelism approach, processing may be distributed across the cores by distributing data flows to each core.","In further detail to , in some embodiments, load, work or network traffic can be distributed among cores  according to functional parallelism . Functional parallelism may be based on each core performing one or more respective functions. In some embodiments, a first core may perform a first function while a second core performs a second function. In functional parallelism approach, the functions to be performed by the multi-core system are divided and distributed to each core according to functionality. In some embodiments, functional parallelism may be referred to as task parallelism and may be achieved when each processor or core executes a different process or function on the same or different data. The core or processor may execute the same or different code. In some cases, different execution threads or code may communicate with one another as they work. Communication may take place to pass data from one thread to the next as part of a workflow.","In some embodiments, distributing work across the cores  according to functional parallelism , can comprise distributing network traffic according to a particular function such as network input\/output management (NW I\/O) A, secure sockets layer (SSL) encryption and decryption B and transmission control protocol (TCP) functions C. This may lead to a work, performance or computing load  based on a volume or level of functionality being used. In some embodiments, distributing work across the cores  according to data parallelism , can comprise distributing an amount of work  based on distributing data associated with a particular hardware or software component. In some embodiments, distributing work across the cores  according to flow-based data parallelism , can comprise distributing data based on a context or flow such that the amount of work A-N on each core may be similar, substantially equal or relatively evenly distributed.","In the case of the functional parallelism approach, each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine or VIP of the appliance. For example, core  may perform network I\/O processing for the appliance \u2032 while core  performs TCP connection management for the appliance. Likewise, core  may perform SSL offloading while core  may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and\/or described in conjunction with . In this the approach, the work across the cores may be divided by function in either a coarse-grained or fine-grained manner. In some cases, as illustrated in , division by function may lead to different cores running at different levels of performance or load .","In the case of the functional parallelism approach, each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine of the appliance. For example, core  may perform network I\/O processing for the appliance \u2032 while core  performs TCP connection management for the appliance. Likewise, core  may perform SSL offloading while core  may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and\/or described in conjunction with . In this the approach, the work across the cores may be divided by function in either a coarse-grained or fine-grained manner. In some cases, as illustrated in  division by function may lead to different cores running at different levels of load or performance.","The functionality or tasks may be distributed in any arrangement and scheme. For example,  illustrates a first core, Core  A, processing applications and processes associated with network I\/O functionality A. Network traffic associated with network I\/O, in some embodiments, can be associated with a particular port number. Thus, outgoing and incoming packets having a port destination associated with NW I\/O A will be directed towards Core  A which is dedicated to handling all network traffic associated with the NW I\/O port. Similarly, Core  B is dedicated to handling functionality associated with SSL processing and Core  D may be dedicated handling all TCP level processing and functionality.","While  illustrates functions such as network I\/O, SSL and TCP, other functions can be assigned to cores. These other functions can include any one or more of the functions or operations described herein. For example, any of the functions described in conjunction with  may be distributed across the cores on a functionality basis. In some cases, a first VIP A may run on a first core while a second VIP B with a different configuration may run on a second core. In some embodiments, each core  can handle a particular functionality such that each core  can handle the processing associated with that particular function. For example, Core  B may handle SSL offloading while Core  D may handle application layer processing and traffic management.","In other embodiments, work, load or network traffic may be distributed among cores  according to any type and form of data parallelism . In some embodiments, data parallelism may be achieved in a multi-core system by each core performing the same task or functionally on different pieces of distributed data. In some embodiments, a single execution thread or code controls operations on all pieces of data. In other embodiments, different threads or instructions control the operation, but may execute the same code. In some embodiments, data parallelism is achieved from the perspective of a packet engine, vServers (VIPs) A-C, network interface cards (NIC) D-E and\/or any other networking hardware or software included on or associated with an appliance . For example, each core may run the same packet engine or VIP code or configuration but operate on different sets of distributed data. Each networking hardware or software construct can receive different, varying or substantially the same amount of data, and as a result may have varying, different or relatively the same amount of load .","In the case of a data parallelism approach, the work may be divided up and distributed based on VIPs, NICs and\/or data flows of the VIPs or NICs. In one of these approaches, the work of the multi-core system may be divided or distributed among the VIPs by having each VIP work on a distributed set of data. For example, each core may be configured to run one or more VIPs. Network traffic may be distributed to the core for each VIP handling that traffic. In another of these approaches, the work of the appliance may be divided or distributed among the cores based on which NIC receives the network traffic. For example, network traffic of a first NIC may be distributed to a first core while network traffic of a second NIC may be distributed to a second core. In some cases, a core may process data from multiple NICs.","While  illustrates a single vServer associated with a single core , as is the case for VIP A, VIP B and VIP C. In some embodiments, a single vServer can be associated with one or more cores . In contrast, one or more vServers can be associated with a single core . Associating a vServer with a core  may include that core  to process all functions associated with that particular vServer. In some embodiments, each core executes a VIP having the same code and configuration. In other embodiments, each core executes a VIP having the same code but different configuration. In some embodiments, each core executes a VIP having different code and the same or different configuration.","Like vServers, NICs can also be associated with particular cores . In many embodiments, NICs can be connected to one or more cores  such that when a NIC receives or transmits data packets, a particular core  handles the processing involved with receiving and transmitting the data packets. In one embodiment, a single NIC can be associated with a single core , as is the case with NIC D and NIC E. In other embodiments, one or more NICs can be associated with a single core . In other embodiments, a single NIC can be associated with one or more cores . In these embodiments, load could be distributed amongst the one or more cores  such that each core  processes a substantially similar amount of load. A core  associated with a NIC may process all functions and\/or data associated with that particular NIC.","While distributing work across cores based on data of VIPs or NICs may have a level of independency, in some embodiments, this may lead to unbalanced use of cores as illustrated by the varying loads  of .","In some embodiments, load, work or network traffic can be distributed among cores  based on any type and form of data flow. In another of these approaches, the work may be divided or distributed among cores based on data flows. For example, network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases, the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. In some embodiments, the data flow is based on any unit or portion of network traffic, such as a transaction, a request\/response communication or traffic originating from an application on a client. In this manner and in some embodiments, data flows between clients and servers traversing the appliance \u2032 may be distributed in a more balanced manner than the other approaches.","In flow-based data parallelism , distribution of data is related to any type of flow of data, such as request\/response pairings, transactions, sessions, connections or application communications. For example, network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases, the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. The distribution of data flow may be such that each core  carries a substantially equal or relatively evenly distributed amount of load, data or network traffic.","In some embodiments, the data flow is based on any unit or portion of network traffic, such as a transaction, a request\/response communication or traffic originating from an application on a client. In this manner and in some embodiments, data flows between clients and servers traversing the appliance \u2032 may be distributed in a more balanced manner than the other approached. In one embodiment, data flow can be distributed based on a transaction or a series of transactions. This transaction, in some embodiments, can be between a client and a server and can be characterized by an IP address or other packet identifier. For example, Core  A can be dedicated to transactions between a particular client and a particular server, therefore the load A on Core  A may be comprised of the network traffic associated with the transactions between the particular client and server. Allocating the network traffic to Core  A can be accomplished by routing all data packets originating from either the particular client or server to Core  A.","While work or load can be distributed to the cores based in part on transactions, in other embodiments load or work can be allocated on a per packet basis. In these embodiments, the appliance  can intercept data packets and allocate them to a core  having the least amount of load. For example, the appliance  could allocate a first incoming data packet to Core  A because the load A on Core  is less than the load B-N on the rest of the cores B-N. Once the first data packet is allocated to Core  A, the amount of load A on Core  A is increased proportional to the amount of processing resources needed to process the first data packet. When the appliance  intercepts a second data packet, the appliance  will allocate the load to Core  D because Core  D has the second least amount of load. Allocating data packets to the core with the least amount of load can, in some embodiments, ensure that the load A-N distributed to each core  remains substantially equal.","In other embodiments, load can be allocated on a per unit basis where a section of network traffic is allocated to a particular core . The above-mentioned example illustrates load balancing on a per\/packet basis. In other embodiments, load can be allocated based on a number of packets such that every 10, 100 or 1000 packets are allocated to the core  having the least amount of load. The number of packets allocated to a core  can be a number determined by an application, user or administrator and can be any number greater than zero. In still other embodiments, load can be allocated based on a time metric such that packets are distributed to a particular core  for a predetermined amount of time. In these embodiments, packets can be distributed to a particular core  for five milliseconds or for any period of time determined by a user, program, system, administrator or otherwise. After the predetermined time period elapses, data packets are transmitted to a different core  for the predetermined period of time.","Flow-based data parallelism methods for distributing work, load or network traffic among the one or more cores  can comprise any combination of the above-mentioned embodiments. These methods can be carried out by any part of the appliance , by an application or set of executable instructions executing on one of the cores , such as the packet engine, or by any application, program or agent executing on a computing device in communication with the appliance .","The functional and data parallelism computing schemes illustrated in  can be combined in any manner to generate a hybrid parallelism or distributed processing scheme that encompasses function parallelism , data parallelism , flow-based data parallelism  or any portions thereof. In some cases, the multi-core system may use any type and form of load balancing schemes to distribute load among the one or more cores . The load balancing scheme may be used in any combination with any of the functional and data parallelism schemes or combinations thereof.","Illustrated in  is an embodiment of a multi-core system , which may be any type and form of one or more systems, appliances, devices or components. This system , in some embodiments, can be included within an appliance  having one or more processing cores A-N. The system  can further include one or more packet engines (PE) or packet processing engines (PPE) A-N communicating with a memory bus . The memory bus may be used to communicate with the one or more processing cores A-N. Also included within the system  can be one or more network interface cards (NIC)  and a flow distributor  which can further communicate with the one or more processing cores A-N. The flow distributor  can comprise a Receive Side Scaler (RSS) or Receive Side Scaling (RSS) module .","Further referring to , and in more detail, in one embodiment the packet engine(s) A-N can comprise any portion of the appliance  described herein, such as any portion of the appliance described in . The packet engine(s) A-N can, in some embodiments, comprise any of the following elements: the packet engine , a network stack ; a cache manager ; a policy engine ; a compression engine ; an encryption engine ; a GUI ; a CLI ; shell services ; monitoring programs ; and any other software or hardware element able to receive data packets from one of either the memory bus  or the one of more cores A-N. In some embodiments, the packet engine(s) A-N can comprise one or more vServers A-N, or any portion thereof. In other embodiments, the packet engine(s) A-N can provide any combination of the following functionalities: SSL VPN ; Intranet UP ; switching ; DNS ; packet acceleration ; App FW ; monitoring such as the monitoring provided by a monitoring agent ; functionalities associated with functioning as a TCP stack; load balancing; SSL offloading and processing; content switching; policy evaluation; caching; compression; encoding; decompression; decoding; application firewall functionalities; XML processing and acceleration; and SSL VPN connectivity.","The packet engine(s) A-N can, in some embodiments, be associated with a particular server, user, client or network. When a packet engine  becomes associated with a particular entity, that packet engine  can process data packets associated with that entity. For example, should a packet engine  be associated with a first user, that packet engine  will process and operate on packets generated by the first user, or packets having a destination address associated with the first user. Similarly, the packet engine  may choose not to be associated with a particular entity such that the packet engine  can process and otherwise operate on any data packets not generated by that entity or destined for that entity.","In some instances, the packet engine(s) A-N can be configured to carry out the any of the functional and\/or data parallelism schemes illustrated in . In these instances, the packet engine(s) A-N can distribute functions or data among the processing cores A-N so that the distribution is according to the parallelism or distribution scheme. In some embodiments, a single packet engine(s) A-N carries out a load balancing scheme, while in other embodiments one or more packet engine(s) A-N carry out a load balancing scheme. Each core A-N, in one embodiment, can be associated with a particular packet engine  such that load balancing can be carried out by the packet engine. Load balancing may in this embodiment, require that each packet engine A-N associated with a core  communicate with the other packet engines associated with cores so that the packet engines A-N can collectively determine where to distribute load. One embodiment of this process can include an arbiter that receives votes from each packet engine for load. The arbiter can distribute load to each packet engine A-N based in part on the age of the engine's vote and in some cases a priority value associated with the current amount of load on an engine's associated core .","Any of the packet engines running on the cores may run in user mode, kernel or any combination thereof. In some embodiments, the packet engine operates as an application or program running is user or application space. In these embodiments, the packet engine may use any type and form of interface to access any functionality provided by the kernel. In some embodiments, the packet engine operates in kernel mode or as part of the kernel. In some embodiments, a first portion of the packet engine operates in user mode while a second portion of the packet engine operates in kernel mode. In some embodiments, a first packet engine on a first core executes in kernel mode while a second packet engine on a second core executes in user mode. In some embodiments, the packet engine or any portions thereof operates on or in conjunction with the NIC or any drivers thereof.","In some embodiments, the memory bus  can be any type and form of memory or computer bus. While a single memory bus  is depicted in , the system  can comprise any number of memory buses . In one embodiment, each packet engine  can be associated with one or more individual memory buses .","The NIC  can in some embodiments be any of the network interface cards or mechanisms described herein. The NIC  can have any number of ports. The NIC can be designed and constructed to connect to any type and form of network . While a single NIC  is illustrated, the system  can comprise any number of NICs . In some embodiments, each core A-N can be associated with one or more single NICs . Thus, each core  can be associated with a single NIC  dedicated to a particular core .","The cores A-N can comprise any of the processors described herein. Further, the cores A-N can be configured according to any of the core  configurations described herein. Still further, the cores A-N can have any of the core  functionalities described herein. While  illustrates seven cores A-G, any number of cores  can be included within the system . In particular, the system  can comprise \u201cN\u201d cores, where \u201cN\u201d is a whole number greater than zero.","A core may have or use memory that is allocated or assigned for use to that core. The memory may be considered private or local memory of that core and only accessible by that core. A core may have or use memory that is shared or assigned to multiple cores. The memory may be considered public or shared memory that is accessible by more than one core. A core may use any combination of private and public memory. With separate address spaces for each core, some level of coordination is eliminated from the case of using the same address space. With a separate address space, a core can perform work on information and data in the core's own address space without worrying about conflicts with other cores. Each packet engine may have a separate memory pool for TCP and\/or SSL connections.","Further referring to , any of the functionality and\/or embodiments of the cores  described above in connection with  can be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the cores  being deployed in the form of a physical processor , such functionality may be deployed in a virtualized environment  on any computing device , such as a client , server  or appliance . In other embodiments, instead of the functionality of the cores  being deployed in the form of an appliance or a single device, the functionality may be deployed across multiple devices in any arrangement. For example, one device may comprise two or more cores and another device may comprise two or more cores. For example, a multi-core system may include a cluster of computing devices, a server farm or network of computing devices. In some embodiments, instead of the functionality of the cores  being deployed in the form of cores, the functionality may be deployed on a plurality of processors, such as a plurality of single core processors.","In one embodiment, the cores  may be any type and form of processor. In some embodiments, a core can function substantially similar to any processor or central processing unit described herein. In some embodiment, the cores  may comprise any portion of any processor described herein. While  illustrates seven cores, there can exist any \u201cN\u201d number of cores within an appliance , where \u201cN\u201d is any whole number greater than one. In some embodiments, the cores  can be installed within a common appliance , while in other embodiments the cores  can be installed within one or more appliance(s)  communicatively connected to one another. The cores  can in some embodiments comprise graphics processing software, while in other embodiments the cores  provide general processing capabilities. The cores  can be installed physically near each other and\/or can be communicatively connected to each other. The cores may be connected by any type and form of bus or subsystem physically and\/or communicatively coupled to the cores for transferring data between to, from and\/or between the cores.","While each core  can comprise software for communicating with other cores, in some embodiments a core manager (not shown) can facilitate communication between each core . In some embodiments, the kernel may provide core management. The cores may interface or communicate with each other using a variety of interface mechanisms. In some embodiments, core to core messaging may be used to communicate between cores, such as a first core sending a message or data to a second core via a bus or subsystem connecting the cores. In some embodiments, cores may communicate via any type and form of shared memory interface. In one embodiment, there may be one or more memory locations shared among all the cores. In some embodiments, each core may have separate memory locations shared with each other core. For example, a first core may have a first shared memory with a second core and a second share memory with a third core. In some embodiments, cores may communicate via any type of programming or API, such as function calls via the kernel. In some embodiments, the operating system may recognize and support multiple core devices and provide interfaces and API for inter-core communications.","The flow distributor  can be any application, program, library, script, task, service, process or any type and form of executable instructions executing on any type and form of hardware. In some embodiments, the flow distributor  may any design and construction of circuitry to perform any of the operations and functions described herein. In some embodiments, the flow distributor distribute, forwards, routes, controls and\/ors manage the distribution of data packets among the cores  and\/or packet engine or VIPs running on the cores. The flow distributor , in some embodiments, can be referred to as an interface master. In one embodiment, the flow distributor  comprises a set of executable instructions executing on a core or processor of the appliance . In another embodiment, the flow distributor  comprises a set of executable instructions executing on a computing machine in communication with the appliance . In some embodiments, the flow distributor  comprises a set of executable instructions executing on a NIC, such as firmware. In still other embodiments, the flow distributor  comprises any combination of software and hardware to distribute data packets among cores or processors. In one embodiment, the flow distributor  executes on at least one of the cores A-N, while in other embodiments a separate flow distributor  assigned to each core A-N executes on an associated core A-N. The flow distributor may use any type and form of statistical or probabilistic algorithms or decision making to balance the flows across the cores. The hardware of the appliance, such as a NIC, or the kernel may be designed and constructed to support sequential operations across the NICs and\/or cores.","In embodiments where the system  comprises one or more flow distributors , each flow distributor  can be associated with a processor  or a packet engine . The flow distributors  can comprise an interface mechanism that allows each flow distributor  to communicate with the other flow distributors  executing within the system . In one instance, the one or more flow distributors  can determine how to balance load by communicating with each other. This process can operate substantially similarly to the process described above for submitting votes to an arbiter which then determines which flow distributor  should receive the load. In other embodiments, a first flow distributor \u2032 can identify the load on an associated core and determine whether to forward a first data packet to the associated core based on any of the following criteria: the load on the associated core is above a predetermined threshold; the load on the associated core is below a predetermined threshold; the load on the associated core is less than the load on the other cores; or any other metric that can be used to determine where to forward data packets based in part on the amount of load on a processor.","The flow distributor  can distribute network traffic among the cores  according to a distribution, computing or load balancing scheme such as those described herein. In one embodiment, the flow distributor can distribute network traffic according to any one of a functional parallelism distribution scheme , a data parallelism load distribution scheme , a flow-based data parallelism distribution scheme , or any combination of these distribution scheme or any load balancing scheme for distributing load among multiple processors. The flow distributor  can therefore act as a load distributor by taking in data packets and distributing them across the processors according to an operative load balancing or distribution scheme. In one embodiment, the flow distributor  can comprise one or more operations, functions or logic to determine how to distribute packers, work or load accordingly. In still other embodiments, the flow distributor  can comprise one or more sub operations, functions or logic that can identify a source address and a destination address associated with a data packet, and distribute packets accordingly.","In some embodiments, the flow distributor  can comprise a receive-side scaling (RSS) network driver, module  or any type and form of executable instructions which distribute data packets among the one or more cores . The RSS module  can comprise any combination of hardware and software, In some embodiments, the RSS module  works in conjunction with the flow distributor  to distribute data packets across the cores A-N or among multiple processors in a multi-processor network. The RSS module  can execute within the NIC  in some embodiments, and in other embodiments can execute on any one of the cores .","In some embodiments, the RSS module  uses the MICROSOFT receive-side-scaling (RSS) scheme. In one embodiment, RSS is a Microsoft Scalable Networking initiative technology that enables receive processing to be balanced across multiple processors in the system while maintaining in-order delivery of the data. The RSS may use any type and form of hashing scheme to determine a core or processor for processing a network packet.","The RSS module  can apply any type and form hash function such as the Toeplitz hash function. The hash function may be applied to the hash type or any the sequence of values. The hash function may be a secure hash of any security level or is otherwise cryptographically secure. The hash function may use a hash key. The size of the key is dependent upon the hash function. For the Toeplitz hash, the size may be 40 bytes for IPv6 and 16 bytes for IPv4.","The hash function may be designed and constructed based on any one or more criteria or design goals. In some embodiments, a hash function may be used that provides an even distribution of hash result for different hash inputs and different hash types, including TCP\/IPv4, TCP\/IPv6, IPv4, and IPv6 headers. In some embodiments, a hash function may be used that provides a hash result that is evenly distributed when a small number of buckets are present (for example, two or four). In some embodiments, hash function may be used that provides a hash result that is randomly distributed when a large number of buckets were present (for example, 64 buckets). In some embodiments, the hash function is determined based on a level of computational or resource usage. In some embodiments, the hash function is determined based on ease or difficulty of implementing the hash in hardware. In some embodiments, the hash function is determined based on the ease or difficulty of a malicious remote host to send packets that would all hash to the same bucket.","The RSS may generate hashes from any type and form of input, such as a sequence of values. This sequence of values can include any portion of the network packet, such as any header, field or payload of network packet, or portions thereof. In some embodiments, the input to the hash may be referred to as a hash type and include any tuples of information associated with a network packet or data flow, such as any of the following: a four tuple comprising at least two IP addresses and two ports; a four tuple comprising any four sets of values; a six tuple; a two tuple; and\/or any other sequence of numbers or values. The following are example of hash types that may be used by RSS:\n\n","The hash result or any portion thereof may used to identify a core or entity, such as a packet engine or VIP, for distributing a network packet. In some embodiments, one or more hash bits or mask are applied to the hash result. The hash bit or mask may be any number of bits or bytes. A NIC may support any number of bits, such as seven bits. The network stack may set the actual number of bits to be used during initialization. The number will be between 1 and 7, inclusive.","The hash result may be used to identify the core or entity via any type and form of table, such as a bucket table or indirection table. In some embodiments, the number of hash-result bits are used to index into the table. The range of the hash mask may effectively define the size of the indirection table. Any portion of the hash result or the hast result itself may be used to index the indirection table. The values in the table may identify any of the cores or processor, such as by a core or processor identifier. In some embodiments, all of the cores of the multi-core system are identified in the table. In other embodiments, a port of the cores of the multi-core system are identified in the table. The indirection table may comprise any number of buckets for example 2 to 128 buckets that may be indexed by a hash mask. Each bucket may comprise a range of index values that identify a core or processor. In some embodiments, the flow controller and\/or RSS module may rebalance the network rebalance the network load by changing the indirection table.","In some embodiments, the multi-core system  does not include a RSS driver or RSS module . In some of these embodiments, a software steering module (not shown) or a software embodiment of the RSS module within the system can operate in conjunction with or as part of the flow distributor  to steer packets to cores  within the multi-core system .","The flow distributor , in some embodiments, executes within any module or program on the appliance , on any one of the cores  and on any one of the devices or components included within the multi-core system . In some embodiments, the flow distributor \u2032 can execute on the first core A, while in other embodiments the flow distributor \u2033 can execute on the NIC . In still other embodiments, an instance of the flow distributor \u2032 can execute on each core  included in the multi-core system . In this embodiment, each instance of the flow distributor \u2032 can communicate with other instances of the flow distributor \u2032 to forward packets back and forth across the cores . There exist situations where a response to a request packet may not be processed by the same core, i.e. the first core processes the request while the second core processes the response. In these situations, the instances of the flow distributor \u2032 can intercept the packet and forward it to the desired or correct core , i.e. a flow distributor instance \u2032 can forward the response to the first core. Multiple instances of the flow distributor \u2032 can execute on any number of cores  and any combination of cores .","The flow distributor may operate responsive to any one or more rules or policies. The rules may identify a core or packet processing engine to receive a network packet, data or data flow. The rules may identify any type and form of tuple information related to a network packet, such as a 4-tuple of source and destination IP address and source and destination ports. Based on a received packet matching the tuple specified by the rule, the flow distributor may forward the packet to a core or packet engine. In some embodiments, the packet is forwarded to a core via shared memory and\/or core to core messaging.","Although  illustrates the flow distributor  as executing within the multi-core system , in some embodiments the flow distributor  can execute on a computing device or appliance remotely located from the multi-core system . In such an embodiment, the flow distributor  can communicate with the multi-core system  to take in data packets and distribute the packets across the one or more cores . The flow distributor  can, in one embodiment, receive data packets destined for the appliance , apply a distribution scheme to the received data packets and distribute the data packets to the one or more cores  of the multi-core system . In one embodiment, the flow distributor  can be included in a router or other appliance such that the router can target particular cores  by altering meta data associated with each packet so that each packet is targeted towards a sub-node of the multi-core system . In such an embodiment, CISCO's vn-tag mechanism can be used to alter or tag each packet with the appropriate meta data.","Illustrated in  is an embodiment of a multi-core system  comprising one or more processing cores A-N. In brief overview, one of the cores  can be designated as a control core A and can be used as a control plane  for the other cores . The other cores may be secondary cores which operate in a data plane while the control core provides the control plane. The cores A-N may share a global cache . While the control core provides a control plane, the other cores in the multi-core system form or provide a data plane. These cores perform data processing functionality on network traffic while the control provides initialization, configuration and control of the multi-core system.","Further referring to , and in more detail, the cores A-N as well as the control core A can be any processor described herein. Furthermore, the cores A-N and the control core A can be any processor able to function within the system  described in . Still further, the cores A-N and the control core A can be any core or group of cores described herein. The control core may be a different type of core or processor than the other cores. In some embodiments, the control may operate a different packet engine or have a packet engine configured differently than the packet engines of the other cores.","Any portion of the memory of each of the cores may be allocated to or used for a global cache that is shared by the cores. In brief overview, a predetermined percentage or predetermined amount of each of the memory of each core may be used for the global cache. For example, 50% of each memory of each code may be dedicated or allocated to the shared global cache. That is, in the illustrated embodiment, 2 GB of each core excluding the control plane core or core  may be used to form a 28 GB shared global cache. The configuration of the control plane such as via the configuration services may determine the amount of memory used for the shared global cache. In some embodiments, each core may provide a different amount of memory for use by the global cache. In other embodiments, any one core may not provide any memory or use the global cache. In some embodiments, any of the cores may also have a local cache in memory not allocated to the global shared memory. Each of the cores may store any portion of network traffic to the global shared cache. Each of the cores may check the cache for any content to use in a request or response. Any of the cores may obtain content from the global shared cache to use in a data flow, request or response.","The global cache  can be any type and form of memory or storage element, such as any memory or storage element described herein. In some embodiments, the cores  may have access to a predetermined amount of memory (i.e. 32 GB or any other memory amount commensurate with the system ). The global cache  can be allocated from that predetermined amount of memory while the rest of the available memory can be allocated among the cores . In other embodiments, each core  can have a predetermined amount of memory. The global cache  can comprise an amount of the memory allocated to each core . This memory amount can be measured in bytes, or can be measured as a percentage of the memory allocated to each core . Thus, the global cache  can comprise 1 GB of memory from the memory associated with each core , or can comprise 20 percent or one-half of the memory associated with each core . In some embodiments, only a portion of the cores  provide memory to the global cache , while in other embodiments the global cache  can comprise memory not allocated to the cores .","Each core  can use the global cache  to store network traffic or cache data. In some embodiments, the packet engines of the core use the global cache to cache and use data stored by the plurality of packet engines. For example, the cache manager of  and cache functionality of  may use the global cache to share data for acceleration. For example, each of the packet engines may store responses, such as HTML data, to the global cache. Any of the cache managers operating on a core may access the global cache to server caches responses to client requests.","In some embodiments, the cores  can use the global cache  to store a port allocation table which can be used to determine data flow based in part on ports. In other embodiments, the cores  can use the global cache  to store an address lookup table or any other table or list that can be used by the flow distributor to determine where to direct incoming and outgoing data packets. The cores  can, in some embodiments read from and write to cache , while in other embodiments the cores  can only read from or write to cache . The cores may use the global cache to perform core to core communications.","The global cache  may be sectioned into individual memory sections where each section can be dedicated to a particular core . In one embodiment, the control core A can receive a greater amount of available cache, while the other cores  can receiving varying amounts or access to the global cache .","In some embodiments, the system  can comprise a control core A. While  illustrates core  A as the control core, the control core can be any core within the appliance  or multi-core system. Further, while only a single control core is depicted, the system  can comprise one or more control cores each having a level of control over the system. In some embodiments, one or more control cores can each control a particular aspect of the system . For example, one core can control deciding which distribution scheme to use, while another core can determine the size of the global cache .","The control plane of the multi-core system may be the designation and configuration of a core as the dedicated management core or as a master core. This control plane core may provide control, management and coordination of operation and functionality the plurality of cores in the multi-core system. This control plane core may provide control, management and coordination of allocation and use of memory of the system among the plurality of cores in the multi-core system, including initialization and configuration of the same. In some embodiments, the control plane includes the flow distributor for controlling the assignment of data flows to cores and the distribution of network packets to cores based on data flows. In some embodiments, the control plane core runs a packet engine and in other embodiments, the control plane core is dedicated to management and control of the other cores of the system.","The control core A can exercise a level of control over the other cores  such as determining how much memory should be allocated to each core  or determining which core  should be assigned to handle a particular function or hardware\/software entity. The control core A, in some embodiments, can exercise control over those cores  within the control plan . Thus, there can exist processors outside of the control plane  which are not controlled by the control core A. Determining the boundaries of the control plane  can include maintaining, by the control core A or agent executing within the system , a list of those cores  controlled by the control core A. The control core A can control any of the following: initialization of a core; determining when a core is unavailable; re-distributing load to other cores  when one core fails; determining which distribution scheme to implement; determining which core should receive network traffic; determining how much cache should be allocated to each core; determining whether to assign a particular function or element to a particular core; determining whether to permit cores to communicate with one another; determining the size of the global cache ; and any other determination of a function, configuration or operation of the cores within the system .","F. Load Balancing Using Appliance Determined Metrics and\/or Metrics Collected from a Device via a Network Management Protocol","Referring now to , systems and methods are depicted for load balancing based on metrics determined by the appliance  and\/or metrics collected by the appliance from a device or service via a network management protocol, such as a Simple Network Management Protocol (SNMP). The appliance provides a load monitor to monitor the load of one or more services -. In one embodiment, a user may configure one or more load monitors based on metrics selected from a custom metric table which includes metrics or objects obtains via a network management protocol query. In another embodiment, a user may configure one or more load monitors based on metrics or parameters collected by the appliance. In some embodiments, the user configures one or more load monitors based on metrics selected from the custom metric table and the appliance collected metrics. In response to the user's selection, the appliance determines the load of the one or more services and load balances client requests to the services using any type of load balancing technique.","Referring now to , an embodiment of an appliance for load balancing one or more services is depicted. In brief overview, an appliance  has one or more virtual servers, or vServers A-N configured to provide load balancing  to one or more services -deployed on or provided by one or more servers -. A vServer A is associated with, configured to or bound to a service A or a group of services A-N. The appliance  has one or more load monitors A-N to monitor a status, operation, and\/or performance of the services A-N. A load monitor is associated with, configured to or bound to a service A or a group of services A-N. The load monitors A-B provide information to the vServers A-N to determine which of the services A-N should receive a request received by a vServer . A load monitor  and\/or vServer  may use appliance collected metrics  and\/or device provided metrics  to determine a load across a plurality of services A-N and to load balancing incoming client requests. The appliance  also includes a configuration interface  to receive information identifying user selected or user defined metrics  to be used by the load monitors  and\/or vServers  for load balancing the plurality of services A-N.","The appliance  may include any type and form of load monitor A-N, also referred to as monitoring agent, for monitoring any operational or performance characteristic or metric of a service , server  or device . A load monitor  may include software, hardware, or any combination of software and hardware. The load monitor  may include any application, program, script, service, daemon, process, task, thread or set of executable instructions. In one embodiment, the load monitor  operates or executes in kernel space of the appliance . In another embodiment, the load monitor  operates or executes in user or application space of the appliance . In some embodiments, a first portion of the load monitor  operates in kernel space while a second portion of the load monitor  operates in application layer or space of the appliance .","In one embodiment, the load monitor  communicates with a service  once. In some embodiments, the load monitor  monitors or communicates with a service  on a predetermined frequency, such as every 1 msec or 1 sec. A user may configure or specify the predetermined frequency via the configuration interface . In other cases, another appliance or system may configure or specify the predetermined frequency via the configuration interface . In yet another embodiment, the load monitor  monitors or communicates with a service  responsive to one or more events, such as receipt of a request, response or a network packet. In one embodiment, a load monitor  monitors or communicates with a service  responsive to one or more policies of a policy engine.","In some embodiments, a load monitor  may use a request\/reply messaging mechanism or protocol with the service  or server . In other embodiments, a load monitor  may have a custom or proprietary exchange protocol for communicating with a service, server or device. In one embodiment, a load monitor  may use the protocol of the service  to monitor or communicate with the service . As such, in some embodiments, the load monitor  uses the HTTP protocol to monitor or communicate with a web service A or an FTP protocol for an FTP server B. In yet other embodiments, the load monitor  uses a TCP or ICMP protocol for monitoring a service . In some embodiments, the load monitor  uses a network management protocol to monitor or query a status or metric of a service, server or device. In one embodiment, the load monitor  uses a Simple Network Management Protocol (SNMP). In another embodiment, the load monitor  uses a common management information protocol (CIMP).","In some embodiments, a single load monitor  monitors a plurality of services A-N, or servers A-B. In other embodiments, a plurality of load monitors A-N monitor a single service A or server A. In still other embodiments, multiple load monitors  may each monitor a plurality of services A-N, or servers A-N. In one embodiment, multiple load monitors  may each monitor a service . In yet another embodiment, a load monitor A may monitor one or more other load monitors B-N.","In some embodiments, the one or more load monitors  are associated with one or more services . In one embodiment, a user specifies or configures a load monitor  for one or more service  via the configuration interface . For example, a user via the configuration interface  may issue a command to bind the monitor  to a service . In other embodiments, the load monitor  is associated with a vServer . In one embodiment, a user specifies or configures via the configuration interface  a load monitor  for a vServer . In yet another embodiment, a use specifies or configures via the configuration interface  a vServer  for one or more services A-N. For example, a user may bind a vServer  to a service .","In some embodiments, the one or more load monitors  may monitor an appliance , vServer , network service , client , server , device  or any other network resource. In one embodiment, a user specifies a type of network service to associate with the one or more monitoring agents . In another embodiment, a user customizes a monitoring agent. For example, a user may implement or otherwise provide a script for monitoring a service. In still another embodiment, a generic monitoring agent  is used. In some embodiments, a monitor agent  is configurable to use a predetermined monitor, script or status message based on a type of protocol or type of service","In yet another embodiment, the one or more monitoring agents  determine the response time of the one or more network services  for responding to a request of one of the following types: ping, transport control protocol (tcp), tcp extended content verification, hypertext transfer protocol (http), http extended content verification, hypertext transfer protocol secure (https), https extended content verification, user datagram protocol, domain name service, and file transfer protocol. In some embodiment, a monitoring agent  checks for predetermined status codes in responses from the service . In other embodiments, the monitoring agent  checks for predetermined string patters in response from the service .","In some embodiments, the one or more load monitors or monitoring agents  are protocol-specific agents. For example, an agent  may determine availability for a network service of a particular protocol-type. In some embodiments, a monitoring agent  determines a response time of a server  or network service  to a TCP request. In one of these embodiments, the agent uses a \u201cTCP\/ICMP echo request\u201d command to send a datagram to the network service , receive a datagram from the network service  in response, and determine a response time based on the roundtrip time of the datagram. In another of these embodiments, the monitoring agent  verifies that the response from the network service  included expected content. In one embodiment, the monitoring agent  verifies that the response did not include an error.","In other embodiments, a monitoring agent  determines availability of a network service  to a UDP request. In one of these embodiments, the agent uses a \u201cUDP echo\u201d command to send a datagram to the network service , receive a datagram from the network service  in response, and determine a response time based on the roundtrip time of the datagram. In another of these embodiments, the monitoring agent  verifies that the response from the network service  included expected content and did not contain errors.","In still other embodiments, the monitoring agent  determines availability of a network service  to an FTP request. In one of these embodiments, the monitoring agent  sends an FTP command, such as a \u201cget\u201d command or a \u201cput\u201d command, to the network service  and determines a time needed by the network service  to respond to the command. In another of these embodiments, the monitoring agent  verifies that the response from the network service  included expected content, such as contents of a file requested by a \u201cget\u201d command, and did not contain errors.","In yet other embodiments, the monitoring agent  determines availability of a network service  to an HTTP request. In one of these embodiments, the monitoring agent  sends an HTTP command, such as a \u201cget\u201d request for a uniform resource locator (URL) or a file, to the network service  and determines a time needed by the network service  to respond to the request. In another of these embodiments, the monitoring agent  verifies that the response from the network service  included expected content, such as the content of a web page identified by a URL. In some embodiment, the monitor agent  checks for a predetermined status code. In other embodiments, the monitoring agent  checks for a predetermine string pattern in an HTTP response.","In further embodiments, the monitoring agent  determines availability of a network service  to a DNS request. In one of these embodiments, the monitoring agent  sends a DNS request, such as a dnsquery or nslookup for a known network address, to the server  or network service  and determines a time needed by the server  or network service  to respond to the request. In another of these embodiments, the monitoring agent  verifies that the response from the network service  included expected content, such as the domain name of a computing device  associated with the known network address. In one embodiment, monitoring agent  verifies the response did not have an error.","In some embodiments, the appliance  via a monitoring agent  identifies and collects metrics  based on network traffic and information traversing the appliance, or otherwise referred to as appliance collected parameters or metrics. The appliance  or agent  may store the appliance collected metrics  in any type and form of data storage mechanism in memory and\/or disk storage. In one embodiment, the appliance stores the metrics  in a table. In another embodiment, the appliance stores the metrics  in a database. In yet another embodiment, the appliance stores the metrics  in an object or data structure. In still other embodiments, the appliance  stores appliance collected metrics  in multiple tables and\/or data storage mechanisms. In one embodiments, the appliance collected metrics  may be arranged or organized in any manner in the multiple tables.","In some embodiments, the monitoring agent  determines one or more metrics  from network packets received and transmitted by the appliance. In one embodiment, the monitoring agent  determines a number and\/or type of connections to one or more services  or server . In another embodiment, the monitoring agent  determines a number of packets transmitted to a service  or server . In other embodiments, the monitoring agents  determines a number of packets received from or transmitted by a service  or server . In some embodiments, the monitoring agent  determines a response time from a service  or service. In one embodiments, the monitoring agent  determines an average response time. In another embodiment, the monitoring agent  determines a number or percentage of loss packets. In other embodiments, the monitoring agent  determines a number of errors received from a service or server.","In some embodiments, the monitoring agent  determines a bandwidth of a connection to a service  or a server . In one embodiment, the monitoring agent  determines the bandwidth of a connection based on a response time and\/or packet loss. In another embodiment, the monitoring agent  determines the bandwidth of a connection based on a number of bytes transferred or communicated to and\/or form a service  or server . In one embodiment, the monitoring agent  determines the bandwidth based on a number of bytes received from a service or server over a predetermined time period, such as per second. In another embodiment, the monitoring agent  determines the bandwidth based on a number of bytes transmitted to a service or server over a predetermined time period. In some embodiments, the monitoring agent  determines the bandwidth based on a number of bytes transmitted to and received from a service or server over a predetermined time period.","In some embodiments, the appliance  via a monitoring agent  identifies and collects metrics  provided by a service, server or device. These metrics  may also be referred to as custom metrics or a custom metric table. The appliance  or agent  may store the service or device collected metrics  in any type and form of data storage mechanism in memory and\/or disk storage. In one embodiment, the appliance stores the metrics  in a table.","In another embodiment, the appliance stores the metrics  in a database. In yet another embodiment, the appliance stores the metrics  in an object or data structure. In some embodiments, the appliance stores the metrics  in the same data storage mechanism as the appliance collected metrics . In other embodiments, the appliance stores the metrics  in a different storage mechanism as the appliance collected metrics . In still other embodiments, the appliance  stores device provided metrics  in multiple tables and\/or data storage mechanisms. In one embodiments, the device provided metrics  may be arranged or organized in any manner in the multiple tables. For example, the appliance  may maintain a metrics table  for each service, device or application.","In one embodiment, the load monitor  uses a network management protocol, such as SNMP, to query a server or device for one or more objects identifiers and data for the objects of the object identifiers. By way of example only and not in any way limiting, the load monitor  uses an SNMP architecture to provide management information bases (MIBs) , which specify management data of a device or device subsystem, such as a service , using a hierarchical namespace containing object identifiers A-N for managed objects. In some embodiments, a MIB  is a collection of information that is organized hierarchically. MIBs  may be accessed using a network-management protocol such as SNMP. An MIB  includes managed objects identified by object identifiers A-N. In one embodiment, a managed object (sometimes called a MIB object, an object, or a MIB) is one of any number of characteristics or metrics of a managed device, appliance or system. In some embodiments, a managed objects includes one or more object instances, which correspond to or referred to as variables.","In one embodiment, the MIB  hierarchy may be depicted as a tree with a nameless root, the levels of which are assigned by different organizations. In some embodiments, the top-level MIB object IDs may belong to different standards organizations, while lower-level object IDs are allocated by associated organizations. The MIB  and\/or objects A-N may be arranged, constructed or organized for management across any of layers of the OSI reference model. In some embodiments, the MIB  and\/or objects A-N provide managed data and information on applications such as databases, email, and web services. Furthermore, the MIB  and\/or objects A-N may define for any area-specific or appliance specification information and operations, such as for any type of service , server  or device  load balanced or managed by the appliance .","In the example embodiment of SNMP, the SNMP communication model is based on a manager  and an agent  with a data of management information  and management objects A-N. In one embodiment, the manager  provides an interface between appliance and the managed system. The agent  provides the interface between the manager  and the device, system, application, component, element or resource being managed. As illustrated in , the appliance  may include a manager  which requests and obtains object identifiers and values from an agent , such as the agent  on a server . In the example of SNMP, a manager  communicates a GET or GET-NEXT message to request information for a specific object. The agent , in response to the manger's request, issues a GET-RESPONSE message to the manager  with the information requested or an error message. The manager  may transmit a SET message to request a change to a value of a specific variable or object . The agent  may issue a TRAP message to inform the manager  of an event, such as an alarm or error on a service .","Although generally described in an embodiment of an SNMP network management protocol, the appliance  and\/or load monitor  may use any type and form of network management protocol and communication model to obtain identifiers and values of information, such as objects or variables, from another device for a managed system, sub-system or service . For example, the appliance  may use any of the following protocols and\/or communication models: Remote monitoring (RMON), AgentX, Simple Gateway Monitoring Protocol (SGMP), Common management information protocol (CMIP), Common management information service (CMIS) or CMIP over TCP\/IP (CMOT).","Furthermore, although a MIB  is generally described in reference to a manager\/agent communication model for an example network management protocol such as SNMP, the MIB  may include any type and form of data storage of object identifiers, variables, parameters or other identifiers of metrics. The MIB  may be either protocol dependent or protocol independent. For example, the MIB  may comprise a table of metrics for a device or service that can be queried via any type and form of API.","The managed objects or variables provided via the network management protocol may provide any type and form of metrics or operational characteristics of the service, server or device to be used by the appliance for load balancing, or any other function of the appliance . In one embodiment, the device provided metrics  may include any of the metrics  collected by the appliance as described above. In another embodiment, the device provided metrics  may include any type and form of information on any resource usage of the managed device, service or system. In one embodiment, the metrics  include CPU, memory and\/or disk usage of the device and\/or service . In other embodiments, the metrics  may include information on a number of connections, sessions or clients of the service . In some embodiments, the metrics  include any information on any thresholds of the service  or server , such as a threshold identifying a maximum number of sessions or clients. In yet another embodiment, the metrics  include any information on a type of protocol of the service . In other embodiments, the metrics  include any information on any alarms or errors of the service .","In some embodiments, each load monitor  includes the appliance collected metrics . For example, the metric table  may be implicitly bound to each monitor  by default. In other embodiments, a user associates or binds a custom metric table  to a monitor . In yet another embodiment, a user associates or binds a custom metric table  and appliance collected table  to a monitor . In yet other embodiments, a user may associate or bind any combination of one or more appliance collected metric tables  and custom metric tables  to one or more load monitors .","In some embodiments, a user via the configuration interface  may configure or specify for a load monitor  one or more object identifiers A-N to obtain values for and store in the metrics . For example, the user may specify a user-defined metric . In other embodiments, the appliance  or load monitor  obtains a list of one or more object identifiers A-N from a device , such as server  or service . In yet another embodiment, the appliance  includes one or more metric tables  with predetermined OIDS A-N for a known device. For example, the appliance  may include a metric table  for any one or more of the following appliances or devices: 1) any version of the NetScaler device manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla.; 2) any of the appliances, such as BIGIP or WebAccelerator, manufactured by F5 Networks, Inc. of Seattle, Wash.; 3) any of the AppDirector or AppXcel devices manufactured by Radware Ltd of Mahwah, N.J.; 4) any application acceleration and\/or security related appliances and\/or software manufactured by Cisco Systems, Inc. of San Jose, Calif.","The appliance , vServer  and\/or load monitor  computes, calculates or otherwise determines a load  for each service  based on any of the metrics from the appliance collected metrics  and\/or device provided metrics . The appliance  may use a weight A-N and a threshold A-N for each of the metrics used in the determination of the load . In one embodiment, the appliance  establishes a weight  and\/or a threshold . In other embodiments, a user establishes a weight  and\/or a threshold . For example, in some cases, if a user does not specify a weight for a plurality of metrics, the appliance equally weights each metric. In one example embodiment, the appliance  determines the load  for each service as follows:\n\nSum(weight of metric\/established ceiling value of metric)*(obtained value of metric\/established ceiling value of metric))\/Sum(weights))\n","In some embodiments, a metric value may be based on a range of 0-100, or absolute range. In other embodiments, a metric value may not be based on a range of 0-100 or is otherwise relative to the type of metric and possible range of values. For example, a metric identifying a number of connections may have a ceiling or predetermined maximum value of 10,000. In one of these embodiments, the appliance establishes a ceiling value or predetermined upper limit for the metric value. In another of these embodiments, a user via the configuration interface  establishes a ceiling value or predetermined upper limit for the metric value. In further embodiments, the established ceiling value may comprise a value less than the actual maximum value for the metric or upper limit of the range value. For example, a user may specify or configure a relative range value based on a desired operational or performance range of a metric.","In some embodiments, if a metric of a service exceeds a user or appliance provided threshold, the service may be excluded from the load determination or otherwise from a load balancing decision. In other embodiments, if all the metrics of a service exceeds their corresponding thresholds, the service may be excluded from the load determination or otherwise from a load balancing decisions. In yet another embodiment, even if a service exceeds the threshold(s) for one or more of the metrics, the service may be considered in the load determination or otherwise for load selection. In some cases, a client session may be identified as persistent or sticky to a vServer  or service . In these cases, if a request for the client's sessions is received by the appliance, the appliance may provide the request to a vServer  or service  although a metric for the vServer or service has been exceeded.","In still other embodiments, if a threshold of a metric of a service or virtual server has been exceeded, the appliance may, in response to the threshold being exceeded, redirect the client making the request to another resource. In one embodiment, the appliance may transmit a URL to the client comprising the address of a server  or service  such that the client may bypass the appliance  and access the server  or service  directly. In one embodiment, the appliance may transmit a URL to the client comprising the address of a second appliance  or another device. In still another embodiment, the appliance  may redirect the client request to a second appliance, device, service or server on behalf of the client.","In some embodiments, if a threshold of a metric of a service or virtual server has been exceeded, the appliance may, in response to the threshold being exceeded direct a client request to a second virtual server or service. In one embodiment, a second virtual server may be a backup to a primary virtual server. Upon detection of the threshold being exceeded, the appliance may spillover requests and connections to a second virtual server.","Although the load  is generally discussed in view of the above equation, the appliance may use any type and form of load calculation, weighted or not weighted. In some embodiments, the appliance  determines the load using an average of metric values. In other embodiments, the appliance  determines the load  using any derivative value of a metric. In another embodiment, the appliance  determines the load  using any statistical measure of a metric. In still another embodiment, the appliance  determines the load  using any function or computation of a metric. In yet other embodiments, the appliance  may determine a load  for each metric. In these embodiments, the appliance  may aggregate, compare or otherwise compute an load  based on any type and form of aggregation of a metric's contribution to a load of a service.","In some embodiments, a user configures multiple monitors  for a service . In these embodiments, the load  on the service  is a sum of the load of all the monitors. In one embodiment, the sum of the load from multiple monitors  is weighted. The appliance may assign a monitoring  a weight. A weight may comprise an integer, decimal, or any other numeric indicator. In some embodiments, a user may configure via the configuration interface  the weight corresponding to a monitor . In some embodiments, all monitors  may be assigned equal weight. In other embodiments, a plurality of monitors  may each be assigned different weights. The weights may be assigned to the monitors based on any criteria indicating relative importance, including without limitation the appliance or user determination of the relative importance or value of the monitor in view of the service, reliability of the monitoring mechanism, and the frequency of monitoring.","In one embodiment, a monitoring agent  may be assigned a weight based on the relative importance of the service monitored by the appliance. For example, if most user requests in an environment are HTTP requests, a monitoring agent monitoring HTTP availability of a server  might be assigned a weight of 10, while a monitoring agent monitoring FTP availability of a server  might be assigned a weight of 3. Or, for example, if an administrator placed a high priority on UDP applications, a monitoring agent monitoring UDP availability of a server may be assigned a weight of 20, while a DNS monitoring agent may be assigned a weight of 5.","In some embodiments, an appliance  may compute a sum of the weights of the monitoring agents currently reporting a network service  as operational. For example, if five monitoring agents, each assigned a weight of 30, are monitoring a network service , and three of the five monitoring agents report the network service  as available, the appliance may determine the sum of the monitoring agents currently reporting the network service  as operational to be 90. Or for example, if only two monitoring agents, one with a weight of 20 and the other with a weight of 40, are reporting a server  as available, the appliance may compute the sum of the monitoring agents currently reporting a server  as operational to be 60.","The appliance  also includes a configuration interface  providing any type and form of interface mechanism for a user, application or system to communicate with the appliance . In one embodiment, the configuration interface  includes a command line interface B. In another embodiment, the configuration interface  includes a graphical user interface A. In some embodiments, the configuration interface  includes an application programming interface (API) or development toolkit for an application, program or script to communicate with the appliance .","In some embodiments, the appliance  displays the configuration interface  via a display of the appliance. In other embodiments, a configuration terminal or device  connects to or communicates with the appliance  and displays the configuration interface . For example, the configuration device  or terminal may connect to the appliance  via a port and IP address of the appliance . The appliance  may provide a web service listening on the port and IP address to serve a page to the user. The served page may provide a user interface for configuring the appliance . In other embodiments, the configuration terminal  may connect and communicate with the appliance  via any type and form of connection, including a monitor port, serial port or USB connection.","Via the configuration interface , the appliance  may receive information identifying user selected metrics  to use in determining the load  for one or more services. In one embodiment, the user identifies or selects a metric from a plurality of appliance collected metrics . In another embodiment, the user identifies or selects a metric from a plurality of device provided metrics . In some embodiments, the user selects one or more metrics from the appliance collected metrics  and one or more metrics from the device provided metrics . The appliance  may also receive via the configuration interface  information identifying a user's selection or designation of a weight  for a metric. For example, a user may provide a value of a weight  for a metric. In some embodiments, the appliance  receives information identifying a user provided value for a threshold .","In operation, the appliance  may use user selected metrics  and user provided weights  and thresholds  for determining the load . In another embodiment, the appliance may use any appliance established metrics from the appliance collected metrics  for determining the load. In one embodiment, a user establishes a weight and\/or a threshold for an appliance provided metric. So although the metric may not be user selected in some embodiments, the user may control or configure the weights  and\/or thresholds  for the metrics . In other embodiments, the appliance may use any combination of user selected metrics  and appliance established metrics  for determining the load. In another embodiment, the appliance  may use any combination of user provided weights  and\/or thresholds  and appliance provided weights  and\/or thresholds  for any metric used for determining the load .","Referring now to , an embodiment of steps of a method for load balancing one or more services is depicted. In some embodiments, the appliance  may load balance one or more services using appliance collected metrics  and device provided metrics . In other embodiments, the appliance  load balances one or more services based on user selected metrics, weights and\/or thresholds. In brief overview, at step  of method , multiple metrics are identified for load balancing a plurality of services A-N by the appliance . At step , in some embodiment, the appliance  receives user defined metrics to collect or monitor for a service . At step , the appliance receives user selected metrics from the set of identified metrics. The user may also identify weights and\/or thresholds for the metric. At step , the appliance determines a load for each of the services based on the user selected metric information. At step , the appliance receives a client request to access a service. At step , based on the load determination, the appliance determines a service from the plurality of services to transmit or forward the client request. At step , the appliance transmits the client's request to the appliance selected service. In further details, at step , the appliance  identifies metrics to collect and monitor for load balancing one or more services A-N. In one embodiment, the appliance  provides or identifies one or more appliance collected metrics . For example, a table  may identify metrics collected by the appliance . In another embodiment, the appliance  provides one or more predetermined tables of device provided metrics , such as for an appliance of Citrix, F5, Cisco, or Radware. In other embodiments, the appliances  identifies one or more metrics to collect via a network management protocol in an object or variable database, such as an MIB  for SNMP. In one embodiment, the appliance provides a preconfigured or preinstalled MIB  for a predetermined device or service , such as an application.","In some embodiments, the appliance  queries a device or service  to determine available metrics to collect and\/or monitor. For example, in one embodiment, the appliance  queries a device or service for available object identifiers A-N. In another embodiment, the appliance  uses a network management protocol, such as SNMP, to query for the identification of objects in a MIB . In yet another embodiment, a user via the configuration interface  identifies one or more object identifiers A-N to collect and\/or monitor from a device or service , such as an application.","In some embodiments, at step , a user specifies or defines a metric for the appliance to collect and\/or monitor for a service . For example, the user may specify via the configuration interface  an object identifier in a MIB . In other embodiments, a user may configure or implement a load monitor  to collect and\/or monitor a user-defined or specified metric. In yet another embodiment, a user, such as a network administrator, may configure, specify or implement one or more object identifiers  in a MIB  deployed on a server . In some embodiments, the user may implement an application, program, script, service or other set of executable instructions to collect metrics on the server  and store values for the metrics in the MIB  on the server . For example, the user may execute a program or script to monitor metrics of a service  on the server  and update the MIB  with the collected values.","The manager  on the appliance  may query the agent  on the server for information and\/or values of the metrics stored in the server's MIB  for the service .","At step , the appliance  receives information identifying a selection by a user of one or more metrics identified via the appliance. In some embodiments, a user via the configuration interface  selects one or more metrics provided via the appliance  to use for load balancing a server . In one embodiment, the appliance  provides for selection by the user via the configuration interface  any one or more of the appliance collected metrics  or device provided metrics . A user may configure the appliance  via a command line interface B or graphical user interface A to use one or more user selected metrics  for determining a load  or otherwise for load balancing services A-N by the appliance .","In one embodiment, the appliance  receives information identifying that the user selected one or more appliance collected metrics . In another embodiment, the appliance  receives information identifying that the user selected one or more device provided metrics . In yet another embodiment, the appliance  receives information identifying that the user selected one or more appliance collected metrics  and one or more device provided metrics .","Furthermore, via the configuration interface , the appliance  may receive information identifying a user's designation or establishment of a weight  for a metric. In one embodiment, the appliance  receives a user's identification of a weight  for a user selected metric . In another embodiment, the appliance  receives a user's identification of a weight  for an appliance established metric . In other embodiments, the appliance  may receive information identifying a user's designation or establishment of a threshold  for a metric. In one embodiment, the appliance  receives a user's identification of a threshold  for a user selected metric . In another embodiment, the appliance  receives a user's identification of a threshold  for an appliance established metric .","At step , the appliance determines a load for each of the one or more services. In one embodiment, a load monitor  collects and\/or monitors one or more of the user selected metrics  for a service. In another embodiment, the load monitor  collects and\/or monitors appliance collected metrics . In some embodiments, a load monitor  collects metrics via a network management protocol, such as SNMP. In yet another embodiment, multiple load monitors A-N collect and\/or monitor metrics for a service . In one embodiment, although a user selected one or more metrics  for collecting and\/or monitoring a service , the appliance  collects and monitors any one or more appliance established metrics , such as number of connections, response time, bandwidth, and number of packets, for the service . In some embodiments, a vServer  determines the load  for each service  via metric information collected and monitored by a load monitor . In another embodiment, the load monitor  determines the load  for the service  being monitored. The appliance  and\/or load monitor  may determine the load  using a user selected metric  weighted by a user designated weight . In some embodiments, the appliance  and\/or load monitor  determines the load  using a plurality of user selected metrics  weighted by user designated weights . In yet another embodiment, the appliance  and\/or load monitor  determines the load using a user selected metric  and user identified weight  and an appliance established metric  and an appliance established weight . In further embodiments, the appliance  determines the load  by summing a weighted load for each metric (user and\/or appliance) used for the service .","For the embodiment of multiple monitors A-N per service , the appliance  may determine the load for the service by assigning a weight to each monitor and computing weighted load across all the monitors . In other embodiments, the appliance  and\/or load monitor  determines a load for a service  at a predetermined frequency, such as every 1 msec. or every 1 sec.","In some embodiments, a load monitor  determines that a metric for a service  has reached or exceed a threshold . In other embodiments, a load monitor  determines that a metric for a service  is within a threshold . In one embodiment, the load monitor  uses an appliance established or provided threshold for a metric. In another embodiment, the load monitor  user a user specified or configured threshold .","At step , the appliance  receives a request from a client to access a service. In one embodiment, a virtual server or vServer  intercepts or otherwise receives a request from the client. In some embodiments, the virtual server  transparently intercepts the client's request to a service  or server . In other embodiments, a client  transmits the request to the vServer . In another embodiment, the vServer  determines from the request that the request is for one or more services under management by the appliance . In one embodiment, the vServer  intercepts or receives the request via a SSL VPN connection between the client and the appliance .","At step , the appliance  determines which of the services to direct the client request based on determination of the load  for each service . In one embodiment, the vServer  directs the request responsive to one or more load monitors . In some embodiments, a vServer  directs, forwards or otherwise transmits the request to a service  with the least or smallest load. In one embodiment, the vServer  directs, forwards or otherwise transmits the request to a service with one of the lower determined loads. In some embodiments, the vServer  directs, forwards or otherwise transmits the request to the service previously handling requests from the client . In one embodiment, the vServer  transmits the request to the previously used service if the load of the service is within a predetermined threshold. In some embodiments, the vServer  transmits the request to the first available service in a list with a determined load within a predetermined threshold.","In another embodiment, a vServer  directs, forwards or otherwise transmits the request to a service  using a round robin technique, or weighted round robin. In yet another embodiment, the vServer  directs the request to a service based on one or more metrics, such as appliance collected metrics  or device provided metrics . For example, in some embodiments, the vServer  directs the request to a service based on one or more of the following: least response or round trip time, least number of connections, least number of packets, and least bandwidth. In yet other embodiments, the vServer  directs the request to a service based on one or more device provided metrics , such as CPU, memory and disk resource usage. In another example, the vServer  directs the request to a service based on service resource usage on the server, such as system resource usage by an application or session of the application.","In some embodiments, a vServer  may not direct a request to a service  in which a metric for the service  has exceeded a threshold , such as a user configured threshold . In other embodiments, a vServer  may not direct to a request to a service  if more than one threshold  of the metrics for the service has been exceeded. In yet another embodiment, a vServer  may direct a request to a service  if a metric threshold  has been reached or exceeded. For example, if one metric threshold  of a plurality of thresholds  has been exceeded, then the vServer  may still direct the request to the service if the other metric thresholds have not been reached.","In still other embodiments, the appliance  may determine from load monitoring that a metric of a first vServer A has reached a threshold . In response to the determination, the appliance  may spillover management of the services A-N to a second virtual server, or vServer B. In one embodiment, the second virtual server B may be a backup server. In some embodiments, the second virtual server B is established in response to detecting the first virtual server A has reached one or more thresholds. In another embodiment, the second virtual server B may be established and running on the appliance .","At step , the appliance transmits the client request to the service determined by the appliance at . In one embodiment, the appliance  transmits the client request in a manner transparent to the service  such that the request appears to have been sent from the client instead of the appliance . For example, the appliance  may act as a transparent or intercepting proxy for the client . In other embodiments, the appliance  acts as a non-transparent proxy and transmits the request to the service on the client's behalf. In some embodiment, the vServer  transmits the request to a service . In other embodiments, a backup vServer  transmits the request to the service. In yet other embodiments, a second vServer  transmits the request to the service.","G. Global Server Load Balancing (GSLB) Among Heterogeneous Devices","Referring now to , systems and methods for load balancing a plurality of heterogeneous devices are depicted. The appliance  described herein may be deployed to load balance a plurality of services and load balancing devices. A first appliance  may communicate with a second appliance A of the same type via a predetermined metric exchange protocol (MEP). The first appliance  obtains via the MEP protocol metrics to use for determining a load for the second appliance A. Other devices of a different type than the first appliance may be deployed in the network to perform local load balancing, such as for a server farm. These devices may not communicate via the MEP protocol of the first appliance . Instead, these other device may provide metrics via a network management protocol, such as a Simple Network Management Protocol (SNMP). Using the techniques described in conjunction with , the first appliance  obtains metrics from these heterogeneous devices via the network management protocol. With metrics obtains via the MEP protocol from devices of the same type and metrics obtained via a network management protocol from device of a different type, the appliance  may uses these combined metrics to determine a load across these heterogeneous devices and to direct request to one of the devices based on the load.","Referring now to , an example embodiment of a network environment for load balancing heterogeneous devices, including servers and local or other load balancing devices, is depicted. In brief overview, a network environment includes a plurality of different types of load balancing devices and servers. The appliance  is configured as a global load balancing device to load balance the plurality of load balancing devices and servers. Each of the load balancing devices may perform local load balancing to one or more services A-N. For example, a first set of load balancing appliances A-N of the same type may perform local load balancing of services or servers on a first network . These appliances A-B may be of the same type of the global load balancing appliance . Or in some cases, local load balancing appliance A-N are designed and constructed to communicate metrics and other information via a metric exchange protocol . A second type of load balancing appliances A-N may perform local load balancing for one or more services A\u2032-N\u2032 on a second network \u2032. These load balancing appliances A-N may be of a different type than the first type of appliance A-N and\/or the global load balancing appliance . The appliance A-N may operate or execute one or more virtual servers or vServers A-N. Appliance A-N may not be designed to communicate via the MEP protocol  of appliances -N. Instead these appliances A-N may provide metrics via a network management protocol, such as SNMP. The global load balancing appliance  may also perform load balancing for one or more services or servers, such as a server farm . Each of the servers or services may be of a different type, such as an HTTP service and an FTP service.","In view of , the plurality of appliances, servers, and services may be deployed in a hierarchical fashion. The first appliance  may be the global load balancing appliance at the top of the hierarchy to manage a plurality of other appliances A-N, A-N and servers. In one case, the appliance  manages one or more servers  or service A-N directly. In another case, the appliance  manages one or more appliances A-N, A-N, which in turn manages one or more servers  or services A-N. An appliance managed by the first appliance  may manage a second appliance, which in turns manages one or more services or servers.","By way of example in view of various load balancing products, the global load balancing appliance  may be any of the product embodiments referred to as NetScaler manufactured by Citrix Systems, Inc. The appliances A-N may also be a NetScaler device configured to perform local load balancing of one or more services A-N. As the appliances A-N are of the same type as the global load balancing appliance , these appliances are designed and constructed to communicate via a predetermine protocol or and\/or communication model referred to as metric exchange protocol. The appliance A-N may be configured to provide metric information at a predetermined frequency to appliance . One or more of the appliances A-N may comprise another type of load balancing device, such as a BigIP load balancing device manufactured by F5 Networks, Inc. Another one or more of the appliances A-N may comprise a different type of load balancing device, such as the AppDirector appliance manufactured by Radware, LTD. In some cases, one or more of the appliances A-N may comprise a Cisco load balancing device. In other cases, one or more of the appliances A-N may comprise a Nortel load balancing device. Any one or more of these appliances A-N may not be designed or constructed to communicate with appliance  via the MEP protocol . Although the example is generally described above as Citrix NetScaler appliance  providing global load balancing device, any other type of load balancing device may be used.","Instead of using MEP , each of these different appliances A-N may provide metric information via a network management protocol, such as SNMP. As illustrated in , these appliances  may include an agent  for providing object identifiers A-N via an MIB . Further to this example embodiment and as discussed in conjunction with , the appliance  using a manager\/agent communication model may query any of these appliances A-N via a network management protocol to identify, collect and monitor objects identified via the MIB . In some cases, the appliance  may use SNMP to communicate with one or more appliance A-N. In other cases, the appliance  may use another type of network management protocol to communication another one or more of the appliances A-N. In still another case, the appliance  may use a third type of network manager protocol to communicate with a further set of one or more appliances A-N.","Appliances A-N may be considered homogenous or the same type of appliance or device as appliance . In one embodiment, the appliances A-N is the same product family of the appliance . In another embodiment, the appliance A-N is a version of the same device of the appliance . In one case, the appliances  and A-N are manufactured by the same company. In some embodiments, the appliances A-N and appliance  are configured, designed and constructed to communicating using a predetermined protocol and\/or communication model. In one embodiment, the appliances A-N and appliance  are configured, designed and constructed to use a proprietary or custom protocol and\/or communication model.","Appliances A-N may be considered heterogonous or a different type of appliance or device as appliance . In one embodiment, the appliances A-N are manufactured by a different company than appliance . In some embodiments, the appliances A-N and appliance  are not specifically designed to communicate using a predetermined protocol and\/or communication model. In one embodiment, the appliances A-N and appliance  are not configured, designed and constructed to use a proprietary or custom protocol and\/or communication model. In some cases, appliances A-N use a network management protocol instead of using a proprietary protocol for providing metrics to other devices, applications or services.","Referring now to , an embodiment of the appliance  for identifying, collecting and monitoring metrics obtained from heterogeneous network devices and servers with a plurality of protocols is depicted. The appliance  may have one or more virtual servers A-N configured, constructed or designed to provide load balancing of the plurality of devices over one or more networks , \u2032, \u2032. The appliance  may use one or more load monitors A-N to monitor the load of each of the heterogeneous devices. In one embodiment, the appliance  monitors the load of appliances A-N. The appliance  and\/or load monitor  uses the MEP protocol  to obtain metrics from one or more of the appliances A-N. In another embodiment, the appliance  monitors the load of appliance A-N. In other embodiments, the appliance  monitors the load of one or more serves . In still another embodiment, the appliance  monitors the load among servers in a server farm . The appliance  may use one or more network management protocols to obtain metrics from server , server farm , and appliances A-N.","The appliance  collects metrics via the MEP protocol  and network management protocols from a wide variety of heterogeneous devices, such as appliances A-N and servers , and homogenous devices A-N. The appliance  stores the metrics in a GSLB (Global Server Load Balancing) or global metrics table  comprising any type and form of data storage element, such as a file, database, object or data structure in memory and\/or on disk. The vServers  and\/or load monitors  use one or more of the metrics from the GSLB metrics  to provide global load balancing of servers, server farms, virtual servers, and load balancing devices.","The appliance  may collect and monitor metrics obtained via a MEP protocol  from one or more appliance A-N and store them in a MEP based metrics table A-N. In one embodiment, the appliance  uses a first type or first version of a MEP protocol  to obtain metrics from a first appliance A and stores the metrics in a first table A. In another embodiment, the appliance  uses a second type or second version of a MEP protocol \u2032 to obtain metrics from a second appliance N and stores the metrics in a second table N.","The appliance  may collect and monitor metrics from appliances A-N using any type and form of network management protocol (NMP) and store the metrics in a NMP based metrics table A-N. In one embodiment, the appliance  uses a SNMP protocol and communication model to obtains metrics from a second type of appliance A and stores the metrics in a NMP based metric table A. In some embodiments, the appliances  uses a second type of network management protocol, such as CIMP, to obtain from a second or third type of appliance N and stores the metrics in a NMP based metric table N. In some embodiments, appliance A is a different type of appliance than appliance N but both appliances support the same network management protocol for providing metrics.","The appliance  may also collect and monitor metrics from a server  and\/or server arm  using any type and form of network management protocol (NMP) and store the metrics in a NMP based metrics table A\u2032-N\u2032. In one embodiment, the appliance  uses the same network management protocol, such as SNMP, for obtaining metrics from a server  as used for obtaining metrics from one of the appliances A-N. In another embodiments, the appliance  uses a different type of network management protocol for obtaining metrics from the server than is used by the appliance  for obtaining metrics from an appliance .","The appliance  may store metrics for the GSLB metrics  in a separate table for each device. For example, the appliance  may store metrics for a first appliance A in a first metrics table A, and metrics from a second appliance A in a second metrics table A. The appliance  may store metrics from a server  in a server metrics tables A\u2032. In another embodiment, the appliance  stores metrics from a server farm  to a metrics table N\u2032 for the server farm.","The appliance  may store metrics for the GSLB metrics  in a separate table for each type of protocol. For example, the appliance  may store all MEP based metrics from a plurality of appliances A-N in a first metrics table. In some embodiments, the appliance  stores a first type or version of MEP protocol based metrics in a first table A and a second type or version of an MEP protocol in a second table N. The appliance  may store all SNMP based metrics from one or more appliances A-N in a second metrics table. In another example, the appliance may store metrics from a second type of network management protocol from one or more appliances A-N to a third metrics table.","The GSLB metrics  may comprise any type and form of data, statistics, status or information related to or associated with the operational and\/or performance characteristics of the appliance , , a server  or server farm . The global metrics  may comprise any type and form of data, statistics, status or information related to the network of the appliance ,, and\/or server  or server farm . The global metrics  may comprise any type and form of data, statistics, status or information related to the services A-N load balanced by the appliance A-N, A-N. In some embodiments, the global metrics  comprises operational and\/or performance data on any client  and\/or server  connected to the appliance A-N, A-N. In one embodiment, the appliance A-N, A-N determines operational and\/or performance information about any client  or server  it is connected to or servicing, and creates metrics on these clients  and\/or server . In this embodiment, the appliance A-N, A-N may provide these metrics to the global load balancing appliance .","In some embodiments, the operational and\/or performance characteristic provides a metrics includes information on any of the following for an appliance or server 1) load; 2) numbers and types of connections, 3) resource usage, 4) resource availability, 5) number of requests outstanding, 6) number of requests transmitted, 7) number of clients servicing, 8) response time information, including average and historical response times, 9) errors, status, performance or bandwidth of a connection, and 10) number of sessions, and states or status thereof. In another embodiment, the metrics  includes information on any IP or network layer information of the appliance A-N, A-N, or the connections of the appliance A-N, A-N, or of the clients and\/or servers serviced by the appliance A-N, A-N. For example, the information provided via metrics  may include a routing table of the appliance A-N, A-N for performing network address translation, such as for an SSL VPN connection.","Via the configuration interface , a user may select one or more metrics  from the global metrics  to use for load monitoring and determining the load . The appliance  may receive information identifying a user selection of one or more metrics from the global metrics . The appliance may receive a user selection of one or more MEP based metrics  of a first type of appliance. The appliance may receive a user selection of one or more NMP based metrics  of a second type of appliance. The appliance may also receive a user selection of one or more NMP based metrics \u2032 for any server or server farm. The user may select any combination of metrics  from the global metrics  to configure the appliance  to perform load balancing of heterogeneous devices according to the user selected metrics.","In one embodiment, the appliance  uses appliance established metrics in combination with any one or more of the user selected metrics  for load balancing. For example, the appliance  may collect and monitor the number of connections, response time, bandwidth and numbers of packets for any appliance ,  or server  and use these metrics with any user selected metrics for load balancing. Via the configuration interface  and as also discussed in conjunction with , the appliance  may receive information from the user identifying, designating or establishing weights  and\/or thresholds  for any appliance established metrics and\/or user selected metrics.","Referring now to , an embodiment of steps of a method  for performing global load balancing among heterogeneous devices is depicted. In brief overview, at step , the appliance  identifies a plurality of metrics from heterogenous devices to use for load balancing by the appliance. At step , the appliance  obtains metrics from one or more homogenous appliances A-N or appliances of the same type as the first load balancing appliance . At step , the appliance  obtains metrics from heterogenous devices, such as appliances A-N and\/or servers , via a network management protocol, such as SNMP. At step , the appliance determines a load of one or more of the plurality of appliances, servers, and\/or service managed by the appliance  based on the metrics collects at step  and step . At step , the appliance receives a client request to access a service. At step , the appliance determines based on the load one of the appliances A-N, A-N or one of the servers to which to direct the client request. At step , the appliance  transmits the request to the device, appliance or service selected in accordance with the determined load.","In further details, at step , the appliance  identifies metrics to collect and monitor for load balancing one or more appliances A-N, A-N, servers  or services A-N. In one embodiment, the appliance  provides or identifies one or more appliance collected metrics  as described in conjunction with . For example, a table  may identify metrics collected by the appliance . In another embodiment, the appliance  provides one or more predetermined tables of appliance provided metrics  or , such as for an appliance of Citrix, F5, Cisco, or Radware. In other embodiments, the appliances  identifies one or more metrics to collect via a network management protocol in an object or variable database, such as an MIB  for SNMP. In one embodiment, the appliance provides a preconfigured or preinstalled MIB  for a predetermined appliance A-N, A-N, server  or service .","In some embodiments, the appliance  queries an appliance A-N, A-N, server  or service  to determine available metrics to collect and\/or monitor. For example, in one embodiment, the appliance  queries an appliance, server or service for available object identifiers A-N. In another embodiment, the appliance  uses a network management protocol, such as SNMP, to query for the identification of objects in a MIB . In yet another embodiment, a user via the configuration interface  identifies one or more object identifiers A-N to collect and\/or monitor from a appliance A-N, A-N, server  or service . In some embodiments, the user via the configuration interface  identifies one or more of the global metric  to collect and\/or monitor from any one of the heterogenous device under management.","At step , the appliance  collects and\/or monitors metrics A-N from one or more appliances A-N via a MEP protocol . In some embodiments, the appliances A-N are of the same type or homogenous with the appliance . In one embodiment, the appliance  collects and\/or monitors metrics  established, determined or otherwise selected by the appliance. In another embodiment, the appliance  collects and\/or monitors metrics  established, determined or otherwise selected by a user. In some embodiments, the appliance  uses a first type or version of the MEP protocol  to collect metrics from a first appliance A and a second type or version of the MEP protocol \u2032 to collect metrics from a second appliance N.","One or more load monitors or monitoring agents A-N of the appliance  may be configured, constructed or implemented to identify, collect and\/or monitor metrics via MEP protocol  from one or more appliances A-N. A first load monitor A may collect and monitor metric values from a first appliance A. A second load monitor N may collect and monitor metric values from a second appliance N. A third load monitor  may collect and monitor metric values from the first and second appliances A-N. A load monitor A-N may collect and\/or monitor metrics on any type of schedule or predetermined frequency. In some embodiments, the load monitor  collects metrics responsive to the detection of an event.","At step , the appliance  collects and\/or monitors metrics A-N\u2032 from one or more appliances A-N, servers or a server farm any type and form of network management protocol. In some embodiments, the appliances A-N are a different type or heterogeneous with the appliance . In other embodiments, one or more of the appliances A-N are of a different type or heterogenous with one or more of the other appliances A-N. In one embodiment, the appliance  collects and\/or monitors metrics  established, determined or otherwise selected by the appliance. In another embodiment, the appliance  collects and\/or monitors metrics  established, determined or otherwise selected by a user. In some embodiments, the appliance  uses a first type or version of a network management protocol, such as SNMP, to collect metrics from a first appliance A and a second type or version of a network management protocol, SNMP or CIMS, to collect metrics from a second appliance N.","One or more load monitors or monitoring agents A-N of the appliance  may be configured, constructed or implemented to identify, collect and\/or monitor metrics via a network management protocol from one or more appliances A-N. A first load monitor A may collect and monitor metric values from a first appliance A. A second load monitor N may collect and monitor metric values from a second appliance N. A third load monitor  may collect and monitor metric values from a server  or server farm . In other embodiments, multiple monitors A-N may collect and\/or monitor metrics from a plurality of appliances A-N and\/or servers . A load monitor A-N may collect and\/or monitor any of the metrics A-N on any type of schedule or predetermined frequency. In some embodiments, the load monitor  collects metrics A-N\u2032 responsive to the detection of an event.","At step , the appliance determines a load for each of the one or more appliances A-N, A-N, servers, server farm or services. In some embodiments, a vServer  determines the load  for each service  via metric information collected and monitored by a load monitor . In another embodiment, the load monitor  determines the load  for appliance, server or service being monitored.","The appliance , vServer  and\/or load monitor  may determine the load  using a user selected metric  weighted by a user designated weight . In some embodiments, the appliance  and\/or load monitor  determines the load  using a plurality of user selected metrics  weighted by user designated weights . In yet another embodiment, the appliance  and\/or load monitor  determines the load using a user selected metric  and user identified weight  and an appliance established metric  and an appliance established weight . In further embodiments, the appliance  determines the load  by summing a weighted load for each metric. For the embodiment of multiple monitors A-N per service , the appliance  may determine the load for an appliance, server or service by assigning a weight to each monitor and computing weighted load across all the monitors . In yet another embodiment, the appliance may determine the load for an appliance, server or service by assigning a weight to each of the appliance, service or service.","In some embodiments, a load monitor  determines that a metric  for an appliance, server or service has reached or exceeded a threshold . In other embodiments, a load monitor  determines that a metric  for an appliance, server or service is within a threshold . In one embodiment, the load monitor  uses an appliance established or provided threshold for a metric . In another embodiment, the load monitor  uses a user specified or configured threshold .","At step , the appliance  receives a request from a client to access a service. In one embodiment, a virtual server or vServer  of the appliance  intercepts or otherwise receives a request from the client. In some embodiments, the virtual server  transparently intercepts the client's request to a service  or server . In other embodiments, a client  transmits the request to the vServer . In another embodiment, the vServer  determines from the request that the request is for one or more services under management by the appliance . In one embodiment, the vServer  intercepts or receives the request via a SSL VPN connection between the client and the appliance .","At step , the appliance  determines which of the appliances A-N, servers  or services A-N to direct the client request based on determination of the load  for each of the appliances A-N, servers  or services A-N. In one embodiment, the vServer  directs the request responsive to one or more load monitors . In some embodiments, a vServer  directs, forwards or otherwise transmits the request to an appliance A-N, A-N, server or service with the least or smallest load. In one embodiment, the vServer  directs, forwards or otherwise transmits the request to an appliance A-N, A-N, server or service with one of the lower determined loads. In some embodiments, the vServer  directs, forwards or otherwise transmits the request to the s an appliance A-N, A-N, server or service previously handling requests from the client . In one embodiment, the vServer  transmits the request to the previously used an appliance A-N, A-N, server or service if the load for the appliance A-N, A-N, server or service is within a predetermined threshold. In some embodiments, the vServer  transmits the request to the first available an appliance A-N, A-N, server or service in a list with a determined load within a predetermined threshold.","In another embodiment, a vServer  directs, forwards or otherwise transmits the request to an appliance A-N, A-N, server or service using a round robin technique, or weighted round robin. In yet another embodiment, the vServer  directs the request to an appliance A-N, A-N, server or service based on one or more metrics, such as appliance collected metrics  or device provided metrics . For example, in some embodiments, the vServer  directs the request to an appliance A-N, A-N, server or service based on one or more of the following: least response or round trip time, least number of connections, least number of packets, and least used bandwidth. In yet other embodiments, the vServer  directs the request to an appliance A-N, A-N, server or service based on one or more device provided metrics , such as CPU, memory and disk resource usage. In another example, the vServer  directs the request to an appliance A-N, A-N, server or service based on resource usage on or of an appliance A-N, A-N, server or service.","In some embodiments, a vServer  may not direct a request to an appliance A-N, A-N, server or service in which a metric for the service  has exceeded a threshold , such as a user configured threshold . In other embodiments, a vServer  may not direct to a request to an appliance A-N, A-N, server or service if more than one threshold  of the metrics  for the appliance A-N, A-N, server or service has been exceeded. In yet another embodiment, a vServer  may direct a request to an appliance A-N, A-N, server or service even if a metric threshold  has been reached or exceeded. For example, if one metric threshold  of a plurality of thresholds  has been exceeded, then the vServer  may still direct the request to the appliance A-N, A-N, server or service if the other metric thresholds have not been reached.","In still other embodiments, the appliance  may determine from load monitoring that a metric of a first GSLB vServer A has reached a threshold . In response to the determination, the appliance  may spillover management of the appliances A-N, A-N, servers or services to a second GSLB virtual server, or vServer B. In one embodiment, the second virtual server B may be a backup GSLB server. In some embodiments, the second GSLB virtual server B is established in response to detecting the first GSLB virtual server A has reached one or more thresholds. In another embodiment, the second GSLB virtual server B may be established and running on the appliance .","At step , the appliance  transmits the client request to the appliance A-N, A-N, server or service identified by the appliance at . In one embodiment, the appliance  transmits the client request in a manner transparent to the appliance A-N, A-N, server or service such that the request appears to have been sent from the client instead of the appliance . For example, the appliance  may act as a transparent or intercepting proxy for the client . In other embodiments, the appliance  acts as a non-transparent proxy and transmits the request to the appliance A-N, A-N, server or service on the client's behalf. In some embodiment, the vServer  transmits the request to the appliance A-N, A-N, server or service. In other embodiments, a backup vServer  transmits the request to the appliance A-N, A-N, server or service. In yet other embodiments, a second vServer  transmits the request to the appliance A-N, A-N, server or service","Although the systems and methods of  are generally discussed in the context of global server load balancing, these systems and methods may be used for local load balancing. The appliance  may use metrics obtained from heterogeneous devices, servers, or services using a plurality of protocols to load balance one or more services or servers. Using the techniques described herein, the appliance  is configurable and flexible to obtain metrics from any network resource\u2014system, sub-system, application, service, device, etc\u2014using either a metric exchange protocol supported by the appliance and\/or a more general network management protocol supported by the network resource. Additionally, the appliance  is configurable to allow users to select any combination of available metrics from these heterogenous network resources to perform load monitoring and load balancing of one or more services.","H. Synchronizing Metrics Across a Plurality of Cores in a Multi-Core System","Referring now to , an embodiment of a system for synchronizing and consolidating information, such as metrics and statistics stored in counters locally across a plurality of packet engines (PEs) in a multi-core system is depicted. In brief overview,  illustrates an appliance , also referred to as an intermediary, comprising a consolidator  in communication with a plurality of cores A through N. Each of the cores A-N may further comprise a packet engine , such as a PE A. The consolidator  may includes a timer sync , and a plurality of storages A-N. Storages  may include a number of counter storages, such as a counters storage A, a counter adjustments storage B and a consolidated counters storage N. The PE  of each of the cores  of the appliance  further includes a timer , counter values , counter adjustments  and service values . The consolidator  may exchange information with each of the PEs on the plurality of cores A-N to consolidate metrics and statistics used by each of the PEs  and update each of the PEs  with the consolidated information. The updated information may include consolidated and updated counter values or parameters from each of the PEs . The consolidated and updated counter values may include, or correspond to various metrics and statistics used by the packet engines  for providing services, such as the load balancing of network traffic. PEs  of each of the cores  may use the consolidated and updated metrics and statistics to generate or calculate an updated set of service values . The updated set of service values  may include configuration and operation settings for implementing of the service, such as the load balancing. Using such a consolidation, each of the packet engines  of the multi-core system appliance  may instead use consolidated and up to date information for all the PEs  of the appliance  instead of using only the locally available information which may vary from PE  to another PE .","In detailed overview, a timer  may be any hardware, software or any combination of hardware or software for counting, monitoring or measuring time duration or duration of time intervals. Timer  may include any type and form of a logic circuit. Timer  may include functions, scripts, hardware units, components or devices for measuring time intervals or time durations. Timer  may be comprise functionality to be set or reset by the appliance . Timer  may include a logic circuitry to perform periodic actions that are used to count time. In some embodiments, timer  includes an oscillator. The oscillator may include a crystal in combination with digital or analog circuitry to perform periodic measurements or actions. Timer  may count, monitor or measure an amount of time lapsed, or an amount of time left. Timer  may count any duration of time, such as for example 0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.25, 3.5, 3.75, 4, 4.5, 5, 6, 7, 8, 9, 10, 20, 30, 50, 70, 90, 100, 200, 300, 500 and 1000 milliseconds. In some embodiments, timer  counts an amount of time left until an action occurs, an action is taken or a step is performed. The timer  may be used as trigger for another action or a process, such as for example sending a transmission or an instruction. Timer  may be a stand alone component anywhere on the appliance , and may communicate with any of the cores . In some embodiments, each of the cores  includes one or more timers . Timer  may operate or run within a packet engine , or within any other component of the appliance . Timer  may monitor, count or measure time on any component of an appliance  and may be used in any configuration with any other tasks and for a variety of purposes and functions.","Counter values , such as the counter values A, may include any type and form of a structure, object, table, array structure, setting or location for storing any type and form of metrics and statistics that correspond to a service or an operation performed by the appliance . Counter values  may comprise or store any type and form of values, parameters, configurations, data, settings, or any information about service or operations performed by an appliance . Counter values  may include metrics, statistics, configurations, measurements, parameters or information used by appliance  for performing, controlling or managing operations performed on the network traffic traversing the appliance . Counter values  may include metrics or statistics used by a packet engine  for load balancing of network traffic that traverses the packet engine . Counter values  may be stored into a storage or a memory. Counter values  may be organized into, or may include, one or more locations on a memory for storing information. Counter values  may be organized into arrays, such as arrays of structures. Arrays of the counter values  may include any type and form of information pertaining to network traffic traversing the appliance . An array of structures of the counter values  may include a plurality of structures, each of which may further include metrics, statistics, parameters, counter values, measurements or information corresponding to specific connections, sessions or communications between clients  and servers .","Counter values  may include any type and form of metrics or statistics used for performing an operation or a service, such as the load balancing. In some embodiments, counter values  includes a value corresponding to a number of data packets received by a multi-core appliance . The value corresponding to the number of data packets received may be updated as the packet engine  storing the counter values  receives additional data packets. In other embodiments, counter values  includes a value corresponding to a number of data packets sent by the multi-core appliance . The value corresponding to the number of data packets sent may be updated as the packet engine  storing the counter values  sends additional data packets. In further embodiments, counter values  includes a value corresponding to a number of data packets pending to be sent by the multi-core appliance . The value corresponding to the number of data packets pending to be sent may be updated as the packet engine  storing the counter values  sends or receives additional data packets. In still further embodiments, counter values  includes a value corresponding to a number of bytes of network traffic sent or received by the multi-core appliance . The value corresponding to the number of bytes sent or received may be updated as the packet engine  storing the counter values  sends or receives additional data packets. In yet further embodiments, counter values  includes a value corresponding to a number of current connections opened or maintained by the multi-core appliance . The value corresponding to the number of opened or maintained connections as the packet engine  storing the counter values  opens new connections or closes the some connections. In still further embodiments, counter values  includes a value corresponding to a number of transactions pending by the multi-core appliance . The value corresponding to the number of transactions pending may be updated as the packet engine  storing the counter values  implements or executes a transaction. In yet other embodiments, counter values  includes a value corresponding to a current load of the network traffic pending by the multi-core appliance . The value corresponding to the current load pending may be updated as the packet engine  storing the counter values  implements or executes some transactions or forwards or receives some network traffic. In yet further embodiments, counter values  includes a value corresponding to a bandwidth used or bandwidth available by the multi-core appliance . The value corresponding to the bandwidth used or the bandwidth available may be updated as the packet engine  storing the counter values  frees up some bandwidth or uses up some more bandwidth. Counter values  may further include any metrics or statistics regarding any number of transactions, messages, requests, responses, servers and clients connected to, applications and resources engaged or load balanced, number of streaming video or audio files load balanced, number of client to server sessions load balanced, number of websites opened, number of sessions or connections opened per one client or one server, or any other metrics or statistics that may be used for load balancing.","Inputs or values stored within the counter values  may further include any type and form of information about any network traffic traversing one or more PEs . In some embodiments, inputs stored within the counter values  include any value, parameter, measurement or a setting pertaining to a number of data of a certain format or type received by a PE  or an appliance . In further embodiments, inputs or values of the counter values  include information about a number of sessions of a certain type or protocol traversing one or more PEs , or by an appliance . In still further embodiments, counter values  inputs includes a number of requests sent by a client  via one or more PEs , or via the appliance . In yet further embodiments, counter values  values includes a number of responses sent by a server  via one or more PEs , or via the appliance . In yet further embodiments, counter values  values includes a number of data packets of a certain format or type, such as HTTP data packets, streaming video data packets etc. In still further embodiments, counter values  values includes information about current connections, such as type of connections such as TCP or UDP connections, type of sessions, type of sessions or connections over a certain protocol. In yet further embodiments, counter values  values includes information about a type or format of current load, such as the application network traffic load, streaming video network traffic load, HTTP network traffic load, HTML network traffic load, text or ascii network traffic load, ICA protocol network traffic load or any other type and form of network traffic load. In still further embodiments, counter values  values includes information about response times between communications of clients and servers traversing one or more PEs . In still further embodiments, counter values  values includes information about changes in counter values, measurements, parameters or data values. The changes may be any changes between a previous set of values and a current set of values. In some embodiments, changes include rates of changes of any of the inputs over any number of consolidations. Changes may also include differences between a set of counter values or parameters currently used by one or more PEs  for performing operations, or a set of values to be used for performing the same operations in the future. In some embodiments, counter values  inputs or values include information about instructions, configuration or operation settings of an appliance . Counter values  inputs or values may include any type and form of a value, such as a number, a signal, a character, a setting, a configuration point, a measurement or a symbol that may be used for managing, controlling or performing operations or services implemented by the appliance .","In one embodiment, counter values  of a PE  may be organized as an array comprising a plurality of structures each storing a plurality of values, configurations, parameters or data for a specific subset of network traffic traversing the PE . Each structure may be defined as a server_info type structure, such as an array of structures from an embodiment presented in table 1 below:",{"@attributes":{"id":"p-0315","num":"0328"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"An example of an array of structures for storing a set of values."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","typedef server_info"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003u16bits svc_index;"]},{"entry":[{},"\u2003\u2003u16bits reserved;"]},{"entry":[{},"\u2003\u2003u32bits fast_packets_rcvd;"]},{"entry":[{},"\u2003\u2003u32bits fast_packets_sent;"]},{"entry":[{},"\u2003\u2003u32bits fast_bytes_sent;"]},{"entry":[{},"\u2003\u2003u32bits fast_bytes_rcvd;"]},{"entry":[{},"\u2003\u2003u64bits fast_ttfb;"]},{"entry":[{},"\u2003\u2003u32bits fast_transactions;"]},{"entry":[{},"\u2003\u2003s32bits current_connections;"]},{"entry":[{},"\u2003\u2003cumulative_delta_stats_t deltastats;"]},{"entry":[{},"\u2003} server_info_t;"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Counter values  may include any number of arrays of structures. The arrays may include any number of structures, such as the structure presented in table . The arrays may include information, metrics, statistics, counter values, settings or measurements for any specific subset of network traffic traversing an appliance . In some embodiments, the subset of the network traffic is an instance of service or operation performed by the appliance . In other embodiments, the subset of network traffic are data packets exchanged between a client and a server in a single connection. In other embodiments, the subset of network traffic includes any exchanged information from one or more connections or sessions. The connections and sessions may be between any number of clients and servers. In further embodiments, the subset of network traffic includes information pertaining to network traffic from a single server  or a single service provided by the server . In some embodiments, the subset of network traffic may be network traffic of a client  or a group of clients . In still further embodiments, the subset of network traffic of the structure may correspond to an application or a service provided by one or more servers . Counter values  may include any number of arrays or arrays of structures that include any information about any subset of network traffic traversing the appliance , such as the services or connections of any clients , servers , application, service, resource or any other set of data of any other type traversing the appliance .","Counter adjustments , such as the counter adjustments A, may include any type and form of structure, object, table, array structure, metrics, statistics, adjustment, correction, change or update to any counter value . Counter adjustments  may include any type and format of input or a value as stored in a counter values . Counter adjustments  may include a structure, setting or location for storing any type and form of adjustment or correction values, parameters, configurations, data, settings, or any information about service or operations performed by an appliance . In some embodiments, counter adjustments  include changes, adjustments or amendments to any number of inputs or values within the counter values . Counter adjustments  may include differences in numbers or values between the current values of the counter values  and the correct values to replace the current values. Counter adjustments  may include updates to counter values, settings values or parameters used by the packet engines  to update or improve load balancing operations of the network traffic traversing the appliance .","Counter adjustments  may include any information, data, values, settings or parameters used by PE  for updating, adjusting or correcting Counter values . In some embodiments, counter adjustments  includes updates or adjustments for information about a number of bytes received by a PE  or an appliance . In further embodiments, counter adjustments  includes updates or adjustments to information about a number of bytes sent by one or more PEs , or by an appliance . In still further embodiments, counter adjustments  includes updates or adjustments to a number of requests sent by a client  via one or more PEs , or via the appliance . In yet further embodiments, counter adjustments  includes an update or adjustments to a number of responses sent by a server  via one or more PEs , or via the appliance . In yet further embodiments, counter adjustments  includes an update or adjustments to a number of data packets sent or received by one or more PE , or via the appliance . In still further embodiments, counter adjustments  includes an update or adjustment to information about current connections on one or more PEs . In yet further embodiments, counter adjustments  includes updates or adjustments for information about current load on one or more PEs . In still further embodiments, counter adjustments  includes an update or an adjustment for information about response times between communications of clients and servers traversing one or more PEs . In still further embodiments, counter adjustments includes updates or adjustments for information about changes in counter values, measurements, parameters or data values. The changes may be any changes between a previous set of values and a current set of values. Counter adjustments may be any difference, amendment or delta to any counter value , such as a parameter, number, measurement, setting, counter value or any other information used by one or more PEs  for performing operations on the network traffic traversing the appliance .","Service values  may include any type and form of counter values, parameters, settings, measurements or configuration points used by the PEs  for performing or implementing operations or services on the traversing network traffic. Service values  may comprise one or more values, parameters, settings or configuration values for performing service or operations, such as load balancing of the network traffic, formatting of the data packets, compression of the network traffic of any other operation performed by the appliance . Service values  may include one or more counter values . In some embodiments, service values  include one or more counter adjustments . In yet further embodiments, service values  include one or more timer  values. Service values  may include one or more values, parameters, settings, configuration points or instructions calculated from or determined by using counter values  and counter adjustments . Service values  may include any number of values, parameters, settings or configuration points calculated by using a combination of counter values  and counter adjustments . Service values  may be used by functions, programs, units, devices or components of the appliance  for performing any operation or any service on the network traffic traversing the appliance . The operations performed or implemented may include load balancing of the network traffic, network traffic management or control, redirecting of the network traffic, traffic compression, reformatting of the data packets traversing the appliance  or any other function or operation implemented by any component of the appliance . In some embodiments, service values  are used for determining the direction, redirection or flow of network traffic during the load balancing of the network traffic. Service values  may include information about the network bandwidth, number of data packets received or sent by the appliance, load of the network traffic received or sent by the appliance , number of open connections, number of open sessions, number of available sessions or connections, or any other information which may be used for load balancing of the network traffic. Service values  may be periodically recalculated or updated by the packet engine . The recalculated or updated service values  may be determined using the previously updated service values  along with a new set of counter adjustments . In some embodiments, service values  are determined by calculations performed using any number of inputs or values of the counter values  or counter adjustments . Furthermore, packet engine  may utilize additional inputs, parameters, values or information for determining service values . Service values  may be maintained up to date by the packet engine  or any other component of the appliance . The packet engine  or any other component of the appliance  may use the service values  for performing any function, operation or service on the network traffic traversing the appliance .","Consolidator  may be any hardware, software or any combination of hardware and software for gathering, consolidating, recalculating, updating and refreshing of any information, such as counter values, from a plurality of cores . Consolidator  may include any logic, circuitry, function, programs, executables, scripts, devices or any other functionality or means for updating, recalculating, consolidating or refreshing one or more values used by a plurality of packet engines  operating on a plurality of cores . Consolidator  may include one or more memories or locations in a memory storing counter values A-N, counter adjustments  or even service values  for each PE  of the plurality of cores . In some embodiments, consolidator  includes one or more memories or locations in a memory for storing timer  values, counter adjustments  or service values . Consolidator  may include any logic, scripts, programs, circuitry, hardware, software or a combination of hardware and software for transmitting, receiving or otherwise exchanging information with cores , or PEs . Consolidator  may execute as a part of one or more processing engines for processing, recalculating, consolidating or updating information, such as counter values , from a plurality of PEs . In some embodiments, consolidator  includes logic, scripts, programs or means for updating or sending updates to each of the counter values  of the plurality of PEs  on each of the cores . Consolidator  may synchronize, reset or set timers  on each of the cores . In some embodiments, consolidator  manages or controls the process of updating counter values  on each of the PEs . Consolidator  may use counter values  or adjustment values  from each of the PEs  to determine the updated or consolidated values .","Consolidator  may calculate or determine an updated or consolidated value for each parameter, setting or a value, such as a counter value . In some embodiments, consolidator  determines a specific updated or consolidated counter value using each of the corresponding counter values from each of the PEs  that correspond to the specific calculated value. For example, a consolidator  may receive a specific value from the counter values  from each of the PEs , each value identifying a number of data packets received by each PE  of the plurality of PEs . The consolidator  may then use the received specific value to calculate or determine an updated or a consolidated number of data packets received for the entire appliance . The consolidator  may send the consolidated number of data packets to each of the plurality of PEs . In some embodiments, the consolidator  may send a counter adjustment value  to each of the PEs  to update or consolidate the number of data packets for each of the plurality of PEs . Similarly, consolidator  may determine consolidated values for each counter value , such as the data packets received value, data packets sent value, data packets pending value, number of bytes sent, received or pending, number of transactions established, available or pending, number of current connections, current load value, response time value or any other counter value . In some embodiments, consolidator  determines counter adjustment values . For example, a consolidator  may use a plurality of counter values  to determine adjustment values  for adjusting a specific counter value  for each of the PEs  using the corresponding counter values  from each of the PEs . Consolidator may transmit the adjustment values  to each of the corresponding PEs . These adjustment values  may be used by the PEs  to recalculate the new service values  to be used for performing operation or service on the network traffic traversing the appliance .","Consolidator  may comprise one or more arrays, data structures, objects, arrays of structures or storage locations for storing and maintaining values, such as counter values  for each of the PEs  on the cores . In some embodiments, consolidator  includes a plurality of arrays of structures, such as a counter values  array of structures. In further embodiments, consolidator  includes one or more maps of values that correspond to values from the counter values  for each of the PEs . In yet further embodiments, consolidator  stores counter values  in one or more memory locations for the counter values.","Consolidator  may further comprise one or more arrays for maintaining counter adjustment values of each of the PEs  or for the appliance . Consolidator  may further include a consolidated array that includes values that are calculated and consolidated using counter values  from each of the PEs . Consolidator  may further include an array of structures for a total sum for each corresponding value from each of the PEs . In some embodiments, consolidator  uses the array of structures that comprises the total sum for each of the corresponding values from each of the counter values  to maintain the total counter values for the entire appliance . For example, the array of structures for total sum of the consolidator  may include a sum of all received data packets from each of the PEs . Similarly, the array of structures for total sum may also include a sum of all sent data packets from all PEs , a sum of all bandwidth used or bandwidth available from all PEs , a sum of all connections by all PEs  or any sum of any other corresponding set of values across the current values A-N for the appliance . In some embodiments, consolidator  uses arrays to maintain previous values for the counter values  and adjustment values . Consolidator  may use any number of arrays to maintain any combination the counter values A-N, counter adjustments A-N and service values A-N for all the PEs  from all the cores A-N.","Consolidator  may operate or run on any core  of the multi-core system. In some embodiments, consolidator  runs or operates on a master core  of a multi-core system. The master core  may use the consolidator  to consolidate and update information on each of the cores . The master core  may ping or send transmissions to each of the cores  periodically to update the counter values  on each of the cores . Consolidator  may exchange information with each of the cores  using inter-core communication, such as core to core messaging. In some embodiments, consolidator  uses shared memory which may be accessed by each of the cores  to share information with the PEs  operating on each of the cores . In some embodiments, consolidator  operating on a master core  of the plurality of cores  maintains storages A-N on the shared memory which may be accessed, written to and read from by each of the cores . In further embodiments, consolidator  from the master core  transmits to each of the PEs  operating on each of the cores  the information, which may include counter values , counter adjustments  or timer related information.","Storage  may be any means, device, unit, function or structure for storing or maintaining a plurality of sets of values, such as counter values A-N and counter adjustments A-N. In some embodiments, storage  includes a storage means or a structure for storing a plurality of array of structures, each comprising a set of values, parameters, measurements or settings. Storage  may include any hardware, software or a combination of hardware and software for maintaining one or more set of values, parameters, settings or data. Storage  may comprise a memory or a plurality of memories for storing one or more counter values A-N or adjustment values A-N. Storage  may be organized to hold a number of sections, tables, maps, arrays, array structures, or any other means to organize, set up, store and maintain a plurality of sets of values. In some embodiments, storage  includes an array comprising information that corresponds to a subset of network traffic traversing an appliance . The subset of network traffic may be any network traffic of a connection, a user session, a communication from a server  or a client , or any network traffic for a service or resource being accessed via the appliance .","In one embodiment, storage  includes an array of structures for maintaining adjustments or changes between the most updated set of values a set of values currently known or used by a PE . In some embodiments, such an array structure is a counter adjustments storage storing a set of adjustment values or corrections to be used by a PE  for updating counter values  of the PE . Such array of structures may also be referred to as delta array. In some embodiments, each of the elements in such an array may include a number of corrected values to replace the current counter values  of the PE . In other embodiments, each of the elements in such an array include changes or deltas between the current counter values  of the PE  and the correct values for the counter values . For example, an array may hold small increments or decrements to be added to, or subtracted from the counter values  of the PE  in order to correct the counter values  of the PE . An example of an array of structures for updating, adjusting or correcting a set of values is shown in table 2 below:",{"@attributes":{"id":"p-0327","num":"0340"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"An example of an array of structures for a set of values for adjusting or "},{"entry":"updating a set of values used by a Packet Engine 548."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","typedef struct cumulative_delta_stats"]},{"entry":[{},"{"]},{"entry":[{},"\u2003u64bits packets_rcvd;"]},{"entry":[{},"\u2003u64bits packets_sent;"]},{"entry":[{},"\u2003u64bits bytes_sent;"]},{"entry":[{},"\u2003u64bits bytes_rcvd;"]},{"entry":[{},"\u2003u64bits fast_ttfb;"]},{"entry":[{},"\u2003u64bits fast_transactions;"]},{"entry":[{},"\u2003s32bits current_connections;"]},{"entry":[{},"\u2003u64bits lrtm_response_time; \/* current counter *\/"]},{"entry":[{},"\u2003s32bits current_load;"]},{"entry":[{},"} cumulative_delta_stats_t;"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["660","660","650","200","660","660","650","660"]},"Counters storage A may be any type of storage  for generating, updating or maintaining counter values A-N from one or more PEs . Counter storage A may comprise any hardware, software or a combination of hardware and software for maintaining one or more set of values, metrics and statistics, as stored in counter values A-N. Counter storage A may comprise a memory or one or more locations in a memory for storing one or more of sets of values, such as counter values A-N or adjustment values A-N. In some embodiments, counter storage  maintains a plurality of sets of values corresponding to counter values A-N from each of the cores A-N. Counters storage A may include a plurality of arrays of structures, such as the arrays depicted in tables 1 and 2 for storing any set of values. Each of the plurality of arrays may correspond to a counter values  from a single one of a plurality of PEs . Counters storage A may further include logic, circuitry, hardware, software, a combination of hardware and software, a script, an executable or any other means for adjusting, rewriting or editing any one of the values in the counters storage A. In one example, counters storage A uses a script or an executable to rewrite a value in counter values  within the counters storage A. Counters storage A may maintain or edit any of the values, parameters, such as counter values A-N for each of the PEs . Counter storage A may maintain any number of previous values for each of the inputs of the counter values A-N to preserve a history of the values. Counter storage A may be refreshed or updated periodically as the consolidator  refreshes the counter values  or counter adjustments  from each of the PEs . The refresh or update may occur every 0.05, 0.1, 0.25, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5, 8, 10, 15, 20, 50 or 100 milliseconds. In some embodiments, refresh of any of the counter values  in the counters storage A occurs at any period, such as anywhere between every 0.01 millisecond to every 1 second. In some embodiments, the refresh or update occurs based on an event. An event may be a transmission from a PE  about a counter values  change on the PE . In some embodiments, the event may be a detection of change in one or more of counter values .","Counters adjustments storage B may be any type of storage  for generating and maintaining counter adjustments A-N for one or more PEs . Counters adjustments storage B may comprise any hardware, software or a combination of hardware and software for maintaining one or more set of values, such as the counter adjustments . Counters adjustments storage B may comprise a memory or one or more locations in a memory for storing one or more of sets of values, such as counter values A-N or adjustment values A-N. In some embodiments, counters adjustments storage B maintains a plurality of sets of values corresponding to counter adjustments  from each of the cores A-N. Counters adjustments storage B may include a plurality of arrays of structures, such as the arrays depicted in tables 1 and 2 for storing any set of values. Each of the plurality of arrays may correspond to a counter adjustments  value from a single one of a plurality of PEs . Counters adjustments storage B may further include logic, circuitry, hardware, software, a combination of hardware and software, a script, an executable or any other means for adjusting, rewriting or editing any one of the values in the counters storage A. In one example, counters adjustments storage B uses a script or an executable to rewrite a value in counter adjustments  values within the counters storage . Counters adjustments storage B may maintain or edit any of the values, parameters, such as counter adjustments A-N values for each of the PEs . Counters adjustments storage B may maintain any number of previous values for each of the inputs of the counter values A-N to preserve a history of the values. Counters adjustments storage B may be refreshed or updated periodically as the consolidator  refreshes the counter values  or counter adjustments  from each of the PEs . The refresh or update may occur every 0.05, 0.1, 0.25, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5, 8, 10, 15, 20, 50 or 100 milliseconds. The refresh of any of the values in the counters adjustments storage B may occur at any period, such as anywhere between every 0.01 millisecond to every 1 second. In some embodiments, the refresh or update occurs based on an event. An event may be a transmission from a PE  about a counter values  change on the PE . In some embodiments, the event may be a detection of change in one or more of counter values .","Consolidated counters storage N may be any type of storage  for generating and maintaining a consolidated set of metrics and statistics from the counter values A-N and\/or counter adjustments A-N from a plurality of PEs . Consolidated counters storage N may comprise any hardware, software or a combination of hardware and software for calculating, updating and maintaining the consolidated or combined values. Consolidated counters storage N may comprise a memory or one or more locations in a memory for storing one or more of sets of values, such as counter values A-N or adjustment values A-N. In some embodiments, consolidated counters storage N maintains a consolidated set of values that corresponds to a most updated set of values for each of the counter values A-N or counter adjustments A-N. In some embodiments, consolidated counters storage N maintains a total set of values that corresponds to a total sum of all counter values A-N or counter adjustments  from each of the cores A-N. Consolidated counters storage N may include a plurality of arrays of structures, such as the arrays depicted in tables 1 and 2 for storing any set of values. Each of the plurality of arrays may correspond to a consolidated set of values corresponding to a single one of a plurality of PEs  or all of the PEs  of the appliance . Consolidated counters storage N may further include logic, circuitry, hardware, software, a combination of hardware and software, a script, an executable or any other means for calculating, adjusting, rewriting or editing any one of the inputs, metrics and statistics in the consolidated counter storage N In one example, counters adjustments storage B comprises a script or an executable to rewrite a value in counter adjustments  values within the counters storage . Counters adjustments storage B may maintain or edit any of the values, parameters, such as counter adjustments A-N values for each of the PEs . Counters adjustments storage B may maintain any number of previous values for each of the inputs of the counter values A-N to preserve a history of the values. Counters adjustments storage B may be refreshed or updated periodically as the consolidator  refreshes the counter values  or counter adjustments  from each of the PEs . The refresh or update may occur every 0.05, 0.1, 0.25, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5, 8, 10, 15, 20, 50 or 100 milliseconds. The refresh of any of the values in the counters adjustments storage B may occur at any period, such as anywhere between every 0.01 millisecond to every 1 second. In some embodiments, the refresh or update occurs based on an event. An event may be a transmission from a PE  about a counter values  change on the PE . In some embodiments, the event may be a detection of change in one or more of counter values .","Consolidated counter values A-N may be any set of values generated by consolidating or combining any combination of counter values A-N and counter adjustments A-N. Consolidated counter values A-N may include any set of values generated or calculated by consolidating or combining all the metrics and statistics from all of the PEs . As the PEs  load balance the network traffic, their metrics and statistics may diverge from the metrics and statistics of other PEs . By consolidating the metrics and statistics, all of the PEs  may use more updated consolidated metrics and statistics for performing the load balancing of the network traffic. In some embodiments, consolidated counter values A-N are generated by adding or summing up all the corresponding values or inputs from the counter values A-N. In further embodiments, consolidated counter values A-N are generated by adding or summing up all the corresponding values or inputs from the adjustment counter values A-N. Consolidated counter values A-N may include an array of structures where some of the structures were generated by combining the corresponding structures in other counter values A-N and adjustment values A-N. The combination may include summation of values, averaging of the values, identifying the largest or smallest of the values, taking a median value of the values. In some embodiments, consolidated counter values A-N include a summation, aggragation or consolidation of all the values, parameters, settings or configurations for each of the PEs . Consolidated counter values A-N may include any number of arrays of structures for storing information that is used during the calculating or determining the new counter values A-N or new counter adjustments A-N. In some embodiments, consolidated counter values A-N may include cumulative sets of values, as shown in an example in table 3 below:",{"@attributes":{"id":"p-0332","num":"0345"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A cumulative sets of values for a consolidated set of counter values"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","typedef struct noncons_cumulative_delta_stats"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003u32bits packets_rcvd;"]},{"entry":[{},"\u2003\u2003u32bits packets_sent;"]},{"entry":[{},"\u2003\u2003u32bits bytes_sent;"]},{"entry":[{},"\u2003\u2003u32bits bytes_rcvd;"]},{"entry":[{},"\u2003\u2003u64bits fast_ttfb;"]},{"entry":[{},"\u2003\u2003u32bits fast_transactions;"]},{"entry":[{},"\u2003\u2003s32bits current_connections;"]},{"entry":[{},"\u2003} noncons_cumulative_delta_stats_t;"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Packet Engine , in addition to the previously discussed features and functionalities, may also include additional features and functionalities for generating, updating, calculating and maintaining timers , counter values , counter adjustments  and service values . In some embodiments, PE  comprises hardware, software or any combination of hardware and software for generating, calculating, storing, updating or maintaining a timer , counter values , counter adjustments  or service values . PE  may include scripts, executables, programs, applications, hardware devices, units or functions for controlling, managing and recalculating or updating counter values or timer values. PE  may comprise programs, functions, units or devices for communicating with consolidator  to exchange information regarding the update or consolidation of values of the counter values , counter adjustments  or the timer .","PE  may include programs, functions, scripts, units or devices for calculating, updating or generating counter values  or counter adjustments  using updated values from an update message from a consolidator . In one embodiment, PE  recalculates or updates counter values  or counter adjustments  using a script, program or a function such as the one presented in table 4.",{"@attributes":{"id":"p-0335","num":"0348"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"An example of a function, script or program for updating counter values 610,"},{"entry":"counter adjustments 615 or any other set of values on the"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003NSCLIST_FOR_EACH_CORE(svcptr,svc_glbl_list)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003svcptr-> deltastats. packets_rcvd ="},{"entry":"\u2003\u2003svc_stats_core[svcptr->svc_index]."},{"entry":"packets_rcvd - prev2svc_stats_core[svcptr->svc_index]. packets_rcvd;"},{"entry":"\u2003\u2003...."},{"entry":"\u2003\u2003\/* For current counter *\/"},{"entry":"\u2003\u2003svcptr-> deltastats. current_connections ="},{"entry":"\u2003\u2003\u2003svc_stats_core[svcptr->svc_index]. current_connections -"},{"entry":"\u2003\u2003\u2003svc_stats_core[svcptr->svc_index]. current_connections ;"},{"entry":"\u2003\u2003svcptr->deltastats .lrtm_response_time="},{"entry":"\u2003\u2003\u2003svc_stats_core[svcptr->svc_index]. lrtm_response_time;"},{"entry":"\u2003\u2003svcptr->deltastats .current_load="},{"entry":"\u2003\u2003\u2003svc_stats_core[svcptr->svc_index]. current_load;"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As shown in the example from table , counter values  may be determined, generated, calculated, adjusted or updated based on any number of inputs or values from any of the counter values , counter adjustments , counters storage A, counter adjustments storage B or consolidated counters storage N. In some embodiments, consolidator  sends a message comprising consolidated counter values A-N. The consolidated counter values A-N may be generated using any combination of counter values A-N and counter adjustments A-N. PE  of a core  may receive the message from the consolidator  and implement the calculations such as shown in table 4 to update the counter values . Similarly, PE  may determine or calculate service values  based on any number of inputs or values from the counter values  and counter adjustments  that were previously updated and adjusted.","In one example, consolidator  may send a message or an instructions to each of the PEs  to update or adjust each of the counter values  on each of the PEs . Depending on the design, either the consolidator  or the PE  may be performing calculations for updating or adjusting counter values  on the PEs . In such an example, the consolidator  may either implement or send an instruction to a PE  of the plurality of PEs  to implement a set of instructions for updating a set of values, as shown in table 5 below:",{"@attributes":{"id":"p-0338","num":"0351"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"An example of a set of instructions for updating a set of values, such "},{"entry":"as the counter values 610."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003NSCLIST_FOR_EACH(svcptr,svc_glbl_list)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003svc_stats_core[svcptr->svc_index]. packets_rcvd += svcptr->"},{"entry":"fast_packets_rcvd;"},{"entry":"\u2003\u2003svcptr-> deltastats. packets_rcvd += svcptr-> fast_packets_rcvd;"},{"entry":"\u2003\u2003svcptr-> fast_packets_rcvd =0;"},{"entry":"\u2003\u2003svc_stats_core[svcptr->svc_index]. packets_sent += svcptr->"},{"entry":"fast_packets_sent;"},{"entry":"\u2003\u2003svcptr-> deltastats. packets_sent += svcptr-> fast_packets_sent;"},{"entry":"\u2003\u2003svcptr-> fast_packets_sent=0;"},{"entry":"\u2003\u2003svc_stats_core[svcptr->svc_index]. bytes_rcvd += svcptr-> fast_"},{"entry":"bytes_rcvd;"},{"entry":"\u2003\u2003svcptr->deltastats.bytes_rcvd += svcptr-> fast_ bytes_rcvd;"},{"entry":"\u2003\u2003svcptr-> fast_ bytes_rcvd=0;"},{"entry":"\u2003\u2003...."},{"entry":"\u2003\u2003\/* For current counters *\/"},{"entry":"\u2003\u2003\/* Remembering current counters in a per core or on a server_info *\/"},{"entry":"\u2003\u2003svc_stats_core[svcptr->svc_index].current_connections=svcptr-"},{"entry":">current_connections;"},{"entry":"\u2003\u2003\/* Adding current counter values to consolidator structure *\/"},{"entry":"\u2003\u2003svc_stats_core[svcptr->svc_index].current_connections+=svcptr-"},{"entry":">current_connections;"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In some embodiments, consolidator  may implement the calculation of the new set of values and present the PE  with the adjustment values  or the new set of counter values . In other embodiments, consolidator  sends a set of instructions such as the instructions presented above for PE  to implement and recalculate a new set of values. In further embodiments, consolidator  sends an instruction and a set of adjustment values  to a PE  and the PE  implements a calculation such as those shown in table 5 to generate an updated or a new set of counter values  for the PE . PE  may implement similar calculations also for generating sets of service values  as necessary.","Timer Sync  may any hardware, software or a combination of hardware and software for synchronizing, setting, resetting, controlling or managing one or more timers  on one or more PEs . In some embodiments, timer sync  includes scripts, executables, devices, units, functions or components for interacting and communicating with each of the timers A-N. Timer sync  may exchange communication, instructions and information with any of the PEs . Timer synch  may include logic, circuitry, functions or components for setting, resetting, adjusting, initiating and controlling each of the timers  on each of the PEs A-N. In some embodiments, timer sync  includes functionality and means for resetting one or more timers . Timer sync  may set the timer  count for any number of timers . In some embodiments, timer sync  resets the timer  count to zero for one or more timers . In other embodiments, timer sync  sets a timer  to a predetermined value. The value may be a value, time interval or a time duration set or chosen by the timer sync . Timer sync  may synchronize timers  to expire every 0.1, 0.3, 0.6, 0.9, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40, 50, 70 or 100 milliseconds. Timer sync  may send instruction to the timer  to start counting. In some embodiments, timer sync  sends an instruction to the timer  to stop counting. In further embodiments, timer sync  sends instructions to PE  to reset the timer  to zero or to a predetermined value. Timer sync  may set each timer  of the plurality of timers  to expire at the same time, or a substantially same time. In some embodiments, timer sync  sets each timer  to expire at a time different from other timers . Timer sync  may include any functionality to manage, control and set any of the timers  to count any duration of time, or to expire at any point in time.","Referring now to , embodiments of steps of a method for synchronizing and consolidating information, such as metrics and statistics stored in counters locally across a plurality of packet engines (PEs) in a multi-core system is illustrated. In brief overview, at step  a timer is established for each Packet Engine (PE) operating on a core of a plurality of cores in a multi-core system. At step , a set of counter values from each of the plurality of PEs is stored in a first storage location. At step , a consolidator sends to each of the plurality of PEs a first message to update the set of counter values. At step , the consolidator consolidates the set of counter values from each of the PEs. At step , a second message comprising a consolidated set of counter values is sent to each of the PEs. At step , each of the PEs updates the set of counter values for each of the PEs using the consolidated set of counter values. At step , each of the PEs establishes settings for load balancing of network traffic using updated set of counter values.","At step , each of the plurality of PEs  operating on each of the cores  in a multi-core appliance  establishes a timer. Consolidator  may operate on a master core  of the plurality of cores . Consolidator  may establish a timer  for the primary core  and the slave cores . In some embodiments, each of the PEs  establishes a timer . Timer  may be established to count any duration or period of time. Timer  may be preprogrammed or established according to a configuration. In one embodiment, timer  is established to count a duration of time between 1 and 5 milliseconds, such as for example 2.75 milliseconds. In further embodiments, timer  on a first PE  is established to count a duration of time that is different from a duration of time counted by another timer  on a second PE . In further embodiments, two or more timers  on each of the PEs  may be established to count a varying duration of time. Some timers  may be established to expire at the same time or at a substantially same time. Other timers  may be established to expire at different times. In some embodiments, each of the PEs  may establish a plurality of timers . One or more timers  may be established or reset responsive to a received instruction to establish or reset the timer from the timer sync . In response to receiving the instruction, one or more PEs  may establish or reset one or more timers  to count a duration of time, or to expire. Timer  may be recurring. The duration of the count or the expiration time for the timer  may be identified by the timer sync . In some embodiments, a timer  of a PE  indicates a duration of time within which the PE  may use a set of counter values  or the service values , for performing operations on the subsets of network traffic traversing the PE . In some embodiments, timer  is established to count down the time within which PE  will use a set of counter values stored in the counter values  for load balancing network traffic. Timer  may be established for a PE  to enable the PE  to load balance network traffic until the timer  expires. In some embodiments, timer  is established to count a duration of time during which a PE  manages load balancing of the network traffic responsive to the set of values from the counter values  or the service values  of the PE . Timer  may be established to count a duration of time during which PE  does not update the counter values . In some embodiments, upon expiration of the timer  counter values  may be updated.","At step , a consolidator  stores a set of counter values from each of the plurality of PEs  into one or more storage locations. Consolidator  may receive and store counter values  from a packet engine  and store the counter values  into a storage location. The storage location may be designated for a set of counter values  that correspond to that same packet engine . Consolidator  may receive the counter values  from PEs  of other cores  via core to core messaging. In some embodiments, consolidator  receives counter values  via shared memory that is accessed by each PE  of each of the cores . Consolidator  may maintain storages  on the shared memory. PEs  from each of the cores  may access and store their counter values  or counter adjustment values  into the shared memory for the consolidator . In some embodiments, consolidator  stores the set of counter values from one or more PEs  into a first storage location responsive to expiration of one or more timers  from the one or more PEs . In some embodiments, consolidator  stores counter values A from PE A into a corresponding or a reserved storage  for that set of counter values, such as the counters storage A. In further embodiments, consolidator  stores counter values  from all of the PEs  of the multi-core appliance  into counter values  within the counters storage A. The counter values  from each of the PEs  may be stored in the corresponding counter values A-N in the counter storage A which may be reserved for storing the counter values  of each particular PE . Counter values  may be organized as a number of array structures. Each of the values or parameters of the counter values stored may be stored in the corresponding location within the corresponding structure and for the corresponding array of the value. Each of the PEs A-N may send counter values A-N to be stored by the consolidator  into counter values A-N on the counters storage A in a same or a different array structure.","At step , the consolidator  sends to each of the plurality of PEs  a first message to update the set of counter values. Consolidator  may send the first message via by core to core messaging. In some embodiments, consolidator  sends the message to update via a shared memory. In other embodiments, consolidator  configures a timer  to expire at a timing when each of the plurality of PEs  should update the set of counter values. The first message may instruct the PEs  to store the set of counter values from counter values  from each of the PEs  into a second storage location. The second storage location may be any storage , such as counters storage A, counter adjustments storage B or consolidated counters storage N. In some embodiments, the first message instructs each of the PEs  to update or store counter values . In further embodiments, the first message instructs each of the PEs  to begin or initiate a process or a procedure for updating, adjusting or correcting values stored in the counter values  of each of the PEs . The first message may include one or more instructions to initiate or trigger updating procedure of the set of counter values for each of the PEs . In some embodiments, consolidator  sends the first message to a first PE  responsive to expiration of the timer  of the first PE . In further embodiments, consolidator  sends the first message to each of the PEs  responsive to the expiration of the timer  of the consolidator . In further embodiments, consolidator  sends one or more messages to update counter values A-N to each of the PEs A-N responsive to expiration of a timer responsive to expiration of any timer  on any of the cores . The first message may comprise any set of instructions for updating the set of counter values, such as the counter values , in the storage location, such as the counters storage A.","Upon completion of updating the set of counter values, each of the PEs  may send to the consolidator  a message to acknowledge the completion of the updating. The acknowledgement message may be send via core to core messaging or any other inter-core communication. At step , the consolidator  may consolidate the set of counter values from each of the PEs . In some embodiments, the consolidator  processes, modifies or adjusts any of the values from the counter values  received from any of the PEs . In further embodiments, consolidator  calculates a new value to replace a previous value or input in the counter values  of the PE . In yet further embodiments, consolidator  updates any number of values inside the arrays of structures in the counter values . In still further embodiments, consolidator  updates or modifies any number of values that correspond to counter values  of a PE  inside the counters storage . In some embodiments, consolidator  sums up one or more values that correspond to the same subset of network traffic from a plurality of counter values  from a plurality of PEs . In some embodiments, consolidator  sums up or consolidates values that correspond to a number of data packets received or sent by the PEs  for a subset of network traffic. In further embodiments, consolidator sums up or consolidates values that correspond to a number of data packets pending for transmission, operation or service to be performed by the PEs  for a subset of network traffic. In yet further embodiments, consolidator sums up or consolidates values that correspond to a number of bytes sent or received by the PEs  for a subset of network traffic. In further embodiments, consolidator sums up or consolidates values that correspond to a number transactions pending by the PEs  for a subset of network traffic. In still further embodiments, consolidator sums up or consolidates values that correspond to a number of connections that are open or active via the PEs  for a subset of network traffic. In yet further embodiments, consolidator sums up or consolidates values that correspond to a number available connections left for the PEs  for a subset of network traffic. In further embodiments, consolidator sums up or consolidates values that correspond to a bandwidth utilized by the PEs  for a subset of network traffic. In yet further embodiments, consolidator sums up or consolidates values that correspond to a bandwidth available for the PEs  for a subset of network traffic. In further embodiments, consolidator sums up or consolidates values that correspond to a response time measured, or an average response time measured by the PEs  for a subset of network traffic. The response time may include the time interval it takes for a response to be received from the time when the request is sent by the appliance  for a subset of network traffic, such as a connection to a client , server , a specific session or a specific connection. In some embodiments, consolidator sums up or consolidates values that correspond to a current load to be load balanced by the PEs  for a subset of network traffic.","At step , consolidator  sends a second message that comprises a consolidated set of counter values to each of the PEs . Consolidator  may send a second message to each of the PEs  that includes consolidated counter values  that corresponds to each of the PEs . In some embodiments, consolidator  sends a second message comprising consolidated counter values A from the consolidated counters storage N to PE A of the core A. Consolidator  may send a second message to the plurality of PEs  at the same time, or at a substantially the same time. In yet further embodiments, consolidator  sends the second message to the plurality of PEs  within a predetermined time interval. In still further embodiments, consolidator  sends the second message to each of the PEs  periodically, such as for example every 0.25, 0.5, 1, 1.5, 2, 2.5 or every 3 milliseconds. In yet further embodiments, consolidator  sends the second message to a second PE  a specific period of time after sending the second message to a first PE . In yet further embodiments, consolidator  sends a second message to a third PE  after the same specific period of time after sending the second message to the second PE . The second message may include a same consolidated set of values for the second message to each of the PEs . In some embodiments, the second message from a first PE  includes a different consolidated set of values from a second PE . In other embodiments, two or more PEs  receive the same or a substantially similar consolidated set of values. The substantially similar consolidated set of values may include adjustments for differences between the first and second original counter values  receive by the consolidator. The second message may include any number of instructions, scripts or steps for calculating or updating the new counter values  for each of the PEs .","At step , each of the PEs  may update the set of counter values for the each of the PEs  using the consolidated set of counter values. Each of the PEs  may update the set of counter values for each of the PEs  using counter adjustments  values from the consolidator . In some embodiments, the consolidated set of counter values include counter adjustments  for each of the values to be updated by the PE . The counter adjustment values may include changes in values, or differences between the current counter values  of each PE  and the corrected or updated new counter values . In some embodiments, each of the PEs  replaces the counter values  with the values from the consolidated set of counter values. In other embodiments, each of the PEs  updates the counter values  using a combination of received counter adjustments  and the current counter values  to determine or calculate the new counter values . In yet further embodiments, PEs  receive the consolidated set of counter values  from the consolidated counters storage N and use a calculation method, script, or a function to calculate or determine updated counter values . In still further embodiments, each of the PEs  implements a function to recalculate each of the updated counter values  using any combination of the consolidated counter values , counter adjustments  and counter values . Upon completion of updating the set of counter values, each of the PEs  may send to the consolidator  a message to acknowledge the completion of the updating of the set of counter values using the consolidated set of values. The acknowledgement message may be send via core to core messaging.","At step , each of the PEs  establishes settings for load balancing of network traffic using the updated set of counter values. Each of the PEs  may determine or calculate any number of values stored in the service values  using the updated new counter values . In some embodiments, a PE  determines or calculates settings or parameters in the service values  using the updated set of counter values . In further embodiments, PE  adjusts or modifies one or more values in the service values  using calculations based on the updated set of counter values . In yet further embodiments, a PEs  establishes, determines or calculates settings, configuration points or instructions stored in the service values  responsive to updating by the PEs  the set of counter values . In yet further embodiments, all of the PEs  establish, determine or calculate settings, configurations or values in the service values  responsive to updating, by all the PEs , the set of counter values .","In one example, a multi-core system comprising a plurality of packet engines  load balances the network traffic via the plurality of packet engines . Each packet engine  may maintain a local set of statistics, metrics, values and parameters used for load balancing of the network traffic. The local set of metrics may be stored in an array of structures, where each structure may correspond to a particular subset of network traffic, such as the network traffic pertaining to a server , a client , a group of client  or server , one or more services or applications. In some embodiments, the local set of metrics corresponds to the total network traffic traversing the packet engine . As the network traffic is load balanced, each packet engine  updates the local set of metrics and statistics. The metrics and statistics may include a number of data packets received or transmitted, a number of bytes of network traffic received or transmitted, a number of open connections, a number of connections available for opening, a value for the bandwidth used or available or a current load of the network traffic pending to be load balanced. As each packet engine updates the local metrics and statistics in accordance with the local portion of network traffic load balanced, the metrics and statistics across all of the packet engines  may be in disagreement. As such, some packet engines  may think that there is more network traffic to be balanced than other packet engines. Similarly, some packet engines may think that there is less available bandwidth than other packet engines. As independent updating of metrics and statistics continues, packet engines  may be further from the correct metrics and statistics. The metrics and statistics may be consolidated by the consolidator  in order for each of the packet engines  to perform load balancing more efficiently.","Consolidator  may operate on a master core  of the plurality of cores . Consolidator  may include various storages  for storing metrics and statistics from each of the packet engines , such as for example the counter storages . Consolidator  may synchronize timers on each of the cores . Upon expiration of the timers, each of the PEs  may begin the statistics or metrics consolidation by storing counter values  to a counters storage A. Counters storage A may be located in a shared memory that is accessible by each core . In some embodiments, counter storage A is stored on the master core  at the consolidator  and the consolidator receives counter values  from each of the cores  to update the counters storage A. Consolidator  may store previously consolidated values to a new storage location such as a storage  in order to create an available space for storing the new consolidated values.","Further in the same example, the consolidator  may send to each of the packet engines  a first message to update the set of counter values  of the each PE  into a second storage location. The second storage location may be a counters storage A. Each PE  may send the metrics and statistics to the counters storage A. The metrics and statistics may include the local information corresponding to the number of data packets received or transmitted, the number of bytes of network traffic received or transmitted, the number of open connections, the number of connections available for opening or using, the value for the bandwidth used or available and a current load of the network traffic pending. Each PE  may update the locally available metrics and statistics by modifying the values in a memory shared storage or by sending the counter values  via core to core messaging. Once each of the packet engine  updates or stores the metrics and statistics into the counter storage A, each of the PEs  may send an acknowledgement that the storing or updating is completed. Consolidator  may, upon completion of the updating of values in the counter storage A, use the metrics and statistics from each of the PEs  to calculate a consolidated set of counter values.","The consolidated set of counter values may be calculated using all the information from each of the PEs . The metrics and statistics from a plurality of packet engines  that correspond to the same network traffic subset may be combined and consolidated. The consolidated set of counter values may be established or determined using the more up to date metrics and statistics from the counter values  from all the PEs  to establish the global metrics and statistics for the appliance . The consolidated set of counter values may include a consolidated value for the number of data packets received or transmitted by all of the PEs . The consolidated set of counter values may also include the consolidated number of bytes of network traffic received or transmitted by all PEs . The consolidated set of counter values may further include the consolidated number of open or used connections that are opened or used by all of the PEs . The consolidated set of counter values may further include the consolidated number of connections available for opening or using by all of the PEs . The consolidated set of counter values  may further include the consolidated value for the bandwidth used or available or a more up to date value for the current load of the network traffic pending. The consolidated set of counter values may further be tailored, modified or recalculated for each packet engine  individually. The consolidated set of counter values  may be stored in the consolidated counter values  of the consolidated counters storage N and may be the more up to date account of the metrics and statistics for the appliance . Consolidator  may send the consolidated set of counter values to each of the PEs  via core to core messaging. In some embodiments, each PE  accesses the consolidated set of counter values from the consolidated counter values A-N which may be stored a shared memory accessible by each of the PEs . Each PE  may use the consolidated set of counter values to update the previous counter values  for each PE . Each PE  may use the consolidated set of counter values to update the local PE  counter values that correspond to any of: the number of data packets received or transmitted, the number of bytes of network traffic received or transmitted, the number of open connections, the number of connections available for opening or using, the value for the bandwidth used or available and a current load of the network traffic pending. In some embodiments, each of the PEs  replaces the previous counter values  with the consolidated set of counter values. Each PE  may calculate a new set of service values  using the newly updated counter values . The new set of service values  may be used by each of the PEs  to set or modify the configuration or operation of the load balancing. Each PE  may perform the load balancing more accurately using the newly updated counter values and service values. Each PE  may locally update the counter values  while the load balancing is performed. Once the timer on each of the PEs  expires, the process of consolidating and updating may begin again. This cycle of consolidation of metrics and statistics may ensure that the counter values  and service values  locally stored on each PE  is maintained up to date and the load balancing performed by the PEs  is efficient and accurate.","I. Obtaining Metrics for Global Server Load Balancing by a Multi-Core GSLB Device","A multi-core GSLB intermediary\/appliance appliance \/ may be provide global service load balancing of network traffic across a plurality of sites. Each of the sites may include one or more intermediaries\/appliances  load balancing the network traffic across a plurality of servers . Each of the servers  at each of the sites may receive the client requests from numerous different clients  load balanced by the load balancing virtual servers  at the site deployed intermediaries . When a client sends a DNS request to resolve an IP address associated with a uniform resource locator (URL), any core of the multi-core GSLB appliance may receive the DNS request. In such instances, a GSLB virtual server  of the core  receiving the request may use any available information or metrics to provide a DNS resolution. However, as the network traffic and the conditions on the network may change over time, the metrics used by GSLB virtual servers  may become outdated. Furthermore, as each of the cores of the multi-core GSLB appliance \/ may service different connections and perform different actions, each core  of the GSLB appliance \/ may comprise information not comprised by other cores . In such situations, some cores  in addition to having outdated information, may also have information that is not available to other cores . In order to avoid such discrepancy in the information available between the cores , GSLB appliance \/ may assign a master core which may obtain, receive, update and consolidate all the metrics pertaining to a particular site or a load balancing appliance \/. GSLB appliance \/ may also distribute or transmit the updated metrics information across the cores . Each of the cores  receiving the information from the master core  may then use the updated and consolidated metrics information to more accurately and efficiently resolve incoming DNS requests.","Referring now to , an embodiment of a system for obtaining and updating metrics by a multi-core GSLB appliance \/ for performing global service load balancing across a plurality of sites is illustrated. In brief overview,  depicts GSLB appliance \/ comprising a plurality of cores A-N. Core A of the GSLB appliance \/ is identified as a master core A. The master core  A includes a GSLB virtual server A that includes a DNS resolver A. The master core A further comprises consolidator A that includes site metrics A and connection information A. Each of the remaining cores B-N of the GSLB appliance \/ include a GSLB virtual server  comprising a DNS resolver B. Each of the cores B-N also include counter values , counter adjustments  and service values . GSLB appliance \/ communicates with appliances\/intermediaries \/A-B load balancing the network traffic across the servers A-B and C-D on each of the sites A and B. Intermediaries \/A-B each include load balancing vservers , load monitors  and consolidators A\u2032-B\u2032. Intermediaries \/A-B may also each include metrics, such as appliance collected metrics , device\/server provided metrics , user selected\/defined metrics , MEP based metrics , NMP based metrics  and GSLB metrics . GSLB appliance \/ may obtain metrics from each of the site deployed appliances \/A-B in order to maintain updated metrics for implementing the global server load balancing operations.","In further overview of , a GSLB virtual server , in addition to any aforementioned functions of any other virtual server , may further comprise functionality, features or configurations for performing any global server load balancing specific operations. GSLB vserver  may include a virtual server  configured to balance network traffic across site deployed appliances \/. In some embodiments, GSLB vserver  distributes incoming network traffic from various clients across appliances \/. In further embodiments, GSLB vserver  resolved DNS requests from the clients . GSLB virtual server  may further comprise any functionality for DNS resolution. In some embodiments, GSLB virtual server  comprises a DNS resolver , a DNS server or any device, component or a function capable of resolving DNS requests. In further embodiments, GSLB vserver  comprises information for resolving DNS requests, such as internet protocol addresses, domain names and host names stored in a cache for retrieval and resolution of DNS requests. GSLB virtual server  may be executing on any core  of the multi-core GSLB appliance \/. GSLB virtual server  may direct, manage or load balance network traffic across a plurality of sites, such as sites A and B, using metrics and information updated from a master core . In some embodiments, GSLB virtual server  of a slave core  resolves DNS requests using updated and consolidated metrics received from the consolidator  operating on a master core A.","A master core  of a multi-core appliance \/ may be assigned a master status based on any action or operation. A master core  may be assigned a master status based on a connection established between that particular core  and an intermediary \/ deployed at a site. In some embodiments, a core  establishing a connection with an appliance \/ becomes a master  for all operations, services or network traffic assigned to or associated with that particular appliance \/. A core  may become a master core  for obtaining, maintaining, consolidating and updating any information about a particular appliance \/ with whom the core  has established a connection. In some embodiments, a core  is assigned a master status may be assigned a master status on connection by connection basis. In such embodiments, core B may be a master for operations or services regarding an intermediary \/B load balancing the network traffic at site B, while core A may be a master for services or operations regarding an intermediary \/A at site A. In some embodiments, a core A may be a master for all appliances \/. In some embodiments, a core  that establishes a connection or a service with an appliance \/ becomes a master for that connection or for that service. In such embodiments, multiple cores  may perform actions of a master core, while there will be only one master core  for any particular connection or any particular service. A master core  may be declared a master for obtaining, maintaining, consolidating and propagating metric information for a particular appliance \/ operating on a particular site. Such master core  may also establish a monitor, such as a load monitor, in order to maintain knowledge or information of load handled by the load balancing appliance \/.","DNS resolver  may include any hardware, software or a combination of hardware and software for resolving a DNS request. DNS resolver  may include any functions, algorithms, logic, database of information stored in a memory and any processing power for translating a domain name of a client request into an IP address. In some embodiments, DNS resolver  comprises any functionality for translating an IP address into a domain name. DNS resolver  may comprise any functionality for translating a URL into an IP address of a network device which may provide information requested by the URL. In further embodiments, DNS resolver  comprises functionality for picking out an IP address in order to most efficiently load balance network traffic across multiple sites. For example, if a client requests a DNS resolution, DNS resolver  may provide a plurality of IP addresses which may satisfy the client request. However, DNS resolver  may provide additional functionality to identify the IP address of the plurality of available IP addresses that is most appropriate based on the available metrics, such as site metrics . In some embodiments, DNS resolver  identifies a site designated load balancing intermediary \/ to forward the client request to. The site designated intermediary  may receive the client request and further forward the request to the most appropriate server  to handle the request. DNS resolver  may work in conjunction with GSLB vserver  to resolve DNS requests such that the client requests are efficiently distributed across the sites, such as sites A and B.","DNS resolver  may store any information used for resolving a DNS request into a storage location for retrieval during DNS resolution process. DNS resolver  may store in a cache any information linking or associating a host name and an IP address pair for a particular resource at a server . In some embodiments, DNS resolver  stores in a cache information from load balancing appliances \/ associating URLs, host names and domain names with one or more IP addresses. The IP addresses associated with the URLs, host names and domain names may include IP addresses of intermediaries \/ and\/or servers . DNS resolver  may store any information, such as lists of domain names and IP addresses for linking or associating domain names to IP addresses. Similarly, DNS resolver  may use any piece of information, such as an object, a URL, a string of characters or a parameter to identify a particular IP address of a network device. DNS resolver  may store any DNS related information into site metrics  of a consolidator . DNS resolver  may store any information for DNS resolution into consolidator . Consolidator  may obtain, update and consolidate any metrics or information from appliances \/ at remote sites in order to enable the DNS resolver  to resolve DNS requests using the updated information.","DNS resolver  may function and operate on any core A-N. Any core  of a GSLB appliance \/, assigned a master or a slave status may utilize a DNS resolver  for resolution of any DNS requests. DNS resolvers  of operating on a slave , such as B-N, may resolve DNS requests  using statistics and metrics stored locally in counters and values ,  and . However, the locally stored statistics and metrics may be updated by consolidator A operating on the master core . The statistics and metrics from the consolidator  may modify or change any information that may be used by DNS resolver  of a slave core , such as a domain name and IP address pair, a host name and IP address pair, an object and IP address pair, a URL and IP address pair or any information or statistics that may be used to resolve a particular IP address requested by a DNS request.","In addition to aforementioned features of any consolidator , consolidator  of the GSLB appliance \/ may also include functionality to gather and obtain any information used for global server load balancing. Consolidator  may include a monitor, or a monitoring service for a master core of GSLB appliance \/ to monitor, receive, obtain and maintain updated information about load balancing appliances \/ deployed at remote sites A and B. Consolidator  may monitor, obtain, update and consolidate information about any appliances \/. Consolidator  of the GSLB vserver A may include a functionality to gather, receive or obtain any metric information from the intermediaries \/ deployed at any site, such as sites A and B. In some embodiments, consolidator  includes functionality to obtain and consolidate any information comprised by a consolidator A of intermediary \/A deployed on site A. Consolidator  may directly communicate with consolidator \u2032 of a load balancing intermediary \/ deployed at any of the sites. Consolidator  may gather, receive or obtain any information from consolidators A\u2032 and use such information to consolidate or update existing metrics information on GSLB vserver A. Consolidator  may gather, receive, updates, and\/or consolidates any metrics, such as site metrics  information, using any metrics from any consolidators A\u2032 on load balancing intermediaries \/. In some embodiments, consolidator  gathers or receives information from an appliance collected metrics  at an intermediary \/. In further embodiments, consolidator  gathers or receives information from a device\/server provided metrics  at an intermediary \/. In still further embodiments, consolidator  gathers user selected\/defined metrics  from intermediaries \/. In yet further embodiments, consolidator  gathers MEP based metrics  from intermediaries \/. In still further embodiments, consolidator  gathers NMP based metrics  and\/or GSLB metrics  from intermediaries \/. Consolidator  of the GSLB appliance \/ may obtain metrics from each of the site deployed appliances \/A-B in order to maintain updated metrics for implementing the global server load balancing operations. In some embodiments, consolidator  gathers information and\/or metrics from other GSLB appliances \/, and\/or other consolidators  at other GSLB appliances \/.","Consolidator  may also comprise functionality to update or consolidate any metrics or information received from other load balancing intermediaries \/. Consolidator  may include any hardware, software, or a combination of hardware and software described herein to update, recalculate and consolidate any metrics or information from any GSLB or load balancing intermediary \/ or any core  of any GSLB or load balancing intermediary \/. In some embodiments, consolidator  includes processors, logic circuits, memory caches, functions and algorithms for updating and\/or consolidating information gathered from remote appliances \/ or remote GSLB appliances \/. Each of the cores A-N of the GSLB appliance \/ may gather information from remote load balancing appliances \/. Each of the cores A-N may store information into core  designated counter values , counter adjustments  and service values . Cores  may provided metrics gathered from the remote appliances \/ to the consolidator  to be consolidated and updated. Consolidator  may update, recalculate and consolidate the metrics gathered from each of the cores A-N and provide consolidated and updated metrics back to each of the cores A-N to be used for global service load balancing. In some embodiments, consolidator  updates and\/or consolidates metrics used for global service load balancing based on the information or metrics received from any of the cores A-N, and cores A-N may receive metrics or information from site deployed load balancing intermediaries \/. In such a configuration, consolidator  of the GSLB load balancer \/ may obtain, gather, consolidate and provide the most updated metrics to cores  of the GSLB appliance \/. Each of the cores A-N may use the most updated metrics and store them into service values . Each of the GSLB virtual servers A-N at each of the cores A-N may use the most updated metrics to perform global service load balancing tasks efficiently.","Consolidator  of the GSLB appliance \/ may obtain, update and consolidate any information regarding any particular site deployed load balancing appliance \/. Consolidator  may obtain or gather any metrics for a DNS request resolution of any request concerning a resource or service provided via servers  load balanced by such particular appliance \/. Consolidator  may obtain or gather any information linking or associating a host name and an IP address pair for a particular resource at a server . In some embodiments, consolidator  obtains lists of domain name and corresponding IP addresses corresponding to servers  managed by a particular appliance \/. Consolidator  may receive updates from the load balancing appliance \/ regarding any updates or changes to the list of domain names and IP addresses. Similarly, consolidator  may obtain information from load balancing appliances \/ associating any objects, identifiers, data, URLs, host names and domain names with one or more IP addresses. IP addresses associated with the URLs, host names and domain names may include IP addresses of intermediaries \/ and\/or servers . In some embodiments, consolidator  obtains and gathers information about connection statuses from intermediaries \/. For example, consolidator  may obtain, gather and maintain information about active or existing connections traversing intermediary \/. In some embodiments, consolidator  obtains or gathers information or metrics about states of each of the connections. Consolidator  may obtain, update and maintain metrics about any connections between a client  and intermediary \/, client  and server  traversing the intermediary or server  and intermediary device. Consolidator  may obtain, update and maintain metrics indicating that the current state of a connection is any of: established, active, listen, timed out or closed. Consolidator  may distribute any received connection related metrics or information, such as connection status to each of the cores A-N of the GSLB appliance \/.","Site metrics  may include any type and form of information, statistics or metrics regarding the network traffic managed or serviced by network devices at a particular site. Site metrics  may include information or metrics used for resolving a DNS request by a DNS resolver . Site metrics  may include any information linking or associating an information or a feature to an IP address of a network device. In some embodiments, site metrics  include domain name and IP address pairs, URL and IP address pairs, host name and IP address pairs, object and IP address pairs or any information that may be used to resolve an IP address from a DNS request. Site metrics  may include any metrics, statistics or information about the network traffic traversing a particular load balancing appliance \/ at a particular site, such as sites A and B. Site metrics  may include any information or metrics from a consolidator A of a site deployed load balancer appliance \/. Site metrics  may include any information about a connection, such a status of a connection and any information about a session, such as a status of a session.","Site metrics  may include any information about any network devices managed by GSLB appliance \/. In some embodiments, site metrics  include metrics or information about a status of a server  at a site load balanced, serviced or managed by GSLB appliance \/. For example, a status may indicate that a network device, such as the server or appliance \/ is down, unavailable, off line, on line, available, receiving network traffic, not receiving network traffic, overloaded by network traffic, not overloaded by network traffic, available to accept more network traffic, not available to accept more network traffic or any other status that may be used by GSLB appliance \/ to distribute the network traffic across site deployed appliances \/. In some embodiments, site metrics  include information about a status of another GSLB appliance . In further embodiments, site metrics include information about a particular service or resource provided by a server at any of the sites, such as service or resource available, service or resource unavailable, service or resource limited or service or resource overloaded by requests. In further embodiments, site metrics  include information or metrics about a status of any virtual servers  operating at load balancing appliances \/. In some embodiments, site metrics  include information that a virtual server  is unavailable, available, off line, on line, receiving network traffic or not receiving network traffic. Site metrics  may include any type of metrics or information used by any appliance \/ to manage, service or optimize network traffic.","Site metrics  may include any information stored on any consolidator  of any intermediary\/appliance \/ or any information used for any global service load balancing operation. Site metrics  may include lists of IP addresses and corresponding domain names. The list of IP addresses and domain names may correspond a particular domain name to a particular IP address. Such lists may be used by DNS resolvers to resolve client  DNS requests. Site metrics  may also include metrics stored on a site deployed intermediary \/, such as metrics , , , ,  and . In some embodiments, site metrics  of a GSLB appliance \/ includes appliance collected metrics . In further embodiments, site metrics  of a GSLB appliance \/ includes device\/server provided metrics  at an intermediary \/. In still further embodiments, site metrics  of a GSLB appliance \/ includes user selected\/defined metrics  from intermediaries \/. In yet further embodiments, site metrics  of a GSLB appliance \/ includes MEP based metrics  from intermediaries \/. In still further embodiments, site metrics  of a GSLB appliance \/ includes NMP based metrics  and\/or GSLB metrics  from intermediaries \/.","Connection information  may include any type and form of information about any connection between the network devices. Connection info  may include an information about a connection between GSLB appliance \/ and a site deployed intermediary appliance \/. Connection information  may include information indicating which core  of the plurality of cores  is a master core for a particular connection. Similarly, connection information  may comprise information indicating which core  is not a master core or is a slave core for a particular connection. Connection info  may include a status of a connection, such as: established, active, listen, timed out or closed. Connection info  may maintain a status of a session established between GSLB appliance \/ and intermediary \/. Connection info  may include any information about a connection between a client  and server , via any of the GSLB appliance  and\/or appliance \/. Connection info  may include any updates or net developments regarding the connection, such as change of a connection status or change in a service provided for a connection.","Referring now to , an embodiment of steps of a method for performing global server load balancing services and operations based on metrics information obtained by a master core of a multi-core GSLB appliance is illustrated. In some embodiments, the method is for obtaining and\/or using metrics information by a multi-core intermediary device to provide global server load balancing service to appliances at remote sites. At step , a core A of a multi-core GSLB appliance \/ establishes a TCP connection with a load balancer appliance \/ operating on a site of a plurality of sites. At step , the core A transmits a message to each of the cores of the multi-core GSLB appliance that the core A is a master core for receiving, maintaining and providing metrics information from the load balancer appliance . At step , the core A receives a metric information regarding the site managed by the load balancer appliance. At step , the core A propagates the metric information to each of the cores of the multi-core GSLB appliance. At step , a GSLB virtual server  executing on a slave core B of the multi-core GSLB appliance \/ receives a DNS request. At step , the GSLB virtual server of the slave core B resolves the DNS request using the metric information received from the master core A.","At step , a core A, such as core A, of a multi-core GSLB appliance \/ establishes a transport layer connection with a load balancer appliance \/A operating on a site A of a plurality of remote sites. In some embodiments, core A determines that an internet protocol (IP) address of the GSLB appliance \/ is lower than an IP address of the load balancer intermediary \/A. Core A may, in response to this determination, establish the transport layer connection to the load balancer appliance \/A operating at the site A. In further embodiments, another core, such as a core B of the same GSLB appliance \/ establishes a transport layer connection with another load balancer appliance \/B operating at site B. Core A may further establish a monitor, such as a consolidator , to monitor information or metrics about a status of the site A. In some embodiments, the consolidator  of the core A obtains, maintains and monitors metrics and statistics about load balancing appliance \/A operating at site A. In some embodiments, a core of the GSLB appliance \/, such as the core A, establishes a TCP connection with a load balancing appliance \/. In further embodiments, the core establishes a session with the load balancing appliance \/. In some embodiments, the core establishes a MEP or a SNMP connection with the load balancing appliance \/. In other embodiments, the core establishes a user datagram protocol (UDP) connection with the load balancing appliance \/. In further embodiments, the core establishes a datagram congestion control protocol (DCCP) connection with the load balancing appliance \/. In some embodiments, the core establishes a stream control transmission protocol (SCTP) connection with appliance \/.","At step , the core A transmits a message to each of the cores of the multi-core GSLB appliance \/ that the core A is the master core for receiving, maintaining and providing metric information concerning the load balancing appliance \/A. In some embodiments, core A transmits the message using an inter-core communication system, such as via core to core messaging. In some embodiments, core A sends the message via a shared memory. In other embodiments, core A sends a message via a periodic message update or reset of statuses for the cores . The message may instruct cores , other than the sending core A, to store information indicating that core A sending the message is the master core for obtaining and distributing metric information for the load balancing appliance \/A. In some embodiments, core B may transmit a message to each of the cores  of the GSLB appliance \/ that core B is the master core for receiving, obtaining and maintaining information about load balancing appliance \/B. Core B may transmit such information responsive to establishing a connection with appliance \/B. Cores B may transmit the message to each of the remaining cores  declaring the core B as the master in response to determination by core B that no other core has an established connection with appliance \/B. In some embodiments, core A establishes that no other core  of the GSLB appliance \/ maintains an active connection with load balancer appliance \/A, and in response to this determination transmits the message that core A is the master core.","At step , the core A receives a metric information regarding the site managed by the load balancer appliance A. In some embodiments, load balancing appliance \/A transmits the metric information via the connection established at step . In some embodiments, core B receives metric information from load balancing appliance \/B. In some embodiments, load balancer appliance \/A transmits the metric information to core A of the GSLB appliance \/ via a new connection. In some embodiments, core A receives from load balancing appliance \/A a metric information from a consolidator  operating at the load balancing appliance \/A. In some embodiments, core A receives metric information that may be used for resolving an DNS request, such as information about an IP address, a host name, a domain name or a URL. The metric information may include a list of IP addresses and corresponding domain names to be used for DNS resolution for requests concerning site A. The metric or the information may further comprise information about a status of a server  at site A or the load balancer appliance \/A. In some embodiments, core A receives a metric information to be handled by consolidator  of the GSLB appliance . The metric information may include any information, such as information managed or handled by a consolidator , the received metric information to any information that may involve appliance collected metrics , device\/server provided metrics , user selected\/defined metrics , MEP based metrics , NMP based metrics  and GSLB metrics .","At step , the core A propagates the metric information to each of the cores of the multi-core GSLB appliance \/. In some embodiments, core B propagates the metric information received from site B, or the load balancer appliance \/B to each of the cores of the GSLB appliance \/. The cores A or B may propagate the metric information after the metric information has been consolidated by consolidator  of the GSLB appliance \/. In some embodiments, a core  may receive an updated metric information from core A regarding load balancing appliance \/B and ignore the updated metric information in response to the determination that core A is not a master for information about load balancing appliance \/B. Similarly, a core  may receive updated metric information from core B about load balancer appliance \/B and accept the information in response to the determination that core B is master core concerning information about appliance \/B. In some embodiments, core A propagates an update message to each of the cores  that identifies a difference between an updated metric information and the previous metric information. Cores  receiving the update message may use the update message to update the metric information. In further embodiments, core A propagates the metric information along via instructions that the information propagated is the most up to date information. Each of the receiving cores  may store the received metric information for retrieval in case the metric information needs to be used to respond to a client request. Each of the cores  receiving the propagated metric information may replace prior metric information with the newly received metric information. In some embodiments, each slave core  receiving the propagated metric information may use the received metric information to update the metric information stored locally on the slave core . In some embodiments, the metric information is updated in the consolidator  and then propagated to each of the remaining cores . In some embodiments, the metric information is forwarded to each of the cores  without being consolidated by consolidator . In some embodiments, core A propagates the metric information using an inter-core communication system, such as core to core messaging. In some embodiments, core A propagates the metric information by making it available via a shared memory. In other embodiments, core A propagates the metric information via a periodic message update to each of the cores .","At step , a GSLB virtual server operating on a core B of the multi-core GSLB appliance \/ receives a DNS request from a client . The DNS request may be any type of DNS request requesting a resolution of an IP address for a resource or service. In some embodiments, the DNS request requests to resolve a domain name. In some embodiments, the DNS requests provides a URL and requests an IP address of a network device that provides the resource identified by the URL. In further embodiments, the DNS requests includes an object or any piece of information which the GSLB virtual server  may use to identify a particular server  or a particular load balancing appliance \/. The DNS request may be from any network device on the network , such as any client  or any appliance \/.","At step , the GSLB virtual server of the core B resolves the DNS request based on the metric information received from the core A. GSLB virtual server  may use metric information received from core A in order to resolve the DNS request. In some embodiments, DNS resolver of the GSLB virtual server may use an updated list of domain names or IP addresses received via the metric information at step  to resolve the DNS request. GSLB virtual server  may use list of updated IP addresses and domain names to identify a particular IP address for a response for a DNS request. GSLB virtual server  may use the metric information, such as the list of domain name and IP address pairs, in response to determining that the metric information is received from the core A which is identified as the master core for appliance \/A. GSLB virtual server  may rely on the information provided from the core  identified as the master core  for obtaining and providing information for a particular load balancer intermediary \/. GSLB virtual server  may transmit the response to the DNS request along with the resolved IP address back to the client . In some embodiments, GSLB virtual serve  resolves the IP address and forwards the resolved IP address to other components of the GSLB appliance \/ which then forward the DNS response back to the client ."],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The foregoing and other objects, aspects, features, and advantages of the invention will become more apparent and better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 1E-1H"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 9B"}]},"DETDESC":[{},{}]}
