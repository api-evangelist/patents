---
title: Method and apparatus for network-level monitoring of queue-based messaging systems
abstract: A distributed computing environment and associated method for monitoring a queue-based messaging system. The queue-based messaging system controls the exchange of messages between a server process and client process applications. A messaging application residing at the server computer platform and forming part of the queue-based messaging system manages a plurality of trigger-initiated local queues, each associated with one of the plurality of client process applications and having queue depth, trigger enable, get enable and put enable attributes. A monitoring tool residing on the server computer platform acquires a value for the queue depth, trigger enable, put enable and get enable attributes for a plurality of trigger-initiated local queues and generally simultaneously displays, on a user interface coupled to the server computer platform, the value for the queue depth, trigger enable, put enable and get enable attributes for each one of the plurality of trigger-initiated local queues.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07127507&OS=07127507&RS=07127507
owner: Sprint Communications Company L.P.
number: 07127507
owner_city: Overland Park
owner_country: US
publication_date: 20010927
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Not applicable.","Not applicable.","Not applicable.","The invention is directed to a method and apparatus for network-level monitoring of queue-based messaging systems used to exchange messages between computer platforms of a network. By monitoring plural specified queue attributes for plural specified queues at a selected computer platform, messaging failures for plural computer platforms engaged in message exchange with the selected computing platform may be readily detected and appropriate corrective action initiated.","In a computer network, plural computer systems are joined together to exchange information and share resources. Thus, a computer network is a distributed computing environment in which networked computer systems provide users with the capabilities of access to distributed resources, for example, remote files and databases or remote printers, and to distributed processing, for example, where an application is processed on two or more computer systems. In such a distributed computing environment, the components of an application may reside on different machines but work together. For example, each work station in a computer network often provides a user interface and local analysis and data processing, while larger, host computers, for example, a file server or mainframe, may maintain a large set of data files, coordinate access to large databases and perform larger scale data processing.","In a distributed processing environment, each application or process must be able to communicate and exchange information with other applications or processes in the environment. Currently, many inter-application or inter-process exchanges are performed using a messaging technique commonly referred to as message queuing. In message queuing, a first (or \u201cclient\u201d) process passes a message to request processing by a second (or \u201cserver\u201d) process. The messages are queued at the server process to await handling thereby. In turn, the server process returns an alert when the results are ready. A message queuing messaging technique may be further characterized as being a \u201ctrigger initialized\u201d messaging technique if a notification is issued to the server process upon placement of the request message in the message queue and the message queue meets certain specified criteria. One message oriented middleware product which uses a trigger initialized message queuing messaging technique to enable processes to communicate and exchange information in a distributed computing environment is known as MQ Series messaging software and is commercially available through International Business Machines Corporation of Armonk, N.Y.","A drawback to trigger initialized message queuing messaging techniques such as that disclosed in the MQ Series messaging software is that, if a message is already waiting in a queue when a new message arrives, the trigger flag is not set or otherwise checked when the new message arrives. As a result, if an error occurred during the arrival of a prior message and the trigger flag was not set upon the arrival of the prior message, then all later arriving messages will begin to back up in the queue because the trigger flag remains unset. As a result, both the original message as well as the later arriving messages will not be retrieved by the server process and the requesting messages issued by the client process will remain unprocessed.","A traditional technique used to identify problems in queues is to select individual queues for testing. To test a selected queue, a network administrator constructs a message designed to pass through that queue. If the message fails to arrive in a specified period of time, then the network administrator can reasonably conclude that the selected queue is having problems. It should be readily appreciated that to diagnose problems in a queue-based messaging system by testing individual queues thereof would be a laborious and time consuming task, particularly if the queue-based messaging system has many queues. Accordingly, many queue-based messaging systems are equipped with an interface which enables the network administrator to review the queues themselves. Heretofore, however, the network administrator\/message queue interface has not been properly designed to enable the network administrator to readily identify and rectify problems in the message queues. For example, while the MQ Series messaging software is equipped with a message queue interface (\u201cMQI\u201d) through which a series of administrative functions may be executed, such administrative functions operate on a queue-level. Using the MQI, the network administrator is able to review the status of a selected queue but cannot simultaneously review the status of plural queues. Thus, if a problem develops at the serving platform due to a problem within one of the message queues maintained thereat, the network administrator must review the functioning of each queue to locate the problem queue. Furthermore, the administrative tools available to the network administrator through the MQI are not particularly well configured to diagnose problems within a queue. Oftentimes, upon selecting a queue for examination, the network administrator must parse through pages of information related to the selected queue before the administrator is able to determine whether the queue is functioning properly or improperly.","Accordingly, this invention provides a tool by which a network administrator may readily identify and rectify queuing problems within a queue-based messaging system used for the exchange of messages between client and server processes or computer platforms of a computer network by enabling the network administrator to review selected information regarding selected queues of the queue-based messaging system at the network-level.","In one embodiment, the present invention is directed to a distributed computing environment which includes a server computer platform, a plurality of client computer platforms coupled to the server computer platform, a queue-based messaging system for controlling the exchange of messages between a server process application residing on the server computer platform and a plurality of client process applications residing on respective ones of the plurality of client computer platforms and a system for monitoring the queue-based messaging system. A messaging application residing at the server computer platform manages a plurality of queues, each described by a plurality of attributes. The monitoring system selects at least two of the plurality of queues and at least two of the plurality of attributes describing one or more of the plurality of queues and generates a display which includes a current value for the selected attributes for each one of the selected queues described thereby.","In one aspect of this embodiment of the invention, each one of the plurality of queues is a local queue for receiving messages originating at a corresponding one of the plurality of client process applications and destined for the server process application. Alternately, a first one of the plurality of selected attributes may be common to all queues while a second one of the plurality of selected attributes may be unique to local queues or the first and second ones of the plurality of selected attributes may be unique to local queues. Variously, the second one of the plurality of selected attributes may be a depth attribute; the first one of the selected attributes may be a get attribute and the second one of the selected attributes may be a depth attribute; or the first one of the selected attributes may be a trigger attribute and the second one of the selected attributes may be a depth attribute. In further aspects of this embodiment of the invention, a third one of the plurality of selected attributes may be an attribute common to all queues or may be a get attribute common to all queues.","In another embodiment, the present invention is directed to a distributed computing environment which includes a server computer platform and at least five client computer platforms coupled to the server computer platform. A queue-based messaging system controls the exchange of messages between a server process residing on the server computer platform and client process applications respectively residing on each one of the at least five client computer platforms. A messaging application residing at the server computer platform and forming part of the queue-based messaging system manages at least five trigger-initiated local queues, each associated with one of the at least five client process applications and having a queue depth attribute. A monitoring tool residing on the server computer platform acquires a value for the queue depth attribute for each one of the at least five trigger-initiated local queues and generally simultaneously displays, on a user interface coupled to the server computer platform, the value for the queue depth attribute for each one of the at least five trigger-initiated local queues.","In one aspect of this embodiment of the invention, each one of the at least five trigger-initiated local queues has a trigger enable attribute. In this aspect, the monitoring tool acquires a value for the trigger enable attribute for each one of the at least five trigger-initiated local queues and generally simultaneously displays, on the user interface, the value for the queue depth attribute and the value for the trigger enable attribute for each one of the at least five trigger-initiated local queues. In another aspect of this embodiment of the invention, each one of the at least five trigger-initiated local queues has a get message enable attribute. In this aspect, the monitoring tool acquires a value for the get enable attribute for each one of the at least five trigger-initiated local queues and generally simultaneously displays on the user interface, the value for the queue depth attribute and the value for the get message enable attribute for each one of the at least five trigger-initiated local queues. In still another aspect of this embodiment of the invention, each one of the at least five trigger-initiated local queues has a put message enable attribute. In this aspect, the monitoring tool acquires a value for the put message enable attribute for each one of the at least five trigger-initiated local queues; and generally simultaneously displays, on the user interface, the value for the queue depth attribute and the value for the put message enable attribute for each one of the at least five trigger-initiated local queues. Finally, in still another aspect of this embodiment of the invention, each one of the at least five trigger-initiated local queues has a trigger enable attribute, a get message enable attribute and a put message enable attribute. In this aspect, the monitoring tool acquires a value for the trigger enable attribute, the get message enable attribute and the put message enable attribute for each one of the at least five trigger-initiated local queues and generally simultaneously displays, on the user interface, the value for the queue depth attribute, the value for the trigger enable attribute, the value for the get message enable attribute and the value for the put message enable attribute for each one of the at least five trigger-initiated local queues.","In another embodiment, the present invention is directed to a method for monitoring a queue-based messaging system which controls the transfer of messages between a plurality of client computer platforms and a server platform coupled to the plurality of client computer platforms. At least one attribute which describes each one of a plurality of queues residing at the server computer platform is selected and a value for each one of the at least one attribute is acquired from the server computer platform. The value for each one of the at least one attribute for all of the plurality of queues is then generally simultaneously displayed. In one aspect of this embodiment of the invention, the display of the value for each one of the at least one attribute for all of the plurality of queues is reviewed and corrective action to rectify messaging failures identified from the review of the display is initiated. In another aspect thereof, the display of the value for each one of the at least one attribute for all of the plurality of queues is refreshed and corrective action to rectify messaging failures identified from a comparison of the refreshed display to the display is initiated.","In still another embodiment, the present invention is directed to a computer program product which comprises a computer usable medium and computer readable program code, encoded in the computer usable medium, for generally simultaneously monitoring values for a first plurality of attributes for a second plurality of local queues for a queue-based messaging system. In one aspect of this embodiment of the invention, the computer readable program code further comprises first computer readable program code for acquiring, from the queue-based messaging system, the values for the first plurality of attributes for the second plurality of local queues and second computer readable code for generating a display containing all of the values acquired for the first plurality of attributes for the second plurality of local queues.","Referring now to , a distributed computing environment , for example, a computer network, may now be seen. The distributed computing environment  is comprised of plural computer platforms  and - through -X coupled together by communication links - through -X. As will be more fully described below, the distributed computing environment uses a queue-based messaging system (not shown in ) for the exchange of messages between the various computer platforms  and - through -X which collectively form the distributed computing environment. In the embodiment of the invention disclosed herein, the distributed computing environment is comprised of disparate computer platforms and the queue-based messaging system used to exchange messages between the disparate computer platforms is the aforementioned MQ Series messaging software which supports a wide variety of computer platforms and operating systems.","By way of example, the distributed computing environment  is arranged in a star topology in . It should be clearly understood, however, that other topologies, for example, a ring topology, would also be suitable for the uses contemplated herein. Further by way of example, the computer platform  is a mainframe system and the computer platforms - through -X are server systems. Again, it should be clearly understood that other computer platforms would be suitable for the uses contemplated herein. Finally, while not illustrated in , it is further contemplated that plural personal computers (\u201cPCs\u201d) may be coupled to each server system - through -X. Within the distributed computing environment , the computer platform  is hereby designated as a local platform while the computer platforms - through -X are all designated as remote platforms. Of course, the designation of any particular computer platform as the \u201clocal\u201d platform is purely arbitrary and it should be clearly understood that those computer platforms designated as \u201cremote\u201d platforms should be viewed simply being remote relative to the local computer platform.","The computer platform  is comprised of a processor subsystem , a memory subsystem  and an input\/output (\u201cI\/O\u201d) subsystem  coupled together by a bus subsystem . As used herein, the terms \u201ccouple\u201d or \u201ccoupled\u201d refer broadly to either direct or indirect connection therebetween. The bus subsystem  encompasses the main system bus and any local or other types of busses that collectively couple the processor subsystem , the memory subsystem  and the I\/O subsystem  to one another. The processor subsystem  encompasses the collective processing capability of the computer platform , including the central processing unit (\u201cCPU\u201d) as well as any secondary processing devices, coupled to the CPU by the bus subsystem . Similarly, the memory subsystem  encompasses the collective storage capability of the computer platform , including main, auxiliary, cache and any other memory accessible by the processor subsystem  via the bus subsystem . Finally, the I\/O subsystem  encompasses any and all I\/O devices, for example, floppy, CD-ROM or DVD drives, coupled to the bus subsystem , for writing data to or reading data from the processor subsystem  or the memory subsystem . The I\/O subsystem  also encompasses any data communications equipment (\u201cDCE\u201d), for example, network interface cards or modems, which couple the computing platform  to data terminal equipment (\u201cDTE\u201d) such as the computer platforms - through -X via the communication links - through -X. Finally, the I\/O subsystem  couples user interface  to the computer platform . The user interface  encompasses all devices used by a user, for example, a network administrator, to interact with the computer platform  while either obtaining information therefrom or providing data or instructions thereto. While a typical user interface  encompasses a monitor, keyboard, mouse and printer, it should be clearly understood that there are a wide variety of other devices which may also form part of the user interface .","As may be further seen in , first, second and third software applications ,  and  reside on the computer platform . Each one of the first, second and third software applications ,  and  is comprised of a series of instructions which are encoded in the memory subsystem  as computer readable program code and executable by the processor subsystem . Contained within the first application  is a server process for which one or more of the computer platforms - through -X may issue requests thereto in a manner to be more fully described below. It should be noted, of course, while  shows a single application containing a single server process it should be clearly understood that a single application may contain plural server processes and\/or plural applications, each containing one or more server processes, may reside on the computer platform .","The second application  is a messaging application which enables messages received from a client process residing on a first computer platform, for example, the computer platform -, to be directed to a server process residing on a second computer platform, here, the server process  residing on the computer platform . The messaging application  further enables replies from the server process residing on the second computer platform, here, the server process  residing on the second computer platform , to be returned to the first computer platform, for example, the computer platform -. As will be more fully described below, the messaging application  manages a portion of the memory subsystem , hereafter referred to as messaging application database . Within the messaging application database , the messaging application  maintains plural message queues as well as control information which defines, among other items, the attributes of each queue maintained thereby. Commercially available software suitable for use as the messaging application  is IBM's MQ Series messaging software.","Finally, the third application  is a monitoring tool which, as will be more fully described below, enables a network administrator to monitor queue-based messaging between client processes residing at the computer platforms - through -X and server processes residing at the computer platform  at a network level. Typically, the monitoring tool  will be stored in an auxiliary memory (not shown) of the memory subsystem  prior to the execution thereof by the processor subsystem . A transportable computer usable medium , for example, a floppy disk, CD-ROM or file transfer software, is used to copy the monitoring tool  into the auxiliary memory of the memory subsystem .","Similarly, first and second software applications - through -X and - through -X reside on respective ones of the computer platforms - through -X. Each one of the first and second software applications - through -X and - through -X is comprised of a series of instructions which are encoded in a memory subsystem (not shown) as computer readable program code and executable by the processor subsystem (also not shown) of the respective computer platform - through -X. Contained within the first application  is a client process which may issue requests to the computer platform  in a manner to be more fully described below. It should be noted, of course, while  shows a single application containing a single client process residing on each of the computer platforms - through -X, it should be clearly understood that a single application residing on the computer platforms - through -X may contain plural client processes and\/or plural applications, each containing one or more client processes, may reside on the computer platforms - through -X.","Each messaging application - through -X enables messages from a client process contained in the application - through -X residing at the computer platform - through -X to be directed to a second computer platform, for example, the computer platform . Each messaging application - through -X further enables replies from the server process residing on the second computer platform, here, the server process  residing on the computer platform , to be returned to the client process residing on the first platform, here, the computer platform -. Commercially available software suitable for use as the messaging applications - through -X is IBM's MQ Series messaging software.","A queue-based messaging system is comprised of a messaging application which handles messages for a server process, for example, messaging application , and a messaging application which handles messages for a client process, for example, one or more of the messaging applications - through -X. Referring next to , the messaging application  residing on the local computer platform  which handles messages for the server process application  and the messaging application which handles messages for a client process application on a remote computer platform, for example, the messaging application - which handles messages for the client process application - residing on the remote computer platform - will now be described in greater detail. As may now be seen, a queue manager  resides on the messaging application  and a queue manager  resides on the messaging application -. The queue managers  and  are system programs that provide queuing services to applications. For example, the queue manager  provides queuing services to the process application  while the queue manager  provides queuing services to the process application -. The queue managers  and  further provide application programming interfaces so that the respective application processes  and - serviced thereby can put messages on, and get messages from, queues. Finally, the queue managers  and  provide additional functions so that administrators can create new queues, alter the properties of existing queues, and control the operation of the queue manager itself. It should be noted that, while  shows a single queue manager  and  running on the messaging applications  and -, respectively, it should be clearly understood that plural queue managers may run on a single massaging application. For example, for the aforementioned MQ Series messaging software, plural queue managers may run on MVS, OS\/2, Windows NT, Digital OpenVMS and UNIX systems. It should be further noted that while  shows a single process application  making use of the services of the queue manager , plural applications, whether related to one another or entirely unrelated to one another, may make use of the queue manager  at the same time.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2","FIG. 2"],"b":["118","112","2"]},"Browsing messages on a queue;","Retrieving messages from the queue;","Putting messages on the queue;","Inquiring about attributes of the queue; and","Setting the attributes of the queue.","Plural types of queues may reside in the queue managers  and . Generally, the queues residing in the queue managers  may be characterized as either local, remote or alias queues. A queue is deemed a local queue if it is owned by the queue manager to which the process application is connected. Conversely, a queue is deemed a remote queue if it is owned by a different queue manager. A queue definition object, created when a local queue is defined, will hold the definition information of the queue as well as the physical messages put on the queue. The queue definition object, created when a remote queue is defined, will only hold the information necessary for the local queue manager to be able to locate the queue where the message is to go to. This object is known as the local definition of a remote queue. All the attributes of the remote queue are held by the queue manager that owns it, because it is a local queue to that queue manager. Finally, an alias queue is used to access another queue. As a result, plural process applications may work with a single queue by accessing it with different names.","Residing in the queue manager  are a transmission queue , an alias queue , a plurality of local queues - through -M and a plurality of remote queues - through -N. Similarly, residing in the queue manager  are a transmission queue , a remote queue  and a local queue . The transmission queues  and  are local queues which hold messages destined for a remote queue. The messages held in the transmission queue are forwarded to their destination queue by the queue manager when a channel is available. The local queues - through -M and  are trigger-initiated local queues. When the queue manager places a message on a trigger-initiated local queue and certain conditions are met on that queue, a trigger message is automatically sent to the server process application  to notify the server process application  that a message has been placed on that queue. In turn, the server process application  will then retrieve the message from the trigger-initiated local queue. A condition commonly used for trigger-initiated local queues is that a trigger message will be issued to notify the server process application  that a message has been placed on the trigger-initiated local queue if there are no messages sitting in that queue when the message is placed in the queue. Finally, the queues - through -N and  are remote queues or, more precisely, local definitions of a remote queue where a message, when placed in the remote queue, is to be delivered. For example, the remote queue - holds the information necessary to deliver a message to the local queue . Conversely, the remote queue  holds the information necessary to deliver a message to the local queue -.","As may be noted from even a cursory review of , many more queues reside in the queue manager  than in the queue manager . This disparity is a result of the usage of the computer platforms  and - through -X of the distributed computing environment . As disclosed herein, the computer platform  is a mainframe computer system on which the server process application  residing thereat performs one or more processing tasks for each one of the client process applications - through -X respectively residing at the computer platforms - through -X. Thus, within the queue manager , the local queues - through -M include, at a minimum, a separate trigger-initiated local queue to receive messages from each one of the client process applications - through -X. However, the local queues - through -M may also include additional trigger-initiated local queues, for example, if one or more of the client process applications - through -X exchanges messages with a second server process application (not shown) residing at the computer platform . Similarly, as the server process application  residing at the computer platform  returns messages to each of the client process application - through -X respectively residing at the computer platforms - through -X, the remote queues - through -N include, at a minimum, a separate remote queue to receive messages, from the server process application , destined to each one of the client process applications - through -X. Again, however, the remote queues - through -N may also include additional remote queues, for example, if the server process application  also exchanges messages with a second client process application (not shown) residing at one or more of the computer platforms - through -X.","It should also be noted that there are a number of types of queues not specifically illustrated in  that may reside within the queue managers  or . Among them are a dead-letter queue, a system command queue, a system default queue, a channel queue, an event queue, model queues and dynamic queues. The dead-letter queue is a local queue on which the queue manager and applications put messages they cannot deliver. The system command queue is a queue to which suitably authorized applications can send system commands. System default queues are used to maintain default queue definitions. Channel queues are used for distributed queue management. Event queues hold event messages to be reported by the queue manager or a channel. A model queue is a template of a queue definition. Using the attributes of the model queue, the queue manager can dynamically create either a temporary dynamic or permanent dynamic local queue.","Continuing to refer to , the process by which a message is delivered from a client process, specifically, the process application -, to a server process, specifically, the process application , will now be described in greater detail. The client process application - will first connect to the queue manager  so that the client process application - may request that the queue manager  open the remote queue  which contains a description of the destination of the message. Once the remote queue  is opened, the client process application - places the message in the remote queue . As previously set forth, the remote queue  contains that information necessary to direct the message to the local queue - where it may be retrieved by the server process application . The queue manager  then places the message onto the transmission queue  where it will be transmitted over the channel - to the transmission queue . Upon arriving at the transmission queue , the queue manager  will assume control of the message. From the transmission queue , the queue manager  will first direct the message to the alias queue  (if, as here, plural initiation queues are accessed through a single alias queue) and on to the trigger-initiated local queue -. If there are no messages sitting in the trigger-initiated local queue - upon arrival of the message, the queue manager  will notify the server process application  of the arrival of the message. The server process application  will then connect to the queue manager  to request that the queue manager  open the trigger-initiated local queue - and, after the trigger-initiated local queue - has been opened, the server process application  retrieves the message from the trigger-initiated local queue -.","As previously mentioned, a queue manager, for example, the queue manager  may perform various administrative functions such as creating new queues and altering the properties of existing queues. Additionally, the queue manager  may issue an inquiry regarding an attribute of an object. In MQ Series messaging software, an MQINQ call may be used to inquire as to the current value of one or more attributes of an object. Calls are made through a messaging application program interface (\u201cmessaging API\u201d) , for example, the message queue interface (\u201cMQI\u201d) of the MQ series messaging software. An administrator may also use the messaging API  to issue a MQINQ call from the user interface  to obtain the current value of one or more attributes of an object.","Referring next to , a method of monitoring a messaging system used to exchange messages between computing platforms of a computer network will now be described in greater detail. The method commences at step  and, at step , the messaging API  is used to request the queue manager  to retrieve, from the messaging application database , the names of the queues being managed thereby. For example, invoking an MQINQ call to a NAMELIST object in MVS\/ESA would cause the MQ Series messaging software to retrieve the names of the queues being maintained by the queue manager . At step , those queues to be monitored are selected from the list of queues provided by invoking the MQINQ call to the NAMELIST object. Typically, the queue manager  would maintain plural remote and local queues, including local transmission, alias, and initiation queues, for the server computer platform . While any combination of these queues may be selected for monitoring, one suitable combination of queues to be selected for monitoring would be the local initiation queues - through -X corresponding to the client process application - through -X being served by a selected server process application  at the serving computer platform .","Proceeding on to step , plural attributes to be monitored for each of the selected local initiation queues - through -X are selected. Generally, an attribute describes a characteristic of a queue. While the attributes which are used to describe a queue may vary, for queues established using the MQ Series messaging software, the attributes set forth below are used to describe all queues.","DefPersistence (MQLONG)\n\n","DefPriority (MQLONG)\n\n","InhibitGet (MQLONG)\n\n","InhibitPut (MQLONG)\n\n","QDesc (MQCHAR64)\n\n","QName (MQCHAR48)\n\n","QType (MQLONG)\n\n","Scope (MQLONG)\n\n","In addition to the attributes set forth above, local queues are described using a number of additional attributes. These additional attributes are set forth below.","BackoutRequeueQName (MQCHAR48)\n\n","BackoutThreshold (MQLONG)\n\n","CreationDate (MQCHAR12)\n\n","CreationTime (MQCHAR8)\n\n","CurrentQDepth (MQLONG)\n\n","DefinitionType (MQLONG)\n\n","DefInputOpenOption (MQLONG)\n\n","DistLists (MQLONG)\n\n","HardenGetBackout (MQLONG)\n\n","IndexType (MQLONG)\n\n","InitiationQName (MQCHAR48)\n\n","MaxMsgLength (MQLONG)\n\n","MaxQDepth (MQLONG)\n\n","MsgDeliverySequence (MQLONG)\n\n","OpenInputCount (MQLONG)\n\n","OpenOutputCount (MQLONG)\n\n","ProcessName (MQCHAR48)\n\n","QDepthHighEvent (MQLONG)\n\n","QDepthHighLimit (MQLONG)\n\n","QDepthLowEvent (MQLONG)\n\n","QDepthLowLimit (MQLONG)\n\n","QDepthMaxEvent (MQLONG)\n\n","QServiceInterval (MQLONG)\n\n","QServiceIntervalEvent (MQLONG)\n\n","RetentionInterval (MQLONG)\n\n","Shareability (MQLONG)\n\n","StorageClass (MQCHAR8)\n\n","TriggerControl (MQLONG)\n\n","TriggerData (MQCHAR64)\n\n","TriggerDepth (MQLONG)\n\n","TriggerMsgPriority (MQLONG)\n\n","TriggerType (MQLONG)\n\n","Usage (MQLONG)\n\n","Similarly, a number of attributes are unique to remote queues. These attributes are set forth below.","RemoteQMgrName (MQCHAR48)\n\n","RemoteQName (MQCHAR48)\n\n","XmitQName (MQCHAR48)\n\n","Finally, the following attribute is uniquely associated with alias queues.","BaseQName (MQCHAR48)\n\n","In selecting those attributes to be monitored for the selected queues, it is contemplated that various attributes may be selected and that the various attributes may include attributes common to all types of queues or unique to specific types of queues. In the disclosed embodiment of the invention, however, a pair of attributes common to all queues, specifically, the InhibitGet (hereafter referred to as \u201cGet\u201d) and InhibitPut (hereafter referred to as \u201cPut\u201d) attributes, and a pair of attributes unique to local initiation queues, specifically, the CurrentDepth (hereafter referred to as \u201cDepth\u201d) and TriggerControl (hereafter referred to as \u201cTrigger\u201d) attributes are selected for monitoring.","Continuing on to step , a network monitoring table  is constructed from the selected queues and selected attributes. The constructed network monitoring table  may be seen by reference to . As may now be seen, the constructed network monitoring table  is comprised of two portions\u2014a persistent portion  and a dynamic portion . The persistent portion  of the constructed network monitoring table  is comprised of the queues selected for monitoring at step  and the attributes selected for monitoring at step . The dynamic portion  is comprised of the values for those attributes which will be later acquired in the manner set forth below. In this regard, it should be noted that, because all of the selected queues are local initiation queues and all of the attributes are either common for all types of queues or unique to local queues, each of the selected attributes will have a value for each queue. This may not necessarily be the result, however, depending on the particular queues and attributes selected for inclusion in the network monitoring table .","As may be further seen in , the network monitoring table  is configured such that the values for the Put, Get, Trigger and Depth attributes are listed for each one of a plurality of queues. The number of queues for which the values for these attributes may be listed as part of the network monitoring table may vary depending on a number of considerations such as the number of client process applications exchanging messages with the server process application and the number of rows (each containing the attribute values for a single queue) which can be physically accommodated on the monitor on which the network monitoring table  is displayed. In one embodiment, the network monitoring table  is configured to list the values of the selected attributes for five queues. In another, the network monitoring table  is configured to list the values of the selected attributes for fourteen queues. In another, the network monitoring table  is configured to list the values of the selected attributes for fifteen queues. In still another, the network monitoring table  is configured to list the values of the selected attributes for seventeen queues. Generally, for monitors forming part of the user interface  for a mainframe cannot accommodate more than seventeen queues on the monitor. Accordingly, if the values of the selected attributes are to be displayed for more than seventeen queues, the network monitoring table  may be configured such that the network administrator may scroll down to view the additional queues or may be configured such that the network administrator can pull down a second page to view the additional queues.","Proceeding on to step , the messaging API  issues one or more MQINQ calls to the queue manager  to acquire the current values of the selected attributes for the selected queues. In turn, the queue manager  retrieves the requested information from the messaging application database  and returns the information to the messaging API . Continuing on to step , construction of the network monitoring table  is completed by placing the returned information into the dynamic portion  thereof. The network monitoring table  is then displayed for review by the network administrator, for example, on a monitor of the user interface . Preferably, when the network monitoring table  is displayed for review by the network administrator on a monitor of the user interface , the current values of the selected attributes for the selected queues are displayed generally simultaneously on the monitor. By doing so, the ability of the network administrator to efficiently identify messaging failures in the queue-based messaging system is enhanced.","At step , the network administrator may analyze the network monitoring table  to identify messaging failures in the queue-based messaging system. More specifically, messaging failures may identified for messages exchanged between a selected client computer platform and the server computer platform  by examining the selected attributes for the local initiation queue corresponding to the selected client computer platform. For example, messaging failures between the server computer platform  and the client computer platform - may be identified by examining the current values for the selected attributes for the local queue -.","As previously set forth, in the embodiment of the invention disclosed herein, current values for the Put, Get, Trigger and Depth attributes are displayed for the selected queues. As previously set forth in greater detail, the Put attribute indicates whether the selected local queue, for example, the local queue -, is enabled (yes) or disabled (no) for put operations. If enabled, the queue manager  is able to place messages, typically messages originating at the client process application -, in the local queue -. If disabled, the queue manager  cannot place messages from the client process application - in the local queue -. The Get attribute indicates whether the local queue - is enabled (yes) or disabled (no) for get operations. If enabled, the queue manager  is able to retrieve messages from the local queue -, typically, for delivery to the server process application . If disabled, the queue manager  is unable to retrieve messages from the local queue - for delivery to the server process application . The Trigger attribute indicates whether queue manager  delivers a trigger signal to the process upon placing a message in the local queue -. If enabled, the queue manager  will deliver a trigger signal to the server process application  upon placing a message in the local queue - if certain conditions in the local queue - are met. If disabled, the queue manager  will not deliver a trigger signal to the server process application  upon placing a message in the local queue -, even if those conditions in the local queue - are met. Typically, the queue conditions which affect delivery of the trigger signal is that if there are no messages sitting in the local queue - when a new message is placed in the local queue -, a trigger signal is delivered to the server process application . Conversely, the trigger signal is not delivered if there are messages sitting in the local queue - when the new message is placed in the local queue -. Finally, the depth attribute indicates the number of messages sitting in the local queue -.","Rather than having the network administrator analyze the network monitoring table  to identify messaging failures for the queue-based messaging system, in one embodiment of the invention, it is contemplated that analytical functionality similar to that performed by the network administrator in step  may instead be incorporated into the monitoring tool . For example, the put attribute being disabled, the get attribute being disabled, the trigger attribute being disabled and\/or the depth attribute having a value greater than zero are all considered to be indicative of a potential messaging failure in the corresponding queue. Accordingly, after the monitoring tool  acquires the values of these attributes from the messaging application, rather than merely displaying the acquired values as part of the network monitoring table , the monitoring tool  may be constructed to include logic by which, if the acquired values are deemed to be indicative of a potential messaging failure, when displayed as part of the network monitoring table , all such values will be highlighted to draw attention to the potential messaging failures.","In various embodiments of the invention, various combinations of the selected attributes may be reviewed to determine messaging failures for a selected queue of the queue-based messaging system. In one embodiment, the Depth attribute alone may be used to identify messaging failures for a selected queue of the queue-based messaging system. In another, the Depth attribute in combination with the Trigger attribute may be used to identify messaging failures for a selected queue of the queue-based messaging system. In still other embodiments, the Depth attribute in combination with one or more of the Put, Get and Trigger attributes may be used to identify messaging failures for a selected queue of the queue-based messaging system. Finally, in the disclosed embodiment of the invention, the Put, Get, Trigger and Depth attributes are used in combination to identify messaging failures for a selected queue of the queue-based messaging system.","For example, a review of the network monitoring table  illustrated in  indicates that the local queue - is operating normally, messaging failures have occurred in the local queues - and -X and a probable messaging failure has occurred in the local queue -. More specifically, the local queue - is clearly operating normally because the Put, Get and Trigger attributes are all enabled and there are no messages sitting in the local queue -. In reviewing the local queue -, the value of the Depth attribute indicates that 51 messages are sitting in the local queue -. This, in itself, strongly suggests a messaging failure. However, the Trigger attribute for the local queue - is disabled. As a result, the client process application  has never been notified that there are messages waiting in the local queue -. Accordingly, a messaging failure has clearly occurred. In reviewing the local queue -X, the value of the Depth attribute indicates that 27 messages are sitting in the local queue -X. Again, this, in itself, strongly suggests a messaging failure. However, the Get attribute for the local queue - is disabled. As a result, the client process application  is unable to retrieve messages from the local queue -. Again, a messaging failure has clearly occurred.","Continuing on to step , the network administrator initiates corrective action to rectify messaging failures identified while reviewing the network monitoring table . For example, if messages are backed up in a queue, for example, in the local queue -, the network administrator may decide to issue a trigger message to the server process application  using the messaging API . For example, in the MQ Series messaging software, the messaging API  may be used to issue a MQSET call to the queue manager  to re-set the TriggerControl attribute of the local queue -. More specifically, by changing the status of the TriggerControl attribute to MQTC_ON (i.e., enabling the Trigger attribute) or changing the value of either the TriggerType, TriggerMsgPriority or TriggerDepth attributes under certain conditions when the TriggerControl attribute is already set to MQTC_ON, a trigger message is sent to the process application . By sending a trigger message to the process application , the process application  will begin removing the messages backed up in the local queue -.","At step , the network administrator may either refresh the network monitoring table , thereby returning the method to step  or proceed to step , thereby ending the monitoring of the queue-based messaging system. Typically, the network administrator will decide to refresh the network monitoring table  if the data acquired during generation of the current network monitoring table  is inconclusive as to whether a messaging failure has occurred in one or more of the selected queues. For example, in the network monitoring table , the presence of 123 messages in the local queue - was considered to be strongly indicative of a messaging failure. However, the Put, Get and Trigger attributes are all enabled. Accordingly, it is possible that, rather than having been subject to a messaging failure, the local queue - may merely be experiencing an unusually high volume messages. Under these circumstances, the network administrator would refresh the network monitoring table . Accordingly, an inquiry to the queue manager  to obtain new values for the selected attributes for the selected queues would again be issued at step  and a refreshed display containing the new values for the selected attributes would be generated at step . When the refreshed display is reviewed at step , the previously inconclusive condition of the local queue - may be re-determined. For example, if the refreshed value of the depth attribute indicates that number of messages backed up in the local queue - continues to climb, a messaging failure has clearly occurred and appropriate corrective action should be initiated at step . Conversely, if the refreshed value of the depth attribute indicates that the number of messages backed up in the local queues is steady or declining, it is highly unlikely that a messaging failure has occurred and no corrective action would be needed at step .","Returning momentarily to , it is contemplated that the monitoring tool  may contain program code which includes a first set of instructions to enable the network administrator to interact exclusively with the monitoring tool , for example, in an interactive dialogue, to perform the steps set forth in the method of  to select the queues to be monitored, to select the attributes of the selected queues for which the current values are to be acquired and to initiate any appropriate corrective action. It is further contemplated that the monitoring tool  may contain additional program code which includes a second set of instructions to enable the monitoring tool  to instruct the messaging APT  of the messaging application  to retrieve the selected attributed values for the monitoring tool  and\/or initiate any selected corrective action. Finally, it is still further contemplated that the monitoring tool  may contain further additional program code which includes a third set of instructions to enable the monitoring tool  to construct the network monitoring table  from the list of queues and attributes selected by the network administrator and the values of the selected attributes provided by the messaging API  and to generate a display of the network monitoring table  at the user interface . Of course, it should be understood that the network administrator could access the messaging API  through the user interface  to perform a number of these operations. However, a number of advantages are derived by having the monitoring tool  access the messaging API  on the network administrator's behalf. For example, the network administrator is protected from inadvertently modifying the queues and\/or their attributes when acquiring the current values of selected attributes. Furthermore, the queue-based messaging system can be monitored without the network administrator having detailed knowledge of the messaging API  itself.","Thus, there has been described and illustrated herein, a method and apparatus for network-level monitoring of queue-based messaging systems used to exchange messages between disparate computer platforms of a distributed computing environment. However, those skilled in the art should recognize that numerous modifications and variations may be made in the techniques disclosed herein without departing substantially from the spirit and scope of the invention. Accordingly, the scope of the invention should only be defined by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
