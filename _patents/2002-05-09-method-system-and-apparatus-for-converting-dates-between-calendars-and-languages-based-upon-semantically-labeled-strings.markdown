---
title: Method, system, and apparatus for converting dates between calendars and languages based upon semantically labeled strings
abstract: A method, system, and apparatus are provided for converting dates between calendars and languages. When a string of text is entered into an application program, the string is analyzed to determine whether the string of text includes a date. If the string of text includes a date, the date is semantically labeled with schema information that identifies the calendar and language used to express the date. When a selection is received of the date or an indication that the date is labeled with schema information, a list of actions may be provided identifying conversion options available for the date. One of the conversion options may then be selected resulting in the conversion of the selected date to the calendar and language identified by the selected action. The converted date may then be inserted into the string of text to replace the selected date.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707496&OS=07707496&RS=07707496
owner: Microsoft Corporation
number: 07707496
owner_city: Redmond
owner_country: US
publication_date: 20020509
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["Embodiments of the present invention relate to the field of date conversion. More particularly, embodiments of the invention relate to the field of converting dates between languages and calendars based upon semantically labeled strings.","Modern desktop operating systems are provided with various localization features for improving usability for users throughout the world. For instance, some desktop operating systems provide support for multiple user interface languages. Through this type of support for multiple user interface languages, users can configure the user interface of the operating system to operate in any of a number languages supported by the host operating system.","In addition to operating system support, many application programs also support the use of multiple languages for international users. For instance, a word processing program may allow a user to create documents in English, Thai, Vietnamese, or any other language installed in the operating system and enabled by the user. Documents may also be created that contain text or other information in a combination of languages. In fact, international users of such applications frequently create documents that include text in more than one language.","When creating foreign language documents, users may express dates in more than one language and possibly in more than one calendar type. For instance, a user may refer to a date expressed in the English language and the Gregorian calendar. Similarly, a user may express a date in the That language and the Buddhist calendar.","When creating electronic documents having dates expressed in different languages and calendar types, users may need to convert dates between languages and calendars. For instance, a user may want to convert the English Gregorian date to a That Buddhist date. However, converting between languages and calendars in this manner has heretofore been difficult for a user to accomplish easily. Previously, if a user wanted to convert a date between calendars and\/or languages, the user would have to copy the date to be converted to a clipboard and then paste the date into an external program or World Wide Web (\u201cWeb\u201d) site capable of converting the date.","Once the external program or Web site had completed the conversion, the user would copy the converted date to the clipboard and then paste the converted date back into their document. Although systems such as these permit a user to convert a date between calendars and\/or languages, these systems can be difficult for a user to use because of the large number of steps required to complete the conversion. Moreover, these previous solutions require the user to perform the conversion using the user interface language of the conversion program or Web site. This can be extremely frustrating for a user that does not understand the language of the conversion program or Web site.","Therefore, in light of the above, there is a need for a method, system, and apparatus for easily converting dates between calendars and languages that do not require a user to utilize an external application or Web site to convert dates between calendars and languages. Moreover, there is a need for a method, system, and apparatus for converting dates between calendars and languages that can present conversion options to the user in a user-selected user interface language.","Embodiments of the present invention solve the above-described problems by providing a method, system, and apparatus for easily converting dates between calendars and languages that do not require the use of an external application or Web site to convert dates. Moreover, embodiments of the present invention provide a method, system, and apparatus for converting dates between calendars and languages that can present conversion options to the user in a user-selected interface language. Moreover, embodiments of the invention only present conversion options to the user for languages for which a host operating system or a host application provides support.","According to one actual embodiment of the present invention, a method is provided for converting a date between calendars and languages in a system for creating and editing an electronic document. According to this embodiment of the invention, software modules are executed in conjunction with a software application for creating and editing an electronic document that allow the convenient conversion of dates between calendars and languages. When a user types a string of text, such as a paragraph, the string is analyzed to determine whether the string of text includes a date. If the string of text includes a date, the date is semantically labeled with schema information that identifies the calendar and language used to express the date. For instance, if a date is expressed using the Gregorian calendar and the English language, schema information will be associated with the string indicating the language and calendar type.","Once a date has been identified within a string of text, such as a paragraph, the application may display an indication to the user that the date has been semantically labeled. This indication also identifies to the user that actions may be performed on the date. When a selection is received of the date or the indication, a list of actions may be provided to the user identifying conversion options available for the date. For instance, if the identified date is expressed in the English language and the Gregorian calendar, an action menu item may be displayed to the user for converting the date into a Hebrew Lunar date. Other types of conversion options may also be presented to the user for converting the date between languages and calendars.","According to one embodiment of the invention, a current user interface language setting for the application program is determined prior to providing the list of actions to the user. When the user selects the list of actions, the available actions are displayed to the user in a language specified by the current user interface language setting. In this manner, the user is always presented the conversion options in the current user interface language.","According to another actual embodiment of the invention, each of the enabled languages for the application program may also be identified prior to displaying the list of actions. Once the enabled languages have been identified, actions may be included in the list of actions only for converting between language and calendar types corresponding to enabled languages. In this manner, a user is never presented with conversion options for converting to languages unsupported by the current configuration of their application program.","After the list of actions has been displayed to the user, a selection of one of the actions may be received. In response to receiving the selection of a conversion action, a converted date may be generated by converting the selected date to the calendar and language identified by the selected action. Once the conversion has been completed, the converted date may be inserted into the string of text to replace the selected date. According to various embodiments of the present invention, a document object model supported by the host application may be utilized to insert the converted date into the string of text.","According to another embodiment of the present invention, a system is provided for converting a date between calendars and languages. According to this embodiment of the invention, the system includes a recognizer plug-in capable of receiving a portion of an electronic document as a string of text from an application program. For instance, the recognizer plug-in may receive a paragraph of text from an application program as it is typed by the user. Once the recognizer plug-in has received the string of text, the recognizer plug-in analyzes the string of text to determine whether the string of text includes a date. If the string of text includes a date, the recognizer plug-in semantically labels the date with schema information identifying the calendar and language used to express the date. This information is then passed by the recognizer plug-in back to the application program.","According to one embodiment of the invention, the system also includes an application program for creating and editing an electronic document. For instance, the application program may comprise a word processor, a spreadsheet application program, an e-mail application which includes editing functions, or other types of application programs for creating and editing electronic documents. According to this embodiment of the invention, the application program is capable of displaying the string of text along with an indication that the date has been semantically labeled by the recognizer plug-in. This indication may comprise a user interface object for indicating to a user that the date has been semantically labeled and that conversion actions may be performed on the date.","The application program may also be operative to receive a selection of the date or the indication and to provide a list of actions that may be performed on the date to convert the date to another language or calendar. The application may then receive the selection of one of the list of actions and provide the selection and the date to an action plug-in.","The system also includes an action plug-in that is capable of generating a converted date by converting the selected date to the calendar or language identified by the selected action from the list of actions. The action plug-in is also operative to replace the selected date with the converted date in the string of text. According to one actual embodiment of the invention, the action plug-in may replace the date with the converted date in the string of text by accessing a document object model provided by the application program.","According to various embodiments of the present invention, the system provided herein may also include an action plug-in that is operative to register with the application program prior to performing any conversion functions. As a part of the registration procedure, the action plug-in may provide the list of actions that may be performed on the date to convert the date to another calendar or language to the application program. Moreover, when creating the list of actions, the action plug-in may determine a current user interface language setting for the application program and generate the action menu items in a language specified by the current user interface language setting. Additionally, the action plug-in may also identify one or more enabled languages for the application program and generate each of the action menu items only for conversion between language and calendar types corresponding to the enabled languages. In this manner, the action plug-in ensures that users will be presented lists of actions in the current user interface language and only for conversions supported by the currently enabled languages of the application program.","Other embodiments of the present invention also provide a computer-controlled apparatus and a computer-readable medium for converting dates between calendars and languages based on semantically labeled strings. These and other details regarding the various embodiments of the invention will become more apparent from the detailed description that follows.","As described briefly above, embodiments of the present invention provide a method, system, apparatus, and computer-readable medium for converting dates between languages and calendar types. In the following detailed description, references are made to the accompanying drawings that form a part hereof, and in which are shown by way of illustration specific embodiments or examples. These embodiments may be combined, other embodiments may be utilized, and structural changes may be made without departing from the spirit and scope of the present invention. The following detailed description is, therefore, not be taken in a limiting sense, and the scope of the present invention is defined by the appended claims and their equivalents.","Referring now to the drawings, in which like numerals represent like elements through the several figures, aspects of the present invention and the exemplary operating environment will be described.  and the following discussion are intended to provide a brief, general description of a suitable computing environment in which the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer, those skilled in the art will recognize that the invention may also be implemented in combination with other program modules. Additional aspects of an illustrative operating environment and software architecture for implementing the various embodiments of the present invention are described in U.S. patent application Ser. No. 09\/588,411, entitled \u201cMethod and System for Semantically Labeling Strings and Providing Actions Based on Semantically Labeled Strings\u201d, which is expressly incorporated herein by reference.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Turning now to , an illustrative computer architecture for a personal computer  for practicing the various embodiments of the invention will be described. The computer architecture shown in  illustrates a conventional personal computer, including a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer, such as during startup, is stored in the ROM . The personal computer  further includes a mass storage device  for storing an operating system , application programs, such as the application program , and data.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media, provide non-volatile storage for the personal computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by the personal computer .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, DVD, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer.","According to various embodiments of the invention, the personal computer  may operate in a networked environment using logical connections to remote computers through a TCP\/IP network , such as the Internet. The personal computer  may connect to the TCP\/IP network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The personal computer  may also include an input\/output controller  for receiving and processing input from a number of devices, including a keyboard or mouse (not shown). Similarly, an input\/output controller  may provide output to a display screen, a printer, or other type of output device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the personal computer , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash. The mass storage device  and RAM  may also store one or more application programs. In particular, the mass storage device  and RAM  may store an application program  for creating and editing an electronic document . For instance, the application program  may comprise a word processing application program and the electronic document  may comprise a word processing document. The application program  may also comprise a spreadsheet application program and the electronic document  comprise a spreadsheet. Similarly, the application program  may comprise an electronic mail application program and the electronic document  may comprise an electronic mail message. Application programs for creating and editing other types of electronic documents may also be used with the various embodiments of the present invention.","Embodiments of the present invention provide program modules for use in conjunction with the application program  that convert dates contained within the electronic document  between calendar types and languages. In particular, embodiments of the invention provide a recognizer plug-in  and an action plug-in . As will be described in greater detail below, the recognizer plug-in  recognizes dates in an electronic document  and labels the dates with semantic information identifying the language and calendar that the dates are expressed in. The recognizer plug-in  then passes this information to the application program  for use by the action plug-in . The action plug-in  performs actions on the recognized dates for converting between calendars and languages.","According to various embodiments of the present invention, the action plug-in  may also generate a list of actions that may be performed on a given date. As a part of this process, the action plug-in  may query language settings  of the application program  or operating system . The language settings  specify the current user interface language and the currently installed and enabled languages for the application program  and the operating system . The list of actions may then be customized based on the current user interface language and the installed languages. Additionally, the action plug-in  may also query the date format settings  for the operating system  and use the date format settings  to format converted dates. The date format settings  are specified by the user and define the format in which dates should be displayed by default. For instance, a user may specify that dates be expressed using numbers only, such as \u201c04\/02\/02\u201d, or using names and numbers, such as \u201cApr. 2, 2002.\u201d Other possible formats may also be specified. Additional details regarding the operation of the recognizer plug-in  and the action plug-in , including the use of the language settings  and the date format settings , will be described in greater detail below.","Referring now to , an exemplary software architecture for use in conjunction with the various embodiments of the present invention will be described. The architecture shown in  includes an application program , such as a word processor application program, a spreadsheet application program, or other type of application program for creating and editing electronic documents. The application program  may also comprise a Web browser.","The application program  is able to communicate with a recognizer dynamically linked library (\u201cDLL\u201d)  and an action DLL . As will be described in greater detail below, the recognizer DLL  controls one or more recognizer plug-ins A-N and the action DLL  controls one or more action plug-ins A-N.","According to one embodiment of the invention, the recognizer plug-ins A-N and the action plug-ins A-N are automation servers. Automation servers are well-known software components that are assembled into programs or add functionality to existing programs running on the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash. Automation servers may be written in a variety of computing languages and can be plugged or unplugged from a program at runtime without having to recompile the program.","The recognizer DLL  handles the distribution of text strings from an electronic document being edited by the application program  to the individual recognizer plug-ins A-N. The recognizer plug-ins A-N recognize particular strings in an electronic document, such as a word processing document or a spreadsheet document. The recognizer plug-ins A-N may be packaged with the application program module  or they may be written by third parties to recognize particular strings of interest. Typically, the recognizer DLL  passes strings to the recognizer plug-ins A-N in single paragraphs or cell value increments. However, strings may be passed to the recognizer plug-ins A-N in other sizes and formats.","As part of recognizing certain strings as including semantic information, the recognizer plug-ins A-N determine which strings are to be labeled and how they are to be labeled. After receiving these results from the various recognizer plug-ins , the recognizer DLL  sends semantic categories to the application program module . According to one actual embodiment of the invention, a recognizer plug-in  is provided for recognizing strings as containing dates. According to this embodiment of the invention, the semantic category comprises schema information that identifies the calendar and language used to express the date. This information is returned to the recognizer DLL  by the recognizer plug-in  along with other information that may be utilized by a corresponding action plug-in , such as a copy of the date, and parameters describing the various parts of the date such as the month, year, date, calendar type, day of week, and language that the month name is express in. Additionally, the recognizer plug-in  may return information identifying the location of the date within the text string, including the length of the text string and the character number of the first letter of the date. It should be appreciated that each of the recognizer plug-ins A-N are executed separately. The recognizer DLL  is responsible for handling the asynchronicity that results from different recognizer plug-ins A-N returning results at different times. In this manner, various types of data may be recognized within a text string and different actions provided for each semantically labeled string. Additional details regarding the operation of the recognizer plug-in  for recognizing dates will be described below with reference to .","Semantic categories are stored as part of the electronic document along with other document information and are available when a document is transmitted from one computer to another computer. According to one embodiment, storing semantic categories in an electronic document is controlled by an \u201cEmbed semantic categories\u201d checkbox. The checkbox is on by default. Turning it off will prevent semantic categories in the document from being saved. The state of the checkbox is per document. The same checkbox controls saving for both .htm and .doc documents. Checking a \u201cSave semantic categories as eXtensible Markup Language (XML) properties\u201d checkbox (off by default) will write out the text of all of the semantic categories in the document and their labels in the header of the Hypertext Markup Language (HTML) file in XML (that is using the same tags as are used inline, but surrounded by <xml> And <\/xml>) for easy identification and parsing by search engines and knowledge management systems.","After a string is labeled by a recognizer plug-in A-N, schema information is sent to the application program module . A user of the application program module  may then execute actions that are associated with the schema information on the recognized string. The action DLL  manages the action plug-ins A-N that are executed in order to perform the actions. As with the recognizer plug-ins A-N, the action plug-ins A-N may be packaged with the application program module  or written by third parties to perform particular actions that are of interest. The action plug-ins A-N provide possible actions to be presented to the user based upon the schema information, or type label, associated with the string. As will be described in greater detail below, the list of actions provided to the user is dynamically generated for each schema type. This information is then provided to the application program  which displays the list of actions to the user when the string is selected.","After an action has been chosen from the list of actions, the action DLL  manages the appropriate action plug-in A-N and passes the necessary information between the action plug-in and the application program module  so that the action plug-in may execute the desired action. Typically, the application program module  sends the action DLL  an automation request to invoke the action the user has selected. As will be described in greater detail below, according to one embodiment of the invention, an action plug-in  is provided that converts recognized dates between various calendars and languages. Addition details regarding the operation of the action plug-in  and the schema information utilized to identify different calendar and language types will be described in greater detail below with reference to .","Referring now to , an illustrative user interface provided by the various embodiments of the present invention will be described. As shown in , a string of text  may be typed by a user into an application program module, such as a word processor. Once the user has provided the string of text , the string of text is provided to a recognizer plug-in  that recognizes dates contained within the string of text . The date  identified by the recognizer plug-in  is identified to the application program module as a type of semantic information upon which actions may be performed. Therefore, the application program module  provides an indication to the user that actions may be performed on the date . This indication may be provided to the user by highlighting the date  or providing a user interface indication  in proximity to the date .","When the date  or the indication  is selected by a user, a list of actions is displayed that may be performed on the date to convert the date to another language or calendar. This list of actions may comprise a dropdown menu  having one or more menu items corresponding to the list of actions that may be performed on the date. According to one embodiment of the invention, the contents of the dropdown menu may be displayed in one of many different languages. The language in which the dropdown menu  is displayed is based on a current user interface language for the application program module  or the operating system . In this manner, international users throughout the world will be displayed a dropdown menu  in their currently installed and active user interface language.","As shown in , the dropdown menu  includes text  describing the type of conversion that may take place on the date . The dropdown menu  also includes another indication of the date  to be converted. The dropdown menu  also includes a list of actions  that may be performed to convert the date . According to one embodiment of the invention, the list of actions  displayed in the dropdown menu  is limited to conversion options between language and calendar types corresponding to languages enabled in the application program . In this manner, actions for converting dates between languages, or sets of languages, not supported by the application program  will not be shown in the dropdown menu . For example, an action item for converting into a Hebrew Lunar date would not appear on the dropdown menu  if support for the Hebrew language is not enabled in the application program .","As shown in , the application program module  also adds menu items A and B to the dropdown menu . The selection of item A removes capabilities for converting between dates and calendars from the personal computer  and the selection of item B provides a list of user selectable preferences defining the operation and behavior of the recognizer and action plug-ins.","As described briefly above, when a date  is recognized by the recognizer plug-in , the date  is labeled with schema information identifying the calendar and language used to express the date . Schema information is then returned to the application program module  and is utilized by the action plug-in  to determine the appropriate list of actions  that should be included in the dropdown menu . In this manner, only conversion operations consistent with the type of calendar and language used to express the date  are provided to the user via the dropdown menu .","The date  shown in  is a Gregorian date that expresses the month using a number rather than a name. The schema name \u201curn:schemas-microsoft-com:office:cs:smarttags#date1\u201d is used when, as shown in , a Gregorian date string uses a number rather than a name to express the month. The dropdown menu  shown in  is the display provided to user when the English language is the currently enabled user interface language and where the list of enabled languages in the application program  includes Arabic, English, Hebrew, Hindi, That, and Vietnamese. It should be appreciated, however, that the dropdown menu  would appear, differently if another language was selected as the current user interface language and if other user interface languages were enabled in the application program .","As will be discussed in greater detail below, the application program  receives most of the text shown in the dropdown menu  from the action plug-in . This process occurs when the application program  is initially executed and the action plug-in  registers itself with the application program . Additional details regarding this registration process will be described below with reference to .","The recognizer plug-in  is also capable of recognizing dates expressed in different languages and utilizing different digit shapes. For instance, as shown in , the recognizer plug-in  may recognize a date  expressed in the Gregorian calendar and using an Arabic language name for the month. The schema name \u201curn:schemas-microsoft-com:office:cs:smarttags#date1ar\u201d is utilized to identify a Gregorian date string using an Arabic language name for the month. As shown in , the recognizer plug-in  may also recognize a Gregorian date string using a Hebrew language name for the month, as illustrated by the date . The schema name \u201curn:schemas-microsoft-com:office:cs:smarttags#date1he\u201d is utilized to represent this type of date.","As shown in , the recognizer plug-in  may also recognize Gregorian date strings utilizing an English language name for the month, as shown by the date . This schema name \u201curn:schemas-microsoftcom:office:cs:smarttags#date1en\u201d is utilized to semantically label such a date. Similarly, as shown in , the recognizer plug-in  may also recognize a Hijri date string using an English transliterated name for the month. For instance, the date  shown in  is such a date. The schema name \u201curn:schemas-microsoft-com:office:cs:smarttags#date1hijrien\u201d is utilized to identify such a date.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 3F","FIG. 3F"],"b":["36","220","32"]},"The recognizer plug  may also recognize dates expressed in the Hebrew Lunar calendar. As known to those skilled in the art, the length of a Hebrew Lunar month is more closely associated with the lunar cycle than a Gregorian month is, but does not have as tight an association with the moon as the Hijri calendar uses. The first day of the Hebrew Lunar year is tied to a certain season, but varies by a few weeks within the solar year. A thirteenth-month is also added at intervals in order to keep the season and months together in the Hebrew Lunar calendar. The numbers in a Hebrew Lunar date, including the year, are usually written not with digits, but instead with Hebrew letters. The recognizer plug-in  is capable of recognizing such letters. The dropdown menu  displayed when a Hebrew Lunar date  is recognized is shown in .","As known to those skilled in the art, the Hijri calendar is also different from the Gregorian calendar. Hijri months are tied to the cycle of the moon and a number of days in a Hijri year is different from the Gregorian calendar. The recognizer plug-in  is also capable of converting dates between the Hijri calendar and other calendars. As shown in , a Hijri date  may be expressed using the Arabic language. In this situation, the schema name \u201curn:schemas-microsoft-com:office:cs:smarttags#date1hijriar\u201d is utilized.","The schema name \u201curn:schemas-microsoft-com:office:cs:smarttags#date1hi\u201d is utilized when a recognized Gregorian date string uses a Hindi language name for the month, such as the date  shown in . It should be appreciated that numbers in the Hindi language often use the Devanagari digit shapes. The recognizer plug-in  is able to recognize these and other common digit shapes utilized to represent dates.","Although embodiments of the invention have been described as capable of recognizing dates in the Gregorian, Hijri, and Lunar calendars and the Arabic, English, Hebrew, Hindi, Thai, and Vietnamese languages, other calendars and languages may also be recognized and converted similarly.","Referring now to , an illustrative routine  will be described for registering the date conversion software components with the application program . In particular, when the action plug-in  and the recognizer plug-in  for converting between languages and dates are first executed, they are registered with the application program . By registering with the application program , the application program  is made aware of the software components and enabled for use with the schema types recognized by the recognizer plug-in . Moreover, the action items to be displayed to the user corresponding to each schema type are also enumerated to the application program  so that the application program  can display the dropdown menu  when a date  or indicator  is selected by a user.","The routine  begins at block , where the current user interface language is identified. As discussed briefly above, the current user interface language may be stored in the language settings  maintained by the operating system  or the application program . Once the current user interface language has been identified, the routine  continues to block . At block , the currently enabled languages are also identified. In particular, the language settings  may again be consulted to determine the languages that are enabled and installed for use with the operating system  or with the application program .","Once the currently enabled languages have been identified, the routine  continues to block , where action menu items are generated for each schema type for the enabled languages. In this manner, action items are generated for each schema type and for the currently enabled languages. No action items are generated for conversion options corresponding to languages that are not installed or enabled.","From block , the routine  continues to block , where the action menu items are created in the current user interface language. In this manner, the dropdown menu  displayed to the user is provided in the current user interface language. From block , the routine continues to block , where the action menus for each schema are returned to the application program . According to one embodiment of the invention, the application program  displays the dropdown menu  in response to the selection of a date  or an indicator . However, it should be appreciated that the action plug-in  or other software component may be responsible for the display of the dropdown menu . The routine  continues from block  to block , where it ends.","Turning now to , an illustrative routine  will be described for processing the input of a new string at the application program . The routine  begins at block , where the application program  receives a new string, such as when a user enters a new paragraph into an electronic document or edits a previously entered paragraph. From block , the routine  continues to block  where the application program  passes the new string to the recognizer DLL . As described above, the recognizer DLL  is responsible for communicating with the application program , managing the jobs that need to be performed by the recognizer plug-ins A-N, receiving results from the recognizer plug-ins A-N, and sending schema information to the application program module  for recognized dates. It should be understood that, in one embodiment of the invention, a paragraph is passed to the recognizer DLL  at block . However, in alternative embodiments, a sentence, the contents of a spreadsheet cell, a section of the document, the entire document, etc., may be passed to the recognizer DLL . In other words, it should be appreciated that the embodiments of the present invention are not limited to simply passing a paragraph to the recognizer DLL .","From block , the routine  continues to block , where the recognizer DLL  passes the string to the recognizer plug-ins A-N. The routine  then continues to block  where the recognizer plug-ins are executed on the paragraph to recognize key words within the string. In particular, the recognizer plug-in for converting dates is executed on the string. An illustrative routine describing the operation of the recognizer plug-in for date conversion is described below with reference to .","At block , the results from the recognizer plug-in  are received at the recognizer DLL . The routine  then continues to block , where a determination is made by the recognizer DLL  as to whether the paragraph has been edited since the string was transmitted to the recognizer plug-ins A-N. If the paragraph has been edited, the routine  returns to block , where the edited string is passed to the recognizer DLL . If the paragraph has not been edited, the routine  continues to block , where the recognizer DLL  sends the results received from the recognizer plug-in  to the application program . The routine  then continues to block , where it ends.","Referring now to , an illustrative routine  will be described that illustrates the operation of the recognizer plug-in  for converting between calendars and languages according to one embodiment of the present invention. The routine  begins at block , where a string of text is received at the recognizer plug-in  from the recognizer DLL . The routine  then continues to block , where a determination is made as to whether the string of text contains digit characters. As described above, the digit characters may be identified regardless of the language in which the characters are represented.","From block , the routine  continues to block , where a determination is made as to whether digits were found in the string of text. If no digits were found, the routine  branches from block  to block , where it returns to block , shown in . If, however, at block , it is determined that digits were found in the string of text, the routine  continues to block .","At block , a determination is made as to whether the identified digits in the string of text may represent a year or a day of week. For example, extremely large numbers or extremely low numbers may be ruled out as possible candidates to represent a year. Similarly, extremely large numbers may also be ruled out as being candidates to represent a day. These determinations may be made on a per calendar basis. Other types of determinations may also be made for determining whether the digits may possibly represent a day or a year.","From block  the routine  continues to block  where a determination is made as to whether the digits located in the string of text may possibly represent a day or year. If the digits may not represent a day or year, the routine  branches to block , where it returns to block , shown in . If the identified date in the string of text may comprise a day or year, the routine  continues to block .","At block , text located before and after the located digits is scanned to identify additional text portions of the date or additional number portions of the date. For instance, if the digits located within the string of text comprise a year, the text before the number may be scanned to locate the date portion and, for instance, a month portion. Similarly, if the digits located are the date portion, the text after the date may be scanned to locate the year portion of the date. In this manner, the string of text representing the entire date, such as \u201cFriday, Feb. 28, 1992,\u201d may be identified.","According to one embodiment of the invention, text prior to and after the digits located in the string of text may be searched only for dates expressed in languages currently supported by the personal computer . To perform this function, a list of month names and day names may be consulted for each language to identify text corresponding to dates expressed in the installed languages. In this manner, processing time is not expended on identifying dates that are expressed in languages not supported by the personal computer .","From block , the routine  continues to block , where a determination is made as to whether the portion of the string of text identified, including text before and after the digits, is a date candidate. A date candidate is an all numeric date expressed in a certain format, or date and year digits expressed along with words indicating that the digits represent a date, such as a month name, or a day name. If the digits and the surrounding text are not a date candidate, the routine  branches to block , where it returns to block  shown in . If, however, the digits and the surrounding text are a date candidate, the routine  continues to block .","At block , the date format for the candidate date is identified. For instance, the separator characters used to separate a date and a year may be identified to properly locate the digits used to express the day, month and year. According to one embodiment of the invention, a preferred date format as specified by the user in the date format settings  may be utilized to determined the correct date format for the date candidate.","From block , the routine  continues to block  where a determination is made as to whether the identified date format is recognized. If the date format is not a recognized date format, the routine  branches to block , where it returns to block , shown in . If the date format is recognized, the routine  continues to block  where a determination is made as to whether the date candidate is a valid date. This may include determining whether the date is a valid date expressed in one of the several calendar types. If the candidate is not a valid date, the routine  branches from block  to block , where it returns. If, however, the candidate is a valid date, the routine  continues to block .","At block , the schema name associated with the language and calendar type used to express the date is returned to the recognizer DLL . Additionally, a \u201cproperty bag\u201d is also returned to the recognizer DLL . The property bag is an object which stores information about the recognized date that may be utilized by the action plug-in . In particular, the property bag includes properties that identify the year, month number, and day of month for the recognized date. The property bag may also include a format number indicating generally which format the recognized date was written in. This number is utilized according to one embodiment of the invention so that the format for a converted date may be matched to the format of the recognized date. For example, if the weekday name was in the recognized date, then the action plug-in  would attempt to include the equivalent weekday name in the converted date.","A calendar type number may also be utilized in the property bag to distinguish Gregorian, Hijri, and Hebrew Lunar calendars. A language number may also be included in the property bag to indicate which language the month name was written in. Additionally, an index to the recognized date within the string of text may also be returned to the recognizer DLL . All of the information returned from the recognizer plug-in  to the recognizer DLL  may be subsequently passed to the action plug-in  and used in the conversion process. This is described in greater detail below with respect to .","Referring now to , an illustrative routine  will be described for processing the selection of a semantically categorized date. As discussed above, once a date has been recognized within a string of text by the recognizer plug-in A, the date may be highlighted or an indication may be provided to the user indicating that the date has been recognized and that actions may be performed on the date. Accordingly, at block , a determination is made as to whether the date or indicator has been selected by a user. If the date has not been selected, the routine  continues to block , where it ends. If, however, the date or indicator has been selected, the routine  continues to block .","At block , the application program  displays the list of actions associated with the schema corresponding to the selected date. In this manner, the dropdown menu  described above with reference to  is presented to the user. The routine  then continues from block  to block , where a determination is made as to whether the user has selected one of the items from the list of actions. If the user has made the selection of a user interface item other than one of the items from the list of actions, the routine  branches to block , where the list of actions is removed. If, however, the user does select one of the items from the list of actions, the routine  continues to block .","At block , the application program  calls the action plug-in  corresponding to the appropriate schema type and indicates that an action item has been selected. The call from the application program  to the action plug-in  includes the schema name corresponding to the recognized date, the item number of the selected menu item, the name of the calling application program , a pointer into an object model provided by the application program  for accessing the document , the property bag described above with reference to , and the text of the recognized date. The routine  then continues to block , where the action plug-in for date conversion is executed. An illustrative routine for executing the action plug-in  for date conversion is described below with reference to . Once the action plug-in  has completed its execution, the routine  continues from block  to block , where it ends.","Referring now to , an illustrative routine  will be described for executing an action plug-in  for date conversion. The routine  begins at block , where the action plug-in  receives a call from the action DLL  indicating that the user has selected an action menu item. From block , the routine  continues to block , where the action plug-in  confirms that the date information received from the action DLL  actually appears to be a recognizable date. This may include determining that the received year number is a recognizable date for the calendar type. Other types of checks may also be made to confirm that the received date is valid.","From block , the routine  continues to block , where a determination is made as to whether the received year is represented utilizing only two digits. If the received year is represented utilizing four digits, the routine  branches from block  to block . If, however, the received year is expressed utilizing only two digits, the routine  continues to block . At block , the century corresponding to the digit year is generated. This may include making an assumption regarding the century digits based on the value of the year digits. For instance, if the year digits are \u201c99\u201d, it may be assumed that the century digits are \u201c19\u201d. Other types of assumptions may also be made to generate the century digits corresponding to the year digits.","From block , the routine  continues to block , where a determination is made as to whether the date is being represented in the Gregorian calendar. If the date is being represented in the Gregorian calendar, the routine  continues to block , where the Gregorian date is converted by the action plug-in  to the calendar and language types indicated by the selected action item menu. Accordingly to one embodiment of the invention, the action plug-in  is configured for use within an environment provided by the MICROSOFT OFFICE (\u201cMSO\u201d) productivity suite provided by MICROSOFT Corporation of Redmond, Wash. According to this embodiment of the invention, the conversion that occurs at block  is performed by calling the routine INTLDATE, which is a part of the MSO shared program code. As known to those skilled in the art, the INTLDATE routine can convert between calendars and languages. From block , the routine  then continues to block , discussed below. If, at block , it is determined that the recognized date is not expressed in a Gregorian calendar, the routine  continues to block .","At block , a Gregorian date is estimated from the received date. The routine then continues to block , where the estimated Gregorian date is converted to a date in the calendar type of the received date. For instance, if the received date is expressed in the Hijri calendar, the estimated Gregorian date is then converted to its equivalent in the Hijri calendar. This conversion may also be performed by calling the MSO shared code described above.","From block , the routine  continues to block , where a determination is made as to whether the converted date is equal to the received date. If the converted date is equivalent to the received date, this means that the estimated Gregorian date is the actual equivalent of the received date. Therefore, if the converted date does not equal the received date, the routine  branches to block , where parameters are adjusted for estimating the Gregorian date from the received date. The routine then continues from block  to block , where the Gregorian date is again estimated and the above procedure repeated.","If, however, at block  it is determined that the converted date is equal to the received date, then the routine  continues to block . At block , the converted Gregorian date is converted to the format and language specified by the selected action menu item. This conversion is performed by a call to the INTLDATE function in the MSO shared code.","From block , the routine  then continues to block  where the day of the week is determined if necessary to expressing the converted day in a particular format. For instance, if the received date only includes the date and year number, the day of week, such as \u201cWednesday\u201d, may be identified. The routine  then continues to block , where the date in the string of text is replaced with the converted date. According to one embodiment of the present invention, the replacement is made by accessing a document object model provided by the application program . Through the document object model, the action plug-in  can directly access the document  and make changes therein. Details regarding the use of such a document object model are well known to those skilled in the art. From block , the routine  continues to block , where it returns to block , described above with reference to .","Based on the foregoing, those skilled in the art should appreciate that various embodiments of the present invention provide a method, system, apparatus, and computer-readable medium for converting dates between calendars and languages based upon semantically labeled strings. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 3A-3I"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 6A-6B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 8A-8B"}]},"DETDESC":[{},{}]}
