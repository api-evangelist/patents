---
title: Guest partition high CPU usage mitigation when performing data transfers in a guest partition
abstract: An invention is disclosed for offloading operations, such data transfers, of a guest partition to a host partition. A guest operating system is presented with virtualized resources rather than physical resourcesâ€”e.g. a guest virtualized processor, guest virtualized memory space, and a guest virtualized direct memory access (DMA) controller. The guest partition can detect the guest operation system attempt to initiate a data transfer, and can instruct the host partition to perform the data transfer. The guest partition need not perform the data transfer using the guest virtual resources. The host partition can perform the data transfer to a remote computing as instructed by the guest partition without copying the data to the host virtualized memory space. The host partition can provide a message to the guest partition indicative of a status of the data transfer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843669&OS=08843669&RS=08843669
owner: Microsoft Corporation
number: 08843669
owner_city: Redmond
owner_country: US
publication_date: 20110909
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This application has subject matter related to matter in patent application Ser. No. 13\/096,680 filed on Apr. 28, 2011, the contents of which is incorporated by reference herein in its entirety.","A virtual machine is a software representation of a physical machine upon which programs execute. A virtual machine presents to a program, such as a guest operating system (OS), software representation of physical resources, which may include virtualized versions of one or more central processing units (CPUs), system memory, and peripheral devices. Attempts by the guest OS to access these virtual resources, such as the virtualized system memory, are typically received by the virtual machine and executed on the virtualized CPU of the virtual machine.","Most, or all, of the virtual machines operate with a limited number of virtual CPUs. The limited number of virtual CPUs can constrain the guest OS operations, which may include processor intensive operations such as transferring data from one memory location to another memory. In addition, virtual machines are typically partitioned with limited capability to share their virtual resources across the partitions. Thus, operations that are offloaded from one virtual machine to another virtual machine are often offloaded inefficiently because the operation offloads may require high CPU usage of the one virtual machine or may require copying data between the virtual machine memories.","In various embodiments, methods and systems are disclosed for enabling virtual machines to share resources and to offload operations of guest OSes from one set of virtual resources to another.","In an embodiment, a virtual machine representative of a guest partition on physical hardware can send an instruction to another virtual machine representative of a host partition on the physical hardware. The instruction from the guest partition to the host partition can include a description of the guest OS operation, such as a data read, write, or copy, the addresses of the source and destination memory spaces, and the amount of data to be processed.","In an embodiment, upon the receipt of the instruction from the guest partition, the host partition can process and execute the instruction using the host virtual resources using the available host virtual resources, such as host CPUs, host direct memory access (DMA) controllers, or host devices capable of DMA transfers.","In an embodiment, the host partition can, in turn, send a message to the guest partition indicative of a status of the guest partition instruction that the host partition received. For example, the message can include an indication that the guest partition instruction was processed completely.","In an embodiment where the guest partition sends an instruction to the host partition to execute a guest OS operation, the guest partition does not execute the guest OS operation contained in the instruction on the guest partition virtual resources. Instead, the guest partition offloads the guest OS operation to the host partition using the instruction. As such, the guest partition virtual resources can be freed and can be allocated to other operations.","In addition to the foregoing, other aspects are described in the claims, drawings, and text forming a part of the present disclosure. It can be appreciated by one of skill in the art that one or more various aspects of the disclosure may include but are not limited to circuitry and\/or programming for effecting the herein-referenced aspects of the present disclosure; the circuitry and\/or programming can be virtually any combination of hardware, software, and\/or firmware configured to effect the herein-referenced aspects depending upon the design choices of the system designer.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the disclosure. Certain well-known details often associated with computing and software technology are not set forth in the following disclosure to avoid unnecessarily obscuring the various embodiments of the disclosure. Further, those of ordinary skill in the relevant art will understand that they can practice other embodiments of the disclosure without one or more of the details described below. Finally, while various methods are described with reference to steps and sequences in the following disclosure, the description as such is for providing a clear implementation of embodiments of the disclosure, and the steps and sequences of steps should not be taken as required to practice this disclosure.","It should be understood that the various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the disclosure, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the disclosure. In the case of program code execution on programmable computers, the computing device generally includes a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may implement or utilize the processes described in connection with the disclosure, e.g., through the use of an application programming interface (API), reusable controls, or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The term circuitry used throughout the disclosure can include hardware components such as hardware interrupt controllers, hard drives, network adaptors, graphics processors, hardware based video\/audio codecs, and the firmware\/software used to operate such hardware. The term circuitry can also include microprocessors configured to perform function(s) by firmware or by switches set in a certain way or one or more logical processors, e.g., one or more cores of a multi-core general processing unit. The logical processor(s) in this example can be configured by software instructions embodying logic operable to perform function(s) that are loaded from memory, e.g., RAM, ROM, firmware, and\/or virtual memory. In example embodiments where circuitry includes a combination of hardware and software an implementer may write source code embodying logic that is subsequently compiled into machine readable code that can be executed by a logical processor. Since one skilled in the art can appreciate that the state of the art has evolved to a point where there is little difference between hardware, software, or a combination of hardware\/software, the selection of hardware versus software to effectuate functions is merely a design choice. Thus, since one of skill in the art can appreciate that a software process can be transformed into an equivalent hardware structure, and a hardware structure can itself be transformed into an equivalent software process, the selection of a hardware implementation versus a software implementation is left to an implementer.","Embodiments of the invention may execute on one or more computer systems.  and the following discussion are intended to provide a brief general description of a suitable computing environment in which embodiments of the invention may be implemented.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["20","21","21"]},"Computer  may also comprise graphics processing unit (GPU) . GPU  is a specialized microprocessor optimized to manipulate computer graphics. Processing unit  may offload work to GPU . GPU  may have its own graphics memory, and\/or may have access to a portion of system memory . As with processing unit , GPU  may comprise one or more processing units, each having one or more cores.","Computer  may also comprise a system memory , in which at least portion of programming to carry out aspects of the invention may be stored, and a system bus  that communicative couples various system components including the system memory  to the processing unit  when the system is in an operational state. The system memory  can include read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start up, is stored in ROM . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, or a local bus, which implements any of a variety of bus architectures. Coupled to system bus  may be a direct memory access (DMA) controller  that is configured to read from and\/or write to memory independently of processing unit . Additionally, devices connected to system bus , such as storage drive I\/F  or magnetic disk drive I\/F  may be configured to also read from and\/or write to memory independently of processing unit , without the use of DMA controller .","The computer  may further include a storage drive  for reading from and writing to a hard disk (not shown) or a solid-state disk (SSD) (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The storage drive , magnetic disk drive , and optical disk drive  are shown as connected to the system bus  by a storage drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable storage media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the computer . Although the example environment described herein employs a storage drive, a removable magnetic drive  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as flash memory cards, digital video discs or digital versatile discs (DVDs), random access memories (RAMs), read only memories (ROMs) and the like may also be used in the example operating environment. Generally, such computer readable storage media can be used in some embodiments to store processor executable instructions embodying aspects of the present disclosure and operable to convert computer  into a special purpose computing device. Computer  may also comprise a host adapter  that connects to a storage device  via a small computer system interface (SCSI) bus .","A number of program modules comprising computer-readable instructions may be stored on computer-readable media such as the storage disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . Upon execution by the processing unit, the computer-readable instructions cause actions described in more detail below to be carried out or cause the various program modules to be instantiated. A user may enter commands and information into the computer  through input devices such as a keyboard  and mouse . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device can also be connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another computer, a server, a router, a network PC, a peer device or other common network node, and typically can include many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  can include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  can be connected to the LAN  through a network interface card (NIC) or adapter . When used in a WAN networking environment, the computer  can typically include a modem  or other means for establishing communications over the wide area network , such as the INTERNET. The modem , which may be internal or external, can be connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In an embodiment where computer  is configured to operate in a networked environment, OS  is stored remotely on a network, and computer  may netboot this remotely-stored OS rather than booting from a locally-stored OS. In an embodiment, computer  comprises a thin client where OS  is less than a full OS, but rather a kernel that is configured to handle networking and display output, such as on monitor .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1"],"b":["202","200","200","20","202","1","202","202","202","202"]},"Hypervisor microkernel  can enforce partitioning by restricting a guest operating system's view of the memory in a physical computer system. When hypervisor microkernel  instantiates a virtual machine, it can allocate pages, e.g., fixed length blocks of memory with starting and ending addresses, of system physical memory (SPM) to the virtual machine as guest physical memory (GPM). Here, the guest's restricted view of system memory is controlled by hypervisor microkernel . The term guest physical memory is a shorthand way of describing a page of memory from the viewpoint of a virtual machine and the term system physical memory is shorthand way of describing a page of memory from the viewpoint of the physical system. Thus, a page of memory allocated to a virtual machine will have a guest physical address (the address used by the virtual machine) and a system physical address (the actual address of the page).","A guest operating system may virtualize guest physical memory. Virtual memory is a management technique that allows an operating system to over commit memory and to give an application sole access to a contiguous working memory. In a virtualized environment, a guest operating system can use one or more page tables to translate virtual addresses, known as guest virtual addresses into guest physical addresses. In this example, a memory address may have a guest virtual address, a guest physical address, and a system physical address.","Each guest partition can include one or more virtual processors such as virtual processors  through  that guest operating systems  through  can manage and schedule threads to execute thereon. Generally, the virtual processors  through  are executable instructions and associated state information that provide a representation of a physical processor with a specific architecture. For example, one virtual machine may have a virtual processor having characteristics of an Intel x86 processor, whereas another virtual processor may have the characteristics of a PowerPC processor. The virtual processors in this example can be mapped to logical processors of the computer system such that the instructions that effectuate the virtual processors will be backed by logical processors. Thus, in these example embodiments, multiple virtual processors can be simultaneously executing while, for example, another logical processor is executing hypervisor instructions.","In the above example, computer system  includes a host partition  that can also be thought of as domain  in the open source community. A host partition may also be referred to as a parent partition or a root partition. The host partition  can include device drivers  that allow the interaction of applications with the underlying physical hardware of computer system . As such, the host partition  can have access to physical hardware of computer system , such as processor  and DMA controller . The host partition  can also include a number of virtual DMA controllers  that can represent a virtualization of the DMA controller . In addition, the host partition  can include a number of virtual processors  that the host partition can manage and schedule threads to execute thereon. Hypervisor microkernel  can allocate pages of system physical memory (SPM) to the host partition as host physical memory (HPM).","The host partition  can be configured to provide resources to guest operating systems executing in guest partitions -N by using virtualization service providers  (VSPs) that are also known as back-end drivers in the open source community. In this example architecture, the host partition  can gate access to the underlying hardware. The VSPs  can be used to multiplex the interfaces to the hardware resources by way of virtualization service clients (VSCs) that are also known as front-end drivers in the open source community. The VSCs  and  can be different than the rest of the drivers in the guest partitions in that they may be supplied with a hypervisor, not with a guest. In an exemplary embodiment, the path used to by VSPs  and VSCs  and  can be thought as the virtualization path.","The host partition VSPs  and the guest partition VSCs  and  can connect to a virtual machine bus  (VMBus). The VMBus  is a logical channel which enables inter-partition communication. The guest partitions requests to the virtual resources, such as the virtual processors  and , can be redirected via the VMBus  to the devices, such as the virtual processors , in the host partition which can manage the requests. The response from the host partition to the guest partition can also redirected via the VMBus . This entire process can be transparent to the guest OSes  and . In another embodiment, the host partition VSPs  and the guest partition VSCs  and  can communicate over a network, such as a TCP\/IP network, by sending and receiving message packets.","Generally speaking, and as illustrated by the figures, the combination of virtual processors, various VSCs, and memory in a partition can be considered a virtual machine such as virtual machine  or .","Guest operating systems ( and ) can be any operating system such as, for example, operating systems from Microsoft\u00ae, Apple\u00ae, the open source community, etc. The guest operating systems can include user\/kernel modes of operation and can have kernels that can include schedulers, memory managers, etc. Generally speaking, kernel mode can include an execution mode in a processor that grants access to at least privileged processor instructions. Each guest operating system can have associated file systems that can have applications stored thereon such as terminal servers, e-commerce servers, email servers, etc., and the guest operating systems themselves. The guest operating systems can schedule threads to execute on the virtual processors and instances of such applications can be effectuated.","In an embodiment, one or more guest OSes, such as guest OSes  and , and a host OS, such as host OS , execute on a physical host computer, such as computer system . A guest OS produces graphical output (e.g. application windows) in the guest partition memory space. The guest partition associated with the guest OS can transfer the graphical output data to at least one remote computing device connected to the computer system  over a network, where the graphical output can be displayed to at least one remote user. The guest partition can transfer the graphical output to a memory space associated with the at least one remote display device. The guest partition can also transfer the graphical output to a host memory space. The guest partition can instruct the host partition to process a second transfer of the graphical output from the host memory space to the memory space of the at least one remote display device. The host partition can then execute the second graphical output transfer as instructed by the guest partition. The transfer of graphical output between memory spaces can be accomplished using direct memory access transfers or DMA transfers.","In an embodiment, the guest partition can inform the host partition of the address of the guest memory space containing the graphical output and instruct the host partition to transfer the graphical output to the memory space of the at least one remote computing device. The address of the guest memory space containing the graphical output can be translated into a host memory space address without transferring the graphical output from the guest memory space to the host memory space. The host partition can then use the host memory space address to access and transfer the graphical output to the memory space of the at least one remote computing device. The host partition can accomplish the graphical output transfer to the remote computing device using a DMA transfer.","In a direct memory access (DMA), some hardware resources of a host computer may read from or write to system memory independently of the CPU. The CPU may execute an instruction that results in sending an instruction to the DMA device to initiate the read\/write, but the read\/write itself is performed independently of the CPU inasmuch as the CPU may perform other operations while the DMA device carries out the read\/write. When the DMA device has completed the read\/write, it may send an interrupt to the CPU indicating that the read\/write has been completed. Examples of hardware devices that commonly have DMA capability include dedicated DMA controllers, disk drive controllers, sound cards, GPUs, and network cards.","In a DMA transfer, a segment, or block, of memory is copied from a source device to a destination device (both of which may be the same device, with the source and destination being different locations on the device). In some system architectures, the DMA transfer is performed by a DMA controller. The communications bus via which this DMA transfer occurs is sometimes referred to as an ISA (Industry Standard Architecture) bus. In a PCI (Peripheral Component Interconnect) bus, PCI devices are configured to perform DMA transfers without the use of a separate DMA controller, inasmuch as the PCI device itself comprises its own DMA controller. This may be known as bus mastering DMA. In the bus mastering scenario, the PCI device involved with the transfer performs the transfer. There are also various system-on-a-chip architectures where a DMA controller or DMA engine is embedded within the one chip that also performs CPU functions.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 3","FIG. 3","FIG. 1","FIG. 2","FIG. 2","FIG. 2","FIG. 2","FIG. 1","FIG. 2","FIG. 1","FIG. 2","FIG. 1"],"b":["300","302","312","302","312","342","302","360","20","300","200","330","202","302","1","312","342","340","22","25","360","20","200","350","300","360","300","360","350","300","360","53","350","360","300","350","330"]},"A mapping of memory addresses can be used to enable applications running on a guest operation system (OS), such as a guest OS  of the guest partition , to read, write, and copy data from and to a memory space of the computer system , such as the memory space .","As previously described, the hypervisor  can allocate a system memory space, such as the memory space , to a partition, such as the guest partition . In an embodiment, the system memory space can be addressed using a system physical address (SPA), such as SPA . The hypervisor microkernel  can translate the SPA into a guest physical address (GPA), such as GPA , and can present the GPA to the guest partition. From the perspective of the guest partition, the GPA may appear to start at physical address zero or any other page-aligned physical address and may span as large a region as is supported by the hypervisor microkernel . The hypervisor microkernel  can, for example, save the memory allocation and the SPA-to-GPA translation in shadow page tables .","Similarly, a guest partition, such as the guest partition , or a guest OS of the guest partition, such as the guest OS , can allocate virtual memory space to applications running on the guest OS. The virtual memory space can be a virtualization of a portion of a system memory space, such as the system memory space , that the hypervisor microkernel  allocated and presented to the guest partition using a GPA, such as the GPA . The guest partition or the guest OS can address the virtual memory using a guest virtual address (GVA), such as GVA . From the perspective of the applications running on the guest OS, the GVA may appear to start at physical address zero or any other page-aligned physical address and may span as large a region as is supported by the guest partition or the guest OS. The guest partition or the guest OS can, for example, save the memory allocation and the GPA-to-GVA translation in guest page tables .","As such, two layers of memory address translation may be needed for an application running on a guest OS to read, write, or copy data to or from a system memory space. As an example, a graphics application running on the guest OS , can write graphics output data to a virtual memory space addressed by the GVA . The guest OS  can use the guest page tables  to translate the GVA  into the GPA . The hypervisor microkernel  can use the shadow page tables  to translate the GPA  into the SPA . The SPA  can represent the address of the system memory space  where graphics output data is saved.","In an embodiment, the hypervisor microkernel  can be configured to translate the GVA  to SPA  directly, eliminating the GVA-to-GPA and the GPA-to-SPA translations. The GVA-to-SPA translation can be saved in the shadow page tables .","In an embodiment, a similar mapping of memory addresses can exist for a host partition, such as the host partition . For example, a host virtual address (HVA)  used to address a host virtual memory space can be translated into a host physical address (HPA)  using, for example, host page tables . The hypervisor microkernel  can further translate the HPA  into a system physical address (SPA) using, for example, the shadow page tables . The SPA  can represent an address of a memory space within the system memory . In a further embodiment, the hypervisor microkernel  can present the SPA  to the host partition . As such, the HPA  can be the same physical address as the SPA , eliminating the HPA-to-SPA translation.","In an embodiment, the hypervisor microkernel  can manage and provide the guest partition  and the host partition  access to the same memory space . For example, the hypervisor microkernel  can provide shared access of memory space  to the guest partition  and the host partition . In another embodiment, the hypervisor microkernel  can cycle and reallocate access of the memory space  between the guest partition  and the host partition . In such embodiments, the GPA  and the HPA  can be translated by the shadow page tables  into the same SPA  representing the address of the memory space . In addition to the GPA-to-SPA and HPA-to-SPA translations, the microkernel hypervisor  can save a GPA-to-HPA translation and\/or a GVA-to-HVA translation in shadow page tables .","In the primary embodiment, the guest partition  data transfer between memory space  and a memory space of a remote computing device  can be offloaded to the host partition . The guest partition  can detect the guest OS  attempt to instruct a virtualized hardware device of the guest partition  to read, write, or copy data (hereinafter \u201cdata transfer\u201d) to or from the memory space in the remote computing device . In an embodiment, this detection may comprise the guest OS  sending an instruction indicative of the data transfer attempt to a virtual machine (VM) of the guest partition  intended for a virtual CPU or a virtual DMA controller of the VM. In another embodiment, the guest partition  may be configured to use drivers, such as VSC  in , to receive and manage the guest OS  data transfer requests.","The guest partition  may send an operation description to the host partition . The operation description may include, for example, data transfer instruction  instructing the host partition  to offload the execution of the data transfer from the guest partition  to the host partition . The data transfer instruction  may consist of a data transfer description (e.g. read, write, or copy), the type and amount of data to be transferred, address of the source memory space (e.g. the guest physical address  representative of the memory space ), and the address of the destination memory space (e.g. the address of the memory space of the remote display device ). In an embodiment, the guest partition  can send the operation description over a VMBus, such as VMBus  in , using a VSC, such as VSC  in . The host partition  can receive the operation description over the VMBus using a VSP, such as VSP  in . In another embodiment, the guest partition  can send the operation description to the host partition  using the hypervisor microkernel  or using a packet over a communication bus, such as a TCP\/IP network. Upon sending of the operation description, the guest partition  can free or otherwise reuse guest virtual resources involved in the data transfer.","In response to the operation description, the host partition  can communicate with the hypervisor microkernel  and query a host physical address space (HPA)  that the host partition  can use to transfer the data to the remote computing device . The hypervisor microkernel  can determine a memory space in the system memory  allocated to the host partition  and can use, for example, the shadow page tables  to provide the corresponding HPA  to the host partition .","In an embodiment where the memory space is the same for the host partition  and the guest partition , such as the memory space , the hypervisor microkernel  can use, for example, the GPA-to-HPA translation stored in the shadow pages  to provide the corresponding HPA  to the host partition . The host partition  need not transfer data from the memory space  to another memory space in the system memory .","In an embodiment where the memory space is different between the host partition  and the guest partition , the hypervisor microkernel  can provide the host partition  two HPAs; the first and second HPA can represent the corresponding host physical addresses of the memory space  and the different memory space respectively. The hypervisor microkernel  can, for example, use the GPA-to-SPA and HPA-to-SPA translations saved in the shadow page tables  to provide the two HPAs to the host partition . In a further embodiment where the HPA and SPA are the same, the HPA-to-SPA translation step can be eliminated. The hypervisor microkernel  can instead present two SPAs to the host partition  corresponding to the memory space  and the different memory space respectively. The host partition  can then transfer the data from the memory space  to the different memory space using the host virtual resources or using the underling physical resources of the computer system . For example, the host partition  can use the virtual processors  or the virtual DMA controllers  for a DMA transfer of the data from the memory space  to the different memory space. Alternatively, the host partition  can directly use the processor  or the DMA controller  for a DMA transfer of the data from the memory space  to the different memory space.","In a further embodiment where the operation description is sent from the guest partition  to the host partition  using the hypervisor microkernel , the host partition  may receive the HPA  or the SPA directly from the hypervisor microkernel  eliminating the need for the host partition  to query the hypervisor microkernel .","In response to receiving the HPA , the host partition  can translate the HPA  into a host virtual address (HVA)  using, for example, host page tables . The host partition  can process the operation description and instruct the host virtual resources or the underlying physical resources of the computer system  to execute the operation contained therein using the HPA  or HVA .","The host partition  can manage and determine the availability of the host virtual resources and\/or the availability of the underlying physical resources of the computer system . The host partition  can instruct the available virtual or physical resources to process and transfer the data between the memory space corresponding to the HPA  or the HVA  and the memory space of the remote computing device . For example, the host partition  can instruct one or more of the virtual processors  to transfer the data. The instructed virtual processors  can further instruct one or more virtual DMA controllers  or one or more virtual resources with DMA capability to transfer the data using a DMA transfer. In response to the instruction, the instructed virtual DMA controllers  or virtual resources with DMA capability can effectuate the data transfer without the virtual processors  devoting resources to the data transfer operation itself. In another example, the host partition  can instruct the processor  to transfer the data. The instructed processor  can further instruct the DMA controller  or one or more physical resources with DMA capability to transfer the data using a DMA transfer. In response to the instruction, the instructed DMA controller  or physical resources with DMA capability can effectuate the data transfer without the processor  devoting resources to the data transfer operation itself. In an embodiment, the host partition  can transfer the data to the remote computing device  over a network  by routing the data through the NIC  of computer system  as previously described.","When transferring the data, the instructed devices, such as one or more of the virtual processors , one or more of the virtual DMA controllers , the processor , and\/or the DMA controller  can send a status message to the host partition  indicative of the data transfer status. The host partition  may query and receive from the instructed devices the status of the data transfer. Upon completion of the data transfer by the virtual DMA controllers , the virtual DMA controllers  can, for example, send a status message consisting of an interrupt to the virtual processors . Likewise, when a DMA data transfer is effectuated by the DMA controller , the DMA controller  can send a status message consisting of an interrupt to the processor . The interrupt message can cause the corresponding processor (i.e. the virtual processors  or the processor  as applicable) to save the processor state and handle an event associated with the processor interrupt. Similarly, and as an example, upon completion of a data transfer by the virtual processors  or the processor , the corresponding processor can send interrupts or inter-processor interrupts to the host resources indicating that the transfer is complete. Upon completion of the data transfer, the host partition  can free or otherwise reuse the host virtual resources or the underlying physical resources of the computer system  that were involved in the data transfer.","In response to receiving the status message, the host partition  can send a communication message over the communication bus to the guest partition . The communication message may comprise, for example, data transfer status  indicative of the status of the data transfer. As previously explained, in an embodiment, the communication bus can be a VMBus. In such case, the data transfer status  may include a VMBus interrupt sent from the host partition  using a VSP and received by the guest partition  using a VSC. In another embodiment, the data transfer status  can be sent using the hypervisor microkernel  or using another communication bus, such as a TCP\/IP network.","In response to receiving the communication message from the host partition , the guest partition  may complete the original operation, or may free or otherwise use the resources in which the data was stored. For example, an application running on the guest OS  can access and write new data in the virtual memory space corresponding to the GVA . The hypervisor microkernel  managing the access to the system physical addresses may reallocate system physical addresses or update the shadow page tables .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 4","FIG. 4","FIGS. 1-3"]},"Operation  depicts a guest partition determining that a guest OS of the guest partition has attempted to instruct a virtualized hardware device of the guest partition to transfer data to or from a destination that can comprise a memory space in the remote computing device. The data transfer may be, for example, a DMA transfer. The remote computing device can be a device connected via a network to a computing system containing the guest partition or can be another partition within the computing system. As described above in , this determination may comprise the guest OS sending an instruction indicative of the data transfer attempt to a virtual machine (VM) of the guest or may comprise the guest partition configured to use drivers to receive and manage the guest data transfer requests. Operation  may also include the guest partition translation of memory addresses (e.g. HVA and GPA).","Operation  depicts the guest partition sending to the host partition an operation description indicative of instructing the host partition to transfer data to or from the destination. As described above in , the operation description may consist of a description of the data transfer (e.g. read, write, or copy), the type and amount of data to be transferred, the address of the source memory space (e.g. the guest physical address), and the address of the destination memory space (e.g. the memory space of the remote computing device). The operation description can be sent using a communication network, such as a VMBus or a TCP\/IP network, or using a hypervisor microkernel. Operation  may also include the guest partition freeing and reusing the guest virtual resources that were involved in the data transfer attempt to execute operations other than the data transfer.","Operation  depicts the host partition receiving the operation description and processing the operation contained therein. As described above in , a hypervisor microkernel can map memory addresses (e.g. GPA, HPA, and SPA). The host partition can manage the host virtual resources or the underlying physical resources of the computing system and instruct the available host virtual or physical resources to transfer the data between the memory space corresponding to a HPA or a SPA and the destination memory space. The data transfer may comprise a DMA transfer. The host partition can query and receive from the virtual or physical resources a message indicative of a status of the data transfer. Upon completion of the data transfer, the host partition can free or otherwise reuse the host virtual resources or the underlying physical resources of the computing system that were involved in the data transfer.","Operation  depicts the host partition sending a message to the guest partition indicative of a status of the data transfer. As described in , the message can be sent using the communication network, such as the VMBus or the TCP\/IP network, or using the hypervisor microkernel. In an embodiment, the guest partition can complete the original operation and can free or otherwise use the resources in which the data was stored. The hypervisor microkernel can also update the mapping of GPA, HPA, SPA.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 5","FIG. 1","FIG. 1"],"b":["500","510","520","510","21","520","22","520","522","524","526","528"]},"While the present disclosure has been described in connection with the preferred aspects, as illustrated in the various figures, it is understood that other similar aspects may be used or modifications and additions may be made to the described aspects for performing the same function of the present disclosure without deviating there from. Therefore, the present disclosure should not be limited to any single aspect, but rather construed in breadth and scope in accordance with the appended claims. For example, the various procedures described herein may be implemented with hardware or software, or a combination of both. The invention may be implemented with computer-readable storage media and\/or computer-readable communication media. Thus, the invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium. Likewise, the invention, or certain aspects or portions thereof, may be embodied in propagated signals, or any other machine-readable communications medium. Where the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus configured for practicing the disclosed embodiments. In addition to the specific implementations explicitly set forth herein, other aspects and implementations will be apparent to those skilled in the art from consideration of the specification disclosed herein. It is intended that the specification and illustrated implementations be considered as examples only."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
