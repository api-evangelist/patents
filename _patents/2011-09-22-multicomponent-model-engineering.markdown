---
title: Multi-component model engineering
abstract: Multi-component model engineering is described, for example, to model multi-component dynamical systems in which the true underlying processes are incompletely understood such as the Earth's biosphere, whole organisms, biological cells, the immune system, and anthropogenic systems such as agricultural systems, and economic systems. In an embodiment individual component models are linked together and associated with empirical data observed from the system being modeled in a consistent, repeatable manner. For example, a model component, its links with data, its outputs, and its links with other model components, are specified in a format to be passed directly to inference routines which use an inference engine to infer the most likely parameters of the multi-component model given subsets of the empirical data. The inferred parameter values take the form of a probability distribution representing the degree of uncertainty in most likely parameter. An embodiment describes ways of identifying model components for revising.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935136&OS=08935136&RS=08935136
owner: Microsoft Corporation
number: 08935136
owner_city: Redmond
owner_country: US
publication_date: 20110922
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Multi-component models are often used to model dynamical systems that can be conveniently represented as a system of interacting components. Examples include models of the Earth's biosphere, whole organisms, biological cells, the immune system, and anthropogenic systems such as agricultural systems, automobiles and economic systems. A dynamical system in this context is one whose state can change through time as a result of the behavior of mechanisms internal to the system, although this could be in response to changes in factors external to the system. In multi-component models, individual aspects of the modeled system are each represented using a dedicated model component. The model components are then interconnected to form a whole multi-component model. Designing the model components and the way these are to be interconnected can be a complex task, particularly when the systems being modeled are not fully understood. For example, this is often the case for natural systems in which scientists only partially understand their functioning.","Empirical data is typically used to parameterize and evaluate multi-component models, especially when the underlying mechanisms of the system being modeled are not fully understood. This can be a challenging process because relevant data may come from multiple sources, in various formats, in variable quantities, and with different access permissions.","The embodiments described below are not limited to implementations which solve any or all of the disadvantages of known multi-component model-engineering systems.","The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key\/critical elements or delineate the scope of the specification. Its sole purpose is to present a selection of concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.","Multi-component model engineering is described, for example, to model multi-component dynamical systems in which the true underlying processes are incompletely understood such as the Earth's biosphere, whole organisms, biological cells, the immune system, and anthropogenic systems such as agricultural systems, and economic systems. In one embodiment individual component models are linked together and associated with empirical data observed from the system being modeled in a consistent, repeatable manner. For example, a model component linking and data association process outputs results in a specified format direct to inference routines which use an inference engine to infer the most likely parameters of the multi-component model given subsets of the empirical data. In various embodiments the inferred parameter values take the form of a probability distribution representing the degree of uncertainty in most likely parameter. In an embodiment ways of identifying whether any of the model components need revising are described.","Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.","Like reference numerals are used to designate like parts in the accompanying drawings.","The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present example may be constructed or utilized. The description sets forth the functions of the example and the sequence of steps for constructing and operating the example. However, the same or equivalent functions and sequences may be accomplished by different examples.","Although the present examples are described and illustrated herein as being implemented in a multi-component dynamic global vegetation model (DGVM), the system described is provided as an example and not a limitation. As those skilled in the art will appreciate, the present examples are suitable for application in a variety of different types of multi-component models of dynamical systems.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100"]},"In the embodiments described herein the model components are probabilistic; that is probability distributions may be assigned to the parameters of the model components representing the degree of certainty or uncertainty in the knowledge of that parameter's value. These probability distributions are initially set to default values, often incorporating prior knowledge about the parameters most likely values, and an inference engine repeatedly updates the probability distributions by comparing the predictions of a parameterized model with training data. For example, the mean of a probability distribution may represent the most probable value for a parameter and may be updated as more is learnt from training data about the value of the particular parameter. For example, the variance of a probability distribution may represent the degree of uncertainty about a parameter value. For example, the variance may be reduced representing increased certainty in the knowledge of the parameter value as more is learnt from the training data.","The engineering system  may be used to establish which model components are to be used, how these are interconnected, and which data sets are to be used to train, validate and test the model and\/or model components. The engineering system  may also be used to establish how performance of the resulting model is to be assessed, for example, by formally comparing model predictions with data in specific ways. The engineering system optionally includes a facility to visualize model performance assessment results, predictions and\/or simulations generated by the model and uncertainty of parameters of the various component models. The engineering system  provides a framework to enable scientists to develop and refine models of complex dynamical systems in an efficient, repeatable and consistent manner. Using the system scientists are able to define multi-component models, to couple the component models with datasets, to assess the component models and the whole multi-component model and to assess where most of the uncertainty or inconsistency lies within the multi-component model.","In the example of  a plurality of libraries of model components ,  are shown. These may be in the form of source code, software binaries or other software specifying functions representing biological, physical or other dynamical processes. Different versions of the model components may be selected by an operator to form a multi-component predictive model. In this way the engineering system enables scientists to define multi-component models in a simple, repeatable and rigorous manner. In the case that the engineering system is used to form a dynamic global vegetation model (DGVM) the libraries of model components ,  may comprise a library of vegetation component models and a library of other component models such as soil hydrology models.","One or more software binaries , source code or other forms of software is provided for formatting the model components for inference. For example, this comprises selecting which parameters are to be inferred and initializing those parameters by establishing a data structure in memory to hold information about probability distributions associated with the parameters and setting those to default initial values such as zero or 1. In an example the software for formatting the model components for inference comprises inference engine elements comprising software provided in a file or other structure, as a class of an object oriented programming language, or other formats. These elements are described in more detail below with reference to  in the case that the elements are classes of an object oriented programming language.","Data to be used to train the model components and to assess the trained model is obtained from data sets  accessible to the model engineering and refinement system. In the example shown in  two external data sets ,  are shown. One or more data sets may be used and these may be internal or external to the system. In some cases one or more of the data sets are available via remote web services. The data may be in different formats and comprise values of different types according to the particular research domain.","A data access engine  may comprise a plurality of object-oriented software classes which may be used to enable data to be passed from the data sets ,  (which are in various formats) into other software in the engineering system in a manner independent of the original format of the data in the datasets. An example of software for use in the data access engine  is given in U.S. patent application Ser. No. 12\/698,654 \u201cData array manipulation\u201d filed on 2 Feb. 2010. The data access engine  may also comprise one or more libraries of software which provide an application programming interface to a remote web service which provides data.","Software code  for processing the datasets may be included in the model engineering system, for example, to partition the data into one or more test portions and one or more training and validation portions. A plurality of training and validation portions (sometimes referred to as folds of data) may be formed from the datasets in the case that cross-validation is to be used during a model assessment process. Cross-validation may involve training a model using 9\/10ths of a portion of data and then validating the trained model using the remaining 1\/10of the portion of data (other fractions of the data may be used, 9\/10 and 1\/10 is only one example). This process may then be repeated for different folds of the data; that is training the model using a different 9\/10ths of the data and so on. The software code  for processing the datasets outputs data (or addresses of locations of the data) into a training and validation dataset store  and also to a test dataset .","The software code  for processing the datasets may also be arranged to divide the data into portions in the case that a plurality of computers is used to carry out the parameter inference process. Different portions of data may be processed at different computers in order to enable large amounts of data to be processed in practical time scales. This is described in more detail later with reference to .","The software code  for processing the datasets may have access to one or more data terms and conditions files for each dataset. These files are stored at a memory accessible to the model engineering system and enable a user to check that any terms and conditions for use of a particular dataset are complied with.","A model-data association engine  comprises software which associates or combines specified model components (which are in a format for use by an inference engine) with specified datasets. The result is passed to inference routines  which utilize an inference engine  to obtain estimates of the parameter probability distributions. More detail about the model-data association engine is given below with reference to .","The inference engine  is arranged to perform parameter estimation (for example Bayesian parameter inference, or Maximum Likelihood parameter estimation when prior probability distributions are not specified). For example, the inference engine may use a Markov Chain Monte-Carlo method which estimates model parameters given data, a specified model, and prior parameter distributions. In other examples the inference engine may use Bayesian inference with graphical models although this is more suitable where the component models do not have arbitrary complexity. An example of an inference engine using a Markov Chain Monte-Carlo method which may be used is now described in more detail.","In this example the inference engine uses a form of the Metropolis-Hastings MCMC algorithm to sample from the joint posterior distribution of the parameters of a given model component. The Metropolis-Hastings MCMC algorithm is described in detail in \u201cChib S, Greenberg E (1995) Understanding the Metropolis-Hastings algorithm.\u201d Am Stat 49:327-335. The algorithm enables the joint posterior distribution of the parameters to be estimated. The inference engine in this example calculates the probability of the empirical data given prior parameter distributions and the predictions of the parameterized model. This process repeats for each set of training data. It then uses update rules based on Baye's law to update prior distributions of the parameters and to obtain a joint posterior distribution. That joint posterior distribution is sampled using the MCMC algorithm and used as an updated prior distribution for the parameters.","In an example, a form of the Metropolis-Hastings MCMC algorithm is used, which conforms to the requirements for the Metropolis-Hastings MCMC algorithm to converge to the correct posterior distribution, is robust to the problem of local (non-global) maxima and converges quickly. In this algorithm, at each MCMC step, random changes are proposed to randomly selected parameters, where the number of parameters to be changed varies from one to the total number of parameters. Proposal distributions for each parameter are tuned during an initial \u2018burn-in\u2019 period (for example, 10,000 MCMC steps) to achieve an approximate Metropolis-Hastings acceptance rate of 0.25. This tuning is accomplished by iteratively adjusting the standard deviations of the normal random variables that define the proposal distributions. The standard deviations are fixed at the end of the burn-in period. Different proposal distributions may be used for parameters bounded between 0 and infinity, and parameters bounded between minus infinity and infinity, and the inference engine may omit explicitly including any prior information in the metropolis criterion. In this way non-informative priors may be used with different forms for the proposal distributions on each parameter (uniform over logarithm of values, uniform over untransformed values, respectively). Following the burn-in period, the Metropolis-Hastings MCMC algorithm is continued for a specified number of steps (e.g. 100,000 further steps) and a posterior sample is recorded at regular intervals (e.g. every 100MCMC step). These samples may be saved for error propagation in the calculation of analytical metrics, and in model simulations.","The inference routines  comprise for example routines for implementing the inference engine using different subsets of the collection of training data or subsets of model components; and in summarizing the outputs from the inference engine for subsequent processing.","A library of model fitting procedures  comprises a plurality of pre-inference processes, model fitting procedures and simulation procedures (where the fitted model is used to make predictions). A user is able to configure factors about the datasets and\/or about the model components. A user is able to specify, for each model component, which formats of data are required. Also, a user may select, for a specified model component, which model parameters are to be inferred. Assigning a fixed value to a model parameter, rather than inferring the parameter's value from data, can help a user to alleviate or mitigate overfitting. Overfitting occurs when the number of inferred model parameters is sufficiently high that during training the model is formed to so closely match the training data that it is unable to generalize and make good predictions when data is input to the model that has not previously been seen by that trained model. A user is also able to configure parameters which specify how the data is to be divided into training, validation and test portions and, if a cluster of computers is to be used for inference, how to allocate data between members of the cluster. In addition, a user is able to specify the model fitting procedures to be used. For example, the full multi-component model may be fitted or run to generate simulations, individual specified model components may be fitted or run to generate simulations, one or more model components may be replaced by an alternative model component or a constant, or specified datasets may be sequentially omitted. Any combination of model fitting procedures may be specified.","A specification of model components to fit (design specification)  provides input to the model-data association engine and to procedures for assessing model performance . The specification  provides a list of unique names identifying the precise model components from the models formatted for inference  for use in the model-data association engine, and for post-inference model assessment .","The procedures for assessing model performance  comprises a software library of routines which provide functionality such as a range of model performance assessment metrics or other assessment processes whereby a trained model component is assessed using training validation or test data, comparison processes whereby performance of a trained model component is compared with performance of an alternative formulation for that component, or compared using other standards. The output of the procedures for assessing model performance  may comprise performance metrics which are stored at a data store  at any suitable location. In some examples the performance metrics are obtained during a cross-validation process using training and validation datasets . A final model assessment  may then be made using a test dataset  and the results stored at final model assessment store .","A visualization engine  may be used to display the performance metrics , final model assessment  and inferred parameter probability distributions . The visualization engine also enables users to inspect and visualize graphically the data from the datasets which may be diverse.","The inferred parameter distributions  are optionally used for analysis, publications or incorporating into larger models .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":"200"},"A user may have specified which model fitting procedures are to be used or these may be pre-configured. The method runs  the specified model fitting procedures using specified subsets of the model structure and datasets. A subset of the model structure may be one or more of the model components. Analysis procedures are run  to assess the performance of the fitted model. The analysis procedures are specified by user input or may be pre-configured. Any georeferenced results of the analysis procedures may be mapped  or otherwise visualized using the visualization engine. A simulation may be run  using the fitted model and the results of the simulation may be mapped (in the case of georeferenced results) or visualized  using the visualization engine.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 3","FIG. 4"],"b":["302","304","140"]},"The output of the model-data association engine comprises one or more model fitting management elements. These are passed  to the inference engine to perform parameter estimation.","With reference to  each inference engine element (which is a class in some examples)  is arranged to make  an instantiation of a specified model component. The inference engine class is able to read in parameters  to be inferred. For example, these parameters may have been specified by a user or may be pre-configured. The inference engine class is able to make  a prediction using the instantiation of the model component. The inference engine class uses a method to estimate the parameter probability distributions based on comparison between predictions and empirical data, possibly given prior parameter distributions. In the example above the method used is MCMC sampling using the Metropolis-Hastings algorithm.","Using the model engineering system  it is possible to identify one or more model components which are most in need of revising. This is now described with reference to . A model fitting process is run  for the whole multi-component model which has two or more model components and uses two or more datasets. One of the model components is referred to as component A for clarity of description in this example. First learnt probability distributions are obtained  as a result of the model fitting process for each of the model components and those for model component A's parameters are stored. The model fitting process  is then carried out again, this time for model component A alone (rather than for the whole multi-component model). Second learnt probability distributions are obtained  for model component A's parameters from the inference engine. The first and second probability distributions are then compared  and if the difference is greater than a threshold  then component A is identified as needing revision. Model component A may be revised  by scientists or in an automated manner and the method repeated until the first and second probability distributions are similar and the method ends . The process may be repeated for each of the model components in the multi-component model.","The probability distributions provide an indication of the amount of uncertainty the fitted model has in the parameters of model component A. By using the method of  it is possible to differentiate between effects the whole multi-component model has on the parameters of component A to those inferred when using model A alone.","Multiple \u201cmodel fitting experiments\u201d can be conducted in a similar way to  but fitting subsets of the full model to subsets of the data. This can be specified by implementing different inference routines, . This can be used to identify the empirical datasets and\/or model components that lead to the most variation in the inferred parameters or in the predictive performance of the model.","Another option is to use the probability distributions obtained at the end of step  when the whole model has been fitted. These probability distributions can be used to identify the model components with the most uncertainty. However, this approach does not take into account the influence of the way the model components are connected together in the particular multi-component model.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 6","b":["602","604","612","614","600","610","600","606","608","610"]},"Each computing entity comprises inference routines which are one or more of the inference routines  of the model engineering system . Each computing entity also comprises data access  functionality which enables the computing entity to access data from the training and validation datasets  and the test datasets . The model engineering system  is optionally in communication with a visualization system  which may be a visualization system as in .","With reference to  the model engineering system is arranged to allocate data portions to the cluster members . For example, specified data ranges or portions of the training and validation datasets  and the test data sets  are allocated to different ones of the computing entities. Each computing entity uses one or more of its inference routines as specified by the model engineering system to process the data it receives. Each computing entity produces inferred parameter distributions and sends those to the engineering system. Each computing entity may also produce model performance metrics in the case that the computing entities also perform model assessment procedures.","The engineering system receives the inferred parameter distributions from the cluster members and aggregates  that information. It may also receive  model performance metrics from the cluster members and aggregate that information. A graphical display  of the parameter distributions and\/or performance metrics may then be displayed using the visualization system.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 8","b":"800"},"The computing-based device  comprises one or more inputs  which are of any suitable type for receiving media content, Internet Protocol (IP) input, natural system data, or other data. The device also comprises communication interface . For example, communication interface  may enable the computing-based device  to communicate with other computing entities over a communications network. In an example, the communications interface  enables natural system data to be transferred as well as probability distributions of model parameters.","Computing-based device  also comprises one or more processors  which may be microprocessors, controllers or any other suitable type of processors for processing computer executable instructions to control the operation of the device in order to carry out multi-component model engineering. In some examples, for example where a system on a chip architecture is used, the processors  may include one or more fixed function blocks (also referred to as accelerators) which implement a part of the methods described herein in hardware (rather than software or firmware).","The computer executable instructions may be provided using any computer-readable media that is accessible by computing based device . Computer-readable media may include, for example, computer storage media such as memory  and communications media. Computer storage media, such as memory , includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other non-transmission medium that can be used to store information for access by a computing device. In contrast, communication media may embody computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave, or other transport mechanism. As defined herein, computer storage media does not include communication media. Therefore, a computer storage medium should not be interpreted to be a propagating signal per se. Although the computer storage media (memory ) is shown within the computing-based device  it will be appreciated that the storage may be distributed or located remotely and accessed via a network or other communication link (e.g. using communication interface ).","The computer executable instructions may comprise platform software comprising an operating system  to enable application software  to be executed on the device. The computer executable instructions may also comprise a model-data association engine , one or more model components , an inference engine , an assessment engine . Memory  may hold a data store  suitable for storing empirical data for use by the model engineering system.","An output interface  is also provided such as an audio and\/or video output to a display system integral with or in communication with the computing-based device. The display system may provide a graphical user interface, or other user interface of any suitable type although this is not essential. The output interface  may also output data to devices other than the display device, e.g. a locally connected printing device.","The term \u2018computer\u2019 is used herein to refer to any device with processing capability such that it can execute instructions. Those skilled in the art will realize that such processing capabilities are incorporated into many different devices and therefore the term \u2018computer\u2019 includes PCs, servers, mobile telephones, personal digital assistants and many other devices.","The methods described herein may be performed by software in machine readable form on a tangible storage medium e.g. in the form of a computer program comprising computer program code means adapted to perform all the steps of any of the methods described herein when the program is run on a computer and where the computer program may be embodied on a computer readable medium. Examples of tangible (or non-transitory) storage media include computer storage devices comprising computer-readable media such as disks, thumb drives, memory etc and do not include propagated signals. The software can be suitable for execution on a parallel processor or a serial processor such that the method steps may be carried out in any suitable order, or simultaneously.","This acknowledges that software can be a valuable, separately tradable commodity. It is intended to encompass software, which runs on or controls \u201cdumb\u201d or standard hardware, to carry out the desired functions. It is also intended to encompass software which \u201cdescribes\u201d or defines the configuration of hardware, such as HDL (hardware description language) software, as is used for designing silicon chips, or for configuring universal programmable chips, to carry out desired functions.","Those skilled in the art will realize that storage devices utilized to store program instructions can be distributed across a network. For example, a remote computer may store an example of the process described as software. A local or terminal computer may access the remote computer and download a part or all of the software to run the program. Alternatively, the local computer may download pieces of the software as needed, or execute some software instructions at the local terminal and some at the remote computer (or computer network). Those skilled in the art will also realize that by utilizing conventional techniques known to those skilled in the art that all, or a portion of the software instructions may be carried out by a dedicated circuit, such as a DSP, programmable logic array, or the like.","Any range or device value given herein may be extended or altered without losing the effect sought, as will be apparent to the skilled person.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","It will be understood that the benefits and advantages described above may relate to one embodiment or may relate to several embodiments. The embodiments are not limited to those that solve any or all of the stated problems or those that have any or all of the stated benefits and advantages. It will further be understood that reference to \u2018an\u2019 item refers to one or more of those items.","The steps of the methods described herein may be carried out in any suitable order, or simultaneously where appropriate. Additionally, individual blocks may be deleted from any of the methods without departing from the spirit and scope of the subject matter described herein. Aspects of any of the examples described above may be combined with aspects of any of the other examples described to form further examples without losing the effect sought.","The term \u2018comprising\u2019 is used herein to mean including the method blocks or elements identified, but that such blocks or elements do not comprise an exclusive list and a method or apparatus may contain additional blocks or elements.","It will be understood that the above description is given by way of example only and that various modifications may be made by those skilled in the art. The above specification, examples and data provide a complete description of the structure and use of exemplary embodiments. Although various embodiments have been described above with a certain degree of particularity, or with reference to one or more individual embodiments, those skilled in the art could make numerous alterations to the disclosed embodiments without departing from the spirit or scope of this specification."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The present description will be better understood from the following detailed description read in light of the accompanying drawings, wherein:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
