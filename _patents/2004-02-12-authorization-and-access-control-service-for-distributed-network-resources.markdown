---
title: Authorization and access control service for distributed network resources
abstract: Providing access to a resource via authorization data that conditionally defines the access by an expression that identifies the resource by name and by at least one property of the resource. An authorization service issues the authorization data (e.g., as a token) and evaluating authorization data received from a client. The authorization service evaluates the expression in the authorization data to identify the resource and determine the rights associated with the user for the resource. The authorization service implements role-based access control to control access to resources in a distributed, multi-site network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685206&OS=07685206&RS=07685206
owner: Microsoft Corporation
number: 07685206
owner_city: Redmond
owner_country: US
publication_date: 20040212
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","APPENDIX A","APPENDIX B","APPENDIX C"],"p":["Embodiments of the present invention relate to the field of resource access control. In particular, embodiments of this invention relate to providing access to a resource by conditionally specifying the resource by name and by at least one resource property.","Web sites such as Internet sites often provide resources such as information, products, services, and the like to their users. In distributed services such as web services, access refers to the capability to do something with a service or a service's resource (e.g. execute, change, view, and create). Access control is the mechanism by which this capability is explicitly enabled or restricted in some way. Access control systems can dictate who or what process may have access to a specific resource as well as what type of access is permitted. These controls can be implemented within the service itself or external services and applications that interoperate with the service. With the proliferation of web services, it is important to define and enforce access to various resources over a distributed network.","Role-based authorization systems allow access to a resource by role. A role identifies the permissions, tasks, responsibilities, or qualifications of a user or a group of users. Conventional role-based systems define access to the resource by associating a specific role with a specific resource. However, such conventional systems are limited to specifying resources generally.","Accordingly, an improved access control system is desired to address one or more of these and other disadvantages.","Embodiments of the invention include providing access to a resource. One embodiment includes an authorization service controlling access to resources by assigning rights to entities that need to access the resources. The authorization service issues authorization data that is tightly bound to the resource being accessed or authorization data that applies to a group of resources (e.g., global). The authorization data is signed and valid for a given time period. The resource that is being accessed checks the validity of the authorization data (e.g., via the signature and expiration date). The authorization service allows the authorization of resources in distributed services to be centrally managed. In turn, centrally managing resource authorization enables scalable management of access control. In an embodiment, the authorization service provides role-based access control to resources to simplify access control management across resources associated with multiple services (e.g., central management of distributed services). The invention allows administrators to specify access control in terms of the roles within an organization and enables federation scenarios by enabling granular control of access to resources.","In other words, embodiments of the invention provide role-based authorization allowing conditional specification of a resource by name and by at least one property of the named resource. Moreover, the invention provides a single and consistent point of access control management for resources, makes access control administration manageable and scalable, and facilitates the implementation of business rules or policies. The invention improves security by increasing the granularity and manageability of access control. The invention enhances the level of control sponsors have over their domain namespaces and creates an audit trail of success and failure on every access check.","In accordance with one aspect of the invention, a method provides access to a resource for one or more users. The method includes receiving a request to issue authorization data for a user based on access rights associated with the user. The access rights include an expression that identifies the resource by a resource name and by a property associated with the resource to conditionally defining access to the resource. The method also includes issuing the authorization data responsive to the received request.","In accordance with another aspect of the invention, a method validates authorization data to provide access to a resource for one or more users. The method includes receiving authorization data associated with one of the users. The authorization data includes an expression identifying a resource by a resource name and by a property associated with the resource. The method includes retrieving validation information from the received authorization data. The method also includes evaluating the retrieved validation information to determine a validation status of the received authorization data. The method further includes sending a response indicating the determined validation status responsive to evaluating the retrieved validation information.","In accordance with yet another aspect of the invention, one or more computer-readable media have computer-executable components to control access to a resource by one or more users. The components include an interface component adapted to receive authorization data. The authorization data includes an expression identifying a resource by a resource name and by a property associated with the resource. The components also include a parser component adapted to retrieve validation information from the received authorization data. The components also include a validation component adapted to evaluate the retrieved validation information. The interface component is further adapted to send a response indicating the validation status of the received authorization data responsive to evaluating the retrieved validation information.","In accordance with still another aspect of the invention, an authorization system includes authorization data to store information to access a resource. The authorization data includes an expression identifying the resource by a resource name and by a property associated with the resource. The authorization data also includes computer-executable instructions for validating the authorization data to provide access to the resource.","In accordance with yet another aspect of the invention, a computer-readable medium stores a data structure defining access by a user to a resource. The resource has one or more properties. The data structure includes a header field representing validation information. The validation information includes a signature and an expiration date. The data structure also includes a source field representing an identity of the user. The data structure also includes a claim field specifying the resource conditionally. The claim field includes an expression identifying the resource by a resource name and by at least one of the properties.","Alternatively, the invention may comprise various other methods and apparatuses.","Other features will be in part apparent and in part pointed out hereinafter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","An embodiment of the invention includes an access control system in which resources are conditionally specified by name and by a resource property. In particular, the invention includes a unified authorization mechanism (e.g., an authorization service as shown in ) assigning and controlling access by a user or other entity to one or more resources (e.g., web sites). The authorization service maintains, manipulates, and evaluates authorization information for the various resources. The authorization service issues authorization data (e.g., a token) reflecting the access rights of a particular user to a particular resource. The resources interact with the authorization service to determine if the authorization data is valid. The resources then allow access to the user based on the authorization data. One embodiment of the invention further provides a single, uniform set of application programming interfaces (APIs) such as implemented according to the Simple Object Access Protocol (SOAP) to govern access to the resources by internal and external clients. The APIs may be secured by various security protocols.","The invention may be implemented as a stand-alone centralized system for access control of any web service. For example, there may be one central instance of the authorization service interacting with various web services or there may be multiple authorization services with each one interacting with a single web service (e.g., the authorization service executing as a JAVASCRIPT brand computer program on the client machine). The authorization data allows authorization information to be cached by the clients and allows the authorization service to scale. The invention may act as an extension to any authorization or authentication system (e.g., connected to the Internet). In one embodiment, the invention is implemented as part of a multi-site user authentication system as described in .","Roles, Claims, and Scopes","In one embodiment, the authorization service provides role-based access control to resources. Role-based access control (RBAC) is well known in the art as a mechanism by which access decisions are based on the roles of individual users (identities) as part of an organization or service usage model. That is, an administrator specifies access control in terms of the roles within the organization. Each user is assigned a predefined role (such as non-sponsoreduser, emailuser, charteruser, admin, charteradmin, and customerservicerep).","In a role-based embodiment, the invention defines authorization in terms of roles, claims, and scopes. A claim is a statement that a client makes (e.g. name, identity, key, group, privilege, and capability). A resource is an abstract entity that can be the target of a claim. A scope is a named collection of resources specified by a conditional expression (e.g., a query). The scope represents the results of the queries over a given object type (e.g., a database). The scope is then the set of data that satisfies the conditions (e.g., the scope is a collection of resources defined through a query). Scopes may be static or dynamic. Static scopes include a collection of the resource identifiers. Dynamic scopes include a collection of resource identifiers that satisfy a scope definition. Depending on the context, scopes are also source scopes or target scopes. Source scopes define the resources that are attempting to gain access. A target scope defines the resources that are being accessed. The target scope is specified using a condition (e.g., mailbox[owner=userA]). The authorization service checks if the requested resource is within the target scope. For performance, scopes are also broken down into component groups of root scopes and sub-scopes that are relative to the root scope. A root scope specifies a resource or a group of resources in a hierarchical fashion. A claim defines the basic rights that a source scope has on the target scope. The authorization service of the invention defines claims over both the resources and the metadata pertaining to the resource (e.g., authorization\/security_data[roles\/claims\/etc.]). Claims include, but are not limited to, one or more of the following: create, read, update, delete, and execute.","An enumeration scope includes a simple enumeration of resource identifiers with the same type. In one embodiment, an enumeration scope cannot be defined in terms of another scopes (i.e. cannot include other scopes). A conditional scope (as opposed to an enumeration scope) is a set of resources expressed by a query or condition. A conditional scope has the type of the resources specified by the query (e.g., the scope expression as described below). Conditional scopes are used, for example, in defining the basic roles, role templates, and resource authorization. A scope includes the name of an enumerated scope or the expression for a conditional scope.","The authorization service uses the concept of role as a collection of rights or claims (permissions), a scope as a named collection of objects or resources, and a group as a collection of users. The authorization service issues authorization data for a given target scope for a given source scope. In one embodiment, the authorization service is a thin SOAP service over an internal authorization library. The authorization service also provides methods to check the authorization for a given user and set of resources. An exemplary set of authorization service APIs is shown in Appendix A. In one embodiment, the APIs are accessible over a secure sockets layer (SSL).","Scope Expressions","An exemplary syntax of a scope expression as described herein promotes uniformity among various services in specifying scopes and resources. A scope expression specifies conditions on resources when used within a role definition. A scope expression specifies known properties of the resource when used as input during an access check by one of the services. Generally, a resource is specified as follows: resourcename[conditions]\/properties[p1 . . . ]. In one example, a resource is specified as account[owner=Bob]. An exemplary role specifying a resource in this manner is as follows: Mailbox[folder=inbox]\/properties[recipient], where mailbox is the resource, [folder=inbox] is the condition, and properties[recipient] is the property. The exemplary role may be stored in the authentication database and in the authorization data using claims such as \u201cinclude\u201d and \u201cexclude.\u201d","An exemplary syntax of a scope expression is shown in Table 1 below.",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Elements in a Syntax for the Scope Expression."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Scope Element","Syntax","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Scope_expression","ConditionalScope",{}]},{"entry":["ConditionalScope","\/ResourceExpression\/. . . \/PropListExpression","A conditional scope starts with"]},{"entry":[{},{},"\/ and contains at least one"]},{"entry":[{},{},"resource expression. The"]},{"entry":[{},{},"PropListExpression is"]},{"entry":[{},{},"optional."]},{"entry":["ResourceExpression","resource_keyword or"]},{"entry":[{},"resource_keyword[ListOfConditions]"]},{"entry":["Resource_keyword","the name of the resource (predefined and","The keyword is unique within"]},{"entry":[{},"configurable)","the set of resources."]},{"entry":["ListOfConditions","Pair_Name Value . . . Pair_Name Value","List of pair-name values"]},{"entry":[{},{},"separated by spaces."]},{"entry":["Pair_NameValue","PropertyName = \u2018PropValue\u2019","For example,"]},{"entry":[{},{},"scopeid=\u2018EnumeratedScopeId\u2019"]},{"entry":["EnumeratedScopeId","the ID of an enumerated scope"]},{"entry":["PropertyName","reserved name (id, scopeid, name, type,"]},{"entry":[{},"etc)"]},{"entry":["PropValue","any string enclosed within quotes or"]},{"entry":[{},"apostrophes"]},{"entry":["PropListExpression","properties or properties[ListOfPropIds]"]},{"entry":["ListOfPropIds","PropId PropId ...","This includes a list of property"]},{"entry":[{},{},"IDs separated by spaces."]},{"entry":["PropId","Id or @EnumeratedScopeId","A property id is a string not"]},{"entry":[{},{},"containing white spaces or"]},{"entry":[{},{},"special characters. In"]},{"entry":[{},{},"addition, an indirect list of"]},{"entry":[{},{},"property ids can be specified"]},{"entry":[{},{},"by @EnumeratedScopeId."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The resource keywords, the property names and the property IDs are defined by the applications using the authorization service. A library accessible by the authorization service includes a parsing function that transforms a scope expression in an internal structure that the scope evaluation provider can use. Keywords and names are case insensitive.","Examples of scope expressions include the following: \/profile[DA=\u2018198\u2019]\/properties[id_EMAIL], \/credential[name=\u2018bob@pageA.net\u2019], \/DA[id=\u20183\u2019], \/namespace\/properties[id_propertyA], \/profile[name=\u2018Joe@pageA.net\u2019]\/properties[FirstName LastName], \/site[url=\u201ckids.*.pageA.net\u201d policygroup=\u2018101\u2019], \/credential[namespace=\u2018pageA.net\u2019]\/properties[email]","Exemplary resource types and keywords include, but are not limited to, the following: profile, credential, DA, namespace, identity, policygroup, site, role, scope, and claim. Exemplary property names include, but are not limited to, the following: ID, name, type, NS, DA, scopeID, role, and claim. The syntax for ListOfPropIds allows the specification of an attribute either by ID or by name. For uniformity and cross-component compatibility, the list of property IDs includes IDs and not names.","Role Definitions","In the role-based embodiment, the roles include the scope information, the claims that pertain to the scope, and other data such as a policy governing the role. A basic role is a named collection of claims that act within specified scopes. Each group of claims has associated therewith an included\/excluded set of scopes that defines the target set of resources for these claims. A role instance is an instantiation of a basic role for a source and a target set of resources. The role is assigned to the resources in the source scope and the granted claims will act upon the resources defined by the target scope. The target scope specifies the global set of resources on which the claims act. These resources may be further restricted by the include\/exclude subscopes defined for each set of claims in the basic role. The role may be specified as an XML document created when the role is defined. The role definition includes several items that are not fully specified until the role is assigned to a resource. These items are expressed as metadata in the exemplary role definition as shown below. In one embodiment, the roles are managed by service APIs such as DefineRole and QueryRole.","An exemplary role template is shown below.",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<RoleTemplate>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Role name=\u2018role-name\u2019>"]},{"entry":[{},"<SourceScope>%SourceRootScope%<\/SourceScope>"]},{"entry":[{},"<TargetScope>%TargetRootScope%<\/TargetScope>"]},{"entry":[{},"<GrantClaims>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ClaimMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Claim>Read<\/Claim>"]},{"entry":[{},"<Claim>Update<\/Claim>"]},{"entry":[{},"<Include> scope expression <\/Include>"]},{"entry":[{},"<Include> . . . <\/Include>"]},{"entry":[{},"<Exclude> scope expression <\/Exclude>"]},{"entry":[{},"<Exclude> . . . <\/Exclude>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ClaimMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/GrantClaims>"]},{"entry":[{},"<DenyClaims>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ClaimMap> . . . <\/ClaimMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/DenyClaims>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/RoleTemplate>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The root scope or source scope defines the root from which the source and the targets are defined. The root scope allows role templates to be defined that may then be transformed depending on the actual instance. For example, while the RoleMap definitions may be the same for an administrative user from two different organizations, an instance for each administrative user is created. The source root scope specifies, for example, a user identity for which the authorization information is being generated. The SourceRootScope is specified by a scope expression. The target root scope specifies, for example, the scope for which the target is requesting the authorization data. This may be a \u2018global\u2019 target such as at a domain level. The TargetRootScope is specified by a scope expression. GrantClaims are explicit claim grants. In one embodiment, the authorization service implicitly denies every claim unless it is explicitly granted. A claim map is a collection of claims and scopes. The claims in a claim map apply equally to the resources specified by the include\/exclude scope. DenyClaims are explicit claim denials.","The Role\/@name field specifies the name of the role and is used as an identifier for the role. The Role\/SourceScope field includes a unique identifier for a resource (e.g., a user account). The source root scope specifies the single resource to which this role instance is assigned. The Role\/SourceScope\/@type field specifies the resource type identified by the source scope. The Role\/TargetScope field includes any expression representing a scope. The target root scope specifies the global set of resources that may be accessed in this role. This set of resources is further restricted by the include\/exclude scopes for each claim in the basic role definition. There is no restriction on the target set of resources. When the role is evaluated, the claims that do not apply for the target root scope are omitted from the evaluation results. The Role\/TargetScope\/@type field specifies the resource type of the target scope. The Role\/GrantClaims field includes an array of ClaimMap nodes that specifies the set of granted claims. The Role\/DenyClaims field includes an array of ClaimsMap nodes that specifies the set of denied claims. The Role\/GrantClaims\/ClaimMap field includes a set of claims and the include\/exclude sub-scopes to which the claims refer (e.g., the target of the action implied by the claim). The Role\/GrantClaims\/ClaimMap\/Claim field includes the name of the granted claim. There may be multiple claim nodes working under the same sub-scopes. The Role\/GrantClaims\/ClaimMap\/include field includes an array of scope expressions that define the set of included resources targeted by the claims. The scope_expr is a scope expression that defines the set of resources to be included. The Role\/GrantClaims\/ClaimMap\/include\/@type field specifies the type of the resources defined by the scope expression. The Role\/GrantClaims\/ClaimMap\/exclude field includes an array of scopes that define the set of excluded resources. The scope_expr is a scope expression that defines the set of resources to be excluded. If missing, the excluded resource set is empty. The Role\/GrantClaims\/ClaimMap\/exclude\/@type field specifies the type of the resources defined by the scope expression.","In one example, the role \u201cCSR\u201d is defined with claims Read and Write over the profiles with the FirstName property equal to \u2018abc\u2019. The claims are excluded for credentials under the scope \u2018classified\u2019.",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Role name=\u2018CSR\u2019>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<GrantClaims>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ClaimMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Claim>Read<Claim>"]},{"entry":[{},"<Claim>Write<Claim>"]},{"entry":[{},"<include type=\u2018profile\u2019>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/profile[FirstName=\u2018abc\u2019]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<include>"]},{"entry":[{},"<exclude type=\u2018credential\u2019>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/credential[scopeid=\u2018Enum_Classified\u2019]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/exclude>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ClaimMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/GrantClaims>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Role>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Continuing the example above, the role is restricted to a specified namespace as shown below. The claims of Read and Write only apply for the profiles in the namespace pageA.net.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Role name=\u2018CSR\u2019>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<target>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/namespace[id=\u2018pageA.net\u2019]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/target>"]},{"entry":[{},"<GrantClaims>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ClaimMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ClaimMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/GrantClaims>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Role>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"An example role template describing permissions over a mailbox, calendar and profile resources is shown below. In particular, the user is given read access to the Inbox folder and calendar and read\/write access to the profile property \u2018Country\u2019.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Role name = \u201csample\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<GrantClaims>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<claimmap>"]},{"entry":[{},"<claim>read<\/claim>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<include>\/mailbox[folder=\u2018Inbox\u2019]<\/include>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<include>\/calendar[Level=\u2018All\u2019]<\/include>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<claimmap>"]},{"entry":[{},"<claimmap>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<claim>read<\/claim>"]},{"entry":[{},"<claim>write<\/claim>"]},{"entry":[{},"<include>\/profile\/properties[Country]<\/include>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/claimmap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/GrantClaims>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/RoleDefinition>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The SourceScope and the TargetScope are specified when the role is granted. Source is the resource (e.g., identity, site, or service) that receives the role (e.g., \/identity[id=\u2018UserIDof(UserA)\u2019]). Target is the identity that owns the resources specified by the granted role (e.g., \/identity[id=\u2018UserIDof(UserB)\u2019]). For example, User A is granted read access to the Inbox folder and the Calendar of User B and read\/write access to User B's profile property \u2018Country\u2019.","In another example, a role \u201cCSR\u201d grants permissions over user accounts. However, the \u201cCSR\u201d role should exclude access to resources accessible by a different, more powerful role \u201cCSRManager\u201d. The role definition for CSR comprises the following exclude scope to exemplify role grouping.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<claimmap>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<claim>read<\/claim>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<exclude>\/profile[rolegrp = \u2018CSRManager\u2019]<\/exclude>"]},{"entry":[{},"<exclude>\/credential[rolegrp = \u2018CSRManager\u2019]<\/exclude>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/claimmap>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The application or web service interacts with the authorization service via management APIs to, for example, define roles, grant roles, and deny roles. Granting a role assigns the role to a user or identity (i.e., the source scope) or a group of users. Exemplary role APIs for managing roles are shown in Appendix B.","Issuing Authorization Data","Referring first to , an exemplary block diagram illustrates issuance of authorization data for a user  by the authorization service  to a client. The client includes, but is not limited to, a user, a client application , a web service, a computing device, and an operating system component. The client application  in  attempts to access a resource owned or controlled by an affiliate service  (e.g., a web site). The affiliate service  requests authorization data from the client application . The client application , responsive to the request for authorization data, requests the authorization data (e.g., as a token) from the authorization service . The authorization service  receives the request to issue authorization data for the user  based on access rights associated with the user . The access rights, stored in an authorization database , conditionally define access to the resource by including an expression identifying the resource by a resource name and by a property associated with the resource. Responsive to the received request, the authorization service  issues the token to the client application . The authorization database  may be a single database or may be part of a distributed memory area network including a plurality of computing devices and memory areas. The invention provides a client interface for the administration and creation of the authorization data by the client application . The authorization service  encrypts, digitally signs, and time stamps (e.g., with an expiration date) the created authorization data.","In one embodiment, the authorization database  stores authorization data in tables such as Table 2 and Table 3 below.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Authorization Data including Source Scope, Role, and"},{"entry":"Target Scope."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Source Scope","Role","Target Scope"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Bob","OwnerProfile","Bob"]},{"entry":[{},"Alice","OwnerProfile","Bob"]},{"entry":[{},"Bob","OwnerMailboxCalendar","Bob"]},{"entry":[{},"Alice","SharedMailboxCalendar","Bob"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Authorization Data including Role Name, Claim,"},{"entry":"and Resource."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Role Name","Claim","Resouce"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["OwnerProfile","Read, Write","Passport Profile"]},{"entry":["OwnerMailboxCalendar","Read, Write","mailbox[folder=\u2018Inbox\u2019]"]},{"entry":["OwnerMailboxCalendar","Read, Write","calendar[Level=\u2018All\u2019]"]},{"entry":["SharedMailboxCalendar","Read","mailbox[folder=\u2018Inbox\u2019]"]},{"entry":["SharedMailboxCalendar","Read","calendar[Level=\u2018Pubilc\u2019]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The client application  receives the token and sends the token to the affiliate service . The affiliate service  validates and evaluates the token (e.g., by interacting with the authorization service  or by trusting the content of the received token). Based on the token evaluation, the affiliate service  provides the client application  with access to the requested resource.","In one embodiment, the client application , the authorization service , and the affiliate services ,  communicate over a secure sockets layer (SSL) in a network such as the Internet. In one embodiment, an application interacts with the authorization service  over a network such as the Internet. For example, the authorization service  may act to evaluate authorization data from multiple applications executing in a distributed computing environment. In another embodiment, the authorization service  executes on the same computing device as the requesting application. As such, the authorization service  executes locally.","The invention includes APIs for creating a token storing authorization data (GenerateAuthZToken, GenerateAuthZTokenForBinding). Further, in one embodiment, the authorization service  authenticates the affiliate service  (e.g., via digital certificates). The administrators for the affiliate service  login to the authorization service  and authenticate using a trusted certificate to access the APIs of the authorization service . Another API in this embodiment such as GenerateAuthZToken evaluates all the roles granted to a given resource within a targeted scope and returns a list of claims that apply for it. Such an API provides the affiliate service  and\/or the user  with a way to cache authorization results. The affiliate server  and\/or the user  then pass the authorization data received from the authorization service  to various affiliate services (e.g., other affiliate service ) that use the information to authorize operations as indicated in  by dotted lines.","Authorization by the various affiliate services may be based solely on the information contained by the token or on information obtained from the authorization service  (e.g., as indicated by dotted lines connecting the affiliate services ,  with the authorization service ).","The authorization service  includes one or more computer-readable media having computer-executable instructions for performing the method illustrated in .","Authorization Data Structure","In one embodiment, the authorization data is embodied as an authorization token in extensible markup language (XML) format (e.g., using XPath). The authorization token is stored as a data structure on a computer-readable medium. The authorization token defines access to a resource having one or more properties. In one embodiment, the authorization token includes a header field representing validation information. The validation information includes a signature and an expiration date. In one example, the validation information further includes a site identifier identifying an application program or computing device associated with the user to enable a referrer check. The authorization token further includes a source field representing an identity of the user and a claim field specifying the resource conditionally. The claim field includes an expression identifying the resource by a resource name and by at least one of the properties (e.g., a set of the properties). In one example, the resource name identifies a group of resources.","In one embodiment, the token is domain-specific XML data digitally signed and\/or encrypted by the authorization service. The digital signature is independent of the digital signature for a SOAP request that may be part of the network protocols. Encryption prevents the display in clear text of sensitive information concerning the rights a specific user has over a specific set of resources. The token includes a partial or complete description of the granted roles (including claims, resources, and target scopes). The token is issued and signed by the authorization service (e.g., via a function call such as GenerateAuthZToken). Client applications include the token in their calls (e.g., in a SOAP header). The authorization services check the validity of the token and grant or deny authorization for the operation.","An exemplary XML format for the authorization token in a role-based access control embodiment is shown below. Other formats, including those that are substantively and\/or stylistically different from that shown below, are within the scope of the invention.",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<authz>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<header>"]},{"entry":[{},"<\/header>"]},{"entry":[{},"<body>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<source type=\u2018resourcetype\u2019>scope-expr-id<\/source>"]},{"entry":[{},"<RoleMap>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<target type=\u2018resourcetype\u2019>scope-expr<\/target>"]},{"entry":[{},"<target type=\u2018resourcetype\u2019>scope-expr<\/target>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ClaimMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Claim>claim-name<Claim>"]},{"entry":[{},"<Claim>claim-name<Claim>"]},{"entry":[{},". . ."]},{"entry":[{},"<include type=\u2018resourcetype\u2019>scope_expr<\/include>"]},{"entry":[{},"<include type=\u2018resourcetype\u2019>scope_expr<\/include>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<exclude type=\u2018resourcetype\u2019>scopeexpr<\/exclude>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ClaimMap>"]},{"entry":[{},"<ClaimMap>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ClaimMap>"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<RoleMap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/body>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/authz>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The AuthZ\/header field may include, for example, timestamp information and data supporting a digital signature or other security features. The AuthZ\/body\/source field includes a unique resource identifier (e.g., scope-expr-id). In one embodiment, the source root scope specifies the single resource for which this token was generated. The AuthZ\/body\/source\/@type field specifies the resource type identified by the source scope. The AuthZ\/body\/RoleMap field specifies the claim\/scope bindings for one role. There may be more then one RoleMap node. The AuthZ\/body\/RoleMap\/target field includes a target expression representing a scope. If the token is unbound to a resource then the target root scope specifies the global set of resources that can be accessed in this role. If the token is bound, then this is one of the target scopes to which the token was bound. The AuthZ\/body\/RoleMap\/target\/@type identifies the resource type of the target scope. The AuthZ\/body\/RoleMap\/ClaimMap includes a set of claims and the include\/exclude scopes to which the claims refer. There may be multiple claim maps associated with different target scopes. In one embodiment, the node has the same content as the ClaimMap given in a role definition.","An exemplary authorization token is shown below.",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<authz>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<header><\/header>"]},{"entry":[{},"<body>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<source type=\u201c1\u201d>\/identity[id=\u2018UserIDof(UserA)\u2019]<\/source>"]},{"entry":[{},"<rolemap>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<target type=\u201c1\u201d>\/identity[id=\u2018UserIDof(UserA)\u2019]<\/target>"]},{"entry":[{},"<claimmap>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<claim>2<\/claim>","<!-- read -->"]},{"entry":[{},"<claim>3<\/claim>","<!-- write -->"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<include>mailbox[folder=\u2018Inbox\u2019]<\/include>"]},{"entry":[{},"<include>calendar[Level=\u2018All\u2019]<\/include>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/claimmap>"]},{"entry":[{},"<claimmap>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<claim>2<\/claim>","<!-- read -->"]},{"entry":[{},"<claim>3<\/claim>","<!-- write -->"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<include>Profile<include>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/claimmap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/rolemap>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/body>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/authz>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the above example, the claim code \u20182\u2019 indicates read permission and the claim code \u20183\u2019 indicates write permission.","Authorization Engine","The authorization service implements an authorization engine or other functionality to provide support functions for generating, parsing and evaluating authorization data, support functions for parsing the scope queries, and a mechanism to evaluate scopes and claims in the context of given authorization data and\/or a specified target resource. The authorization engine does not define or assume any resource hierarchy and is agnostic with respect to the resource, claim, scope or role semantics.","Referring next to , an exemplary flow chart illustrates evaluation of authorization data by the authorization service. The authorization service of the invention provides a mechanism that various affiliate services use to authorize service-specific operations over sets of resources. Because the authorization service is a resources-agnostic component, the specific conditions for authorizing an operation are decided and controlled by the affiliate service.","In one embodiment, the invention includes a method for validating authorization data to provide access to a resource. The method includes receiving authorization data (e.g., over SSL via a network such as the Internet) from a client such as an application program at . For example, the authorization data may include role information. The authorization data includes an expression identifying a resource by a resource name and by a property associated with the resource. In one form, receiving the authorization data includes receiving a data packet according to the Simple Object Access Protocol (SOAP) and extracting the authorization data from the received data packet. In another example, the authorization service decrypts the received authorization data. The authorization performs a referrer check by receiving an identifier from the application program, extracting another identifier from the received authorization data, and comparing the received identifier with the extracted identifier to determine the validity of the authorization data.","The method further includes retrieving validation information such as a digital signature and an expiration date from the received authorization data at . The method includes evaluating the retrieved validation information at  and evaluating the expression in the received authorization data to identify the resource at . For example, the authorization service evaluates the expression by extracting a target scope from the received authorization data. The extracted target scope identifies the resource. In one embodiment, the method evaluates the retrieved validation information by comparing the retrieved expiration date to a current time stamp to determine if the received authorization data has expired. The method includes sending a response to the client indicating the validation status of the received authorization at . For example, if the retrieved signature has been determined to be invalid or the received authorization data has been determined to be expired, the authorization service sends a response to the client indicating the invalidity of the received authorization data. If the authorization data is determined to be valid, the authorization service sends a response indicating the validation status of the received authorization data to the client.","The authorization service of the invention includes one or more computer-readable media having computer-executable instructions for performing the method illustrated in .","Referring next to , an exemplary flow chart illustrates the interaction between an affiliate service  and the authorization service during evaluation of authorization data. In one embodiment, authorization operates as follows. The affiliate service  receives a request from a client (e.g., user, application program, or operating system component) to execute a method  (e.g., a software routine or function call). The method  determines the claims needed and the calling identity that accesses the resources at . The method  extracts the authorization token from the received request or builds a scope query for the specific resources targeted by the caller further at . The service calls the authorization engine to check authorization at  and evaluate the client, target resource, and claims needed. The authorization service parses the token and extracts the scope for which the token was issued at . If no token is provided, the authorization service iterates over the roles associated with the client and determines the claims and their scopes at . In one embodiment, the authorization service obtains role and scope information from the authorization database at . The authorization service evaluates the extracted scopes against the resource scope at  established by the method . The evaluation is based on resource-specific procedures defined by the affiliate service  processing the request. The evaluation procedures in the exemplary flow chart are collected in a library accessible by the authorization service and each resource type has an associated evaluation function at .","Scope Evaluation","The authorization service transforms scope expressions to data structures such as trees to find\/enumerate the nodes in the scope expression, to retrieve values for properties, or to determine if a given attribute is in the list of attributes. The internal scope structure includes a list of resource keywords and types, a list of name-value pairs for each resource keyword providing details and conditions about the resource, and a list of attribute keywords. Converting the input authorization data to a format similar to the authorization data stored by the authorization service in the authorization database enables efficient comparison and evaluation of the input authorization data. In one embodiment, the authorization service includes a tree comparator that takes two authorization trees as input and then traverses each tree to compare the claims.","In one embodiment, a library accessible by calls from the authorization service for scope evaluation includes custom, service-specific functions (e.g., evaluators) that determine whether a given resource is within the target scope of resources. The evaluator functions are registered based on the type of the target scopes. A global function dispatches the calls to the proper evaluator function. An exemplary evaluator function definition included the following:","bool EvaluateResourceInScope (ResourceScopeStruct, TargetScopeStruct)","The exemplary evaluator function returns TRUE if the resource is in the scope, and false otherwise. In general, the name-value pairs are interpreted as conditions in the target scope and are related by a logical AND operator (e.g., all the listed conditions must be satisfied). The evaluator function checks every condition name-value in the target using any of the information name-value in the resource. For example, if the resource is \u201cprofile[id=\u2018123\u2019 credname=\u2018abc@pageA.net\u2019]\u201d and the target is \u201cprofile[namespace=\u2018pageA.net\u2019 DA=\u20181\u2019]\u201d then the evaluator can check namespace=\u2018pageA.net\u2019 using the information credname=\u2018abc@pageA.net\u2019 and will check DA=\u20181\u2019 using the id=\u2018123 \u2019.","Referring next to , an exemplary block diagram illustrates issuance and evaluation of authorization data in a web service environment. In the example of , an affiliate service such as a web service  requests an authorization token at  on behalf of a user . The web service  interacts with an authorization SOAP service  to obtain the token. The web service  interacts with a profile SOAP service  to subsequently evaluate and validate the authorization token. Both the authorization SOAP service  and the profile SOAP service  communicate with an authorization library to access functionality suitable to both services.","Authorization Components","Referring next to , an exemplary block diagram illustrating components of an authorization service  according to the invention. In general, the authorization service  has computer-readable media associated therewith. The computer-readable media store computer-executable components for implementing the authorization service . Exemplary components include an interface component, a parser component, a validation component, an authorization component, and a scope component. The interface component is adapted to receive a request to issue the authorization data for a user based on access rights associated with the user. An authorization component is adapted to issue the requested authorization data responsive to the request received by the interface component.","The interface component is further adapted to receive authorization data. The parser component is adapted to retrieve validation information from the received authorization data. The validation component is adapted to evaluate the retrieved validation information. A scope component is adapted to evaluate an expression in the received authorization data to identify a resource for which access is requested. The interface component is further adapted to send a response indicating the validation status of the received authorization data responsive to the validation component.","In one embodiment, the authorization service  generates an authorization token and evaluates an authorization token as illustrated in . In other embodiments, the authorization service  includes a central service accessible by a network to generate an authorization token, while a separate authorization client executes local to the client and includes computer-executable instructions for evaluating an authorization token.","The token generation aspect of the exemplary authorization service  of  includes an authorization engine  for generating the token, building the token, and encrypting and\/or signing the token. An authorization engine library interface  provides access to the authorization engine. The created token is sent to the client via the authorization SOAP service .","The token evaluation aspect of the authorization service  in  includes receiving a token from a client via an authorization SOAP client . An authorization client object  interacts with an authorization client engine  via an authorization client engine library interface  to evaluate the received token. The authorization client engine  includes modules for decrypting or verifying the token signature, for parsing the token, and evaluating the token.","In general, the authorization service  includes libraries for converting the received authorization data and the authorization data in the authorization tables to a similar internal format (e.g., two trees), evaluating the two trees to see if the claims match at any given level in the trees thereby allowing the operation. The authorization service  further includes an exemplary set of authorization APIs such as for managing the authorization data as shown in Appendix C. Successful and failed authorizations are monitored to create an audit trail of success and failure on every access check. The APIs return an appropriate fault response (e.g., via SOAP) in the event of failure.","Referring next to , an exemplary block diagram illustrates evaluation of authorization data in a role-based embodiment.  shows the data flow that a client application  follows to grant a role to a user over resources controlled by the affiliate service . In this example, the super administrator (SA) is an account in the authorization database , administrator (AD) is an account in the authorization database  that receives the role, and the role ON_RESAFFILIATE is to be granted specifies resources in the affiliate database . The client application  interacts with the authorization service  to obtain a token, and then interacts with the affiliate service  to grant the role to the user for the affiliate service .","Validation","The invention validates the claims based on the authorization data and returns a yes\/no response. In one embodiment, the invention checks the signature, expiration time, site identifier of the client application that requested the token to verify that the site asking for validation is the same site that requested the token. Checking the site identifier thwarts replay attacks and man-in-the-middle attacks.","There are different ways of validating the authorization information. A function AuthZCheckType identifies the validation specified by the application or web service interacting with the authorization service. Exemplary methods for validation are embodied as the functions CheckSystemAuthZ, CheckTokenAuthZ, ChecKSystemAndTokenAuthZ, as described in greater detail below.","The CheckSystemAuthZ function checks the authorization requested against the authorization information stored in the authorization database. The authentication data (e.g., a token) that is received by the authorization service is ignored for this type of validation. If the authorization information stored in the authorization database is considered to be accurate, this is a secure method of authorization validation. The authorization data may be NULL for this type of validation. This type of validation may be added to interfaces that do not understand authorization data, highly secure interfaces, or whenever an interface is accessed without explicit authorization data.","The CheckTokenAuthZ function checks the authorization requested against the authorization data that was passed in with the interface call. This check assumes that the authorization data that was issued to the user was digitally signed or encrypted and contains a time stamp. This check does not require access to the authorization database, but rather validates the access based on the authorization information contained in the received authorization data.","The ChecKSystemAndTokenAuthZ function checks the authorization information in the authorization data and the authorization database.","Other validation methods include accepting a call only if the originator matches the owner stamped in the authorization data (e.g., in functions such as EvaluateAuthZToken, EvaluateAuthZTokenForXML). Similarly, validation methods during issuance include building the authorization token only if the originator matches the identity provided in the input source scope. The originator of the call is identified from the authorization data (e.g., provided in the SOAP headers).","Exemplary Operating Environment",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 7","b":["130","130","130","132","134","136","134","132","136"]},"The computer  typically has at least some form of computer readable media. Computer readable media, which include both volatile and nonvolatile media, removable and non-removable media, may be any available medium that may be accessed by computer . By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. For example, computer storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal, which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media, are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.","The system memory  includes computer storage media in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory. In the illustrated embodiment, system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. For example,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media.  also shows a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that may be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a non-volatile memory interface, such as interface .","The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components may either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into computer  through input devices or user interface selection devices such as a keyboard  and a pointing device  (e.g., a mouse, trackball, pen, or touch pad). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to processing unit  through a user input interface  that is coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video interface . In addition to the monitor , computers often include other peripheral output devices (not shown) such as a printer and speakers, which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. LAN  and\/or WAN  may be a wired network, a wireless network, a combination thereof, and so on. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and global computer networks (e.g., the Internet).","When used in a local area networking environment, computer  is connected to the LAN  through a network interface or adapter . When used in a wide area networking environment, computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device (not shown). By way of example, and not limitation,  illustrates remote application programs  as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.","For purposes of illustration, programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks. It is recognized, however, that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although described in connection with an exemplary computing system environment, including computer , the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover, the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, mobile telephones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","An interface in the context of a software architecture includes a software module, component, code portion, or other sequence of computer-executable instructions. The interface includes, for example, a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include, in one example, application programming interfaces (APIs) such as provided by operating systems, component object model (COM) interfaces (e.g., for peer-to-peer application communication), and extensible markup language metadata interchange format (XMI) interfaces (e.g., for communication between web services).","The interface may be a tightly coupled, synchronous implementation such as in Java 2 Platform Enterprise Edition (J2EE), COM, or distributed COM (DCOM) examples. Alternatively or in addition, the interface may be a loosely coupled, asynchronous implementation such as in a web service (e.g., using the simple object access protocol). In general, the interface includes any combination of the following characteristics: tightly coupled, loosely coupled, synchronous, and asynchronous. Further, the interface may conform to a standard protocol, a proprietary protocol, or any combination of standard and proprietary protocols.","The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further, the interfaces may include additional or less functionality than illustrated or described herein.","In operation, computer  executes computer-executable instructions such as those illustrated in the figures to implement an authorization service according to the invention.","Exemplary Network Environment",{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 8","FIG. 8"]},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 8"},"In , one or more client computer systems  are coupled to a data communication network . In this example, the network  is the Internet (e.g., supporting the World Wide Web). However, the teachings of the present invention can be applied to any data communication network. Multiple affiliate servers  are also coupled to network . In turn, the client computer systems  can access the affiliate servers  via network . Affiliate servers  are also referred to as web servers or network servers.","The authentication server  coupled to network  allows communication between itself and client computer systems  and affiliate servers . Although referred to as an authentication server, authentication server  in the illustrated embodiment is also a web server capable of interacting with web browsers and other web servers. In this example, authentication server , client computer systems , and affiliate servers  communicate data among themselves using the hypertext transfer protocol (HTTP), a protocol commonly used on the Internet to exchange information. An authentication database  is coupled to authentication server . The authentication database  contains information (e.g., credentials) necessary to authenticate a user of one of the client computer systems  (as well as other users on the network) and also identifies which elements of the user profile information should be provided to a particular affiliate server  when the user accesses the affiliate server. In general, a credential includes a means for generating an authenticated reference to a single account identifier. For example, an e-mail address and password, a mobile phone number and a personal identification number (PIN), and a biometric signature are credentials that can be associated with the same profile data.","Although authentication database  is shown separately from authentication server , it is to be understood that in other embodiments of the invention, authentication database  may be contained within authentication server . In a federated environment, for example, a plurality of authentication servers  may be used to provide authentication.","The authentication server , as described herein, authenticates a user of client computer  seeking access to a particular one of the affiliate servers . Authentication server  first requests authenticating login information from the user, such as the user's login ID and password. If the user is successfully authenticated, authentication server  routes the user's client computer  to the appropriate affiliate server  for performing a desired service for the user.","Remarks","The order of execution or performance of the methods illustrated and described herein is not essential, unless otherwise specified. That is, elements of the methods may be performed in any order, unless otherwise specified, and that the methods may include more or less elements than those disclosed herein.","When introducing elements of the present invention or the embodiment(s) thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","In view of the above, it will be seen that the several objects of the invention are achieved and other advantageous results attained.","As various changes could be made in the above constructions, products, and methods without departing from the scope of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.","Exemplary authorization service APIs are shown below.","A GenerateAuthZToken method has the following exemplary function call.\n\n","An EvaluateAuthZToken method has the following exemplary function call.\n\n","An EvaluateAuthZTokenForXML method has the following exemplary function call.\n\n","Exemplary APIs for managing roles include DefineRole, QueryRole, DenyRole(SourceRootScope, RoleName, TargetRootScope), EnumRolesForSource(SourceScopeName, [out] RoleListXML), and EnumSourcesByRole(RoleName, TargetScopeName, [out] SourceListXML).","The method GrantRole(SourceRootScope, RoleName, TargetRootScope, PolicyXML) defines and assigns a role instance to a specified set of resources. The RoleName is a basic role. The GrantRole API supports both cases of a single identity source as well as an enumeration of identities. The SourceRootScope is a scope expression that is evaluated to either a single resource or to an enumerated scope. GrantRole API evaluates the SourceRootScope and creates a role instance for each resource ID in the source scope. TargetRootScope is an array of scopes. The target resource is a conditional scope defined by an Xpath expression.","Another method is GenerateAuthZToken(SourceScopeName, TargetScopeName, [out] BSTR*AuthZToken). The source scope is a scope expression that resolves to a unique identity. The target scope is a general scope expression that includes the type. In one embodiment, TargetScopeName is an array of scopes or is null (e.g., referring to the entire set of resources accessible to the source).","Another method is EvaluateAuthZToken(AuthZToken, TargetScopeName, numClaims, ClaimArray). The target scope is a general scope expression that includes the type. The scope evaluation takes place in the context defined by the authorization token. The TargetScope is evaluated against the scopes for which the authorization token was generated. The token caches some authorization results and reuses them again when needed. In one embodiment, all the data regarding the role binding is already in the token. However, the scope evaluation might require access to the authorization database dependent on how the evaluator providers implement their functions.","An exemplary set of authorization APIs for managing authorization data is described herein. DefineClaim defines a claim. An exemplary XML format of the SOAP action node for this API is as follows:",{"@attributes":{"id":"p-0127","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<DefineClaim>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ClaimName>ClaimQueryProfilePII<\/ClaimName>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/DefineClaim>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"DefineScope defines a scope as an array of resources. Owner defines the resource (e.g., a domain or domain administrator) that is used to control access to the scope, including both the ability to use or query the scope and the ability to modify its definition. The XML format of the SOAP action node for this API is as follows:",{"@attributes":{"id":"p-0129","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<DefineScope>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ScopeName>DAUser<\/ScopeName>"]},{"entry":[{},"<ResourceArray soapenc:arrayType=\u201cxsd:RESOURCEID[1]\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<RESOURCEID>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Name>pageA.net<IName>"]},{"entry":[{},"<Type>DA<\/Type>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/RESOURCEID>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ResourceArray>"]},{"entry":[{},"<Owner>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Name>pageA.net<\/Name>"]},{"entry":[{},"<Type>DA<\/Type>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Owner>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/DefineScope>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"QueryScope returns an XML document listing the resources comprising the scope. The XML format of the SOAP action node for this API is as follows:",{"@attributes":{"id":"p-0131","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<QueryScope>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ScopeName>DAUser<\/ScopeName>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/QueryScope>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"AddResourceToScope adds a resource to a scope. In one embodiment, this is done by the user who created the scope. The XML format of the SOAP action node for this API is as follows:",{"@attributes":{"id":"p-0133","num":"0135"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<AddResourceToScope>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ScopeName>DAUser<\/RoleName>"]},{"entry":[{},"<Resource>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Name>pageA.net<\/Name>"]},{"entry":[{},"<Type>DA<\/Type>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Resource>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/AddResourceToScope>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"RemoveResourceFromScope removes a resource from a scope. The XML format of the SOAP action node for this API is as follows:",{"@attributes":{"id":"p-0135","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<RemoveResourceFromScope>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ScopeName>DAUser<\/RoleName>"]},{"entry":[{},"<Resource>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Name>pageA.net<\/Name>"]},{"entry":[{},"<Type>DA<\/Type>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Resource>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/RemoveResourceFromScope>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"DefineRole defines a role. RoleTemplateXML is an XML document defining the target resource type to which the role applies, all claims contained in the role, and the relative resources to which they apply. Owner defines the resource (e.g., a domain or domain administrator) that is used to control access to the role including both the ability to use the role and the ability to modify its definition. Calling DefineRole( ) on an already existing role replaces the role template, if called by a user with ClaimDefineRole on the owning domain. The XML format of the SOAP action node for this API is as follows:",{"@attributes":{"id":"p-0137","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<DefineRole>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<RoleTemplate> . . . <\/RoleTemplate>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/DefineRole>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"AddClaimToRole adds claims to an existing role definition. Claims are specified in the XML similar to role template. RemoveClaimFromRole removes claims from an existing role definition. Claims are specified in XML similar to role template. QueryRole returns the role template XML. The XML data structure bstrID has the following format:",{"@attributes":{"id":"p-0139","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Role name=\u2018 . . . \u2019>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<SourceScope type=\u2018res-type\u2019> . . . <\/SourceScope>"]},{"entry":[{},"<TargetScope type=\u2018res-type\u2019> . . . <\/TargetScope>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Role>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"GrantRole binds a role, specified by scope name and governed by a specified policy, to a source scope for the specified target scope. This may be used, for example, to assign administrator rights to a site or to a group of users (e.g., if the resource is a scope) as well as to a single user. If PolicyXML is blank or empty, an unconditional binding is created. If GrantRole is called when a binding already exists for the specified Source Root Scope, Role, and Target Scope, the policy entered replaces the policy previously bound. Alternatively, the binding is made unconditional if PolicyXML is blank or empty. A DenyRole method is also available.","The function EnumRolesForSource returns an XML document containing the list of roles assigned to the specified source scope. The caller possesses ClaimEnumRoles on the source scope and the resulting BindingListXML is filtered to only include those involving resources for which the caller possesses ClaimEnumBindings.","EnumSourcesByRole returns an XML document containing the list of Source Scopes assigned the specified role. The caller owns ClaimEnumRoles on the target scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
