---
title: Method, computer system, and computer program product for monitoring services of an information technology environment
abstract: The invention is also directed to a corresponding computer system and a corresponding computer program product.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07099938&OS=07099938&RS=07099938
owner: Hewlett-Packard Development Company, L.P.
number: 07099938
owner_city: Houston
owner_country: US
publication_date: 20010323
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates generally to the monitoring of information technology (IT) environments, and more particularly to a method, a computer system, and a computer program product for monitoring the status of services of an IT environment.","Nowadays, as information systems become ubiquitous, and companies and organizations of all sectors become severely dependent on their computing network and IT services, the demand for tools for monitoring IT environments increases rapidly. The class of sensitive IT services includes online transaction processing, electronic commerce, Internet\/World Wide Web, data warehousing, telecommunication switches, and server applications that generally run 24 hours a day. In addition, almost all internal business processes such as electronic communication or information retrieval rely on a properly functioning IT network. These servers must run perpetually, providing a service to the employees and clients, and therefore demand a high availability as the cost of any outage can be substantial. While it is essential for companies to maintain the health of their IT services, the underlying IT environment becomes more and more complex and thus susceptible to failures. Not only is the number of computers within an IT network growing rapidly, but also many services are distributed over the network and depend thus on several network components. In large IT networks those dependencies make it impossible for administrators and operators to keep an overview over the performance of the IT services without an appropriate service management tool.","Operators of complex services that are distributed over different platforms within an IT network are often confronted with a huge number of messages reporting the status and errors of nodes of the IT network. Due to the number of network components and the complex interactions between those components it is difficult for the operator to resolve the dependencies of the generated error messages and to track down the origin of the problem. Moreover, it is even difficult to detect important error messages and distinguish them from less important messages so that there is a risk that the operator overlooks relevant messages in the stream of messages.","A service management tool is an IT solution for managing the availability and performance of IT-based business services from the end user's perspective. Those tools are able to detect and evaluate the health and availability of a service or application, recognize and warn the operator when a problem is about to occur and respond automatically to poor performance. They allow the user to manage individual services and all elements that depend on these services. They enable the user to build management models of the IT environment that represent the service elements and the relationships and dependencies between them. One feature of those service management tools is therefore to provide the status of any of those services in the light of the dependencies amongst them. The Hewlett-Packard product HP OpenView VantagePoint for Windows\u2122 is such a service management system that runs under Windows\u2122 but is also able to manage heterogeneous IT environments independent of the platform.","Service management tools are aiming to support administrators and operators of complex network-based IT services. In general, the task of administrators is to set up the management model, to configure it and maintain the model configuration, and to define failures and suppression criteria in order to reduce the information that is sent to operators. The operators' primary function is to monitor the status of a service and to troubleshoot and respond to problems using the information provided by the service management tool.","Service management tools are usually built on common network software and common console software such as the Microsoft Management Console (MMC) for the Windows\u2122 environment which is a common console framework for IT management applications. MMC provides a basic framework for the management of IT environments. The invention, however, is intended to improve the possibilities of monitoring IT environments in view of the growing complexity of those environments.","A method for monitoring services of an information technology (IT) environment. The method comprises evaluating, by a status engine, the status of a service (superordinate service) that depends on at least one of the statuses of one or more other services (subordinate services) and one or more messages coming from services of the IT environment and affecting the status of the superordinate service. The evaluation is done according to one or more rules. According to one aspect (aspect a), a rule is based on additional attributes of the service other than the status. According to another aspect (aspect b), a rule ignores subordinate services. According to another aspect (aspect c), a rule is defined by a user on the basis of at least one of i) logical and ii) arithmetical combinations of the status of subordinate services or of said messages or of said attributes. According to still another aspect (aspect d), a rule is programmed individually by a user.","The invention also relates to a computer system for monitoring services of an IT environment, comprising:","a status engine for evaluating the status of the services;","a user interface for configuring rules; and","a graphical display for visualizing monitoring results.","The status engine is programmed so as to calculate the status of the service (superordinate service) that depends on at least one of the statuses of one or more other services (subordinate services) and one or more messages coming from services of the IT environment and affecting the status of the superordinate service. The calculation is done according to one or more rules. According to one aspect (aspect a) a rule is based on additional attributes of the service other than the status. According to another aspect (aspect b) a rule ignores subordinate services. According to still another aspect (aspect c) a rule is defined by a user on the basis of at least one of i) logical and ii) arithmetical combinations of the status of subordinate services or of said messages or of said attributes. According to still another aspect, a rule (aspect d) is programmed individually by a user.","The invention also relates to a computer program product including program code for carrying out a method for monitoring services of an information technology (IT) environment, when executed on a computer system. The method comprises evaluating, by a status engine, the status of a service (superordinate service) that depends on at least one of the statuses of one or more other services (subordinate services) and one or more messages coming from services of the IT environment and affecting the status of the superordinate service. The evaluation is done according to one or more rules. According to one aspect (aspect a), a rule is based on additional attributes of the service other than the status. According to another aspect (aspect b), a rule ignores subordinate services. According to another aspect (aspect c), a rule is defined by a user on the basis of at least one of i) logical and ii) arithmetical combinations of the status of subordinate services or of said messages or of said attributes. According to still another aspect (aspect d), a rule is programmed individually by a user.","Other features are inherent in the disclosed method and computer system or will become apparent to those skilled in the art from the following detailed description of embodiments and the accompanying drawings.","The general high-level architecture of a service management system is depicted in . Before proceeding further with the description, however, a few items of the preferred embodiments will be discussed.","In general, the purpose of an IT network of a company is to offer services to their employees and customers. Services for employees, for instance, are a facility for exchanging electronic mails, or for accessing electronic data bases. The company's web page is an example of an IT service for customers. Services in this context range from low-level network components such as routers or switches to software applications such as Microsoft\u2122 Office or an Oracle\u2122 database, and from hardware-based services such as printing or displaying capabilities, up to abstract high-level services such as the marketing department that itself uses various other IT services. These different kinds of services comprise one or more hardware or software components within the computing environment. Most services are, in fact, an aggregation of applications and computer systems. All these services and their individual components represent nodes within the network and can be represented as elements in a service management model. Thus the term IT environment refers in particular to IT networks, but also to applications, services, software components and network elements.","Most services are not stand-alone applications but require the availability of other services. For instance, the high-level service Microsoft\u2122 Office for a desktop computer requires that the Microsoft\u2122 applications, such as Excel, Access, Word, etc., are running, an e-mail service and a printing capability are available, whereas the printing capability again may rely on various printers and network components. Therefore, the term \u201csuperordinate\u201d service refers to a service that depends on one or more \u201csubordinate\u201d services. The subordinate services themselves may again depend on other services. The latter would thus be the superordinate service of other subordinate services on the next level. In the above example, Microsoft\u2122 Office would be the superordinate service depending, among others, on the subordinate service \u201cprinting capability\u201d which would itself be the superordinate service of the subordinate services of individual printers.","The term \u201cmessage\u201d refers to a structured notification that is generated as a result of an event. Typically, an event represents a fault or a problem in operation, but it can also be a change in application system network or service status. Messages are sent to the service management server reporting basically the status of the service that has triggered the event. For example, when the printer's paper tray is empty, the printer's status changes. This results in an event that creates a message notifying the service management server of the printer's new status.","The status of a service can take different severity levels. The severity level indicates the impact of events or messages associated with a service on the performance of the service. Typical severities of services or messages associated with services are \u201cnormal\u201d, \u201cwarning\u201d, \u201cminor\u201d, \u201cmajor\u201d, or \u201ccritical\u201d.","Since the availability and performance of a superordinate service depends on subordinate services, the status of the superordinate service is also a function of the status of the subordinate services. So-called \u201crules\u201d define how the statuses of the subordinate services contribute to the status of the superordinate service. In some cases it is difficult to derive the proper status of the superordinate service only from the statuses of the subordinate services and corresponding messages concerning the superordinate service. Therefore, in the preferred embodiments of aspect a) of the invention, the rules are extended so that additional attributes for both the superordinate services and the subordinate services are taken into account for the calculation of the status of the superordinate service. Such an additional attribute might be, for example, a parameter indicating the usage of a storage disk. This parameter might significantly affect the status of a superordinate service that relies on free disk space of that storage disk.","In other cases, it is advantageous to ignore the status of certain subordinate services for the purpose of calculating the status of a superordinate service. To this end, in the preferred embodiments of aspect b) of the invention, rules can be supplied that exclude specific subordinate services from the status calculation. For example, services that are known to be in maintenance can be excluded from the status calculation as the status of messages relating to this service might not reflect its real status.","Rules for the calculation of the status of a superordinate service take into account either the status of subordinate services, messages reporting the status of the superordinate service or additional attributes other than the status, or any combination of those. In the preferred embodiments of aspect c) of the invention, logical or arithmetical operations or combinations of both on the basis of these parameters can be defined by the user in order to determine the status of the superordinate service. This is particularly useful for giving, for example, an individual subordinate service more importance than the other contributing subordinate services, for imposing thresholds on certain attributes, or for setting values of different attributes in relation to each other. The logical and arithmetical operations also comprises comparison operations and condition statements.","Most flexibility can be achieved by allowing the user to use a complete syntax of a programming language to define rules for the calculation of the status of a superordinate service. In the preferred embodiments of aspect d) of the invention, therefore, the rules can be programmed individually by the user.","The above rules are applied in addition to simpler rules from the state of the art, in which, for example, the status of the subordinate service with the highest severity level is taken as the status of the superordinate service.","As discussed above, it is advantageous to realize each of the aspects a) to d) individually. In preferred embodiments, also any combinations of these aspects are implemented, for instance aspects a) and c) of the invention together. However, most preferably all aspects a), b), c), and d) of the invention are included in the service management system. Even though with aspect d) the preceding aspects a) to c) can be implemented, it is often more convenient for the user to make use of the predefined functionality of the aspects a) to c) in addition to d).","The status of a subordinate service, when propagated to the superordinate service and further to the next level and so forth, might gain or lose importance for the status of the following level. Therefore the status of services can be individually manipulated when they are applied in the status calculation of the next higher level using so-called status propagation rules. These rules usually increase or decrease the severity of a status of a service or leave the status unchanged during the propagation from one level to the next higher level. The aspects a) to d) comprise a different type of rules, as they use the already manipulated statuses of subordinate services or messages for determining the status of the superordinate service.","The preferred embodiments therefore distinguish between status propagation rules that have as input only one parameter, namely the status of one subordinate service, and status calculation rules according to aspect a) to d) that can have several parameters as input, namely the status of subordinate services, messages reporting a status, or additional attributes. Regarding aspect c) and d), the calculation of the superordinate service depends most preferably on all three different types of input data: statuses of subordinate services, messages affecting the superordinate service and additional attributes of both subordinate and superordinate services.","As already mentioned, the possible values that the status of the services can take are for example \u201cnormal\u201d, \u201cwarning\u201d, \u201cminor\u201d, \u201cmajor\u201d, \u201ccritical\u201d. In the preferred embodiments of aspect a) the additional attributes can take values different from those of the status of the services, such as numeric values representing, for example, the usage of a storage disk.","The attributes of a service can also be useful for defining specific conditions. For instance, the status of a superordinate service is only calculated if certain attributes of the service are set.","By applying aspects a) to d) specific subordinate services can be treated individually for the calculation of the superordinate service. This means that specific subordinate services can be weighted relative to other subordinate services.","Aspect d) allows the user to include specific external data in the status calculation rules. Since the rules can be programmed individually using any common programming language, it is possible to integrate into the rule an interface, for instance, to an external data base. Most preferably, this external data comprises time of the day information meaning that the result of the application of the rule-depends on the time of the day.","The preferred embodiments provide various interfaces for configuring the rules. Preferably, the rules according to aspects b) and c) are configured using a graphical user interface in which predefined logical and arithmetical operations can be selected by the user to be applied to the status of subordinate services, messages or attributes. The configuration of rules according to aspect a) and d) is most preferably done by using an application programming interface to other programming languages providing the user with the greatest possible flexibility in defining the rules. Logical and arithmetical operations of aspect c) can of course be included while using this kind of interface. The programming languages applied to define the rules comprise both script programming languages and compiled programming languages such as C or C. The script or interpreter programming languages can be either a common language such as PERL or a language provided by the service management system defining a certain syntax. This kind of interface provides all the flexibility the syntax of the script programming language offers while being a user-friendly way to define complex rules.","In general, the relationship between services and components of services can have two different natures. In the simpler case, each superordinate service depends on various subordinate services and so on, whereas each subordinate service has only one relationship to a superordinate service. This special kind of network structure is called tree structure. An example of such a tree structure would be a Microsoft\u2122 Office package comprising the applications Word, Excel, Outlook and a local printer as depicted in . In the more complex case of a so-called graph structure, a superordinate service can have more than one relationships to services of the next higher level. An example of such a graph structure would be a printing system within a network that performs printing jobs for Microsoft\u2122 Office as well as for SAP\u2122 applications as indicated in . In other words, in a tree structure any service has only one connection to the upper level whereas in a graph structure several connections to upper-level services are possible while both having one or more connections to lower-level services. In fact, the tree structure is a special case of the graph structure. The preferred embodiments are able to handle not only networks of services in the form of a tree structure, but also the more complex graph structure of relationships between the services.","The dependencies between the services of the IT network are most preferably visualized as graphical representation, for instance as a two-dimensional map, giving the user a clear view of the relations between the various services. In addition, the status and status changes of the services are visualized in such a two-dimensional map.","The preferred embodiments of the computer program product comprise a program code which, for example, is stored on a computer-readable data carrier or is in the form of signals transmitted over a computer network. The preferred embodiments of the program code are written in an object-oriented programming language, such as C++. Some of the components of the service management system also have a hardware part. For example, the storage component  of  comprises a physical storage medium for continuously storing the collected data. It is clear that a computer program product comprises only the software parts of these components.",{"@attributes":{"id":"p-0051","num":"0049"},"figref":"FIG. 1","b":["2","22","20","20","22","18","4","16","20","12","14","12","12","10","6","8","6","8","4","14","16"]},{"@attributes":{"id":"p-0052","num":"0050"},"figref":"FIG. 2","b":["14","38","12","20","36","36","30","36","30","32","30","34"]},"The status calculation rules and the service model are configured via the user interface . The preferred embodiments comprise three different ways for configuring the status calculation rules: a graphical user interface (GUI)  allowing the user to select and specify predefined rules, an application programming interface (API)  allowing any program code to be linked to the status calculation, and a script programming interface  allowing a predefined programming syntax to be used for the status calculation. The results of the status calculations are visualized in the navigator display  illustrating the status and the status changes of the services in a two-dimensional service map.","As an example for a service tree structure,  depicts a service hierarchy for an email service. The ordered dependency relationships between the services are illustrated by the arrows in the drawing. The top level service is e-mail . This service is dependent on two lower level services , America and Europe, which in this case represent e-mail services on two continents. These services are dependent on other services, such as e-mail servers  and computers , down to the lowest-level services .",{"@attributes":{"id":"p-0055","num":"0053"},"figref":"FIG. 4","b":["50","52","54","56","54","56","58","60","62","56","64"]},"An example for a service network in the form of a graph structure is depicted in  as two-dimensional service map . The superordinate service Microsoft\u2122 Office depends among others on a printing system  which again depends on other subordinate services such as a color printer , a laser printer , and a plotter . There is also another superordinate service SAP\u2122  with regard to the printing system . Therefore, the printing system  has two relations to superordinate services, which is the characteristic of a graph structure of services.",{"@attributes":{"id":"p-0057","num":"0055"},"figref":"FIG. 6","b":["80","92","94","80","92","88","80","94","90","84","86","82","80"]},"In the preferred embodiments possible severity levels  () of a status of a service are in increasing order of severity \u201cnormal\u201d, \u201cwarning\u201d, \u201cminor\u201d, \u201cmajor\u201d and \u201ccritical\u201d. An embodiment of aspect b) is illustrated in . As it is shown there, the status \u201cignore\u201d  is additionally introduced in order to label a service that is not intended to contribute to the status calculation of the superordinate service. This feature is very useful for example in the case of a known outage of a service such as a scheduled maintenance. Although the administrator is informed about the outage of the service in question, error messages are created and sent to the status engine. In order to prevent such an expected event as a maintenance of a service from showing a \u201ccritical\u201d status in the navigator display  or affecting the statuses of other services, the service can be excluded from the status calculation using the \u201cignore\u201d status .","In  the general difference between status propagation rules and status calculation rules is schematically depicted for the preferred embodiments. While there is only one input parameter  for the status propagation rules, there are in general several parameters  that are included in the status calculation rules. In both cases, the parameters can take the severity values from \u201cnormal\u201d to \u201ccritical\u201d of . The output is generally only one value in both cases, i.e. the propagated status  according to the status propagation rules and the status of a superordinate service  according to the status calculation rules.",{"@attributes":{"id":"p-0060","num":"0058"},"figref":["FIG. 9","FIGS. 10 to 12"],"b":["116","108","110","116","112","116","112","116","114"]},"Another preferred embodiment is depicted in  showing the implementation of the status calculation of a superordinate service  using status calculation rules  that are individually programmed by a user according to aspect d) of the invention. In this case, not only the status of subordinate services or messages  can be included in the status calculation , but also external information, such as information coming from a client database  or specific time schedules . For example, it is possible that services for certain clients are given a higher priority and thus play a more important role in the status calculation. Or, the availability of, for instance, a Web server of a company offering Web services is more critical during certain periods of the day, e.g. in the evening when people come home from work and use this web service, or during special events such as the commercial slots of a popular football game. Using individually programmed rules, the occurrence of a server outage during these special time slots is treated as more critical than during the rest of the day. The user is free to define rules that suit special needs using any programming language such as C, C, an interpreter or script programming language such as PERL, that are linked to the status engine via an application programming interface (API). In an other preferred embodiment a script programming language is provided by the service management system defining a special set of syntax elements to be used for configuring the rules.","Another preferred embodiment of aspect c) using logical operations for the status calculation is shown in . As input for the calculation of the status of a superordinate service  two printers are assumed, printer A providing a maintenance attribute  and printer B providing its status  ranging from \u201cnormal\u201d to \u201ccritical\u201d. An example of an implementation of a rule  using logical operations might be the following: if the attribute of printer A equals the value \u201cin maintenance\u201d AND if the severity level of printer B is higher than \u201cnormal\u201d, then the status of the superordinate service  is set to \u201ccritical\u201d. Other logical operators beside the AND operator that are implemented in preferred embodiments of aspect c) comprise the logical OR, NOT, NOR, and NAND operators. Aspect c) also comprises comparison operators such as GREATER THAN, EQUAL TO, LOWER THAN, etc. and operators expressing conditions such as IF \u201ctrue\/false\u201d THEN, and iteration operators such as FOR i=1 to n.","An example of a preferred embodiment of aspect c) using arithmetical operations for the calculation of the status of a superordinate service  is illustrated in . In this example the input parameter of the service \u201cdisk A\u201d is an attribute indicating the current usage of disk space expressed in megabytes. In the first part  of the rule using arithmetical operations the relative usage expressed as a percentage is computed on the basis of the absolute value given in megabytes. The percentage value of disk usage is then used in the second part  of the rule stating: if the percentage of disk usage is greater than 95%, then the status of the superordinate service  is set to \u201ccritical\u201d. As in this example, a status calculation rule using arithmetical operations according to aspect c) is often applied in combination with additional attributes of the service other than the status according to aspect a). The arithmetical operations comprise, among others, basic operations such as addition, subtraction, multiplication, division, mathematical functions such as polynomial functions, exponential and logarithmic functions etc., differentiation and integration, and combinations of these. In addition, any combination of the above arithmetical and logical operations are included in aspect c) of the invention.","Generally, using the status calculation rules according to aspect a) to d) of the invention, a higher reliability and quality in monitoring services can be achieved because the status calculation rules can be adjusted more specifically and individually. For instance, owing to aspect a) of the invention, more information about a service and, in particular, more service specific performance data can be included in the status calculation leading to a more precise, specific and thus reliable image of the current status of the network of services. Excluding known error events form the status calculation according to aspect b) of the invention may help to avoid the distortion of the status information of the other services making those status evaluations more reliable. Aspect c) and d) of the invention allow to adapt the rules to specific performance data and specific requirements of the services improving the overall quality of the monitoring process.","Thus, a general purpose of the disclosed embodiments is to provide an improved method and computer system for evaluating the status of services of an information technology environment providing a greater flexibility in monitoring complex IT environments.","All publications and existing systems mentioned in this specification are herein incorporated by reference.","Although certain methods, systems and products constructed in accordance with the teachings of the invention have been described herein the scope of protection of this patent is not limited thereto. On the contrary, this patent covers all embodiments of the teachings of the invention fairly falling within the scope of the appended claims either literally or under the doctrine of equivalence."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["In the accompanying drawings:",{"@attributes":{"id":"p-0018","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0027"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
