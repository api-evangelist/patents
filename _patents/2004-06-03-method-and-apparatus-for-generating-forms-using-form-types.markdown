---
title: Method and apparatus for generating forms using form types
abstract: A method, computer readable medium and system are provided which generate model driven forms that represent data models. Using the method, to generate a form that represents a data model, such as a business model, a selection is made to identify which of a plurality of different logical form types is to be used to generate the form to represent the data model. Then, a logical form is generated at run-time using the data model and the selected logical form type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07665014&OS=07665014&RS=07665014
owner: Microsoft Corporation
number: 07665014
owner_city: Redmond
owner_country: US
publication_date: 20040603
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["Reference is hereby made to the following co-pending and commonly assigned patent applications: U.S. application Ser. No. 10\/860,306, filed Jun. 3, 2004, entitled \u201cMETHOD AND APPARATUS FOR GENERATING USER INTERFACES BASED UPON AUTOMATION WITH FULL FLEXIBILITY\u201d and U.S. application Ser. No. 10\/860,225, filed Jun. 3, 2004, entitled \u201cMETHOD AND APPARATUS FOR MAPPING A DATA MODEL TO A USER INTERFACE MODEL\u201d, both of which are hereby incorporated by reference in their entirety.","The present invention relates to the generation of forms. More particularly, the present invention relates to methods and apparatus for generating and updating forms or form user interfaces (UIs).","In typical business software products and applications, such as enterprise resource planning (ERP) products, a large number of forms or form user interfaces are used. A form is a window, a dialog, a page, or another UI element for viewing and\/or entering data. It is not uncommon for the number of forms which are used in conjunction with a business software application to exceed several thousand. Developing a large number of forms has traditionally been a labor-intensive task for software developers.","Traditionally, in generating the large number of forms required for some business or other types of software applications, software developers have created each of the forms separately and somewhat independently. In order to achieve a certain degree of consistency between forms, developers have frequently adhered to some type of standards which dictated the general layout of the forms. These standards for the forms have been implemented as \u201cbest practice\u201d or preferred implementations. While software developers can reply upon best practices for guidance in determining how a particular form should look, even with best practices, the developers face the labor intensive task of creating each of the many different forms largely independently of each other.","Another difficulty which both software developers and customers or users face relates to the labor intensive task of updating forms when needed. Traditionally, if a form was based on a particular business model, changes to the business model would require that the developer change the form associated with the business model separately. Further, if a large number of forms corresponded to the same business model, changes to the business model would require that each of the corresponding forms be updated as well. Also, any time the layout or the contents of a large number of forms was desired to be changed, each of the large number forms were revised independently. Thus, these difficulties made it a labor-intensive task for software developers to create a large number of forms, and likewise made it difficult for customers or users of the software applications to make changes to the business model and forms themselves.","The present invention provides solutions to one or more of the above-described problems and\/or provides other advantages over the prior art.","A method, computer readable medium and system are provided which generate model driven forms that represent data models or models of a problem domain. Using the method, to generate a form that represents a data model, such as a business model, a selection is made to identify which of a plurality of different logical form types is to be used to generate the form to represent the data model. Then, a logical form is generated at run-time using the data model and the selected logical form type. The form is then also rendered at run-time using the generated logical form such that the data model is acted on at run-time.","In some embodiments, selecting which of the plurality of different logical form types to use to generate the form further comprises selecting which of a plurality of different logical form type models to use to generate the user interface. Then, generating the logical form at run-time comprises generating the logical form at run-time using both the selected logical form type model and meta data from the data model.","In some embodiments, each of the plurality of different logical form types has an associated schema which defines data model data to be included in the generated logical form. The schema of each different logical form type represents patterns captured from a plurality of forms. In these embodiments, generating the logical form at run-time further comprises generating the logical form using the associated schema.","Other features and benefits that characterize embodiments of the present invention will be apparent upon reading the following detailed description and review of the associated drawings.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data . A particular group of application programs are called business applications. These are targeted at the management of companies including\u2014but not limited to\u2014handling the general ledger, inventory, salaries, customers, sales, purchases, financial reports and any other data relevant for a business.","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). The input devices are used for creating, modifying, and deleting data. Input devices can also be used for controlling (starting and stopping) the application programs and particular functions herein. The functions include opening (showing) forms and closing the forms. A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface . The monitor or other display device is used to show (render) forms.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","200","202","204","206","208","210"]},"Memory  is implemented as non-volatile electronic memory such as random access memory (RAM) with a battery back-up module (not shown) such that information stored in memory  is not lost when the general power to mobile device  is shut down. A portion of memory  is preferably allocated as addressable memory for program execution, while another portion of memory  is preferably used for storage, such as to simulate storage on a disk drive.","Memory  includes an operating system , application programs  as well as an object store . During operation, operating system  is preferably executed by processor  from memory . Operating system , in one preferred embodiment, is a WINDOWS\u00ae CE brand operating system commercially available from Microsoft Corporation. Operating system  is preferably designed for mobile devices, and implements database features that can be utilized by applications  through a set of exposed application programming interfaces and methods. The objects in object store  are maintained by applications  and operating system , at least partially in response to calls to the exposed application programming interfaces and methods.","Communication interface  represents numerous devices and technologies that allow mobile device  to send and receive information. The devices include wired and wireless modems, satellite receivers and broadcast tuners to name a few. Mobile device  can also be directly connected to a computer to exchange data therewith. In such cases, communication interface  can be an infrared transceiver or a serial or parallel communication connection, all of which are capable of transmitting streaming information.","Input\/output components  include a variety of input devices such as a touch-sensitive screen, buttons, rollers, and a microphone as well as a variety of output devices including an audio generator, a vibrating device, and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition, other input\/output devices may be attached to or found with mobile device .","Form Types","The present invention utilizes the concepts of logical forms and logical form types to provide a new method of building forms or form user interfaces for business and other applications. While in exemplary embodiments or implementations of the invention logical forms and logical form types are used, the use of the logical layer is not required in all embodiments. Thus, the present invention applies to the use of form types to create forms in general. Business applications of today typically consists of a large number of forms which often fall into a few categories or follow a similar pattern. Investigations show that the 1800 forms found in Microsoft Business Solutions Axapta can be divided into only 7 categories.","The form types of the present invention, which can be models used to aid in the generation of forms, support the notion of model-driven forms or form user interfaces by preserving and acting on the business or data model both at design-time and at run-time. This provides a high level of abstraction to a software developer. Further, the use of form types in accordance with the present invention ensures re-use (one layout is used many times), a much more homogeneous set of forms since all forms fall into a few distinct types, and forms that are easier to maintain (the layout of the type can be changed without changing the form and in some instances a different type can be applied without changing the form). It should be noted that, in certain embodiments, some form types can be incompatible, and changing the form type can require a recompile or a complete rebuild of the form. The invention ensures that application developers can reuse the user interface model across multiple display targets while retaining complete control of the look and feel of the application and how navigation within the application takes place on each display target. Examples of display targets include each of the multiple types of current and future operating systems, as well as each of the many available or future mobile devices. As another example, each rendering technology on a particular operating system can also be a display target.","Using the concepts of the present invention, a logical form contains display target independent logical controls, which makes the logical form independent of display targets itself. A logical form refers to a logical form type which defines the pattern that the logical form must follow. The logical form type referred to by a logical form can be selected from multiple different logical form types to quickly establish the look and contents of the logical form. In embodiments of the present invention, the logical form types are models that, when combined with a business or other data model, results in the generation of a logical form.","In some embodiments, the logical form type exposes the schema (which describes the structure of the form, which elements it can contain, etc.) that the form must conform to, the Maps (or Rules) which map (automatically or manually via an application developer) the business model to the logical model and from this to the physical model. In another embodiment (not using the schemas) the form types are themselves forms which define a certain structure which the form can extend. The form type may also contain user interface logic (code) that affect the dynamic behavior of the logical form and its contents. Further, a form type may reference display target information or contain display target specific meta data. Hence, form types expose style and layout information, and other types of information specific to a display target. However, since they also specify rules for the logical form and its contents they play a much bigger role. Certain aspects of the form types of the present invention are introduced as follows:","Different Form Types","As mentioned, in a typical use of the present invention, multiple different form types are provided for use by an application developer in creating forms. For example, in one example embodiment, form types could include a Dialog form type, a Card or CardView form type, a ListView form type, an EntityOverview form type, and an ActivityCenter form type. These form types correspond to typical different categories of forms used in a business application in one example. Thus, providing the multiple form types allows application developers to build all the forms that make up a state-of-the-art business application. As will be understood by those of skill in the art, these particular form types are simply an example, and the present invention is not limited to any particular form types or to any particular number of form types.","Form Type Layout","The contents and structure of the layout information may be different for each form type. Further, the layout information may be display target specific. For instance, the layout information for the ActivityCenter form type could have support for Themes\/Skins\/Styles and Master Pages which will be used by the HTML (i.e., World Wide Web or Internet) display target for displaying the form on a particular operating system platform. This gives the business developer the freedom to innovate on different display targets and tweak the form as much as needed. In the special case where only one display target is targeted, and if therefore the logical layer is omitted, the Form Type and Form Type Layout could be the same.","Pluggable and Extensible","Form types offer full flexibility and extensibility as an independent software vendor (ISV) can modify or extend them and create new form types, thereby changing the look and feel for the entire application. The form type may also define which physical controls to use on a given display target. For example, a form type may allow a standard grid to be substituted with a third party grid control (if the third party grid satisfies a well-defined contract\/interface). The controls to use can be defined in a map (which may differ between form types)\u2014and hence they are late bound\u2014so controls can be substituted without the need for a recompilation\u2014i.e. after deployment.","Referring now to , shown are diagrammatic illustrations of a Sales Order logical form created using a Card form type in accordance with an example embodiment of the present invention. In this example, the Sales Order logical form contains a set of logical controls grouped into three different logical control groups. As will be described further below, the Card form type defines how and where the controls will appear on the physical form and on different display targets, and which physical controls to use for rendering.  illustrate the same information, with  including arrows illustrating relationships and origins of information between the logical form type and the logical form, and the generation of a physical form from the logical form.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIGS. 3 and 4","b":["305","300","310","305","306","300","301","320","305","370","306","301","370","370"]},"Two parts included in form type  include a schema  that defines what has to be included in particular forms using the form type, and a layout  that includes controls which specify how the form should be rendered or drawn on a specific display target. The form type also contains a mapping from logical to physical controls, which can also be considered to be part of the layout  in some embodiments. The form type may also include logic determining the interaction between UI elements (controls, etc.). This logic is display target independent, so the schema also includes \u201ccode-behind\u201d. By having different layouts which can be used by a form type, the forms created using the form type can be tailored to different display targets (e.g., cell phone displays, personal digital assistant displays, personal computer monitors, etc.). With form type  representing a captured pattern to be used in multiple forms, multiple form instances  can be generated using form type .","Consider for this example a process that a developer could go through to create a form for a Sales Order entity or object model (i.e., the business or data model). First, the developer could look to see which kinds of forms he or she has to choose from. Selecting the \u201cCard\u201d form type, as shown at  in , calls up or designates the Card Schema  as is represented by arrow  in .","When the developer specifies a particular form type and associated schema, he or she is in some embodiments choosing to include in the form the information or fields dictated by the schema, with meta data from the user's business or other model populating the field values. In some embodiments the form types can include a pattern for navigating between forms\u2014the form type defines how another form (of a given type) is opened\u2014e.g. in its own window or replacing the content area. For example, by selecting the Card form type  (and associated Card schema ), the logical form  will include a Content Area  corresponding to Content Area  defined in the schema . The origin of Content Area  corresponding to Content Area  is represented by arrow  in . Likewise, because the schema  of the Card form type includes a UI Part Area , a Related Entity UI Part Area , and an Action Area , the logical form  includes these areas or fields as well as shown at ,  and . Again, the origins of these fields are represented diagrammatically by arrows ,  and .","As mentioned above, each form type also includes a layout  that dictates which controls to use for rendering on a specific display target. As shown diagrammatically in , the layout for the card form type includes controls which cause a display target  to include a Content Area , a UI Part Area , a Related Entity IU Part Area , and an Action Area . Arrows , ,  and  illustrate the correlation of these areas in the card layout to their corresponding areas in the Card schema. The logical form , which is generated using the selected logical form type and meta data from the data model (in this example a Sales Order entity), is rendered as a physical form  on display target  This process is illustrated in  using arrows  and .","Referring now to , shown is a flow diagram  which illustrates a method of generating a model driven form to represent a data model as was described above with reference to . At step , the method is shown to include selecting which of multiple different logical form types to use to generate the form to represent the data model. In the example provided above, a Card or CardView form type was selected for this purpose. Then, at step , the method includes generating a logical form at run-time using the data model and the selected logical form type. By generating the logical form at run-time, the data model is preserved (i.e., acted on at run-time), and any changes made to the data model will be reflected in the logical form and in the rendered physical form. Since in some embodiments the form types can be considered logical form type models, the step  can be considered to include generating the logical form at run-time using both the selected logical form type model and meta data from the data model.","As described above, each of the multiple different logical form types has an associated schema which defines data from the data model to be included in the generated logical form. Therefore, the step  of generating the logical form at run-time includes generating the logical form using the associated schema in exemplary embodiments. Since the schema of each of the different logical form types represents patterns captured from a large number of forms, a few form types can be used to generate a very large number of forms. Also, since each of the logical form types has at least one defined layout which is specific to a particular display target, a step of generating a physical form at run-time includes generating the physical form using the at least one defined layout. In other embodiments, each logical form type can include multiple different layouts corresponding to multiple different display targets to facilitate generation of a large number of forms for the different display targets.","In some embodiments of the invention, the methods disclosed herein generate multiple different forms that represent a single data model. For example, consider the method steps illustrated in flow diagram  shown in . Here, the method is shown to further include the step  of selecting multiple different logical form types to use to generate the multiple different forms that represent the data model. Then, as shown at step , the method includes generating the multiple different logical forms at run-time, with each of the different logical forms being generated using the data model and a different one of the selected logical form types. In accordance with an aspect of the present invention, since the data model is acted upon at run-time, this allows changes to the data model to be implemented in multiple generated forms automatically. Altering the data model a single time, but automatically affecting multiple forms at run-time provides a significant increase in efficiency as compared to conventional more labor intensive methods of generating forms.","In still other embodiments, the methods of the present invention are used to generate multiple different model driven forms that represent multiple different data models. For example, consider the method steps illustrated in flow diagram  shown in . At step , this more particular embodiment of the method includes selecting which one of multiple different logical form types to use to generate multiple different forms to represent the data models. Then, at step , the method is shown to include generating multiple different logical forms at run-time, with each of the multiple different logical forms being generated using one of the multiple different data models and the selected logical form type. Thus, single form can be used to generate a logical form for each of a large number of data model.Since the multiple different forms are rendered at run-time using the generated logical forms, the data models are still acted on at run-time. As an efficiency enhancement, each of the multiple different forms can be altered by altering the one selected logical form type a single time.","Referring now to , shown is a block diagram of a system  for generating model driven forms that represent data models. As shown in , system  includes processing\/control component  and data stores  and  for storing meta data related to either the data models  (for example business models in the form of entities or objects) or for storing form types  and associated schemas  and layouts . Developer inputs  can be, but is not restricted to, any inputs which select form types and data models to be used to generate logical forms . For example, any of the input devices described with reference to  can be used to provide these inputs. Example input actions can include selecting, from a list or otherwise, which form type to use. The developer inputs can also include input actions such as dragging a visual representation of the data model onto a visual representation of the selected form type in order to dictate which field types the generated logical form should include. Many other developer inputs can also be used.","Logical form types can also be used by third parties to customize the form types at runtime, which is not necessarily considered to be selecting data models or form types. Therefore, developer input is not necessarily restricted to \u201cdesign time\u201d. Further, the methods of the present invention are not restricted to embodiments requiring developer input. In other embodiments, the form types can be personalized\u2014allowing the end user to change multiple forms at once.","With the form type  and associated schema  and layout  selected, along with a particular data model, processing\/control component  is configured to generate logical forms  as described above. Then, a rendering engine  generates the physical forms  and the corresponding display target(s) .","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
