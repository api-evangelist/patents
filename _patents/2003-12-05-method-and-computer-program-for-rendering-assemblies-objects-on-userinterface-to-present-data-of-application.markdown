---
title: Method and computer program for rendering assemblies objects on user-interface to present data of application
abstract: A user-interface of a device renders a first object and a second object, each object with data of a business application. The device is either of a first type or of a second type. In the device, an interpreter receives an application specification document with a statement. The statement indicates to render the first and second objects in an assembly. The interpreter identifies a presentation pattern for the assembly from predefined first and second presentation patterns according to the type of the device so that the assembly is rendered according to the presentation pattern.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07418696&OS=07418696&RS=07418696
owner: Sap Aktiengesellschaft
number: 07418696
owner_city: Walldorf
owner_country: unknown
publication_date: 20031205
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","LIST OF REFERENCE NUMBERS"],"p":["This application is a continuation application of, and claims the benefit of priority under 35 U.S.C. 120 to, U.S. application Ser. No. 10\/646,428, which was filed on Aug. 21, 2003. U.S. application Ser. No. 10\/646,428 is a continuation of U.S. National Phase application Ser. No. 10\/257,510, which was filed on Oct. 11, 2002 now abandoned. Application Ser. No. 10\/257,510 is a U.S. National Phase Application for International Application No. PCT\/EP01\/04095, filed Apr. 10, 2001, which claims priority to Japan Patent Application No. 2000-109978, filed Apr. 11, 2000.","The present invention relates generally to the creation of applications for computing devices, and more particularly to presenting the applications on different computing devices that have different user-interfaces (e.g., size and shape), to creating applications which can be used in on-line or off-line operating modes of the computing device, and to defining classes of applications, wherein the applications share common user-interface models.","Recent technology development created an opportunity to hand over low-cost, low-maintenance small mobile (\u201cpervasive\u201d) computing devices to professional and non-professional workers who are not always, or perhaps never, within reach of a desktop computer.","Such pervasive devices must be able to integrate with corporate data systems (such as SAP R\/3 by SAP Aktiengesellschaft, Walldorf (Baden), Germany) and business processes that are enabled by information technology (IT).","When presenting the application, the devices render objects to the user-interface of the device. For example, the devices visually render screen objects (e.g., tiles) on a screen, or aurally render voice to a loudspeaker. Often layout information for each object and for each device is specified (i.e. \u201chard-coded\u201d) into the application specification. However, it is not desired to specify for each device type and for each object.","Furthermore, the current state of communication reliability, communication costs, and device battery capacity make it necessary to support disconnected (\u201coff-line\u201d) as well as connected (\u201con-line\u201d) operating modes (of the computing device). Unfortunately, there is a shortage of tools to meet these requirements.","From the standpoint of application development, maintenance and deployment, there is a further additional challenge of supporting different computing devices. The computing devices are, for example, consumer devices with the Windows CE operating system (available for at least 4 different screen sizes), wireless telephones with micro-browsers, and traditional wire-bound telephones. As a further medium, voice can deliver corporate content via interactive voice response systems using telephone push buttons or voice-recognition and voice-synthesis.","Hence, there is a need to create customizable applications for pervasive computing devices. Further, since communication infrastructures are developing rapidly but unevenly throughout the world, the development method should support mixed on-line and off-line usage of the applications without imposing large discontinuities and resultant training costs on the users.","In other words, it is desired to provide server-based layouts that supports multiple implementations of different computing devices and that support multiple media.","In one implementation, the present invention provides a method for rendering an assembly (i.e. a combination) of a first object and a second object on a user-interface of a device. The device is either of a first type or of a second type; the first and second objects present data of an application. The method comprises:","receiving an application specification document by the device, the application specification document having a statement with an indication to render the first and second objects in the assembly;","interpreting the statement of the application specification document to identify a presentation pattern for the assembly from predefined first and second presentation patterns according to the type of the device; and","rendering the assembly of the first and second objects on the user-interface according to the presentation pattern identified in the interpreting step.","An indication to render the object in an assembly is given in the receiving step. While in the prior art, presentation statements include explicit presentation data for each single object; the inventive presentation statement is simplified and only indicates that the objects are presented in an assembly. The presentation statement (or \u201crendering statement\u201d) is sufficient to identify a presentation pattern by interpreting the statement when the user-interface of the device is taken into account.","In some implementations, prior to the receiving step, the method further comprises specifying the application in the application specification document by a workbench in a development computer, and simulating the rendering step by a pre-viewer component of the workbench.","Using the workbench allows the developer to confirm the presentation without using the device. The simulation presents a look-like of the objects. It also enables the developer to first specify the application for a device of the first type and then to adapt the application for a device of the second type.","In some implementations, in the rendering step, the first object and the second object are rendered not only according to the presentation pattern but also according to a predefined hierarchy pattern.","The hierarchy pattern is convenient for rendering objects that are related to each other in hierarchy. For example, the first object can be supra-coordinated over the second object. The hierarchy pattern can be defined as a sequence for consecutively rendering objects and as a definition of object locations (e.g., right-left, foreground-background).","In some implementations, the specifying step comprises writing the application in an application specification language, providing an interpreter that is specific for the application specification language, and storing the interpreter in the device.","Having the interpreter adapted to the application specification language and storing the interpreter in the device, allows to present the objects of the application even if the device is not coupled to an application server computer (off-line mode).","In some implementations, the predefined presentation patterns are stored by the interpreter. Storing the predefined presentation patters (or \u201cthemes\u201d) by the interpreter alleviates the developer from specifying presentation patterns in the statement itself.","In some implementations, the presentation pattern is a display pattern, wherein the objects are rendered to the user-interface being a screen, and wherein the presentation pattern is identified according to the screen size. In the embodiment of visual presentation, screen sizes of different devices are distinguished.","In some implementations, in the rendering step, the presentation pattern is an audio pattern.","In another implementation, the present invention provides a computer-program product to visually render a first object and a second object in an assembly on a screen of a computing device. The objects present data of a business application on a computer that is at least temporarily coupled to the computing device. The device is either of a first type or of a second type. The computer-program product has instructions that cause a processor of a computing device to perform the following steps:","receiving an application specification document from a computer, the application specification document having a statement with an indication to render the first and second objects in assembly; interpreting the statement of the application specification document to identify a visual presentation pattern for the assembly from predefined first and second visual presentation patterns according to the type of the device; and rendering the assembly of the first and second objects on the screen according to the visual presentation pattern identified in the interpreting step.","It is an advantage that the computer must not be permanently coupled to the computing device. It is sufficient to transfer the application specification document to the computing device before rendering the objects. The computing device is either of a first type or of a second type; the application specification document does not need to distinguish the type. The statement indicates to render the first and second objects in an assembly. It is not necessary to indicate details on how the objects are assembled. According to the device type, the suitable visual presentation patterns for the assembly is identified from predefined patterns that are, preferably, stored in the computing device.","In some implementations, the computer-program product is an interpreter that is located in the device.","In some implementations, the interpreter is located in a further computer. This has the advantage that devices with low computing power like conventional phones can render the application as well.","In some implementations, the computer-program product is, optionally, embodied by a program signal that is conveyed to the computing device.","In some implementations, the computer-program product is, optionally, embodied by a program carrier.","In another implementation, the present invention also provides a computer-program product that resides in a computing device of either a first type or a second type, the computer-program product for interpreting an application specification document and causing a processor of the computing device to render a first object and a second object in combination to a user-interface of the device, the computer-program product having a plurality of instructions to control the processor, the computer-program product characterized in the following:","A first sub-plurality of instructions form a theme-handler to evaluate a statement of the application specification document, the statement instructing to render the first and second objects in an assembly according to a device type specific presentation pattern for the assembly that is identified from predefined first and second visual presentation patterns.","A second sub-plurality of instructions form a navigation engine to select one of the first and second objects for interaction with a user to create inter-object relations with user-interface elements and data cursors.","In some implementations, the computer-program product is, optionally, delivered to the device by a program signal.","In some implementations, the computer-program product is, optionally, delivered to the device by a program carrier.","In another implementation, the present invention provides a method to create an application system operating with a computing device. The method comprises the following steps:","a first step to define a user-interface model; a second step to define an application specification document by a meta-language; a third step to customize a workbench component that identifies constraints on the validity of the application specification document; a fourth step to define layout themes for the computing device; a fifth step to realize the user-interface model in an interpreter component; and a sixth step to realize the layout-themes in the interpreter component.","In some implementations, the first step comprises: determining the types of tiles and the functionality of tiles; the tiles being elements of the user-interface model; determining relationships between the tiles in an assembly, and determining a navigation state and the required user operations on the navigation state.","In some implementations, the second step comprises: defining specifications to the types of tiles; defining attributes to express properties of the tiles; and defining attributes in the navigation state.","In some implementations, the fourth step for each computing device comprises: defining a representation on the output media of device for each element of the user-interface model; and defining the user-interface model for each operation of the user-interface model.","In some implementations, the fifth step comprises: creating models to specify the tiles and the assembly; implementing constructors to create user-interface instances from the application specification document; and implementing the user-interface instances from the models in a computer programming language.","In some implementations, the sixth step comprises for each theme: implementing each layout-theme as a layout handler; and obtaining a selection of the layout-theme by a developer and forwarding the selection to the interpreter component.","In other words, solutions by the present inventions are summarized as follows:","(a) It is a task of the present invention to define a framework, wherein the framework defines classes of applications that share a common user-interface model.","By defining a dedicated rendering statement in application specification language, and by adapting an interpreter, the present invention allows to create applications for different types of computing devices, even if the device is not yet present when the application is developed. Since the statement is not specific to a single application, the statement can be re-used for further applications (classes).","(b) It is a further task of the present invention to define a method for creating an application development system (hereinafter \u201capplication system\u201d for each particular user-interface model.","In such a system, a workbench component assists the developer to build the application and to simulate the application for a particular user-interface component of a particular device.","(c) It is a further task of the present invention to provide a method of defining computer-programming languages (CP-languages) to specify particular applications of the user-interface model.","The present invention takes advantage of language definition schemes. The possibility of creating content statements in schemes (e.g., XML scheme) is used to create the rendering statement. The language corresponds to the user-interface model with its components (e.g., tiles, assemblies, navigation).","(d) It is a further task of the present invention to provide an interpreter component for different computing devices, wherein the interpreter component executes the application by implementing the user-interface model.","The present invention allows to specify the interpreter and to simulate the interpreter by the workbench component. It is possible to build a single interpreter for a plurality of different devices, and also possible to build different interpreters for each device type.","(e) It is a further task of the present invention to provide a layout component (so-called \u201clayout theme\u201d) in the interpreter component, wherein the layout component implements the user-interface model corresponding to each computing device. In other words, the themes are device-specific layouts for the user-interfaces (, e.g., screen, speaker) of the devices.","(f) It is a further task of the present invention to provide for off-line, on-line and mixed operation modes of the applications with the same user-interface model and implementation.","(g) It is a further task of the present invention to enable the interpreter component () to synchronize data between the computing device (\/\/) and the server computer  (or plurality of computers ).","This is accomplished by data synchronization services in the interpreter.","(h) It is a further task of the present invention to enable the interpreter component to reflect data changes in the user-interface without explicit action by the user when a server computer initiates data.","(i) It is a further task of the present invention to provide techniques for improving the performance of the interpreter component on computing devices such as portable phones, conventional phones, handheld computers. The present invention can be used by such different computing devices.","Like reference symbols in the various drawings indicate like elements.","For convenience, a list of reference numbers is provided prior to the claims.","As used herein, the term \u201cdeveloper\u201d refers to a person who creates application  by interacting with workbench component  to create and assemble instances of language elements that form an application specification document . Preferably, the developer interacts with computer  (cf. ). As used herein, the term \u201cuser\u201d refers to a person who accesses application  on a computing device (such as computer \/\/, cf. , computer ).","As used herein, the terms \u201ctheme\u201d refers to the design of user-interface objects that create a distinct visual appearance, audible environment and behavior of the user-interface model. The theme comprises, for example, a presentation pattern and a hierarchy pattern.","Method steps are explained by function of components. Persons of skill in the art are able to implement method steps as computer program instructions, in a programming language, such as C++.","The present invention allows to specify application  at a high level, and optionally to specify applications  for a particular medium (or \u201cform-factor\u201d) and device.","For this purpose, a family (or \u201cclass\u201d) of declarative application specification languages (AS-language) is created. The AS-language expresses: data-model component , integration of data-model component  with corporate data (e.g., in database ), and user-interface component .","For each AS-language, interpreter component  (cf. ) interprets an application specification document  and presents application  to the user by using user-interface component  in device \/\/. Interpreter component  provides a basic user-interface framework. The framework comprises a navigation model, binding data to user-interface elements, data-services such as validation, inter-object relationships and navigation, data-event control, and capture of data changes, and middleware-services such as data synchronization, and virtual request-reply.","The functionality of built-into interpreter component  is enhanced by common scripting languages, or is enhanced by custom object components on COM or similar technologies.","Interpreter component  comprises data synchronization services  (cf. ) to provide integration between the computing device and the server.","While the basic operating mode of device \/\/ is off-line, interpreter component  supports the combination of off-line and on-line modes. Interpreter component  simulates the \u201crequest-response\u201d style of interaction that the user expects from an on-line connection between computing device \/\/ and server computer .","Interpreter component  presents this appearance by ensuring data-synchronization in near real-time (\u201cRealTimeDataSync\u201d) and ensuring that data changes that result from synchronization are reflected on the user-interface (\u201cchange reflection\u201d) without an explicit user action (as the results become available).","Interpreter component  provides data synchronization through messaging services and communication services of computing devices \/\/; such services are available in standard device configurations.","Interpreter component  accommodates changes by a data synchronization layer that is coupled to a user-interface data-event layer. When the server changes data, the changes are automatically propagated to the elements of the user-interface.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 1","b":["999","900","901","902","90"],"i":"q"},"Computers - are coupled via inter-computer network . Computer  comprises processor , memory , bus , and, optionally, input device  and output device  (I\/O devices, user-interface ). As illustrated, the invention is present by computer program product  (CPP), program carrier  and program signal , collectively \u201cprogram\u201d.","In respect to computer , computer \/ is sometimes referred to as \u201cremote computer\u201d, computer \/ is, for example, a server, a router, a peer device or other common network node, and typically comprises many or all of the elements described relative to computer . Hence, elements  and - in computer  collectively illustrate also corresponding elements and -(shown for q=0) in computers ","Computer  is, for example, a conventional personal computer (PC), a desktop and hand-held device, a multiprocessor computer, a pen computer, a microprocessor-based or programmable consumer electronics, a minicomputer, a mainframe computer, a personal mobile computing device, a mobile phone, a portable or stationary personal computer, a palmtop computer or the like.","Processor  is, for example, a central processing unit (CPU), a micro-controller unit (MCU), digital signal processor (DSP), or the like.","Memory  symbolizes elements that temporarily or permanently store data and instructions. Although memory  is conveniently illustrated as part of computer , memory function can also be implemented in network , in computers \/ and in processor  (e.g., cache, register), or elsewhere. Memory  can be a read only memory (ROM), a random access memory (RAM), or a memory with other access options. Memory  is physically implemented by computer-readable media, such as, for example: (a) magnetic media, like a hard disk, a floppy disk, or other magnetic disk, a tape, a cassette tape; (b) optical media, like optical disk (CD-ROM, digital versatile disk\u2014DVD); (c) semiconductor media, like DRAM, SRAM, EPROM, EEPROM, memory stick, or by any other media, like paper.","Optionally, memory  is distributed across different media. Portions of memory  can be removable or non-removable. For reading from media and for writing in media, computer  uses devices well known in the art such as, for example, disk drives, tape drives.","Memory  stores support modules such as, for example, a basic input output system (BIOS), an operating system (OS), a program library, a compiler, an interpreter, and a text-processing tool. Support modules are commercially available and can be installed on computer  by those of skill in the art. For simplicity, these modules are not illustrated.","CPP  comprises program instructions and\u2014optionally\u2014data that cause processor  to execute method steps of the present invention. Method steps are explained with more detail below. In other words, CPP  defines the operation of computer  and its interaction in system network system . For example and without the intention to be limiting, CPP  can be available as source code in any programming language, and as object code (\u201cbinary code\u201d) in a compiled form. Persons of skill in the art can use CPP  in connection with any of the above support modules (e.g., compiler, interpreter, operating system).","Although CPP  is illustrated as being stored in memory , CPP  can be located elsewhere. CPP  can also be embodied in carrier .","Carrier  is illustrated outside computer . For communicating CPP  to computer , carrier  is conveniently inserted into input device . Carrier  is implemented as any computer readable medium, such as a medium largely explained above (cf. memory ). Generally, carrier  is an article of manufacture comprising a computer readable medium having computer readable program code means embodied therein for executing the method of the present invention. Further, program signal  can also embody computer program . Signal  travels on network  to computer .","Having described CPP , program carrier , and program signal  in connection with computer  is convenient. Optionally, program carrier \/ (not shown) and program signal \/ embody computer program product (CPP) \/ to be executed by processor \/ (not shown) in computers \/, respectively.","Input device  symbolizes a device that provides data and instructions for processing by computer . For example, device  is a keyboard, a pointing device (e.g., mouse, trackball, cursor direction keys), microphone, joystick, game pad, scanner. Although the examples are devices with human interaction, device  can also operate without human interaction, such as, a wireless receiver (e.g., with satellite dish or terrestrial antenna), a sensor (e.g., a thermometer), a counter (e.g., goods counter in a factory). Input device  can serve to read carrier .","Output device  symbolizes a device that presents instructions and data that have been processed. For example, a monitor or other type of display, (cathode ray tube (CRT), flat panel display, liquid crystal display (LCD), a speaker, a printer, a plotter, a vibration alert device. Similar as above, output device  communicates with the developer, but it can also communicate with further computers.","Input device  and output device  can be combined to a single device; any device  and  can be provided optional.","Bus  and network  provide logical and physical connections by conveying instruction and data signals. While connections inside computer  are conveniently referred to as \u201cbus \u201d, connections between computers - are referred to as \u201cnetwork \u201d. Devices  and  are coupled to computer  by bus  (as illustrated) or by network  (optional). While the signals inside computer  are mostly electrical signals, the signals in network are electrical, magnetic, optical or wireless (radio) signals.","Networking environments (as network ) are commonplace in offices, enterprise-wide computer networks, intranets and the Internet (i.e. world wide web). The physical distance between a remote computer and computer  is not important. Network  can be a wired or a wireless network. To name a few network implementations, network  is, for example, a local area network (LAN), a wide area network (WAN), a public switched telephone network (PSTN); a Integrated Services Digital Network (ISDN), an infra-red (IR) link, a radio link, like Universal Mobile Telecommunications System (UMTS), Global System for Mobile Communication (GSM), Code Division Multiple Access (CDMA), or satellite link.","Transmission protocols and data formats are know, for example, as transmission control protocol\/internet protocol (TCP\/IP), hyper text transfer protocol (HTTP), secure HTTP, wireless application protocol, unique resource locator (URL), a unique resource identifier (URI), hyper text markup language HTML, extensible markup language (XML), extensible hyper text markup language (XHTML), wireless application markup language (WML), etc.","Interfaces coupled between the elements are also well known in the art. For simplicity, interfaces are not illustrated. An interface can be, for example, a serial port interface, a parallel port interface, a game port, a universal serial bus (USB) interface, an internal or external modem, a video adapter, or a sound card.","Computer and program are closely related. As used hereinafter, phrases, such as \u201cthe computer provides\u201d and \u201cthe program provides\u201d, are convenient abbreviation to express actions by a computer that is controlled by a program.","Computer  is also referred to as \u201cserver computer\u201d.","Computer  stores database  (cf. , \u201cdata source\u201d) that supplies data for application . Preferably, computer  stores database  in memory .","Computer \/\/ is hereinafter referred to as \u201ccomputing device\u201d \/\/. For simplicity, reference numbers are sometimes left out. Computing device \/\/ can be of different types.","Computing device  is a portable phone with a micro-browser, computing device  is a conventional phone without a browser (portable or fixed-wired phone), and computing device  is a personal computer (cf. ). Where convenient for explanation (in connections with , , ), personal computer  is distinguished into computers -, - and -.","Computer  and device \/\/ are in a client-server relation. For convenience of explanation, device \/\/ is regarded as the \u201cclient\u201d and computer  is regarded as the \u201cserver\u201d. Usually, computer  and device \/\/ are located separately; this is sometimes expressed by the term \u201cremote\u201d in connection with computer .","Among other things, the present invention has the advantage to provide the desired server-based layout that support multiple implementations of different computing devices and that support multiple media.","A further advantage of the present invention is in the following: When device \/\/ presents an application to the user, device \/\/ can operate either in an on-line operating mode (exchange data with computer ) or in an off-line operating mode (no data exchange). Both operating modes can be combined (\u201cmixed\u201d mode).","A further advantage of the present invention is in a data-centric approach. Database  in computer  operates independently from application system \/\/ of the invention. Changes of the application system \/\/ do not require changes of database .","Having described hardware implementations in  is convenient for further explanation of computer program product . To distinguish software from hardware, the term \u201ccomponent\u201d and \u201cmodel\u201d refers to portions of computer program product . For example, a \u201cuser-interface component\u201d is therefore a sequence of code that cause processor and user-interface to operate. Throughout the following, terms in single quotation marks \u2018 \u2019 indicates non-limiting examples of content. In the figures, names, email-addresses and the like are abbreviated using ellipsis; other content data is symbolized by lowercase alphabetic triples like \u2018abc\u2019, \u2018def\u2019 and the like.",{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 2","b":["300","300","300","204","320","330","340"]},{"@attributes":{"id":"p-0133","num":"0132"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"mi":"application","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"300"},{"mrow":{"mi":["data","model","component"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mtext":"-"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mn":"204","mrow":{"mo":["(",")"],"mrow":{"mi":["cf","FIG"],"mo":[".","\u2062",".","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mn":"15"}}},"mo":"+"}],"mo":["=","\u2062"],"mi":{}}}},{"mtd":{"mrow":{"mi":{},"mo":"\u2062","mrow":{"mrow":{"mstyle":[{"mtext":"middleware"},{"mtext":"-"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mi":["model","component"],"mn":"320"},"mo":"+"}}}},{"mtd":{"mrow":{"mi":{},"mo":"\u2062","mrow":{"mrow":{"mi":["business","logic","component"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mtext":"-"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mn":"330"},"mo":"+"}}}},{"mtd":{"mrow":{"mi":{},"mo":"\u2062","mrow":{"mi":"user","mo":"-","mrow":{"mi":["interface","component"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mn":"340"}}}}}]}}}},"Application specification languages (AS-languages) address each of these components , , ,  of application .","In application , it is not necessary for all of these components , , ,  to be present.","The components are now explained with more detail:","Data-model component  defines local data on which application  acts. Data-model component  comprises tables , , and interrelation  between tables , .","Middleware-model component  defines content of messages  that are exchanged between computing device \/\/ and server computer  to accomplish data synchronization, and defines relations  between messages  and tables ,  of data-model component .","Business-logic component  comprises a pool of functions  and scripts  that are associated with various application events.","User-interface component  defines how the user interacts with application . User-interface component  comprises the following elements: user-interface model , and theme . User-interface model  comprises tile , assemblies , and navigation state . It is an advantage of the present invention, that model  is not specific to application ; in other words, model  can be used for a plurality of different applications. Tile  is a view of an application-level object, such as customer, contact etc.","Assemblies  are pluralities of tiles  and interrelations between tiles , for example, a plurality of views of related business objects. Navigation state  is a model of the state and operations of user-interface model , with access, instantiation and transition between tiles  and assemblies . Optionally, navigation state  memorizes previous states. Theme  is a presentation of user-interface model  on a particular type of computing device.","The realization of theme  may require additional \u201cstate\u201d information to represent the status of the presentation (of application ) at runtime; this information is logically associated with navigation state  and extends navigation state .","The above definitions of application  (cf. ) define a family of application models parameterized by concrete definitions of tile , assemblies  and navigation states .","The developer chooses particular tile , assemblies  and navigation state . When choosing, the developer thereby sets the requirements for the AS-language to specify application  in compliance with corresponding user-interface model . Resulting application  is presented on different computing devices (and media) in accordance with theme  suitable for each particular computing device (and medium).","In the following, user-interface model  is described in first and second implementations -, -. For convenience, indices  and  are added to reference numbers -.","The first implementation - of user-interface model  is the so-called MDF-model or \u201ctile-set stack model\u201d. As mentioned, user-interface model  is defined by tile -, assembly - and navigation state -.","Tile - combines user-interface elements that are displayed in fields within a particular business object type. For example, tile - \u2018customer detail\u2019 belongs to the business object type \u2018customer\u2019. Individual user-interface elements of tile - belong to fields such as \u2018customer number\u2019, \u2018name\u2019, and \u2018industry type\u2019.","Assembly - is a plurality of tiles - that are organized in a hierarchy (or collection of hierarchies). One or more tiles - are designated as main tile; each main tile is the root of a tree of sub tiles. A sub tile is related to main tile (parent) by a query on the set of all data items that are associated with the sub tile. The query is parameterized by properties of the currently selected item in the main tile. For example, when the user selects \u2018customer\u2019 in the main tile, related \u2018sales orders\u2019 in a sub tile are automatically selected and displayed. Hierarchy is generally explained in connection with  (pattern , main object , sub object ).","Navigation state - comprises instantiated assemblies - that are displayed as a stack (cf. navigation stack  in ). Conveniently, assembly - displayed at the top of the stack is the current assembly -. Preferably, the user can interact only with current assembly -. Logically, all tiles - are presented to the user simultaneously. However, theme  for a particular computing device may require the user to explicit perform some action to access individual tiles -.","Such actions do not affect navigation stack  (cf. ). Executing a hyperlink (cf.  in ) in one of tiles  can create a new instance of a tile assembly. In that case, the new instance is pushed onto the top of the stack. Discarding the top of the stack can reverse this operation. Some tile assemblies are distinguished as top-level tile assemblies; instances of such tile assemblies are created directly, in which case the stack is cleared prior to creating the new instance. User-interface model , and the corresponding AS-language, is a preferred embodiment. Table 1 (cited at end of specification) explains an example AS-language for this model.","The second implementation - of user-interface model  is a so-called \u201cpervasive workflow model\u201d or \u201cdialog model\u201d. Implementation - is suitable for simple workflow applications , where the user is required to make a choice step at a particular point in application .","As used herein, the term \u201cworkflow\u201d is a sequence of predefined interactions of the user with device \/\/. For example for a workflow \u2018vacation request approval\u2019, the user (who likes to request vacation) first inputs his\/her name (as \u2018requestor\u2019), second inputs the desired vacation dates (as \u2018date\u2019), third inputs a \u2018reason\u2019, and so on. The choice step is based on a small amount of predetermined data. The choice step can be presented on a mobile computing device (e.g., device  or ).","User-interface model - for this scenario is described by the following definitions:","Tile - is a plurality of user-interface elements that are displayed in fields on a workflow container. For example, the workflow container for \u2018vacation request approval\u2019 would have user-interface elements such as \u2018requestor\u2019, \u2018date\u2019, and \u2018reason\u2019. Since assembly - preferably, comprises only a single tile -, assembly - and tile - are not distinguished.","Navigation state - comprises a single instantiated tile -, designated by the user as the \u201ccurrent tile\u201d. The user can only interact with this \u201ccurrent tile\u201d. In order to designate an instantiated tile - as \u201ccurrent tile\u201d, all tiles - are available in a pool that the user can access.","The user may return an instance back to the pool by selecting another instance from the pool. Optionally, the user indicates that processing of the tile instance is complete, whereupon the tile is logically removed from the pool. the user may also initiate a new tile instance and add it to the pool, by selecting from a list of tiles defined in application . User-interface model  can be elaborated to manage a tile instance pool of more complexity; for example, the workflow represented by each tile instance could have an associated priority or additional states.",{"@attributes":{"id":"p-0157","num":"0156"},"figref":["FIG. 3","FIG. 3"],"b":["300","200","250","260","200","240","240","260","341","300","240","240","2","240","241","242","900"]},"In step creating application specification document  (cf. ), the developer interacts with workbench component  of application system \/\/ to specify application  in application specification document . Step creating optionally comprises to specialize application specification document  for particular device \/\/ (cf. , \u201cspecializing for particular device\u201d -).","In step encoding, workbench component  transforms application specification document  into interpreter-readable document  (cf. ).","In step storing, workbench component  stores interpreter-readable document  in storage system  (cf. ) so that interpreter component  can retrieve and execute document  upon request.","Application specification document  is an XML-document that conforms to a particular AS-language . Such AS-languages are specified in a meta-language. Examples for meta-languages are \u201cdocument type definition\u201d (DTD) or \u201cXML schema\u201d, both well known in the art. The preferred embodiment of the present invention uses \u201cXML schema\u201d. Preferably, workbench component  is an XML document editor that assists the developer in creating application specification document .","The editor validates application specification document  and edits context-sensitive to ensure compliance with the AS-language. The developer creates a new application specification document  by invoking a start command from a menu in workbench component .","Subsequently, the developer modifies the document by adding or deleting XML-elements, or by adding, modifying, or deleting attributes of these elements. Operations on elements are performed through user-interface actions on the tree-viewer, while operations on element attributes are performed through element attribute panel  (cf. , , , ).",{"@attributes":{"id":"p-0164","num":"0163"},"figref":["FIG. 4","FIG. 3"],"b":["600","600"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":[{"@attributes":{"id":"ul0001-0001","num":"0164"},"b":["601","230"],"figref":"FIG. 6"},{"@attributes":{"id":"ul0001-0002","num":"0165"},"b":["602","250"],"figref":"FIG. 6"},{"@attributes":{"id":"ul0001-0003","num":"0166"},"b":["603","240","245","230","250"]},{"@attributes":{"id":"ul0001-0004","num":"0167"},"b":["604","240","901","902","903","250"]},{"@attributes":{"id":"ul0001-0005","num":"0168"},"b":["605","240","241","240"],"figref":"FIG. 3"},{"@attributes":{"id":"ul0001-0006","num":"0169"},"b":["606","241"]},{"@attributes":{"id":"ul0001-0007","num":"0170"},"b":["607","241","200","300","901","902","903"]}]}},{"@attributes":{"id":"p-0165","num":"0171"},"figref":["FIG. 5","FIG. 5"],"b":["200","1","345","1","345","2","345","3","345","901","218","201","200","2","240","245"]},"As arrows  and  indicate, application specification document  is read by client-side interpreter component - or by server-side interpreter component -. For simplicity, optional formatting document  into interpreter-readable document  is not illustrated. The distinction between client-side and server-side is convenient, but not necessary for the present invention. Preferably, client-side interpreter - resides in memory \/\/ of device \/\/ and controls how processor \/\/ of device \/\/ executes the application (cf. ). Server-side interpreter component - symbolizes that devices \/\/ do not need to have interpreter component  and that interpreter component  is optionally installed on a separate computer (not illustrated here). This is convenient, when the computing capacities of device \/\/ are limited. In other words, it is not important where interpreter component  is actually located and executed: in the device or in the separate computer (not shown). Since the location of interpreter is not important, interpreters - and - are collectively referred to as \u201cinterpreter component \u201d. Interpreter component  is part of computer program product \/\/. As indicated in the boxes of interpreters , themes are associated with interpreter component . For convenience, the term, \u201ccomponent\u201d is sometimes omitted. In case that interpreter  serves device  (wireless, portable phone), theme  is a micro-browser theme. In case that interpreter  serves device  (conventional telephone), theme  is voice theme -.","The following description explains an \u201capplication system\u201d \/\/ as a tool to create applications that share particular user-interface model . Application system \/\/ comprises: an application specification language  (AS-language), workbench component  (cf. ), and interpreter component  (cf. ).","AS-language  defines the language elements required to express application  in user-interface model .","As mentioned above, the developer uses workbench component  to create and assemble instances of elements of AS-language  to form the application specification. Interpreter component  executes the application specification and presents the user-interface on the computing device.","A preferred embodiment of the syntax of the AS-language is the \u201cExtensible Markup Language\u201d (XML). The use of the term \u201cXML\u201d in this context refers to the World Wide Web Consortium specification of XML, as well as encoding schemes for XML into binary or other forms that preserve the XML structure (cf.  encoding -).","Another preferred embodiment of the syntax is a binary encoding (-) of XML, \u201cWAP binary XML encoding\u201d. For defining the AS-language, preferably, the meta-language is \u201cXML schema\u201d.",{"@attributes":{"id":"p-0172","num":"0178"},"figref":"FIGS. 6-14","b":["250","250","250"]},"Optionally, customization of workbench component  may be required to realize document validity criteria not adequately expressed by the meta-language (in which the AS-language is defined).",{"@attributes":{"id":"p-0174","num":"0180"},"figref":"FIG. 6","b":["250","250","251","252","253","254","251","230","255","251","901","902","903"]},"Typed document component  uses the AS-language definition: to understand the structure of application specification document  and to determine valid edit operations on each element and attribute.","Typed document component  provides application programming interfaces (API, not shown in ): to load AS-language , to create, to load and to save (in storage ) application specification document , and to provide information on valid edit operations to other components to control their operation.","Any changes to application specification document  are broadcasted to all other components. The other components update their internal state and displays accordingly.","Component  contains a reference to a distinguished element in the application specification document  to designate this distinguished element as \u201ccurrent element\u201d (\u201ccurrent element reference\u201d).","Tree-viewer component  and pre-viewer components  browse the elements of document . Components ,  update current element references by calling a document cursor API. Document cursor component  broadcasts the updated current element reference to all components , , . Components , ,  update their internal state and screen displays accordingly.","Tree-viewer component  displays document typed document  in a hierarchy that mirrors the actual structure of document . Tree-viewer component  has context-sensitive menus to delete elements from document  or to insert elements into document .","Element attribute panel component  displays the attributes that are defined for the current element. Panel component  displays the attributes according to their types and according to meta-attributes.","Pre-viewer components  present application specification document  in a form that approximates the presentations of document  by interpreter component  (cf. ). In other words, each pre-viewer component  implements a different concrete presentation (i.e. different theme ). Examples for presentations of pre-viewer component  for first, second, and third types of computing devices are illustrated in ,  and , respectively. The developer can open each pre-viewer component  separately through separate user-interfaces (not shown) for each pre-viewer component . Preferably, these separate user-interfaces are part of workbench component .","Each open pre-viewer component  shows (makes visible and highlights) these elements that correspond to user-interface elements. When the developer selects a representation of a user-interface element, open pre-viewer component  causes that element to become the current element. As a result, tree-viewers  and pre-viewer components  update their displays accordingly.",{"@attributes":{"id":"p-0184","num":"0190"},"figref":"FIG. 7","b":["950","900","250"]},"In the example of , tree-viewer component  is on the left side, and element attribute panel component  is on the right side. Component  shows graphical user interface elements like (cf. ) data-model component , middleware-model component , tiles , and tile assemblies  (here called \u201ctile sets\u201d).",{"@attributes":{"id":"p-0186","num":"0192"},"figref":"FIGS. 8","b":["9","10","255","250","255","255","953"]},{"@attributes":{"id":"p-0187","num":"0193"},"figref":["FIG. 8","FIG. 24"],"b":["255","1","903","1","360","362","370","361","371","360","370"]},{"@attributes":{"id":"p-0188","num":"0194"},"figref":"FIG. 9","b":["255","2","903","2"]},{"@attributes":{"id":"p-0189","num":"0195"},"figref":"FIG. 10","b":["255","3","903","3"]},{"@attributes":{"id":"p-0190","num":"0196"},"figref":"FIG. 11","b":["250","255","259","259","259","1","259","2"]},"In the example of , the developer has selected the element \u201cListViewTile\u201d (illustrated by hatching) and has specified the insertion of a child element (-).",{"@attributes":{"id":"p-0192","num":"0198"},"figref":["FIG. 12","FIG. 12","FIG. 11","FIG. 21"],"b":["250","250","255","299"]},"Workbench component  responds with a dialog box showing list  of the candidate elements at this location of the document; the candidate elements are determined automatically by inspection of the AS-language .","To set the value of an attribute of a particular element, the developer selects the element in tree-viewer  (cf. , ). Workbench component  determines the list of all possible attributes for this element by inspection of AS-Language , and displays them in element attribute panel  of workbench component .","Information on the type and other meta-attributes of each attribute determines visual appearance of the attribute in attribute panel  (cf. ). An attribute defined as an \u201cenumerated type\u201d is displayed as a dropdown list containing the set of enumerated values.","Using workbench component , the developer creates application specification document . For \u201cprototyping\u201d, user-interface  is created first (enhances end-user understanding and feedback on the design). Data-model component  is created later. In another preferred embodiment, when data-model component  is known a priori, its portion of the document is created first, followed by the creation of the User-interface portion.","The prototyping embodiment is enabled by pre-viewer components , which are capable of approximating the presentation of the application on interpreter component . Pre-viewer component  may effect this simulation with documents that are incomplete and therefore not capable of execution by interpreter component  itself. Since each pre-viewer  realizes the simulation of a particular layout Theme, and since pre-viewers  can be displayed simultaneously, the developer may confirm the presentations of the application on each of devices \/\/ at the same time. Since the architecture of workbench component  also provides that any changes to the application document are broadcast to all components, the confirmation of the presentation on each device \/\/ can be done while the application is being created or modified.","After completing the creation of the application specification document, the developer uses the validation function of workbench component  to ensure that interpreter component  can correctly execute the document. The validation function is also driven by definition of AS-language .","Finally the document is transformed and encoded (see ), and then stored ready for use by interpreter component .","The following describes a preferred embodiment of the application system \/\/ for devices  and  that are mobile devices. In other words, system \/\/ is a mobile data application framework (MDF) system. For convenience, the acronym \u201cMDF\u201d is added to reference numbers.","Application specification language (AS-language) -MDF corresponds to user-interface model .","Table 1 cites an example for AS-language -MDF. AS-language -MDF is an XML-compliant language, in other words, language definition document -MDF is an \u201cXML schema\u201d. Workbench component -MDF provides context-sensitive guidance to the developer.","\u201cCandidate elements\u201d are illustrated in  in popup menu with list . The menu responds to an \u201cinsert node\u201d command by the developer (cf. ). Workbench component  determines a list of candidates by inspecting the language definition document -MDF.",{"@attributes":{"id":"p-0204","num":"0210"},"figref":"FIGS. 13-14","b":["250","254","253"]},{"@attributes":{"id":"p-0205","num":"0211"},"figref":"FIG. 15","b":["200","200","202","206","210","212","214","216","218","220","208","215","200"]},"Sub-system - for \u201cXML Services\u201d is of particular importance. Sub-system - provides access to the application specification. For convenience of explanation, sub-system - is illustrated separately (left side) as graphical user-interface (GUI) definition  (\u201cGUI\u201d), data-model component  (\u201cDATA-MODEL\u201d), and middleware-model components  (\u201cMIDDLEWARE\u201d).","Device native user-interface services  (\u201cDEVICE SERVICES\u201d, right side) are user-interface services provided by a particular computing device, these are, for example: window management (for device with graphical display), and speech synthesis (for device with voice interface).","Since services  can be provided by a person of skill in the art without further explanation herein, details for services  are not illustrated.","The other components of interpreter component  in  are collectively referred to as \u201cruntime sub-system\u201d \/\/\/\/\/, cf. dashed frame, these are: tile handler component  (\u201cTILE HANDLER\u201d), tile assembly and navigation engine component  (\u201cTANE\u201d), theme-handler component  (\u201cTHEME-HANDLER\u201d), data-event services component  (\u201cDATA-EVENT\u201d), synchronization services component  (\u201cSYNCHRONIZATION\u201d), and data store services component  (\u201cSTORE\u201d).","Tile handler component  implements the collection of tile types and the collection of any user-interface elements that a tile may contain. Component  creates or destroys tile instances and any user-interface elements in the tile instances. Component  is controlled by component .","Tile assembly and navigation engine component  (\u201cTANE component\u201d) implements the user-interface model . When component  creates an assembly, component  creates inter-tile relations by setting up a data-event propagation network. The Network is formed by user-interface elements and data cursors.","Theme-handler component  maps user-interface model  and TANE component  to a concrete user-interface. Theme-handler component  acts as a bridge between TANE component  on one side and the user on the other side. When requested by the theme, theme-handler component  shows or hides individual tiles (or equivalents in non-graphical user-interfaces).","Data-event services component  ties individual tiles, user-interface elements, and synchronization services together. Component  has data cursor objects to implement the notion of a sequence of objects and of a distinguished position in the sequence. The distinguished position is referred to as \u201ccursor\u201d; and the object at the cursor is referred to as the \u201ccurrent object\u201d. Objects in data-event services component  propagate events that relate to the data-store among the data cursors and user-interface elements.","Synchronization services component  is responsible for the synchronization of the data-stores between device \/\/ and server computer  (remote server). Component  intercepts changes to the data-store originating from tile handler component , records and assembles them into messages that are eventually sent to server computer . In the other direction, synchronization services component  receives changes from server computer  in the form of messages from the server requesting the changes, and applies them to data store component ; the receiving action is completed by issuing data-events into data-event services component  corresponding to the changes.","Data store services component  is the data-storage of computing device \/\/. Preferably, component  is a relational database management system. For example, component  is a database commercially available in the Microsoft Windows CE operating system.","Application document services component (not illustrated in ) is responsible for reading interpreter-readable document  from storage  (encoded version of application specification document ) and presents documents  to the other components.",{"@attributes":{"id":"p-0217","num":"0223"},"figref":["FIG. 16","FIG. 16","FIG. 16","FIG. 15","FIG. 15"],"b":["215","200","210","212","214","216","218","220","1","2","219","215","3","4","217","217","8","921","922","901","902","903","7","210","212","214","216","218","220","200"]},"In application system \/\/, interpreter component  is optionally specialized for special environments or system configurations. In the following, first and second embodiment of interpreter component  are explained.","In both embodiments, the server-side interpreter component is implemented on mainly on server computer  and the presentation layer is implemented on computing device \/\/. Synchronization services component  (cf. ) is not required.","In the first embodiment, device  is the portable phone with micro-browser. Theme  (cf. ) is a micro-browser theme (cf. -). In cooperation with interpreter component , the micro-browser of device  realizes a wireless markup language (WAP) presentation. Details are explained in connection with .","In the second embodiment, device  is the conventional phone. Theme  (cf. ) is a voice theme (cf. -) in user-interface  that supports voice-recognition and voice-synthesis. The presentation layer here is the audio input and audio output on the telephone.",{"@attributes":{"id":"p-0222","num":"0228"},"figref":"FIGS. 17-19","b":["903","1","903","2","903","3","903","1","903","2","903","3","903","1","903","2","903","3"]},{"@attributes":{"id":"p-0223","num":"0229"},"figref":["FIG. 17","FIG. 17","FIG. 17A","FIG. 17B","FIG. 17C","FIG. 17D"],"b":["953","1","903","1","901","1","345"]},"As in , titles of the top-level tile set assemblies (e.g., \u2018customers\u2019, \u2018notifications\u2019, \u2018installations\u2019) are displayed as navigation bar  on the upper-left.","As in , navigation stack  is exposed as a list on the lower-left (\u2018customers\u2019). Clicking on an entry in stack  removes from the stack all entries deeper than the selected entry. Additionally, a backward-pointing arrow (similar to arrow  in ) removes the element at the top of stack .","As in  and , list view tiles (and frame tile textbox elements, not shown) optionally have associated hyperlinks . Clicking on hyperlink  (e.g., \u2018scratches one the surface\u2019) creates a new tile set (e.g., notification) that is added to the top of navigation stack  (). The old current tile set is hidden and a new current tile set is displayed. Main tile  of the current tile set is shown immediately, for example, in the middle window right to navigation bar . As in , sub tiles  are shown in a tab strip at the right.",{"@attributes":{"id":"p-0227","num":"0233"},"figref":["FIG. 18","FIG. 18","FIG. 17","FIG. 18A"],"b":["953","2","903","2","903","2","903","1","401","903","2","406"]},"A navigation stack is not exposed as a visible control although as in handheld personal computer - (Half-VGA) it can be manipulated via the back arrow  on toolbar . The main tile of the current tile assembly is shown as the leftmost tab  in tab-strip , and sub-tiles  (\u2018detail\u2019, \u2018equipment\u2019, etc.) follow to the right.",{"@attributes":{"id":"p-0229","num":"0235"},"figref":["FIG. 19","FIG. 19"],"b":["953","3","953","3","903","3"]},"The third type moves away from using tab-strip  to organize the tiles, and instead displays the tiles simultaneously in one or more fixed locations - (or \u201cslots\u201d) on the screen.","In detail, the mapping of the user-interface model to third type theme - is similar to that of first type theme (-, half-VGA). The screen is split into 4 areas - (slots).","An additional attribute, the target-frame attribute, is defined on the main tile and sub tile of each tile assembly and specifies which slots , ,  or  to occupy on screen -. A single tile can occupy one or more slots.","The target frame attribute can be empty; in that case, the tiles are shown in minimized form to be maximized on request by the user.","The number of tiles per slot as well as the number of slots per tile may vary. For example, the columns of a \u2018list view\u2019 tile have an associated importance attribute that is used to determine which columns to suppress in order to fit the available space. The illustration of  shows the upper tile \u2018customer list\u2019  reduced to half width (cf. customer list  in , slot  only) in response to co-opting of slot  allocation by a tile \u2018customer detail\u2019 .","FIG. ABC is a series of views of a simulated display of wireless telephone  with micro-browser illustrating the server-side interpreter components WAP-theme -. The view appear as in pre-viewer  that presents simulation \u2032 of display  in device . Preferably, interpreter component  is located on a server computer (server-side interpreter -, cf. ).",{"@attributes":{"id":"p-0236","num":"0242"},"figref":["FIG. 21","FIG. 21","FIG. 21"],"b":["295","296","297","360","370","295","360","370","360","370","296","360","370","360","370"]},"Pattern  indicates aurally rendering objects  and  on by a speaker (part of user-interface ), wherein objects  and  are consecutively presented.","Hierarchy pattern  is optionally provided. In the example of , object  is the main object (\u201cM\u201d) and object  is the sub-coordinate object (\u201cS\u201d). Plain lines with the acronyms \u201cM\u201d and \u201cS\u201d indicate this.",{"@attributes":{"id":"p-0239","num":"0245"},"figref":["FIG. 22","FIGS. 23","FIGS. 23"],"b":["500","360","22","370","24","963","903","903","953","1","953","2","500"],"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":[{"@attributes":{"id":"ul0002-0001","num":"0246"},"b":["540","240","245","903"]},{"@attributes":{"id":"ul0002-0002","num":"0247"},"b":["550","245","295","296"]},{"@attributes":{"id":"ul0002-0003","num":"0248"},"b":["560","360","370"]}]}},"In step receiving , application specification document  is received with statement  having an indication to render first object  and second object  in assembly \/. In step interpreting , presentation pattern \/ for assembly \/ is identified from predefined first presentation pattern  and second presentation pattern  according to the type -\/- of the device  (i.e. pattern  for type -, pattern  for type -). In step rendering , assembly \/ of first object  and second object  is rendered on user-interface  according to presentation pattern \/ identified in step interpreting .","As indicated by dashed frame , steps ,  and  are performed by interpreter component  in device \/\/. Optional further steps (preferably, performed by computer ) are explained in the following.","Preferably, prior to step receiving step , further steps are:\n\n","Preferably, in step , rendering, first object  and second object  are rendered according to presentation pattern \/ and to predefined hierarchy pattern  (cf. ).","Preferably, in rendering step , first object  and second object  are rendered not only according to presentation pattern \/, but also according to predefined hierarchy pattern .","Preferably, specifying step  comprises:\n\n","Preferably, method  further comprises: storing  predefined presentation patterns \/ by interpreter  (cf. themes  in ). Step  is performed prior to step , for example, after step . Preferably, presentation pattern \/ is a display pattern, wherein the objects are rendered to user-interface  being screen , and wherein presentation pattern \/ is identified according to the size (e.g., width) of screen . Optionally, in rendering step , presentation pattern  is an audio pattern.",{"@attributes":{"id":"p-0247","num":"0261"},"figref":"FIGS. 23 and 24","b":["500","245","240","200","903","200","903","1","200","1","903","2","200","2","200","200","214"]},{"@attributes":{"id":"p-0248","num":"0262"},"figref":"FIGS. 23 and 24","b":["953","903","903","1","903","2","953","1","953","2"]},"Both screens - and - each render first object  and second object  in assembly \/. Objects  and  each comprise title fields  and  and content fields  and . According to the invention, location and shape of objects \/ are modified; the content of content fields \/ is determined by the application. In other words, what happens inside content fields \/ (e.g., display of business data) is independent from what happens outside.","For convenience of further explanation, Cartesian coordinate system (X, Y) is illustrated with the origin in the left bottom.","For simplicity of further explanation, screens - and - are distinguished by the screen widths only (X-dimension): screen - in  is \u201clarge\u201d, and screen - in  is \u201csmall\u201d. The width of content fields \/ is equal for both screens. The Y-dimension is also important and considered in the way as the X-dimension.",{"@attributes":{"id":"p-0252","num":"0266"},"figref":["FIG. 23","FIG. 17"],"b":["953","1","903","1","953","1","953","1","360","361","362","370","371","372","953","1","361","371","362","372","953","1","360","370"]},{"@attributes":{"id":"p-0253","num":"0267"},"figref":["FIG. 24","FIG. 18","FIG. 23"],"b":["953","2","903","2","953","2","953","2","360","361","362","370","371","372","362","372","362","372","361","371","953","2","361","371","362","372"]},"In the prior art, the application specification document (that causes the interpreter in each device to render the objects) needs to state location data for each object. For example, for device -, a prior art application specification document comprises: \u201cdisplay (object , object , attribute , attribute )\u201d, wherein \u201cdisplay\u201d indicates to render an object on the screen, \u201cobject \u201d stands for object , \u201cobject \u201d stands for object , \u201cattribute \u201d stands for a layout attribute with (X, Y) coordinates of object  on screen -, \u201cattribute \u201d stands for the layout attribute with (X, Y) coordinates of object  on screen -.","Since the coordinates are different for each object, objects  and  appear adjacent. In other words, the theme \u201cadjacent\u201d is contained in the rendering statement implicitly.","Similar, for example, for device -, a prior art application specification document comprises a similar rendering statement, but with different layout attributes. The (X, Y) coordinates are indicates such that object  overlaps object . The rendering statement indicates the OVERLAP theme implicitly.","It is an advantage of the present invention that the theme must not longer be included into application specification document . Application specification document  states the following rendering statement  (cf. ):\n\n","In the example, statement  has 4 portions: \u201cdisplay\u201d indicates to visually render objects on a screen; \u201cobject \u201d stands for object  to be rendered; \u201cobject \u201d stands for object  to be rendered; and \u201cassembly\u201d indicates that objects  and  are rendered in combination.","Direct or indirect inclusion of a theme (e.g., ADJACENT or OVERLAP) is not required by the invention. Interpreter  for device - (cf. ) reads rendering statement  and identifies the presentation pattern (e.g., theme-handler ) by comparing screen types. Depending on the screen width, the patterns are identified as ADJACENT or OVERLAP.",{"@attributes":{"id":"p-0260","num":"0275"},"figref":"FIGS. 23 and 24","b":["360","370","360","370","360","370","245","240","245"]},"(245)",{"@attributes":{"id":"p-0262","num":"0277"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(1)","< Tiles >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(2)","< FrameTile idTile = \u201cSN_General\u201d title = >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(3)","< TextBox id = \u201cc:00000H \u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(4)","< FrameTile idTile = \u201cCust_General\u201d title = >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(5)","< TextBox id = \u201cc:11000H \u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(6)","< TileSet title = \u201cNotification\u201d >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(7)","< MainTile refTile = \u201cSN_General\u201d >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(8)","< SubTile refTile = \u201cCust_General\u201d >"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":["(1) Object definitions follow.","(2) Object  is a rectangular tile identified by \u201cSN_General\u201d","(3) Object  has content field  that displays a first text stored at a first address.","(4) Object  is a rectangular tile identified by \u201cCust_General\u201d.","(5) Object  has content field  that displays a second text stored at a second address.","(6) Assembly definitions follow; in the second example, an assembly is referred to as \u201ctile set\u201d. The assembly belongs to an assembly type \u201cnotification\u201d with hierarchical object rendering.","(7) Object  is the \u201cmain tile\u201d.","(8) Object  is the \u201csub tile\u201d"]}},"Returning back to , tiles  and  are rendered together as an assembly. Content fields  and  (i.e. texts or other attributes) are rendered with respect to the (X, Y) position of tiles  and , respectively. Content field  is rendered without consideration of content field , and vice versa.","Depending on the presentation pattern und depending on the hierarchy, tile  (main) is rendered on the left side () or in the foreground (), and tile  (sub) is rendered on the right side () or in the background ().","In the following, it will be explained how further different devices present the same application. The devices are a conventional telephone (cf.  in , cf. ) and device  with display  (cf. ).",{"@attributes":{"id":"p-0266","num":"0289"},"figref":["FIG. 25","FIG. 25"],"b":["902","200","900","902","345"],"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["(1) Interpreter  starts an interactive voice synthesis\/recognition system. The synthesis part of the system converts the following text-object (e.g., from data store services component ) into voice:\n    \n    ","(2) The user selects \u2018contacts\u2019, preferably, by speaking this word.","(3) As confirmation, the synthesis part converts the following further text-object into voice: \u2018The selected item is Contacts\u2019.","(4) The user instructs by \u2018search items with F\u2019, preferably, by speaking this phrase.","(5) The synthesis part converts the following further text-object into voice: \u2018There is one item. Item  . . . of . . . . The overview of the selected contact is as follows: The contact name is . . . . The email address is . . . . What would you like to do now? You can obtain information about the contact history for this contact. You can also obtain more information about this contact. Alternatively, you can go back to the main menu, or ask for repeating what you just heard.\u2019","(6) The user instructs by \u2018check the contact detail\u2019, preferably, by speaking this phrase."]}},{"@attributes":{"id":"p-0267","num":"0297"},"figref":"FIG. 26","b":["903","953"],"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["(1) Interpreter  starts similar as with the telephone. The presentation pattern for this device is a tile stack theme (similar to \/ in ). While the data is read, preferably, from the same application, rendering is different. Rendered is a first tile  with content \u2018customers\u2019, a second tile  with content \u2018contacts\u2019 and a third tile  with content \u2018activities\u2019. The assembly of this tiles is a navigation bar.","(2) The user selects \u2018contacts\u2019, preferably, by double-clicking the tile \u2018contacts\u2019 (symbolized by cursor arrow in  pointing to ).","(3) As confirmation, device  highlights the second tile \u2018contacts\u2019. In other words, a highlight attribute is set so that the color of the second tile is different from the color of the first and third tiles. In , the color change is symbolized by hatching tile .","(4) Device  presents in graphic form essentially the same information as above (name, city, email-address, further options)","(5) The user selects \u2018contact . . . .\u2019"]}},{"@attributes":{"id":"p-0268","num":"0303"},"figref":"FIGS. 27 and 28","b":["700","200","250","260","700"]},"First step  is to define user-interface model  and comprises the following sub-steps:\n\n","Third step  is to customize workbench component  and comprises to create event handlers that identify constraints on the validity of application specification document . Events that can not be represented by the meta-language are not valid.","Fourth step  is to define layout themes  for computing device \/\/. For each computing device \/\/; fourth step  comprises the following sub-steps:\n\n","Fifth step  is to realize user-interface model  in interpreter component . Fifth step  comprises the following sub-steps:\n\n","Sixth step  is to realize themes  in interpreter component  and comprises for each theme  the sub-steps of:\n\n","The present invention is now summarized as a computer-program product  (i.e., interpreter ) that resides in computing device  (or ,) of either first type - or second type -. The computer-program product  is provided for interpreting application specification document  and causing processor  of computing device  (cf. ) to render first object  and second object  in combination (i.e. assembly, cf. ) to user-interface  (cf. ) of device . The computer-program product has a plurality of instructions to control processor  and is characterized in the following:","A first sub-plurality of instructions form theme-handler  to evaluate statement  of the application specification document  (cf. ), statement  instructing processor  to render objects  and  in an assembly \/ according to device type specific presentation pattern \/ for assembly ,  that is identified from predefined first and second visual presentation patterns \/. A second sub-plurality of instructions form navigation engine  to select one of objects  and  for interaction with a user to create inter-object relations with user-interface elements and data cursors.","Table 1 is and example for a MDF-application specification language",{"@attributes":{"id":"p-0277","num":"0327"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["(k)","Table 1 - Language Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["(1)","<!-- XML Schema Extensibility for MDF schemas -->"]},{"entry":["(2)",". . . <I-- Attribute to support subtyping of"]},{"entry":[{},"document idrefs. Usage in schema:"]},{"entry":["(3)","<AttnbuteType dt:type=\u201cidref\u201d ext:refType=\u201cxxx\u201d"]},{"entry":[{},"ext:refScope=\u201cyyy\u201d>"]},{"entry":["(4)","where xxx is\/are the name(s) of tag(s) to which"]},{"entry":[{},"the attribute can refer, and yyy is\/are the name(s)"]},{"entry":[{},"of the tag(s) which are the scope for the reference."]},{"entry":[{},"Ids will only be matched if outside the innermost"]},{"entry":[{},"containing element with nodename from the set of tags"]},{"entry":[{},"yyy."]},{"entry":["(5)","The document processing application is"]},{"entry":[{},"responsible for enforcing the subtyping."]},{"entry":["(6)","<AttributeType name=refType\u201d dt:type=\u201cstrlng\u201d\/>"]},{"entry":[{},"<AttributeType name=ref Scope dt:type=\u201cstring\u201d\/> <I-"]},{"entry":["(7)","Support layout displayUnit: attributed to"]},{"entry":[{},"containers that can be shown or hidden mergable ="]},{"entry":[{},"could be combined with parent Elements unmergable ="]},{"entry":[{},"never combined with parent elements"]},{"entry":["(8)","<AttributeType name=\u201cdisplayUnit\u201d"]},{"entry":[{},"dt:type=\u201cenumeration dt:values=\u201cunmergable"]},{"entry":[{},"mergable\u201d\/>"]},{"entry":["(9)","<!-- Support for fragmentation -->"]},{"entry":[{},"<AttributeType name=\u201cfragment\u201d dt:type=\u201cboolean\u201d\/>"]},{"entry":["(10)","<I-- Support for translation --> <AttributeType"]},{"entry":[{},"name=\u201ctranslatable\u201d dt:type=\u201cboolean\u201d\/>"]},{"entry":["(11)","<!-- Descriptive text --> <AttributeType"]},{"entry":[{},"name=\u201cdescription\u201d dt:type=\u201cstring\u201d\/>"]},{"entry":["(12)","<!-- Support for allowing identification of"]},{"entry":[{},"layout-related attributes and tags --> <AttributeType"]},{"entry":[{},"name=\u201clayout\u201d dt:type=enumeration dt:values=\u201call VGA"]},{"entry":[{},"HVGA PPC\u201d\/>"]},{"entry":["(13)","<AttributeType name=\u201clength\u201d dt:type=\u201cint\u201d\/>"]},{"entry":[{},"<AttributeType name=minLength dt:type=\u201cint\u201d\/>"]},{"entry":[{},"<AttributeType name=\u201cmaxLength\u201d dt:type=\u201cint\u201d\/> <I--"]},{"entry":[{},"Next extension-attribute, if present, overrides"]},{"entry":[{},"dt:type --> <AttributeType name=\u201ctype\u201d"]},{"entry":[{},"dt:type=\u201cenumeration\u201d dt:values=\u201cbin.hex bin.base64"]},{"entry":[{},"filename Icon bitmap!>"]},{"entry":["(14)","<!-- Elements to support data-binding. Usage in"]},{"entry":[{},"schema:"]},{"entry":["(15)","<ElementType name=aaa . . . . >"]},{"entry":["(16)","SupportsType fieldType=\u201cxxx\u201d\/>"]},{"entry":["(17)","SupportsType . . . J>. . ."]},{"entry":["(18)","indicates that aaa can be bound to fields with"]},{"entry":[{},"type xxx, etc."]},{"entry":["(19)","<AttributeType name=databinding"]},{"entry":[{},"dt:type=\u201cenumeration\u201d dt:values=\u201ctable field!>"]},{"entry":[{},"<AttributeType name=\u201ccontrol\u201d dt:type=\u201cboolean\u201d\/>"]},{"entry":[{},"<AttributeType name=\u201cfieldType\u201d dt:type=\u201cenumeration\u201d"]},{"entry":["(20)","dt:values=\u201cstring number integer float boolean"]},{"entry":[{},"date time datetime enumeration\/>"]},{"entry":["(21)","<ElementType name=\u201cSupportsType\u201d> <attribute"]},{"entry":[{},"type=\u201cfleldType\u201d required=yes\/> <\/ElementType>"]},{"entry":[{},"<\/Schema>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Table 2 is a simple Service Management demonstration program, defined with the MDF application language. For simplicity, table 2 has been abridged. For example, where \u201cAttributeType\u201d (or other statements) are repeated in consecutive line, the first 2 lines are kept and the other lines are replaced by ellipsis.",{"@attributes":{"id":"p-0279","num":"0329"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["(k)","Table 2 - Application Specification in XML"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["(1)","<I-- MDF Application Schema, $Header$ -->"]},{"entry":[{},". . . <Schema xmlns=\u201cum:schemas-microsoft-com:xml-data\u201d"]},{"entry":[{},"xmlns:dt=\u201cum:schemas-microsoft-com datatypes\u201d"]},{"entry":[{},"xmlns:ext=\u201cx-schema:SchemaExtension.xml\u201d . . ."]},{"entry":["(2)","<ElementType name=~ldMap"]},{"entry":[{},"ext:description=\u201cPlaceholder WBXML Id-Offset map\u201d> . . ."]},{"entry":[{},"<AttributeType name=pointers~ dt:type=string\/>"]},{"entry":[{},". . . <attribute type=pointers required=yes\/>"]},{"entry":[{},"<\/ElementType> . . ."]},{"entry":["(3)","<AttributeType name=\u201cconstraintType"]},{"entry":[{},"dt:type=\u201cenumeration\u201d dt:values=\u201cvalldity foo bar\u201d!>"]},{"entry":[{},"<ElementType name=\u201cConstraint\u201d content=\u201celtanly\u201d>"]},{"entry":[{},"<attribute . . ."]},{"entry":["(4)","<AttributeType name=\u201cfunctionName\u201d"]},{"entry":[{},"dt:type=\u201cstring\u201d\/> <AttributeType name=\u201cevent\u201d"]},{"entry":[{},"dt:type=\u201cstring\u201d\/>"]},{"entry":[{},"<\/ElementType> <ElementType name=\u201cFunction\u201d> . . ."]},{"entry":["(5)","<ElementType name=\u201cFunctioncall\u201d> . . ."]},{"entry":[{},"<attribute type=\u201cfunctionName\u201d required=\u201cyes\u201d\/> . . ."]},{"entry":["(6)","<element type=\u201cArgument\u201d minOccurs=\u201c1 I>"]},{"entry":[{},"<\/ElementType> . . ."]},{"entry":["(7)","dt:values=\u201cmandatory high normal low\u201d!> . . ."]},{"entry":[{},"<I-- Bitmap and Icon support --> . . ."]},{"entry":["(8)","<!-- new: Sorting -->"]},{"entry":[{},". . . <AttributeType name=\u201corder\u201d dt:type=\u201cenumeration\u201d"]},{"entry":[{},"dt:values=\u201cascending descending\u201d!>"]},{"entry":[{},"<ElementType . . .name=\u201cSortKey\u201d content=\u201cempty\u201d>"]},{"entry":[{},"<attribute type=\u201cref Field\u201d required=\u201cyes\u201d!>"]},{"entry":[{},"<attribute type=\u201corder\u201d required=\u201cyes\u201d!>"]},{"entry":[{},"<!ElementType> . . ."]},{"entry":[{},"<ElementType name=\u201cSearch\u201d content=\u201celtOnly\u201d>"]},{"entry":[{},"<ext:databindlng=\u201cfield\u201d!>"]},{"entry":["(9)","<I-- START DataModel schema --> . . ."]},{"entry":["(10)","<ElementType name=\u201cConstantSelector\u201d"]},{"entry":[{},"content=\u201cempty\u201d> <attribute type=\u201cref Field\u201d"]},{"entry":[{},"required=\u201cyes\u201d!> <attribute type=\u201cconstant\u201d"]},{"entry":[{},"requlred=\u201cyes\u201d!> <!ElementType> . . ."]},{"entry":["(11)","<ElementType name=\u201cParameterSelector\u201d"]},{"entry":[{},"content=\u201cempty\u201d>"]},{"entry":[{},"<attribute type=\u201cref Field\u201d required=\u201cyes\u201d!> . . ."]},{"entry":["(12)","<!group>"]},{"entry":[{},"<!ElementType>"]},{"entry":[{},"<I-- Model the relationships directly --> . . ."]},{"entry":["(13)","<ElementType name=Relation\u201d content=\u201celtOnly\u201d>"]},{"entry":[{},"<AttributeType name=\u201ctablel\u201d dt:type=\u201cidref\u201d"]},{"entry":[{},"ext:refType=\u201cTable\u201d!> <AttributeType name=\u201ctable2"]},{"entry":[{},"dt:type=\u201cidref\u201d ext:refType=\u201cTable\u201d!> . . ."]},{"entry":["(14)","<AttributeType name=\u201cbaseTable\u201d dt:type=\u201cidref\u201d"]},{"entry":[{},"ext:refType=\u201cTable\u201d!>"]},{"entry":[{},"<AttributeType name=\u201cbaseField\u201d dt:type=\u201cidref\u201d"]},{"entry":[{},"ext:refType=\u201cField\u201d!> . . ."]},{"entry":[{},"type=\u201cbaseTable\u201d required=\u201cyes\u201d!> <attribute"]},{"entry":[{},"type=\u201cbaseField\u201d required=\u201cyesV> <attribute"]},{"entry":[{},"type=\u201creferringTable\u201d required=\u201cyes\u201d!> <attribute"]},{"entry":[{},"type=\u201creferringField\u201d requlred=\u201cyesV> <!ElementType>"]},{"entry":[{},". . ."]},{"entry":["(15","<AttributeType name=\u201clink\u201d dt:type=\u201cidref\u201d"]},{"entry":[{},"ext:refType=\u201cConstrainLForeignKeyV> . . ."]},{"entry":["(16)","<l[CDATA[ One way of handling Complex fields:"]},{"entry":[{},"<Complex label=\u201cAddress\u201d>"]},{"entry":[{},"<Group compress=\u201cyes\u201d separator=\u201c!n\u201d> <ComplexSub"]},{"entry":[{},"datafleld=\u201cAddr1\u201d!> <Break!> <ComplexSub"]},{"entry":[{},"datafield=\u201cAddr2\u201d!> <Break!> <Group comp ress= yes\u201d"]},{"entry":[{},"separator=\u201c,\u201d>"]},{"entry":[{},"<ComplexSub datafleld=\u201cCity\u201d!> <ComplexSub"]},{"entry":[{},"datafleld=\u201cRegion\u201d!> . . ."]},{"entry":[{},"<!Group> <!Group> <!Complex>"]},{"entry":[{},". . . I]> <AttributeType name=\u201cidTile\u201d dt:type=\u201cid\u201d!>"]},{"entry":[{},"<AttributeType name=\u201ctext\u201d dttypeN\u201cstring\u201d!>"]},{"entry":[{},"<AttributeType name=\u201crefTile\u201d dt:type=\u201cidref\u201d"]},{"entry":[{},"ext:refType= Tile\u201d!>"]},{"entry":[{},"<AttributeType name=\u201cdatafield\u201d dt:type=\u201cidref\u201d"]},{"entry":[{},"ext:refType=\u201cField\u201d ext:databindin~j=1ield\u201d!>an\u201d!>"]},{"entry":[{},". . ."]},{"entry":["(17)","<I-- For element Row -->"]},{"entry":[{},". . . <AttributeType name=\u201ccol\u201d dt:type=\u201cint\u201d"]},{"entry":[{},"ext:layout=\u201call\u201d!>"]},{"entry":[{},"<AttributeType name=\u201ccolspan\u201d dt:type=\u201cint\u201d"]},{"entry":[{},"ext:layout=\u201call\u201d!>"]},{"entry":[{},"<AttributeType name=\u201callgn\u201d dt:type=\u201cenumeration\u201d"]},{"entry":[{},"dt:values=\u201cIeft center right\u201d ext:layout=\u201caIl\u201d!>"]},{"entry":[{},"<AttributeType name=\u201chspace\u201d dt:type=\u201cint\u201d"]},{"entry":[{},"ext:layout=\u201calI\u201d!> . . ."]},{"entry":["(18)","<I-- For element GridPage --> <AttributeType"]},{"entry":[{},"name=\u201cwrap\u201d dt:type=\u201cboolean\u201d ext:layout=\u201caIl\u201d!>"]},{"entry":[{},"<AttributeType name=\u201ccols\u201d dt:type=\u201cint\u201d"]},{"entry":[{},"ext:layout=\u201call\u201d!> . . ."]},{"entry":["(19)","<I-- Code --> <ElementType name=\u201cEventHandler"]},{"entry":[{},"content=\u201celtOnly\u201d>"]},{"entry":[{},"<attribute type=\u201cevent\u201d!> <group order= one\u201d>"]},{"entry":[{},"<element type=\u201clnlineCode\u201d!> <element"]},{"entry":[{},"type=\u201cFunctionCall\u201d!> 4group> <!ElementType> . . ."]},{"entry":["(20)","<I-- Tilesets, Tiles, etc. -->"]},{"entry":[{},"<AttributeType name=\u201ctargetFrame\u201d"]},{"entry":[{},"dt:type=\u201cenumeration\u201d dt:values=\u201c1 2 12 34 34 1234\u201d!>"]},{"entry":[{},"<AttributeType name~dlsP~yGrouP\u201d dt:type=\u201clnt\u201d!> . . ."]},{"entry":["(21)","<attribute type=\u201ctitle\u201d required=\u201cyes\u201d!>"]},{"entry":[{},"<attribute type=\u201cid\u201d required=\u201cno\u201d!> <attribute"]},{"entry":[{},"type=\u201crefTile\u201d required=\u201cyes\u201d!> . . ."]},{"entry":["(22)","<IElementType>"]},{"entry":[{},"<ElementType name=\u201cMainTlIe\u201d>"]},{"entry":[{},"<attribute type=\u201ctitle\u201d requlred=\u201cyes\u201d!> . . ."]},{"entry":["(23)","<!-- Controls --> <1~~ Next are advisory; may be"]},{"entry":[{},"overriden by Layout or Engine components -->"]},{"entry":[{},"<AttributeType name=\u201cminDisplayCharacters\u201d"]},{"entry":[{},"dt:type=\u201cint\u201d!> . . ."]},{"entry":["(24)","<ElementType name=\u201cLabel\u201d content=\u201cempty\u201d"]},{"entry":[{},"ext:control=\u201c1\u201d> <l--#Extends (DataControl) -->"]},{"entry":[{},"<attribute type=\u201ctext\u201d required=\u201cyes\u201d!>"]},{"entry":[{},"<!ElementType> . . ."]},{"entry":["(25)","<ElementType name=\u201cTextBox\u201d content=\u201celtOnly\u201d"]},{"entry":[{},"ext:control=\u201c1\u201d> <l--#Extends (DataControl) -->"]},{"entry":[{},"<attribute type=\u201clabel\u201d required=\u201cno\u201d!> . . ."]},{"entry":["(26)","<I-- <attribute type=\u201ctype\u201d required=\u201cno\u201d"]},{"entry":[{},"default=\u201cstring\u201d!>"]},{"entry":[{},"--> <attribute type=\u201cimportance\u201d required=\u201cno\u201d"]},{"entry":[{},"default=\u201cnormal\u201d!> . . ."]},{"entry":["(27)","<I-- OptionGroups and Checkboxes -->"]},{"entry":[{},"<ElementType name=\u201cOption\u201d content=\u201celtOnly\u201d"]},{"entry":[{},"ext:control=\u201c 1\u201d> <attribute type=\u201ctext\u201d"]},{"entry":[{},"required=\u201cyes\u201d!> . . ."]},{"entry":["(28)","<!-- Special controls: Address -->"]},{"entry":[{},"<AttributeType name=\u201caddr1\u201d dt:type=\u201cstring\u201d!>"]},{"entry":[{},"<AttributeType name=\u201caddr2\u201d dt:type=\u201cstring\u201d!>"]},{"entry":[{},"<AttributeType name=\u201ccity\u201d . . ."]},{"entry":["(29)","<ElementType name=\u201cAddress\u201d content=\u201celtOnly\u201d"]},{"entry":[{},"ext:control=\u201c1\u201d> <!--#Extends (DataControl) -->"]},{"entry":[{},"<attribute type=\u201cid\u201d required=\u201cyes\u201d!> <attribute"]},{"entry":[{},"type=\u201cimportance\u201d required=\u201cno\u201d default=\u201cnormal\u201d!>"]},{"entry":["(30)","<!-- Shareable elements --> <ElementType"]},{"entry":[{},"name=\u201cRow\u201d content=\u201celtOnly\u201d"]},{"entry":[{},"ext:displayUnit=\u201cmergable\u201d ext:layout=\u201call\u201d> <group"]},{"entry":[{},"minOccurs=\u201c0\u201d maxOccurs=\u201c~\u201d order=\u201cmany\u201d> <I--"]},{"entry":[{},"element type=\u201cDataControl\u201d --> <element"]},{"entry":[{},"type=\u201cAddress\u201d!> <element type=\u201cDateTime\u201d!>"]},{"entry":[{},"<element type=\u201cCheckBox\u201d!> <element type=\u201cComboBox\u201d!>"]},{"entry":[{},"<\/group> <!ElementType> <ElementType name=\u201cPage\u201d"]},{"entry":[{},"content=\u201celtOnly\u201d ext:displayUnit=\u201cmergable\u201d"]},{"entry":[{},"ext:layout=\u201calI\u201d> . . ."]},{"entry":["(31)","<I-- element type=\u201cDataControl\u201d N> <element"]},{"entry":[{},"type=\u201cAddress\u201d!> <element type=\u201cDateTime\u201d!> <element"]},{"entry":[{},"type=\u201cCheckBox\u201d!> <element type=\u201cComboBox\u201d!> <element"]},{"entry":[{},"<!ElementType> <ElementType name=\u201cTiIe\u201d"]},{"entry":[{},"content=\u201celtOnly\u201d ext:displayUnit=\u201cunmergable\u201d"]},{"entry":[{},"ext:fragment=\u201c1> . . ."]},{"entry":["(32)","<I-- Top level -->"]},{"entry":[{},"<ElementType name=\u201cGUI\u201d content=\u201celtOnly\u201d>"]},{"entry":[{},"<attribute type=\u201ctitle\u201d required=\u201cyes\u201d!>"]},{"entry":[{},"<attribute type=\u201ciconFile\u201d required=\u201cno\u201d!>"]},{"entry":[{},"<element type=\u201cDataModel\u201d minOccurs=\u201c1\u201d"]},{"entry":[{},"maxOccurs=\u201c1!> <element type=\u201cMiddleware\u201d"]},{"entry":[{},"minOccurs=\u201c0\u201d maxOccurs=\u201c1 O!> <element type=Tiles\u201d"]},{"entry":[{},"minOccurs=\u201c1\u201d maxOccurs=\u201c1\u201d!> . . ."]},{"entry":["(33)","<!Schema> <I-- <element type=\u201cSortSpec\u201d"]},{"entry":[{},"minOccurs=\u201c0\u201d . . ."]},{"entry":["(34)","<1~~ Set field in new object --> <ElementType"]},{"entry":[{},"name=\u201cField Value\u201d content=\u201celtOnly\u201d> <attribute"]},{"entry":[{},"type=\u201cdestField\u201d required=\u201cyes\u201d!> <attribute"]},{"entry":[{},"type=\u201cvalue\u201d required=\u201cyes\u201d!> <!ElementType>. . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0280","num":"0330"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Reference","Meaning","FIG."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"100, 10q","computer program product","\u20021"]},{"entry":[{},"(q = 0 . . . 3)"]},{"entry":[{},"200","interpreter component","3, 15"]},{"entry":[{},"200\/250\/260","application system"]},{"entry":[{},"200-1","client-side interpreter","\u20025"]},{"entry":[{},{},"component"]},{"entry":[{},"200-2","server-side interpreter","\u20025"]},{"entry":[{},{},"component"]},{"entry":[{},"201","database","\u20025"]},{"entry":[{},"202","graphical user-interface","15"]},{"entry":[{},{},"definition"]},{"entry":[{},"202-206","XML-sub-system","15"]},{"entry":[{},"204","data-model component","2, 7,"]},{"entry":[{},{},{},"15"]},{"entry":[{},"206","middleware-model components","15"]},{"entry":[{},"208","device native user-interface","15"]},{"entry":[{},{},"services"]},{"entry":[{},"210","tile handler","15"]},{"entry":[{},"210-220","runtime sub-system","15, 16"]},{"entry":[{},"212","tile assembly and navigation","15"]},{"entry":[{},{},"engine component"]},{"entry":[{},"214","theme-handler component","15"]},{"entry":[{},"215","parsing services component","15"]},{"entry":[{},"216","data-event services","15"]},{"entry":[{},{},"component"]},{"entry":[{},"217","constructor","16"]},{"entry":[{},"218","data synchronization","5, 15"]},{"entry":[{},{},"services component"]},{"entry":[{},"219","constructor","16"]},{"entry":[{},"220","data store services","15"]},{"entry":[{},{},"component"]},{"entry":[{},"230","application language","6"]},{"entry":[{},{},"definition document"]},{"entry":[{},"240","application specification","3, 5,"]},{"entry":[{},{},"document","6, 16"]},{"entry":[{},"240-1","specializing for particular","\u20023"]},{"entry":[{},{},"device"]},{"entry":[{},"240-2","encoding","\u20023"]},{"entry":[{},"241","interpreter-readable","\u20023"]},{"entry":[{},{},"document"]},{"entry":[{},"242","storage system","\u20023"]},{"entry":[{},"245","statement","\u20025"]},{"entry":[{},"250","workbench component","3, 6, 11,"]},{"entry":[{},{},{},"12, 13, 14"]},{"entry":[{},"251","typed document component"]},{"entry":[{},"252","document cursor component","6"]},{"entry":[{},"253","tree-viewer component","6, 7, 11,"]},{"entry":[{},{},{},"12, 13, 14"]},{"entry":[{},"254","element attribute panel","6, 7, 11,"]},{"entry":[{},{},"component","12, 13, 14"]},{"entry":[{},"255","pre-viewer component","6"]},{"entry":[{},"258","list","12"]},{"entry":[{},"259","pop-up menu","11"]},{"entry":[{},"259-1","menu item \u2018insert before\u2019","11"]},{"entry":[{},"259-2","menu item \u2018insert as child\u2019","11"]},{"entry":[{},"260","application specification","\u20023"]},{"entry":[{},{},"language"]},{"entry":[{},"295","predefined presentation","21"]},{"entry":[{},{},"pattern (ADJACENT)"]},{"entry":[{},"296","predefined presentation","21"]},{"entry":[{},{},"pattern (OVERLAP)"]},{"entry":[{},"297","predefined presentation","21"]},{"entry":[{},{},"pattern (CONSECUTIVE)"]},{"entry":[{},"299","hierarchy pattern (MAIN,","21"]},{"entry":[{},{},"SUB)"]},{"entry":[{},"300","application","\u20022"]},{"entry":[{},"311","table","\u20022"]},{"entry":[{},"312","table","\u20022"]},{"entry":[{},"315","interrelations","\u20022"]},{"entry":[{},"320","middleware-model component","2, 7"]},{"entry":[{},"321","content of messages","\u20022"]},{"entry":[{},"322","definition of relations","\u20022"]},{"entry":[{},"330","business-logic component","\u20022"]},{"entry":[{},"331","functions","\u20022"]},{"entry":[{},"332","scripts","\u20022"]},{"entry":[{},"340","user-interface component","\u20022"]},{"entry":[{},"341","user-interface model","\u20022"]},{"entry":[{},"341-1","first implementation","text"]},{"entry":[{},"341-2","second implementation","text"]},{"entry":[{},"342","tile","2, 7"]},{"entry":[{},"343","assemblies","2, 7"]},{"entry":[{},"344","navigation state","\u20022"]},{"entry":[{},"345","theme, layout theme","\u20025"]},{"entry":[{},"345-1","micro-browser theme","\u20025"]},{"entry":[{},"345-2","voice theme","\u20025"]},{"entry":[{},"345-3","theme","\u20025"]},{"entry":[{},"360","first object","23, 24, 8"]},{"entry":[{},"360\/370","assembly of first and second","23, 24"]},{"entry":[{},{},"objects"]},{"entry":[{},"361","title tile of first object","23, 24, 8"]},{"entry":[{},"362","content tile of first object","23, 24, 8"]},{"entry":[{},"370","second object","23, 24"]},{"entry":[{},"371","title tile of second object","23, 24, 8"]},{"entry":[{},"372","content tile of second","23, 24"]},{"entry":[{},{},"object"]},{"entry":[{},"401","navigation bar","17, 26"]},{"entry":[{},"402","navigation stack","17"]},{"entry":[{},"403","hyperlink","17"]},{"entry":[{},"404","main tile","17"]},{"entry":[{},"405","sub tiles","17"]},{"entry":[{},"406","menu","18"]},{"entry":[{},"407","back arrow","18"]},{"entry":[{},"408","toolbar","18"]},{"entry":[{},"409","tab-strip","18"]},{"entry":[{},"410","tab","18"]},{"entry":[{},"411","sub-tiles","18"]},{"entry":[{},"412","slot","19"]},{"entry":[{},"413","slot","19"]},{"entry":[{},"414","slot","19"]},{"entry":[{},"415","slot","19"]},{"entry":[{},"417","tile customer list","19"]},{"entry":[{},"418","tile customer detail","19"]},{"entry":[{},"421","tile","26"]},{"entry":[{},"422","tile","26"]},{"entry":[{},"423","tile","26"]},{"entry":[{},"500","method","22"]},{"entry":[{},"501","method steps by interpreter","22"]},{"entry":[{},"530","specifying application by","22"]},{"entry":[{},{},"workbench"]},{"entry":[{},"532","writing in AS-language","22"]},{"entry":[{},"534","providing interpreter","22"]},{"entry":[{},"536","storing interpreter","22"]},{"entry":[{},"538","storing presentation pattern","22"]},{"entry":[{},"539","simulating by pre-viewer","22"]},{"entry":[{},{},"component"]},{"entry":[{},"540","receiving application","22"]},{"entry":[{},{},"specification document"]},{"entry":[{},"550","interpreting statement to","22"]},{"entry":[{},{},"identify pattern"]},{"entry":[{},"560","rendering assembly","22"]},{"entry":[{},"600","process","\u20024"]},{"entry":[{},"601","defining application","\u20024"]},{"entry":[{},{},"specifiation language"]},{"entry":[{},"602","providing workbench","\u20024"]},{"entry":[{},{},"component"]},{"entry":[{},"603","providing an application","\u20024"]},{"entry":[{},{},"specification document"]},{"entry":[{},"604","specializing application","\u20024"]},{"entry":[{},{},"specification document"]},{"entry":[{},"605","encoding application","\u20024"]},{"entry":[{},{},"specification document"]},{"entry":[{},"606","storing interpreter-readable","\u20024"]},{"entry":[{},{},"document"]},{"entry":[{},"607","interpreting interpreter-","\u20024"]},{"entry":[{},{},"readable document"]},{"entry":[{},"700","method","27-28"]},{"entry":[{},"710","defining user-interface","27-28"]},{"entry":[{},{},"model"]},{"entry":[{},"711","determining the types and","27-28"]},{"entry":[{},{},"functionality of tiles"]},{"entry":[{},"712","determining cardinality","27-28"]},{"entry":[{},{},"relationships between tiles in"]},{"entry":[{},{},"assemblies"]},{"entry":[{},"713","determining navigation state","27-28"]},{"entry":[{},"720","defining application","27-28"]},{"entry":[{},{},"specification by meta-language"]},{"entry":[{},"721","defining elements to specify","27-28"]},{"entry":[{},{},"types of tiles"]},{"entry":[{},"722","defining attributes of the","27-28"]},{"entry":[{},{},"elements in tiles"]},{"entry":[{},"723","defining attributes of","27-28"]},{"entry":[{},{},"elements in navigation state"]},{"entry":[{},"730","customizing workbench","27-28"]},{"entry":[{},{},"component"]},{"entry":[{},"740","defining layout themes","27-28"]},{"entry":[{},"741","defining representation for","27-28"]},{"entry":[{},{},"elements of user-interface model"]},{"entry":[{},"742","defining user-interface","27-28"]},{"entry":[{},{},"model for each operation"]},{"entry":[{},"743","defining further elements","27-28"]},{"entry":[{},{},"and attributes in AS-language"]},{"entry":[{},"750","realizing user-interface","27-28"]},{"entry":[{},{},"model in interpreter"]},{"entry":[{},"751","creating models","27-28"]},{"entry":[{},"752","implementing constructors","27-28"]},{"entry":[{},"753","implementing user-interface","27-28"]},{"entry":[{},{},"instances"]},{"entry":[{},"760","realizing themes in","27-28"]},{"entry":[{},{},"interpreter component"]},{"entry":[{},"761","implementing theme as layout","27-28"]},{"entry":[{},{},"handler"]},{"entry":[{},"762","obtaining a theme selection","27-28"]},{"entry":[{},"900, 90q","computer","\u20021"]},{"entry":[{},"901","portable phone with micro-","1, \u20025"]},{"entry":[{},{},"browser"]},{"entry":[{},"901\/902\/903","computing device, device","\u20021"]},{"entry":[{},"902","conventional phone","1, 5"]},{"entry":[{},"903","personal computer, device in","1, 5"]},{"entry":[{},{},"general"]},{"entry":[{},"903-1","device in general, first","\u20025"]},{"entry":[{},{},"type"]},{"entry":[{},"903-2","device in general, second","\u20025"]},{"entry":[{},{},"type"]},{"entry":[{},"903-3","device in general, third","\u20025"]},{"entry":[{},{},"type"]},{"entry":[{},"910, 91q","processor (q = 0 . . . 3)","\u20021"]},{"entry":[{},"920, 92q","memory (q = 0 . . . 3)","\u20021"]},{"entry":[{},"930, 93q","bus (q = 0 . . . 3)","\u20021"]},{"entry":[{},"940, 94q","input device (q = 0 . . . 3)","\u20021"]},{"entry":[{},"950, 95q","output device, display,","\u20021"]},{"entry":[{},{},"screen (q = 0 . . . 3)"]},{"entry":[{},"951\u2032","pre-viewer simulation of","20"]},{"entry":[{},{},"display"]},{"entry":[{},"953","display","1, 26"]},{"entry":[{},"953-1","display (first type)","23, 17"]},{"entry":[{},"953-2","display (second type)","24, 18"]},{"entry":[{},"960, 96q","user-interface (q = 0 . . . 3)","\u20021"]},{"entry":[{},"970, 97q","program carrier","\u20021"]},{"entry":[{},"970, 97q","program carrier","\u20021"]},{"entry":[{},"980, 98q","program signal","\u20021"]},{"entry":[{},"990","inter-computer network","\u20021"]},{"entry":[{},"999","computer network system","\u20021"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIGS. 8-10","FIG. 6"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIGS. 15-16"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIGS. 17-20"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 26"},"FIGS. , illustrates a method to create an application system."]},"DETDESC":[{},{}]}
