---
title: Image processing using bounds adjustment
abstract: In various embodiments, systems and methods are provided for using an expanded image format to facilitate image transformations. The expanded image format can include at least a first set of boundaries and a second set of boundaries. The first set of boundaries corresponds to the image for transform, while the second set of boundaries provide a region beyond the image that can assist a graphics processing unit with performing a transform. Optionally, the expanded information can also include pixel value information for pixels in the region between the image boundary and the overboundary.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08761543&OS=08761543&RS=08761543
owner: Microsoft Corporation
number: 08761543
owner_city: Redmond
owner_country: US
publication_date: 20110830
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Rendering of graphics for display is a common activity on a wide variety of computing devices. The increase in available processing power in recent years has created an expectation from users that even trivial applications will display polished and attractive graphics. In order to handle the graphics processing requirements, many computing devices include a separate graphics processing unit (GPU). A separate GPU allows the primary processing unit(s) to focus on other activities, while the GPU can handle the specialized activities related to rendering images.","One of the activities performed by graphics processing units is transforming images. Image transformation generally includes a variety of activities such as rotating an image or providing an effect for the image, such as a blur effect. A GPU can receive an initial image specification, perform a desired transform, and then return information corresponding to a transformed image that allows the transformed image to be drawn or displayed on a display screen.","In various embodiments, systems and methods are provided for using an expanded image format to facilitate image transformations. The expanded image format can include at least a first set of boundaries and a second set of boundaries. The first set of boundaries corresponds to the image for transform, while the second set of boundaries provide a region beyond the image that can assist a graphics processing unit with performing a transform. Optionally, the expanded information can also include pixel value information for pixels in the region between the image boundary and the overboundary.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid, in isolation, in determining the scope of the claimed subject matter.","Overview","In various embodiments, systems and methods are provided for transforming images using a graphics processing unit. When image information is passed into a graphic processing unit for performing a transform, at least two sets of boundary information are provided for the image. One set of boundary information provides information about the image (or portion of an image) that is desired for display. A second set of boundary information provides information about a larger boundary. The larger boundary can represent information provided to the GPU that includes a gutter or other additional surrounding pixel information for potential use in performing a transform on the desired image. Additionally or alternately, the larger boundary can provide information indicating that the image being provided to the GPU is part of a larger overall image, and that transforms such as rotations should be performed based on the larger overall image boundary, as opposed to the boundary for the image portion passed to the GPU.","In this document, images (or portions of images) are described with reference to several types of data. One type of data is the boundaries for an image or image portion. This defines the bounds or shape of the display area represented by image data. The boundaries optionally also provide a default image size for display, although various scaling techniques can alter a typical image to allow for display of a variety of image sizes.","A second type of data for an image is the pixel value data for an image. The pixel value data is a specification of the display value for all of the pixels within the boundaries of an image. One example of pixel value data can be to provide a red, green, and blue color value for a pixel, such as a numerical value between 0 and 255 for each of the colors. Another example of pixel value data can be to provide a value indicating the transparency of the pixel, such as an alpha value. Such a value can be used in conjunction with color values for a pixel to provide a greater variety of pixel values. More generally, pixel value data can correspond to any type of data that provides information that defines how to display the pixel.","A third type of data for an image can be a data format for the image. The data format information allows a graphics transformation application and\/or a GPU to know what type of boundary and pixel value information is being provided and how to interpret such information. In some embodiments, the data format information can be a reference to a standard format, such as JPEG or BMP. In other embodiments, the data format may not have to be explicitly provided. This can be due to the graphics transformation application and\/or GPU expecting a data format, or due to the ability of the application or GPU to detect the format automatically.","In addition to specifying a standard data format for pixels, the image format information can also include a description of the type of pixel values used for the additional pixels. For example, an overboundary may be added to an image. An overboundary corresponds to a boundary that is outside of or beyond the limits of the image boundary. Additional pixels can be located between the image boundary and the overboundary. The pixel values for the additional pixels can be assigned based on a pixel value scheme, such as assigning all additional pixels a transparent black value or assigning all additional pixels a pixel value corresponding to the nearest pixel located within the image boundary. When the pixel values for additional pixels are assigned based on a pixel value scheme, the nature of the pixel value scheme can be included as part of the image format data. Thus, a GPU that receives the image does not have to detect that all of the additional pixel values between the image boundary and the overboundary correspond to a transparent black pixel value. Instead, the GPU can use the image format information to determine that this assignment has been made. This can assist the GPU in determining whether the overboundary and additional pixels provided with an image are suitable for use in performing a desired transform.","To facilitate explanation of various embodiments of the invention, image data information will be described with reference to image boundary data or information, pixel value data or information, and format data or information. Some references may be made to passing these types of information as parameters. It is noted that any convenient method for providing information may be used, and that the choice of representing information as image boundary data, pixel value data, and format data is for convenience only. For example, it may be desirable to provide pixel values as a series of parameters, such as by providing separate parameters for each color channel of a pixel. Another option may be to pass all image data as a single parameter, as opposed to providing boundary data and pixel value data as separate parameters. More generally, any other convenient format for providing such data may be used. Additionally, the data corresponding to an image may include additional parameters, such as optional parameters described below or other types of information not explicitly described herein.","In this discussion, reference will be made to performing transforms using an application, such as an application running on a graphics processing unit or GPU. Those of skill in the art will understand that a transform performed on a GPU can alternately be performed on a processor other than a GPU using an application. For convenience, this discussion will describe the invention in relation to performing transforms using a GPU. However, this choice is for convenience only, and it is understood that other convenient ways for performing a transform can also be used unless otherwise specified.","Image Boundaries and Transformations","A graphics transformation application typically performs image transforms using a standard application programming interface (API) with a library of image transform routines. Examples of application programming interfaces for performing image transformations include Direct2D (an API incorporated into various versions of Windows\u00ae) and Core Image (an Apple\u00ae API). In many situations, a graphics transformation application will run on a central processing unit and send forward appropriate graphics operations to a GPU. When image data is provided to an application or GPU for transformation, conventionally an application or GPU can receive boundaries for an image, pixel data for the image, and a format for the pixel and\/or boundary data. For some types of transforms, this image data is sufficient for the application or GPU to perform the transform. For example, many types of transforms represent one-to-one transforms of pixel values. In a one-to-one transform, each pixel is mapped to another pixel. A one-to-one transform is in contrast to a transform where pixel values from more than one pixel in an original image are needed to determine the pixel values for a pixel in the final image.","In other types of transforms, such as blurring of an image, there is not a one-to-one correlation of pixels prior to the transform and pixels after the transform. Instead, a pixel for display after the transform operation is based on pixel values from two or more pixels of the original image data. For example, a pixel value in the transformed image can represent a weighted average of a plurality of pixel values from the image prior to transform. Unfortunately, transformations of image data that involve blending information from multiple pixels can pose challenges at the boundary of an image. At the boundary, some pixels will have a reduced number of neighboring pixels. As a result, a transform that blends pixel values from a plurality of pixels may be undefined or poorly defined near the edge of an image based solely on the pixel values contained in the image.","When a pixel value from beyond the edge of an image is needed, some graphics processing units have the ability to sample from beyond the edge of the image. However, the results of such sampling vary depending on the GPU. Some graphics processing units can sample outside an image boundary by assigning a pixel value corresponding to the closest pixel that is within the boundary. Alternatively, an image may be part of an atlas of images. An atlas of image portions allows various images in the atlas to be arranged and\/or rearranged as needed. If an image is part of an atlas of images, the GPU may return a pixel value from an adjacent image, regardless of whether that adjacent image is related to the current transform. Still other graphics processing units lack the ability to sample beyond the image boundary. As a result, performing a transform that requires pixels from beyond the edge of an image can potentially lead to inconsistent behavior across various types of processors. One method for overcoming this difficulty in performing a transform is to add pixels corresponding to additional pixel value information around an image. These additional pixels are sometimes referred to as a \u201cgutter\u201d of pixels or pixel information around an image. The additional pixel values are added to the image for the purpose of allowing the transform to occur in a well-defined manner. This results in a new image with larger boundaries that includes the gutter information. For example, consider a transform that requires averaging of five pixel values within a given row of pixels, such as pixel values for a central pixel and two pixels on either side. At the image boundary, the transform is difficult to perform because two additional pixels are needed beyond the edge of the image. To overcome this difficulty, a gutter of additional pixel values can be added as a border around the image. Because the transform potentially needs two additional pixel values, the gutter added by the GPU can be two pixels beyond the original image boundary. This results in a new image with two additional pixel values added beyond the edge of the original boundary in all directions.","The pixel values for these additional pixels can be selected as any convenient values for performing a transform. For example, one convenient choice can be to assign a \u201ctransparent black\u201d value to the additional pixels. For a pixel that is specified based on three color channels and a transparency value, a transparent black pixel can have a zero value for each of the color channels, corresponding to a black color. Additionally, the transparency value can be set to zero so that the pixel is completely transparent. During a transform, when a transparent black pixel value is used in a weighted average with other pixel values, the transparent black pixel value will not introduce a color artifact into the transformation. The overall intensity of the transformed pixel value may be reduced, but the color of the transformed pixel based on the pixel values from the original image will be preserved. Another convenient choice can be to assign pixel values for the additional pixels that correspond to the pixel value of the nearest pixel that resides within the boundaries of the image.","While the above method for adding pixels or pixel values to an image for a transform is effective, the above method also reduces the speed for performing a transform and requires an increase in the amount of memory used to perform a transform. Using the above method, a GPU will be forced to create up to twice as many images when performing a transform. When only a single image is being transformed, a first image created by the GPU will correspond to the image with the additional transparent black gutter. The second image will correspond to the transformed image that is desired as the output. In situations where multiple images that are part of a single final texture are being transformed, the number of additional images may not be exactly a factor of two greater. It is also noted that the above method for adding a transparent black gutter is specific to performing a given transform. After the transform is finished, the modified image with the transparent black gutter is either discarded immediately, or held in a temporary memory cache. If another transform is performed on the same original image, or if such a transform is performed after the temporary memory cache has been cleared, the process for adding a gutter to the image will be repeated, once again resulting in the creation of more than one image per final generated output image.","Providing Images with Expanded Information","In various embodiments, the additional time required to produce additional images with gutter information can be avoided. This can be achieved by providing image information to the GPU in a different format. In the above comparative example, image information was provided to the GPU in the form of an image boundary, pixel values for pixels residing within the image boundary, and optional data format information. In an embodiment, an expanded set of information can be provided to the GPU when an image is provided for processing by the GPU.","The expanded information provided to the GPU can include at least two sets of boundary information. One set of boundary information can correspond to the boundaries for the image data to be processed by the GPU. This boundary information roughly corresponds to the image boundary provided in the above comparative example. The second set of boundary information corresponds to a larger set of boundaries. Preferably, the scope of the boundary for the image data (the first set of boundary information) is contained within the scope of the second boundary. In this document, a first boundary being contained within a second boundary is explicitly defined to include the situation where a portion of the first boundary is identical to or co-linear with the second boundary. For example, if the first boundary defines an image portion of a larger image corresponding to a second boundary, at least a portion of the first boundary and second boundary may be along the same line or otherwise in the same location(s). The second set of boundary information can sometimes be referred to as an overboundary. In some embodiments, the expanded information provided to the GPU can also include an additional plurality of pixel values. Optionally, the expanded information can include a data format for the overboundary and\/or the pixel information that resides between the image boundary and the overboundary. Although the additional pixels between an image boundary and an overboundary will often have the same format as the image pixels, this is not required. Similarly, the format of the information that defines the overboundary does not necessarily have to be the same as the format for the image boundary. Thus, in some embodiments the format of the pixel values between the image boundary and the overboundary and\/or the format of the boundary information for the overboundary may be specified.","The second set of boundary information, which preferably defines a larger boundary than the boundary for the image data, can be used in a variety of ways. In an embodiment, the larger boundary (or overboundary) can be used to define a gutter that contains additional pixels. The additional pixel values for pixels that reside between the image boundary and the overboundary are not part of the image being transformed, but the additional pixel values can be used to assist in transforming the image. In other words, the additional pixel values correspond to pixels that will not be displayed when the GPU provides the output image to the primary processors for display. However, the additional pixel values can be used for the transform of the pixels within the image boundary.","The number of additional pixel values for pixels located between the image boundary and the overboundary can be any desired amount. In some embodiments, after receiving the image boundary and the overboundary, the GPU can calculate one or more quantities related to the number of additional pixels or pixel values between the image boundary and the overboundary. For example, in a data format where pixels are arranged in rows and columns, the number of additional pixel values present in a given column and\/or in each column can be determined. A similar calculation could also be made for the rows. This allows the GPU to determine whether the pixel values for pixels between the image boundary and the overboundary are sufficient to perform a transform that has been requested.","In various embodiments, the number of pixels between the image boundary and the overboundary can be determined based on the information related to the overboundary provided in the expanded information. This means that the edge of the image does not have to be detected in order to distinguish the image boundary from the overboundary. The calculated number of pixels can represent the total number of pixels located between the image boundary and the overboundary, a number of pixels within a row or column that are located between the image boundary and the overboundary, or another convenient value. Optionally, the calculation of pixels between the image boundary and the overboundary may be based on an image format. The image format can be an image format specified for the pixels between the image boundary and overboundary in the expanded information. Another possibility is that the image format can be selected based on a format for the pixels within the image boundary. Still another option is that the image format can be automatically detected.","Specifying an overboundary in the expanded information also provides flexibility for an image transform application. Various processes may have different needs for additional pixel information. Some processes may only need one or two additional pixel values outside an image boundary, while other processes may require 10 or more additional pixel values. Instead of requiring images to have a fixed overboundary, each process or application that accesses the GPU can specify an overboundary that matches the needs of the process or application. When a GPU is performing transforms for multiple images or image portions, the various images or image portions do not all have to use the same size overboundary and\/or the same number of additional pixel values between the image boundary and the overboundary. Even if two images for transform have the same number of pixel values within the image boundary, the number of pixel values between the image boundary and the overboundary can be different.","The expanded information can be used to assign any convenient pixel values to the additional pixels between the image boundary and the overboundary. For example, the expanded information can specify that the additional pixels all have a pixel value selected from one or a few default values, such specifying that all of the pixels have the color values and transparency values for transparent black.","Alternatively, the additional pixel values can contain other image information. For example, consider a situation where the image provided to the GPU for transform represents a portion of a larger image. In this discussion, when a portion of an image is provided to a GPU, the larger image that the image portion is extracted from can be referred to as a parent image. The portion of the image provided to the GPU may be the only portion that is transformed, or the GPU may be transforming the full parent image in portions. When a portion of the image is provided to the GPU, the image information beyond the boundaries of the image portion is potentially known, as it may be present in the parent image. If desired, the pixel values for at least a portion of the pixels located between the image boundary and the overboundary can be assigned based on pixel values for corresponding pixels in the parent image. However, it may be more convenient to assign a pixel value such as transparent black, so that allocation and evaluation of the pixels from the parent image is unnecessary. Additionally, the larger image corresponding to the image portion may not exist and\/or may not be readily available, which would also make it more convenient to assign pixel values not related to the parent image.","As noted above, the expanded information can be used to allow the GPU to determine the number of additional pixels or pixel values that are available for use during an image transform. If a desired transform requires a number of pixel values that is less than or equal to the number of additional pixel values between the image boundary and the overboundary, the expanded image information can be used for performing the transform. This allows the GPU to avoid the step of creating a preliminary image with a gutter of transparent black pixels. If the number of additional pixels is not sufficient, the GPU can create a preliminary image with additional gutter to accommodate the requirements of the transform. Similarly, if expanded information containing additional pixel values is not provided with an image, the GPU can also create preliminary images with additional gutter as needed.","Providing expanded information to a GPU can allow for substantial time savings during processing by a GPU. Although the expanded information is added by another processor, in many situations addition of the expanded information by another processor will be more efficient than having the GPU add or create the expanded information. Additionally, in some embodiments the addition of the expanded information by another processor can occur in parallel with another limiting process, allowing the expanded information to be added without an apparent cost in time. For example, when an image is loaded or saved to disk, the speed of the read or write from the disk (or other longer term storage medium) to the memory used by a processor will typically be slow relative to a process operating on data that is already in memory. Thus, if the expanded information is added to an image during the time when the image is being loaded from disk, the addition of the expanded information may appear to take little or no time, as the addition can largely be completed during the disk read operation. Additionally, if the expanded information is saved with an image, the expanded information will only need to be added once. This is in contrast to a conventional GPU, which would be forced to add a gutter of transparent black pixels to an image each time a transform is performed.","Additional Expanded Information Formats","In various embodiments, the expanded information can be used in other situations. Another example for use of expanded information is when performing a rotation transform of image data. A rotation transform of an image typically involves the concept of a rotating an image relative to a rotational axis. For a GPU that only has information about the image being rotated, the rotational axis will typically be selected as a location within the image. While this is effective for performing a rotation, the selection of a location within the image as the rotational axis limits the types of rotational transformations that can be performed. In particular, if the image being rotated is a portion of a larger parent image, the desired axis of rotation may be located outside of the image portion being rotated.","Providing expanded information for an image that is being transformed can overcome this difficulty. In this situation, when an image is provided to a GPU, a first set of boundary information corresponding to the image can be provided, along with pixel information and optional format information. A second set of boundary information corresponding to an overboundary can also be provided. The boundaries defined by the second set of boundary information can contain the first set of boundaries corresponding to the image portion. The second set of boundary information can represent, for example, the concept that the image portion being transformed belongs to a larger parent image. Providing the second set of boundary information allows the rotational transform to be performed using a rotational axis selected from within the overboundary. This can simplify a rotation of a large (parent) image when the large image is rotated by transforming image portions. If only conventional information is provided for each image portion, some method is needed for specifying the rotational axis relative to each image portion. When expanded information is provided for each image portion, since the rotation is being performed relative to a location within the larger image, the same overboundary can be provided for each image portion, which allows the same axis of rotation to also be specified for each image portion.","Another variation on expanded image formats is the use of expanded image formats when images are stored and transformed as portions of a larger or parent image. One technique for storing larger images as a group of smaller image portions is \u201catlasing\u201d. An atlas of image portions allows various images in the atlas to be arranged and\/or rearranged as needed. These atlas images can also be transformed in various ways.","In an atlas, the images can be stored with expanded information, such as a second set of boundary information to define an overboundary and pixel information for pixels located between the image boundary and the overboundary. Instead of adding a gutter of pixels each time an atlas image portion is transformed, an atlas image can be stored with expanded information. When the atlas image is retrieved, the expanded information is retrieved as well. This allows a transform of the atlas image to be performed without having to generate a preliminary image that adds a gutter.","Another example of transforms on image portions relates to tile based rendering graphic processing units. The Intel\u00ae GMA 500 is an example of a tile based rendering GPU. A tile based rendering GPU will render only a portion of a texture at time. The portions of textures can be provided to the tile based rendering GPU with expanded information to avoid the need for generating a preliminary image or texture with a gutter prior to generating a transformed image or texture.","In still another example, an image can be provided with additional information that corresponds to multiple boundaries. A first boundary can be a boundary that corresponds to the image itself. This boundary defines the region which contains pixels with image information that should be evaluated during a transform. One or more additional boundaries, such as a second boundary and a third boundary, correspond to overboundaries that can be used for any convenient purpose. For example, the second boundary can expand the image by a small amount using pixels that have pixels values corresponding to the nearest neighbor pixel that resides within the image. The third still larger boundary can be a boundary intended for facilitating rotations of an image. The pixel values between the second and third boundary can also be based on a pixel scheme using a nearest neighbor pixel value, or a different scheme can be used such as transparent black pixels.","In some situations, a series of transformation will be performed on an image, such as multiple effects that correspond to a connected effect graph. Each of the transforms in the connected effect graph may not require all of the specified boundaries. However, the additional boundaries can still be passed through the connected effect graph in parallel, for use in later transforms.","When one or more overboundaries are present, in some embodiments a GPU can select the appropriate boundary to use for a given transform. For example, an effect processing system will often include an extensibility mechanism. The extensibility mechanism allows users to author a plug-in module with custom transform effects. An effect processing system could include a definition that each specified boundary has a different meaning. For example, effect processing system could include a definition that the first boundary specified for an image corresponds to the boundary for the image information. When a second boundary is specified, the second boundary corresponds to additional pixels for assisting with a first type of transform, such as blur transforms or other pixel averaging transforms. When a third boundary is specified, the third boundary information will be used for another type of transform, such as rotational transforms. When the additional boundaries are not specified, the image boundary is used. Based on such definitions, an author of a plug-in extension would not need to specify the boundary to use when creating transforms in the plug-in. Instead, the effects processing system would consume the abstracted rendering steps defined by the plug-in author and determine the appropriate boundary to use at each step. This would allow the plug-in author to create the plug-in extension without worrying about specifying the various boundaries that might be required for each transformation in the plug-in extension.","Example of Image Transform","In this example, an application is running on central processing unit of a computing device that includes a display device, such as a display screen. The computing device also includes a graphics processing unit. During operation of the application, the application identifies and\/or produces image information for display on the display device. However, one or more transform operations on the image information are needed prior to display.","As an initial action, the image information is divided into four portions. If it is desirable to transform the full image, the transform will occur by transforming the four portions and combining the transformed images. This could be a choice of convenience for the application, a choice based on a memory requirement, a choice based on a requirement for the GPU, or for any other reason.  shows a representation of a parent image  divided into image portions , , , and . In , image portions , , , and  are shown as being separated. However, during display of the full image, the image portions would be displayed without the gap, resulting in a continuous image. As a result, pixels at the right edge of image portion  will be adjacent to pixels from the left edge of image portion . Similarly, pixels from the bottom edge of image portion  will be adjacent to pixels from the top edge of image portion .","Another initial action is to create additional pixel values as a gutter surrounding each of the four image portions. The additional pixels extend the pixel rows and pixel columns for each of the image portions by a total of six pixel values. This corresponds to three added pixel values on each side of the image portions. The choice of six additional pixel values for the pixel rows and columns of the image portions is based on the typical needs of the application requesting the image transform. Other applications might need fewer pixels for typically requested transforms, and could therefore add only two additional pixel values to each row and column, or at least two pixels, or at least four pixels. Still other applications might need more pixels for typical transformations, and could therefore add at least ten pixel values, or at least twenty pixel values. Yet another option could be to add a different number of pixel values to the rows as compared to the columns, if that is beneficial for a transform. In still another option, the pixels may be arranged in a manner other than based on rows and columns. In this type of option, any other convenient choice for adding pixels can be used that provides a desired amount of additional pixels for use during image transform operations.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["110","112","118","100","114","120","116","140","112","114","116","118","110","110"]},"The pixel values of the additional pixels vary depending on the location of the pixels. In the example shown in , because additional pixels  and  do not overlap with another image portion of parent image , additional pixels  and  are assigned a pixel value of transparent black. Additional pixels  are assigned pixel values that match the pixel values for the corresponding pixel positions in image portion . Similarly, additional pixels  are assigned pixel values that match the pixel values for the corresponding pixel positions in image portion . In other types of embodiments, all of pixels , , , and  could receive one or more default pixel values, such as transparent black.","It is noted that the actions of dividing an image into portions and\/or creating additional pixels can be performed at any convenient time. These actions can be performed as a precursor to providing the image portions to the GPU for performing the image transform. Alternatively, the image can be divided into portions and the additional pixels can be created in advance. The image portions with the additional pixels can then be stored until needed.","The image portions can then be transformed. This example will continue to focus on image portion . The image portion  is provided to the GPU for performing the image transform. When the image portion  is provided, the information for the image includes three types of boundaries, as shown in . The first boundary  corresponds to the boundary for the image portion . Image boundary  contains the pixels that will eventually be displayed after one or more transform operations. The second boundary  corresponds to a first overboundary. The area between the image boundary and the first overboundary corresponds to an area containing additional pixels for facilitating a transform, such as additional pixels , , , and . By specifying both first boundary  and second boundary , the GPU does not need to detect the edge of the image relative to the gutter. Instead, the GPU can identify the pixels that reside between the image boundary  and second boundary  based on the provided information. The third boundary  is a boundary that corresponds to the full size of the parent image  from . This corresponds to a second overboundary. The third boundary can be useful in performing rotational transforms of the image portion  based on a location contained within the bounds of parent image , such as rotation point . It is noted that in some embodiments, the expanded information provided to a GPU may only include one overboundary. In such embodiments, the purpose of the overboundary can be determined based on the type of transform requested, whether additional pixel values are present, or by any other convenient method.","In , it is noted that the first boundary  and third boundary  do not share a common boundary line. However, this choice was made for convenience in demonstrating the concept. Since third boundary  in  represents a parent image while first boundary  represents an image portion, in many situations first boundary  and third boundary  would be in the same location(s) for at least a portion of the boundaries. Because second boundary  represents a boundary for additional pixel values beyond the edge of the image, part of the boundary for second boundary  is shown as being outside of both first boundary  and third boundary .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":["110","110","461","466","410","466","461","462","118","118","118","466","466","461","462","471","110","476","472","471","476","114","120"]},"After the transform to form image portion , the image portion  is then rotated clockwise by 90 degrees using image point  as the axis of rotation to produce image portion , as shown in . In some conventional transform applications, image point  would be difficult to specify, as the image point  is not within the bounds of image portion . However, image point  is within the bounds of third boundary . Specifying the boundary  for use in performing rotational transforms provides a larger boundary so that the application or GPU performing the transform is aware of a boundary that contains the desired rotational point. After performing the rotational transform, the GPU returns the transformed image portion  for display on the display device.","Additional Examples","Having briefly described an overview of various embodiments of the invention, an exemplary operating environment suitable for performing the invention is now described. Referring to the drawings in general, and initially to  in particular, an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device . Computing device  is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing device  be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.","Embodiments of the invention may be described in the general context of computer code or machine-useable instructions, including computer-executable instructions such as program modules, being executed by a computer or other machine, such as a personal data assistant or other handheld device. Generally, program modules, including routines, programs, objects, components, data structures, etc., refer to code that perform particular tasks or implement particular abstract data types. The invention may be practiced in a variety of system configurations, including hand-held devices, consumer electronics, general-purpose computers, more specialty computing devices, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote-processing devices that are linked through a communications network.","With continued reference to , computing device  includes a bus  that directly or indirectly couples the following devices: memory , one or more processors , one or more presentation components , input\/output (I\/O) ports , I\/O components , and an illustrative power supply . Bus  represents what may be one or more busses (such as an address bus, data bus, or combination thereof). Although the various blocks of  are shown with lines for the sake of clarity, in reality, delineating various components is not so clear, and metaphorically, the lines would more accurately be grey and fuzzy. For example, one may consider a presentation component such as a display device to be an I\/O component. Additionally, many processors have memory. The inventors hereof recognize that such is the nature of the art, and reiterate that the diagram of  is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as \u201cworkstation,\u201d \u201cserver,\u201d \u201claptop,\u201d \u201chand-held device,\u201d etc., as all are contemplated within the scope of  and reference to \u201ccomputing device.\u201d","The computing device  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by computing device  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, Random Access Memory (RAM), Read Only Memory (ROM), Electronically Erasable Programmable Read Only Memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other holographic memory, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to encode desired information and which can be accessed by the computing device . In an embodiment, the computer storage media can be selected from tangible computer storage media. In another embodiment, the computer storage media can be selected from non-transitory computer storage media.","Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The memory  can include computer-storage media in the form of volatile and\/or nonvolatile memory. The memory may be removable, non-removable, or a combination thereof. Exemplary hardware devices include solid-state memory, hard drives, optical-disc drives, etc. The computing device  includes one or more processors  that read data from various entities such as the memory  or the I\/O components . The one or more processors can include one or more central processing units as well as one or more graphics processing units. The presentation component(s)  present data indications to a user or other device. Exemplary presentation components include a display device, speaker, printing component, vibrating component, and the like.","The I\/O ports  can allow the computing device  to be logically coupled to other devices including the I\/O components , some of which may be built in. Illustrative components can include a microphone, joystick, game pad, satellite dish, scanner, printer, wireless device, etc.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 7","FIG. 7"],"b":["710","720","730","740"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 8","FIG. 8"],"b":["810","820","830"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 9","FIG. 9"],"b":["910","920","930","940","950","960"]},"Embodiments of the present invention have been described in relation to particular embodiments, which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which the present invention pertains without departing from its scope.","In an embodiment, a computer-implemented method for transforming an image is provided. The method includes receiving information corresponding to an image, the image information including an image boundary, a plurality of pixel values for pixels located within the image boundary, a second boundary, the image boundary being contained within the second boundary, and a second plurality of pixel values for pixels located between the image boundary and the second boundary; identifying a transform to perform on the plurality of pixel values for pixels located within the image boundary, the identified transform involving use of two or more pixel values to calculate a transformed pixel value; determining that the second plurality of pixel values is sufficient to allow the identified transform to be performed on the plurality of pixel values for pixels located within the image boundary; and transforming the plurality of pixel values located within the image boundary using the identified transform.","In another embodiment, one or more computer-storage media storing computer-useable instructions that, when executed by a computing device, perform a method for transforming an image. The method includes receiving information corresponding to an image, the image information including an image boundary, a plurality of pixel values for pixels located within the image boundary, and a second boundary, the image boundary being contained within the second boundary; identifying a transform to perform on the plurality of pixel values for pixels located within the image boundary, the identified transform involving a rotation around a point located between the image boundary and the second boundary; and transforming the plurality of pixel values located within the image boundary using the identified transform.","In still another embodiment, one or more computer-storage media storing computer-useable instructions that, when executed by a computing device, perform a method for transforming an image. The method includes receiving information corresponding to a first image, the first image information including an image boundary, a plurality of pixel values for pixels located within the image boundary, a second boundary, the image boundary being contained within the second boundary, and a second plurality of pixel values for pixels located between the image boundary and the second boundary; determining that the second plurality of pixel values is sufficient to allow an identified transform to be performed on the plurality of pixel values for pixels located within the image boundary, the identified transform involving use of two or more pixel values to calculate a transformed pixel value; transforming the plurality of pixel values located within the image boundary using the identified transform; receiving information corresponding to a second image, the second image information including a third image boundary, a third plurality of pixel values for pixels located within the third image boundary, a fourth boundary, the third image boundary being contained within the fourth boundary, and a fourth plurality of pixel values for pixels located between the third image boundary and the fourth boundary, wherein the fourth plurality of pixel values is different from the second plurality of pixel values; determining that the fourth plurality of pixel values is sufficient to allow the identified transform to be performed on the third plurality of pixel values for pixels located within the third image boundary; and transforming the third plurality of pixel values located within the third image boundary using the identified transform.","From the foregoing, it will be seen that this invention is one well adapted to attain all the ends and objects hereinabove set forth together with other advantages which are obvious and which are inherent to the structure.","It will be understood that certain features and subcombinations are of utility and may be employed without reference to other features and subcombinations. This is contemplated by and is within the scope of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is described in detail below with reference to the attached drawing figures, wherein:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 4 and 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 7-9"}]},"DETDESC":[{},{}]}
