---
title: System and method for secure asynchronous event notification for adaptive streaming based on ISO base media file format
abstract: System and method embodiments are provided for asynchronous event notification and message handling in dynamic adaptive streaming over hypertext transfer protocol (DASH). The embodiments includes sending in a segment file, from a network server to a client, a message box that is configurable for encryption, for scheduling a callback from the client, and with one or more arguments according to a messaging scheme of the message box. The network server further sends a message handling descriptor to the client for reloading a media presentation description (MPD) for obtaining a DASH event. The client then configures a universal resource locator (URL) for the MPD using the message box and the message handling descriptor, and sends the URL back to the network server. After receiving the URL, the network server sends the MPD to the client, which then uses the MPD to request segments of an asynchronous event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015477&OS=09015477&RS=09015477
owner: FutureWei Technologies, Inc.
number: 09015477
owner_city: Plano
owner_country: US
publication_date: 20130405
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/620,810 filed on Apr. 5, 2012 by Alexander Giladi and entitled \u201cSystem and Method for Secure Asynchronous Event Notification for Adaptive Streaming,\u201d which is hereby incorporated herein by reference as if reproduced in its entirety.","The present invention relates to the field of media streaming, and, in particular embodiments, to a system and method for secure asynchronous event notification for adaptive streaming based on Organization for Standardization (ISO) base media file format.","Unscheduled or unexpected events, referred to herein as asynchronous events, can occur in cases of media streaming or downloading, e.g., over the Internet or other Internet Protocol (IP) based networks. Asynchronous events may occur during live broadcast or live streaming or during video on demand (VoD) content downloading. Asynchronous events are used for digital program insertion such as for advertisement and can also be used for applications such as emergency messaging and blackout management. Targeted advertisement is a revenue source in the current entertainment ecosystem, both on the Internet and in the Cable\/IP television (IPTV) environment. In the Cable\/IPTV environment, targeted advertisement insertion is standardized via SCTE-35 (via mark-up) and SCTE-30\/130 (via advertisement server interaction), and is available from multiple vendors.","Schedule changes may occur in live events. For example, during the 2011 Canadian Grand Prix of Formula One racing, a heavy rainstorm hit the racing circuit and the race was stopped at about 30 minutes from start and then restarted after more than two hours. Such situations trigger schedule changes by broadcasters, for example to insert advertisement or other asynchronous events. The broadcasters may run alternative programming (e.g., advertisement) during the unexpected delay or after cancellation of the main broadcast event. In another example, if a soccer or hockey game score is a tie, the game goes into overtime. Overtime may last anywhere between minutes and hours (with several breaks) and scheduled content may be delayed or canceled. There is a need for an efficient adaptive streaming scheme to handle asynchronous events in such situations, such as to insert advertisement, emergency messaging, or blackout alerts.","In accordance with an embodiment, a method for event notification in dynamic adaptive streaming over hypertext transfer protocol (DASH) includes sending in a segment file, from a network server to a client, a message box that is configurable for encryption, for scheduling a callback from the client, and with one or more arguments according to a messaging scheme of the message box. The method further includes sending a message handling descriptor to the client for reloading a media presentation description (MPD) for obtaining a DASH event, receiving from the client a universal resource locator (URL) for the MPD, wherein the URL is configured using the message box and the message handling descriptor, and sending the MPD to the client.","In accordance with another embodiment, a method for event notification in DASH includes receiving at a client terminal, in a segment file from a network component, a message box that is configurable for encryption, scheduling a callback from the client, and with one or more arguments according to a messaging scheme of the message box. The method further includes receiving a message handling descriptor for reloading a MPD for obtaining a DASH event, configuring a URL for the MPD using the message box and the message handling descriptor, sending the URL for the MPD, and receiving the MPD for the DASH event.","In accordance with another embodiment, a network component supporting event notification in DASH includes a processor and a computer readable storage medium storing programming for execution by the processor. The programming includes instructions to send in a segment file to a client a message box that is configurable for encryption, for scheduling a callback from the client, and with one or more arguments according to a messaging scheme of the message box, send a message handling descriptor to the client for reloading a MPD for obtaining a DASH event, receive from the client a URL for the MPD, wherein the URL is configured using the message box and the message handling descriptor, and send the MPD to the client.","In accordance with yet another embodiment, a user device supporting event notification in DASH includes a processor and a computer readable storage medium storing programming for execution by the processor. The programming includes instructions to receive in a segment file, from a network component, a message box that is configurable for encryption, scheduling a callback from the user device, and with one or more arguments according to a messaging scheme of the message box, receive a message handling descriptor for reloading a MPD for obtaining a DASH event, configure a URL for the MPD using the message box and the message handling descriptor, send the URL for the MPD, and receive the MPD for the DASH event.","The making and using of the presently preferred embodiments are discussed in detail below. It should be appreciated, however, that the present invention provides many applicable inventive concepts that can be embodied in a wide variety of specific contexts. The specific embodiments discussed are merely illustrative of specific ways to make and use the invention, and do not limit the scope of the invention.","Dynamic Adaptive Streaming over Hypertext Transfer Protocol (DASH), also known as MPEG-DASH, is developed to enable high quality streaming of media content over the Internet delivered from conventional Hypertext Transfer Protocol (HTTP) web servers.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":"100"},"The DASH architecture  includes one or more media servers  that provide media content, such us in the form of segment files according to Organization for Standardization (ISO) Base Media File Format (BMFF). The DASH architecture  includes one or more clients  that comprise user equipment or devices, such as set-top boxes (STBs), desktop computers, laptop computers, tablet computers, smartphones, or any other type of mobile\/personal devices. The clients  are configured to receive, according to DASH, the media content from the servers  over any access network , e.g., the Internet, a wireless local area network (WLAN), a WiFi network or hotspot, a cellular network, a cable infrastructure, a fiber optic backbone or access network, or combinations thereof. To receive content using HTTP, the clients  need to first request the content.","In the DASH architecture , the original content in the server  can be encoded into media streams (e.g., video streams) at different rates. A video or other media content can be segmented into a plurality of segments that can be streamed individually and independently from the server  to a client  over the access network . The servers  also provide media presentation description (MPD) corresponding to video\/media files, e.g., for each group of segment files of a video or program. The servers  also provide universal resource locators (URLs) for the MPD files to indicate the location of the MPD files in the servers  or network .","The MPD is sent from the server  to the client  and describes a manifest (e.g., a list) of the available content (e.g., content segments), its various alternatives, URL addresses (e.g., of content segments), and other characteristics. The MPD is obtained by the DASH client  to play content. The MPD can be delivered from a content server  to the client  using HTTP. By parsing the MPD, the client  learns about the content (e.g., a program) timing, content or media availability, media types, resolutions, minimum and maximum bandwidths, the existence of various encoded alternatives of multimedia components, accessibility features and required digital rights management (DRM), media-component locations on the network, and other content characteristics. The media content, e.g., on demand video or a broadcast program, is divided into a plurality of addressed segments that can be forwarded separately, each representing a chunk or portion of the content and has a corresponding URL and duration indicated in the MPD.","Using the information in the MPD, the client  selects the appropriate encoded alternative and starts streaming the content by fetching the segments of content using HTTP GET requests. For example, the information includes the locations of the files\/segments in the servers  and\/or network . From the MPD information, the client  can also determine the video rate based on network conditions for the client  (e.g., determine which segments files to get that match a suitable download rate).","Further, the client  can get the MPD file periodically or when needed to adjust the media download or streaming rate. To implement asynchronous events, the manifest in the MPD is reloaded to the client . Content reloading can be provided by server-side event handling (e.g., a server  inserts an advertisement) and by using segment URLs on the client side to get the inserted event. DASH provides the MPD location URL and update frequency, which together can be used for reloading the manifest by polling (from the client-side). However, the DASH approach to reload the MPD location URL introduces unwanted delay or undesired frequent reload attempts. The DASH defines an ISO file formatlabel, \u201clseg\u201d, which when present within a \u201cstyp\u201d box in a segment file, identifies the last segment of a period of the MPD. The \u201cstyp\u201d box may be a code (e.g., syntax) in a segment file that is sent from a server  to a client . The MPD comprises a plurality of periods, where a period is a program or content interval along the time axis. Each period has a starting time and duration. For example, an advertisement segment or multiple advertisement segments can be inserted as a period or more. When detected, the period effectively ends, and a next period can start. If there are no additional periods, then a MPD reload or update is triggered.","This DASH approach, while sufficient for several purposes, suffers from multiple issues. One issue is that since the MPD URL does not change, MPDs are fetched always from the same URL (same location). Further, any event designated by \u201clseg\u201d is immediate, meaning it has two-second segments and an expected schedule change. For such event, clients have up to two seconds to update the MPD in order to be able to tune into the announcement. This creates a flood of requests (due to such high frequency), which could cause delays or network congestion. Another issue is that there may be more than one type of possible events (e.g., advertisement, schedule change, blackout, emergency alert, or others). Handling events that are known ahead of time, such as advertisements and emergency messaging, may need extra MPD reloads. Another issue is that in case of personalized content, a client-specific MPD limits scalability. Further, the DASH approach above does not allow streaming or downloading multiple events at the same time for a client .","A DASH-based DECE CSF proposal by Microsoft\u2122 addresses some of these issues above by adding a message box, \u2018mesg\u2019, to the segment file (e.g., at the beginning of the segment). The \u2018mesg\u2019 box has a unique message scheme (or structure) and message identification. Interpreting the \u2018mesg\u2019 box at the client can trigger the client to realize that the MPD is outdated and hence reload or update the MPD using a new URL. The proposal also adds an extra scheme that forces a MPD reload and also provides an optional new MPD URL. However, this proposal also suffers from several issues. First, the box leaves message timing and handling undefined such that a client cannot handle a message unless the client knows the message scheme. This creates a possibility of clients that are able to play the content but, for example, are unable to display an emergency message with the content. A second issue is that it is difficult to distinguish between events inserted by different entities. Further, in this approach, the MPD URL update message allows a simple attack by replacing a valid URL with a malicious one.","System and method embodiments are provided for adaptive streaming using DASH. The embodiments provide an asynchronous event handling framework in adaptive streaming. The embodiments include extending the syntax of the message box, \u2018mesg\u2019, by adding uniform encryption, scheduling, and argument interface. An additional MPD functionality is added that allows implementation of rich representational state transfer (REST) application programming interfaces (APIs) without explicit client knowledge of message types and schemes. This means, that the client can use the information in the \u2018mesg\u2019 box to configure a URL that can be interpreted on the server-side as an operation. Extending the message box and adding this MPD functionality enable generic asynchronous stream event handling with DASH MPD and ISO BMFF. ISO BMFF currently does not have such functionality. These features also add security and protection from common attacks to the event handling mechanism and the functionality for forcing change of content played by the DASH client. The added functionalities can be used to implement advertisement insertion, targeted advertisement, emergency messaging, blackout handling, and\/or other events, e.g., in cable\/IPTV\/telecommunication systems, content delivery networks (CDNs), DASH systems, or other suitable systems.","In an embodiment, a generic event notification message structure is configured by extending the ISO file format for the message box as follows:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Box Type:","\u2018mesg\u2019"]},{"entry":[{},"Container:","\u2018tfdt\u2019"]},{"entry":[{},"Mandatory:","No"]},{"entry":[{},"Quantity:","Zero or more"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Syntax"]},{"entry":[{},"aligned(8) class MessageBox"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"extends FullBox(\u2018mesg\u2019, version = 0, flags = 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"string","message_scheme_URI;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"unsigned int(16) message_scheme_version;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"unsigned int(1)","is_encrypted;"]},{"entry":[{},"unsigned int(1)","is_cancelled;"]},{"entry":[{},"unsigned int(3)","schedule;"]},{"entry":[{},"unsigned int(11)","\u2002reserved;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if ( is_encrypted == 0x01 )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"unsigned int(24)","IsEncrypted;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"unsigned int(8)","IV_size;"]},{"entry":[{},"unsigned int(8)[16]","KID;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"unsigned int(8)","IV[IV_size];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"unsigned int(8)[16]","md5sum;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"unsigned int(8)[16] message_id;"]},{"entry":[{},"\/\/ encryption may start here"]},{"entry":[{},"if ( schedule != 0x00 )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"unsigned int(64) ntp_time;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"unsigned int(8)","argc;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"string argv[argc];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The extended \u2018mesg\u2019 box above includes the following parameters or fields:","message_scheme_URI: this is a unique identifier of a messaging scheme or structure for the message box. This identifier is used to find the correct message handler for the message box as described below;","message_scheme_version: this field or parameter is the version of the above scheme; is_encrypted: if this field is set to 1, then the message information is encrypted, starting from the message_id field;","is_cancelled: this field indicates that message callback (form client to server\/network) with a given message identifier (message_id) is cancelled. The callback message information is discarded if there is no active message with message_id. A callback message is considered active until the callback is completed;\n\nschedule: this field indicates scheduling information that is configurable as shown in Table 1 below;\n\nmessage_id: this is a unique identifier of a given message box;\n\nIsEncrypted: this field indicates an encryption state, e.g., as defined in ISO\/IEC 23001-7;\n\nIV_size: this field is the initialization vector size, e.g., as defined in ISO\/IEC 23001-7;\n\nKID: this is an identifier of a key used for encryption of the message box;\n\nInitializationVector[IV_size]: this is an initialization vector;\n\nmd5sum: this field indicates a MD5 sum of the encrypted message. It may be needed in order to ensure the correctness of a decrypted message; and\n\nntp_time: this indicates a callback timing for the scheduled message callback and is used according to the schedule field, as shown in Table 1.\n",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["schedule",{}]},{"entry":["field","callback information"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Callback is immediate"]},{"entry":["1","Callback is scheduled to be completed before a given absolute"]},{"entry":[{},"time t = ntp_time."]},{"entry":["2","Calback is scheduled before a given relative time (e.g., if the"]},{"entry":[{},"current time is T, and ntp_time is t, the callback should be"]},{"entry":[{},"performed before T+ t"]},{"entry":["3-7","Undefined"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":[{},{}]},"Additionally, a MessageHandler element is configured and used for handling the \u2018mesg\u2019 box above properly at the client. Handling the \u2018mesg\u2019 box includes decrypting and encrypted \u2018mesg\u2019 box and optionally indicating specific message scheme information that are not provided in the \u2018mesg\u2019 box. The MessageHandler element includes a plurality of attributes and is sent (in a descriptor, as shown below) from the client\/network to the client and processed by the client with the \u2018mesg\u2019 box to generate a suitable MPD URL (according to the event). There can be more than one message handling descriptor comprising a MessageHandler element and sent from server to client. The correct descriptor for a received \u2018mesg\u2019 box at the client is found by matching a value of a @ schemeIdUri attribute of the MessageHandler with the value of the message_scheme_URI field in the \u2018mesg\u2019 box. Table 2 shows attributes that are used in the MessageHandler element.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Element or Attribute Name","Use","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{"b":"MessageHandler"},{},{}]},{"entry":["@schemeIdUri","M","Identifies the messaging scheme."]},{"entry":["@schemeVersion","O","Identifies the version of the"]},{"entry":[{},{},"scheme. Absence of"]},{"entry":[{},{},"@schemeVersion attribute"]},{"entry":[{},{},"indicates that all versions are"]},{"entry":[{},{},"accepted."]},{"entry":["@messageCallbackUrTemplate","O","Specifies a template for a"]},{"entry":[{},{},"callback URL."]},{"entry":["@messageKeyUrlTemplate","O","Specifies a template for URL"]},{"entry":[{},{},"used to retrieve the key. The"]},{"entry":[{},{},"key format is a hexadecimal"]},{"entry":[{},{},"number."]},{"entry":["@value","O","Scheme-specific information."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"Legend of Table 2:"},{"entry":"For attributes: M = Mandatory, O = Optional, OD = Optional with Default Value, CM = Conditionally Mandatory."},{"entry":"For elements: <minOccurs> . . . <maxOccurs> (N = unbounded)"},{"entry":"Elements are ; attributes are non-bold and preceded with an @"}]}}}}},"The @messageCallbackUrTemplate attribute of the MessageHandler may be based (in the message handling descriptor) on at least one of the template variables $MessageID$, $KeyID$, and $Argv[N]$, which can be used by the client for configuring A MPD URL to reload or update the MPD at the client. The template variables can be assigned values (at the client) from the fields in the \u2018mesg\u2019 box, as described in Table 3.",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["$<Identifier>$","Substitution parameter","Format"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["$MessageID$","This identifier is substituted by the","The format tag"]},{"entry":[{},"Message ID as specified in the","may be present."]},{"entry":[{},"\u2018mesg\u2019 box. The format is a","If no format tag"]},{"entry":[{},"canonical UUID, as specified in","is present, a"]},{"entry":[{},"ITU-T Rec. X.667 | ISO\/IEC","default format"]},{"entry":[{},"9834-8.","tag with width ="]},{"entry":[{},{},"1 is used."]},{"entry":["$Argv[N]$","This identifier is substituted with the","The format tag"]},{"entry":[{},"escaped content of the Narg field","may not be"]},{"entry":[{},"of the \u2018mesg\u2019 box. If N is outside the","present."]},{"entry":[{},"range of [0 . . . mesg.argc], the value",{}]},{"entry":[{},"of $Argv[N]$ is an empty string.",{}]},{"entry":["$KeyID$","This identifier is substituted by the","The format tag"]},{"entry":[{},"Key ID as specified in the \u2018mesg\u2019","may not be"]},{"entry":[{},"box. The format is a canonical UUID,","present."]},{"entry":[{},"as specified in ITU-T Rec. X.667 |",{}]},{"entry":[{},"ISO\/IEC 9834-8. The value of",{}]},{"entry":[{},"$KeyID$ is assumed to be an empty",{}]},{"entry":[{},"string if mesg.is_encrypted = 0."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In an embodiment, to force change of content played by the DASH client, MPD update or reload is used as defined by the server or network to the client in a MessageHandler element or descriptor (e.g., in a message) with the following uniform resource name (URN): \u201curn:mpeg:dash:mpdupdate\u201d. The corresponding MessageHandler element (for handling the \u2018mesg\u2019 box) includes the @messageCallbackUrTemplate attribute but not the @value attribute. A HTTP GET request for a URL constructed from the messageCallbackUrTemplate attribute returns a valid MPD. Similar rules as in ISO\/IEC 23009-1 sec. 5.4 apply to MPD update via this URL.","For instance, to establish a forced MPD update, the content of the \u2018mesg\u2019 box includes:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mesg.message_scheme_URI = \u201curn:mpeg:dash:mpdupdate\u201d"]},{"entry":[{},"mesg.message_scheme_version = 0;"]},{"entry":[{},"mesg.is_encrypted = 0;"]},{"entry":[{},"mesg.is_signed = 0;"]},{"entry":[{},"mesg.schedule = 0;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},"In an embodiment, the arguments in the \u2018mesg\u2019 box can be mapped to a SCTE-35 segmentation descriptor as follows:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mesg.arg[0] = <segmentation descriptor id>"]},{"entry":[{},"mesg.arg[1] = segmentation_event_id;"]},{"entry":[{},"mesg.arg[2] = segmentation_type_id;"]},{"entry":[{},"mesg.arg[3] = segment_num;"]},{"entry":[{},"mesg.arg[4] = segments_expected;"]},{"entry":[{},"mesg.arg[5] = segmentation_upid_type, segmentation_upid( );"]},{"entry":[{},"mesg.arg[6] = segmentation_duration; (if not present)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In another embodiment, a simpler (and maybe less efficient) mapping between the arguments in the \u2018mesg\u2019 box and a message descriptor can be established as follows:",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"mesg.arg[0]"},{"entry":"=\u201chttps:\/\/cdn1.example.com\/mpd\/segmentation?event_id=0x12345678&type_id=0x10& [...],"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"where the @messageCallbackUrlTemplate includes the variable \u201c$Arg[0]$\u201d. In such a case, message encryption is recommended in order to prevent attacks (e.g., man-in-the-middle attacks) that can result in maliciously constructed URLs or HTTP queries.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2","b":["200","201","210","220","202","210","220","220","210","203","220","220","204","220","205","220","206","207","220"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["300","300","301","301","310","320","330","360"]},"The CPU  may comprise any type of electronic data processor. The memory  may comprise any type of system memory such as static random access memory (SRAM), dynamic random access memory (DRAM), synchronous DRAM (SDRAM), read-only memory (ROM), a combination thereof, or the like. In an embodiment, the memory  may include ROM for use at boot-up, and DRAM for program and data storage for use while executing programs. In embodiments, the memory  is non-transitory. The mass storage device  may comprise any type of storage device configured to store data, programs, and other information and to make the data, programs, and other information accessible via the bus. The mass storage device  may comprise, for example, one or more of a solid state drive, hard disk drive, a magnetic disk drive, an optical disk drive, or the like.","The processing unit  also includes one or more network interfaces , which may comprise wired links, such as an Ethernet cable or the like, and\/or wireless links to access nodes or one or more networks . The network interface  allows the processing unit  to communicate with remote units via the networks . For example, the network interface  may provide wireless communication via one or more transmitters\/transmit antennas and one or more receivers\/receive antennas. In an embodiment, the processing unit  is coupled to a local-area network or a wide-area network for data processing and communications with remote devices, such as other processing units, the Internet, remote storage facilities, or the like.","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications and combinations of the illustrative embodiments, as well as other embodiments of the invention, will be apparent to persons skilled in the art upon reference to the description. It is therefore intended that the appended claims encompass any such modifications or embodiments."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, and the advantages thereof, reference is now made to the following descriptions taken in conjunction with the accompanying drawing, in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
