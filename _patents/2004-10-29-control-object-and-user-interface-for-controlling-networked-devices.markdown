---
title: Control object and user interface for controlling networked devices
abstract: A system for including a set of software components and an application programming interface for the logical networked representation and implementation of a system of smart devices within a home or small office environment. The software components include a control object component and a user interface component. The control object is a software object capable that carries out communication, accepts and issues control messages. The control object allows a user to remotely control or query a physical device for which the specific control object has responsibility and for maintaining logical and physical connections and control of the device. The user interface supplies a coherent and transparent interface across all network media and topologies. The user interface is capable of communicating with any control object that it identifies as being controllable in a given system. The communication may be across a logical network or may be local to a particular device. The user interface takes on the “personality” of the physical device for which the attendant control object carries a logical and physical mapping and control responsibility.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07404187&OS=07404187&RS=07404187
owner: Microsoft Corporation
number: 07404187
owner_city: Redmond
owner_country: US
publication_date: 20041029
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED CASES","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation of U.S. Patent application Ser. No. 09\/339,649 filed Jun. 24, 1999 now U.S. Pat. No. 6,823,519, entitled \u201cControl Object And User Interface For Controlling Networked Devices\u201d which is herein incorporated by reference in its entirety.","The present invention relates generally to facility management systems such as home automation systems, and, more particularly, to an object oriented design software control object within such systems that provides for a logical representation and implementation of a network of physical devices.","In the past, environments having networked equipment were typically limited to commercial and industrial sites. Such equipment was typically complex and highly sophisticated computer controlled machines that utilized networks to coordinate manufacturing activities. However, unlike the commercial and industrial setting, the typical consumer setting included devices and appliances that were fairly unsophisticated and that were operated by a user on a one-to-one basis. To achieve the consumer device's specific function, the user had to physically interact with the device by, for example, pressing buttons on a coffee maker to preset the machine to turn ON at a specific time.","Early advances in consumer devices and appliances were limited to remote control devices that, at first, were wired to the device, and later used infrared (IR) communications to transmit commands. However, the remote control devices still forced the user to interact with their respective devices on a one-to-one basis. In addition, most hand-held remote control devices were proprietary, which required separate remote controllers for each consumer product. Further advancements included universal remote controllers that were capable of being programmed to control many consumer devices. However, universal remote control devices were limited in that they were typically not able to control devices other than entertainment equipment.","Lately, consumer appliances have become more sophisticated because of the decreased size and costs of computer-related components such as microprocessors. These new consumer devices include the so-called \u201csmart\u201d devices that, like the sophisticated commercial and industrial machinery, are capable of executing predefined tasks and capable of communicating over a network infrastructures. An example of a system is smart devices is CEBus\u00ae, which may utilize household powerlines to transport messages between compliant CEBus\u00ae household devices. CEBus\u00ae is implemented per EIA IS-60 for home automation. The CEBus\u00ae system utilizes controller and receptacle units to communicate and control CEBus\u00ae compliant devices. The receptacle units are connected to standard household receptacles and the command and control information is communicated over the powerlines. However, the CEBus\u00ae system is a hardware solution, which requires that the compliant devices be designed to be compatible with the standard. As a further limitation, the CEBus\u00ae controller is a special-purpose device. While this is an advancement over prior solutions, this hardware solution limits the upgradablity of the network and the devices, and fails to provide a solution for non-compliant smart devices.","A further example of a system that is intended to network devices is Jini\u2122, which is based on Java\u2122. Jini\u2122 uses Java Remote Method Invocation protocols to move code around a network of devices. Network services run on top of the Jini\u2122 software architecture such that devices and applications may register with the network via a lookup service. However, the Jini\u2122 system is limited in that each device must register with the lookup service for other devices to discover them. Thus, each device is not aware of other devices on the network without first pointing to the lookup service. Further, there is no general purpose user interface that enables a user to interact and control all of the networked devices from a remote location.","In view of the above, there is a need for a system whereby once isolated and non-remotely controllable and configurable devices are able to share information with and about each other, and are able to provide and accept common command, control, and communication though a network. There is also a need for a system that provides the networked devices with the ability to operate autonomously in the case of a network failure, or for localized control and operation. There is also a need for a system that provides users with a method to control devices with a general purpose device (e.g., personal computer), and that provides a method to communicate over open network infrastructures. The present invention provides a solution to address the limitations and shortcomings of the prior art.","The present invention includes a set of software components and an application programming interface for the logical networked representation and implementation of a system of smart devices. The software components may be generally expressed as a control object component and a user interface component. The control object (CO) is a software object that may carry out communication, and accept and issue control messages. The control object allows a user to remotely control or query a physical device for which the specific control object has responsibility and also maintains logical and physical connections and control of the device.","The second component is the user interface, or consumer presentation display (CPD), which supplies a coherent and transparent interface across all network media and topologies. The user interface is capable of communicating with any control object that it identifies as being controllable in a given system. This communication may be across a logical network or may be local to a particular device. The user interface takes on the \u201cpersonality\u201d of the physical device for which the attendant control object carries a logical and physical mapping and control responsibility.","In accordance with an aspect of the invention, the control object may be adapted to bind to any designed physical transport mechanism for communication with other control objects and is adapted to be embedded in a container application and executed within a wrapper executable. In addition, the control object is preferably polymorphic, and thus is able to take on the logical attributes and command and control capabilities of any of the devices.","The control object may be a component object model object (COM) that exists within the operating system. This preferably provides wrappers for exposed clients and enables the use of method calls and exposed properties by the operating system or other application software programs. The control object may include extensions such that the control object may logically and physically pass a control signal to the devices and send a message to one of any electronic controllers or interfaces provided in the devices.","In accordance with a feature of the invention, the first registered control object in the system may be designated a manager object, which performs list management to maintain and administer the list of control objects by periodically broadcasting the list to all registered control objects on the system. The list contains the logical attributes, an identifier and an address of all registered control objects on the system. The Identifiers are preferably globally unique random numbers generated at runtime, so as to identify each registered object \u201con-the-fly.\u201d This globally unique identifier may be also used with directed object-to-object communication, where a specific object must communicate with another specific object. Preferably, the random generator is a linear congruential generator; i.e., f(z)=16807 z mod (2**31\u22121).","In accordance with another feature of the present invention, the user interface is adapted to control the devices either locally or across the network. The user interface may also be adapted to control all of the devices that are functioning on the network via the control object. In addition, the user interface preferably supplies a coherent and transparent interface across all network media and topologies. Further, if the devices include a display by which the device may be controlled, in accordance with an aspect of the invention, the display may be adapted to control other devices via the network and the control objects.","In accordance with an aspect of the present invention, a method of registering the control objects is provided, which includes broadcasting a control message from an enabled control object to inform other registered control objects that the enabled control object exists; determining if the enabled control object is a first registered control object; and appointing the first registered object as a manager object to administer the list.","The manager object may send the list to any new control object that registers with the system; periodically broadcast the list to all registered control objects; and perform a synchronization to force all other control objects to synchronize to the list. An election process is held if the manager object ceases to function. The election process may comprise promoting a second registered control object to the manager object; promoting all other control objects up one position on the list; and distributing the list to all registered control objects on the system. If any other control object ceases to function, the list is preferably distributed to all registered control objects if any control object other than the manager object ceases to function.","Other features of the invention are described below.","The present invention provides for a software system that may be implemented on any network infrastructure such that networked devices may be remotely controlled by, e.g., a general purpose computer, and a system whereby the networked devices may share information with and about each other. The present invention provides and accepts common command, control and communication through the network while retaining the ability of each device to operate autonomously.","Computer Environment",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 1","FIG. 2","FIGS. 3-12"]},"Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","As shown in , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Home Area Network Environment Employing a Control Object and User Interface","As noted, the computer  described above can be deployed as part of a computer network within which the system of the present invention may be implemented. In general, the above description applies to both server computers and client computers deployed in a network environment. As will become evident, the above description may also apply, in part, to appliances and devices attached to the network that have the ability to accept and execute software instructions.  illustrates one such exemplary network environment in which the present invention may be employed.","The present invention may be implemented in, for example, a household, a small office, or other similar environment. As illustrated, several devices are attached to the network  that may be controlled by users within the home or office. Such devices include, for example, a game device , a video device (VCR) , a telephone , a smart AC outlet , an answering machine , and a television , which may be connected to the network  as client devices. Other consumer devices, small office machines, and security devices may be connected to the network .","Also connected to the network are general purpose computing devices that may control the above-identified devices -. Such devices include a notebook (laptop) computer , a hand-held computing device , and a desktop PC\/server . The notebook computer  preferably operates utilizing Windows\u00ae 95\/98 or Windows NT\u00ae4.0 Workstation (or higher) operating systems. The hand-help computing device  preferably operates running Windows\u00ae CE 2.0 (or higher) operating system. The PC\/Server  preferably runs the Windows NT\u00ae 4.0 Workstation or Server (or higher) operating system.","As illustrated, the devices , ,  and - are connected to a network medium . The physical transport of the medium  is preferably Ethernet, since this topology is in ubiquitous use. However, the present invention is not limited to any particular physical network technology and may include fiber optic, X.10, and serial. This system  preferably utilizes TCP and Internet protocol (IP) as a common network layer, although it is not limited to the TCP\/IP transport protocol, and the devices , ,  and - are preferably identified by IP addresses.","In accordance with the present invention, each of the above consumer devices - is represented by a control object CO-CO. As will be described in greater detail below, the control objects CO-CO are software objects designed to logically take on the physical attributes of devices - attached to the network .","Although not shown in , the devices - preferably include a microprocessor\/microcontroller and a read-only memory containing an embedded operating system (e.g., Windows\u00ae CE 2.0 (or higher)). The embedded operating system and\/or an application running on the operating system serves to control the functions of the devices -. The methods provided by the control objects CO (discussed below) may be executed by the operating system or the software application. It is preferable that the operating system of the devices include application programming interfaces (APIs) to enable each device's attendant control object CO to control the device based on the information contained within the control object CO. Such a structure would allows device manufacturers to use the control object CO, application software, and\/or the device operating system to implement functions that would be appropriate for the manufacturer's specific device or service (e.g., providing play and record functions within the VCR ).","The present invention also provides for a user interface to allow users to interact and control the devices -. The general purpose computing devices ,  and  may act as the user interface or \u201cconsumer presentation displays\u201d (CPD) ,  and  to provide a coherent and transparent interface to users across all network media  and topologies. The user interface will be described in greater detail below.","Control Object Architecture and User Interface Control Object","The control object and its operation within the network  will now be described in greater detail with reference to . The control object CO logically represents the attributes of its associated physical device in order to provide for local and\/or remote control of the device. The control object CO additionally maintains a list of other control objects CO registered on a given system such that any one control object may logically control any physical device connected to the system network. An exemplary implementation of the control object CO will now be described.","The control object CO supports a layered software model that allows multiple transport layers to bind to the core object at runtime. The control object CO is preferably polymorphic, meaning that it can take on the logical attributes and command and control capabilities of any particular real-world device. The control object CO also is adapted to bind to any designed physical transport mechanism for communication with other control objects or control programs. The control object is further preferably capable of being embedded in a container application and\/or executed within a wrapper executable. When the control objects CO-CO are active, each carries out communication, accepts and issues control messages, contains data specific to the devices on the network, and allows a user to remotely control or query the physical device for which the specific control object CO has responsibility for maintaining logical connections and control.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIGS. 3 and 4","b":["156","154","152","36","152","170","36"]},"Turning to the exemplary embodiment, the control object CO includes a core  that has a COM interface to access the operating system kernel and COM services . The operating system kernel schedules activities (threads) for the computer processor to perform, and it handles interrupts and exceptions. If the computer has multiple processors, the kernel synchronizes activity among the processors to optimize performance. COM provides a binary standard for component interoperability by allowing any programming language that can call functions via pointers (e.g., C, C++, Small Talk\u00ae), Ada, and Basic) to interoperate with other components written to the same binary standard. The control object CO preferably utilizes COM services  and the associated interfaces, because the interfaces have predefined behaviors and responsibilities that allow applications to interact with each other and the operating system, are programming language-independent, and are provided on multiple platforms (e.g., Microsoft\u00ae Windows\u00ae, Microsoft\u00ae Windows NT\u00ae, Apple\u00ae Macintosh\u00ae, UNIX\u00ae).","APIs  are called to translate to and from the transport DLLs  that provide for physical transport of information over the network medium . The APIs are a set of routines that request and carry out lower-level services performed by the operating system. In the case of Microsoft\u00ae Windows\u00ae operating systems, the APIs may also manage the application's windows, icons, menus, and dialog boxes.","The transport DLLs  are reusable functions that can be called from other executable code. Under the Win32\u00ae model used in Microsoft\u00ae Windows\u00ae 95\/98 and Windows NT\u00ae, the operating system maps the DLLs into the address space of a process when the process is starting up or while it is running. The process then executes the functions of the DLL.","The control object core  also communicates to the user interface , which operates as the aforementioned consumer presentation display (CPD). The user interface  communicates with registered control objects COs for each of the physical devices - connected to the media . A more detailed description of the CPD is provided below.","The control object CO provides wrappers (container)  for exposed clients and enables use of method calls and exposed properties  that may be used by e.g., an operating system or other application software program. The wrapper  is provided to envelope (i.e., wrap) a call to a function or program inside another function or program. Methods and exposed properties  are logical operations provided by an object. In object-oriented programming, an object invokes a method by sending a message that contains the receiving object and the name of the specific method to invoke. Objects use messages as the mechanism through which they interact. Preferably, the methods are data neutral, in that they all take arguments of type VARIANT. Such typing allows the methods to be interoperable with Visual Basic, Delphi, and other ActiveX objects, as well as with C\/C++, and applications such as Microsoft Internet Explorer (via HTML based scripting). An exemplary list of methods and exposed properties  available to the client container  are outlined in Table 1A below.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods Exposed to the Client Container"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"STDMETHOD(GetAvailableData)(VARIANT *iPos, VARIANT *iLen, VARIANT *Data);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method allows a client to receive data after a \u201cdata available\u201d event has"},{"entry":"\u2003\u2003\u2003\u2003\u2003been fired."},{"entry":"STDMETHOD(GetO6LastNode)(VARIANT *i);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method retrieves the position of the last CO in the global list (for"},{"entry":"\u2003\u2003\u2003\u2003\u2003enumeration)."},{"entry":"STDMETHOD(O6Load)(short *i, BSTR bAnnounce, BSTR IP, short *Port);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method loads the object (and its transport DLL) and initializes input"},{"entry":"\u2003\u2003\u2003\u2003\u2003parameters."},{"entry":"STDMETHOD(GetO6Member)(VARIANT *i, VARIANT *HOType, VARIANT *"},{"entry":"pAnnounce, VARIANT * bIP, VARIANT * iPort, VARIANT *iRand);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method allows a client to receive list information on any registered CO"},{"entry":"\u2003\u2003\u2003\u2003\u2003present on the network."},{"entry":"STDMETHOD(get_MyPositionInQueue)(\/*[out, retval]*\/ VARIANT *pVal);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method (property) allows the client to discover its position on the global"},{"entry":"\u2003\u2003\u2003\u2003\u2003list."},{"entry":"STDMETHOD(get_bstrIP)(\/*[out, retval]*\/ VARIANT *pVal);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method (property) allows a client to receive its CO's IP or GUID."},{"entry":"STDMETHOD(get_ControlEnumType)(\/*[out, retval]*\/ VARIANT *pVal);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method (property) allows a client to discover it's own enumerated type."},{"entry":"STDMETHOD(put_ControlEnumType)(\/*[in]*\/ short newVal);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method (property) allows a client to set its enumerated type."},{"entry":"STDMETHOD(Deactivate)( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method allows a client to deactivate (deregister) the associated CO."},{"entry":"STDMETHOD(Activate)( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method allows a client to activate (register) the associated CO."},{"entry":"STDMETHOD(SendData)(short *Pos, BSTR *Data);"},{"entry":"\u2003\u2003\u2003\u2003\u2003This method allows a client to send arbitrary data to another CO (client)."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In general, when a COM object notifies its clients that something has happened, the COM object sends out a message. The message is called an event and the process of sending the message is referred to as \u201cevent firing.\u201d In accordance with the present invention, Table 1B outlines an exemplary list of methods (i.e., logical operations) that cause event firings on behalf of the client container .",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1B"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods that Cause Event Firings"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"STDMETHOD(Event_Activate)( );"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003The control object CO is activated."]},{"entry":[{},"STDMETHOD(Event_Loaded)( );"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003The control object CO is loaded and initialized."]},{"entry":[{},"STDMETHOD (Event_DeActivate)( );"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003The control object CO is deactivated and deregistered."]},{"entry":[{},"STDMETHOD (Event_DataAvail)( );"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003There is incoming data available."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The interaction between the control object CO and the transport DLLs  is illustrated in greater detail with reference to  and Tables 2A and 2B below. As shown in , Input and Output APIs and call transport DLLs that provide for core input and output management and the transport routines and . The APIs  and transport DLLs  are preferably provided by the operating system for the purpose of transporting data. The transport routines and , together with physical media routines , provide access to the physical media  by providing the necessary transport protocol of the media (e.g., IP, serial, etc.). As noted above, the data and events that need to be communicated by the control object CO are embodied as callbacks and function (method) returns and the control object CO will typically need to load, activate, deactivate, and pass data to and from the transport.",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Calls into the Transport DLL"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TYPEDEFS:"},{"entry":"typedef VOID * (WINAPIV* LPFNDLLFUNC1)(VOID *, VOID *);"},{"entry":"typedef VOID * (WINAPIV* LPFNDLLFUNC2)(VOID *,int *,"},{"entry":"int *,LPSTR,LPSTR,int *, int *);"},{"entry":"typedef INT (WINAPIV* LPFNDLLFUNC3)(VOID *);"},{"entry":"typedef VOID (WINAPIV* LPFNDLLFUNC4)(VOID *,int);"},{"entry":"typedef VOID (WINAPIV* LPFNDLLFUNC5)(VOID *,LPSTR);"},{"entry":"typedef VOID * (WINAPIV* LPFNDLLFUNC6)(VOID *,int *,int *,"},{"entry":"LPSTR);"},{"entry":"typedef VOID * (WINAPIV* LPFNDLLFUNC7)(VOID *, VOID *, int i,"},{"entry":"LPSTR bAnnounce, LPSTR IP, int Port);"},{"entry":"typedef VOID * (WINAPIV* LPFNDLLFUNC8)(VOID *, int * i,"},{"entry":"int *j, LPSTR Data);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2B"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Transport Call Definitions"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"extern \u201cC\u201d _declspec(dllexport) void * CPPLoad(void * uPtr, void * uPtrA, int i, LPSTR"},{"entry":"pAnnounce, LPSTR pIP, int Port)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Loads the Physically neutral part of the transport DLL routines, including"},{"entry":"\u2003\u2003\u2003\u2003\u2003linked list and object instantiation. Fires a \u201cloaded\u201d event when done."},{"entry":"extern \u201cC\u201d _declspec(dllexport) void * CPPActivate(void * uPtr, void * uPtrA)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Activates the physical transport. Fires an \u201cactivated\u201d event when done."},{"entry":"extern \u201cC\u201d _declspec(dllexport) void * CPPDeactivate (void * uPtr, void * uPtrA)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Unloads the physical transport, deregisters the object, and returns the object to"},{"entry":"\u2003\u2003\u2003\u2003\u2003a neutral state."},{"entry":"extern \u201cC\u201d _declspec(dllexport) void * CPPSendData (void *uPtr, int *i, int *iLen, LPSTR"},{"entry":"bPtrA)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Sends actual data to the transport DLL for relay to another CO on the network."},{"entry":"extern \u201cC\u201d _declspec(dllexport) void * GetO6Member (void *uPtr, int *i, int *j, LPSTR"},{"entry":"bPtrA, LPSTR"},{"entry":"\u2003\u2003\u2003\u2003\u2003Receives CO network member data based upon the member's position in the"},{"entry":"\u2003\u2003\u2003\u2003\u2003global list."},{"entry":"extern \u201cC\u201d _declspec(dllexport) int GetControlEnumType (void *uPtr)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Returns the enumerated CO type (i.e. VCR, LIGHT, STEREO, etc.)"},{"entry":"extern \u201cC\u201d _declspec(dllexport) void PutControlEnumType (void *uPtr, int i)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Registers the enumerated CO type (i.e. VCR, LIGHT, STEREO, etc.)"},{"entry":"extern \u201cC\u201d _declspec(dllexport) void GetIP (void *uPtr, LPSTR bPtrA)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Returns the IP address of the local object. If not IP based, this API returns a"},{"entry":"\u2003\u2003\u2003\u2003\u2003GUID that is generated for the instantiation of the local object."},{"entry":"extern \u201cC\u201d _declspec(dllexport) int GetPosition (void *uPtr)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Returns the local object's position in the global list."},{"entry":"extern \u201cC\u201d _declspec(dllexport) int GetO6LastNode (void *uPtr)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Returns the maxima of the global list."},{"entry":"extern \u201cC\u201d _declspec(dllexport) void GetData (void *uPtr, int *iPos, int * iL, LPSTR uData)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Returns data that has been received from another CO, and a data-available"},{"entry":"\u2003\u2003\u2003\u2003\u2003event has been fired for."},{"entry":"extern \u201cC\u201d void_cdecl SendDataToClient(int i, int j, void * buff)"},{"entry":"\u2003\u2003\u2003\u2003\u2003Callback for certain instances (architecturally) of the CO. It takes the place of a"},{"entry":"\u2003\u2003\u2003\u2003\u2003manual GET on the inbound data received from another CO."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In addition to the control object's inter-communication capabilities provided by the APIs  and transport DLLs , the control objects CO in a system are capable of upper and lower edge control functions. Upper edge control functions include interaction with the user interface , and lower edge control functions include interaction with the network media  and the devices -. The control functions are related to the control object's logical representation of its associated physical device. In addition, by using extensions, a particular control object CO may logically and physically pass a control signal to a physical device directly, or send a message to the physical device's electronic controller or interface.","Referring again to , the control object CO also performs list management . List management is a feature of the invention whereby each control object CO maintains a list of its own state and the states of all other registered control objects existing in a live state on the network . An exemplary implementation of list management  is outline with respect to .","Referring to , when a physical device - is first turned ON and functioning, its associated control object CO-CO is enabled (S.). The control object broadcasts a control message to inform other registered control objects that it exists (S.). This will allow all other control objects within a given system to remain (or become) aware of each other's existence and world-state. If the control object CO is the first control object (S.) to register with the system  (i.e., no other control objects are listed), the control object CO becomes a \u201cmanager object\u201d (S.). In addition to the control object's primary control duties with regard to the physical device it represents, the first control object CO (i.e., the manager object) maintains and administers a list of all other control objects. The list preferably contains an identifier (ID) and an IP address for each registered control object on the networked system . This feature makes the list of control objects self-administering. The identifiers are preferably globally unique random numbers generated at runtime, so as to identify each registered object \u201con-the-fly.\u201d This globally unique identifier may be also used with directed object-to-object communication, where a specific object must communicate with another specific object. Preferably, the random generator is a linear congruential generator; i.e., f(z)=16807 z mod (2**31\u22121).","The manager object responsibilities, however, are deliberately limited to allow each control object CO as much autonomy as it requires or is capable of having in view of the device it is controlling. The manager object sends a copy of the world-state list to any new control object CO that registers with the system . Also, the manager object periodically broadcasts the list to registered control objects COs and performs a synchronization (i.e., takes a census) to force all other control objects to synchronize to the updated list (S.).","The manager object position is an elected position and all control objects COs have the ability to become the manager object should the manager object be disconnected or otherwise unable to perform its duties (S.). The election of a manager object preferably is performed as illustrated in  (S.).","Referring now to , when the manager object (e.g., CO) drops out of the system , the second registered control object (CO) becomes the manager object. All other control objects move up one position on the list (i.e., CO becomes CO; CO becomes CO; and CO becomes CO, etc.) and a new list is created. The newly created list is then replicated to all control objects on the system . However, if, for example control object CO drops out of the system and control object CO remains, no election is held, but a new list is replicated and passed to all registered control objects. As further indicated in , when a \u201cheartbeat\u201d (i.e., a periodic message from the manager object indicating that the manager object is alive) is not provided from the manager object within the specified arbitrary time limit, the first device to timeout waiting for the manager heartbeat message will automatically elect itself manager and immediately send an updated list to all other objects. In the example of , if the timeout period expires for Object  prior to a heartbeat being received from the manager object. Accordingly, Object  elects itself as manager object and informs the other objects by sending a new list to all of the registered objects. This can mean, in cases where the manager is not actually inoperative, but rather just very busy, that manager object-related duties can pass to another registered object by way of default, rather than manager object failure.","Referring back to , after a new manager object is elected (S.) and appointed as a manager object (S.), the new manager object performs the duties discussed above with regard to S.. It is noted that there are preferably cross checks to ensure that if an manager object is rudely pulled out of service without a normal shut down message (e.g., its respective device ceases functioning without notice at S.), that the system  will perform the recovery election of . This will ensure the immediate determination and election of a manager object and that newly promoted manager object will take a new census of the remaining objects such that each control object will have an up-to-date list of other control objects.","Referring back to S., when the control object CO registering with the system  is not the first object, it receives a list of registered objects from the manager object and will respond to queries from the manager object or other objects (S.) while in an active state. Each control object CO preferably provides information only if queried by another object. All subordinate objects receive a \u201cheartbeat\u201d message from the manager object. If the heartbeat is not sent to the subordinate object in a pre-determined amount of time, the subordinate objects will automatically hold an election and one of these subordinates will become the manager (in the case where the manager object ceases to exist in a non-failsafe way).","It is preferable that all control objects CO are peers in the system , and any physically dependent component that is less than a peer has a controller, which assumes the peer role. Further, when a physical device - is to be turned OFF and to cease functioning, it is preferable that the associated control object CO-CO broadcast a message to inform other objects that it no longer exists and should be removed from the world-state list.","Each control object preferably will be able to query any other CO to retrieve the other CO's state, dependencies, and possible actions. If no response is received, the CO will be considered to have gone to sleep, which will cause the manager CO to rebuild and present a new list to the remaining COs.","User Interface","The user interface  (consumer presentation display ,  and ) enables a user to control all devices - attached to the network via registered and controllable control objects. The consumer presentation display ,  and  (CPD) supplies a coherent and transparent interface across all network media and topologies. This communication and control may be across a logical network or may be local to a particular physical device. The CPD takes on the personality of a physical device, for which the attendant control object CO carries out logical and physical mapping and control responsibility. In the case of, e.g., the VCR , the CPD  contacts the VCR control object CO, queries the control object CO for capabilities and state information, and then presents a user with an appropriate display. The appropriate display in this example may include tape operation buttons and programming menus, which would be displayed by the CPD  on the laptop . That CPD would be capable of showing status for, and issuing commands to, the VCR  (through the registered control object CO).","The CPDs ,  and  are primarily expressed in this invention as a component of the upper-edge control mechanism. It is preferable that the operating system running on the laptop , pen computer (hand-held computer) , or desktop PC  contain a set of APIs to retrieve information from the control object CO and to generate the display of the CPD ,  and . In addition, the CPD preferably uses HTML formatting techniques and may be programmed in Visual BASIC, C\/C++, or other programming language. Information from a particular control object CO may be retrieved by calling the appropriate API, and based on the information retrieved, the CPD formats an appropriate screen for the user to control the device.","Although the general purpose computing devices are shown as CPDs , , , it is noted that any device having display capabilities may act as a CPD. In particular, because the CPD retrieves information from the control objects CO-CO, and the control objects CO-CO all perform list management  and are aware of their world-state and the world-state of all other objects, a display provided with, e.g., the game device  may be used to operate the video device . This feature is provided by the APIs included in the game device operating system or the software application controlling the game device , which enables the game device's attendant control object CO to control the video device  based on the world-state list information contained in the control object CO. The control object CO would communicate command and control information to the control object CO to accomplish physical control of the video device . Further, the display on the game device  would be formatted to the personality of the VCR control display (i.e., display tape operation controls, etc.) in accordance with the world-state information.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIGS. 9A","FIGS. 2-7","FIGS. 9A"],"b":["9","10","10","11","12","9","10","10","11","12"]},"It is noted that the foregoing examples have been provided merely for the purpose of explanation and are in no way to be construed as limiting of the present invention. While the invention has been described with reference to preferred embodiments, it is understood that the words which have been used herein are words of description and illustration, rather than words of limitations. Further, although the invention has been described herein with reference to particular means, materials and embodiments, the invention is not intended to be limited to the particulars disclosed herein; rather, the invention extends to all functionally equivalent structures, methods and uses, such as are within the scope of the appended claims. Those skilled in the art, having the benefit of the teachings of this specification, may effect numerous modifications thereto and changes may be made without departing from the scope and spirit of the invention in its aspects.","For example, while the devices shown to be clients and controllable by the CO have been illustrated as a game device, a video device, a telephone, a smart AC outlet, an answering machine, and a television, other devices may be controlled include, but not limited to personal computers, security systems, dishwashers, etc. In addition, other operating systems than the Microsoft\u00ae Windows\u00ae family may be provided with the appropriate APIs to implement the features of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of the preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings an embodiment that is presently preferred, in which like references numerals represent similar parts throughout the several views of the drawings, it being understood, however, that the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIGS. 9A","FIGS. 2-7"],"b":["9","10","10","11","12"]}]},"DETDESC":[{},{}]}
