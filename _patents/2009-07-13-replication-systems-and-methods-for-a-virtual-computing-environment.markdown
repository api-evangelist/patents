---
title: Replication systems and methods for a virtual computing environment
abstract: Hybrid replication systems and methods for a virtual computing environment utilize snapshot rotation and differential replication. During snapshot rotation, data modifications intended for a source virtual machine disk (VMDK) are captured by a primary snapshot. Once a particular criterion is satisfied, the data modifications are redirected to a secondary snapshot while the primary snapshot is committed to both source and target VMDKs. The secondary snapshot is then promoted to primary, and a new secondary snapshot is created with writes redirected thereto. If the VMDKs become out-of-sync, disclosed systems can automatically perform a differential scan of the source data and send only the required changes to the target server. Once the two data sets are synchronized, snapshot replication can begin at the previously configured intervals. Certain systems further provide for planned failover copy operations and/or account for migration of a virtual machine during the copying of multiple VMDKs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08135930&OS=08135930&RS=08135930
owner: Vizioncore, Inc.
number: 08135930
owner_city: Buffalo Grove
owner_country: US
publication_date: 20090713
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims the benefit of priority under 35 U.S.C. \u00a7119(e) of U.S. Provisional Patent Application No. 61\/080,531, filed Jul. 14, 2008, U.S. Provisional Patent Application No. 61\/085,745, filed Aug. 1, 2008, and U.S. Provisional Patent Application No. 61\/168,343, filed Apr. 10, 2009, each of which is hereby incorporated herein by reference in its entirety to be considered part of this specification.","1. Field of the Invention","Embodiments of the invention relate to performing storage operations in a virtual environment and, in particular, to systems and methods for replicating data of one or more virtual machines.","2. Description of the Related Art","Many companies take advantage of virtualization solutions to consolidate several specialized physical servers and workstations into fewer servers running virtual machines. Each of these virtual machines can be configured with its own set of virtual hardware, such as a processor, memory, ports, and the like. In particular, a virtualization layer, or hypervisor, allocates the computing resources of one or more host servers to the virtual machines and further provides for isolation between such virtual machines.","Associated with each virtual machine is at least one virtual machine disk located on a datastore. This virtual machine disk can be copied, moved, archived or the like, such that certain vendors offer solutions that replicate virtual machine disks from a source datastore to a destination datastore. However, disruptions to replications systems during copying generally require the rebuilding of an entire replicated disk, which can consume a significant amount of time and processing resources.","In view of the foregoing, a need exists for systems and methods that replicate data in a virtual computing environment, while efficiently responding to unanticipated disruptions and\/or out-of-sync conditions that may occur. Moreover, there is a need for systems and methods that track and\/or account for migration of virtual machines during replication, backup or other data operations.","For example, systems and methods are disclosed herein for performing hybrid replication in a virtual computing environment by using a combination of two different replication methods: differential replication and snapshot rotation. During snapshot rotation, data modifications intended for a source server are captured by an open snapshot for, for example, a user-configured interval. Once that interval is reached, the data modifications are then redirected to a secondary snapshot while the primary snapshot is committed to both the source and target servers. At the next replication pass, the secondary snapshot is promoted to primary and sent to the target server. A new secondary snapshot is created, and writes are again redirected thereto. Embodiments of this method can allow for a faster replication process, in part, because no scanning of the datastores is required.","This snapshot rotation process can continue as long as the source and target virtual machine data remain synchronized. If the data becomes out-of-sync, embodiments of the invention can automatically perform a differential scan of the source data and send only the required changes to the target server. Once the two data sets are synchronized, snapshot replication can begin at the previously configured intervals.","In particular, in certain embodiments, a method for replicating a virtual machine disk is disclosed. The method comprises creating a first snapshot of source virtual machine disk and identifying an out-of-sync condition between the source virtual machine disk and corresponding replication data of a target virtual machine disk. The method further comprises creating a signature file associated with the replication data, comparing the target's signature with a signature file created on-the-fly with respect to the data of the source virtual machine disk, and identifying during the block-by-block comparison unmatched blocks between the source virtual machine disk and the target virtual machine disk.","For each of the unmatched blocks, the method further includes transmitting a copy of the particular data block from the source to the target virtual machine disk. Following resynchronization of the source and target, a second snapshot is created with respect to the source virtual machine data, and the first snapshot is committed to both the source and target. The second snapshot then houses changes directed to the source virtual machine disk for a particular period of time and\/or until the snapshot reaches a particular size. This snapshot rotation process following the resynchronization can be repeated to replicate changes to the data until a new out-of-sync condition is detected.","Moreover, certain systems and methods disclosed herein can be used in addressing problems that arise when the location of a virtual machine changes during a copy operation involving multiple virtual machine disks, such as during replication, backup, archive, recovery or other like operations. In particular, certain embodiments of the invention address the copying of data to or from a plurality of virtual machine disks in a shared storage environment.","In certain embodiments, a method is disclosed for replicating virtual machine data. The method comprises creating a first snapshot of one or more source virtual machine disks on a source storage device, wherein the one or more source virtual machine disks comprises a plurality of source data blocks, and detecting an out-of-sync condition between the one or more source virtual machine disks and one or more replicated virtual machine disks, the one or more replicated virtual machine disks comprising a plurality of target data blocks corresponding to the plurality of source data blocks. Following said detecting, the method comprises generating a target signature for each of the plurality of target data blocks of the one or more replicated virtual machine disks, wherein each target signature is indicative of data content of the particular target data block and storing each target signature in a target signature file.","For each of the plurality of source data blocks, the method further comprises generating a source signature indicative of data content of the particular source data block, comparing the source signature of the particular source data block with the target signature of the corresponding target data block, and updating the one or more replicated virtual machine disks with a copy of the particular source data block when the source signature does not match the target signature. The method also includes creating a second snapshot of the one or more source virtual machine disks; and committing the first snapshot to both the one or more source virtual machine disks and the one or more replicated virtual machine disks.","In certain embodiments, a method is disclosed for replicating virtual machine data. The method includes copying data from a source virtual machine disk to a target virtual machine disk by repeatedly alternating acts of: (i) creating a new snapshot of the source virtual machine disk, and (ii) committing a previously existing snapshot of the source virtual machine disk to both the source and target virtual machine disks until an out-of-sync condition is detected between the source and target virtual machine disks, the new snapshot capturing data modifications intended to be made to the source virtual machine disk during said committing. The method further comprises creating a second snapshot of the source virtual machine disk and comparing a source signature for each of a plurality of source data blocks of the source virtual machine disk with a target signature of a corresponding target data block of the target virtual machine disk. The method also includes updating the target virtual machine disk with a copy of each source data block whose source signature does not match the target signature of the corresponding target data block; creating a third snapshot of the source virtual machine disk; and committing the second snapshot to both the source and target virtual machine disks, wherein the second snapshot captures data modifications intended to be made to the source virtual machine disk during said comparing and updating.","In certain embodiments, a system is disclosed for replicating virtual machine data. The system includes a source system, a target system and a replication module. The source system includes a source virtual machine executing on a source host server, a source datastore in communication with the source virtual machine, and a source virtual machine disk stored on the source datastore and comprising data of the source virtual machine as a plurality of first data blocks. The target system includes a target datastore, and a target virtual machine disk stored on the target datastore and comprising data of a target virtual machine as a plurality of second data blocks.","The replication module includes is in network communication with the source system and the target system to replicate data from the source virtual machine disk to the target virtual machine disk. Moreover, the replication module is further programmed to repeat acts of instructing a creation of a new snapshot of the source virtual machine disk and instructing a commit of a previously existing snapshot to both the source and target virtual machine disks until an out-of-sync condition is detected between the source and target virtual machine disks, and following detecting of the out-of-sync condition: (i) compare first signatures for each of the plurality of first data blocks with second signatures of corresponding ones of the plurality of second data blocks to identify unmatched data blocks between the source and target virtual machine disks, and (ii) update the target virtual machine disk with a copy of each first data block that does not match the corresponding second data block.","In certain embodiments, a system is disclosed for replicating virtual machine data. The system includes means for creating a first snapshot of one or more source virtual machine disks on a source storage device, wherein the one or more source virtual machine disks comprises a plurality of source data blocks; means for detecting an out-of-sync condition between the one or more source virtual machine disks and one or more replicated virtual machine disks, the one or more replicated virtual machine disks comprising a plurality of target data blocks corresponding to the plurality of source data blocks; means for generating a target signature for each of the plurality of target data blocks of the one or more replicated virtual machine disks, wherein each target signature is indicative of data content of the corresponding target data block, wherein said generating means is further configured to generate a source signature for each of the plurality of source data blocks; means for comparing the source signature of each source data block with the target signature of the corresponding target data block; means for updating the one or more replicated virtual machine disks with a copy of the source data block when the source signature of the source data block does not match the target signature of the corresponding target data block; and means for committing the first snapshot to both the one or more source and replicated virtual machine disks.","For purposes of summarizing the disclosure, certain aspects, advantages and novel features of the inventions have been described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus, the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.","Embodiments of the invention disclosed herein include replication systems and methods for use in a virtual computing environment. For instance, certain embodiments provide for replication of one or more virtual machines, including, for example, configuration settings, operating system patches, applications, application data, and\/or other operating system level changes. Such replication systems can advantageously account for out-of-sync conditions that may occur between the source and replicated data.","For instance, embodiments of the invention can perform a hybrid replication process that includes snapshot rotation and differential replication. In one example, the replication process includes performing snapshot rotation to replicate data between a source, or primary, virtual machine (e.g., a virtual machine disk) and a target, or destination, virtual machine. When an out-of-sync condition is identified between the two virtual machines, a differential engine identifies the unmatched blocks and updates the data of the source and\/or target virtual machine(s). Following resynchronization, snapshot rotation replication is recommenced until a new out-of-sync condition is detected.","In certain embodiments, hybrid replication advantageously provides for a more robust and efficient replication process for virtual machine data. For instance, during periods of snapshot rotation replication, no scanning of the source or target data is required. Moreover, at least a portion of the replication process can be controlled by a replication server, such as through injecting one or more replication processes for execution on the source and\/or target virtual machines. The replication of data can further be performed from multiple hosts to a single host, different hardware platforms, and\/or from a single host to multiple hosts. Moreover, certain embodiments of the invention can utilize a shadow copy service to temporarily quiesce virtual machine applications to provide a transactionally consistent database for replication.","In certain embodiments, the hybrid replication systems and methods utilize a differential engine to synchronize either or both of the source or target files (e.g., virtual machine disk(s)). For instance, the differential engine can back up only the changed data blocks since a last full backup, thereby reducing the size of the backup files on disk.","Moreover, certain systems and methods disclosed herein can be used in addressing problems that arise when the location of a virtual machine changes during the copying of data on multiple virtual machine disks, such as during replication, backup, archive, recovery or other like operations. In particular, certain embodiments of the invention address the copying of data to or from a plurality of virtual machine disks in a shared storage environment.","The features of the systems and methods will now be described with reference to the drawings summarized above. Throughout the drawings, reference numbers are re-used to indicate correspondence between referenced elements. The drawings, associated descriptions, and specific implementation are provided to illustrate embodiments of the invention and not to limit the scope of the disclosure.","In addition, methods and functions described herein are not limited to any particular sequence, and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example, described blocks or states may be performed in an order other than that specifically disclosed, or multiple blocks or states may be combined in a single block or state.","For exemplary purposes, certain embodiments of the inventive systems and methods will be described with reference to VMWARE virtual infrastructures offered by VMware Inc. (Palo Alto, Calif.). However, it will be understood from the disclosure herein that the disclosed systems and methods can be utilized with other virtualization technologies, including, but not limited to, virtual environments using XEN and XENSERVER by Citrix Systems, Inc. (Fort Lauderdale, Fla.), ORACLE VM by Oracle Corporation (Redwood City, Calif.), HYPER-V by Microsoft Corporation (Redmond, Wash.), VIRTUOZZO by Parallels, Inc. (Switzerland), or the like.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1","b":["100","100","101","111","100"]},"As illustrated, the source system  comprises a source host server  hosting one or more virtual machines . For ease of explanation, only a single virtual machine will be described with reference to the source system . However, it will be understood from the disclosure herein that embodiments of the invention can include multiple virtual machines operating on one or more host servers.","The source host server  communicates with a source datastore  to interact with a virtual machine file system (VMFS)  storing information related to the virtual machine . In particular, the VMFS  further comprises a virtual machine disk (VMDK)  that includes the virtual hard drive for the virtual machine . The VMFS  can further include configuration data (e.g., .VMX files), file partition data, and\/or other data related to virtual machine  and\/or source host server .","The target system  comprises a target host server  hosting one or more virtual machines . As with the source host server , only a single virtual machine will be described hereinafter with reference to the target host server . In certain embodiments, the target virtual machine  is generally in a powered off state such that no applications are actively executing thereon to modify data of the target VMDK .","The target host server  is in communication with a target datastore  including a VMFS  that stores information related to the virtual machine . In particular, the VMFS  further comprises a VMDK  that includes data associated with the target virtual machine . The VMFS  can further include configuration data, file partition data, and\/or other data related to virtual machine .","In certain embodiments, either or both of the host servers ,  can comprise one or more computing devices configured to host one or more virtual machines executing above a hypervisor layer. In certain embodiments, the hypervisor is configured to decouple the physical hardware of the host server from the operating system(s) of the virtual machine(s). For instance, either or both of the host servers ,  can comprise an ESX server or other like virtualization platform provided by VMware Inc. Such abstraction allows, for example, for multiple virtual machines with heterogeneous operating systems and applications to run in isolation on the same physical machine.","In yet other embodiments, either or both of the host servers ,  can include a hosted architecture in which the hypervisor runs within a host operating system environment. In such embodiments, the hypervisor can rely on the host operating system for device support and\/or physical resource management. Examples of such hosted hypervisors can include, but are not limited to, VMWARE WORKSTATION and VMWARE SERVER by VMware, Inc., VIRTUAL SERVER by Microsoft Corporation, PARALLELS WORKSTATION by Parallels, Inc., or the like.","As illustrated, the source host server  and the target host server  communicate with each other via a network . In certain embodiments, the network  can comprise a local area network (LAN). In yet other embodiments, the network  can comprise one or more of the following communication means: internet, intranet, wide area network (WAN), public network, combinations of the same or the like. In addition, connectivity to the network  may be through, for example, remote modem, Ethernet, token ring, fiber distributed datalink interface (FDDI), asynchronous transfer mode (ATM), combinations of the same or the like. In certain embodiments, the network  is advantageously configured to support secure shell (SSH) tunneling or other protocol connections for the transfer of data between the source system  and the target system .","Also coupled to the network  is a replication server  configured to manage the replication of virtual machine data from the source system  to the target system . In certain embodiments, the replication server  comprises a WINDOWS-based computing device. In yet other embodiments, the replication server  comprises a LINUX-based server, an ESX server, combinations of the same or the like.","The illustrated replication server  comprises a differential engine  configured to perform differential replication and reconcile data discrepancies between the source system  and the target system . For instance, in certain embodiments, the differential engine  comprises a signature generator and\/or comparison module that creates and compares digital signatures of data blocks of the source and target datastores ,  to identify any corresponding data blocks that differ in their actual data.","The replication server  can be further configured to load the differential engine , or specific components thereof, onto the source host server  and\/or target host server  via binary injection, such as described in U.S. Provisional Patent Application No. 61\/100,182, filed Sep. 25, 2008, and entitled SYSTEMS AND METHODS FOR BINARY INJECTION IN A VIRTUAL COMPUTING ENVIRONMENT, the entirety of which is hereby incorporated herein by reference to be considered part of this specification. Such injection processes allow for the virtual machines ,  of the host servers ,  to execute one or more functions of the differential engine  as described in more detail below.","The replication server  further includes a user interface  for displaying to, and\/or receiving from, a user information relating to storage operations of the replication server . In certain embodiments, the user interface  causes the display of one or more windows for obtaining user input and\/or outputting status information with respect to replication processes occurring in the virtual computing environment .","Although the replication server  has been described herein with respect to a physical machine, in other embodiments of the invention the replication server  can be executed on one or more virtual machines. Moreover, other embodiments of the replication server  can function without one or more of the components illustrated in . In yet other embodiments, the replication server  can communicate directly with either or both of the datastores ,  (e.g., via a fiber switch) without needing to access the data though the host servers , . In yet other embodiments, intended changes to VMDK data can be identified through change backtracking rather than, or in addition to, using snapshots in snapshot rotation.","Each of the host servers ,  also communicates with a management server  through the network . In certain embodiments, the management server  directs general operation of the host servers ,  and\/or their hosted virtual machines. For example, the management server  can comprise a VMWARE VirtualCenter management server that provides a centralized management module for the virtual environment, such as a VMWARE Infrastructure 3 (VI3) environment or the like.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 2","FIG. 1"],"b":["200","100","200","200","100"]},"In certain embodiments, the replication process  comprises a hybrid replication process that utilizes both snapshot rotation and differential replication. For instance, with snapshot rotation, the replication process  creates and maintains a replication copy of virtual machine data through the use of multiple snapshots to alternatively record and apply writes to multiple VMDKs. The differential replication process is then used to address situations when the source and target VMDKs become unsynchronized.","With reference to , at Block , the replication server  opens a first snapshot of virtual machine data on the source system , such as the VMDK . In certain embodiments, the first snapshot is configured to record changes intended to be made to the data of the VMDK . For example, the replication server  can instruct a hypervisor of the virtual machine  to create a snapshot of the one or more VMDKs  in order to record changes intended to such data during a particular period of time. Moreover, the creation of the snapshot enables the source VMDK  to be opened for read-only access such that the virtual machine data can be replicated without changes being applied thereto.","In certain embodiments, the replication server  coordinates with the hypervisor of the host computer to open an external, hypervisor snapshot on the source datastore  to redirect and\/or queue writes requested by applications on the virtual machine . For instance, in embodiments wherein the hypervisor comprises an ESX server platform, the replication server  can instruct the hypervisor via a VMsnap command to create a hypervisor snapshot of the VMDK . Moreover, because the hypervisor can advantageously coordinate the snapshot functions from outside the guest operating system of the virtual machine , a complete and consistent image of the entire VMDK  is able to be obtained without powering down the virtual machine .","In certain embodiments, Block  reflects part of a default snapshot rotation process used for data replication between the source system  and the target system . In general snapshot rotation, one snapshot is used to capture writes intended for the source VMDK , while another snapshot that had captured previous writes is concurrently, or substantially concurrently, merged into both the source and target VMDKs , . The open snapshot is then closed, such as after a user-configured interval (e.g., fifteen minutes) and\/or when the snapshot reaches a particular size, while another snapshot is opened to record a new round of changes, and the replication process is repeated to keep the data of the source and target systems ,  synchronized.","However, in certain circumstances, the snapshot rotation process can be interrupted, thereby resulting in the data of the source and target systems ,  being out-of-sync. For instance, such an out-of-sync condition can occur when a snapshot housing the changes to VMDK  is deleted or prematurely committed or closed. In yet other embodiments, an out-of-sync condition can occur when a user powers on the target virtual machine , thereby causing a discrepancy in the time\/date stamp information between the source and target systems , . In yet other embodiments, the out-of-sync condition can arise when a partial commit of a snapshot is performed, an application programming interface (API) error occurs during committal, a severance in communication between the source and target systems , , or the like. Each of these situations can result in the virtual machine data of the source system  being more current than the replicated data of the target system , or vice versa.","At Block , the replication process  monitors for an out-of-sync condition between the source and target systems. For instance, the replication server  can communicate with either or both of the source and target systems ,  to determine if data thereon is out-of-sync. In certain embodiments, the replication server  retrieves information from the target host server  to parse the CID field of a header of the source and\/or target VMDKs ,  to see if it has changed, thereby indicating that modification(s) have been made to the VMDKs. In particular, the replication server  can compare a copy of the CID field recorded from the previous replication pass with the current CID field to determine if any premature or unintended changes have been made to the particular VMDK.","In yet other embodiments, the replication server  can communicate with the management server  to determine an out-of-sync condition. In certain embodiments, such monitoring can also comprise receiving input from a user\/administrator that the source and target data are out-of-sync. In yet other embodiments, date\/time stamp information can be used to identify when either VMDK has been changed prematurely. Moreover, in other embodiments, the replication server  can access a data structure associated with the target VMDK  that maintains a record of recently changed data blocks or files.","When an out-of-sync condition is detected, the replication process  determines if the first snapshot remains in a satisfactory condition for replication purposes (Block ). For instance, if the snapshot has continued in its normal operation of capturing writes intended to be made to the source VMDK , notwithstanding the out-of-sync-condition, the first snapshot may be considered to be in a satisfactory condition. In certain embodiments, this is determined by comparing date\/time stamp information, verifying that a proper naming convention is used with the snapshot, analyzing a creation time, combinations of the same or the like.","If the first snapshot is not satisfactory (e.g., has been deleted or prematurely committed), the replication process  proceeds to Block  to create a new first snapshot. In situations where the first snapshot still exists but is deemed unsatisfactory, the existing first snapshot can be deleted or removed prior to the creation of the new first snapshot.","Upon creation of the new first snapshot, or if at Block , the first snapshot is in a satisfactory condition, the replication process  proceeds with Block  to create a signature file associated with the target virtual machine data. In certain embodiments, the target signature file comprises a signature of each data block of the VMDK , wherein the signature is based on the data content of the data block.","In certain embodiments, the differential engine  of the replication server  scans the entire target VMDK  and computes and stores in the signature file MD4\/SHA-1 signatures for each 256 KB data block. In yet other embodiments, the differential engine  can generate the signature file using other types of message digest algorithms, cryptographic hash functions, (digital) fingerprints, checksums, hash values, combinations of the same or the like. Moreover, the signatures can be calculated for block sizes other than 256 KB, such as smaller or larger data block sizes.","At Block , the differential engine  scans the source VMDK  and generates a signature for each of the data blocks thereof. The differential engine  further compares the source and target signatures of the corresponding data blocks of the source and target VMDKs , . In certain embodiments, the comparison is advantageously performed as each signature is computed on-the-fly for each 256 KB data block on the source VMDK  without waiting for all the source signatures to be generated.","Based on these comparisons, the differential engine  identifies each unmatched data block between the source and target systems (Block ). Generally, the unmatched blocks reflect those data blocks that were updated on the source datastore  (e.g., via a premature committing of a snapshot) but not on the target datastore , or vice versa.","At Block , the replication process  transmits the updated data blocks from the source datastore  to the target datastore . For instance, in certain embodiments, the source system  transmits the updated data blocks via a SSH connection with the target system  through the network . To expedite the differential replication process, the transmitting of the data blocks during Block  can advantageously occur in parallel, or substantially in parallel, with the acts of Blocks  and .","In certain further embodiments, when the data blocks of the target VMDK  are replaced with the updated data blocks, the overwritten blocks can be copied to disk as an undo file (e.g., via inverse differential process). This advantageously allows for the overwritten blocks to be merged back into the target VMDK  if the synchronization process is further disrupted.","Once the updated data blocks have been sent to the target system , the source VMDK  and the target VMDK  are presumably re-synchronized. At that point, the replication process  resumes the default snapshot rotation process. Thus, at Block , the replication process  creates a second snapshot of the source VMDK  (Block ), and the first snapshot, which has been handling writes during the differential replication process, is closed and merged into both the source and target VMDKs ,  (Block ). The second snapshot then becomes the first, or primary, snapshot (Block ), and the replication process returns to Block .","In certain embodiments of the invention, one or more blocks of the replication process'  can advantageously be performed using binary injection techniques. For example, the replication server  can include one or more binary files that can be injected into the source and\/or target host servers ,  to perform one or more functions relating to the replication of the virtual machine files.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 3","FIG. 2","FIG. 1"],"b":["300","200","300","106","116","300","100"]},"As shown at State A, the entire virtual machine  of the source system  is initially replicated to the target system . More particularly, in certain embodiments, the VMDK  stored on the source datastore , which holds the data of the virtual machine , is replicated to the target system  such that an identical, offline, virtual machine  is housed on the target host server .","At State B, a snapshot rotation process is initiated to maintain data consistency between the source and target VMDKs , . In particular, a snapshot A is opened with respect to the source VMDK  to house changes intended to be made to the data of the source VMDK  by applications executing on the virtual machine .","At State C, when the changes housed by snapshot A are to be applied to the VMDKs, a second snapshot (i.e., snapshot B) is opened with respect to the VMDK . Snapshot A is also closed and a copy is sent to the target system  (e.g., via an SSH communication path) so that the changes housed therein are applied to both the source and target VMDKs ,  (State D). For instance, writes captured by snapshot A during snapshot rotation may be applied after a predetermined period of time, after a threshold size of the snapshot is attained (e.g., 16 MB), and\/or in response to a user command.","At State E, snapshot B is prematurely committed and merged into the source VMDK , thereby resulting in data of the source system  and the target system  being out-of-sync. That is, the data of the source VMDK  includes changes not yet applied to the data of the target VMDK .","At State F, snapshot C is created with respect to the source VMDK , which locks the source VMDK  from further data modification. Also, the differential engine  of the replication server  computes and stores signatures for the data blocks on the target VMDK  in a signature file A. As discussed above, in certain embodiments, the signatures are computed using an MD4-SHA  algorithm for each 256 KB data block on the target VMDK . Once the scan of the target VMDK  is complete, a copy of the signature file A is sent to the source system .","At State G, the differential engine  computes signatures for each of the data blocks on the source VMDK . As each signature is generated, the differential engine  compares the newly-generated signature of the source data block with a signature in signature file A that is associated with the corresponding target data block to determine if the data of the blocks differ. As discussed above, this comparison is advantageously performed as each signature for the source system data is generated rather than waiting until a full scan of the source VMDK  has been completed.","At State H, for each unmatched block that is identified by the comparison of the signatures, the source system  transmits a copy of the particular source data block to be written to the target VMDK . Moreover, those data blocks on the target VMDK  that are overwritten can be, in turn, stored in an undo file in the event that the differential replication process is disrupted prior to completion.","At State I, the source and target systems ,  resume the default snapshot rotation replication by opening a snapshot D for the source VMDK  and merging the writes captured by snapshot C into both the source and target VMDKs , . State J illustrates snapshot D continuing to house changes intended to be made to the source VMDK  until replication is again requested.","Although certain embodiments of the invention have been described with respect to particular arrangements, it will be understood from the disclosure herein that alternative embodiments can be used. For instance, certain embodiments of the invention can further utilize a shadow copy process, such as for example Volume Shadow Copy Service (VSS) offered by Microsoft Corporation, to alternately freeze and thaw application writes of the source virtual machine  in order to provide a transitionally consistent image for replication. In such embodiments, the method allows for synchronization of volume shadow copy services with external snapshot capabilities (e.g., hypervisor snapshots).","In yet other embodiments, in place of hypervisor snapshots, systems and methods disclosed herein can utilize a \u0394VMDK file, a .REDO log, or like data structure, for housing changes directed to the source VMDK  during replication.","Moreover, in other embodiments of the invention, the management server , hypervisors, and\/or virtual machines can maintain a list or other record of updated blocks on a particular datastore. In such embodiments, the differential engine  need not compute and compare signatures between data blocks on different datastores to identify differences therebetween. Rather, the replication server  can access the record(s) maintained by the management server , source system  and\/or target system  to determine which data blocks have been modified over a particular period of time.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 4","b":["400","400","400","100"]},"At Block , the failover process  receives user input to power down the source virtual machine . In certain embodiments, the user input is obtained through the user interface module  of the replication server . For instance, a user can select a check box or make another like indication through a user interface that the user desires to perform a planned failover replication operation by powering down the virtual machine .","At Block , the replication server  issues a command to the source host server  to power down the virtual machine . In certain embodiments, the command comprises an API call to the hypervisor of the source host server  to power down the virtual machine . For example, in a VMware virtual computing environment, the API call can comprise a PowerOffVM_Task command to the ESX host server to power down the virtual machine .","At Block , the failover process  awaits the termination of all processes related to operation of the source virtual machine . For instance, the failover process  can verify that applications of the virtual machine  are not running in memory and that associated threads, data write operations, or other requests related thereto have concluded.","Once all the virtual machine processes have terminated and the virtual machine  is in a powered off state, the failover process  continues with replication of the virtual machine data, such as replication of the source VMDK  to the target system  (Block ). In certain embodiments, one or more of the processes for performing the replication advantageously include executable binary(ies) injected into the source host server  from the replication server . This allows for the replication processes to be executed outside the virtual machine , thereby providing for a consistent and complete replication of the virtual machine data.","For instance, in certain embodiments, the failover process  engages in snapshot rotation to replicate the source VMDK  to the target datastore . In such embodiments, a snapshot can preferably be opened by a hypervisor of the source host server  prior to the issuing of the command to power down the virtual machine . The hypervisor snapshot can then house all the changes associated with powering down the source virtual machine  and putting the source data in a consistent state.","In yet other embodiments, other types of replication, migration and\/or copy operations can be performed on the source VMDK  after the virtual machine  has been powered down. For example, the failover process  can perform differential replication, as discussed above, or the like.","At Block , once the replication of the virtual machine data to the target system  has completed, the replication server  issues a command to power on the target virtual machine . For instance, during snapshot rotation replication, the power on command can be issued once the snapshot housing all the writes accumulated during the powering off of the virtual machine  is closed and is ready to be merged into the source and\/or target VMDKs , .","In certain embodiments, the failover process  can be incorporated with the replication systems and methods described herein with respect to . Moreover, the failover process  can advantageously provide for a relatively fast method of replicating virtual machine data in a clean and consistent state. In yet other embodiments, the failover process  can be initiated automatically without receiving input from a user.","Certain embodiments of the invention disclosed herein can also advantageously avoid denial errors when accessing data of a virtual machine that, during such access, is migrated between host servers in a server cluster (e.g., via VMWARE VMOTION). That is, in certain embodiments, disclosed systems and methods can identify the location of one or more virtual machine(s) prior to initiating a copy operation that involves multiple VMDKs. For example, such copy operations can comprise one or replication or other copy operations (e.g., backup, archive or the like).","Certain embodiments of the invention provide for the tracking of movement of a virtual machine during one or more read requests of multiple VMDKs. For instance, in certain conventional systems, a shared file system allows for read access to a virtual disk A, of virtual machine A from host A. If, during the read request, virtual machine A moves to host B, the read request of virtual disk A is allowed to complete. However, if virtual machine A is also associated with a virtual disk B, a new read request cannot be successfully initiated from host A for virtual disk B.","Embodiments of the invention can use a process of connecting to a central management system of the virtual infrastructure in between each access request to a different virtual disk to inquire if the corresponding virtual machine has recently moved. If the virtual machine has moved since the last read request was initiated, the new location (e.g., host server) of the virtual machine is determined and a connection is made to the correct host machine so that a proper read\/write request can be made to the additional VMDKs. Such a process could be repeated several times, for example, if the virtual machine is associated with multiple virtual disk images and can be migrated between various host servers.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 5","b":["500","500"]},"As shown, the system  includes a plurality of host computing devices (Host A , Host B and Host C ) configured to host one or more virtual machines. In particular, Host A , Host B and Host C communicate with a datastore  through a fiber switch  to access data stored in one or more virtual machine files. For instance, the datastore  can comprise a SAN or like shared storage network that includes one or more VMFSs (e.g., VMFS A , VMFS B and VMFS C ) that maintain virtual disk files for each of the virtual machines on one or more of Host A , Host B and Host C ","In certain embodiments, the datastore  can comprise any type of formatted logical container for holding virtual machine files and can exist on a physical storage resource, including one or more of the following: local disks (e.g., local small computer system interface (SCSI) disks of a host server), a disk array, a SAN (e.g., fiber channel), an iSCSI disk area, network attached storage (NAS) arrays, network file system (NFS), or the like. In certain embodiments, the virtual machine(s) use one or more virtual hard disks residing on the datastore  to store its operating system, program files and other data associated with its operations.","In certain embodiments, the VMFSs comprise a VMWARE VMFS cluster file system provided by VMware, Inc. In such embodiments, the VMFS cluster file system enables the multiple host servers with installations of ESX SERVER to have concurrent access to the same virtual machine storage and provides on-disk distributed locking to ensure that the same virtual machine is not powered on by multiple servers at the same time.","For exemplary purposes, a virtual machine  has been shown to be executing on Host A . In certain embodiments, the virtual machine  comprises an operating system and associated applications, which typically operate at a user-level. That is the virtual machine  can access the resources of the corresponding host server through the hypervisor layer. It will also be understood that additional virtual machines, though not illustrated, can execute on one or more of the depicted host computing devices.","Associated with the virtual machine  are two VMDKs located remote to Host A on the datastore . In particular, virtual machine disks DISK1.VMDK and DISK2.VMDK are located in the VMFS A and contain data that corresponds to virtual machine  on Host A ","In certain embodiments, either or both of the VMDKs further includes a plurality of files related to the virtual machine . For instance, the VMDK can include a virtual hard drive for the virtual machine . In certain embodiments, most of a VMDK file's content comprises the data of the virtual machine , while a small portion is allotted to overhead of the virtual machine . If the virtual machine  is connected directly to a physical disk, rather than to a virtual disk, the VMDK file can also store information about the partitions the particular virtual machine  is allowed to access.","In certain further embodiments, each of the VMDKs includes a SCSI reservation that indicates the \u201cowner\u201d of the disk and relates to the location of the corresponding virtual machine . As an example,  illustrates a SCSI reservation of (0:0) for DISK1.VMDK and (0:1) for DISK2.VMDK , which would correspond to the current location of virtual machine  (e.g., which computing device is hosting the virtual machine ). That is, in certain embodiments, the SCSI reservation for each VMDK, such as a remote VMDK, is tied to a particular host server.","The system  further includes a management server  in communication with the host servers , , through a network . In certain embodiments, the management server  comprises a computing device that provides a single access point and\/or interface for centrally managing the virtual infrastructure environment . In certain embodiments, the management server  comprises VIRTUALCENTER or VSERVER CENTER commercially offered by VMware Inc.","The management server  further includes a migration module  that coordinates migration of a virtual machine, or the virtual machine's memory state, from one host server to another. For instance, in certain embodiments, the migration module  comprises VMware VMotion technology that is configured to move an entire virtual machine from one host ESX server to another while the virtual machine is running. Since the entire state of a virtual machine is encapsulated by a set of files stored on shared storage, and certain VMFS cluster file systems allow for both source and target host ESX servers to access these virtual machine files concurrently, the active memory and precise execution state of a virtual machine can be rapidly transmitted over a high speed network. In certain embodiments, since the network is also virtualized by VMware ESX Server, the virtual machine can advantageously retain its network identity and\/or connections.","In certain embodiments, the migration module  is configured to advantageously perform one or more of the following functions: perform live migrations with little or no downtime, undetectable to the user; continuously and\/or automatically optimize virtual machines within resource pools; perform hardware maintenance without scheduling downtime and disrupting business operations; and proactively move virtual machines away from failing or underperforming host servers.","As shown, the system  further comprises a replication server  for coordinating replication operations of VMDK files through the host server(s). In certain embodiments, the replication server  comprises a WINDOWS-based server or the like.","The replication server  further comprises a virtual machine query module  for determining the current location of a virtual machine prior to performing replication of each VMDK associated with the virtual machine. In certain embodiments, the query module  communicates with the management server  to determine the most current SCSI reservation for the VMDK and\/or server hosting the particular virtual machine.","As shown, the network  provides a wired and\/or wireless communication medium between the hosts , , , the management server  and\/or the replication server . In certain embodiments the network  can comprise a LAN. In yet other embodiments, the network can comprise one or more of the following: internet, intranet, WAN, public network, combinations of the same or the like. In addition, connectivity to the network  may be through, for example, remote modem, Ethernet, token ring, FDDI, ATM, combinations of the same or the like.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 6","FIG. 5"],"b":["600","600","600","500"]},"The process  begins with Block , wherein the replication server  receives a request, or command, to perform replication of virtual machine data. In certain embodiments, the request concerns the replication of all data of a virtual machine, such as multiple VMDKs associated with the virtual machine. In yet other embodiments, the request may concern replication of only a portion of the data associated with the virtual machine(s). For instance, the replication request can be based on one or more job schedules, user preferences, policies, rules or the like. Moreover, in certain embodiments, the replication request can specify the location of the virtual machine to be backed up.","At Block , the replication server  identifies the VMDKs that are the subject of the replication request. In certain embodiments, the VMDKs are located on a storage device (e.g., datastore ) that is remote to the server hosting the virtual machine (e.g., Host A hosting virtual machine ). In certain further embodiments, the storage device comprises a shared storage device including multiple VMFSs associated with a plurality of virtual machines on one or more host servers.","For exemplary purposes, the remainder of the replication process  will be described with particular reference to virtual machine  and DISK1.VMDK (VMDK ) and DISK2.VMDK (VMDK ) on VMFS A ","At Block , the replication server  determines the current location of the virtual machine . For replication of data on a first VMDK, this location can be determined from the replication request. For additional VMDKs associated with the replication request (as discussed in more detail below with respect to Block ), determining the location of each additional VMDK comprises the query module  issuing an API call to the management server  (e.g., a management layer of VirtualCenter) for information regarding which computing device is currently hosting the virtual machine . In other embodiments, the request can comprise a request for the SCSI reservation of the VMDK , which identifies the current location of the virtual machine .","After determining the current location of the virtual machine , the replication server  locks the VMDK and performs replication of the VMDK data (Block ). In certain embodiments, where the replication server  is coupled to the host servers via the network , the replication server  performs such replication through the particular server hosting the virtual machine  (i.e., Host A ).","After completing replication of the VMDK , the process  determines if there are additional VMDKs associated with the replication request (Block ). If so, the replication process  returns to Block . At that point, the replication server  again requests the current location of the virtual machine . One reason for such a request is to address the possibility that the virtual machine  migrated during replication of the VMDK . In such situations, if the replication server  were to attempt to perform replication of the VMDK through Host A (i.e., the host of the virtual machine  at the time replication of VMDK commenced), and the virtual machine  had been migrated to another host server (e.g., Host B ), an \u201caccess denied\u201d error would be generated because Host A would no longer have read and\/or write access to VMDK . Thus, repeating Block  prior to the replication of each VMDK can ensure that the replication server  will attempt replication of the particular VMDK via the correct host server, thereby avoiding access denial errors.","If at Block  no additional VMDKs are associated with the replication request, the process  terminates replication (Block ).","Although the replication process  has been described with reference to particular arrangements, other embodiments of the invention can perform the process  in different ways. For example, in certain embodiments, the management server  identifies the VMDKs and\/or virtual machine associated with a particular replication request. In yet other embodiments, the replication of at least two VMDKs can be performed concurrently, or at least partially concurrently, rather than in a serial format.","Although embodiments of the invention described with reference to  have been disclosed with particular reference to replication operations, it will be understood that such systems and methods can be utilized with various types of copy operations including, for example, backup, archive, migration, recovery and\/or other copy operations in addition to, or in place of, replication operations. For instance, embodiments of the invention can be used with the VRANGER PRO backup tool commercially available through Vizioncore, Inc. (Buffalo Grove, Ill.). Moreover, backup operations that can be utilized with such embodiments of the invention are further described in U.S. patent application Ser. No. 12\/182,364, filed Jul. 30, 2008, and U.S. patent application Ser. No. 12\/502,052, entitled \u201cBackup System and Methods for a Virtual Computing Environment,\u201d filed on even date herewith, each of which is hereby incorporated herein by reference in its entirety to be considered part of this specification.","Furthermore, in certain embodiments, the systems and methods described herein can advantageously be implemented using computer software, hardware, firmware, or any combination of software, hardware, and firmware. In one embodiment, the system is implemented as a number of software modules that comprise computer executable code for performing the functions described herein. In certain embodiments, the computer-executable code is executed on one or more general purpose computers. However, a skilled artisan will appreciate, in light of this disclosure, that any module that can be implemented using software to be executed on a general purpose computer can also be implemented using a different combination of hardware, software or firmware. For example, such a module can be implemented completely in hardware using a combination of integrated circuits. Alternatively or additionally, such a module can be implemented completely or partially using specialized computers designed to perform the particular functions described herein rather than by general purpose computers.","Moreover, certain embodiments of the invention are described with reference to methods, apparatus (systems) and computer program products that can be implemented by computer program instructions. These computer program instructions can be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the acts specified herein to transform data from a first state to a second state.","These computer program instructions can be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the acts specified herein.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified herein.","While certain embodiments of the inventions have been described, these embodiments have been presented by way of example only, and are not intended to limit the scope of the disclosure. Indeed, the novel methods and systems described herein may be embodied in a variety of other forms; furthermore, various omissions, substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 6","FIG. 5"]}]},"DETDESC":[{},{}]}
