---
title: Apparatus, system, and method for hiding advanced XML schema properties in EMF objects
abstract: An apparatus, system, and method for hiding advanced XML schema properties in EMF objects. XML Schema may comprise both user-defined properties and internal properties related to the structural features of the schema. The present invention hides the internal properties from clients while still keeping them available such that a complete XML Schema model can be generated, but without exposing a client to the non-intuitive internal properties. An SDO implementation leverages EMF implementation artifacts to present a client with an SDO API exposing user-defined properties and metadata describing user-defined properties. The SDO implementation further provides an extended API through which a client may access internal properties and metadata describing the internal properties. The invention further accounts for both dynamic SDO objects and static SDO objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08434055&OS=08434055&RS=08434055
owner: International Business Machines Corporation
number: 08434055
owner_city: Armonk
owner_country: US
publication_date: 20070726
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","This invention relates to mapping XML Schema definitions to objects. More specifically, the invention relates to mapping XML Schema definitions to objects such that a simple interface for the object is presented to the client which is easy to understand, while the complicated internal aspects of the object related to advanced features of XML Schema are still maintained in the object, but hidden from the client.","2. Description of the Related Art","XML has become a ubiquitous member of the computing landscape, providing a human-readable and portable format for data exchange. However, many applications are designed to work with, or simply work better with, object representations of data as opposed to an XML representation. As a result, a number of solutions exist which map XML Schema definitions (which describe and define the structure of an XML document) to objects; for example, the Eclipse Modeling Framework (EMF), Service Data Objects (SDO), or JAXB all provide solutions. The solutions mentioned generate various types of XML representation object models which allow an XML document to be treated as an object. The above solutions are not restricted to representing only XML documents as objects and may be used to translate various formats to objects; for example, SDO may also be used to translate models such as those developed using IBM's Rational Rose software to objects.","XML, however, poses a unique modeling challenge. In many instances, the richness and flexibility of XML Schema complicates the translation process. XML Schema features such as wildcards, substitution groups, and repeated model groups do not intuitively map to obvious object properties. As a result, the object model may contain properties which a typical user may not understand, making the use of these objects a more complicated process. In this field of endeavor, the term \u2018user\u2019 or \u2018client\u2019 referenced above refers to software developers. Thus, technologies for implementing mapping of XML Schema definitions have had to choose between simplicity (where the advanced features are simply ignored) or completeness (where the advanced features are mapped and presented to the user).","For example, a part of an XML Schema may specify the following:",{"@attributes":{"id":"p-0008","num":"0007"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xs:element name=\u201cRealEstate\u201d>"]},{"entry":[{},"\u2003\u2003<xs:complexType>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xs:sequence>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201cbuilding\u201d type=\u201cxs:string\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201cowner\u201d type=\u201cxs:string\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<xs:element ref=\u201ctenant\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<\/xs:sequence>"]},{"entry":[{},"\u2003\u2003<\/xs:complexType>"]},{"entry":[{},"<\/xs:element>"]},{"entry":[{},"<xs:element name=\u201ctenant\u201d type=\u201ctenant\u201d\/>"]},{"entry":[{},"\u2003\u2003<xs:complexType name=\u201ctenant\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xs:sequence>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201cname\u201d type=\u201cxs:string\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/xs:sequence>"]},{"entry":[{},"\u2003<\/xs:complexType>"]},{"entry":[{},"..."]},{"entry":[{},"<\/schema>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0009","num":"0008"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public interface RealEstate {"]},{"entry":[{},"\u2003String getBuilding( );"]},{"entry":[{},"\u2003void setBuilding(String value);"]},{"entry":[{},"\u2003String getOwner( );"]},{"entry":[{},"\u2003void setOwner(String value);"]},{"entry":[{},"\u2003String getTenant( );"]},{"entry":[{},"\u2003void setTenant(Tenant value);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The model above is simple and easy to understand by one of skill in the art. However, as shown below, additional complexities may appear when the schema contains additional XML features:",{"@attributes":{"id":"p-0011","num":"0010"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<xs:element name=\u201cRealestate\u201d>"},{"entry":"\u2003<xs:complexType>"},{"entry":"\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xs:element name=\u201cbuilding\u201d type=\u201cxs:string\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xs:choice maxOccurs=\u201cunbounded\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201cindividualOwner\u201d type=\u201cxs:string\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201ccorporateOwner\u201d type=\u201cxs:string\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<\/xs:choice>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:element ref=\u201ctenant\u201d\/>"},{"entry":"\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003<\/xs:complexType>"},{"entry":"<\/xs:element>"},{"entry":"<xs:element name=\u201ctenant\u201d type=\u201ctenant\u201d\/>"},{"entry":"\u2003<xs:complexType name=\u201ctenant\u201d>"},{"entry":"\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xs:element name=\u201cname\u201d type=\u201cxs:string\u201d\/>"},{"entry":"\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003<\/xs:complexType>"},{"entry":"<xs:element name=\u201cratedTenant\u201d substitutionGroup=\u201ctenant\u201d"},{"entry":"\u2002type=\u201cratedTenant\u201d\/>"},{"entry":"\u2003<xs:complexType name=\u201cratedTenant\u201d>"},{"entry":"\u2003\u2003<xs:complexContent>"},{"entry":"\u2003\u2003\u2003\u2003<xs:extension base=\u201ctenant\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xs:element name=\u201crating\u201d type=\u201cxs:int\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xs:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<\/xs:extension>"},{"entry":"\u2003\u2003<\/xs:complexContent>"},{"entry":"\u2003<\/xs:complexType>"},{"entry":". . ."},{"entry":"<\/schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0012","num":"0011"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public interface Realestate {"]},{"entry":[{},"\u2003\u2003String getBuilding( );"]},{"entry":[{},"\u2003\u2003void setBuilding (String value);"]},{"entry":[{},"\u2003\u2003String getIndividualOwner( );"]},{"entry":[{},"\u2003\u2003void setIndividualOwner (String value);"]},{"entry":[{},"\u2003\u2003String getCorporateOwner( );"]},{"entry":[{},"\u2003\u2003void setCorporateOwner (String value);"]},{"entry":[{},"\u2003\u2003String getTenant( );"]},{"entry":[{},"\u2003\u2003void setTenant(Tenant value);"]},{"entry":[{},"\u2003\u2003FeatureMap getGroup( );"]},{"entry":[{},"\u2003\u2003FeatureMap getTenantGroup( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The presentation of this additional information will often confuse the user since the information does not correspond to the expected, user-defined properties of the XML document such as the building, owner, etc. As mentioned above, one possible solution is to simply choose not support these additional features and remove them from the schema-to-object mapping implementation. However, this additional information is needed to accurately represent all aspects of the XML Schema. For example, if at some point the client attempts to map from the object to an XML document, the XML document may be incomplete in comparison to the original if the advanced features defining the structure of the data were removed.","Technologies which choose completeness impose additional burdens on their clients, who need to be able to distinguish simple from advanced properties and know which ones to use in order to obtain the desired results. Technologies which choose simplicity lose information that may be of use to advanced users, and also lose the ability to accurately reproduce the XML document from the object.","Applicants submit that there exists a need for a mapping technology which can fully support all XML Schema documents and present a simple view to the user without simply ignoring or not supporting the advanced features. Ideally, the solution should allow a user to access the advanced features, but only present the simple features absent a specific request to view the advanced features. The solution should also impose little additional computing overhead.","The present invention has been developed in response to the present state of the art, and in particular, in response to the problems and needs in the art that have not yet been fully solved. Accordingly, the present invention has been developed to provide an apparatus, system, and method for hiding advanced XML Schema properties in EMF objects.","The present invention comprises a computer program product comprising a computer usable medium having a computer readable program for hiding advanced Extensible Markup Language (XML) schema features in Service Data Objects (SDO), the operations of the computer program product comprising manipulating one or more Eclipse Modeling Framework (EMF) artifacts, determining the internal properties of an EMF model and the user-defined properties of the EMF model, and automatically creating a SDO model from the EMF model, the SDO model configured to expose to a client the user-defined properties of the SDO model and hide from the client the internal properties of the SDO model.","Determining internal properties of the EMF model and the user-defined properties of the EMF model further comprises comparing properties of the EMF model to predefined set of internal properties and identifying the internal properties of the EMF model as those that match the predefined set of internal properties and the user-defined properties of the EMF model as those that do not match the predefined set of internal properties.","Automatically creating a SDO further comprises a SDO artifact returning user-defined properties of the SDO model in response to a client invoking a service configured to return property information of the SDO.","The computer program product further comprises issuing a call to a SDO API such that a SDO artifact receives a request comprising a parameter identifying a property, invokes a service configured to validate the parameter, and accesses a property of the EMF model in response to an acknowledgement from the service that the parameter references a valid user-defined property.","Further, in the computer program product, the SDO model exposes the internal properties of the SDO model to a client by way of an extended API, the extended API invoking EMF model methods.","Where the SDO model directly hosts one or more static property values, automatically creating a SDO model from the EMF model further comprises assigning properties of the SDO model a modified index value such that internal properties are distinguished from user-defined properties. In addition, where the SDO model directly hosts one or more static property values, the computer program product further comprises receiving from a client a request comprising the modified index value of a property as a parameter and mapping the modified index value to an actual index value of the property. Mapping the modified index value further comprises associating the modified index value received from a client with an internal SDO model index and operating on a property value associated with the internal SDO model index. In a preferred embodiment, a positive modified index value is assigned to a user-defined property and a negative modified index value is assigned to an internal property.","Creating an SDO model from the EMF model further comprises returning SDO model metadata in response to a client request, wherein the metadata concerns user-defined properties in response to a client request by way of a SDO Application Programming Interface (API), and concerns internal properties in response to a client request by way of a SDO extended API. The SDO model is configured to expose the expected properties by way of a SDO model interface and to expose internal properties exclusively by way of an extended interface.","In a preferred embodiment, the EMF artifacts are classes and interfaces, and manipulating EMF artifacts comprises extending EMF classes and implementing interfaces.","Also disclosed is a system for hiding advanced XML schema features in XML representation object models, which system comprises one or more processors in communication with memory comprising an XML schema document, an Eclipse Modeling Framework (EMF) implementation, and a Service Data Object (SDO) implementation. The SDO implementation further comprises an SDO property module configured to compare properties of the EMF model to a predefined set of internal properties, and to identify the internal properties of the EMF model as those that match the set of internal properties and the user-defined properties of the EMF model as those that do not match the set of internal properties, an SDO data object implementation module comprising an Application Programming Interface (API) configured to expose user-defined properties of an SDO, and an SDO internal properties access module comprising an extended API configured to expose internal properties of the SDO.","In certain embodiments, the SDO data object implementation module further comprises an SDO metadata module configured to reveal SDO metadata for user-defined properties, and wherein the SDO internal properties access module further comprises an SDO extended metadata module configured to reveal SDO metadata for internal properties.","In addition, the EMF implementation may further comprise a EClassImpl class and a BasicEObjectImpl class, and the SDO implementation may further comprise a ClassImpl class extending the EClassImpl class and a DataObjectImpl class extending the BaseEObjectImpl class.","These features and advantages of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","Many of the functional units described in this specification have been labeled as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as a processor and memory device, field programmable gate arrays, programmable array logic, programmable logic devices or the like.","Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions, which may, for instance, be organized as an object, procedure, or function. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module. The instructions represented by the modules may be stored on various forms of computer readable storage media.","Indeed, a module of executable code may be a single instruction, or many instructions, and may even be distributed over several different code lines, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices.","Reference throughout this specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201cin one embodiment,\u201d \u201cin an embodiment,\u201d and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.","Furthermore, the described features, structures, or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware processors and memory, hardware chips, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention may be practiced without one or more of the specific details, or with other methods, components, materials, and so forth. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","100","110","120","130","140","150","160","100"]},"The system  for hiding advanced XML schema properties in XML representation object models includes an XML Schema . As discussed above, and as known to those of skill in the art, an XML schema  is a description of an XML document which specifies the structure and the expected and allowed content of an XML document. An XML Schema  may define element types and also impose detailed constraints (such as limiting a particular value to a positive integer) on types. In order to be deemed valid, an XML document must be well-formed and also comply with an associated XML Schema .","The XML Schema  further comprises internal properties  and user-defined properties . User-defined properties  are those elements specified by the creator of the XML Schema  which constitute the core data associated with the XML Schema . For example, in the example schema above, \u201cbuilding\u201d and \u201cowner\u201d would both constitute user-defined properties. In contrast, internal properties  constitute the structural, relational information of the XML Schema  which describes the relationships among XML Schema  elements. In the example schema above, the substitution group constitutes an internal property . Those of skill in the art will recognize that the \u2018user\u2019 referenced in the term \u201cuser-defined properties\u201d is not necessarily, and in many instances will not be, the same \u2018user\u2019 interacting with the model provided by the present invention.","The system  further comprises an XML representation object model, which in the depicted embodiment is EMF module . Those of skill in the art will recognize that an XML representation object model, as used in connection with the present invention, constitutes an object model mapped from an XML schema. Those of skill in the art will recognize that other XML representation object models could be used without departing from the essence of the present invention.","EMF module  is a modeling framework and code generation facility for building tools and applications based on a structured data model such as an XML Schema document. EMF provides tools necessary to produce Java classes for the model, allowing EMF models of XML schema to be used as objects. As mentioned above, the EMF module  provides a complete solution which fully supports XML schemas such as the XML schema ; however, the EMF model exposes both the complicated internal properties of the XML schema and the user-defined features of the XML schema.","EMF module  further comprises EMF artifacts (not shown), which constitute the modules and components of EMF module  which provide the functionality described above. For example, EMF artifacts comprise the various classes and interfaces that make up EMF.","The system  further comprises a practical XML representation object model, which in the depicted embodiment is produced by an SDO module . For purposes of the specification, a practical XML representation object model is an XML representation object model which exposes to a client its user-defined properties while hiding its internal properties. Those of skill in the art will recognize that other modules may be adapted to generate practical XML representation object models without departing from the essence of the present invention. For example, those in the art may modify the EMF module  such the modified module  hides internal properties in order to make it a practical XML representation object model.","SDO module  allows clients to access and manipulate data from heterogeneous data sources such as relational databases and XML data sources. Like EMF module , SDO module  allows SDO models of XML schema to be used as objects.","SDO module  further enables both static (strongly typed) programming models and dynamic (loosely typed) programming models. Static interfaces provide models which are more familiar to, and more easily managed by, users. Dynamic models, however, are necessary in instances where the shape of the resulting data is not known beforehand. Dynamic models, for example, are commonly needed by tools and frameworks. Dynamic and static models in connection with SDO module  and the present invention are discussed in greater detail below. SDO module  further provides a client  with a metadata API that allows introspection of the data model. In accordance with the present invention, the metadata API is incorporated into SDO View  and Extended View  as discussed in greater detail below.","In a preferred embodiment of the invention, SDO module  does not simply receive a completed EMF module  object and use that object as the base material from which it can construct an SDO. Rather, SDO module  leverages the EMF module  as described below in connection with  in order to provide the extended view  and the SDO view . More particularly, SDO  manipulates EMF  artifacts (not shown) in order to provide the desired functionality. The intersection of EMF  by SDO  in  is symbolic of this relationship.","SDO view  is a view of an SDO that reveals only user-defined properties of the relevant SDO model. In addition, SDO view  returns only metadata gathered from user-defined properties of the relevant SDO model. In one embodiment, SDO View  is the standard SDO API and includes a set of interfaces and functions to enable a user to interact with the user-defined properties of the SDO. For example, a particular SDO model named \u2018alpha\u2019 may have five properties, three of which are user-defined and two of which are internal. If a client  requests a list of the properties of alpha from SDO View , only the user-defined properties are returned. Similarly, if the client  requests the number of properties of alpha, the number returned would be three. If a client  utilized a \u2018get\u2019 method associated with alpha, and indicates one of the internal properties as the subject of the \u2018get\u2019 invocation, the return value is an indication that the specified property does not exist.","The system  also comprises an extended view . The extended view  provides a client  with access to the internal properties of the SDO model which are hidden when using the SDO View . In a preferred embodiment, the extended view  is an extended API which a client  invokes to use or discover internal properties. To continue the example above, a client  may utilize a \u2018get\u2019 method associated with alpha and indicate one of the hidden properties as the subject of the invocation, but utilize the extended view  instead of the SDO view . The extended view  returns the requested hidden property in response. If a client  requests the number of hidden properties in alpha, extended view  reveals that there are two.","The system  further comprises a client . The client  interacts with SDO  objects, usually in order to manipulate the data represented by the object, through the SDO view  and the extended view . The client  may be a user such as a software designer or programmer, and in other embodiments may be a software application. For example, in common embodiments, the client  may be tooling software.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 2","b":"160"},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DataObject workSpace = dataFactory.create(tns, \u201cRealestate\u201d);"]},{"entry":[{},"workSpace.set(\u201cbuilding\u201d, \u201cHernandez Building\u201d);"]},{"entry":[{},"workSpace.set(\u201cindividualOwner\u201d, \u201cMike Hernandez\u201d);"]},{"entry":[{},". . . ."]},{"entry":[{},"String owner = workSpace.get(\u201cindividualOwner\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Those of skill in the art will recognize that in the above code segment workSpace is a generic implementation of the SDO DataObject interface. Thus, workSpace is a DataObject object, as opposed to a Realestate object.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 2","b":["210","120","212","210","212","210","212"]},"SDO property module  is an SDO artifact which determines the properties exposed as part of the SDO data object. Similar to the EMF artifacts described above, in a preferred embodiment SDO artifacts are the classes and interfaces that make up the Service Data Object. Like the EMF property module , SDO property module  comprises methods which, when invoked, reveal metadata concerning the properties which constitute the SDO.","SDO property module  further comprises internal properties module . In one embodiment, internal properties module  is a data structure such as a list comprising a predefined set of internal properties that should be hidden from a client . The SDO property module  invokes the methods of the EMF property module  to get a complete list of all properties, both internal and user-defined, from EMF, and then compares the result of the methods against the predefined set of internal properties in the internal properties module . Properties which are found in both the internal properties module  and in the result of the method call are removed from the list of properties exposed by SDO property module , such that the SDO property module  creates the filtered properties .","In another embodiment, internal properties module  may be a method which determines the internal properties of the EMF object. The SDO property module  invokes the methods of EMF property module  to get a complete list of all properties from EMF and also invokes the method of internal properties module  to determine which of the properties returned constitute internal properties and which constitute user-defined properties. Based on the result of the two methods, SDO property module  creates the filtered properties . For example, internal properties module  may comprise code which removes any FeatureMap property returned by a call to EMF property module , assuming that all FeatureMap properties are deemed to be internal properties hidden as part of the SDO implementation. Alternatively, internal properties module  may invoke the method getEStructuralFeatures of the EMF property module and suppress all properties returned in response, such that they are hidden from a client , assuming that the properties returned in response to a getEStructuralFeatures invocation are internal properties to be hidden.","Filtered properties  is the set of user-defined properties derived from an EMF  object through the EMF artifacts such as EMF property module  and EMF data object properties . The internal properties of the EMF  object still exist as part of an EMF  object, but are not exposed in the filtered properties . In one embodiment, the filtered properties  may be a separate list of properties. Alternatively, filtered properties  may never be an actual object or list; rather, filtered properties  may comprise the result of the interaction between the SDO property module , internal properties module , and the EMF property module .","SDO data object implementation  represents the actual data object that may be used by a client . The client , for example, may instantiate and use a new SDO data object implementation  such as \u201cworkSpace\u201d as shown above. The SDO data object implementation  references the filtered properties module  in performing a client-requested operation or when returning metadata concerning its properties. As such, even if internal properties are a part of the underlying EMF data object properties , these properties are not exposed as part of a SDO data object implementation . The property accessors of the SDO data object implementation  (which are part of the standard SDO APIs) are implemented such that they use the filtered property list before calling EMF to access the property as stored in the EMF data object properties .","SDO Data Object Implementation module  may further comprise a SDO metadata module (not shown) configured to reveal SDO metadata for user-defined properties. The SDO metadata module allows a client  to discover information concerning the SDO data object by means of introspection APIs. For example, a client  may request the number of properties, or a list of properties, associated with the SDO data object. The SDO metadata module returns to the client  metadata related only to the user-defined properties as defined in filtered properties , thus hiding the existence of internal properties.","The SDO data object implementation module  provides a client  with an API configured to expose to the client  the user-defined properties of the SDO. The SDO Internal properties access module  provides a client  with an extended API configured to expose the internal properties of the SDO, and in addition, allow the client  to access those values.","With the above design, SDO clients using standard SDO APIs (SDO View ), which are associated with SDO data object implementation , will see only the simple view of the SDO . The SDO internal properties access module  allows a client  access to internal properties and metadata concerning those internal properties in EMF data object properties . SDO internal properties access module  provides the client  with the extended view , described above. The implementation of extended methods may be implemented as shown by making calls to the underlying EMF methods, such as eGet, through EMF APIs, which still have access to the hidden properties.","In one embodiment, SDO internal properties access module  may be a separate class providing an extended API as follows:",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class SDOUtil {"},{"entry":"\u2003\u2003public static Sequence getSubstitutionValues (DataObject dataObject,"},{"entry":"Property head)"},{"entry":". . . }"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["226","160"]},"The SDO internal properties access module  may further comprise an SDO extended metadata module (not shown) configured to reveal SDO metadata for internal properties. A client  may request metadata concerning the internal properties of the SDO in order to discover what properties are available for use. The SDO extended metadata module returns to the client metadata concerning the nature of the properties; for example, the SDO extended metadata module may return information concerning the number of, or names of, the internal properties. As noted above, this information is not available through the SDO data object implementation module .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 3","FIG. 2","FIG. 3A"],"b":"320"},{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface Type {"]},{"entry":[{},"\u2003\u2003List getDeclaredProperties( );"]},{"entry":[{},"\u2003\u2003List getProperties( );"]},{"entry":[{},"\u2003\u2003Property getProperty(String name);"]},{"entry":[{},". . ."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Those of skill in the art will recognize that EClassImpl  comprises a class which is part of EMF . EClassImpl  comprises methods such as getEAllStructuralFeatures( ), getEAttributes, getEStructuralFeatures( ), and others found in the EMF Javadoc. These methods, and others not listed, can be used to discover both user-defined and internal properties of an EMF object.","The SDO Type implementation class, ClassImpl , contains property-accessing methods which filter the list of EMF structural features, as explained in connection with . As shown in , in a preferred embodiment, ClassImpl  extends EClassImpl  and implements Type  interface. ClassImpl  both uses and overrides the methods of EClassImpl  in order to provide the functionality of the present invention. For example:",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003class ClassImpl extends EClassImpl implements Type"]},{"entry":[{},". . ."]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public List getDeclaredProperties( ) {"]},{"entry":[{},"\u2003\u2003\/\/ implement an algorithm to return a List of only user-defined"]},{"entry":[{},"\u2003\u2003properties."]},{"entry":[{},"\u2003\u2003Possible algorithms and approaches are described below."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003public List getProperties( ) {"]},{"entry":[{},"\u2003\u2003\/\/ implement an algorithm to return a List of only user-defined"]},{"entry":[{},"\u2003\u2003properties."]},{"entry":[{},"\u2003\u2003Possible algorithms and approaches are described below.}"]},{"entry":[{},"\u2003\u2003public Property getProperty(String name) {"]},{"entry":[{},"\u2003\u2003\/\/ Query getProperties( )."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003. . ."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The methods above may filter the internal properties by invoking EClassImpl  methods such as getEStructuralFeatures( ) and removing the returned properties from the list of all properties returned by the method. In the above embodiment, getProperties( ) provides the filter as described in connection with . For example, getProperties( ) may have code in it which, when invoked, uses getEStructuralFeatures to create a static list of internal properties. It may then call the getProperties( ) method of EClassImpl  to get a list of the properties, both user-defined and internal, of the EMF object. The getProperties( ) method may then comprise a simple algorithm to compare the results of both methods and return a List of properties which are unique to the getProperties( ) invocation. The resulting return value is a List of properties, with the internal properties filtered out. Those of skill in the art will recognize that any number of algorithms and approaches may be used to filter the internal properties, including filtering out internal properties by using a dynamic view of the getEStructuralFeatures( ) result.","Methods such as getProperty( ) may then leverage the getProperties( ) method of ClassImpl  to determine if the property is internal or user-defined. Those of skill in the art will recognize that multiple methods of determining internal properties that should be filtered, and methods for filtering them, are possible, and that the present invention is not limited to any particular method for doing so.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 3B","b":["340","120","340","340","340","310"]},"DataObject  interface specifies methods associated with an SDO object implementation; for example, the DataObject interface specifies:",{"@attributes":{"id":"p-0079","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface DataObject . . . {"]},{"entry":[{},"get. . .(property);"]},{"entry":[{},"void set. . .(property, value);"]},{"entry":[{},". . ."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"DataObjectImpl  extends the BaseEObjectImpl  class and implements the DataObject  interface to provide the current functionality. The SDO DataObjectImpl property accessors are implemented to use the filtered properties, as described above, before calling EMF to access the property. For example,",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003class DataObjectImpl extends BasicEObjectImpl implements"]},{"entry":[{},"\u2003\u2003DataObject {"]},{"entry":[{},"\u2003\u2003public get. . .(property) {"]},{"entry":[{},"\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003public void set. . .(property, value) {"]},{"entry":[{},"\u2003\u2003. . . }"]},{"entry":[{},"\u2003\u2003public boolean isSet (property) {"]},{"entry":[{},"\u2003\u2003. . .}"]},{"entry":[{},"\u2003\u2003. . ."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["330","360"]},"While the embodiment just described properly handles the dynamic SDO case, additional work is required for static SDO objects. As described above, static SDO objects are generated classes which directly host the property values associated with a particular SDO object. In contrast to the dynamic SDO case, where the properties were part of a generic SDO object, in the static case the properties are part of the particular class. For example, to continue with the examples used above, a client may instantiate and work with a static SDO object as follows:",{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Realestate myPlace = (Realestate) dataFactory.create(Realestate);"]},{"entry":[{},"myPlace.setBuilding(\u201cSmith Bank Building\u201d);"]},{"entry":[{},". . ."]},{"entry":[{},"String name = myPlace.getIndividualName( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 4","b":["400","400","410","412","414","416","410","400","400"]},"The static SDO object  further comprises an SDO index . Those of skill in the art will recognize that SDO currently provides an SDO index , wherein each property found in properties module  is assigned a positive index value. A client may pass an index value as a property-identifying parameter to a method, as explained above. For example, a client may specify: workSpace.set(1, \u201cDownie Building\u201d); to set the value of a property associated with an index value of 1 (such as, in this example, the property \u2018building\u2019) to the specified value passed as a parameter. Both internal and user-defined properties are assigned a positive SDO index  value.","In accordance with the present invention, the static SDO object  further comprises a new SDO index . The new SDO index  assigns properties a modified index value such that internal properties can be distinguished from user-defined properties. In a preferred embodiment, user-defined properties are assigned a positive index value and internal properties are assigned a negative index value. For example, a user-defined property \u201cbuilding\u201d may have an SDO index  value 1, and a new SDO index  value of 2. The internal property \u201ctenantGroup\u201d may have an SDO index  value 3, and a new SDO index  value of \u22121.","As described above, metadata concerning the properties  of the static SDO  revealed by the SDO View  only reveal user-defined properties in the properties . Similarly, requests for metadata concerning the index values of the properties  reveal only the positive values of the new SDO index  associated with the user-defined properties of the static SDO . The negative values of the new SDO index  associated with the internal properties of the static SDO  are available through the extended view .","Methods  constitute the methods associated with a particular static SDO . In a typical embodiment, the methods  will comprise getters and setters for the static properties . SDO currently supports operations on properties based on the property's index value, as described above. Thus, a client  may pass an SDO index value  for a property to a method in methods . Those of skill in the art will recognize that currently, methods module  in SDO associates an SDO index value  with a property  using a switch statement such as a case statement.","As described above, in one embodiment of the present invention, only the values of the new SDO Index  are made available to a client  and the SDO index  always remains hidden from the user. When the methods module  receives a request for execution of a method with an index value as a parameter, the method module  associates the provided new SDO index  value with an appropriate method call, and then executes the method call.","In one embodiment, where a client  provides a negative new SDO Index  value associated with an internal property to the methods module , the method module  associates the negative new SDO index  value with a property  through a switch statement and performs the requested operation. In an alternate embodiment, a client  may provide a negative new SDO index  value to an extended view  which invokes a conversion method in methods module  to associate a new SDO index  value with the associated SDO index  value. The extended view  then passes the associated SDO index  value as part of a call which performs the requested operation.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 5","FIG. 4","FIG. 5","FIG. 3B","FIG. 3B"],"b":["340","350","360"]},"DataObjectBase  is an abstract class extending DataObjectImpl  discussed above. DataObjectBase  constitutes the base class for generated objects and overrides the implementation of EMF APIs to call generated implementations of the SDO APIs. The DataObjectBase  class may contain methods such as:",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"abstract class DataObjectBase extends DataObjectImpl {"},{"entry":"\u2003\u2003protected abstract int internalConvertIndex"},{"entry":"\u2003\u2003(int propertyInternalIndex);"},{"entry":"\u2003\u2003public Object eGet (int propertyInternalConvertIndex, boolean"},{"entry":"\u2003\u2003resolve, boolean core ) {"},{"entry":"\u2003\u2003Object result = get(internalConvertIndex( propertyInternalIndex),"},{"entry":"\u2003\u2003resolve);"},{"entry":"\u2003\u2003. . ."},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public void eSet (int propertyInternalIndex, Object value) {"},{"entry":"\u2003\u2003set(internalConvertIndex(propertyInternalIndex), value);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003. . ."},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As discussed above, as part of the creation of an SDO, an interface is generated for the particular class. ObjectInterface  represents an interface related to a particular class to be implemented in SDO. For example, the Realestate object described above was said to have a complete interface as follows:",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public interface Realestate {"]},{"entry":[{},"\u2003\u2003String getBuilding( );"]},{"entry":[{},"\u2003\u2003void setBuilding (String value);"]},{"entry":[{},"\u2003\u2003String getIndividualOwner( );"]},{"entry":[{},"\u2003\u2003void setIndividualOwner (String value);"]},{"entry":[{},"\u2003\u2003String getCorporateOwner( );"]},{"entry":[{},"\u2003\u2003void setCorporateOwner (String value);"]},{"entry":[{},"\u2003\u2003String getTenant( );"]},{"entry":[{},"\u2003\u2003void setTenant(Tenant value);"]},{"entry":[{},"\u2003\u2003FeatureMap getGroup( );"]},{"entry":[{},"\u2003\u2003FeatureMap getTenantGroup( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"530"},{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public interface Realestate {"]},{"entry":[{},"\u2003\u2003String getBuilding( );"]},{"entry":[{},"\u2003\u2003void setBuilding (String value);"]},{"entry":[{},"\u2003\u2003String getIndividualOwner( );"]},{"entry":[{},"\u2003\u2003void setIndividualOwner (String value);"]},{"entry":[{},"\u2003\u2003String getCorporateOwner( );"]},{"entry":[{},"\u2003\u2003void setCorporateOwner (String value);"]},{"entry":[{},"\u2003\u2003String getTenant( );"]},{"entry":[{},"\u2003\u2003void setTenant(Tenant value);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Those of skill in the art will recognize that, as an abstract class, a client  cannot instantiate DataObjectBase  objects. As such, Implementation  class represents an implementation of a class for a particular static SDO which can be instantiated and generate objects for use by a client . Implementation  will directly host the static property values associated with the particular object. Implementation  extends the abstract DataObjectBase  class discussed above, implementing its abstract methods, and also implements ObjectInterface . In our Realestate example, Implementation  is the RealestateImpl class, which may appear as follows:",{"@attributes":{"id":"p-0098","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class RealestateImpl extends DataObjectBase implements Realestate {"},{"entry":"protected String building = UNSET;"},{"entry":"protected String individualOwner = UNSET;"},{"entry":". . ."},{"entry":"protected Sequence group = null;"},{"entry":"protected Sequence tenantGroup = null;"},{"entry":"static final int INTERNAL_BUILDING = 0,"},{"entry":"INTERNAL_INDIVIDUALOWNER = 1, . . . . INTERNAL_GROUP ="},{"entry":"5, INTERNAL_TENANTGROUP =6, BUILDING = 0,"},{"entry":"INDIVIDUALOWNER = 1, . . . GROUP = \u22121,"},{"entry":"TENANTGROUP = \u22122;"},{"entry":"protected int internalConvertIndex (int propertyInternalIndex) {"},{"entry":"switch (propertyInternalIndex)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003case INTERNAL_BUILDING:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return BUILDING;"},{"entry":"\u2003\u2003\u2003\u2003case INTERNAL_INDIVIDUALOWNER:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return INDIVIDUALOWNER;"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public Object get (int propertyPublicIndex, boolean resolve) {"},{"entry":"\u2003\u2003switch (propertyPublicIndex)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003case BUILDING:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return getBuilding( );"},{"entry":"\u2003\u2003\u2003\u2003case TENANTGROUP:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return getTenantGroup( );"},{"entry":"\u2003\u2003. . ."},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public void set (int propertyPublicIndex, Object value) {"},{"entry":"\u2003\u2003\/\/ same pattern as get"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public String getBuilding( ) {"},{"entry":"\u2003\u2003\u2003\u2003return building;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003. . ."},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As shown in the above example, Implementation  directly hosts the property values, such as building, individualOwner, and group in the above example. In addition, as is known to those in the art, SDO assigns the properties, both user-defined and internal, an index value comprising positive integer values. In accordance with the present invention, a modified index is created, where modified index values are assigned to the properties, user-defined properties having positive values and internal properties having negative values.","Implementation  further provides an internalConvertIndex method which correlates the internal SDO model index values to the modified index value. In the embodiment shown, this is done by means of a switch statement. Switch statements are similarly used in the get and set methods, such that a client  can invoke the method, provide a modified index value as a parameter, and get the expected operation.","As a result, a single switch statement can handle both user-defined properties and internal properties without imposing a significant performance impact on the SDO client. In the case of an advanced client  calling EMF methods to access internal features, those of skill in the art will recognize that abstract class DataObjectBase  overrides the EMF methods, invokes the internalConvertIndex method provided which relates the provided modified index value to the SDO model index value such that the correct information is returned in response to the client 's EMF method call. This imposes only a minor performance impact, requiring a call to the internalConvertIndex method before calling the generated accessor instead of calling the accessor directly.","The result is a mechanism for completely hiding the internal features of an EMF object derived from an XML Schema document, where the internal features necessary to fully represent the XML Schema are available to clients  with a need for such information, but hidden from clients  in most situations in order to simplify interaction with the object. This is implemented such that the solution imposes a minimal impact in terms of increased operational burden on the client .","The schematic flow chart diagrams that follow are generally set forth as logical flow chart diagrams. As such, the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function, logic, or effect to one or more steps, or portions thereof, of the illustrated method. Additionally, the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams, they are understood not to limit the scope of the corresponding method. Indeed, some arrows or other connectors may be used to indicate only the logical flow of the method. For instance, an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally, the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 6","b":["600","220","602","212","222","220","604"]},"The method  further comprises the SDO data object implementation  receiving  a request with a parameter identifying a property. The SDO data object implementation  validates  the parameter. As shown in , SDO data object implementation  may validate the parameter by determining whether the property referenced by the parameter is found in a filtered properties  set. In an alternative embodiment, SDO data object implementation  may invoke the methods of SDO property module  which may dynamically validate the parameter as opposed to comparing the parameter against a static list of valid properties.","The SDO property module  determines  whether the property referenced by the parameter is a valid property for the given SDO. If so, the SDO property module  calls  the methods of EMF to access the property and fulfill the request. If the parameter is invalid, SDO property module  returns  an error indicating to a client  that the property referenced is not a valid property of the SDO. The method  ends.",{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 7","b":["700","414","702","414","704"]},"The method  further comprises a static SDO  receiving from a client  a request concerning the properties of the static SDO . The static SDO  determines  whether the request is an access request, such as a get or set, or a discovery request to which the static SDO  should return metadata concerning its properties.","If the request is an access request for which an index value is provided to identify the relevant property, the methods module  associates  the index value with the SDO internal index value and performs  the requested operation. If the request is a discovery request, the static SDO  returns  to the client  metadata related only to the user-defined property information of the static SDO . The method  ends.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3A-B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
