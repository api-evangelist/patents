---
title: Language for binding scalable vector graphics elements to java classes
abstract: According to a technique described herein, a binding document comprises one or more “<bind>” element instances. Each “<bind>” element instance indicates an association between (a) an SVG element instance and (b) a class. When a binding's name is passed to a “createFromTemplate( )” method, the method processes all of the “<bind>” element instances that are associated within that name. For each such “<bind>” element instance, the method (a) creates, in an SVG DOM tree, a clone of a node that corresponds to an SVG element instance indicated in that “<bind>” element instance, (b) instantiates an object that is an instance of a class that is indicated in that “<bind>” element instance, and (c) stores data that establishes a binding between the clone node and the object. Methods of the object can be invoked to affect and/or alter attributes of the clone node to which the object is bound.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962895&OS=07962895&RS=07962895
owner: Oracle America, Inc.
number: 07962895
owner_city: Redwood City
owner_country: US
publication_date: 20060720
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENT(S)","Overview","Example SVG Document","The Visdev Framework","Example Binding Language","Example Visdev JAVA Class","Complex Design Elements","Overriding Existing Bindings","Example Flow","Hardware Overview"],"p":["Computerized development tools are increasingly becoming more visually oriented. For example, information can be displayed in a graph instead of as text. An easy-to-use shape description language helps a tool designer to more easily provide a visual aspect to computerized presentations. Scalable Vector Graphics (SVG) is an Extensible Markup Language (XML) language for describing two-dimensional graphics. SVG provides a good foundation for visual expression because SVG allows designers to describe visual elements in an XML format.","However, several limitations affect SVG. SVG visual elements are static, in that there are no behaviors associated with SVG visual elements. Also, the programming model for SVG is based on the XML Document Object Model (DOM). Consequently, SVG graphics are manipulated through the manipulation of nodes in an SVG DOM tree. No hooks exist for attaching executable code to the SVG DOM tree.","According to a technique described herein, a binding document comprises one or more \u201c<bind>\u201d element instances. Each \u201c<bind>\u201d element instance indicates an association between (a) an SVG element instance and (b) a class. When a binding's name is passed to a \u201ccreateFromTemplate( )\u201d method, the method processes all of the \u201c<bind>\u201d element instances that are associated within that name. For each such \u201c<bind>\u201d element instance, the method (a) creates, in an SVG DOM tree, a clone of a node that corresponds to an SVG element instance indicated in that \u201c<bind>\u201d element instance, (b) instantiates an object that is an instance of a class that is indicated in that \u201c<bind>\u201d element instance, and (c) stores data that establishes a binding between the clone node and the object. Methods of the object can be invoked to affect and\/or alter attributes of the clone node to which the object is bound.","According to a technique described herein, a binding document expresses bindings between SVG element instances and JAVA classes. The binding document is composed in a binding language that is a subset of XML. In one embodiment of the invention, the binding document comprises one or more \u201c<template>\u201d element instances. Each \u201c<template>\u201d element instance indicates a name for a binding. Additionally, each \u201c<template>\u201d element instance encloses one or more \u201c<bind>\u201d element instances. Each \u201c<bind>\u201d element instance indicates an association between (a) an SVG element instance, defined in an SVG document, and (b) a JAVA class in an API, or \u201cframework.\u201d","In one embodiment of the invention, when the name of a binding is passed as a parameter to an invocation of a \u201ccreateFromTemplate( )\u201d method, the \u201ccreateFromTemplate( )\u201d method reads and processes all of the \u201c<bind>\u201d element instances that are enclosed within the \u201c<template>\u201d element instance that indicates that name. For each such \u201c<bind>\u201d element instance, the \u201ccreateFromTemplate( )\u201d method creates, in an SVG DOM tree, a clone of a node that corresponds to an SVG element instance indicated in that \u201c<bind>\u201d element instance. Additionally, for each such \u201c<bind>\u201d element instance, the \u201ccreateFromTemplate( )\u201d method instantiates an object that is an instance of a JAVA class that is indicated in that \u201c<bind>\u201d element instance. For each such \u201c<bind>\u201d element instance, the \u201ccreateFromTemplate( )\u201d method stores data that establishes a binding between the clone node and the object. Methods of the object can be invoked to affect and\/or alter attributes of the clone node to which the object is bound.","The SVG Specification defines several different element types, such as \u201c<g>\u201d (which stands for \u201cgroup\u201d), \u201c<rect>,\u201d \u201c<circle>,\u201d and \u201c<text>.\u201d Each element type may have one or more attributes (e.g., \u201cid\u201d). An example SVG document is shown below.",{"@attributes":{"id":"p-0010","num":"0009"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<svg>"},{"entry":"\u2003\u2003<g id=\u201cBoxLabel\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<rect id=\u201cBox\u201d x=\u201c\u221225\u201d y=\u201c\u221210\u201d width=\u201c50\u201d height=\u201c20\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003fill=\u201cwhite\u201d stroke=\u201cred\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<text id=\u201cLabel\u201d x=\u201c0\u201d y=\u201c4\u201d text-anchor=\u201cmiddle\u201d"},{"entry":"\u2003\u2003\u2003\u2003font-size=\u201c9\u201d fill=\u201cblack\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Node"},{"entry":"\u2003\u2003\u2003\u2003<\/text>"},{"entry":"\u2003\u2003<\/g>"},{"entry":"\u2003\u2003<g id=\u201cCircleLabel\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<circle id=\u201cCircle\u201d cx=\u201c0\u201d cy=\u201c0\u201d r=\u201c15\u201d fill=\u201cwhite\u201d"},{"entry":"\u2003\u2003\u2003\u2003stroke=\u201cred\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<text id=\u201cLabel\u201d x=\u201c0\u201d y=\u201c4\u201d text-anchor=\u201cmiddle\u201d"},{"entry":"\u2003\u2003\u2003\u2003font-size=\u201c9\u201d fill=\u201cblack>"},{"entry":"\u2003\u2003\u2003\u2003<\/text>"},{"entry":"\u2003\u2003<\/g>"},{"entry":"<\/svg>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"There are SVG element types, and then there are \u201cinstances\u201d of those SVG element types. The foregoing SVG document comprises multiple instances of the same SVG element type. For example, there are two instances of the \u201c<g>\u201d SVG element type. One instance of this SVG element type has an \u201cid\u201d attribute value of \u201cBoxLabel,\u201d and one instance of this SVG element type has an \u201cid\u201d attribute value of \u201cCircleLabel.\u201d","The foregoing SVG document may be provided as input to an SVG engine. In response to receiving the SVG document as input, an SVG engine may render and display (a) a 50 pixel by 20 pixel white box with a red border and a text label that reads \u201cNode,\u201d as described by the SVG element instance whose \u201cid\u201d attribute value is \u201cBoxLabel,\u201d and (b) a white circle with a radius of 15 pixels and a blank text label, as described by the SVG element instance whose \u201cid\u201d attribute value is \u201cCircleLabel.\u201d","The foregoing SVG document describes only two shapes: the box (defined by the SVG element instance whose \u201cid\u201d attribute value is \u201cBoxLabel\u201d) and the circle (defined by the SVG element instance whose \u201cid\u201d attribute value is \u201cCircleLabel\u201d). A programmer might want the SVG engine to render and display multiple instances of these shapes. Traditionally, a programmer who wanted to accomplish this using SVG would need to use a document editor to make a separate copy of the appropriate SVG code for each instance desired, paste those multiple copies into the SVG document, and manually modify the attributes (e.g., coordinates, size, color, text label) of the SVG code for each instance desired. For example, if the programmer wanted the SVG engine to render 5 boxes and 3 circles, then the programmer would need to make 4 additional copies of the SVG code for the SVG element instance whose \u201cid\u201d attribute value is \u201cBoxLabel,\u201d and 2 additional copies of the SVG code for the SVG element instance whose \u201cid\u201d attribute value is \u201cCircleLabel.\u201d In order to cause the shapes to not overlap each other, the programmer would need to modify the coordinate attribute values for each copy. If the programmer wanted the labels of the shapes to differ, then the programmer would need to edit, manually, the text between the \u201c<text>\u201d tags in each copy.","\u201cVisdev\u201d is a JAVA-based visual framework. In the Visdev Framework, shapes such as boxes and circles are represented by \u201cdesign elements.\u201d Design elements may be imagined as \u201cwrappers\u201d around instances of SVG element nodes that are contained in an SVG DOM tree. Design elements provide a set of Application Programming Interfaces (APIs) through which a JAVA program can manipulate the SVG element nodes around which the design elements are \u201cwrapped.\u201d","According to one embodiment of the invention, design elements correspond to SVG element instances. In one embodiment of the invention, each different design element is implemented by a different JAVA class. Thus, in one embodiment of the invention, SVG element instances correspond to JAVA classes.","According to one embodiment of the invention, the JAVA classes do not actually comprise any code for causing the shapes to be rendered or displayed. Instead, the information that generally describes the shapes that are to be rendered and displayed remains within an SVG document. This allows programmers to continue to describe shapes using the easy-to-use SVG language. Programmers are not forced to write custom JAVA code that actually renders and displays shapes. Instead, programmers can merely write JAVA code that alters the attribute values of SVG element instances so that the shapes corresponding to those SVG element instances exhibit desired behavior. Thus, the shapes become \u201cdynamic\u201d rather than \u201cstatic.\u201d","According to one embodiment of the invention, JAVA classes in the Visdev Framework can extend other JAVA classes in the Visdev Framework, thereby inheriting the methods and variables of the extended JAVA classes.","As is described above, in one embodiment of the invention, JAVA classes correspond to SVG element instances. According to one embodiment of the invention, this correspondence is established through a \u201cbinding document\u201d that describes associations, or, in other words, \u201cbindings,\u201d between SVG element instances and JAVA classes. A binding document describes these bindings through a \u201cbinding language\u201d that is described herein. In one embodiment of the invention, the binding language is a subset of the XML language.","An example binding document, which is composed in the example binding language, is shown below. In one embodiment of the invention, the binding document is located in a separate file from the SVG document to which the binding document refers.",{"@attributes":{"id":"p-0020","num":"0019"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<v:defs xmlns=\u201chttp:\/\/www.sun.com\/2005\/visdev\u201d>"},{"entry":"\u2003\u2003<template id=\u201cBoxLabelTemplate\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<bind svg-ref=\u201cBoxLabel\u201d class=\u201cTextLabelDesignElement\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<bind svg-ref=\u201cLabel\u201d class=\u201cTextLabelDesignElement\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003field= \u201clabel\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<\/bind>"},{"entry":"\u2003\u2003<\/template>"},{"entry":"\u2003\u2003<template id=\u201cCircleLabelTemplate\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<bind svg-ref=\u201cCircleLabel\u201d class=\u201cTextLabelDesignElement\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<bind svg-ref=\u201cLabel\u201d class=\u201cTextLabelDesignElement\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003field=\u201clabel\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<\/bind>"},{"entry":"\u2003\u2003<\/template>"},{"entry":"<\/v:defs>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The foregoing binding document comprises two notable element types: the \u201c<template>\u201d element type and the \u201c<bind>\u201d element type, which are among the primitives of the binding language. In the foregoing binding document, there are two instances of the \u201c<template>\u201d element type: one whose \u201cid\u201d attribute value is \u201cBoxLabelTemplate,\u201d and one whose \u201cid\u201d attribute value is \u201cCircleLabelTemplate.\u201d Additionally, there are four instances of the \u201c<bind>\u201d element type.","Each \u201c<template>\u201d element instance may enclose, within its opening and closing tags, one or more \u201c<bind>\u201d element instances. Additionally, each \u201c<bind>\u201d element instance may enclose, within its opening and closing tags, one or more other \u201c<bind>\u201d element instances that are subordinate to the \u201c<bind>\u201d element instance within whose tags they are enclosed.","According to one embodiment of the invention, each \u201c<template>\u201d element instance has an \u201cid\u201d attribute whose attribute value identifies that specific \u201c<template>\u201d element instance. According to one embodiment of the invention, each \u201c<bind>\u201d element instance has an \u201csvg-ref\u201d attribute whose attribute value identifies an SVG element instance in an SVG document. Additionally, according to one embodiment of the invention, each \u201c<bind>\u201d element instance also has either (a) a \u201cclass\u201d attribute whose value identifies a JAVA class in the Visdev Framework, or (b) a \u201cfield\u201d attribute whose value identifies a variable (or \u201cfield\u201d) of a JAVA class in the Visdev Framework. According to one embodiment of the invention, a \u201c<bind>\u201d element instance may have both the \u201cclass\u201d attribute and the \u201cfield\u201d attribute. In one embodiment of the invention, if an particular \u201c<bind>\u201d element instance has a \u201cfield\u201d attribute but not a \u201cclass\u201d attribute, then the particular \u201c<bind>\u201d element is assumed to have a \u201cclass\u201d attribute whose attribute value is the same as the attribute value of a \u201cclass\u201d attribute of another \u201c<bind>\u201d element that encloses the particular \u201c<bind>\u201d element.","In the foregoing binding document, the first \u201c<template>\u201d element instance's \u201cid\u201d attribute value is \u201cBoxLabelTemplate.\u201d This signifies that a binding called \u201cBoxLabelTemplate\u201d should be created when binding occurs. This \u201c<template>\u201d element instance encloses a \u201c<bind>\u201d element instance whose \u201csvg-ref\u201d attribute value is \u201cBoxLabel\u201d and whose \u201cclass\u201d attribute value is \u201cTextLabelDesignElement.\u201d This signifies that the \u201cBoxLabelTemplate\u201d binding should include a binding between (a) a \u201cfirst level\u201d SVG element instance whose \u201cid\u201d attribute value is \u201cBoxLabel\u201d and (b) a \u201cTextLabelDesignElement\u201d JAVA class in the Visdev Framework. This \u201c<bind>\u201d element instance encloses yet another \u201c<bind>\u201d element instances whose \u201csvg-ref\u201d attribute value is \u201cLabel,\u201d whose \u201cclass\u201d attribute value is \u201cTextLabelDesignElement,\u201d and whose \u201cfield\u201d attribute is \u201clabel.\u201d This signifies that the \u201cBoxLabelTemplate\u201d binding should also include a binding between (a) a \u201csecond level\u201d SVG element instance that is enclosed within the \u201cfirst level\u201d SVG element instance and whose \u201cid\u201d attribute value is \u201cLabel\u201d and (b) a \u201clabel\u201d variable of the \u201cTextLabelDesignElement\u201d JAVA class in the Visdev Framework.","Similarly, in the foregoing binding document, the second \u201c<template>\u201d element instance's \u201cid\u201d attribute value is \u201cCircleLabelTemplate.\u201d This signifies that a binding called \u201cCircleLabelTemplate\u201d should be created when binding occurs. This \u201c<template>\u201d element instance encloses a \u201c<bind>\u201d element instance whose \u201csvg-ref\u201d attribute value is \u201cCircleLabel\u201d and whose \u201cclass\u201d attribute value is \u201cTextLabelDesignElement.\u201d This signifies that the \u201cCircleLabelTemplate\u201d binding should include a binding between (a) a \u201cfirst level\u201d SVG element instance whose \u201cid\u201d attribute value is \u201cCircleLabel\u201d and (b) a \u201cTextLabelDesignElement\u201d JAVA class in the Visdev Framework. This \u201c<bind>\u201d element instance encloses yet another \u201c<bind>\u201d element instances whose \u201csvg-ref\u201d attribute value is \u201cLabel,\u201d whose \u201cclass\u201d attribute value is \u201cTextLabelDesignElement,\u201d and whose \u201cfield\u201d attribute is \u201clabel.\u201d This signifies that the \u201cCircleLabelTemplate\u201d binding should also include a binding between (a) a \u201csecond level\u201d SVG element instance that is enclosed within the \u201cfirst\u201d SVG element instance and whose \u201cid\u201d attribute value is \u201cLabel\u201d and (b) a \u201clabel\u201d variable of the \u201cTextLabelDesignElement\u201d JAVA class in the Visdev Framework.","As is discussed above, in one embodiment of the invention, a binding document expresses bindings between SVG element instances and JAVA classes in the Visdev Framework. Also as is discussed above, the JAVA classes in the Visdev Framework can be designed to alter the attribute values of SVG element instances so that the shapes corresponding to those SVG element instances exhibit desired behavior.","When an SVG engine interprets an SVG document, the SVG engine creates an SVG DOM tree that comprises SVG element nodes that correspond to the SVG element instances in the SVG document. When the attribute values of the SVG element nodes are altered, the displayed shapes that represent those SVG element nodes are automatically updated to reflect the new attribute values. For example, if a JAVA class changes the attribute value of a \u201clabel\u201d attribute of an SVG element node in an SVG DOM tree, then the text displayed within a shape that represents that SVG element node will change automatically to reflect the new attribute value.","An example JAVA class that might be included in an implementation of the Visdev Framework is shown below.",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class TextLabelDesignElement extends CompositeDesignElement {"},{"entry":"\u2003\u2003public static int index = 0;"},{"entry":"\u2003\u2003private TextDesignElement label;"},{"entry":"\u2003\u2003protected void initialize(AbstractDesignView view) {"},{"entry":"\u2003\u2003\u2003\u2003String text = label.getText( ).trim( );"},{"entry":"\u2003\u2003\u2003\u2003label.setText(text + \u201c\u2009\u201d + (index++));"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the previous example, the binding document expressed a binding named \u201cBoxLabelTemplate.\u201d The \u201cBoxLabelTemplate\u201d binding included a binding between (a) the SVG element instance whose \u201cid\u201d attribute value is \u201cBoxLabel\u201d and (b) the \u201cTextLabelDesignElement\u201d JAVA class shown above. This \u201cBoxLabelTemplate\u201d binding also included a binding between (a) the SVG element instance whose \u201cid\u201d attribute value is \u201cLabel\u201d (and which is also a \u201cchild\u201d SVG element instance of the SVG element instance whose \u201cid\u201d attribute value is \u201cBoxLabel\u201d) and (b) the \u201clabel\u201d variable of the \u201cTextLabelDesignElement\u201d JAVA class shown above.","According to one embodiment of the invention, the Visdev Framework includes a class called \u201cAbstractDesignView\u201d that is a superclass (but not necessarily an immediate superclass) of all other classes in the Visdev Framework. An application program that uses the Visdev Framework instantiates an instance of the \u201cAbstractDesignView\u201d class. The \u201cAbstractDesignView\u201d class defines a method called \u201ccreateFromTemplate( ).\u201d The \u201ccreateFromTemplate( )\u201d method accepts, as a parameter, the name of a binding (e.g., \u201cBoxLabelTemplate\u201d). The application program invokes this method of the instance of the \u201cAbstractDesignView\u201d class.","When invoked, the \u201ccreateFromTemplate( )\u201d method reads the binding document. The method locates a \u201c<template>\u201d element instance whose \u201cid\u201d attribute value matches the name that was passed to the method as a parameter\u2014in this example, \u201cBoxLabelTemplate.\u201d The located \u201c<template>\u201d element instance encloses one or more first-level \u201c<bind>\u201d element instances. For each such first-level \u201c<bind>\u201d element instance, the \u201ccreateFromTemplate( )\u201d method (a) reads the attribute value of the \u201csvg-ref\u201d attribute of that \u201c<bind>\u201d element instance (the \u201csvg-ref value\u201d), (b) locates, in the SVG document, an SVG element instance whose \u201cid\u201d attribute value matches the svg-ref value (e.g., \u201cBoxLabel\u201d), (c) creates, in the SVG DOM tree, a \u201cclone\u201d node for that SVG element instance, (d) reads the attribute value of the \u201cclass\u201d attribute of that \u201c<bind>\u201d element instance (the \u201cclass value\u201d), (e) instantiates (in one embodiment of the invention, using reflection) an object that is an instance of the class (in the Visdev Framework) whose class name matches the class value (e.g., \u201cTextLabelDesignTemplate\u201d), and (f) stores, in memory, data that establishes an association, or binding, between the \u201cclone\u201d node (e.g., a clone of the \u201cBoxLabel\u201d SVG element node) and the object.","In one embodiment of the invention, when the \u201cclone\u201d node for an SVG element instance is created as described above, \u201cclone\u201d nodes are also created for each of that SVG element instance's \u201cdescendant\u201d SVG element instances in the SVG DOM tree. In one embodiment of the invention, for each first-level \u201c<bind>\u201d element instance enclosed by the \u201c<template>\u201d element instance, the \u201ccreateFromTemplate( )\u201d method recursively establishes bindings between the \u201cclone\u201d nodes for the child \u201c<bind>\u201d element instances enclosed by that first-level \u201c<bind>\u201d element instance, if any, and the appropriate variables (indicated by the \u201cfield\u201d attribute value of the child \u201c<bind>\u201d element instance) of the object that has been bound to that \u201cclone\u201d node for the first-level \u201c<bind>\u201d element instance. If those child \u201c<bind>\u201d element instances enclose any child \u201c<bind>\u201d element instances, then the \u201ccreateFromTemplate( )\u201d method recursively does the same for those child \u201c<bind>\u201d element instances, and so on. Thus, in the above example, an SVG DOM clone node for the \u201cBoxLabel\u201d SVG element instance is bound to a \u201cTextLabelDesignElement\u201d object, and a \u201cchild\u201d SVG DOM clone node for the \u201cLabel\u201d SVG element instance is bound to the \u201clabel\u201d variable of the \u201cTextLabelDesignElement\u201d object.","In one embodiment of the invention, when the \u201ccreateFromTemplate( )\u201d method creates the clone nodes in the SVG DOM tree, the display is automatically refreshed to show shapes that correspond to those clone nodes. In one embodiment of the invention, when the \u201ccreateFromTemplate( )\u201d method instantiates an object of the appropriate class (as indicated by the \u201cclass\u201d attribute value of the \u201c<bind>\u201d element instance), the \u201ccreateFromTemplate( )\u201d method also invokes the \u201cinitializes\u201d method of that object. Following the example of the \u201cTextLabelDesignElement\u201d class shown above, when the \u201cinitialize( )\u201d method of an object of that class is invoked, the \u201cinitialize( )\u201d method (a) increments a static variable \u201cindex\u201d that is shared by all objects of that class and (b) changes the value of the dynamic \u201clabel\u201d variable of that object to reflect the incremented value of the \u201cindex\u201d variable.","Thus, in the above example, each time that \u201ccreateFromTemplate(BoxLabelTemplate)\u201d is invoked, a new \u201cBoxLabel\u201d SVG node is created in the SVG DOM tree and displayed, and that SVG node's label is updated to reflect a next sequentially-occurring index value. Thus, the JAVA class \u201cTextLabelDesignElement\u201d adds behavior to the \u201cBoxLabel\u201d SVG node.","If \u201ccreateFromTemplate(CircleLabelTemplate)\u201d were to be invoked, then a new \u201cCircleLabel\u201d SVG node would be created in the SVG DOM tree and displayed, and that SVG node's label also would be updated to reflect the next sequentially-occurring index value, since, in the above example, \u201cCircleLabel\u201d is also bound to the \u201cTextLabelDesignElement\u201d class.","In one embodiment of the invention, the binding language also allows instances of other templates to be composited into a complex design element. For example, the following class might be defined in the Visdev Framework:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class MultiLabelDesignElement extends"]},{"entry":[{},"CompositeDesignElement {"]},{"entry":[{},"\u2003\u2003private collection<TextLabelDesignElement> labels;"]},{"entry":[{},"\u2003\u2003public void addLabel(TextLabelDesignElement label) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003appendChild(label);"]},{"entry":[{},"\u2003\u2003\u2003\u2003labels.add(label);"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003public void setBindingAttributes(Binding binding) {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\/\/attributes are interpreted here"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The class above can be used to hold multiple instances of \u201cTextLabelDesignElement\u201d that are composited together. In the above class, the \u201cappendChild( )\u201d method is an API method of\u201cCompositeDesignElement.\u201d When invoked, \u201cappendChild( )\u201d appends a new specified SVG node to the SVG DOM tree.","The following fragment of a binding document allows an instance of \u201cMultiLabelDesignElement\u201d to be created. When created, the object will contain an instance of the \u201cBoxLabelTemplate\u201d and the \u201cCircleLabelTemplate\u201d:",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<template id= \u201cMultiLabelTemplate\u201d>"},{"entry":"\u2003\u2003<bind template-ref=\u201cBoxLabelTemplate\u201d method=\u201caddLabel\u201d\/>"},{"entry":"\u2003\u2003<bind template-ref=\u201cCircleLabelTemplate\u201d method=\u201caddLabel\u201d\/>"},{"entry":"<\/template>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the above example, instead of referencing an SVG element instance, the \u201c<bind>\u201d element instances reference an entire \u201c<template>\u201d element instance as previously defined in the binding document. This causes instances of both the \u201cBoxLabelTemplate\u201d and the \u201cCircleLabelTemplate\u201d to be created. The \u201cmethod\u201d attribute of the \u201c<bind>\u201d element instance indicates to the \u201ccreateFromTemplate( )\u201d method that the \u201caddLabel\u201d method should be invoked, passing in the new \u201cTextLabelDesignElement,\u201d which will append the new SVG node to the SVG DOM tree.","According to one embodiment of the invention, the binding document can define one binding that overrides another binding previously defined in the binding document. For example:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<template id=\u201cOverriddenBoxLabelTemplate\u201d>"},{"entry":"\u2003\u2003<bind template-ref=\u201cBoxLabelTemplate\u201d svg-ref=\u201cMyBoxLabel\u201d"},{"entry":"\u2003\u2003\u2003\u2003class=\u201cMyTextLabelDesignElement\u201d\/>"},{"entry":"<\/template>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The above binding creates an instance of \u201cBoxLabelTemplate.\u201d However, instead of referencing \u201cBoxLabel\u201d and creating an instance of \u201cTextLabelDesignElement\u201d as specified by \u201cBoxLabelTemplate,\u201d the above binding causes the \u201cMyBoxLabel\u201d SVG element to be referenced and an instance of \u201cMyTextLabelDesignElement\u201d to be created.","In one embodiment of the invention, the binding language is extensible. Customized attributes can be added to the \u201c<bind>\u201d elements to add customized binding behaviors. In such an embodiment, the binding facility invokes a \u201csetBindingAttributes( )\u201d method on the design element, passing a \u201cBinding\u201d instance, which can be queried to return attributes in a corresponding \u201c<bind>\u201d element. The \u201csetBindingAttributes( )\u201d method on a design element can be overridden to process customized attribute extensions.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 1"},"In block , a \u201ccreateFromTemplate( )\u201d method of an \u201cAbstractDesignView\u201d object is invoked. A name of a binding, defined in a binding document, is passed as a parameter in the method invocation. For example, an application program may invoke the \u201ccreateFromTemplate( )\u201d method and pass to the method, as a parameter, the binding name \u201cBoxLabelTemplate.\u201d","In block , in response to the method invocation, the \u201ccreateFromTemplate( )\u201d method locates, in the binding document, a \u201c<template>\u201d element instance whose \u201cid\u201d attribute value matches that name that was passed to the method as a parameter. Continuing the example, the \u201ccreateFromTemplate( )\u201d method may locate, in the binding document, a \u201c<template id=\u2018BoxLabelTemplate\u2019>\u201d element.","In block , the \u201ccreateFromTemplate( )\u201d method locates a \u201c<bind>\u201d element instance that is enclosed within the <template>\u201d element located in block . Continuing the example, the \u201ccreateFromTemplate( )\u201d method may locate, in the binding document, a \u201c<bind svg-ref=\u2018BoxLabel\u2019 class=\u2018TextLabelDesignElement\u2019>\u201d element instance.","In block , the \u201ccreateFromTemplate( )\u201d method reads the attribute value of the \u201csvg-ref\u201d attribute of the \u201c<bind>\u201d element instance located in block . Continuing the example, the \u201ccreateFromTemplate( )\u201d method may read \u201cBoxLabel\u201d as the attribute value of the \u201csvg-ref\u201d attribute of the \u201c<bind>\u201d element instance located in block .","In block , the \u201ccreateFromTemplate( )\u201d method locates, in an SVG document to which the binding document refers, an SVG element instance whose \u201cid\u201d attribute value matches the svg-ref value read in block . Continuing the example, the \u201ccreateFromTemplate( )\u201d method may locate, in the SVG document, a \u201c<g id=\u2018BoxLabel\u2019>\u201d SVG element instance.","In block , the \u201ccreateFromTemplate( )\u201d method creates, in the SVG DOM tree, a \u201cclone\u201d node for the SVG element instance located in block . Continuing the example, the \u201ccreateFromTemplate( )\u201d method may create, in an SVG DOM tree, a clone of an SVG node for the \u201c<g id=\u2018BoxLabel\u2019>\u201d element instance. In one embodiment of the invention, the creation of the clone SVG node in the SVG DOM tree causes a display to be updated to show a new shape that the clone SVG node represents. The new shape has the characteristics indicated by the SVG element instance based upon which the clone SVG node was created.","In block , the \u201ccreateFromTemplate( )\u201d method reads the attribute value of the \u201cclass\u201d attribute of the \u201c<bind>\u201d element instance located in block . Continuing the example, the \u201ccreateFromTemplate( )\u201d method may read \u201cTextLabelDesignElement\u201d as the attribute value of the \u201cclass\u201d attribute of the \u201c<bind>\u201d element instance located in block .","In block , the \u201ccreateFromTemplate( )\u201d method instantiates an object that is an instance of the class whose class name matches the class value read in block . Continuing the example, the \u201ccreateFromTemplate( )\u201d method may instantiate an object that is an instance of the \u201cTextLabelDesignTemplate\u201d class. In one embodiment of the invention, when the object is instantiated, the \u201ccreateFromTemplate( )\u201d method automatically invokes an \u201cinitialize( )\u201d method of that object. The \u201cinitialize( )\u201d method may alter attributes of the clone SVG node that corresponds to the object, thereby causing the display to be updated automatically to reflect the alterations.","In block , the \u201ccreateFromTemplate( )\u201d method stores, in memory, data that establishes an association, or binding, between (a) the clone SVG node created in block  and (b) the object instantiated in block . For example, the \u201ccreateFromTemplate( )\u201d method may store data that establishes a binding between (a) the clone SVG node of the \u201cBoxLabel\u201d SVG element instance and (b) the \u201cTextLabelDesignElement\u201d object. Separate instances of the \u201cTextLabelDesignElement\u201d object may be bound to separate SVG nodes in the SVG DOM tree.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 2","b":["200","200","202","204","202","200","206","202","204","206","204","200","208","202","204","210","202"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","In computer system , bus  may be any mechanism and\/or medium that enables information, signals, data, etc., to be exchanged between the various components. For example, bus  may be a set of conductors that carries electrical signals. Bus  may also be a wireless medium that carries wireless signals between one or more of the components. Bus  may also be a medium that enables signals to be capacitively exchanged between one or more of the components. Bus  may further be a network connection that connects one or more of the components. Overall, any mechanism and\/or medium that enables information, signals, data, etc., to be exchanged between the various components may be used as bus .","Bus  may also be a combination of these mechanisms\/media. For example, processor  may communicate with storage device  wirelessly. In such a case, the bus , from the standpoint of processor  and storage device , would be a wireless medium, such as an electromagnetic wave. Further, processor  may communicate with ROM  capacitively. In this instance, the bus  would be the medium that enables this capacitive communication to take place. Further, processor  may communicate with main memory  via a network connection. In this case, the bus  would be the network connection. Further, processor  may communicate with display  via a set of conductors. In this instance, the bus  would be the set of conductors. Thus, depending upon how the various components communicate with each other, bus  may take on different forms. Bus , as shown in , functionally represents all of the mechanisms and\/or media that enable information, signals, data, etc., to be exchanged between the various components.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another machine-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201cmachine-readable medium\u201d as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system , various machine-readable media are involved, for example, in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of machine-readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","Processor  may execute the received code as the code is received and\/or stored in storage device  or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
