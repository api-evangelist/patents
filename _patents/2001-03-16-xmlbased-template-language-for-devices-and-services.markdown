---
title: XML-based template language for devices and services
abstract: A universal plug and play (UPnP) device makes itself known through a set of processes-discovery, description, control, eventing, and presentation. Following discovery of a UPnP device, an entity can learn more about the device and its capabilities by retrieving the device's description. The description includes vendor-specific manufacturer information like the model name and number, serial number, manufacturer name, URLs to vendor-specific Web sites, etc. The description also includes a list of any embedded devices or services, as well as URLs for control, eventing, and presentation. The description is written by a vendor, and is usually based on a device template produced by a UPnP forum working committee. The template is derived from a template language that is used to define elements to describe the device and any services supported by the device. The template language is written using an XML-based syntax that organizes and structures the elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06910068&OS=06910068&RS=06910068
owner: Microsoft Corporation
number: 06910068
owner_city: Redmond
owner_country: US
publication_date: 20010316
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION DATA","TECHNICAL FIELD","BACKGROUND AND SUMMARY","DETAILED DESCRIPTION","EXAMPLE"],"p":["This is a continuation-in-part of U.S. patent application Ser. No. 09\/496,318, entitled \u201cDynamic Self-Configuration For Ad Hoc Peer Networking\u201d, filed Feb. 1, 2000, which is based on provisional application No. 60\/139,137 filed Jun. 11, 1999, and provisional application No. 60\/160,235 filed Oct. 18, 1999. This also claims priority to provisional application No. 60\/190,943, filed Mar. 21, 2000, which is hereby incorporated by reference.","This invention relates generally to dynamic connectivity among distributed devices and services, and more particularly relates to providing a capability for devices to automatically self-configure to interoperate with other peer networking devices on a network, such as in a pervasive computing environment.","The cost of computing and networking technologies have fallen to the point where computing and networking capabilities can be built into the design of many electronic devices in the home, the office and public places. The combination of inexpensive and reliable shared networking media with a new class of small computing devices has created an opportunity for new functionality based mainly on the connectivity among these devices. This connectivity can be used to remotely control devices, to move digital data in the form of audio, video and still images between devices, to share information among devices and with the unconstrained World Wide Web of the Internet (hereafter \u201cWeb\u201d) and to exchange structured and secure digital data to support things like electronic commerce. The connectivity also enables many new applications for computing devices, such as proximity-based usage scenarios where devices interact based at least in part on geographical or other notions of proximity. A prevalent feature of these connectivity scenarios is to provide remote access and control of connected devices and services from another device with user interface capabilities (e.g., a universal remote controller, handheld computer or digital assistant, cell phones, and the like). These developments are occurring at the same time as more people are becoming connected to the Internet and as connectivity solutions are falling in price and increasing in speed. These trends are leading towards a world of ubiquitous and pervasive networked computing, where all types of devices are able to effortlessly and seamlessly interconnect and interact.","In the above ubiquitous and pervasive networked computing scenarios, the devices desirably can interoperate on an ad hoc peer-to-peer networking connectivity basis. Such a peer networking connectivity model enables any networked device to initiate a communication with any other networked device, without having established a prior relationship or maintaining a persistent relationship between the devices. This peer networking connectivity also allows multiple devices to establish one or more connections with a single device, and it allows for a device to be capable of both initiating and accepting connections to\/from other devices.","The prevalent model for device connectivity, however, has been that of host-peripheral connectivity, typified by the personal computer and its many peripheral devices (e.g., data storage drives, user input devices, displays, printers, scanners, etc.) connected via various buses (e.g., PCI, VESA, AGP, Microchannel, ISA, EISA, USB), ports (e.g., serial, parallel), and connectors (e.g., PS\/2 connector). This host-peripheral connectivity model is characterized in that the host and peripherals typically have persistent relationships and stable configurations. This persistent relationship is created, by example, through a set-up and configuration process through which appropriate driver software is installed by a user or administrator onto the host for use in controlling the peripheral, and updating the host's configuration to include peripheral device settings. Such persistent configured relationships with a user installation\/configuration experience are generally inappropriate to the ubiquitous and pervasive computing environment where portable and mobile devices desirably can instantly connect and interact with other computing devices in their environment without having established prior or persistent relationships.","More specifically, two common computing networks where many of these small, network-capable computing devices are expected to be used include the home and small office. Such networks are commonly not actively managed by experienced administrators. In fact, due to the lack of networking experience of a large majority of the users of these networks, lengthy, complex and\/or involved user installation and setup experiences pose a significant impediment to adoption and penetration of such networks and devices into homes and small offices.","Further, the establishment of persistent relationships with other devices in the configuration of these small, network-capable computing devices is inappropriate to many usage scenarios. For example, portable computing devices (such as a handheld computer or digital assistant, cell phones, and the like) may be used to access information (such as transportation departure\/arrival times, store locations, etc.) from other devices on networks in public places (such as malls and airports). Not only would a user installation\/configuration experience upon each such use pose an inconvenience, but the establishment of persistent configuration information poses configuration management issues and consumes device resources. As another example, devices (such as printers, scanners, monitors and etc.) on an office or home network may interact with many portable computing devices (such as the laptops, cameras, and other equipment of the mobile professional) that are introduced into its network. Again, in device connectivity models requiring establishing persistent device relationship configurations, such one-time and occasional relationships between these devices would results in configuration instability requiring management and maintenance of ever-changing persistent device configurations. Due to the time and cost (or lack of) active administration of these devices, any requirement to manage and maintain changing persistent device configurations on networked devices is undesirable.","Accordingly, there is a need for a device connectivity model that supports ad hoc peer networking among computing devices with preferably zero user installation or configuration experience and without persistent device configuration.","In accordance with a technology described herein, a universal plug and play (UPnP) device makes itself known and available for communication with other entities on a network through a set of processes-discovery, description, control, eventing, and presentation (herein also termed \u201cself-bootstrapping\u201d). Following discovery of a UPnP device, an entity can learn more about the device and its capabilities, or interact with the device, by retrieving the device's description from a URL provided by the device in an initial discovery message.","The description is expressed in XML and includes vendor-specific manufacturer information like the model name and number, serial number, manufacturer name, URLs to vendor-specific Web sites, etc. The description also includes a list of any embedded devices or services, as well as URLs for control, eventing, and presentation.","The description is written by a vendor and is usually based on a standard device template produced by a UPnP forum working committee. The template is derived from a template language that utilizes standard XML constructions. The template language includes a first set of elements to describe the UPnP device and a second set of elements to describe any services supported by the device. The template language is written using an XML-based syntax that organizes and structures the first and second sets of elements.","Additional features and advantages will be made apparent from the following detailed description of the illustrated embodiment, which proceeds with reference to the accompanying drawings.","The following detailed description is directed toward self-bootstrapping or automatic dynamic self-configuring of devices for ad hoc peer networking with other devices on a computing network that avoid user installation experience, persistent relationship configurations, and software driver downloads. In one described implementation, this self-bootstrapping is used in a device architecture  (FIG. ), connectivity model, and device control protocol proposed by Microsoft Corporation, called Universal Plug and Play (\u201cUPnP\u201d).","Universal Plug and Play","Universal Plug and Play (UPnP) is an open network architecture that is designed to enable simple, ad hoc communication among distributed devices and services from many vendors. UPnP leverages Internet technology and can be thought of as an extension of the Web model of mobile Web browsers talking to fixed Web servers to the world of peer-to-peer connectivity among mobile and fixed devices. UPnP embraces the zero configuration mantra of Plug and Play (PnP) but is not a simple extension of the PnP host\/peripheral model.","The cost, size and battery consumption of computing technology\u2014including processing, storage and displays\u2014continues to fall. This trend is enabling the evolution of stand-alone, single or limited function computing devices such as digital cameras, audio playback devices, smart mobile phones and handheld computers. Concurrent with this, the economical storage and transmission of digital audio, video and still images is enabling highly flexible models for managing entertainment content.","While many of these devices are capable of useful stand-alone operation, seamless connectivity with the PC can enhance the value to the customer of both stand-alone devices and the PC. Good examples of this synergy are digital image capture combined with PC image manipulation, storage and email transfer\/Web publishing and information synchronization between a PC and a handheld computer or smart mobile phone.","Since many of these devices, and the PC itself, are mobile, a suitable communication architecture must enable a highly dynamic connectivity model and must enable peer-to-peer operating among arbitrary combinations of devices.","The Internet has created a widespread awareness of the value of simple, universal communication that is independent of the underlying transmission technology and independent of technology from any single vendor.","UPnP makes it possible to initiate and control the transfer of bulk data (e.g. files) or A\/V data streams from any device on the network, to any device on the network, under the control of any device on the network. UPnP enables the ad hoc addition or removal of devices on the network, and it enables multiple controlling devices to remain in sync with each other.","UPnP reuses existing protocols and technology whenever possible. The transition to this highly connected (and connectable) world will not occur overnight. UPnP builds on existing Internet protocols, but accommodates devices that cannot run the complete UPnP protocol suite. UPnP provides an architecture that enables legacy devices to communicate with UPnP devices.","IP internetworking has been chosen as a UPnP baseline due to its proven ability to span different physical media, to enable real world multiple vendor interoperation and to achieve synergy with the Internet and home and office intranets. Internet synergy enables applications such as IP telephony, multiple player games, remote control of home automation and security, Internet based electronic commerce, in addition to simple email and Web browsing. UPnP's scope includes remote control of devices and bulk data transfer, and can be easily extended to specify A\/V streaming.","UPnP's media independence enables a great deal of flexibility in the packaging of products. UPnP enables an A\/V system to be controlled through an A\/C power communications technology, while the transmission of A\/V streams among the components is analog or digital. One of the controllers of this system could be on the television, while another is on a PC, and yet another connected via radio or infrared.","Unlike Plug and Play, Universal Plug and Play is built on top of networking and enables ad hoc peer-to-peer connectivity. Networking, in this context, describes a style of connectivity that enables any networked device to initiate a communication with any other networked device, without having established a prior relationship or maintaining a persistent relationship between the devices. Networking also allows multiple devices to establish one or more connections with a single device, and it allows for a device to be capable of both initiating and accepting connections to\/from other devices. The PnP, or host\/peripheral, model is suitable whenever there is a natural persistent relationship between two devices (e.g. a keyboard, mouse and display maintain and a persistent relationship with a host computer). Even though networking does not mandate low level persistent relationships, it provides the needed anchors (addresses) for applications to choose to maintain associations as a convenience for the customer (e.g. remembering commonly used networked printers).","In order to achieve multiple vendor peer-to-peer interoperation among devices, vendors desirably agree on common technology and standards up to the highest level of desired functional interoperation.","UPnP leverages formal protocol contracts to enable peer-to-peer interoperation. Protocols contracts enable real-world multiple-vendor interoperation.","UPnP provides a device-driven auto-configuration capability that preserves the experience that customers have on the Web. Today, it is possible to navigate around the Web without loading programs beyond the browser itself. UPnP enables the browser to be extended to control devices. Because UPnP devices are controlled with explicit protocols, the browser must somehow learn how to talk to UPnP devices. This learning process is driven entirely from the device itself and is accomplishing entirely by uploading an XML document that describes the capabilities of the device. The architectural component that enables device-driven auto-configuration is called the Rehydrator. The job of the Rehydrator is to convert between APIs and protocols.","There are some scenarios where the Web UI model is not sufficient for a rich customer experience. It would not be convenient to have a separate Web interface for each light switch in a house. To support a rich user interface and to enable the aggregation of devices into a single UI, UPnP enables application control in addition to browser control of devices. This is achieved simply by enabling applications to call the same Rehydrator APIs that the browser does. Applications can also directly generate and consume the raw UPnP control protocols, provided they are not interested in the device-driven auto-configuration enabled by the Rehydrator.","UPnP assumes that there will be more than one device with UI that wants to control other devices in any given network, and it provides a simple mechanism that enables these control points to remain in sync. This mechanism can easily support device front panels and wireless remotes that do not run UPnP protocols. The UPnP control model is third-party control; any device can transfer bulk data (e.g. files) or A\/V data streams from any device on the network, to any device on the network, under the control of any device on the network.","Terminology","The detailed description that follows uses the terminology defined below.","Module. A component of a device, software program, or system that implements some \u201cfunctionality\u201d, which can be embodied as software, hardware, firmware, electronic circuitry, or etc.","User Control Point. The set of modules that enable communication with a UPnP Controlled Device. User Control Points initiate discovery and communication with Controlled Devices, and receive Events from Controlled Devices. User Control Points are typically implemented on devices that have a user interface. This user interface is used to interact with Controlled Devices over the network. The modules minimally include a Discovery Client, a Description Client, a Rehydrator, an Event Subscription Client and an Event Sink,. User Control Points may also include Visual Navigation, a Web browser and an application execution environment. User Control Points can add value to the network by aggregating the control of multiple Controlled Devices (the universal remote) or they can implement a function as simple as initiating the transfer of data to or from a Controlled Device. Examples of devices that could be User Control Points are the personal computer (PC), digital television (DTV), set-top box (STB), handheld computer and smart mobile phone, and the like. Nothing prevents a single device from implementing the functionality of a User Control Point and one or more Controlled Devices at the same time.","Controlled Device. The set of modules that perform certain tasks (e.g., printing) and communicate with a User Control Point. Controlled Devices respond to discovery requests, accept incoming communications from User Control Points and may send Events to User Control Points. Devices that support Controlled Device functionality may also support local user interfaces such as front panel displays or wireless remotes. The modules minimally include a Discovery Server, a Description Server, a Control Server, an Event Subscription Server and an Event Source. Controlled Devices may also include a Presentation (e.g., Web) Server. Examples of devices that could be Controlled Devices are the VCR, DVD player or recorder, heating\/ventilation\/air-conditioning equipment (HVAC), lighting controller, audio\/video\/imaging playback device, handheld computer, smart mobile phone and the PC, and the like. Nothing prevents a single device from implementing the functionality of a User Control Point and one or more Controlled Devices at the same time.","Bridge. A set of modules that enables Bridged and Legacy Devices to interact with native UPnP devices. The bridge itself exposes a collection of UPnP Controlled Devices to User Control Points. The Bridge maps between native UPnP Device Control Protocols and the underlying protocols or other control methods exposed by the Bridged and Legacy Devices. Optionally, such a device could expose UPnP Controlled Devices to Legacy Devices in the manner required by the Legacy Devices. Nothing prevents a single device from implementing the functionality of a User Control Point, one or more Controlled Devices and a Bridge at the same time.","Service Provider. A module used by a UPnP Bridge that translates between UPnP protocols and the protocols used by Bridged and Legacy Devices. No Service Providers are required for communication among native UPnP devices.","Bridged Device. A device that cannot participate in UPnP at the native protocol level, either because the device does not have sufficient resources or because the underlying media is unsuitable to run TCP and HTTP. Examples of devices that could be Bridged Devices are power line-controlled A\/V equipment, light switches, thermostats, wristwatches and inexpensive toys. Bridged Devices are UPnP complaint and are exposed to other UPnP devices through a UPnP Bridge.","Legacy Device. Any non-UPnP compliant device that must be exposed to other UPnP devices through a UPnP Bridge.","Device Model. The UPnP model of Controlled Devices. The Device Model includes the addressing schemes, Description Document, Devices and Services hierarchy and the functional description of Services.","Device Control Protocol (DCP). A complete set of UPnP protocols and schemas used to interact with a UPnP Controlled Device.","Device Definition. The formal definition of a Device Type. A Device Definition includes a Device Type Identifier, the fixed elements in the Description Document, the required set of Service Definitions in the Root Device, and the hierarchy of required Devices and Service Definitions.","Service Definition. The formal definition of a Service Type. A Service Definition includes a Service Type Identifier, definition of the Service State Table (SST), definition of the Service Command Set, the Service Control Protocol (SCP) and Service Control Protocol Declaration (SCPD).","Device. In the context of the Device Model, a container for Services. A Device generally models a physical entity such as a VCR, but can also represent a logical entity. A PC emulating the traditional functions of a VCR would be an example of a logical device. Devices can contain other Devices. An example would be a TV\/VCR packaged into a single physical unit. UPnP enables the association of user interface (display icon and root Web page) with every Device, including Root Device.","Root Device. The topmost Device in a hierarchy of nested Devices. A Device with no nested Devices is always a Root Device.","Device Type. A relatively high level classification of Devices with common functionality. Device Type is intended to enable Devices to be simply and automatically grouped for search and\/or presentation. An example of a Device Type is \u201cVCR\u201d. Device Types are formally defined in terms of a required set of Service Definitions of minimum version that a compliant Device must support. UPnP supports searches for all Devices of a specified Device Type.","Device Type Identifier. A unique identifier that identifies a Device Definition. This identifier adheres to the format of a Uniform Resource Identifier (URI). See, T. Berners-Lee, R. Fielding, L. Masinter, \u201cUniform Resource Identifiers (URI): Generic Syntax\u201d, which can be found at http:\/\/www.ieff.org\/rfc\/rfc2396.txt.","Device Friendly Name. A human readable string that is usually initialized by vendors at the time of manufacturer of a Device. Every Device, including Root Devices, has a Device Friendly Name. A typical Device Friendly Name will contain manufacturer and model information, and especially when interpreted by humans, can be used to enable a more precise identification of a UPnP Device from the set of discovered Devices. Once identified, the Unique Device Name (UDN) can be used to unambiguously identify the same Device in the future. UPnP enables Device Friendly Names to be changed by User Control Points. The Device Friendly Name should not be used as device identifier.","Unique Device Name (UDN). The fundamental identifier of a Device. Every Device, including Root Devices, has exactly one UDN. The UDN is globally unique and permanent, even across power cycles and physical location changes. The UDN is the only UPnP device identifier guaranteed never to change. UPnP enables searches for devices by UDN.","Description Document. A structured unit of data that is used by a User Control Point or UPnP Bridge to learn the capabilities of a Controlled Device. Description Documents are retrieved from the Description Server on a UPnP Controlled Device. There is one Description Document for every Root Device that describes the Root Device and all non-Root Devices. Description Documents adhere to XML grammar. To support localization, multiple Description Documents can exist. A User Control Point requests the preferred localized Description Document by using the standard HTTP \u201caccept-language\u201d header.","Service. The fundamental UPnP controllable entity (but not the finest level of control). An example of a Service is \u201cClock\u201d. Services are defined with a mandatory common base set of functionality. Vendors can extend the base set with proprietary extensions provided the base functionality is implemented. Service Definitions are versioned and later versions are constrained to be supersets of previous versions. UPnP enables searches for all Devices that contain a specified Service of a minimum version. This search would find all clocks, regardless of their packaging. A search for Device Type \u201cClock\u201d would be used to find only stand-alone clocks.","Service Type. A classification of Services by their function.","Service Type Identifier. A unique identifier that identifies a Service Definition. This identifier adheres to the format of a Uniform Resource Identifier (URI). See, T. Berners-Lee, R. Fielding, L. Masinter, \u201cUniform Resource Identifiers (URI): Generic Syntax\u201d, which can be found at http:\/\/www.ietf.org\/rfc\/rfc2396.txt.","Service State Table (SST). A logical table consisting of rows of [Variable, Type, Legal Values, Default Value, Current Value] that represents the current electrical, mechanical and\/or logical state of a Service. SST instances are stored on the Controlled Device itself and are the ultimate authority of the state of the Service. All local user interface, such as front panels or wireless remotes are required to update the SST on UPnP compliant devices.","SST Definition:","Service Command Set. A set of Commands that can be invoked on a Service. Commands generally result in changes in the Current Value field of one or more rows of a SST. Commands are logically represented in the format Command (Variable=New Value, Variable=New Value, . . . ). Services must accept or reject the complete set of changes to a SST. There is a mandatory standard Query Command that is used to retrieve the Current Value of any row of a SST.","Service Command Set Definition","Service Control Protocol (SCP). The protocol used to invoke Commands against a Service and to return results. There is exactly one SCP per Service Definition. SCPs adhere to the grammar of SCP XML schema. SCPs can be generated by an automated tool that accepts a SST Definition and a Command Set Definition as input.","Service Control Protocol Declaration (SCPD). A formal representation of the schema of a Service. The SCPD declares the rows of a Service's SST and the associated Command Set. SCPDs are uploaded from Controlling Devices in their Description Documents and enable User Control Points or Bridges to invoke Commands on the Service without any prior or persistent knowledge of the capabilities (or schema) of the Service. There is exactly one SCPD per Service Definition. SCPDs adhere to XML grammar. SCPDs can be generated by an automated tool that accepts a SST Definition and a Command Set Definition as input.","Event. An unsolicited message generated by a Controlled Device and delivered to one or more User Control Points. Events are used to maintain a consistent view of the state of Service across all interested User Control Points. UPnP leverages the GENA event architecture (see \u201cGeneric Event Notification\u201d) to transport event messages. All events are delivered using TCP\/IP for reliability.","Generic Event Notification Architecture (GENA). An event transport protocol. GENA leverages TCP\/HTTP as a transport. GENA has been submitted as an Internet Draft to the IETF. See, J. Cohen, S. Aggarwal, Y. Goland, \u201cGeneral Event Notification Architecture Base: Client to Arbiter\u201d, which can be found at http:\/\/www.ietf.org\/internet-drafts\/draft-cohen-gena-client-00.txt.","Simple Service Discovery Protocol (SSDP). A simple network device discovery protocol. UPnP uses SSDP to allow User Control Points to find Controlled Devices and Services. SSDP operates in a default, completely automatic multicast UDP\/IP based mode in addition to a server-based mode that uses TCP\/IP for registrations and query. Transitions between the default dynamic mode and server-based mode are automatic and transparent to upper level software. SSDP enables every Controlled Device to control the lifetime that its Description URL is cached in all User Control Points. This enables a Controlled Device to remain visible to User Control Points for a relatively long time (through power cycles), in addition to enabling a Controlled Device to appear and disappear very quickly, all under the control of the Controlled Device. SSDP and related Multicast and Unicast UDP HTTP Messages specifications have been submitted as Internet Drafts to the IETF. See, Y. Goland, \u201cMulticast and Unicast UDP HTTP Messages\u201d, which can be found at http:\/\/www.ietf.org\/internet-drafts\/draft-goland-http-udp-00.txt; and Y. Goland, T. Cai, P. Leach., Y. Gu, S. Albright, \u201cSimple Service Discovery Protocol\/1.0\u201d, which can be found at http:\/\/www.ietf.org\/internet-drafts\/draft-cai-ssdp-v1-02.txt.","Client. In the context of UPnP, Client refers to a module that initiates a TCP\/HTTP connection to a peer HTTP server.","Server. In the context of UPnP, Server refers to an HTTP server. This is a module that accepts incoming TCP\/HTTP connections and either returns a Web page or forwards the payload data to another module. Client and Server describe only the direction of initiation of TCP\/HTTP connections. There is no relationship between the low level concepts of Client and Server and the high level concepts of User Control Point and Controlled Devices. Logically, User Control Points always discover and initiate communication with Controlled Devices, but this communication requires Client and Server functionality on both sides.","Hostname. A Hostname is the Domain Name System (DNS) or NetBIOS Name Service (NBNS) that, when resolved to an IP address, represents a network interface that can be used to establish TCP\/IP level connectivity to User Control Points, Controlled Devices or Bridges. Hostnames can be used to provide persistent network level addressing on a network where IP addresses are dynamically assigned and of unknown lifespan or to integrate with an existing managed network. UPnP provides an algorithm for seeding a device's hostname from its UDN at manufacturing time.","Uniform Resource Locator (URL). A format for expressing Web addresses. URLs minimally contain an identification of the protocol family that the URL is valid for, a Hostname, and a path. UPnP uses URLs as addresses whenever the module accepting the incoming connection is an HTTP server.","Description URL. The URL returned from a Controlled Device or Bridge in response to any UPnP SSDP query. This URL always points to a Description Server on the Controlled Device. An HTTP GET can be issued on this URL to retrieve the Description Document. This URL is valid as an address for the lifetime of the Hostname embedded in the URL.","Discovery Server. The module that runs in a Controlled Device or Bridge that responds to SSDP queries. This Server is unique in that it must support UDP\/HTTP in addition to TCP\/HTTP.","Discovery Client. The module that runs in a User Control Point that initiates SSDP queries.","Description Server. The module that runs in a Controlled Device or Bridge that responds to HTTP GETs and returns Description Documents. This service consists of a TCP\/HTTP server than can retrieve and return a Description Document from persistent storage (like a filesystem).","Visual Navigation. User Control Point functionality that displays the icons of discovered Devices and enables the transfer of control to a browser or application to interact with the Controlled Device. In Windows, Visual Navigation could be implemented as a folder of icons.","Presentation URL. A URL that can be used by a User Control Point to navigate to the Presentation Server of a Controlled Device. This URL is returned in the Description Document and is valid as an address for the lifetime of the Hostname embedded in the URL. All Devices, including non-Root Devices, can have an associated Presentation URL.","Presentation Server. A Web Server in most common cases. The module that runs in a Controlled Device that responds to HTTP GETs or Presentation URLs and returns user interface using Web technologies (JavaScript, Jscripte, ECMAScript, VBScript, ActiveXe, Java Applet, etc.).","Browser. A Presentation Client. A Web browser extended with a Rehydrator.","Control URL. A URL that can be used by a User Control Point to navigate to the Control Server of a Controlled Device or Bridge. This URL is returned in the Description Document and is valid as an address for the lifetime of the Hostname embedded in the URL. All Services have an associated Control URL.","Control Server. The module that runs in a Controlled Device or Bridge that responds to Commands invoked on a Service by a User Control Point. Commands are encoded and sent using the SCP specified in the Service Definition. This service consists of a TCP\/HTTP server that passes control to the native control logic of a Service, updates the SST and generates an event if the SST changes.","Rehydrator. In UPnP, a Control Client. A User Control Point module that translates between native operating system APIs and SCPs and events. The Rehydrator uploads SCPDs from Controlled Devices and Bridges and generates appropriate SCPs in response to application API requests to invoke Commands.","Event Subscription URL. A URL that can be used by a User Control Point to navigate to the Event Subscription Server of a Controlled Device or Bridge. This URL is returned in the Description Document and is valid as an address for the lifetime of the Hostname embedded in the URL. All Services have an associated Event Subscription URL.","Event Subscription Server. The module that runs in a Controlled Device or Bridge that responds to GENA SUBSCRIBE requests from User Control Points. A SUBSCRIBE informs the Controlled Device or Bridge of the User Control Point's desire to receive future events. This service consists of a TCP\/HTTP server that adds the User Control Point's Event Sink URL to the list of destinations to be NOTIFY'd whenever the SST associated with the Service changes.","Event Subscription Client. The module that runs in a User Control Point that sends GENA SUBSCIBE messages to the Event Subscription Server.","Event Sink URL. A URL, supplied by a User Control Point, that is used as an address to send event NOTIFYs to. This URL is valid as an address for the lifetime of the Hostname embedded in the URL. There is no explicit relationship between Event Sink URLs and Subscription Identifiers.","Subscription Identifier (SID). A header in the GENA NOTIFY message that identifies the source of an event. In UPnP, the SID can be considered as an alias for the Event Source instance.","Event Sink. The module that runs in a User Control Point that accepts incoming GENA event NOTIFYs. This service consists of a TCP\/HTTP server that passes the event information to interested applications running on the User Control Point.","Event Source. The module that runs in a Controlled Device or Bridge that sends GENA NOTIFYs to the Event Sink Servers of SUBSCRIBES User Control Points.","Domain Name System (DNS). A distributed system of servers that locates the IP addresses of other computers on a network based on their hierarchical names.","NetBIOS Name Server (NBNS). A server that locates the IP addresses of other computers on a network based on their flat NetBIOS computer names.","Multicast DNS (MDNS). A peer-to-peer translation scheme that does not require involvement of DNS servers.","UPnP Technologies Overview","An overview of technologies utilized in UPnP follows.","Device Discovery: Simple Service Discovery Protocol (SSDP)","TCP\/IP provides the ability to initiate a connection with a specified application running on a specific device, provided both the network address of the device (IP address) and the application address (port) are known. Generally, application addresses (ports) are standardized and widely known, but the problem of learning the IP address of a device remains.","Simple Service Discovery Protocol (SSDP) is a protocol that enables devices to learn of the existence of potential peer devices and the required information (an IP address) needed to establish TCP\/IP connections to them. The successful result of an SSDP search is a Uniform Resource Locator (URL). The Hostname embedded in the URL can be resolved to an IP address that can be used to make a connection to the discovered device. The name to address resolution is outside of the functionality of SSDP.","SSDP specifies a default, completely automatic, best-effort multicast UDP-based operating mode, in addition to a server mode that uses TCP for registration and query. Fall-forward to server mode and fallback to the default dynamic mode can occur automatically and transparently as a server is added or removed from a network. Server mode can be used to reduce network traffic, to implement searches based on location or policy and to integrate with a directory system.","SSDP requires that all devices specify a maximum lifetime that SSDP level knowledge of the device will remain cached in other network devices. If a device does not refresh the cache of other network devices before this interval expires, the device will be assumed to have disappeared from the network. This interval can be chosen to be larger than a typical power down cycle to enable device visibility to persist for a relatively long time, or a smaller interval can be chosen to enable more dynamic visibility control. In all cases, devices that are abruptly removed from the network will eventually disappear from all networked devices.","In response to an SSDP search, UPnP devices return a Description URL in the SSDP Location and optionally the Alternate Location (AL) SSDP headers. An example location header is a follows:","Location: http:\/\/device.local\/description\/path\/description.xml","In this example, the device.local is the Hostname of the Controlled Device, and the \u201cdescription\/path\/description.xml\u201d element of the URL is the path and name of the Description Document on the device.","Eventing: Generic Eventing Notification (GENA)","Eventing, in the context of UPnP, is the ability for a device to initiate a connection at any time to one or more devices that have expressed a desire to receive events from the source device. Events are used to enable synchronization among multiple devices organized into a many to one relationship. UPnP events are mainly used for asynchronous notifications of state changes.","TCP\/IP provides the fundamental support for the connections that carry event information reliably. Generic Event Notification (GENA) adds conventions for establishing relationships between interested devices and an addressing scheme to enable the unambiguous delivery of events. GENA leverages HTTP addressing and encapsulation.","User Control Points, Controlled Devices and Bridges","With reference now to , UPnP is an application-level distributed network architecture where the logical nodes on the network are User Control Points -, Controlled Devices - and Bridges . These classifications refer to functionality rather than physical entities. The functionality of UPnP User Control Points -, Controlled Devices - and Bridges  can be packaged into physical entities (e.g., multiple function devices -) in any combination.","The primary distinction between a User Control Point - and a Controlled Device - is that the User Control Point is always the communication initiator. After the initial communication, User Control Points can receive events from Controlled Devices.","Controlled Devices - are responsible for storing and updating the state of Services. User Control Points are required to synchronize to the state on Controlled Devices and to share state directly among themselves.","User Control Points typically have user interface that is used to access one or more Controlled Devices on the network. Controlled Devices typically only have local user interfaces.","Bridges  () expose devices that do not expose native UPnP protocols as native UPnP Controlled Devices. The Bridge itself looks to other UPnP User Control Points like a set of Controlled Devices.","The following table lists the modules in the User Control Points - and Controlled Devices -, along with their functions.",{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["User Control Point","Controlled Device"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Function","Module","Function","Module"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Initiate discovery","Discovery Client","Respond to","Discovery Server"]},{"entry":["of Controlled",{},"discovery"]},{"entry":["Devices.",{},"requests."]},{"entry":["Retrieve","Description Client","Provide","Description"]},{"entry":["Description",{},"Description","Server"]},{"entry":["Documents.",{},"Documents."]},{"entry":["Display a folder","Visual Navigation"]},{"entry":"of icons per"},{"entry":"discovered"},{"entry":"Device and allow"},{"entry":"transfer of"},{"entry":"control to a"},{"entry":"selected device."},{"entry":["View user","Web Browser","Provide user","Presentation"]},{"entry":["interface exposed",{},"inteface for","(Web) Server"]},{"entry":["by a Controlled",{},"remote User"]},{"entry":["Device.",{},"Control Points."]},{"entry":["Execute","Application"]},{"entry":["applications.","Execution"]},{"entry":[{},"Environment"]},{"entry":["Invoke","Rehydrator","Accept","Control Server"]},{"entry":["Commands on a",{},"incoming","plus native"]},{"entry":["Controlled Device",{},"Commands in","control logic"]},{"entry":["by sending",{},"SCPs and"]},{"entry":["Service Control",{},"execute them."]},{"entry":"Protocols in"},{"entry":"response to local"},{"entry":"API calls."},{"entry":["Inform a","Event","Accept requests","Event"]},{"entry":["Controlled Device","Subscription","for Events and","Subscription"]},{"entry":["of a desire to","Client","remember","Server"]},{"entry":["receive Events.",{},"them."]},{"entry":["Receive an Event.","Event Sink","Send an Event.","Event Source"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Device Model","The UPnP Device Model 200 shown in  is the model of a UPnP Controlled Device or Bridge that is emulating native Controlled Devices. The Device Model includes the addressing scheme, eventing scheme, Description Document schema, Devices and Services schema and hierarchy, and the functional description of modules. The UPnP Device Model extends beyond simple API or a command and control protocol definitions to enable multiple User Control Points to have a consistent view of Controlled Devices. This requires that the state of running services be formally modeled and that all state changes be visible to User Control Points. Central to the distributed UPnP architecture is the rule that Controlled Devices are the ultimate authority for the state of Services running on them.","Service","The fundamental controllable entity in UPnP is a Service -. Every running instance of a Service includes:\n\n","The SST  can be used to represent the operational mode of device or to act as an information source or sink for structured data or simple files. The SST of a VCR  () could represent the current transport mode, tuner channel selection, input and output switch selections, audio and video decoding format and current timer program. The SST of clock  () would likely represent the current time. The SST of an image rendering device could implement a video frame-buffer that can accept raw pixel information or formatted JPG files. The SST of an audio or video playback device could implement a transfer buffer or queue of material to be played. The SST of PDA could implement a collection of formatted data that has changed and needed to be synchronized with another device, in addition to a transfer buffer for accepting incoming formatted data.","The logical structure of a SST published in the Service Definition, but the actual storage format of an instance of a SST is entirely up the device. The only interaction with a SST is through a formal application level network protocol.\n\n","The formal definition of a Service (Service Definition) includes:\n\n","Device","According to the device model  shown in , a UPnP Device - (e.g., multiple function devices - of FIG.  and bridged devices - of ) is a logical container of one or more Services -. Generally a Device represents a physical entity such as a VCR. Typical Services in the VCR Device example might be \u201cTRANSPORT\u201d, \u201cTUNER\u201d, \u201cTIMER\u201d and \u201cCLOCK\u201d. While Devices are often physical entities, a PC emulating the traditional functions of a VCR could also be modeled in the same way as the stand-alone VCR. Devices can contain other Devices. An example would be a TV\/VCR 250 () packaged into a single physical unit. A Device (e.g., devices -) may also be a logical container of other Devices. The top-most Device in a hierarchy of nested Devices - is called the Root Device . A Device with no nested Devices is always a Root Device.","The UPnP Device Model was designed to be general and flexible. It should be possible to model an entire Nuclear Power Plant as a single Service or as a deeply nested hierarchy of Devices and Services. In general, a Service - is cohesive set of functions that enables flexible packaging into a variety of Devices. Services can be versioned independently of Devices.","All Devices, including Root Devices belong to one or more Device Types. Device Types are intended to enable instances of Devices to be simply and automatically grouped for presentation. An example of a Device Type is \u201cVCR\u201d  (FIG. ). Device Types are formally defined in terms of a minimal set of versioned Services that a Device of Device Type must support. Device Types are not formally versioned. Device Type is a relatively high level grouping. A Device of Device Type only ensures that minimal set of Services of a minimal version is present. There can be other Services, higher versioned Services and Services with vendor extensions present on such a Device.","UPnP enables SSDP level searches for a unique instance of a Device (by UDN), all Devices of type Device Type and all Devices that contain at least one Service Type of minimum version. The result of an SSDP search is always a URL that points to the Description Document contained in the Root Device. In the event that matching Device is not the Root Device, the Description Document has a tree of nested Devices that can be traversed to find the matching Device.","Every Device includes:\n\n","Every Root Device  also includes the Description Document  and Description Server  for all Devices under and including itself.","The formal definition of a Device (Device Definition ) includes:\n\n","There can be many Device Definitions that belong to a single Device Type.","Device Types","The formal definition of a Device Type includes:\n\n","Service State Table","A Service State Table (SST) logically consists of rows of:","Variable, Type, Legal Values, Default Value, Current Value Although entries of the Service State Table in UPnP consist of these five items, the state table alternatively can contain fewer or additional items. Generally, each entry will minimally consist of a Variable name or identifier, and its current value.","The following table lists various Types available in UPnP.",{"@attributes":{"id":"p-0157","num":"0175"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Type","Description","Example"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["String","A sequence of UNICODE characters.",{}]},{"entry":["Number","A number, with no limit on digits; may","15, 3.14, \u2014"]},{"entry":[{},"potentially have a leading sign,","123.456E+10"]},{"entry":[{},"fractional digits, and optionally an"]},{"entry":[{},"exponent. Punctuation as in US"]},{"entry":[{},"English."]},{"entry":["Boolean","TRUE or FALSE."]},{"entry":["DateTime","A date in ISO8601 format, with","19941105T08:1"]},{"entry":[{},"optional time and optional zone.","5:5+03"]},{"entry":[{},"Fractional seconds may be as precise"]},{"entry":[{},"as nanoseconds. See, \u201cData elements"]},{"entry":[{},"and interchange formats - Information"]},{"entry":[{},"interchange - Representation of dates"]},{"entry":[{},"and times\u201c, which can be found at"]},{"entry":[{},{"u":"http:\/\/wwwiso.ch\/markete\/8601.pdf."}]},{"entry":["ByteBlock","An unstructured sequence of bytes."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The ByteBlock is essentially a data buffer. In one use, a variable of this type can be used to effect transfer of a file from the Controlled Device to the User Control Point. The file to be transferred is kept in the Service State Table as the current value of this variable. On a change in the file, the file is transferred to any subscribing User Control Point in an event notification.","The reason for representing Services this way is to ensure that the state of a Service is easily available in a common way to multiple User Control Points.","An SST can be used to represent to current operational mode of device, act as an information source or sink and\/or simply be a repository for commands. The SST of a VCR Service could represent the current transport mode, tuner channel selection, input and output switch selections, audio and video decoding format and current timer program. Alternatively, the VCR  could be represented as a Transport Service , Tuner Service, I\/O Switch Service, A\/V Decoding Configuration Service and Programmable Timer Service .","The SST of a clock  would likely represent the current time. Additionally an alarm clock could include Service Variables to configure the clock.","The SST of an image rendering device could implement a video frame-buffer that can accept raw pixel information or formatted JPG files. The SST of an audio or video playback device could implement a transfer buffer or queue of material to be played. The SST of PDA could implement a collection of formatted data that has changed and needed to be synchronized with another device, in addition to a transfer buffer for accepting incoming formatted data.","User Control Point Synchronization","In accordance with an device state and eventing model illustrated in , UPnP rules require that every change to an SST generate a corresponding event to announce the change to the all interested User Control Points.","UPnP Self-Bootstrapping","With reference to , UPnP self-bootstrapping  is an integrated set of technologies organized as layers of a stack that include addressing , naming , discovery , and description  layers. The technologies in these layers is discussed in detail below. At the addressing layer , UPnP utilizes the Dynamic Host Configuration Protocol (DHCP) and AutoIP protocol for device addressing described below, which operate to dynamically assign an address to a UPnP device when introduced on a network. At the naming layer , UPnP utilizes the Domain Name System (DNS) and multicast DNS protocols and\/or the NetBIOS Name Service (NBNS) protocol to provide services to refer to devices using names according to a naming convention. At the discovery layer , UPnP utilizes the Simple Service Discovery Protocol (SSDP) protocol by which a UPnP device can discover other devices present on the network. At the description layer , UPnP utilizes XML-based schema to describe device structures and operational functions exposed by a UPnP Controlled Device and XML message-based protocols for their invocation. The UPnP user control points can use this XML-based schema description to invoke and thereby control the UPnP Controlled Device at a usage layer .","Device Addressing","With reference now to , UPnP is built on top of HTTP and leverages the native address format of the Web, Uniform Resource Locators (URLs), beyond the basic network addressing. URLs minimally contain an identification of the application protocol family (\u201chttp\u201d) that the URL is valid for, a Hostname and a path. In the context of UPnP, the path part of a URL can represent either a filesystem path or simply an identifier of the local system module and context that can process incoming messages.","While UPnP modules are described as HTTP servers, there is no requirement that implementations be based on actual Web servers. In most cases, the job of the HTTP server is simply to accept the incoming connection, look at the local destination part of the address (the path) and forward the payload to another module. UPnP enables, but does not require, that all HTTP Servers be based on a common software implementation or runtime instance. Controlled Devices and Bridges can include a TCP port specification as part of a URL to override the default value of 80.","The successful result of a SSDP level search in UPnP is always one or more Description URLs. These URLs can be used to navigate to the Description Document of a Controlled Device or Bridge. A User Control Point uploads the Description Document and extracts the URLs of the Servers running on the Controlled Device or Bridge.","All URLs returned in the Description Document have a lifetime equal to the lifetime of the Hostname embedded in them. User Control Points can store these URLs as addresses without going through a search sequence first. Once they have been advertised in a Description Document, Controlled Device and Bridges cannot arbitrarily change Server URLs.","Whenever a Hostname changes, all URLs associated with all Devices addressed by that Hostname are invalidated. The UDN is the only UPnP identifier guaranteed never to change. Any persistent associations maintained by applications should at least store the UDN to able to unambiguously identify the target Device.","The lifetime of a Description URL is determined by Controlled Device or Bridge that advertises it. If a Controlled Device or Bridge allows an SSDP advertisement of a Description URL to expire, the URL is invalidated.","User Control Points use the Event Subscription URL returned by the Controlled Device or Bridge to connect to the Event Subscription Server. This server does the housekeeping of remembering all User Control Points that are interested in receiving Events on a Service. The Event Subscription Server needs an address to send the events back to. This address is called the Event Sink URL, and is supplied to the Controlled Device or Bridge in the GENA SUBSCRIBE message. The lifetime of an event subscription, and the Event Sink URL, is determined by the timeout on the SUBSCRIBE message.","Further details of UPnP addressing are listed in the following table.",{"@attributes":{"id":"p-0176","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UPnP Addresses"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["URL","Function"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Description","Points to the Description Server and Document path on a"]},{"entry":["URL","Root Device. This URL is returned by the Description"]},{"entry":[{},"Server as part of the discovery process."]},{"entry":["Presentation","Points to a Presentation (Web) Server on a Controlled"]},{"entry":["URL","Device. There is one Presentation URL per Device,"]},{"entry":[{},"including Root Devices. This URL can be entered into the"]},{"entry":[{},"address bar of a Web browser to navigate to the root Web"]},{"entry":[{},"page of a Device. This URL is returned in the Description"]},{"entry":[{},"Document."]},{"entry":["Control URL","Points to the Control Server implementing a Service on a"]},{"entry":[{},"Controlled Device. There is one Control URL per instance"]},{"entry":[{},"of a Service. This URL is returned in the Description"]},{"entry":[{},"Document."]},{"entry":["Event","Points to an Event Subscription Server on a"]},{"entry":["Subscription","Device. This URL is returned in the Description Document."]},{"entry":"URL"},{"entry":["Event Sink","Points to an Event Sink (an HTTP Server) on a User"]},{"entry":["URL","Control Point. This URL is specified by the User Control"]},{"entry":[{},"Point in the GENA SUBSCIBE message."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Device Discovery and Identification","UPnP enables SSDP searches for a unique Root or non-Root Device by UDN, devices of a specified Device Type and devices containing a Service of a specified Service Type.",{"@attributes":{"id":"p-0179","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UPnP SSDP Level Searches and Results"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Search for","Returns"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["A unique Root","A single Description URL pointing to the Description"]},{"entry":["Device","Server and Document path on the Root Device."]},{"entry":"(by UDN)"},{"entry":["A unique non-","A single Description URL pointing to the Description"]},{"entry":["Root Device","Server and Document path on the Root Device that"]},{"entry":["(by UDN)","contains the non-Root Device."]},{"entry":["Type of Device","A set of Description URLs pointing to the Description"]},{"entry":[{},"Servers\/Document paths of all Root Devices that match"]},{"entry":[{},"the Device Type, or contain a non-Root Device that"]},{"entry":[{},"matches the Device Type."]},{"entry":["Type of","A set of Description URLs pointing to the Description"]},{"entry":["Service","Servers\/Document paths of all Root Devices that contain"]},{"entry":[{},"a matching Service, or contain a non-Root Device that"]},{"entry":[{},"contains a matching Service."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"SSDP specifies Service Type (ST), Notification type (NT), and Unique Service Name (USN) header fields for queries and for announcements. UPnP uses the ST or NT header to carry one of the UPnP defined identifiers. A unique USN is required for each unique SSDP announcement.","Multiple instances of the same Service Type within a Controlled Device - or Bridge  are not independently announced.","UPnP search identifiers are used during the discovery process. The result of a successful discovery is one or more Description URLs. The format for search identifiers is:",{"@attributes":{"id":"p-0183","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"upnp:searchtype: [ allformat | UDNformat | srvformat"]},{"entry":[{},"| devformat ]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"searchtype","= [ UDN | SrvType | DevType | all ]"]},{"entry":[{},"allformat","= all"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UDNformat","= UDN:namespace:uniqueid"]},{"entry":[{},"namespace","= [ GUID | IEEEMAC | 1394]"]},{"entry":[{},"srvformat","= SrvType:servicetype:version"]},{"entry":[{},"devformat","= DevType:devicetype"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0184","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UPnP Search Identifiers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Format","Example"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["all","upnp:all","upnp:all"]},{"entry":["Unique Device","upnp:UDN:namespace:u","upnp:UDN:IEEEMAC:0C009"]},{"entry":["Name (UDN)","niqueid","9123456"]},{"entry":["Device Type","upnp:DevType:devicety","upnp:DevType:vcr"]},{"entry":[{},"pe"]},{"entry":["Service Type","upnp:SrvType: servicety","upnp SrvType:clock:1"]},{"entry":[{},"pe:ver"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"SSDP specifies that SSDP announcements must be made for all SSDP searchable values. The SSDP announcements with \u201call\u201d as the notification header value must carry the Root Device UDN as the USN header value. SSDP announcements for Device Types must carry the UDN of the Root Device concatenated with the Device Type URI as the USN header value. SSDP announcements for a Service Type will carry the UDN of the Root Device concatenated with the Service Type URI value as the USN header value. SSDP announcements of UDNs will repeat the UDN value as the USN header.",{"@attributes":{"id":"p-0186","num":"0204"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UPnP SSDP Announcements"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UPnP Notification",{}]},{"entry":["Announcement","Type","SSDP USN"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"\u201call\u201d","Root Device UDN"]},{"entry":["Unique Root","Root Device UDN","Root Device UDN"]},{"entry":"Device"},{"entry":["Unique non-Root","Non-Root Device","Non-Root Device UDN"]},{"entry":["Device","UDN"]},{"entry":["Device Type","Device Type","Root Device UDN + Device"]},{"entry":[{},"Identifier","Type Identifier"]},{"entry":["Service Type","Service Type","Root Device UDN + Service"]},{"entry":[{},"Identifier","Type Identifier"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"UPnP Bridges  () announce Bridged Devices - and associated Services using SSDP. The identifiers associated with the Bridged Devices are unique for the device, and they do not duplicate identifiers for Controlled Devices and Services directly available on the Bridge itself. This means that a Bridge that is also a Controlled Device must announce Bridged Devices and local Controlled Devices independently, with appropriate unique identifiers, Description Documents and associated URLs.","Description","The UPnP Description Document  () provides the information necessary to identify, describe, connect and control a UPnP Controlled Device - or Bridge  from a User Control Point -.","The Description Document is an XML document. UPnP defines the use of HTTP and XML for the Description Document and wire protocols. UPnP adheres to the schema declaration rules of XML-Data and processing rules of Y. Goland, \u201cFlexible XML Processing Profile.\u201d","The top level XML elements are separated into three categories: per Device, per Service and shared.","Rehydrator","With reference now to , all (UPnP) Controlled Devices - () or Bridges  () expose one or more Services - () that can be controlled remotely. Controlling such Services involves a message exchange between a User Control Point  and the device . This message exchange happens according to a specific Service Control Protocol (SCP) , which specifies the content and sequence of the messages exchanged.","User Control Points  are not required to have any prior knowledge of the SCPs  required to control the Services on the various devices. Therefore, a Controlled Device or Bridge must be able to describe to a User Control Point the protocols required to control its Services, such that the User Control Point will be able to implement these protocols dynamically. This requires a standard way of declaring Service Control Protocols in a concise and unambiguous fashion. UPnP introduces a technique for declaring Service Control Protocols using a series of XML documents.","A Rehydrator  is a module that exposes a suitable API to applications and either invokes Commands on a Service or queries the state of that Service, or receives and responds to events. The primary job of the Rehydrator is to map between API calls and the Service Control Protocol sequence that invokes the Command.","As part of the Service Definition , a Service State Table  and Command Set  are defined. These things can be combined in a deterministic way defined by UPnP to produce a Service Control Protocol Definition (SCPD) , which includes a Service Control Declaration  and a Service Control Protocol . The SCPD  is a representation of the schema of a Service. It is possible to reconstruct the SST, Command Set and SCP from the SCPD.","The SCPD is directly embedded into the Description Document  of a Controlled Device. When the Description Document is uploaded into the User Control Point , the Rehydrator  can extract the SCPD from it. At this point, the Rehydrator has enough information to issue Service specific SCPs .","General Operation of the Rehydrator","More generally with reference to , the Rehydrator  operates as a universal adapter to provide a programmatic interface to any service-specific protocol of a remote computing device. The Rehydrator  simply obtains a data description or declaration of the methods, properties and events of the remote service, as well as a definition of the protocol of network data messages through which the Rehydrator invokes the methods, queries or sets the properties, and receives event notifications. In UPnP, this data description takes the form of the Description Document , which contains a Contract . The Contract defines network data packets  (e.g., XML data), request\/response patterns, and protocol (e.g., GENA, HTTP, SSDP) via which the packets are exchanged. This information is sufficient for the Rehydrator to exchange the appropriate network data packets to interact with the Controlled Device Service, including to invoke commands, query and set properties, and receive and respond to events, without download of any executable code to the User Control Point  device and with a zero installation or configuration experience.","The Description Document  also includes a declaration of the methods, properties and events for the Service. Based on this declaration, the Rehydrator produces a corresponding programmatic interface for use by applications at the User Control Point. The programmatic interface is an application programming interface that can be in the form of an object integration interface of an object-oriented programming model, such as Microsoft COM, CORBA, Java classes, and scripting engine name extensions. In the example illustrated in , the Rehydrator  exposes a COM object integration interface (\u201cIClock\u201d interface ), with methods getTime( ) and setTime( ), for a Controlled Device having a \u201cClock\u201d Service with GetTime and SetTime commands. The Rehydrator  converts calls of an application program  to the IClock interface  into the network data messages specified in the Contract to invoke the corresponding commands of the Clock Service. The Rehydrator  likewise creates suitable further programmatic interfaces for other Services (e.g., Services - of ) based on the Description Document of their respective Controlled Devices.","Accordingly, the Rehydrator operates as a universal proxy object with data-driven conversion of programmatic interfaces to network data messages. Further, the Rehydrator produces the programmatic interface at the User Control Point based solely on an XML data description. This operation allows the Rehydrator to produce just-in-time transient interfaces to remote device Services without the complexity of code downloads and installation or configuration. Upon a later release of the interface by the application, the Rehydrator destroys the interface without need to de-install or clean up persistent configuration data in a registry or configuration file of the operating system or object execution run-time.","Rehydrator Implementation","Summary. With reference to , a preferred implementation  of the Rehydrator  is as an internal Microsoft Windows component that routes service control requests from the UPnP API to devices. Applications wishing to control a service on a UPnP device obtain a Service object through the UPnP API and use the methods of this object to query the state variables of the service and invoke its actions. Those methods use the Rehydrator API to turn the service control requests into network messages that travel to the UPnP device. In this sense, the Rehydrator performs a mapping between API calls and network protocols.","Basic Functionality. The preferred implementation of the Rehydrator is able to translate a service control call to the UPnP API into the appropriate network messages defined by the Service Control Protocol.","Asynchronous Event Notification. The preferred implementation of the Rehydrator is able to notify UPnP API clients of any asynchronous events generated by the devices they are controlling. Event notification is done by means of the event interfaces defined below.","Error Reporting. For a variety of reasons, state variable queries and action invocations may fail. The preferred implementation of the Rehydrator is able to provide a way to communicate the success or failure status of such operations to the parties initiating them.","Rehydrator Implementation Design. As illustrated in , the preferred implementation of the Rehydrator is used in two ways. First, the Device Finder  uses it to create Service objects . Then, these Service objects use it to carry out service control operations (querying state variables and invoking actions).","Creating Service Objects. When the Device Finder  creates a Device object, it invokes the Rehydrator  to create Service objects  for each of the service instances on that device. Each service instance supports a particular Service Control Protocol and the Rehydrator needs a description of this protocol in order to create a properly hydrated Service object.","The Service Control Protocol is declared in two separate XML documents: the DCPD and the Contract. The Rehydrator needs the information in both documents. These two documents are passed to the Rehydrator as IXMLDOMDocument interface pointers in the RehydratorCreateServiceObject( ) API call.",{"@attributes":{"id":"p-0210","num":"0228"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"RehydratorCreateServiceObject("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN","IXMLDOMDocument *pDCpD,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"IN","IXMLDOMDocument","\u2002*pContractDocument,"]},{"entry":[{},{},"OUT","IUPnPService","**pNewServiceObject);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"This API returns a pointer to an IUPnPService interface on a newly created Service object. In addition to the creating the Service object, the Rehydrator sets up its internal data structures so that it can properly handle requests to control the service. Specifically, it creates a list of the properties and actions exported by the service. Since all service instances of the same service type export the same properties and the same actions, this information is kept only once for each service type and is indexed by Service Type Identifier.","The Rehydrator stores the information that is specific to a particular service instance as private data within the Service object itself. This includes the control URL and information about the control server  (such as the HTTP verbs it supports). The Service Type Identifier is the link between the Service object that represents one instance of a service type and the Rehydrator internal data structures that contain information common to all instances of that service type. The Service Type Identifier is stored as a private data member in the Service object.","Querying Service Properties. Applications can query the values of service properties by invoking the IUPnPService::GetProperty( ) method on a Service object. Internally, this method makes a call to the RehydratorQueryStateVariable( ) function.",{"@attributes":{"id":"p-0214","num":"0232"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"RehydratorQueryStateVariable("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN","LPCTSTR","1pcszVerb,"]},{"entry":[{},"IN","LPCTSTR","1pcszControlURL,"]},{"entry":[{},"IN","LPCTSTR","1pcszSTI,"]},{"entry":[{},"IN","LPCTSTR","1poszVarName,"]},{"entry":[{},"OUT","VARIANT","*pValue);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The first two in parameters to this function supply the service instance specific information: the HTTP verb to use and the control URL to which the network messages will be targeted. The third parameter is the Service Type Identifier that will be used to locate the Service Control Protocol information in the Rehydrator's internal data structures. The fourth parameter is the name of the variable that is being queried (the Rehydrator will validate this against is internal list of state variables exported by the service) and the final parameter is the address of a VARIANT structure in which the Rehydrator will place the variable's value.","This function will generate an HTTP request to the control server on the device. The body of this request will be an XML fragment containing a XOAP-encoded request for the variable's value. The following is an example of such a request (the exact header and payload format of this message is defined in the service contract):",{"@attributes":{"id":"p-0217","num":"0235"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"M-POST \/clockService HTTP\/1.1"]},{"entry":[{},"Host: spather-xeon:8586"]},{"entry":[{},"Content-Type: text\/xml"]},{"entry":[{},"Man: \u201chttp:\/\/www.microsoft.com\/protocols\/ext\/XOAP\u201d;"]},{"entry":[{},"ns=01"]},{"entry":[{},"01-MethodName: queryStateVariable"]},{"entry":[{},"01-MessageType: Call"]},{"entry":[{},"Accept-Language: en-gb, en;q=0.8"]},{"entry":[{},"Referer: http:\/\/myhouse\/VCR1Presentation"]},{"entry":[{},"Content-Length: 84"]},{"entry":[{},"User-Agent: Mozilla\/4.0 (compatible; MSIE 5.01;"]},{"entry":[{},"Windows NT 5.0)"]},{"entry":[{},"Connection: Keep-Alive"]},{"entry":[{},"<queryStateVariable>"]},{"entry":[{},{"sup":"\u2003\u2003\u2003"}]},{"entry":[{},"<\/queryStateVariable>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The control server will respond to this message with another XML fragment: the XOAP-encoded method response. The following is an example of such a response:",{"@attributes":{"id":"p-0219","num":"0237"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"Connection: Close"]},{"entry":[{},"Cache-Control: private"]},{"entry":[{},"Date: Mon Oct 11 12:13:38 PDT 1999"]},{"entry":[{},"Expires: Mon Oct 11 12:13:38 PDT 1999"]},{"entry":[{},"Content-Type: text\/xml"]},{"entry":[{},"Content-Length: 62"]},{"entry":[{},"Man: \u201chttp:\/\/www.microsoft.com\/protocols\/ext\/XOAP\u201d;"]},{"entry":[{},"ns=01"]},{"entry":[{},"01-MessageType: CallResponse"]},{"entry":[{},"<queryStateVariableResponse>"]},{"entry":[{},"\u2003\u2003<_return>12:13:28<\/_return>"]},{"entry":[{},"<\/queryStateVariableResponse>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The rehydrator will extract the return value from this XML fragment, place it in the VARIANT structure whose address was passed as the last parameter to RehydratorGetServiceProperty( ) and then return.","Invoking Service Actions. The process of invoking a service action is very similar to querying a state variable. An application calls IUPnPService::InvokeAction( ) on a Service object, passing it the name of an action to invoke, and an array of arguments to the action. Internally, IUPnPService::InvokeAction( ) calls RehydratorInvokeServiceAction( ), declared as shown below.",{"@attributes":{"id":"p-0222","num":"0240"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT"]},{"entry":[{},"RehydratorInvokeServiceAction("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN","LPCTSTR","1pcszVerb,"]},{"entry":[{},"IN","LPCTSTR","1pcszControlURL,"]},{"entry":[{},"IN","LPCTSTR","1pcszSTI,"]},{"entry":[{},"IN","LPCTSTR","1pcszActionName,"]},{"entry":[{},"IN","SAFEARRAY","saActionArgs,"]},{"entry":[{},"OUT","LONG","*pStatus);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"As was the case for querying state variables, the service instance specific information is passed in the first two parameters, followed by the Service Type Identifier in the third. The action name and an array of arguments are passed as the next two parameters, and the final parameter is the address of a variable in which to store the status of the operation.","RehydratorInvokeServiceAction( ) will send an HTTP request to the control server identified by the second parameter. As before, the body of this message will be an XML fragment containing a XOAP-encoded method call. An example HTTP request to invoke an action is shown below.",{"@attributes":{"id":"p-0225","num":"0243"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"M-POST \/clockService HTTP\/1.1"]},{"entry":[{},"Host: spather-xeon: 8586"]},{"entry":[{},"Content-Type: text\/xml"]},{"entry":[{},"Man: \u201chttp:\/\/www.microsoft.com\/protocols\/ext\/XOAP\u201d;"]},{"entry":[{},"ns=01"]},{"entry":[{},"01-MethodName: invokeAction"]},{"entry":[{},"01-MessageType: Call"]},{"entry":[{},"Accept-Language: en-gb, en;q=0.8"]},{"entry":[{},"Referer: http:\/\/myhouse\/VCR1Presentation"]},{"entry":[{},"Content-Length: 119"]},{"entry":[{},"User-Agent: Mozilla\/4.0 (compatible; MSIE 5.01;"]},{"entry":[{},"Windows NT 5.0)"]},{"entry":[{},"Connection: Keep-Alive"]},{"entry":[{},"<SerializedStream main=\u201cinvokeAction\u201d>"]},{"entry":[{},"\u2003\u2003<invokeAction id=\u201cinvokeAction\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<actionName>setCurrentTime<\/actionName>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<actionArg>15:41:29<\/actionArg>"]},{"entry":[{},"\u2003\u2003<\/invokeAction>"]},{"entry":[{},"<\/SerializedStream>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The encoding of the body of this message is again specified in the service contract. The Rehydrator will wait for the HTTP response to this request, which would look something like the example below.",{"@attributes":{"id":"p-0227","num":"0245"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"Connection: Close"]},{"entry":[{},"Cache-Control: private"]},{"entry":[{},"Date: Mon Oct 11 15:22:38 PDT 1999"]},{"entry":[{},"Expires: Mon Oct 11 15:22:38 PDT 1999"]},{"entry":[{},"Content-Type: text\/xm1"]},{"entry":[{},"Content-Length: 50"]},{"entry":[{},"Man: \u201chttp:\/\/www.microsoft.com\/protocols\/ext\/XOAP\u201d;"]},{"entry":[{},"ns=01"]},{"entry":[{},"01-MessageType: CallResponse"]},{"entry":[{},"<invokeActionResponse>"]},{"entry":[{},"\u2003\u2003<_return>0<\/_return>"]},{"entry":[{},"<\/invokeActionResponse>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"After receiving a response such as this, the Rehydrator will extract the return value, place it in the out parameter it was passed, and then return.",{"@attributes":{"id":"p-0229","num":"0247"},"figref":"FIGS. 32 through 44"},"Description Document","With reference to , User Control Points  can retrieve a Description Document  by issuing an HTTP GET on a Description URL. This URL is returned in the location header of either an SSDP announcement or an SSDP query response.","The HTTP GET must include an accept-language header that is used to request the preferred language of the response. If the requested language is not supported, a Description Document in the default language supported by the Controlled Device or Bridge may be returned.","An HTTP GET is used to retrieve sub elements of a Description Document that are expressed as URLs.","URL Handling","URLs embedded in Description Documents  take one of 3 forms: a fully qualified URL or a relative URL.","Fully qualified URLs take the form:","http:\/\/devicename\/pathname","The devicename part of the URL is a Hostname or IP address and the pathname is a filesystem path or equivalent. A fully qualified URL is used \u201cas is\u201d to establish an HTTP connection to a device.","A relative URL does not contain the \u201c:\u201d character and is of the form:","pathname","\/pathname","Relative URLS are a compact representation of the location of a resource relative to an absolute base URL. All relative URLs in a Description Document are appended to the value of the Description Document element <URLbase> to form fully qualified URLs.","Binary Data","Some elements of a Description Document are binary. XML does not directly support the embedding of binary data. In order to include binary data directly in a Description Document, one must convert the data to text using the Base 64 encoding scheme. This tends to increase the size of the data by 25% on the average. Much of this overhead can be eliminated if the binary data is passed by reference instead of by value. To reference binary data, a URL to the data is provided in a Description Document. The binary data can be retrieved by doing a HTTP GET with that URL.","As an example, consider the <image> element in the following Description Document:",{"@attributes":{"id":"p-0246","num":"0264"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<iconList>"]},{"entry":[{},"\u2003\u2003<icon>"]},{"entry":[{},"\u2003\u2003\u2003<size>16<\/size>"]},{"entry":[{},"\u2003\u2003\u2003<imageType>PNG<\/imageType>"]},{"entry":[{},"\u2003\u2003\u2003<color>1<\/color>"]},{"entry":[{},"\u2003\u2003\u2003<depth>8<\/depth>"]},{"entry":[{},"\u2003\u2003\u2003<image>"]},{"entry":[{},"\u201chttp:\/\/device.local\/iconpath\/icon.png\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/icon>"]},{"entry":[{},"<\/iconList>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The icon would be retrieved with an HTTP GET of the following format:",{"@attributes":{"id":"p-0248","num":"0266"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GET iconpath\/icon.png HTTP 1.1"]},{"entry":[{},"Host: device.local"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The HTTP response would look like:",{"@attributes":{"id":"p-0250","num":"0268"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"Content-Type: image\/png"]},{"entry":[{},"Content-length: ###"]},{"entry":[{},"<binary color icon data in the PNG format>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Description Document Layout","The basic layout of the Description Document  is shown in FIG. .","The following table lists Description Document elements that are sub-elements to the root element.",{"@attributes":{"id":"p-0254","num":"0272"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Root","The XML root element of a UPnP Description"]},{"entry":[{},"Document."]},{"entry":["specVersionMajor","The major version of the UPnP Architectural"]},{"entry":[{},"Reference that this Description Document was"]},{"entry":[{},"created against. This value must be 1."]},{"entry":["specVersionMajor","The minor version of the UPnP Architectural"]},{"entry":[{},"Reference that this Description Document was"]},{"entry":[{},"created against."]},{"entry":[{},"This value must be 0."]},{"entry":["URLBase","An optional element used to construct fully qualified"]},{"entry":[{},"URLs. Relative URLS are appended to the value of"]},{"entry":[{},"<> to create fully qualified URLs. If this"]},{"entry":[{},"element is present, it must agree with the HTTP Base"]},{"entry":[{},"header."]},{"entry":["manufacturer","A required element that contains a textual"]},{"entry":[{},"manufacturer name."]},{"entry":["manufacturerURL","An optional element containing a URL that points to"]},{"entry":[{},"the Web page of the manufacturer."]},{"entry":["modelName","A required element containing a textual product name."]},{"entry":["modelDescription","A required element containing a textual product"]},{"entry":[{},"description."]},{"entry":["modelNumber","An optional element containing a textual product"]},{"entry":[{},"model number."]},{"entry":["modelURL","An optional element containing a URL that points to"]},{"entry":[{},"the Web page of the product."]},{"entry":["UPC","An optional element containing the product Universal"]},{"entry":[{},"Product Code (UPC)."]},{"entry":["serialNumber","An optional element containing a textual item serial"]},{"entry":[{},"number."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"The Description Document elements listed in the following table are"},{"entry":"associated with devices."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["rootDevice","A required sub element of the root. This element"]},{"entry":[{},"is a container for one or more service elements"]},{"entry":[{},"and the elements that describe the rootDevice."]},{"entry":["device","An optional sub element of the root or another device"]},{"entry":[{},"element. This element contains the same kinds of"]},{"entry":[{},"elements as a rootDevice element."]},{"entry":["UDN","A required sub element of every rootDevice or device"]},{"entry":[{},"element containing the Unique Device Name."]},{"entry":["friendlyName","A required sub element of every rootDevice or device"]},{"entry":[{},"element containing a textual friendly name. This"]},{"entry":[{},"element can be updated remotely."]},{"entry":["deviceType","A required sub element of every rootDevice or device"]},{"entry":[{},"element containing a standardized Device Type"]},{"entry":[{},"Identifier."]},{"entry":["presentation","An optional sub element of a rootDevice or device"]},{"entry":["URL","element containing a Presentation URL."]},{"entry":["iconList","A required sub element of every rootDevice or device"]},{"entry":[{},"element. This element is a container for one or more"]},{"entry":[{},"icon elements. UPnP requires a base set of six icons"]},{"entry":[{},"that must exist in the iconList. All devices must"]},{"entry":[{},"support PNG icon image formats of three sizes, 16 by"]},{"entry":[{},"16, 32 by 32 and 48 by 48 pixels in both color and"]},{"entry":[{},"black and white at 8 bit depth. Additional formats"]},{"entry":[{},"and sizes, including JPEG, GIF, BMP, ICON and"]},{"entry":[{},"VML, may be supported by adding them to the list."]},{"entry":["icon","A required sub element of every iconList element. This"]},{"entry":[{},"element is a container for the elements that define an"]},{"entry":[{},"icon."]},{"entry":["size","A required sub element of every icon element. There"]},{"entry":[{},"must be icon elements with associated size elements"]},{"entry":[{},"with the values 16, 32 and 48. Other icons may specify"]},{"entry":[{},"other sizes."]},{"entry":["color","A required sub element of every icon element with"]},{"entry":[{},"value 0 or 1. Each icon of size 16, 32 or 48 must"]},{"entry":[{},"exist in color and black and white."]},{"entry":["depth","A required sub element of every icon element. All"]},{"entry":[{},"required icons must exist with a value of 8."]},{"entry":["imageType","A required sub element of every icon element that"]},{"entry":[{},"identifies the format of the binary icon: png, jpeg,"]},{"entry":[{},"vml, gif, bmp, or ico."]},{"entry":["image","A required sub element of every icon element that"]},{"entry":[{},"references a binary icon."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"The following elements of the Description Document are associated with"},{"entry":"Services."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["service","An optional sub element of the rootDevice or"]},{"entry":[{},"another device element. This element is a container"]},{"entry":[{},"for the Service Definition."]},{"entry":["serviceType","A required sub element of every service element"]},{"entry":[{},"containing a standardized Service Type Identifier."]},{"entry":["controlURL","A required sub element of every service containing a"]},{"entry":[{},"Control URL."]},{"entry":["eventSubURL","A required sub element of every service containing an"]},{"entry":[{},"Event Subscription URL."]},{"entry":["SCPD","A required sub element of every service. The SCPD is"]},{"entry":[{},"a container for the standardized Service Control"]},{"entry":[{},"Protocol Declaration associated the Service."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0255","num":"0273"},"figref":"FIG. 16","b":"226"},"Service Control Protocol and SCP Declaration","As part of the Service Definition  shown in , a Service State Table  and Command Set  are defined. The SCPD  is a representation of the schema of a Service. It is possible to reconstruct the SST , Command Set  and SCP  from the SCPD deterministically.","The declaration of such a protocol must specify the list of Variables that can be queried, the set of Commands that can be invoked, as well as the wire protocol (the content and sequence of network messages) required to carry out these operations. SCPD is specified in two XML documents. The first or Service Control Definition document , written in a language called Service Control Protocol Declaration Language (SCPDL), declares the list of state Variables and Commands associated with the Service Type to be controlled by the protocol. The second or Service Control Protocol document  is written in Contract Definition Language (CDL) and declares the wire protocol that will be used to query the values of the state variables and invoke the actions associated with the service.","Declaring the Service State Table and Command Set","A SCPDL document  is used to specify the list of state Variables that a SCP can query and the set of Commands that it can invoke. SCPDL is an XML schema, a set of rules for writing XML documents (Service Control Protocol Declarations).",{"@attributes":{"id":"p-0261","num":"0279"},"figref":"FIG. 17"},"The <actionList> element contains an <action> element for every action associated with the Service. The elements within an <action> element specify the name of the action and any arguments the action may take. In this case, the service supports two actions that do not take arguments, ChannelUp and ChannelDown, and another, SetChannel, that takes a new channel number as an argument. The <argument> element and the elements nested within it define the argument. The <relatedStateVariable> element within <argument> specifies the name of one of the state variables to which the argument is related. In the UPnP Device Model, all arguments to actions must correspond directly to some state variable.","Declaring the Contract","The Contract is a specification of the wire protocol that will be used to query state Variables, invoke Commands and carry notifications or events. This contract specifies the type of protocol used, the network endpoint to which messages are sent, the contents of those messages, the contents of the expected responses and the contents of events. Contracts are written in Contract Definition Language (CDL).","All UPnP SCPs will use essentially the same contract. A specific contract applies to a single Service instance (since it specifies the network endpoint to which messages are sent and network endpoints are specific to service instances). However, other than the network endpoint definition, all contracts for all Service instances should be the same.",{"@attributes":{"id":"p-0266","num":"0284"},"figref":"FIGS. 18-20"},{"@attributes":{"id":"p-0267","num":"0285"},"figref":"FIGS. 21 and 22"},"Basic UPnP Eventing Architecture","With reference to , the UPnP architecture  () requires that clients of the UPnP API be enabled to receive notifications reliably from UPnP services - as their states change. Since state changes are relatively common, the eventing subsystem is efficiency and performance is a major consideration in this design. FIG.  and the following discussion describe the Basic UPnP Eventing Architecture , which encompasses both the controlled device (CD)  and user control point (UCP)  sides of the eventing service. It also includes the support APIs for both a low-level service interaction and a higher level COM-based wrapper of those APIs. The latter enables automation controllers like Visual Basic and JScript  to receive event notifications.","What is an Event?","Property change events are defined as any change in the value of a row of the Device State Table (DST)  () for a service -. This change will be reflected as a property change notification. For example, if a \u201cVCR\u201d device has a \u201cVCR Transport\u201d service, one row in that service's DST may be TapeState and the value could be TapePresent. If the tape is ejected, the new value would be TapeAbsent. This state change would be reflected as a notification sent to all subscribers.","What is a Notification?","A UPnP event notification is an XML message sent over HTTP\/TCP to each and every subscriber to a particular UPnP service. The content of the XML is defined below. The important contents of this message are the unique identifier for the subscription, the property name, new value, and property type.","Notification Processing","In UPnP, the listener to Notifications is the SSDP service itself. SSDP already listens on another multicast address for \u201calive\u201d and \u201cbyebye\u201d messages sent by UPnP devices. The same listener will listen on a TCP port for notifications sent. All subscriptions sent from that UCP contain the same callback URL and so all notifications will be directed to that URL. When a notification arrives the SSDP service will examine the NT header of the message and determine if it is an event notification. If so, the message is parsed further to determine if it should be forwarded on to subscribers (which must exist). GENA defines the format of the HTTP message, what headers can be used, and what they can be used for.","GENA","GENA is the protocol of communication that, in a preferred embodiment, UPnP devices use to send event notifications. Therefore, UPnP devices that wish to notify UCPs of state changes are recommended to use GENA. Notification subscribers will never be required to interact with a UPnP device directly and so they are not required to use GENA. The eventing API will encapsulate this complexity. Other appropriate event transport protocols may be used, such as publish\/subscribe systems.","Receiving Notifications","Applications written in C (C Application ) will be able to utilize the SSDP C API  to receive callbacks when notifications are processed by the SSDP service. This is analogous to SSDP clients registering for notifications that services have become available. When a UCP registers for a notification, it passes as a parameter the URL of the service for which it is interested in receiving notifications. This URL is obtained from the description document for that service. (When a service is registered on a UPnP device, it uses this same URL to listen for subscription requests).","When a notification message is received by the SSDP service listener, the SID header is checked against the list of subscribers it maintains. If a subscriber is found, the callback function for that subscriber is invoked, with one of the parameters being the contents of the notification message. The notification client that implements the callback function can process this message in any appropriate way.","Notifications in the UPnP API","The UPnP API  is a consumer of the basic C interface provided by the SSDP C API  component. In order to integrate seamlessly, the registration of notifications is handled by the Service Object  inside the UPnP Object Model. Service objects will register for notifications when they are created. This ensures that the DST is maintained by the UPnP API and is kept up to date. They will implement the callback function required by the registration function. If this callback function is invoked, it will pass on that notification to UCPs. The UCPs can be written in C, C++, VB, or script code, so the mechanism for passing on notifications can be different.","Script Support","A feature of the illustrated eventing system is that it supports script languages such as VBScript and JavaScript . For VBScript, this is made possible by providing a property on the Service object that, when set, contains the IDispatch pointer for a VBScript function or subroutine that will be the event handler. When the Service object's notification callback is invoked, it checks to see if this IDispatch pointer was set, and if so, it calls lDispatch::Invoke on DISPID  of that interface to call the VBScript subroutine. An equivalent mechanism is implemented for JScript.","Eventing Subsystem Terminology","UCP\u2014User control point. Any piece of software that searches for devices and controls them.","CD\u2014controlled device. A hardware or software device that announces its availability thru SSDP and allows control by UCPs.","Subscriber\u2014A UCP who wishes to be notified of event changes.","Notifying Resource (or simply \u201cResource\u201d)\u2014For the purposes of this document, this will always be a service contained within a UPnP CD .","Event Source\u2014a service that provides events. UPnP services are event sources. All notifying resources are event sources and vice versa.","Event\u2014message generated when a change in a resource's state occurs.","Property\u2014a single entry in the service's state table whose DefaultValue can change. Properties and events always have a one to one correspondence.","Subscribing To Resources","Integrating With The UPnP API","The UPnP API  exposes several interfaces with which a consumer can find and enumerate devices, control services, and get properties on devices and services. To allow the integration of events into this model, we add a new property to the IUPnPService interface called EventHandler. When this property is set, it tells the Service object  that its client is interested in receiving notifications for that service. The SSDP API RegisterNotification( ) API is called when the Service object is created so that it can maintain a local copy of the DST for that service. The Service object knows the URL of the service and therefore it can provide this as a parameter to RegisterNotification( ). RegisterNotification( ) is also provided a callback function which is a static member of the Service object class. This function will be invoked for each and every notification sent by that particular UPnP service.","The Notification Callback","The Service object  includes a static member function called EventNotifyCallback( ) which is invoked for each notification sent by the UPnP service. The callback is passed the entire HTTP message contents in a structure which is a parameter to the function. The prototype looks like this:",{"@attributes":{"id":"p-0296","num":"0314"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static VOID"]},{"entry":[{},"CUPnPService::EventNotifyCallback(SSDP_CALLBACK_TYP"]},{"entry":[{},"E ssdpType,"]},{"entry":[{},"SSDP_MESSAGE *pssdpMsg,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003LPVOID pcontext);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The ssdpType parameter should always be SSDP_PROPCHANGE. The pssdpMsg parameter contains the relevant information about the event. The key piece of information is the body of the XML message. The body contains information about what property changed, what its new value is and what type it is, among other information. The pcontext parameter will always be the this pointer of the Service object. This allows the code to call a method to fire the event to the UCP. The callback will parse the XML body using the XML DOM services. Property changes are iterated and the local DST is updated to reflect these changes. After this processing is done, an event notification may be fired for each property that was changed to the owner of the subscription if one exists. Depending on what environment the owner is written in (C++ or script, etc. . . . ), a different mechanism for firing the event may be employed.","A special case for this process is the very first notification received after a subscription is established. This notification contains the entire set of properties and their values and is used to locally sync up the DST. Events will not be fired to clients of the UPnP API in this case.","Firing Notifications","When the EventNotifyCallback( ) function is called, the local copy of the DST for the service is updated. After this, an event needs to be fired if a subscriber exists. A subscriber exists if the put_EventHandler( ) method was called, either from VBScript, C++ code, or another source. To abstract away this complexity, a new interface called IUPnPEvents is needed.","This interface currently has one method called NotifyEvent( ) which takes several parameters. When put_EventHandler( ) function is called, its argument is an IUnknown. This pointer is Queryinterface'd( ) for IDispatch first, and if it succeeds, then IDispatch::Invoke( ) is called with DISPID  to invoke the default method. This allows VBScript  to be called. If that fails, however, it is Queried for IUPnPEvents, and if that succeeds, the NotifyEvent( ) method is called with the same parameters as for Invoke( ). The handles C++ UCPs effectively.","Subscribing with C++","To subscribe to a UPnP service from C++, a UCP instantiates a UPnP service object, issues QueryInterface( ) to it for IUPnPEvents, and calls the IIUPnPEvents::SetEventCallback( ) function. This function takes 2 parameters, a callback function pointer and a context pointer.","Subscribing With VBScript","To subscribe to a UPnP service's events, all that needs to be done by a script  is to create a function or subroutine as a handler function and set the pointer of that function to the EventHandler property of the Service object. Now, anytime an event is fired, this VBScript function or subroutine will be called. In VBScript, this is written as the following:",{"@attributes":{"id":"p-0306","num":"0324"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dim UPnPAPI"]},{"entry":[{},"Set UPnPAPI = CreateObject(\u201cUPnPAPI.1\u201d)"]},{"entry":[{},"Devices = UPnPAPI.FindDevices(. . . )"]},{"entry":[{},"For each device in Devices"]},{"entry":[{},"\u2003\u2003For each service In devices.services"]},{"entry":[{},"\u2003\u2003\u2003\u2003If service.dcpi = \u201cclock.v1\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003Service.EventHandler ="]},{"entry":[{},"GetRef (\u201cclock_PropertyChanged\u201d)"]},{"entry":[{},"\u2003\u2003\u2003End if"]},{"entry":[{},"\u2003\u2003Next service"]},{"entry":[{},"Next device"]},{"entry":[{},"Sub clock_PropertyChanged(prop, value)"]},{"entry":[{},"\u2003\u2003MsgBox \u201cThe time has changed. It is now \u201d &"]},{"entry":[{},"value & \u201c.\u201d"]},{"entry":[{},"End Sub"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this example, the script enumerates all devices, looking for any device that supports the \u201cClock\u201d interface. When it finds a device that supports that interface, it enumerates that device's services looking for the one that has the \u201cclock.v1\u201d interface. Once it finds that service, it sets that service's EventHandler property to the VBScript subroutine called \u201cclock_PropertyChanged\u201d. This name is arbitrary.","Sending and Receiving Notifications","GENA Client API","GENA clients are actually UPnP services. A GENA client creates a new event source when it is initialized. The GENA client API  facilitates this. It also provides a way for GENA clients to send their notification messages. It is also important to note that the HTTP server that lives on the UPnP device is also a client of this API. The GENA client API consists of the following functions:","RegisterUpnpEventSource( )","The RegisterUpnpEventSource( ) API gives a GENA client the ability to register itself as an event source. The prototype is as follows:",{"@attributes":{"id":"p-0312","num":"0330"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BOOL RegisterUpnpEventSource ("]},{"entry":[{},"LPTSTR szRequestUri,"]},{"entry":[{},"DWORD cProps,"]},{"entry":[{},"UPNP_PROPERTY *rgProps"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Parameters: szRequestUri [in] an arbitrary Request-Uri that SUBSCRIBE requests will be sent to. When a SUBSCRIBE request arrives at the given URI, it is acknowledged and the subscriber is added to the list of notification recipients. Note that this URI should match the URI provided in the description for this service. CProps [in] the number of properties that this event source provides. RgProps [in] Array of UPNP_PROPERTY structures which contain information about each property. The property information is derived from the DST for the event source.","Return Value: The function returns a TRUE if successful. If the given URL has already been registered as an event source, the return value is FALSE and GetLastError( ) returns ERROR_ALREADY_EXISTS.","Notes: The initial state of the event source needs to be given to the API so that it can effectively maintain the up-to-date state of the event source.","DeRegisterUpnpEventSource( )","The DeRegisterUpnpEventSource( ) API gives a GENA client the ability to deregister itself as an event source. The prototype is as follows:",{"@attributes":{"id":"p-0318","num":"0336"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"VOID DeRegisterUpnpEventSource ("]},{"entry":[{},"\u2003\u2003LPCTSTR szRequestUri"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Parameters: szRequestUri [in] an arbitrary Request-Uri that SUBSCRIBE requests will be sent to. When a SUBSCRIBE request arrives at the given URI, it is acknowledged and the subscriber is added to the list of notification recipients. Note that this URI should match the URI provided in the description for this service.","UPNP PROPERTY",{"@attributes":{"id":"p-0321","num":"0339"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct _UPNP_PROPERTY {"]},{"entry":[{},"\u2003\u2003LPTSTR szName;"]},{"entry":[{},"\u2003\u2003LPTSTR szValue;"]},{"entry":[{},"\u2003\u2003LPTSTR szType;"]},{"entry":[{},"} UPNP_PROPERTY;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Where szName is the name of the property, szValue is the current value of property, and szType is the type of property (string, integer, etc. . . . ).","SubmitUpnpPropertyEvent( )","The SubmitUpnpPropertyEvent( ) API allows the GENA client to submit a UPnP property change event to be sent to subscribers as a notification. The prototype is as follows:",{"@attributes":{"id":"p-0325","num":"0343"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BOOL SubmitUpnpPropertyEvent ("]},{"entry":[{},"LPCTSTR szRequestUri,"]},{"entry":[{},"DWORD dwFlags,"]},{"entry":[{},"\u2003\u2003DWORD cProps,"]},{"entry":[{},"UPNP_PROPERTY *rgProps"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Parameters: \u201cszRequestUri [in]\u201d identifies the event source to which this event belongs. This is the same Request-Uri passed to RegisterUpnpEventSource( ). \u201cDwFlags [in]\u201d is unused. \u201cCProps [in]\u201d is the number of events that are being submitted. \u201cRgProps [in]\u201d is an array of UPNP_PROPERTY structures which contain information about each event.","Return Value: If the function fails, the return value is FALSE. The get extended error information, call the GetLastError( ) function.","Notes: When a series of properties is submitted for event notification, the local version of the property state for the given event source is updated with the list of properties passed in. SubmitUpnpPropertyEvent( ) calls SubmitEvent( ) after it has generated an XML body.","SubmitEvent( )","The SubmitEvent( ) API allows the GENA client to submit an unstructured event to be sent to subscribers as a notification. The prototype is as follows:",{"@attributes":{"id":"p-0331","num":"0349"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BOOL SubmitEvent ("]},{"entry":[{},"LPCTSTR szRequestUri,"]},{"entry":[{},"DWORD dwFlags,"]},{"entry":[{},"\u2003\u2003LPCTSTR szHeaders,"]},{"entry":[{},"\u2003\u2003LPCTSTR szEventBody"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Parameters: SzRequestUri [in] identifies the event source to which this event belongs. This is the same Request-Uri passed to RegisterUpnpEventSource( ). DwFlags [in] Unused. SzHeaders [in] null-terminated text string containing the headers for the event, each separated by CRLF. SzEventBody [in] null-terminated text string containing the body of the event message.","Return Value: If the function fails, the return value is FALSE. The get extended error information, call the GetLastError( ) function.","Notes: If no subscribers exist, the function does nothing. If one or more subscribers exist, a message is sent to each subscriber. SubmitEvent( ) will always send to all subscribers.","UPnP Controlled Device Event Architecture","In UPnP, every UPnP service - that supports property change event notifications is to be a GENA client. Therefore, when the service is initialized, it must register itself as a GENA event source. It will do this with the RegisterUpnpEventSource( ) API. This returns a handle which can be used in subsequent APls.","RegisterUpnpEventSource( ) takes a URL and an array of properties as parameters. Inside the API, an entry in an array of structures is initialized and the index is returned as the handle. The structure contains the source URL as one of the members. A second member of the structure, an array of destination URLs, is left uninitialized. This is filled in each time as subscriber is added for that event source. Another member of the structure is the list of properties that this event source provides. This is effectively a cached copy of the DST for the event source. As events are submitted, the local properties are updated.","When SubmitUpnpPropertyEvent( ) is called, each property submitted replaces the corresponding property already maintained by the API. If no subscribers exist, the request to submit an event is ignored. If one or more subscribers exist, their callback URLs are looked up in the list of subscribers for the given event source and a NOTIFY message is constructed and sent to each URL, one at a time, in order of subscription.","If an event is submitted and no response is received (or a CD-side error occurs), the CD continues to attempt to send to the UCP. If the subscription timeout expires, then the subscription is removed. If the UCP becomes available again, it will re-subscribe because it will notice the sequence numbers are not contiguous.","When an HTTP server  receives a SUBSCRIBE message, it passes it along to a function which parses the message for the necessary information. The Request-URI identifies the service that is to be subscribed to. The callback URL is obtained from the \u201cCallback\u201d header. Since the Callback header can contain multiple URLs, it picks the first \u201chttp:H\/\u201d URL it finds. It then adds the subscriber to the list of subscribers for this event source. A unique subscription identifier is constructed which it will send back to the subscriber in the HTTP response to the SUBSCRIBE request.","If no event source matches the Request-URI from the subscription message, the HTTP server should return \u201c Not Found\u201d.","When a subscription is added, the local copy of the DST is sent as a NOTIFY message. This special NOTIFY message contains sequence number 0 which informs the UCP that this is an initial state population event and not a notification where every event has changed.","When a CD receives an UNSUBSCRIBE message, it checks the \u201cSID\u201d header to obtain the subscription identifier. It looks up the subscriber ID in the list of subscribers for that event source and removes the destination URL entry associated with it.","GENA Server API","GENA servers  are generally going to be UPnP UCPs. A GENA server is anything that receives and processes NOTIFY messages to handle notifications from resources and sends SUBSCRIBE and UNSUBSCRIBE messages to receive notifications from resources. These APIs leverage the already existing SSDP APIs. The following are the changes to the APIs:","RegisterNotification( )","The RegisterNotification( ) allows a UPnP UCP to request notification when an event occurs for a given UPnP service. The prototype is as follows:",{"@attributes":{"id":"p-0347","num":"0365"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HANDLE RegisterNotification (",{}]},{"entry":["NOTIFY_TYPE nt,","\/\/ SSDP_ALIVE |"]},{"entry":["| ??","SSDP_PROPCHANGE"]},{"entry":["LPTSTR szResourceType,","\/\/ based on NOTIFY_TYPE, unused"]},{"entry":"if"},{"entry":"\/\/ SSDP_PROPCHANGE is used."},{"entry":"LPTSTR szEventUrl,"},{"entry":"ServiceCallbackFunc fnCallback,"},{"entry":"void *pContext"},{"entry":");"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Parameters: Nt [in] An enumeration that determines the type of notification requested. The values are: SSDP_ALIVE\u2014a service has become available, and SSDP_PROPCHANGE\u2014a property has changed on the service. SzResourceType [in] A null-terminated string specifying the resource type desired. For SSDP_ALIVE, this is the service type, for SSDP_PROPCHANGE this is unused. SzEventUrl [in] A null-terminated string specifying the URL that a subscription request should be sent to. FnCallback [in] A pointer to a function that will be called each time a notification is received. The function pointer is defined in the SSDP spec. PContext [in] This parameter is included as a parameter when invoking the client-supplied callback function.","Return Value: If the function succeeds, the return value is a handle used in a subsequent call to the DeregisterEventNotification( ) function. If the function fails, the return value is INVALID_HANDLE_VALUE error code. To get extended error information, call GetLastError.","ServiceCallbackFunc",{"@attributes":{"id":"p-0351","num":"0369"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef enum _SSDP_CALLBACK_TYPE {"]},{"entry":[{},"\u2003\u2003SSDP_FOUND = 0,"]},{"entry":[{},"\u2003\u2003SSDP_ALIVE = 1,"]},{"entry":[{},"\u2003\u2003SSDP_BYEBYE = 2,"]},{"entry":[{},"\u2003\u2003SSDP_DONE = 3,"]},{"entry":[{},"\u2003\u2003SSDP_PROPCHANCE = 4,"]},{"entry":[{},"} SSDP_CALLBACK_TYPE, * PSSDP_CALLBACK_TYPE;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"UPnP UCP Architecture","When a UPnP UCP wishes to subscribe to notifications for a particular UPnP service, it calls the RegisterNotification( ) API. It passes to this API a notification type that identifies the type of notification being requested, a URL to which a subscription should be sent, and a callback function and context for use when the notification is received.","RegisterNotification( ) will compose a SUBSCRIBE message, using the data passed in, and send that to the URL specified by the caller. The Callback header of the SUBSCRIBE message will be composed on the fly, as an arbitrary URL for notifications to be sent to for this subscription. This callback URL will likely be a constant since the server API will always know how to handle requests sent to this URL. It will then send the SUBSCRIBE message and await a response.","RegisterNotification( ) in the SSDP API does not currently send HTTP requests, but it can be modified to do so. It also needs to await a response which it will also be modified to do so.","When the response is received, the Subscription-ID header contains a SID which is associated with the callback function specified by the caller.","Immediately after the response is received, the UCP should expect an initial NOTIFY message that contains the complete set of properties maintained by the CD. This becomes the local cached DST on the UCP side. From this point on, all modifications to the table are made via NOTIFY messages. This initial NOTIFY message will have sequence number 0 that indicates it is an initial property set and not an update. The UCP can use this information in any way it sees fit. This ensures the UCP's state table is always in sync with the one on the CD.","When a message is received by the HTTP server on the UPnP UCP, it is passed to a function which determines the method name and Request-URI. If this is a NOTIFY message, the headers are parsed and packaged up into a structure. The callback function that was specified to RegisterNotification( ) is called with that structure as one of the parameters. UCPs who implement the callback function can find the headers and body of the NOTIFY message and do additional processing based on the notification type.","This all requires that the SSDP HTTP server listen on a TCP socket in addition to the UDP multicast port it already listens to. However, once a NOTIFY message is received, it is processed in the same way regardless of from which connection it originated.","Handling Failures","The following are subscription\/notification failures that can occur and their solutions:","Leaked Subscriptions","To protect against subscriptions that exist on the controlled device, but no longer on the UCP, we institute the timeout feature of GENA subscriptions. The scenario is this: A UCP subscribes to a CD, then the UCP reboots. Meanwhile, the CD is still trying to send notifications to that UCP. If the UCP never comes back, the subscription would be leaked because the UCP never told the CD that it was going away. So to correct this, each subscription request includes an arbitrary timeout value which indicates to the CD that the UCP will be re-subscribing every n seconds indicated in the timeout header of the subscription request. If the timeout expires on the CD, the subscription is removed. The UCP is required to re-subscribe before the timeout period has elapsed. If it fails to do so, the subscription will be terminated by the CD.","Some time before the timeout expires on the UCP, a re-subscribe message should be sent. The re-subscribe message is similar to the subscribe message, but it does not contain an NT or Callback header. If the UCP is unable to re-subscribe within the timeout period, the subscription will be terminated by the CD. If the UCP sends a re-subscribe after the CD has terminated the subscription, the CD will return \u201c412 Precondition Failed\u201d.","Reboot of a Controlled Device","If a controlled device reboots, information about all of its subscribers would be lost. To prevent this, the subscriber information will be persisted across reboots of the device. Because the subscription info contains a timeout member, the absolute expiration time will be used when the subscription information is persisted. That way, when the device comes back up, it can check the timeout for each subscriber and if that time has passed, the subscription will be removed.","Network Error Sending Event Notifications","If a controlled device receives an error sending an event notification to a subscriber, it will NOT cease to send notifications. It will continue to send notifications and receive errors until the subscription expires. The problem for the UCP is that it will have missed a number of event notifications and so its state table will be out of sync. To correct this, each event notification message will contain a 32-bit sequence number that starts at 0 and increments for each message sent to a subscriber. If a subscriber receives a notification with a sequence number that is not exactly one more than the previous notification, it will know that it has lost events and will ignore all future notifications until it receives one with sequence number 0 again. Events with sequence number 0 indicate that the event is an \u201cinitial state\u201d event.","Once it realizes that is has lost one or more events, the UCP will send an UNSUBSCRIBE message, followed by a SUBSCRIBE message. This is not the same as a re-subscription because re-subscriptions do not cause the CD to start the sequence over at 0. In this case, the active unsubscribe\/subscribe will cause the CD to restart the sequence at 0 and send the entire state table with the first notification message.","The SUBSCRIBE Message","When a UPnP UCP wishes to subscribe to event notifications for a UPnP service -, it will form a SUBSCRIBE message of the following format:",{"@attributes":{"id":"p-0372","num":"0390"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SUBSCRIBE service1 HTTP\/1.1"]},{"entry":[{},"Host: vcr.local:200"]},{"entry":[{},"NT: upnp:event"]},{"entry":[{},"Callback: <http:\/\/remote1.local:923\/upnp>"]},{"entry":[{},"Timeout: Second-600"]},{"entry":[{},"The response is as follows::"]},{"entry":[{},"HTTP\/1.1 200 O.K."]},{"entry":[{},"SID: uuid:kj9d4fae-7dec-11d0-a765-00a0c91e6bf6"]},{"entry":[{},"Timeout: Second-600"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This example of a GENA SUBSCRIBE request and response demonstrates a subscription to event notifications for \u201cservice1.\u201d The host is \u201cvcr.local.\u201d All notifications for this service will be sent to the callback URL http:\/\/remote1.local:923\/upnp. In the response, the \u201cSubscription-ID\u201d header provides the subscriber with an identifier to use when it wants to unsubscribe to this resource. The \u201cTimeout\u201d header indicates that the subscriber will send a re-subscription request before 10 minutes have elapsed. If the device does not receive this request within that period of time, it will remove the subscription.","The Re-SUBSCRIBE Message","When a UPnP UCP wishes to re-subscribe to event notifications for a UPnP service, it will form a SUBSCRIBE message of the following format:",{"@attributes":{"id":"p-0376","num":"0394"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SUBSCRIBE service1 HTTP\/1.1"]},{"entry":[{},"Host: vcr.local:200"]},{"entry":[{},"SID: uuid:kj9d4fae-7dec-11d0-a765-00a0c91e6bf6"]},{"entry":[{},"Timeout: Second-600"]},{"entry":[{},"The response would be as follows::"]},{"entry":[{},"HTTP\/1.1 200 O.K."]},{"entry":[{},"SID: uuid:kj9d4fae-7dec-11d0-a765-00a0c91e6bf6"]},{"entry":[{},"Timeout: Second-600"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that the NT and Callback headers are absent, but the SID header exists. This tells the CD  which subscription is being renewed and restarts the timeout. When the CD receives this message, it will persist the subscriptions to disk (or other persistent data storage medium), updating the absolute timeout based on the current time and a new timeout sent by the UCP (if it was different).","The NOTIFY Message","When a resource wishes to send an event notification, it will form a NOTIFY message of the following format:",{"@attributes":{"id":"p-0380","num":"0398"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NOTIFY upnp HTTP\/1.1"]},{"entry":[{},"Host: remote1.local:923"]},{"entry":[{},"NT: upnp:event"]},{"entry":[{},"NTS: upnp:propertychanged"]},{"entry":[{},"SID: uuid:kj9d4fae-7dec-11d0-a765-00a0c91e6bf6"]},{"entry":[{},"Seq: 123"]},{"entry":[{},"Content-Length: xxx"]},{"entry":[{},"Content-Type: text\/xml"]},{"entry":[{},"<event XML schema>"]},{"entry":[{},"The response is as follows::"]},{"entry":[{},"HTTP\/1.1 200 O.K."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This example of a GENA NOTIFY request and response demonstrates that a \u201cupnp:propertychanged\u201d event is being sent to http:\/\/remotel.local:923\/upnp. The USN header identifies \u201cvcr.service1\u201d as the event source. The XML contains the property name, value, and type. The \u201cSeq\u201d header indicates the sequence number of the notification. Sequence number 0 indicates the initial state update for the subscriber.","Property Change Event XML Schema","A UPnP property change event will be of the following form:",{"@attributes":{"id":"p-0384","num":"0402"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<U:propertyset xmlns:U=\u201dupnp\u201d>"]},{"entry":[{},"\u2003\u2002<U:propcount>2<\/U:propoount>"]},{"entry":[{},"<U:property>"]},{"entry":[{},"<U:foo>"]},{"entry":[{},{"sup":"\u2002"}]},{"entry":[{},{"sup":"\u2002"}]},{"entry":[{},"<\/U:foo>"]},{"entry":[{},"<\/U:property>"]},{"entry":[{},"<U:property>"]},{"entry":[{},"<KU:bar>"]},{"entry":[{},{"sup":"\u2002"}]},{"entry":[{},{"sup":"\u2002"}]},{"entry":[{},"<\/U:bar>"]},{"entry":[{},"<\/U:property>"]},{"entry":[{},"<\/U:propertyset>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Here, a property named \u201cfoo\u201d is of type \u201cstring\u201d and has a value of \u201cgoodbye\u201d and a property named \u201cbar\u201d has a type of \u201cinteger\u201d and has a value of 27. The XML will be contains a list of multiple properties that have changed, along with a count to make it easy to determine this.","The UNSUBSCRIBE Message","When a UPnP UCP wishes to unsubscribe to event notifications for a UPnP service, it will form an UNSUBSCRIBE message of the following format:",{"@attributes":{"id":"p-0388","num":"0406"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UNSUBSCRTBE service1 HTTP\/1.1"]},{"entry":[{},"Host: vcr.local:200"]},{"entry":[{},"SID: uuid:kj9d4fae-7dec-11d0-a765-00a0c91e6bf6"]},{"entry":[{},"The response would be as follows::"]},{"entry":[{},"HTTP\/1.1 200 O.k."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This example of a GENA UNSUBSCRIBE request and response demonstrates that the UCP is no longer interested in receiving event notifications from http:\/\/vcr.local\/service1:200.","Step By Step: UCP to CD & Back","This section will take a step by step approach to what happens on both sides (UCP & CD) of an event notification. The description starts at the initialization of a UPnP device.  illustrates the subscription, notification, and unsubscription process.\n\n","CD-Initiated NeedsSync method","This method begins with the CD sending its initial state to the subscriber the first time an event is submitted by the service. UCPs will subscribe to the service first, then receive notifications for events as they occur. The first event will happen to be the initial state of the service. The UCP state table will always be in sync with this method.","When the CD sends a notification to a subscriber and receives an error. In this case, it marks the subscriber as \u201cNeedsSync\u201d and the next time an event is submitted, all events are sent to the subscriber. The problem with this is that the API needs to keep track of which subscribers need syncing and which ones don't. The client of this API (the UPnP service) would need to send separate messages to each subscriber and know which ones needed all events and which ones just wanted the ones that changed.","UCP-initiated Sync","This method states that the UCP should subscribe to event notifications, then call a function that obtained the state from the service. This means that any events that were received in the meantime would need to be matched against the incoming set of events and replaced if they were older. This method leads to synchronization issues where the UCP may receive events that are newer but when it queries for the state, it gets an older view of the table. This requires using sequence numbers to determine which information is newer. If the view of the table received by the query is too old, it has to be discarded. Alternatively, the properties that were not received by event notification would not be overwritten, but all other properties would be. Using sequence numbers make this more complicated.","CD-initiated Sync","This preferred method takes a simpler approach. Any time the UCP subscribes to a service, the service will immediately afterwards, send the entire contents of the state table with the first notification. This precludes the UCP from making a query for the state table. Subsequent events update the local state table on the UCP. If the connection is lost, the UCP will lose its subscription. If the UCP realizes it has not received an event after a certain amount of time has elapsed, it will re-subscribe. At that point, the CD will re-send the entire state table again, and the UCP is ensured to be up to date.","Exemplary Computer Hardware","FIG.  and the following discussion are intended to provide a brief, general description of a suitable computer which may be used in the above described UPnP device control model. This conventional computer  (such as personal computers, laptops, palmtops or handheld-PCs, set-tops, servers, mainframes, and other variety computers) includes a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The processing unit may be any of various commercially available processors, including Intel x86, Pentium and compatible microprocessors from Intel and others, including Cyrix, AMD and Nexgen; Alpha from Digital; MIPS from MIPS Technology, NEC, IDT, Siemens, and others; and the PowerPC from IBM and Motorola. Dual microprocessors and other multi-processor architectures also can be used as the processing unit .","The system bus may be any of several types of bus structure including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of conventional bus architectures such as PCI, VESA, AGP, Microchannel, ISA and EISA, to name a few. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM .","The computer  further includes a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of data, data structures, computer-executable instructions, etc. for the computer . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored in the drives and RAM , including an operating system , one or more application programs , other program modules , and program data .","A user may enter commands and information into the computer  through a keyboard  and pointing device, such as a mouse . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  operates in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications (e.g., via the LAN  and a gateway or proxy server ) over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In accordance with the practices of persons skilled in the art of computer programming, the present invention is described below with reference to acts and symbolic representations of operations that are performed by the computer , unless indicated otherwise. Such acts and operations are sometimes referred to as being computer-executed. It will be appreciated that the acts and symbolically represented operations include the manipulation by the processing unit  of electrical signals representing data bits which causes a resulting transformation or reduction of the electrical signal representation, and the maintenance of data bits at memory locations in the memory system (including the system memory , hard drive , floppy disks , and CD-ROM ) to thereby reconfigure or otherwise alter the computer system's operation, as well as other processing of signals. The memory locations where data bits are maintained are physical locations that have particular electrical, magnetic, or optical properties corresponding to the data bits.","Exemplary Embedded Computing Device",{"@attributes":{"id":"p-0407","num":"0539"},"figref":"FIGS. 26 and 27","b":["900","900","906"]},"With reference to , the device  includes a processing unit , and a memory  to provide embedded computing capability. The processing unit  has hardware interfaces to the operational circuitry  that operates devices functions. The processing unit  can be a microprocessor or micro-controller, such as are available from Intel, Motorola, IBM, and others. The memory  preferably incorporates RAM and ROM to hold software and data for basic operating code as well as for user applications.","The device  also includes a network adapter  for connecting with a network media  that is interconnected with the computer network in which the authoritative names registry (described below) is implemented in accordance with the invention. The network adapter  can be a network interface card (or chip set integrated on a single board with the processing unit ) appropriate to the particular network media . The network media can be any of various wired or wireless network media, including Ethernet, IEEE  (a.k.a. firewire), radio frequency (including satellite, cell, pager, commercial signal sideband, etc.), power line carrier (PLC), phone line, and television cable, among others.","With reference now to , the embedded computing device  () has a software architecture  that conforms to the above described UPnP device control model. UPnP provides a mechanism for the embedded computing device to operate in the Internet, as well as networks that have no administrator and no connection to the Internet, and hence no access to configuration services like the Dynamic Host Configuration Protocol (DHCP). DHCP is a mechanism for providing devices with configuration information needed to access the Internet. The mechanism functions through the use of a multicast request for configuration information that is generally responded to with an IP address and DNS server location. Additional information can only be returned in the response.","In non-configured (ad-hoc) networks, UPnP uses the AutolP protocol. AutolP is an enhancement to DHCP that allows devices to claim IP addresses in the absence of a DHCP server or similar IP configuration authority. IP addresses are claimed from a reserved range that is not allowed to be transmitted on the open Internet; thus they are only good for the local network. The embedded computing device  claims an address by randomly generating an address in the reserved range and then making an ARP request to see if anyone else has already claimed that address. AutolP systems will continually check for the presence of a DHCP server so that if one should ever come online, all the AutolP devices will attempt to switch their IP addresses to one provided by the DHCP server. This allows a network to operate in isolation, be connected to the Internet with DHCP support and then to be returned to isolation. This type of scenario will be common in homes that use dial-up access.","UPnP also uses the Internet Domain Name System (DNS) for addressing the embedded computing device . The DNS is a mapping system that translates human readable domain names, like microsoft.com, into their equivalent IP address. Most corporate intranets implement an internal version of the same technology to provide the same services. In small networks, such as at home or in small business, DNS servers may not exist. Multicast DNS allows DNS requests to be multicast. This allows a machine to see requests for its own name and respond to them. Like AutolP, Multicast DNS is only used when a DNS server is not available. (For more information, see B. Woodcock, Zocolo, and B. Manning, \u201cMulticast Discovery of DNS Services,\u201d which can be found at http:\/\/search.ietf.org\/internet-drafts\/draft-manning-multicast-dns-01.txt.)","UPnP implements a peer discovery mechanism that uses the Simple Service Discovery Protocol (SSDP) for discovery of devices on IP networks. SSDP is based on profiles. A single identifier specifies a profile that defines a contract between the client and service (e.g., operational functions provided by the embedded computing device). By identifying itself with the profile, the service advertises compliance with the associated contract. Using a single identifier makes it possible to implement an extremely simple discovery system. Clients send out a User Datagram Protocol (UDP) multicast packet containing the identifier of the desired service on some standard channel. Services listen on the standard channel, read the request, see whether they provide the service, and respond if so.","UPnP also provides a Directories mechanism to allow discovery to scale\u2014to the entire Internet if needed. When present, a directory will read all incoming service requests and respond to them itself. This requires that all services (e.g., the embedded computing device ) register with the directory so that the directory is able to properly answer on their behalf. The directory is also responsible for communicating with other directories in order to determine whether the service is available within the local network, the WAN and potentially the Internet.","To simplify the discovery protocol, directories are treated as proxies. A proxy is a service that accepts requests and takes responsibility for finding the proper response. When a client comes online, it will perform discovery for the proxy. If the proxy is present, then the client will send all future discovery requests to the proxy. If the proxy isn't present, then the client will send all discovery requests to the reserved discovery multicast channel. Regardless of the presence of a proxy, the client's request format and procedures will always be the same. The only difference will be the address to which the client sends its requests. For services, the difference between a proxied and unproxied network is their need to answer discovery requests. On a proxied network, services need do nothing once they have registered with the proxy. On an unproxied network, they answer discovery requests directly.","SSDP uses the UDP-and Transmission Control Protocol (TCP)-based Hyptertext Transport Protocol (HTTP) to provide for service discovery. SSDP uses a Uniform Resource Identifier (URI) to represent the service and the OPTIONS method to provide for discovery. SSDP also will provide support for proxies. These proxies, which are really just fronts for directories, redirect discovery requests to themselves. It is the proxy's job to collect announce requests in order to determine what services are available as well as to communicate with other proxies in order to provide for scalable service discovery.","The discovery process returns only the basic information needed to connect to the embedded computing device. Once a service has discovered its peers, the service often needs to find out more information in order to work best with them. The description process returns a schema providing descriptive data about the service.","A schema is a structured data definition that defines a set of structured values that provide descriptive information about a service. UPnP uses the Extensible Markup Language (XML) for schema, because XML's self-describing structured data format provides the level of expressiveness and extensibility needed by a universal schema and data format.","Accordingly, UPnP supports automatic network introduction, meaning that devices and their related services have the ability to be self-describing and allow automatic configuration. When a device is plugged into the computer network, the device automatically configures itself and acquires a TCP\/IP address. The device then announces its presence to other devices already on the network using a simple discovery protocol based on the Internet HTTP protocol and is immediately ready to share its services with any device that requests them.","With UPnP, device developers are not required to develop specific device drivers to operate under UPnP. The task of preparing a device for operation in this network environment thus is fairly simple. Moreover, in configured networks, dynamic detection allows an operating system to immediately begin using added devices or stop using removed devices without rebooting.","UPnP Devices support automatic discovery, identification, and configuration to achieve interoperability in the home environment, but must also operate correctly in a managed corporate network. Devices can be networked instead of being attached directly to a PC, and devices are all autonomous citizens on the network, able to talk with each other and exchange information. UPnP provides a unified way of performing directory services with automatic configuration. Capability for simple discovery mechanism used in the home environment provides the ability for any device to become a node on the global Internet. Additionally, directory services can be leveraged if they are available in the corporate environment.","UPnP provides a common set of interfaces for accessing devices and services, enabling the operational unification of diverse media types. Communications protocols for Universal Plug and Play are based on industry standards, especially key Internet standards such as TCP\/IP, HTML, XML, HTTP, DNS, LDAP, and others. Individual implementations for particular networks and buses are built on established protocols.","As shown in , the software architecture  of the embedded computing device  () includes the following software code modules that implement UPnP: device functions , simple discovery , Hypertext Transport Protocol (HTTP) , Transmission Control Protocol\/Internet Protocol (TCP\/IP) stack , Dynamic Host Configuration Protocol (DHCP) with AutolP extension , Domain Name System (DNS) with Multicast DNS extension , and physical media  (also shown in FIG. ). The device functions  is a software code module to implement the device's functionality. For example, where the embedded computing device is a VCR, the device functions code can include code to implement start, stop, pause, record and other functions that the VCR can perform.","The simple discovery  is a software code module (about 4 Kbytes) that implements a simple discovery procedure (described below) for automatic network introduction under the UPnP protocol.","The simple discovery procedure additionally provides an Extensible Markup Language (XML) format device description, which is downloaded to clients that access the device to allow activation of device functionality from the client. XML is a textual, tag-based markup language. It was originally designed to be the \u201cWebby\u201d simplification of SGML (Standard Generalized Markup Language), and is therefore intended to be used to create \u201cvocabularies\u201d of tags that can be used to apply semantic markup to documents, such as who the author was, what constitutes a paragraph (semantically, not from a display point of view), when the author last had breakfast, and so on. (For more information, see A. Layman, E. Jung, E. Maler, H. Thompson, J. Paoli, J. Tigue, N. H. Mikula, S. De Rose, \u201cXML-Data\u201d, which can be found at http:\/\/www.w3.org\/TR\/1998\/NOTE-xml-data-0105; and MSDN Online, XML Data Center at http:\/\/msdn.microsoft.com\/xml\/default.asp.) In the context of UPnP, XML is used to provide the description of services and capabilities of the embedded computing device. The embedded computing device makes its features visible to clients by providing its XML device description, which the client can use to activate device functions . For example, if the device is a camera, the client's browser can direct the camera to zoom in\/out or adjust contrast using the mechanism of XML.","The XML device description can provide links (via a uniform resource locator or URL address) to an accompanying XSL format style sheet. The XSL style sheets are used to present the data in different ways, i.e., the style sheets are applied to present different views of the same data. For example, if the device contains a file system, one style sheet can show the file selections, another shows the file sizes in some sort of diagram; yet another style sheet could make thumbnails of these image files.","The HTTP  is a software code modules (about 20 Kbytes) that implements the standard HTTP protocol, which is an open standard mechanism for client\/server message-based communication. HTTP provides for proxying, content negotiation and security. (For more information, see R. Fielding, J. Gettys, J. Mogul, H. Frystyk, T. Berners-Lee, \u201cHypertext Transfer Protocol -HTTP\/1.1\u201d, which can be found at http:\/\/www.ietf.org\/rfc\/rfc2068.txt.)","The TCP\/IP stack  implements the standard TCP\/IP networking protocols for communication on the computer network. The Internet Protocol (IP) is the foundation protocol of the Internet. It defines how a single message is sent from a source through zero or more routers to its final destination. It covers issues such as message length, message fragmentation, addressing, and routing concerns. The Transmission Control Protocol (TCP) is an IP-based protocol that provides support for the reliable, ordered delivery of messages over IP. Additionally, User Datagram Protocol (UDP) and Internet Group Management Protocol (IGMP) multicast send\/listen capability are included in the implementation.","The AutolP  is a software code module also used for automatic network introduction via AutolP in the UPnP protocol. AutolP uses a predefined set of IP addresses and, when a device is connected to the network, it pings an address in this address space. If it gets no replies, the device assumes that the address is available and assigns it to itself. To make this functionality even more useful it is combined with Multicast DNS, in which the device itself holds its own name. Thus it is not even necessary to determine what IP address the device assigned to itself, because its name can always be used instead. An IP Multicast is a mechanism for sending a single message to multiple recipients. IP multicasting is especially useful for discovery operations where one does not know exactly who has the information one seeks. In such cases, one can send a request to a reserved IP multicast address. Any services that can provide the requested information will also subscribe to the multicast request and thus be able to hear the information request and properly respond. Multicast DNS is a proposal to the IETF on rules for making normal DNS requests using multicast UDP. (For more information, see B. Woodcock, B. Manning, \u201cMulticast Discovery of DNS Services\u201d, which can be found at http:\/\/www. ietf.orglinternet-drafts\/draft-manning-multicast-dns-01.txt.)","The DHCP  is a software code module that implements the Dynamic Host Configuration Protocol (DHCP), which is a mechanism for providing devices with configuration information needed to access the Internet. The mechanism functions through the use of a multicast request for configuration information that is generally responded to with an IP address and DNS server location. Additional information can only be returned in the response.",{"@attributes":{"id":"p-0431","num":"0563"},"figref":["FIGS. 28 and 29","FIG. 26"],"b":["934","940","900","934","940"]},"At the AutolP phase, the AutolP module  of the embedded computing device  uses a predefined set of IP addresses and, when the device is connected to the network, it pings an address in this address space. If no reply is received, the device  assumes that the address is available and assigns it to itself. Alternatively, the device  may combine AutolP with Multicast DNS, and itself hold its own name. In which case, it is not necessary to determine what IP address the device assigned to itself, because its name can always be used instead.","At the announce phase, the embedded computing device  sends out a small multicast packet so that other devices can find it on the network. The multicast message packet essentially says, \u201cI am here, I am, (say), a camera, and you can reach me at this IP address or URL.\u201d","At the discovery phase, the embedded computing device  listens for a discovery packet coming from a simple discovery client, i.e., the device announces itself, then listens for discovery. The discovery packet also is sent out by multicast.","At response to discovery, the embedded computing device  listens to the multicast address and then parses the information from a Simple Discovery request to decide if the request is for its kind of device. If so, the device  then sends back a response packet containing the following information: the IP address or URL where it can be reached; identification of its own device type; and the discovery packet ID so the requesting client knows which request is being answered.","Both the Announce and Discovery packets also contain a link or a URL to an XML file that is used by the embedded computing device at the device description phase to describe itself (i.e., its functionality). This XML data contains all the facts about the device. XML can also have URLs that point to appropriate style sheets (XSL files) that are used for optimal presentation. The XSL style sheets are used to present the data in different ways, i.e., the style sheets are applied to present different views of the same data. For example, if the device contains a file system, one style sheet can show the file selections; another shows the file sizes in some sort of diagram; yet another style sheet could make thumbnails of these image files.","Exemplary Client","With reference now to , a client that accesses and uses the embedded computing device  over the computer network has an exemplary client software architecture , which includes software code modules for applications , simple discovery , XML , LDAP , TCP\/IP stack  and a network interface card (NIC)  that provides a physical connection to the computer network. The applications  is a software code module that provides a user interface features for locating desired devices (e.g., embedded computing device ) and services on the computer network, and also user interface features to interact with the located device or service. The applications  can include an Internet browser, such as the Microsoft Internet Explorer, that can present the XML device description in accordance with an associated XSL style sheet for interaction with the embedded computing device and activation of its operational functionality.","The simple discovery  is a module that implements the above-described simple discovery per the UPnP protocol. The XML  is a module that processes the XML device description and XSL style sheets for presentation in the application's user interface. The LDAP  implements the standard LDAP directory protocol for name look-up. The TCP\/IP stack  implements the TCP\/IP protocol for communications over the computer network.","Illustrative Pervasive Computing Environment",{"@attributes":{"id":"p-0439","num":"0571"},"figref":["FIG. 31","FIG. 25"],"b":["1000","900","26","1000","1002","1004","1006","1002","1016","1010","1011","1012"]},"Various embedded computing devices also connect to the computer network via various network connections to the PCs , . These include an audio device  (e.g., speakers, radio tuner, microphone), and printer  which connect to the PC  through a USB . Also, a digital camera , a handheld PC (H\/PC)  and another personal computing device  connect via an infrared port (IRDA) , which also attaches to the PC  through the USB . Also, lighting switches  and like home appliances are connected via an A\/C power line-based networking  to the PC . Further, a chain of IEEE  cables  connect a digital TV , DVD player , digital video camcorder (DV\/DVC) , an audio device  (e.g., CD player\/recorder, radio receiver, amplifier, and like audio system component), and a game console . Devices, such as a portable telephone  and remote control , have a radio frequency network connection with the PC .","With their various inter-networked connections, the embedded computing devices are \u201cvisible\u201d and accessible from a client device  () also connected to the computer network.","Contract Definition Language","Overview","Contracts describe the public behavior of UPnP devices, and alternatively of other entities on the Web (reachable via HTTP, mostly) or other computer network that react to and emit messages. The Contract is written in a Contract Definition Language (CDL). The messages for the most part are structured documents, e.g., in XML. The messages may also be HTML pages, streaming media, images or other datatypes.","The contract will describe the following attributes:\n\n","All of these attributes may not be present in the contract as some of them (the end-point, for instance) may not be available at development time.","Protocol Description","Entities on the Web can be accessed using multiple protocols: HTTP, GENA, SMTP, FTP, MSMQ, . . . This section discusses how the protocol bindings are explicitly declared. The templates for describing the protocol use the format:",{"@attributes":{"id":"p-0448","num":"0585"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<protocol>"]},{"entry":[{},"\u2003\u2003\u2009<HTTP>"]},{"entry":[{},"\u2003\u2003\u2009\/\/ HTTP specific settings go here"]},{"entry":[{},"\u2003\u2003\u2009<\/HTTP>"]},{"entry":[{},"<\/protocol>"]},{"entry":[{},"<protocol>"]},{"entry":[{},"\u2003\u2003\u2009<HTTP>"]},{"entry":[{},"\u2003\u2003\u2009\/\/ GENA specific settings go here"]},{"entry":[{},"\u2003\u2003\u2009<\/HTTP>"]},{"entry":[{},"<\/protocol>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The \u201cprotocol\u201d element may have an \u201cid\u201d attribute. This is useful when multiple messaging patterns will use the same protocol definition. This will be covered in more detail below.","For the sake of convenience, we only cover HTTP-based protocols here. Extending this model to cover the other protocols is straightforward.",{"@attributes":{"id":"p-0451","num":"0588"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP"]},{"entry":[{},"GET"]},{"entry":[{},"<protocol>"]},{"entry":[{},"\u2003<HTTP version=\u201c1.0\u201d>"]},{"entry":[{},"\u2003\u2009<GET\/>"]},{"entry":[{},"\u2003\u2009<URL> "]},{"entry":[{},"\u2003<\/URL>"]},{"entry":[{},"<\/HTTP><\/protocol>"]},{"entry":[{},"GET with query string"]},{"entry":[{},"<protocol>"]},{"entry":[{},"\u2003<HTTP version=\u201c1.1\u201d>"]},{"entry":[{},"\u2003\u2009<GET\/>"]},{"entry":[{},"\u2003\u2009<URL> http:\/\/search.yahoo.com\/bin\/search"]},{"entry":[{},"\u2003\u2009<\/URL>"]},{"entry":[{},"\u2003\u2009<QUERY name=\u201cpattern\u201d required=\u201cyes\u201d \/>"]},{"entry":[{},"\u2003\u2009<QUERY name=\u201climit\u201d value=\u201c50\u201d required=\u201cno\u201d"]},{"entry":[{},"\/>"]},{"entry":[{},"\u2003\u2009<QUERY name=\u201cxml\u201d value=\u201cyes\u201d required=\u201cyes\u201d"]},{"entry":[{},"\/>"]},{"entry":[{},"<\/HTTP>"]},{"entry":[{},"<\/protocol>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This description indicates that the following are valid URLs:","http:\/\/search.yahoo.com\/bin\/search?pattern=Rio+player&limit=50&xml=yes","http:\/\/search.yahoo.com\/bin\/search?xml=yes&pattern=Rio+player","The reason for not associating the query variables with the GET verb is because it is valid to send a POST message to a URL containing query variables.","The \u201cvalue\u201d attribute for the \u201cQUERY\u201d element implies that the value is static\u2014it is to be treated as a part of the URL. Declaring it this way allows the appropriate construction of the query string to be handled by the caller.",{"@attributes":{"id":"p-0457","num":"0594"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"POST"]},{"entry":[{},"<protocol>"]},{"entry":[{},"\u2003<HTTP version=\u201c1.1\u201d>"]},{"entry":[{},"\u2003\u2003\u2009<URL>"]},{"entry":[{},"http:\/\/www.amazon.com\/exec\/obidos\/generic-"]},{"entry":[{},"quicksearch-query <\/URL>"]},{"entry":[{},"\u2003\u2003\u2009<POST>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2009\u2009\u2009\u2009\u2009<PARAM name=\u201cmode\u201d","default=\u201cblended\u201d"]},{"entry":[{},"required=\u201cyes\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2009\u2009\u2009\u2009\u2009<PARAM name=\u201ckeyword-query\u201d"]},{"entry":[{},"required=\u201cyes\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2009\u2009\u2009\u2009\u2009<PARAM name=\u201czipcode\u201d","value=\u201c98112\u201d"]},{"entry":[{},"required=\u201cyes\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2009<\/POST>"]},{"entry":[{},"\u2003\u2003\u2009\u2009\u2009\u2009\u2009<\/HTTP>"]},{"entry":[{},"\u2003\u2003\u2009<\/protocol>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The default attribute indicates that the parameter's value can be changed.",{"@attributes":{"id":"p-0459","num":"0596"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"M-POST"]},{"entry":[{},"<protocol id=\u201cprotocolDef\u201d>"]},{"entry":[{},"\u2003<HTTP version=\u201c1.1\u201d>"]},{"entry":[{},"\u2003\u2003\u2009<URL> http:\/\/investor.msn.com\/stockquotes.xsp"]},{"entry":[{},"<\/URL>"]},{"entry":[{},"\u2003\u2003\u2009<QUERY name=\u201csymbol\u201d required=\u201cyes\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2009<M-POST>"]},{"entry":[{},"\u2003\u2003\u2009\u2009\u2009\u2009\u2009\u2009<MAN> http:\/\/www.upnp.org\/service-control\/m-"]},{"entry":[{},"post <\/MAN>"]},{"entry":[{},"\u2003\u2003\u2009<\/M-POST>"]},{"entry":[{},"\u2003\u2003\u2009<HEADER name=\u201cContent-Type\u201d value=\u201ctext\/xml\u201d \/>"]},{"entry":[{},"\u2003<\/HTTP>"]},{"entry":[{},"<\/protocol>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The M-POST and the enclosed MAN elements declare the mandatory extension mechanism to be used. The optional extension mechanism can also be handled in this way.","The \u201cHEADER\u201d element allows the declaration of HTTP headers to be used.","GENA","Payload Description","Below is an example of an XML payload description.",{"@attributes":{"id":"p-0465","num":"0602"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<schema xmlns=\u201curn:schema-microsoft-com:xml-data\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2009\u2009\u2009xmlns:dt=\u201curn:schema-microsoft-"]},{"entry":[{},"com:datatypes\u201d>"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ symbol: a ticker symbol"]},{"entry":[{},"\/\/"]},{"entry":[{},"<ElementType name=\u201csymbol\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ symbols: array of \u201csymbol\u201d elements"]},{"entry":[{},"\/\/"]},{"entry":[{},"<ElementType name=\u201csymbols\u201d>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element type=\u201csymbol\u201d maxOccurs\u201c*\u201d \/>"]},{"entry":[{},"<\/ElementType>"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ stockQuote: quote details"]},{"entry":[{},"\/\/"]},{"entry":[{},"<ElementType name=\u201cstockQuote\u201d>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element type=\u201ccompany\u201d \/>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element type=\u201cticker\u201d \/>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element type=\u201cpreviousclose\u201d \/>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element type=\u201copeningTrade\u201d \/>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element type=\u201clastTrade\u201d \/>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element type=\u201cvolume\u201d \/>"]},{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType dt:type=\u201cstring\u201d name=\u201ccompany\u201d \/>"]},{"entry":[{},"<ElementType dt:type=\u201cstring\u201d name=\u201cticker\u201d \/>"]},{"entry":[{},"<ElementType dt:type=\u201cstring\u201d name=\u201cpreviousClose\u201d"]},{"entry":[{},"\/>"]},{"entry":[{},"<ElementType dt:type=\u201cstring\u201d name=\u201copeningTrade\u201d"]},{"entry":[{},"\/>"]},{"entry":[{},"<ElementType dt:type=\u201cstring\u201d name=\u201clastTrade\u201d \/>"]},{"entry":[{},"<ElementType dt:type=\u201cstring\u201d name=\u201cvolume\u201d \/>"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ stockQuotes: array of \u201cstockQuote\u201d elements"]},{"entry":[{},"\/\/"]},{"entry":[{},"<ElementType name=\u201cstockQuotes\u201d>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element name=\u201cstockQuote\u201d maxOccurs=\u201c*\u201d \/>"]},{"entry":[{},"<\/Element>"]},{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ error: error info"]},{"entry":[{},"\/\/"]},{"entry":[{},"<ElementType name=\u201cerror\u201d>"]},{"entry":[{},"\u2009\u2009\u2009\u2009<element type=\u201creason\u201d \/>"]},{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType dt:type=\u201cstring\u201d name=\u201creason\u21c4 \/>"]},{"entry":[{},"<\/schema>"]},{"entry":[{},"Using this declaration, the below are valid XML fragments:"]},{"entry":[{},"<symbol> MSFT <\/symbol>"]},{"entry":[{},"<symbols>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<symbol>MSFT","<\/symbol>"]},{"entry":[{},"\u2003<symbol>IBM","<\/symbol>"]},{"entry":[{},"\u2003<symbol>AOL","<\/symbol>"]},{"entry":[{},"\u2003<symbol>YHOO","<\/symbol>"]},{"entry":[{},"\u2003<symbol>AMZN","<\/symbol>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ symbols>"]},{"entry":[{},"<stockQuote>"]},{"entry":[{},"\u2003<company>Microsoft%20Corporation<\/company>"]},{"entry":[{},"\u2003<ticker>MSPT <\/ticker>"]},{"entry":[{},"\u2003<previousClose>84%2011\/16<\/previousClose>"]},{"entry":[{},"\u2003<openingTrade>85%201\/16<\/openingTrade>"]},{"entry":[{},"\u2003<lastTrade>84%205\/16<\/lastTrade>"]},{"entry":[{},"\u2003<volume>28.66%20Mil<\/volume>"]},{"entry":[{},"<\/stockQuote>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Messaging Patterns","The messaging pattern declaration acts as an anchor for pulling together the protocol, delivery characteristics and the payload information. The messaging pattern declarations can include these types.\n\n","Request\/response (RR). The RR pattern is named. The two samples below are equivalent mechanisms for declaring the protocol to be used for the RR messaging pattern. The linking mechanism is useful when multiple RR pairs use the same protocol data. This is the case for UPnP. Also, a service may employ multiple protocols for achieving the same \u201cmethod\u201d-call. The \u201cis\u201d attribute accepts a list of ID-Refs\u2014implying that either of the protocols are equally suitable for accessing the functionality.",{"@attributes":{"id":"p-0469","num":"0609"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<RequestResponse name=\u201cgetImage\u201d>"]},{"entry":[{},"\u2003\u2009<protocol>"]},{"entry":[{},"\u2003\u2003\u2009<HTTP version==\u201c1.0\u201d>"]},{"entry":[{},"\u2003\u2003\u2009\u2003\u2009<GET\/>"]},{"entry":[{},"\u2003\u2003\u2009\u2003\u2009<URL> http:\/\/172.30.184.20\/fullsize.jpg"]},{"entry":[{},"<\/URL>"]},{"entry":[{},"\u2003\u2003\u2009<\/HTTP>"]},{"entry":[{},"\u2003\u2009<\/protocol>"]},{"entry":[{},"\u2003\u2009. . ."]},{"entry":[{},"<\/RequestResporise>"]},{"entry":[{},"<protocol id=\u201cprotocolDef1\u201d>"]},{"entry":[{},"\u2003\u2009<HTTP version=\u201c1.0\u201d>"]},{"entry":[{},"\u2003\u2003\u2009<GET\/>"]},{"entry":[{},"\u2003\u2003\u2009<URL> http:\/\/172.30.184.20\/fullsize.jpg <\/URL>"]},{"entry":[{},"\u2003\u2009<\/HTTP>"]},{"entry":[{},"<\/protocol>"]},{"entry":[{},"<RequestResponse name=\u201cgetImage\u201d>"]},{"entry":[{},"\u2003\u2009<protocol is=\u201cprotocolDef1\u201d \/>"]},{"entry":[{},"\u2003\u2009. . ."]},{"entry":[{},"<\/RequestResponse>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The payloads for request, response and error, in case of XML data, are identified by the names of the elements referenced by the \u201cis\u201d attribute. The schema information is assumed to be in the same document. Below are examples using the two schemes:",{"@attributes":{"id":"p-0471","num":"0611"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<RequestResponse name=\u201cgetQuote\u201d>"]},{"entry":[{},"\u2003\u2009\/\/ protocol declaration goes here"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2009<in","is=\u201csymbol\u201d \/>"]},{"entry":[{},"\u2003\u2009<out","is=\u201cstockQuote\u201d \/>"]},{"entry":[{},"\u2003\u2009<error","is=\u201cerror\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/RequestResponse>"]},{"entry":[{},"<RequestResponse name=\u201cgetQuote\u201d"]},{"entry":[{},"\u2003\u2009xmlns:f=\u201chttp: \/\/electrocommerce.org\/finance.xml\u201d"]},{"entry":[{},"\u2003\u2009xmlns:c=\u201chttp: \/\/electrocommerce.org\/common.xml\u201d"]},{"entry":[{},">"]},{"entry":[{},"\u2003\u2009\/\/ protocol declaration goes here"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2009<in","is=\u201cf:symbol\u201d \/>"]},{"entry":[{},"\u2003\u2009<out","is=\u201cf:stookQuote\u201d \/>"]},{"entry":[{},"\u2003\u2009<error","is=\u201cc:error\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/RequestResponse>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The CDL described herein keeps the element declarations in the \u201cschema\u201d block rather than sprinkle them in with the messaging pattern definitions. The reasons for this are:\n\n","In case the request or response are not XML documents but HTML documents, or binary files, the following syntax will be used. The contained element defines the nature of the data. The use of MIME is not in the HTTP-specific sense but in the \u201cnature of the payload\u201d sense. The presence of the \u201cis\u201d attributes indicates that the MIME type is \u201ctext\/xml.\u201d",{"@attributes":{"id":"p-0474","num":"0617"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<RequestResponse name=\u201cgetImage\u201d>"]},{"entry":[{},"\u2003\u2003\u2009\u2009. . ."]},{"entry":[{},"\u2003\u2003\u2009\u2009<out>"]},{"entry":[{},"\u2003\u2003\u2009\u2009\u2003\u2003\u2002<mime type=\u201cimage\/jpeg\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2009\u2009\u2003\u2003\u2002<\/out>"]},{"entry":[{},"\u2003\u2003\u2009\u2009\u2003\u2003\u2002. . ."]},{"entry":[{},"<\/RequestResponse>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Delivery Characteristics","The contract may specify the delivery characteristics (sometimes also referred to as quality of service) required or supported by the server. Examples are:\n\n",{"@attributes":{"id":"p-0477","num":"0626"},"figref":"FIGS. 45-47"},{"@attributes":{"id":"p-0478","num":"0627"},"figref":"FIGS. 48-51"},"Having described and illustrated the principles of our invention with reference to an illustrated embodiment, it will be recognized that the illustrated embodiment can be modified in arrangement and detail without departing from such principles. It should be understood that the programs, processes, or methods described herein are not related or limited to any particular type of computer apparatus, unless indicated otherwise. Various types of general purpose or specialized computer apparatus may be used with or perform operations in accordance with the teachings described herein. Elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa.","In view of the many possible embodiments to which the principles of our invention may be applied, it should be recognized that the detailed embodiments are illustrative only and should not be taken as limiting the scope of our invention. Rather, we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto.","UPnP Template Language","UPnP forum working committees define UPnP device templates to describe various devices and services. The templates are written in a UPnP template language, which evolved in part from the Contract Definition Language described in the previous section. The template language defines well-formed templates for devices and services. It is written in XML syntax and is derived from XML Schema. Because the UPnP template language, UPnP device templates, and UPnP device descriptions are all machine-readable, automated tools can automatically check to ensure that the templates and descriptions have all required elements, are correctly nested, and have values of the correct data types.","To describe the UPnP template language, it is useful to once again visit the general UPnP device architecture in terms of a set of processes-discovery, description, control, eventing, and presentation-that utilize the following protocol stack.",{"@attributes":{"id":"p-0483","num":"0632"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Protocol Stack"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UPnP vendor"]},{"entry":[{},"UPnP Forum"]},{"entry":[{},"UPnP Device Architecture"]},{"entry":[{},"SSDP\/GENA\/SOAP"]},{"entry":[{},"HTTPMU"]},{"entry":[{},"UDP"]},{"entry":[{},"IP"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"At the highest layer, messages logically contain only UPnP vendor-specific information about their devices. Moving down the stack, vendor content is supplemented by information defined by UPnP forum working committees, which is written in the template language.","Messages are formatted using the Simple Service Discovery Protocol (SSDP), General Event Notification Architecture (GENA), and Simple Object Access Protocol (SOAP). The above messages are delivered via HTTP, either a multicast or unicast variety running over UDP, or the standard HTTP running over TCP. Ultimately, all messages above are delivered over IP.","To briefly recap the UPnP networking process, given an IP address, the first step is discovery. When a device is added to the network, the UPnP discovery protocol allows that device to advertise its services to control points on the network. Similarly, when a control point is added to the network, the UPnP discovery protocol allows that control point to search for devices of interest on the network. The fundamental exchange in both cases is a discovery message containing a few, essential specifics about the device or one of its services, e.g., its type, identifier, and a pointer to more detailed information. The UPnP discovery protocol is based on the Simple Service Discovery Protocol (SSDP).","The second step in UPnP networking is description. After a control point has discovered a device, the control point still knows very little about the device. For the control point to learn more about the device and its capabilities, or to interact with the device, the control point retrieves the device's description from the URL provided by the device in the discovery message. Devices may contain other, logical devices, as well as functional units, or services. The UPnP description for a device is expressed in XML and includes vendor-specific manufacturer information like the model name and number, serial number, manufacturer name, URLs to vendor-specific Web sites, etc. The description also includes a list of any embedded devices or services, as well as URLs for control, eventing, and presentation. How devices are described using the template language is explained below in more detail.","The third step in UPnP networking is control. After a control point has retrieved a description of the device, the control point has the bare essentials for device control. To learn more about the service, a control point retrieves a detailed UPnP description for each service. The description for a service is also expressed in XML and includes a list of the commands, or actions, the service responds to, and parameters, or arguments, for each action. The description for a service also includes a list of variables, which model the state of the service at run time and are described in terms of their data type, range, and event characteristics. To control a device, a control point sends an action request to a device's service by sending a suitable control message to the URL for control URL for the service (provided in the device description). Control messages are also expressed in XML using the Simple Object Access Protocol (SOAP). In response to the control message, the service provides a simple acknowledgement; unlike function calls, no service-specific value is returned. The effects of the action, if any, are modeled by changes in the variables that describe the run-time state of the service.","The fourth step in UPnP networking is eventing. A UPnP description for a service includes a list of actions the service responds to and a list of variables that model the state of the service at run time. The server publishes updates when these variables change, and a control point may subscribe to receive this information. The server publishes updates by sending event messages, which contain the names of one of more state variables and the current value of those variables. These messages are also expressed in XML and formatted using the General Event Notification Architecture (GENA). A special initial event message is sent when a control point first subscribes; this event message contains the names and values for all evented variables and allows the subscriber to initialize its model of the state of the service. To support scenarios with multiple control points, eventing is designed to keep all control points equally informed about the effects of any action. Therefore, all subscribers are sent all event messages, subscribers receive event messages for all evented variables (not just some), and event messages are sent no matter why the state variable changed (either in response to a requested action or because the state the service is modeling changed).","The fifth step in UPnP networking is presentation. If a device has a URL for presentation, then the control point can retrieve a page from this URL, load the page into a browser, and depending on the capabilities of the page, allow a user to control the device and\/or view device status. The degree to which each of these can be accomplished depends on the specific capabilities of the presentation page and device.","UPnP Template Language for Devices","The template language can be applied to create descriptions for both devices and the services. The template language as it pertains to devices is described in this section. A following section addresses the template language as it pertains to services.","After a control point has discovered a device, the control point still knows very little about the device. It only knows the information that was in the discovery message (e.g., the device's (or service's) UPnP type, the device's universally-unique identifier, and a URL to the device's UPnP description). For the control point to learn more about the device and its capabilities, or to interact with the device, the control point retrieves the device's description from the URL provided by the device in the discovery message.","The UPnP description for a device includes vendor-specific, manufacturer information like the model name and number, serial number, manufacturer name, URLs to vendor-specific Web sites, etc. (details below). The description also includes a list of any embedded devices or services, as well as URLs for control, eventing, and presentation. The device vendor writes the description for the device. The description is in XML syntax and is usually based on a standardized device template produced by a UPnP forum working committee.","A single physical device may include multiple logical devices. Multiple logical devices can be modeled as a single root device with embedded devices (and services) or as multiple root devices (perhaps with no embedded devices). In either case, there is one UPnP description for each root device, with embedded device descriptions as needed.","Retrieving the UPnP description for a device is simple: the control point issues an HTTP GET request on the URL in the discovery message, and the device returns the description document. The protocol stack, method, headers, and body for the response and request are explained in detail below.","Vendors can differentiate their devices by extending services, including additional UPnP services, or embedding additional UPnP devices. When a control point retrieves a particular device's description, these added features are exposed to the control point for control, eventing, and presentation.","The following subsection A explains how devices are described, explaining details of vendor-specific information, embedded devices, and URLs for control, eventing, and presentation. Subsections B and C explain UPnP device templates and the UPnP template language as it pertains to describing devices. Finally, subsection D explains in detail how a control point retrieves a description from a device.","A. Device Description","The UPnP description for a device contains several pieces of vendor-specific information, definitions of embedded devices and services, and URLs for control, eventing, and presentation of the device. To illustrate these, below is a listing with placeholders (in italics) for actual elements and values. Some of these placeholders would be specified by a UPnP forum working committee (underlined) or by a UPnP vendor (bold). Elements of the template language are bolded and underlined. Immediately following the listing is a detailed explanation of the elements, attributes, and values.",{"@attributes":{"id":"p-0501","num":"0650"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<root: xmlns=\u201curn: schemas-upnp-org:device:1:0\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<specVersion>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<major>1<\/major>"]},{"entry":[{},"<minor>0<\/minor>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/specVersion>"]},{"entry":[{},"<URLBase>base URL for all relative URLs<\/URLBase>"]},{"entry":[{},"<device>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<deviceType>urn:schemas-upnp-org:device:device-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"type<\/deviceType>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<friendlyName>short user-friendly title<\/friendlyName>"]},{"entry":[{},"<modelDescription>long user-friendly"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"title<\/modelDescription>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<modelName>model name<\/modelName>"]},{"entry":[{},"<modelNumber>model number<\/modelNumber>"]},{"entry":[{},"<modelURL>URL to model site<\/modelURL>"]},{"entry":[{},"<manufacturer>manufacturer name<\/manufacturer>"]},{"entry":[{},"<manufacturerURL>URL to manufacturer"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"site<\/manufacturerURL>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<serialNumber>manufacturer's serial number<\/serialNumber>"]},{"entry":[{},"<UDN>uuid:schemas-upnp-org:device:device-type:"]},{"entry":[{},"UUID<\/UDN>"]},{"entry":[{},"<UPC>Universal Product Code<\/UPC>"]},{"entry":[{},"<iconList>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<icon>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<mimetype>image\/format<\/mimetype>"]},{"entry":[{},"<width>horizontal pixels<\/width>"]},{"entry":[{},"<height>vertical pixels<\/height>"]},{"entry":[{},"<depth>color depth<\/depth>"]},{"entry":[{},"<url>URL to icon<\/url>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/icon>"]},{"entry":[{},"XML to declare other icons, if any, go here"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/iconList>"]},{"entry":[{},"<serviceList>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<service>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<serviceType>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"urn:schemas-upnp-org:service:service-type:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"service-version"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/serviceType>"]},{"entry":[{},"<serviceId>service ID<\/serviceId>"]},{"entry":[{},"<SCPDURL>URL to service description<\/SCPDURL>"]},{"entry":[{},"<controlURL>URL for control<\/controlURL>"]},{"entry":[{},"<eventSubURL>URL, for eventing<\/eventsubURL>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/service>"]},{"entry":[{},"Declarations for other serivces defined by a UPnP Forum"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"working committee (if any) go nere"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Declarations for other services added by UPnP vendor (if"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"any) go here"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/serviceList>"]},{"entry":[{},"<deviceList>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Descriptions of embedded devices defined by a UPnP "]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Forum working committee (if any) go here"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Description of embedded devices added by UPnP vendor (if"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"any) go here"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/deviceList>"]},{"entry":[{},"<presentationURL>URL for presentation<\/presentationURL>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/device>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/root>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Listed below are details for each of the elements, attributes, and values appearing in the listing above. All elements and attributes are case sensitive; HTTP specifies case sensitivity for URLs; other values are not case sensitive except where noted. The order of elements is insignificant. Except where noted: required elements occur exactly once (no duplicates), and recommended or optional elements may occur at most once.","xml","Required for all XML documents. Case sensitive.","Root","Required. Must have urn:schemas-upnp-org:device:1:0 as the value for the xmlns attribute; this references the UPnP Template Language (described below). Case sensitive. Contains all other elements describing the root device, i.e., contains the following sub elements:","SpecVersion\n\n","URLBase\n\n","device\n\n","For future extensibility, when processing XML like the listing above, devices and control points may ignore any unknown elements and any subelements or content as specified by the Flexible XML Processing Profile (FXPP).","XML does not support directly embedding binary data, e.g., icons in UPnP descriptions. Binary data may be converted into text (and thereby embedded into XML) using an XML data type of either bin.base64 (a MINE-style base 64 encoding for binary data) or bin.hex (hexadecimal digits represent octets). Alternatively, the data can be passed indirectly, as it were, by embedding a URL in the XML and transferring the data in response to a separate HTTP request; the icon(s) in UPnP descriptions are transferred in this latter manner.","B. UPnP Device Template","The listing of the preceding subsection A illustrates the relationship between a UPnP device description and a UPnP device template. As explained above, the description for a device is written by the vendor, in XML, according to a device template produced by a UPnP forum working committee as a way to standardize devices.","By appropriate specification of placeholders, the listing above can be either a UPnP device template or a UPnP device description. Recall that some placeholders (underlined) would be defined by a UPnP forum working committee, i.e., the UPnP device type identifier) required UPnP services, and required UPnP embedded devices (if any). If these were defined, the listing would be a UPnP device template, codifying the standard for this type of device. UPnP device templates are one of the key deliverables from UPnP forum working committees.","Taking this one step further, the remaining placeholders (bolded) in the listing in subsection A would be specified by the vendor (i.e., vendor-specific information). If these placeholders were specified (as well as the others), the listing would be a device description, suitable to be delivered to a control point to enable control, eventing, and presentation.","Put another way, the UPnP device template defines the overall type of device, and each UPnP device description instantiates that template with vendor-specific information. The first is created by a UPnP forum working committee; the latter, by a UPnP vendor.","C. Device Template Language","The UPnP template language well-formed templates for devices and services. This subsection C provides is a listing and explanation of the language as it pertains to devices. A following section entitled \u201cUPnP template language for Services\u201d explains the UPnP template language as it pertains to services.","The UPnP template language is written in XML syntax and is derived from XML Schema (Part 1: Structures, Part 2: Datatypes). XML Schema provides a set of XML constructions that express language concepts like required vs. optional elements, element nesting, and data types for values (as well as other properties not of interest here). The UPnP template language uses these XML Schema constructions to define elements such as specVersion, URLBase, and deviceType, which are found in the above listing. Because the UPnP template language is constructed using another, precise language, it is unambiguous. Additionally, because the UPnP template language, UPnP device templates, and UPnP device descriptions are all machine-readable, automated tools can automatically check to ensure the latter two have all required elements, are correctly nested, and have values of the correct data types.","Below is the UPnP template language for devices as defined by the UPnP device architecture. The elements it defines are used in UPnP device templates; they are bolded and underlined both below as in the listing above. The listing below is where these elements are defined and the listing above is where they are used. Immediately following this is a brief explanation of the XML Schema elements, attributes, and values used.",{"@attributes":{"id":"p-0519","num":"0742"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d ?>"},{"entry":"<Schema name=\u201curn:schemas-upnp-org:device:1:0\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"xmlns=\u201curn:schemas-microsoft-com:xml-data\u201d"]},{"entry":[{},"xmlns:dt=\u201curn:schemas-microsoft-com:datatypes\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201croot\u201d content=\u201celtOnly\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cspecVersion\u201d \/>"]},{"entry":[{},"<element type=\u201cURLBase\u201d minOccurs=\u201c0\u201d \/>"]},{"entry":[{},"<element type=\u201cdevice\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cspecVersion\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cmajor\u201d \/>"]},{"entry":[{},"<element type=\u201cminor\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cmajor\u201d dt:type=\u201cint\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cminor\u201d dt:type=\u201cint\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cURLBase\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cdevice\u201d content=\u201celtOnly\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cUDN\u201d \/>"]},{"entry":[{},"<element type=\u201cfriendlyName\u201d \/>"]},{"entry":[{},"<element type=\u201cdeviceType\u201d \/>"]},{"entry":[{},"<element type=\u201cpresentationURL\u201d minOccurs=\u201c0\u201d \/>"]},{"entry":[{},"<element type=\u201cmanufacturer\u201d \/>"]},{"entry":[{},"<element type=\u201cmanufacturertURL\u201d minOccurs=\u201c0\u201d \/>"]},{"entry":[{},"<element type=\u201cmodelName\u201d \/>"]},{"entry":[{},"<element type=\u201cmodelNumber\u201d minOccurs=\u201c0\u201d \/>"]},{"entry":[{},"<element type=\u201cmodelDescription\u201d minOccurs=\u201c0\u201d \/>"]},{"entry":[{},"<element type=\u201cmodelURL\u201d minOccursr=\u201c0\u201d \/>"]},{"entry":[{},"<element type=\u201cUPC\u201d minOccurs=\u201c0\u201d \/>"]},{"entry":[{},"<element type=\u201cserialNumber\u201d minOccurs=\u201c0\u201d \/>"]},{"entry":[{},"<element type=\u201ciconList\u201d \/>"]},{"entry":[{},"<element type=\u201cserviceList\u201d \/>"]},{"entry":[{},"<element type=\u201cdeviceList\u201d minOccurs=\u201c0\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cUDN\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cfriendlyName\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cdeviceType\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cpresentationURL\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cmanufacturer\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cmanufacturerURL\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cmodelName\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cmodelNumber\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cmodelDescription\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cmodelURL\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cUPC\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cserialNumber\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"<ElementType name=\u201ciconList\u201d content=\u201celtOnly\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<element type=\u201cicon\u201d maxOccurs=\u201c*\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cicon\u201d content=\u201celtOnly\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cmimetype\u201d \/>"]},{"entry":[{},"<element type=\u201cwidth\u201d \/>"]},{"entry":[{},"<element type=\u201cheight\u201d \/>"]},{"entry":[{},"<element type=\u201cdepth\u201d \/>"]},{"entry":[{},"<element type=\u201curl\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cmimetype\u201d dt:type=\u201cstring\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cwidth\u201d dt:type=int\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cheight\u201d dt:type=\u201cint\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cdepth\u201d dt:type=\u201cint\u201d \/>"]},{"entry":[{},"<ElementType name=\u201curl\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cdeviceList\u201d content=\u201celtOnly\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<element type=\u201cdevice\u201d maxOccurs=\u201c*\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cserviceList\u201c content=\u201celtOnly\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<element type=\u201cservice\u201d maxOccurs=\u201c*\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cservice\u201d content=\u201celtOnly\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cserviceType\u201d \/>"]},{"entry":[{},"<element type=\u201cserviceId\u201d \/>"]},{"entry":[{},"<element type=\u201ccontrolURL\u201d \/>"]},{"entry":[{},"<element type=\u201ceventSubURL\u201d \/>"]},{"entry":[{},"<element type=\u201cSCPDURL\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cserviceType\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cserviceId\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201ccontrolURL\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201ceventSubURL\u201d dt:type=\u201curi\u201d \/>"]},{"entry":[{},"<ElementType name=\u201cSCPDURL\u201d dt:type=uri\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Defines an element in the new, derived language. name attribute defines element name. dt:type attribute defines the data type for the value of element in the new, derived language.","Element","References an element for the purposes of declaring nesting minOccurs attribute defines minimum number of times the element must occur; default is minOccurs=1; optional elements have minOccurs=0. maxOccurs attribute defines maximum number of times the element must occur; default is maxOccurs=1; elements that can appear one or more times have maxOccurs=*.","D. Retrieving a Device Description","As explained above, after a control point has discovered a device, it still knows very little about the device. To learn more about the device and its capabilities, the control point must retrieve the UPnP description for the device using the URL provided by the device in the discovery message. This is an HTTP-based process and uses the following subset of the overall UPnP protocol stack.","At the highest layer, description messages contain vendor-specific information, e.g., device type, service type, and required services. Moving down the stack, vendor content is supplemented by information from a UPnP forum working committee, e.g., model name, model number, and specific URLs. Messages from the layers above are hosted in UPnP-specific protocols. In turn, the above messages are delivered via HTTP over TCP over IP.","Using this protocol stack, retrieving the UPnP description for a device is simple: the control point issues an HTTP GET request to the URL in the discovery message, and the device returns its description in the body of an HTTP response. The headers and body for the response and request are explained in detail below.","First, a control point sends a request with method GET in the following format. Values in italics are placeholders for actual values.",{"@attributes":{"id":"p-0527","num":"0750"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"GET path to device descripticn HTTP\/1.1"},{"entry":"HOST: host for device description:port for device description"},{"entry":"ACCEPT-LANGUAGE: language preferred by control point"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"There is no message body for request to retrieve a description.","Listed below are details for the request line and headers appearing in the request. All header values are case sensitive except where noted.","Request Line","GET","Method defined by HTTP.","Path to Device Description","Path component of device description URL (LOCATION header in discovery message). Single, relative URL.","HTTP\/1.1","HTTP version.","Headers","HOST","Required. Domain name or IP address and optional port components of device description URL (LOCATION header in discovery message). If the port is empty or not given, port  is assumed.","ACCEPT-LANGUAGE","Recommended. Preferred language(s) for device description. If no description is available in this language, device may return a description in a default language. RFC 1766 language tag(s).","After a control point sends a request, the device sends a response in the following format, where values in italics are placeholders for actual values.",{"@attributes":{"id":"p-0536","num":"0759"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"CONTENT-LENGTH: bytes in body"]},{"entry":[{},"CONTENT-TYPE: text\/xml"]},{"entry":[{},"DATE: when responded"]},{"entry":[{},"SERVER: OS\/version, JPnp \/ 1.0, product \/ version"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The body of this response is a UPnP device description as explained in detail above.","Listed below are details for the headers appearing in the response. All header values are case sensitive except where noted.","Headers","CONTENT-LENGTH","Required. Length of body in bytes. Integer.","CONTENT-TYPE","Required. Must be text\/xml.","DATE","Recommended. When response was generated. RFC 1123 date.","SERVER","Required. Concatenation of OS name, slash, OS version, UPnP\/1.0, product name, slash, and product version. String.","UPnP Template Language for Services","After a control point has (1) discovered a device and (2) retrieved a description of the device, the control point has the bare essentials for device control. To learn more about a particular service supported by the device, a control point retrieves a detailed UPnP description for each service.","A UPnP description for a service includes a list of the commands, or actions, the service responds to, and parameters, or arguments, for each action. A service description also includes a list of variables. These variables model the state of the service at run time, and are described in terms of their data type, range, and event characteristics. This section explains the description of actions, arguments, state variables, and properties of those variables.","Like the UPnP description for a device, the UPNP description for a service is written by the vendor. The description is in XML syntax and is based on a standard service template. As with the device template, the service template is produced by a UPnP forum working committee, and they derive the template from the UPnP template language, augmenting it with human language where necessary. As explained above, the UPnP template language is derived from standard constructions in XML. This section explains the format for a UPnP service description, UPnP service templates, typical augmentations in human language, and the part of the UPnP template language that covers services.","To control a device, a control point requests a device's service to perform an action. To do this, a control point sends a suitable control message to the control URL for the service (provided in the device description). In response, the service provides a simple acknowledgement; unlike function calls, no service-specific value is returned. The effects of the action, if any, are modeled by changes in the variables that describe the run-time state of the service. When these state variables change, events are published to all interested control points. This section explains the protocol stack for, and format of, control messages.","To prevent a race condition between events headed for control points and requested actions headed for a service, control messages may include a key. With each new event message a service generates, the service increments the key, and includes that key in the event message. When a control point sends a control message, it may choose to include a key. If a control message includes a key, the service checks to see if the key is current, i.e., if no events have been sent since this key was issued. If the key is current (or if there was no key in the control message), then the service acknowledges the action request. If the key is not current, the service fails the action request. This section briefly explains the event key.","To determine the current value of a state variable, a control point may poll the service. Similar to requesting an action, a control point sends a suitable query message to the control URL for the service. In response, the service provides the value of the variable. This section also explains the format of these query messages.","The remainder of this section first explains how services are described in subsection A, explaining details of actions, arguments, state variables, and properties of those variables. In subsections B and C, UPnP service templates, typical ways to augment service descriptions with human language, and the UPnP template language as it pertains to services are explained. In subsection D, how a control point retrieves a service description is described.","A. Service Description","The UPnP description for a service defines actions and their arguments, and state variables and their data type, range, and event characteristics. Each action may have zero or more arguments. Each argument should correspond to a state variable. This direct-manipulation programming model reinforces simplicity.","To illustrate these points, below is a listing with placeholders (in italics) for actual elements and values. For a standard UPnP service, some of these placeholders would be defined by a UPnP forum working committee (underlined) or specified by a UPnP vendor (bolded). For a vendor-unique service, all of these placeholders would be specified by a UPnP vendor. Elements of the template language defined by the UPnP device architecture are bolded and underlined for later reference. Immediately following the listing is a detailed explanation of the elements, attributes, and values.",{"@attributes":{"id":"p-0553","num":"0776"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<scpd xmlns=\u201curn:schemas-upnp-org:service:1:0\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<actionList>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<action>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>action name<\/name>"]},{"entry":[{},"<argumentList>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<argument>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>formal parameter name<\/name>"]},{"entry":[{},"<relatedStateVariable>state variable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"name<\/relatedStateVariable>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/argument>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Declarations for other arguments defined by URP Forum"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"working committee (if any) go here"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/argumentList>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/action>"]},{"entry":[{},"Declarations for other actions defined by URnP Forum"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"working committee (if any) go here"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Declarations for other actions added by UPnP vendor (if"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"any) go here"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/actionList>"]},{"entry":[{},"<serviceStateTable>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<stateVariable>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>variable name<\/name>"]},{"entry":[{},"<dataType>variable data type<\/dataType>"]},{"entry":[{},"<defaultValue>default value<\/defaultValue>"]},{"entry":[{},"<allowedValueRange>"]},{"entry":[{},"<minimum>minimum value<\/minimum>"]},{"entry":[{},"<maximum>maximum value<\/maximum>"]},{"entry":[{},"<step>increment value<\/step>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/allowedvalueRange>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/stateVariable>"]},{"entry":[{},"Declarations for other state variables defined by UPnP"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Forum working committee (if any) go here"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Declarations for other state variables added by UPnP"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"vendor (if any) go here"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/serviceStateTable>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/scpd>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Listed below are details for each of the elements, attributes, and values appearing in the listing above. All elements and attributes are case sensitive; values are not case sensitive except where noted. Except where noted, the order of elements is insignificant. Except where noted, required elements occur exactly once (no duplicates), and recommended or optional elements may occur at most once.","xml","Required for all XML documents. Case sensitive.","scpd","Required. Must have urn:schemas-upnp-org:service:1:0 as the value for the xmlns attribute; this references the UPnP Template Language (explained below). Case sensitive. Contains all other elements describing the service, i.e., contains the following sub elements:","actionList\n\n","For future extensibility, when processing XML like the listing above, devices and control points ignore any unknown elements and any sub elements or content as specified by the Flexible XML Processing Profile (FXPP).","Note that it is logically possible for a service to have no actions but have state variables and eventing; such a service would be an autonomous information source. Conversely, it is also logically possible for a service to have no state variables (and no eventing) but have actions; such a service might be stateless and cause short-term environmental effects.","Services standardized by UPnP forum working committees are versioned. Every later version of a service is a superset of the previous version, i.e., it includes all actions and state variables exactly as they are defined by earlier versions of the service. The UPnP service type remains the same across all versions of a service whereas the service version must be larger for later versions.","B. UPnP Service Template","The listing above also illustrates the relationship between a UPnP service description and a UPnP service template. As explained above, the UPnP description for a service is written by a UPnP vendor, in XML, following a UPnP service template. A UPnP service template is produced by a UPnP forum working committee as a way to standardize devices.","By appropriate specification of placeholders, the listing above can be either a UPnP service template or a UPnP service description. Recall that some placeholders would be defined by a UPnP forum working committee (underlined), i.e., actions and their parameters, and states and their data type, range, and event characteristics. If these were specified, the listing above would be a UPnP service template, codifying the standard for this type of service. Along with UPnP device templates, UPnP service templates are one of the key deliverables from UPnP forum working committees.","Taking this one step further, the remaining placeholders in the listing above would be specified by a UPnP vendor (bolded), i.e., additional, vendor-specified actions and state variables. If these placeholders were specified (as well as the others), the listing would be a UPnP service description, suitable for effective control of the service within a device.","Put another way, the UPnP service template defines the overall type of service, and each UPnP service description instantiates that template with vendor-specific additions. The first is created by a UPnP forum working committee; the latter, by a UPnP vendor.","C. Service Template Language","The paragraphs above explain UPnP service descriptions and illustrate how one would be instantiated from a UPnP Service Template. Like UPnP device templates, UPnP service templates are produced by UPnP forum working committees, and these templates are derived from the UPnP template language. This template language defines well-formed templates for devices and services. Below is a listing of this language as it pertains to services. The elements it defines are used in UPnP service templates. The elements are bolded and underlined here and in the listing above. Below is where these elements are defined, whereas above is where they are used.","Immediately following this is a brief explanation of the XML Schema elements, attributes, and values used. The reference to XML Schema at the end of the section has further details.",{"@attributes":{"id":"p-0569","num":"0841"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<Schema name=\u201curn:schemas-upnp-org:service:1:0\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"xmlns=\u201curn:schemas-microsoft-com:xml-data\u201d"]},{"entry":[{},"xmlns:dt=\u201curn:schemas-microsoft-com:datatypes\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201cname\u201d content=\u201ctextOnly\u201d dt:type=\u201cstring\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201cdefaultValue\u201d content=\u201ctextOnly\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dt:type=\u201cstring\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201cminimum\u201d content=\u201ctextOnly\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dt:type=\u201cnumber\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201cmaximum\u201d content=\u201ctextOnly\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dt:type=\u201cnumber\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201cstep\u201d content=\u201ctextOnly\u201d dt:type=\u201cnumber\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201callowedValueRange\u201d content=\u201celtOnly\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"model=\u201cclosed\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cminimum\u201d \/>"]},{"entry":[{},"<element type=\u201cmaximum\u201d \/>"]},{"entry":[{},"<element type=\u201cstep\u201d minOccurs=\u201c0\u201d >"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201callowedValue\u201d content=\u201ctextOnly\u201d \/>"]},{"entry":[{},"<ElementType name=\u201callowedValueList\u201d content=\u201celtOnly\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"model=\u201cclosed\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<element type=\u201callowedvalue\u201d minOccurs=\u201c1\u201d maxOccurs=\u201c*\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cdataType\u201d content=\u201ctextOnly\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dt:type=\u201cstring\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201cstateVariable\u201d content=\u201celtOnly\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"model=\u201cclosed\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cname\u201d \/>"]},{"entry":[{},"<element type=\u201cdataType\u201d \/>"]},{"entry":[{},"<element type=\u201cdefaultValue\u201d minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/>"},{"entry":"<group minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d order=\u201cone\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201callowedValueList\u201d \/>"]},{"entry":[{},"<element type=\u201callowedValueRange\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/group>"]},{"entry":[{},"<AttributeType name=\u201csendEvents\u201d \/>"]},{"entry":[{},"<attribute default=\u201cyes\u201d type=\u201csendEvents\u201d required=\u201cno\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cserviceStateTable\u201d content=\u201celtOnly\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"model=\u201cclosed\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<element type=\u201cstateVariaible\u201d minOccurs=\u201c1\u201d maxOccurs=\u201c*\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201crelatedStateVariable\u201d content=\u201ctextOnly\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"dt:type=\u201cstring\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ElementType name=\u201cargument\u201d content=\u201celtonly\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"model=\u201cclosed\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cname\u201d \/>"]},{"entry":[{},"<element type=\u201crelatedStateVariable\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cargumentList\u201d content=\u201celtOnly\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"model=\u201cclosed\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<element type=\u201cargument\u201d minOccurs=\u201c1\u201d maxOccurs=\u201c*\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201caction\u201d content=\u201celtOnly\u201d model=\u201cclosed\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cname\u201d \/>"]},{"entry":[{},"<element type=\u201cargumentList\u201d minOcours=\u201c0\u201d maxOccurs=\u201c*\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ElementType>"]},{"entry":[{},"<ElementType name=\u201cactionList\u201d content=\u201celtOnly\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"model=\u201cclosed\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<element type=\u201caction\u201d minOccurs=\u201c0\u201d maxOccurs=\u201c*\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Element Type>"]},{"entry":[{},"<ElementType name=\u201cscpd\u201d content=\u201celtOnly\u201d model=\u201cclosed\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element type=\u201cserviceStateTable\u201d \/>"]},{"entry":[{},"<element type=\u201cactionList\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ElementType>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"References an attribute in the new, derived language for the purposes of declaring in which elements it may appear. Like any XML element, the AttributeType element may have attributes of its own. Using the required attribute within this element indicates whether the attribute must be present; optional attributes have required =no.","AttributeType","Defines an attribute in the new, derived language. Like any XML element, the AttributeType element may have attributes of its own. Using the name attribute within this element defines the name of the attribute as it will be used in the derived language.","Element","References an element for the purposes of declaring nesting. minOccurs attribute defines minimum number of times the element must occur; default is minOccurs=1; optional elements have minOccurs=0. maxOccurs attribute defines maximum number of times the element must occur; default is maxOccurs=1; elements that can appear one or more times have maxOccurs=*.","ElementType","Defines an element in the new, derived language. name attribute defines element name. dt:type attribute defines the data type for the value of element in the new, derived language. model attribute indicates whether elements in the new, derived language can contain elements not explicitly specified here; when only previously specific elements may be used, model=closed. content attribute indicates what content may contain; elements that contain only other elements have content=eltOnly; elements that contain only strings have content=textOnly.","Group\n\n","D. Augmenting the UPnP Template Language","As is the case with describing devices, some properties of services are difficult to capture in the XML Schema formalism. For services in particular, it is useful to describe the effect actions have on state variables. This procedural information is awkward to describe in a declarative language like XML, so below is a recommended vocabulary for UPnP forum working committees to use when defining service actions or for UPnP vendors to use when they wish to document the effects of extra actions.","ASSIGN (v, a)","Variable v becomes the value of argument a, i.e., v=a. v and a must be the same data type. <why both this and SET?>","DECREMENT (v)","Equivalent to INCREMENT (v) with allowedValueRange step treated as\u2014step.","DECREMENT_BOUNDED (v)","Equivalent to INCREMENT_BOUNDED (v) with allowedValueRange step treated as step.","DECREMENT_WRAP (v)","Equivalent to INCREMENT_WRAP (v) with allowedValueRange step treated as step.","INCREMENT (v)","Variable v becomes the value of v plus allowedValueRange step, i.e., v=v+step. Equivalent to DECREMENT (v) with allowedValueRange step treated as step. v must be either i4 or r8 and must have an allowedValueRange definition.","INCREMENT_BOUNDED (v)","Variable v becomes the value of v plus allowedValueRange step, i.e., v=v+step.","If step is greater than 0 and if v plus step would be greater than allowedValueRange maximum, then v becomes maximum.","If step is less than 0 and if v plus step would be less than allowedValueRange minimum, then v becomes minimum.","Equivalent to DECREMENT_BOUNDED (v) with allowedValueRange step treated as step. v must be either i4 or r8 and must have an allowedValueRange definition.","INCREMENT_WRAP (v, c)","Variable v becomes the value of v plus allowedValueRange step, i.e., v=v+step.","If step is greater than 0, and if v plus step would be greater than allowedValueRange maximum, then v becomes minimum plus step minus 1, i.e., v=minimum+step \u22121; if step is 1, this simplifies to v=minimum.","If step is less than 0 and if v plus step would be less than allowedValueRange minimum, then v becomes maximum plus step plus 1, i.e., v=maximum+step+1; if step is \u22121, this simplifies to v=maximum.","Equivalent to DECREMENT_WRAP (v) with allowedValueRange step treated as step. v must be either i4 or r8 and must have an allowedValueRange definition.","NEXT_STRING_BOUNDED (v)","Variable v becomes the next allowedValue after the current value of v. If v was already the last allowedValue, then v does not change. v must be a string data type and must have an allowedValueList definition.","NEXT_STRING_WRAP (v)","Variable v becomes the next allowedValue after the current value of v. If v was already the last allowedValue, then v becomes the first allowedValue. v must be a string data type and must have an allowedValueList definition.","PREV_STRING_BOUNDED (v)","Variable v becomes the previous allowedValue before the current value of v. If v was already the first allowedValue, then v does not change. v must be a string data type and must have an allowedValueList definition.","PREV_STRING_WRAP (v)","Variable v becomes the previous allowedValue before the current value of v. If v was already the first allowedValue, then v becomes the last allowedValue. v must be a string data type and must have an allowedValueList definition.","SET (v, c)","Variable v becomes the value of constant c, i.e., v=c. v and c must be the same data type.","TOGGLE (v)","Variable v becomes the boolean negation of the value of v, i.e., v=NOT v. v must be boolean.","E. Retrieving a Service Description","As explained above, after a control point has discovered a device and has retrieved a device description, it may need to learn more about the services provided by the device. Nearly identical to the process for retrieving a device description, a control point may retrieve a service description using a description URL in the description (vs. discovery) message.","Conclusion","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 1 and 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4","b":"3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6","b":"3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8","b":"3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 9","FIG. 8"],"b":"3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10","b":"8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 11 and 12","b":"3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13","b":"3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14","b":"3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 15","b":"3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 16","b":"3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 17","b":"3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 18","b":["19","20","3"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 21 and 22","b":"3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 23","b":"3"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 24","b":"23"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 25","b":"3"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 26","FIG. 25"],"b":"3"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 27","FIG. 26"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 28","FIG. 26"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 29","FIG. 26"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 30","b":"3"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 31","FIG. 26"],"b":["25","3"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 32 through 44","b":"10"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 45-47"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 48-51"}]},"DETDESC":[{},{}]}
