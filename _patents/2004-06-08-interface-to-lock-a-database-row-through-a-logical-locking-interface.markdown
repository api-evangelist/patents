---
title: Interface to lock a database row through a logical locking interface
abstract: A method is described that comprises receiving at a first interface a request to lock a row of data from a database table. The method also comprises formatting the request into a format suitable for reception by a second interface. The second interface is an interface to a logical locking function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707194&OS=07707194&RS=07707194
owner: SAP AG
number: 07707194
owner_city: Walldorf
owner_country: DE
publication_date: 20040608
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The field of invention relates generally to the software arts; and, more specifically, to an interface to lock a database row through a logical locking interface.","Database Tables","A database typically contains a catalog that describes its various elements. The catalog divides the database into sub-databases known as schemas. Within each schema are tables.  shows an exemplary database table . A database table consists of rows C-Cand columns R-R. The columns of a table are accessed and identified by name. For example, the name for column Cmight be \u201cPhone#\u201d and the name for column Cmight be \u201cSocial Security Number\u201d.","Each column typically has a defined data type where the value for the column in each row is supposed to be of the column's defined data type (or a null). Thus, continuing with the example above, the data type for the \u201cPhone#\u201d column Cmight be a ten digit string whereas the data type for the \u201cSocial Security Number\u201d column Cmight be a nine digit string. Each value of column Cwould therefore be a ten digit number or a null value; and, likewise each value of column Cwould be a nine digit string or a null value.","The primary key for a table is a designated set of one or more columns whose values are unique for each table row. As a consequence, the primary key can be used to identify a particular row. For example, assume that the table described above contained information concerning certain individuals (e.g., their salary, tax records, investment information, etc.) where a separate row was used to hold all of the data for each individual. Here, given that there exists some likelihood that two different individuals might have the same name but practically no likelihood that two different individuals will have the same phone number and social security number, columns Cand Ccould be used as the primary key for the table.","That is, presenting an individual's phone number and social security number as input information to the table  would be sufficient to uniquely identify the row in the table where the individual's data is recorded. As such, a row in any table within an entire database can be uniquely defined by: 1) the identity of the table (i.e., the Table ID); and, 2) the row's primary key values.","Data Dictionaries and Database Software\/Drivers","In the realm of enterprise software, certain software functions have evolved into significant architectural components. Two of these, the data dictionary  and the SQL based database interface  are shown in . A database dictionary  provides as an output  a description of the organization of a database. Included in this information would be, for example, the number of columns in a particular table, the number of rows in a particular table, which columns of the table are the primary keys, etc.","The output  is provided in response to some indication of the information desired.  shows a particular data dictionary example that provides the structure of a table (which, for example, might include a description of the column strategy C-Cas depicted in ) in response to an input that identifies the table (i.e., the Table ID).","The database dictionary output information  is typically used to determine the format for a Structured Query Language (SQL) database command  that is provided to an SQL based database interface  (also referred to in the art as \u201cdatabase software\u201d or a \u201cdatabase driver\u201d). An SQL based database interface  is the communicative focal point between a database and the software users (e.g., applications, transactions, sessions, etc.) that use its information.","Frequently, an SQL command is a read that requests information from the database  or a write that seeks to write new information into the database . The SQL based database interface  provides a response  to a read in the form of the data desired and to a write, typically, in the form of an acknowledgement that the write was successful. When information within a database table is to be accessed, the SQL command used to trigger the access may be structured in a way that resembles the table's organization. Here, the information  provided by a data dictionary  may be used to help build the SQL command .","Logical Locking","Because two different users may simultaneously desire the same data, most database management schemes permit database data to be locked. Traditionally, locking has been \u201cphysical\u201d in the sense that the locking is performed by the database itself.","In contrast to physical locking, logical locking is a technique in which locking is controlled at a higher level of abstraction from the physical database(s). For example, according to one type of implementation, the logical locking function is executed upon a \u201clock server\u201d that controls database locking activity separately from one or more database servers. By controlling locking in a remote fashion relative to the database(s), inefficiencies associated with physical locking may be avoided.","For example, logical locking should allow for better cohesiveness of software that depends upon databases having disparate physical locking characteristics (e.g., where a first database is able to lock a single row and another database is only able to lock a group of rows). The abstract remoteness of logical locking (with respect to physical locking) may also permit items other than database entries to be locked. For example, in an object-oriented environment, data objects having no relationship to any database could conceivably be locked (as well as database entries as described above). Moreover complex locking relationships may be implemented. For example, if an object that represents \u201can order\u201d is to be locked, all other objects that represent items in the order may be automatically locked in response.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3","b":"301"},"As described in more detail below, the information that is to be locked is defined at the logical locking interface  along with a request to lock it. The functionality behind the logical locking interface  (i.e., the software function that the logical locking interface  serves as a user interface for) analyzes each lock request and grants\/rejects each lock request for a data item based upon the non-existence\/existence of a lock for the same item of data.","The logical locking interface  of  has a name input  and an argument input . The name input  identifies \u201cthe owner\u201d of the item of data for which a lock is being requested. The argument input  identifies the item of data that a lock is being requested for. The functionality behind the locking interface is \u201cname based\u201d in the sense that every data item that is capable of being locked is assumed to belong to an owner having a specific name. For example, if a data field within an object is to be locked, the name input  would identify the object and the argument input would identify the data field. In the case of a database row and column pair, the name input  would identify the table and the argument input  would identify the row and column.","The logical locking interface  also has a mode input , a lifetime input , a timeout input , and an asynchronous input . Each of these are described in detail immediately below.","The \u201cmode\u201d input  can specify any of the following: 1) SHARED for a read lock; 2) EXCLUSIVE for a write lock; 3) EXCLUSIVE_NON_CUMULATIVE for a write lock; 4) OPTIMISTIC for a read lock; or, 5) OPTIMISTIC_TO_EXCLUSIVE for a write lock. A description of each follows immediately below.","If a data item is experiencing a SHARED read lock by a user, other users can be given a read lock to the same data item\u2014but\u2014no user will be given a write lock to the data item. If a data item is experiencing an EXCLUSIVE write lock by a user other users are not given a read lock or a write lock to the data item. Cumulative means that, if a user requests an EXCLUSIVE lock for a data item that the user has already been granted an EXCLUSIVE write lock for, no \u201cexception\u201d will be thrown. NON CUMULATIVE means that an exception will be thrown if a user requests an EXCLUSIVE lock for a data item that the user has already received an EXCLUSIVE lock for.","An exception is a formal rejection to a lock request. Exceptions help to avoid deadlock situations. If two applications request exclusive locks for the same two data items in a different order (e.g., a first application requests item A and then item B and second application first requests item B and then item A), there might be a deadlock of these two applications. Deadlocked applications cannot proceed because, in order to proceed, they each simultaneously need access to the data that is locked by the other. In a deadlock situation, one of these applications could be stopped automatically by the application server or manually by an administrator.","To avoid such a situation, an exception is thrown if a read or write lock request cannot be granted. In response to the receiving of an exception from the logical locking interface (as a response to a read or write lock request), a user may again retry the lock request again after a short time. If the lock is still not granted, the user can retry repeatedly.","According to the OPTIMISTIC read mode, a read of the data is permitted but it is not guaranteed to be consistent with the database because other users may also be reading the same data with the intent to update (i.e., change) it. In OPTIMISTIC read locking, the first user to update the contested data \u201cwins\u201d because only that user is guaranteed to be consistent with the database. As such, the first \u201cwinning\u201d user must have \u201cpropagated\u201d the original OPTIMISTIC read into an EXCLUSIVE write. The OPTIMISTIC_TO_EXCLUSIVE mode is used for this purpose. That is, the OPTIMISTIC_TO_EXCLUSIVE mode is used when an attempt is made to update a data element that was read optimistically.","The \u201clifetime\u201d input  specifies whether the data item is to be locked for the lifetime of a communication session; or, a transaction (local or distributed). The timeout input  specifies the amount of time that the logical locking interface will repeatedly try to lock a data item that, so far, has been locked by another user. Once this foreign lock is released, the lock is granted to the calling user. If the time amount given by the timeout parameter has been exceeded and the lock has not been granted to the calling user, an exception will be thrown. Therefore, a lock request call to the logical locking interface blocks the calling user until the lock is granted or the timeout time has been exceeded.","Although only locking has been discussed above, treatment as to the manner in which data items are \u201cunlocked\u201d can also be specified through the interface . According to one implementation, if the asynchronous input  is set to \u201cfalse\u201d, locks for a transaction or user session are released synchronously (e.g., a lock server blocks until all locks are released). By asserting the asynchronous input  to \u201ctrue\u201d asynchronous releases are attempted (but cannot be guaranteed).","A problem is that because the logical locking function behind the interface  is geared toward \u201csomething more\u201d than traditional physical locking, detrimental effects may result if the logical locking function is used to lock an entire row of data. For example, if different users specify the row columns according to different syntaxes, the functionality behind the interface  might \u201cmiss\u201d the conflict and permit overlapping requests to access the same data.","A method is described that comprises receiving at a first interface a request to lock a row of data from a database table. The method also comprises formatting the request into a format suitable for reception by a second interface. The second interface is an interface to a logical locking function.","Formatting requests to lock an entire row of a database table into a standard format for submission to a logical locking interface should help the functionality behind the logical locking interface service such requests.  shows an architecture in which another interface (the table row locking interface)  used to format requests to lock an entire row of database data is positioned \u201con top of\u201d a logical locking interface .","The table row locking interface  formats user requests to lock a row of data from a database table into a standard format that allows the functionality behind the logical locking interface  to better handle such requests. According to the stacked interface structure observed in , the table row locking interface  also has mode , lifetime , timeout and asynchronous inputs. Moreover, the embodiment of  shows that these inputs through are respective \u201cstraight-throughs\u201d to the mode , lifetime , timeout and asynchronous inputs of the logical locking interface .","That is, an input parameter received at any of inputs through of the table row locking interface is simply passed through to inputs through , respectively, of the logical locking interface . In an embodiment, the mode , lifetime , timeout and asynchronous inputs of the logical locking interface  of  are the same as those described above with respect to . As such, the structure of  indicates that the table row locking interface  accepts inputs for (and the functionality behind the table row locking interface  supports) the same functions described with respect to inputs  through  of .","The table row locking interface  also formats  an identification of the table  having the row to be locked into a name parameter input  for presentation to the logical locking interface ; and, formats  primary key values  that identify the row to be locked into an argument parameter input  for presentation to the logical locking interface.  discusses an embodiment of the name formatting method  and  discusses an embodiment of the argument formatting method . Each of these are discussed in more detail immediately below.","According to the depiction of , the name parameter that is formed by the name formatting process has three components: 1) a first component that is a prefix  that signifies to the logical locking interface  that the request is being issued from the table row locking interface ; 2) a middle component that is an identification of the table ; and, 3) a last component that is an identification  of a connection to the database having the table whose row is to be locked.","Use of the prefix  helps to avoid conflicts with other users of the logical locking interface. Specifically, it informs the logical locking interface  that the response to the request should be directed to the table row locking interface . In turn, the table row locking interface relays the response to the user that presented the request to the table row locking interface.","The table identification  identifies the table having the row to be locked. The connection identification  identifies the database schema having the table whose row is to be locked. This information is included in case there exists two tables (in different schema) having the same name. As such, inclusion of the connection identification  The connection identification  is retrieved from a SQL based database interface .","In an embodiment, the size of the name input  to the logical locking interface is of a fixed length. As such, in order to fit the information of all three components , ,  into the name input , rather than using the full connection id value, a Base64 representation of the hash code of the full connection identification for the given connection is used for the last component. In a further embodiment, the size of each of the three components within the name input  is fixed. In some cases the full identification of the table is of a larger size than the fixed space reserved for it in the middle of the name input . If so, a Base64 representation of the hash code of the portion of the table information that does not fit in this fixed space is placed in a region of the name input  that resides at the end of this fixed space.","According to the depiction of , the argument  is formatted by concatenating the values of the targeted row's primary key (if the table row's primary key of formed from more than one of the table's column). As an example, if the targeted row is assumed to have X columns whose primary key corresponds to columns 3 and 6 (e.g., as described in the background with respect to ), the information provided to the logical locking interface  is simply an ordered listing of the primary key values PK, PK(e.g., a value from a particular column is listed before all values listed from columns on its \u201cright\u201d).","In an embodiment, the user provides the primary key column names along with the primary key values PK, PK. Information describing the structure of the table row to be locked is provided by a data dictionary  (e.g., in response to the identification of the table  that has the targeted row). From this information, primary key column name is correlated to table column position so that the proper order of primary key values can be determined. In a further embodiment, similar to the name parameter, the size of the argument parameter is fixed resulting in the use of hash codes for primary key values that are too large to fit into the argument parameter. In one embodiment, the argument is 150 characters long; and, if the primary key values are sufficient to exceed this length; then, the portion extending beyond position  is used to generate a Base64 hash code that fills spaces 145 through 150.","More than one row may be locked by submitting substantive values for less than all of the primary key columns and null values for the remaining primary key values. Such a submission will be interpreted by the logical locking interface as a request to lock all rows having data that matches the substantive primary key values (i.e., less than all of the primary key columns can be used to identify a group of rows rather than a single row).","It is important to emphasize that the processes described above may be executed upon a computing system such as a server. The server may be Java 2 Enterprise Edition (\u201cJ2EE\u201d) server nodes which support Enterprise Java Bean (\u201cEJB\u201d) components and EJB containers (at the business layer) and Servlets and Java Server Pages (\u201cJSP\u201d) (at the presentation layer). Of course, to the extent possible, other embodiments may be implemented in the context of various different software platforms including, by way of example, Microsoft .NET, Windows\/NT, Microsoft Transaction Server (MTS), the Advanced Business Application Programming (\u201cABAP\u201d) platforms developed by SAP AG and comparable platforms.","Processes taught by the discussion above may be performed with program code such as machine-executable instructions which cause a machine (such as a \u201cvirtual machine\u201d, general-purpose processor or special-purpose processor) to perform certain functions. Alternatively, these functions may be performed by specific hardware components that contain hardwired logic for performing the functions, or by any combination of programmed computer components and custom hardware components.","An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as, but is not limited to, one or more memories (e.g., one or more flash memories, random access memories (static, dynamic or other)), optical disks, CD-ROMs, DVD ROMs, EPROMs, EEPROMs, magnetic or optical cards or other type of machine-readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a propagation medium (e.g., via a communication link (e.g., a network connection)).",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 7"],"b":["700","702","705","703","705","706"]},"It is believed that processes taught by the discussion above can be practiced within various software environments such as, for example, object-oriented and non-object-oriented programming environments, Java based environments (such as a Java 2 Enterprise Edition (J2EE) environment or environments defined by other releases of the Java standard), or other environments (e.g., a .NET environment, a Windows\/NT environment each provided by Microsoft Corporation).","In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"FIGURES","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
