---
title: Method and system for enforcing a security policy via a security virtual machine
abstract: A method and system for enforcing a security policy encoded in an instruction set of a security virtual machine is provided. A security system provides a security virtual machine that executes security programs expressed in the instruction set of the security virtual machine. The security system stores the security program in an instruction store of the security virtual machine. When a security enforcement event occurs, the security virtual machine executes the instructions of its instruction store using data of the security enforcement event to enforce the security policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607299&OS=08607299&RS=08607299
owner: Microsoft Corporation
number: 08607299
owner_city: Redmond
owner_country: US
publication_date: 20040427
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The described technology relates generally to enforcing a security policy to block an undesired behavior by a computer program.","Software systems, such as operating systems and file systems, provide application programming interfaces through which application programs can access the services of the software systems. An application program interface may provide functions with parameters for performing a specified service. For example, a file system may have a function (also referred to as a \u201csystem call\u201d) for creating a file. That function may have parameters that specify a file location, file name, file type, file size, and so on of the file to be created. When an application program invokes a function, it passes actual parameters corresponding to the formal parameters defined for the function. The function may perform certain checks on the actual parameters to ensure that they are valid. For example, the create file function may ensure that the specified file type is valid. If a parameter is not valid, then the function returns an error to the application program.","Software systems can be extremely complex for a variety of reasons. A software system may seek to be backward compatible with all prior versions of that software system. In such a case, the software system may need to support all the functions of the application program interface of the prior versions. Since new functions are typically added with each version, the number of functions can be very large and their interactions complex. Some software systems may also include software components developed by different divisions of the same company or by different companies. The interactions of these components can also be quite complex.","It has become increasingly important for software systems to ensure that their application programming interfaces are not vulnerable to either inadvertent misuse or intentional attack. One vulnerability of a software system may be through the parameters of its application programming interface. When the functions of prior versions are combined with those of newer versions, and when components from different developers are integrated, the existing parameter validation performed by the functions may not be sufficient to ensure correct behavior of the functions. For example, an application programming interface of a file system developed by one company may be integrated with a file server developed by another company. The maximum file size parameter of the application programming interface may be larger than that supported by the file server. In such a case, a file size that is acceptable to the application programming interface may cause problems with the file server. As another example, a system administrator may want to limit the maximum file size even further, but the system administrator may have no available means to enforce that limitation.","It would be desirable to have a mechanism for enforcing security policies and, in particular, security policies that specify valid conditions for parameters of application program interfaces.","A method and system for enforcing a security policy is provided by a security virtual machine. The security virtual machine includes a processor engine, an instruction store, a data store, and an instruction pointer. The security virtual engine executes a security program specified using an intermediate language that is compiled from a high-level language representation of the security policy. The security program is loaded into the instruction store for execution. When a security enforcement event occurs, such as the invoking of a function of an application programming interface, data from the security enforcement event is stored in the data store and the processor engine starts fetching and executing the instructions for the security program from the instruction store. The instructions specify actions to be taken to enforce the security policy based on the data of the security enforcement event.","A method and system in a computer system for enforcing a security policy encoded in an instruction set of a security virtual machine is provided. In one embodiment, a security system provides a security virtual machine that executes security programs expressed in the instruction set (i.e., intermediate language) of the security virtual machine. The security system may include a compiler that receives a security policy represented in a high-level language and generates a security program that is a representation of the security policy in the intermediate language of the security virtual machine. The security system stores the security program in an instruction store of the security virtual machine. When a security enforcement event occurs (i.e., an action that needs to be checked to ensure it complies with the security policy), the security virtual machine executes the instructions for the security program from its instruction store using data from the security enforcement event to enforce the security policy. If the security enforcement event indicates that an attempt is being made to perform an undesired behavior (e.g., an action that might exploit a vulnerability of an operating system), then the security program may block the attempt. In one embodiment, the security virtual machine of the security system executes in kernel mode of an operating system to identify and prevent attempts by applications and external systems to perform an undesired behavior for the computer system on which the security system is executing.","In one embodiment, the security system identifies when parameters of a system call issued by an application to a system service (e.g., file system and memory management system) may lead to an undesired behavior. The security policy contains rules that each specify a condition based on parameters of the system call and an action to take when the condition is satisfied. For example, the condition of a rule may be satisfied when a file create system call is issued with a parameter specifying a file size greater than 1 GB. The action associated with that rule may be to block the creation of the file. The high-level language may be an XML-based language, and each rule may be identified by rule, condition, and action tags. When the rules of the security policy represented in the high-level language are compiled, each rule is translated into instructions of the intermediate language to form the security program. For example, a rule may be translated into a series of instructions. One that compares the system call to a value indicating that the function is \u201cfile create,\u201d one that compares a file size parameter to a constant with the value of 1 GB, and one that outputs an indication to block the system call.","In one embodiment, the security virtual machine includes a processor engine, an instruction store, an instruction pointer, and a data store. When initializing the security virtual machine to enforce the security policy, the security system loads the instruction store with a security program that implements the security policy. The security system also loads data of the security program into the data store. When a system call is received, the security system stores the parameters of the system call (including a value that identifies the system call) into the data store. The security system may also store process control information of the process that issued the system call into the data store. The security system initializes the instruction pointer to point to a start instruction of the security program. The processor engine starts the security program by fetching and executing the start instruction pointed to by the instruction pointer. Each instruction that is executed modifies the instruction pointer to point to the next instruction to be executed. The instructions reference the data of the data store to enforce the security policy. The execution of the security program generates an output action set that specifies the actions (e.g., block system call) that are to be taken to enforce the security policy.","In one embodiment, the security policy may comprise a sub-policy for each system call whose parameters are to be checked. The security system may compile each sub-policy into a separate security sub-program that can be loaded into the instruction store independently of the other security sub-programs. Each sub-policy may correspond to the security enforcement for a single system call. The security system may maintain a mapping of each system call to a start instruction pointer in the instruction store and a start data pointer to the data in the data store of the corresponding security sub-program. When enforcing the security policy on a system call, the security system initializes the instruction pointer to the corresponding start instruction pointer and the data pointer to the corresponding start data pointer. The security sub-programs can use instruction and data reference techniques that are relative to the instruction pointer and the data pointer. In this way, the instructions and data of each security sub-program are relocatable. In the following description, a single security program handles all system calls by decoding each system call and jumping to the appropriate instruction location to process that system call. One skilled in the art will appreciate that this described system can be adapted to support a sub-program for each system call.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","120","102","103","121","122","125","126","127","128","129","101"]},"The computing device on which the security system is implemented may include a central processing unit, memory, input devices (e.g., keyboard and pointing devices), output devices (e.g., display devices), and storage devices (e.g., disk drives). The memory and storage devices are computer-readable media that may contain instructions that implement the security system. In addition, the data structures and message structures may be stored or transmitted via a data transmission medium, such as a signal on a communications link. Various communications links may be used, such as the Internet, a local area network, a wide area network, or a point-to-point dial-up connection.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},"The security system may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, and so on that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["201","211","221","231","241","202","203","222","223","224"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["310","320","330","340","350","311","312","321","322"]},"Tables 1 and 2 illustrate the instructions of the security virtual machine in one embodiment. The instructions can be classified as those that perform a test on data and those that do not. Table 1 illustrates the nontest instructions.",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Operation Code","Description","Parameters"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HALT","Stops processing","p2: status code"]},{"entry":["ACTION","Adds the action code to the output","p2: action code"]},{"entry":[{},"action set"]},{"entry":["JMP","Jumps to new instruction","p2: jump offset from"]},{"entry":[{},{},"current location"]},{"entry":["RESET","Clears the output action set","p2: ignored"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Table 2 illustrates the test instructions. The pattern instruction may define a regular expression for comparing two strings, which is useful for wildcard-type comparisons of file names (e.g., \u201c*.DAT\u201d).",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Operation Code","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TEST","boolean: test if p2 is TRUE"]},{"entry":[{},"CMPEQ","integer: compare p1==p2"]},{"entry":[{},"CMPNE","integer: compare p1!=p2"]},{"entry":[{},"CMPLT","integer: compare p1<p2"]},{"entry":[{},"CMPLE","integer: compare p1<=p2"]},{"entry":[{},"CMPGE","integer: compare p1>=p2"]},{"entry":[{},"CMPGT","integer: compare p1>p2"]},{"entry":[{},"BLOB_MATCH","blob: p1==p2"]},{"entry":[{},"STRING_MATCH","string: p1==p2"]},{"entry":[{},"PATTERN_MATCH","string: p1 matches p2"]},{"entry":[{},{},"wildcard-pattern"]},{"entry":[{},"BLOB_MEMBEROF","blob: p1==p2[i]"]},{"entry":[{},"INT_MEMBEROF","integer: p1==p2[i]"]},{"entry":[{},"STRING_MEMBEROF","string: p1==p2[i]"]},{"entry":[{},"PATTERN_MEMBEROF","string: p1 matches p2[i]"]},{"entry":[{},{},"wildcard-pattern"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["401","402","403","404","405"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5","b":["501","502","504","502","503","505","504","504","502","505","507","505","506","508","507","507","505","508"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 6","b":["601","607","601","602","603","604","608","609","604","605","607","606","606","601","607","601","608","601","609"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7","b":["701","708","701","703","702","702","709","703","704","705","704","709","705","706","707","706","709","707","708","708","709","709","714","709","710","711","710","711","712","713","712","713","714","714"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 8","b":["801","803","804","806"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 9","b":"901"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 10","b":["1001","1003","1002","1002","1003","1006","1003","1004","1008","1005","1005","1006","1003","1007","1007","1008"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 11","b":["1101","1102","1103","1102","1107","1103","1104","1105","1104","1107","1105","1106","1106","1107"]},"One skilled in the art will appreciate that although specific embodiments of the security system have been described herein for purposes of illustration, various modifications may be made without deviating from the spirit and scope of the invention. One skilled in the art will appreciate that a security system using a security virtual machine can be used to enforce a wide variety of security policies. For example, the security system can be used to enforce security of messages received via a network, transactions received by a transaction processor, and more generally any application that provides an application programming interface. Accordingly, the invention is not limited except by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
