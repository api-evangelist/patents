---
title: Centralized application package distribution
abstract: A package installer identifies a utility tool that is capable of opening a file attempted by a user based on metadata downloaded from a remote server, where the metadata includes information identifying one or more packages available for download from the remote server, including mime types of files that the one or more packages support. A graphical user interface (GUI) is displayed to the user prompting whether the user desires to install the identified utility tool. In response to an input from the user via the GUI, the package installer downloads a package associated with the identified utility tool from the remote server for local installation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949737&OS=08949737&RS=08949737
owner: Red Hat, Inc.
number: 08949737
owner_city: Raleigh
owner_country: US
publication_date: 20091028
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the invention relate generally to the field of software application distribution; and more particularly, to centralized application package distribution.","People often send other users documents and images. These files are often of different formats, as a user could send a Microsoft Word file (.doc file) or a GNU image manipulation program (GIMP) image (.xcf) via email, instant messaging or even on physical media.","There is a problem in a desktop such as Linux desktop, where people send files that are not recognized by a remote user. This might happen if a user sent a remote user a \u201c.xcf\u201d formatted image, when GIMP was not installed at the remote user's machine. In this case the remote user would get the \u201cfile not recognized\u201d dialog, and would be left to search for a program manually to open this file. This requires for the remote user to know which program to use to open the file.","Conventional methods typically will prompt a user whether the user wants to search, for example, over the Internet, for such a program to open the file. However, the program to open the file may be distributed in multiple sites having multiple versions. The user has to know which version is the most appropriate for opening the file.","In the following description, numerous details are set forth to provide a more thorough explanation of the embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring embodiments of the present invention.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment.","When a package is built, each application has a desktop file created as a standard part of the build process. According to one embodiment, by parsing a file for mime-type matches, each mime type is added as a virtual provide to the built package. This virtual provide is added to the distribution metadata which allows remote programs to query what package supports a given mime type. In Linux this is done using a WhatProvides( ) method, typically via a package manager such as PackageKit available from Red Hat, Inc. of Raleigh, N.C. An example query would be WhatProvides (\u201cMimeHandler(application\/pdf)\u201d) which would return a list of all the not-installed packages that would be able to open this file format. By providing a tool to extract the mime data at package build time, many of virtual provides can be automatically added just by rebuilding all the packages in a repository on a storage device.","A mime type is a computer readable file type. For example, a \u201c.pdf\u201d file is the mime type of portable document format (PDF) files. A mime type can be extracted from a file even if the file extension is incorrect (.doc is mistyped as .dpc for example) and usually a higher level of file system logic is used to do this content sniffing. In the Linux desktop GNU virtual file system (GVFS) provides a mime-type as an attribute on a GFile instance.","A desktop file is a file that is installed on the computer that describes the application (localized name) and also tells the computer what mime-types it supports. A virtual provide is a little piece of data about the package that resides in the distribution metadata, and thus the package does not have to be installed to query this data.","By integrating this functionality into a file handler (in the case of GNOME, nautilus) or as a separate tool accessible to the file handler, when a user downloads a file of unknown format, the file handler tries to open the file and provides a list of applications the user can install which is capable of opening the newly downloaded file. After the packages are installed, the file handler uses the installed application to open the downloaded file. In this way a user can send files to remote users knowing that they will be able to open the contents.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","101","102","101","102","101","103","103"]},"In one embodiment, server  includes, among others, a package builder  and metadata manager . Package builder  is configured to build (e.g., compile and\/or link) and manage packages  that can be downloaded by client  for installation at client . A package is a single file that is a compressed tree of the files (e.g., binary files), which are compiled from a variety of source codes of a variety of programming languages. Once a package is built, according to one embodiment, the metadata manager  is configured to scan each file contained in the package and add certain metadata to the package. The added metadata includes information indicating a particular application program that should be used to open the associated file, such as, for example, \u201cpackage foo needs package OpenOffice\u2122 to work correctly\u201d or \u201cpackage foo can open text files\u201d, etc.","The added metadata is typically added to a header of the package, such as, for example, the package file  as shown in . Referring to , package file  includes a file header  and body . File header  includes metadata  indicating that the file having the file header  requires the OpenOffice\u2122 with at least version 2.0.0 in order to open the file. The file header  also includes metadata  indicating the mime type associated with the file. File body  includes all the individual files contained in the package . As a result, when a file hander attempts to open the corresponding file, the file handler can determine the mime type of the package and knows which application program is required to open the package.","Referring back to , the package  can then be stored in a storage device associated with server  as a part of packages . In addition, metadata manager  is configured to scan each of the packages  and to extract all the metadata from the packages  (e.g., \u201crequires: openoffice>2.0.0\u201d) and all that data is saved to a metadata as a part of metadata  in a storage device. A metadata may be an extensible markup language (XML) compatible data file. This metadata file is relatively small compared to the size of the packages as it does not contain all the file content data; it just contains all the text metadata. The metadata file is compressed and the file is saved in a storage device as a part of metadata .","Client  includes one or more applications  communicatively coupled to a file handler , which provides an application programming interface (API) to access one or more files . When application  attempts to open a file via file handler , if file handler  cannot recognize the file that is being opened, the file handler  invokes a package installer  to download one or more packages  and\/or the associated metadata  from server  over network . The packages  include an application program or utility tool that is capable of opening the file.","According to one embodiment, when application  attempts to open a file that is not recognizable, package installer  is invoked, for example, to \u201cfind me all packages that provide mime-handler (\u2018plain\/text\u2019)\u201d. The package installer  can download the newest metadata file  very quickly from server  because the metadata is relatively small in size. The package installer  then knows about every package (e.g., packages ) available for installation from server . Package installer  can scan the metadata looking for matches, and return a list to the user of the packages that match the search (e.g., available for installation for opening the unrecognized file).","For example, when a user attempts to open a media file, the package installer determines that an additional media player codec or plug-in is needed based on the metadata associated with the media file. The package installer (in this example, a codec installer) displays, as shown in , a graphical user interface (GUI) to the user, wherein GUI  includes information identifying a particularly application program, in this example, a Windows\u2122 Media Video 9 decoder is needed. According to one embodiment, at least a portion of the information displayed may be extracted from the metadata.","Similarly, when a user attempts to open a document with an unknown font, the font installer (as a part of package installer) displays a GUI  of  indicating that an additional font needs to be installed.","In response to the GUI displayed, referring back to , if the user actually wants to install identified application program or font, the package installer has to match the name of the application program or font to a remote filename using the previously downloaded metadata (e.g., metadata ), and then download the package itself (e.g., packages ). The user can then install the local file at client . In this way, the package installer can automatically locate the latest or a specific version of required application program or font files from server  and install them at client . As a result, a user of client  does not need to know which application program is needed for opening a particular file and does not need to conduct a search over the network.","The metadata  stored at the local system can be periodically updated by downloading the newest metadata  from server  onto the local client , and then search through it to find if any of the remote packages are newer than the ones that have been installed locally. In this way the metadata  is kept up to date. Since the packages and metadata are distributed by a centralized server or servers , the client  can be sure that the packages downloaded and installed are the latest versions.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","400","104","105","401","402","403","404","405"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 5","FIG. 1","FIG. 5"],"b":["500","500","109","501","502","503","504","505"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6","b":"800"},"The exemplary computer system  includes a processor , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processor  represents one or more general-purpose processors such as a microprocessor, a central processing unit, or the like. More particularly, the processor may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processor  may also be one or more special-purpose processors such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processor  is configured to execute the instructions  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a computer-accessible storage medium  (also known as a machine-readable storage medium or a computer-readable medium) on which is stored one or more sets of instructions or software (e.g., packaging tool , which may be implemented as part of package installer , package builder , and\/or metadata manager ) embodying any one or more of the methodologies or functions described herein. The packaging tool  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-accessible storage media. The packaging tool  may further be transmitted or received over a network via the network interface device .","The computer-readable storage medium  may also be used to store the packaging tool  persistently. While the computer-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The terms \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","The modules , components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the modules  can be implemented as firmware or functional circuitry within hardware devices. Further, the modules  can be implemented in any combination hardware devices and software components.","In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cidentifying\u201d or \u201cdisplaying\u201d or \u201cdownloading\u201d or \u201creceiving\u201d or \u201cinvoking\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices), etc.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description above. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.","In the foregoing specification, embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of embodiments of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
