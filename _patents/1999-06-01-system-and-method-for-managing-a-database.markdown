---
title: System and method for managing a database
abstract: A system and a method for managing a database. The system includes a database manager for storing and retrieving data records from a database. In one embodiment, the database includes a database data structure that is divided into a plurality of sections. Each of the sections holds is configured to hold zero or more data records. During a store operation of a data record, a key that is associated with the data record is used to identify one of the sections. The system determines whether the identified section has sufficient space to contain the identified data record. If the section has insufficient space, the system deletes data records according to a ranking function. In one embodiment of the invention, the ranking function is a least recently used algorithm. The system of the present invention does not have any inter-dependency between the data records that are stored within the database. Furthermore, in one embodiment of the invention, the system creates the database using sections that are the same size that is used by a caching system to store and retrieve pages from mass storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07389305&OS=07389305&RS=07389305
owner: Fair Isaac Corporation
number: 07389305
owner_city: San Diego
owner_country: US
publication_date: 19990601
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Method of Operation"],"p":["1. Field of the Invention","The field of the invention relates to database systems. More particularly, the present invention relates to a system and method for managing a database.","2. Description of the Related Technology","As the use of the Internet has become more and more popular, various database systems have been developed to track information that is associated with each of the users at an Internet site. These database systems can store demographic information, a list of user preferences, or other information about each of the users of a particular site.","One problem that has been encountered by these database systems is that it is time consuming to access and search the data once it has been accumulated. Often, database systems consist of millions of items of data which are permanently stored on a mass storage medium. However, not all of the data is \u201cfresh\u201d, or, in other words, relate to current activity of the user. Therefore, various trash management systems have been developed to eliminate old or non-useful data from the database system. One system that has attempted to solve trash management is described in U.S. Pat. No. 5,121,495 to Nemes. Nemes uses a hashing scheme whereby each of the data records in a database has an expiration date. Once a data record has expired, the Nemes system removes the record from the database. However, the Nemes system fails once database is completely full with unexpired data.","Another problem that has been identified is that many databases are designed such that information on one page references information on another one of the pages. This often occurs in tree, chain, or indirect systems. In these systems, if one page is successfully written and an attempt to write a dependent page fails, a corruption is introduced into the database.","Therefore, there is a need for a system that is efficient in handling large numbers of transactions. Furthermore, there is a need for a system that does not introduce interdependencies between each of the pages of the database. Thus, if one of the pages is contaminated, the other pages remain unaffected by the contamination.","One embodiment of the invention includes a method of managing a database that includes a plurality of sections, each of the sections capable of holding data records, the method comprising receiving a new data record and a key that is associated with the new data record, identifying one of the sections based upon the associated key of the new data record, deleting one or more data records from the identified section if the identified section does not have sufficient space to contain the new data record, and storing the new data record in the identified section.","Another embodiment of the invention includes a program storage device storing instruction that when executed perform the steps comprising receiving one or more new data records, each of the new data records having an associated key, identifying a section from a plurality of sections, the identifying based upon the associated key of the new data record, deleting one or more data records from the identified section if the identified section does not have sufficient space to contain the new data record, and storing the new data record in the identified section.","Yet another embodiment of the invention includes a database system for managing data records, the system including: a plurality of sections, each of the sections is about the same size that is used by an operating system to transfer data between a primary storage and a secondary storage; and a control program which receives a request for the storage of a data record, the control program selecting one of the sections based upon a key and storing the data record in the selected section.","Yet another embodiment of the invention includes a database system for managing information items, the system including a plurality of sections, and a control program which receives a request for the storage of a data record, the control program selecting one of the sections and storing the data record in the selected section, the control program determining whether the selected section contains sufficient unused space to hold the data record, and if the section does not have sufficient space, the control program removing selected data records according to a ranking function","Yet another embodiment of the invention includes a system for managing a database that includes a plurality of sections, each of the sections capable of holding data records, the method comprising means for receiving one or more new data records, each of the new data records having an associated key, means for identifying one of the sections based upon the associated key of the new data record, means for deleting one or more data records from the identified section if the identified section does not have sufficient space to contain the new data record, and means storing the new data record in the identified section.","Yet another embodiment of the invention includes a database system for managing information records, the system including a primary storage, a secondary storage having a plurality of pages, a plurality of sections, each of the sections adapted to contain one or more data records, each of the sections residing in the secondary storage on one of the plurality of pages, and a control program which receives a request for the retrieval of a data record, the control program retrieving the data record from the secondary storage and storing the data record in the primary storage, the retrieval operation reading at most one page from the secondary storage.","Yet another embodiment of the invention includes a database system for managing information items, the system including a primary storage, a secondary storage having a plurality of pages, a plurality of sections, each of the sections independent of each of the other sections such that an error in one of the sections does not affect any of the other sections, and a control program which receives a request for =the retrieval of a data record, the control program retrieving the data record from the secondary storage and storing the data record in the primary storage.","Yet another embodiment of the invention includes a database system for managing information items, the system including a client application, a primary storage comprising a plurality of pages, a secondary storage comprising a plurality of pages, a caching subsystem for copying pages from the primary secondary storage to the pages in the primary storage and vice-versa, a database data structure having a plurality of sections, each of the sections residing on one of the pages in the primary storage and\/or the secondary storage, a database manager which receives requests from the client application to store and a data record in the database data structure, the database manager selecting one of the sections and storing the data record in the selected section, the database manager determining whether the selected section contains sufficient unused space to hold the data record, and if the section does not have sufficient space, the database manager removing selected data records according to a ranking function.","The following detailed description is directed to certain specific embodiments of the invention. However, the invention can be embodied in a multitude of different ways as defined and covered by the claims.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","102","103","103"]},"The client computer  stores information that may be exported to other computing devices through a network . The network may include any type of electronically connected group of computers, including for instance the following networks: Internet, Intranet, Local Area Networks (LAN) or Wide Area Networks (WAN). In addition, the connectivity to the network may be, for example, remote modem, Ethernet (IEEE 802.3), Token Ring (IEEE 802.5), Fiber Distributed Datalink Interface (FDDI) or Asynchronous Transfer Mode (ATM). Note that computing devices may be desktop, server, portable, hand-held, set-top, or any other desired type of configuration. As used herein, an Internet includes network variations such as public internet, a private internet, a secure internet, a private network, a public network, a value-added network, an intranet, and the like.","Based upon a request from the client computer , a database management system  can store and retrieve information. In one embodiment of the invention, the database management system  includes a gateway which is connected to a WAN . The WAN  has a plurality of network servers . One of the network servers  is connected to a LAN  comprising a plurality of computers . The database management system  stores and retrieves information that may be located on one of the network servers  or another computer in the network . In one embodiment of the invention, database management system programs executes in part on a plurality of the network servers. In another embodiment of the invention, the database management system programs executes on a plurality of the computers  on the LAN . In yet another embodiment of the invention, the database management system programs resides on the client computer . It is important to understand that the system programs of the present invention may be hosted on any computing device so long as a communication pathway exists between the database management system  and an application program that is need of the services which are provided by the database management system .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["106","106","190","190","190","190"]},"In one embodiment of the invention, the client application  resides on the client computer . In another embodiment of the invention, the client application  is integrated with the database management system  into a single computer platform.","The database management system  also includes a database manager . The database manager  exports an database application programming interface (\u201cAPI\u201d) to the client application . By using the database API, the client application  can store and retrieve information from the database management system . The database manager  can interact with more than one client application .","The database manager  is comprised of various modules. As can be appreciated by one of ordinary skill in the art, each of the modules comprise various sub-routines, procedures, definitional statements, and macros. Each of the modules are typically separately compiled and linked into a single executable program. Therefore, the following description of each of the modules is used for convenience to describe the functionality of the database manager . Thus, the processes that are undergone by each of the modules may be arbitrarily redistributed to one of the other modules, combined together in a single module, or made available in a shareable dynamic link library.","In one embodiment of the invention, the database manager  uses a hashing scheme to store and retrieve data. Hashing is a well known technique for storing and retrieving information from a computer storage. In a system using hashing, a key is operated upon by a hashing function to produce a storage address in a hash table. The hashing function translates the key into addresses uniformly distributed throughout the hash table. Once an address is generated, the system accesses the desired storage location in the hash table.","Table 1 sets forth below each of the functions that are exported by the database manager in the database API to the client application .",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["FUNCTION","FUNCTION DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Create","Creates and initializes a new database."]},{"entry":["Open","Opens a previously created database."]},{"entry":["Put","Put a [key, element] pair into the currently opened"]},{"entry":[{},"database."]},{"entry":["Get","Obtains a data structure, given a key."]},{"entry":["Delete","Given a key, removes a data record from the database."]},{"entry":["Sequence","Iterates either forward or backwards through each of the"]},{"entry":[{},"data records in the database."]},{"entry":["Close","Closes the database that is currently open."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The database management system  also includes a caching subsystem . The caching subsystem  uses one of various well-known caching strategies to keep frequently accessed pages easily accessible in a primary storage . The caching subsystem can be any off-the shelf caching program, such as shareware versions of caching program, known as Berkley DB, available from the University of California at Berkley. In one embodiment of the invention, the primary storage  is a random access memory (\u201cRAM\u201d). The database management system  also includes a secondary storage . The secondary storage  can include any type of storage device such as a mass storage adapter. In one embodiment of the invention, the caching subsystem  and the secondary storage  are merged into a single storage system.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["200","196","198"]},"The database data structure  contains a header section  that describes the format of the database data structure . In one embodiment of the invention, the header section  is the first section in the database data structure . Alternatively, the information that is maintained by the header section can be maintained outside of the database data structure . The header section  includes a section size field , a total section number field , and a database information field . The section size field  defines the length of each of the sections in the database data structure . In a preferred embodiment of the invention, each of the sections are of a uniform length. However, sections of varying length may also be employed.","The total section number field  defines the number of sections that are contained within the database data structure . In a preferred embodiment of the invention, the total number of sections within database management system  is statically defined upon the creation of the database manage system. However, in another embodiment of the invention, the number of sections within the database data structure  can be dynamically adjusted. In one of the fields in the header section , the database information field , holds administrative information about the database data structure . For example, the database information field  can hold statistics about the number of items that have been dropped, the mean age of the items dropped, the mean number of data records per section, the standard deviations for the means, the byte ordering for the database data structure , a \u201cmagic\u201d number identifying the database data structure  as being a database data structure, a hash function identifier and\/or a version number of the database.","The database data structure  also contains a number of data sections . Each of the data sections  includes a section number field , a total data records (number items) field , and an offset field . The section number field  contains the section number that uniquely identifies the respective section. The total data records field  includes the total number of data records that are contained within the respective section. Upon the initialization of the database data structure , the number of data records is equal to zero. However, as data records are stored and deleted by the client application , the total number of data records within a section can vary.","The offset field  describes the position of the next available unused space within the section. In one embodiment of the invention, the next available position is a relative measurement in bytes from the beginning of the section. However, it is to be appreciated that other measurement units can be used, such as bits.","Further, each of the sections  contain zero or more data records , each of the data records  being of, in one embodiment, variable length. Each of the data records  contain information which may be used by the client application . The structure of each of the data records  is set forth in further detail below with reference to .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 4","FIG. 2"],"b":["232","232","304","308","312","316","320","304","316","308","320","304","308","308","312","232","316","232","320","190","190","320","320"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 3","FIG. 2","FIG. 2","FIG. 2"],"b":["200","106","200","500","192","190","500","190","192","190","190","500","106","200","198","200"],"br":{},"in-line-formulae":[{},{}]},"Where Section Size=section size identified in one of the parameters of the open function, and","Number of Sections=number of sections identified in one of the parameters of the open function.","It is noted that in determining the size of the database data structure , the variable \u201cNumber of Sections\u201d is incremented by one so that space may be made for the header section .","Still referring to the state , the database management system  () initializes the header. The database management system  sets the section size field  to be equal to the size which was identified by the section size parameter of the create function. Furthermore, the database management system  sets the total section number field  equal to the section number that was passed by the number of sections parameter of the create operation.","Moving to a decision state , the database management system  () determines whether there are additional data sections to initialize. Upon first reaching the decision state , the database management system  has already initialized the header section ; however, each of the data sections  is still in need of initialization. At the decision state , if the database management system  determines that there are additional sections to initialize, the database management system  proceeds to a state .","At the state , the database management system  () initializes an un-initialized data section. At the state , the section number field  () is assigned a unique section number. Furthermore, the total data records field  () is set to zero. In addition, the offset field  () is initialized to zero. The database management system  then returns to the state  to determine whether there are additional data sections  to initialize. If the database management system  determines that all of the data sections  have been initialized, the database management system  finishes the database creation process.","In another embodiment of the invention, rather than initializing all of the database pages up front, a bit field can be kept in the header section  which specifies which of the sections has been initialized.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 6","FIG. 3","FIG. 5","FIG. 2","FIG. 2","FIG. 2"],"b":["200","200","200","600","190","192","190","200","190","602","106","190","604","106","198","106","200","190","200"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIGS. 7 and 8","FIG. 2","FIG. 2"],"b":["200","804","190","192","190","232","804","192","316","106","106","2","5"],"br":[{},{},{},{}],"in-line-formulae":[{},{},{},{},{},{},{},{}],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Where X=a looping variable,","NUMBER_OF_CHARACTERS_IN_KEY=the number of characters in a given key,","PRIME_NUMBER=any prime number,","KEY_CHARACTER(X)=the X'th ASCII character in the key, and","NUMBER OF SECTIONS=the number of sections in the database data structure ."]}}}},"It is noted that other algorithms may be used to identify a data section based upon a provided key. The database management system  () then searches the identified section for any pre-existing data records  that have a key that is identical to the key that is associated with the new data record.","Moving to decision state , the database management system  () determines whether a match is found. The process for searching the database data structure  () is described below with reference to . If the database management system  determines that a match is found, the database management system  proceeds to a decision state . Otherwise, if the database management system  does not find a match, the database management system  proceeds to a decision state .","Referring again to the decision state , the database management system  () determines whether the matching pre-existing data record is the same size or larger than the new data record. If the matching pre-existing data record is the same size or larger than the new data record, the database management system  proceeds to a state . At the state , the database management system  overwrites the pre-existing data record with the new data record. An overwrite of the pre-existing data is acceptable because the Put operation is defined to overwrite existing data with the same key. Furthermore, the database management system  reclaims any unused space which is not used by the new data structure by moving other data records, e.g., shifting upwards each of the data records on the section. From the state , the database manager  indicates to the client application  that the put function was successful.","A successful overwrite of a data record is pictorially shown in  an . Referring to , an exemplary data section  is illustrated. The data section  includes a first data record  that starts at a byte  and ends at byte . Furthermore, the data section  includes a second data record  that starts at a byte  and ends at byte . Lastly, the data section  includes a third data record  that starts at byte  and ends at byte .",{"@attributes":{"id":"p-0064","num":"0068"},"figref":["FIG. 10","FIG. 2"],"b":["900","106","908","200","908","902","908","902","908","64","89","904","90","104","906","105","111"]},"Referring again to state  and , if the database management system  () at the state  determines that the pre-existing data record is smaller than the new data record, the database management system  () proceeds to a state . Since the new data record will not fit in the space occupied by the pre-existing data record, an overwrite operation cannot be performed. At the state , the database management system  deletes the matching pre-existing data record from the section. This is possible because the pre-existing data record now contains an older version of the data record. From either the decision state  or the state , the database management system  proceeds to a decision state . At the decision state , the database management system  determines whether the new data record fits in the unused space in the section. If the new data record fits in the unused space on the data section, the database management system  proceeds to a state . At the state , the database management system  inserts or appends the new data record at the first available position in the unused space of the data section. Furthermore, the database management system  updates the offset field  that is associated with the data section and completes the put function by indicating to the client application  that the insertion was a success.","Referring to the decision state , if the database management system  () determines that the new data record will not fit in the unused space on the identified section, the database management system  proceeds to a state  (). At the state  through a state , the data management system  attempts to delete a sufficient number of the data records  to provide enough space to hold the new data record.","At the state , the database management system  () ranks all of the data records  on the identified section according to a ranking function. In one embodiment of the present invention, the database management system  ranks each of the data records  according to when each of the data records  were last used. In this embodiment, the database management system  assigns a higher rank to a data record that has been used more recently than a later used data record. As was discussed above with reference to , each of the data records  includes an access time stamp field  which identifies the last time that the data record was used. Thus, after comparing the time stamps of all data records  in the section, the oldest time stamp will have the lowest rank.","However, it is to be appreciated by the skilled technologist, that other ranking schemes may be used. For example, each of the data records  could have an associated priority level and each of the data records could be ranked according to this priority level.","Proceeding to a state , the database management system  () sums the sizes of all of the data records  that are below the rank of the new data record. For example, assume that a new data record having a length of 40 bytes is to be added to the section  (shown in ). Further assume that there are 6 bytes of unused space in the data section . Also in this example, assume that the first data record  was accessed the most recently of all of the data sections  in data section , that the second data record  was accessed the second most recently, and that the third data record  was accessed the least recently. In this embodiment, the sum of the first data record , the second data record  and the third data record  totals 57 bytes.","Continuing to a decision state , the database management system  () determines whether the calculated total size (which was calculated in the state ) is greater than the size of the new data record. If the calculated total size is not greater than or equal to the size of the new data record, the database management system  returns a failure to the client application . Thus, the database management system  was unable to store the data record in the section. However, if the database management system  determines that the total size is greater than the size of the new data record, the database management system  proceeds to a state .","At state , the database management system  () deletes the data record having the lowest rank. Using the example set forth above with reference to state , since the third data record  was the data record that has not been accessed for the longest period of time, the database management system  deletes the third data record . Continuing to a decision state , the database management system  determines whether there is now sufficient space for the new data record in the identified section. If the database management system  determines that there is still insufficient space, the database management system  loops to state  to delete the data record having the lowest rank of all of the undeleted data records. However, if the database management system  determines that there is sufficient space for the new data record subsequent to deleting the lowest ranking data record, the database management system  proceeds to a state . At the state , the database management system  appends the new data record at the end of the identified section after shifting the non-deleted data records upward. The database management system  then returns a message to the client application  indicating that the data record had been successfully inputted into the currently open database data structure .",{"@attributes":{"id":"p-0072","num":"0076"},"figref":["FIG. 11","FIG. 11","FIG. 2","FIG. 14"],"b":["232","200","190","192","1100","106","214","190","214"]},"Continuing to a decision state , the database management system  () determines whether it can find the requested data record. If the database management system  finds the requested data record, the database management system  proceeds to a state , retrieves the data record from the database section memory, and returns the contents of the found data record to the client application  (). Otherwise, if the database management system  cannot find the requested data record, the database management system  proceeds to a state . At the state , the database management system  returns a message to the client application  indicating that the requested data record could not be found. This may result when the client application  passes an erroneous key.",{"@attributes":{"id":"p-0074","num":"0078"},"figref":["FIG. 12","FIG. 12","FIG. 2","FIG. 2","FIG. 14"],"b":["232","200","190","192","1200","106","214","190","214"]},"Continuing to a decision state , the database management system  () determines whether it can find the requested data record. If the database management system  finds the data record, the database management system  proceeds to a state . At the state , the database management system  deletes the identified record from the database data structure . The process for deleting a record from one of the data sections  is set forth below with reference to .","Referring again to the decision state , if the data management system  () does not find the identified data record, the database management system  proceeds to a state . At the state , the database management system  returns a message to the client application  indicating that the data record to be deleted could not be found.",{"@attributes":{"id":"p-0077","num":"0081"},"figref":["FIG. 13","FIG. 13","FIG. 2"],"b":["232","200","190","192"]},"The sequence procedure includes as one of its parameters a beginning flag. The beginning flag identifies whether to start retrieving data records at the beginning of the database data structure or at the last identified data record. It is noted that other types of flags, such as middle, end, etc. may also be employed.","The database management system  maintains two positioning or \u201ccursor\u201d variables. First, a section cursor variable references one of the data sections . Second, a data record cursor variable references one of the data records on the section identified by the section cursor. In one embodiment of the invention, the section cursor variable contains an integer that matches the section number identified in one of the section number fields  (). Further, in this embodiment of the invention, the data record cursor references one of the data records by containing an integer that represents the positioning of one of the data records with respect to other data records in that data section. For example, with reference to , if the data record cursor variable referenced the first data record , the data record cursor variable would be equal to one.","Starting at a decision state , the database management system  determines whether the beginning or \u201cfirst\u201d flag is set. If the beginning flag is set, the database management system  proceeds to a state . At the state , the database management system  sets the sector cursor variable to the first data section within the database data structure  (). Furthermore, the database management system  sets the data record cursor variable to be zero.","From either the decision state , if the beginning flag is not set, or from the state , the database management system  proceeds to a decision state . At the decision state , the database management system  determines whether the data record cursor variable exceeds the total number of records which is identified by the total data record field  (). If the value of the data record cursor variable is less than the total number of records, the database management system  proceeds to a state . Otherwise, if the value of the data record cursor variable exceeds the total number of records, the database management system  proceeds to a state decision .","At the state , the database management system  sends the data record that is currently identified by the data record cursor variable to the client application . Further, at the state , the sequence operation is complete.","Referring again to the decisions state , if the data record cursor variable exceeds the total number of records, the database management system  proceeds to a decision state . At the decision state, the database management system  determines whether the section cursor variable references the last section in the database. If the section cursor variable references the last page in the database data structure , the database management system  returns a message to the client application  indicating that the end of the database data structure  has been reached. Alternatively, in another embodiment of the invention, the database management system  can position the section cursor variable to the first section within the database.","However, at the decision state , if the section cursor variable is not the last section in the database data structure , the database management system  proceeds to a state . At the state , the database management system  sets the section variable cursor to the next section within the database data structure . In one embodiment of the invention, the database management system  uses the Berkley DB cache_get_page function which is provided by the caching subsystem . However, in another embodiment of the invention, the database management system  retrieves the section by reading directly from the secondary storage  (). Still referring to the state , the database management system  sets the data record cursor variable to equal zero. The database management system  then returns to the decision state .",{"@attributes":{"id":"p-0085","num":"0089"},"figref":["FIG. 14","FIG. 12","FIG. 7","FIG. 11","FIG. 12","FIG. 2"],"b":["804","1100","1200","1400","106","1400","106","106","232","1204","106","232","106","1406","1406","106","190"]},"Referring again to the decision state , if the database management system  () determines that the variable \u201cRECNO\u201d is less than or equal to the number of data records in the data section, the database management system  proceeds to a decision state . At the decision state , the database management system  determines whether the provided key matches the key that is associated with the data record which is referenced by the variable \u201cRECNO.\u201d If the database management system  determines that the provided key matches the key that is associated with the data record identified by the variable \u201cRECNO\u201d, the database management system  proceeds to a state .","At the state , the database management system  provides the identified data record to the client application  (). However, referring again to the decision state , if the database management system  determines that the key does not match the key which is referenced by the variable \u201cRECNO\u201d, the database management system  proceeds to a state . At the state , the database management system  increments the variable \u201cRECNO\u201d to reference the next data record in the identified section. From the state , the database management system  returns to the decision state  and continues to iterate through each of the data records in the data section in an attempt to identify the requested data record.",{"@attributes":{"id":"p-0088","num":"0092"},"figref":["FIG. 15","FIG. 2","FIG. 15","FIG. 12","FIG. 4","FIG. 4"],"b":["200","1208","1500","106","232","106","214","106","304","308","304","308","1500","106"]},"Moving to a decision state , the database management system  () determines whether the value of the variable \u201cRECNO\u201d is less than the number of data records in the data section. In one embodiment of the invention, the number of data records is stored in the total data records field  (). If the value of the variable \u201cRECNO\u201d is less than the number of data records, the database management system  proceeds to a state . Of course, in other embodiments, another technique to move records could be used. At the state , the database management system  starts an iterative process to move each of the data records that reside below the data record to be deleted upwards toward the top of the section. At the state , the database management system  calculates a new address for the data record identified by the variable \u201cRECNO\u201d.","Continuing to a state , the database management system  () copies the content of the data record to start at its new address (calculated in the state ). It is noted that in one embodiment, the deleted data records are stored in a secondary database data structure (not shown). In this embodiment, the database data structure  operates as a high speed cache for the secondary database data structure.","Next, at the state , the database management system  increments the variable \u201cRECNO\u201d. The database management system  then returns to the decision state  to determine if all of the data records that were initially below the deleted data record have been moved upwards.","Referring again to the state , if the value of the variable \u201cRECNO\u201d is not less than number of data records in the section, the database management system  () proceeds to a state . At the state , the database management system  decrements the value contained in the total data records field  (). Moving to a state , the database management system  subtracts the size of the deleted data record from the offset field . The process then returns to the state  of .","The database management system  requires low-maintenance and is resistant to errors. Since the size of database data structure  is statically defined, the database management system  does not need to monitor the available space in the secondary storage  () with respect to the database data structure. Furthermore, the database data structure  is designed such that no dependencies exist between any of the data sections. Advantageously, if one of the sections in the database data structure  becomes corrupted, such error does not have any affect on any of the other data sections. In addition, since each of the data sections are always in a consistent state, a backup or copy operation can occur while the database data manager  is operating. A copy operation can be performed by simply copying the image of the database data structure  that is stored in the secondary storage .","Further, certain embodiments of the database management system  are very efficient at managing statistical information, wherein the contents of any one particular data record is unimportant, but wherein the overall contents of the database data structure is considered valuable. Since each data record is associated with only one of the sections in the database data structure  () and each of the sections are the same size as the pages that are managed by the caching subsystem  (), the database management system  can perform a search operation with at most one physical page read from the secondary storage  (). Further, by utilizing a cache of sections, the database management system  can perform a search operation in, on average, much less than one physical page read from the secondary mass storage .","Further, the database management system  is also particularly well-suited for use with maintaining user profiles. Each user profiles can be used to contain any type of information about an selected Internet user. By applying the ranking function (described above with reference to  of ) upon each addition of a new data record, the database management system  automatically eliminates inactive user profiles. In this embodiment, the most desirable users (as defined by a web site) are stored in the database data structure , while less desirable or transient users are replaced to make room for more desirable users as necessary. Furthermore, an additional database system can be configured to stored those profiles dropped from the database data structure  allowing the database data structure  to operate as a high-speed persistent cache.","While the above detailed description has shown, described, and pointed out novel features of the invention as applied to various embodiments, it will be understood that various omissions, substitutions, and changes in the form and details of the device or process illustrated may be made by those skilled in the art without departing from the spirit of the invention. The scope of the invention is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIGS. 7 and 8","FIG. 3"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 9","FIG. 3"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 11","FIG. 3"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 12","FIG. 3"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 13","FIG. 3"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 14","FIG. 3","FIGS. 7"],"b":["11","12"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 15","FIG. 3","FIG. 12"]}]},"DETDESC":[{},{}]}
