---
title: Model train control system
abstract: A system which operates a digitally controlled model railroad transmitting a first command from a first client program to a resident external controlling interface through a first communications transport. A second command is transmitted from a second client program to the resident external controlling interface through a second communications transport. The first command and the second command are received by the resident external controlling interface which queues the first and second commands. The resident external controlling interface sends third and fourth commands representative of the first and second commands, respectively, to a digital command station for execution on the digitally controlled model railroad.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07970504&OS=07970504&RS=07970504
owner: 
number: 07970504
owner_city: 
owner_country: 
publication_date: 20071030
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENT"],"p":["The present application is a continuation of U.S. patent application Ser. No. 11\/592,784, filed Nov. 3, 2006, now abandoned which is a continuation of U.S. patent application Ser. No. 10\/976,227, filed Oct. 26, 2004, now U.S. Pat. No. 7,216,836, which is a continuation of U.S. patent application Ser. No. 10\/705,416, filed Nov. 10, 2003 now U.S. Pat. No. 6,877,699, which is a continuation of U.S. patent application Ser. No. 10\/226,040, filed Aug. 21, 2002, now U.S. Pat. No. 6,702,235, which is a continuation of U.S. patent application Ser. No. 09\/858,297, filed May 15, 2001, now U.S. Pat. No. 6,494,408, which is a continuation of U.S. patent application Ser. No. 09\/541,926, filed Apr. 3, 2000, now U.S. Pat. No. 6,270,040.","The present invention relates to a system for controlling a model railroad.","Model railroads have traditionally been constructed with of a set of interconnected sections of train track, electric switches between different sections of the train track, and other electrically operated devices, such as train engines and draw bridges. Train engines receive their power to travel on the train track by electricity provided by a controller through the track itself. The speed and direction of the train engine is controlled by the level and polarity, respectively, of the electrical power supplied to the train track. The operator manually pushes buttons or pulls levers to cause the switches or other electrically operated devices to function, as desired. Such model railroad sets are suitable for a single operator, but unfortunately they lack the capability of adequately controlling multiple trains independently. In addition, such model railroad sets are not suitable for being controlled by multiple operators, especially if the operators are located at different locations distant from the model railroad, such as different cities.","A digital command control (DDC) system has been developed to provide additional controllability of individual train engines and other electrical devices. Each device the operator desires to control, such as a train engine, includes an individually addressable digital decoder. A digital command station (DCS) is electrically connected to the train track to provide a command in the form of a set of encoded digital bits to a particular device that includes a digital decoder. The digital command station is typically controlled by a personal computer. A suitable standard for the digital command control system is the NMRA DCC Standards, issued March 1997, and is incorporated herein by reference. While providing the ability to individually control different devices of the railroad set, the DCC system still fails to provide the capability for multiple operators to control the railroad devices, especially if the operators are remotely located from the railroad set and each other.","DigiToys Systems of Lawrenceville, Ga. has developed a software program for controlling a model railroad set from a remote location. The software includes an interface which allows the operator to select desired changes to devices of the railroad set that include a digital decoder, such as increasing the speed of a train or switching a switch. The software issues a command locally or through a network, such as the internet, to a digital command station at the railroad set which executes the command. The protocol used by the software is based on Cobra from Open Management Group where the software issues a command to a communication interface and awaits confirmation that the command was executed by the digital command station. When the software receives confirmation that the command executed, the software program sends the next command through the communication interface to the digital command station. In other words, the technique used by the software to control the model railroad is analogous to an inexpensive printer where commands are sequentially issued to the printer after the previous command has been executed. Unfortunately, it has been observed that the response of the model railroad to the operator appears slow, especially over a distributed network such as the internet. One technique to decrease the response time is to use high-speed network connections but unfortunately such connections are expensive.","What is desired, therefore, is a system for controlling a model railroad that effectively provides a high-speed connection without the additional expense associated therewith.","The present invention overcomes the aforementioned drawbacks of the prior art, in a first aspect, by providing a system for operating a digitally controlled model railroad that includes transmitting a first command from a first client program to a resident external controlling interface through a first communications transport. A second command is transmitted from a second client program to the resident external controlling interface through a second communications transport. The first command and the second command are received by the resident external controlling interface which queues the first and second commands. The resident external controlling interface sends third and fourth commands representative of the first and second commands, respectively, to a digital command station for execution on the digitally controlled model railroad.","Incorporating a communications transport between the multiple client program and the resident external controlling interface permits multiple operators of the model railroad at locations distant from the physical model railroad and each other. In the environment of a model railroad club where the members want to simultaneously control devices of the same model railroad layout, which preferably includes multiple trains operating thereon, the operators each provide commands to the resistant external controlling interface, and hence the model railroad. In addition by queuing by commands at a single resident external controlling interface permits controlled execution of the commands by the digitally controlled model railroad, would may otherwise conflict with one another.","In another aspect of the present invention the first command is selectively processed and sent to one of a plurality of digital command stations for execution on the digitally controlled model railroad based upon information contained therein. Preferably, the second command is also selectively processed and sent to one of the plurality of digital command stations for execution on the digitally controlled model railroad based upon information contained therein. The resident external controlling interface also preferably includes a command queue to maintain the order of the commands.","The command queue also allows the sharing of multiple devices, multiple clients to communicate with the same device (locally or remote) in a controlled manner, and multiple clients to communicate with different devices. In other words, the command queue permits the proper execution in the cases of: (1) one client to many devices, (2) many clients to one device, and (3) many clients to many devices.","In yet another aspect of the present invention the first command is transmitted from a first client program to a first processor through a first communications transport. The first command is received at the first processor. The first processor provides an acknowledgement to the first client program through the first communications transport indicating that the first command has properly executed prior to execution of commands related to the first command by the digitally controlled model railroad. The communications transport is preferably a COM or DCOM interface.","The model railroad application involves the use of extremely slow real-time interfaces between the digital command stations and the devices of the model railroad. In order to increase the apparent speed of execution to the client, other than using high-speed communication interfaces, the resident external controller interface receives the command and provides an acknowledgement to the client program in a timely manner before the execution of the command by the digital command stations. Accordingly, the execution of commands provided by the resident external controlling interface to the digital command stations occur in a synchronous manner, such as a first-in-first-out manner. The COM and DCOM communications transport between the client program and the resident external controlling interface is operated in an asynchronous manner, namely providing an acknowledgement thereby releasing the communications transport to accept further communications prior to the actual execution of the command. The combination of the synchronous and the asynchronous data communication for the commands provides the benefit that the operator considers the commands to occur nearly instantaneously while permitting the resident external controlling interface to verify that the command is proper and cause the commands to execute in a controlled manner by the digital command stations, all without additional high-speed communication networks. Moreover, for traditional distributed software execution there is no motivation to provide an acknowledgment prior to the execution of the command because the command executes quickly and most commands are sequential in nature. In other words, the execution of the next command is dependent upon proper execution of the prior command so there would be no motivation to provide an acknowledgment prior to its actual execution.","The foregoing and other objectives, features, and advantages of the invention will be more readily understood upon consideration of the following detailed description of the invention, taken in conjunction with the accompanying drawings.","Referring to , a model train control system  includes a communications transport  interconnecting a client program  and a resident external controlling interface . The client program  executes on the model railroad operator's computer and may include any suitable system to permit the operator to provide desired commands to the resident external controlling interface . For example, the client program  may include a graphical interface representative of the model railroad layout where the operator issues commands to the model railroad by making changes to the graphical interface. The client program  also defines a set of Application Programming Interfaces (API's), described in detail later, which the operator accesses using the graphical interface or other programs such as Visual Basic, C++, Java, or browser based applications. There may be multiple client programs interconnected with the resident external controlling interface  so that multiple remote operators may simultaneously provide control commands to the model railroad.","The communications transport  provides an interface between the client program  and the resident external controlling interface . The communications transport  may be any suitable communications medium for the transmission of data, such as the internet, local area network, satellite links, or multiple processes operating on a single computer. The preferred interface to the communications transport  is a COM or DCOM interface, as developed for the Windows operating system available from Microsoft Corporation. The communications transport  also determines if the resident external controlling interface  is system resident or remotely located on an external system. The communications transport  may also use private or public communications protocol as a medium for communications. The client program  provides commands and the resident external controlling interface  responds to the communications transport  to exchange information. A description of COM (common object model) and DCOM (distributed common object model) is provided by Chappel in a book entitled Understanding ActiveX and OLE, Microsoft Press, and is incorporated by reference herein.","Incorporating a communications transport  between the client program(s)  and the resident external controlling interface  permits multiple operators of the model railroad at locations distant from the physical model railroad and each other. In the environment of a model railroad club where the members want to simultaneously control devices of the same model railroad layout, which preferably includes multiple trains operating thereon, the operators each provide commands to the resistant external controlling interface, and hence the model railroad.","The manner in which commands are executed for the model railroad under COM and DCOM may be as follows. The client program  makes requests in a synchronous manner using COM\/DCOM to the resident external interface controller . The synchronous manner of the request is the technique used by COM and DCOM to execute commands. The communications transport  packages the command for the transport mechanism to the resident external controlling interface . The resident external controlling interface  then passes the command to the digital command stations  which in turn executes the command. After the digital command station  executes the command an acknowledgement is passed back to the resident external controlling interface  which in turn passes an acknowledgement to the client program . Upon receipt of the acknowledgement by the client program , the communications transport  is again available to accept another command. The train control system , without more, permits execution of commands by the digital command stations  from multiple operators, but like the DigiToys Systems' software the execution of commands is slow.","The present inventor came to the realization that unlike traditional distributed systems where the commands passed through a communications transport are executed nearly instantaneously by the server and then an acknowledgement is returned to the client, the model railroad application involves the use of extremely slow real-time interfaces between the digital command stations and the devices of the model railroad. The present inventor came to the further realization that in order to increase the apparent speed of execution to the client, other than using high-speed communication interfaces, the resident external controller interface  should receive the command and provide an acknowledgement to the client program  in a timely manner before the execution of the command by the digital command stations . Accordingly, the execution of commands provided by the resident external controlling interface  to the digital command stations  occur in a synchronous manner, such as a first-in-first-out manner. The COM and DCOM communications transport  between the client program  and the resident external controlling interface  is operated in an asynchronous manner, namely providing an acknowledgement thereby releasing the communications transport  to accept further communications prior to the actual execution of the command. The combination of the synchronous and the asynchronous data communication for the commands provides the benefit that the operator considers the commands to occur nearly instantaneously while permitting the resident external controlling interface  to verify that the command is proper and cause the commands to execute in a controlled manner by the digital command stations , all without additional high-speed communication networks. Moreover, for traditional distributed software execution there is no motivation to provide an acknowledgment prior to the execution of the command because the command executes quickly and most commands are sequential in nature. In other words, the execution of the next command is dependent upon proper execution of the prior command so there would be no motivation to provide an acknowledgment prior to its actual execution. It is to be understood that other devices, such as digital devices, may be controlled in a manner as described for model railroads.","Referring to , the client program  sends a command over the communications transport  that is received by an asynchronous command processor .","The asynchronous command processor  queries a local database storage  to determine if it is necessary to package a command to be transmitted to a command queue . The local database storage  primarily contains the state of the devices of the model railroad, such as for example, the speed of a train, the direction of a train, whether a draw bridge is up or down, whether a light is turned on or off, and the configuration of the model railroad layout. If the command received by the asynchronous command processor  is a query of the state of a device, then the asynchronous command processor  retrieves such information from the local database storage  and provides the information to an asynchronous response processor . The asynchronous response processor  then provides a response to the client program  indicating the state of the device and releases the communications transport  for the next command.","The asynchronous command processor  also verifies, using the configuration information in the local database storage , that the command received is a potentially valid operation. If the command is invalid, the asynchronous command processor  provides such information to the asynchronous response processor , which in turn returns an error indication to the client program .","The asynchronous command processor  may determine that the necessary information is not contained in the local database storage  to provide a response to the client program  of the device state or that the command is a valid action. Actions may include, for example, an increase in the train's speed, or turning on\/off of a device. In either case, the valid unknown state or action command is packaged and forwarded to the command queue . The packaging of the command may also include additional information from the local database storage  to complete the client program  request, if necessary. Together with packaging the command for the command queue , the asynchronous command processor  provides a command to the asynchronous request processor  to provide a response to the client program  indicating that the event has occurred, even though such an event has yet to occur on the physical railroad layout.","As such, it can be observed that whether or not the command is valid, whether or not the information requested by the command is available to the asynchronous command processor , and whether or not the command has executed, the combination of the asynchronous command processor  and the asynchronous response processor  both verifies the validity of the command and provides a response to the client program  thereby freeing up the communications transport  for additional commands. Without the asynchronous nature of the resident external controlling interface , the response to the client program  would be, in many circumstances, delayed thereby resulting in frustration to the operator that the model railroad is performing in a slow and painstaking manner. In this manner, the railroad operation using the asynchronous interface appears to the operator as nearly instantaneously responsive.","Each command in the command queue  is fetched by a synchronous command processor  and processed. The synchronous command processor  queries a controller database storage  for additional information, as necessary, and determines if the command has already been executed based on the state of the devices in the controller database storage . In the event that the command has already been executed, as indicated by the controller database storage , then the synchronous command processor  passes information to the command queue  that the command has been executed or the state of the device. The asynchronous response processor  fetches the information from the command cue  and provides a suitable response to the client program , if necessary, and updates the local database storage  to reflect the updated status of the railroad layout devices.","If the command fetched by the synchronous command processor  from the command queue  requires execution by external devices, such as the train engine, then the command is posted to one of several external device control logic  blocks. The external device control logic  processes the command from the synchronous command processor  and issues appropriate control commands to the interface of the particular external device  to execute the command on the device and ensure that an appropriate response was received in response. The external device is preferably a digital command control device that transmits digital commands to decoders using the train track. There are several different manufacturers of digital command stations, each of which has a different set of input commands, so each external device is designed for a particular digital command station. In this manner, the system is compatible with different digital command stations. The digital command stations  of the external devices  provide a response to the external device control logic  which is checked for validity and identified as to which prior command it corresponds to so that the controller database storage  may be updated properly. The process of transmitting commands to and receiving responses from the external devices  is slow.","The synchronous command processor  is notified of the results from the external control logic  and, if appropriate, forwards the results to the command queue . The asynchronous response processor  clears the results from the command queue  and updates the local database storage  and sends an asynchronous response to the client program , if needed. The response updates the client program  of the actual state of the railroad track devices, if changed, and provides an error message to the client program  if the devices actual state was previously improperly reported or a command did not execute properly.","The use of two separate database storages, each of which is substantially a mirror image of the other, provides a performance enhancement by a fast acknowledgement to the client program  using the local database storage  and thereby freeing up the communications transport  for additional commands. In addition, the number of commands forwarded to the external device control logic  and the external devices , which are relatively slow to respond, is minimized by maintaining information concerning the state and configuration of the model railroad. Also, the use of two separate database tables  and  allows more efficient multi-threading on multi-processor computers.","In order to achieve the separation of the asynchronous and synchronous portions of the system the command queue  is implemented as a named pipe, as developed by Microsoft for Windows. The queue  allows both portions to be separate from each other, where each considers the other to be the destination device. In addition, the command queue maintains the order of operation which is important to proper operation of the system.","The use of a single command queue  allows multiple instantrations of the asynchronous functionality, with one for each different client. The single command queue  also allows the sharing of multiple devices, multiple clients to communicate with the same device (locally or remote) in a controlled manner, and multiple clients to communicate with different devices. In other words, the command queue  permits the proper execution in the cases of: (1) one client to many devices, (2) many clients to one device, and (3) many clients to many devices.","The present inventor came to the realization that the digital command stations provided by the different vendors have at least three different techniques for communicating with the digital decoders of the model railroad set. The first technique, generally referred to as a transaction (one or more operations), is a synchronous communication where a command is transmitted, executed, and a response is received therefrom prior to the transmission of the next sequentially received command. The DCS may execute multiple commands in this transaction. The second technique is a cache with out of order execution where a command is executed and a response received therefrom prior to the execution of the next command, but the order of execution is not necessarily the same as the order that the commands were provided to the command station. The third technique is a local-area-network model where the commands are transmitted and received simultaneously. In the LAN model there is no requirement to Wait until a response is received for a particular command prior to sending the next command. Accordingly, the LAN model may result in many commands being transmitted by the command station that have yet to be executed. In addition, some digital command stations use two or more of these techniques.","With all these different techniques used to communicate with the model railroad set and the system  providing an interface for each different type of command station, there exists a need for the capability of matching up the responses from each of the different types of command stations with the particular command issued for record keeping purposes. Without matching up the responses from the command stations, the databases can not be updated properly.","Validation functionality is included within the external device control logic  to accommodate all of the different types of command stations. Referring to , an external command processor  receives the validated command from the synchronous command processor . The external command processor  determines which device the command should be directed to, the particular type of command it is, and builds state information for the command. The state information includes, for example, the address, type, port, variables, and type of commands to be sent out. In other words, the state information includes a command set for a particular device on a particular port device. In addition, a copy of the original command is maintained for verification purposes. The constructed command is forwarded to the command sender  which is another queue, and preferably a circular queue. The command sender  receives the command and transmits commands within its queue in a repetitive nature until the command is removed from its queue. A command response processor  receives all the commands from the command stations and passes the commands to the validation function . The validation function  compares the received command against potential commands that are in the queue of the command sender  that could potentially provide such a result. The validation function  determines one of four potential results from the comparison. First, the results could be simply bad data that is discarded. Second, the results could be partially executed commands which are likewise normally discarded. Third, the results could be valid responses but not relevant to any command sent. Such a case could result from the operator manually changing the state of devices on the model railroad or from another external device, assuming a shared interface to the DCS. Accordingly, the results are validated and passed to the result processor . Fourth, the results could be valid responses relevant to a command sent. The corresponding command is removed from the command sender  and the results passed to the result processor . The commands in the queue of the command sender , as a result of the validation process , are retransmitted a predetermined number of times, then if error still occurs the digital command station is reset, which if the error still persists then the command is removed and the operator is notified of the error.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"APPLICATION PROGRAMMING INTERFACE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Train ToolsTM Interface Description"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Building your own visual interface to a model railroad"},{"entry":"Copyright 1992-1998 KAM Industries."},{"entry":"Computer Dispatcher, Engine Commander, The Conductor, Train Server,"},{"entry":"and Train Tools are Trademarks of KAM Industries, all Rights Reserved."},{"entry":"Questions concerning the product can be EMAILED to:"},{"entry":"traintools@kam.rain.com"},{"entry":"You can also mail questions to:"},{"entry":"KAM Industries"},{"entry":"2373 NW 185th Avenue Suite 416"},{"entry":"Hillsboro, Oregon 97124"},{"entry":"FAX - (503) 291-1221"},{"entry":"Table of contents"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1.","OVERVIEW"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1.1","System Architecture"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["2.","TUTORIAL"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"2.1","Visual BASIC Throttle Example Application"]},{"entry":[{},"2.2","Visual BASIC Throttle Example Source Code"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["3.","IDL COMMAND REFERENCE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"3.1","Introduction"]},{"entry":[{},"3.2","Data Types"]},{"entry":[{},"3.3","Commands to access the server configuration variable"]},{"entry":[{},{},"database"]},{"entry":[{},{},"KamCVGetValue"]},{"entry":[{},{},"KamCVPutValue"]},{"entry":[{},{},"KamCVGetEnable"]},{"entry":[{},{},"KamCVPutEnable"]},{"entry":[{},{},"KamCVGetName"]},{"entry":[{},{},"KamCVGetMinRegister"]},{"entry":[{},{},"KamCVGetMaxRegister"]},{"entry":[{},"3.4","Commands to program configuration variables"]},{"entry":[{},{},"KamProgram"]},{"entry":[{},{},"KamProgramGetMode"]},{"entry":[{},{},"KamProgramGetStatus"]},{"entry":[{},{},"KamProgramReadCV"]},{"entry":[{},{},"KamProgramCV"]},{"entry":[{},{},"KamProgramReadDecoderToDataBase"]},{"entry":[{},{},"KamProgramDecoderFromDataBase"]},{"entry":[{},"3.5","Commands to control all decoder types"]},{"entry":[{},{},"KamDecoderGetMaxModels"]},{"entry":[{},{},"KamDecoderGetModelName"]},{"entry":[{},{},"KamDecoderSetModelToObj"]},{"entry":[{},{},"KamDecoderGetMaxAddress"]},{"entry":[{},{},"KamDecoderChangeOldNewAddr"]},{"entry":[{},{},"KamDecoderMovePort"]},{"entry":[{},{},"KamDecoderGetPort"]},{"entry":[{},{},"KamDecoderCheckAddrInUse"]},{"entry":[{},{},"KamDecoderGetModelFromObj"]},{"entry":[{},{},"KamDecoderGetModelFacility"]},{"entry":[{},{},"KamDecoderGetObjCount"]},{"entry":[{},{},"KamDecoderGetObjAtIndex"]},{"entry":[{},{},"KamDecoderPutAdd"]},{"entry":[{},{},"KamDecoderPutDel"]},{"entry":[{},{},"KamDecoderGetMfgName"]},{"entry":[{},{},"KamDecoderGetPowerMode"]},{"entry":[{},{},"KamDecoderGetMaxSpeed"]},{"entry":[{},"3.6","Commands to control locomotive decoders"]},{"entry":[{},{},"KamEngGetSpeed"]},{"entry":[{},{},"KamEngPutSpeed"]},{"entry":[{},{},"KamEngGetSpeedSteps"]},{"entry":[{},{},"KamEngPutSpeedSteps"]},{"entry":[{},{},"KamEngGetFunction"]},{"entry":[{},{},"KamEngPutFunction"]},{"entry":[{},{},"KamEngGetFunctionMax"]},{"entry":[{},{},"KamEngGetName"]},{"entry":[{},{},"KamEngPutName"]},{"entry":[{},{},"KamEngGetFunctionName"]},{"entry":[{},{},"KamEngPutFunctionName"]},{"entry":[{},{},"KamEngGetConsistMax"]},{"entry":[{},{},"KamEngPutConsistParent"]},{"entry":[{},{},"KamEngPutConsistChild"]},{"entry":[{},{},"KamEngPutConsistRemoveObj"]},{"entry":[{},"3.7","Commands to control accessory decoders"]},{"entry":[{},{},"KamAccGetFunction"]},{"entry":[{},{},"KamAccGetFunctionAll"]},{"entry":[{},{},"KamAccPutFunction"]},{"entry":[{},{},"KamAccPutFunctionAll"]},{"entry":[{},{},"KamAccGetFunctionMax"]},{"entry":[{},{},"KamAccGetName"]},{"entry":[{},{},"KamAccPutName"]},{"entry":[{},{},"KamAccGetFunctionName"]},{"entry":[{},{},"KamAccPutFunctionName"]},{"entry":[{},{},"KamAccRegFeedback"]},{"entry":[{},{},"KamAccRegFeedbackAll"]},{"entry":[{},{},"KamAccDelFeedback"]},{"entry":[{},{},"KamAccDelFeedbackAll"]},{"entry":[{},"3.8","Commands to control the command station"]},{"entry":[{},{},"KamOprPutTurnOnStation"]},{"entry":[{},{},"KamOprPutStartStation"]},{"entry":[{},{},"KamOprPutClearStation"]},{"entry":[{},{},"KamOprPutStopStation"]},{"entry":[{},{},"KamOprPutPowerOn"]},{"entry":[{},{},"KamOprPutPowerOff"]},{"entry":[{},{},"KamOprPutHardReset"]},{"entry":[{},{},"KamOprPutEmergencyStop"]},{"entry":[{},{},"KamOprGetStationStatus"]},{"entry":[{},"3.9","Commands to configure the command station communication"]},{"entry":[{},{},"port"]},{"entry":[{},{},"KamPortPutConfig"]},{"entry":[{},{},"KamPortGetConfig"]},{"entry":[{},{},"KamPortGetName"]},{"entry":[{},{},"KamPortPutMapController"]},{"entry":[{},{},"KamPortGetMaxLogPorts"]},{"entry":[{},{},"KamPortGetMaxPhysical"]},{"entry":[{},"3.10","Commands that control command flow to the command"]},{"entry":[{},{},"station"]},{"entry":[{},{},"KamCmdConnect"]},{"entry":[{},{},"KamCmdDisConnect"]},{"entry":[{},{},"KamCmdCommand"]},{"entry":[{},"3.11","Cab Control Commands"]},{"entry":[{},{},"KamCabGetMessage"]},{"entry":[{},{},"KamCabPutMessage"]},{"entry":[{},{},"KamCabGetCabAddr"]},{"entry":[{},{},"KamCabPutAddrToCab"]},{"entry":[{},"3.12","Miscellaneous Commands"]},{"entry":[{},{},"KamMiscGetErrorMsg"]},{"entry":[{},{},"KamMiscGetClockTime"]},{"entry":[{},{},"KamMiscPutClockTime"]},{"entry":[{},{},"KamMiscGetInterfaceVersion"]},{"entry":[{},{},"KamMiscSaveData"]},{"entry":[{},{},"KamMiscGetControllerName"]},{"entry":[{},{},"KamMiscGetControllerNameAtPort"]},{"entry":[{},{},"KamMiscGetCommandStationValue"]},{"entry":[{},{},"KamMiscSetCommandStationValue"]},{"entry":[{},{},"KamMiscGetCommandStationIndex"]},{"entry":[{},{},"KamMiscMaxControllerID"]},{"entry":[{},{},"KamMiscGetControllerFacility"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"This document is divided into two sections, the Tutorial, and the IDL Command Reference. The tutorial shows the complete code for a simple Visual BASIC program that controls all the major functions of a locomotive. This program makes use of many of the commands described in the reference section. The IDL Command Reference describes each command in detail.","I. Tutorial","A. Visual BASIC Throttle Example Application","The following application is created using the Visual BASIC source code in the next section. It controls all major locomotive functions such as speed, direction, and auxiliary functions.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"A.\u2003\u2003Visual BASIC Throttle Example Source Code"},{"entry":"\u2032Copyright 1998, KAM Industries. All rights reserved."},{"entry":"\u2032"},{"entry":"\u2032\u2003\u2003This is a demonstration program showing the"},{"entry":"\u2032\u2003\u2003integration of VisualBasic and Train Server\u2009\u2122"},{"entry":"\u2032\u2003\u2003interface. You may use this application for non"},{"entry":"\u2032\u2003\u2003commercial usage."},{"entry":"\u2032$Date: $"},{"entry":"\u2032$Author: $"},{"entry":"\u2032$Revision: $"},{"entry":"\u2032$Log: $"},{"entry":"\u2032\u2003\u2003Engine Commander, Computer Dispatcher, Train Server,"},{"entry":"\u2032\u2003\u2003Train Tools, The Conductor and kamind are registered"},{"entry":"\u2032\u2003\u2003Trademarks of KAM Industries. All rights reserved."},{"entry":"\u2032"},{"entry":"\u2032\u2003\u2003This first command adds the reference to the Train"},{"entry":"\u2032\u2003\u2003ServerT Interface object Dim EngCmd As New EngComIfc"},{"entry":"\u2032"},{"entry":"\u2032\u2003\u2003Engine Commander uses the term Ports, Devices and"},{"entry":"\u2032\u2003\u2003Controllers"},{"entry":"\u2032\u2003\u2003Ports ->\u2003These are logical ids where Decoders are"},{"entry":"\u2032\u2003\u2003assigned to. Train ServerT Interface supports a"},{"entry":"\u2032\u2003\u2003limited number of logical ports. You can also think"},{"entry":"\u2032\u2003\u2003of ports as mapping to a command station type. This"},{"entry":"\u2032\u2003\u2003allows you to move decoders between command station"},{"entry":"\u2032\u2003\u2003without losing any information about the decoder"},{"entry":"\u2032"},{"entry":"\u2032\u2003\u2003Devices ->\u2003These are communications channels"},{"entry":"\u2032\u2003\u2003configured in your computer."},{"entry":"\u2032\u2003\u2003You may have a single device (com1) or multiple"},{"entry":"\u2032\u2003\u2003devices"},{"entry":"\u2032\u2003\u2003(COM 1 - COM8, LPT1, Other). You are required to"},{"entry":"\u2032\u2003\u2003map a port to a device to access a command station."},{"entry":"\u2032\u2003\u2003Devices start from ID 0 -> max id (FYI; devices do"},{"entry":"\u2032\u2003\u2003not necessarily have to be serial channel. Always"},{"entry":"\u2032\u2003\u2003check the name of the device before you use it as"},{"entry":"\u2032\u2003\u2003well as the maximum number of devices supported."},{"entry":"\u2032\u2003\u2003The Command"},{"entry":"\u2032\u2003\u2003EngCmd.KamPortGetMaxPhysical(lMaxPhysical, lSerial,"},{"entry":"\u2032\u2003\u2003lParallel) provides means that... lMaxPhysical ="},{"entry":"\u2032\u2003\u2003lSerial + lParallel + lOther"},{"entry":"\u2032"},{"entry":"\u2032\u2003\u2003Controller - These are command the command station"},{"entry":"\u2032\u2003\u2003like LENZ, Digitrax"},{"entry":"\u2032\u2003\u2003Northcoast, EasyDCC, Marklin... It is recommend"},{"entry":"\u2032\u2003\u2003that you check the command station ID before you"},{"entry":"\u2032\u2003\u2003use it."},{"entry":"\u2032\u2003\u2003Errors - All commands return an error status. If"},{"entry":"\u2032\u2003\u2003\u2003\u2003\u2003\u2003\u2003the error value is non zero, then the"},{"entry":"\u2032\u2003\u2003\u2003\u2003\u2003\u2003\u2003other return arguments are invalid. In"},{"entry":"\u2032\u2003\u2003\u2003\u2003\u2003\u2003\u2003general, non zero errors means command was"},{"entry":"\u2032\u2003\u2003\u2003\u2003\u2003\u2003\u2003not executed. To get the error message,"},{"entry":"\u2032\u2003\u2003\u2003\u2003\u2003\u2003\u2003you need to call KamMiscErrorMessage and"},{"entry":"\u2032\u2003\u2003\u2003\u2003\u2003\u2003\u2003supply the error number"},{"entry":"\u2032"},{"entry":"\u2032\u2003\u2003To Operate your layout you will need to perform a"},{"entry":"\u2032\u2003\u2003mapping between a Port (logical reference), Device"},{"entry":"\u2032\u2003\u2003(physical communications channel) and a Controller"},{"entry":"\u2032\u2003\u2003(command station) for the program to work. All"},{"entry":"\u2032\u2003\u2003references uses the logical device as the reference"},{"entry":"\u2032\u2003\u2003device for access."},{"entry":"\u2032"},{"entry":"\u2032\u2003\u2003Addresses used are an object reference. To use an"},{"entry":"\u2032\u2003\u2003address you must add the address to the command"},{"entry":"\u2032\u2003\u2003station using KamDecoderPutAdd ... One of the return"},{"entry":"\u2032\u2003\u2003values from this operation is an object reference"},{"entry":"\u2032\u2003\u2003that is used for control."},{"entry":"\u2032"},{"entry":"\u2032\u2003\u2003We need certain variables as global objects; since"},{"entry":"\u2032\u2003\u2003the information is being used multiple times"},{"entry":"Dim iLogicalPort, iController, iComPort"},{"entry":"Dim iPortRate, iPortParity, iPortStop, iPortRetrans,"},{"entry":"\u2003\u2003iPortWatchdog, iPortFlow, iPortData"},{"entry":"Dim lEngineObject As Long, iDecoderClass As Integer,\u2003iDecoderType As Integer"},{"entry":"Dim lMaxController As Long"},{"entry":"Dim lMaxLogical As Long, lMaxPhysical As Long, lMaxSerial\u2003\u2003As Long,"},{"entry":"lMaxParallel As Long"},{"entry":"\u2032**********************************"},{"entry":"\u2032Form load function"},{"entry":"\u2032- Turn of the initial buttons"},{"entry":"\u2032- Set he interface information"},{"entry":"\u2032**********************************"},{"entry":"Private Sub Form load( )"},{"entry":"\u2003\u2003Dim strVer As String, strCom As String, strCntrl As\u2003\u2003\u2003\u2003\u2003\u2003\u2003String"},{"entry":"\u2003\u2003Dim iError As Integer"},{"entry":"\u2003\u2003\u2032Get the interface version information"},{"entry":"\u2003\u2003SetButtonState (False)"},{"entry":"\u2003\u2003iError = EngCmd.KamMiscGetInterfaceVersion(strVer)"},{"entry":"\u2003\u2003If (iError) Then"},{"entry":"\u2003\u2003\u2003\u2003\u2003MsgBox ((\u201cTrain Server not loaded. Check"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003DCOM-95\u201d))"},{"entry":"\u2003\u2003iLogicalPort = 0"},{"entry":"\u2003\u2003LogPort.Caption = iLogicalPort"},{"entry":"\u2003\u2003ComPort.Caption = \u201c???\u201d"},{"entry":"\u2003\u2003Controller.Caption = \u201cUnknown\u201d"},{"entry":"Else"},{"entry":"\u2003\u2003MsgBox((\u201cSimulation(COM1) Train Server -- \u201d & "},{"entry":"\u2003\u2003\u2003\u2003\u2003strVer))"},{"entry":"\u2032********************************************"},{"entry":"\u2032Configuration information; Only need to"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003 change these values to use a different"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003 controller..."},{"entry":"\u2032********************************************"},{"entry":"\u2032 UNKNOWN \u20030 \/\/ Unknown control type"},{"entry":"\u2032 SIMULAT\u2003\u20031 \/\/ Interface simulator"},{"entry":"\u2032 LENZ_1x\u2003\u20032 \/\/ Lenz serial support module"},{"entry":"\u2032 LENZ_2x\u2003\u20033 \/\/ Lenz serial support module"},{"entry":"\u2032 DIGIT_DT200 4 \/\/ Digitrax direct drive"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003support using DT200"},{"entry":"\u2032 DIGIT_DCS100 5 \/\/ Digitrax direct drive"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003support using DCS100"},{"entry":"\u2032 MASTERSERIES 6 \/\/ North Coast engineering"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003master Series"},{"entry":"\u2032 SYSTEMONE\u2003\u2003\u20037 \/\/ System One"},{"entry":"\u2032 RAMFIX \u2003\u20038 \/\/ RAMFIxx system"},{"entry":"\u2032 DYNATROL\u2003\u20029 \/\/ Dynatrol system"},{"entry":"\u2032 Northcoast binary 10 \/\/ North Coast binary"},{"entry":"\u2032 SERIAL\u2003\u200311 \/\/ NMRA Serial"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003interface"},{"entry":"\u2032 EASYDCC\u2003\u200312 \/\/ NMRA Serial interface"},{"entry":"\u2032 MRK6050\u2003\u200313 \/\/ 6050 Marklin interface"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003(AC and DC)"},{"entry":"\u2032 MRK6023\u2003\u2003 14 \/\/ 6023 Marklin hybrid"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 interface (AC)"},{"entry":"\u2032 ZTC \u2003\u2003 15 \/\/ ZTC Systems ltd"},{"entry":"\u2032 DIGIT_PR\u2003\u200216 \/\/ Digitrax direct drive"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003support using PR1"},{"entry":"\u2032 DIRECT\u2003\u200217 \/\/ Direct drive interface"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003routine"},{"entry":"\u2032*****************************************************************"},{"entry":"iLogicalPort = 1 \u2032Select Logical port 1 for"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003communications"},{"entry":"iController = 1 \u2032Select controller from the list"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003above."},{"entry":"iComPort = 0 \u2032 use COM1; 0 means com1 (Digitrax must"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003use Com1 or Com2)"},{"entry":"\u2003\u2003\u2003\u2032Digitrax Baud rate requires 16.4K!"},{"entry":"\u2003\u2003\u2003\u2032Most COM ports above Com2 do not"},{"entry":"\u2003\u2003\u2003\u2032support 16.4K. Check with the"},{"entry":"\u2003\u2003\u2003\u2032manufacture of your smart com card"},{"entry":"\u2003\u2003\u2003\u2032for the baud rate. Keep in mind that"},{"entry":"\u2003\u2003\u2003\u2032Dumb com cards with serial port"},{"entry":"\u2003\u2003\u2003\u2032support Com1 - Com4 can only support"},{"entry":"\u2003\u2003\u2003\u20322 com ports (like com1\/com2"},{"entry":"\u2003\u2003\u2003\u2032or com3\/com4)"},{"entry":"\u2003\u2003\u2003\u2032If you change the controller, do not"},{"entry":"\u2003\u2003\u2003\u2032forget to change the baud rate to"},{"entry":"\u2003\u2003\u2003\u2032match the command station. See your"},{"entry":"\u2003\u2003\u2003\u2032user manual for details"},{"entry":"\u2032****************************************************************"},{"entry":"\u2003\u2003\u2003\u2032 0: \/\/ Baud rate is 300"},{"entry":"\u2003\u2003\u2003\u2032 1: \/\/ Baud rate is 1200"},{"entry":"\u2003\u2003\u2003\u2032 2: \/\/ Baud rate is 2400"},{"entry":"\u2003\u2003\u2003\u2032 3: \/\/ Baud rate is 4800"},{"entry":"\u2003\u2003\u2003\u2032 4: \/\/ Baud rate is 9600"},{"entry":"\u2003\u2003\u2003\u2032 5: \/\/ Baud rate is 14.4"},{"entry":"\u2003\u2003\u2003\u2032 6: \/\/ Baud rate is 16.4"},{"entry":"\u2003\u2003\u2003\u2032 7: \/\/ Baud rate is 19.2"},{"entry":"\u2003\u2003\u2003iPortRate = 4"},{"entry":"\u2003\u2003\u2003\u2032 \u2003\u2003\u2002 Parity values 0-4 -> no, odd, even, mark, space"},{"entry":"\u2003\u2003\u2003iPortParity = 0"},{"entry":"\u2003\u2003\u2003\u2032 \u2003\u2003\u2002 Stop bits 0,1,2 -> 1, 1.5, 2"},{"entry":"\u2003\u2003\u2003iPortStop = 0"},{"entry":"\u2003\u2003\u2003iPortRetrans = 10"},{"entry":"\u2003\u2003\u2003iPortWatchdog = 2048"},{"entry":"\u2003\u2003\u2003iPortFlow = 0"},{"entry":"\u2003\u2003\u2003\u2032 \u2003\u2003\u2002 Data bits 0 -> 7 Bits, 1-> 8 bits"},{"entry":"\u2003\u2003\u2003iPortData = 1"},{"entry":"\u2003\u2032Display the port and controller information"},{"entry":"\u2003iError = EngCmd.KamPortGetMaxLogPorts(lMaxLogical)"},{"entry":"\u2003iError = EngCmd.KamPortGetMaxPhysical(lMaxPhysical,"},{"entry":"\u2003\u2003\u2003\u2003\u2003lMaxSeria1, lMaxParallel)"},{"entry":"\u2003\u2032 Get the port name and do some checking..."},{"entry":"\u2003iError = EngCmd.KamPortGetName(iComPort, strCom)"},{"entry":"\u2003SetError (iError)"},{"entry":"\u2003If (iComPort > lMaxSerial) Then MsgBox (\u201cCom port"},{"entry":"\u2003\u2003\u2003\u2003our of range\u201d)"},{"entry":"\u2003iError ="},{"entry":"\u2003\u2003\u2003\u2003EngCmd.KamMiscGetControllerName(iController,"},{"entry":"\u2003\u2003\u2003\u2003strCntrl)"},{"entry":"\u2003If (iLogicalPort > lMaxLogical) Then MsgBox (\u201cLogical port out of range\u201d)"},{"entry":"\u2003\u2003\u2003\u2003SetError (iError)"},{"entry":"\u2003End If"},{"entry":"\u2003\u2003\u2032Display values in Throttle.."},{"entry":"\u2003\u2003LogPort.Caption = iLogicalPort"},{"entry":"\u2003\u2003ComPort.Caption = strCom"},{"entry":"\u2003\u2003Controller.Caption = strCntrl"},{"entry":"End Sub"},{"entry":"\u2032******************************"},{"entry":"\u2032Send Command"},{"entry":"\u2032Note:"},{"entry":"\u2032\u2003\u2003Please follow the command order. Order is important"},{"entry":"\u2032\u2003\u2003for the application to work!"},{"entry":"\u2032******************************"},{"entry":"Private Sub Command_Click( )"},{"entry":"\u2003\u2003\u2032Send the command from the interface to the command station, use the"},{"entry":"\u2003\u2003engineObject"},{"entry":"\u2003\u2003Dim iError, iSpeed As Integer"},{"entry":"\u2003\u2003If Not Connect.Enabled Then"},{"entry":"\u2003\u2003\u2003\u2003\u2032TrainTools interface is a caching interface. \u2032This means that you need to"},{"entry":"\u2003\u2003\u2003\u2003set up the CV's or \u2032other operations first; then execute the \u2032command."},{"entry":"\u2003\u2003\u2003\u2003iSpeed = Speed.Text"},{"entry":"\u2003\u2003\u2003\u2003iError ="},{"entry":"\u2003\u2003EngCmd.KamEngPutFunction(lEngineObject, 0, F0.Value)"},{"entry":"\u2003\u2003\u2003\u2003iError = EngCmd.KamEngPutFunction(lEngineObject, 1, F1.Value)"},{"entry":"\u2003\u2003\u2003\u2003iError = EngCmd.KamEngPutFunction(lEngineObject, 2, F2.Value)"},{"entry":"\u2003\u2003\u2003\u2003iError = EngCmd.KamEngPutFunction(lEngineObject, 3, F3.Value)"},{"entry":"\u2003\u2003\u2003\u2003iError = EngCmd.KamEngPutSpeed(lEngineObject, iSpeed,"},{"entry":"\u2003\u2003\u2003\u2003Direction.Value)"},{"entry":"\u2003\u2003\u2003\u2003If iError = 0 Then iError = EngCmd.KamCmdCommand(lEngineObject)"},{"entry":"\u2003\u2003\u2003\u2003SetError (iError)"},{"entry":"\u2003\u2003\u2002End If"},{"entry":"End Sub"},{"entry":"\u2032******************************"},{"entry":"\u2032Connect Controller"},{"entry":"\u2032******************************"},{"entry":"Private Sub Connect_ Click( )"},{"entry":"\u2003\u2003Dim iError As Integer"},{"entry":"\u2003\u2003\u2032 These are the index values for setting up the port for use"},{"entry":"\u2003\u2003\u2032 PORT_RETRANS\u2003\u2003\u2003\u20030 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_RATE\u2002\u2003\u2003\u2003\u2003\u2003\u20021 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_PARITY\u2002\u2003\u2003\u2003\u2003\u20022 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_STOP\u2003\u2003\u2003\u2002\u2002\u20023 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_WATCHDOG \u2003\u2003\u20024 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_FLOW \u2003\u2003\u2003\u2003\u2003\u20025 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_DATABITS\u2003\u20036 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_DEBUG\u2002\u2003\u2003\u2003\u2003\u20027 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_PARALLEL \u2002\u20038 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2032These are the index values for setting up the"},{"entry":"\u2003\u2003\u2003\u2003\u2003port for use"},{"entry":"\u2003\u2003\u2032 PORT_RETRANS\u2003\u2003\u2003\u20030 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_RATE\u2003\u2003\u2003\u2003\u2003\u20031 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_PARITY\u2003\u2003\u2003\u2003\u20032 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_STOP \u2003\u2003\u2003\u20033 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_WATCHDOG\u2003\u2003\u20034 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_FLOW\u2003\u2003\u2003\u2003\u2003\u20035 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_DATABITS\u2003\u20026 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_DEBUG\u2003\u2003\u2003\u2003\u2003 7 \/\/ Retrans index"},{"entry":"\u2003\u2003\u2032 PORT_PARALLEL\u2003 8 \/\/ Retrans index"},{"entry":"\u2003\u2003iError = EngCmd.KamPortPutConfig(iLogicalPort, 0, iPortRetrans, 0) \u2032 setting"},{"entry":"\u2003\u2003PORT_RETRANS"},{"entry":"\u2003\u2003iError = EngCmd.KamPortPutConfig(iLogicalPort, 1, iPortRate, 0) \u2032 setting"},{"entry":"\u2003\u2003PORT_RATE"},{"entry":"\u2003\u2003iError = EngCmd.KamPortPutConfig(iLogicalPort, 2, iPortParity, 0) \u2032 setting"},{"entry":"\u2003\u2003PORT_PARITY"},{"entry":"\u2003\u2003iError = EngCmd.KamPortPutConfig(iLogicalPort, 3, iPortStop, 0) \u2032 setting"},{"entry":"\u2003\u2003PORT_STOP"},{"entry":"\u2003\u2003iError = EngCmd.KamPortPutConfig(iLogicalPort, 4, iPortWatchdog, 0) \u2032 setting"},{"entry":"\u2003\u2003PORT_WATCHDOG"},{"entry":"\u2003\u2003iError = EngCmd.KamPortPutConfig(iLogicalPort, 5, iPortFlow, 0) \u2032 setting"},{"entry":"\u2003\u2003PORT_FLOW"},{"entry":"\u2003\u2003iError = EngCmd.KamPortPutConfig(iLogicalPort, 6, iPortData, 0) \u2032 setting"},{"entry":"\u2003\u2003PORT_DATABITS"},{"entry":"\u2032 We need to set the appropriate debug mode for display.. "},{"entry":"\u2032 this command can only be sent if the following is true"},{"entry":"\u2032 -Controller is not connected"},{"entry":"\u2032 -port has not been mapped"},{"entry":"\u2032 -Not share ware version of application (Shareware"},{"entry":"\u2032\u2003\u2003 always set to 130)"},{"entry":"\u2032 Write Display Log Debug"},{"entry":"\u2032 File Win Level Value"},{"entry":"\u2032 1\u2003\u2003 + 2 + 4 = 7 -> LEVEL1 -- put packets into"},{"entry":"\u2032 \u2003\u2003queues"},{"entry":"\u2032 1 + 2 + 8 = \u200311\u2003 -> LEVEL2 -- Status messages"},{"entry":"\u2032 \u2003\u2003send to window"},{"entry":"\u2032 1 + 2 + 16 = 19 -> LEVEL3 --"},{"entry":"\u2032 1 + 2 + 32 = 35 -> LEVEL4 -- All system"},{"entry":"\u2032\u2003\u2003semaphores\/critical sections"},{"entry":"\u2032 1 + 2 + 64 = 67 -> LEVEL5 -- detailed"},{"entry":"\u2032\u2003\u2003debugging information"},{"entry":"\u2032 1 + 2 + 128 = 131 -> COMMONLY -- Read comm write"},{"entry":"\u2032 \u2003\u2002comm ports"},{"entry":"\u2032"},{"entry":"\u2032You probably only want to use values of 130. This will \u2032give you a display what is read"},{"entry":"or written to the \u2032controller. If you want to write the information to \u2032disk, use 131. The"},{"entry":"other information is not valid for \u2032end users."},{"entry":"\u2032 Note: 1.\u2003\u2003This does effect the performance of you"},{"entry":"\u2032 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 system; 130 is a save value for debug"},{"entry":"\u2032 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 display. Always set the key to 1, a value"},{"entry":"\u2032 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 of 0 will disable debug"},{"entry":"' \u2003\u2002\u2003 2.\u2003\u2003The Digitrax control codes displayed are"},{"entry":"' \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 encrypted. The information that you"},{"entry":"\u2032 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 determine from the control codes is that"},{"entry":"\u2032 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 information is sent (S) and a response is"},{"entry":"\u2032 \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 received (R)"},{"entry":"\u2032 "},{"entry":"iDebugMode = 130"},{"entry":"iValue = Value.Text\u2032 Display value for reference"},{"entry":"iError = EngCmd.KamPortPutConfig(iLogicalPort, 7, iDebug,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003iValue)\u2032 setting PORT_DEBUG"},{"entry":"\u2032Now map the Logical Port, Physical device, Command"},{"entry":"\u2003\u2003\u2002station and Controller"},{"entry":"iError = EngCmd.KamPortPutMapController(iLogicalPort,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003iController, iComPort)"},{"entry":"iError = EngCmd.KamCmdConnect(iLogicalPort)"},{"entry":"iError = EngCmd.KamOprPutTurnOnStation(iLogicalPort)"},{"entry":"If (iError) Then"},{"entry":"\u2003\u2003\u2003SetButtonState (False)"},{"entry":"\u2002Else"},{"entry":"\u2003\u2003\u2003SetButtonState (True)"},{"entry":"\u2002End If"},{"entry":"SetError (iError) \u2032Displays the error message and error"},{"entry":"\u2003\u2003\u2003number"},{"entry":"End Sub"},{"entry":"\u2032******************************"},{"entry":"\u2032Set the address button"},{"entry":"\u2032******************************"},{"entry":"Private Sub DCCAddr_Click( )"},{"entry":"\u2003\u2003\u2003Dim iAddr, iStatus As Integer"},{"entry":"\u2003\u2003\u2032 All addresses must be match to a logical port to"},{"entry":"\u2003\u2003operate"},{"entry":"\u2003\u2003iDecoderType = 1\u2003\u2032 Set the decoder type to an NMRA"},{"entry":"\u2003\u2003\u2003\u2003\u2003baseline decoder ( 1 - 8 reg)"},{"entry":"\u2003\u2003iDecoderClass = 1\u2003\u2032 Set the decoder class to Engine"},{"entry":"\u2003\u2003decoder (there are only two classes of decoders;"},{"entry":"\u2003\u2003Engine and Accessory"},{"entry":"\u2003\u2003\u2032Once we make a connection, we use the lEngineObject \u2032as the reference object to"},{"entry":"\u2003\u2003send control information"},{"entry":"\u2003\u2003If (Address.Text > 1) Then"},{"entry":"\u2003\u2003\u2003\u2003\u2003iStatus = EngCmd.KamDecoderPutAdd(Address.Text,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003iLogicalPort, iLogicalPort, 0,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003iDecoderType, lEngineObject)"},{"entry":"\u2003\u2003SetError (iStatus)"},{"entry":"\u2003\u2003If(lEngineObject) Then"},{"entry":"\u2003\u2003\u2003\u2003\u2003Command.Enabled = True \u2032turn on the control (send) button"},{"entry":"\u2003\u2003\u2003\u2003\u2003Throttle.Enabled = True \u2032 Turn on the throttle"},{"entry":"\u2003\u2003\u2003Else"},{"entry":"\u2003\u2003\u2003\u2003\u2003MsgBox (\u201cAddress not set, check error message\u201d)"},{"entry":"\u2003\u2003\u2003\u2003\u2003End If"},{"entry":"\u2003\u2003Else"},{"entry":"\u2003\u2003\u2003\u2003\u2003MsgBox (\u201cAddress must be greater then 0 and"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003less then 128\u201d)"},{"entry":"\u2003\u2003\u2003\u2003\u2003End If"},{"entry":"End Sub"},{"entry":"\u2032*******************"},{"entry":"\u2032Disconenct button"},{"entry":"\u2032*******************"},{"entry":"Private Sub Disconnect_Click( )"},{"entry":"\u2003\u2003\u2003Dim iError As Integer"},{"entry":"\u2003\u2003\u2003iError = EngCmd.KamCmdDisConnect(iLogicalPort)"},{"entry":"\u2003\u2003\u2003SetError (iError)"},{"entry":"\u2003\u2003\u2003SetButtonState (False)"},{"entry":"End Sub"},{"entry":"\u2032**********************"},{"entry":"\u2032Display error message"},{"entry":"\u2032**********************"},{"entry":"Private Sub SetError(iError As Integer)"},{"entry":"\u2003\u2003\u2003Dim szError As String"},{"entry":"\u2003\u2003\u2003Dim iStatus"},{"entry":"\u2003\u2003\u2003\u2032 This shows how to retrieve a sample error message from the interface for the"},{"entry":"\u2003\u2003\u2003status received."},{"entry":"\u2003\u2003\u2003iStatus = EngCmd.KamMiscGetErrorMsg(iError, szError)"},{"entry":"\u2003\u2003ErrorMsg.Caption = szError"},{"entry":"\u2003\u2003Result.Caption = Str(iStatus)"},{"entry":"End Sub"},{"entry":"\u2032**************************"},{"entry":"\u2032Set the Form button state"},{"entry":"\u2032**************************"},{"entry":"Private Sub SetButtonState(iState As Boolean)"},{"entry":"\u2003\u2003\u2003\u2032We set the state of the buttons; either connected or disconnected"},{"entry":"\u2003\u2003\u2003If (iState) Then"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Connect.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Disconnect.Enabled = True"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003ONCmd.Enabled = True"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003OffCmd.Enabled = True"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003DCCAddr.Enabled = True"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003UpDownAddress.Enabled = True"},{"entry":"\u2003\u2003\u2003\u2032Now we check to see if the Engine Address has been \u2032set; if it has we enable the"},{"entry":"\u2003\u2003\u2003send button"},{"entry":"\u2003\u2003\u2003If (lEngineObject > 0) Then"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Command.Enabled = True"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Throttle.Enabled = True"},{"entry":"\u2003\u2003\u2002\u2003Else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Command.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Throttle.Enabled = False"},{"entry":"\u2003\u2003\u2002\u2003End If"},{"entry":"\u2003\u2003\u2003Else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Connect.Enabled = True"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Disconnect.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Command.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003ONCmd.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003OffCmd.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003DCCAddr.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003UpDownAddress.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Throttle.Enabled = False"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003End If"},{"entry":"End Sub"},{"entry":"\u2032*******************"},{"entry":"\u2032Power Off function"},{"entry":"\u2032*******************"},{"entry":"Private Sub OffCmd_Click( )"},{"entry":"\u2003\u2003\u2003Dim iError As Integer"},{"entry":"\u2003\u2003\u2003iError = EngCmd.KamOprPutPowerOff(iLogicalPort)"},{"entry":"\u2003\u2003\u2003SetError (iError)"},{"entry":"End Sub"},{"entry":"\u2032******************"},{"entry":"\u2032Power On function"},{"entry":"\u2032******************"},{"entry":"Private Sub ONCmd_Click( )"},{"entry":"\u2003\u2003\u2003Dim iError As Integer"},{"entry":"\u2003\u2003\u2003iError = EngCmd.KamOprPutPowerOn(iLogicalPort)"},{"entry":"\u2003\u2003\u2003SetError (iError)"},{"entry":"End Sub"},{"entry":"\u2032************************"},{"entry":"\u2032Throttle slider control"},{"entry":"\u2032************************"},{"entry":"Private Sub Throttle_Click( )"},{"entry":"\u2003\u2003\u2003If (lEngineObject) Then"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003If (Throttle.Value > 0) Then"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003Speed.Text = Throttle.Value"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003End If"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003End If"},{"entry":"End Sub"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"A. Introduction","This document describes the IDL interface to the KAM Industries Engine Commander Train Server. The Train Server DCOM server may reside locally or on a network node This server handles all the background details of controlling your railroad. You write simple, front end programs in a variety of languages such as BASIC, Java, or C++ to provide the visual interface to the user while the server handles the details of communicating with the command station, etc.","A. Data Types","Data is passed to and from the IDL interface using a several primitive data types. Arrays of these simple types are also used. The exact type passed to and from your program depends on the programming language you are using.","The following primitive data types are used:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["IDL Type","BASIC Type","C++ Type","Java Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["short","short","short","short","Short signed integer"]},{"entry":["int","int","int","int","Signed integer"]},{"entry":["BSTR","BSTR","BSTR","BSTR","Text string"]},{"entry":["long","long","long","long","Unsigned 32 bit value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":[{},{},"Valid",{},{},{},{}]},{"entry":[{},"CV","CV's"]},{"entry":["Name ID","Range","Functions","Address","Range","Speed","Steps"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NMRA","0","None","None","2","1-99","14"]},{"entry":"Compatible"},{"entry":["Baseline","1","1-8","1-8","9","1-127","14"]},{"entry":["Extended","2","1-106","1-9, 17,","9","1-10239","14, 28,"]},{"entry":[{},{},{},"18, 19,",{},{},"128"]},{"entry":[{},{},{},"23, 24,"]},{"entry":[{},{},{},"29, 30,"]},{"entry":[{},{},{},"49,"]},{"entry":[{},{},{},"66-95"]},{"entry":["All Mobile","3","1-106","1-106","9","1-10239","14, 28,"]},{"entry":[{},{},{},{},{},{},"128"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Name ID","CV Range","Valid CV's Functions","Address","Range"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Accessory","4","513-593\u2002","513-593","8","0-511"]},{"entry":["All Stationary","5","513-1024","513-1024","8","0-511"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":"A long\/DecoderObject\/D value is returned by the KamDecoderPutAdd call if the decoder is successfully registered with the server. This unique opaque ID should be used for all subsequent calls to reference this decoder."}]}}]}},"br":{}},"This section describes the commands that access the server configuration variables (CV) database. These CVs are stored in the decoder and control many of its characteristics such as its address. For efficiency, a copy of each CV value is also stored in the server database. Commands such as KamCVGetValue and KamCVPutValue communicate only with the server, not the actual decoder. You then use the programming commands in the next section to transfer CVs to and from the decoder.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCVGetValue"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iCVReg","int 1-1024","2","In","CV register"]},{"entry":["pCVValue","int *","3","Out","Pointer to CV value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Range is 1-1024. Maximum CV for this decoder is given by"},{"entry":"KamCVGetMaxRegister."},{"entry":"3 CV Value pointed to has a range of 0 to 255."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamCVGetValue takes the decoder object ID and"},{"entry":"configuration variable (CV) number as parameters. It sets the memory"},{"entry":"pointed to by pCVValue to the value of the server copy of the"},{"entry":"configuration variable."}]}}]}}},{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCVPutValue"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iCVReg","int 1-1024","2","In","CV register"]},{"entry":["iCVValue","int 0-255",{},"In","CV value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum CV is 1024. Maximum CV for this decoder is given by"},{"entry":"KamCVGetMaxRegister."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg). KamCVPutValue takes the decoder object"},{"entry":"ID, configuration variable (CV) number, and a new CV value as"},{"entry":"parameters. It sets the server copy of the specified decoder CV to"},{"entry":"iCVValue."}]}}]}}},{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCVGetEnable"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object"]},{"entry":[{},{},{},{},"ID"]},{"entry":["iCVReg","int 1-1024","2","In","CV number"]},{"entry":["pEnable","int *","3","Out","Pointer to CV bit"]},{"entry":[{},{},{},{},"mask"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum CV is 1024. Maximum CV for this decoder is given by"},{"entry":"KamCVGetMaxRegister."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","0x0001 - SET_CV_INUSE"]},{"entry":[{},"0x0002 - SET_CV_READ_DIRTY"]},{"entry":[{},"0x0004 - SET_CV_WRITE_DIRTY"]},{"entry":[{},"0x0008 - SET_CV_ERROR_READ"]},{"entry":[{},"0x0010 - SET_CV_ERROR_WRITE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamCVGetEnable takes the decoder object ID,"},{"entry":"configuration variable (CV) number, and a pointer to store the enable"},{"entry":"flag as parameters. It sets the location pointed to by pEnable."}]}}]}}},{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCVPutEnable"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iCVReg","int 1-1024","2","In","CV number"]},{"entry":["iEnable","int","3","In","CV bit mask"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum CV is 1024. Maximum CV for this decoder is given by"},{"entry":"KamCVGetMaxRegister."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","0x0001 - SET_CV_INUSE"]},{"entry":[{},"0x0002 - SET_CV_READ_DIRTY"]},{"entry":[{},"0x0004 - SET_CV_WRITE_DIRTY"]},{"entry":[{},"0x0008 - SET_CV_ERROR_READ"]},{"entry":[{},"0x0010 - SET_CV_ERROR_WRITE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg). KamCVPutEnable takes the decoder"},{"entry":"object ID, configuration variable (CV) number, and a new enable"},{"entry":"state as parameters. It sets the server copy of the CV bit mask to"},{"entry":"iEnable."}]}}]}}},{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCVGetName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iCV","int 1-1024",{},"In","CV number"]},{"entry":["pbsCVNameString","BSTR*","1","Out","Pointer to CV"]},{"entry":[{},{},{},{},"name string"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Exact return type depends on language. It is Cstring* for C++. Empty"},{"entry":"string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamCVGetName takes a configuration variable"},{"entry":"(CV) number as a parameter. It sets the memory pointed to by"},{"entry":"pbsCVNameString to the name of the CV as defined in NMRA"},{"entry":"Recommended Practice RP 9.2.2."}]}}]}}},{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCVGetMinRegister"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["pMinRegister","int*","2","Out","Pointer to min CV"]},{"entry":[{},{},{},{},"register number"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Normally 1-1024. 0 on error or if decoder does not support CVs."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamCVGetMinRegister takes a decoder object"},{"entry":"ID as a parameter. It sets the memory pointed to by pMinRegister to"},{"entry":"the minimum possible CV register number for the specified decoder."}]}}]}}},{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCVGetMaxRegister"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["pMaxRegister","int*","2","Out","Pointer to max CV"]},{"entry":[{},{},{},{},"register number"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Normally 1-1024. 0 on error or if decoder does not support CVs."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamCVGetMaxRegister takes a decoder object"},{"entry":"ID as a parameter. It sets the memory pointed to by pMaxRegister"},{"entry":"to the maximum possible CV register number for the specified decoder."}]}}]}},"br":{}},"This section describes the commands read and write decoder configuration variables (CVs). You should initially transfer a copy of the decoder CVs to the server using the KamProgramReadDecoderToDataBase command. You can then read and modify this server copy of the CVs. Finally, you can program one or more CVs into the decoder using the KamProgramCV or KamProgramDecoderFromDataBase command. Not that you must first enter programming mode by issuing the KamProgram command before any programming can be done.",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamProgram"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iProgLogPort","int","2","In","Logical"]},{"entry":[{},"1-65535",{},{},"programming"]},{"entry":[{},{},{},{},"port ID"]},{"entry":["iProgMode","int","3","In","Programming mode"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","0 - PROGRAM_MODE_NONE"]},{"entry":[{},"1 - PROGRAM_MODE_ADDRESS"]},{"entry":[{},"2 - PROGRAM_MODE_REGISTER"]},{"entry":[{},"3 - PROGRAM_MODE_PAGE"]},{"entry":[{},"4 - PROGRAM_MODE_DIRECT"]},{"entry":[{},"5 - DCODE_PRGMODE_OPS_SHORT"]},{"entry":[{},"6 - PROGRAM_MODE_OPS_LONG"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamProgram take the decoder object ID, logical programming port ID,"},{"entry":"and programming mode as parameters. It changes the command"},{"entry":"station mode from normal operation"},{"entry":"(PROGRAM_MODE_NONE) to the specified programming mode."},{"entry":"Once in programming modes, any number of programming commands"},{"entry":"may be called. When done, you must call KamProgram with a parameter"},{"entry":"of PROGRAM_MODE_NONE to return to normal operation."}]}}]}}},{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamProgramGetMode"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iProgLogPort","int","2","In","Logical"]},{"entry":[{},"1-65535",{},{},"programming"]},{"entry":[{},{},{},{},"port ID"]},{"entry":["piProgMode","int*","3","Out","Programming mode"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","0 - PROGRAM_MODE_NONE"]},{"entry":[{},"1 - PROGRAM_MODE_ADDRESS"]},{"entry":[{},"2 - PROGRAM_MODE_REGISTER"]},{"entry":[{},"3 - PROGRAM_MODE_PAGE"]},{"entry":[{},"4 - PROGRAM_MODE_DIRECT"]},{"entry":[{},"5 - DCODE_PRGMODE_OPS_SHORT"]},{"entry":[{},"6 - PROGRAM_MODE_OPS_LONG"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamProgramGetMode take the decoder object ID, logical programming"},{"entry":"port ID, and pointer to a place to store the programming mode as"},{"entry":"parameters. It sets the memory pointed to by piProgMode to the"},{"entry":"present programming mode."}]}}]}}},{"@attributes":{"id":"p-0069","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamProgramGetStatus"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iCVReg","int 0-1024","2","In","CV number"]},{"entry":["piCVAllStatus","int*","3","Out","Or'd decoder"]},{"entry":[{},{},{},{},"programming"]},{"entry":[{},{},{},{},"status"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 0 returns OR'd value for all CVs. Other values return status for"},{"entry":"just that CV."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","0x0001 - SET_CV_INUSE"]},{"entry":[{},"0x0002 - SET_CV_READ_DIRTY"]},{"entry":[{},"0x0004 - SET_CV_WRITE_DIRTY"]},{"entry":[{},"0x0008 - SET_CV_ERROR_READ"]},{"entry":[{},"0x0010 - SET_CV_ERROR_WRITE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamProgramGetStatus take the decoder object ID and pointer to a"},{"entry":"place to store the OR'd decoder programming status as parameters."},{"entry":"It sets the memory pointed to by piProgMode to the present"},{"entry":"programming mode."}]}}]}}},{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamProgramReadCV"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iCVReg","int","2","In","CV number"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum CV is 1024. Maximum CV for this decoder is given by"},{"entry":"KamCVGetMaxRegister."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamProgramCV takes the decoder object ID, configuration variable"},{"entry":"(CV) number as parameters. It reads the specified CV variable value"},{"entry":"to the server database."}]}}]}}},{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamProgramCV"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iCVReg","int","2","In","CV number"]},{"entry":["iCVValue","int 0-255",{},"In","CV value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum CV is 1024. Maximum CV for this decoder is given by"},{"entry":"KamCVGetMaxRegister."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamProgramCV takes the decoder object ID, configuration variable"},{"entry":"(CV) number, and a new CV value as parameters. It programs"},{"entry":"(writes) a single decoder CV using the specified value as"},{"entry":"source data."}]}}]}}},{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamProgramReadDecoderToDataBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamProgramReadDecoderToDataBase takes the decoder object ID as"},{"entry":"a parameter. It reads all enabled CV values from the decoder and"},{"entry":"stores them in the server database."}]}}]}}},{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamProgramDecoderFromDataBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamProgramDecoderFromDataBase takes the decoder object ID as a"},{"entry":"parameter. It programs (writes) all enabled decoder CV values"},{"entry":"using the server copy of the CVs as source data."}]}}]}},"br":{}},"This section describes the commands that all decoder types. These commands do things such getting the maximum address a given type of decoder supports, adding decoders to the database, etc.",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetMaxModels"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["piMaxModels","int *","1","Out","Pointer to Max"]},{"entry":[{},{},{},{},"model ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Normally 1-65535. 0 on error."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamDecoderGetMaxModels takes no parameters. It sets the memory"},{"entry":"pointed to by piMaxModels to the maximum decoder type ID."}]}}]}}},{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetModelName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iModel","int 1-65535","1","In","Decoder type ID"]},{"entry":["pbsModelName","BSTR *","2","Out","Decoder name"]},{"entry":[{},{},{},{},"string"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamDecoderGetMaxModels."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamPortGetModelName takes a decoder type ID and a pointer to"},{"entry":"a string as parameters."},{"entry":"It sets the memory pointed to by pbsModelName to a BSTR containing"},{"entry":"the decoder name."}]}}]}}},{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderSetModelToObj"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iModel","int","1","In","Decoder model ID"]},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamDecoderGetMaxModels."},{"entry":"2 Opaque object ID handle returned by KamDecoderPutAdd."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamDecoderSetModelToObj takes a decoder ID and decoder object"},{"entry":"ID as parameters. It sets the decoder model type of the decoder at address"},{"entry":"lDecoderObjectID to the type specified by iModel."}]}}]}}},{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetMaxAddress"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iModel","int","1","In","Decoder type ID"]},{"entry":["piMaxAddress","int *","2","Out","Maximum decoder"]},{"entry":[{},{},{},{},"address"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamDecoderGetMaxModels."},{"entry":"2 Model dependent. 0 returned on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamDecoderGetMaxAddress takes a decoder type ID and a pointer"},{"entry":"to store the maximum address as parameters. It sets the memory"},{"entry":"pointed to by piMaxAddress to the maximum address supported by"},{"entry":"the specified decoder."}]}}]}}},{"@attributes":{"id":"p-0079","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderChangeOldNewAddr"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lOldObjID","long","1","In","Old decoder object ID"]},{"entry":["iNewAddr","int","2","In","New decoder address"]},{"entry":["plNewObjID","long *","1","Out","New decoder object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 1-127 for short locomotive addresses. 1-10239 for long locomotive"},{"entry":"decoders."},{"entry":"0-511 for accessory decoders."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamDecoderChangeOldNewAddr takes an old decoder object ID"},{"entry":"and a new decoder address as parameters. It moves the specified"},{"entry":"locomotive or accessory decoder to iNewAddr and sets the memory"},{"entry":"pointed to by plNewObjID to the new object ID. The old object ID"},{"entry":"is now invalid and should no longer be used."}]}}]}}},{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderMovePort"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder"]},{"entry":[{},{},{},{},"object ID"]},{"entry":["iLogicalPortID","int 1-65535","2","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamDecoderMovePort takes a decoder object ID and logical port ID"},{"entry":"as parameters. It moves the decoder specified by lDecoderObjectID"},{"entry":"to the controller specified by iLogicalPortID."}]}}]}}},{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetPort"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder"]},{"entry":["piLogicalPortID","int * 1-65535","2","Out","object ID"]},{"entry":[{},{},{},{},"Pointer to"]},{"entry":[{},{},{},{},"logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamDecoderMovePort takes a decoder object ID and pointer"},{"entry":"to a logical port ID as parameters. It sets the memory pointed to"},{"entry":"by piLogicalPortID to the logical port ID associated with"},{"entry":"lDecoderObjectID."}]}}]}}},{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderCheckAddrInUse"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iDecoderAddress","int","1","In","Decoder address"]},{"entry":["iLogicalPortID","int","2","In","Logical Port ID"]},{"entry":["iDecoderClass","int","3","In","Class of decoder"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","1 - DECODER_ENGINE_TYPE,"]},{"entry":[{},"2 - DECODER_SWITCH_TYPE,"]},{"entry":[{},"3 - DECODER_SENSOR_TYPE."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for successful call and address not in use. Nonzero is an"},{"entry":"error number (see KamMiscGetErrorMsg)."},{"entry":"IDS_ERR_ADDRESSEXIST returned if call succeeded"},{"entry":"but the address exists."},{"entry":"KamDecoderCheckAddrInUse takes a decoder address, logical port,"},{"entry":"and decoder class as parameters. It returns zero if the address is not"},{"entry":"in use. It will return IDS_ERR_ADDRESSEXIST"},{"entry":"if the call succeeds but the address already exists. It will"},{"entry":"return the appropriate non zero error number if the calls fails."}]}}]}}},{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetModelFromObj"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder"]},{"entry":[{},{},{},{},"object ID"]},{"entry":["piModel","int * 1-65535","2","Out","Pointer to"]},{"entry":[{},{},{},{},"decoder"]},{"entry":[{},{},{},{},"type ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum value for this server given by KamDecoderGetMaxModels."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamDecoderGetModelFromObj takes a decoder object ID"},{"entry":"and pointer to a decoder type ID as parameters. It sets the"},{"entry":"memory pointed to by piModel to the decoder type ID"},{"entry":"associated with iDCCAddr."}]}}]}}},{"@attributes":{"id":"p-0084","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetModelFacility"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["pdwFacility","long *","2","Out","Pointer to decoder"]},{"entry":[{},{},{},{},"facility mask"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2","0 - DCODE_PRGMODE_ADDR"]},{"entry":[{},"1 - DCODE_PRGMODE_REG"]},{"entry":[{},"2 - DCODE_PRGMODE_PAGE"]},{"entry":[{},"3 - DCODE_PRGMODE_DIR"]},{"entry":[{},"4 - DCODE_PRGMODE_FLYSHT"]},{"entry":[{},"5 - DCODE_PRGMODE_FLYLNG"]},{"entry":[{},"6 - Reserved"]},{"entry":[{},"7 - Reserved"]},{"entry":[{},"8 - Reserved"]},{"entry":[{},"9 - Reserved"]},{"entry":[{},"10 - Reserved"]},{"entry":[{},"11 - Reserved"]},{"entry":[{},"12 - Reserved"]},{"entry":[{},"13 - DCODE_FEAT_DIRLIGHT"]},{"entry":[{},"14 - DCODE_FEAT_LNGADDR"]},{"entry":[{},"15 - DCODE_FEAT_CVENABLE"]},{"entry":[{},"16 - DCODE_FEDMODE_ADDR"]},{"entry":[{},"17 - DCODE_FEDMODE_REG"]},{"entry":[{},"18 - DCODE_FEDMODE_PAGE"]},{"entry":[{},"19 - DCODE_FEDMODE_DIR"]},{"entry":[{},"20 - DCODE_FEDMODE_FLYSHT"]},{"entry":[{},"21 - DCODE_FEDMODE_FLYLNG"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamDecoderGetModelFacility takes a decoder object ID and pointer"},{"entry":"to a decoder facility mask as parameters. It sets the memory pointed"},{"entry":"to by pdwFacility to the decoder facility mask associated with iDCCAddr."}]}}]}}},{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetObjCount"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iDecoderClass","int","1","In","Class of decoder"]},{"entry":["piObjCount","int * 0-65535",{},"Out","Count of active"]},{"entry":[{},{},{},{},"decoders"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","1 - DECODER_ENGINE_TYPE,"]},{"entry":[{},"2 - DECODER_SWITCH_TYPE,"]},{"entry":[{},"3 - DECODER_SENSOR_TYPE."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description\u25cf"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamDecoderGetObjCount takes a decoder"},{"entry":"class and a pointer to an address count as parameters. It sets the"},{"entry":"memory pointed to by piObjCount to the count of active decoders"},{"entry":"of the type given by iDecoderClass."}]}}]}}},{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetObjAtIndex"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iIndex","int","1","In","Decoder array index"]},{"entry":["iDecoderClass","int","2","In","Class of decoder"]},{"entry":["plDecoderObjectID","long *","3","Out","Pointer to decoder"]},{"entry":[{},{},{},{},"object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","0 to (KamDecoderGetAddressCount \u2212 1)."]},{"entry":["2","1 - DECODER_ENGINE_TYPE,"]},{"entry":[{},"2 - DECODER_SWITCH_TYPE,"]},{"entry":[{},"3 - DECODER_SENSOR_TYPE."]},{"entry":["3","Opaque object ID handle returned by KamDecoderPutAdd."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamDecoderGetObjCount takes a decoder"},{"entry":"index, decoder class, and a pointer to an object ID as parameters. It"},{"entry":"sets the memory pointed to by plDecoderObjectID to the"},{"entry":"selected object ID."}]}}]}}},{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderPutAdd"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iDecoderAddress","int","1","In","Decoder"]},{"entry":[{},{},{},{},"address"]},{"entry":["iLogicalCmdPortID","int 1-65535","2","In","Logical"]},{"entry":[{},{},{},{},"command"]},{"entry":[{},{},{},{},"port ID"]},{"entry":["iLogicalProgPortID","int 1-65535","2","In","Logical"]},{"entry":[{},{},{},{},"programming"]},{"entry":[{},{},{},{},"port ID"]},{"entry":["iClearState","int","3","In","Clear state flag"]},{"entry":["iModel","int","4","In","Decoder model"]},{"entry":[{},{},{},{},"type ID"]},{"entry":["plDecoderObjectID","long *","5","Out","Decoder"]},{"entry":[{},{},{},{},"object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 1-127 for short locomotive addresses. 1-10239 for long"},{"entry":"locomotive decoders. 0-511 for accessory decoders."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"3 0 - retain state, 1 - clear state."},{"entry":"4 Maximum value for this server given by"},{"entry":"KamDecoderGetMaxModels."},{"entry":"5 Opaque object ID handle. The object ID is used to reference"},{"entry":"the decoder."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamDecoderPutAdd takes a decoder"},{"entry":"object ID, command logical port, programming logical port, clear"},{"entry":"flag, decoder model ID, and a pointer to a decoder object ID as"},{"entry":"parameters. It creates a new locomotive object in the locomotive"},{"entry":"database and sets the memory pointed to by plDecoderObjectID"},{"entry":"to the decoder object ID used by the server as a key."}]}}]}}},{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderPutDel"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iClearState","int","2","In","Clear state flag"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 0 - retain state, 1 - clear state."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description\u25cf"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamDecoderPutDel takes a decoder"},{"entry":"object ID and clear flag as parameters. It deletes the locomotive"},{"entry":"object specified by lDecoderObjectID from the locomotive database."}]}}]}}},{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetMfgName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["pbsMfgName","BSTR *","2","Out","Pointer to"]},{"entry":[{},{},{},{},"manufacturer name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamDecoderGetMfgName takes a"},{"entry":"decoder object ID and pointer to a manufacturer name string as"},{"entry":"parameters. It sets the memory pointed to by pbsMfgName to"},{"entry":"the name of the decoder manufacturer."}]}}]}}},{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetPowerMode"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["pbsPowerMode","BSTR *","2","Out","Pointer to"]},{"entry":[{},{},{},{},"decoder power"]},{"entry":[{},{},{},{},"mode"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description\u25cf"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamDecoderGetPowerMode takes a"},{"entry":"decoder object ID and a pointer to the power mode string as"},{"entry":"parameters. It sets the memory pointed to by pbsPowerMode"},{"entry":"to the decoder power mode."}]}}]}}},{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamDecoderGetMaxSpeed"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["piSpeedStep","int *","2","Out","Pointer to max"]},{"entry":[{},{},{},{},"speed step"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 14, 28, 56, or 128 for locomotive decoders. 0 for accessory decoders."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg). KamDecoderGetMaxSpeed takes"},{"entry":"a decoder object ID and a pointer to the maximum"},{"entry":"supported speed step as parameters. It sets the memory"},{"entry":"pointed to by piSpeedStep to the maximum speed step"},{"entry":"supported by the decoder."}]}}]}},"br":{}},"This section describes the commands that control locomotive decoders. These commands control things such as locomotive speed and direction. For efficiency, a copy of all the engine variables such speed is stored in the server. Commands such as KamEngGetSpeed communicate only with the server, not the actual decoder. You should first make any changes to the server copy of the engine variables. You can send all changes to the engine using the KamCmdCommand command.",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngGetSpeed"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["lpSpeed","int *","2","Out","Pointer to locomotive"]},{"entry":[{},{},{},{},"speed"]},{"entry":["lpDirection","int *","3","Out","Pointer to locomotive"]},{"entry":[{},{},{},{},"direction"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Speed range is dependent on whether the decoder is set to 14, 18, or"},{"entry":"128 speed steps and matches the values defined by NMRA S9.2 and"},{"entry":"RP 9.2.1. 0 is stop and 1 is emergency stop for all modes."},{"entry":"3 Forward is boolean TRUE and reverse is boolean FALSE."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamEngGetSpeed takes the decoder"},{"entry":"object ID and pointers to locations to store the locomotive speed"},{"entry":"and direction as parameters. It sets the memory pointed to by lpSpeed"},{"entry":"to the locomotive speed and the memory pointed to by lpDirection"},{"entry":"to the locomotive direction."}]}}]}}},{"@attributes":{"id":"p-0094","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngPutSpeed"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iSpeed","int","2","In","Locomotive speed"]},{"entry":["iDirection","int","3","In","Locomotive direction"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Speed range is dependent on whether the decoder is set to 14, 18,"},{"entry":"or 128 speed steps and matches the values defined by NMRA"},{"entry":"S9.2 and RP 9.2.1. 0 is stop and 1 is emergency stop for all modes."},{"entry":"3 Forward is boolean TRUE and reverse is boolean FALSE."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamEngPutSpeed takes the decoder"},{"entry":"object ID, new locomotive speed, and new locomotive direction as"},{"entry":"parameters. It sets the locomotive database speed to iSpeed and"},{"entry":"the locomotive database direction to iDirection. Note: This command"},{"entry":"only changes the locomotive database. The data is not sent to the"},{"entry":"decoder until execution of the KamCmdCommand command. Speed"},{"entry":"is set to the maximum possible for the decoder if iSpeed exceeds"},{"entry":"the decoders range."}]}}]}}},{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngGetSpeedSteps"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["lpSpeedSteps","int * 14,",{},"Out","Pointer to number"]},{"entry":[{},"28, 128",{},{},"of speed steps"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamEngGetSpeedSteps takes the"},{"entry":"decoder object ID and a pointer to a location to store the"},{"entry":"number of speed steps as a parameter. It sets the memory"},{"entry":"pointed to by lpSpeedSteps to the number of speed steps."}]}}]}}},{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngPutSpeedSteps"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iSpeedSteps","int 14,",{},"In","Locomotive speed"]},{"entry":[{},"28, 128",{},{},"steps"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamEngPutSpeedSteps takes the decoder object ID and a new number"},{"entry":"of speed steps as a parameter. It sets the number of speed steps in the"},{"entry":"locomotive database to iSpeedSteps."},{"entry":"Note:"},{"entry":"This command only changes the locomotive database. The data is not"},{"entry":"sent to the decoder until execution of the KamCmdCommand command."},{"entry":"KamDecoderGetMaxSpeed returns the maximum possible speed for the"},{"entry":"decoder. An error is generated if an attempt is made to set the speed"},{"entry":"steps beyond this value."}]}}]}}},{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngGetFunction"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iFunctionID","int 0-8","2","In","Function ID number"]},{"entry":["lpFunction","int *","3","Out","Pointer to function"]},{"entry":[{},{},{},{},"value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 FL is 0. F1-F8 are 1-8 respectively. Maximum for this decoder is given"},{"entry":"by KamEngGetFunctionMax."},{"entry":"3 Function active is boolean TRUE and inactive is boolean FALSE."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamEngGetFunction takes the decoder object ID, a function ID, and"},{"entry":"a pointer to the location to store the specified function state as"},{"entry":"parameters. It sets the memory pointed to by lpFunction to the specified"},{"entry":"function state."}]}}]}}},{"@attributes":{"id":"p-0098","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngPutFunction"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iFunctionID","int 0-8","2","In","Function ID number"]},{"entry":["iFunction","int","3","In","Function value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 FL is 0. F1-F8 are 1-8 respectively. Maximum for this decoder is given"},{"entry":"by KamEngGetFunctionMax."},{"entry":"3 Function active is boolean TRUE and inactive is boolean FALSE."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description\u25cf"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamEngPutFunction takes the decoder object ID, a function ID, and"},{"entry":"a new function state as parameters. It sets the specified locomotive"},{"entry":"database function state to iFunction."},{"entry":"Note:"},{"entry":"This command only changes the locomotive database. The data is not"},{"entry":"sent to the decoder until execution of the KamCmdCommand command."}]}}]}}},{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngGetFunctionMax"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["piMaxFunction","int *",{},"Out","Pointer to maximum"]},{"entry":[{},"0-8",{},{},"function number"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamEngGetFunctionMax takes a decoder object ID and a pointer"},{"entry":"to the maximum function ID as parameters. It sets the memory pointed"},{"entry":"to by piMaxFunction to the maximum possible function number for the"},{"entry":"specified decoder."}]}}]}}},{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngGetName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["pbsEngName","BSTR *","2","Out","Pointer to"]},{"entry":[{},{},{},{},"locomotive name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamEngGetName takes a decoder object ID and a pointer to the"},{"entry":"locomotive name as parameters. It sets the memory pointed to by"},{"entry":"pbsEngName to the name of the locomotive."}]}}]}}},{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngPutName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["bsEngName","BSTR","2","Out","Locomotive name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact parameter type depends on language. It is LPCSTR for C++."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamEngPutName takes a decoder object ID and a BSTR as parameters."},{"entry":"It sets the symbolic locomotive name to bsEngName."}]}}]}}},{"@attributes":{"id":"p-0102","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngGetFunctionName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iFunctionID","int 0-8","2","In","Function ID number"]},{"entry":["pbsFcnNameString","BSTR *","3","Out","Pointer to"]},{"entry":[{},{},{},{},"function name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 FL is 0. F1-F8 are 1-8 respectively. Maximum for this decoder is given"},{"entry":"by KamEngGetFunctionMax."},{"entry":"3 Exact return type depends on language. It is Cstring * for"},{"entry":"C++. Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError\u25cf = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamEngGetFuncntionName takes a decoder object ID, function ID,"},{"entry":"and a pointer to the function name as parameters. It sets the memory"},{"entry":"pointed to by pbsFcnNameString to the symbolic name of the"},{"entry":"specified function."}]}}]}}},{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngPutFunctionName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iFunctionID","int 0-8","2","In","Function ID number"]},{"entry":["bsFcnNameString","BSTR","3","In","Function name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 FL is 0. F1-F8 are 1-8 respectively. Maximum for this decoder is given"},{"entry":"by KamEngGetFunctionMax."},{"entry":"3 Exact parameter type depends on language. It is LPCSTR for C++."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamEngPutFunctionName takes a decoder object ID, function ID,"},{"entry":"and a BSTR as parameters. It sets the specified symbolic function"},{"entry":"name to bsFcnNameString."}]}}]}}},{"@attributes":{"id":"p-0104","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngGetConsistMax"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["piMaxConsist","int *","2","Out","Pointer to max consist"]},{"entry":[{},{},{},{},"number"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Command station dependent."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamEngGetConsistMax takes the decoder object ID and a pointer"},{"entry":"to a location to store the maximum consist as parameters. It sets the"},{"entry":"location pointed to by piMaxConsist to the maximum number of"},{"entry":"locomotives that can but placed in a command station controlled"},{"entry":"consist. Note that this command is designed for command station"},{"entry":"consisting. CV consisting is handled using the CV commands."}]}}]}}},{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngPutConsistParent"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDCCParentObjID","long","1","In","Parent decoder"]},{"entry":[{},{},{},{},"object ID"]},{"entry":["iDCCAliasAddr","int","2","In","Alias decoder address"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 1-127 for short locomotive addresses. 1-10239 for long locomotive"},{"entry":"decoders."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamEngPutConsistParent takes the parent object ID and an alias"},{"entry":"address as parameters. It makes the decoder specified by"},{"entry":"lDCCParentObjID the consist parent referred to by iDCCAliasAddr."},{"entry":"Note that this command is designed for command station consisting."},{"entry":"CV consisting is handled using the CV commands. If a new parent is"},{"entry":"defined for a consist; the old parent becomes a child in the consist."},{"entry":"To delete a parent in a consist without deleting the consist, you must"},{"entry":"add a new parent then delete the old parent using"},{"entry":"KamEngPutConsistRemoveObj."}]}}]}}},{"@attributes":{"id":"p-0106","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngPutConsistChild"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDCCParentObjID","long","1","In","Parent decoder"]},{"entry":[{},{},{},{},"object ID"]},{"entry":["lDCCObjID","long","1","In","Decoder object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamEngPutConsistChild takes the decoder"},{"entry":"parent object ID and decoder object ID as parameters. It assigns the"},{"entry":"decoder specified by lDCCObjID to the consist identified by"},{"entry":"lDCCParentObjID. Note that this command is designed for command"},{"entry":"station consisting. CV consisting is handled using the CV commands."},{"entry":"Note: This command is invalid if the parent has not been set previously"},{"entry":"using KamEngPutConsistParent."}]}}]}}},{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamEngPutConsistRemoveObj"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamEngPutConsistRemoveObj takes the"},{"entry":"decoder object ID as a parameter. It removes the decoder specified"},{"entry":"by lDecoderObjectID from the consist. Note that this command is"},{"entry":"designed for command station consisting. CV consisting is handled"},{"entry":"using the CV commands. Note: If the parent is removed, all children"},{"entry":"are removed also."}]}}]}},"br":{}},"This section describes the commands that control accessory decoders. These commands control things such as accessory decoder activation state. For efficiency, a copy of all the engine variables such speed is stored in the server. Commands such as KamAccGetFunction communicate only with the server, not the actual decoder. You should first make any changes to the server copy of the engine variables. You can send all changes to the engine using the KamCmdCommand command.",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccGetFunction"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iFunctionID","int 0-31","2","In","Function ID number"]},{"entry":["lpFunction","int *","3","Out","Pointer to function"]},{"entry":[{},{},{},{},"value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum for this decoder is given by KamAccGetFunctionMax."},{"entry":"3 Function active is boolean TRUE and inactive is boolean FALSE."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamAccGetFunction takes the decoder"},{"entry":"object ID, a function ID, and a pointer to the location to store the specified"},{"entry":"function state as parameters. It sets the memory pointed to"},{"entry":"by lpFunction to the specified function state."}]}}]}}},{"@attributes":{"id":"p-0110","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccGetFunctionAll"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["piValue","int *","2","Out","Function bit mask"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Each bit represents a single function state. Maximum for this"},{"entry":"decoder is given by KamAccGetFunctionMax."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamAccGetFunctionAll takes the decoder"},{"entry":"object ID and a pointer to a bit mask as parameters. It sets each bit"},{"entry":"in the memory pointed to by piValue to the corresponding"},{"entry":"function state."}]}}]}}},{"@attributes":{"id":"p-0111","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccPutFunction"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iFunctionID","int 0-31","2","In","Function ID number"]},{"entry":["iFunction","int","3","In","Function value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum for this decoder is given by KamAccGetFunctionMax."},{"entry":"3 Function active is boolean TRUE and inactive is boolean FALSE."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description\u25cf"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamAccPutFunction takes the decoder"},{"entry":"object ID, a function ID, and a new function state as parameters."},{"entry":"It sets the specified accessory database function state to iFunction. Note:"},{"entry":"This command only changes the accessory database. The data is not"},{"entry":"sent to the decoder until execution of the KamCmdCommand command."}]}}]}}},{"@attributes":{"id":"p-0112","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccPutFunctionAll"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iValue","int","2","In","Pointer to function state"]},{"entry":[{},{},{},{},"array"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Each bit represents a single function state. Maximum for this"},{"entry":"decoder is given by KamAccGetFunctionMax."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description\u25cf"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamAccPutFunctionAll takes the decoder"},{"entry":"object ID and a bit mask as parameters. It sets all decoder function"},{"entry":"enable states to match the state bits in iValue. The possible enable"},{"entry":"states are TRUE and FALSE. The data is not sent to the decoder"},{"entry":"until execution of the KamCmdCommand command."}]}}]}}},{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccGetFunctionMax"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["piMaxFunction","int * 0-31","2","Out","Pointer to maximum"]},{"entry":[{},{},{},{},"function number"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum for this decoder is given by KamAccGetFunctionMax."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamAccGetFunctionMax takes a decoder"},{"entry":"object ID and pointer to the maximum function number as parameters."},{"entry":"It sets the memory pointed to by piMaxFunction to the maximum"},{"entry":"possible function number for the specified decoder."}]}}]}}},{"@attributes":{"id":"p-0114","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccGetName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["pbsAccNameString","BSTR *","2","Out","Accessory name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamAccGetName takes a decoder object ID"},{"entry":"and a pointer to a string as parameters. It sets the memory pointed to"},{"entry":"by pbsAccNameString to the name of the accessory."}]}}]}}},{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccPutName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["bsAccNameString","BSTR","2","In","Accessory name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact parameter type depends on language. It is LPCSTR for C++."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamAccPutName takes a decoder object ID"},{"entry":"and a BSTR as parameters. It sets the symbolic accessory name"},{"entry":"to bsAccName."}]}}]}}},{"@attributes":{"id":"p-0116","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccGetFunctionName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iFunctionID","int 0-31","2","In","Function ID number"]},{"entry":["pbsFcnNameString","BSTR *","3","Out","Pointer to function"]},{"entry":[{},{},{},{},"name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum for this decoder is given by KamAccGetFunctionMax."},{"entry":"3 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description\u25cf"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamAccGetFuncntionName takes a decoder"},{"entry":"object ID, function ID, and a pointer to a string as parameters. It sets the"},{"entry":"memory pointed to by pbsFcnNameString to the symbolic name of the"},{"entry":"specified function."}]}}]}}},{"@attributes":{"id":"p-0117","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccPutFunctionName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["iFunctionID","int 0-31","2","In","Function ID number"]},{"entry":["bsFcnNameString","BSTR","3","In","Function name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum for this decoder is given by KamAccGetFunctionMax."},{"entry":"3 Exact parameter type depends on language. It is LPCSTR for C++."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamAccPutFunctionName takes a decoder object ID, function ID,"},{"entry":"and a BSTR as parameters. It sets the specified symbolic function"},{"entry":"name to bsFcnNameString."}]}}]}}},{"@attributes":{"id":"p-0118","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccRegFeedback"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["bsAccNode","BSTR","1","In","Server node name"]},{"entry":["iFunctionID","int 0-31","3","In","Function ID number"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact parameter type depends on language. It is LPCSTR for C++."},{"entry":"3 Maximum for this decoder is given by KamAccGetFunctionMax."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError\u2022 = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamAccRegFeedback takes a decoder object ID, node name string, and"},{"entry":"function ID, as parameters. It registers interest in the function given by"},{"entry":"iFunctionID by the method given by the node name string bsAccNode."},{"entry":"bsAccNode identifies the server application and method to call if the"},{"entry":"function changes state. Its format is \u201c\\\\{Server}\\{App}.{Method}\u201d"},{"entry":"where {Server} is the server name, {App} is the"},{"entry":"application name, and {Method} is the method name."}]}}]}}},{"@attributes":{"id":"p-0119","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccRegFeedbackAll"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["bsAccNode","BSTR","2","In","Server node name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact parameter type depends on language. It is LPCSTR for C++."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamAccRegFeedbackAll takes a decoder object ID and node name"},{"entry":"string as parameters. It registers interest in all functions by the method"},{"entry":"given by the node name string bsAccNode. bsAccNode identifies the"},{"entry":"server application and method to call if the function changes state. Its"},{"entry":"format is \u201c\\\\{Server}\\{App}. {Method}\u201d"},{"entry":"where {Server} is the server name, {App} is the application"},{"entry":"name, and {Method} is the method name."}]}}]}}},{"@attributes":{"id":"p-0120","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccDelFeedback"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["bsAccNode","BSTR","2","In","Server node name"]},{"entry":["iFunctionID","int 0-31","3","In","Function ID number"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact parameter type depends on language. It is LPCSTR for C++."},{"entry":"3 Maximum for this decoder is given by KamAccGetFunctionMax."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamAccDelFeedback takes a decoder object ID, node name string,"},{"entry":"and function ID, as parameters. It deletes interest in the function given"},{"entry":"by iFunctionID by the method given by the node name string bsAccNode."},{"entry":"bsAccNode identifies the server application and method to call if the"},{"entry":"function changes state. Its format is \u201c\\\\{Server}\\{App}.{Method}\u201d"},{"entry":"where {Server} is the server name, {App} is the application"},{"entry":"name, and {Method} is the method name."}]}}]}}},{"@attributes":{"id":"p-0121","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamAccDelFeedbackAll"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":["bsAccNode","BSTR","2","In","Server node name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Exact parameter type depends on language. It is LPCSTR for C++."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamAccDelFeedbackAll takes a decoder object ID and node name"},{"entry":"string as parameters. It deletes interest in all functions by the method"},{"entry":"given by the node name string bsAccNode. bsAccNode identifies"},{"entry":"the server application and method to call if the function changes"},{"entry":"state. Its format is \u201c\\\\{Server}\\{App}.{Method}\u201d"},{"entry":"where {Server} is the server name, {App} is the"},{"entry":"application name, and {Method} is the method name."}]}}]}},"br":{}},"This section describes the commands that control the command station. These commands do things such as controlling command station power. The steps to control a given command station vary depending on the type of command station.",{"@attributes":{"id":"p-0123","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprPutTurnOnStation"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamOprPutTurnOnStation takes a logical port ID as a parameter. It"},{"entry":"performs the steps necessary to turn on the command station. This"},{"entry":"command performs a combination of other commands such as"},{"entry":"KamOprPutStartStation, KamOprPutClearStation, and"},{"entry":"KamOprPutPowerOn."}]}}]}}},{"@attributes":{"id":"p-0124","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprPutStartStation"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamOprPutStartStation takes a logical port ID as a parameter. It"},{"entry":"performs the steps necessary to start the command station."}]}}]}}},{"@attributes":{"id":"p-0125","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprPutClearStation"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamOprPutClearStation takes a logical port ID as a parameter. It"},{"entry":"performs the steps necessary to clear the command station queue."}]}}]}}},{"@attributes":{"id":"p-0126","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprPutStopStation"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamOprPutStopStation takes a logical port ID as a parameter. It"},{"entry":"performs the steps necessary to stop the command station."}]}}]}}},{"@attributes":{"id":"p-0127","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprPutPowerOn"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamOprPutPowerOn takes a logical port ID as a parameter. It performs"},{"entry":"the steps necessary to apply power to the track."}]}}]}}},{"@attributes":{"id":"p-0128","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprPutPowerOff"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamOprPutPowerOff takes a logical port ID as a parameter. It performs"},{"entry":"the steps necessary to remove power from the track."}]}}]}}},{"@attributes":{"id":"p-0129","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprPutHardReset"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamOprPutHardReset takes a logical port ID as a parameter. It performs"},{"entry":"the steps necessary to perform a hard reset of the command station."}]}}]}}},{"@attributes":{"id":"p-0130","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprPutEmergencyStop"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamOprPutEmergencyStop takes a logical port ID as a parameter."},{"entry":"It performs the steps necessary to broadcast an emergency stop command"},{"entry":"to all decoders."}]}}]}}},{"@attributes":{"id":"p-0131","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamOprGetStationStatus"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":["pbsCmdStat","BSTR *","2","Out","Command station"]},{"entry":[{},{},{},{},"status string"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamOprGetStationStatus takes a logical port ID and a pointer to a string"},{"entry":"as parameters. It set the memory pointed to by pbsCmdStat to the"},{"entry":"command station status. The exact format of the status BSTR is vendor"},{"entry":"dependent."}]}}]}},"br":{}},"This section describes the commands that configure the command station communication port. These commands do things such as setting BAUD rate. Several of the commands in this section use the numeric controller ID (iControllerID) to identify a specific type of command station controller. The following table shows the mapping between the controller ID (iControllerID) and controller name (bsControllerName) for a given type of command station controller.",{"@attributes":{"id":"p-0133","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["iControllerID","bsControllerName","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","UNKNOWN","Unknown controller type"]},{"entry":["1","SIMULAT","Interface simulator"]},{"entry":["2","LENZ_1x","Lenz version 1 serial support module"]},{"entry":["3","LENZ_2x","Lenz version 2 serial support module"]},{"entry":["4","DIGIT_DT200","Digitrax direct drive support using"]},{"entry":[{},{},"DT200"]},{"entry":["5","DIGIT_DCS100","Digitrax direct drive support using"]},{"entry":[{},{},"DCS100"]},{"entry":["6","MASTERSERIES","North coast engineering master"]},{"entry":[{},{},"series"]},{"entry":["7","SYSTEMONE","System one"]},{"entry":["8","RAMFIX","RAMFIxx system"]},{"entry":["9","SERIAL","NMRA serial interface"]},{"entry":["10","EASYDCC","CVP Easy DCC"]},{"entry":["11","MRK6050","Marklin 6050 interface (AC and DC)"]},{"entry":["12","MRK6023","Marklin 6023 interface (AC)"]},{"entry":["13","DIGIT_PR1","Digitrax direct drive using PR1"]},{"entry":["14","DIRECT","Direct drive interface routine"]},{"entry":["15","ZTC","ZTC system ltd"]},{"entry":["16","TRIX","TRIX controller"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["iIndex Name","iValue Values"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","RETRANS 10-255"]},{"entry":["1","RATE 0 - 300 BAUD, 1 - 1200 BAUD, 2 - 2400 BAUD,"]},{"entry":[{},"3 - 4800 BAUD, 4 - 9600 BAUD, 5 - 14400 BAUD,"]},{"entry":[{},"6 - 16400 BAUD, 7 - 19200 BAUD"]},{"entry":["2","PARITY0 - NONE, 1 - ODD, 2 - EVEN, 3 - MARK,"]},{"entry":[{},"4 - SPACE"]},{"entry":["3","STOP 0 - 1 bit, 1 - 1.5 bits, 2 - 2 bits"]},{"entry":["4","WATCHDOG 500 - 65535 milliseconds. Recommended"]},{"entry":[{},"value 2048"]},{"entry":["5","FLOW 0 - NONE, 1 - XON\/XOFF, 2 - RTS\/CTS, 3 BOTH"]},{"entry":["6","DATA 0 - 7 bits, 1 - 8 bits"]},{"entry":["7","DEBUGBit mask. Bit 1 sends messages to debug file. Bit 2"]},{"entry":[{},"sends messages to the screen. Bit 3 shows queue data. Bit 4"]},{"entry":[{},"shows UI status. Bit 5 is reserved. Bit 6 shows semaphore"]},{"entry":[{},"and critical sections. Bit 7 shows miscellaneous messages."]},{"entry":[{},"Bit 8 shows comm port activity. 130 decimal is"]},{"entry":[{},"recommended for debugging."]},{"entry":["8","PARALLEL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0135","num":"0134"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamPortPutConfig"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":["iIndex","int","2","In","Configuration type"]},{"entry":[{},{},{},{},"index"]},{"entry":["iValue","int","2","In","Configuration value"]},{"entry":["iKey","int","3","In","Debug key"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"2 See FIG. 7: Controller configuration Index values for a table of indexes"},{"entry":"and values."},{"entry":"3 Used only for the DEBUG iIndex value. Should be set to 0."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamPortPutConfig takes a logical port ID, configuration index,"},{"entry":"configuration value, and key as parameters. It sets the port parameter"},{"entry":"specified by iIndex to the value specified by iValue. For the DEBUG"},{"entry":"iIndex value, the debug file path is C:\\Temp\\Debug{PORT}.txt where"},{"entry":"{PORT} is the physical comm port ID."}]}}]}}},{"@attributes":{"id":"p-0136","num":"0135"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamPortGetConfig"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":["iIndex","int","2","In","Configuration type"]},{"entry":[{},{},{},{},"index"]},{"entry":["piValue","int *","2","Out","Pointer to"]},{"entry":[{},{},{},{},"configuration value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"2 See FIG. 7: Controller configuration Index values for a table of indexes"},{"entry":"and values."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamPortGetConfig takes a logical port ID, configuration index, and a"},{"entry":"pointer to a configuration value as parameters. It sets the memory"},{"entry":"pointed to by piValue to the specified configuration value."}]}}]}}},{"@attributes":{"id":"p-0137","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamPortGetName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iPhysicalPortID","int 1-65535","1","In","Physical port"]},{"entry":[{},{},{},{},"number"]},{"entry":["pbsPortName","BSTR *","2","Out","Physical port name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamPortGetMaxPhysical."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++. Empty"},{"entry":"string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error numbe"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamPortGetName takes a physical port ID number and a pointer to a port"},{"entry":"name string as parameters. It sets the memory pointed to by pbsPortName"},{"entry":"to the physical port name such as \u201cCOMM1.\u201d"}]}}]}}},{"@attributes":{"id":"p-0138","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamPortPutMapController"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":["iControllerID","int 1-65535","2","In","Command station"]},{"entry":[{},{},{},{},"type ID"]},{"entry":["iCommPortID","int 1-65535","3","In","Physical comm"]},{"entry":[{},{},{},{},"port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"2 See FIG. 6: Controller ID to controller name mapping for values."},{"entry":"Maximum value for this server is given by KamMiscMaxControllerID."},{"entry":"3 Maximum value for this server given by KamPortGetMaxPhysical."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamPortPutMapController takes a logical port ID, a command station type"},{"entry":"ID, and a physical communications port ID as parameters. It maps"},{"entry":"iLogicalPortID to iCommPortID for the type of command station specified"},{"entry":"by iControllerID."}]}}]}}},{"@attributes":{"id":"p-0139","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamPortGetMaxLogPorts"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["piMaxLogicalPorts","int *","1","Out","Maximum logical"]},{"entry":[{},{},{},{},"port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Normally 1-65535. 0 returned on error."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamPortGetMaxLogPorts takes a pointer to a logical port ID"},{"entry":"as a parameter. It sets the memory pointed to by piMaxLogicalPorts"},{"entry":"to the maximum logical port ID."}]}}]}}},{"@attributes":{"id":"p-0140","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00081","num":"00081"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamPortGetMaxPhysical"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["pMaxPhysical","int *","1","Out","Maximum physical"]},{"entry":[{},{},{},{},"port ID"]},{"entry":["pMaxSerial","int *","1","Out","Maximum serial"]},{"entry":[{},{},{},{},"port ID"]},{"entry":["pMaxParallel","int *","1","Out","Maximum parallel"]},{"entry":[{},{},{},{},"port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Normally 1-65535. 0 returned on error."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamPortGetMaxPhysical takes a pointer to the number of"},{"entry":"physical ports, the number of serial ports, and the number of"},{"entry":"parallel ports as parameters. It sets the memory pointed to"},{"entry":"by the parameters to the associated values"}]}}]}},"br":{}},"This section describes the commands that control the command flow to the command station. These commands do things such as connecting and disconnecting from the command station.",{"@attributes":{"id":"p-0142","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00082","num":"00082"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCmdConnect"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamCmdConnect takes a logical port ID as a parameter. It"},{"entry":"connects the server to the specified command station."}]}}]}}},{"@attributes":{"id":"p-0143","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00083","num":"00083"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCmdDisConnect"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamCmdDisConnect takes a logical port ID as a parameter. It"},{"entry":"disconnects the server to the specified command station."}]}}]}}},{"@attributes":{"id":"p-0144","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00084","num":"00084"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCmdCommand"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder object ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamCmdCommand takes the decoder object ID as a parameter."},{"entry":"It sends all state changes from the server database to the"},{"entry":"specified locomotive or accessory decoder."}]}}]}},"br":{}},"This section describes commands that control the cabs attached to a command station.",{"@attributes":{"id":"p-0146","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00085","num":"00085"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCabGetMessage"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iCabAddress","int 1-65535","1","In","Cab address"]},{"entry":["pbsMsg","BSTR *","2","Out","Cab message string"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value is command station dependent."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamCabGetMessage takes a cab address and a pointer to a"},{"entry":"message string as parameters. It sets the memory pointed to"},{"entry":"by pbsMsg to the present cab message."}]}}]}}},{"@attributes":{"id":"p-0147","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00086","num":"00086"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCabPutMessage"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iCabAddress","int","1","In","Cab address"]},{"entry":["bsMsg","BSTR","2","Out","Cab message string"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value is command station dependent."},{"entry":"2 Exact parameter type depends on language. It is LPCSTR for C++."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamCabPutMessage takes a cab address and a BSTR as"},{"entry":"parameters. It sets the cab message to bsMsg."}]}}]}}},{"@attributes":{"id":"p-0148","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00087","num":"00087"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCabGetCabAddr"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description\u25cf"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder"]},{"entry":[{},{},{},{},"object ID"]},{"entry":["piCabAddress","int * 1-65535","2","Out","Pointer to Cab"]},{"entry":[{},{},{},{},"address"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum value is command station dependent."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Descriptioni"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"Error","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamCabGetCabAddr takes a decoder object ID and a pointer"},{"entry":"to a cab address as parameters. It set the memory pointed to"},{"entry":"by piCabAddress to the address of the cab attached to the"},{"entry":"specified decoder."}]}}]}}},{"@attributes":{"id":"p-0149","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00088","num":"00088"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamCabPutAddrToCab"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["lDecoderObjectID","long","1","In","Decoder"]},{"entry":[{},{},{},{},"object ID"]},{"entry":["iCabAddress","int 1-65535","2","In","Cab address"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Opaque object ID handle returned by KamDecoderPutAdd."},{"entry":"2 Maximum value is command station dependent."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg)."},{"entry":"KamCabPutAddrToCab takes a decoder object ID and cab"},{"entry":"address as parameters. It attaches the decoder specified by"},{"entry":"iDCCAddr to the cab specified by iCabAddress."}]}}]}},"br":{}},"This section describes miscellaneous commands that do not fit into the other categories.",{"@attributes":{"id":"p-0151","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00089","num":"00089"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscGetErrorMsg"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iError","int 0-65535","1","In","Error flag"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"1 iError = 0 for success. Nonzero indicates an error."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"bsErrorString","BSTR","1","Error string"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Exact return type depends on language. It is Cstring for C++."},{"entry":"Empty string on error."},{"entry":"KamMiscGetErrorMsg takes an error flag as a parameter. It"},{"entry":"returns a BSTR containing the descriptive error message associated"},{"entry":"with the specified error flag."}]}}]}}},{"@attributes":{"id":"p-0152","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00090","num":"00090"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscGetClockTime"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":["iSelectTimeMode","int","2","In","Clock source"]},{"entry":["piDay","int * 0-6",{},"Out","Day of week"]},{"entry":["piHours","int * 0-23",{},"Out","Hours"]},{"entry":["piMinutes","int * 0-59",{},"Out","Minutes"]},{"entry":["piRatio","int *","3","Out","Fast clock ratio"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"2 0 - Load from command station and sync server. 1 - Load direct from"},{"entry":"server. 2 - Load from cached server copy of command station time."},{"entry":"3 Real time clock ratio."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg). KamMiscGetClockTime takes"},{"entry":"the port ID, the time mode, and pointers to locations to store the day,"},{"entry":"hours, minutes, and fast clock ratio as parameters. It sets the memory"},{"entry":"pointed to by piDay to the fast clock day, sets pointed to by piHours to the"},{"entry":"fast clock hours, sets the memory pointed to by piMinutes to the fast clock"},{"entry":"minutes, and the memory pointed to by piRatio to the fast clock ratio. The"},{"entry":"servers local time will be returned if the command station does not support"},{"entry":"a fast clock."}]}}]}}},{"@attributes":{"id":"p-0153","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00091","num":"00091"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscPutClockTime"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int1-65535","1","In","Logical port ID"]},{"entry":["iDay","int 0-6",{},"In","Day of week"]},{"entry":["iHours","int 0-23",{},"In","Hours"]},{"entry":["iMinutes","int 0-59",{},"In","Minutes"]},{"entry":["iRatio","int","2","In","Fast clock ratio"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"2 Real time clock ratio."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg). KamMiscPutClockTime takes the fast"},{"entry":"clock logical port, the fast clock day, the fast clock hours, the fast clock"},{"entry":"minutes, and the fast clock ratio as parameters. It sets the fast clock"},{"entry":"using specified parameters."}]}}]}}},{"@attributes":{"id":"p-0154","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00092","num":"00092"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscGetInterfaceVersion"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["pbsInterfaceVersion","BSTR *","1","Out","Pointer to interface"]},{"entry":[{},{},{},{},"version string"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number"},{"entry":"(see KamMiscGetErrorMsg). KamMiscGetInterfaceVersion takes"},{"entry":"a pointer to an interface version string as a parameter. It sets the"},{"entry":"memory pointed to by pbsInterfaceVersion to the interface version"},{"entry":"string. The version string may contain multiple lines depending on the"},{"entry":"number of interfaces supported."}]}}]}}},{"@attributes":{"id":"p-0155","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00093","num":"00093"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscSaveData"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameter List","Type","Range","Direction","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]},{"entry":[{},"NONE"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamMiscSaveData takes no parameters."},{"entry":"It saves all server data to permanent storage. This command is run"},{"entry":"automatically whenever the server stops running. Demo versions of"},{"entry":"the program cannot save data and this command will return an error"},{"entry":"in that case."}]}}]}}},{"@attributes":{"id":"p-0156","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00094","num":"00094"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscGetControllerName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iControllerID","int 1-65535","1","In","Command station"]},{"entry":[{},{},{},{},"type ID"]},{"entry":["pbsName","BSTR *","2","Out","Command station"]},{"entry":[{},{},{},{},"type name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 See FIG. 6: Controller ID to controller name mapping for values."},{"entry":"Maximum value for this server is given by KamMiscMaxControllerID."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Return Value","Type","Range","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["bsName","BSTR","1","Command station type name"]},{"entry":["iError","short","1","Error flag"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamMiscGetControllerName takes a"},{"entry":"command station type ID and a pointer to a type name string as"},{"entry":"parameters. It sets the memory pointed to by pbsName to the"},{"entry":"command station type name."}]}}]}}},{"@attributes":{"id":"p-0157","num":"0156"},"tables":{"@attributes":{"id":"TABLE-US-00095","num":"00095"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscGetControllerNameAtPort"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iLogicalPortID","int 1-65535","1","In","Logical port ID"]},{"entry":["pbsName","BSTR *","2","Out","Command station"]},{"entry":[{},{},{},{},"type name"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"2 Exact return type depends on language. It is Cstring * for C++."},{"entry":"Empty string on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamMiscGetControllerName takes a logical"},{"entry":"port ID and a pointer to a command station type name as parameters."},{"entry":"It sets the memory pointed to by pbsName to the command station type"},{"entry":"name for that logical port."}]}}]}}},{"@attributes":{"id":"p-0158","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00096","num":"00096"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscGetCommandStationValue"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iControllerID","int 1-65535","1","In","Command station"]},{"entry":[{},{},{},{},"type ID"]},{"entry":["iLogicalPortID","int 1-65535","2","In","Logical port ID"]},{"entry":["iIndex","int","3","In","Command station"]},{"entry":[{},{},{},{},"array index"]},{"entry":["piValue","int * 0-65535",{},"Out","Command station"]},{"entry":[{},{},{},{},"value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 See FIG. 6: Controller ID to controller name mapping for values."},{"entry":"Maximum value for this server is given by KamMiscMaxControllerID."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"3 0 to KamMiscGetCommandStationIndex."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamMiscGetCommandStationValue takes the"},{"entry":"controller ID, logical port, value array index, and a pointer to the location"},{"entry":"to store the selected value. It sets the memory pointed to by piValue to"},{"entry":"the specified command station miscellaneous data value."}]}}]}}},{"@attributes":{"id":"p-0159","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00097","num":"00097"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscSetCommandStationValue"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iControllerID","int 1-65535","1","In","Command station"]},{"entry":[{},{},{},{},"type ID"]},{"entry":["iLogicalPortID","int 1-65535","2","In","Logical port ID"]},{"entry":["iIndex","int","3","In","Command station"]},{"entry":[{},{},{},{},"array index"]},{"entry":["iValue","int 0-65535",{},"In","Command station"]},{"entry":[{},{},{},{},"value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 See FIG. 6: Controller ID to controller name mapping for values."},{"entry":"Maximum value for this server is given by KamMiscMaxControllerID."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."},{"entry":"3 0 to KamMiscGetCommandStationIndex."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamMiscSetCommandStationValue takes the"},{"entry":"controller ID, logical port, value array index, and new miscellaneous data"},{"entry":"value. It sets the specified command station data to the value given"},{"entry":"by piValue."}]}}]}}},{"@attributes":{"id":"p-0160","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00098","num":"00098"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscGetCommandStationIndex"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iControllerID","int 1-65535","1","In","Command station"]},{"entry":[{},{},{},{},"type ID"]},{"entry":["iLogicalPortID","int 1-65535","2","In","Logical port ID"]},{"entry":["piIndex","int 0-65535",{},"Out","Pointer to maximum"]},{"entry":[{},{},{},{},"index"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 See FIG. 6: Controller ID to controller name mapping for values."},{"entry":"Maximum value for this server is given by KamMiscMaxControllerID."},{"entry":"2 Maximum value for this server given by KamPortGetMaxLogPorts."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamMiscGetCommandStationIndex takes the"},{"entry":"controller ID, logical port, and a pointer to the location to store the"},{"entry":"maximum index. It sets the memory pointed to by piIndex to the specified"},{"entry":"command station maximum miscellaneous data index."}]}}]}}},{"@attributes":{"id":"p-0161","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00099","num":"00099"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscMaxControllerID"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["piMaxControllerID","int * 1-65535","1","Out","Maximum"]},{"entry":[{},{},{},{},"controller"]},{"entry":[{},{},{},{},"type ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 See FIG. 6: Controller ID to controller name mapping for a list of"},{"entry":"controller ID values. 0 returned on error."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg). KamMiscMaxControllerID takes a pointer to"},{"entry":"the maximum controller ID as a parameter. It sets the memory pointed"},{"entry":"to by piMaxControllerID to the maximum controller type ID."}]}}]}}},{"@attributes":{"id":"p-0162","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00100","num":"00100"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"0KamMiscGetControllerFacility"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter List","Type","Range","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["iControllerID","int 1-65535","1","In","Command station"]},{"entry":[{},{},{},{},"type ID"]},{"entry":["pdwFacility","long*","2","Out","Pointer to command"]},{"entry":[{},{},{},{},"station facility mask"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 See FIG. 6: Controller ID to controller name mapping for values."},{"entry":"Maximum value for this server is given by KamMiscMaxControllerID."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2","0 - CMDSDTA_PRGMODE_ADDR"]},{"entry":[{},"1 - CMDSDTA_PRGMODE_REG"]},{"entry":[{},"2 - CMDSDTA_PRGMODE_PAGE"]},{"entry":[{},"3 - CMDSDTA_PRGMODE_DIR"]},{"entry":[{},"4 - CMDSDTA_PRGMODE_FLYSHT"]},{"entry":[{},"5 - CMDSDTA_PRGMODE_FLYLNG"]},{"entry":[{},"6 - Reserved"]},{"entry":[{},"7 - Reserved"]},{"entry":[{},"8 - Reserved"]},{"entry":[{},"9 - Reserved"]},{"entry":[{},"10 - CMDSDTA_SUPPORT_CONSIST"]},{"entry":[{},"11 - CMDSDTA_SUPPORT_LONG"]},{"entry":[{},"12 - CMDSDTA_SUPPORT_FEED"]},{"entry":[{},"13 - CMDSDTA_SUPPORT_2TRK"]},{"entry":[{},"14 - CMDSDTA_PROGRAM_TRACK"]},{"entry":[{},"15 - CMDSDTA_PROGMAIN_POFF"]},{"entry":[{},"16 - CMDSDTA_FEDMODE_ADDR"]},{"entry":[{},"17 - CMDSDTA_FEDMODE_REG"]},{"entry":[{},"18 - CMDSDTA_FEDMODE_PAGE"]},{"entry":[{},"19 - CMDSDTA_FEDMODE_DIR"]},{"entry":[{},"20 - CMDSDTA_FEDMODE_FLYSHT"]},{"entry":[{},"21 - CMDSDTA_FEDMODE_FLYLNG"]},{"entry":[{},"30 - Reserved"]},{"entry":[{},"31 - CMDSDTA_SUPPORT_FASTCLK"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return Value","Type","Range","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"iError","short","1","Error flag"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1 iError = 0 for success. Nonzero is an error number (see"},{"entry":"KamMiscGetErrorMsg)."},{"entry":"KamMiscGetControllerFacility takes the controller ID and a pointer"},{"entry":"to the location to store the selected controller facility mask. It sets"},{"entry":"the memory pointed to by pdwFacility to the specified command"},{"entry":"station facility mask."}]}}]}}},"The digital command stations  program the digital devices, such as a locomotive and switches, of the railroad layout. For example, a locomotive may include several different registers that control the horn, how the light blinks, speed curves for operation, etc. In many such locomotives there are 106 or more programmable values. Unfortunately, it may take 1-10 seconds per byte wide word if a valid register or control variable (generally referred to collectively as registers) and two to four minutes to error out if an invalid register to program such a locomotive or device, either of which may contain a decoder. With a large number of byte wide words in a locomotive its takes considerable time to fully program the locomotive. Further, with a railroad layout including many such locomotives and other programmable devices, it takes a substantial amount of time to completely program all the devices of the model railroad layout. During the programming of the railroad layout, the operator is sitting there not enjoying the operation of the railroad layout, is frustrated, loses operating enjoyment, and will not desire to use digital programmable devices. In addition, to reprogram the railroad layout the operator must reprogram all of the devices of the entire railroad layout which takes substantial time. Similarly, to determine the state of all the devices of the railroad layout the operator must read the registers of each device likewise taking substantial time. Moreover, to reprogram merely a few bytes of a particular device requires the operator to previously know the state of the registers of the device which is obtainable by reading the registers of the device taking substantial time, thereby still frustrating the operator.","The present inventor came to the realization that for the operation of a model railroad the anticipated state of the individual devices of the railroad, as programmed, should be maintained during the use of the model railroad and between different uses of the model railroad. By maintaining data representative of the current state of the device registers of the model railroad determinations may be made to efficiently program the devices. When the user designates a command to be executed by one or more of the digital command stations , the software may determine which commands need to be sent to one or more of the digital command stations  of the model railroad. By only updating those registers of particular devices that are necessary to implement the commands of a particular user, the time necessary to program the railroad layout is substantially reduced. For example, if the command would duplicate the current state of the device then no command needs to be forwarded to the digital command stations . This prevents redundantly programming the devices of the model railroad, thereby freeing up the operation of the model railroad for other activities.","Unlike a single-user single-railroad environment, the system of the present invention may encounter \u201cconflicting\u201d commands that attempt to write to and read from the devices of the model railroad. For example, the \u201cconflicting\u201d commands may inadvertently program the same device in an inappropriate manner, such as the locomotive to speed up to maximum and the locomotive to stop. In addition, a user that desires to read the status of the entire model railroad layout will monopolize the digital decoders and command stations for a substantial time, such as up to two hours, thereby preventing the enjoyment of the model railroad for the other users. Also, a user that programs an extensive number of devices will likewise monopolize the digital decoders and command stations for a substantial time thereby preventing the enjoyment of the model railroad for other users.","In order to implement a networked selective updating technique the present inventor determined that it is desirable to implement both a write cache and a read cache. The write cache contains those commands yet to be programmed by the digital command stations . Valid commands from each user are passed to a queue in the write cache. In the event of multiple commands from multiple users (depending on user permissions and security) or the same user for the same event or action, the write cache will concatenate the two commands into a single command to be programmed by the digital command stations . In the event of multiple commands from multiple users or the same user for different events or actions, the write cache will concatenate the two commands into a single command to be programmed by the digital command stations . The write cache may forward either of the commands, such as the last received command, to the digital command station. The users are updated with the actual command programmed by the digital command station, as necessary","The read cache contains the state of the different devices of the model railroad. After a command has been written to a digital device and properly acknowledged, if necessary, the read cache is updated with the current state of the model railroad. In addition, the read cache is updated with the state of the model railroad when the registers of the devices of the model railroad are read. Prior to sending the commands to be executed by the digital command stations  the data in the write cache is compared against the data in the read cache. In the event that the data in the read cache indicates that the data in the write cache does not need to be programmed, the command is discarded. In contrast, if the data in the read cache indicates that the data in the write cache needs to be programmed, then the command is programmed by the digital command station. After programming the command by the digital command station the read cache is updated to reflect the change in the model railroad. As becomes apparent, the use of a write cache and a read cache permits a decrease in the number of registers that need to be programmed, thus speeding up the apparent operation of the model railroad to the operator.","The present inventor further determined that errors in the processing of the commands by the railroad and the initial unknown state of the model railroad should be taken into account for a robust system. In the event that an error is received in response to an attempt to program (or read) a device, then the state of the relevant data of the read cache is marked as unknown. The unknown state merely indicates that the state of the register has some ambiguity associated therewith. The unknown state may be removed by reading the current state of the relevant device or the data rewritten to the model railroad without an error occurring. In addition, if an error is received in response to an attempt to program (or read) a device, then the command may be re-transmitted to the digital command station in an attempt to program the device properly. If desirable, multiple commands may be automatically provided to the digital command stations to increase the likelihood of programming the appropriate registers. In addition, the initial state of a register is likewise marked with an unknown state until data becomes available regarding its state.","When sending the commands to be executed by the digital command stations  they are preferably first checked against the read cache, as previously mentioned. In the event that the read cache indicates that the state is unknown, such as upon initialization or an error, then the command should be sent to the digital command station because the state is not known. In this manner the state will at least become known, even if the data in the registers is not actually changed.","The present inventor further determined a particular set of data that is useful for a complete representation of the state of the registers of the devices of the model railroad. An invalid representation of a register indicates that the particular register is not valid for both a read and a write operation. This permits the system to avoid attempting to read from and write to particular registers of the model railroad. This avoids the exceptionally long error out when attempting to access invalid registers. An in use representation of a register indicates that the particular register is valid for both a read and a write operation. This permits the system to read from and write to particular registers of the model railroad. This assists in accessing valid registers where the response time is relatively fast. A read error (unknown state) representation of a register indicates that each time an attempt to read a particular register results in an error. A read dirty representation of a register indicates that the data in the read cache has not been validated by reading its valid from the decoder. If both the read error and the read dirty representations are clear then a valid read from the read cache may be performed. A read dirty representation may be cleared by a successful write operation, if desired. A read only representation indicates that the register may not be written to. If this flag is set then a write error may not occur. A write error (unknown state) representation of a register indicates that each time an attempt to write to a particular register results in an error. A write dirty representation of a register indicates that the data in the write cache has not been written to the decoder yet. For example, when programming the decoders the system programs the data indicated by the write dirty. If both the write error and the write dirty representations are clear then the state is represented by the write cache. This assists in keeping track of the programming without excess overhead. A write only representation indicates that the register may not be read from. If this flag is set then a read error may not occur.","Over time the system constructs a set of representations of the model railroad devices and the model railroad itself indicating the invalid registers, read errors, and write errors which may increases the efficiently of programming and changing the states of the model railroad. This permits the system to avoid accessing particular registers where the result will likely be an error.","The present inventor came to the realization that the valid registers of particular devices is the same for the same device of the same or different model railroads. Further, the present inventor came to the realization that a template may be developed for each particular device that may be applied to the representations of the data to predetermine the valid registers. In addition, the template may also be used to set the read error and write error, if desired. The template may include any one or more of the following representations, such as invalid, in use, read error, write only, read dirty, read only, write error, and write dirty for the possible registers of the device. The predetermination of the state of each register of a particular device avoids the time consuming activity of receiving a significant number of errors and thus constructing the caches. It is to be noted that the actual read and write cache may be any suitable type of data structure.","Many model railroad systems include computer interfaces to attempt to mimic or otherwise emulate the operation of actual full-scale railroads.  illustrates the organization of train dispatching by \u201ctimetable and train order\u201d (T&TO) techniques. Many of the rules governing T&TO operation are related to the superiority of trains which principally is which train will take siding at the meeting point. Any misinterpretation of these rules can be the source of either hazard or delay. For example, misinterpreting the rules may result in one train colliding with another train.","For trains following each other, T&TO operation must rely upon time spacing and flag protection to keep each train a sufficient distance apart. For example, a train may not leave a station less than five minutes after the preceding train has departed. Unfortunately, there is no assurance that such spacing will be retained as the trains move along the line, so the flagman (rear brakeman) of a train slowing down or stopping will light and throw off a five-minute red flare which may not be passed by the next train while lit. If a train has to stop, a flagman trots back along the line with a red flag or lantern a sufficient distance to protect the train, and remains there until the train is ready to move at which time he is called back to the train. A flare and two track torpedoes provide protection as the flagman scrambles back and the train resumes speed. While this type of system works, it depends upon a series of human activities.","It is perfectly possible to operate a railroad safely without signals. The purpose of signal systems is not so much to increase safety as it is to step up the efficiency and capacity of the line in handling traffic. Nevertheless, it's convenient to discuss signal system principals in terms of three types of collisions that signals are designed to prevent, namely, rear-end, side-on, and head-on.","Block signal systems prevent a train from ramming the train ahead of it by dividing the main line into segments, otherwise known as blocks, and allowing only one train in a block at a time, with block signals indicating whether or not the block ahead is occupied. In many blocks, the signals are set by a human operator. Before clearing the signal, he must verify that any train which has previously entered the block is now clear of it, a written record is kept of the status of each block, and a prescribed procedure is used in communicating with the next operator. The degree to which a block frees up operation depends on whether distant signals (as shown in ) are provided and on the spacing of open stations, those in which an operator is on duty. If as is usually the case it is many miles to the next block station and thus trains must be equally spaced. Nevertheless, manual block does afford a high degree of safety.","The block signaling which does the most for increasing line capacity is automatic block signals (ABS), in which the signals are controlled by the trains themselves. The presence or absence of a train is determined by a track circuit. Invented by Dr. William Robinson in 1872, the track circuit's key feature is that it is fail-safe. As can be seen in , if the battery or any wire connection fails, or a rail is broken, the relay can't pick up, and a clear signal will not be displayed","The track circuit is also an example of what is designated in railway signaling practice as a vital circuit, one which can give an unsafe indication if some of its components malfunction in certain ways. The track circuit is fail-safe, but it could still give a false clear indication should its relay stick in the closed or picked-up position. Vital circuit relays, therefore, are built to very stringent standards: they are large devices; rely on gravity (no springs) to drop their armature; and use special non-loading contacts which will not stick together if hit by a large surge of current (such as nearby lightning","Getting a track circuit to be absolutely reliable is not a simple matter. The electrical leakage between the rails is considerable, and varies greatly with the seasons of the year and the weather. The joints and bolted-rail track are by-passed with bond wire to assure low resistance at all times, but the total resistance still varies. It is lower, for example, when cold weather shrinks the rails and they pull tightly on the track bolts or when hot weather expands to force the ends tightly together. Battery voltage is typically limited to one or two volts, requiring a fairly sensitive relay. Despite this, the direct current track circuit can be adjusted to do an excellent job and false-clears are extremely rare. The principal improvement in the basic circuit has been to use slowly-pulsed DC so that the relay drops out and must be picked up again continually when a block is unoccupied. This allows the use of a more sensitive relay which will detect a train, but additionally work in track circuits twice as long before leakage between the rails begins to threaten reliable relay operation. Referring to , the situations determining the minimum block length for the standard two-block, three-indication ABS system. Since the train may stop with its rear car just inside the rear boundary of a block, a following train will first receive warning just one block-length away. No allowance may be made for how far the signal indication may be seen by the engineer. Swivel block must be as long as the longest stopping distance for any train on the route, traveling at its maximum authorized speed.","From this standpoint, it is important to allow trains to move along without receiving any approach indications which will force them to slow down. This requires a train spacing of two block lengths, twice the stopping distance, since the signal can't clear until the train ahead is completely out of the second block. When fully loaded trains running at high speeds, with their stopping distances, block lengths must be long, and it is not possible to get enough trains over the line to produce appropriate revenue.","The three-block, four-indication signaling shown in  reduces the excess train spacing by 50% with warning two blocks to the rear and signal spacing need be only \u00bd the braking distance. In particularly congested areas such as downgrades where stopping distances are long and trains are likely to bunch up, four-block, four-indication signaling may be provided and advanced approach, approach medium, approach and stop indications give a minimum of three-block warning, allowing further block-shortening and keeps things moving.",{"@attributes":{"id":"p-0182","num":"0181"},"figref":"FIG. 8"},"Some of the systems that are currently developed by different railroads are shown in . With the general rules discussed below, a railroad is free to establish the simplest and most easily maintained system of aspects and indications that will keep traffic moving safely and meet any special requirements due to geography, traffic pattern, or equipment. Aspects such as flashing yellow for approach medium, for example, may be used to provide an extra indication without an extra signal head. This is safe because a stuck flasher will result in either a steady yellow approach or a more restrictive light-out aspect. In addition, there are provisions for interlocking so the trains may branch from one track to another.","To take care of junctions where trains are diverted from one route to another, the signals must control train speed. The train traveling straight through must be able to travel at full speed. Diverging routes will require some limit, depending on the turnout members and the track curvature, and the signals must control train speed to match. One approach is to have signals indicate which route has been set up and cleared for the train. In the American approach of speed signaling, in which the signal indicates not where the train is going but rather what speed is allowed through the interlocking. If this is less than normal speed, distant signals must also give warning so the train can be brought down to the speed in time.  show typical signal aspects and indications as they would appear to an engineer. Once a route is established and the signal cleared, route locking is used to insure that nothing can be changed to reduce the route's speed capability from the time the train approaching it is admitted to enter until it has cleared the last switch. Additional refinements to the basic system to speed up handling trains in rapid sequence include sectional route locking which unlocks portions of the route as soon as the train has cleared so that other routes can be set up promptly. Interlocking signals also function as block signals to provide rear-end protection. In addition, at isolated crossings at grade, an automatic interlocking can respond to the approach of a train by clearing the route if there are no opposing movements cleared or in progress. Automatic interlocking returns everything to stop after the train has passed. As can be observed, the movement of multiple trains among the track potentially involves a series of interconnected activities and decisions which must be performed by a controller, such as a dispatcher. In essence, for a railroad the dispatcher controls the operation of the trains and permissions may be set by computer control, thereby controlling the railroad. Unfortunately, if the dispatcher fails to obey the rules as put in place, traffic collisions may occur.","In the context of a model railroad the controller is operating a model railroad layout including an extensive amount of track, several locomotives (trains), and additional functionality such as switches. The movement of different objects, such as locomotives and entire trains, may be monitored by a set of sensors. The operator issues control commands from his computer console, such as in the form of permissions and class warrants for the time and track used. In the existing monolithic computer systems for model railroads a single operator from a single terminal may control the system effectively. Unfortunately, the present inventor has observed that in a multi-user environment where several clients are attempting to simultaneously control the same model railroad layout using their terminals, collisions periodically nevertheless occur. In addition, significant delay is observed between the issuance of a command and its eventual execution. The present inventor has determined that unlike full scale railroads where the track is controlled by a single dispatcher, the use of multiple dispatchers each having a different dispatcher console may result in conflicting information being sent to the railroad layout. In essence, the system is designed as a computer control system to implement commands but in no manner can the dispatcher consoles control the actions of users. For example, a user input may command that an event occur resulting in a crash. In addition, a user may override the block permissions or class warrants for the time and track used thereby causing a collision. In addition, two users may inadvertently send conflicting commands to the same or different trains thereby causing a collision. In such a system, each user is not aware of the intent and actions of other users aside from any feedback that may be displayed on their terminal. Unfortunately, the feedback to their dispatcher console may be delayed as the execution of commands issued by one or more users may take several seconds to several minutes to be executed.","One potential solution to the dilemma of managing several users' attempt to simultaneously control a single model railroad layout is to develop a software program that is operating on the server which observes what is occurring. In the event that the software program determines that a collision is imminent, a stop command is issued to the train overriding all other commands to avoid such a collision. However, once the collision is avoided the user may, if desired, override such a command thereby restarting the train and causing a collision. Accordingly, a software program that merely oversees the operation of track apart from the validation of commands to avoid imminent collisions is not a suitable solution for operating a model railroad in a multi-user distributed environment. The present inventor determined that prior validation is important because of the delay in executing commands on the model railroad and the potential for conflicting commands. In addition, a hardware throttle directly connected to the model railroad layout may override all such computer based commands thereby resulting in the collision. Also, this implementation provides a suitable security model to use for validation of user actions.","Referring to , the client program  preferably includes a control panel  which provides a graphical interface (such as a personal computer with software thereon or a dedicated hardware source) for computerized control of the model railroad . The graphical interface may take the form of those illustrated in , or any other suitable command interface to provide control commands to the model railroad . Commands are issued by the client program  to the controlling interface using the control panel . The commands are received from the different client programs  by the controlling interface . The commands control the operation of the model railroad , such as switches, direction, and locomotive throttle. Of particular importance is the throttle which is a state which persists for an indefinite period of time, potentially resulting in collisions if not accurately monitored. The controlling interface  accepts all of the commands and provides an acknowledgment to free up the communications transport for subsequent commands. The acknowledgment may take the form of a response indicating that the command was executed thereby updating the control panel . The response may be subject to updating if more data becomes available indicating the previous response is incorrect. In fact, the command may have yet to be executed or verified by the controlling interface . After a command is received by the controlling interface , the controlling interface  passes the command (in a modified manner, if desired) to a dispatcher controller . The dispatcher controller  includes a rule-based processor together with the layout of the railroad  and the status of objects thereon. The objects may include properties such as speed, location, direction, length of the train, etc. The dispatcher controller  processes each received command to determine if the execution of such a command would violate any of the rules together with the layout and status of objects thereon. If the command received is within the rules, then the command may be passed to the model railroad  for execution. If the received command violates the rules, then the command may be rejected and an appropriate response is provided to update the clients display. If desired, the invalid command may be modified in a suitable manner and still be provided to the model railroad . In addition, if the dispatcher controller  determines that an event should occur, such as stopping a model locomotive, it may issue the command and update the control panels  accordingly. If necessary, an update command is provided to the client program  to show the update that occurred.","The \u201casynchronous\u201d receipt of commands together with a \u201csynchronous\u201d manner of validation and execution of commands from the multiple control panels  permits a simplified dispatcher controller  to be used together with a minimization of computer resources, such as com ports. In essence, commands are managed independently from the client program . Likewise, a centralized dispatcher controller  working in an \u201coff-line\u201d mode increases the likelihood that a series of commands that are executed will not be conflicting resulting in an error. This permits multiple model railroad enthusiasts to control the same model railroad in a safe and efficient manner. Such concerns regarding the interrelationships between multiple dispatchers does not occur in a dedicated non-distributed environment. When the command is received or validated all of the control panels  of the client programs  may likewise be updated to reflect the change. Alternatively, the controlling interface  may accept the command, validate it quickly by the dispatcher controller, and provide an acknowledgment to the client program . In this manner, the client program  will not require updating if the command is not valid. In a likewise manner, when a command is valid the control panel  of all client programs  should be updated to show the status of the model railroad .","A manual throttle  may likewise provide control over devices, such as the locomotive, on the model railroad . The commands issued by the manual throttle  may be passed first to the dispatcher controller  for validation in a similar manner to that of the client programs . Alternatively, commands from the manual throttle  may be directly passed to the model railroad  without first being validated by the dispatcher controller . After execution of commands by the external devices , a response will be provided to the controlling interface  which in response may check the suitability of the command, if desired. If the command violates the layout rules then a suitable correctional command is issued to the model railroad . If the command is valid then no correctional command is necessary. In either case, the status of the model railroad  is passed to the client programs  (control panels ).","As it can be observed, the event driven dispatcher controller  maintains the current status of the model railroad  so that accurate validation may be performed to minimize conflicting and potentially damaging commands. Depending on the particular implementation, the control panel  is updated in a suitable manner, but in most cases, the communication transport  is freed up prior to execution of the command by the model railroad .","The computer dispatcher may also be distributed across the network, if desired. In addition, the computer architecture described herein supports different computer interfaces at the client program .","The present inventor has observed that periodically the commands in the queue to the digital command stations or the buffer of the digital command station overflow resulting in a system crash or loss of data. In some cases, the queue fills up with commands and then no additional commands may be accepted. After further consideration of the slow real-time manner of operation of digital command stations, the apparent solution is to incorporate a buffer model in the interface  to provide commands to the digital command station at a rate no faster than the ability of the digital command station to execute the commands together with an exceptionally large computer buffer. For example, the command may take 5 ms to be transmitted from the interface  to the command station, 100 ms for processing by the command station, 3 ms to transfer to the digital device, such as a model train. The digital device may take 10 ms to execute the command, for example, and another 20 ms to transmit back to the digital command station which may again take 100 ms to process, and 5 ms to send the processed result to interface . In total, the delay may be on the order of 243 ms which is extremely long in comparison to the ability of the interface  to receive commands and transmit commands to the digital command station. After consideration of the timing issues and the potential solution of simply slowing down the transmission of commands to the digital command station and incorporating a large buffer, the present inventor came to the realization that a queue management system should be incorporated within the interface  to facilitate apparent increased responsiveness of the digital command station to the user. The particular implementation of a command queue is based on a further realization that many of the commands to operate a model railroad are \u201clossy\u201d in nature which is highly unusual for a computer based queue system. In other words, if some of the commands in the command queue are never actually executed, are deleted from the command queue, or otherwise simply changed, the operation of the model railroad still functions properly. Normally a queuing system inherently requires that all commands are executed in some manner at some point in time, even if somewhat delayed.","Initially the present inventor dame to the realization that when multiple users are attempting to control the same model railroad, each of them may provide the same command to the model railroad. In this event, the digital command station would receive both commands from the interface , process both commands, transmit both commands to the model railroad, receive both responses therefrom (typically), and provide two acknowledgments to the interface . In a system where the execution of commands occurs nearly instantaneously the re-execution of commands does not pose a significant problem and may be beneficial for ensuring that each user has the appropriate commands executed in the order requested. However, in the real-time environment of a model railroad all of this activity requires substantial time to complete thereby slowing down the responsiveness of the system. Commands tend to build up waiting for execution which decreases the user perceived responsiveness of control of the model railroad. The user perceiving no response continues to request commands be placed in the queue thereby exacerbating the perceived responsiveness problem. The responsiveness problem is more apparent as processor speeds of the client computer increase. Since there is but a single model railroad, the apparent speed with which commands are executed is important for user satisfaction.","Initially, the present inventor determined that duplicate commands residing in the command queue of the interface  should be removed. Accordingly, if different users issue the same command to the model railroad then the duplicate commands are not executed (execute one copy of the command). In addition, this alleviates the effects of a single user requesting that the same command is executed multiple times. The removal of duplicate commands will increase the apparent responsiveness of the model railroad because the time required to re-execute a command already executed will be avoided. In this manner, other commands that will change the state of the model railroad may be executed in a more timely manner thereby increasing user satisfaction. Also, the necessary size of the command queue on the computer is reduced.","After further consideration of the particular environment of a model railroad the present inventor also determined that many command sequences in the command queue result in no net state change to the model railroad, and thus should likewise be removed from the command queue. For example, a command in the command queue to increase the speed of the locomotive, followed by a command in the command queue to reduce the speed of the locomotive to the initial speed results in no net state change to the model railroad. Any perceived increase and decrease of the locomotive would merely be the result of the time differential. It is to be understood that the comparison may be between any two or more commands. Another example may include a command to open a switch followed by a command to close a switch, which likewise results in no net state change to the model railroad. Accordingly, it is desirable to eliminate commands from the command queue resulting in a net total state change of zero. This results in a reduction in the depth of the queue by removing elements from the queue thereby potentially avoiding overflow conditions increasing user satisfaction and decreasing the probability that the user will resend the command. This results in better overall system response.","In addition to simply removing redundant commands from the command queue, the present inventor further determined that particular sequences of commands in the command queue result in a net state change to the model railroad which may be provided to the digital command station as a single command. For example, if a command in the command queue increases the speed of the locomotive by 5 units, another command in the command queue decreases the speed of the locomotive by 3 units, the two commands may be replaced by a single command that increases the speed of the locomotive by 2 units. In this manner a reduction in the number of commands in the command queue is accomplished while at the same time effectuating the net result of the commands. This results in a reduction in the depth of the queue by removing elements from the queue thereby potentially avoiding overflow conditions. In addition, this decreases the time required to actually program the device to the net state thereby increasing user satisfaction.","With the potential of a large number of commands in the command queue taking several minutes or more to execute, the present inventor further determined that a priority based queue system should be implemented. Referring to , the command queue structure may include a stack of commands to be executed. Each of the commands may include a type indicator and control information as to what general type of command they are. For example, an A command may be speed commands, a B command may be switches, a C command may be lights, a D command may be query status, etc. As such, the commands may be sorted based on their type indicator for assisting the determination as to whether or not any redundancies may be eliminated or otherwise reduced.","Normally a first-in-first-out command queue provides a fair technique for the allocation of resources, such as execution of commands by the digital command station, but the present inventor determined that for slow-real-time model railroad devices such a command structure is not the most desirable. In addition, the present inventor realized that model railroads execute commands that are (1) not time sensitive, (2) only somewhat time sensitive, and (3) truly time sensitive. Non-time sensitive commands are merely query commands that inquire as to the status of certain devices. Somewhat time sensitive commands are generally related to the appearance of devices and do not directly impact other devices, such as turning on a light. Truly time sensitive commands need to be executed in a timely fashion, such as the speed of the locomotive or moving switches. These truly time sensitive commands directly impact the perceived performance of the model railroad and therefore should be done in an out-of-order fashion. In particular, commands with a type indicative of a level of time sensitiveness may be placed into the queue in a location ahead of those that have less time sensitiveness. In this manner, the time sensitive commands may be executed by the digital command station prior to those that are less time sensitive. This provides the appearance to the user that the model railroad is operating more efficiently and responsively.","Another technique that may be used to prioritize the commands in the command queue is to assign a priority to each command. As an example, a priority of 0 would be indicative of \u201cdon't care\u201d with a priority of 255 \u201cdo immediately,\u201d with the intermediate numbers in between being of numerical-related importance. The command queue would then place new commands in the command queue in the order of priority or otherwise provide the next command to the command station that has the highest priority within the command queue. In addition, if a particular number such as 255 is used only for emergency commands that must be executed next, then the computer may assign that value to the command so that it is next to be executed by the digital command station. Such emergency commands may include, for example, emergency stop and power off. In the event that the command queue still fills, then the system may remove commands from the command queue based on its order of priority, thereby alleviating an overflow condition in a manner less destructive to the model railroad.","In addition for multiple commands of the same type a different priority number may be assigned to each, so therefore when removing or deciding which to execute next, the priority number of each may be used to further classify commands within a given type. This provides a convenient technique of prioritizing commands.","An additional technique suitable for model railroads in combination with relatively slow real time devices is that when the system knows that there is an outstanding valid request made to the digital command station, then there is no point in making another request to the digital command station nor adding another such command to the command queue. This further removes a particular category of commands from the command queue","It is to be understood that this queue system may be used in any system, such as, for example, one local machine without a network, COM, DCOM, COBRA, internet protocol, sockets, etc.","The terms and expressions which have been employed in the foregoing specification are used therein as terms of description and not of limitation, and there is no intention, in the use of such terms and expressions, of excluding equivalents of the features shown and described or portions thereof, it being recognized that the scope of the invention is defined and limited only by the claims which follow."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
