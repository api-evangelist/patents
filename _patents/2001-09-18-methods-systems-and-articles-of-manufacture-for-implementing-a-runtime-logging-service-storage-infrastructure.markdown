---
title: Methods, systems, and articles of manufacture for implementing a runtime logging service storage infrastructure
abstract: Methods, systems and articles of manufacture consistent with the present invention configure a computing system with a logging service that interacts with implementation objects associated with particular types of storage devices through a storage interface. The implementation objects may include processes used to access the storage devices during logging operations. The logging service may also be configured to adjust which storage device is to be used for logging operations without restarting the computing system. This adjustment may be made through a property file that includes properties specific to individual types of storage devices. The property file may be modified to include new properties by a system administrator or by the logging service during runtime operations of the computing system. The new properties may designate new storage devices to be used by the logging service to perform subsequent logging operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07062516&OS=07062516&RS=07062516
owner: Sun Microsystems, Inc.
number: 07062516
owner_city: Santa Clara
owner_country: US
publication_date: 20010918
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","DESCRIPTION OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application relates to U.S. patent application Ser. No. 09\/953,901, entitled \u201cMETHODS, SYSTEMS, AND ARTICLES OF MANUFACTURE FOR EFFICIENT LOG RECORD ACCESS,\u201d filed concurrently with the present application, owned by the assignee of this application and expressly incorporated herein by reference in its entirety.","1. Field of the Invention","This invention relates to managing the resources of a computer system, and more particularly, to methods, systems, and articles of manufacture for dynamically adjusting a logging service storage infrastructure.","2. Background of the Invention","Computer systems have become increasingly more complex. With a variety of peripheral devices and software applications available for use, it has become more complicated for a user or system administrator to manage the resources of computer systems. Computer system resources such as attached devices, network connections, software application, etc., should all be managed to ensure proper and efficient operation of the system they are implemented within. In organizations that use a large number of computer systems remotely distributed, the task of managing the resources for each computer system can be overwhelming.","To address the needs of users and system administrators in charge of managing these distributed systems, the industry has introduced the Web-Based Enterprises Management (WBEM) initiative. WBEM includes a standard for managing systems, networks, users and software applications through the use of Internet technology. Computer systems that operate management applications developed according to WBEM principles can share management data independently of vendor, protocol, operating system, and management standards.","One known standard for implementing WBEM is the Common Information Model (CIM). CIM is a common data model of a schema for describing the management of information in a network environment and provides a common conceptual framework to classify and define parts of the network environment, and describe how they interact. The model is not bound to a particular implementation and enables distributed system management to take place between management systems and applications.","Typically a client may perform management tasks through a CIM Object Manager (CIMOM) located at a remote server. A CIMOM is a process responsible for handling all CIM related communications between a client and the server where the CIMOM is located. To promote the use of CIM related technologies, vendors may provide a CIMOM as an open source resource, thus allowing it to be shared and used by a number of clients configured in various platforms. Doing so, however, may require the CIMOM to include processes and code that are generic in nature. That is, the code and processes included in the open source CIMOM should be compatible with any number of operating systems used by a client.","The generic nature of an open source CIMOM may affect various services provided to a client. One such service that is affected is a logging service. A logging service may maintain a history of selected events, operations, and\/or transactions, that take place during runtime of a computing system and may be recorded as log records in one or more log files. The logging service provided by an open source CIMOM, however, may use a single type of memory device for storing its log files. Accordingly, the CIMOM would not be able to provide logging services in platforms that use various types of storage devices without providing a separate logging service for each type. For a CIMOM offered as an open source resource, it would be virtually impossible to modify the code of its logging service such that it is compatible with every type of memory device that may be incorporated by platforms. Furthermore, adjusting the logging service to accept new storage devices may require the host computing system to reboot in order to activate changes that reflect these additional storage devices.","It is therefore desirable to have a method and system that allows a logging service to be configurable to dynamically accept platform specific storage devices during runtime of the platform the service is monitoring.","Methods, systems and articles of manufacture consistent with features of the present invention enable a computing system to adjust, add, and\/or delete models of storage devices used for logging operations during runtime operations. In one aspect of the invention, a logging service may be configured to interact with a storage interface that uses implementation objects that are each associated with a particular type of storage device incorporated within the computing system. Each implementation object may be configured to use processes specific to a particular type of storage device and may be used by the logging service to access the storage device.","Additionally, methods, systems and articles of manufacture enable the logging service to dynamically adjust the status of a storage device used by the logging service without shutting down or restarting the computing system. In one aspect of the invention, a property file that contains properties that are specific to certain types of storage devices is used by the log storage interface to associate a logging operation with a corresponding implementation object. Furthermore, the property file may be used to add new storage devices during runtime of the computing system. The property file may be adjusted based on events associated with logging operations that are (or will be) performed by the logging service.","Also, methods and systems consistent with features of the present invention may implement policies that define actions that may be performed by the logging service based on predefined conditions and rules. The actions performed by logging service may include adjusting the property file during runtime operations in order to modify the status of storage devices used for logging operations.","Additional aspects of the invention will be set forth in part in the description which follows, and in part will be obvious from the description, or may be learned by practice of methods, systems, and articles of manufacture consistent with features of the present invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as claimed.","Methods, systems, and articles of manufacture consistent with features and principles of the present invention enable a log service to dynamically adjust the status of a log storage device during runtime operations of a computing system that hosts the logging service.","Methods, systems and articles of manufacture consistent with features of the present invention may perform the above functions by using a property file that includes properties that are specific to various types of storage devices. The property file may be modified by a system administrator or by the logging service based on detected events that may or may not be associated with predefined logging policies. The system administrator may define the logging policies prior to, or during, runtime of the computing system. Afterwards, during runtime operations, log requests may be provided to the logging service by components of the computing system. The logging service may access the property file to determine which storage device incorporated by the computing system is activated as a primary log storage device. Once determined, the logging service directs the processed log request to a storage interface configured in accordance with features and principles of the present invention. The storage interface processes the request using a proper implementation object based on the type of storage device indicated in the property file and determined by the logging service. The implementation object may be used to perform the detailed functions associated with the actual access of the storage device to complete the logging operation.","Methods, systems, and articles of manufacture, consistent with features and principles of the present invention, may also allow dynamic adjustments of the property file and policies during runtime of the computing system. In one aspect of the invention, the logging service may detect log service events that may reflect certain logging operations or a current status of an active storage device. When an event is detected, the logging service may determine whether a policy exists that is configured to handle the detected event. If so, the logging service may perform functions defined by the policy. In one aspect of the invention, these functions may include modifying the property file to reflect a new active storage device to be used for subsequent logging operations. The new storage device may have been incorporated into the computing system during runtime operations, and a new implementation object associated with the new storage device may be created. Afterwards, the logging service may perform logging operations using the newly activated storage device via the newly created implementation object.","Additionally, methods, systems, and articles of manufacture consistent with features and principles of the present invention enable a system administrator to adjust the property file when a log service event is detected during runtime of the computing system. The system administrator may access the property file, adjust the properties located therein (or add a new property), and allow the logging service to refresh the property file to activate the changes made. Furthermore, the system administrator may also modify the policies (or add a new one) such that logging service may utilize the modified policy in subsequent logging operations.","Reference will now be made in detail to the exemplary aspects of the invention, examples of which are illustrated in the accompanying drawings. Wherever possible, the same reference numbers will be used throughout the drawings to refer to the same or like parts.","The above-noted features and other aspects and principles of the present invention may be implemented in various environments. Such environments and related applications may be specially constructed for performing the various processes and operations of the invention or they may include a general purpose computer or computing platform selectively activated or reconfigured by program code to provide the necessary functionality. The processes disclosed herein are not inherently related to any particular computer or other apparatus, and may be implemented by a suitable combination of hardware, software, and\/or firmware. For example, various general purpose machines may be used with programs written in accordance with teachings of the invention, or it may be more convenient to construct a specialized apparatus or system to perform the required methods and techniques.","The present invention also relates to computer readable media that include program instruction or program code for performing various computer-implemented operations based on the methods and processes of the invention. The program instructions may be those specially designed and constructed for the purposes of the invention, or they may be of the kind well-known and available to those having skill in the computer software arts. Examples of program instructions include for example machine code, such as produced by a compiler, and files containing a high level code that can be executed by the computer using an interpreter.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 1","FIG. 1"],"b":["110","120","140","110","110","115","111","116","110","117","120","110"]},"Memory  may include, among other things, data (not shown), client application  and client API . Client application  may be a software application configured to analyze and manage resources located in server . Client application  may manage system aspects such as, for example, disk information (space availability, partitions, etc.), CPU load, event processing, date, time, ports, etc. Client application  may also manage specific devices of server , such as disks, tape drives, modems, remote I\/O devices, and network interfaces. Furthermore, client application  may be configured to manage software applications running on server  by determining what applications are currently being executed by server , what applications are installed, the state of these applications, which applications can be terminated, and performing user and process management. A software developer operating client  may use any suitable software tool to develop a management application (client application ) for processing and displaying data from managed object of server .","Client API  may be an application programming interface used by client application  to communicate with CIMOM  located in server . Client API  may use a variety of communication protocols, including, but not limited to, Remote Procedure Call (RPC), Remote Method Invocation (RMI) and eXtensible Markup Language (XML) over a Hyper-Text Markup Language (HTTP) protocol to communicate directly with CIMOM .","In one configuration consistent with certain principles related to the present invention, client API  may represent and manipulate CIM objects. These objects may be represented in software written in an object-oriented programming language, such as the Java\u2122 programming language. An object may be a computer representation or model of a managed resource of server , such as a printer, disk drive, and CPU. A developer uses the CIM specification to describe managed objects and retrieve information about managed objects in server . Further information associated with the CIM specification may be found in the DMTF, Inc. Common Information Model (CIM) Specification, Version 2.2, Jun. 14, 1999, which is expressly incorporated by reference.","Network  interconnects client  to server . Network  may include one or more communication networks, including the Internet or any other similar network that supports Web-based processing.","Server  may be a computer system having resources that need to be managed such as CPU load, disk space installed applications, etc. Server  may include a desktop computer, workstation, or any other similar server side system known in the art. Furthermore, server  may include, among other things a CPU, associated memory, and numerous other elements and functionalities available in computer systems (all not shown). Also, software applications may be located in the associated memory and executed by the CPU. As shown in , server  further includes a CIMOM , repository , providers - to -N, and operating system .","CIMOM  may be a WBEM compliant manager that manages CIM objects that may be represented as object oriented classes written in an object-oriented programming language, such as the Java programming language. Client  running client application  connects to CIMOM , through client API  to obtain resource information about server . Once connected client  receives a reference to CIMOM  from which client  may then perform WBEM operations using this reference.","CIMOM  communicates with either repository  or an appropriate provider - to -N, to obtain information about an object requested by client . CIMOM  may also perform other functions such as setting up communications with repository  and providers - to -N to route requests thereto, security checks, and delivering data from providers - to -N and repository  to client .","Repository  maybe a central storage area for CIM classes and instance definitions. In one aspect of the invention, WBEM classes may be stored in repository  as specialized objects written in an object oriented language, such as the Java programming language. Repository  may be located within server  or located remotely.","Providers - to -N may be classes that perform various functions in response to a request from CIMOM  and act as intermediaries between CIMOM  and one or more managed devices. For instance, providers - to -N may map information from a managed device to a CIM class that may be written in an object oriented language, such as the Java programming language. For exemplary purposes, this CIM class may be referred to as a CIM Java class. Furthermore, providers - to -N may also map information from the CIM Java class to a managed device format. Providers - to -N may supply instances of a given class and support the retrieval, enumeration, modification, and deletion operations associated with managed objects. Furthermore, providers - to -N may supply property values associated with managed objects, such as disk space. Each provider - to -N may be dedicated to a particular type of operation, such as supplying dynamic property values associated with managed objects. Alternatively, providers - to -N may act collectively to process a request received from CIMOM . Server  may also be configured with only a single provider that handles all communications between CIMOM  and operating system .","Operating system  may be any operating system for computing or data i processing systems of any type, such as the Solaris\u00ae operating system from Sun Microsystems, Inc.","Logging service  may be a process provided by CIMOM  that performs logging operations consistent with features and principles of the present invention. The logging operations may be associated with storing data corresponding to transactions, operations and events that occur during runtime of server  and its components, such as CIMOM . The term \u201cruntime\u201d may be associated with the execution of processes, applications, or services by server , CIMOM , operating system , and providers - to -N. Also, the term \u201cruntime\u201d may be associated with the condition of not requiring a restart or reboot of processes, applications, services, and\/or components consistent with features and principles of the present invention. Additionally, \u201cruntime\u201d may also be associated with the execution of processes, application, or services by entities other than that shown in , such as a CPU or controller. Furthermore, the term \u201cruntime\u201d may not be limited to the actual execution of a process, application, or event, but may also be associated with data transfers, transactions, idle operations, and any other state that server  and its components may be in after start-up and initialization and may not require a restart of the computer system.","Logging service  may be able to directly communicate with providers - to -N to perform logging operations associated with operations performed by the providers. Logging service  may store data associated with any event, transaction, operation, or the like, between providers - to -N and CIMOM . Furthermore, logging service  may be configured to perform logging operations associated with any component of server . For exemplary purposes, the logging operations performed by logging service  consistent with features of the present invention will be described with reference to providers - to -N; however, the description may be associated with any other component of server , and client  as well. It should also be noted that logging service  is not limited to being incorporated by CIMOM , and may be configured as a separate process in communication with CIMOM , or with any other managing process that is implemented by server .","Log storage interface  may be a process that interacts with logging service  to perform functions consistent with features and principles of the present invention. Log storage interface  may be configured using the Java programming language, however, any other programming language may be used. In one configuration consistent with certain principles related to the present invention, log storage interface  defines the manner by which logging service  interacts with log storage(s) . Log storage interface  may include a list of methods that logging service  assumes will be available for it to call into a storage implementation object that may be plugged into the infrastructure at runtime. Log storage interface  may be implemented within CIMOM , logging server , or may be a process located remotely. Additionally, log storage interface  may be configured remotely from server  and accessed by logging service  through remote process communication techniques known in the art.","Log storage(s)  may be one or more devices used for storing data collected during logging operations performed by logging server . Log storage device(s)  may be any type of storage device that is capable of storing data, including, but not limited to, a semiconductor type memory (i.e., RAM, ROM, SRAM, DRAM, EPROM, etc.), a magnetic disk type memory, a magnetic tape type memory, and an optical disk type memory. Additionally, log storage(s)  may be any combination of various types of storage devices. Log storage(s)  may include log files that are locations that store data associated with selected logging operations, such as log records. Log records may include data associated with an operation, transaction, and\/or event that logging service  is to log. The log files may be distributed across a plurality of log storage device(s) , or may be located within a single device. Furthermore, the log files may be segregated by logging service  based on particular criteria, including, but not limited to, the type of logging operation performed, a type of data in a log record, and the source of the log request received by logging service .","Policy file  may be a file that includes one or more processes that are configured by a system administrator to manage the behavior or operations of functions performed by CIMOM , logging service , log storage interface , providers - to -N, and any other component within server . A system administrator may be a user that manages and\/or oversees the hardware, software, and network operations of server . Alternatively, a system administrator may be a user that has access to the components of server , including CIMOM .","In one configuration consistent with certain principles related to the present invention, policy file  may be configured under a CIM Core Policy Model that enables a system administrator to represent and manage policies associated with CIM objects managed by CIMOM . The CIM Core Policy Model may include policy groups, rules, condition, and action classes that may be used by a system administrator to represent different types of policies. Policy groups may be associated with a policy defined for a group of common objects or processes. The basis for the commonality of these objects may vary and are not intended to be associated with identical features of the objects, although they may be. A set of conditions associated with a policy rule may be specific when the policy rule is applicable. Additionally, policy actions that may, or may not, modify the state of a storage device object may be executed based on the policy rules and conditions. The policy rules may be prioritized, thus allowing a certain rule to supercede another when certain conditions are met. In one aspect of the invention, the policy file includes policies associated with logging operations performed by logging service . For more information associated with the CIM Core Policy Model, see \u201cCIM Core Policy Model,\u201d DMTF Specification, Feb. 5, 2000, pages 1\u201321, which is herein incorporated by reference.","Although  shows a single client , it should be noted that more than one client  may be in communication with server . Furthermore, a plurality of servers  may also be used with one or more clients  to perform functions consistent with features and principles of the present invention. Additionally, client  and server  may be located in the same computer system, with communications between the two facilitated by a communication bus or link. Also, server  may execute software applications and processes that perform tasks similar to that of client . Accordingly, these applications and processes may provide requests to CIMOM  associated with a managed resource as well. Furthermore, methods, systems and articles of manufacture consistent with features of the present invention are not limited to CIMOM  receiving requests from client  alone. Requests from other sources, such as components within server  and entities outside of server  may be processed by CIMOM .","It should also be noted that systems, methods, and articles of manufacture are not limited to the configuration depicted in . That is, computing systems, such as server  and client , may be implemented in environments other than a CIM configured environment. For exemplary purposes, description of systems and methods of the present invention will be associated with the system environment shown in . As noted above, however, the following description of methods, systems, and articles of manufacture consistent with features of the present invention may be employed in other configurations without departing from the scope of the invention.","CIMOM , and its functionalities, such as logging service , may be provided by a vendor (not shown) over network  to server . Server  may download or retrieve CIMOM  from the vendor using well known network data transfer means, or in the alternative, receive CIMOM  as program code on a computer-readable storage medium. A user, such as a system administrator, may incorporate CIMOM  within server  and configure it to operate with operating system , whatever type it may be. In one configuration consistent with certain principles related to the present invention, logging service  may provide a configurable logging storage infrastructure that enables server  to implement practically any type of log storage device  prior to, and during, runtime.  illustrates an exemplary block diagram of log storage interface  and its relationship with logging service  and log storage(s)  that may be implemented by the present invention.","As shown in , log storage interface  provides an interface between logging service  and log storage device(s) . Log storage interface  may include a storage interface , and implementation objects, such as memory implementation object , file implementation object , and tape implementation object . Furthermore, log storage interface  may include a list of methods that may be used by logging service  during a logging operation. Storage interface  may be a process that is configured to recognize logging operations that are processed by logging service , and direct the operations to an appropriate implementation object , , and , based on the logging operations. In one configuration consistent with certain principles related to the present invention, storage interface  may be configured to receive logging operation requests from logging service  that designate a type of log storage device to be used to store log records. Storage interface  may process the requests by using implementation objects \u2013 to access an appropriate storage device \u2013 based on information included within the requests.","Implementation objects \u2013 may be objects that implement one or more of the methods that may be included within log storage interface . Implementation objects \u2013 may call the one or more methods to process a requested logging operation and communicate with a particular type of storage device . For instance, as shown in , memory implementation object  may be configured to interface with memory storage device ; file implementation object  may be configured to interface with file storage device ; and tape implementation object  may be configured to interface with tape storage device . The term \u201cmemory\u201d used with memory implementation object  and memory storage device  may be associated with semiconductor type memories, such as RAM, ROM, SRAM, DRAM, DRAM, EPROM, NVRAM, or the like. The term \u201cfile\u201d used in conjunction with file implementation object  and file storage device  may be associated with magnetic disk devices. And, the term \u201ctape\u201d used in conjunction with tape implementation object  and tape storage device  may be associated with magnetic tape storage devices. It should be noted, however, that the above examples are not intended to be limiting and any number of various types of storage devices, such as optical disks, (and their associated implementation objects) may be implemented by systems and methods consistent with features of the present invention, without departing from the scope of the invention.","In one configuration consistent with certain principles related to the present invention, implementation objects \u2013 may be configured as instances of classes written in any object oriented programming language, such as the Java programming language. These instances may incorporate the necessary methods and codes needed to interact and exchange information with respective storage devices \u2013. Furthermore, storage devices \u2013 may be represented as objects of storage device classes that manage the communications with a particular storage device. Alternatively, implementation objects \u2013 may be located elsewhere where logging service  may have access to them.","To better describe the present invention,  illustrate exemplary processes that may be performed by server , consistent with features of the present invention. Although the following description is directed to the CIM configured environment illustrated in , one skilled in the art would recognize that methods, systems, and articles of manufacture consistent with features of the present invention may be directed to non-CIM configured environments. Accordingly, the exemplary processes described below may be implemented in various system configurations that do not use CIM methodologies, without departing from the scope of the invention. As described, CIMOM  may be provided by a vendor and installed in server  by a system administrator. After installation, the system administrator may, among other things, set up logging policies within policy file  (Step ). The logging policies may include a variety of rules, conditions, and actions that enable logging service  to perform logging operations as defined by the system administrator's management scheme. For example, a system administrator may create log policies that direct all logging operations received by logging service  with a particular timestamp to be directed to a selected storage device, such as a file storage device. For instance, a policy may be defined that directs logging operations received after midnight to a tape storage device instead of a memory storage device previously used by logging service . Other examples of logging policies may include directing backup logging operations to a tape memory device, replacing an active storage device with another storage device when the active storage device is running out of, or ran out, of memory space, and prioritizing various storage devices used by server  to allow logging service  to direct log records to selected storage devices based on predetermined conditions. Of course, other logging policies that are associated with various conditions, rules, and storage devices may be configured by a system administrator and stored in policy file , and methods and systems consistent with features of the present invention are not limited to the examples above.","Returning to , once the logging policies are created by a system administrator, the server system is started (Step ), and subsequently CIMOM  starts up logging service  in preparation for performing logging operations consistent with features and principles of the present invention (Step ). During server  runtime operations, CIMOM may receive requests for performing CIM related operations from client  (Step ). Alternatively, the requests may originate from sources other than client , such as an application or process executed within server .","When CIMOM  receives a request, it may be processed using either a provider - to -N or repository . The request is processed based on its type and whether information associated with the request may be obtained from repository  or not. In the event the information needed to process the request is not found in repository , CIMOM  may use provider - to -N to locate the system information necessary to handle the request (if possible). Once the appropriate destination is located, CIMOM  eventually receives a result corresponding to the routed request and forwards the results back the source of the request, such as client .","In one configuration consistent with certain principles related to the present invention, providers - to -N and\/or CIMOM  may request logging operations from logging service  while processing a request (Step ). For instance, in the event a provider - to -N handles a request from CIMOM , it may request that logging service  create a log record associated with any transactions and\/or operations performed while processing the request. Alternatively, logging service  may be configured to monitor the operations of providers - to -N and recognize when a log record is to be created based on logging policies defined in policy file  without waiting for a log request. In one aspect of the invention, the requests for logging operations may include, but is not limited to, writing to a log file, deleting a log record, deleting a log file, reading a log record, creating a backup copy of a log record, creating a backup copy of a log file, and a request to list all records in a log file.","When logging service  receives a logging operation request, it may perform the operations necessary to create a log record associated with the particular type of transaction (and\/or operation, event) performed by provider - to -N. For example, a log record may be formed to include a variety of fields including, but not limited to, timestamp data that reflects a time when the transaction occurred, description data that reflects the type of transaction, a log record identifier for locating the log record, data associated with components and\/or processes involved with the transaction, error and\/or event messages associated with the transactions, and any other information associated with the transaction that may be used by server  and its components. The operations performed by logging service  in preparation for storing the log record in a particular log file may include determining the location of the log file, and what type of storage device to place the log record in.","In one configuration consistent with certain properties related to the present invention, CIMOM  may use property files that may be located in CIMOM  or repository . The property files may be written in a number of different programming languages, including object oriented programming languages, such as the Java programming language. The property file may include a property called DataStoreImpl that may be used to define particular types of storage devices used by server . A DataStoreImpl property may be defined by a system administrator and stored within the property file prior to starting server . For example, if server  is initially configured with only file storage devices for logging operations, the system administrator may edit the property file to define a DataStoreImpl property specific to file storage type devices. In one aspect of the invention, a DataStoreImpl property may be defined as:","DataStoreImpl=com.sun.log.filelog,","where \u201c.filelog\u201d may be an extension that identifies an implementation object, such as file implementation object , that may be used to store log record in log storage(s) .","Alternatively, the system administrator may designate other types of storage devices such as memory and tape storage devices by respectively adjusting the DataStoreImpl property as:","DataStoreImpl=com.sun.log.memlog; or","DataStoreImpl=com.sun.log.tapelog.","The DataFileImpl property may designate which implementation object should be used by logging service  while processing a logging operation. Accordingly, methods, systems, and articles of manufacture consistent with features of the present invention may assign the DataFileImpl property a particular name that is associated with a particular implementation object. It should be noted that the actual names defined in the property file may vary and are not limited to the above examples. For instance, assume that log storage interface  has been defined with the appropriate methods for performing logging operations. Further assume that three classes written in the Java programming language that implement log storage interface  have been defined as well. These three classes, for exemplary purposes, may be named:","com.sun.foo.bar.FileStorageImpl;","com.sun.foo.bar.PapyrusStorageImpl; and","com.sun.foo.bar.TapeStorageImpl.","In the above example, the DataFileImpl property may be assigned any one of the above three class names, from which logging service  may use to perform requested logging operations.","Furthermore, there may be more than one DataStoreImpl property defined in the property file that designate the various storage devices used by server . Also, the property file may be associated with logging policies by the system administrator such that the DataStoreImpl properties for the various storage devices are prioritized. For example, the property file may include various versions of a memory storage device log that reflect different storage devices of the same type. Alternatively, the property file may prioritize the DataStoreImpl properties based on storage device types, and maybe, conditions set forth by a logging policy defined in policy file . For example, in a property file that includes the following properties:","com.sun.log.memlog.;","com.sun.log.memlog.;","com.sun.log.tapelog.; and","com.sun.log.filelog.,","the \u201c.\u201d extension in the memlog. property may indicate a memory storage device that has first priority. Accordingly, logging service  may default to its use for logging operations unless instructed otherwise. For instance, in the event the top three priority storage devices defined in the above exemplary property file are unavailable, logging service  may use the storage device with the lowest priority to perform logging operations, which is the second memory storage device reflected by the memlog. property. It should be noted that the extensions described above are exemplary and are not intended to be limiting. One skilled in the art would recognize that any name with various extension identifiers may be used without departing from the scope of the invention.","Returning back to , following the operations performed by logging service  in preparation for logging a log record, the property file is accessed from CIMOM  or repository  (Step ). Logging service  determines from the accessed property file which (if more than one is designated) storage device is activated by the DataStoreImpl property, and uses this information to request a logging operation to be performed based on the activated storage device type. The logging operation request may include the property data determined by logging service . The logging operation request created by logging service  may be directed to storage interface , which in turn may use the DataStoreImpl property data to create an appropriate inplementation object \u2013 (Step ). Storage interface  may provide a handle (i.e., a reference) associated with the created inplementation object \u2013 to logging service . Accordingly, logging service , storage interface , and the created implementation object \u2013 may collectively perform the necessary operations to interface with the storage device \u2013 and allow the logging operations to proceed (Step ). Logging service  may use the handle to load or invoke the inplementation object associated with a storage device activated in the property file, thus allowing logging operations to complete. Alternatively, storage interface  may be configured to use a loaded inplementation object \u2013 to access a storage device  and provide information to logging service  during, or after, the access.","As described, methods, systems, and articles of manufacture consistent with features and principles of the present invention allow server  to designate a storage device \u2013 as the log storage  to be used by logging service  when performing logging operations. In another aspect of the invention, methods, systems, and articles of manufacture allow logging service  to dynamically recognize different storage devices during runtime of server .  illustrates an exemplary process associated with the dynamic log storage adjustment features of the present invention.","As shown in , during normal runtime server  operations, logging service  may perform logging operations, as described with reference to , using a particular storage device, such as memory storage . During these logging operations, logging service  may receive a log service event from a provider - to -N, repository , or any other source) that may indicate that a particular condition has been detected (Step ). A log service event may indicate to logging service  that a condition has occurred that may affect the storage device used by server  and logging service . For example, at some point during runtime operations, server  may be introduced with a new storage device, such as tape storage , or a different memory storage device , etc. Server  may be configured to create a log service event based on an indication that the new storage device is to be used for logging operations. The event may indicate that logging service  needs to refresh the property file with a new property that reflects the new storage device. Alternatively, a log service event may be associated with a logging policy. For instance, logging service  may be Implementing a logging policy that introduces a log service event when an active storage device is running out of memory. Furthermore, a logging policy may introduce a log service event when a particular type of logging operation is requested by logging service , such as a backup logging operation.","Returning to , when a log event is detected, logging service  then may determine whether a logging policy exists for the particular event detected (Step ). Logging service  may check policy file  to determine whether the log event includes a condition that meets a logging policy criteria. For example, if the log service event is an indication that a storage device will not take any more log records because of memory availability, logging service  may determine whether a logging policy exists that is configured to handle this situation. In one configuration consistent with certain principles related to the present invention, there may be a logging policy that instructs logging service  to designate another storage device defined in the property file as the active storage device to be used for logging operations based on the memory availability event described above.","If a logging policy does exist (Step ; YES), logging service  may locate and access the property file in CIMOM  (or repository  if it could not be located in CIMOM ) (Step ). Once accessed, the property file is adjusted according to the logging policy (Step ). The adjustment of the property file may involve resetting a different DataStoreImpl property to indicate a new active property. For example, if the current DataStoreImpl property designates file storage device  as the current destination device for logging operations (thus making the file storage device as the active storage device), logging service  may select another DataStoreImpl property defined in the property file according to the logging policy, such as one that is associated with tape storage device .","In one configuration consistent with certain principles related to the present invention, the adjustment of the property file may be performed by using the refresh interface associated with the Java programming language. This interface may allow the property file to refresh itself once it has been modified. Logging service  then may invoke a method associated with the refresh interface that allows the property file (which may be represented as an object in CIMOM  or repository ) to update its current state to the new state designated by logging service . After refresh, the property file will activate the new DataStoreImpl property designated by logging service . After updating the property file, logging service  may perform subsequent logging operations using a newly created inplementation object corresponding to the newly activated storage device (Step ). In one configuration consistent with certain principles related to the present invention, when a new inplementation object is created based on an activated property in the property file, the inplementation object previously used by logging service  may be removed or \u201cde-allocated\u201d using well known file and\/or object removal techniques, such as garbage collection. Alternatively, methods, systems, and articles of manufacture consistent with the present invention may cache the previously used inplementation object. In this instance, the cached inplementation object may later be accessed by logging service  when a property associated with the cached inplementation object is activated in the property file.","In another configuration consistent with certain principles related to the present invention, logging service  may be configured, via a logging policy, to include a new DataStoreImpl property associated with a newly added storage device during runtime of server . The new DataStoreImpl property may be associated after a system administrator has updated policy file  with a new policy associated with the newly added storage device and its corresponding inplementation object. For example, a system administrator may recognize the addition of a new storage device, such as tape storage device  in server . Accordingly, the administrator may access policy file  to include a new logging policy that instructs logging service  to include a new DataStoreImpl property, such as DataStoreImpl=com.sun.log.tapelog, in the property file when a certain event is detected, such as a backup logging operation. When the certain event is detected during runtime of server , logging service  may check policy file , detect the new logging policy, and access the property file to activate the new property. The logging policy may include a condition that designates the newly added storage device as the active storage device. Accordingly, logging service  may designate the new property as active, use the refresh interface associated with the property file, create an inplementation object, such as inplementation object , and perform the backup logging operations with the newly added tape storage device , via the newly created tape inplementation object .","Returning to Step , if logging service  does not detect a logging policy in policy file  (Step ; NO), logging service  may be configured to create an indication reflecting the log service event (Step ). In one aspect of the invention, the indication may be provided in the form of a message to a system administrator. In response to the message, the system administrator may access the property file in CIMOM , or repository , and modify the property file to incorporate any changes to the DataStoreImpl properties included therein (Step ). The changes made by the system administrator may include adjusting priorities of DataStoreImpl properties, adding new properties corresponding to a newly added implementation object and storage device, activating a new property associated with another storage device (perhaps by refreshing the property file), and any other form of property file adjustments that may be performed to handle the detected log service event. Once the property file has been adjusted, logging service  may be instructed to refresh the property file and perform logging operations according to the activated property defined in the property file (Step ).","As described, methods, systems, and articles of manufacture consistent with features of the present invention enable a computing system to dynamically insert and adjust models (Implementations) of storage devices used for logging operations during runtime of the computing system. A logging service may use property files to define storage device properties that are used by a log storage interface to perform the processes required to access these devices. The log storage interface may employ the use of the storage device Implementations to perform the logging operations with a particular storage device. Although the configuration of the systems and methods described above allow the present invention to perform runtime log storage device configurations, variations of the methods and systems consistent with features of the present invention previously described may be Implemented without departing from the scope of the invention. For example, methods, systems, and articles of manufacture, consistent with features of the present invention may be Implemented using various network models, and is not limited to a CIM environment. Furthermore, methods, systems, and articles of manufacture, consistent with features of the present invention are not limited to the inplementation of systems and processes compatible with software written in the Java programming language. Any number of programming languages may be utilized without departing from the scope of the present invention.","Also, methods and systems consistent with features of the present invention are not limited to the use of property files to represent the storage devices used by server .","Alternate device modeling mechanisms may be employed without departing from the scope of the invention. Additionally, the configuration of the environments shown in  are not intended to be limiting. For example, server  and client  may be located in the same computing system. Furthermore, the components of server  may be located remotely from server . The present invention is also not intended to be limited to the use of a server to host the logging service processes. Other types of computing systems that may use logging services may employ methods and systems consistent with features of the present invention as well.","Additionally, although aspects of the present invention are described as being associated with data stored in memory and other storage mediums, one skilled in the art will appreciate that these aspects can also be stored on or read from other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or CD-ROM; a carrier wave from the Internet; or other forms of RAM or ROM. Accordingly, the invention is not limited to the above described aspects of the invention, but instead is defined by the appended claims in light of their full scope of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate several aspects of the invention and together with the description, serve to explain the principles of the invention. In the drawings,",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
