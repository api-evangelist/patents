---
title: Vulnerability assessment of disk images
abstract: Images are used to safeguarding machines by assessing vulnerabilities in the image. Where assessing vulnerabilities includes both detection and repair, vulnerabilities are detected, a security definition/update is determined for use in repairing the vulnerability, which may include elimination, patching, fixing, writing data to a file or file system associated with the image, or modifying configuration settings. The security definition/update is tested to determine whether to implement the definition and, if test criteria are successfully passed, to permit a system application of the image such as a system restoration following a catastrophic system failure (i.e., disk or drive crash, reboot, etc.).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437764&OS=07437764&RS=07437764
owner: Symantec Corporation
number: 07437764
owner_city: Cupertino
owner_country: US
publication_date: 20031114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is related to co-pending U.S. patent application Ser. No. 10\/642,355 entitled \u201cSafely Rolling Back a Computer Image,\u201d filed Aug. 14, 2003, which is incorporated herein by reference for all purposes","The present invention relates generally to security applications. More specifically, vulnerability assessment of images is disclosed.","Security software encompasses a variety of applications, including system restoration after, for example, a catastrophic system failure or compromise. System restoration applications repair or restore a damaged system state by rolling back the system to a previous secure and safe state. A damaged system can result from vulnerability exploitation, system compromise, or catastrophic failure of system resources (e.g., disk failure, compromise of operating system, etc.). A damaged system may also result from unforeseen software incompatibilities, user error, etc. Images can be used to provide a restore point or safe state for rolling back a system. In some cases, images may be used to configure new equipment in a desired way, or to provide multiple environments on a single computer. Images, such as those generated by the Ghost utility application available from Symantec Corporation, may comprise \u201csnapshots\u201d of a system or operating environment taken at a given point in time. As used herein, the term image may comprise a disk image, such as one generated by Norton Ghost, or any other type of file or repository of data representing the state of a physical or virtual system, such as may be used to restore or configure the system, including without limitation a disk image, a virtual machine file, or backup tape or other backup medium. Images, which include files and configuration settings, may embody a virtual \u201csystem\u201d or machine that represents a collection of files and data that can be run as a system. In the case of a Microsoft Windows-based computing environment, registries containing configuration settings may be included in the images. Other databases or files containing configuration settings for operating environments other than Windows may also be included in images.","Although a system associated with an image can be scanned for known vulnerabilities at or before the time of image creation, new vulnerabilities could occur or be discovered or exploited after the image is created, but before the image is used, e.g., in a system restoration. The use of these vulnerable images may unknowingly create an unsafe state.","While in some cases it may be possible to access all or some of the files associated with an image for purposes of performing a search of the files for the presence of suspect code, vulnerable files, or other indicia of a newly-discovered vulnerability, such a search may not be sufficient to detect and repair certain vulnerabilities, such as those that might require that the NT Windows registry (or similar configuration database) be updated, for example.","Thus, there is a need for a solution to detect and repair vulnerabilities in images prior to system restoration or other use of the image.","The invention can be implemented in numerous ways, including as a process, an apparatus, a system, a composition of matter, a computer readable medium such as a computer readable storage medium or a computer network wherein program instructions are sent over optical or electronic communication links. In this specification, these implementations, or any other form that the invention may take, may be referred to as techniques. In general, the order of the steps of disclosed processes may be altered within the scope of the invention.","A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments, but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.","Using images or \u201csnapshots,\u201d system backup applications take a snapshot of a system at a given time. As used herein, the term \u201cimage\u201d includes images created by backup and configuration applications, such as Symantec's Norton Ghost, as well as other applications and media used to store system backup data, such as backup tapes, zip drives, and the like. These images may be used as safe states for restoring a system after a catastrophic failure such as a system crash, and in some cases may be used to apply a standard or initial configuration to new computers, or to store a particular environment or system state for future use, e.g., by one of multiple users of the same hardware. However, if an image stores the system in a state that is vulnerable, e.g., the system was already infected with a computer virus or worm, or had not yet had a patch applied that is needed to protect the system from a vulnerability, using the image to restore or configure a system may leave the system so restored or configured vulnerable. Providing a way to treat the files and data embodied in such an image as an instance of an integrated system for purposes of enabling effective detection and repair of vulnerabilities is disclosed. In particular, accessing and modifying configuration data within images as described herein can be performed to prevent the installation or implementation of vulnerable states during a system restoration. In order to ensure that safe states are implemented when performing a system restoration, vulnerability assessments such as an anti-virus scan are performed on image data contained in files, configuration settings, registries, and other system resources. In so doing, it is possible to either invalidate a vulnerable image or update the vulnerable image in order to ensure that a safe state will exist, if used in a system restoration or configuration.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1A","FIG. 1B"],"b":["102","104","106","104","106","106","102","102","107","104","102","104","107","108","112","114","114","107","108","112","114"]},"A vulnerability assessment system such as VA system  may be configured to scan a system such as system , and its associated files and configuration data, for vulnerabilities, and in some cases to repair the vulnerabilities detected, such as by removing a virus-infected file or installing a software \u201cpatch\u201d to protect against a vulnerability. The vulnerability may be repaired in a variety of manners, including by writing data to files, installing a patch, re-writing routines or processes, changing variables, modifying configuration settings, configuring the image to a safe state based on established configurations for eliminating the vulnerability, and other techniques for modifying the selected image. Images are scanned by VA system , which may include anti-virus (AV) applications as discussed below in connection with . The VA system  may be configured as disclosed herein to also scan and repair an image or other data repository used to backup or otherwise store or capture the files and configuration data associated with the system  at a given point in time. For example, the VA system  may be configured to receive and recognize as an image (or other backup repository) a file or set of files and configuration data associated with system  from a remote computer, such as the system  itself or another remote computer configured to store the image and provide it or make it available to the VA system . Alternatively, the VA system  may be configured to read the image from the memory  of host , or from a removable data storage device associated with host , such as a CD-ROM or floppy disk drive. The VA system  may be configured to identify and read the files and configuration data stored in the image and access the files and configuration data as it would an instance of an operating system. In some embodiments, the VA system  may be configured to treat the files and configuration data stored in the image as a virtual machine, illustrated in  as virtual machine . Represented by files - and configuration settings , virtual machine  is a collection of files and data that can be run as an application, system, etc. In this example, virtual machine  is a system resource that has been abstracted based on a logical grouping of all system resources. In other examples, the abstraction of other system resources can develop multiple virtual machines on a single computer, client, server, etc. Abstracting or virtualizing resources is an efficient technique for assessing system resources for a variety of operations including resource allocation and system restoration. In some embodiments, the files - and configuration settings  may be a snapshot in time of the files - and configuration settings  as they existed on system , or some other system, at the time the image being assessed for vulnerabilities was made.","VA system  may be configured to perform a vulnerability assessment on the virtual machine , just as it would on a currently operating physical system such as system , including by accessing the configuration settings  as it would in the case of a running system and changing the configuration settings and associated data as necessary to repair a discovered vulnerability, such as by installing a software patch or other corrective measure. Providing the ability to access the files and configuration settings in this manner enables the VA system  to repair the image associated with virtual machine , with the result that a system (such as system ) that is later restored or configured using the image will not have the vulnerability detected and repaired in the image by VA system .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1B","FIG. 1A"],"b":["150","152","150","104","102","152","150","152","154","156","158","104","166","208","160","152","162","162","150"]},"Virtualizer  provides an abstraction capability in order to provide logical abstraction of physical system resources (e.g., images, files, applications, and other forms of data) that are being assessed by VA engine , such as by operation of the decomposer  and configuration access module . Virtualizer  can be implemented as part of VA system , a modular component of VA engine , or as a separate application communicating, for example, via an application programming interface (API) such as that may be used by a third-party vendor or developer. Regardless, virtualizer  provides the ability to abstract an image of disparate physical resources into a single virtual resource, which can then be accessed by decomposer  and configuration access module . VA engine  is guided by VA engine logic module , which performs management and control functions for VA engine  such as analyzing files or images of virtual systems. VA engine  and its associated modules can be implemented as a standalone as illustrated. In other examples, VA engine  can be implemented as a distributed computing system over using multiple hosts or virtual machines to implement each module.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["202","204","206"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3A","b":["152","302","166","152","160","304","152","304","302","302"]},"Once a security definition\/update has been retrieved from definition updates module , VA engine  tests the security definition\/update to determine whether an applicable repair (e.g., a software patch) is available to be installed to repair the vulnerability (). If no applicable repair is available to install, then an indication is provided that the image is vulnerable and cannot be repaired (). In some embodiments, step  comprises taking action to prevent a system restoration application or system configuration tool from using the image to restore or configure a system. A user may establish a rule or policy to prevent the use of an image or to prevent a particular type of repair or restoration from occurring. In one embodiment, step  comprises testing an available repair against user-specified criteria and only applying the repair if the repair satisfies the user-specified criteria. Rules or test criteria can be specified, either by a user\/administrator or a system on the host that determines whether a specific security patch or other corrective measure is to be installed. In this embodiment, the test criteria may include preventing the installation of a security patch because of an incompatibility with an operating system. In other embodiments, the test criteria may include preventing the execution of an anti-virus scan because of time\/processor requirements interfering with user\/administrator preferences (i.e., user\/administrator is running time-critical maintenance and delays the installation of a security patch because additional time is required. In still other embodiments, test criteria may specify that a particular corrective measure is to be automatically installed. Test criteria may also be used to determine whether a specific corrective measure is compatible with the current operating environment. If it is determined in step  that an applicable repair is available, then the repair is installed in the image (). Installation or implementation of the security definition\/update is described in detail below in connection with .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3B","FIG. 1B","FIG. 1A"],"b":["320","322","160","106","102","152","102"]},"VA engine  determines whether a vulnerability has been detected in an image (). If a vulnerability is found, then VA engine  initiates repair of the image in order to restore the image to a safe condition (). Repair of the image is discussed in greater detail in connection with . Once repaired, the image may be used for a system restoration or configuration. In other embodiments, the image may be repaired without immediately using the image in a system restoration or configuration. User or system-configured rules can be specified to perform a vulnerability assessment and repair independent of a catastrophic system failure or configuration event. Rules and other test criteria to determine whether to use the image to perform a system install are stored in rules module  and can be called by VA engine logic module . However, if no vulnerability is found in the current image, then VA engine  determines whether there are any more images available for scanning (). If no image is present, then the process ends. If another image is present, then VA engine  calls the next image, restarting the scanning process (). In some embodiments, an image may itself comprise one or more images and for each such image the process shown in  is repeated for each image embodied in the image until all such images have been scanned and, if applicable, repaired.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4A","FIG. 4A"],"b":["322","160","402","404","160","152","406","166","152","408"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4B","b":["410","412","414","416"]},"A corrective action may include installing a security patch, instantiating an anti-virus session, disabling an exploitation application, or other effort to either eliminate the detected vulnerability or to prevent the exploitation of the vulnerability. The corrective action may also include modifying configuration settings to place an image of an operating system, application, client, host, virtual machine, or other process in a safe state. Corrective action may also include specifying that no action be taken against the detected vulnerability. Another corrective action may include deleting the image. For example, in an application such as Symantec Corporation's Ghost utility, machines may not be backup images and deleting the image may be an appropriate action without causing further system damage. Another example may prevent corrective action that modifies an image to close a port that provides remote access that, although accessible by an intruder, is required for access by authorized remote users. Preferably, a corrective action is selected that removes exposure to the detected vulnerability by patching, fixing, eliminating, or preventing external exploitation. Although this example illustrates user-specification of rules, system-specified rules can be employed in other embodiments.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4C","FIG. 3A","FIG. 3A"],"b":["160","152","420","422","424","152","426"]},"If another detected vulnerability exists, then VA engine  retrieves the security definition\/update for the next detected vulnerability. The process ends if no further detected vulnerabilities are found. In this example, multiple vulnerabilities can be detected and repaired. Recursively scanning and handling multiple vulnerabilities are scanned and repaired, writing data to files or modifying configuration settings of the selected images. VA engine  can loop back and call the next definition for the next detected vulnerability. In this example, the next definition for the next detected vulnerability is called in a recursive manner. In some embodiments, detected vulnerabilities can be queued for repair. In other embodiments, vulnerabilities can be detected and repaired individually.","Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding, the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various embodiments of the invention are disclosed in the following detailed description and the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4C"}]},"DETDESC":[{},{}]}
