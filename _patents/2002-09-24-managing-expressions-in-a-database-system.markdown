---
title: Managing expressions in a database system
abstract: A method for managing expressions includes receiving a first query that includes a first conditional expression. The first expression is then represented as data in a column of a table. A second query is received that specifies a first set of criteria, and the second query is executed to select data based at least on whether expressions in the column satisfy the first set of criteria. In an embodiment, the second query further specifies a second set of criteria, wherein executing the second query includes selecting data based on whether data in columns other than the expression column satisfy the second criteria. A special index is defined, which can be created on the column that stores the expressions as data, to filter large sets of expressions efficiently. A method of evaluating an expression set stored as data in a table classifies each predicate from each expression, and filters the expression set based on the predicate classification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07127467&OS=07127467&RS=07127467
owner: Oracle International Corporation
number: 07127467
owner_city: Redwood Shores
owner_country: US
publication_date: 20020924
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION","Overview","Managing Expressions in a Database System","Pre-Processing a Set of Expressions","Expression Filter","Creating an Index for the Expression Set","Predicate Evaluation","Process for Managing Expressions in a Database","Process for Evaluating an Expression Stored as Data in a Column of a Database Table","Hardware Overview","Extensions and Alternatives"],"p":["This application is related to and claims the benefit of priority from U.S. Provisional Patent Application No. 60\/378,018 entitled \u201cManaging Expressions In A Database System,\u201d filed on May 10, 2002, which is incorporated by reference in its entirety for all purposes, as if fully set forth herein.","The present invention relates generally to database management systems and, more specifically, to techniques for managing conditional expressions in database systems.","In the context of event and content-based subscription systems, events are defined which, when met, trigger an action. For example, a subscriber can define rules that include events that define a state of content that, when met, trigger transmission of content to the subscriber. Using a database management system as an underlying engine for an event-based subscription system, a subscriber can register queries with the system that represent conditional expressions on the content of the events. In such a subscription or similarly functioning system, a potentially very large set of queries, i.e., an expression set on the content, are registered to manage the publication of desired content data. When a given data item becomes available, these conditional expressions are filtered to find those expressions that match the given data item.","A simple but inefficient approach to the task of filtering expression sets is to test all of the expressions in a given set for each data item. However, this approach is scalable neither for a large set of expressions nor for a high rate of events. Therefore, most commercial systems pre-process the expression set and create in-memory matching networks (i.e., specialized data structures) that group matching predicates in the expression set and share the processing cost across multiple expressions.","Matching networks are decision trees in which each node represents a predicate group in a given expression set. Data flows from a parent node to its children only if the data evaluates to true for the predicate representing the parent node. A path from the root of the decision tree to a leaf node represents all the conjunctions in an expression. The leaf nodes in the tree are labeled with expression identifiers and if a data item passes the predicate test on a leaf node, the corresponding expressions are considered true for that data item. Many variants of the matching networks (like RETE, TREAT and Gator networks) are in use for the existing systems.","In existing systems, any operation requiring filtering of expressions and related information requires significant custom coding and reduces performance characteristics. Furthermore, the number of expressions is limited in size as the corresponding matching networks must fit in main-memory, changes in expressions are costly, and users are unable to adjust filtering strategies to the structure and use of the expressions and related data.","Based on the foregoing, it is clearly desirable to provide an improved mechanism for managing expressions, such as expressions associated with a subscription system. In addition, there is a more specific need for a mechanism that provides the ability to filter expressions in conjunction with filters on other related information.","A method and system are described for managing expressions in a database system. In addition, and more specifically, methods and systems are described for managing conditional expressions associated with event and content-based information subscription systems.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Conditional expressions, often in the form of standard database query, are represented as data in a column of a table. These expressions may represent, for example, data filters for filtering data in an information subscription system. Another standard database query, which specifies criteria, can then be executed on the column to determine whether expressions in the column meet the specified criteria. The criteria may represent, for example, incoming data to a subscription system.","Thus, the expression processing mechanism described herein is integrated with database technology by treating the expressions as data that can be queried along with other related user-specified data. For example, a publisher may include in the query other filtering criteria related to its subscribers.","In an embodiment, a first query is received that includes a first conditional expression. For example, the first query may be received via INSERT or database load operations. The first expression is then represented as data in a column of a table. A second query is received that specifies a first set of criteria, and the second query is executed to select data based at least on whether expressions in the column satisfy the first set of criteria. For example, the second query may be received from a user of a database application.","In an embodiment, the second query further specifies a second set of criteria, wherein executing the second query includes selecting data based on whether data in columns other than the column satisfy the second criteria.","Other embodiments include receiving the first query from a subscriber to an subscription service or system, wherein the first expression specifies criteria that must be satisfied by data for the data to be of interest to the subscriber; and receiving the second query from a publisher associated with the subscription system, wherein the second query specifies criteria that must be satisfied by data, with respect to the subscriber, for the data to be published to the subscriber. Thus, mutual filtering can be performed on data by both subscribers and publishers.","According to one aspect, a special index is defined on the column that stores the expressions as data, to filter large sets of expressions efficiently.","In an embodiment, predicates in the expressions are grouped based on the commonality of their left-hand sides, i.e., common identifiers associated with criteria of the first expressions. These groups are persistently stored in a database. Further, operators and constants associated with the predicates are stored in a predicate table in association with respective predicate groups, and an index, such as a concatenated bitmap index, is created based on the operators and constants.","Typically, in event and content-based subscription systems, a set of expressions or rules (e.g., Event-Condition-Action (ECA) rules) is defined for an event structure or context, and the structure of the event determines the elementary attributes that can be used in the expressions. The term \u201cevent\u201d is used in this context to refer to the data item for which expressions, or \u201cconditions\u201d, are evaluated. For example, an event, in the context of stock trading, might be a publicly-traded stock attaining a particular price, which is represented as a data item. Thus, elementary attributes of expressions associated with such an event could include, for example, SYMBOL, PRICE, and CHANGE. An ECA rule lies dormant until it is triggered by the occurrence of an Event.","A set of expressions defined for an event structure or context is called an expression set. For example, Subscriber A may be interested in an event expressed as SYMBOL=ORCL, PRICE>30, and CHANGE>5; Subscriber B may be interested in an event expressed as SYMBOL=CSCO, and PRICE>25; and Subscriber C may be interested in an event expressed as SYMBOL=INTC, and CHANGE\/PRICE>0.1.","In a typical system based on rules, for example, a content-based subscription system, efficient filtering of a large set of conditional expressions is critical for the scalability of the system. Unlike a typical database design, where a few queries are executed on a large set of rows in a table, a rules-based system has a large number of expressions (similar to WHERE clause of a query) operating against a single data item.","The expressions defined for an application are relatively static and the rate at which the new data should be processed against these expressions is high. Therefore, according to one aspect, pre-processing of the expressions is performed to build specialized data structures and data access mechanisms such as indexes, to allow fast filtering with a new data item.","Given a large number of conditional expressions in a system, the expressions tend to have similarities at the elementary predicates level. That is, two expressions, each with one or more elementary predicates joined by conjunctions, may have a common predicate. Thus, expression evaluation costs are shared among multiple expressions, thereby leveraging the foregoing similarities. In an embodiment, a library of functions, the Expression Type Library, supports the pre-processing of a set of expressions.","The Expression Type Library provides the basic functionality required for building a matching network for expressions. This library is supplied as a set of Java classes which are capable of converting an expression string into an expression tree containing elementary predicates, joined by conjunctions and disjunctions. This library can be used by any indexing scheme for pre-processing the expressions in an expression set and during incremental modifications to these expressions.","This library parses the expressions and processes them as follows","(1) Normalize the expression, for example, by rearranging the predicates in an expression to rewrite it in a disjunctive normal form (DNF), that is, an OR list of AND sub-clauses. For example, an expression of form\n\nSYMBOL=\u2018GE\u2019 and (PRICE<25 or PRICE>35)\n\nis rewritten as follows after a DNF conversion:\n\n(SYMBOL=\u2018GE\u2019 and PRICE<25) or (SYMBOL=\u2018GE\u2019 and PRICE>35).\n","(2) Normalize the predicates, by rewriting each predicate in an expression such that it has a pure constant on the right-hand side. For example, a predicate of form\n\nPRICE>27+CHANGE\n\nis rewritten as:\n\nPRICE\u2212CHANGE>27\n","(3) Decode the predicate, by resolving it as follows:","left-hand side (LHS): an expression or a function of one or more attributes (e.g., PRICE\u2212CHANGE from the predicate PRICE\u2212CHANGE>27);","right-hand side (RHS): a constant (e.g., the \u201c27\u201d from the predicate PRICE\u2212CHANGE>27); and","relational operator: the relational operator joining the LHS and RHS (e.g., the \u201c>\u201d from the predicate PRICE\u2212CHANGE>27).","The left-hand side of a predicate, for example, the attribute SYMBOL, is also referred to as a complex attribute. It could also be a sub-expression involving one or more elementary attributes or user-defined functions, for example, CHANGE\/PRICE. The operators of a predicate are mapped to a predetermined integer value, however, embodiments are not limited to such a mapping. The mapped operators and associated predicate constants (RHS) are stored in a predicate table, which is described in more detail below. In an implementation, predicates involving constructs such as IN lists, sub-queries, etc. are not grouped with other predicates.","Attribute Set","According to an aspect of the invention, an attribute set that captures the event structure or context is created. The attribute set has a list of elementary attributes used in an expression set, and their data types. In its simplest form, the attribute set resembles an abstract type definition in the database. For example, a set of elementary attributes used in an expression set constitutes its attribute set.","One non-limiting technique for creating an attribute set is expressed in the following commands:",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"EXECUTE dbms_expeng.create_attribute_set ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"attr_set => \u2018TICK\u2019);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"EXECUTE dbms_expeng.add_elementary_attribute ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"attr_set => \u2018TICK\u2019,"]},{"entry":[{},"attr_name => \u2018SYMBOL\u2019,"]},{"entry":[{},"attr_type => \u2018VARCHAR2(6)\u2019);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"EXECUTE dbms_expeng.add_elementary_attribute ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"attr_set => \u2018TICK\u2019,"]},{"entry":[{},"attr_name => \u2018PRICE\u2019,"]},{"entry":[{},"attr_type => \u2018NUMBER\u2019);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"EXECUTE dbms_expeng.add_elementary_attribute ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"attr_set => \u2018TICK\u2019,"]},{"entry":[{},"attr_name => \u2018CHANGE\u2019,"]},{"entry":[{},"attr_type => \u2018NUMBER\u2019);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Significantly, the expression set is stored in a column of a table. For example, expressions can be stored in a VARCHAR or a CLOB column in a database table. Such a column can be recognized as a column of EXPRESSION data type by, for example, associating some expression set metadata to the column. Furthermore, the column storing the expression set is associated with the attribute set created for the expression set. One non-limiting technique for associating an attribute set with an expression set is expressed in the following commands:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"EXECUTE dbms_expeng.assign_attribute_set ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"attr_set => \u2018TICK\u2019,"]},{"entry":[{},"tab_name => \u2018TRADER\u2019,"]},{"entry":[{},"exp_column => \u2018INTEREST\u2019);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"A VARCHAR or a CLOB column associated with an attribute set constitutes an EXPRESSION column. The values stored in an EXPRESSION column are treated as expressions and they are initially expected to adhere to SQL-WHERE clause format that can include XPATH expressions. These expressions can use all the attributes defined in the attribute set along with any system variables and user-defined functions that are valid in the user environment, for example,\n\nUPPER(symbol)=\u2018\u2019 AND change\/price>0.1.\n","According to an embodiment, an Expression Filter is a set of PL\/SQL packages and APIs to manage expressions in user tables, and to filter the expressions for a given data item, that is, to match criteria expressed in expressions with the given data item, using a standard SQL or other query language query. In a publication system, the expressions specify criteria that must be satisfied by data for the data to be of interest to a subscriber. The Expression Filter comprises two components: an EVALUATE operator (described immediately below) and an Expression Filter Indextype (described under the heading \u201cCreating An Index For The Expression Set\u201d).","Evaluate Operator","A new operator is introduced that processes the expression set stored in an EXPRESSION column. This operator can be used in the WHERE clause of a standard SQL, or a DML statement, to filter the expressions for a data item. The predicate on the expression set, using the new operator EVALUATE, can be combined with any other predicate on the table. The EVALUATE operator accepts the name of the column storing the expressions, e.g., INTEREST, and a given data item as arguments. The EVALUATE operator internally uses the expression set metadata to evaluate expressions for data items passed in.","An example of a query that uses the EVALUATE operator is as follows:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT * FROM traders"]},{"entry":[{},"WHERE EVALUATE (traders.exp,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2018symbol=>\u201cintc\u201d, price=>32, change=>3.3\u2019) = 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AND traders.city = \u2018New York\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The query on the table in which expressions are stored can be extended to include multi-table joins and any other database query operations using GROUP BY clause, ORDER BY clause, HAVING clause etc. In addition, filtering a set of expressions for a batch of data items by joining the table in which expressions are stored with the table storing the data items is contemplated. An example of such a query is as follows:","SELECT distinct (dataitems.symbol), count(*) FROM traders, dataitems",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WHERE EVALUATE (traders.exp,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"tick.getVarchar(dataitems symbol,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dataitems.price,"]},{"entry":[{},"dataitems.change)) = 1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AND traders.city = \u2018New York\u2019"]},{"entry":[{},"GROUP BY dataitems.symbol;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"figref":"FIG. 1"},"Testing every expression for a data item is a linear time solution. When a large set of expressions are defined, this approach is not scalable for a high volume of data items. Therefore, in an embodiment, a new indexing mechanism is used to evaluate a large set of expressions efficiently and, consequently, to quicken the evaluation of the expression set for a given data item or data string. This index can be defined on an EXPRESSION column, thus a query optimizer can determine the use of the index for the evaluation of an expression set, based on the index usage cost. In an implementation, persistent database objects are created to maintain the index for an expression set, where pre-processing the expressions set at the time of index creation populates these database objects. Additionally, the information stored in these objects is maintained to reflect any changes to the expression set using DML operations on the table storing the expressions.","Expression Filter Index Type","In an embodiment, the indexing scheme is implemented as a new Indextype, Expression Filter, using an extensible indexing framework. In an implementation, the indexing scheme is implemented as a new Indextype, Expression Filter, using the Oracle Extensible Indexing framework. The Expression Filter index type can be used to create an index on any set of expressions stored in a database column of type VARCHAR, CLOB or BFILE. However, use of another index type other than the foregoing, which may be used on expressions stored as data types, is contemplated and therefore within the scope of embodiments of the invention.","The Expression Filter index type implementation parses a set of expressions and groups the predicates in the expressions into disjoint sets with matching Left-Hand-Sides. The data structures used to group the predicates in an expression set are relational in nature. In an implementation in which persistent database objects are used for the Expression Filter index data structure, an example of such database objects are as follows:","Predicate Table: a relational table that stores the predicates appearing in the expressions;","Bitmap Indexes: one or more bitmap indexes on the predicate table; and","Access Function: a function that queries the predicate table to filter the expressions for a data item.","These objects collectively provide for efficient filtering of expressions based on both equality and range predicates. Furthermore, since the index structure objects are persistently stored in the database, memory constraints associated with the size of expression sets in prior approaches, which typically use main memory extensively, are not applicable to the present embodiments. By contrast, operations using the present embodiments can store the necessary database blocks into a database buffer cache as they are needed.","As described above, expressions from a given set of expressions refer to a set of elementary attributes with fixed data types. Further, a set of valid values for these attributes constitute a data item, which is evaluated against these expressions. Hence, to index a set of expressions with the Expression Filter index type, all the elementary attributes used in the expression set should be associated with the database column storing the expressions. These elementary attributes, along with some optional complex attributes, constitute the attribute set for the expression set, which are stored in one or more data dictionary tables. One non-limiting technique for creating an Expression Filter index as described above is expressed in the following commands, which create an index TRADERFILTER on the INTEREST column of table TRADER in which the expressions are stored. Additionally, the index is configured to filter the predicates involving SYMBOL and PRICE attributes efficiently by defining bitmap indexes on such attributes.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CREATE INDEX traderfilter ON trader ( interest )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"INDEXTYPE IS EXPFIL.EXPFILTER"]},{"entry":[{},"PARAMETERS (\u2018STOREATTRS (symbol, price, change)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"INDEXATTRS (symbol, price)\u2019)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The parameters passed to the CREATE INDEX statement determine the structure of the objects (predicate table, bitmap indexes and access function) used for the Expression Filter index and, therefore, influence the performance of the filter. The PARAMETERS clause in the CREATE INDEX statement is optional and in the absence of this clause, all the elementary attributes (with native types) in the attribute set are stored and indexed.","In an embodiment, a concatenated bitmap index is created on the predicate table's operator and RHS constant columns for frequent LHSs. For example, the LHS attribute SYMBOL is frequently used in expressions regarding stock quotes, so a bitmap index might be created on operator and constant columns associated with predicates that include the SYMBOL attribute, and combined into a concatenated bitmap index. These bitmap indexes function as a multi-dimensional index during the expression set evaluation.","Generally, utilization of the indexing scheme described herein, implemented as a new Indextype (i.e., Expression Filter index type) and applied to a column storing expressions as data, provides a method for efficiently evaluating large sets of expressions by allowing the new EVALUATE operator to use the Expression Filter index.","In an embodiment, in analysis of predicates, the predicates in an expression set are classified into three sets:","(1) Predicates with indexed attributes: bitmap indexes are created for the predicate groups belonging to this set, for example, popular predicate such as predicates that include the SYMBOL identifier;","(2) Predicates with Stored attributes: the predicate groups belonging to this set are parsed and stored in the predicate table with no indexes defined on the <operator, RHS constant>columns; and","(3) Sparse predicates: the predicates belonging to this set are stored in their original form. If more than one sparse predicate exists for an expression, they are combined into one conjunction. Note that it is not always efficient to add a new set of columns to the predicate table for every predicate that cannot be grouped with others. Hence, according to an embodiment, a separate VARCHAR column, PARTIAL_CONDITION, is defined in the predicate table to hold the conditional expression for sparse predicates. Unlike other columns in the predicate table, this column is not indexed and it can hold one or more predicate definitions in conjunctive form.","A predicate falls into one of the above sets based on the cost of computing its left-hand side and the frequency of occurrence of its left-hand side in the expression set. The evaluation cost for a predicate depends on the set it belongs to.","Steps involved in evaluating a predicate, with respect to its classification as described above, are as follows.","(1) Indexed attribute: a one-time computation of the complex attribute (i.e., LHS of the predicate group), and one or more range scans on the bitmap indexes using the computed value;","(2) Stored attribute: a one-time computation of the complex attribute, and comparison of the computed value with the RHS of all the predicates in this group; and","(3) Sparse predicate: parsing of the sub-expression representing the sparse predicate, and evaluation of the sub-expression through substitution of data values.","During the expression set evaluation, according to an embodiment, the expressions are filtered in three phases, as follows.","Phase 1: The predicates belonging to the Indexed attribute set are tested by performing a few range scans on the bitmap indexes defined thereon. The results from these scans are combined (bitmap AND operation) to obtain a set of expressions for which these predicates are all true for the given data item.","The total cost of this phase is defined as\n\nI* C11+N1*C12*log(E1)+C13*E2;\n","where\n\n","The result of Phase 1 is a set of expressions that evaluate to true with all the predicates belonging to the indexed attribute set.","Phase 2: For all the expressions evaluated to true in Phase 1, the predicates belonging to the Stored attribute set are tested.","The total cost of this phase is defined as\n\nS*C2*E2;\n","where","S is the average number of stored attributes per expression;","C is the average cost of one comparison;","E is the total number of expressions evaluated to true in Phase 1. Typically, the working set is narrowed down considerably in Phase 1 and E<<E.","The result of Phase 2 is a set of expressions that evaluate to true with the predicates belonging to the indexed or stored attribute sets.","Phase 3: For all the expressions that are true after Phase 2, the sparse predicates (if any) for these expressions are evaluated.","The total cost of this phase is defined as follows\n\nP*C3*E3;\n","where","P is the probability of a sparse predicate for an expression;","C is the average cost of parsing and evaluating a sparse predicate; and","E is the total number of expressions that are true after Phase 2 of filtering.","The result of Phase 3 is a set of expressions that evaluate to true for the given data item. Note that alternative access plans other than the index-based evaluation described above can be used.","Consider a database table TRADERS as illustrated in , which stores as conditional expressions information about stock traders and their interest in trading. In order to find all the TRADERS who are under 30 years of age, living in New York, and interested in a data item (SYMBOL=\u2018ORCL\u2019, PRICE=31, CHANGE=5.2), the following query is an example of a query that can be issued on the TRADERS table.",{"@attributes":{"id":"p-0092","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"SELECT name, phone FROM traders"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WHERE EVALUATE (interest,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2018SYMBOL=\u2018ORCL\u2019, PRICE=>31, CHANGE=>5.2\u2019) = 1 AND"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"city = \u2018New York\u2019 AND age < 30;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In practice, this query could make use of the predicate table and the bitmap indexes on the predicate table to filter the expressions. The Expression Filter index returns the rowids for all the expressions that evaluate to true with the given data item. Remaining predicates in the SELECT statement are evaluated on the corresponding rows to answer the query. In addition to the Expression Filter index on the INTEREST column, if the TRADERS table has native or extensible indexes defined on the CITY and AGE columns, an optimizer program may choose one or more of these indexes, based on the access cost, to answer the above query.","When a new row is inserted into the TRADERS table or some of the existing expressions are updated, the Expression Filter index is automatically maintained to reflect these changes.","As the foregoing example query illustrates, the techniques described herein integrate expression filtering operations into database operations. In the context of an information subscription-publication system, as a result of the integration of expressions and filtering mechanisms into a database system, mutual filtering from both a subscriber and a publisher can be performed, and performed efficiently, through use of standard SQL statements. Therefore, multi-domain queries are possible, by joining tables and adding predicates to a query to further filter expressions. Furthermore, batch evaluation of expression sets for a given set of data is possible by joining the table storing the expressions with the table storing the data items.","Prior approaches separate characteristics of system users or clients, such as name, telephone number and residence, from their respective interests in data, which is expressed in subscription expressions. Many applications can benefit from this integration of interests and personal characteristics. For example, a query could be executed to return \u201call traders in New York with an interest in Stock X exceeding a price of Y\u201d or \u201call customers located within 10 miles of my store with an interest in vehicle Z.\u201d Significantly, present embodiments facilitate optimal filtering of expressions based on their context. For example, in the context of stock trading, this context leads to efficient filtering of data by grouping predicates on the SYMBOL attribute, since the vast majority of users will have interests relative to a specific stock represented by a stock symbol, and by indexing operators and constants associated with predicates that include the SYMBOL attribute.",{"@attributes":{"id":"p-0097","num":"0103"},"figref":["FIG. 2","FIG. 2","FIG. 1"]},"At block , a first query is received that includes a first conditional expression. For example, the first query may be received via INSERT or database load operations. In an embodiment, conditional expressions are expected to be in the form of a SQL WHERE clause. Further, any SQL WHERE clause can be treated as an expression. In alternative embodiments, conditional expressions having a form other than a SQL query, and having a form other than any type of query, are contemplated. For example, a user may specify interests in data via simple textual input, which is converted directly into an appropriate data format, such as VARCHAR or CLOB, for storing in a column of a table.","In an embodiment, the first query is received from a subscriber to an information subscription system, or other event or content-based information publication system, wherein the expression specifies criteria that must be met by data for the data to be of interest to a particular subscriber. Thus, the first query can serve as a mechanism for a first level of filtering with respect to system data, essentially processing data for dispatch or publication to appropriate subscribers.","At block , the first conditional expression of the first query is expressed as data in a column of a table, as described above and as depicted as column  of . For example, one or more predicates constituent to the expression are encoded in a data format on which SQL or another query language can operate, and on which a database management system can manage. Note that the representation of expressions in the INTEREST column  of the table of  is for purposes of explanation, and do not take the form as depicted. Rather, the expressions stored in the INTEREST column, or any similar column in which expression representations are stored, are actually conventionally encoded into an appropriate data format.","At optional block , an index is created on the column of the table in which the conditional expressions are stored as data at block . In this embodiment, an index is created as described above.","Indexing steps include grouping predicates from a set of expressions, based on predicate identifiers that are associated with respective criteria of the first set of criteria. Continuing with the example, predicate group identifiers might include SYMBOL, PRICE, and CHANGE. Sets of predicate operators and constants are stored in a predicate table in association with respective predicate identifiers. For example, a predicate grouping for SYMBOL may have entries in the predicate table representing sets of operator and constant combinations, such as operator is \u201cequal to\u201d and constant is \u201cORCL\u201d, and a predicate grouping for PRICE may have entries in the predicate table that include operator and constant combinations such as \u201cgreater than or equal to\u201d and \u201c31\u201d. These sets of operators and constants can be encoded in any conventional manner appropriate for their purpose. Next, a concatenated bitmap index, or another form of index, is created based on a set of predicate operators and constants associated with a particular predicate identifier. For example, a set of operator and constant combinations, represented in respective columns of a predicate table, for the predicate identifier SYMBOL, is indexed for fast and efficient evaluation of predicates and thus, expressions, as part of a data filtering process.","At block , a second query is received that specifies a first set of one or more criteria. The following query is an example of a second query.",{"@attributes":{"id":"p-0104","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"SELECT name, phone FROM traders"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WHERE EVALUATE (interest,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2018SYMBOL=\u2018ORCL\u2019, PRICE=>31, CHANGE=>5.2\u2019) = 1 AND"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"city = \u2018New York\u2019 AND age < 30;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In an embodiment, the second query is received from a publisher in an information subscription system, or other event or content-based information publication system, wherein the expression specifies a set of criteria that must be met by data for the data to be published to a particular subscriber. Thus, the second query can serve as a mechanism for a second level of filtering with respect to system data, essentially processing data for dispatch or publication to appropriate subscribers.","At block , the second query is executed to select data based at least on whether conditional expressions in column  satisfy the first set of criteria. For example, execution of the second query determines, among other things, whether a particular data item meets a condition or set of conditions as expressed in a stored expression in the data column . In other words, in the context of a subscription system, it is determined whether there are any subscribers that are interested, through the conditions or predicates specified in their expressions, in data meeting the criteria specified in the first part of the WHERE clause (before the AND conjunction) of the query.","In an embodiment, the second query further specifies a second set of criteria, wherein execution of the second query at block , includes selecting data based on whether data in one or more columns other than the expression column, such as columns , , satisfies the second criteria. For example, the second part of the WHERE clause (after the AND conjunction) specifies that other columns, CITY and AGE, are to be considered to determine whether a given data item being processed additionally satisfies the criteria of CITY (column ) equals \u201cNew York\u201d and AGE (column ) is less than 30. The index created at block  is optional, but in instances in which an index is created, execution of the second query can utilize the index to evaluate the conditional expressions efficiently.","In practice, the second query can operate as a mutual filtering mechanism for considering more than one level or direction of filtering. For example, the second query above considers both subscribers' and publishers' data filtering interests. Significantly, the process described can operate in an information security related implementation, with the second set of criteria expressing security or authorization criteria regarding to whom particular information can or should be published or provided.",{"@attributes":{"id":"p-0109","num":"0115"},"figref":"FIG. 3A"},"At block , each predicate form each expression of the expression set is classified as one of an indexed attribute predicate, a stored attribute predicate, and a sparse predicate. An indexed attribute predicate is a predicate that is chosen to be indexed, as described above, wherein the index is based on a set of operator and constant attributes that are stored in respective columns of a predicate table in association with a respective predicate identifier.","A stored attribute predicate is a predicate for which its operator and constant attributes are stored in respective columns of the predicate table in association with a respective identifier, but for which no index is created. For example, stored attribute predicates might not be indexed because their identifiers are not commonly used enough in the expression set, or they might be complex predicates that comprise operations with basic attributes (e.g., CHANGE\/PRICE).","A sparse predicate, as described above, is a predicate in which a predicate identifier associated therewith is uncommon in the expression set. For example, a sparse predicate might be derived from a predicate with a BETWEEN operator, with multiple operators on the same attribute, with functions, and with a LIKE operator. A sparse predicate, and its associated operator and constant, is stored as data in the predicate table.","At block , the expression set is filtered based on the classification of predicates performed at block .  is a flowchart that illustrates the step of filtering expressions based on predicate classifications, block .","At block A, the indexed attribute predicates are filtered first to obtain a first set of expressions that includes one or more expressions for which all of its indexed attribute predicates are true for a given data item. Second, at block B, the stored attribute predicates of the first set of expressions are filtered to obtain a second set of expressions that include one or more expressions for which all of it stored attributes are true for the given data item. Third, at block C, the sparse predicates of the second set of expressions, if any, are filtered to obtain a third set of expressions that includes one or more expressions for which all of its predicates are true for the given data item. Hence, the data item meets the criteria specified in the expression.",{"@attributes":{"id":"p-0115","num":"0121"},"figref":"FIG. 4","b":["400","400","402","404","402","400","406","402","404","406","404","400","408","402","404","410","402"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT) or a liquid crystal display (LCD), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical, magnetic, or magneto-optical disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","Alternative embodiments of the invention are described throughout the foregoing description, and in locations that best facilitate understanding the context of the embodiments. Furthermore, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example, implementations were presented in which SQL is used; however, the techniques described herein are not limited to use with SQL, for other data query languages may be applicable. For another example, implementations were presented in the context of a subscriber\/publisher system; however, advantages and use of embodiments of the invention are not limited to this context. For one more example, implementations were presented in which a concatenated bitmap index is created on columns of a predicate table. However, embodiments are not limited to such an index, for other index types that are suitable for indexing multiple columns of data tables are also applicable. Therefore, the specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.","In addition, in this description certain process steps are set forth in a particular order, and alphabetic and alphanumeric labels may be used to identify certain steps. Unless specifically stated in the description, embodiments of the invention are not necessarily limited to any particular order of carrying out such steps. In particular, the labels are used merely for convenient identification of steps, and are not intended to specify or require a particular order of carrying out such steps."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
