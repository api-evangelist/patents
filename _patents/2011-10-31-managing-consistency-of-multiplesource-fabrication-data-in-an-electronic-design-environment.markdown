---
title: Managing consistency of multiple-source fabrication data in an electronic design environment
abstract: Techniques and structures relating to consistency management for fabrication data are disclosed. A plurality of data sources may contain different values for a variety of design parameters usable by electronic circuit design tools to physically lay out at least a portion of an integrated circuit (such as minimum spacing rules, etc.). By seeking to detect different parameter values and/or parameter values that fail to meet a confidence threshold, potential errors may be uncovered at an earlier stage of the design process. Error detection may occur in response to a request to a database, or as part of a consistency check. Different file formats for different design tools may be imported into a central database to facilitate system operation, and an application programming interface may be used to acquire or calculate data values and perform checks in some embodiments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08788988&OS=08788988&RS=08788988
owner: Apple Inc.
number: 08788988
owner_city: Cupertino
owner_country: US
publication_date: 20111031
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","This disclosure relates to electronic design automation (EDA), and more particularly, relates to techniques and structures allowing for management of multiple-source fabrication data in an EDA environment.","2. Description of the Related Art","In the electronic design industry, a project design flow at a given process node may include a variety of tools, either from a single electronic design automation (EDA) vendor, or from multiple EDA vendors. Each EDA tool in a design flow may rely on a special technology file that describes the process \u201crecipe\u201d for the level of abstraction that particular EDA tool operates at. Further, in-house tools and techniques may augment commercially available tools\/flows with internally developed enhancement techniques. Accordingly, commercial design tools and internal procedures may use a variety of underlying technology (\u201ctech\u201d) data in order to function properly.","Complications may arise during the development of a design project, however, as technology data used by an EDA tool may be in a preliminary (non-final) form at various stages of the project. In other stages of a project, technology data that is used by one or more EDA tools may simply be unavailable. In this case, \u201cbest guess\u201d hand-generated data may be used in place of the missing data.","Accordingly, design and\/or testing may have to take place without the availability of all the final, underlying EDA tool data. This approach can lead to difficulties, particularly as design and testing processes near their conclusions. For example, as a design project progresses, there may be no obvious indication that potentially unreliable hand-generated data was used at an earlier stage of the design project in place of other, unavailable EDA tool data. For example, hand-generated data that is stored in an application format, rather than a human-readable format, may be difficult for a developer to review or visually check. Thus, as time progresses, hand-generated data may be erroneously accepted as the \u201creal\u201d data. Another potential pitfall is that earlier, less accurate versions of EDA tool data may be used instead of more recent data versions (for example, due to tool data becoming available to developers in piecemeal fashion).","Incorrect tool data may cause discrepancies to be uncovered in the later steps of a design project, rather than earlier steps. Even worse, discrepancies may even go entirely undetected. Attempting to fix a discrepancy by reverse engineering an underlying tech file and\/or design data can be a time-consuming process. Accordingly, providing such a fix may cause expensive delays or remedies\u2014such as having to make one or more additional tape-outs for an integrated circuit that is being designed.","Structures and techniques are described in this application that may allow for early detection of design errors in a dynamic, multiple-source electronic development environment. The current state of electronic design is complex, and may rely on a number of different tools to design different aspects of a chip\u2014particularly with regard to the physical layout of features on that chip. By importing design parameter data to a central location, performing various processing, and assessing confidence values for that data, conflicting values for design parameters (such as width, spacing, etc.) can be detected in an organized fashion and at an earlier stage than they might otherwise have been found. This can provide an advantage, in some embodiments, over a hardware designer manually going through a number of files and attempting to locate discrepancies, for example.","The present techniques may be helpful in a multiple tool environment because these tools may have been developed by different companies, and thus use data files that are not compatible with one another. A first file, for example, may include a value named \u201cMSW__,\u201d while a second file includes a value named \u201cMinimumSpaceWidthMetalOneLayerOne.\u201d Without centralization and\/or translation of these values, however, the hardware developer may not realize they actually refer to the same thing. Further, some files may even use different measurement units than other types of files (and thus, standardization and conversion of measurements may be performed in the present disclosure).","Due to the complexity of modern hardware design, fixing design errors can be costly. Accordingly, in various embodiments, the present techniques may save both time and money, and lead to better development of electronic products. The teachings of this disclosure and the claims, however, are expressly not limited by the features, embodiments, and\/or benefits discussed in the summary above.","This specification includes references to \u201cone embodiment\u201d or \u201can embodiment.\u201d The appearances of the phrases \u201cin one embodiment\u201d or \u201cin an embodiment\u201d do not necessarily refer to the same embodiment. Particular features, structures, or characteristics may be combined in any suitable manner consistent with this disclosure.","Terminology. The following paragraphs provide definitions and\/or context for terms found in this disclosure (including the appended claims):","\u201cComprising.\u201d This term is open-ended. As used herein, this term does not foreclose additional structure or steps. Consider a claim that recites: \u201ca system comprising a processor and a memory . . . . \u201d Such a claim does not foreclose the system from including additional components (e.g., a graphics processing unit (GPU), a memory controller, interface circuitry, etc.).","\u201cConfigured To.\u201d Various units, circuits, or other components may be described or claimed as \u201cconfigured to\u201d perform a task or tasks. In such contexts, \u201cconfigured to\u201d is used to connote structure by indicating that the units\/circuits\/components include structure (e.g., circuitry) that performs those task or tasks during operation. As such, the unit\/circuit\/component can be said to be configured to perform the task even when the specified unit\/circuit\/component is not currently operational (e.g., is not on). The units\/circuits\/components used with the \u201cconfigured to\u201d language include hardware\u2014for example, circuits, memory storing program instructions executable to implement the operation, etc. Reciting that a unit\/circuit\/component is \u201cconfigured to\u201d perform one or more tasks is expressly intended not to invoke 35 U.S.C. \u00a7112, sixth paragraph, for that unit\/circuit\/component. Additionally, \u201cconfigured to\u201d can include generic structure (e.g., generic circuitry) that is manipulated by software and\/or firmware (e.g., an FPGA or a general-purpose processor executing software) to operate in manner that is capable of performing the task(s) at issue. \u201cConfigured to\u201d may also include adapting a manufacturing process (e.g., a semiconductor fabrication facility) to fabricate devices (e.g., integrated circuits) that are adapted to implement or perform one or more tasks.","\u201cFirst,\u201d \u201cSecond,\u201d etc. As used herein, these terms are used as labels for nouns that they precede, and do not imply any type of ordering (e.g., spatial, temporal, logical, etc.). For example, a \u201cfirst\u201d database section and a \u201csecond\u201d database section can be used to refer to any two database sections, and does not imply that one database section was created before or after the other (for example). In other words, \u201cfirst\u201d and \u201csecond\u201d are descriptors.","\u201cBased On.\u201d As used herein, this term is used to describe one or more factors that affect a determination. This term does not foreclose additional factors that may affect a determination. That is, a determination may be solely based on those factors or based, at least in part, on those factors. Consider the phrase \u201cdetermine A based on B.\u201d While B may be a factor that affects the determination of A, such a phrase does not foreclose the determination of A from also being based on C. In other instances, A may be determined based solely on B.","Turning now to , a block diagram  is shown in which a variety of data files - are depicted. As depicted, data files - are in a format usable by one or more electronic circuit design tools, and may each contain one or more design parameter values for an integrated circuit. Note that although files - are shown as single digital files, one or more of files - may be split into multiple files in some embodiments. In yet other embodiments, content from two or more of files - may be combined into a lesser number of files (e.g., combined into a single file). Some of files - may not be present in some embodiments, while in other embodiments, additional files may be present.","In the embodiment of , file  is a CALIBRE\u2122 rule deck data file. This file may contain layer definitions, GDSII mappings, connectivity definitions, device definitions, and Design Rule Checking (DRC) rules. File  is a spreadsheet data file, and in the embodiment depicted,  includes one or more pieces of hand-generated data as design parameter values. (This data may be entered from a process manual, for example.) File  is a Library Exchange Format (LEF) data file. In various embodiments, LEF file  may have a \u201ctech\u201d section that defines layer names, spacing rules, width rules, implied connectivity, via rules, antenna rules, and multicut via generation rules. In some embodiments, LEF file  does not provide information regarding GDSII layer numbers, devices, base layers, and other more complicated shape relations. In one embodiment, LEF file  also contains routing rules as well as definitions of various types of cell, blocks, rams, etc.","In the embodiment of , a SYNOPSYS MILKYWAY\u2122 data file , an OPENACCESS\u2122 data file , and a CADENCE\u2122 data file  are also present. Accordingly, data file  may thus include topological, parasitic, and\/or timing data, which may relate to physical synthesis, parasitic extraction, and\/or physical verification. Data file  may include technology data containing the definitions of layers used in the design, definitions of VIAs and routing rules, and\/or definitions of operating points used for analysis. Data file  may include schematic entry, behavioral modeling (e.g., Verilog-AMS), circuit simulation, custom layout, physical verification, and\/or extraction and back-annotation data. Data file  may further include floorplanning, synthesis, test, and\/or place and route data. In one embodiment, CADENCE data file  may include some or all of the same data as LEF file  (e.g., a CADENCE file may be a LEF file in some embodiments).","Turning now to , a block diagram of one embodiment of a system  that includes data sources and systems is shown. In this embodiment,  includes data sources A-C, database system , and a development system . Data sources  may be a vendor provided tech data file, a hand-generated tech data file (such as a spreadsheet), and\/or any other digital data file that includes one or more values corresponding to physical layout data of an integrated circuit. For example, any of data files - (listed in ) may be a data source  in the embodiment of .","Database system  and development system  may each be a computing device and\/or computer system (e.g., system  as described with respect to ). Accordingly, database system  and\/or development system  may have one or more processors and one or more computer readable storage media configured to store data and executable instructions. As depicted, systems  and  are separate but connected systems (e.g., via a network connection). In some embodiments, however, systems  and  are combined as a single system. In general, any or all aspects of system  may be included within system  in various embodiments, and vice versa.","As shown, database system  includes one or more database sections  and a database functionality module . Section(s)  and module  may be data and\/or executable code stored on one or more computer readable storage media in various embodiments. Each of database sections  specifies a type of physical layout data for an integrated circuit in the embodiment shown. The type of physical layout data may correspond, in some embodiments, to a type of physical layout data as described in one or more of data sources  (i.e., files -). Accordingly, in one embodiment, two or more of sections  each respectively correspond to an electronic circuit design tool file format (CADENCE, etc.). Note that the term \u201celectronic circuit design tool,\u201d as used herein, refers to software that is usable to specify one or more physical layout aspects (e.g., spacing, width) of an electronic circuit that is being designed. In another embodiment, each of data sources  directly corresponds to one or more of database sections . Thus in one embodiment, there are a same number of sections  and sources , and a given database section  may have the exact same data content (or a portion thereof) as a data source .","In one embodiment, database system  is a relational database system, and functionality module  includes SQL functionality that allows querying, modification of data, insertion or deletion of database sections, etc. In another embodiment, system  is a non-relational database system, and module  is correspondingly configured to provide data access to sections  via non-relational methods. In yet other embodiments, however, database system  may not be a formal relational or non-relational database at all. For example, database sections  may simply be plain files (text or binary) that have been imported to system  \u201cas-is\u201d (or with some processing) from data sources . In such a system, database functionality module  may not be present, or may simply be one or more text and\/or binary editing tools suitable to access data stored in sections . As described below, API  may also facilitate access to database sections .","In the embodiment of , database sections  include, first and second sections that are respectively configured to store first and second values for a design parameter. This design parameter may specify a physical layout property of an integrated circuit. For example, a first section  might be configured to store a first value for a design parameter \u201cMin_Width,\u201d which specifies the minimum acceptable feature size for a particular circuit layer. The value for Min_Width might be derived from a hand-generated value entered into a spreadsheet (at an early stage of the design process, for example). A second section  might also be configured to store a second value for the design parameter Min_Width, but this second value may instead be derived from an LEF data file (or another data source  and\/or file -, for example). The Min_Width design parameter may be used by one or more EDA tools in order to physically lay out one or more layers of an integrated circuit\u2014for example, ensuring that an overly small feature size is not used, which could cause manufacturing difficulties at the foundry and\/or cause improper function of the circuit.","Accordingly, database sections  may each include a number of data values that correspond to a number of design parameters that specify a physical layout properties of an integrated circuit. In the embodiment of , each design parameter may have one or more corresponding values in one or more different database sections. In other words, a design parameter value may be uniquely specified by a single database section, or a design parameter value may be specified by two or more different database sections. These values may also change over time. For example, at an early stage of the design process, only one value (or even no value at all) may be specified for a particular design parameter, while two or more values may be specified at a later time (e.g., after additional tech data files or information is received).","Accordingly, when imported into database section(s) , data sources  (and each piece of data therein) may be associated with a version number and\/or date. This information may be particularly helpful in some embodiments when trying to trace back the source of an error. For example, a first MILKYWAY file may be labeled as version 1 and each design parameter data value in that file may be tagged with the version number and the date upon which the import occurred (e.g., the database may contain a tuple such as \u201cMin_Width,\u201d \u201c65 nm,\u201d \u201cv1.0,\u201d \u201c2011\/09\/26\u201d). If the value is changed in a later file, another tuple may be inserted into the database (such as \u201cMin_Width,\u201d \u201c68 nm,\u201d \u201cv2.0,\u201d \u201c2011\/10\/05\u201d). In some embodiments, the earlier (original) value for a parameter may be deleted, but in other embodiments it may be retained (e.g., for reference purposes). Also note that in some embodiments, a file or data source  may have its own internal versioning numbers, while in other embodiments, a version number may be assigned to the data source by system .","Database system  is configured, in the embodiment of , to import data in a variety of formats (e.g., such as the formats of files -). One or more parsers (not depicted) may be configured to extract data in proprietary formats (e.g., MILKYWAY) as well as open standard or other formats (e.g., LEF). Plain text, binary, XML, and other formats may be used both for reading data from sources  and for storing data within database system .","As shown, database system  is configured to receive requests to a database. These requests may be processed or handled, at least in part, by database functionality module  and\/or tech infrastructure API A. Requests to database system  may be for a design parameter that specifies a physical layout property of an integrated circuit. For example, a request for the \u201cMin_Width\u201d design parameter may be received by database system  in the embodiment of . Database system  is configured, in this embodiment, to generate a response for this request by performing a comparison involving first and second values for the requested design parameter. In one embodiment, system  simply compares two or more values to determine if they are the same (e.g., by checking a value from a first section  and a second value from a second section ). If the two or more values are the same, then that value is included in a response that is generated and then returned to a requester. If the two values are not the same, an error or warning may be returned. As further described below, however, different algorithms may be used to process a request for a design parameter value in various embodiments.","Development system , as depicted, includes tech infrastructure application programming interface (API) B, one or more electronic circuit design tools , and one or more design rule checkers . These components may be implemented as executable code and\/or data stored on one or more computer readable storage media.","API B may be used to communicate with database system  in the embodiment of . For example, API B may be used to formulate queries and\/or requests to system , and may also receive responses. In the embodiment shown, API  is implemented on both system  and ; that is, both system  and  include executable code related to the API. However, in other embodiments, API  may be present solely on database system , or present solely on development system .","Design tools  may include various tools such as those mentioned above\u2014CALIBRE, MILKYWAY, etc. These design tools may use a variety of values from database sections  in order to specify physical properties of a circuit that is being designed. Design rule checkers  represent a variety of checks that may be run against design rules for a given circuit design. For example, a design rule may specify that the minimum spacing between features on an integrated circuit is 55 nm. Design rule checkers may be used to ensure that a design is not, in fact, in violation of a design rule. Design rules may be imported from various sources in the embodiment of , such as a CALIBRE rule deck file.","Confidence Values","In some embodiments, a response that is generated for a request to a database is based on confidence values for the design parameter that is requested. In the embodiment of , for example, any given design parameter value within database section(s)  may have a corresponding confidence value that has been assigned. These confidence values may be specified as relative numeric values (e.g., 5, 50, 100) and\/or on a scale (e.g., 0=low confidence, 4=high confidence). The assignment of confidence values to particular design parameter values may be performed based on a variety of different schemes. In one embodiment, confidence value assignments are based on one or more rules stored within systems  and\/or system  (e.g., as further described below).","Turning to , a block diagram  is shown illustrating an embodiment of database sections  in which confidence values are assigned. In this embodiment, three database sections are present (A, B, and C). Database section A corresponds to values imported from a hand-generated data file. Database section B corresponds to values originating in a MILKYWAY file, while database section C corresponds to values originating in a LEF file.","In the embodiment of , a simple scheme is used to assign confidence values. All hand-generated values (in section A) will receive a relative confidence value of \u201c5\u201d, while all MILKYWAY and LEF values are respectively given confidence values of \u201c55\u201d and \u201c45\u201d. In other embodiments, however, different rules may be used to assign confidence values.","For example, a single database section may have different confidence values for different database parameter values (that is, all confidence values within a database section need not be identical). Confidence values may be based on a date or version of the underlying data or file from which a corresponding design parameter value is taken. For example, if a data source  has a particular version number associated with it, a date value from that earlier version may be given a lower confidence value than a later version of the same data source. Confidence values may be increased automatically in some embodiments when a later version includes a different value for a given design parameter. For example, if a version 1.0 file includes a value of \u201c65 nm\u201d for \u201cMin_Width\u201d, and a version 2.0 file includes the different value of \u201c63 nm\u201d, it might be assumed that by virtue of the fact that the later file version has been completed and that the Min_Width value has been changed, the newer, different value should be more reliable. Accordingly, in one embodiment, a later versioned (or later dated) data source  that contains a different parameter value will be given a higher confidence value than that parameter value previously had. (For example, the confidence value might be moved up by a threshold amount, such as \u201c5\u201d, or as a percentage of the previous value, such as 10%). While specific confidence values may be assigned to some parameters, default confidence values may also be used for other parameters in various embodiments. Confidence values may be assigned via API  in some embodiments.","As noted above, in some embodiments, the form and\/or content of a response to a database request for a design parameter may be based on confidence values. In one embodiment, the response will include a numeric value along with an indication of the confidence value(s). The numeric value may be an average (either weighted or non-weighted) of values in one or more sections of a database. For example, in , a query for \u201cMin_Width\u201d might return a non-weighted average of 66.67 nm (the average of 70 nm, 65 nm, and 65 nm). Another query might also return a weighted average of:\n\n65.23 nm=(70 nm*5\/110)+(65 nm*55\/110)+(65 nm*45\/110)\n\nIn this example, the numerators , , and  respectively correspond to the confidence values listed in columns A, B, and C, while the denominator  is the total of all those confidence values. Numerators , , and  correspond to the values in columns A, B, and C. The above weighted-average formula can be generalized and used with lesser or greater numbers of parameter values and confidence values in order to make other weighted average calculations. Also note that while averages have been given to two decimal places in the examples above, greater or lesser precision may be used in some embodiments. Accordingly, confidence values may be used to determine a response to a query for a design parameter that specifies a physical layout property of an IC.\n","Confidence values may also be used with respect to a confidence threshold when generating a response. For example, the threshold value of \u201c90\u201d might be set as a desirable confidence level to have for a particular design parameter. In the embodiment of , merely using the value from B or C would not satisfy such a threshold. In this case, a response might return \u201c65 nm\u201d (ignoring A for now), but also include a warning or indication that the confidence threshold has not been met. If both values from B and C were used, however, the total confidence value would be 100 (45+55), which is greater than the threshold of 90 in this example. In this latter case, then, no confidence warning would be created in the embodiment of .","Responses to database queries or requests may include indications of a design error condition in some embodiments (though design error conditions are not limited only to responses, as further discussed). A design error condition may be determined in some embodiments by comparing first and second values for a particular design parameter. If two or more values are sufficiently far apart, for example, it may be desirable to create an alert to this condition that a developer will be able to see.","In determining whether a design error condition exists, the difference between two or more values may be compared with respect to a threshold value (or percentage), for example. Consider sections A-C as depicted in . A threshold value of 10% might be used as one determinant of whether a design error condition exists\u2014that is, if any two values for a given design parameter are greater than 10% apart, an alert will be generated. In , the value in column A is not greater than 10% from the identical values in columns B and C\u2014accordingly, no error condition would exist in this example. However, if the error threshold condition was lowered to 5% (or to an absolute value of 4 nm), then a design error condition alert would be generated. A design error condition may be included in a response to a database query or request, and may include detailed information about what type of violation has occurred, as well as numeric values relating to that violation. These error conditions may be in addition to and\/or separate from rules checked by design rule checkers .","Turning now to , one embodiment of a tech overlay file  is shown. In this embodiment, tech overlay file  includes a control section , a basic technology section , an advanced technology section , and a tool data section . Tech overlay file  may exist on database system , development system , or both, in various embodiments. An initializer and a checker may be associated with tech overlay file, and may be executed via API  in some embodiments.","In one embodiment, tech overlay file  is implemented as an ASCII file, and includes a centralized repository of information from (or calculated from) database section(s) . For example, tech overlay file  may contain calculated values for all available design parameters (which may or may not be the same as individual values stored within various sections of database ). Accordingly, in one embodiment, tech overlay file  includes pre-computed responses for various database requests and\/or queries. Overlay file  may be created from files , data sources , and\/or information in database section(s)  in various embodiments.","Control section  includes, in the embodiment of , technology availability, naming, sources, age of sources, defaults, units, confidence grading, layer mapping, and confidence level function specifications. In this embodiment, basic technology section  includes layer types, direction, order, connectivity information (above, below, text), and first order width and spacing information. As shown, advanced technology section includes design rule checking (DRC) rule values based on complicated shape interactions, DRC rule values that may vary by shape size, and rules for constructing devices from polygons (LVS extraction). In various embodiments, tech overlay file  may have the any or all of the following features:\n\n","A variety of functions in API  may provide access into tech overlay file  in the embodiment of . These functions may allow, for example, the following information to be added, updated, accessed, or deleted:\n\n","Turning now to , a flow chart of one embodiment of a method  in accordance with the present disclosure is shown. In various embodiments of method  described below, one or more of the elements and\/or steps described may be performed concurrently, in a different order than shown, or may be omitted entirely. Other additional elements may also be performed as desired. All or a portion of steps of method  may be performed by database system  and\/or development system  in various embodiments, and should be understood in view of the disclosure discussed above relative to .","In step , a request to a database for a design parameter that specifies a physical layout property of an integrated circuit is received. As noted above, the database may have a plurality of sections, each of which specifies a type of physical layout data. Further, the database may include first and second sections that are configured to respectively store first and second values for that design parameter. In step , a response to the request is generated. The response is generated, in one embodiment, based on a comparison involving the first and second values, but may be based in any manner discussed above with respect to  in various embodiments. Step  determines if a design error condition exists, and may be performed prior to, subsequent to, or concurrently with step  in some embodiments. In another embodiment, however, step  is optional and\/or is not performed. Finally, as depicted, step  returns the generated response. This response may include a value for the design parameter, an indication of whether an error condition exists, confidence value data, and\/or any other appropriate information (e.g., as may have been described above).","Further embodiments of method  may have additional steps and\/or features. In one embodiment, generating a response to a database request is based on first and second confidence values that respectively correspond to first and second values for a design parameter. In another embodiment, step  includes determining, from a comparison involving the first and second values, that a design error condition exists with respect to the physical layout property of the integrated circuit, and the response that is returned includes an indication of the design error condition. Receiving the request to the database and returning the response may also be performed via an application programming interface configured to interact with the database in one embodiment. (For example, API  may specify one or more particular function definitions and\/or data exchange formats via which requests and responses can be communicated).","Turning now to , a flow chart of another embodiment of a method  in accordance with the present disclosure is shown. In various embodiments of method  described below, one or more of the elements and\/or steps described may be performed concurrently, in a different order than shown, or may be omitted entirely. Other additional elements may also be performed as desired. All or a portion of steps of method  may be performed by database system  and\/or development system  in various embodiments, and should be understood in view of the disclosure discussed above relative to .","In step , a computer system receives one or more files containing a plurality of data values for a plurality of design parameters usable by a plurality of electronic circuit design tools to physically lay out at least a portion of an integrated circuit. For example, the computer system may receive a MILKYWAY file, LEF file, and another file with hand-generated data.","In step , the computer system performs a consistency check on the plurality of design parameters, where performing the consistency check includes analyzing the plurality of files to determine if, for each of the plurality of design parameters, two or more different values for that design parameter are specified in the plurality of data values. For example, the contents of a MILKYWAY file, LEF file, and file with hand-generated data may each be examined for a particular design parameter (such as Min_Width for a particular metal and\/or layer; also note that generally, all design parameter values may be specific to a particular metal and\/or layer, and may be queried as such via API ). If all values specified in the three files are identical, the consistency check will be passed in this example. In one embodiment, the consistency check will be passed even if one or more values for the design parameter are missing (e.g., the LEF file and hand-generated data file contain the same \u201c60 nm\u201d value, but no value is specified by the MILKYWAY file). In another embodiment, however, one or more rules may indicate that a missing value from one or more files should cause the consistency check to fail. Such rules may be customized for different designs, data versions, and\/or particular design parameters. For example, a rule might specify that for one particular parameter, if only a MILKYWAY file and CADENCE file are present, then it is OK if that parameter has no specified value in one of those two files. However, the same rule might also dictate that if a CALIBRE file is also present, both the CALIBRE file and at least one of the MILKYWAY and CADENCE file must have matching values. Other variations are possible.","Exact matching values are not necessary, in some embodiments, for a consistency check to be passed. For example, certain acceptable threshold values and\/or percentages for differences between values may be specified for any number of design parameters. Continuing the above example, the design parameter \u201cMin_Width\u201d might pass the consistency check if two values are within the greater of 6 nm or 5% of the difference between the values. Also, different consistency rules may be employed at different stages of the design process. For example, once a CALIBRE file (or other file considered to have more generally accurate information) becomes available, an error tolerance for a design parameter value may be reduced. So, the design parameter \u201cMin_Width\u201d might only pass the consistency check if two values are within the greater of 3 nm or 2% in the event that a CALIBRE file is present. Further, in some embodiments, certain types of data sources may \u201ctrump\u201d other data sources for some or all design parameter values. For example, in one embodiment, if a design parameter value relates to routing, LEF values may be used to the exclusion of all other values from other database sections (e.g., values from other sources). This process could be accomplished, in one embodiment, by assigning LEF data sources a relative confidence value of 1, and assigning other sources a relative confidence value of 0. In various embodiments, rules and conditions can be customized for each design parameter, groups of design parameters, types of design parameters, etc., based on any of the aforementioned data available to database system . For example, some parameter values from a source may have different confidence values than other values from that same source (e.g., between different metal groups, layers, etc.). Rules for consistency and value determination may also be stored on one or more computer readable media.","Accordingly, in step , an indication of a design error condition may optionally be generated in response to the determination that one or more design parameters has two or more different specified values. Such a design error condition may be indicated in a response that is generated during the consistency check, and\/or may be part of a general report that is delivered after a consistency check is finished. For example, a consistency check may generate a report, in one embodiment, that informs a developer of all perceived consistency problems within a design database at the time the check is run. These problems may cover a number of different areas and types of data. The relative severity of a design error condition may also be indicated\u2014for example, providing warnings and\/or errors of different severity levels (e.g., \u201cwarning,\u201d \u201cminor error,\u201d \u201ccritical error,\u201d etc.) In accordance with the above, design error conditions may be reported as part of a consistency check and\/or as a response to a database request or query.","In another embodiment, the consistency check performed in step  is based on a plurality of confidence levels assigned to two or more values for at least a first one of a plurality of design parameters. For example, as discussed above and relative to , a determination may be made as to whether design parameter values are sufficiently close together that they should be deemed acceptable. In one embodiment, relative confidence values may also be summed to determine if the specified values achieve a required confidence threshold. If a confidence threshold of 90 is required, for example, a consistency check on the \u201cMin_Width\u201d parameter might fail if the only two parameter values available have consistencies of 35 and 40 (or 75 total). In this case, a warning might be generated indicating that the parameter may not be sufficiently reliable at this stage of the design. Later, if another data source is received that has a matching value pushing the total consistency to 90 or above, the design parameter might be deemed to pass the consistency check. (Note again that in some embodiments, and under some rules, identical parameter values may be required, but in other embodiments and under other rules, some variation within a defined range or percentage might be accepted.) Accordingly, in one embodiment, an additional data parameter value that boosts a total confidence level over a threshold may still allow the consistency check to pass even if the new value is not identical to other previously received values.","Method  may be repeated, in the embodiment of , in the event that an additional (or updated) data file containing one or more design parameter data values is received. For example, a first consistency check might be performed based only on a MILKYWAY file and a hand-generated data file. However, when an additional data file (such as a CALIBRE file) is received, an additional consistency check might be performed on at least one of the plurality of design parameters. Such an additional consistency check may compare an updated value for at least one design parameter to a value for the at least one design parameter that is from another (earlier) data file. In the example above, the CALIBRE file value might be compared with values from the MILKYWAY and\/or hand-generated data file to determine if a design parameter passes an (additional) consistency check.","In one embodiment, method  also includes the steps (not depicted) of receiving a query for a value for a first one of a plurality of design parameters, determining that value from one or more of the plurality of files, and returning a response to the query, where the response includes the determined value. Queries, for example, can be responded to much in the same way as requests are responded to in the embodiment of . In one embodiment, a query is a structured SQL query, while in another embodiment, the query is performed through API  and is not necessarily an SQL query.","Exemplary Computer System","Turning next to  a block diagram of one embodiment of a system  is shown. System  may be used in various embodiments to implement all or a portion of database system  and\/or development system . In the illustrated embodiment, system  includes at least one instance of an integrated circuit (processor)  coupled to an external memory . The external memory  may form a main memory subsystem in one embodiment. The integrated circuit  is coupled to one or more peripherals  and the external memory . A power supply  is also provided which supplies one or more supply voltages to the integrated circuit  as well as one or more supply voltages to the memory  and\/or the peripherals . In some embodiments, more than one instance of the integrated circuit  may be included (and more than one external memory  may be included as well).","The memory  may be any type of memory, such as dynamic random access memory (DRAM), synchronous DRAM (SDRAM), double data rate (DDR, DDR2, DDR3, etc.) SDRAM (including mobile versions of the SDRAMs such as mDDR3, etc., and\/or low power versions of the SDRAMs such as LPDDR2, etc.), RAMBUS DRAM (RDRAM), static RAM (SRAM), etc. One or more memory devices may be coupled onto a circuit board to form memory modules such as single inline memory modules (SIMMs), dual inline memory modules (DIMMs), etc. Alternatively, the devices may be mounted with an integrated circuit  in a chip-on-chip configuration, a package-on-package configuration, or a multi-chip module configuration.","The peripherals  may include any desired circuitry, depending on the type of system . For example, in one embodiment, the system  may be a mobile device (e.g. personal digital assistant (PDA), smart phone, etc.) and the peripherals  may include devices for various types of wireless communication, such as wifi, Bluetooth, cellular, global positioning system, etc. The peripherals  may also include additional storage, including RAM storage, solid state storage, or disk storage. The peripherals  may include user interface devices such as a display screen, including touch display screens or multitouch display screens, keyboard or other input devices, microphones, speakers, etc. In other embodiments, the system  may be any type of computing system (e.g. desktop personal computer, server, laptop, workstation, net top etc.). Peripherals  may thus include any networking or communication devices necessary to interface two computer systems (such as in the embodiment of , in which systems  and  are connected).","Computer Readable Medium","The above-described techniques and methods may be implemented as computer-readable instructions stored on any suitable computer-readable storage medium, such as medium  depicted in . As used herein, the term computer-readable storage medium refers to a (nontransitory, tangible) medium that is readable by a computer or computer system, and includes magnetic, optical, and solid-state storage media such as hard drives, optical disks, DVDs, volatile or nonvolatile RAM devices, holographic storage, programmable memory, etc. The term \u201cnon-transitory\u201d as applied to computer readable media herein is only intended to exclude from claim scope any subject matter that is deemed to be ineligible under 35 U.S.C. \u00a7101, such as transitory (intangible) media (e.g., carrier waves), and is not intended to exclude any subject matter otherwise considered to be statutory. Computer-readable storage mediums such as medium  can be used, in various embodiments, to store instructions and\/or data that comprise data sources , database sections , database functionality module , tech infrastructure API , design tools , design rule checkers , and\/or tech overlay file .","Although specific embodiments have been described above, these embodiments are not intended to limit the scope of the present disclosure, even where only a single embodiment is described with respect to a particular feature. Examples of features provided in the disclosure are intended to be illustrative rather than restrictive unless stated otherwise. The above description is intended to cover such alternatives, modifications, and equivalents as would be apparent to a person skilled in the art having the benefit of this disclosure. Additionally, section or heading titles provided above in the detailed description should not be construed as limiting the disclosure in any way.","The scope of the present disclosure includes any feature or combination of features disclosed herein (either explicitly or implicitly), or any generalization thereof, whether or not it mitigates any or all of the problems addressed herein. Accordingly, new claims may be formulated during prosecution of this application (or an application claiming priority thereto) to any such combination of features. In particular, with reference to the appended claims, features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 7","FIG. 2"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
