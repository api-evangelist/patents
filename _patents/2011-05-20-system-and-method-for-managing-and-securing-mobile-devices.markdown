---
title: System and method for managing and securing mobile devices
abstract: Systems and methods are provided for securing at least one mobile device. A server includes a controller and a non-transitory computer readable medium storing instructions executable by the controller. The executable instructions are configured to perform a method in which a secure communications session is established with a user and the user is allowed to input a list of a plurality of security actions to be performed at a mobile device associated with the user. A secure communications session is established with the mobile device, and the list of the plurality of security actions is provided to the mobile device simultaneously as a single instruction set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510819&OS=08510819&RS=08510819
owner: Neevo, LLC
number: 08510819
owner_city: Cleveland
owner_country: US
publication_date: 20110520
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND","SUMMARY","DESCRIPTION"],"p":["This application claims priority from U.S. Provisional Application No. 61\/347,200, filed May 21, 2010, the subject matter of which are incorporated herein by reference in their entirety.","The use of mobile electronic devices continues to expand as the sophistication of hardware technology and software applications evolves. Along with this, the value of mobile devices is also increasing, in terms of both the cost of some mobile devices, their service capabilities, and the information they contain or communicate. Mobile devices are particularly susceptible to physical and information loss. As a consequence, there is an ever-growing need for mobile device protection.","In accordance with an aspect of the present invention, a method is provided for securing a mobile device. A time-sensitive server identity token (TSIT), having an associated time stamp, is generated at a server. The TSIT is sent to the mobile device and verified at the mobile device. Authentication information from the mobile device to the server in response to verification of the TSIT at the mobile device. A secure communications session is established between the mobile device and the server. Status information is provided from the mobile device to the server, and a list of at least one security action is provided from the server to the mobile device. The list of at least one security action is processed at the mobile device such that each of the at least one security action is either provided to a local queue for storage or provided to a client software of the mobile device for execution","In accordance with another aspect of the present invention, a system is provided for securing at least one mobile device. A server includes a controller and a non-transitory computer readable medium storing instructions executable by the controller. The executable instructions are configured to perform a method in which a secure communications session is established with a user and the user is allowed to input a list of a plurality of security actions to be performed at a mobile device associated with the user. A secure communications session is established with the mobile device, and the list of the plurality of security actions is provided to the mobile device simultaneously as a single instruction set.","In accordance with yet another aspect of the present invention, a system is provided for securing at least one mobile device. A mobile device includes a controller and a non-transitory computer readable medium storing instructions executable by the controller. The executable instructions are configured to perform a method in which authentication information and status information are provided to an associated server. The status information comprising a trigger update representing a local queue of active triggers. An update is retrieved from the server representing a difference between the local queue and a job queue at the server. The local queue is modified according to the received update.","Mobile device security may focus on protecting, among other things, the mobile device itself, the service capabilities of the mobile device, the communications of the mobile device, and the information residing on the mobile device. In many cases, when confronted with a potential loss, it is advantageous for the user to be able to initiate security activities remotely, for example, after the mobile device has been lost or stolen. Various techniques or processes exist for remotely locating the mobile device, disabling the capabilities of the mobile device, and for backing-up the information on the mobile device.","Regardless of which technique is utilized for executing these tasks, the security and effectiveness of a remote process may be lacking. In particular, remote communications to a mobile device may be susceptible to being intercepted, lost (unexecuted), or executed ineffectively.","For example, communications to and from the mobile device may not be sufficiently secure, resulting in intercepted or bogus communications, which may be malicious. Unauthorized commands sent to a mobile device can result in a variety of problems for the user, such as, for example, loss of information, loss of device functionality, theft of services, user identification theft, etc.","A common approach to sending commands to a mobile device requires the mobile device to be \u201cON\u201d and able to receive the command at the time that the command is sent, or pushed, to the mobile device. If the mobile device is not available to receive the pushed command, the command will not be executed, resulting in less than desirable protection of the mobile device.","In addition, common approaches to executing remote commands do not provide feedback regarding the status of the commands sent to the mobile device. In this case, the user is unaware of the success or failure of the intended process and the current state of mobile device protection.","The following paragraphs include definitions of exemplary terms used within this disclosure. Except where noted otherwise, variants of all terms, including singular forms, plural forms, and other forms, fall within each exemplary term meaning. Except where noted otherwise, capitalized and non-capitalized forms of all terms fall within each meaning.","\u201cCircuit,\u201d as used herein includes, but is not limited to, hardware, firmware, software or combinations of each to perform a function(s) or an action(s). For example, based on a desired feature or need, a circuit may include a software controlled microprocessor, discrete logic such as an application specific integrated circuit (ASIC), or another programmed logic device. Additionally, a circuit may include a sensor, detector, or emitter\/detector combination.","\u201cComprising,\u201d \u201ccontaining,\u201d \u201chaving,\u201d and \u201cincluding,\u201d as used herein, except where noted otherwise, are synonymous and open-ended. In other words, usage of any of these terms (or variants thereof) does not exclude one or more additional elements or method steps from being added in combination with one or more delineated elements or method steps.","\u201cComputer communication,\u201d as used herein includes, but is not limited to, a communication between two or more computer components and can be, for example, a network transfer, a file transfer, an applet transfer, an e-mail, a hypertext transfer protocol (HTTP) message, a datagram, an object transfer, a binary large object (BLOB) transfer, and so on. A computer communication can occur across, for example, a wireless system (e.g., IEEE 802.11), an Ethernet system (e.g., IEEE 802.3), a token ring system (e.g., IEEE 802.5), a local area network (LAN), a wide area network (WAN), point-to-point system, a circuit switching system, a packet switching system, any other current or subsequent communication system, and so on.","\u201cComputer component,\u201d as used herein includes, but is not limited to, a computer-related entity, either hardware, firmware, software, a combination thereof, or software in execution. For example, a computer component can be, but is not limited to being, a processor, an object, an executable, a process running on a processor, a thread of execution, a program and a computer. By way of illustration, both an application running on a server and the server can be computer components. One or more computer components can reside within a process or thread of execution and a computer component can be localized on one computer or distributed between two or more computers.","\u201cController,\u201d as used herein includes, but is not limited to, any circuit or device that coordinates and controls the operation of one or more input, output, or other types of devices. For example, a controller can include a device having one or more processors, microprocessors, or central processing units (CPUs) capable of being programmed to perform input or output functions.","\u201cLogic,\u201d as used herein includes, but is not limited to, hardware, firmware, software or combinations of each to perform a function(s) or an action(s), or to cause a function or action from another component. For example, based on a desired application or need, logic may include a software controlled microprocessor, discrete logic such as an application specific integrated circuit (ASIC), or other programmed logic device. Logic may also be fully embodied as software.","\u201cOperable connection\u201d (or a connection by which entities are \u201coperably connected\u201d), as used herein includes, but is not limited to, a connection in which signals, physical communication flow, or logical communication flow may be sent or received. Usually, an operable connection includes a physical interface, an electrical interface, a wireless interface, or a data interface, but an operable connection may include differing combinations of these or other types of connections sufficient to allow operable communication or control.","\u201cOperative communication,\u201d as used herein includes, but is not limited to, a communicative relationship between devices, logic, or circuits, including wired and wireless relationships. Direct and indirect electrical, electromagnetic, and optical connections are examples of connections that facilitate operative communications. Two devices are in operative communication if an action from one causes an effect in the other, regardless of whether the action is modified by some other device. For example, two devices in operable communication may be separated by one or more of the following: i) amplifiers, ii) filters, iii) transformers, iv) optical isolators, v) digital or analog buffers, vi) analog integrators, vii) other electronic circuitry, viii) fiber optic transceivers, ix) Bluetooth communications links, x) IEEE 802.11 communications links, xi) satellite communication links, xii) gateways, repeaters, routers, and hubs, xiii) wired or wireless networks, xiv) mobile communications towers, and xv) other wired or wireless communication links. Operative communication may be facilitated by and exist between devices using, for example, the internet or service provider networks. As another example, an electromagnetic sensor is in operative communication with a signal if it receives electromagnetic radiation from the signal. As a final example, two devices not directly connected to each other, but both capable of interfacing with a third device, e.g., a central processing unit (CPU), are in operative communication.","\u201cOr,\u201d as used herein, except where noted otherwise, is inclusive, rather than exclusive. In other words, \u201cor\u201d is used to describe a list of alternative things in which one may choose one option or any combination of alternative options. For example, \u201cA or B\u201d means \u201cA or B or both\u201d and \u201cA, B, or C\u201d means \u201cA, B, or C, in any combination or permutation.\u201d If \u201cor\u201d is used to indicate an exclusive choice of alternatives or if there is any limitation on combinations of alternatives, the list of alternatives specifically indicates that choices are exclusive or that certain combinations are not included. For example, \u201cA or B, but not both\u201d is used to indicate use of an exclusive \u201cor\u201d condition. Similarly, \u201cA, B, or C, but no combinations\u201d and \u201cA, B, or C, but not the combination of A, B, and C\u201d are examples where certain combinations of alternatives are not included in the choices associated with the list.","\u201cProcessor,\u201d as used herein includes, but is not limited to, one or more of virtually any number of processor systems or stand-alone processors, such as microprocessors, microcontrollers, central processing units (CPUs), distributed processors, paired processors, and digital signal processors (DSPs), in any combination. The processor may be associated with various other circuits that support operation of the processor, such as random access memory (RAM), read-only memory (ROM), programmable read-only memory (PROM), erasable programmable read-only memory (EPROM), clocks, decoders, memory controllers, or interrupt controllers, etc. These support circuits may be internal or external to the processor or its associated electronic packaging. The support circuits are in operative communication with the processor. The support circuits are not necessarily shown separate from the processor in block diagrams or other drawings.","\u201cSoftware,\u201d as used herein includes, but is not limited to, one or more computer readable or executable instructions that cause a computer or another electronic device to perform functions, actions, or behave in a desired manner. The instructions may be embodied in various forms such as routines, algorithms, modules or programs including separate applications or code from dynamically linked libraries. Software may also be implemented in various forms such as a stand-alone program, a function call, a servlet, an applet, instructions stored in a memory, part of an operating system, or other types of executable instructions. It will be appreciated by one of ordinary skill in the art that the form of software is dependent on, for example, requirements of a desired application, the environment it runs on, or the desires of a designer\/programmer or the like. Software may be embodied as an \u201capplication.\u201d","\u201cSoftware component,\u201d as used herein includes, but is not limited to, a collection of one or more computer readable or executable instructions that cause a computer or other electronic device to perform functions, actions or behave in a desired manner. The instructions may be embodied in various forms like routines, algorithms, modules, methods, threads, or programs. Software components may be implemented in a variety of executable or loadable forms including, but not limited to, a stand-alone program, a servelet, an applet, instructions stored in a memory, and the like. Software components can be embodied in a single computer component or can be distributed between computer components.","A \u201csecurity action\u201d, as used herein, is an action taken to enhance the security of a mobile device and can include a notification from the remote device to a current user or a remote party or a change in the status of the mobile device, which can be apparent to or hidden from a current user. A \u201cjob\u201d is a security action that is executed at the mobile device immediately upon its receipt from the server. A \u201ctrigger\u201d is a security action paired with a condition, the logical truth or falsity of which is determinable at the mobile device. Triggers can persist at the mobile device, and do not necessarily expire once invoked.","The following table includes long form definitions of exemplary acronyms, abbreviations, and labels for variables and constants in mathematical or logical expressions used within this disclosure. Except where noted otherwise, variants of all acronyms, including singular forms, plural forms, and other affixed forms, fall within each exemplary acronym meaning. Except where noted otherwise, capitalized and non-capitalized forms of all acronyms fall within each meaning.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Acronym","Long Form"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["API","Application Programming Interface"]},{"entry":["GPS","Global Positioning System"]},{"entry":["RFID","Radio-Frequency IDentification"]},{"entry":["RSS","Really Simple Syndication"]},{"entry":["SD","Secure Digital"]},{"entry":["SHA-1","Secure Hash Algorithm, standard 1"]},{"entry":["SHA-2","Secure Hash Algorithm, standard 2"]},{"entry":["SIM","Subscriber Identity Module"]},{"entry":["SSL","Secure Socket Layer"]},{"entry":["SMS","Short Message Service"]},{"entry":["Wi-Fi","Trademark of the Wi-Fi Alliance; a.k.a. Wireless Fidelity"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Reference is first made to , which shows a block diagram of an embodiment of a security system . The system  includes a server  or cluster of servers  running a centrally managed server software application  or security engine responsible for orchestrating the security system . The server  may be embodied as a computer, for example, and may include one or more processors or controllers  and other computer components (not shown). The server may also include various software programs or components in addition to the server software . A cluster of servers  may communicate with each other and with other devices of the system  using, for example, computer communications.","The system  also includes one or more mobile devices . Examples of mobile devices  that can communicate with a network, include, but are not limited to, for example, mobile phones, smart phones, laptop computers, personal media players, personal entertainment systems, and various other portable electronics. Mobile devices  may also include devices not intended to be used in a portable manner, but still capable of communicating with a network, such as, for example, televisions, DVD players, cameras, car electronics, and various other electronics or appliances.","A mobile device  is comprised of an operating system  which manages storage facilities  (e.g., hard disk, SD card, SIM card, etc.), input devices or components  (e.g., buttons, keyboard, touch-screen, microphone, etc.), output devices or components  (e.g., display, speakers, etc.), sensors  (e.g., accelerometer, GPS, etc.) and a power source  (e.g., battery). The mobile device  may also include one or more processors or controllers .","The mobile device  may also include various software programs or components, including the client software . The client software  is developed to interface with the server application  to support the communications and activities of the security system . The client software  may be a thin-client application, designed to minimize its own use of mobile device  resources. For example, the client software  may execute various functions or tasks of the system  by utilizing the capabilities of other software applications that, for example, may reside on the mobile device . In this manner, storage  space and processing power dedicated to the functions of the system  on the mobile device  may be minimized. The client software  may also reside in a dormant state until needed or triggered, further minimizing the need for or use of mobile device  resources.","The mobile device  may be in operative communication with the system  and, in particular, the server , via, for example, the internet  or through a service provider network of the mobile device . The service provider network, may include various communication devices, such as, for example, and in various combinations, transmission towers, a wireless network , and a wireless gateway .","The system  may also include numerous interface  possibilities (e.g., web application, RSS, secure API, etc.) with the centrally managed server application . The interface  may be in operative communication with the system  and, in particular, the server , via, for example, the internet .","The operative communication between the mobile device  and the server , and in particular, between the client software  and the server software , should utilize a robust, secure communication link. In particular, for example, the system  utilizes an operable connection between these devices that protects the communications and the information therein.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 2","b":["104","102","128","126"]},"In the first embodiment, shown as Method  in , triggers are used to wake the dormant mobile client  and, for example, manage repetition of the process sequence shown in the dashed box . The process begins at step  when a trigger fires, prompting the mobile client  to attempt to authenticate the client, which, for example, may include sending a private API key to the server application . An API key is created during installation\/activation and it is used for authentication and access control. Exemplary triggers, for example, may include a time elapse since a last contact with the server , a specific time for a periodic event (e.g., as a condition for a periodic status update to the server every twenty-four hours), device  boot, detection of a location outside of a predetermined region, detection of low battery life, or any other specific event. It will be appreciated that triggers can be generated at the mobile device , for example, by the user, as well as provided to the mobile device by the server .","Upon successful authentication at step , the server application  can establish a secure session at step  with the mobile client . Generally, authentications, such as for a user or a device, are carried out by the server  and in the event of a failure, the process will end before the secure session is established. This session  may continue and stay alive, for example, via polling or a persistent socket (e.g., PubSub). In the event this session  is prematurely terminated (e.g., data connection lost, process killed) the mobile client  may attempt to re-establish the session . After the session  is established, the mobile client  can notify the server application  of events that have occurred on the mobile device  since the last session during the check and update step . For example, if the mobile device  executed jobs or triggers outside of a session , these events can be logged and may be transferred in step  to the server application  upon a subsequent secure session in step . In one implementation, these logged events can include a trigger update representing a local queue of active (e.g., non-expired) triggers stored at the device.","Still referring to Method  of , while the session  is alive, after the mobile client  relays events (e.g., jobs executed, triggers fired) in step , the mobile client  can receive jobs and triggers during step , which may be, for example, in near real-time. In one example, this can include receiving an update from the server representing a difference between the local queue and a job queue at the server. Next, in step , jobs may be processed in the order received and triggers are acted upon accordingly. This can include modifying the local queue according to the received update, as to add, remove, or modify one or more triggers. Once complete, the process may repeat until the session  times out or, for example, the server application  terminates the session  at step  or the client application  terminates the session .","In the second embodiment, shown as Method  in , a time-sensitive server identity token (TSIT) may be used to wake the dormant mobile client  at step . A TSIT may be useful to start a secure connection on-demand rather than wait for the mobile client  to initiate the session as in Method  . The server application  may begin this process by pushing the TSIT to the mobile client  during step . Next, the mobile client  can verify the TSIT at step . TSIT verification is discussed in detail below and shown in . Next, in step , the mobile client  can send a private API key  to the server application  to authenticate the client. It will be appreciated that the private API key  can be made persistent (e.g., stored in a location unaffected by a wipe of the mobile device ), such that the private API key will survive a wipe of the device. In this implementation, when it is detected at the mobile device  that data associated with the mobile client  is absent or incomplete, the private API key  can be used to authenticate the mobile device with the server , and the client data can be synchronized with stored client data on the server.","Upon successful authentication at step , the server application  can establish a secure session at step  with the mobile client . This session  may continue and stay alive, for example, via polling or a persistent socket (e.g., PubSub). In the event this session  is prematurely terminated (e.g., data connection lost, process killed) the mobile client  can attempt to re-establish the session . After the session  is established, the mobile client  can notify the server application  of events that have occurred on the mobile device  since the last session during the check and update step . For example, if the mobile device executed jobs or triggers outside of a session , these events would be logged and may be transferred  to the server application  upon a subsequent secure session in step .","Still referring to Method  of , while the session  is alive, after the mobile client  relays events (e.g., jobs executed, triggers fired) in step , the mobile client  can receive jobs and triggers during step , which may be, for example, in near real-time. Next, in step , jobs may be processed in the order received and triggers are acted upon accordingly. Once complete, the process may repeat until the session  times out or, for example, the server application  terminates the session  at step  or the client application  terminates the session .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 3","FIG. 2"],"b":["2","604","602"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 4","b":["702","522","524","704","706","706","126","102","522","524"]},"Still referring to , a second exemplary embodiment for creating a TSIT is shown. This embodiment can utilize a SHA-1 cryptographic hash function  and appropriate variables ,  for the TSIT algorithm. In this example, the resulting TSIT (i.e., digest) is shown in box . This embodiment may be useful when, for example, the user wants to create a secure connection on-demand rather than wait for the mobile client  to initiate the session as in Method  .",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 5","FIG. 4"],"b":["102","802","128","102","804","102","104","806","128","104","706","104","104","818","706","706","705","812","814","128","104","128","816","820"]},"Once a secure connection is established between the mobile device  and the server , the server software  can exchange information, such as, for example, commands or tasks (in the form of jobs) and status information with the client software . This exchange of information may be used to manage and protect the mobile device . Exemplary jobs that may be directed to the mobile device  include commands that can, for example, alert the user to the location of the mobile device , silence the mobile device , locate the mobile device , track the mobile device , lock or unlock the mobile device , backup information on the mobile device , wipe information from the mobile device , etc. As mentioned above the thin-client software  may utilize, for example, the native capabilities of software applications that, for example, may reside on the mobile device  but are not part of the client software . In addition, the client software  can provide status information to the server software , such as, for example, battery status, device settings, installed applications, changes to the memory of the device, and performance information of the mobile device  and the status of jobs directed to the mobile device .","Given the inherent nature of mobile devices  and mobile networks, pushing jobs, such as commands or tasks, directly to a mobile device  via delivery mechanisms such as, for example, SMS, may be extremely unreliable. For instance, if a user or system issues a job via SMS, it may not be delivered in a timely manner or at all. Mobile devices  and mobile networks may both be volatile systems. In particular, mobile devices  routinely lose power and experience connectivity fluctuations. Pushing commands directly to the device  may also limit the ability to cancel or update unprocessed jobs. In addition, this type of job issuance may have inherent and serious security risks. The algorithm used to generate commands for a device  may be easily reverse engineered, which would enable malicious attacks from unauthorized users or systems (e.g., wiping or bricking devices, etc.).",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIGS. 6 and 7","FIG. 6","FIG. 7","FIG. 7","FIG. 7"],"b":["130","1002","128","128","1002","102","1004","1104","1006","1102","1008","1008","1010"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 8","b":["1202","1202","102","1204","102","1204","102","1206","1208","1210"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 9","b":["1302","102","102","1302","1304","126","102","1306","102","1308"]},"To illustrate this process for several mobile devices,  illustrates an exemplary job queue. This simplified job queue contains a series of sequential exemplary jobs (or tasks), identified as job_id , for specific exemplary devices , which are identified with a device_id . The action to be performed by a particular job  is shown as . An exemplary persistent flag  is also shown. Some jobs may only be valid for a certain period of time while others remain persistent, not expiring until executed or modified. Optionally jobs can result in various types of notifications  being sent to a user or system. A state field  is also displayed to indicate the state or status of the job . These jobs  may be executed based on their order in the queue, state , some other type of priority, or any combination thereof. The jobs  in the queue may be grouped in sets, assigned in batch, ranked by priority, have dependencies, and optionally include the notification(s) . For example, job #543235, shown as , can lock device #27119 after jobs #543232 and #543233 have been processed, based on the order of the jobs . As mentioned above, jobs  in the queue are usually and may be preferably stateful. For example, a job  may be in a pending, processed, or cancelled state .","In this manner, via an exemplary user interface , the server software application  allows a user to select jobs  to be performed by a mobile device  by adding jobs  to the job queue (as shown in ). The job queue resides on the server  and the jobs  in the job queue are not pushed to the mobile device . Rather, the mobile device  periodically checks for its respective jobs  in the job queue (as shown in ). If jobs  exist for the mobile device , the server  delivers and the mobile device  retrieves these jobs  (as shown in ), and may execute these jobs  according to defined logic. This approach allows jobs  to be planned for a mobile device , even if the mobile device  is not able to receive the job command at the time that the job  is scheduled with the server . The server  can maintain the job queue regardless of the current status of any of the associated mobile devices . For example, if a device  is stolen and powered off, a user can add a particular protective job(s)  to the job queue for the stolen device , even while the device  is still powered off. When the stolen device  is powered back on and thereafter checks the job queue, the planned protective job(s)  can be delivered to the stolen device  for execution, which, for example, may be immediately.","In addition to jobs , the system allows users to create reusable triggers for a mobile device  which may encompass a predefined set of conditions and result in a predefined response (e.g., executing actions, delivering notifications, etc.). Unlike a job , which is typically processed by a receiving client or device  only once, triggers may be long-lived and may be utilized until they are modified or removed by a user or system.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 11","b":["1602","1602","1604","102","1604","1606","1608","1610","1612","126"]},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 12","b":["102","1702","1702","1704","102","1706","1708","1710","1712","126"]},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 13","b":["1802","102","1802","1804","126","1804","128","102","1806"]},"To illustrate this process for several triggers,  illustrates an exemplary trigger datastore, illustrating how triggers may be stored. Individual triggers can be identified with a trigger_id  and are associated with a specific device, which is identified with a device_id . Each trigger includes a specific triggering event(s)  based on a particular precondition, identified in data field . The occurrence of the corresponding event can result in a postcondition response, such as the execution of a particular action, identified as , and\/or the delivery of a particular notification, identified as . Unlike jobs, triggers may be long-lived, and while a state can be applied to a trigger (e.g., active, inactive, etc.), they are not required.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 15","FIG. 14","FIG. 14"],"b":["2002","2002","100","2004","102","2006","2002","102","1910","102","1912","2002","2006","102","2004","2006","2002"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 16","b":["102","1404","1502","1504","102","1506"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 17","FIG. 10","FIG. 14","FIG. 18"],"b":["102","2002","102","2004","102","2006","2102","102"]},"In many embodiments, an exemplary process or apparatus is described in terms of user activities, actions, or options. However, this is for convenience and the descriptions of these embodiments are not meant to limit the invention to these user based embodiments. A user may be a person, device, or system, such as a machine.","Embodiments of the invention may also include processes and apparatuses where the user-defined activities, actions, or options are accomplished automatically without user intervention or via pre-programmed techniques, such as, by the system. For example, the activities, actions, and options of the disclosed embodiments may be implemented via machine to machine communication.","In most embodiments, process flow charts depict the action blocks in series. However, this is for illustrative convenience and is not meant to limit the invention to only the depicted series combination. Other embodiments of the invention may include process steps in parallel or in a different series order, where applicable and effective. Also, the blocks of the process flow charts are used to illustrate the key steps of a process. In practice, a process flow may include many other steps not represented in the flow diagram.","While the invention is described herein in conjunction with one or more exemplary embodiments, it is evident that many alternatives, modifications, and variations can be apparent to those skilled in the art. Accordingly, exemplary embodiments in the preceding description are intended to be illustrative, rather than limiting, of the spirit and scope of the invention. More specifically, it is intended that the invention embrace all alternatives, modifications, and variations of the exemplary embodiments described herein that fall within the spirit and scope of the appended claims or the equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DRAWINGS","p":["These and other features, aspects, and advantages of the present invention will become better understood with regard to the accompanying drawings, following description, and appended claims.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 3","FIG. 2"],"b":"2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
