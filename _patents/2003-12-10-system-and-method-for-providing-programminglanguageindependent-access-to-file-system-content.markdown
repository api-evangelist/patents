---
title: System and method for providing programming-language-independent access to file system content
abstract: A system and method for providing programming-language-independent access to file system content. In one embodiment, the system may include a storage device configured to store a plurality of files and a file system configured to manage access to the storage device and to store file system content. The file system may include a programming-language-independent interface whereby an application accesses the file system content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07415480&OS=07415480&RS=07415480
owner: Symantec Operating Corporation
number: 07415480
owner_city: Cupertino
owner_country: US
publication_date: 20031210
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to file-based storage systems.","2. Description of the Related Art","Computer systems often process large quantities of information, including application data and executable code configured to process such data. In numerous embodiments, computer systems provide various types of mass storage devices configured to store data, such as magnetic and optical disk drives, tape drives, etc. To provide a regular and systematic interface through which to access their stored data, such storage devices are frequently organized into hierarchies of files by software such as an operating system. Often a file defines a minimum level of data granularity that a user can manipulate within a storage device, although various applications and operating system processes may operate on data within a file at a lower level of granularity than the entire file.","In some file-based computer systems, various types of information about files, also referred to as metadata, may be stored in addition to the files themselves. However, in typical conventional computer systems, access to files and their metadata by application software is provided by an interface specific to a particular programming language, operating system, or hardware architecture. In such systems, for applications using a new programming language, operating system, or hardware architecture to be given access to files and metadata, a separate interface may need to be provided.","Creating and supporting new interfaces may require additional programmer effort, such as coding and verification effort. Further, as types of interfaces multiply, the effort required to maintain them over time increases. Additionally, if a unique interface is provided for each programming language, operating system, or architecture scenario, such interfaces may diverge considerably in their support for various features of file and metadata access. For example, not all interfaces may provide all programming languages the same level of access to file data and metadata. Such divergence among interfaces may complicate the application programming task and hinder acceptance of a given file format among developers.","Various embodiments of a system and method for providing programming-language-independent access to file system content are disclosed. In one embodiment, the system may include a storage device configured to store a plurality of files and a file system configured to manage access to the storage device and to store file system content. The file system may include a programming-language-independent interface whereby an application accesses the file system content.","In one specific implementation of the system, the programming-language-independent interface may be configured to detect a virtual file identity corresponding to a given file, select at least a portion of the file system content dependent on the virtual file identity, and return the selected file system content. In one embodiment of this implementation, the virtual file identity may be formed by embedding a command token within a file identity corresponding to the given file, while in another embodiment of this implementation, the virtual file identity may be formed by prepending a virtual directory to a file identity corresponding to the given file.","A method is also contemplated which, in one embodiment, may include storing file system content and accessing the file system content via a programming-language-independent interface.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Storage System and File System Overview","Turning now to , a block diagram of one embodiment of a storage system is shown. In the illustrated embodiment, storage system  includes a plurality of host devices and coupled to a plurality of storage devices and via a system interconnect . Further, host device includes a system memory  in the illustrated embodiment. For simplicity of reference, elements referred to herein by a reference number followed by a letter may be referred to collectively by the reference number alone. For example, host devices and and storage devices and may be referred to collectively as host devices  and storage devices .","In various embodiments of storage system , host devices  may be configured to access data stored on one or more of storage devices . In one embodiment, storage system  may be implemented within a single computer system, for example as an integrated storage server. In such an embodiment, for example, host devices  may be individual processors, system memory  may be a cache memory such as a static RAM (SRAM), storage devices  may be mass storage devices such as hard disk drives or other writable or rewritable media, and system interconnect  may include a peripheral bus interconnect such as a Peripheral Component Interface (PCI) bus. In some such embodiments, system interconnect  may include several types of interconnect between host devices  and storage devices . For example, system interconnect  may include one or more processor buses (not shown) configured for coupling to host devices , one or more bus bridges (not shown) configured to couple the processor buses to one or more peripheral buses, and one or more storage device interfaces (not shown) configured to couple the peripheral buses to storage devices . Storage device interface types may in various embodiments include the Small Computer System Interface (SCSI), AT Attachment Packet Interface (ATAPI), Firewire, and\/or Universal Serial Bus (USB), for example, although numerous alternative embodiments including other interface types are possible and contemplated.","In an embodiment of storage system  implemented within a single computer system, storage system  may be configured to provide most of the data storage requirements for one or more other computer systems (not shown), and may be configured to communicate with such other computer systems. In an alternative embodiment, storage system  may be configured as a distributed storage system, such as a storage area network (SAN), for example. In such an embodiment, for example, host devices  may be individual computer systems such as server systems, system memory  may be comprised of one or more types of dynamic RAM (DRAM), storage devices  may be standalone storage nodes each including one or more hard disk drives or other types of storage, and system interconnect  may be a communication network such as Ethernet or Fibre Channel. A distributed storage configuration of storage system  may facilitate scaling of storage system capacity as well as data bandwidth between host and storage devices.","In still another embodiment, storage system  may be configured as a hybrid storage system, where some storage devices  are integrated within the same computer system as some host devices , while other storage devices  are configured as standalone devices coupled across a network to other host devices . In such a hybrid storage system, system interconnect  may encompass a variety of interconnect mechanisms, such as the peripheral bus and network interconnect described above.","It is noted that although two host devices  and two storage devices  are illustrated in , it is contemplated that storage system  may have an arbitrary number of each of these types of devices in alternative embodiments. Also, in some embodiments of storage system , more than one instance of system memory  may be employed, for example in other host devices  or storage devices . Further, in some embodiments, a given system memory  may reside externally to host devices  and storage devices  and may be coupled directly to a given host device  or storage device  or indirectly through system interconnect .","In many embodiments of storage system , one or more host devices  may be configured to execute program instructions and to reference data, thereby performing a computational function. In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store such program instructions and data. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM included in storage system  as storage devices . A computer-accessible medium may also include volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of storage system  as system memory . Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link, which may be included in some embodiments of storage system  as system interconnect .","In some embodiments, program instructions and data stored within a computer-accessible medium as described above may implement an operating system that may in turn provide an environment for execution of various application programs. For example, a given host device  may be configured to execute a version of the Microsoft Windows operating system, the Unix operating system, the Apple Macintosh operating system, or another suitable operating system. Additionally, a given host device may be configured to execute application programs such as word processors, web browsers and\/or servers, email clients and\/or servers, and multimedia applications, among many other possible applications.","During execution on a given host device , either the operating system or a given application may generate requests for data to be loaded from or stored to a given storage device . For example, code corresponding to portions of the operating system or an application itself may be stored on a given storage device , so in response to invocation of the desired operation system routine or application program, the corresponding code may be retrieved for execution. Similarly, operating system or application execution may produce data to be stored.","Many operating system embodiments provide data and control structures for organizing the storage space provided by storage devices  into files. In various embodiments, the data structures may include one or more tables configured to store information such as, for example, the identity of each file, its location within storage devices  (e.g., a mapping to a particular physical location within a particular storage device), as well as other information about each file as described in greater detail below. Also, in various embodiments, the control structures may include executable routines for manipulating files, such as, for example, function calls for changing file identity and for modifying file content as described in greater detail below. Collectively, these data and control structures may be referred to herein as a file system, and the particular data formats and protocols implemented by a given file system may be referred to herein as the format of the file system.","In some embodiments, a file system may be integrated into the operating system such that any access to data stored on storage devices  is governed by the control and data structures of the file system. Different operating systems may implement different native file systems using different formats, but in some embodiments, a given operating system may include a file system that supports multiple different types of file system formats, including file system formats native to other operating systems. In such embodiments, the various file system formats supported by the file system may be referred to herein as local file systems. Additionally, in some embodiments, a file system may be implemented using multiple layers of functionality arranged in a hierarchy, as illustrated in .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["200","210","220","210","212","212","210","200","200","200","212","230","214","214","212","205","220","230","30","200","212","20","25"]},"As described above with respect to storage system  of , a given host device  may reside in a different computer system from a given storage device , and may access that storage device via a network. Likewise, with respect to operating system , in one embodiment a given process such as process A may execute remotely and may access storage devices  over a network. In the illustrated embodiment, file system  includes network protocols  to support access to the file system by remote processes. In some embodiments, network protocols  may include support for the Network File System (NFS) protocol or the Common Internet File System (CIFS) protocol, for example, although it is contemplated that any suitable network protocol may be employed, and that multiple such protocols may be supported in some embodiments.","File system  may be configured to support a plurality of local file systems. In the illustrated embodiment, file system  includes a VERITAS (VxFS) format local file system A, a fast file system (FFS) format local file system B, and a proprietary (X) format local file system X. However, it is contemplated that in other embodiments, any number or combination of local file system formats may be supported by file system . To provide a common interface to the various local file systems , file system  includes a virtual file system . In one embodiment, virtual file system  may be configured to translate file system operations originating from processes  to a format applicable to the particular local file system  targeted by each operation. Additionally, in the illustrated embodiment operating system  includes device drivers  through which local file systems  may access storage devices . Device drivers  may implement data transfer protocols specific to the types of interfaces employed by storage devices . For example, in one embodiment device drivers  may provide support for transferring data across SCSI and ATAPI interfaces, though in other embodiments device drivers  may support other types and combinations of interfaces.","In the illustrated embodiment, file system  also includes filter driver . In some embodiments, filter driver  may be configured to monitor each operation entering file system  and, subsequent to detecting particular types of operations, to cause additional operations to be performed or to alter the behavior of the detected operation. For example, in one embodiment filter driver  may be configured to combine multiple write operations into a single write operation to improve file system performance. In another embodiment, filter driver  may be configured to compute a signature of a file subsequent to detecting a write to that file. In still another embodiment, filter driver  may be configured to store information, such as records, associated with particular files subsequent to detecting certain kinds of operations on those files, as described in greater detail below. It is contemplated that in some embodiments, filter driver  may be configured to implement one or more combinations of the aforementioned operations, including other filter operations not specifically mentioned.","It is noted that filter driver  is part of file system  and not an application or process within user space . Consequently, filter driver  may be configured to operate independent of applications and processes within the user space . Alternatively, or in addition to the above, filter driver  may be configured to perform operations in response to requests received from applications or processes within the user space .","It is further noted that in some embodiments, kernel space  may include processes (not shown) that generate accesses to storage devices , similar to user space processes . In such embodiments, processes executing in kernel space  maybe configured to access file system  through a kernel-mode API (not shown), in a manner similar to user space processes . Thus, in some embodiments, all accesses to storage devices  may be processed by file system , regardless of the type or space of the process originating the access operation.","Numerous alternative embodiments of operating system  and file system  are possible and contemplated. For example, file system  may support different numbers and formats of local file systems , or only a single local file system . In some embodiments, network protocol  may be omitted or integrated into a portion of operating system  external to file system . Likewise, in some embodiments virtual file system  may be omitted or disabled, for example if only a single local file system  is in use. Additionally, in some embodiments filter driver  may be implemented within a different layer of file system . For example, in one embodiment, filter driver  may be integrated into virtual file system , while in another embodiment, an instance of filter driver  may be implemented in each of local file systems .","Files and Metadata","As described above, file system  may be configured to manage access to a plurality of files stored on storage devices . In many embodiments, each stored file may have an associated identity used by the file system to distinguish each file from other files. In one embodiment of file system , the identity of a file may be a file name, which may for example include a string of characters such as \u201cfilename.txt\u201d. However, in embodiments of file system  that implement a file hierarchy, such as a hierarchy of folders or directories, all or part of the file hierarchy may be included in the file identity. For example, a given file named \u201cfile1.txt\u201d may reside in a directory \u201csmith\u201d that in turn resides in a directory \u201cusers\u201d. The directory \u201cusers\u201d may reside in a directory \u201ctest1\u201d that is a top-level or root-level directory within file system . In some embodiments, file system  may define a single \u201croot directory\u201d to include all root-level directories, where no higher-level directory includes the root directory. In other embodiments, multiple top-level directories may coexist such that no higher-level directory includes any top-level directory. The names of the specific folders or directories in which a given file is located may be referred to herein as the given file's path or path name.","In some embodiments of file system  that implement a file hierarchy, a given file's identity may be specified by listing each directory in the path of the file as well as the file name. Referring to the example given above, the identity of the given instance of the file named \u201cfile1.txt\u201d may be specified as \u201c\/test1\/users\/smith\/file1.txt\u201d. It is noted that in some embodiments of file system , a file name alone may be insufficient to uniquely identify a given file, whereas a fully specified file identity including path information may be sufficient to uniquely identify a given file. There may, for example, exist a file identified as \u201c\/test2\/users\/smith\/file1.txt\u201d that, despite sharing the same file name as the previously mentioned file, is distinct by virtue of its path. It is noted that other methods of representing a given file identity using path and file name information are possible and contemplated. For example, different characters may be used to delimit directory\/folder names and file names, or the directory\/folder names and file names may be specified in a different order.","The files managed by file system  may store application data or program information, which may collectively be referred to as file data, in any of a number of encoding formats. For example, a given file may store plain text in an ASCII-encoded format or data in a proprietary application format, such as a particular word processor or spreadsheet encoding format. Additionally, a given file may store video or audio data or executable program instructions in a binary format. It is contemplated that numerous other types of data and encoding formats, as well as combinations of data and encoding formats, may be used in files as file data. In addition to managing access to storage devices, the various files stored on storage devices, and the file data in those files as described above, in some embodiments file system  may be configured to store information corresponding to one or more given files, which information may be referred to herein as metadata. Generally speaking, metadata may encompass any type of information associated with a file. In various embodiments, metadata may include information such as (but not limited to) the file identity, size, ownership, and file access permissions. Metadata may also include free-form or user-defined data such as records corresponding to file system operations, as described in greater detail below. Metadata corresponding to a file as well as the data content of files may collectively be referred to herein as file system content.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 3","FIG. 2"],"b":["205","205","221","310","320","310","221","305","310","320","310","320","310","320","310","320","310","320"],"i":["a","n","a","n ","a","n","a","n ","a","n ","a","n ","a","n "]},"Files  may be representative of files managed by file system , and may in various embodiments be configured to store various types of data and program instructions as described above. In the illustrated embodiment, each of files  has a corresponding named stream . Each of named streams  may be configured to store metadata pertaining to its corresponding file. It is noted that files  and named streams  may be physically stored on one or more storage devices, such as storage devices  of . However, for purposes of illustration, files  and named streams  are shown as conceptually residing within file system .","In some embodiments, filter driver  may be configured to access file data stored in a given file . For example, filter driver  may be configured to detect read and\/or write operations received by file system , and may responsively cause file data to be read from or written to a given file  corresponding to the received operation. In some embodiments, filter driver  may be configured to generate metadata corresponding to a given file  and store the generated metadata in the corresponding named stream . For example, upon detecting a file write operation directed to given file , filter driver  may be configured to update metadata corresponding to the last modified time of given file  and to store the updated metadata within named stream . Also, as described in greater detail below, in some embodiments filter driver  may be configured to retrieve metadata corresponding to a specified file on behalf of a particular application.","Metadata also may be generated in response to various types of file system activity initiated by operating system  or processes  of . In some embodiments, the generated metadata may include records of arbitrary complexity. For example, in one embodiment filter driver  may be configured to detect various types of file manipulation operations such as file create, delete, rename, and\/or copy operations as well as file read and write operations. After detecting a particular file operation, filter driver  may be configured to generate a record of the operation and store the record in the appropriate named stream  as metadata of the file  targeted by the operation.","The stored metadata record may in various embodiments include various kinds of information about the file  and the operation detected, such as the identity of the process generating the operation, file identity, file type, file size, file owner, and\/or file permissions, for example. In one embodiment, the record may include a file signature indicative of the content of file . A file signature may be a hash-type function of all or a portion of the file contents and may have the property that minor differences in file content yield quantifiably distinct file signatures. For example, the file signature may employ the Message Digest 5 (MD5) algorithm, which may yield different signatures for files differing in content by as little as a single bit, although it is contemplated that any suitable signature-generating algorithm may be employed. The record may also include additional information not specifically listed.","In one embodiment, the metadata record stored by filter driver  subsequent to detecting a particular file operation may be generated and stored in Extensible Markup Language (XML) format, although it is contemplated that in other embodiments, any suitable format may be used. XML-format records may allow arbitrary definition of record fields, according to the desired metadata to be recorded. One example of an XML-format record is as follows:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<record sequence=\u201c1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"<type>application\/pdf<\/type>"]},{"entry":[{},"<user id=1598>username<\/user>"]},{"entry":[{},"<group id=119>groupname<\/group>"]},{"entry":[{},"<perm>rw-r--r--<\/perm>"]},{"entry":[{},"<md5>d41d8cd98f00b204e9800998ecf8427e<\/md5>"]},{"entry":[{},"<size>0<\/size>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["320","310","310","310","205","310","221","221","310","221","310","221","310"],"i":["a","a","a","a ","a "]},"It is noted that in some embodiments, metadata may be stored in a structure other than a named stream. For example, in one embodiment metadata corresponding to one or more files may be stored in another file in a database format or another format. Also, it is contemplated that in some embodiments, other software modules or components of file system  may be configured to generate, store, and\/or retrieve metadata. For example, the metadata function of filter driver  may be incorporated into or duplicated by another software module.","Accessing File System Content","As described above, in some embodiments file system  may be configured to store various types of file system content. File system  may store numerous types of file data within one or more files, and may store metadata of arbitrary complexity corresponding to a given file. File system  may also be configured to consume metadata. For example, file system  may implement particular storage policies whereby files having certain usage characteristics as indicated in their metadata are assigned to particular types of storage. In one embodiment, for example, files that are more recently used or are accessed by certain types of processes may be assigned to faster types of storage, whereas other files may be assigned to slower storage.","In some embodiments, application or operating system processes external to file system  (such as processes  of ) may also be configured to access file system content. For example, a programmer writing an application software module may wish to create and manipulate specific files and their associated file data in order to store or retrieve application data. Additionally, such a programmer may wish to perform actions contingent on the metadata characteristics of certain files, such as configuring a backup program to select only files that have been modified since the time of the last backup. In some embodiments, API  of  may provide an interface of function calls whereby an application process  may interact with file system  to interact with file system content.","However, in many embodiments, API  consists of language-specific interfaces, such as library or stub files that are written to interface with applications coded in particular languages, such as C or Java, for example. Supporting applications written in languages other than those supported by the existing API  may require the coding of an additional API targeted to the desired language. Further, in some embodiments, APIs may reflect specific underlying characteristics of operating systems or hardware architectures, and in some instances where file system  supports interfaces to different operating systems or architectures, multiple APIs may be required even for the same target application language. For example, some hardware architectures may use different byte ordering conventions (e.g., \u201cendianness\u201d) for data storage, requiring API libraries and\/or stub files conforming to each desired byte ordering convention.","Additionally, as previously noted, in some embodiments the metadata stored by file system  may be arbitrarily extensible to cover many different types of information. In such embodiments, providing specific support in API  for each possible type of arbitrary record that may be stored as metadata (such as by providing unique or explicitly parameterized function calls, for example) may significantly complicate the coding and maintenance of API .","In the embodiment illustrated in , filter driver  includes programming language independent interface , which may also be referred to herein as interface . Interface  may be configured to provide a protocol whereby a given software application may access file system content, such as file data or metadata corresponding to a given file, independently of the programming language or format of the application or the associated API. Thus, interface  may allow any software application capable of accessing a file to access any file data included in or metadata associated with that file, regardless of programming language issues or the specific metadata requested. It is contemplated that that in some embodiments, interface  may be implemented externally to filter driver  or incorporated into a different module or process of file system .","In one embodiment, interface  may be configured to examine the various file operations processed by filter driver  to detect whether a given operation specifies a virtual file identity, and to select and return corresponding metadata of a given file identity dependent on the virtual file identity. Generally speaking, a virtual file identity may be constructed for any given file identity defined within file system  by adding information to the given file identity according to a particular format or protocol. Thus, a virtual file identity may not literally specify a particular file within file system , but may instead represent a semantic \u201coverloading\u201d of a file identity that does specify such a particular file.","One embodiment of a format for forming a virtual file identity includes embedding a command token within a given file identity. The command token may include a string of characters that specify a type of file system content to be accessed with respect to the given file identity. In one embodiment, a command token may take the form of the string \u201c$cas:cmd:\u201d inserted into the file identity just prior to the file name, where the cmd field indicates one or more of several possible types of file system content to be accessed. For example, to access the file data stored in a file associated with the file identity \u201c\/test1\/users\/smith\/file1.txt\u201d, a corresponding virtual file identity may be \u201c\/test1\/users\/smith\/$cas:rddata:file1.txt\u201d, where \u201crddata\u201d is defined as a cmd field value that selects all file data stored in the file. In some embodiments, command tokens such as \u201crddata\u201d may include other arguments, for example, parameters specifying a location at which to begin accessing file data as well as a quantity of data to be accessed. For example, a \u201crddata(345, 100)\u201d command token may be configured to cause 100 bytes of file data to be read from the specified file, beginning at byte  of the file.","As another example, to access the entire contents of the metadata stored in a named stream associated with the file identity \u201c\/test1\/users\/smith\/file1.txt\u201d, a corresponding virtual file identity may be \u201c\/test1\/users\/smith\/$cas:meta:file1.txt\u201d, where \u201cmeta\u201d is defined as a cmd field value that selects all metadata associated with the file. Numerous other types of cmd field values are possible and contemplated, dependent upon the file system content defined by file system . For example, \u201cwrdata\u201d may cause file data to be written to the file, \u201cmd5x\u201d may select the latest MD5 signature corresponding to the file, \u201cpid\u201d may return the process ID of the last process to generate a record corresponding to the file, \u201ccsiz\u201d may return the last stored compressed size of the file, and so forth. It is also contemplated that the command token may be any suitable string and may be inserted at any desired point in the file identity in forming the virtual file identity.","It is possible in some embodiments that a given virtual file identity formed by embedding a command token within a given file identity may collide with another existing file identity within file system . Referring to the previous example, there may actually exist within file system  a file identity identical to the virtual file identity \u201c\/test1\/users\/smith\/$cas:meta:file1.txt\u201d. This ambiguity may be resolved by convention, where the various applications interacting with file system  avoid using the various possible command tokens within the file identity when a virtual file identity is not intended. Also, file system  may be configured to treat command tokens as reserved, such that only virtual file identities may include them.","In an alternative format, a virtual file identity may be formed by prepending a virtual directory to the path of the given file specified in the given file's file identity. In one embodiment, the virtual directory may specify a top-level directory that is not visible to conventional path-listing functions of file system ; that is, if a user or application were to attempt to perform a directory listing of a virtual directory, the virtual directory would not appear to exist, and a corresponding error or warning might be generated. Referring again to the previous example, one example of forming a virtual file identity by prepending a virtual directory is \u201c\/cas\/test1\/users\/smith\/file1.txt\u201d, where the virtual directory is \u201c\/cas\u201d. For such a virtual file identity, in one embodiment all metadata associated with the file identity, for example all metadata stored within corresponding named stream , may be returned. In an alternative embodiment, a number of virtual directories of the format \u201c\/cas\/cmd\u201d may be employed, where the cmd field indicates one or more of several possible types of metadata to be accessed as described above. If in such an embodiment only the MD5 signature corresponding to the file identity were desired, for example, the corresponding virtual file identity may be formed as \u201c\/cas\/md5x\/test1\/users\/smith\/file1.txt\u201d. Numerous other types of virtual directory specifications and cmd field values are possible and contemplated, as noted above.","It is noted that in embodiments where virtual directories are used to form virtual file identities, if the top-level directory or \u201cmount point\u201d specified in the virtual directory is unique to the virtual space (i.e., the mount point is not used to refer to any physical directory structure within file system ), then any virtual file identity formed using that virtual directory may be guaranteed to be unique. Collisions between virtual file identities and existing file identities may thereby be avoided.","In addition to forming virtual file identities using command tokens and virtual directories, other formats for forming virtual file identities may be possible. In some embodiments, interface  may be configured to recognize only one format of virtual file identity, while in other embodiments interface  may recognize any of a number of such formats. Regardless of the virtual file identity format used, in one embodiment interface  may be configured to examine or monitor the various file operations received by filter driver  to determine whether such operations specify virtual file identities. If interface  detects a virtual file identity corresponding to a given file identity, it may be configured to select file system content indicated by the virtual file identity, and subsequently to return the selected content to the application or process issuing the file operation. For example, file system  may receive from a process  a file operation specifying a virtual file identity corresponding to a given file  that indicates that all or some portion of metadata should be returned. Upon detecting such a virtual file identity, interface  may be configured to directly or indirectly access corresponding named stream  and to select all or part of the metadata stored therein, dependent on the virtual file identity. (For example, the virtual file identity may specify only a particular subset of metadata, as described above.) The selected metadata may then be returned to process , which may correspond to a user application, for example.","Generally speaking, file identity formats are determined by a file system such as file system . Consequently, a given file identity is consistent regardless of the type of process or application accessing it or the programming language of that process or application. Since a virtual file identity is used to specify access to metadata in a manner similar to ordinary access to files by file identity as described above, interface  may operate to provide access to such metadata independently of the programming language of the requesting application.","In one embodiment, if interface  detects a virtual file identity specified by a given file operation, the operation may be processed according to the indication of the virtual file identity regardless of the type of file operation specified. That is, the specification of a virtual file identity in a file operation by an application or process may override other behavior specified by the file operation. For example, in one embodiment applications may be only allowed read access to metadata via a virtual file identity. In such an embodiment, if a given application issued a file write operation specifying a virtual file identity indicating that metadata were to be accessed, the write behavior may be disregarded by interface , and metadata may be read and returned as indicated by the virtual file identity. In other embodiments, attempts to access read-only metadata using a file write operation may be disallowed, and an error condition may or may not occur.","Thus, in some embodiments conventional file read and write operations may be \u201coverloaded\u201d via the function of interface  to perform different types of access to file data and metadata, as indicated by a particular virtual file identity. Similarly, it is noted that because in one embodiment interface  allows programming-language-independent access to any file system content, in some embodiments a given application need not implement specific individual system calls for file read and write operations. Rather, in such embodiments, a generic system call may be implemented that allows an application to pass a virtual file identity to file system . Interface  may then process the virtual file identity to determine the type of file system content to be returned.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","221","320","310","310"]},"Subsequently, a given application or process may generate a file operation using a virtual file identity corresponding to the given file (block ). In one embodiment, the virtual file identity may be formed by embedding a command token within the file identity corresponding to the given file, as described above. In another embodiment, the virtual file identity may be formed by prepending a virtual directory to the file identity corresponding to the given file, also as described above.","The virtual file identity may then be detected by a programming-language-independent interface (block ). For example, in one embodiment, after a given process  generates the file operation specifying a given virtual file identity, the operation may be received by file system  via API . Filter driver  may process the file operation, and interface  may detect the virtual file identity.","Subsequent to detection of the virtual file identity, at least a portion of the file system content may be selected dependent on the virtual file identity (block ). For example, in one instance the virtual file identity may specify that all or only a particular subset of metadata corresponding to a given file is desired, such as by specifying a particular command token or virtual directory. In another instance, file data included the given file may be selected.","After the appropriate file system content is selected, it may be returned to the application or process that requested it via the file operation (block ). For example, in one embodiment interface  may place selected file data or metadata in a buffer and return a pointer to the buffer to given process  via file system  and API . Other methods by which return of the selected metadata may be coordinated are possible and contemplated.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
