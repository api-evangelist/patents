---
title: Programming model for application and data access and synchronization within virtual environments
abstract: Applications executing on computer systems may execute in a virtual environment, such as a web application executing in a web browser. An application may access the actual computing environment (such as the filesystem), but this accessing may be complicated; e.g., the computing environment may be deployed across many computers and devices, and may be synchronized for offline access via a local cache. A computing environment component may service the complex computing environment (e.g., by managing the cache and retrieving remotely stored data objects) and expose it as a well-organized set of data objects. A virtual environment interface (e.g., a web browser plug-in) may allow applications hosted in the virtual environment to access the computing environment through the computing environment component. Programmatic interfaces may also be implemented to permit such accessing via familiar programming languages and techniques, such as JavaScript libraries exposed to web applications in the web browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08413139&OS=08413139&RS=08413139
owner: Microsoft Corporation
number: 08413139
owner_city: Redmond
owner_country: US
publication_date: 20090311
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Contemporary computing systems involve the execution of applications within an operating system. The operating system involves a wide variety of data objects, such as files stored in a file system, databases stored in a database management system, application and system configuration information stored in a system registry, and a set of user accounts. Applications are often modeled with an architecture involving an accessing of various types of data objects, some logic applicable to the data objects as a set of operations, and a rendering of the operations and data objects in the form of a user interface.","The application may also be executed in a virtual environment that offers the application a limited set of computing resources (such as storage space, processing, and devices) with which the application may operate. In some cases, the virtual environment may represent a standardized platform against which the application may execute, thereby promoting the consistent execution of the application on a wide variety of machines, and the virtual environment may translate operations against the virtual environment to operations that may be performed by the computer (e.g., the platform may permit the application to store the data object in an emulated data store, but the virtual environment may instead store the data object as a file in the filesystem.) This virtualization may also promote the security of the application, both by restricting the manner in which the application may access the computing environment (e.g., in case the application is not fully trusted and may contain faulty or malicious instructions) and by reducing interference in the application from other processes executing both with and outside the virtual environment.","One common virtual environment is a web browser. Web applications are often developed for execution in a web browser, and may be executed by delivering the application resources comprising the application to the computer for execution within the web browser.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","The logistics of executing applications in a contemporary computing environment may be complicated in many aspects. As a first example, the application may access data objects comprising the user's computing environment that comprise a wide variety of types, and that are accessed through a broad set of data object systems (such as a filesystem, a database system, a registry, and a user account management system), each configured to store a particular set of data objects and to provide access through a particular protocol. Moreover, a data object used by the application may be stored in many locations within the computer, and even on a remote computer that shares the user's computing environment. For example, a data object used by the application may be represented in the computing environment that is accessible to the local computer, but may not be locally stored, and may instead be stored on a remote computer. Accessing the data object may therefore involve identifying the remote computer where the data object is stored, requesting the data object from the remote computer, storing a received instance of the data object, and synchronizing any alterations of the data object with the remote computer.","The computer may be configured to support the execution of the application In view of this and other complexities. For example, a computing environment component may be devised to handle the accessing of data objects in the broad spectrum of the computing environment. As a first example, the virtual environment may permit the application to access the computing environment; e.g., a web browser may permit a web application executing therein to access the data objects of the user's computing environment, but in a restricted manner that reduced unauthorized accesses, such as tampering with system files that are not necessarily part of the computing environment. As a second example, the computer may be configured to promote the interfacing of the application with many types of data object systems, such as those stored on remote computers. For example, the computer may automatically synchronize the computing environment (including data objects comprising or used by the application) with a representation of the computing environment stored by of a remote computer, and may handle the retrieval of a data object in the computing environment that is accessed by the application but that is not yet locally available.","These and other advantages may be achieved by configuring the virtual environment to support the accessing of data objects comprising the computing environment by the application. One such technique involves a computing environment component that handles various accesses to the myriad objects comprising the computing environment (e.g., interfacing with various data object systems, and handling the exchange of data objects with remote computers), and a virtual environment interface that permits applications executing in the virtual environment to interact with the computing environment through the computing environment component. For example, a web browser plug-in may be devised for a web browser that allows web applications to access the computing environment through the computing environment component; e.g., for operations to be executed against the computing environment on behalf of the application (such as reading a file from the filesystem), the plug-in may accept such operations within the web browser and may deliver them to the computing environment component executing outside of the browser.","The computing environment may be configured to provide an array of services to the data objects contained therein. For example, the data objects stored on a computer may be automatically synchronized with corresponding data objects stored on another computer, including a computing environment host that hosts an authoritative version of the computing environment. Even if the application executes in a virtual environment (such as a web browser), the application may be permitted to store its application resources in the computing environment, and may partake of the services offered thereby. For example, a set of web applications that store respective application resources in the computing environment may be automatically synchronized across a set of computers, thereby promoting a consistent computing experience of the applications on all such computers.","In addition, the computing environment component may expose certain aspects of the computing environment and the services provided thereto in a programmatic interface. Applications may either participate in the complexities of the computing environment (e.g., the synchronization of a locally cached data object with a remote host), or may rely on the computing environment to handle such complexities. Moreover, the programmatic interface may be devised in a manner that is familiar to developers and accessible by applications without significant reconfiguring; e.g., a web browser plug-in may provide a JavaScript programmatic interface to the computing environment.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.","In the field of computing, a computer system involves a broad set of physical resources, such as processors, various types of memory and storage, hardware devices, networks accessed through communications adapters. Computer systems also involve a broad set of data objects, such as files stored in a filesystem organized on one or more of the storage devices, operating systems comprising sets of executable binaries that provide various services, applications comprising sets of application resources and configured to perform various tasks, application and operating system configuration information that may be stored in a system registry, user profiles and contacts representing various individuals, etc.","An application may be configured to execute natively on such a computer system, such as by communicating directly with the operating system to access various resources. For example, such applications may be permitted to interact with the filesystem with a full set of privileges accorded to the user on whose behalf the application executes, and comparatively unfettered access to the libraries and services provided by the operating system for such applications.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["10","12","14","16","18","12","20","22","24","26","12","28","22","30","12","32","44","32","34","36","38","12","40","12","42","12"]},"The application  illustrated in  may be structured in many ways, but one feasible structure of the application  is a clustering of tasks into three categories. A data object accessing component  may handle the accessing of the data objects in the computing environment  (e.g., invoking functions in libraries and interfaces of the operating system data object ; reading some application configuration information from the application data object ; and reading and writing various user objects stored on the storage device .) A logic component  may apply some operations using the data objects in the computing environment  (e.g., creating an image having user-defined properties, using various operations provided by the operating system.) The logic component  may perform such tasks by relying on the data object accessing component , such as writing the image as a particular user data object in the file system of the computing environment ; invoking an operating system function through the operating system data object  to format the image according to a desired format, such as JPEG compression; and referring to a user preference stored as application configuration information in the application data object .) Accordingly, the data object accessing component  may achieve data-object-specific tasks, such as writing to a particular file, and may provide an opaque interface to the logic component  that focuses on task-specific but data-object-independent operations, such as reformatting an image according to a desired format. Finally, the operations implemented by the logic component  may be invoked through a user interface provided by a rendering component , and the results of such operations may be visualized therein (e.g., a graphics-editing package that allows a user to manipulate images according to the functions offered by the logic component .) This application design may be implemented explicitly (such as by arranging such functions in a series of interdependent modules representing various layers) and\/or implicitly (by creating functions that rely on lower-level functions, such as a user-interface event handler that invokes an operation that invokes a data-object-specific function.)","As a second application design model, an application may be configured to execute in a virtual environment, comprising a virtual set of computing resources to which the operations of the application are limited. As a first example, the computer system may emulate a processor that supports a particular instruction set, such as Java. The application may issue operations to the emulated processor in Java, and the virtual environment may execute the application by translating the Java operations into instructions that the actual processor of the computer system may execute. As a second example, the virtual environment may provide to the application a virtual filesystem, wherein the application may store and access various files. However, the virtual environment might achieve the storing not by storing the files as particular files in the native filesystem of the computer system, but in a single large file that is internally structured to represent the various files, or in a separately organized filesystem, or even in the volatile memory space of the process executing the virtual environment.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["50","12","56","52","52","20","12","32","44","56","12","12","20","32","50","54","12","12","12","50","58","54","52","32","22","12","54","12","56","56","12","58","32","20","52"]},"Configuring the application to execute in the virtual environment rather than the native environment of the computer system may present several advantages. As a first example, if the application is designed to use a standardized computing environment, such as a virtual environment having particular and predictable properties, then any computer system capable of providing a virtual environment matching those properties may be able to execute the application. As a second example, virtualization isolates the application from the native elements of the computing environment; e.g., by limiting the application to a virtual filesystem, the virtual environment may prevent the application from accessing the files in the native filesystem, while still permitting the application to store files in order to perform various tasks. This isolation may be helpful where the application is not fully trusted, e.g., where the application may contain faulty or malicious instructions that might otherwise misuse or damage the resources of the computing environment, such as deleting files. This isolation may also be helpful for protecting the application from interference by other applications, e.g., where the application uses sensitive data to be protected from access by other applications.","A common example of a virtual environment is a web browser, which is configured to receive content from a webserver, such as HTML, scripts, and embedded media objects, and to present them to the user in the form of a website. In earlier generations of web browsers and websites, the content was predominantly passive, such as a plain page of text with embedded graphics. More recently, websites have become more interactive, an expanding set of web applications have been developed that execute within a website rendered by the web browser, such as an interactive media player, a game, or a document creation applet. However, a user of the web browser may not fully trust the website from which the web application was received, and the web application might be misconfigured (e.g., in such a manner as to crash the web browser or the operating system) or maliciously devised (e.g., in a manner that sends sensitive information stored in the computer system to third parties without the user's consent.) In order to permit users to execute such untrusted applications, web browsers provide a virtual environment wherein a web application may be executed in isolation from other web applications, applications executing outside of the web browser, and the resources of the computer system.","Thus, in many types of virtual environments (such as web browsers), a virtual environment may be provided to service various types of applications in isolation of the computer system. In particular, the application may be isolated from the set of data objects that comprise the user's computing environment, such as the user's files, the applications provided by the operating system, the application and operating system configuration information (such as preferences selected by the user for various applications), and the user accounts representing the users of the computer system. However, in some scenarios, a user may wish to allow the application to interact with such data objects. As a first example, a user of a document authoring application may wish to store documents created with the application not in a virtual filesystem isolated in the virtual environment, but in the native filesystem of the computing environment, so that such documents may later be accessed in other applications. As a second example, a user of an email application may wish to allow the application to access a set of contacts represented in the computing environment, such as a corporate directory. As a third example, a user of a media store application may wish to copy purchased media to other devices, or to archive purchased media to protect against data loss by storing it in the storage system of another computer.","In these and other scenarios, the virtual environment may be desirably configured to permit the application to access the data objects of the computing environment. However, the complexities of the computer system may complicate the accessing of the computing environment by the application. As a first example, because the data objects of the computing environment may comprise many types of data objects accessed through many types of data object systems (e.g., files accessed through a filesystem, database information accessed through a database system, application resources accessed through an assembly store, and application and operating system configuration accessed through a system registry), the application may not be properly configured to contend with the wide variety of data object systems and the access protocols of each system. As a second example, the data objects may be shared among various computers and devices that together comprise the computing environment of the user. For example, the computing environment may contain a reference to a data object (such as a shortcut), but accessing the data object may involve querying a server over a network where the data object is stored, or communicating with a device through a particular access protocol. In particular, if the computer system is occasionally connected to such other computers and devices, the computer system may comprise a local cache of such remotely stored data objects for offline access, and the local cache may confer unexpected properties upon such data objects (e.g., occasional synchronization of various representations of the data object among such computers and devices.) As a third example, access to the data object may be restricted to applications or users having certain permissions, which may be verified using various permission credentials (e.g., a username and authenticating password, or a check of permissions according to the computing environment.) As a fourth example, the application itself may be processed in a variety of manners; for example, the application may execute wholly on a local computer system, or different portions of the application may execute on different computer systems (e.g., an application host may mandatorily or optionally reserve the execution of some of the logic of the application, while the rendering of the user interface and receipt of user input may be delegated to a user's computer system.)","Thus, while it may be desirable to grant a virtualized application some measure of access the computing environment, the complexities of the computing environment may be difficult to negotiate. In particular, a designer of an application may have difficulty anticipating the broad range of data objects with which the application may interact, and may not wish to design the application in view of such complexities. For example, the developer anticipates that an application may often be used to access resources stored on occasionally connected computers and devices, and may recognize the benefit of a local cache of such data objects, but the developer may not wish to contend with the complexities of cache synchronization and maintenance. Moreover, per-application solutions to the complexities of the computing environment may be inefficient and cumbersome (e.g., several applications may application-specific local caches of the same data objects, entailing multiple local representations of the data object that are collectively synchronized among the caches) as compared with a broader solution (e.g., a single local cache that is serviced by a single synchronization process, and with which both virtual and native applications may interact.)","Accordingly, it may be desirable to implement a computing environment component that handles the complexities of the computing environment, such as interfacing with various data object systems, exchanging data objects with other computers and devices, managing and synchronizing caches of data objects, and factoring the logical components of an application across various computers. Such a component may permit applications to access the computing environment, while also transparently addressing the complex tasks that may be involved in providing such access.","The computing environment component may be accessible to virtual applications executing in a virtual environment, such as web applications executing in a web browser. However, it may be undesirable to configure the computing environment component as part of the virtual environment. As a first example, it may be advantageous to separate some functions of the computing environment component from the virtual environment. For example, the computing environment component may synchronize a local (cached) representation of a data object with a remote representation of the data object (such as on another computer) when the application executes in the virtual environment, but it may be desirable to perform the synchronization when the application is not executing in the virtual environment, or even when the virtual environment does not exist (e.g., when a web browser is not executing.) As a second example, it may be advantageous for the computing environment component to perform various services (such as data object accessing and cache maintenance and synchronization) not just on behalf of virtual applications, but also native applications and operating system processes, and to enable all such applications and processes to access these services in a consistent manner, such as through a programmatic interface that interacts consistently with all applications. Therefore, it may be desirable to implement the computing environment component to execute on the computer as a process outside of the virtual environment, so that services may be more broadly and consistently exposed and performed regardless of the status of the virtual environment.","However, if the computing environment component is implemented outside of the virtual environment, virtualized applications may be unable to access the component due to the isolation policies of the virtual environment. Therefore, a virtual environment interface may be devised that executes within the virtual environment and accesses the computing environment component on behalf of applications. For example, a virtualized application may comprise an operation referencing a data object for reading. The operation may be received by the virtual environment interface executing in the virtual environment, which may invoke the computing environment component to perform the operation on the data object. The computing environment component may access the data object, respecting all of the complexities of such accessing (e.g., through the particular data object system; retrieving the data object from another computer or device over a network, or referencing a locally cached representation of the data object, where the cache has been suitably synchronized; or verifying the permission of the application to access the data object), and may provide a representation of the data object to the application if successful. In this manner, a virtualized application may access the computing environment in a comparatively simple manner by submitting an operation to the virtual environment interface, which invokes the computing environment component executing outside of the virtual environment to perform the operation.","Additionally, the computing environment component and\/or the virtual environment interface may provide a programmatic interface that allows applications to interact with the computing environment and the services applied thereto. For example, the virtual environment interface may be implemented as a programming library within the virtual environment that applications may invoke to access various data objects, or to interact with the services offered by the computing environment component (such as cache synchronization and remote accessing of data objects.) In addition, the programmatic interface may be designed in a familiar manner for application designers, such as in a language commonly used in virtual applications (e.g., a task-oriented language such as JavaScript, and\/or an object-oriented language such as Java or C#), which may permit application developers to utilize the interface in an application without having to redesign or rewrite large portions thereof utilizing different programming techniques.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["60","52","32","60","52","20","52","56","12","12","60","14","16","18","56","52","44","32","54","52","32","54","12","54","12"]},"In view of these complexities, the computer  may include two components that together support the execution of the application . The computer  may include a computing environment component  that is configured to access the data objects  comprising the computing environment . This computing environment component  may be capable of accessing many types of data objects  stored according to many techniques, such as a file system data object stored in a file system, a registry key stored in a system registry, a database data object stored in a relational database system, and a representation of a user account stored by the operating system and accessible through particular requests issued to the operating system. The computing environment component  may also be capable of identifying the location of a data object  requested by the application  in various storage devices  (such as a first hard disk drive, a second hard disk drive, a memory cache, and a file set offered by a remote computer system), submitting a request to the storage device  to retrieve the data object , and receiving the data object  from the storage device . Moreover, the computing environment component  may provide one or more services to the data objects . For example, for data objects  hosted on other computers or devices, the computing environment component  might form and manage a local representation of such data objects  in order to promote performance of applications that rely on such data objects . In this manner, the computing environment component  may be capable of accessing a large and diverse set of data objects  spanning multiple computers, devices, and file systems, yet may expose the entire set of such data objects  to applications as a unified set of data objects  that obscures much of the complexity in the details of accessing the data objects . Additionally, the computing environment component  might provide one or more services relating to the computing environment , such as a synchronization service that synchronizes different representations of one or more data objects  and a searching service that indexes various properties of data objects  (such as name, type, size, and semantic tags.) The computing environment component  might expose these services in a consistent manner to the user and any application relying on such data objects , and may provide such services automatically and in the background, thereby avoiding the redundant implementation of such features on a per-application basis.","In order to extend the functionality exposed by the computing environment component  to a virtual application, even to an untrusted application. A virtual environment interface  may be devised that executes within the virtual environment , accepts requests for operations on behalf of various applications , and delivers such requests to the computing environment component  executing outside of the virtual environment . The virtual environment interface  and\/or the computing environment component  may also perform various security checks on such operations (e.g., verifying that the application  has permission to perform the requested operation on the specified data objects  of the computing environment , and authenticating the application, the source of the application, and\/or a user of the application) prior to performing the operation, or after performing the operation but prior to committing the results of the operation.","In this manner,  illustrates an exemplary system  configured to execute an application  within a virtual environment  on a computer, comprising a computing environment component  executing outside of the virtual environment  and configured to apply operations on the computing environment , and a virtual environment interface  executing within the virtual environment  and configured to deliver operations to the computing environment component  on behalf of applications . For example, where the application  comprises at least one operation to be performed on the computing environment , the virtual environment interface  executing within the virtual environment  may be configured to invoke the computing environment component  in order to perform the operation on behalf of the application . This design may facilitate the accessing of the computing environment  by such applications , while also promoting security (such as by performing only permitted operations by authenticated applications) and without compromising isolation of the application  from other applications and unfettered access to the computing environment . The virtual environment interface  might also extend the capabilities of services provided by the computing environment component  to such virtualized applications , such as the capability of synchronizing local representations of data objects  used by the application  with remote representations thereof even when the application  is not running, and even if the virtual environment  does not exist (e.g., when a web browser is not operating.)","Additionally, the virtual environment interface  and\/or the computing environment component  may provide a programmatic interface that permits applications  to interact with various aspects of the computing environment  and the services applied thereto. Moreover, these programmatic interfaces may be implemented in a familiar and well-established manner, which may permit applications to utilize the interfaces conveniently and without significant redesign. For example, a web browser plug-in designed to support web applications executing in for a web browser may expose a JavaScript-based programmatic interface, e.g., as a set of operations that may be invoked in JavaScript to read and write various data objects. Alternatively or additionally, the programmatic interface may support higher-level languages, e.g., object-oriented languages such as Java and C#; may expose more sophisticated details of the computing environment, such as the scheduling of the synchronization service, the freshness and policies of the local cache, and the relationships of the computers comprising the computing environment (e.g., which computer serves as the host of an authoritative representation of a particular data object); and\/or may include more sophisticated programming constructs that permit more powerful programmatic access (e.g., event subscriptions and data feeds that may notify applications of computing environment events, such as the synchronization of a particular data object.) In this manner, the programmatic interface may expose a wide variety of aspects of the computing environment in a sophisticated manner, while also adhering to familiar programming models that may be readily adopted by developers while reducing application redesigning.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 4","FIG. 3"],"b":["70","72","74","74","76","78","12","56","64","56","54","32","66","56","64","12","56"]},"The techniques discussed herein may be devised with variations in many aspects, and some variations may present additional advantages and\/or reduce disadvantages with respect to other variations of these and other techniques. Moreover, some variations may be implemented in combination, and some combinations may feature additional advantages and\/or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments (e.g., the exemplary system  of  and the exemplary computer-readable medium  of ) to confer individual and\/or synergistic advantages upon such embodiments.","A first aspect that may vary among embodiments of these techniques relates to the type of virtual environment  in which the application  is executed. As a first example, the virtual environment  may comprise a virtual machine, such as a Java virtual machine that is generated by a Java runtime on behalf of a Java application. The virtual environment interface  may be embodied therein as a programming library that serves as a proxy for the computing environment component , e.g., by translating Java function invocations of the application  into a format that is operable by the computing environment component . As a second example, the virtual environment  may comprise a web browser, and the virtual environment interface  may be embodied in a web browser plug-in configured to interface with the computing environment component , e.g., by accepting operations from web applications embedded in various websites and accordingly invoking the computing environment component . In this scenario, it may be advantageous to design the web browser plug-in to provide a programmatic interface in a language that is commonly used in web applications, such as JavaScript, so that the web browser plug-in may be utilized by developers in a convenient manner. Those of ordinary skill in the art may devise many types of virtual environments  in which the techniques discussed herein may be utilized.","A second aspect that may vary among embodiments of these techniques relates to the type of computing environment to which these techniques may be utilized. In order to reduce the complex variety and decentralization of the objects comprising a contemporary computing environment, a deployable representation of the computing environment may be devised, where the objects comprising the computing environment are organized in a data object hierarchy, which may be hosted by a computing environment host. If the data objects are represented in a uniform manner and managed in a consistent way by a data object system, a set of services may be devised to apply to all of the data objects of the computing environment. Moreover, the data object hierarchy may be delivered to various devices to represent the same computing environment (including the same user profiles, applications, data files, etc.), and each device may render the computing environment in a consistent manner but customized based on the capabilities of the device (e.g., a hard keyboard interface for receiving data entry from a keyboard device attached to a workstation, and a touchscreen software keyboard interface for receiving data entry from a cellphone device.) With relation to the concept of a deployable computing environment, it may be advantageous to configure at least one server to manage one or more data objects within the representation, and to accept operations sets to be applied to such data objects. A user of the deployable computing environment may therefore interact with the deployable computing environment in a platform- and device-independent manner, while also achieving at least some of the advantages over alternative accessing techniques, such as synchronous or asynchronous invoking, batching of standard operations, and mobile agents. However, those of ordinary skill in the art may devise many such scenarios in which the techniques discussed herein may be applied.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":["80","82","84","82","84","86","90","94","92","88","86","98","86","94","84","82","84","82","32","84"]},"The techniques discussed herein may be implemented in a computer  having a deployable computing environment  in a particularly advantageous manner. As a first example, the","A third aspect that may vary among embodiments of these techniques relates to the types of operations that may be performed by the computing environment component  upon invocation by the virtual environment interface . In a simple implementation, the computing environment component  may be configured to read and write data objects in the computing environment on behalf of various applications . As a first example, if the operation specifies a retrieving of at least one data object  from the computing environment  to be used by the application , the computing environment component  may retrieve the data object(s)  from the computing environment  and deliver the data object(s)  to the virtual environment interface , which may receive the data object(s)  from the computing environment component  deliver the data object(s)  to the application . Conversely, if the operation specifies a writing of at least one data object  to the computing environment  by the application , the virtual environment interface  may deliver the data object(s)  to the computing environment component , which may receive the data object(s)  and write the data object(s)  to the computing environment . As a more capable example, the computing environment component  may be able to exchange data objects  with remote computers that host at least portion of the computing environment . For example, a particular computer (such as a cellphone) may host a particular set of data objects  (such as telephone contacts) that are referenced within the computing environment, but that may only be accessed by contacting the particular computer and requesting the data objects . Accordingly, where a data object  comprises a remote data object stored in a portion of the computing environment  hosted by a remote computer, the computing environment host  may be configured to retrieve the remote data object from the remote computer, e.g., in order to perform a retrieving operation on behalf of an application , and may deliver the data object  to the remote computer for storing in the portion of the computing environment , e.g., in order to perform a writing operation on behalf of the application . Advanced operations might also be supplied by the computing environment component  (e.g., comparing or verifying data objects , locking data objects  for exclusive access, and compressing or encrypting data objects .)","An additional feature that may be implemented with regard to the reading and writing of data objects  involves a comparatively low-level programmatic interface that allows applications  to participate in operations on data objects . For example, the virtual environment component  may expose to applications  executing in the virtual environment  a programmatic interface, e.g., having at least one operation configured to write a data object  to the computing environment , and at least one operation configured to retrieve a data object  from the computing environment . Other operations may also be included, which may reflect per-data-object operations of which the computing environment component  is capable, such as locking a data object  for exclusive access or releasing such a lock. The programmatic interface may be exposed by the computing environment component  and\/or the virtual environment component  (e.g., the virtual environment component  may be structured as a proxy with a set of proxy functions that, upon invocation by an application , invoke respective functions of the computing environment component .) The programmatic interface may also be designed in many ways, e.g., using one or several of the many available programming languages and constructs. As one such example, a programmatic interface exposed in a virtual environment  comprising a web browser that serves web applications may be devised according to one or more common web programming languages, such as JavaScript. However, those of ordinary skill in the art may devise many techniques for configuring the computing environment component  and the virtual environment interface  to operate on data objects  on behalf of applications  while implementing the techniques discussed herein.","A fourth aspect that may vary among embodiments of these techniques relates to services that may be applied to the computing environment  that may beneficially support applications  executed both natively and in the virtual environment . As a first example, the computing environment component  may be configured to apply at least one service to the computing environment , such as a synchronization service, a caching service, and a remote data object accessing service. In one such scenario, the computing environment  may comprise a deployable computing environment , such as described with reference to  and illustrated therein, wherein various representations of the computing environment  may exist on a set of computers and devices. In this scenario, at least one service offered by the computing environment component  may comprise a synchronization service, which may be configured, e.g., to synchronize at least a portion of the computing environment  on the computer  with a second representation of at least a portion of the computing environment , such as may be stored on a second computer.","Many such services may be advantageously provided by the computing environment component  in this scenario. As a first example, the synchronization of the deployable computing environment  among the set of computers and devices may promote the automated installation of an application  on several such devices, which may therefore exist in the computing environment  regardless of which computer or device is used to access the computing environment . In a first such scenario, the computing environment  on a computer  may comprise at least one application resource of an application  that is not installed on a second computer having a representation of the computing environment . A synchronization service provided by a computing environment component  may promote the installing of the application  on the second computer by sending the at least one application resource of the application  to the second computer to be installed on the second computer. Conversely, if the representation stored on the second computer comprises at least one application resource of an application  that is not installed in the computing environment  of the computer , the computing environment component  may be configured, upon receiving the application resource from the representation during a synchronizing, to install the application in the computing environment  on the computer  using the at least one application resource. As a second example, an operation to be performed by an application  may be associated with a permission based on at least one permission criterion. For example, the operation may specify a protected operation or a protected set of data objects , such as an accessing of a sensitive area of the computing environment . This operation may therefore be executed by the processor  only upon verifying the permissions, according to at least one permission criterion presented by the application  (e.g., an authenticating username and password, or a security certificate.) The computing environment component  may therefore be configured to perform the at least one operation by verifying the at least one permission criterion (e.g., by contacting an authentication service to authenticate the identity of the application  or the user ), and upon verifying the permission credentials, may perform the operation.","Moreover, these services may be exposed to applications  through a programmatic interface, comprising at least one operation relating to at least one service. For example, the programmatic interface may be exposed by the computing environment component  to allow applications  to interact with the services, e.g., to invoke a synchronization of various representations of the computing environment  on various computers and devices, and\/or to provide information about such services, e.g., the date and time on which such a synchronization was last performed. The programmatic interface may also be exposed in many programming languages, such as Java or C#, and may support high-level programming languages featuring more powerful programmatic constructs that enable the application  to interface with the computing environment component  in a more sophisticated manner (e.g., an event subscription service or an information feed service that actively notifies the application  upon the occurrence of events of interest.) Those of ordinary skill in the art may devise many services that may be applied to a computing environment  by a computing environment component , and many techniques for exposing such services to applications , while implementing the techniques discussed herein.","A fifth aspect that may vary among embodiments of these techniques relates to the availability of an instance of the computing environment component  and the virtual environment interface  on the computer , and techniques for handling an unavailability of either or both components. When an application  is loaded in the virtual environment , the computer  may determine that the application is to be supported by such components of the system  (e.g., in order to interface with the computing environment representation  or to execute in one of several execution contexts), but that one or more components of the system  are unavailable. The computer  may respond by initiating the installation of the system  prior to executing the application . In one such scenario, the computer  may load an application  into the virtual environment . The computer  may determine that the application  relies on the virtual environment interface component  in order to access the computing environment representation  through a representation accessor component , but may also determine that one or both of the representation accessor component  and the virtual environment interface component  are not installed on the computer . As a first example, the virtual environment  of the computer  may endeavor to detect an instance of the virtual environment interface component  (e.g., while initiating the execution of the application  in a virtual execution context), and upon failing to detect such an instance, may install an instance of the virtual environment interface component  within the virtual environment  of the computer . As a second example, the virtual environment interface component  may be configured to detect an instance of the representation accessor component  available on the computer , and upon failing to detect such an instance, may install an instance of the representation accessor component . Such components might be available in installable form via the application host . Alternatively, the components might be available from an identified source; e.g., the application  may identify a source for the installable components, or the computer  may contact an application management service (such as an operating system updating service) to request installable versions of the components. This installation may also be performed automatically, or may be conditioned upon user authorization of the downloading and installation of the missing components.","Alternatively, if the representation accessor component  is unavailable (e.g., if the installation of the representation accessor component  fails or if the user withholds permission to install the representation accessor component ), the virtual environment  may be configured to execute the application within a computing environment host  having access to the computing environment representation . For example, the virtual environment may send the application  to the computing environment host , and upon receiving output of the application  from the computing environment host , may render the output within the virtual environment  (e.g., within a web browser.) In this manner, the virtual environment  may reconfigure the application  as a thin-client application by delivering it for execution on a computer system that has access to the computing environment representation , and by only rendering the output of the application. Those of ordinary skill in the art may devise many other ways of achieving such installation while implementing the techniques discussed herein.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 6","FIG. 1"],"b":["100","58","52","12","58","52","12","12","14","54","12","52","16","14","18","16","12","12","58","54","52","52","58","54","102","12","12","14","12"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 6","b":["52","12","58"]},"While virtual environments may be helpful for isolating applications and providing new capabilities (such as standardized interfaces and resources), the isolation within a virtual environment such as a web browser may complicate the architecture of the application. As illustrated in , the application host  may host a second application , which may again be wholly delivered to the computer  for local execution. The second application  may again comprise a data object accessing component , a logic component , and a rendering component ; however, the data object accessing component  may be limited by the isolation of the virtual environment  to a smaller set of data objects, such as a first application object  stored within the virtual environment  (e.g., cookies stored in a cookie cache of a web browser.) In contrast with the first application , the data object accessing component  of the second application  may have to be configured to access data objects within the virtual environment . Moreover, the second application  may also be configured and permitted to utilize resources stored on the application host , such as objects stored on a webserver. The second application  may therefore have to be configured to access items over a network that may or may not be available, and that may vary in relevant aspects, such as bandwidth and latency. Such configuration may therefore complicate the design and execution of the second application  in comparison with applications that are only locally executed, such as the first application .","The architecture illustrated in  may be further complicated if the execution of an application is distributed over multiple computers, such as the computer  and the application host  of . The application host  may host a third application , which may again comprise a data object accessing component , a logic component , and a rendering component . However, the application may be distributed, such that the data object accessing component  may execute only on the application host  while the rendering component  and the logic component  may execute within the virtual environment  (such as a web browser) of the computer . In such applications, the application host  may reserve the data storage and accessing capabilities, such as the accessing of a third application data object , but may deliver data to the logic component  of the third application  running in the virtual environment  of the computer . One scenario where this factoring may arise is a server\/client data-driven application, such as a database application, where the application host  handles requests provided by a user through the web browser, and the logic component  executing within the web browser performs various logic on the data supplied by the application host , and the rendering component  renders output to the user via the web browser. In such scenarios, the third application  may have to be configured to utilize the data object accessing functions provided by the application host , which may involve (e.g.) functions for locating the application host  and communicating with the application host  over a network, and may also involve techniques for promoting availability and\/or performance, such as local caching of data objects supplied by the application host . In still another variation,  also illustrates a fourth application  provided by the application host  and distributed across the application host  and the computer , but wherein the application host  reserves both the data object accessing component  and the logic component  and the accessing of a fourth application data object , and provides to the computer  only the rendering component  configured for execution within the virtual environment  (such as a web browser.) One scenario where this factoring may arise is with a thin client application, such as a remotely hosted database application offering a web interface to database users. Whereas the third application  might provide many forms of database-stored data objects for client-side manipulation, the fourth application  may reserve most or all database logic in order to promote database integrity, may expose only a web interface through which users may submit database requests to the database host for processing, and may provide responses and output rendered as web pages.","As illustrated by the various applications in , even if the architecture of an application may be organized (explicitly or implicitly) into a data object accessing component, a logic component, and a rendering component, the details of the architecture may vary significantly based on the context in which the application is executed. Additional variations may also be devised (e.g., the logic component may also be distributed across the computer  and the application host , or the data object accessing component  may be configured to access data objects hosted on additional systems, such as a distributed database system.) Moreover, an application may be adaptable for execution in several contexts, such as wholly local execution as a native application, wholly local execution within a virtual environment (such as a web browser), and\/or distributable application involving an application host. It may be appreciated that the design and implementation of an application may be significantly complicated by the variability of executing contexts in contemporary computer systems.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 8","FIG. 8"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 7","FIG. 7"],"b":["110","112","112","116","118","118","114"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
