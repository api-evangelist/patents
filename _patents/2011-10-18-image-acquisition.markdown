---
title: Image acquisition
abstract: An image acquisition technique includes obtaining information regarding a client ticket within a document of a TWAIN-compliant application and determining if a status associated with the client ticket is complete or incomplete based at least in part on server ticket information associated with the client ticket. An image may then be received for the client ticket if the status associated with the client ticket is complete and the client ticket may be replaced in the document of the TWAIN-compliant application with the image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09350911&OS=09350911&RS=09350911
owner: Hewlett Packard Enterprise Development LP
number: 09350911
owner_city: Houston
owner_country: US
publication_date: 20111018
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["TWAIN is a protocol and application programming interface (API) developed by the TWAIN Working Group that regulates bidirectional communication between applications and imaging acquisition devices such as scanners, digital cameras, and image repositories. The TWAIN protocol, in particular, helps to automate and standardize the process of acquiring images from the imaging acquisition devices and providing these images to applications such as word processors, editors, and the like.","In current TWAIN implementations utilizing a TWAIN-compliant image repository on a network delivering image data to a TWAIN-compliant application running on a client device, the application is blocked from use while the image data is being acquired from the image repository. For example, if a user is creating a document using a word processor application and wishes to insert an image within a portion of the document, the user must select an image source, select a desired image, and receive the desired image before the user may continue further processing with the word processor application. That is, the user is blocked from inputting further text or conducting other operations until the requested image data is retrieved from the image data source and inserted into the document. While this TWAIN blocking constraint may be acceptable in some instances (e.g., the image is readily available in the image repository), in other instances, such as when the image is not currently available at an image repository because the user has not yet scanned the image to the image repository, this process may not be acceptable. Rather, the user may prefer to conduct textual input or other operations and, at a later time, make the images available at the image repository.","Disclosed herein are embodiments that provide for a non-blocking TWAIN experience wherein, for example, a user may initiate a TWAIN image acquire action and continue using an application even if the image is not currently available at the image source. More specifically, the user may initiate an image acquire action, insert an image \u201cplaceholder\u201d into the document, and replace the placeholder with the image at a later point when the image is available. This process may reduce current inefficiencies caused by a user having to suspend work in order to conduct processes to satisfy the TWAIN image acquisition. For example, this may reduce inefficiencies caused by a user having to suspend textual input and walk-up to a scanner in order to scan an image to an image repository.","Some embodiments described herein are directed to an image acquisition method. The image acquisition method comprises initiating an image capture request via a TWAIN-compliant application, receiving server ticket information for the image capture request from a repository, creating a client ticket based on the server ticket information, inserting the client ticket into a document of the TWAIN-compliant application, determining a status for the client ticket based at least in part on the server ticket information, receiving an image from the repository, and replacing the client ticket in the document of the TWAIN-compliant application with the image. This process may overcome the above-mentioned blocking issues associated with current TWAIN implementations because a client ticket or \u201cplaceholder\u201d is inserted into the document and replaced at a later time when the image is available at the repository.","Additional embodiments are also directed to an image acquisition method. This image acquisition method comprises obtaining information regarding a client ticket within a document of a TWAIN-compliant application, determining if a status associated with the client ticket is complete or incomplete based at least in part on server ticket information associated with the client ticket, receiving an image for the client ticket if the status associated with the client ticket is complete, and replacing the client ticket in the document of the TWAIN-compliant application with the image. Similar to the above-mentioned method, this method may overcome inefficiencies associated with current TWAIN implementations by checking the status of previously inserted client tickets in a document and replacing those client tickets that are made available at the image source with corresponding images.","Further embodiments are directed to a processor-readable storage medium. The processor-readable storage medium includes processor-executable instructions that, when executed, cause a processor to obtain information regarding a client ticket within a document of a TWAIN-compliant application, determine if a status associated with the client ticket is complete or incomplete based at least in part on server ticket information associated with the client ticket, receive an image for the client ticket if the status associated with the client ticket is complete, and replace the client ticket in the document of the TWAIN-compliant application with the image. Consistent with above, these instructions cause a processor to replace previously inserted client tickets with images that have been, e.g., scanned to the repository or otherwise completed. Thus, for example, a user that is working on a long document with numerous images may insert image placeholders into the document, proceed with typing the document, and, at later time, associate various images with the placeholders an that the placeholders may be replaced with images. As one can imagine, this arrangement may reduce inefficiencies caused by a user potentially having to pause textual input in order to walk-up to a scanner and scan images that were not previously available at an image repository.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","110","160","150","110","120","130","140","160","170","180","190","195","180","190","195","170","110","170","150"]},"In embodiments, the repository  may be a document repository such as a hard copy repository (HCR). The HCR may be configured to manage a plurality of documents for an organization. Alternatively or in addition, the repository  may be a centralized or dispersed system that stores scanned documents and\/or other electronic documents. The repository  may include search capability that enables TWAIN-compliant devices  to locate and retrieve documents from the repository , as well as check-out and check-in documents. The repository  may further provide document distribution options (e.g., email and file transfer protocol (FTP) options).","The image data source(s)  may be accessed by the TWAIN-compliant device(s)  via a communication network . The communication network  may comprise one or more networks including, but not limited to, wired\/wireless networks, local area networks (LANs), wide area network (WANs), telecommunication networks, the Internet, an Intranet, computer networks. Bluetooth networks, Ethernet LANs, token ring LANs, Inter-Integrated Circuit (IC) networks, serial advanced technology attachment (SATA) networks, and\/or serial attached SCSI (SAS) networks. Such networks may utilize communication mediums including, but not limited to, copper, fiber optics, coaxial, unshielded twisted pair, shielded twisted pair, heliax, radio frequency (RF), infrared (IR), and\/or microwave.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"],"b":["110","110","110","205","210","205","210","160","215","215","205","210"]},"In addition to the TWAIN-compliant applications ( and ) and\/or plug-in application (), the TWAIN-compliant device  may further comprise a data source manager , data sources (, , and ), and drivers (, , and ). The data source manager  may be configured to manage the interconnections between the TWAIN-compliant applications ( and ) and the data sources (, , and ). The data sources (, , and ) may be configured to control image acquisition in accordance with the TWAIN specification and may be the TWAIN interface implementation on the TWAIN-compliant application side that moves through different TWAIN states as decided by the TWAIN-compliant application ( and ). The drivers (, , and ) may be dynamic link libraries that the associated data sources (, , and ) may utilize to load and make device specific calls. Each image source may have its own driver and data source. For example, camera  may have an associated camera data source  and camera driver , scanner  may have an associated scanner data source  and scanner driver , and repository  may have an associated repository data source  and repository driver .",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3","FIG. 1"],"b":["300","110","300","310","205","210","205","210","110","215","170","215","170","205","210","220","225","235","245","230","240","250"]},"Upon receiving an image capture request triggered in block , the image data source  (e.g., a repository) may create a server ticket. More precisely, a TWAIN responder associated with the image data source  may create the server ticket for the received image capture request. The TWAIN responder may be an image data source component that can respond to a client request over a network. The server ticket may be a representation of a user-specific incomplete ticket on the image data source  and may comprise, e.g., a ticket identifier, a user name, and\/or scan settings. The ticket identifier may be used to identify\/associate the server ticket with a client ticket. The user name may be used to scope a user's view when the user logs into the image repository. The scan setting may be used to apply such setting when an image is scanned to the ticket.","Once created, the image data source  may send information about the server ticket to the TWAIN-compliant device  over the network . More specifically, a TWAIN responder of the image data source  may transmit information about the server ticket over the network  to a driver of the TWAIN-compliant device . For example, a TWAIN-responder associated with repository  may create a server ticket after receiving an image capture request from the word processor application , and send information about the server ticket to the repository driver .","At block , the TWAIN-compliant device  may receive the server ticket information for the image capture request from the image data source . More precisely, a driver of the TWAIN-compliant device  may receive the server ticket information from a TWAIN-responder of an image data source . For example, the repository driver  may receive server ticket information from a TWAIN-responder associated with repository . This server ticket information may be provided, for example, in the form of an extensible markup language (XML) response.","At block , a client ticket may be generated based on the received server ticket information. This process may be conducted by the driver. For example, the repository driver  may generate a client ticket based on the server ticket information received from a TWAIN-responder associated with repository . The client ticket may be a client side representation of an incomplete server ticket. The client ticket may comprise a server ticket identifier, a data source name, and\/or an image data source identifier in terms of an internet protocol (IP) address. In embodiments, the client ticket may be in the form of binary data. For example, the client ticket may be a bitmap image with a modified header to include server ticket information. That is, the server ticket information may be included into a \u201cdummy\u201d bitmap image file. This could be done by embedding binary serialized data of the client ticket into the area of a pixel array that the bitmap contains. Alternatively, a bitmap header may be used to indicate the offset into the pixel array where this data is written. In some embodiments, the bitmap may not be a valid image, but may nonetheless include client ticket information in a known place in the bitmap format and provide this image to the application. Furthermore, in some embodiments, the client ticket may be generated in the form of a quick response (QR) code. That is, the client ticket information may be encoded in a QR code rendered as a valid bitmap.","Once the client ticket is created, at block , the client ticket may be inserted into a document of the TWAIN-compliant application. In embodiments, this may comprise a driver (, , and ) communicating to a data source (, , and ) that it has created a client ticket. The data source may then provide the generated client ticket to the TWAIN-compliant application ( and ). For example, the repository driver  may indicate that it has created a client ticket to the repository data source , and the repository data source  may provide the client ticket to a word processing application  for insertion in a portion of a document. The TWAIN-compliant application, upon receiving the client ticket, may insert the client ticket into the document believing it to be a valid image. In actuality, however, the client ticket may not be a valid image, and may be a \u201cplaceholder\u201d comprising information about a server ticket (e.g., a bitmap comprising server ticket information in the pixel array of the bitmap and the header containing its offset in the pixel array). The client ticket may be displayed in the document as, e.g., an empty pixel array, a question mark, a QR code, etc. The user may then continue using the application and continue inserting placeholders or client tickets as necessary.","At a later point, the user may conduct processes to \u201ccomplete\u201d the server ticket. That is, the user may conduct the necessary processes to associate an image with a server ticket and replace the placeholder with an image. For example, the user may walk-up to a network scanner, select a server ticket, and scan an image to the selected server ticket. By doing so, the server ticket becomes \u201ccomplete\u201d and the image may be available to replace a placeholder. Alternatively, the user may browse various pre-scanned images on the repository via the scanner and\/or the TWAIN-compliant device  and associate various pre-scanned images with various server tickets, making such server tickets \u201ccomplete.\u201d Furthermore, the user may browse the repository  and select a document (e.g., a PDF document) and a page number in that document. The selected page of the optical document may then be extracted and associated with the intended server ticket.","At block , a status for the client ticket(s) may be determined based at least in part on the server ticket information. This process may occur automatically in response to a user re-initiating the TWAIN-compliant application and\/or document associated therewith. For example, a user may open a word processor document with client tickets previously stored therein and this action may automatically trigger the TWAIN-compliant application to check the status of the client ticket(s) within the document. Alternatively, the user may manually trigger the process via an option within the TWAIN-compliant application. For example, a user may select an option or icon on the TWAIN-compliant application to check the status of all pending client tickets.","The process of determining the status may comprise the TWAIN-compliant application ( and ) and\/or or a plug-in application () associated therewith enumerating all client tickets in the document and communicating with a driver to check the status of each client ticket at an image data source . The driver may than send a request to a TWAIN responder associated with the image data source  requesting the status of one or more client tickets and\/or associated server tickets. The TWAIN responder may check the status and respond back with the status of the one or more client tickets and\/or the associated server tickets. For example, there may be five client tickets within a word processor document. The word processor application  may cause the repository driver  to ask the TWAIN responder of the repository  the status of the five client tickets by providing the server ticket information for the five client tickets. The TWAIN responder may check the status of the five server tickets and respond back to the repository driver  with the information as to which server tickets are complete or incomplete. The repository driver  may then initiate or request an image transfer for the client\/server tickets that are determined to be complete.","At block , images are received at the TWAIN-compliant device . In particular, the driver of the TWAIN-compliant device  may receive the images that are complete from the TWAIN responder associated with an image data source . For example, the repository driver  may receive images from the TWAIN responder of the repository .","At block , the placeholder(s) within the document of the TWAIN-enabled application may be replaced with the received image(s). This may be conducted by the TWAIN-compliant application ( and ) and\/or a plug-in application () associated therewith.","Accordingly, the above-mentioned processes enable an application to initiate a TWAIN acquire action without blocking and receive images at a later point. More specifically, the above-mentioned processes implement a non-blocking, late synchronization TWAIN experience by initiating an image capture request via a TWAIN-compliant application and receiving server ticket information for the image capture request. The server ticket information is used to create a client ticket and the client ticket is inserted into a document of the TWAIN-compliant application in, e.g., a binary format. Multiple such client tickets may be inserted into the document and, at a later point, the status of each client ticket may be determined automatically or in response to a user command. Images are than received for the client tickets that are determined to be associated with a complete server tickets. These images are used to replace the client tickets within the document.","In some embodiments, a plug-in application () may be used to conduct one or more of the above-discussed operations. For example, the plug-in application () may enumerate client tickets, issue an image status requests for the client tickets, and replace the client tickets in the document with received images. In alternate embodiments, the TWAIN-compliant application and the data source may be modified to support an operation called DAT_ASYNCTICKETS. In these embodiments, after client tickets are inserted into a document, the user may be presented an option to \u201cprocess existing client tickets.\u201d Selection of this option may cause the data source to move through a DAT_ASYNCTICKETS operation to obtain information on image availability and to obtain completed images. The TWAIN-compliant application then, through the DAT_ASYNCTICKETS operation, may replace client tickets with images.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 1"],"b":["400","110","400","410"]},"At block , the status of the obtained client ticket(s) may be determined. In particular, a check may be done for each client ticket, and each client ticket may be identified as complete or incomplete based at least in part on server ticket information associated with the client ticket. A TWAIN responder of an image data source  may provide this information to the TWAIN-compliant device , and therefore put the TWAIN-compliant device  on notice of which client tickets have images available. The TWAIN-compliant device  may then, at block , receive an image for each client ticket that is complete. The client tickets in the document may then be replaced with the images at block .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 5","FIG. 1"],"b":["510","110","510","510","520","510","520","510","520","205","210","215","220","225","235","245","230","240","250","510","520","520","510","520","520","110","510"]},"The processor  generally retrieves and executes the instructions stored in the processor-readable medium  to conduct image acquisition in accordance with embodiments. In an embodiment, the processor-readable medium  can be accessed by the processor  over a bus . A first region  of the processor-readable medium  may include the TWAIN-compliant application functionality as described herein. A second region of the processor-readable medium  may include the data source manager (DSM) functionality as described herein. A third region of the processor-readable medium  may include the data source functionality as described herein. A fourth region of the processor-readable medium  may include driver functionality as described therein. A fifth region of the processor-readable medium  may include plug-in functionality as described herein.","Although shown as contiguous blocks, the software components can be stored in any order or configuration. For example, if the non-transitory processor-readable medium  is a hard drive, the software components can be stored in non-contiguous, or even overlapping, sectors."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Certain exemplary embodiments are described in the following detailed description and in reference to the drawings, in which:",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
