---
title: Content asset manager
abstract: A content asset manager (CAM) system manages content to be developed. CAM includes a data repository storing static assets and page assets operable to be used in a web site developed in a code editing system. A web service interfaces the CAM system with the code editing system and provides the code editing system with access to at least some of the static assets stored in the data repository. A slot database includes a plurality of independent slots, and a slot stores data to be used for the web site at runtime. A content manager retrieves the code for the web site from the data repository and stores the code for the web site in the slot for the web site in the slot database. The web site may be deployed using data in the slot.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583703&OS=08583703&RS=08583703
owner: Accenture Global Services Limited
number: 08583703
owner_city: Dublin
owner_country: IE
publication_date: 20110831
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY","BACKGROUND","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["The present application claims priority to U.S. Provisional Patent Application Ser. No. 61\/382,767 filed Sep. 14, 2010, which is incorporated by reference in its entirety.","A content management system (CMS) typically includes computer software for organizing and facilitating collaborative creation of documents and other content. Commonly, a CMS is used as a tool for end users to prepare and publish content for one or more websites without needing to prepare HTML code. In these instances, the CMS provides an easy-to-use interface that allows end users to change text, images, or other content in a template, and then publish the information to the website.","These website CMS's are excellent tools for end users to manage their own websites. However, the website CMS falls short when the user is a software web developer that desires to use the CMS to develop a web site. Developers need a more functional interface for coding rather than an interface that is primarily used to change content. For example, a developer may need to modify the layout of a web page which may not be possible through a website CMS interface designed for end users. Furthermore, developers may work in a collaborative environment, including testing and staging environments. Typically, a website CMS is not designed to interface with tools used in these environments.","For simplicity and illustrative purposes, the principles of the embodiments are described by referring mainly to examples thereof. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the embodiments. It will be apparent however, to one of ordinary skill in the art, that the embodiments may be practiced without limitation to these specific details. In some instances, well known methods and structures have not been described in detail so as not to unnecessarily obscure the embodiments.","1. Overview","According to an embodiment, a content asset manager (CAM) is an extensible knowledge management solution designed to assist with the construction of content into a format suitable for any web friendly channel but in a way that is intimately linked to development and management tools. CAM provides for collaboration among web developers, asset creators, managers and other people to create, deploy and manage web sites or content for other applications.","CAM is described below generally with respect to the creation of a web site. However, CAM may be used to create and edit any type of content, including product catalogs, news articles, etc. CAM creates and manages underlying data stores of assets that may be used to create the content.","2. System",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","101","101","102","105","101","102","110"],"i":"b"},"CAM  also manages other types of data, shown as . The other types of data may include asset compilations, such as catalogs, user data, which may include user privileges, login data, and other user profile information, and any other data used by CAM  to perform its functions.","CAM  may deploy web sites, shown as , once they are created, and CAM  may manage the deployed web sites, shown as . Managers or other users can interface with CAM  to invoke web site deployment and perform web site management. Deployment may include deployment in a production environment or in pre-production environments, such as testing and staging environments. The environments are shown as , and may include multi-tiered systems, such as enterprise systems. A web tier, a services tier and a database tier are shown as examples of tiers in an environment for deployment. As part of deployment, CAM  may provide configuration files, code and assets for a web site created through CAM  to the web tier and database tier in the production environment, which is a runtime environment. Then, the web site may be deployed and accessed by visitors via the Internet.","Web site management  may include scheduling jobs to update content on the web site. For example, a user may select a new image for a web site through CAM  and schedule a job to update the image on the production database so the web site is updated. In one example, a user wants to change a product catalog image. The user connects to a testing slot in a slot database, described in further detail below, and uploads the image to the testing slot. The user edits the product catalog record to point to the new image and saves the record. The user previews the change in the testing slot via their web browser, and then the user schedules a job to move the image from the testing slot to a production slot in the slot database. A user may schedule other types of jobs as well through CAM .","CAM  also provides a web service for interfacing with the developer environment . Developers are shown interfacing with the developer environment, which may include an off-the-shelf code editing system , such as Visual Studio provided by MICROSOFT. In this example, the web service may be an application programming interface created with Windows Communication Foundation.","CAM  provides a software development kit (SDK)  that provides interfaces within the code editing system , such as menus, buttons, etc., that invoke functionalities provided by CAM . For example, the SDK  may generate a drop down menu in the code editing system  that presents assets to the developer that may be used in the web site. The SDK  may make templates  managed by CAM  available to the developer. The templates  comprise information that may be re-purposed for use in creating content, such as a web site. The templates  may be a reference site that a developer may start with when creating a new site, or the templates  may include portions of a web page. The templates  may include Java script, HTML, style sheets, etc. The SDK  also automatically includes references and dlls for references for services, controls, pages, etc.","For example, rules for site building are made available to the code editing system  via the CAM  and may be enforced through the CAM . The rules, for example, ensure the correct asset is applied to a current page using asset IDs. A developer may access remote repositories and application pages with metadata via CAM . CAM  updates the components in each application page with the metadata and other aspects of the asset gleaned from a repository.","The test sandpit  may include a sandbox provided by CAM  for test code. The SDK  generates the test sandpit , which is a testing environment that may emulates the production environment for testing content. After testing, the developer may generate packages of code and assets for a web site and provide it to CAM , and then CAM  may deploy the web site in a production environment.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["101","101","201","202","203","204","205"]},"CAM  stores assets in repository  and slot database . The repository  may be a database or other storage system. The repository  may be provided by a collaborative environment system, such as SHAREPOINT. The repository  may store any data used for creating content, deploying content and using the content in a runtime environment. The repository  may comprise one or more repositories. The data may include static assets and page assets. The slot database  may include virtual containers in the environments  shown in , which may include production environments, testing and staging environments, etc. The slot database  includes slots, each of which may include a virtual container that holds assets, code and other data. For example, a slot in the production environment may include a database and a web server. Each slot in the slot database  may be independent. For example, information in a slot may not be accessible by applications in other slots. By way of example, a slot may be created per web site, per multiple web sites, or as a data editing slot for large volumes of data. Privileges to the slot may be assigned for individuals, including slot access and creation privileges. A slot may be used to prevent tampering and keep client data separate or to mange applications. For example, an administrator can switch one web site off in one slot while not affecting a web site in any other slot.","The content manager  manages the assets in the repository and controls how the assets may be used to create content, such as the web site . The content manager  categorizes assets as page assets or static assets and controls access to the assets according to their categories. Static assets are allowed to be moved into the code editing system  shown in  and become a static part of the web site . Generally, a static asset is in the domain of the developer and page assets are not. A static asset may be added, removed or modified in the developer domain, such as the code editing system . The static asset may become part of the code for the web site . A static asset is stored on the file structure of the web server in the production environment so the web site  can be rendered on a visitor's browser from the web server. A static may not be changed for the web site  unless it is modified in the developer domain and then stored again in the production environment. A page asset may also be incorporated into the web site , but the page asset is not allowed to be brought into the code editing system . The page asset may be stored in a production slot in the slot database  and rendered on the web browser. For example, the code for the web site  may include a pointer to a page asset, which is retrieved from the slot to render the web site . The page asset may be changed on a regular basis by changing the page asset in the slot through CAM  rather than through the developer domain. For example, a news article has a title, description and headline image. The headline image may be a page asset in the slot database  and rendered out of the slot database  by the content manager  as needed. The title and description are coded and static and cannot be edited unless you are the developer modifying the news article via the code editing system  but the headline image may be modified in the slot database  as needed by the user through CAM . A page asset may also include a dynamic asset. A dynamic asset may include meta data that can used to make decisions for the asset based on rules. In one example, the dynamic asset includes meta data comprised of a publish end date attribute and a background color attribute. Based on a rule, a dynamic asset may be selected to be included in the web site  if the background color is equal to green and if the publish end date has not been reached.","The content manager  allows the content creators shown in  to upload assets into the repository  and assets are moved to the slot database  as needed if the assets are to be used in the web site . For example, the content manager  retrieves code for the web site  from the data repository  and stores the code for the web site  in a slot for the web site  in the slot database . The content manager  may determine if the web site includes page assets. For example, the project folder for the web site  may include page assets that are to be included in the web site content. A table or other data structure may be stored for the project in the repository  that identifies all assets for the web site  or metadata may be stored for each asset that identifies the projects for the asset. If page assets are to be included in the web site , the content manager  provides the page assets in the slot for the web site . The page assets in the slot may be the actual assets or pointers to the assets.","The content manager  also allows the managers and other users to manage the web site . The content manager  also creates logical schemas. A logical schema is a data structure including custom attributes. A user may select the types of data to be included in a logical schema. For example, a logical schema may be created for customer case references. The logical schema may include customer name, customer rating, and location. The logical schema may be included in other assets. For example, a logical schema may be included in an article. The logical schema may also operate as a template that can be inherited in an article. The content manager  stores the logical schemas in the repository . A logical schema may be created by starting with a base schema and then adding various attributes to the base schema.","After the web site  is created in the code editing system , a package including configuration files is generated. The deployment manager  deploys the package in the production environment. The package may include configuration files for the web server, the code and other data.","The job scheduler  schedules jobs to be performed for the deployed web site . For example, the job scheduler  synchronizes the slot database  to external systems to update the slot database  with new prices and images as needed, so these new images and prices are displayed at the web site  as page assets. The job scheduler  may store the assets directly into the slot database  or the job scheduler  may store the assets into the repository  and CAM  updates the slot database  with the assets. An update may include storing a new asset, revising an existing asset and\/or removing an asset, for example, from a slot. The user interface allows a user to interface with the job scheduler to create jobs. A job may include a task to be performed at one or more predetermined times. Scripts may be used to execute the tasks. For example, a SQL script may be used to store information in the slot database.","The CAM UI  may include a graphic user interface generated by CAM  for multiple functions. Examples of information provided via the CAM UI  is further described below.","The web services  may include application program interfaces (APIs) for interfacing with the repository  and with the code editing system  shown in . For example, one of the web services  may include APIs for the code editing system . The web service interfaces CAM  with the code editing system  through an API for the code editing system  and makes certain folders in the repository  available for viewing and accessing in a UI in the code editing system . The web service also allows code, including one or more static assets, for the web site developed in the code editing system to be provided to CAM  and stored in the repository .","3. UI Functions",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIG. 2","FIG. 1"],"b":["204","301","302","210","131","303","304","305","303","304","230","305","305"]},"The collaborative functions  may include functions for sharing and managing access to workspace  and documents . The project dashboard  is a dashboard which may be used for collaboration or asset management. Search  represents search capability for searching assets or collaborative environment in CAM .","4. Screenshots of UIs",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 4A-K","FIGS. 4A-K","FIG. 4A"],"b":["204","402","4","131","101","101","101","131"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 4B","FIG. 4A"]},"Also, from the landing page, documents and assets that can be used for the project may be accessed. For example, the content manager  shown in  may store the documents and assets in folders for the project. These folders may be accessed from the project landing page. For example, project folders may include site assets, which are static assets for the project. Different types of static assets for the project, which are shown on the left side of the screen shot, may include cascading style sheets (CSS), which may be used as templates, HTML code, images, scripts and text. Also, page assets for the project may be accessed from the landing page.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4C","FIG. 2"],"b":["401","101","401","210"]},"The image static assets may be available to the code editing system  shown in . UI  shown in  is a UI generated in the code editing system  using the SDK  and a web service (e.g., one of the web services  shown in ) provided by CAM  interfacing the code editing system  with CAM  and the repository . The SDK  generates the UI  and the web service, for example, makes certain folders for the project stored in the repository  available through the UI . In this example, the static asset folders in the repository  for different types of static assets, such as CSS, HTML, images, media, script and text, for the project are shown in the UI . The UI  shows the folders that may accessed in the code editing system  and used in the code for the web site .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4D","b":["403","404","403","404","230","101","101"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 4E","FIG. 2","FIG. 4E"],"b":"220"},"CAM  may be used to manage web site content for the web site developed through CAM , such as the web site .  shows a screenshot for managing web site content. For example, information in the web site, such as article lists, custom lists and catalogs, may be viewed and modified. Slots and site health may be managed. In the example shown in , the user selected an article list for the web site related to FAQs. All the articles in the selected article list are shown and their attributes.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4G","b":["405","406","405","406","230"]},"CAM  allows a user to generate a composite asset comprised of multiple assets. An article is an example of a composite asset. For example, as shown in , the article may include page assets or static assets comprised of one or more images and\/or text.","CAM  may be used to generate online catalogs.  shows a screenshot for managing catalogs in site content. Two catalogs are listed for the site in . A user may add a new catalog to the site or remove or modify an existing catalog. For each catalog, the number of products in each catalog is shown along with the number of categories and last modification date and time. A list of the categories and the products may be shown by selecting a catalog.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4I","b":["407","408","407","408","210"]},"The deployment manager  shown in  is operable to deploy the web site  with all the site content.  shows a screenshot for managing slots for deployment and for viewing information for the deployment and invoking the deployment. The slots stored in the slot database  shown in  may include data for the production environment. The slot for the web site  may include the code, page assets, and configuration files including web server configurations, system settings and application settings. The slot status is shown, which may be start, stop, or recycle. Recycle may be used to flush a cache if a file in the slot is changed. Configuration files in the slot for deployment in the production environment are shown along with metadata such as who deployed the configuration file and when it was deployed. The slot history is also shown.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4K","b":"230"},"5. Methods",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 5","FIGS. 1 and 2"],"b":["500","230","101","500","600","100"]},"At step , a project may be created for generating the web site . Folders may be created for storing content in the repository  for the project. The project may be created through the CAM UI  or through the code editing system  interfacing with CAM  through a CAM web service.","At step , images and other content for the web site  are uploaded into repository , for example, through the CAM UI . Images and other content may be uploaded into the project folders in the repository  or may be selected for the project from content already stored in the repository .","At step , the developer accesses the folders for the project in the code editing system  using a UI generated with the SDK . The web service for CAM  connects CAM  the code editing system  to allow access to project folders for the project. For example, the SDK  provides a menu option in the code editing system  to connect to CAM . The web service for CAM  connects CAM  to the code editing system  and provides the developer's ID to CAM . If the developer is authorized, a UI is generated in the code editing system  listing all the projects the developer is authorized to access. The developer can then select the project.","At step , the developer may select static assets for the web site . CAM  identifies all the static assets in the repository  that are available for the project. Metadata may be associated with each asset stored in the repository that indicates whether the asset is a static asset or a page asset and may also indicate which project(s) the asset is associated with.","Static assets that may be available for the project are brought into the code editing system  by the CAM web service. For example, the developer may view static assets that are available for the project in a UI in the code editing system  created by the SDK . The developer may select a static asset, such as an image for a small or medium blue button or an image for a green coupon, which is visible to the developer through the UI. The image is brought into the workspace in the code editing system  and becomes part of the code for the web page . The code including the static asset may be subsequently modified through the code editing system  but may not be modifiable by non-developers through a CAM UI after the code editing system  provides the code to CAM . The developer may use the test sandpit  created by the SDK  to test and view the web site .","At step , the code for the web site , including static assets selected at step , created by the developer in the code editing system  is packaged and provided to the CAM . The package includes the code (e.g., HTML), static assets and configuration files, which may include web application configuration files, such as controls, dlls, etc.","At step , the content manager  stores the package in a project folder in the repository .","At step , the package, slot and configuration files are selected for deploying. For example, a user in CAM  selects the package, selects a slot in the production environment, and configuration files, and instructs CAM  to deploy the package. The deployment manager  stores the selected package and configuration files in the slot. The slot may include a production database and a web server in the production environment to host the web site .","At step , CAM  determines if there are any page assets for the web site . If there any page sites for the web site , the page assets or pointers to the page assets are stored in the slot at step . For example, the job scheduler  may execute a job to move page assets for the web site  from a test slot to the selected production slot, or page assets may be moved from the repository  to the selected slot. The page assets may be provided in a database package to the slot.","At step , the web site is executed in the slot in the production environment.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 6","b":["600","600","230"]},"At step , a list type is selected for the web site . For example, a user logs into CAM  and selects the type of content to be created that includes page assets. For example, the user is presented with an option to select catalog list, article list or custom list. The catalog and article lists are for creating or modifying a catalog or article, which may include one or more page assets. A custom list is an arbitrary set of name-value pairs that can be created by a user. For example, a name \u201cmenu\u201d can be associated with various \u201chyperlinks\u201d that are options in the menu.","Templates may have been created by a developer for the various list types. For example, steps - in the method  may be performed to create a template for a product catalog. The template may include static assets and may have an area for placing page assets. The page assets, however, are not included in the template by the developer through the code editing system . Instead, page assets may be added to the template by the user, such as content creators or managers shown in , through the UI  in CAM .","At step , the user selects, through CAM , page assets for the product catalog to be included in the web site . For example, at step , the user selects the product catalog list type, and then page assets may be selected for the product catalog which may be provided in the web site . For example, the user views an asset library for the project through CAM UI . The user selects one or more page assets for each product. For example, for each product in the catalog, the user selects a product image, a product description and a price description from the page assets.","At step , the content manager  creates the metadata that links the page assets to the project. The metadata may link each page asset (e.g., image, product description, and price) to its corresponding product for the catalog. For example, the metadata for each page asset is modified to identify the corresponding product. The metadata may be used to group the page assets for the same product or to identify all the page assets for a product by searching the page assets.","At step , the content manager  inserts the page assets into the template. For example, the template may include locations for the product image, the product description and the price. The page assets or a pointer to the page assets are inserted in their corresponding location in the template. The template may be used for each product in the catalog to insert the corresponding information for each product.","At step , the content manager  moves the data for the product catalog to a slot in the slot database  for deployment of the web site .","At step , the job scheduler  synchronizes page assets for the web site  in the slot database  according to jobs scheduled for the page assets. For example, the job scheduler  receives a job request via CAM UI . The job request may indicate to update page assets for the web site  weekly. The user may load new page assets in the slot database  for one or more of the products in a catalog published in the web site . Once a week, the web site  is updated with the new page assets.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 7","FIGS. 1 and 2"],"b":["700","101","700","101","100","210","101","101"]},"The computer system  includes a processor  or processing circuitry that may implement or execute software instructions performing some or all of the methods, modules, functions and other steps described herein. Commands and data from the processor  are communicated over a communication bus . The computer system  also includes a computer readable storage device , such as random access memory (RAM), where the software and data for processor  may reside during runtime. The storage device  may also include non-volatile data storage. The computer system  may include a network interface  for connecting to a network. It will be apparent to one of ordinary skill in the art that other known electronic components may be added or substituted in the computer system .","One or more of the functions or steps described herein and one or more of the components of the systems described herein may be implemented as computer readable instructions stored on a computer readable medium, such as memory and\/or other types of data storage that are non-transitory, and executed on a computer system, for example, by a processor, application-specific integrated circuit (ASIC), or other controller. The code may exist as software program(s) comprised of program instructions in source code, object code, executable code or other formats. Examples of computer readable medium include conventional computer system RAM (random access memory), ROM (read only memory), EPROM (erasable, programmable ROM), EEPROM (electrically erasable, programmable ROM), hard drives, and flash memory.","While the embodiments have been described with reference to examples, those skilled in the art will be able to make various modifications to the described embodiments without departing from the scope of the claimed embodiments."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The embodiments of the invention will be described in detail in the following description with reference to the following figures.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 4A-K"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 7","FIGS. 1 and 2"]}]},"DETDESC":[{},{}]}
