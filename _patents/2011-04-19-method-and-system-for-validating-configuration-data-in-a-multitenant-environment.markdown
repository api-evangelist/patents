---
title: Method and system for validating configuration data in a multi-tenant environment
abstract: Validation systems and methods are described to validate domain name services (DNS) or other configuration data for multiple network services provided by a common multi-tenant application server. A validation system suitably receives configuration data from the multi-tenant application server for each of the services provided. The validation system also performs a validation query to a domain name services or other public service on the network to obtain public data about each service. The publicly-available information is compared to the data received from the multi-tenant application server, and any anomalies are reported and/or repaired as appropriate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566449&OS=08566449&RS=08566449
owner: salesforce.com, inc.
number: 08566449
owner_city: San Francisco
owner_country: US
publication_date: 20110419
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY CLAIM","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Application Ser. No. 61\/419,599, which was filed on Dec. 3, 2010 and is incorporated herein by reference.","The following relates to data processing systems and processes that use common network-based platforms to support applications executing on behalf of multiple tenants.","Modern software development is evolving away from the client-server model toward \u201ccloud\u201d-based processing systems that provide access to data and services via the Internet or other networks. In contrast to prior systems that hosted networked applications on dedicated server hardware, the cloud computing model provides applications over the network \u201cas a service\u201d. The cloud computing model can often provide substantial cost savings to the customer over the life of the application because the customer no longer needs to provide dedicated network infrastructure, electrical and temperature controls, physical security and other logistics in support of dedicated server hardware.","In particular, multi-tenant cloud-based architectures have been developed to improve collaboration, integration and community-based improvement between customer tenants without sacrificing data security. Generally speaking, multi-tenancy refers to a system wherein a single hardware and software platform simultaneously supports multiple customers or other groups of users from a common data store. The shared platform in the multi-tenant architecture is usually designed to virtually partition data and operations so that each tenant works with a unique virtual application instance. The Force.com service available from salesforce.com of San Francisco, Calif., for example, provides an application-centric approach that abstracts the server hardware altogether and allows multiple tenants to simultaneously yet securely implement a wide variety of applications that are accessible via the Internet or a similar network.","In some instances, the different applications provided by a particular multi-tenant server are accessed via unique names and addresses. Certain tenants, for example, may wish to provide their applications from the shared server using customized domain names that uniquely identify the tenant's applications, and that differentiate that tenant's applications from those belonging to other tenants of the same shared server. A single multi-tenant server may therefore simultaneously support applications that are accessible via any number of different domain names.","The various domain names used to access the different applications can be published to users using the well-known Internet domain name service (DNS), or the like. Issues can arise, however, in maintaining consistency between multi-domain application servers and the publicly-available DNS service. If the public DNS becomes incorrect for any reason, then users may have difficulty in connecting to desired applications. It is therefore desirable to maintain the reliability and consistency of DNS information and\/or other configuration data relating to multi-domain application servers, particularly when such servers support applications that are accessible via multiple distinct domains. Similar issues may arise in maintaining consistency and accuracy of other configuration information as well.","Various systems and methods are described to validate domain name services (DNS) or other configuration data for multiple services provided on a network by a common multi-tenant application server. In various embodiments, a validation system suitably receives configuration data from the multi-tenant application server for each of the services provided. The validation system also performs a validation query to a domain name services or other public service on the network to obtain public data about each service. The publicly-available information is compared to the data received from the multi-tenant application server, and any anomalies are reported and\/or repaired as appropriate.","Various processes and systems described herein are able to validate that the distributed DNS data and\/or other configuration information is correct. Some embodiments may alternately or additionally provide for dynamically-correcting incorrect or outdated information. Although this document primarily refers to exemplary embodiments that validate and\/or repair DNS configuration data, other embodiments may relate to other types of real-time validation of production configurations that may be useful to applications and servers in a multi-tenant cloud computing infrastructure. The various systems and methods disclosed herein are not limited to DNS applications, then, but may equivalently apply to any number of other dynamic configuration systems, data or applications as appropriate. For example, equivalent systems and processes could be used to validate and\/or repair load balancing information, routing tables, configurations of social media accounts, and\/or any other configuration data as appropriate.","Turning now to the drawing figures and with initial reference to , an exemplary system  for providing client applications A-B associated with multiple distinct tenants suitably includes one or more application servers A-C, one or more databases , and a validation system . In many embodiments, each server A-C suitably supports multiple applications A-B associated with different tenants based upon securely-shared data  in database . Each application A-B suitably provides information or other services to one or more client applications A-B executing on one or more client computer systems A-B, respectively.","Generally speaking, a user of a client system  suitably invokes a browser or other client program  that is able to contact an appropriate server application  executing on a multi-tenant server  via the Internet or another network . Typically, client program  and\/or another process executing on client system  accesses the application  on network  using an IP or other network address . Browsers and other client applications  generally obtain internet protocol (IP) or other addresses associated with various services available on the Internet or another network using a widely-available domain name services (\u201cDNS\u201d) system . The DNS system  typically includes multiple servers A-B that are distributed throughout the Internet or another network  to associate textual domain names (e.g., \u201csalesforce.com\u201d) with Internet Protocol (IP) or similar addresses (e.g., \u201c204.14.234.33\u201d).","Different applications A-B executing in a multi-tenant server  can each be mapped to different domain names A-B that are each separately accessible via the Internet or another network . This can allow different tenants to each provide their applications  using a unique domain name  that is different from other users of the same shared server . Even if two hypothetical tenants (e.g., \u201cAcme Fireworks Inc.\u201d and \u201cJoe's Bait and Tackle\u201d) were to develop applications using the same multi-tenant server , then, the two tenants' applications  could be separately accessible via different domain names  (e.g., \u201cacme.multiserver.com\u201d and \u201cfishing.multiserver.com\u201d, respectively). The separate domain names could reference a common network address  associated with the common server , or different network addresses A-B each associated with the particular application as desired. In the example illustrated in , the DNS system  suitably maps domain names -B associated with two different tenant applications A-B (e.g., \u201ctenant1.appserver.com\u201d and \u201ctenant2.appserver.com\u201d) with two different IP addresses A-B (e.g., 209.14.214.101 and 209.14.214.102), respectively. The DNS service  in this example associates each of the distinct domain names  with a separate IP or other network address  that can be used to locate the particular application  on network , thereby facilitating connections between client applications A-B and tenant applications A-B using different domain names A-B. Other embodiments may be designed such that a common network address  corresponding to the application server  is used for each of the different domain names A-B that are hosted by that particular server . Different embodiments may supplement or modify this example, as appropriate.","Invalid data may propagate through the DNS system  for any number of reasons. In some circumstances, for example, an initial DNS entry created for a particular application  may fail to register due to network or system issues. As another example, DNS entries may be slow to update and\/or may fail to update entirely as tenants move between different network server instances (e.g., between servers A-C), or as applications  change over time. Such issues may not be reported in a timely fashion due to asynchronous nature of the DNS system . Other types of configuration data may experience similar issues.","To validate DNS or other configuration data for the multiple applications A-B executing on servers A-C, then, a validation system  obtains configuration information from the server(s) A-C and compares the information obtained directly from the primary source (e.g., the server ) with the information distributed from the DNS or other distribution service  on network . If any anomalies are found, these may be reported out to an administrator or other user for manual repair.","Further embodiments may additionally or alternately automatically repair any anomalies by updating a provider service  that updates the information propagated on network  by the DNS or other distribution service . Examples of DNS services  include the services provided by ULTRADNS, GODADDY.COM, and many others. Many of these services  include application programming interfaces (APIs) or other interfaces that allow programs, scripts or other validation systems  to automatically update DNS or other configuration information. Such services  typically ensure that received information is appropriately distributed or otherwise propagated throughout the public DNS or other distribution system .","The operation of an exemplary process for validating DNS or similar configuration data is described in detail below with respect to . The following discussion, however, continues to provide additional detail about the various hardware and software systems illustrated in .","Validation system  may be implemented using any appropriate computing hardware , software, firmware and\/or the like. In some embodiments, validation system  is implemented using a software application or script that is stored and executed on general-purpose computing hardware , such as the processor , memory  and input\/output features  commonly associated with a conventional personal computer, server or other computing system. In other embodiments, validation system  may reside on the same computing hardware  used to execute and implement one or more application servers . Still other embodiments may implement validation system  using other types of hardware and\/or software, including any sort of workstation-based, cloud-based, server-based and\/or other computing resources that may be available. The actual data processing and algorithms described herein may be implemented using any sort of programming or scripting features, including any sort of Perl, Python, Ruby or similar scripts that manually or automatically execute on any temporal basis; any sort of compiled or interpreted application, applet or the like in any source or object code format (e.g., a Java Servlet-type application); and\/or the like.","The exemplary multi-tenant application system  illustrated in  suitably includes a one or more application servers A-C. Each of these applications servers A-C dynamically creates and executes virtual applications A-B based upon data  from a common database  that is shared between multiple tenants. Data and services generated by the virtual applications A-B are provided via network  to any number of client devices A-B, as desired. In many implementations, virtual applications A-B are generated at run-time using a common platform that securely provides access to data  in database  for each of the various tenants subscribing to system . Other implementations may generate applications A-B in any other manner.","In this context, a \u201ctenant\u201d generally refers to a group of users that shares access to common data within database . Tenants may represent customers, customer departments, business or legal organizations, and\/or any other entities that maintain data for particular sets of users within system . Although multiple tenants may share access to a common server  and database , the particular data and services provided from server  to each tenant can be securely isolated from those provided to other tenants, as needed. The multi-tenant architecture therefore allows different sets of users to share functionality without necessarily sharing each other's data .","Database  is any sort of repository or other data storage system capable of storing and managing data  associated with any number of tenants. Database  may be implemented using any type of conventional database server hardware. In various embodiments, database  shares processing hardware  with server . In other embodiments, database  is implemented using separate physical and\/or virtual database server hardware that communicates with server  to perform the various functions described herein. Although only one database  supporting multiple application servers A-C is illustrated in , alternate embodiments may use multiple databases  to support different servers A-C or for any other purpose.","Each application server A-C in this example is implemented using one or more actual and\/or virtual computing systems that collectively provide a dynamic application platform for generating virtual applications A-B. Server  operates with any sort of conventional computing hardware , such as any processor , memory , input\/output features  and the like. Processor  may be implemented using one or more of microprocessors, microcontrollers, processing cores and\/or other computing resources spread across any number of distributed or integrated systems, including any number of \u201ccloud-based\u201d or other virtual systems. Memory  represents any non-transitory short or long term storage capable of storing programming instructions for execution on processor , including any sort of random access memory (RAM), read only memory (ROM), flash memory, magnetic or optical mass storage, and\/or the like. Input\/output features  represent conventional interfaces to networks (e.g., to network , or any other local area, wide area or other network), mass storage, display devices, data entry devices and\/or the like. In a typical embodiment, processing resources, communications interfaces and other features of hardware  using any sort of conventional or proprietary operating system. As noted above, server  may be implemented using a cluster of actual and\/or virtual servers operating in conjunction with each other, typically in association with conventional network communications, cluster management, load balancing and other features as appropriate.","Data and services provided by server  can be retrieved using any sort of personal computer, mobile telephone, tablet or other network-enabled client device  on network . Typically, the user operates a conventional browser or other client program  to contact server  via network  using, for example, the hypertext transport protocol (HTTP) or the like. HTTP or other communications based upon the TCP\/IP protocol stack may use the IP addresses  described above; other types of protocols (e.g., voice or other telephony protocols, military protocols, secure or proprietary protocols and\/or the like) may equivalently use different types of addresses  as appropriate.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","151","152","102","102","206","155","210","102","155","212","213","214","152"]},"In various embodiments that support two or more application servers , the various servers  may share configuration information with each other as appropriate (function ). The servers A-C in , for example, may be configured to replicate DNS data or other configuration information so that each server  has a current and accurate copy of the configuration information for all of the servers A-C. Exchanges or updates of configuration information may be scheduled on any regular or irregular time basis. Equivalently, configuration updates may be shared between servers A-C in real time (or near real time) as changes are made to the data. Other embodiments may use different data sharing arrangements or schedules, as desired.","Configuration data may be obtained from one or more application servers  in any manner (function ). In various embodiments, the validation system  requests configuration data from the server(s)  (function ). Data may be requested in response to an administrator or other user manually executing a software program or script on validation system , for example. Alternately, requests  may be automatically scheduled (e.g., using a CRON-type scheduler executing on validation system ) to execute on any regular or irregular time basis. Still other embodiments may schedule requests  for configuration data at times when application server  is known to be relatively idle, or at times when application server  is observed or expected to have a relatively low processing load (e.g., during hours when most users of the particular system are asleep, during weekends or holidays, or the like). Although  shows only one request  placed to a single server  that can be used to obtain configuration data  from multiple servers  due to the sharing function , other embodiments may place multiple requests  to any number of other servers  to separately obtain configuration data  from those servers as needed. The various requests  to different servers  may be staggered in time, or placed at the same time, as appropriate.","In some implementations, application server  confirms that validation system  is authorized to receive configuration data (function ). Some implementations may simply check the IP or other address of validation system  to verify that the request  is originating from a particularly-known system, or at least a system that is operating within an approved network, subnet, domain, address range and\/or other approved location. Other implementations may include further security mechanisms to require validation system  to provide a credential (e.g., userid\/password, digital signature, biometric data and\/or other credential) prior to receiving the configuration data.","Configuration data is received in any format (function ). Configuration data may be received in a batch mode, for example, or data about particular domains or other settings may be individually received as desired. Various embodiments may provide the requested data in any organized format, such as a table or the like. DNS data, for example, could be provided as a table with each listing representing information for a particular domain supported by application server . The listing for each domain may include, for example, the domain text, an identifier of the tenant associated with the domain, an identifier of a particular application server A-C that hosts applications associated with the domain or tenant, and\/or a description of the domain as follows:\n\n","To continue the \u201cAcme\u201d and \u201cJoe's Bait and Tackle\u201d example presented above, an exemplary data structure that includes data about these two domains could appear, in one embodiment, as follows:\n\n","The validation system  queries (function ) the public DNS service  (or another information service on network  as appropriate) to obtain the publicly-distributed information for the same domains (function ). The public information may be received in any manner (function ). In various embodiments that process DNS configuration information, public DNS information may be obtained through conventional NSLOOKUP queries to a DNS service  on network . An exemplary NSLOOKUP response  from service  may appear as follows:\n\n","In this example, an NSLOOKUP query on the \u201cacme.appserver.com\u201d domain shows that the public information available from the DNS system  associates the domain with a server \u201cnal.appserver.com\u201d at the IP address 209.14.234.101. Other embodiments would provide additional and\/or different information as appropriate. For example, information returned from ping, host, dig and\/or other queries may be equivalently processed, as desired.","\u201cPublic\u201d in this context simply means that the information is distributed or made available on network . If network  is a private or non-public network, the information provided by service  may not be available to members of the general public even though the information is \u201cpublic\u201d to users of network .","Rather than querying each domain individually, as described above, equivalent embodiments may simply request information about an entire domain or range of network addresses as appropriate. For example, some DNS systems  may support \u201czone file\u201d or similar queries  that provide a listing of all domains associated with a particular network address, a particular range of network addresses, or a particular higher-level domain name (e.g., all of the subdomains associated with \u201cappserver.com\u201d or the like). Receiving and parsing a batch list may be more efficient than positing individual queries  in some embodiments.","Data received in function  and\/or information received in function  can be parsed and stored in memory at the validation system  as appropriate. The configuration data  received from the application server  is then compared (function ) to configuration information  received from the public service  to identify any anomalies between the two. As noted above, the parsing and comparing functions may be performed by a software application, applet, script (e.g., a PYTHON script) or the like executing on validation system .","Any differences or other anomalies between the server data  and the public information  may be reported out as desired (function ). The report may be provided to a file or display that is readable by a human operator, for example. Reports of one or more anomalies may also be provided via email, text message, RSS or similar data feed, instant message and\/or any other format, as desired. Other embodiments may report the anomalies to another data processing routine that is able to make changes or otherwise repair the anomalies, as desired.","Various embodiments may further repair any differences or other anomalies that are identified (function ). Anomalies may be repaired on an automatic basis without further intervention from the administrator or user, or on a manual basis wherein the administrator initiates repair of one or more anomalies. To update the information for a particular domain name, for example, the validation system suitably contacts a service provider  using an API or other interface that allows changes to the configuration information. In some cases, configuration information may be updated by replacing the current entry entirely (e.g., by deleting the current entry and then adding a new entry as a replacement).","The updated configuration information then propagates throughout the DNS or other public service , as appropriate (function ). Typically, service provider  has automated processes for distributing the updated information to the public service  to ensure adequate distribution on a relatively timely manner, considering the nature and scope of the DNS or other distribution service .","Various embodiments may additionally verify that the updated information is being distributed by service  (functions , ). After a suitable period of time has elapsed to allow the updated information to propagate through the network, validation system  may place a subsequent query  to the DNS or other public service  and process the resulting response  to verify that the information about the domain is correct. The successful and\/or unsuccessful results may be reported to an administrator, user or other process as desired.","As noted above, the various functions and features of process  may be carried out with any sort of hardware, software and\/or firmware logic that is stored and\/or executed on any platform. Some or all of method  may be carried out, for example, by logic executing within one or more systems shown in . For example, various functions shown in  (e.g., functions , , ) may be partially or entirely implemented using software or firmware logic that is stored in memory  and executed by processor  as part of one or more application platforms A-C. Other features (e.g., functions , , , , , , , ) may be partially or entirely executed using software, firmware or other logic that is stored and executed by hardware  or other features of validation system , as appropriate. The particular hardware, software and\/or firmware logic that implements any of the various functions shown in , however, may vary from context to context, implementation to implementation, and embodiment to embodiment in accordance with the various features, structures and environments set forth herein. The particular means used to implement each of the various functions shown in , then, could be any sort of processing structures that are capable of executing software and\/or firmware logic in any format, and\/or any sort of application-specific or general purpose hardware, including any sort of discrete and\/or integrated circuitry residing in any sort of host system, as desired.","Various exemplary systems and processes for validating domain name services and\/or other configuration information have therefore been described. The term \u201cexemplary\u201d is used herein to represent one example, instance or illustration that may have any number of alternates. Any implementation described herein as \u201cexemplary\u201d should not necessarily be construed as preferred or advantageous over other implementations.","Although several exemplary embodiments have been presented in the foregoing description, it should be appreciated that a vast number of alternate but equivalent variations exist, and the examples presented herein are not intended to limit the scope, applicability, or configuration of the invention in any way. To the contrary, various changes may be made in the function and arrangement of the various features described herein without departing from the scope of the claims and their legal equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWING FIGURES","p":["Exemplary embodiments will hereinafter be described in conjunction with the following drawing figures, wherein like numerals denote like elements, and",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
