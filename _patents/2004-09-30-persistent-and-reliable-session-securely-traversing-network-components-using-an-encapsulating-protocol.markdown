---
title: Persistent and reliable session securely traversing network components using an encapsulating protocol
abstract: The invention relates to systems and methods for reestablishing client communications by securely traversing network components using an encapsulating communication protocol to provide session persistence and reliability. A first protocol that encapsulates a plurality of secondary protocols is used to communicate over a network to provide session persistence and a reliable connection between a client and a host service via a first protocol service. A ticket authority generates a first ticket and a second ticket associated with the client. The first ticket is provided to the client and the client uses the first ticket to establish a communication session with the first protocol service. The second ticket is provided to the first protocol service and the first protocol service uses the second ticket to establish a communication session with the host service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07984157&OS=07984157&RS=07984157
owner: Citrix Systems, Inc.
number: 07984157
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20040930
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND INFORMATION","SUMMARY OF THE INVENTION","DESCRIPTION"],"p":["The present invention is a continuation-in-part of U.S. patent application Ser. No. 10\/083,324 filed Feb. 26, 2002, entitled \u201cSECURE TRAVERSAL OF NETWORK COMPONENTS\u201d, and a continuation-in-part of U.S. patent application Ser. No. 10\/683,381, filed Oct. 10, 2003 entitled \u201cENCAPSULATING PROTOCOL FOR SESSION PERSISTENCE AND RELIABILITY\u201d, of which the contents are incorporated herein by reference.","The invention generally relates to network communications. More particularly, the invention relates to systems and methods for reestablishing client communications by securely traversing network components using an encapsulating communication protocol to provide session persistence and reliability.","Communications over a network between two computers, for example, a client and a server, can be implemented using a variety of known communication protocols. Typically, the client communicates with the server to download content from the server over the network. For example, the server may host one or more applications accessible by the client. Furthermore, the client may communicate with the server via a proxy that is typically a security gateway, such as a router or firewall, through which content from the server passes. Additionally, the server may include a firewall to prohibit unauthorized communications to and from the server. The client gains access to the server and the content of the server through the security of the proxy and the firewall of the server. Often, however, the network connection traversing to the server via a proxy is susceptible to breakdown. For instance, a wireless connection between a client and a proxy is often unreliable. In other cases, the network connection is intermittent. As such, a connection can be lost when one enters an elevator or tunnel and may only be restored following one's exit from the elevator or tunnel.","If an established communication session between the client and the server computer abnormally terminates, the client generally has to re-establish the connection by starting a new communication session. To begin the new communication session, the user typically has to retransmit authentication credentials, such as a login\/password pair, to the proxy and the server computer so that the user can be authorized for the new communication session. This retransmission of the authentication credentials of a user across multiple communication sessions repeatedly exposes the authentication credentials of that user to potential attackers, thereby decreasing the level of security of the authentication credentials. Furthermore, if an attacker bypasses the security of the proxy or the firewall of the server, the attacker may gain access to the content of the server without encountering additional security. In addition, having the user re-enter authentication credentials is often a slow process that may result in user frustration and inefficiency.","When communicating over a network connection using many current protocols, data packets are lost when the network connection is disrupted. For example, when communicating via a standard TCP network connection, data buffers are typically flushed upon disruption of the connection. As such, when the network connection is restored, a networked application, such as a user session on a server, is unable to resume where it was prior to disruption. Typically an error message is displayed, adding user frustration to inconvenience. Moreover, communicating over a network with many protocols often requires frequent re-establishment of the transport connection. For example, using HTTP, either on its own or on conjunction with a proxy protocol, to browse a website over a standard TCP connection requires, in addition to a new HTTP connection for each resource, the closure of a previous TCP\/proxy protocol connection and the opening of a new TCP\/proxy protocol connection for each resource.","Thus, it is desirable to provide a technique for re-establishing a communication session between a client computer and a server computer without requiring repeated transmission of the client's authentication credentials and while increasing the protection of the server from an unauthorized user. Improved systems and methods are needed for re-establishing a communication session between a client computer and a server computer without repeatedly transmitting the authentication credentials to securely traverse multiple network components.","The present invention relates to systems and methods for reconnecting a client to a persistent and reliable connection with a host service, in which the connection securely traverses network components. Reconnecting the client includes re-establishing the client's connection to the host service and re-authenticating the user of the client to the host service, including re-authenticating one or more of the connections between the client and the host service. A persistent and reliable connection to a host service is maintained by one or more first protocol services on behalf of a client. The first protocol services ensure that data communicated between the client and the host service is buffered and maintained during any disruption in the network connection between the client and the host service. For example, a temporary disruption in a network connection may occur when a client, such as a mobile client, roams between different access points in the same network, or when a client switches between networks (e.g., from a wired network to a wireless network).","In addition to maintaining buffered data during a network disruption, the first protocol service re-authenticates the client to the host service when re-establishing the client's connection to the first protocol service. This prevents the user of the client from re-entering authentication credentials to re-establish its connection with the host service. Moreover, each of the multiple connections between the client and the host service, for example, via a first protocol service acting as a proxy, is re-authenticated to provide additional security protection in accessing the host service. After re-authenticating, the first protocol service re-links the client's connection to the host service. In summary, the present invention provides for re-establishing a network connection between a client and a host service to securely traverse network components to the server and without the user reentering authentication credentials.","In one aspect, the present invention relates to a method for re-connecting a client to a host service. The method comprises the step of providing a communication session between a client and a host service via a first connection between the client and a first protocol service, and a second connection between the first protocol service and the host service. The method further includes detecting a disruption in one of the first connection and the second connection, and maintaining the other of one of the first connection and the second connection. In another step of the method, the first protocol service obtains a first ticket and a second ticket, and validates the first ticket to re-establish the disrupted connection. The first protocol service validates the second ticket to continue use of the maintained connection, and links the re-established connection to the maintained connection.","In one embodiment, the method comprises maintaining the communication session during the disruption in the disrupted connection. In another embodiment, the method further comprises generating one of the first ticket and the second ticket by at least one of the first protocol service and a ticket authority. The method may include validating, by the ticket authority, at least one of the first ticket and the second ticket.","In another embodiment, the method further comprises authenticating the client to a web server and transmitting by the web server the first ticket to the client. The method may further comprise authenticating, by the host service, the client upon establishment of the communication session. In one embodiment, the method includes transmitting, by the client, the first ticket to the first protocol service.","In a further embodiment, the first protocol service comprises a proxy server. In another embodiment, the first protocol service comprises a security gateway. The method may further include the client and the first protocol service communicating using a first protocol encapsulating a second protocol, and the first protocol service and the host service communicating using the second protocol.","In another embodiment, the first ticket is valid for the first connection, and the second ticket is valid for the second connection. Optionally, the second ticket may be disabled until the first ticket is validated. In one embodiment, the re-established connection is linked to the maintained connection after the first ticket and the second ticket are validated.","In a further embodiment, either or both of the first connection and the second connection may comprise a plurality of connections connected via one of an intermediary node and one or more first protocol services. The method may further include generating a third ticket for at least one of the plurality of connections. The third ticket may be valid for the least one of the plurality of connections.","In another aspect, the present invention relates to a system for re-connecting a client to a host service. The system comprises a client and a first protocol service. The client establishes a communication session with a host service via a first connection. The first protocol service establishes the first connection with the client and a second connection with the host service. The first protocol service maintains a connection comprising at least one of the first connection and the second connection. Furthermore, the first protocol service validates a first ticket to re-establish a disrupted connection in one of the first connection and the second connection, and validates a second ticket to use the other of the one of the first connection and the second connection. The system further includes the first protocol service linking the re-established connection to the maintained connection.","In one embodiment, the system further comprises a ticket authority generating at least one of the first ticket and the second ticket. In another embodiment, the first protocol service maintains the communication session during a disruption in the disrupted connection. In a further embodiment, the first protocol service generates at least one of the first ticket and the second ticket. The system may include the ticket authority validating at least one of the first ticket and the second ticket.","In another embodiment, the system further comprises a web server. The web server authenticates the client, and, in one embodiment, transmits the first ticket to the client. In a further embodiment, the client transmits the first ticket to the first protocol service. In yet another embodiment, the host service authenticates the client upon establishment of the communication session.","In one embodiment, the first protocol service comprises a proxy server, and, in another embodiment, the first protocol service may comprise a security gateway. The system may include the client and the first protocol service communicating using a first protocol encapsulating a second protocol, and the first protocol service and the host service communicating using the second protocol.","In a further embodiment, the first ticket is valid for the first connection, and the second ticket is valid for the second connection. Additionally, the second ticket may be disabled until the first ticket is validated. In one embodiment, the first protocol service links the re-established connection to the maintained connection after the first ticket and the second ticket are validated.","In yet a further embodiment, one of the first connection and the second connection comprises a plurality of connections connected via one of an intermediary node and one or more first protocol services. The system further includes generating a third ticket for at least one of the plurality of connections, and in one embodiment, the third ticket is valid for the least one of the plurality of connections.","The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.","Certain embodiments of the present invention are described below. It is, however, expressly noted that the present invention is not limited to these embodiments, but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover, it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations, even if such combinations or permutations are not expressly made herein, without departing from the spirit and scope of the invention.","The illustrative embodiment of the present invention provides systems and methods for establishing a reliable and persistent connection between a client and a host service, and reconnecting the connection when there is a disruption in the connection. A client establishes a communication session with a host service via a first connection between a client and a first protocol service and a second connection between the first protocol service and the host service. The client communicates with the first protocol service using a first protocol and the first protocol service communicates with the host service using a second protocol. The second protocol is communicated from the client to the first protocol service encapsulated within the first protocol communications. When a disruption in the either the first connection or second connection is detected, the first protocol service re-establishes the disrupted connection while maintaining the connection that is not disrupted. The disrupted connection is linked with the maintained connection to re-connect the client to the host service.","Furthermore, the illustrative embodiment of the present invention provides systems and methods for securely traversing network components in establishing and reconnecting a client to a host service. The first protocol service may act as a proxy between the client and the host service and as such, may comprise a security gateway. The first protocol service obtains a first ticket and a second ticket from a ticket authority. The first ticket is used for validating the connection between the client and the first protocol service, and the second ticket is used for validating the connection between the first protocol service and the host service. The second ticket may be disabled until the first ticket is validated. The first protocol service validates the first ticket in re-establishing or maintaining the use of the first connection, and the second ticket in re-establishing or maintaining the use of the second connection. When the first and second tickets are validated and the connections re-established, the first protocol service links the first connection with the second connection to maintain the client's communication session with the host service. Additional tickets can be generated and validated for re-establishing or maintaining the user additional connections, or \u201chops\u201d, between the client and the host service. In this manner, each connection, or \u201chop\u201d, between the client and the host service is validated.","Referring to , in general, the invention pertains to network communications and can be particularly useful for providing a client with a reliable connection to a host service. In a broad overview, a system  for network communications includes a client  (e.g., a first computing device) in communication with a first protocol service  (e.g., a second computing device) over a network . Also included in the system  are a plurality of host services -residing on a host node  (e.g., third computing device) that are in communication with the first protocol service  and, through the first protocol service  and over the network , with the client . Alternatively, in another illustrative embodiment of the invention, and with reference now to , the first protocol service  and the host services -are not implemented on separate computing devices, as shown in , but, rather, they are incorporated into the same computing device, such as, for example, host node . In , the host services -communicate with the first protocol service  over the network \u2032. The system  can include one, two, or any number of host nodes -","In one embodiment, the networks  and \u2032 are separate networks, as in . The networks  and \u2032 can be the same network , as shown in . In one embodiment, the network  and\/or the network \u2032 is, for example, a local-area network (LAN), such as a company Intranet, or a wide area network (WAN), such as the Internet or the World Wide Web. The client , the first protocol service , the host services -, and\/or the host nodes -can be connected to the networks  and\/or \u2032 through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above.","The client  is in communication with the first protocol service  over the client-first protocol service communication channel  and also in communication with the web server  over the client-web server communication channel . The first protocol service  is in communication with the ticket authority  over a first protocol service-authority communication channel  and the web server  is in communication with the ticket authority  over a web server-authority communication channel . The first protocol service  is also in communication with the host node  over first protocol service-server communication channels -. In another embodiment, the web server  can communicate with the host node  over an agent-server communication channel . Similarly, the host node  can communicate with the ticket authority  over a ticket-server communication channel . In one embodiment, the respective communication channels -, , , , , ,  are established over the network .","Example embodiments of the communication channels -, , , , , ,  include standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25), broadband connections (ISDN, Frame Relay, ATM), and wireless connections. The connections over the communication channels -, , , , , ,  can be established using a variety of communication protocols (e.g., HTTP, HTTPS, TCP\/IP, IPX, SPX, NetBIOS, Ethernet, RS232, messaging application programming interface (MAPI) protocol, real-time streaming protocol (RTSP), real-time streaming protocol used for user datagram protocol scheme (RTSPU), the Progressive Networks Multimedia (PNM) protocol developed by RealNetworks, Inc. of Seattle, Wash., manufacturing message specification (MMS) protocol, and direct asynchronous connections).","In another aspect,  shows a block diagram of an embodiment of a communications system  for secure delivery of content. In one embodiment, the first protocol service  comprises a proxy  and the system  includes a web server , and a ticket authority . The system  also includes two firewalls ,  which prohibit unauthorized communications to\/from the host node . The network between the firewalls ,  is often referred to as a \u201cdemilitarized zone,\u201d (DMZ) . In one embodiment, the DMZ  includes the ticket protocol service , comprising a proxy , and the web server .","The DMZ  separates the host services -from the components (e.g., first protocol service ) of the system  that are accessible by unauthorized individuals. As described above, the DMZ  is delineated with two firewalls ,  that prohibit unauthorized communication. The first firewall  and the second firewall  each apply a set of policy rules to determine which messages can traverse the DMZ . In one embodiment, the first firewall  and the second firewall  apply the same set of policy rules. Alternatively, the first firewall  and the second firewall  may apply different sets of policy rules. Each firewall ,  can be a router, computer, or any other network access control device. In another embodiment, the system  includes one of the firewalls ,  or no firewall , . In another embodiment, one of the firewalls ,  is deployed on the host node . In another embodiment (not shown), one or more of the firewalls ,  are deployed on an intermediary node.","In one embodiment, the first protocol service  includes a proxy  which comprises a security gateway through which messages over the client-first protocol service communication channel  must pass. In one embodiment, the network firewall  repudiates any incoming message from the client-first protocol service communication channel  that does not have the first protocol service  as its destination. Likewise, the network firewall  repudiates any outgoing message for the client-first protocol service communication channel  unless its source is the first protocol service . Although illustrated as a proxy  of the first protocol service , the security gateway can alternatively be a router, firewall, relay, or any network component that can provide the necessary security. In another embodiment, the proxy  is a network component separate from the first protocol service  that may run on the same computing device of the first protocol service  or on a different computing device. For example, in , the proxy  is separated from the first protocol service . The proxy  is in the DMZ  with the web server . Multiple instances of the first protocol service  are running on each of the host nodes -. Each first protocol service  communicates with the proxy  over the communication channel , which is the client-first protocol service communication channel . In this case, the proxy  component is an intermediary for securely passing communications between the client  and the first protocol service .","The network  can be a local-area network (LAN), a wide area network (WAN), or a network of networks such as the Internet or the World Wide Web (i.e., web). The respective communication channels -, , , , , ,  may each be part of different networks. For example, the client-first protocol service communication channel  can belong to a first network (e.g., the World Wide Web) and the client-web server communication channel  can belong to a second network (e.g., a secured extranet or Virtual Private Network (VPN)). In other embodiments, the network  spans the DMZ  as well as the server farm  and the same communication protocol is used throughout. In some embodiments, no firewall  separates the first protocol service  and web server  from the host node  and ticket authority .","Example embodiments of the communication channels -, , , , , ,  include standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25), broadband connections (ISDN, Frame Relay, ATM), and wireless connections. The connections over the communication channels -, , , , , ,  can be established using a variety of communication protocols (e.g., HTTP, HTTPS, TCP\/IP, IPX, SPX, NetBIOS, Ethernet, RS232, messaging application programming interface (MAPI) protocol, real-time streaming protocol (RTSP), real-time streaming protocol used for user datagram protocol scheme (RTSPU), the Progressive Networks Multimedia (PNM) protocol developed by RealNetworks, Inc. of Seattle, Wash., manufacturing message specification (MMS) protocol, and direct asynchronous connections).","The client  can be any workstation, desktop computer, laptop, handheld computer, mobile telephone, smart or dumb terminal, network computer, wireless device, information appliance, minicomputer, mainframe computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. Additionally, the client  can be a local desktop client on a local network  or can be a remote display client of a separate network \u2032. The client  can include, for example, a visual display device (e.g., a computer monitor), a data entry device (e.g., a keyboard), persistent and\/or volatile storage (e.g., computer memory), a processor, and a mouse. Operating systems supported by the client  can include any member of the WINDOWS family of operating systems from Microsoft Corporation of Redmond, Wash., Macintosh operating system, JavaOS, and various varieties of Unix (e.g., Solaris, SunOS, Linux, HP-UX, A\/IX, and BSD-based distributions), or any other operating system capable of supporting the client  in performing the operations described herein.","In one embodiment, the client  includes a web browser , such as INTERNET EXPLORER developed by Microsoft Corporation in Redmond, Wash., to connect to the web. In a further embodiment, the web browser  uses the existing Secure Socket Layer (SSL) support to establish the secure client-web server communication channel  to the web server . SSL is a secure protocol developed by Netscape Communication Corporation of Mountain View, Calif., and is now a standard promulgated by the Internet Engineering Task Force (IETF).","In some embodiments, as shown in , a client agent  is included within the client . The client agent  may be used for establishing and exchanging communications with the host service -over the client-first protocol service communication channel . The client agent  can be, for example, implemented as a software program and\/or as a hardware device, such as, for example, an ASIC or an FPGA. The client agent  can use any type of protocol and it can be, for example, an HTTP client agent, an FTP client agent, an Oscar client agent, or a Telnet client agent. In one embodiment, the client agent  is an ICA client, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla., and is hereafter referred to as ICA client . Other embodiments of the client agent  include an RDP client, developed by Microsoft Corporation of Redmond, Wash., a data entry client in a traditional client\/server application, an ActiveX control, or a java applet. In some embodiments, the client agent  is itself configured to communicate using the first protocol. In some embodiments (not shown), the client  includes a plurality of client agents -, each of which communicates with a host service -, respectively. Moreover, the output of an application executing on the host service -can be displayed at the client  via, for example, the client agent  or the web browser .","In another embodiment, a standalone client agent is configured to enable the client  to communicate using the first protocol. The standalone client agent can be incorporated within the client  or, alternatively, the standalone client agent can be separate from the client . The standalone client agent is, for example, a local host proxy. In general, the standalone client agent can implement any of the functions described herein with respect to the client agent .","Similarly, with reference to , each of the first protocol service  and the host services -can be provided on any computing device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. Alternatively, where the functionality of the first protocol service  and the host services -are incorporated into the same computing device, such as, for example, one of the host nodes -, as in , the first protocol service  and\/or the host services -can be implemented as a software program running on a general purpose computer and\/or as a special purpose hardware device, such as, for example, an ASIC or an FPGA.","Similar to the client , each of the host nodes -can be any computing device described above (e.g. a personal computer) that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. Each of the host nodes -can establish communication over the communication channels -using a variety of communication protocols (e.g., ICA, HTTP, TCP\/IP, and IPX). SPX, NetBIOS, Ethernet, RS232, and direct asynchronous connections).","In one embodiment, each of the host services -hosts one or more application programs that are remotely available to the client . Applications made available to the client  for use may be referred to as published applications. The same application program can be hosted by one or any number of the host services -. Examples of such applications include word processing programs, such as MICROSOFT WORD, and spreadsheet programs, such as MICROSOFT EXCEL, both of which are available from Microsoft Corporation of Redmond, Wash. Other examples of application programs that may be hosted by any or all of the host services -include financial reporting programs, customer registration programs, programs providing technical support information, customer database applications, and application set managers. Moreover, in one embodiment, one or more of the host services -is an audio\/video streaming server that provides streaming audio and\/or streaming video to the client . In another embodiment, the host services -include file servers that provide any\/all file types to the client . In one embodiment, the host services -can communicate with the client  using a presentation protocol such as ICA, from Citrix Systems, Inc. of Ft. Lauderdale, Fla. or RDP, from Microsoft Corporation of Redmond, Wash.","In a further embodiment, the host node  is a member of a server farm , or server network, which is a logical group of one or more servers that are administered as a single entity. In one embodiment, a server farm  includes multiple host nodes -(generally ). Although the embodiment shown in  has three host nodes -, the server farm  can have any number of host nodes , or servers. In other embodiments, the server farm  is a protected network that is inaccessible by unauthorized individuals, such as corporate Intranet, Virtual Private Network (VPN), or secure extranet. Additionally, the servers making up the server farm  may communicate over any of the networks described above (e.g., WAN, LAN) using any of the protocols discussed.","The ticket authority , which in the embodiment shown in  is part of the server farm , issues one or more tickets to authenticate the client . In particular, the ticket authority  enables authentication of the client  over one communication channel (i.e., the client-web server communication channel ) based on authentication credentials. The ticket authority  further enables the client  to be authenticated to another communication channel (i.e., client-first protocol service communication channel ) without having the client  repeatedly provide authentication credentials on the other communication channel.","In one embodiment, the ticket authority  is a stand-alone network component. In other embodiments, a modular ticket authority  is a software module residing on one or more host nodes . For example, there may be a ticket authority  for each of the host nodes -as shown in . In this embodiment, the web server  may communicate with the ticket authority  and\/or the host node  over the agent-server communication channel . In another embodiment, the ticket authority  may reside on an intermediary node separate from any of the host nodes -","In one embodiment, the ticket authority  generates a first ticket and a second ticket. In some embodiments, the tickets are both nonces. In further embodiments, the tickets are generated using a cryptographic random number generator that has been suitably seeded with randomness. The first ticket is transmitted to the client  and is used to establish a first communication session between the client  and the first protocol service . The second ticket is transmitted to the first protocol service  and is used to establish a second communication session between the first protocol service  and the host node .","In one embodiment, the web server  delivers web pages to the client . The web server  can be any personal computer (e.g., Macintosh computer, a personal computer having an Intel microprocessor, developed by Intel Corporation of Santa Clara, Calif., a personal computer having an AMD microprocessor, developed by Advanced Micro Devices, Inc. of Sunnyvale, Calif., etc.), Windows-based terminal, Network Computer, wireless device (e.g., cellular phone), information appliance, RISC Power PC, X-device, workstation, mini computer, main frame computer, personal digital assistant, or other communications device that is capable of establishing the secure client-web server communication channel  with the client .","In another embodiment, the web server  provides a corporate portal, also referred to as an Enterprise Information Portal, to the client . Enterprise portals are company web sites that aggregate, personalize and serve applications, data and content to users, while offering management tools for organizing and using information more efficiently. In other embodiments, the web server  provides a web portal, or Internet portal, to the client . A web portal is similar to a corporate portal but typically does not include business-specific information.","In one embodiment, a user of the client  employs the web browser  to authenticate the user to the web server . In one embodiment, the client  transmits user credentials, such as login and password information, to the web server . The web server  verifies that the user has access to the server network .","In a further embodiment, the web browser  uses SSL to establish the secure client-web server communication channel . The web browser  can alternatively connect to the web server  over the client-web server communication channel  using other security protocols, such as, but not limited to, Secure Hypertext Transfer Protocol (SHTTP) developed by Terisa Systems of Los Altos, Calif., HTTP over SSL (HTTPS), Private Communication Technology (PCT) developed by Microsoft Corporation of Redmond, Wash., and the Transport Level Security (TLS) standard promulgated by the Internet Engineering Task Force (IETF). In one embodiment, the web server  transmits a web portal or enterprise portal, as described above, to the client  upon validation of the user to enable the client  to request an application or a server desktop, for example, to be remotely displayed on the client .","The client-web server communication channel  is any secure communication channel. In some embodiments, communications over channel  are encrypted. In certain of these embodiments, the client  and the web server  may communicate using the Secure Socket Layer (SSL) of the HyperText Transfer Protocol (HTTPS). Alternatively, the client  and the web server  may use other encryption techniques, such as symmetric encryption techniques, to protect communications.","Further, in one embodiment the client-first protocol service communication channel  can be established by using, for example, a presentation services protocol such as Independent Computing Architecture (ICA) protocol, manufactured by Citrix Systems, Inc. of Fort Lauderdale, Fla. ICA is a general-purpose presentation services protocol designed to run over industry standard network protocols, such as TCP\/IP, IPX\/SPX, NetBEUI, using industry-standard transport protocols, such as ISDN, frame relay, and asynchronous transfer mode (ATM). The ICA protocol provides for virtual channels, which are session-oriented transmission connections that can be used by application-layer code to issue commands for exchanging data. In other embodiments, the client-first protocol service communication channel  can be established using the thin X protocol or the Remote Display Protocol (RDP), developed by Microsoft Corporation of Redmond, Wash.","Although described as establishing a first communication session between the client  and the first protocol service  and a second communication session between the first protocol service  and the host node , the communication session can be viewed as a single, logical communication session between the client  and the host service .","Referring still to the illustrative embodiments of , the client  is configured to establish a connection  between the client  and a first protocol service  over the network  using a first protocol. For its part, the first protocol service  is configured to accept the connection . The client  and the first protocol service  can, therefore, communicate with one another using the first protocol as described below in reference to  and .","As also described further below, the first protocol service  is, in one embodiment, itself configured to communicate using the first protocol. The first protocol service  is configured to establish a connection -between the first protocol service  and the host service -, respectively. For example, the first protocol service  can establish a connection between the first protocol service  and one host service and a connection between the first protocol service  and another host service . In one embodiment, the first protocol service  separately establishes such connections -(i.e., the first protocol service  establishes one connection at a time). In another embodiment, the first protocol service  simultaneously establishes two or more of such connections -","In yet another embodiment, the first protocol service  can concurrently establish and maintain multiple connections -. The first protocol service  is configured to provide two or more connections -without interrupting the connection  with the client . For example, the first protocol service  can be configured to establish the connection between the first protocol service  and the host service when a user of the client  requests execution of a first application program residing on the host service . When the user ends execution of the first application program and initiates execution of a second application program residing, for example, on the host service , the first protocol service  is, in one embodiment, configured to interrupt the connection and establish the connection between the first protocol service  and the host service , without disrupting the connection  between the first protocol service  and the client .","The first protocol service  and the host services -can communicate over the connections -, respectively, using any one of a variety of secondary protocols, including, but not limited to, HTTP, FTP, Oscar, Telnet, the ICA remote display protocol from Citrix Systems, Inc. of Fort Lauderdale, Fla., and\/or the RDP remote display protocol from Microsoft Corporation of Redmond, Wash. For example, the first protocol service  and the host service can communicate over the connection using the ICA remote display protocol, while the first protocol service  and the host service can communicate over the connection using the RDP remote display protocol.","In one embodiment, the secondary protocol used for communicating between the first protocol service  and a host service , such as, for example, the ICA remote display protocol, includes a plurality of virtual channels. A virtual channel is a session-oriented transmission connection that is used by application-layer code to issue commands for exchanging data. For example, each of the plurality of virtual channels can include a plurality of protocol packets that enable functionality at the remote client . In one embodiment, one of the plurality of virtual channels includes protocol packets for transmitting graphical screen commands from a host service , through the first protocol service , to the client , for causing the client  to display a graphical user interface. In another embodiment, one of the plurality of virtual channels includes protocol packets for transmitting printer commands from a host service , through the first protocol service , to the client , for causing a document to be printed at the client .","In another embodiment, the first protocol is a tunneling protocol. The first protocol service  encapsulates a plurality of secondary protocols, each used for communication between one of the host services -and the first protocol service , within the first protocol. As such, the host services -and the first protocol service  communicate with the client  via the plurality of secondary protocols. In one embodiment, the first protocol is, for example, an application-level transport protocol, capable of tunneling the multiple secondary protocols over a TCP\/IP connection.","Referring to , communications between the client  and the first protocol service  via the connection  take the form of a plurality of secondary protocols -(e.g., HTTP, FTP, Oscar, Telnet, ICA, and\/or RDP) encapsulated within a first protocol . This is indicated by the location of secondary protocols -inside the first protocol . Where secure communication is not called for, the first protocol  can be, as illustrated in , communicated over an unsecured TCP\/IP connection .","Referring now to , if secure communication is used, the first protocol  is communicated over an encrypted connection, such as, for example, a TCP\/IP connection  secured by using a secure protocol  such as the Secure Socket Layer (SSL). SSL is a secure protocol first developed by Netscape Communication Corporation of Mountain View, Calif., and is now a standard promulgated by the Internet Engineering Task Force (IETF) as the Transport Layer Security (TLS) protocol and described in IETF RFC-2246.","Thus, the plurality of secondary protocols -are communicated within the first protocol  with () or without () a secure protocol  over the connection . The secondary protocols that can be used to communicate over the connections -include, but are not limited to, HTTP, FTP, Oscar, Telnet, ICA, and RDP. Moreover, in one embodiment, at least one of the secondary protocols, as described above, includes a plurality of virtual channels, each of which can include a plurality of protocol packets enabling functionality at the remote client . For example, in one embodiment, one host service is a web server, communicating with the first protocol service  over the connection using the HTTP protocol, and another host service is an application server, communicating with the first protocol service  over the connection using the ICA protocol. The host service generates both protocol packets for transmitting graphical screen commands to the client , for causing the client  to display a graphical user interface, and protocol packets for transmitting printer commands to the client , for causing a document to be printed at the client .","Another aspect of the present invention is the method and systems described herein reduce the number of times network connections are opened and closed. In one embodiment, the first protocol  allows the secondary protocol connections -tunneled therein, such as, for example, an HTTP connection , to be opened and\/or closed, repetitively, without also requiring the transport connection over which the first protocol  is communicated (e.g., TCP connection  and\/or ), the secure protocol connection , or the first protocol connection  itself to similarly be repetitively opened and\/or closed. Without the encapsulation of the first protocol , the secondary protocol -may frequently open and close network connections, such as TCP connections. This would add significant delays and overhead to the system. These delays and overhead would be further increased by the use of a secure encapsulation protocol , such as SSL, which have significant overhead in establishing network connections. By encapsulating the secondary protocol -within the first protocol  and maintaining the connection of the transport connection (, ), the secondary protocols -, as part of the payload of the first protocol , do not need to perform frequent and costly open and closes of the network connection . Furthermore, since the secondary protocols -can be communicated within the first protocol  with a secure protocol , the secondary protocols -also do not need to open and close secured connections such as with SSL. The transport connection (, ) establishes and maintains the network connection  so that the encapsulated second protocols -can be communicated without repetitively opening and closing the secured or unsecured network connection . This significantly increases the speed of operation in communicating the secondary protocols -","As described above, the secondary protocols -carry protocol packets related to applications using such protocols as HTTP, FTP, Oscar, Telnet, RDA or ICA. The secondary protocol packets -transport data related to the application functionality transacted between the client  and the host service -. For example, a user on the client  may interact with a web page provided by a host service -. In transactions between the client  and the host service -, the secondary protocol -encapsulated in the first protocol  may have http protocol packets related to displaying the web page and receiving any user interaction to communicate to the host service -. Since the transport connection (, ) is not maintained by the secondary protocols -, the secondary protocols -do not need to handle any network-level connection interruptions. As such, the secondary protocols -may not provide any network-level connection interruption information in their payloads. In the above example, the http related secondary protocol packets -of the secondary protocol -transmitted to the client  would not provide a notification that a network interruption occurred, e.g., an error message on a web page. Therefore, the user on the client  will not be notified of any network-level connection interrupts through the secondary protocol -. This effectively hides the network connection interruptions from the user during the use of the applications related to the secondary protocols -","Referring to , an example process  used by the first protocol service  and the client agent  of the client  encapsulates the plurality of secondary protocols  (e.g., HTTP, FTP, Oscar, Telnet, ICA, and\/or RDP) within the first protocol  for communication via the connection . Optionally, as described below, the example process  used by the first protocol service  and the client agent  of the client  also compresses and\/or encrypts the communications at the level of the first protocol prior to communications via the connection . From the point of view of the first protocol service , secondary protocol packets -are received via the connections -at the first protocol service . For example, two secondary protocol packets and are received by the first protocol service . One, two, or any number of secondary protocol packets -can be received. In one embodiment, the secondary protocol packets -are transmitted by the host services  to the first protocol service  over the connection . The secondary protocol packets -include a header  and a data packet , also referred to as a data payload.","Following receipt of the secondary protocol packets -, the first protocol service  encapsulates one or more of the secondary protocol packets  within a first protocol packet . In one embodiment, the first protocol service  generates a first protocol packet header  and encapsulates within the data payload  of the first protocol packet  one or more secondary protocol packets -, such as, for example, two secondary protocol packets and . In another embodiment, only one secondary protocol packet is encapsulated in each first protocol packet .","In one embodiment, the first protocol packets  are then transmitted over the connection , for example over the connection  described with reference to , to the client agent  of the client . Alternatively, in another embodiment, the first protocol service  is further configured to encrypt, prior to the transmission of any first protocol packets , communications at the level of the first protocol . In one such embodiment, the first protocol packets  are encrypted by using, for example, the SSL protocol described with reference to . As a result, a secure packet , including a header  and an encrypted first protocol packet \u2032 as a data payload , is generated. The secure packet  can then be transmitted over the connection , for example over the secure TCP\/IP connection  illustrated in , to the client agent  of the client .","In another embodiment, the first protocol service  is further configured to compress, prior to the transmission of any first protocol packets , communications at the level of the first protocol . In one embodiment, prior to encrypting the first protocol packet , the first protocol service  compresses, using a standard compression technique, the first protocol packet . As such, the efficiency of the system  is improved.","Referring again to , the system  of the present invention, in one embodiment, provides the remote client  with a persistent connection to a host service , such as, for example, the host service . For example, if the client  establishes a connection  between the client  and the first protocol service  and the first protocol service  establishes a connection between the first protocol service  and the host service , then either the client agent , the first protocol service , or both are configured to maintain a queue of the first protocol data packets most recently transmitted via the connection . For example, the queued data packets can be maintained by the client agent  and\/or the first protocol service  both before and upon a failure of the connection . Moreover, upon a failure of the connection , the first protocol service  and, likewise, the host service are configured to maintain the connection ","Following a failure of the connection , the client  establishes a new connection  with the first protocol service , without losing any data. More specifically, because the connection is maintained upon a failure of the connection , a newly established connection  can be linked to the maintained connection . Further, because the most recently transmitted first protocol data packets are queued, they can again be transmitted by the client  to the first protocol service  and\/or by the first protocol service  to the client  over the newly established connection . As such, the communication session between the host service and the client , through the first protocol service , is persistent and proceeds without any loss of data.","In one embodiment, the client agent  of the client  and\/or the first protocol service  number the data packets that they transmit over the connection . For example, each of the client agent  and the first protocol service  separately numbers its own transmitted data packets, without regard to how the other is numbering its data packets. Moreover, the numbering of the data packets can be absolute, without any re-numbering of the data packets, i.e., the first data packet transmitted by the client agent  and\/or the first protocol service  can be numbered as No. 1, with each data packet transmitted over the connection  by the client agent  and\/or the first protocol service , respectively, consecutively numbered thereafter.","In one such embodiment, following a disrupted and re-established connection , the client agent  and\/or the first protocol service  informs the other of the next data packet that it requires. For example, where the client agent  had received data packets Nos. 1-10 prior to the disruption of connection , the client agent , upon re-establishment of the connection , informs the first protocol service  that it now requires data packet No. 11. Similarly, the first protocol service  can also operate as such. Alternatively, in another such embodiment, the client agent  and\/or the first protocol service  informs the other of the last data packet received. For example, where the client agent  had received data packets Nos. 1-10 prior to the disruption of connection , the client agent , upon re-establishment of the connection , informs the first protocol service  that it last received data packet No. 10. Again, the first protocol service  can also operate as such. In yet another embodiment, the client agent  and\/or the first protocol service  informs the other, upon re-establishment of the connection , of both the last data packet received and the next data packet it requires.","In such embodiments, upon re-establishment of the connection , the client agent  and\/or the first protocol service  can retransmit the buffered data packets not received by the other, allowing the communication session between a host service  and the client , through the first protocol service , to proceed without any loss of data. Moreover, upon re-establishment of the connection , the client agent  and\/or the first protocol service  can flush from each of their respective buffers the buffered data packets now known to be received by the other.","Although buffering data for a persistent connection is generally discussed in terms of a single first protocol service , the data buffering and re-connection techniques discussed above also apply in a similar manner to a client's communication session with a host service  that traverse multiple first protocol services . One or more of the additional first protocol service  may buffer a portion or all of the data traffic between the client  and the host service . In another embodiment, a first protocol service  managing one of the \u201chops\u201d between a client and the host service  may buffer the data sent to and received from that \u201chop.\u201d As such, one or more of the first protocol services  may be used for re-transmitting data packets upon re-establishment of a disrupted connection between the client  and the host service .","By providing the client  with a reliable and persistent connection to a host service -, the present invention avoids the process of opening a new user session with the host service -by maintaining the user session through network connection interruptions. For each user session with a host service -, the client  and the host service -may maintain session specific context and caches, and other application specific mechanisms related to that instance of the user session. For each new user session established, these session specific context and caches need to be re-populated or re-established to reflect the new user session. For example, a user on the client  may have an http session with a host service -. The host service -may keep context specific to providing this instance of the http session with the client . The context may be stored in the memory of the server, in files of the server, a database or other component related to providing the functionality of the host service -. Also, the client  may have local context specific to the instance of the http session, such as a mechanism for keeping track of an outstanding request to the host service -. This context may be stored in memory of the client , in files on the client , or other software component interfaced with the client . If the connection between the client  and the host service -is not persistent, then a new user session needs to be established with new session specific context on the host service -and the client . The present invention maintains the session so that a new session, and therefore new specific session context, does not need to be re-established.","The present invention maintains the user session through network level connection interruptions and without notification to the user of the client that the session was interrupted. In operation of this aspect of the invention, the first protocol service  establishes and maintains a first connection with a client  and a second connection with a host service -. Via the first connection and the second connection, a session between the client  and the host service -is established. The first protocol service  can store and maintain any session related information such as authentication credentials, and client  and host service -context for the established session. A user on the client  will exercise the functionality provided by the host service -through the established session. As such, related secondary protocol packets -will contain data related to the transaction of such functionality. These secondary protocol packets -as part of the secondary protocol -are encapsulated and communicated in a first protocol . Upon detection of a disruption in either the first connection or the second connection, the first protocol service  can re-establish the disrupted connection while maintaining the other connection that may have not been disrupted. The network connection disruption may cause an interruption to the session between the client  and the host service -. However, since the transport mechanism is not maintained by the secondary protocols -, the session can be re-established after the network connection is re-established without the user on the client  having notification that the session was interrupted. The secondary protocol -does not need to contain any interruption related information to transmit to the client . Thus, the interruption of the session caused by the network connection disruption is effectively hidden from the user because of the encapsulation of the first protocol .","The first protocol service  maintaining session related information can re-establish the session between the client  and the host service -. For example, if the first connection between the client  and the first protocol service  is disrupted, the first protocol service  can keep the client's  session active or open between the first protocol service  and the host service -. After the first connection is re-established, the first protocol service  can link the session of the client  to the maintained session between the first protocol service  and the host service . The first protocol service  can send to the client  any data that was queued prior to the disruption in the first connection. As such, the client  will be using the same session prior to the disruption, and the host service -and client  can continue to use any session specific context that may have in memory or stored elsewhere. Furthermore, because of the intermediary of the first protocol service , the host service -may not be aware of the network disruption between the first protocol service  and the client .","In another example, if the second connection between the first protocol service  and the host service -is disrupted, the first protocol service can maintain the first connection with the client  while re-establishing the second connection with the host service -. After re-establishing the second connection, the first protocol service  can re-establish the client's session, on behalf of the client, with the host service -. Since the first protocol service  was maintaining any session relation information, the first protocol service may re-establish the same session or a similar session so that the client  is not aware of the disruption in the second network connection and the resulting disruption to the session between the first protocol service  and the host service -. During re-establishing the second network connection and the session, the first protocol service  can queue any session transactions sent by the client  during the disruption. Then, after re-establishing the session with the host service -, the first protocol service  can transmit the queued transactions to the host service -and the session can continue normally. In this manner, the client  continues to operate as if there was not an interruption to the session.","Additionally, by providing a reliable and persistent connection, the present invention also avoids interruptions to transactions, commands or operations as part of the functionality exercised between the client  and a host node , or a host service -. For example, a file copy operation using Windows Explorer has not been designed to continue working after there is a disruption in a network connection. A user on the client  may use the file copy feature of Windows Explorer to copy a file from the client  to a host node . Because of the size of the file or files, this operation may take a relatively extended period of time to complete. If during the middle of the operation of the copy of the file to the host node , there is an interruption in the network connection between the client  and the host node , the file copy will fail. Once the network connection is re-established, the user will need to start another file copy operation from Windows Explorer to copy the file from the client  to the host node . Under the present invention, the user would not need to start another file copy operation. The network connection would be re-established as part of the first protocol  connection. The file copy operations would be encapsulated in the payload of the secondary protocols -. As such, the file copy of Windows Explorer would not get notified of the interruption in the network connection and therefore, would not fail. The first protocol service  would re-establish any connections and transmits any queued data so that operation can continue without failure. The first protocol service  would maintain a queue of the data related to the file copy operations that has not been transferred to the host node  because of the interruption in the network connection. Once the network connection is re-established, the first protocol service  can transmit the queued data and then continue on with transferring the data related to the file copy operation in due course.","Although this aspect of the invention is described in terms of a file copy operation example, one ordinarily skilled in the art will recognize that any operation, transaction, command, function call, etc. transacted between the client  and the host node , or host service -, can be maintained and continued without failure from the network connection disruption, and, furthermore, without the client  recognizing there was a disruption or having notice of the disruption.","Furthermore, by providing a reliable and persistent connection, the present invention also enables a client  to traverse through different network topologies without re-starting a session or an application on the client . For example, the client  may be a computer notebook with a wireless network connection. As the client  moves from a first wireless network to a second wireless network, the client's network connection  may be temporarily disrupted from the first wireless network as a network connection is established with the second wireless network. The second wireless network may assign a new network identifier, such as a host name or internet protocol address, to the client . This new network identifier may be different than the network identifier assigned to the client  by the first wireless network. In another example, the client  may be physically connected through an Ethernet cable to a port on the network. The physical connection may be unplugged and the client  moved to another location to plug into a different port on the network. This would cause a disruption into the network connection  and possible a change in the assigned network identifier. Without the present invention, any sessions with a host service -on the client  or application on the client  accessing the network may need to be restarted due to the change in the network topology, the disruption to the network connection , and\/or the change in the assigned network identifier. By the method and systems described herein, the present invention maintains the network connection for the client and automatically re-established the client's  network connection including handling changes in the network topology and network identifier. The client , and any applications or sessions on the client , can continue to operate as if there was not a network connection disruption or a change in the network identifier. Furthermore, the user on the client  may not recognize there were any interruptions or changes, and the client  may not receive any notice of such interruptions.","In another aspect, the present invention relates to securely establishing a communication session between the client  and the host service  via multiple connections or \u201chops\u201d that traverse multiple network components, such as a proxy, security gateway, firewall or router. The establishment of the multiple hop secure communication session may further be initiated via a secure client-web server communication channel , for example, between the web browser  and the web server  using SSL. The ticket authority  can provide tickets for each of the hops such as the client-first protocol service connection  and the first protocol service to host service connections -. In this manner, the client  is authenticated through all the connections between the client  and the host service -","In operation, and also referring to , the client user requests (step ) content (e.g., an application, a server desktop) to be remotely displayed on the client  (i.e., the ICA client ). In another embodiment, the client  uses the web browser  to request an application and the web server  then authenticates the user. After receiving the request, the web server  validates (step ) the request with the ticket authority . The ticket authority  then generates (step ) a ticket, which includes a first ticket, or client ticket, and a second ticket, or first protocol service ticket. The first and second tickets are \u201cone-time use\u201d tickets having no further value after their first use. In a further embodiment, the first and second tickets must be used within a predetermined time period.","In one embodiment, the ticket authority  stores the first and second tickets in memory (e.g., RAM) until the ticket is used. Alternatively, the ticket authority  stores the first and second tickets in a storage device (not shown) until the ticket is used. The storage device may include, for example, a database or a persistent memory (e.g., on a floppy disk, hard disk drive). The ticket authority  subsequently transmits (step ) the client ticket to the web server  and the web server  then forwards (step ) the client ticket to the client .","The client  then initiates (step ) a communication session with the first protocol service  by transmitting a proxy connection request over the client-first protocol service communication channel . The proxy connection request includes the client ticket. In one embodiment, the proxy connection request also includes a dummy password that can be replaced by the first protocol service  when establishing a communication session with the host node . In a further embodiment, the web server  transmits the dummy password to the client  for future generation of a proxy connection request having a format acceptable to the first protocol service . The first protocol service  then extricates (step ) the client ticket from the proxy connection request and forwards the client ticket to the ticket authority  for validation. The ticket authority  then validates (step ) the first ticket. In one embodiment, the ticket authority  verifies the first ticket by searching its storage device (e.g., database) for the first expected ticket.","If the ticket authority  does not find the first ticket in the storage device (such as if the first ticket has been used already), the ticket authority  ends the communication session. If the received ticket matches the client ticket that the ticket authority  expects, the client ticket is validated. The ticket authority  then transmits (step ) the second or first protocol service ticket to the first protocol service . Additionally, the ticket authority  deletes the client ticket from the storage device, as the client ticket has now been used once. In another embodiment, the ticket authority  also transmits the Internet protocol (IP) address of the host node  to the first protocol service . In yet another embodiment, the ticket authority  transmits the domain name of the host node  to the first protocol service  for future conversion into the IP address.","The first protocol service  receives the second ticket, or the first protocol service ticket, and subsequently opens communications across the proxy-server communication channel  by transmitting (step ) the second ticket to the host node . The host node  receives the first protocol service ticket and then transmits the ticket over the ticket-server communication channel  to the ticket authority  for validation (step ). In one embodiment, if the ticket authority  determines that the first protocol service ticket received from the host node  has been used previously or does not have the correct value (i.e., the same value as the value stored in the associated storage device), the ticket authority  transmits an error message to the first protocol service  (or the web server ) to terminate the established communication session with the client . If the ticket authority  validates the first protocol service ticket (step ), the host node  then launches (step ) the ICA published application. The host node  then transmits application information to the first protocol service  (step ) for remote displaying of the application on the client  (step ) using the ICA client .","In a further embodiment, the client  launches the ICA client  when initiating communications with the first protocol service  in step . In other embodiments, the client  launches the ICA client  when the client  receives the application information from the first protocol service  in step .","Thus, the client  is not aware of the first protocol service ticket but only the client ticket. Moreover, the ICA client  cannot access the host node  without communicating with the first protocol service  and presenting the client ticket.","The ticket authority  could also transmit the first protocol service ticket to the first protocol service  in step  as the user password for the user of the client . This allows the first protocol service  to use the first protocol service ticket as the login password to gain access to the host node  without exposing the user's login password over the untrusted part of the web (i.e., the non-secure client-first protocol service communication channel  during step ). Thus, in one embodiment, the communications system  could include a centralized password mapping database managed by the ticket authority  and co-located with the host node  to map the first protocol service ticket with a user's password.","Therefore, the password can accompany both tickets (i.e., the first protocol service ticket and the client ticket) or the password can accompany one of the two tickets. As described above, if the password accompanies one of the two tickets, such as the client ticket, then the first protocol service ticket is the password. In one embodiment, the password can be a system password that does not change in value or may be a one-time use password, such as those generated by SecurID tokens developed by RSA Security Inc. of Bedford, Mass.","Additionally, the invention can be expanded to a communications system having any number of first protocol services , or \u201chops\u201d, that the client  has to communicate with before establishing a communication session with the host node . Although described in relation to a first protocol service , a hop can comprise any network component, such as a proxy , firewall, router, and relay.","For instance and referring to , a four-hop example is a communication system  having a first protocol service \u2032 with a proxy \u2032, a second first protocol service \u2033 with a proxy \u2033, and a third first protocol service \u2032\u2033 with a proxy \u2032\u2033 (generally ). The first protocol services  with proxies  communicate over a proxy-proxy communication channel, such as a first proxy-proxy communication channel \u2032 and a second proxy-proxy communication channel \u2033 (generally proxy-proxy communication channel ). The client  communicates with the first protocol service \u2032 which communicates with the second first protocol service \u2033. In turn, the second first protocol service \u2033 communicates with the third first protocol service \u2032\u2033 and then the third first protocol service \u2032\u2033 communicates with the host node  over the proxy-server communication channel  to establish the communication session with the host node . Furthermore, although the embodiment described above includes a ticket having a client ticket and a first protocol service ticket, another embodiment includes the ticket comprising numerous tickets.","More explicitly and also referring to , the web server  receives a request from the client  for an application and the web server  validates the request with the ticket authority  (step ). The ticket authority  then generates an N part ticket (e.g., Tto T) in step . In one embodiment, the ticket authority  then transmits a portion Tof the N part ticket (e.g., the first part of the ticket, or first ticket T) to the web server  (step ). The web server  then transmits the ticket Tto the client  (step ). In one embodiment, the ticket authority  also transmits the address of the next \u201chop\u201d (e.g., the first protocol service \u2032) to the web server , which then transmits the address to the client . This address is the address of the next hop (e.g., first protocol service ) that this hop (e.g., client ) needs to communicate with for the client  to eventually be authenticated to the host node .","The client  uses the address to then contact the next \u201chop\u201d (e.g., first protocol service \u2032) and initiates a communication session with the 1st first protocol service \u2032 by transmitting a proxy connection request over the client-first protocol service communication channel . The first protocol service \u2032 then extracts (step ) the first ticket Tfrom the proxy connection request and forwards this ticket to the ticket authority  for validation. The ticket authority  then validates (step ) the first ticket T.","Upon proper verification of the first ticket T, the ticket authority  transmits the next ticket Tfrom the N part ticket (e.g., T) to the next first protocol service  (e.g., first protocol service \u2032) (step ). In some embodiments, the ticket authority  also transmits the address of the next hop (e.g., the second first protocol service \u2032\u2033) to this hop (e.g., the first protocol service \u2032). The first protocol service \u2032 transmits this ticket to the next hop (e.g., the second first protocol service \u2033) (step ). In one embodiment, the second first protocol service \u2033 verifies Tby transmitting the ticket to the ticket authority  (step ). The ticket authority  validates the second ticket T(step ) and the process continues, as shown in steps  through . Once the last part of the N part ticket has been validated, steps  through  occur, as shown in , to launch the application on the client .","In one embodiment, each first protocol service  (i.e., each hop) validates T(e.g., T) with a ticket authority  associated with the first protocol service  (i.e., hop). In this embodiment, after each first protocol service  validates the ticket T(e.g., T) with a ticket authority , the ticket authority  at which the validation took place transmits the next ticket T(e.g., T) and the address of the next first protocol service  (i.e., the next \u201chop\u201d destination) to the first protocol service  that had validated the ticket T. Thus, each first protocol service  is associated with a ticket authority  that has been configured with the current and next hop tickets (i.e., validating Tand transmitting Tfor the next hop). Consequently, the next first protocol service  acts as the client for that hop. This process is repeated until reaching the host node  in the communications system . Thus, each hop has been validated individually without revealing all of the ticket to any one hop.","In other embodiments, the ticket authority  may issue more than one ticket rather than issuing one ticket having many parts. For example, the ticket authority  generates a first hop ticket and a second hop ticket in step , where the first hop ticket has no association with the second hop ticket. The ticket authority  subsequently transmits the first hop ticket to the web server  and the web server  transmits the first hop ticket to the client . The client  transmits this first hop ticket to the first protocol service  (e.g., first protocol service \u2032) for validation by the ticket authority . Upon validation in step , the ticket authority  transmits in step  the second hop ticket to the next first protocol service  (e.g., second first protocol service \u2033) while the first hop ticket is independent from the second hop ticket.","In a further embodiment, one or more of the ticket authorities  provides the proxies , either as part of the first protocol service  or separated from the first protocol service , with any necessary information needed to connect to the next hop, such as, but without limitation, encryption keys, SSL method configuration information, and authentication information to connect to a SOCKS server (e.g., SOCKS5 server, developed by NEC Corporation of Tokyo, Japan).","In yet another embodiment, a ticket authority  only generates a single ticket. The ticket authority  transmits the single ticket to the web server . The web server  forwards the single ticket to the client . The first protocol service  subsequently receives the ticket from the client  and \u201cconsumes\u201d the single ticket upon validation. As a result, the communications system  can use a single ticket to provide the ability to use arbitrary communication protocols over the client-proxy communication channel  and the client-web server communication channel . Additionally, because the host node  does not receive or verify the single ticket, the ticket is transparent to the host node  and, consequently, the host node  is not \u201caware\u201d of the use of the ticket.","By exploiting the security of the secure communications between the client  and the web server  over the secure client-web server communication channel , the communications system  establishes a secure communication link over the non-secure client-proxy communication channel  to remotely display desktop applications securely on the client .","In yet another embodiment and referring again to , the ticket authority  transmits in step  a disabled version of the first protocol service ticket with the client ticket to the web server  for transmission to the client . The client  subsequently transmits (step ) the first protocol service ticket along with the client ticket to the first protocol service  as part of the proxy connection request. The first protocol service  then forwards both tickets to the ticket authority . Upon receiving a disabled first protocol service ticket, the ticket authority  enables the first protocol service ticket after validating the client ticket. The ticket authority  then transmits the enabled first protocol service ticket to the first protocol service  for authentication to the host node .","Alternatively, in another embodiment the web server  receives a disabled first protocol service ticket and an enabled client ticket from the ticket authority  and only transmits the client ticket to the client . The client  transmits (step ) the client ticket to the first protocol service  as part of the proxy connection request. The first protocol service  then forwards the client ticket to the ticket authority . The ticket authority  validates the client ticket and, upon validation, enables the first protocol service ticket previously transmitted to the web server . In yet another embodiment, the ticket authority  transmits an enabled first protocol service ticket to the web server  upon validation of the client ticket for authentication to the host node .","Thus, at any given time, the ticket authority  provides only one ticket that is enabled to the client  or first protocol service  that the ticket authority  can validate. The ticket authority  may provide another ticket that can't be validated (i.e., a disabled ticket) until the enabled ticket is validated. Alternatively, the ticket authority  may not transmit the first protocol service ticket to the first protocol service  until the ticket authority  validates the enabled ticket. As discussed in further detail below, this enforces network routing of communications using the communications system  because the client  cannot traverse the web server  or the first protocol service  without having the ticket authority  validate the enabled ticket and transmit the ticket needed to communicate with the host node .","In another embodiment, instead of transmitting the first protocol service ticket to the first protocol service  as in step , the ticket authority  transmits the first protocol service ticket to the web server  directly over the web server-authority communication channel . The web server  then automatically transmits the first protocol service ticket to the host node . In other words, the web server  \u201cpushes\u201d the first protocol service ticket to the host node . The ticket authority  can also push the first protocol service ticket to the host node  without transmission of the first protocol service ticket to the first protocol service  or the web server .","In yet another embodiment, the host node  retrieves the first protocol service ticket from the ticket authority  over the ticket-content server communication channel . In other words, the host node  \u201cpulls\u201d the first protocol service ticket from the ticket authority . The above examples are illustrations of techniques used to eliminate step  (while modifying the destination of the transmission in step ).","Moreover, the invention enforces the routing of the client  through the first protocol service . As stated above, the client  has to possess the first protocol service ticket to establish a communication session with the host node . More specifically, to establish a connection with the host node , the web server  first has to validate the request of the client  with the ticket authority . Once validated, the client  obtains the first ticket and transmit this first ticket to the ticket authority  for validation. However, upon validation, the ticket authority  transmits the first protocol service ticket back to the first protocol service  rather than the client . The communication session between the client  and the host service  is established when the host service  receives the first protocol service ticket. Thus, the client  has to communicate with the first protocol service  in order to have the first protocol service ticket transmitted to the host service , thereby enforcing the routing of the client  through the first protocol service . Thus, the invention can ensure the proper traversal of a security device (e.g., the first protocol service ) before granting access to the host node .","For example, a host node  executes several applications, such as MICROSOFT WORD and MICROSOFT EXCEL, both developed by Microsoft Corporation of Redmond, Wash. In one embodiment, the client  uses NFUSE, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla., to obtain information from the server farm  on which applications can be accessed by the client . If a client user wants to access and use MICROSOFT WORD, the client  requests the application from the web server . However, only users who pay an application fee for MICROSOFT WORD can become authorized to access the application.","To ensure the payment of the application fee, the communications system  includes the first protocol service  and the ticket authority  to enforce the routing of the client  through the first protocol service . The routing of the client  through the first protocol service  is valuable to the application provider if the first protocol service  is used to collect the application fee and authorize the user for access to the application.","The ticket authority  subsequently generates a ticket associated with the request for the application. An enabled first ticket is then transmitted to the client . Because the client  does not have the address of the host node , the client  cannot access the application. Further, the client  has not been authorized by the first protocol service  yet (i.e., has not yet paid). Thus, the client  has to communicate with the first protocol service  to become authorized. The first protocol service  can then transmit the enabled first ticket to the ticket authority  upon payment of the application fee.","The ticket authority then validates the client ticket and subsequently transmits (or enables) a first protocol service ticket to the proxy . The first protocol service  then transmits the first protocol service ticket to the host node  (e.g., assuming the client user has paid the application fee), which enables the host node  to transmit the application to the client . The communications system  may also use Application Launching And Embedding (ALE) technology, developed by Citrix Systems, Inc., to enable the launching of the application from or the embedding of the application into an HTML page for delivery to the client .","In another aspect, the present invention is directed towards reconnecting a client  to a host service  and re-authenticating the connections or \u201chops\u201d between the client  and the host service .  depicts another illustrative embodiment of a system  that is capable of re-connecting the client  to a host service . In addition to the networks  and \u2032, the client , the first protocol service , and the host services , all of which are described above, the system  further includes an intermediary node , and a ticket authority . In one embodiment, the intermediary node  is a security gateway, such as, for example, a firewall and\/or a router, through which messages between the client  and the first protocol service  must pass due to the configuration of the network . Additionally, the intermediary node  may comprise the proxy  of the first protocol service , either with or without the first protocol service . The ticket authority  can be, as illustrated, a stand-alone network component that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","As shown in the illustrative embodiment of , the intermediary node  is configured to accept a connection initiated by the client  and to establish a second connection with the first protocol service . Together, the connection and the second connection constitute the connection , described above, over which the client  and the first protocol service  communicate using the first protocol.","The intermediary node , as shown, is also configured to communicate with the ticket authority . In one embodiment, the ticket authority  is configured to receive a request for a first re-connection ticket from the intermediary node  and to thereafter generate the first re-connection ticket. The first re-connection ticket can include, for example, a large random number. In another embodiment, the ticket authority  is configured to receive a request for a first re-connection ticket for each of the \u201chops\u201d between the client and host service . For example, the intermediary node  may request re-connection tickets for the connection between the client  and the intermediary node , between the intermediary node  and the first protocol service , and between the first protocol service  and the host service . These re-connection tickets may only be valid for each of the \u201chops\u201d. For example, a first re-connection ticket for the first protocol service  to host service  connection is valid only for authenticating the first protocol service  to the host service  on behalf of the client .","In another embodiment, the ticket authority  is configured to generate a handle. The handle can be, for example, a random number that is associated with (e.g., mapped to) the first re-connection ticket. In one embodiment, the handle is a smaller random number than the random number forming the first re-connection ticket. For example, the handle may be a 32-bit random number. In a further embodiment, the handle associated with a ticker or a re-connection ticket is an address of or pointer to the next \u201chop\u201d in the multiple-hop connection between the client  and the host service . In this case, a ticket or re-connection ticket is validated for a single \u201chop\u201d with a pointer to the next \u201chop\u201d. The next \u201chop\u201d will need to obtain and validate a different ticket or re-connection ticket and so forth until the last \u201chop\u201d is validated and connected to the host service  on behalf of the client .","The ticket authority  transmits the first re-connection ticket and the handle to the intermediary node , while keeping a copy of the first re-connection ticket and a copy of the handle. The copy of the first re-connection ticket can later be used by the ticket authority  to validate the first re-connection ticket originally transmitted to the client  when it is later presented to the ticket authority  during the process of re-connecting the client . In one embodiment, the ticket authority  also keeps an address for the first protocol service , which, as explained below, is associated with the first re-connection ticket and, upon validation of the first re-connection ticket, is transmitted to the intermediary node .","In one embodiment, the intermediary node  is further configured to use the handle transmitted to it by the ticket authority  to delete the copy of the first re-connection ticket kept at the ticket authority . In another embodiment, as described below, the ticket authority  is further configured to delete, during the process of re-connecting the client  to a host service , the first re-connection ticket and thereafter generate a replacement first re-connection ticket. Additionally, in another embodiment, the first re-connection ticket is configured for automatic deletion after a pre-determined period of time. In the embodiment of re-connection tickets for each of the \u201chops\u201d between the client and the host service , one, some or all of the re-connection tickets may be configured for automatic deletion after a pre-determined period of time. In other embodiments, the ticket authority  or the intermediary node  is configured to delete each of the multiple-hop tickets and generate replacement tickets.","In another embodiment, the first protocol service  is configured to generate a second re-connection ticket, which, as in the case of the first re-connection ticket, can include, for example, a large random number. In one embodiment, the first protocol service  generates second re-connection tickets for each of the \u201chops\u201d between the client  and the host service . The first protocol service  can also be configured to transmit the second re-connection ticket to the client , while keeping a copy of the second re-connection ticket and a session number. The copy of the second re-connection ticket can later be used by the first protocol service  to validate the second re-connection ticket originally transmitted to the client  when it is later presented to the first protocol service  during the process of re-connecting the client . In one embodiment, the first protocol service  transmits the second re-connection ticket to the client  via the intermediary node . In another embodiment, the first protocol service  transmits the second re-connection ticket to the client  directly. In a further embodiment, the first protocol service  may transmit second re-connection tickets to other first protocol services  or intermediary nodes  that may comprise the multiple-hop connection between the client  and the host service .","Moreover, as described in greater detail below, the first protocol service  can be further configured to delete, during the process of re-connecting the client  to a host service , the second re-connection ticket, and thereafter generate a replacement second re-connection ticket. Additionally, in another embodiment, the second re-connection ticket is configured for automatic deletion after a pre-determined period of time. In further embodiments, a first protocol service  of one or more first protocol services  in a multiple-hop connection is configured to delete the second re-connection tickets for each of the \u201chops\u201d, and thereafter generate replacement second re-connection tickets for one, some or all of the \u201chops.\u201d","In one embodiment, the intermediary node  serves as an intermediary for the first and second re-connection tickets. The intermediary node  receives, for example, the first re-connection ticket generated by the ticket authority  and the second re-connection ticket generated by the first protocol service . The intermediary node  can then transmit the first re-connection ticket and the second re-connection ticket to the client . Moreover, during the process of re-connecting the client  to a host service , the intermediary node  can accept the first re-connection ticket and the second re-connection ticket from the client  and thereafter transmit the first re-connection ticket to the ticket authority  and, if appropriate, the second re-connection ticket to the first protocol service .","In another embodiment, the intermediary node  serves as an intermediary for the re-connection tickets for the multiple-hops between the client  and the host service . The intermediary node  receives, for example, the first re-connection ticket for the client  to first protocol service  connection and the first re-connection ticket for the first protocol service  to the host service . In a further embodiment, the intermediary node  receives a first re-connection ticket for the connection between the intermediary node  and the first protocol service . The intermediary node  can then transmit the first re-connection ticket for the client to the client  and the first re-connection ticket for the first protocol service  to the first protocol service . Moreover, during the process of re-connecting the client  to a host service , the intermediary node  can accept the first re-connection ticket from the client  to validate the ticket to re-establish the client's connection to the intermediary node  or the first protocol service .","Referring to , another embodiment of a system  for network communications includes the networks  and \u2032, the client , the first protocol service , the host services -, the intermediary node , and the ticket authority , as described above, and further depicts a first computing node  and a second computing node , both of which are used, in one embodiment, for initially connecting the client  to a host service . Moreover, in the illustrative embodiment of , the client  further includes a web browser , such as, for example, the INTERNET EXPLORER program from Microsoft Corporation of Redmond, Wash., to connect to the World Wide Web.","In one embodiment (not shown), the system  includes two or more intermediary nodes  and\/or two or more first protocol services . The intermediary node , through which messages between the client  and the first protocol service  must pass, and\/or the first protocol service  can, as explained below, each be chosen based on, for example, a load balancing equation.","Each of the first computing node  and the second computing node  can be any computing device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. For example, in one embodiment, the first computing node  comprises a web server , providing one or more websites. In another embodiment, the second computing node  provides an XML service.","In one embodiment, the client  and the network  form an external network , separated from the rest of the system  by a first firewall , depicted as a dashed line. The intermediary node  and the first computing node  can be located in a DMZ  separated from the rest of the system  by the first firewall  and a second firewall , also depicted by a dashed line. Then, as shown, the network \u2032, the first protocol service , the host services -, the ticket authority , and the second computing node  form an internal network , separated from the rest of the system  by the second firewall .","Alternatively, in another embodiment, and with reference to , the system  further includes a third computing node  positioned in the DMZ , between the network  and the intermediary node . The third computing node  can be any computing device that is capable of networked communication and that has sufficient processor power and memory capacity to perform the operations described herein. As described below, the third computing node  is used, in some embodiments, during the process of initially connecting the client  to a host service  and\/or during the process of re-connecting the client  to a host service . More specifically, as described below, where the system  includes two or more intermediary nodes , the third computing node  can, based on a load balancing equation for example, choose the intermediary node  through with communications between the client agent  of the client  and the first protocol service  must pass.","Moreover, referring to , the intermediary node  of  can, in an alternative embodiment, be replaced by two or more levels \u201ca\u201d-\u201cn\u201d of intermediary nodes . As illustrated, each level \u201ca\u201d-\u201cn\u201d can include two or more intermediary nodes -. As described below, the client agent  of the client  can be routed through any combination of the intermediary nodes  based on, for example, load balancing equations. For example, as illustrated, the client agent  can be routed through the intermediary nodes  via connection . For additional security, each of the \u201chops\u201d via connection  may require a ticket or re-connection ticket for validating and authenticating the multiple-hop connection between the client  and the host service . Other configurations of the systems ,  and , as would be readily apparent to one skilled in the art, are also possible.","Referring again to , in one embodiment, the web browser  communicates over the network  with the first computing node , which itself interfaces with the second computing node  and the ticket authority . More specifically, the first computing node  is configured with the address of the second computing node  and the ticket authority . In one embodiment, as explained further below, the first computing node  is configured to relay information between, and thereby prevent direct communication between, the web browser  of the client , the second computing node , and the ticket authority . By preventing such direct communication, the first computing node  adds an additional level of security to the system . The first computing node  can also be configured with the address of the intermediary node , or, alternatively, with the address of two or more intermediary nodes .","For its part, the second computing node  is configured to determine which of the application programs running on the host services  are available to a user of the client . In other words, the second computing node  is configured to determine which of the application programs the user is authorized to access. In one embodiment, after the user selects his desired application program, as described further below, the second computing node  is further configured to determine which of the host services  will be used to run the user's desired application for purposes of load balancing. The second computing node  returns the address of that host service  to the first computing node . The second computing node  also returns the address of the first protocol service , which can also be selected from amongst a plurality of first protocol services  through the use of a load balancing equation, to the first computing node . In turn, the first computing node  transmits the address of the chosen first protocol service  and the chosen host service  to the ticket authority .","For its part, the ticket authority  generates connection tickets. In one embodiment, the ticket authority  transmits an initial connection ticket to the first computing node  for transmission to the client . In another embodiment, the ticket authority  transmits initial connections tickets to the first computing node  for one or more of the \u201chops\u201d between the client  and the host service .","Referring now to , one embodiment of a method  for network communications, using the exemplary embodiment of , is illustrated. At step , the client  initially connects to a plurality of host services  by employing, for example, the method  described below. After the client  is connected to the plurality of host services , the client  and the host services  communicate, through the first protocol service , and at step , via a plurality of secondary protocols encapsulated within the first protocol. In one embodiment, the first protocol service  encrypts, prior to the transmission of any first protocol packets, communications at the level of the first protocol , thereby securing the communications. In another embodiment, the first protocol service  compresses, prior to the transmission of any first protocol packets, the communications at the level of the first protocol, thereby improving communication efficiency.","At step , the client agent  determines whether the connection  between the client agent  and the first protocol service  has failed. For example, the connection between the client agent  and the intermediary node  may have failed, the connection between the intermediary node  and the first protocol service  may have failed, or both the connection and the connection may have failed. In another embodiment, the connection between the first protocol service  and the host service may have failed . If the client agent  determines that the connection  has not failed, the method  proceeds to step . If, on the other hand, the client agent  determines that the connection  has failed, the client  is, at step , provided with a reliable connection to the host services  and re-connected to the host services .","It is determined, at step , whether the client  wishes to cleanly terminate its connection  with the first protocol service  and, consequently, its connections -with the host services . If not, communication between the client  and the first protocol service , via the plurality of secondary protocols encapsulated within the first protocol, continues at step . If so, then, at step , all connections , , and -are broken and all re-connection tickets are deleted. In one embodiment, the intermediary node  uses a handle it receives from the ticket authority  to delete a copy of a first re-connection ticket kept at the ticket authority . In another embodiment, the first protocol service  deletes a copy of a second re-connection ticket kept at the first protocol service . In a further embodiment, if for some reason a secondary protocol connection  fails, a copy of the second re-connection ticket associated therewith and kept at the first protocol service  is deleted by the first protocol service . In yet another embodiment, a first re-connection ticket and\/or a second re-connection ticket is automatically deleted after a pre-determined period of time following a failure in the connection , as at step , and\/or following a clean termination of the connection , as at step . In other embodiments, either the first protocol service  or the ticket authority  delete one or more of the re-connection tickets for one or more of the \u201chops\u201d between the client  and the host service .","Referring to , one embodiment of a method  for initially connecting the client  to the host services  (for example at step  of ), using the exemplary embodiment of , is illustrated. At step , the client , using the browser , sends a request, such as, for example, an HTTP request, to the first computing node . The first computing node  returns a web page, such as, for example, an HTML form requesting authentication information (e.g., a username and a password). A user of the client  enters his credentials and transmits the completed form to the first computing node .","The first computing node , at step , then informs the user of the client  of applications available for execution. In one embodiment, the first computing node  extracts the user's credentials from the login page and transmits them to the second computing node , together with a request for the second computing node  to enumerate the applications available to the user. Based on the user's credentials, the second computing node  returns a list of specific applications available to the user to the first computing node , which then forwards the list, in the form of a web page for example, to the user of the client .","At step , the user selects the desired application and a request for that application is sent to the first computing node . For example, in one embodiment, the user clicks on a desired application listed in the web page presented to him by the first computing node  and an HTTP request for that application is forwarded to the first computing node . The request is processed by the first computing node  and forwarded to the second computing node .","At step , the second computing node  determines the host service  on which the desired application will be executed. The second computing node  can make that determination based, for example, on a load balancing equation. In one embodiment, the second computing node  also determines a first protocol service  from amongst a plurality of first protocol services  that will be used to communicate with the host service  via a connection . Again, the second computing node  can make that determination based, for example, on a load balancing equation. The second computing node  returns the address of the chosen host service  and the chosen first protocol service  to the first computing node .","The client , at step , is then provided with an initial connection ticket and an address for the intermediary node  (which is either its actual address or its virtual address, as described below). In one embodiment, the first computing node  provides the address for the chosen host service  and the chosen first protocol service  to the ticket authority , together with a request for the initial connection ticket. The ticket authority  keeps the address of the chosen host service  and the chosen first protocol service , generates the initial connection ticket, and transmits the initial connection ticket to the first computing node , while keeping a copy for itself. In one embodiment, the ticket authority , in response to the request for the initial connection ticket by the first computing node , generates connection tickets for each of the \u201chops\u201d between the client  and the host service . In another embodiment, the first computing node  requests initial connection tickets for each of the \u201chops\u201d either in a single request or in multiple requests. For example, the ticket authority  may generated a multi-part ticket as discussed above in conjunction with .","The first computing node , configured, in one embodiment, with the actual address of the intermediary node , then transmits the actual address of the intermediary node  and the initial connection ticket to the browser  of the client . The first computing node  can, for example, first create a file containing both the actual address of the intermediary node  and the initial connection ticket and then transmitting the file to the browser  of the client . Optionally, in another embodiment, the first computing node  is configured with the actual address of two or more intermediary nodes . In such an embodiment, the first computing node  first determines the intermediary node  through which messages between the client  and the first protocol service  will have to pass. The first computing node  then transmits the actual address of that chosen intermediary node  and the initial connection ticket to the browser  of the client  using, for example, the file described above. In one embodiment, the first computing node  chooses the intermediary node  using a load balancing equation. The client agent  of the client  is then launched and uses the address of the intermediary node , to establish, at step , a first protocol connection between the client agent  of the client  and the intermediary node . In one embodiment, the first computing node  may provide initial connection tickets obtained from the ticket authority  to one or more of the first protocol service  and\/or intermediary nodes  to validate their respective connections.","Alternatively, in another embodiment, the first computing node  is configured with an actual address of the third computing node , which serves as a virtual address of an intermediary node . In such an embodiment, the first computing node  transmits, at step , the actual address of the third computing node  and the initial connection ticket to the browser  of the client  using, for example, the file described above. The client agent  of the client  is then launched and uses the actual address of the third computing node  to establish, at step , a first protocol connection between the client agent  of the client  and the third computing node . The third computing node  then determines the intermediary node  through which messages between the client  and the first protocol service  will have to pass. In one embodiment, the third computing node  chooses the intermediary node  using a load balancing equation. Having chosen the intermediary node , the third computing node  establishes a first protocol connection to the intermediary node . A first protocol connection therefore exists, through the third computing node , between the client agent  of the client  and the intermediary node . The actual address of the third computing node  is therefore mapped to the actual address of the intermediary node . To the client agent  of the client , the actual address of the third computing node  therefore serves as a virtual address of the intermediary node .","In one embodiment, where more than one level of intermediary nodes  exist, as described above, the first computing node  or the third computing node , respectively, only choose the intermediary node  to which the client agent  will connect at level \u201ca.\u201d In such an embodiment, at each of the levels \u201ca\u201d-\u201cn\u22121\u201d, the intermediary node  through which the client agent  is routed at that level thereafter determines, based on a load balancing equation for example, the intermediary node  to which it will connect at the next level. Alternatively, in other embodiments, the first computing node  or the third computing node , respectively, determine, for more than one or all of the levels \u201ca\u201d-\u201cn\u201d, the intermediary nodes  through which the client agent  will be routed.","Having established the first protocol connection between the client agent  of the client  and the intermediary node , for example the intermediate node  at level \u201cn\u201d (hereinafter referred to in method  as the intermediary node ), the client agent  then transmits the initial connection ticket to the intermediary node .","It is then determined, at step , whether the initial connection ticket is valid. In one embodiment, the intermediary node  transmits the initial connection ticket to the ticket authority  for validation. In one embodiment, the ticket authority  determines the validity of the initial connection ticket by comparing it to the copy of the initial connection ticket it kept at step . If the ticket authority  determines the initial connection ticket to be valid, the ticket authority  transmits, at step , the address of the first protocol service  and the address of the chosen host service  to the intermediary node . The ticket authority  may also transmit additional connection tickets for the first protocol service  and intermediary node  through which the client  will connect to the host service . The first protocol service  can also delete the initial connection ticket and the copy thereof. If, on the other hand, the ticket authority  determines the initial connection ticket to be invalid, the client  is, at step , refused connection to the first protocol service  and, consequently, connection to the host service .","Following step , the intermediary node  uses the address of the chosen first protocol service  to establish, at step , a first protocol connection between the intermediary node  and the first protocol service . In one embodiment, the intermediary node  uses an initial connection ticket to establish the first protocol connection between the intermediary node  and the first protocol service . In one case, the intermediary node  uses the same initial connection ticket received from the client  to validate the connection . In another case, the intermediary node  uses an initial connection ticket generated for and valid for the first protocol connection . A first protocol connection  therefore now exists, through the intermediary node , between the client agent  of the client  and the first protocol service . The intermediary node  can also pass the address of the chosen host service  to the first protocol service .","In one embodiment, at step , the first protocol service  uses the address of the chosen host service  to establish a secondary protocol connection  between the first protocol service  and the chosen host service . For example, the chosen host service  is in fact the host service and a secondary protocol connection is established between the first protocol service  and the host service ","In one embodiment, following step , the user chooses, at step , a second application to be executed and the second computing node  determines, at step , the host service  on which the second application is to be executed. For example, by calculating a load balancing equation, the second computing node  may choose the host service to execute the second application program. The second computing node  then transmits the address of the chosen host service to the first protocol service . In one embodiment, the second computing node  is in direct communication with the first protocol service  and directly transmits the address thereto. In another embodiment, the address of the chosen host service is indirectly transmitted to the first protocol service . For example, the address can be transmitted to the first protocol service  through any combination of the first computing node , the ticket authority , the intermediary node , and the first protocol service . Having received the address of the chosen host service , the first protocol service  establishes, at step , a secondary protocol connection between the first protocol service  and the chosen host service . In establishing a secondary protocol connection , the first protocol service  may validate an initial connection ticket to authenticate the connection to the host service . The initial connection ticket may be the same as the initial connection ticket for either the client  connection to the intermediary node  or the connection of the intermediary node  to the first protocol service . In another embodiment, the ticket authority  or any of the intermediary node  generated a ticket valid only for the secondary protocol connection . The first protocol service  and\/or host service  uses this ticket to validate the secondary protocol connection ","The secondary protocols that can be used to communicate over the connections and include, but are not limited to, HTTP, FTP, Oscar, Telnet, ICA, and RDP. Moreover, in one embodiment, at least one of the secondary protocols, as described above, includes a plurality of virtual channels, each of which can include a plurality of protocol packets enabling functionality at the remote client . For example, in one embodiment, one host service is a web server, communicating with the first protocol service  over the connection using the HTTP protocol, and another host service is an application server, communicating with the first protocol service  over the connection using the ICA protocol. The host service generates both protocol packets for transmitting graphical screen commands to the client , for causing the client  to display a graphical user interface, and protocol packets for transmitting printer commands to the client , for causing a document to be printed at the client .","Steps , , and  can be repeated any number of times. As such, any number of application programs can be executed on any number of host services -, the outputs of which can be communicated to the first protocol service  over the connections -using any number of secondary protocols.","Turning now to step , the first protocol service  can, as described above, encapsulate the plurality of secondary protocols within the first protocol. As such, the client  is connected to, and simultaneously communicates with, a plurality of host services .","In another embodiment, prior to performing steps , , and  to execute a new application program on a host service , such as, for example, the host service , a user of the client  ends execution of another application program, such as, for example, an application program executing on host service . In such a case, the first protocol service  disrupts the connection between the first protocol service  and the host service . The first protocol service  then establishes, by implementing steps , , and , the connection between the first protocol service  and the host service , without interrupting the connection  between the client  and the first protocol service .","In one embodiment, a first re-connection ticket is generated at step . For example, the intermediary node  requests a first re-connection ticket from the ticket authority  or requests a first re-connection ticket for each of the \u201chops\u201d between the client  and the host service . Upon receiving the request, the ticket authority  generates the one or more first re-connection tickets. A re-connection ticket is, for example, a large random number, and can also generate a handle, which is, for example, a smaller random number. The ticket authority  can then transmit, at step , the first re-connection tickets and the handles to the intermediary node , while keeping a copy of the first re-connection tickets and a copy of the handles. The ticket authority  continues to maintain the address of the first protocol service  that was transmitted to it by the first computing node  at step . The intermediary node  then transmits, at step , the client's first re-connection ticket to the client .","At step , one or more second re-connection tickets are then generated. In one embodiment, the first protocol service  generates the second re-connection ticket for the client , which can be, for example, a large random number. In another embodiment, the first protocol service  generates second re-connection tickets for one or more of the \u201chops\u201d between the client  and the host service . The first protocol service , at step , then transmits the client's second re-connection ticket, through the intermediary node , to the client . In doing so, the first protocol service  keeps a copy of the second re-connection ticket and a session number associated therewith for identifying the session to be re-connected following a disruption of the connection . In one embodiment, for example, the first protocol service  maintains, for a particular session number, a table listing the secondary protocol connections -associated with that session number. In a like manner, the first protocol service  may maintain the first and\/or second re-connection tickets for each of the \u201chops\u201d being validated to reconnect the client  to the host service .","Accordingly, following re-establishment of the first protocol connection  and validation of the second re-connection ticket at the first protocol service , and\/or at any subsequent first protocol services  and\/or intermediary nodes , he first protocol service  can identify the secondary protocol connections  to be encapsulated within the re-established first protocol connection  for communication to the client . Alternatively, in another embodiment, and with reference again to , the system  of the present invention does not include the intermediary node(s) , the ticket authority , nor the third computing node . In such an embodiment, rather than generating and transmitting, at steps  through , both the first and the second reconnection tickets, the system  and method  provide for only a single re-connection ticket for the client  or for one or more of the \u201chops\u201d between the client  and the host service . In one such embodiment, the first protocol service , for example, generates the single re-connection ticket, which can be, for example, a large random number. The first protocol service  then transmits the client's re-connection ticket directly to the client  over the connection . In doing so, the first protocol service  keeps a copy of the single re-connection ticket and a session number associated therewith for identifying the session to be re-connected following a disruption of the connection . In another embodiment, the first protocol service  keeps the re-connection ticket for its connection to the host service  and a session number associated therewith for retrieving the re-connection ticket.","Referring now to , one embodiment of a method  for providing a client  with a reliable connection to one or more host services  and for re-connecting the client  to the host services  (for example at step  of ), using the exemplary embodiment of , is illustrated. In particular, at step , the secondary protocol connection  between the first protocol service  and each of the one or more host services  is maintained. Moreover, at step , a queue of data packets most recently transmitted between the client agent  of the client  and the first protocol service , via the connection  that was determined to have broken, for example, at step  of , is maintained. In one embodiment, the data packets are queued and maintained both before and upon failure of the connection . The queued data packets can be maintained, for example, in a buffer by the client agent . Alternatively, the first protocol service  can maintain in a buffer the queued data packets. In yet another embodiment, both the client agent  and the first protocol service  maintain the queued data packets in a buffer.","At step , a new first protocol connection  is established between the client agent  of the client  and the first protocol service  and linked to the maintained secondary protocol connection  between the first protocol service  and each of the one or more host services , thereby re-connecting the client  to the host services . After the client  is re-connected, the queued data packets maintained at step  can be transmitted, at step , via the newly established first protocol connection . As such, the communication session between the host services  and the client , through the first protocol service , is persistent and proceeds without any loss of data.","In an embodiment with multiple \u201chops\u201d traversing multiple first protocol services , at step , a portion or all of the data packets may be maintained at one or more of the first protocol services . At step , each \u201chop\u201d may be re-established. After the client  is re-connected and re-linked to the first of the one or more first protocol services  as described above, each of the remaining connections may be re-established and re-linked to the previously re-linked \u201chop\u201d until the final \u201chop\u201d to the host service  is re-established. Either after the final \u201chop\u201d is re-established and re-linked, or as each \u201chop\u201d is re-established and re-linked, the queued data packets maintained at step  can be transmitted, at step .","Referring now to , one embodiment of a method  for re-connecting the client  to the one or more host services  (for example at step  of ), using the exemplary embodiment of , is illustrated. At step , any remaining connections between the client  and the first protocol service  are broken. For example, where the connection has failed, but the connection has not, the connection is broken. Alternatively, where the connection has failed, but the connection has not, the connection is broken.","In one embodiment, using the actual address of the intermediary node  provided to the client , for example at step  of , the client agent  of the client  then re-establishes, at step , the first protocol connection between the client agent  and the intermediary node . Alternatively, in another embodiment, using the actual address of the third computing node  provided to the client , for example at step  of , the client agent  of the client  then re-establishes, at step , a first protocol connection between the client agent  and the third computing node . The third computing node  then determines the intermediary node  through which messages between the client  and the first protocol service  will have to pass. In one embodiment, the third computing node  chooses the intermediary node  using a load balancing equation. The intermediary node  chosen by the third computing node  in re-connecting the client  to the one or more host services  can be different from that chosen, for example at step  of , to initially connect the client  to the one or more host services . In one embodiment, an initial connection ticket for the chosen intermediary node  is generated when re-connecting the client  to a host service .","Having chosen the intermediary node , the third computing node  re-establishes a first protocol connection to the intermediary node . A first protocol connection is therefore re-established, through the third computing node , between the client agent  of the client  and the intermediary node . In one embodiment, when the first protocol connection to the intermediary node  is re-established, the first protocol connection is validated by validating a first or second re-connection ticket for this \u201chop\u201d with the ticket authority .","In one embodiment, where more than one level of intermediary nodes  exist, the intermediary node  through which the client agent  is routed at each of the levels.","\u201ca\u201d-\u201cn\u22121\u201d thereafter determines, based on a load balancing equation for example, the intermediary node  to which it will connect at the next level. Alternatively, in another embodiment, the third computing node  determines, for more than one or all of the levels \u201ca\u201d-\u201cn\u201d, the intermediary nodes  through which the client agent  will be routed. In other embodiments, either the intermediary node  or one of the computing nodes (e.g., the third computing node ) generates first or second re-connection tickets for one or more of the connections or \u201chops\u201d through which the client agent  is routed.","Having re-established the first protocol connection between the client agent  of the client  and the intermediary node , for example the intermediate node  at level \u201cn\u201d (hereinafter referred to in method  as the intermediary node ), the client agent  then transmits, at step , the first re-connection ticket and the second re-connection ticket for the client  to the intermediary node .","It is then determined, at step , whether the first re-connection ticket is valid. In one embodiment, the validity of the first re-connection ticket is determined by using the ticket authority . For example, the intermediary node  transmits the first re-connection ticket to the ticket authority . In one embodiment, the ticket authority  determines the validity of the first re-connection ticket by comparing it to a previously kept copy of the first re-connection ticket. If the ticket authority  determines the first re-connection ticket to be valid, the ticket authority  transmits, at step , the address of the first protocol service  to the intermediary node . Otherwise, if the ticket authority  determines the first re-connection ticket to be invalid, the client  is, at step , refused re-connection to the first protocol service  and, consequently, re-connection to the host services .","At step , the first re-connection ticket is deleted by, for example, the ticket authority  and a replacement first re-connection ticket is generated by, for example, the ticket authority . Moreover, a replacement handle can be generated by, for example, the ticket authority . In some such embodiments, the ticket authority  transmits the replacement first re-connection ticket and the replacement handle to the intermediary node . Moreover, in some such embodiments, the ticket authority  keeps a copy of the replacement first re-connection ticket. In some embodiments, the ticket authority  waits for the client  to acknowledge that it has received the replacement first re-connection ticket before it proceeds to delete the first re-connection ticket.","After the first re-connection ticket is validated, the intermediary node , using the address of the first protocol service , re-establishes, at step , the first protocol connection between the intermediary node  and the first protocol service . Having re-established the first protocol connection between the intermediary node  and the first protocol service , it is then determined, at step , whether the second re-connection ticket is valid. In one embodiment, the validity of the second re-connection ticket is determined by using the first protocol service . For example, the intermediary node  transmits the second re-connection ticket to the first protocol service . In one embodiment, the first protocol service  determines the validity of the second re-connection ticket by comparing it to a previously kept copy of the second re-connection ticket. In another embodiment of step , the first protocol service  validates a first re-connection ticket for the connection between the first protocol service  and the host service , or in another embodiment, between the first protocol service  and another first protocol service  or an intermediary node . In a similar manner, each \u201chop\u201d thereafter between the first protocol service  and the host service  may be validated with one or more tickets, either initial or re-connection tickets, to validate the continued use of the \u201chop\u201d on behalf of the client .","If the first protocol service  determines the second re-connection ticket to be valid, the re-established first protocol connection between the first intermediary node  and the first protocol service  is linked, at step , to the maintained secondary protocol connection  between the first protocol service  and each of the one or more host services . Otherwise, if the first protocol service  determines the second re-connection ticket to be invalid, the re-established first protocol connection is not linked to the one or more maintained secondary protocol connections  and the client  is, at step , refused re-connection to the one or more host services . In the case of a multiple-hop connection between the first protocol service  and the host service , each \u201chop\u201d may be validated for re-connection and at step  be linked to the previous \u201chop\u201d until the final \u201chop\u201d to the host service  is validated, or until one of the \u201chops\u201d is refused re-connection.","At step , the second re-connection ticket is deleted by, for example, the first protocol service  and a replacement second re-connection ticket is generated by, for example, the first protocol service  for transmission to the client . In such an embodiment, the first protocol service  keeps a copy of the replacement second re-connection ticket. In some embodiments, the first protocol service  waits for the client  to acknowledge that it has received the replacement second re-connection ticket before it proceeds to delete the second re-connection ticket. In the case of validating one or more of the \u201chops\u201d for re-connecting a client , one or more replacement re-connection tickets, at step , may be generated and\/or a copy saved by the ticket authority , intermediary nodes , any of the computing nodes, or one or more of the first protocol services .","At step , the replacement first re-connection ticket and the replacement second re-connection ticket are transmitted to the client. For example, the ticket authority  can transmit, through the intermediary node , the replacement first re-connection ticket to the client . Moreover, in one embodiment, the first protocol service  transmits, through the intermediary node , the replacement second re-connection ticket to the client . In other embodiments, the replacement re-connection tickets for one or more \u201chops\u201d may be transmitted to one or more of the intermediary nodes , any of the computing nodes, or one or more of the first protocol services .","Alternatively, in other embodiments, as discussed above, the system  and methods of the invention provide for only a single re-connection ticket for the client  and\/or a single re-connection for each of the \u201chops\u201d between the client  and a host service . As such, rather than using both first and second re-connection tickets, the illustrative method  uses only the aforementioned single re-connection ticket. In one such embodiment, the client agent  of the client  is also provided with the address of the first protocol service . To re-connect to the host services , the client agent  transmits the single re-connection ticket directly to the first protocol service . The first protocol service  then determines whether the single re-connection ticket is valid. In one embodiment, the first protocol service  determines the validity of the single re-connection ticket by comparing it to a previously kept copy of the single re-connection ticket. If the first protocol service  determines the single re-connection ticket to be valid, the re-established first protocol connection  between the client  and the first protocol service  is linked to the maintained secondary protocol connection  between the first protocol service  and each of the one or more host services . Otherwise, if the first protocol service  determines the single re-connection ticket to be invalid, the re-established first protocol connection  is not linked to the one or more maintained secondary protocol connections  and the client  is refused re-connection to the one or more host services .","After the single re-connection ticket is validated, the single re-connection ticket is deleted by, for example, the first protocol service  and a replacement single re-connection ticket is generated by, for example, the first protocol service  for transmission to the client . In transmitting the replacement single re-connection ticket to the client , the first protocol service  keeps a copy of the replacement single re-connection ticket. In some embodiments, the first protocol service  waits for the client  to acknowledge that it has received the replacement single re-connection ticket before it proceeds to delete the single re-connection ticket.","In yet another embodiment, like the first and second re-connection tickets, the single re-connection ticket is configured for automatic deletion after a pre-determined period of time following a failure in the connection , as at step , and\/or following a clean termination of the connection , as at step .","Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore, it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention, which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different, even though not identical in other respects to what is shown and described in the above illustrations."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, aspects, features, and advantages of the invention will become more apparent and may be better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4","FIGS. 1A-1B"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 6A","FIG. 1A"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 6B","FIG. 6A"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 6C","FIG. 6B"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 6D","FIG. 6C"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIGS. 8A-8C"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIGS. 10A-10B"}]},"DETDESC":[{},{}]}
