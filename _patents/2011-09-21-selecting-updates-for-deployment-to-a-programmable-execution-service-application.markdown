---
title: Selecting updates for deployment to a programmable execution service application
abstract: A test environment is created for use in selecting updates for deployment to a programmable execution service (“PES”) application. The test environment is created in one embodiment by replicating a production network and one or more production virtual machine instances executing the PES application. Once the test environment has been created, the test environment is utilized to test and select updates for deployment to the PES application. The updates may be selected by deploying the updates to the test environment and using the test environment to determine whether the deployed updates are compatible with the PES application, permit the PES application to continue to operate performantly, and/or permit the PES application to meet one or more business performance metrics. Once the updates have been selected, the updates may be applied to production virtual machine instances executing the PES application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839222&OS=08839222&RS=08839222
owner: Amazon Technologies, Inc.
number: 08839222
owner_city: Reno
owner_country: US
publication_date: 20110921
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["A programmable execution service (\u201cPES\u201d) can provide computing resources for executing applications on a permanent or an as-needed basis. The computing resources provided by a PES may include various types of resources, such as data processing resources, data storage resources, data communication resources, and the like. Each type of computing resource may be general-purpose or may be available in a number of specific configurations. For example, data processing resources may be available as virtual machine instances. The instances may be configured to execute applications, including World Wide Web (\u201cWeb\u201d) servers, application servers, media servers, database servers, and the like. The resources provided by a PES can typically be purchased and utilized according to various financial models.","Applications executing on a PES (\u201cPES applications\u201d) can be highly complex. For instance, it is not uncommon for such applications to be configured to execute many hundreds of different types of services on a thousand or more instances. It is also not uncommon for PES applications to utilize software components that are developed internally by the owner or maintainer of the PES application, software components developed by the open source community, and\/or software components licensed from a third-party provider. As a result, many different software developers and\/or software development teams might concurrently maintain and develop updates to the various components that make up a PES application. Updates to a PES application might implement security patches, bug fixes, feature improvements, or make other changes. Updates might install new software components, patch existing software components, remove software components from a PES application, and\/or perform other tasks.","As a result of the complexity of many PES applications and the fact that updates to components utilized by PES applications might be issued by many different developers, it can be difficult for the owner or maintainer of a PES application to determine the applicability and compatibility of the various updates. Consequently, it may be hard for the owner or maintainer of the PES application to determine which updates to deploy to a PES application. This is especially true for high-availability PES applications for which downtime is unacceptable. The possibility of downtime caused by the deployment of an incompatible update typically outweighs the possible benefits that might result from the deployment of an update to the PES application. As a result, updates to PES applications may be declined or postponed out of fear that the deployment of the updates might negatively affect the performance of the PES application.","It is with respect to these and other considerations that the disclosure made herein is presented.","The following detailed description is directed to technologies for selecting updates for deployment to a PES application. Utilizing the technologies described herein, updates can be selected for deployment to an application, such as an application executing on a PES, in a way that helps ensure that updates are compatible with the application and that the application will continue to operate performantly and meet expected business goals. Additionally, updates can be selected for deployment to PES applications utilizing the mechanisms disclosed herein with greatly reduced risk of application downtime.","According to one aspect disclosed herein, a PES platform is configured to provide instances of computing resources for executing a PES application. For example, the PES platform might provide virtual machine instances (\u201cinstances\u201d) for executing an application, such as an e-commerce application or another type of distributed application. Software components that implement the PES application are deployed to the virtual machine instances provided by the PES platform. As discussed above, PES applications might be implemented by many different components executing on many different instances.","The PES platform is also provided with functionality for selecting updates to be applied to the components of the PES application and for deploying the selected updates. As discussed above, it may be necessary to periodically apply software updates to various components of a PES application to implement security patches, bug fixes, feature improvements, or for other reasons. An update might install new software components, patch existing software components, remove software components from the application, and\/or perform other tasks. An update might install or modify components executing on a single or multiple instances and, therefore, might effect the operation a PES application that executes utilizing components on many different instances.","In order to select updates for deployment to a PES application, an update evaluation component, a deployment component, or another component creates or identifies a test environment for use in identifying updates that are suitable for deployment to the PES application. In one embodiment, the test environment is created by programmatically replicating a production network and production instances executing the PES application. A production network is a network that is receiving live network traffic destined for the production instances. For instance, in the case of an e-commerce application, the production network receives actual network traffic from customers of the e-commerce application. By programmatically replicating the production network, a replicated network is created under software control that receives a copy of the traffic received by the production network. An instance is a production instance while its primary function is to act according to the design of the PES application. For instance, a production instance might handle live network traffic received on the production network.","Other resources utilized by the PES application, such as database resources, might also be replicated and utilized as a part of the test environment. In this manner, a copy of the application and its dependent resources, including incoming network traffic, is created. By testing the applicability, compatibility, and cost\/benefit of updates to a PES application on the replicated instances, the possibility of downtime to the production instances may be reduced or even eliminated.","According to another embodiment, the test environment includes a production network and production instances. As mentioned above, the production network and instances receive live incoming network traffic. Consequently, performing the processes described herein for selecting updates to be applied to a PES application on production instances might result in downtime to the production instances. As a result, the processes described herein for selecting updates might be performed incrementally when production instances are utilized in the test environment. For instance, updates might be initially deployed and tested on a relatively small number of instances. If the updates are compatible with the PES application and operate performantly, the updates might be deployed to a greater number of instances. If the updates appear to be incompatible with the PES application or do not provide a desired level of performance, the updates to the PES application might be removed from the production instances.","In another embodiment, the test environment includes a test network and test instances. An instance is a test instance while its primary function is to test a potential update to a PES application. The test network is also created for performing the processes described herein for selecting updates for deployment to the PES application. Live network traffic received on a production network might be recorded and replayed on the test network to simulate actual network traffic to the test instances. As with the replicated network and instances described above, the test network and test instances do not receive actual live network traffic and, therefore, there is no risk of downtime to a production PES application as a result of performing the processes described herein for selecting updates on the test network and test instances.","In view of the above, it should be appreciated that a production instance might also be a test instance, or become a test instance temporarily. It should also be appreciated that the terms \u201creplicated\u201d or \u201creplicate\u201d as utilized herein encompass not only cloning an instance, but also repurposing an instance. For example, a production instance might be temporarily utilized as a test instance. In this example, the production instance is considered a test instance because it no longer receives live customer network traffic and because the instance is being utilized to test aspects of the operation of a PES application following the deployment of one or more updates.","After testing of an update, or updates, has completed, test instances might also be repurposed into production instances. In this manner, suitable updates can be \u201cdeployed\u201d to the PES application by converted test instances into production instances that handle live network traffic. In this regard, it should be appreciated that, as used herein, the phrase \u201cdeploy an update\u201d includes the conversion of a test instance into a production instance utilized by a PES application.","Once an appropriate test environment has been created, an update evaluation component utilizes the test environment to test and select updates for wide deployment to the PES application. In this regard, the update evaluation component may determine whether the updates are compatible with the PES application. To make this determination, the update evaluation component may determine whether the PES application is operating properly in the test environment following the deployment of the updates. If the PES application is not operating correctly, the updates may be considered incompatible with the PES application and not selected for deployment to production instances. If the PES application is operating correctly following deployment of the updates, the updates may be considered compatible with the PES application and selected for deployment to production instances executing the PES application.","In other embodiments, the update evaluation component might also determine whether the PES application is operating performantly in the test environment following the deployment of the updates. A system administrator might specify operating parameters of the PES application that are evaluated to determine whether the PES application is operating performantly. If the PES application does not operate performantly in the test environment following deployment of the updates, the updates may be considered unsuitable for deployment to production instances. If the PES application does operate performantly in the test environment following the deployment of the updates, the updates may be selected for deployment to production instances executing the PES application.","In other embodiments, when a production network and one or more production instances are utilized in the test environment, the update evaluation component might also determine whether the PES application executing in the test environment is meeting one or more business metrics following the deployment of the updates. A system administrator might define the business metrics that are evaluated by the update evaluation component. For instance, a system administrator might define gross sales by an e-commerce PES application as a business metric to be tested. If gross sales decline following application of the updates, then the updates may be considered unsuitable for wide deployment to production instances. If gross sales remain steady or improve, then the updates may be selected for deployment to the production instances. The update evaluation component might also evaluate other types of business metrics.","It should be appreciated that the determinations described above as to whether an update is compatible with a PES application, whether a PES application is operating performantly following the deployment of an update, and whether a PES application is meeting business metrics following the application of an update might be performed by evaluating one or more direct performance metrics and\/or one or more indirect performance metrics.","Direct performance metrics are metrics that can be directly measured at an instance that has been changed by the deployment of an update. For instance, direct performance metrics might include CPU or network utilization, memory usage, or response latency of an instance. Direct performance metrics may correlate strongly to the installation of an update at a particular instance.","Indirect performance metrics are metrics that reflect aspects of the overall operation of a PES application, which may include the operation of many different components on many different instances. For instance, indirect performance metrics might include business metrics like the gross volume of orders received by an e-commerce PES application. Indirect performance metrics may correlate weakly to the installation of an update at one or more instances.","Once applicable, compatible, and performant updates have been selected by the update evaluation component using the test environment, a deployment component may deploy the selected updates to production instances. Additionally, or alternatively, the update evaluation component might generate a deployment report providing information regarding the compatibility and\/or performance of tested updates. A system administrator might utilize the report to decide whether the updates should be deployed to the production instances. Such a report might also aid the administrator in scheduling modifications to the PES application to prepare the application for deployment of the updates.","According to other embodiments, multiple updates might be tested simultaneously to measure the mutual compatibility of multiple components. In this regard, updates might be tested in various combinations to determine the inter-compatibility of the updates. Reports might also be generated regarding the inter-compatibility of various updates and provided to a system administrator.","In another embodiment, component providers might annotate updates with required components and\/or required or suggested versions of other components. In this embodiment, the update evaluation component may be configured to test updates on a PES application in the test environment once all required components have been updated to a required or suggested version.","In another embodiment, the updates may be components provided by a third-party component provider. In this embodiment, a third-party component provider may offer components for use with the PES application. The deployment component may provide functionality for allowing the third-party component provider to register components for use with the PES application. The components might be alternatives to other components provided by other component providers that perform similar functions. The deployment component may then deploy the component to a test environment in the manner described above.","The update evaluation component might also test the performance of the third-party component against various metrics. For instance, the update evaluation component might determine that the third-party component reduces network bandwidth, request latency, and\/or licensing costs. In this regard, the update evaluation component might automatically deploy third-party components to production instances that increase performance or reduce costs by a certain threshold. The update evaluation component might also provide a report to an administrator indicating the reduction in costs and\/or improvement in performance caused by the deployment of the third-party component. The administrator may utilize the report to determine whether the third-party component should be deployed to production instances.","In embodiments the processes described above for evaluating and deploying updates are triggered by a source code management system. For instance, in one embodiment the check-in of source code for an update to a source code management system causes the update evaluation component to test the update and to automatically deploy the update if the update is compatible with the PES and meets any other performance or business targets set by an administrator. The processes described above for evaluating and deploying updates might also be triggered in response to the availability of new updates or other events.","It should be appreciated that the subject matter presented herein may be implemented as a computer process, a computer-controlled apparatus, a computing system, or an article of manufacture, such as a computer-readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types.","Those skilled in the art will also appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein, including multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, handheld computers, personal digital assistants, e-readers, cellular telephone devices, special-purposed hardware devices, network appliances, and the like. The embodiments described herein may also be practiced in distributed computing environments, where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","In the following detailed description, references are made to the accompanying drawings that form a part hereof, and that show, by way of illustration, specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1","FIG. 1"],"b":["100","108"]},"The PES platform  can provide computing resources for executing the application on a permanent or an as-needed basis. The computing resources provided by the PES platform  may include various types of resources, such as data processing resources, data storage resources, data communication resources, and the like. Each type of computing resource may be general-purpose or may be available in a number of specific configurations. For example, data processing resources may be available as virtual machine instances. The instances may be configured to execute applications, including Web servers, application servers, media servers, database servers, services, and the like. Data storage resources may include file storage devices, block storage devices, and the like.","Each type or configuration of computing resource may be available in different sizes, such as large resources, consisting of many processors, large amounts of memory, and\/or large storage capacity, and small resources consisting of fewer processors, smaller amounts of memory, and\/or smaller storage capacity. Customers may choose to allocate a number of small processing resources as Web servers and\/or one large processing resource as a database server, for example.","The computing resources provided by the PES platform  are enabled by one or more data centers A-N (which may be referred to herein singularly as \u201ca data center \u201d or in the plural as \u201cthe data centers \u201d). The data centers  are facilities utilized to house and operate computer systems and associated components. The data centers  typically include redundant and backup power, communications, cooling, and security systems. The data centers  might also be located in geographically disparate locations. One illustrative configuration for a data center  that implements the concepts and technologies disclosed herein for selecting updates for deployment to a PES application will be described below with regard to .","The customers and other consumers of the PES platform  may access the computing resources provided by the data centers  over a wide-area network (\u201cWAN\u201d) . Although a WAN is illustrated in , it should be appreciated that a local-area network (\u201cLAN\u201d), the Internet, or any other networking topology known in the art that connects the data centers  to remote consumers may be utilized. It should also be appreciated that combinations of such networks might also be utilized.","The customer computing system  is a computer utilized by a customer or other consumer of the PES platform . For instance, the customer computing system  may be a server computer, a desktop or laptop personal computer, a tablet computer, a wireless telephone, a personal digital assistant (\u201cPDA\u201d), an e-reader, a game console, a set-top box, or any other computing device capable of accessing the PES platform .","The customer computing system  may be utilized to access and configure aspects of the computing resources provided by the PES platform . In this regard, the PES platform  might provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on the customer computing system . Alternatively, a stand-alone application program executing on the customer computing system  might access an application programming interface (\u201cAPI\u201d) exposed by the PES platform  for performing the configuration operations. Other mechanisms for configuring the operation of the PES platform , including testing updates to a PES application, might also be utilized.","According to embodiments disclosed herein, the capacity of purchased computing resources provided by the PES platform  can be scaled in response to demand. In this regard, scaling refers to the process of instantiating (which may also be referred to as \u201claunching\u201d or \u201ccreating\u201d) or terminating (which may also be referred to as \u201cde-scaling\u201d) instances of computing resources in response to demand. In this manner, the capacity of resources purchased by a customer of the PES platform  can be scaled on-demand.","Auto scaling is one mechanism for scaling computing resources in response to increases or lulls in demand for the resources. Auto scaling allows customers of the PES platform  to configure the platform  to scale their purchased computing resources according to conditions defined by the customer. For instance, rules may be defined for scaling up capacity in a particular manner in response to the occurrence of specified conditions, such as a spike in demand. Similarly, rules might also be defined to scale down capacity in a particular manner in response to the occurrence of other conditions, such as a lull in demand.","The PES platform  may also be configured with a deployment component to assist customers in the deployment of new instances of computing resources. The deployment component may receive a configuration from a customer that includes data describing how new instances should be configured. For example, the configuration might specify one or more applications or software components that should be installed in new instances, provide scripts and\/or other types of code to be executed in new instances, provide cache warming logic specifying how an application cache should be prepared, and other types of information. The deployment component utilizes the customer-provided configuration and cache warming logic to launch, configure, and prime new instances of computing resources.","The deployment component might also provide functionality for assisting customers with the deployment of updates to existing instances of computing resources. Through this mechanism, a customer can indicate that an update, or updates, is to be applied to an application executing on the PES platform. In response thereto, the deployment component is configured to apply the update to the application in an optimized fashion that satisfies any business or technical requirements of the customer.","According to the various embodiments presented herein, the deployment component operates in conjunction with an update evaluation component. As will be described in greater detail below, the update evaluation component provides functionality for testing the applicability, compatibility, and performance of updates to a PES application prior to the wide deployment of the updates to production instances. Additional details regarding an update evaluation component utilized by the PES platform  that includes this functionality will be described below with regard to . It should be appreciated that the functionality described herein as being performed by the deployment component might be performed by the update evaluation component and vice versa. Additionally, other components or systems might also perform the described functionality.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 2","FIG. 2"],"b":["102","108","108","102","202","202","202","202","202","202","206","206"]},"In one embodiment, the instances A-N (which may be referred to herein singularly as \u201can instance \u201d or in the plural as \u201cthe instances \u201d) are virtual machine instances. As known in the art, a virtual machine instance is an instance of a software implementation of a machine (i.e. a computer) that executes programs like a physical machine. In the example of virtual machine instances, each of the servers  may be configured to execute an instance manager  capable of executing the instances. The instance manager  might be a hypervisor or another type of program configured to enable the execution of multiple instances  on a single server , for example. As discussed above, each of the instances  may be configured to execute all or a portion of an application.","It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machine instances, other types of instances can be utilized with the concepts and technologies disclosed herein. For instance, the technologies disclosed herein might be utilized with instances of storage resources, instances of data communications resources, and with other types of resources. The embodiments disclosed herein might also execute all or a portion of an application directly on a computer system without utilizing virtual machine instances.","The data center  shown in  also includes a server computer  reserved for executing software components for managing the operation of the data center , the server computers , and the instances . In particular, the server computer  might execute a management component . As discussed above, a customer of the PES platform  might utilize the customer computing system  to access the management component  to configure various aspects of the operation of PES platform  and the instances  purchased by the customer. For example, the customer may purchase instances and make changes to the configuration of the instances. The customer might also specify settings regarding how the purchased instances are to be scaled in response to demand. The customer might also indicate that the processes described herein for selecting updates to a PES application should be performed.","The auto scaling component  scales the instances  based upon rules defined by a customer of the PES platform . For instance, the auto scaling component  might allow a customer to specify scale up rules for use in determining when new instances should be instantiated and scale down rules for use in determining when existing instances should be terminated.","As discussed briefly above, the data center  is also configured with a deployment component  to assist customers in the deployment of new instances  of computing resources. The deployment component  may receive a configuration from a customer that includes data describing how new instances  should be configured. For example, the configuration might specify one or more applications that should be installed in new instances , provide scripts and\/or other types of code to be executed for configuring new instances , provide cache warming logic specifying how an application cache should be prepared, and other types of information.","The deployment component  also provides functionality for deploying updates to an application. In this regard, the management component  might be configured to allow a customer to declare that one or more updates are available for an application and to provide update preferences indicating various factors regarding when and how the update should be performed. As mentioned above, the deployment component  may also provide the functionality disclosed herein for testing updates prior to wide-scale deployment to production instances executing a PES application. Additional details regarding this process and other functionality provided by the deployment component  will be provided below with regard to .","As illustrated in , the data center  might also be configured with an update evaluation component . As described briefly above, the update evaluation component  operates in conjunction with the deployment component  to test the applicability, compatibility, and performance of updates to a PES application. Details regarding the operation of the update evaluation component  will be provided below with regard to .","In the example data center  shown in , an appropriate LAN  is utilized to interconnect the server computers A-N and the server computer . The LAN  is also connected to the WAN  illustrated in . It should be appreciated that the network topology illustrated in  has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A-N, between each of the server computers A-N in each data center , and between instances  purchased by each customer of the PES platform . These network topologies and devices should be apparent to those skilled in the art.","It should be appreciated that the data center  described in  is merely illustrative and that other implementations might be utilized. In particular, functionality described herein as being performed by the management component , the auto scaling component , the deployment component , and the update evaluation component  might be performed by other components or by a combination of these or other components. Additionally, it should be appreciated that this functionality might be implemented in software, hardware, or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["206","302","108","108","304","306","308","310"]},"The on-demand instances , which might also be referred to herein as \u201cregular\u201d instances, are instances that are paid for and in active use by a customer. The on-demand instances  allow customers of the PES platform  to pay for capacity per unit of time, such as an instance-hour, without requiring a long-term commitment. This frees the customer from the costs and complexities of planning, purchasing, and maintaining hardware and transforms what are commonly large fixed costs into much smaller variable costs.","The reserved instances  are instances of a computing resource that are reserved for a customer in exchange for a payment. The reserved instances  provide the customer the option to make a one-time payment for each instance they want to reserve. In turn, the customer may receive a significant discount on the hourly usage charge for the reserved instances  as compared to the on-demand instances . After the customer makes a one-time payment for the reserved instances , the reserved instances  are reserved for the customer and the customer has no further obligation. The customer may choose to run the reserved instances  for the discounted usage rate for the duration of a chosen term. If the customer does not use the reserved instances , the customer will not pay usage charges on these instances.","The spot instances  allow customers to bid on unused capacity in the PES platform . The customer can run the spot instances  for as long as their bid exceeds a current market price, referred to herein as the spot instance market price, which may fluctuate based upon supply and demand. The spot instances  may be terminated if a customer's maximum bid no longer exceeds the current spot instance market price.","In order to obtain the spot instances , the customer places a request for the spot instances  that specifies the desired number of spot instances  and the maximum price the customer is willing to pay per instance hour. If the customer's maximum price bid exceeds the current spot instance market price for the spot instances , the customer's request will be fulfilled and the customer's spot instances  will run until either the customer chooses to terminate them or the market price increases above the customer's maximum price (whichever is sooner). Various components operating within the PES platform  may manage the market for the spot instances , including setting the current spot instance market price for the spot instances .","The standby instances  are spot instances  that have been acquired on behalf of a customer and that are made ready for near immediate use by the customer in the manner described herein. The price charged for the standby instances  is typically less than the price charged for the on-demand instances , since the standby instances  may be terminated in the same manner as the spot instances . In one embodiment, the standby instances  are priced higher than the spot instances  and the reserved instances , but lower than the on-demand instances . It should be appreciated, however, that the various pricing mechanisms described above for the on-demand instances , reserved instances , spot instances , and standby instances  are merely illustrative and that other mechanisms may be utilized to set the pricing for the various instance types.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 4","b":["214","216","108","214","216","214","216","216","214"]},"In one embodiment disclosed herein, the management component  is configured to provide functionality for allowing an owner or maintainer of an application to declare that an update , or updates, is available for the application. As discussed above, the update  might install new software components into the application, may patch existing software components in the application, may remove software components from the application, and\/or perform other tasks for updating the components of the application.","In one embodiment, an update  is declared available for the application by placing the update  into an update pool . For instance, the developer of an update might place an update into the update pool , thereby indicating that the update is ready for testing and deployment to the PES application. In one embodiment, an update  is placed into the update pool  in response to the check in of source code  to a source code management system. A third-party component provider  might also place updates into the update pool. Other mechanisms might also be provided to enable updates to be placed into the update pool .","The update pool  is a data store that stores updates prior to deployment to a PES application. The deployment component  might continually or periodically examine the contents of the update pool  to determine when new updates  are available. In this way, the addition of an update  to the update pool  might trigger the processes described herein for testing the update  with the PES application and deploying the update  to the PES application automatically if the update  meets certain criteria. This process might be repeated continually, periodically, or on another schedule in order to automatically evaluate and roll out compatible and performant updates to the PES application.","In response to receiving an indication from an owner or maintainer of an application that an update  is available for deployment, the deployment component  and the update evaluation component  might perform the processes described herein for determining whether the update  is suitable for deployment to the application. In other embodiments, the functionality presented herein might be performed in response to other events, like the check-in of source code  for an update  to the application to a source code management system , or in response to other events.","In order to select the updates for deployment to the application, the update evaluation component  is configured to first create or identify a test environment  for performing the processes described herein. In one embodiment, the update evaluation component  causes a test environment B to be created by programmatically replicating a production network  and production instances A-C executing the PES application. As mentioned briefly above, the production network  is a network that is receiving live network traffic destined for the production instances A-C. In the case of an e-commerce application, for example, the production network  receives actual network traffic from customers of the e-commerce application. The production instances A-C are instances that handle the live network traffic received on the production network .","By programmatically replicating the production network  for use in the test environment B, a replicated production network  is created that receives a copy of the traffic received by the production network . The replicated production instances AA-CC are replicas of the production instances A-C. Other resources utilized by the PES application, such as database resources, might also be replicated. In this manner, the replicated production instances AA-CC receive identical network input to the production instances A-C, and receive identical responses from dependent network resources, but are in fact receiving a copy or \u201cecho\u201d of those responses.","By performing the processes described herein for selecting updates for deployment to an application on a test environment B that includes a replicated production network  and replicated production instances AA-CC, the possibility of downtime to the production instances A-C may be reduced or even eliminated. One mechanism for programmatically replicating a network is described in U.S. patent application Ser. No. 12\/978\/995, which was filed on Dec. 27, 2010, and entitled \u201cProgrammatically Provisioning Virtual Networks,\u201d which is expressly incorporated herein by reference in its entirety.","According to another embodiment, the update evaluation component  utilizes a test environment A that includes a production network  and production instances A-C. As mentioned above, the production network  and instances A-C receive live incoming network traffic. As a result, installing and testing updates on the production instances A-C might result in downtime to the production instances A-C.","In order to minimize any negative consequences of the processes presented herein on the production instances A-C, the processes for selecting updates described herein might be performed incrementally when a test environment A is utilized that includes production instances A-C. For example, updates might be initially deployed and tested on a relatively small number of production instances A-C. If the updates operate satisfactorily, the updates might be deployed to a greater number of production instances A-C. If the updates do not execute properly or do not provide any desired benefits, the deployment of the updates to the production instances A-C might be rolled back.","In another embodiment, the update evaluation component  utilizes a test environment C that includes a test network  and test instances X-Z. The test instances X-Z are instances that are created for the purpose of testing updates to the PES application. The test network  is also created for testing the performance of updates to the PES application. Live network traffic received on the production network  might be recorded and replayed on the test network  to simulate actual network traffic to the test instances X-Z. As with the replicated network  and instances AA-CC described above, the test network  and instances X-Z do not receive actual live network traffic and, therefore, there is no risk of downtime to a production PES application as a result of testing updates on the test network  and test instances X-Z.","Once the update evaluation component  has created or identified an appropriate test environment , the update evaluation component  utilizes the test environment to select updates for deployment to the PES application. In this regard, the update evaluation component  may determine whether an update  is compatible with the PES application. To make this determination, the evaluation component  may determine whether the PES application is operating properly in the test environment  following the deployment of the update . The update evaluation component  might evaluate one or more direct metrics and\/or one or more indirect metrics to determine if the PES application is operating properly.","If the PES application is not operating correctly, the update  may be considered to be incompatible with the PES application and not selected for deployment to the production instances A-C. If the PES application is operating correctly following deployment of the update , the update  may be considered compatible with the PES application and selected for deployment to the production instances A-C executing the PES application.","In other embodiments, the update evaluation component  might also determine whether the PES application is operating performantly in the test environment  following the deployment of the update . A system administrator might specify operating parameters of the PES application that are evaluated to determine whether the PES application is operating performantly. For instance, the system administrator might specify one or more direct metrics and\/or one or more indirect metrics that should be evaluated to determine if the PES application is operating performantly.","If the PES application does not operate performantly in the test environment  following deployment of the update , the update  may be considered unsuitable for deployment to the production instances A-C. If the PES application does operate performantly in the test environment  following the deployment of the update , the update  may be selected for deployment to the production instances A-C executing the PES application.","In other embodiments where a production network  and one or more production instances A-C are utilized in the test environment A, the update evaluation component  might also determine whether the PES application executing in the test environment A is meeting one or more business metrics following the deployment of the update . A system administrator might define the business metrics that are evaluated by the update evaluation component . For instance, the system administrator might define one or more indirect metrics that should be evaluated to determine whether certain business goals for the PES application are being met.","As an example, a system administrator might define gross sales by an e-commerce PES application as a business metric to be tested. If gross sales decline following deployment of the update , then the update  may be considered unsuitable for wide deployment to the production instances A-C. If gross sales remain steady or improve, then the update  may be selected for deployment to the production instances A-C. Other types of indirect metrics might also be evaluated by the update evaluation component .","Once the update evaluation component  has selected an update  for deployment to the PES application, the deployment component  may cause the update  to be deployed to the production instances A-C. In this manner, the update evaluation component  can utilize a test environment B or C to test the compatibility and performance of the update  without impacting the production instances A-C. When an update  has been selected for deployment, the deployment component  can deploy the selected update  to the production instances A-C.","In another embodiment, the update evaluation component  generates a deployment report  in addition to or instead of automatically rolling out updates to the production instances A-C. The deployment report  includes data describing the compatibility and performance of the tested updates. A system administrator might utilize the report to decide whether updates should be deployed to the production instances A-C. The deployment report  might also include data indicating why a particular update, or updates, was deemed unsuitable for deployment to the PES application. A developer might utilize this information to modify the update. The developer might then submit the modified update to the update pool .","Although only a single update  has been illustrated in , it should be appreciated that multiple updates  might be tested simultaneously to measure the mutual compatibility of multiple components. In this regard, multiple updates  might be tested in various combinations to determine the inter-compatibility of the updates. The update evaluation component  might also generate reports that include data specifying the inter-compatibility of various updates  and provide the reports to a system administrator.","In another embodiment, component providers might annotate updates  with required components and\/or required or suggested versions of other components. In this embodiment, the update evaluation component  may be configured to test updates on a PES application in the test environment  once all required components have been updated to a required or suggested version.","In yet another embodiment, the update  is a component  provided by a third-party component provider . In this embodiment, the third-party component provider  offers components for use with the PES application. The deployment component  and\/or the update evaluation component  also provides functionality for allowing the third-party component provider  to register components  for use with the PES application. The component  might be an alternative to other components provided by other component providers that perform similar functions. The deployment component  and\/or the update evaluation component  may receive the component  from the third-party component provider  and deploy the component  to a test environment B or C in the manner described above. In other embodiments, the third-party component provider  may utilize a Web site or other mechanism to indicate the availability of the component.","The update evaluation component  might also test the performance of the third-party component  against various metrics. For instance, the update evaluation component  might determine that the third-party component  reduces network bandwidth, request latency, licensing costs, or other operating factors. In this regard, the update evaluation component  might cause a third-party component  to be automatically deployed to production instances A-C that increase performance or reduce costs by a certain threshold. The update evaluation component  might also provide a report to an administrator indicating the reduction in costs and\/or improvement in performance caused by the deployment of the third-party component . The administrator may utilize the report to determine whether the third-party component  should be deployed to production instances A-C. One mechanism for utilizing third-party software components is described in U.S. patent application Ser. No. 12\/980,214, which was filed on Dec. 28, 2010, and entitled \u201cManaging Use of Software Components,\u201d and which is expressly incorporated herein by reference in its entirety.","It should be appreciated that the determinations described above as to whether updates are compatible, performant, and\/or satisfy one or more metrics may be made at a specific point in time. Alternatively, these determinations may be made over a period of time. For instance, the factors identified above might be evaluated over the course of a day, week, month, or other period of time to evaluate the impact of one or more updates on the PES application. An administrator might specify the period of time that one or more updates are to be evaluated over. If the updates meet the specified requirements over the specified period of time, then the updates may be deployed to production instances. Otherwise, the updates may not be deployed to production instances or may be rolled back if production instances are utilized to test the updates.","To further illustrate the process of evaluating updates over time, consider a scenario in which three updates (referred to as U1, U2, and U3) are deployed at one point in time and three other updates (referred to as U4, U5, and U6) are deployed at another point in time. If a problem is detected at some point following the deployment of the updates, six separate test environments may be created to test the operation of the PES application following the roll back of each of the updates U1-U6. If, for example, the PES application operates in the test environments acceptably following the rollback of U4 and U5, another test environment might be created in which both U4 and U5 are rolled back and the operation of the PES application in this test environment may be tested. If the PES application operates acceptably in the test environment following the rollback of both U4 and U5, then U4 and U5 might be rolled back on the production instances. In this manner, a test environment may be utilized to identify previously deployed updates that are operating incorrectly and to roll back the updates from the production instances.","Turning now to , additional details will be provided regarding one illustrative process disclosed herein for selecting updates to an application executing on the PES platform . It should be appreciated that the logical operations described herein with respect to  and the other FIGURES are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as operations, structural devices, acts, or modules. These operations, structural devices, acts, and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in parallel, or in a different order than those described herein.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 5","b":["500","214","108","500","216","214","500","210","500"]},"As discussed above, the routine  might be performed in response to an update  being placed into the update pool . The routine  might also be performed in response to the check in of source code  for the update  to the source code management system . The routine  might also be performed in response to receiving an indication from a third-party component provider  that a component  is available for deployment. Other types of events might also trigger the performance of the routine , such as the discovery of an update  on a Web site, on a file server, receipt of an update via e-mail or another electronic communications mechanism, and others.","The routine  begins at operation , where the update evaluation component  determines which instances are to be utilized in the test environment . For instance, the update evaluation component  might determine whether production instances A-C, replicated production instances AA-CC, or test instances X-Z are to be utilized. Once the instances to be utilized in the test environment have been identified, the routine  proceeds from operation  to operation .","At operation , the update evaluation component  determines whether replicated instances AA-CC are to be utilized in the test environment . If so, the routine  proceeds to operation , where the update evaluation component  causes the production network  to be replicated into the replicated production network . The update evaluation component  also causes the production instances A-C to be replicated into the replicated production instances AA-CC. In this manner, the test environment B is created. This process was described in additional detail above.","From operation , the routine  proceeds to operation  where the deployment component  deploys an update , or updates, to the test environment . Once the update , or updates, has been deployed to the appropriate test environment , the routine  proceeds from operation  to operation .","At operation , the update evaluation component  determines whether the deployed update  is compatible with the PES application. To make this determination, the update evaluation component  may determine whether the PES application is operating properly in the test environment  following the deployment of the update . If the PES application is not operating correctly, the update  may be considered to be incompatible with the PES application and not selected for deployment to the production instances A-C. If the PES application is operating correctly following deployment of the update , the update  may be considered compatible with the PES application and selected for deployment to the production instances A-C executing the PES application.","At operation , the update evaluation component  might also determine whether the PES application is operating performantly in the test environment  following the deployment of the update . As discussed above, a system administrator might specify operating parameters of the PES application that are evaluated to determine whether the PES application is operating performantly. If the PES application does not operate performantly in the test environment  following deployment of the update , the update  may be considered unsuitable for deployment to the production instances A-C. If the PES application does operate performantly in the test environment  following the deployment of the update , the update  may be selected for deployment to the production instances A-C executing the PES application.","From operation , the routine  proceeds to operation , where the update evaluation component  tests the business performance of the PES application following the deployment of the update  to the test environment . As discussed above, for instance, the update evaluation component  might determine whether the PES application executing in the test environment  is meeting one or more business metrics following the deployment of the update . If the business metrics are not met following deployment of the update , then the update  may be considered unsuitable for wide deployment to the production instances A-C. If the business metrics are met, then the update  may be selected for deployment to the production instances A-C. Other types of business metrics might also be evaluated by the deployment component.","The routine  then proceeds to operation , where the update evaluation component  determines whether the selected updates should be applied to the production instances A-C without the involvement of an administrator. An administrator might specify whether compatible updates satisfying certain criteria should be automatically applied to the production instances A-C or not.","If the updates are to be applied to the production instances A-C, the routine  proceeds from operation  to operation  where the deployment component  deploys the selected updates to the production instances A-C. Otherwise, the routine  proceeds from operation  to operation , where the deployment report , described above, is generated and provided to an administrator. From operations  and , the routine  proceeds to operation , where it ends.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 6","FIG. 6"],"b":["600","102","102","202","202","104"]},"The computer  includes a baseboard, or \u201cmotherboard,\u201d which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment, one or more central processing units (\u201cCPUs\u201d)  operate in conjunction with a chipset . The CPUs  are standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .","The CPUs  perform the necessary operations by transitioning from one discrete, physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states, such as flip-flops, and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements, such as logic gates. These basic switching elements may be combined to create more complex logic circuits, including registers, adders-subtractors, arithmetic logic units, floating-point units, and the like.","The chipset  provides an interface between the CPUs  and the remainder of the components and devices on the baseboard. The chipset  may provide an interface to a random access memory (\u201cRAM\u201d) , used as the main memory in the computer . The chipset  may further provide an interface to a computer-readable storage medium such as a read-only memory (\u201cROM\u201d)  or non-volatile RAM (\u201cNVRAM\u201d) for storing basic routines that help to startup the computer  and to transfer information between the various components and devices. The ROM  or NVRAM may also store other software components necessary for the operation of the computer  in accordance with the embodiments described herein.","The computer  may operate in a networked environment using logical connections to remote computing devices and computer systems through the network . The chipset  may include functionality for providing network connectivity through a network interface controller (\u201cNIC\u201d) , such as a gigabit Ethernet adapter. The NIC  is capable of connecting the computer  to other computing devices over the network . It should be appreciated that multiple NICs  may be present in the computer , connecting the computer to other types of networks and remote computer systems.","The computer  may be connected to a mass storage device  that provides non-volatile storage for the computer. The mass storage device  may store system programs, application programs, other program modules, and data, which have been described in greater detail herein. The mass storage device  may be connected to the computer  through a storage controller  connected to the chipset . The mass storage device  may consist of one or more physical storage units. The storage controller  may interface with the physical storage units through a serial attached SCSI (\u201cSAS\u201d) interface, a serial advanced technology attachment (\u201cSATA\u201d) interface, a fiber channel (\u201cFC\u201d) interface, or other type of interface for physically connecting and transferring data between computers and physical storage units.","The computer  may store data on the mass storage device  by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to, the technology used to implement the physical storage units, whether the mass storage device  is characterized as primary or secondary storage, and the like.","For example, the computer  may store information to the mass storage device  by issuing instructions through the storage controller  to alter the magnetic characteristics of a particular location within a magnetic disk drive unit, the reflective or refractive characteristics of a particular location in an optical storage unit, or the electrical characteristics of a particular capacitor, transistor, or other discrete component in a solid-state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description, with the foregoing examples provided only to facilitate this description. The computer  may further read information from the mass storage device  by detecting the physical states or characteristics of one or more particular locations within the physical storage units.","In addition to the mass storage device  described above, the computer  may have access to other computer-readable storage medium to store and retrieve information, such as program modules, data structures, or other data. It should be appreciated by those skilled in the art that computer-readable storage media can be any available media that provides for the storage of non-transitory data and that may be accessed by the computer .","By way of example, and not limitation, computer-readable storage media may include volatile and non-volatile, removable and non-removable media implemented in any method or technology. Computer-readable storage media includes, but is not limited to, RAM, ROM, erasable programmable ROM (\u201cEPROM\u201d), electrically-erasable programmable ROM (\u201cEEPROM\u201d), flash memory or other solid-state memory technology, compact disc ROM (\u201cCD-ROM\u201d), digital versatile disk (\u201cDVD\u201d), high definition DVD (\u201cHD-DVD\u201d), BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information in a non-transitory fashion.","The mass storage device  may store an operating system  utilized to control the operation of the computer . According to one embodiment, the operating system comprises the LINUX operating system. According to another embodiment, the operating system comprises the WINDOWS\u00ae SERVER operating system from MICROSOFT Corporation. According to further embodiments, the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device  may store other system or application programs and data utilized by the computer , such as the deployment component , the update evaluation component , and\/or the other software components described above.","In one embodiment, the mass storage device  or other computer-readable storage media is encoded with computer-executable instructions which, when loaded into the computer , transforms the computer from a general-purpose computing system into a special-purpose computer capable of implementing the embodiments described herein. These computer-executable instructions transform the computer  by specifying how the CPUs  transition between states, as described above. According to one embodiment, the computer  has access to computer-readable storage media storing computer-executable instructions which, when executed by the computer , perform the routine  described above with regard to .","The computer  may also include an input\/output controller  for receiving and processing input from a number of input devices, such as a keyboard, a mouse, a touchpad, a touch screen, an electronic stylus, or other type of input device. Similarly, the input\/output controller  may provide output to a display, such as a computer monitor, a flat-panel display, a digital projector, a printer, a plotter, or other type of output device. It will be appreciated that the computer  may not include all of the components shown in , may include other components that are not explicitly shown in , or may utilize an architecture completely different than that shown in .","Based on the foregoing, it should be appreciated that technologies for selecting and deploying updates to an application executing on a PES platform  have been presented herein. It should be appreciated that although the embodiments disclosed herein have been described in the context of deploying updates to an application, the various aspects described herein might also be utilized to deploy updates to other types of software, such as operating systems.","Although the subject matter presented herein has been described in language specific to computer structural features, methodological acts, and computer readable media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts, and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
