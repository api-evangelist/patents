---
title: Persisting private/public key pairs in password-encrypted files for transportation to local cryptographic store
abstract: Systems and methods for using private keys in software development that minimizes the risks of the private key being lost or stolen. A strong name consists of the assembly's identity, e.g., its simple text name, version number, and culture information (if provided), plus a public key and a digital signature. It is generated from an assembly file using the corresponding private key. The private/public key pair is persisting in a password-encrypted file using a standard encryption format that can be made available to everyone. The first time any subsystem of the development environment requires use of the private key contained in an encrypted file format, the developer is prompted to provide the password to decrypt the key. The user supplies the password and the public/private key is imported into a non-exportable key container in the local cryptographic store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08284942&OS=08284942&RS=08284942
owner: Microsoft Corporation
number: 08284942
owner_city: Redmond
owner_country: US
publication_date: 20040824
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS","Exemplary Computing Environment","Exemplary Embodiments of Strong Names"],"p":["This invention relates in general to the field of computer software. More particularly, this invention relates to a system and method of providing software developers with a way to store private keys used for signing assemblies and\/or the installation of trusted components.","One of the larger questions facing the software industry is how can users trust code that is published on the Internet. Packaged software uses branding and trusted sales outlets to assure users of its integrity, but these are not available when code is transmitted on the Internet. Additionally, there is no guarantee that the code has not been altered while being downloaded. While browsers typically exhibit a warning message explaining the possible dangers of downloading data, they do nothing to actually see whether the code is what it claims to be. A more active approach must be taken to make the Internet a reliable medium for distributing software.","One way to verify the authenticity of software is through the use of digital signatures. However, smaller developers find that digitally signing software is difficult because of the necessity to manage the private keys used to sign the code. This is because each developer needs access to the private key to run and debug applications. Further, if a key is compromised, other applications can use the private key to spoof the identity of the original application and thereby obtain unauthorized access to resources and privileges that had been granted to that application.","Thus, there is a need for a system of signing software applications that provides a globally unique, verifiable identity for a given application. There is also a need for a system for using private keys in software development that minimizes the risks of the private key being lost or stolen. There is a need for a simple, cost effective system that allows developers within a small team to safely share a private key while minimizing the risks of it being lost or stolen. The present invention provides such a solution.","The present invention is directed to systems and methods for storing a private key used for digitally signing software code. The method includes creating a private\/public key pair; providing a password for the private\/public key pair; persisting the private\/public key pair in a file; entering the password a first time a development environment requires a private key in the private\/public key pair to sign software code; and thereafter storing the private\/public key pair in a cryptographic store. The file may be a personal information exchange syntax standard format.","According to a feature of the invention, the method includes naming the private\/public key pair in the cryptographic store using a unique hash. In addition, the private\/public key pair may be marked as non-exportable. Subsequent attempts to use the private key are redirected to the cryptographic store. In addition, a user interface may be provided to digitally sign the software code.","According to another aspect of the invention, there is provided a method for digitally signing software code using a private key provided in a password protected an encrypted key pair file. The method includes receiving the encrypted key pair file; providing a password for the key pair file; storing the key pair in a cryptographic store; and signing the software code using the private key from the cryptographic store.","In accordance with another aspect of the invention, there is provided a system for creating and digitally signing software. The system includes a key pair generating tool and an application programming interface for creating, retrieving, signing and importing a password protected key pair file. The key pair generation tool is adapted to create a key pair, and import, retrieve and display information about an existing key pair. The application programming interface is exposed to development tools to digitally sign software using a private key from the key pair file that is stored in a cryptographic store.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying drawings.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules and other data may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus), Peripheral Component Interconnect Express (PCI-Express), and Systems Management Bus (SMBus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and non-volatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or non-volatile memory such as ROM  and RAM . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, non-volatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, non-volatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, non-volatile optical disk , such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/non-volatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","The present invention is directed to a system and method for using private keys in software development that minimizes the risks of the private key being lost or stolen. The present invention will be described with reference to the MICROSOFT .NET Framework and development tools such as VISUAL STUDIO, available from Microsoft Corporation, Redmond, Wash. It is noted, however, that the present invention is not limited to such platforms or development tools and may be used with other platforms and development tools known to those of ordinary skill in the art.","Strong names uniquely identify an assembly, allowing it to be placed in the Global Assembly Cache, and also implement the versioning system in the MICROSOFT .NET Framework common language runtime. A strong name consists of the assembly's identity, e.g., its simple text name, version number, and culture information (if provided), plus a public key and a digital signature. It is generated from an assembly file using the corresponding private key. Because the strong name is based on a digital signature generated with a private key, it provides security against spoofing attacks where a malicious piece of code attempts to masquerade as another assembly.","The present invention improves upon prior methods by persisting the private\/public key pair in a password-encrypted file using a standard encryption format (e.g., Personal Information Exchange Syntax Standard PKCS #12 (PFX file)) that can be made available to everyone. Because the key pair is persisted as a file, it can then be managed using the same methods and tools used for managing source code files (e.g., project systems, build systems, source code control systems) rather than conventional cumbersome key management systems. The same methods and tools used to avoid loss of source code files (e.g., periodic hard drive backups) can be employed to prevent the loss of the private key file.","Before the subsystem of the development environment creates a new key pair to be used for assembly signing, a password is supplied so that the public\/private key pair can be encrypted into the file. The password is provided by the developer at the time the key is created and immediately discarded once the file is encrypted. The system first creates the public and private key pair, creates a temporary in-memory X509 Certificate, assigns the generated key pair to the certificate, and exports the key pair to a PFX file. The contents of the PFX file are encrypted using the user-supplied password. The PFX file is then added to the user's project where it can be maintained along with the application source code files.","The first time any subsystem of the development environment requires use of the private key contained in an encrypted file format, the subsystem computes the hash of the PFX file and attempts to use a key container in the local cryptographic store (e.g., the CryptoDB in the MICROSOFT WINDOWS operating system) having a name that matches that hash. If no such key container exists, the developer is prompted to provide the password to decrypt the key. The user supplies the password and the PFX file is decrypted and imported into a temporary in-memory X509 certificate. The public\/private key pair is then extracted from certificate and imported into a non-exportable key container in the local cryptographic store named based on a hash of the encrypted key file. It is preferable that the key pair is imported into the CryptoDB as non-exportable to further protect the key contents.","Subsequent attempts to use the key from that users account on that machine are then automatically directed to the named container so that the key can be used without requiring the developer to re-enter the password. When signing with an encrypted key file, the system first computes the hash of the file and checks if the key container named after the hash exists in the default RSA CSP. If so, the signing continues using the specified key container name. During signing, the key pair contents of the encrypted key file are not used, only the installed key pair in the Crypto database. The invention thereby enables a single developer or a team of developers to easily and safely share a private key across different computers and user accounts without the inconvenience of being repeatedly prompted for a password.","The present invention uses established APIs for generating key pairs, creating certificates, exporting certificates to PFX files, importing PFX files to certificates, and importing key pairs to the cryptographic store. The present invention advantageously uses the PFX standard, which means that the encrypted key file is interoperable with existing infrastructure for storing keys and certificates, as well as signing code. For example, the PFX file can be used with command line tools such as sn.exe, a code signing utility provided by the MICROSOFT .NET Framework, or signcode.exe another code signing utility supported by the WINDOWS operating system. The PFX file could also be imported into the WINDOWS Certificate Store, where it can be accessed and used through established WINDOWS APIs. The certificate can also be imported into the WINDOWS Trusted Publishers list in order to establish policy trusting applications signed with the certificate.","Referring now to , there is illustrated an exemplary user interface for versioning and signing assemblies. As shown in , the user can specify the full version number of the assembly. This version number may also be used for the deployment and application manifests generated by VISUAL STUDIO. The developer can optionally choose to automatically increment the Revision number. Choices in the dropdown include: never, on Build, on Release Build and on Publish.","Pressing the Assembly Information button launches the dialog show in  for editing publisher Assembly Information. Here, relevant information may be added by the developer.","Referring again to , the Publisher Identity Key section specifies whether and how the application should sign the assembly and application manifest. If Sign the Assembly is checked, the assembly is signed. If Sign the Application Manifest is checked, the application and deployment manifest is signed. The developer can specify an encrypted or unencrypted key file to sign (or delay sign) the assembly via the \u201cUse a key file\u201d entry. The dropdown lists all previous keys created with VISUAL STUDIO, and it allows the developer to browse to an existing key file or create a new key file. If the developer has selected an encrypted key file, the Change Password button is, enabled and allows them to specify a new password with which to encrypt the key.","If the developer chooses the <new> . . . option under the \u201cUse a key file\u201d entry, they can create a new key using the dialog of . In this dialog, the user provides a Strong Key name and password. The resulting key is automatically added to the project and stored by VISUAL STUDIO for use with future projects.","The option \u201cUse a key provider\u201d allows the developer to sign using a key from a container in the local crypto database. This allows the developer to sign using key management devices such as smart cards and lockboxes that expose their keys through the standard crypto APIs. The provider dropdown enumerates all of the providers on the local machine. The name dropdown enumerates all of the container names within the provider.","The option \u201cDelay sign only\u201d allows the developer to delay sign the assembly, in which case the selected key file or container need only contain the public portion of the key pair.","While the present invention has been described in connection with the preferred embodiments of the various Figs., it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example, one skilled in the art will recognize that the present invention as described in the present application may apply to any computing device or environment, whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Still further, the present invention may be implemented in or across a plurality of processing chips or devices, and storage may similarly be effected across a plurality of devices. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 2-4"}]},"DETDESC":[{},{}]}
