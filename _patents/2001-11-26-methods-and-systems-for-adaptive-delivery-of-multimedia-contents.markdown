---
title: Methods and systems for adaptive delivery of multimedia contents
abstract: Methods and systems for generic adaptive multimedia content delivery are described. In one embodiment, a novel framework features an abstract content model and an abstract adaptive delivery decision engine. The abstract content model recognizes important aspects of contents while hiding their physical details from other parts of the framework. The decision engine then makes content adaptation plans based on the abstracted model of the contents and needs little knowledge of any physical details of the actual contents. Thus, under the same framework, adaptive delivery of generic contents is possible.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07093001&OS=07093001&RS=07093001
owner: Microsoft Corporation
number: 07093001
owner_city: Redmond
owner_country: US
publication_date: 20011126
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Exemplary Embodiment","CONCLUSION"],"p":["This invention relates to methods and systems for adaptive delivery of multimedia contents.","Today we live in a diversified world with a seemingly infinite number of diverse and different sources of on-line information. Typically, this information is accessed via a network such as the Internet. As the Internet and, more generally, computing evolve, people are beginning to become accustomed to and demanding better access to different types of electronically available information.","Against the backdrop of the diverse and different sources of electronic information is the wide range of devices that are connected being used to access the information. For example, people can now typically access network-accessible information using personal computers, handheld computers, personal digital assistants and the like. The situations encountered by individuals attempting to access this diverse collection of information using an ever growing collection of computing devices differs from user session to user session.","For example, some contents may be authored and suitable for use with a certain type of browser. Yet, the contents may not be suitably acceptable for use in other situations. For example, web contents that are authored for use in connection with a browser installed on a personal computer may not be suitable for display on a small handheld device for reasons not the least of which include the size disparity between the different devices' displays.","One possible solution for this problem is to author the same contents so that they reside in different forms that are suitable for all of the different situations that might be encountered. While this is theoretically possible, the solution is practically infeasible due to the time and expense involved.","One area of promise is in the area of so-called adaptive content delivery. One goal of adaptive content delivery is to have content that is readily or easily adaptable to different computing environments.","Early commercial applications focused on providing faster web page downloads for narrow bandwidth connected users (such as dialup and mobile access). Most of the applications accelerated downloads by simply reducing the sizes of embedded image files using aggressive lossy compression schemes. The cost of this solution is lower quality, which is highly undesirable from a customer service standpoint. Some schemes also supported lossless text compression to reduce the transmission time of web pages.","Some companies such as ProxyNet (based on TranSend technology), SpyGlass, and OnlineAnywhere provide proxies or servers that can adjust web pages to fit the display of smaller devices. Their technologies, however, are based on heuristic rules and customized content filters that are designed for specific websites and are used to extract the most important contents from these web pages. Thus, these solutions tend to be rigid and inflexible.","Accordingly, this invention arose out of concerns associated with providing adaptive systems and methods for efficient and flexible content delivery.","Methods and systems for generic adaptive multimedia content delivery are described. In one embodiment, a novel framework features an abstract content model and an abstract adaptive delivery decision engine. The abstract content model recognizes important aspects of contents while hiding their physical details from other parts of the framework. The decision engine then makes content adaptation plans based on the abstracted model of the contents and needs little knowledge of any physical details of the actual contents. Thus, under the same framework, adaptive delivery of generic contents is possible.","Overview","Adaptive content delivery systems and methods are described. Efficiency and flexibility are promoted through a novel solution to generic adaptive multimedia content delivery. Described embodiments are based on an abstract content model that captures important or critical structures and attributes of contents. Contents are modeled as hierarchical directional graphs. Nodes on graphs represent elements of contents. The concept of an \u201cedge\u201d is introduced. Edges define logical relationships between these elements. By finding optimized sub-graphs on these graphs under some constraints, optimized plans for adaptive content delivery can be made. With the help of the abstract content model, optimization procedures for many different types of contents can be standardized. Accordingly different types of contents can be treated equally under this framework.","Exemplary Computer Environment","The various components and functionality described herein can be implemented by various computers.  shows components of a typical example of such a computer, referred to by reference numeral . The components shown in  are only examples, and are not intended to suggest any limitation as to the scope of the claimed subject matter; the claimed subject matter is not necessarily dependent on the features shown in .","Generally, various different general purpose or special purpose computing system configurations can be used. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The functionality of the computers is embodied in many cases by computer-executable instructions, such as program modules, that are executed by the computers. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Tasks might also be performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media.","The instructions and\/or program modules are stored at different times in the various computer-readable media that are either part of the computer or that can be read by the computer. Programs are typically distributed, for example, on floppy disks, CD-ROMs, DVD, or some form of communication media such as a modulated signal. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable media when such media contain instructions programs, and\/or modules for implementing the steps described below in conjunction with a microprocessor or other data processors. The invention also includes the computer itself when programmed according to the methods and techniques described below.","For purposes of illustration, programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","With reference to , the components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISAA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as the Mezzanine bus.","Computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. \u201cComputer storage media\u201d includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more if its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through an non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer-readable instructions, data structures, program modules, and other data for computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball, or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the embodiment about to be described, the inventive adaptive content delivery system works as an extended content processor of traditional multimedia content servers. Accordingly, upon receipt of a content request, the server fetches original multimedia contents from a content source and passes them to the adaptive delivery system. Adaptation results are then sent as a response to the request.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["200","200","202","204","206","202","208","210","212","208"]},"Content Host","As the illustrated and described content host  is a front-end between physical contents and other system components, it can be used to manipulate contents based on the abstract content model. In addition, the content host  also defines a common set of application program interfaces or APIs for retrieving extended properties of the abstract content model. Exemplary APIs are given at the end of this document. Although the remaining components of the system are content independent, content host  itself is dependent on content types. Thus, different media types may desire different implementations of the content host. As a common basis, however, the content host  should comprise two sub-modules: content parser  and content mapper .","In the illustrated and described embodiment, content parser  scans input contents and constructs corresponding abstract content model representations either online or offline. Different formats of the same content and capabilities of supported transcoders can also be abstracted into the same model during this process. Specific examples of how this can be done are given below. Characteristics of one suitable technique for implementing the content parser are described in U.S. patent application Ser. No. 09\/893,335, entitled \u201cFunction-based Object Model for Use in WebSite Adaptation\u201d filed on Jun. 26, 2001, the disclosure of which is incorporated by reference herein.","Content mapper  functions in a manner that is opposite of the way content parser  functions. That is, content mapper  converts abstract content model representations back to physical contents. Real-time-capable content transcoders may also be called at this stage to generate desired results.","Decision Engine","Decision engine  provides functionality for making content adaptation plans. In the illustrated example, decision engine  selects appropriate contents that achieve maximum total QoS (i.e. quality of service) values according to current resource constraints and preference factors (as provided by resource model  and preference model  ). Based on the abstract content model, this problem is solved by finding optimized sub-graphs of the abstract content model that maximize QoS values under resource constraints. Details of an exemplary content optimization procedure are covered in the section entitled \u201cContent Optimization\u201d below.","Resource and Preference Models","Input parameters, such as network characteristics and client capabilities, are modeled as resources or preference factors. Resources are used as constraints while the decision engine is looking for the best delivering plans. Preference factors are used to alter QoS factors of the abstract content models. For dynamically changing parameters, such as network characteristics, these models should be able to predict future values since the decision engine may use forward-looking algorithms. More information is provided on this topic in the section entitled \u201cA Simple Sub-optimization Algorithm\u201d below.","Caching","Although a caching stage is not explicitly included , caches can play an important role in real adaptive content delivery systems. Complex transcoding processes can be avoided if the needed results are in cache. Partial plans of delivery can also be saved in the cache and reused under nearly identical content request situations. These savings will decrease the server-side resource requirements and thus better quality of service (QoS) can be achieved when server-side resources become the bottleneck of the delivery plans.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"i":["a ","b. "]},"Step  receives a content request. This step can be implemented responsive to a client device sending such a request. Step  retrieves the requested content from a content source and step  parses the content and builds an abstract content model. An exemplary abstract content model is described below in more detail. Step  processes the abstract content model to select an optimal delivery plan. Examples of how this can be done are described below. Step  then processes the abstract content model to provide deliverable content in accordance with the delivery plan. Step  then delivers the content to the content requester.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 2","i":"b "},"Step  receives content. This step can be implemented in any suitable way. For example, this step can be implemented when a server receives content that it is to store for future content requests. Step  parses the content and builds an abstract content model. An exemplary abstract content model is described below in more detail. Step  processes the abstract content model to select at least one optimal delivery plan. Examples of how this can be done are described below. Step  then processes the abstract content model to provide deliverable content in accordance with the delivery plan.","In accordance with the embodiment, content can be pre-processed so that when a content request is received, the system can simply retrieve either the abstract content model and process it to provide a delivery plan, or it can retrieve the deliverable content in accordance with the client device sending the request.","Exemplary Abstract Content Representation Structure (ACRES)","One of the important goals of the described adaptive content delivery framework is to make the framework a generic content adaptation solution. The decision engine  () is designed to make optimal content delivery plans without having to consider too many physical details of the contents (such as that of encoding formats, special attributes, and the like). As a result, an abstract model of the contents is utilized. This model is desirably able to represent different kinds of contents and their structures (i.e. semantic, dependency, encoding, and the like) for efficient delivery. Described below is an exemplary multi-layered data structure that can represent a huge range of delivery-ready multimedia contents.","Definitions","In the illustrated and described embodiment, the abstract content model comprises a directional graph that features a top-down hierarchical structure. The hierarchical structure comprises multiple nodes that represent components of the contents, and edges between the nodes represent relationships between these components. In the discussion that follows, definitions of these data models and their basic attributes are given. Then, a discussion of the details of nodes and edges is presented.","For the discussion that follows, the reader is referred to  which provides an illustration of an exemplary abstract content representation structure  in accordance with one embodiment.","In the illustrated structure , a node is an abstract representation of content or content structure. A Node is represented using a circle or square in the drawings of the data structure. In , five exemplary nodes are indicated at , , , , and . An edge is an abstract representation of relationships between the nodes. In this embodiment, edges can be divided into three different types. A dependency edge defines a logical dependency between nodes. In , a thin dashed line is used to represent dependency edges. Dependency edges are seen to extend between nodes ,  and , . A route edge defines an ordered or hierarchical dependency between nodes. Thick solid lines are used to represent this kind of edge. In , a route edge extends between nodes , . A mixed edge is a mixture of a dependency edge and a route edge and can be considered as two edges separately. Thick dashed lines are used in  to represent this type of edge. A mixed edge can be seen to extend between nodes ,  and ,.","Abstract content representation structure  comprises a directional graph G=(N, E) that satisfies the following condition (layered constraint), where N and E stand for \u201cnode\u201d and \u201cedge\u201d sets of G:\n\n",{"@attributes":{"id":"p-0062","num":"0062"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"N","mo":"=","mrow":{"munder":{"mover":{"mo":"\u22c3","mi":"m"},"mrow":{"mi":"i","mo":"=","mn":"1"}},"mo":"\u2062","msub":{"mi":["N","i"]}}}}},"br":[{},{}],"sub":["i","j"],"in-line-formulae":[{},{}],"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["\u2200a=(n,n)\u03b5E, there exists a pair of 1\u2266i<j\u2266m such that n\u03b5Nand n\u03b5N.","\u2200a=(nn)\u03b5E,s\u2260e."]}}}},"From this definition one can also see that nodes in Ndo not have incoming edges and nodes in Ndo not have out going edges. In addition to these definitions, nodes and edges have several basic attributes as listed below.","Node and Edge Attributes","Node status defines the dynamic statuses of nodes during content delivery. In the illustrated and described embodiment, the node statuses include the following:\n\n",{"@attributes":{"id":"p-0066","num":"0073"},"figref":"FIG. 4"},"An ignition edge is defined as a dependency edge from a node that is activated, delivered or skipped. In , which statuses are to be considered are specified deliberately and marked as \u2018+\u2019, \u2018*\u2019 and \u2018\u2212\u2019 respectively, or no markers are drawn if all three statuses are fine, i.e. if no action is to be taken. For example, in , the edge between nodes  and  is an ignition edge if node  is activated or delivered.","An active condition defines how the node becomes activable. In the illustrated example, there are three conditions:\n\n","An input condition defines when an activable node can be activated. In the present embodiment, except for automatic activable nodes, the only condition is that there exists an incoming route edge from an activated, delivered or skipped node. An output behavior defines how nodes on ends of outgoing route edges can be branched. In the illustrated and described embodiment, a \u201cbranch\u201d comprises the operation of changing an activable node to an activated node. In this example, there are three branch operations:\n\n","Nodes and Edges","As indicated above, nodes and edges are the basic elements of the described abstract content representation structure. Nodes and edges represent content objects and relationships between these objects. In addition to the basic attributes introduced and discussed above, nodes and edges can have other extended attributes.","Nodes","As an abstraction of multimedia contents, a node can represent a piece of raw content like a picture, a paragraph of text, a video frame, or a chunk of bits in some coded contents. It can also work as a connection point of content structures where it does not represent any actual contents. In addition to its basic attributes, nodes can have some additional application related attributes.","A value (QoS factor) is defined as an increment to content quality when  this node has been delivered. For a node n\u03b5N, its value is represented by V(n)or V(n, t) if it is related to time.","A resource factor defines an amount of resources needed to deliver the node. For some types of resources r, one can represent corresponding resource factors of node n by R(n, r).","Edges","Edges can represent any kind of relationship between node objects. Some possible edge meanings are listed below:\n\n","Some Examples of Using Abstract Content Representation Structures",{"@attributes":{"id":"p-0079","num":"0096"},"figref":"FIG. 5","b":"1"},"In the section entitled \u201cACRES and Adaptation Methods in Detail\u201d below and the related figure, an example of how to use an abstract content representation structure to represent MPEG I video bitstreams together with frame-skipping transcoders for bitrate adaptation is provided.","Content Optimization","Using the abstract content representation structure, optimized content can be considered as an optimal sub-graph of the corresponding structure. One target of optimization is to maximize preference-altered total QoS factors of abstract content representation structure nodes covered by the sub-graph under the constraints of the resources. In the section immediately below, some suggestions on choosing proper QoS factors are presented. Then a discussion of a simple bounded search algorithm as a near optimal solution to this content optimization problem will be presented. The algorithm is also used in a verification prototype that is introduced in the section entitled \u201cAdaptive MPEG I Video Streaming\u201d below.","Choosing Proper QoS Factors","The QoS factors of abstract content representation structure nodes play an important role in content optimization. This is because the decision engine  () is programmed to decide which content is more suitable based on QoS factors. Accordingly, it can be advantageous for properly selected QoS value definitions to at least conform to the following two principles. First, the QoS value definitions should reflect the importance of the corresponding content. Second, the QoS values of different nodes should be comparable.","In many cases, the first principle is easier to follow and conforming to the second principle is usually not trivial. It may not be easy to tell which is more important or meaningful as between two different contents. For example, there is a famous saying that says \u201ca picture is worth a thousand words\u201d. This might be true in some cases, but not in others. In resource critical applications such as mobile communication, text should be more preferable than images most of the time. Thus, it is suggested that QoS definition choices be made on an application specific basis.","A Simple Sub-Optimization Algorithm","In the illustrated and described embodiment, a bounded search algorithm is adopted to find the near optimal solution of the content optimization problem. The pseudo code listed below describes but one optimized adaptive content delivery algorithm. The algorithm is a straightforward implementation of a deep-first search.",{"@attributes":{"id":"p-0088","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(node, value) BestNode(ACRES, step, max_steps)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if step >= max_steps then return (NULL, 0);"]},{"entry":[{},"BestCandi = NULL;"]},{"entry":[{},"BestValue = 0;"]},{"entry":[{},"Candi_Set = GetActivableNodes(ACRES);"]},{"entry":[{},"Resource = GetFreeResource( );"]},{"entry":[{},"for each candi in Candi_Set do"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"resCandi = GetResource(candi);"]},{"entry":[{},"if resCandi > Resource then next;"]},{"entry":[{},"MarkActived(candi);"]},{"entry":[{},"ConsumeResource(resCandi);"]},{"entry":[{},"valCandi = GetQoSValue(candi)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"*GetPreference(candi)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"+ BestNode(ACRES, step+1, max_steps).value;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if valCandi > BestValue then"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BestCandi = candi;"]},{"entry":[{},"BestValue = valCandi;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"FreeResource(resCandi);"]},{"entry":[{},"MarkActivable(candi);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return (BestCandi, BestValue);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"AdaptiveDelivery(ACRES, max_steps)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"do"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(node, value) = BestNode(ACRES, 0, max_steps);"]},{"entry":[{},"if node != NULL then"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MarkActived(node);"]},{"entry":[{},"ConsumeResource(GetResource(node));"]},{"entry":[{},"Deliver(node);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"UpdateSystemStatus( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"while Not Meet_End_Conditions( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The pseudo code starts from a candidate set of activable nodes and then tries to simulate following delivery plans by marking nodes on the path as activated temporarily. A back trace is then used to find other possible delivery plans. Finally, the best starting candidate is selected and delivered. Afterwards, system statuses, such as resources and preferences, are updated. The algorithm is then looped until the end condition is met. It will be appreciated that in some cases, dynamically changing factors, such as network resources, may have to be predicted during the search.","Because there are only limited search depths, the complexity of this algorithm is quite acceptable. However, the algorithm may become complex in some cases. Pruning of search branches is not currently done because node QoS factors may depend on resource consumption of previously selected nodes and thus may change dynamically. Under such a situation, historical records are not reusable and searching cannot be accelerated by pruning. In order to benefit from pruning, modifications can be made. For example, one way to benefit from pruning is to replace continuous values with approximate discrete ones (as time, QoS, resource).","Adaptive MPEG I Video Streaming Example","As a verification and example of the inventive framework, a simple adaptive MPEG I video streaming application was implemented and based on the content optimization algorithm and above-described abstract content representation structure. One goal of this application is to allow smoothed playback of MPEG I video even when transmission bandwidth is less than that which the original video bitstream requires and\/or the client-side buffer size is limited.","In the discussion that follows, we start from an analysis of the situation and then we will build an abstract content representation structure of the MPEG I video bit stream that is used in our adaptive delivery verification prototype. After that, a brief introduction will be given to our implementation's architecture. Experimental results are discussed later.","Abstract Content Representation Structures and Adaptation Methods in Detail","Since an adaptable abstract content representation of content is the basis of the inventive approach, this discussion starts by analyzing adaptation schemes of MPEG I video and then constructs the abstract content representation model that enables the adaptation scheme based on the analysis.","As it was designed, MPEG I video bitstreams do not support scalable delivery. Network bandwidth must be large enough to enable smooth playbacks in normal cases. Transcoders are required if network bandwidth is less than the original video requires. However, online transcoding of MPEG video bitstreams is computing intensive and does not suit video streaming applications where multiple contents\/connections need to be supported simultaneously. For this reason, a simpler adaptation approach is chosen by selectively replacing\/skipping encoded video frames. This approach is very efficient and the video bitrate is reduced at the cost of lower frame rates instead of PSNR losses resulting from normal transcoding.","There are three kinds of encoded video frames in NTEG I video bitstreams\u2014Intra coded, forward Prediction coded and Bi-directional prediction coded. These frame types provide a trade-off between compression efficiency and playback requirements (as seek and error recovery). Several encoded frames form a GOP (group of picture) and temporal references of frames are defined relatively within GOPs. Beside a sequence header that defmes essential attributes, video bitstreams are typically a concatenation of GOPs. I frames can be decoded at anytime, but decoding of P and B frames depends on decoded reference frames. In other words, there are relationships that exist as inter-frame dependencies and temporal orders. As a result, skipping I and P frames will cause P and B frames that follow not to be decodable. Skipping B frames has no impact on other frames.","Beside these inter-frame dependencies, frame timing is another issue that is addressed during content adaptation. Although video bitstreams with some skipped frames can be decoded without any problems, the frame timing is changed. As a remedy, escape-coded frames are used instead of skipping where PB frames should be skipped. Thus frame timing is kept unchanged during playback. The escape-coded frames are MPEG I coded frames too and they stand for nothing changed to the reference frame (or one of the reference frames if the frame type is B). According to MPEG I syntax, all macroblocks of a frame must be covered by non-overlapped slices, and a slice must start and end by coded macroblocks. Thus, the minimal escape coded frame must consist of at least two empty coded macroblocks (top-left and bottom-right) and address skip codes for all other macroblocks between them. As a result, the minimal size of an escape coded CIF frame (P or B) is 32 bytes which is minor, if compared to that of normally coded frames which are at least several kilobytes.","In accordance with the above discussion,  shows an exemplary abstract content representation model of a typical MPEG I video bitstream. Each node in the figure represents data of a coded frame as \u201cI\u201d, \u201cP\u201d, \u201cB\u201d. Additionally, the designations of \u201ca\u201d or \u201cb\u201d represent data of escape-coded frames for P or B frames respectively. The temporal reference of each frame is shown as a number before the frame type. Data of the sequence header and GOP headers are not shown in this figure due to limited space.","Each node in this model has attributes including data size, expected time to be decoded (TTD) relative to the starting time of delivery, and QoS factor. The QoS factor is defined dynamically according to the current time and TTD. In this example, this value is assigned based on the following heuristics:\n\n",{"@attributes":{"id":"p-0101","num":"0120"},"figref":"FIG. 7"},"In the described experimental system, some content information is also taken into consideration. From the viewpoint of sampling theory, we can see that frames in fast motion sequences should be preserved with higher precedence than those in slow motion sequences during the frame dropping process. It is also known that those frames containing more motion information will normally use more bits than those frames containing less motion information when they are predictive-coded. As a result, the QoS factor of node n is defined as V(n, t)=U(t)*coded_size(n). However, its effects are very limited when video bitstreams are CBR coded.","System Implementation","In this described example, the prototype was implemented as a WWW service extension to MS Internet Information Server running on MS Windows NT. The adaptation application runs as an ISAPI extension on IIS. Video data is processed and streamed in real-time from an original source through a standard HTTP protocol stack provided by IIS. A bandwidth-limitation software pipe was used as a simple emulation of network bandwidth. Adapted video data are firstly sent through this pipe before IIS sends it out. Parameters such as emulation bandwidth and optimizer search steps are all sent to the server as request parameters. Several popular client applications that support playback of MPEG I video have been successfully tested using HTTP streaming including Windows Media Player and QuickTime Player.","Experimental Results","We tested the implementation using both CBR and VBR bitstreams. FIGS. A\u2013D and A\u2013B show some of these results. The 3 Mbps VBR MPEG I bitstream is 320\u00d7240\u00d730 fps and is two-pass-coded with minimal bitrate at 1 Mbps and maximal bitrate at 4 Mbps. Its GOP structure is 1I5P3B. The 1.2 Mbps CBR bitstream is 320\u00d7240\u00d729.97 fps and is one pass coded. Its GOP structure is 1I3P3B.",{"@attributes":{"id":"p-0107","num":"0126"},"figref":["FIGS. 8A\u2013D","FIGS. 9A\u2013B"]},"From these results one can see that bandwidths of the delivered streams are successfully reduced and smoothed. Thus, playback of these video bitstreams is possible even when the network bandwidth is far narrower than that the source bitstreams demand and when the client side buffer size is limited. From  one can see that frame data are preserved in the order of importance as preferred. This simple adaptation scheme can have its limitation too. For example, the frame rates of adaptation results are still not ideally adjusted because the structures of the MPEG I video sequence are fixed and the QoS factor definition is not optimal.","Exemplary Application Programming Interfaces","Appearing below are a collection of exemplary application programming interfaces (APIs) that can be utilized to implement embodiments of the system described above.",{"@attributes":{"id":"p-0111","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"template <class cYourEdge> class TcEdge"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TcEdge(int argnFromNodeID, int argnToNodeID): \/\/ The"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"constructor"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"nFromNodeID(argnFromNodeID), nToNodeID(argnToNodeID),"]},{"entry":[{},"pNextOutEdge(0), pNextInEdge(0)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{ };"]},{"entry":[{},"virtual ~TcEdge( ) { };"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int nFromNodeID;","\/\/ Which node it is from"]},{"entry":[{},"int nToNodeID;","\/\/ Which node it goes to"]},{"entry":[{},"cYourEdge *pNextOutEdge;","\/\/ This is the outgoing edge link list"]},{"entry":[{},"cYourEdge *pNextInEdge;","\/\/ This is the incoming edge link list"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"template <class TcEdge> class TcNode"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TcNode( );"]},{"entry":[{},"virtual ~ToNode( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TcEdge *pOutEdge;","\/\/ This is the outgoing edge link list"]},{"entry":[{},"TcEdge *pInEdge;","\/\/ This is the incoming edge link list"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"template <class TcNode, class TcEdge> class TcGraph"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TcGraph( );"]},{"entry":[{},"virtual ~TcGraph( );"]},{"entry":[{},"virtual bool CleanUp( ); \/\/ clean up all data in graph"]},{"entry":[{},"virtual int AddNode(int nNodeIDPrefered, bool bPreferSmall=true);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Add node to graph. You may specify a preferred nodeID or \u22121 for"]},{"entry":[{},"\/\/ automatic assignments. Allocation will from small to larger if"]},{"entry":[{},"\/\/ bPreferSmall is true"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ return new Node ID on success or the prefered ID if exist, \u22121"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"on fail"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual int AddNode(TcNode *pNode, int nNodeIDPrefered,"]},{"entry":[{},"bool bPreferSmall=true);"]},{"entry":[{},"\/\/ Add node and assign the node pointer"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ return new Node ID on success or the prefered ID if exist, \u22121 on fail"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual int DeleteNode(int nNodeID);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ return released Node ID on success, \u22121 on fail"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual unsigned int GetNumNodes( );"]},{"entry":[{},"\/\/ return the number of nodes on the graph"]},{"entry":[{},"virtual TcNode *GetNodePointer(int nNodeID);"]},{"entry":[{},"virtual TcNode *SetNodePointer(TcNode *pNode, int nNodeID);"]},{"entry":[{},"\/\/ Get and Set the node pointer"]},{"entry":[{},"virtual TcEdge *AddEdge(int nFromNodeID, int nToNodeID);"]},{"entry":[{},"\/\/ Add an edge from id1 to id2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Return the edge pointer on success or NULL on failure"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual int DeleteEdge(int nFromNodeID, int nToNodeID);"]},{"entry":[{},"\/\/ Delete the edge from ID1 to ID2"]},{"entry":[{},"\/\/ return the fromid on success and \u22121 on failure"]},{"entry":[{},"virtual TcEdge *GetEdgePointer(int nFromNodeID, int nToNodeID);"]},{"entry":[{},"\/\/ Get the edge pointer (from , to)"]},{"entry":[{},"virtual bool StartNodeEnumeration( );"]},{"entry":[{},"\/\/ Start enumeration of existing nodes"]},{"entry":[{},"\/\/ return true if it's ok"]},{"entry":[{},"virtual int EnumerateNode( );"]},{"entry":[{},"\/\/ Get current enumerated node id and advance to next id"]},{"entry":[{},"\/\/ return current node id on success, return \u22121 on end of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"enumeration"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual unsigned int PreRequireNodeBuffer(unsigned int"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"requiredsize);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Used to pre-allocate node buffer, for better buffer management"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"only"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"private:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual bool AdjustNodeBuffer(int nMaxNodeID);"]},{"entry":[{},"\/\/ adjust the node pointer buffer to hold new IDs"]},{"entry":[{},"\/\/ return true if succeeded"]},{"entry":[{},"\/\/ return false if failed or input parameter is not ok"]},{"entry":[{},"\/\/ throw cGraphError with fatal errors"]},{"entry":[{},"virtual int AllocNodeID(int nPreferedNodeID, bool"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"bPreferSmall=true);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual int FreeNodeID(int nNodeID);"]},{"entry":[{},"\/\/ the following two is used internally for node buffer management"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual void MoveMinFreeIDPointer( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual void MoveMaxFreeIDPointer( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/\/\/\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class cACRESEdge : public TcEdge<cACRESEdge>"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cACRESEdge(int argnFromNodeID, int argnToNodeID); \/\/ constructor"]},{"entry":[{},"virtual ~cACRESEdge( );"]},{"entry":[{},"virtual bool UpdateStatus(ACRES_NODE_STATUS statusInNode);"]},{"entry":[{},"\/\/ update the edge's status, check if it is ignition edge"]},{"entry":[{},"\/\/ return true if it is."]},{"entry":[{},"\/\/ dump my self to a file"]},{"entry":[{},"virtual bool WriteFile(FILE *fp);"]},{"entry":[{},"\/\/ reinit my self from a file"]},{"entry":[{},"virtual bool ReadFile(FILE *fp);"]},{"entry":[{},"ACRES_EDGEOBJ_TYPES objType;"]},{"entry":[{},"\/\/ object type, needed by some application to distinguash"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ between different classes (RTTI)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ACRES_EDGE_TYPE eType;",{}]},{"entry":[{},"ACRES_EDGE_STATUS eStatus;","\/\/ this is not used for pure route edges"]},{"entry":[{},"ACRES_ROUTE_STATUS route;","\/\/ this is not used for dependency edges"]},{"entry":[{},"int eCondition;","\/\/ should be const after been created;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"class cACRESNode : public TcNode<cACRESEdge>"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cACRESNode( );"]},{"entry":[{},"cACRESNode(int hostID);"]},{"entry":[{},"virtual ~cACRESNode( );"]},{"entry":[{},"virtual int CheckCondition( );"]},{"entry":[{},"\/\/ Check if the node can be put into activable one"]},{"entry":[{},"\/\/ return"]},{"entry":[{},"\/\/ > 0 active"]},{"entry":[{},"\/\/ = 0 inactive"]},{"entry":[{},"\/\/ < 0 permenent inactive because of cold_forever edge and"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"condition,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ thus should be put into SKIPPED ASAP"]},{"entry":[{},"virtual int UpdateOutEdgeStatus(bool includeRoute);"]},{"entry":[{},"virtual int ResetOutEdgeStatus(bool includeRoute);"]},{"entry":[{},"\/\/ return the number of changes made"]},{"entry":[{},"\/\/ dump my self to a file"]},{"entry":[{},"virtual bool WriteFile(FILE *fp);"]},{"entry":[{},"\/\/ reinit my self from a file"]},{"entry":[{},"virtual bool ReadFile(FILE *fp);"]},{"entry":[{},"ACRES_NODEOBJ_TYPES objType;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ node type, needed by some application to distinguash between"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ different classes (RTTI)"]},{"entry":[{},"ACRES_NODE_STATUS nStatus;"]},{"entry":[{},"ACRES_NODE_CONDITION nCondition;"]},{"entry":[{},"ACRES_NODE_BEHAVIOR behavior;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int nLayer;","\/\/ required by ACRES validator"]},{"entry":[{},"int nHostID;","\/\/ which host object is responsible to this"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"one"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"class cACRES : public TcGraph<cACRESNode, cACRESEdge>"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cACRES( );"]},{"entry":[{},"virtual ~cACRES( );"]},{"entry":[{},"virtual int AddNode(int nNodeIDPrefered, bool bPreferSmall=true)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{return \u22121;}"]},{"entry":[{},"\/\/ because host ID is always required, this one is not valid for me,"]},{"entry":[{},"\/\/ so overload by return null"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual int AddNode(int nNodeIDPrefered, int hostID, bool"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bPreferSmall=true);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual int AddNode(cACRESNode *pNode, int nNodeIDPrefered,"]},{"entry":[{},"bool bPreferSmall=true);"]},{"entry":[{},"virtual int Validate(bool reset_status, bool clean_nodes);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Check if the current ACRES data structure is valid."]},{"entry":[{},"\/\/ This routine will check for the hierarchies and update all node"]},{"entry":[{},"\/\/ layer info"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual int Reset(int nIDfrom);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ reset all node and edge status that are affected by status of nIDfrom"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ if nIDfrom = \u22121, then reset all"]},{"entry":[{},"virtual int AddHost(cACRESHost * pHost, int nPreferedHostID,"]},{"entry":[{},"bool bPreferSmall=true);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Add a content host and allocate HostID for it."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual int RemoveHost(int hostID);"]},{"entry":[{},"\/\/ Remove a content host"]},{"entry":[{},"virtual cACRESHost * GetHost(int hostID);"]},{"entry":[{},"\/\/ Gt the pointer to the host from its ID"]},{"entry":[{},"virtual cACRESHost * SetHost(cACRESHost *pHost, int hostID);"]},{"entry":[{},"\/\/ Set the host pointer"]},{"entry":[{},"\/\/ Enumerate the content host table"]},{"entry":[{},"virtual bool StartHostEnumeration( );"]},{"entry":[{},"virtual int EnumerateHost( );"]},{"entry":[{},"\/\/ dump my self to a file"]},{"entry":[{},"virtual bool WriteFile(FILE *fp);"]},{"entry":[{},"\/\/ reinit my self from a file"]},{"entry":[{},"virtual bool ReadFile (FILE *fp);"]},{"entry":[{},"ACRES_OBJ_TYPES objType; \/\/ my RTTI"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"protected:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual bool AdjustHostBuffer(int nMaxNodeID);"]},{"entry":[{},"\/\/ adjust the node pointer buffer to hold new IDs"]},{"entry":[{},"\/\/ return true if succeeded"]},{"entry":[{},"\/\/ return false if failed or input parameter is not ok"]},{"entry":[{},"\/\/ throw cGraphError with fatal errors"]},{"entry":[{},"virtual int AllocHostID(int nPreferedNodeID, bool"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"bPreferSmall=true);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual int FreeHostID(int nNodeID);"]},{"entry":[{},"virtual void MoveMinFreeHostIDPointer( );"]},{"entry":[{},"virtual void MoveMaxFreeHostIDPointer( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"class cACRESHost"]},{"entry":[{},"{"]},{"entry":[{},"friend cACRESHost * cACRES::SetHost(cACRESHost *pHost, int hostID);"]},{"entry":[{},"\/\/ this function will assign the pACRES and nHostID for this host object"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"cACRESHost( ) : pACRES(NULL), nHostID(\u22121),"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"objType(_ACRES_HOSTOBJ_BASIC)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{ };"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"~cACRESHost( ) { };"]},{"entry":[{},"virtual bool Reset(void) {return false;};"]},{"entry":[{},"virtual cACRESNode * CreateNode( )=0;"]},{"entry":[{},"\/\/ The user application call this to create the content node"]},{"entry":[{},"virtual bool GetNodeContent(int nNodeID, ACRESContent *pCont)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{return false;};"]},{"entry":[{},"\/\/ Get the content represented by the Node"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual bool NotifyDeliveredNodeContent(int nNodeID) {return"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"false;};"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The Decision engine call this if the node is delivered."]},{"entry":[{},"virtual double GetNodeValue(int nNodeID, double nTime) {return 0;}"]},{"entry":[{},"virtual double GetNodeCost(int nNodeID, ACRES_NODE_STATUS"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tostatus,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"double nTime) {return 0;}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual double GetNodeResource(int nNodeID, ACRES_RESOURCE_TYPE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"nResource)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{return 0;}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual double CheckPreferece(int nNodeID, void *pPref) {return"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"0;}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ check compatiblilty, preference, profile, . . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual bool GetTimePreference(int nNodeID, double *pTimePref)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{return false;}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ time base of hosted contents, may only be useful for dynamic"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"contents"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"virtual double SetTimeBase(double timebase) {return 0;};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual double GetTimeBase( ) {return 0;};"]},{"entry":[{},"\/\/ dump my self to a file"]},{"entry":[{},"virtual bool WriteFile(FILE *fp) {return true;};"]},{"entry":[{},"\/\/ reinit my self from a file"]},{"entry":[{},"virtual bool ReadFile(FILE *fp) {return true;};"]},{"entry":[{},"\/\/ Add more common Host API here"]},{"entry":[{},"\/\/\/\/\/\/\/\/\/\/\/ OBJ TYPE \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"]},{"entry":[{},"ACRES_HOSTOBJ_TYPES objType; \/\/ my RTTI"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"protected:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cACRES *pACRES;","\/\/ On which ACRES I am"]},{"entry":[{},"int nHostID;","\/\/ My ID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/\/\/\/\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class cDecision"]},{"entry":[{},"{"]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cDecision(cTimeTicker *pTicker);"]},{"entry":[{},"\/\/ the decision engine gets it's system clocks"]},{"entry":[{},"~cDecision( );"]},{"entry":[{},"virtual bool AssignContent(cACRES *pACRES);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Give it our content"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual bool AssignOutput(cOUTPUT *pOUT);"]},{"entry":[{},"\/\/ Setup the output API"]},{"entry":[{},"virtual bool setResource(ACRES_RESOURCE_TYPE restype,"]},{"entry":[{},"cResourceModel *pRes);"]},{"entry":[{},"\/\/ Setup the resource model"]},{"entry":[{},"virtual bool SetLookForward(unsigned int nlookres,"]},{"entry":[{},"unsigned int nlookdecision);"]},{"entry":[{},"\/\/ Set the search parameter"]},{"entry":[{},"virtual unsigned int GetSystemClock( ) {return sysclock-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":">GetTick( );};"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual bool StartUp( );"]},{"entry":[{},"virtual int RunEngine(int *delivered);"]},{"entry":[{},"\/\/ call it every clock tick"]},{"entry":[{},"\/\/ return the number of delivered nodes in int *delivered"]},{"entry":[{},"\/\/ and the number of status changes during the run"]},{"entry":[{},"virtual bool ContentPending( );"]},{"entry":[{},"\/\/ check if there are still deliverable contents left"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"protected:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual bool Cleanup(bool all);"]},{"entry":[{},"virtual int Qualificator( );"]},{"entry":[{},"\/\/ Update node statuses and prepare the candidate set"]},{"entry":[{},"virtual int Planner( );"]},{"entry":[{},"\/\/ Run the decision procedure"]},{"entry":[{},"virtual int Deliverer( );"]},{"entry":[{},"\/\/ Call the output API"]},{"entry":[{},"virtual double CostEffective(double value, double cost,"]},{"entry":[{},"double timenow, double timepref);"]},{"entry":[{},"\/\/ calculating the value of content"]},{"entry":[{},"\/\/ Implementation of optimized searching algorithm"]},{"entry":[{},"\/\/"]},{"entry":[{},"virtual bool InitFuturePlanner(unsigned int maxPredicts);"]},{"entry":[{},"virtual double FuturePlannerCheckDelay(double res);"]},{"entry":[{},"virtual bool FuturePlannerAllocateResource(int nID, cACRESHost"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*pHost,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"double &delay);"]},{"entry":[{},"virtual bool FuturePlannerFreeResource(int nID, cACRESHost *pHost,"]},{"entry":[{},"double &delay);"]},{"entry":[{},"virtual int FuturePlannerExpand(int level, int maxlevel,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int nTryNodeID, cACRESNode *pTryNode,"]},{"entry":[{},"cDENodeList *pFire, cACRESEdge *pEdge,"]},{"entry":[{},"double &totalbenifit, double &totalvalue, double"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"&totalcost);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual int FuturePlanner(int level, int maxlevel,"]},{"entry":[{},"double &totalbenifit, double &totalvalue, double &totalcost,"]},{"entry":[{},"int &idFrom);"]},{"entry":[{},"virtual bool DeInitFuturePlanner( );"]},{"entry":[{},"\/\/ used for resource management during the decision process"]},{"entry":[{},"virtual double ResourceManager(bool init);"]},{"entry":[{},"virtual double CheckResource(ACRES_RESOURCE_TYPE restype);"]},{"entry":[{},"virtual double LookForwardResource(ACRES_RESOURCE_TYPE restype,"]},{"entry":[{},"unsigned int systick);"]},{"entry":[{},"virtual bool ReserveResource(int nID, cACRESNode *pNode, double"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*delay);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ These two routines are used to maintain the candidate sets"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"which"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ are implemented as link lists"]},{"entry":[{},"virtual cDENodeList* AddTo(cDENodeList* &rpList, int nid,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cACRESNode *pNode, int fromid);"]},{"entry":[{},"virtual cDENodeList* DeleteFrom(cDENodeList* &rpList,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"cDENodeList *pElem, bool drop=true);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"virtual int UpdateRelatedNodeStatus(int nid, cACRESNode *pNode,"]},{"entry":[{},"bool updateEdge, int fromid);"]},{"entry":[{},"\/\/ update the status of related nodes if my status is changed"]},{"entry":[{},"virtual int UpdateRouteToWarmLine(int nid, cACRESNode *pNode);"]},{"entry":[{},"\/\/ Update WarmLine nodes from a FireLine Node"]},{"entry":[{},"\/\/ return the possible usable routes of the FireLineNode;"]},{"entry":[{},"\/\/ return \u22121 for errors"]},{"entry":[{},"virtual int CheckRouteToWarmLine(int nid, cACRESNode *pNode);"]},{"entry":[{},"\/\/ check if this node can goto warmline or potentially goto"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"warmline"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ return \u22121 for errors"]},{"entry":[{},"\/\/ return 0 for not be able to reach any inactive or activable"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"nodes"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ return 1 for yes"]},{"entry":[{},"virtual cDENodeList * FindInList(int nid, cDENodeList *pList);"]},{"entry":[{},"\/\/ find the node in a list sorted increasely by Layer and NodeID"]},{"entry":[{},"int SkipValuelessRouteNodes(int nid, cACRESNode *pNode, int"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"&numskip);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ return the number of valuable\/branchable route nodes"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Methods and systems that provide a framework for generic adaptive multimedia content delivery have been described. The framework features an abstract content model and an abstract adaptation decision engine that can make adaptive delivery plans without knowing much of the physical details of actual content. The capabilities of the framework have been demonstrated with an application of adaptive video streaming. Experimental results further show that the proposed framework is effective and efficient in adaptive delivery of contents under variable network conditions. The described architecture can be easily extended to have much stronger capabilities.","Although the invention has been described in language specific to structural features and\/or methodological steps, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or steps described. Rather, the specific features and steps are disclosed as preferred forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2","i":"a "},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2","i":"b "},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 8A\u20138D"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 9A\u2013B"}]},"DETDESC":[{},{}]}
