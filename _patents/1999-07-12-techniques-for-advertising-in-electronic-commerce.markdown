---
title: Techniques for advertising in electronic commerce
abstract: Disclosed is a system for performing online data queries and purchasing advertisements associated with business listings. The system for performing online data queries is a distributed computer system with a plurality of server nodes each fully redundant and capable of processing a user query request. Each server node includes a data query cache and other caches that may be used in performing data queries. The data query, as well as request allocation, is performed in accordance with an adaptive partitioning technique with a bias towards an initial partitioning scheme. Generic objects are created and used to represent business listings upon which the user may perform queries. Various data processing and integration techniques are included which enhance data queries. An update technique is used for synchronizing data updates as needed in updating the plurality of server nodes. A multi-media data transfer technique is used to transfer non-text or multi-media data between various components of the online query tool. Optimizations for searching, such as the common term optimization, are included for those commonly performed data queries. Also disclosed is a system for targeting advertisements that are displayed to a user of the system. Advertisements may also be purchased using this system. Advertisements are linked to the business listings that may result from a user query for particular types of businesses or listings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08849693&OS=08849693&RS=08849693
owner: Verizon Laboratories Inc.
number: 08849693
owner_city: Waltham
owner_country: US
publication_date: 19990712
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application claims priority from U.S. application Ser. No. 09\/282,356 filed on Mar. 31, 1999 (pending).","The present application is related to the following eleven copending U.S. patent applications each filed on Mar. 31, 1999, each having its assignee of the entire interest in common with the assignee of the entire interest of the present application, and having titles and serial numbers as follows: TARGETED BANNER ADVERTISEMENTS, Ser. No. 09\/282,764; COMMON TERM OPTIMIZATION, Ser. No. 09\/282,356; GENERIC OBJECT FOR RAPID INTEGRATION OF DATA CHANGES, Ser. No. 09\/283,815; EFFICIENT DATA TRANSFER MECHANISM FOR SYNCHRONIZATION OF MULTI-MEDIA DATABASES, Ser. No. 09\/283,816; NEW ARCHITECTURE FOR ON-LINE QUERY TOOL, Ser. No. 09\/283,837; DATA ENHANCEMENT TECHNIQUES, Ser. No. 09\/282,342; DATA MERGING TECHNIQUES, Ser. No. 09\/282,295; TECHNIQUES FOR PERFORMING INCREMENTAL DATA UPDATES, Ser. No. 09\/283,820; WEIGHTED TERM RANKING FOR ON-LINE QUERY TOOL, Ser. No. 09\/282,730; ADAPTIVE PARTITIONING TECHNIQUES IN PERFORMING QUERY REQUESTS AND REQUEST ROUTING, Ser. No. 09\/282,493; and HYBRID CATEGORY MAPPING FOR ON-LINE QUERY TOOL, Ser. No. 09\/283,268.","This application generally relates to electronic commerce. More particularly, this application relates to techniques for providing advertising services in electronic commerce.","The Internet and other networks are channels that may be used by businesses in electronic commerce. For example, users may shop and purchase items electronically on-line. In an effort to take advantage of another sales channel, businesses may advertise electronically, as on the Internet, to provide product information to consumers. In using the on-line systems, it is desirable to have a system that integrates a variety of ad-creation and purchasing options on-line. Additionally, it is desirable to have a system that provides for quick integration of new and varied product offerings.","Thus, there is required an integrated technique and system for on-line advertisement purchasing and creation that provides for rapid integration of new and varied advertisement offerings, and rapid incorporation of new and modified advertisements.","In accordance with principles of the invention is a method for advertising in electronic commerce. An electronic advertisement is created while connected to a computer network. Advertising services associated with said electronic advertisement are paid for while connected to the computer network.","In accordance with another aspect of the invention is a method of on-line advertising in electronic commerce. A business listing is selected in accordance with a unique identifier uniquely identifying the business listing. An advertising service and corresponding payment plan is selected. An advertisement is created. An order is generated for the advertising service and the advertisement. Payment authorization is obtained. The advertisement is published and charges are generated for said advertising service.","In accordance with yet another aspect of the invention is an electronic commerce system for advertisement creation and purchasing. An order management component manages electronic advertisement service orders. An authentication and access control component provides secure access to advertisements and business information. A transaction management component provides for automated payment transactions generated in accordance with a predetermined advertisement payment schedule. A product and catalogue management component manages advertising services presented to a user in accordance with a particular business listing. A user and content management component manages advertisement content and business listing selection activity associated with a particular user. A payment server posts and verifies charges electronically.","Thus, there is provided an integrated technique and system for on-line advertisement purchasing and creation that provides for rapid integration of new and varied advertisement offerings, and rapid incorporation of new and modified advertisements.","Referring now to , shown is an embodiment of an on-line query tool . In an embodiment, one or more users - may connect to the on-line query tool  via a network . Users may interact with the query tool using conventional hardware and software, such as, in an embodiment, a web browser through the Internet.","Referring now to , shown is an embodiment of a hardware view of an on-line query tool. In one embodiment, this on-line query tool may be the GTE Superpagess query tool.  shows a hardware view of the components that may be included in one embodiment of the query tool in typical operation as being accessed by a user through a network. The user  enters a query request which is sent via a network , such as the Internet, to the GTE Superpages Front End Server . The GTE Superpages Front End Server  includes a hardware router  for receiving incoming query requests. The hardware router routes the request, using a simple hardware-based technique, to one of the server nodes - which may be designated to service the request by performing the requested query. The servers  through , server 1 through server n, respectively, interact with the Primary Database  and Secondary Database  to perform a data query. The Primary Database  interacts with the Backoffice component  at times, as will be described in paragraphs elsewhere herein, to obtain data used in performing the queries. The Backoffice component  performs data filtering and other processing, for example, to combine information that may be obtained from various data sets producing a resultant data set. The resultant data set is subsequently transferred to the Primary Database for use by the various server nodes  through .","The process of data integration and updating the data, for example, from the Backoffice to the Front End Server, may be performed at a time other than peak demand time. These processes and data transfer techniques, as will be described in following paragraphs, are generally performed \u201coff-line\u201d and not in response to user query requests. Rather, these techniques may be performed as part of a data maintenance and update process performed in accordance with the system load and the number and type of update transactions.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 2","b":["804","808","810","800"]},"Referring now to , shown is an example of a user interface screen as included in one embodiment of the system of . Generally,  is the initial screen  that may be displayed to a user entering a URL corresponding to the GTE Superpages Internet site.  includes fields for query information -, hyperlinks to other tools , such as on-line shopping or placing advertisements, and other links , for performing other tasks such as modifying an existing business listing.","The GTE Superpages Internet site is related to on-line yellow pages, similar to those included in a paper phone book. With these on-line yellow pages, various business services and user services may be provided. For example, a user may query the on-line yellow page information for various businesses in the United States based on particular search criteria. On-line shopping information regarding products and business services may be provided to a user performing a data query. Advertisers, such as the business providers of the various products and services, may also purchase advertisements similar to those that may be purchased in the paper copy of a phone book that includes yellow page listings of businesses.","The interface  may include links to various services and functions. For example, one service provided permits businesses to advertise in the on-line yellow pages. Functions associated with this service may include, for example, purchasing advertisements and adding or changing a business listing that an advertiser or business includes in the yellow pages. In , some of these functions are included in the interface portion , with links to other tools in the screen portion . A user may connect with any of these tools or functions to perform tasks related to the yellow pages advertising by selecting an option from the user interface , such as by left-clicking with a mouse.","Other interfaces with varying functions may be directed to a user. Other types of network connections in addition to the Internet may also be included in other embodiments and may vary with each application and embodiment.","Referring now to , shown is an embodiment of the various software components for an on-line query system. One embodiment may be the on-line query tool of the GTE Superpages system.  depicts a software view of the typical operation of the system as being accessed by a user  through a network  using the hardware as described in conjunction with . As previously described, the user may enter a request, as through a browser. This request is communicated through the GTE Superpages Front End Server  over the network . As shown in , the Front End Server  includes server node  that includes a web server engine . In one embodiment, the web server engine  is a Netscape\u2122 engine which serves as a central coordinating task for accessing files and displaying information to the user on the browser . The server node  also includes a request router , a monitor process  and a parser . The parser  generally includes a parse driver , a generic object dictionary , a query engine , and a data manager . The parse driver  operates upon data from a constructed ad repository  and the PHTML files . Additionally, the parse driver  stores and retrieves data from the PHTML execution tree  and the page cache . The data manager  included in the parser  is responsible for interacting with the database, which in the  is the Primary Database . It should also be noted that the data manager  may also obtain data from a Secondary Database as previously shown in . If there are multiple databases other than a Primary and Secondary Database, the data manager may also interact with these to obtain the necessary data upon which data queries are performed. The query engine  operates upon data from, and writes data to, the data query cache . Additionally, the query engine uses data from the term lists  to obtain identifiers and possibly other retrievable data in accordance with various key terms upon which a data query is being performed. The request router  generally interacts with the parser and reads data from the configuration file  and load file . The monitor process  also reads and writes data to and from respectively the load file . The web server engine , in this embodiment the Netscape engine , obtains data from the HTML repository  and the image repository  in accordance with various requests from the browser for different types of files. Each of the foregoing components will be described in more detail in terms of function and operation in paragraphs that follow. The monitor process  is generally responsible for indicating the availability of server nodes - in performing data queries. The monitor is also generally responsible for receiving incoming messages from other server nodes as to their availability for servicing requests.","The load file , upon which the monitor process  reads and writes data, is a dynamic file in that its contents are updated in response to incoming messages indicating machine availability and the current load of the corresponding machine. The load file also includes static information components, such as the maximum load of each system. Generally, the actual executing load (current load) of a system is less than or equal to the maximum load (max load) as indicated in accordance with the load file. Each server has its own unique copy of the load file which is updated in accordance with messages which it receives from the other nodes. Below is an example of an entry that may be included in the load file representing the information described above:","Server, Max Load, Current Load.","The configuration file  may be a static file physically located on one of the server nodes - with a copy replicated on each other server node. Generally, this file is created prior to use of the system. It may specify which servers may service requests based on weighted parameters of a particular search domain associated with a particular server. Below is an example of an entry in a configuration file:","Domain\/Partition, Server, Domain Weight, Server Weight","The domain weight may be a normalized value representing costs (e.g., time) associated with processing a request for this associated search domain or partition. This domain weight is based on the median time to service a request in that domain based on the analysis of past data logs, for example, as normalized by the number of listings in the domain. Similarly, server weights may represent the cost associated with processing a request on a particular server. The domain\/partition indicates a portion of the search domain upon which a user query may be performed that is associated with a particular server.","Other particular embodiments of the load and configuration files may include additional or different information in accordance with the particular policies and data required to implement the policies, such as request routing.","In this particular embodiment, an incoming request may be processed by one of a plurality of parsers  on each of the server nodes. The parser  generally transforms the user input query into a form used by other components, such as the request router. The request router generally receives an incoming request as forwarded by the hardware router  of . The request router subsequently uses the load file and the configuration file to decide which server node - a request is routed to based on the load and the availability of the server node, and the designated server for each partition or domain. Once a request is routed to one of the server nodes -, the query is performed producing data query information that may be cached, for example, in the memory of a data query cache .","One use of the data query cache , as will be described in paragraphs that follow, is its use in improving the performance in response to a user request in a subsequent query that may use a subset or superset of the data stored in the data query cache . A superset or composition query is one which is a boolean composite of several querying terms. A composition query may be determined by the parser , and the request router  may decide to which server node - the composition query or other query is sent for processing in accordance with domain weights as indicated in the configuration file. Reallocation of requests when a server is unavailable may be performed generally with a bias toward the initial allocation scheme as indicated also by the configuration file. There is an assumption that reallocation of a request is on a transient basis, and that the initial allocation scheme is the one to be maintained. This concept will be described in paragraphs that follow in accordance with request routing and data query caching.","Also shown in  are the PHTML execution tree , the page cache , and the PHTML file store . Generally, the PHTML execution tree  includes an expanded version of a PHTML file requested from the PHTML file  as the result, for example, of a user query. PHTML generally is a modified version of the HTML language, which is a markup language according to the Standardized General Markup Language (SGML) standard, capable of interpretation by browsers, such as a Netscape browser. PHTML generally is a scripted version of HTML with conditional statements that provide for alternate inclusion of blocks of HTML code in a resulting HTML page transmitted to a browser in accordance with certain run time query conditions. The expanded version of a PHTML file may be described as a parse tree representing parsed and expanded PHTML files. For example, if a PHTML file conditionally includes accesses to other PHTML files or various portions of HTML commands, the parse tree structure reflects this in its representation of the parse tree which is cached in the PHTML execution tree . Upon a subsequent request for the same PHTML file, the cached, expanded version is retrieved from the PHTML execution tree  to increase system efficiency, thereby decreasing user response time for the subsequent query.","The first time a user makes a request via the browser , a request is received by the webserver engine  which interacts with the parser . For a particular user request, a PHTML file is obtained and executed from the PHTML file store . The expanded version of the PHTML file is cached in the PHTML execution tree . In response to a user's request, an HTML page is generally constructed and cached in the page cache . Generally, constructed HTML pages are stored in the page cache  if the amount of time taken to produce the resulting HTML page is greater than a predetermined threshold. Implementations of the page cache may implement different replacement schemes. In one preferred embodiment, the page cache implements an LRU replacement scheme. Additionally, the threshold, the amount of time used to determine which pages are stored in the page cache, may vary with system and response time requirements.","When processing an incoming user request which results in returning an HTML page to a user, a particular search order of the previously described caches and file systems may be performed. Initially, it is determined whether the HTML page to be displayed to the user is located in the page cache . If not, search results are obtained from the query cache and the resulting HTML page is constructed and itself may be placed in the page cache . If a PHTML file is required to be executed in constructing the resulting HTML file, the PHTML execution tree  may be accessed to determine if there is a parsed version of the required PHTML file already expanded in the PHTML execution tree. If no such file is located in the PHTML execution tree , the PHTML file  is accessed to obtain the required PHTML file. The order in which these caches and file systems are searched is generally in accordance with a graduated processing state of producing the resulting HTML file. Caches associated with a later state of processing are generally searched prior to ones associated with an earlier processing state in producing the resulting HTML file.","Also accessed by the parse driver  is a constructed ad repository . As will be described in paragraphs that follow, the constructed ad repository generally includes constructed advertisement pages which may include, for example, text and non-text data, such as audio and graphic images to be displayed in response to a user query which represent, for example, a yellow pages ad. The webserver engine  accesses information from the image repository  and HTML repository . Generally, the image repository  includes various graphic images and other non-text data which may also be directly accessed by the webserver engine  in response to a user request, as by a user request for a specific URL. Similarly, the HTML repository  includes various HTML files which may be provided to the user, for example, in response to a user request with a specific URL which indicates a file.","Included in each of the server nodes - are one or more parsers  which perform, for example, parsing of the text of a user data query request.  includes some of the software components as included in the parser . The components of the parser , which are described in more detail in the following paragraphs, generally communicate using a generic object dictionary . The parser may include a parse driver  which performs the actual parsing of a user query. The parse driver  interacts with the query engine  once a request has been parsed to formulate a data query which is further passed to the data manager . As previously described, the data manager  generally interacts with a database to actually retrieve the data to be included in the resultant data query as displayed to the user.","The parse driver  generally uses a data schema description to interpret various data fields of the generic data objects. Generally, abstraction of the data interpretation into the data schema description enables different components of the parser  to operate upon and use generic data objects without requiring these components require code changes or recompilation in cases of the introduction of new data presentation types. Components which need to know the details of the generic data object, such as the parse driver , to perform certain functions, do this on a per-component basis using data schema descriptions to interpret a generic data object. This technique insulates code as included in the parser  from the introduction of new presentation types which may be represented as generic data objects.","One common use of the GTE Superpages Internet site is to perform a data query. In performing a data query, a user enters data query information, as in fields - of , or may select other detailed search options, such as searching by distance, as included in field . In this embodiment, data field  is a category query field by which queries may be performed in accordance with specified search categories that may be associated with business listings included in the yellow pages database. Additionally, field  also includes predetermined top categories, as may be determined by examining log files in accordance with user query selections and search criteria. In this embodiment, selection of the \u201ctop categories\u201d of the field , as by left-clicking with a mouse button, causes the interface  of  to be displayed in a user's browser.","Referring now to , shown is one embodiment of a user interface for displaying a first page of the top query categories . Generally, these categories are associated with the various business listings and are tags by which a user may perform queries. In this embodiment, for example, the user may select the \u201ctop categories\u201d from the initial interface as included in the field .","Referring now to , shown is one embodiment of a user interface for displaying a \u201csearch by distance\u201d option. In this embodiment, this user interface screen may be displayed by selecting \u201cdetailed search\u201d from the field  from the initial user interface . For example, the user interface  may be displayed if the user wants to perform a data query for specified categories and certain distance criteria. As shown in the example of user interface , a data query may be performed for restaurants within five (5) miles of Boston, Mass. This query is performed when the user selects the \u201cFind It\u201d button  as included in the user interface . In this embodiment, a first screen  of the data query results is shown in .","Referring now to , shown is an example of one embodiment of a user interface display  for performing a user query in accordance with user-specified search criteria. User interface  of  is the interface  of , but with user-specified data query information included in various data fields. In , a data query is performed for \u201cshoes\u201d as the category  for \u201cBoston, Mass.\u201d in field . The query is performed by selecting the \u201cFind It\u201d button of field . The resulting screen displayed in response to selection of the \u201cFind It\u201d button is included in .","Referring to , shown is one example of a screen display in response to a performing a user query. The screen results  may include displayed summarized business listing information in accordance with the search criteria previously specified in . Various business listings may be grouped together in categories. In this example, relating to \u201cshoes\u201d, are 154 business listings included in thirteen (13) categories. From this listing of thirteen (13) categories, the user may select one of these relating to shoes. For example, selection, as by using a mouse, of \u201ccustom made shoes\u201d  results in the screen display of .","Referring now to , shown are the business listings relating to the user-specified search criteria selection relating to \u201ccustom made shoes\u201d. From this screen , the user may further select one of the businesses for more information pertaining to the business, such as directions and business-provided advertisements.","Referring now to , shown is one embodiment of a user interface that may be displayed when a business or advertiser updates a business listing. This screen may be displayed, for example, by selection of the \u201cadd or change your listing\u201d option  of  of the initial user interface. A user interface  provides data fields which allow a user to enter in information, such as a telephone number corresponding to a business listing. Corresponding business listing information is then updated. In this example, a phone number 617-832-5000 is entered into field  to retrieve business listing information corresponding to this phone number. By selecting the phone number field that is filled in with this phone number, the resulting screen of  is subsequently displayed to the user in this embodiment. The phone number corresponds to a business as displayed in . If this is the correct business, a user may select a displayed business, for example, by clicking on the \u201cmatching business\u201d information of . In response to selecting the \u201cmatching business\u201d information, the screen display of  may be displayed to a user. To update the basic listing information associated with the business, selection of field  of  results in display of the screen of  where the user has the option to either update the business information or change categories. If business information is selected,  may be displayed.  includes the business listing information that may be updated, such as a street address or e-mail address associated with this business listing.","Referring back to , a section of the displayed interface  indicates options for creating a website linked to a particular business listing. Note also that in some embodiments, it is possible to enhance a business listing and\/or link a listing to a pre-existing website or to one that is created.","The foregoing user interfaces and display results may vary with embodiments and user-specified search criteria. Various other user interfaces and other techniques known to those of ordinary skill in the art for specifying user search criteria may be used in other embodiments of the invention.","Referring to , shown is an embodiment of the request router . In this particular embodiment, the request router  may be executed within a Netscape server process space and may be invoked when a user, via a browser, makes a request which results in a PHTML file being executed. The PHTML files, as generally included in the PHTML file store , are in the form of a script activated when a server node - is forwarded a user request.","The request router  is generally responsible for routing a request to the proper server node in accordance with data stored in the configuration and load files. The request is also forwarded to one of the plurality of parsers for processing once the proper server node has been located. In this embodiment, the request router  may include several threads of execution as shown in , which operate under the control of, and in the same process space as, the Netscape browser. As shown in , the request router  generally includes a housekeeping thread , a router thread , and one or more worker threads . Generally, the housekeeping thread  is responsible for maintaining a parser status table  and a parser queue , both of which are further described below.","The router thread  generally responds to the monitor process changes as recorded in the various data files with regard to server node availability. The router thread  reads data from the configuration and load files, and maintains an in-memory copy for use by the various threads of the request router . The router thread  updates the in-memory copy of the configuration and load files in accordance with predetermined node fail-over and reallocation-of-request policies. For example, if in reading the configuration and load files, the router thread  determines that a first server node is at maximum utilization, the router thread updates its in-memory, server-node, local version of the files. The router thread determines not to forward requests to the first server. When the first server node's actual utilization decreases and is now available for processing additional requests, the router thread accordingly updates its in-memory copy.","Each of the worker threads  is initially forwarded a request which arrives at a server node. The worker thread  makes the decision whether the request should be routed to another node. The worker thread  makes this decision generally in accordance with the contents of the configuration and load files as previously described. If a request is determined to be routed to another server, the worker thread forwards the request to another worker thread on another server node. If the worker thread does not forward the request to another server, the worker thread determines which parser to send the request to for further processing. The list of available parsers is stored in the parser queue , which in this particular embodiment is implemented as an AT&T System 5\u2122 with a system message queue. The parser queue is generally maintained by the housekeeping thread .","It should be noted that the Netscape\u2122 or other HTTP server provides as a service the dispatching of requests to the various worker threads. Other implementations may provide this function using other techniques such as callback mechanisms which dispatch the user requests to one of the plurality of available worker threads . Generally, the parser status table \u2032 includes information about use, availability and location of each of the plurality of parsers on each server node. The parser status information may be used in determining where to route requests for example, as performed by the worker thread . The parser status information as included in the parser status table  may be used to route requests based on an adaptive technique similar to the adaptive caching technique which will be described in paragraphs that follow. This may be particularly useful in systems with multiple processors, for example, those in which certain CPUs are dedicated processors associated with predetermined parsers. For example, as particular requests are processed by particular parsers, each associated with a particular CPU, the parsing results may be stored in the PHTML execution tree accessed by the particular processor. Subsequent requests which are also processed by the same parser may access the cache parsing results stored in the PHTML execution tree.","In this particular embodiment, the request processing model includes a plurality of parsers and a plurality of worker threads. Using this request processing model, an incoming request is associated with a particular worker thread which then forwards the request to a parser for processing. Once this request has been associated or forwarded to a particular parser, the worker thread is disassociated with the request, and is then available for use in the pool of worker threads. The number of parsers and worker threads may be tuned in accordance with the number of user requests. One point to note using this model is that the worker thread and the parser are disassociated and thought of as distinct processing units rather than as a unit in which a worker thread is associated with a particular parser for processing an entire life of a request.","Referring now to , shown is a block diagram of an embodiment of the Backoffice component . Generally, the Backoffice component includes a database  which provides data, for example, to the Front End Server  through connection . The database , as stored in the Backoffice component, may be updated, as through a webserver via a connection to a user. Such a connection as  may be used, for example, when a modification is made to an entry to correct typographical error. A user may connect, such as via a browser, using connection , to the webserver  included in the Backoffice component. The database  is then accessed and updated in accordance with requests or updates made by the user.","Other embodiments of the Backoffice component may include other software components than those displayed in . Additionally, a user may update entries included in database  using techniques other than by a connection  via a webserver to the database . As described in other sections of this description, different types of updates to database  may be performed in different embodiments of the invention. For example, the database  may be updated on a per-entry basis by a variety of users connecting via multiple webserver connections. Additionally, periodic updates, for example, for particular data set may be provided from a particular vendor, and accordingly integrated into database  through a database integration technique rather than having a user manually enter these updates such as via a connection to the webserver .","The connection to the Front End Server  may be used, for example, to load a new copy of the database  into the Front End Server Primary and Secondary Databases ,  as shown in . The way in which these updates may be sent across the connection  to the Front End Server may be as previously described in terms of database operational commands which perform updates from the computer system which include database . For example, in one embodiment, the database  included in the Backoffice component and both the Primary and Secondary Databases, as included in , are Oracle\u2122 databases. Oracle provides remote database update and access commands which allow for remote database access and updating, such as update requests from the database server node  to update the Primary Database  as stored in the Front End Server . In this embodiment, updates as made to the database  are \u201cpushed\u201d to the Front End Server  via the connection . These modifications are pushed via database-provided update techniques such as those included when sending the operational table commands to the Front End Server .","In this particular embodiment when information is sent via connection  to the Front End Server  from the Backoffice component , error messages and other status codes may be sent back to the Backoffice component  in accordance with an indication as to whether a data transfer, for example, has been successfully completed.","Referring now to , shown is an embodiment of a general process by which data that is transferred from the Backoffice  to the Front End Server  is further integrated into other data stores within the Front End Server . Data is stored in the Backoffice component in this particular embodiment in a normalized dataform, as will be further described in paragraphs that follow. These normalized data changes are transferred to the Front End Server  from the Backoffice component in one of several forms. For example, the entire database may be transferred to the Front End Server . Additionally, changes or updates to particular entries may also be transmitted to the Front End Server  from the Backoffice component rather than updating or overwriting the entire copy of the database as stored in the Front End Server . Each of these types of database updates from the Backoffice component to the Front End Server  may be done in accordance with the number of transactions or updates to be performed. This is further described in other sections of this description.","Data which is stored in the Front End Server  may be stored in a normalized data format . Extraction routines  operate upon this normalized data to produce denormalized data  and markup language files . The markup language files  serve as input to information retrieval software  which outputs term lists . As known to those skilled in the art, a markup language file generally includes tags which represent commands or text identifiers for processing the contents of the file. For example, Structured Generalized Markup Language, SGML, is a standard based markup language known to those skilled in the art.","The process depicted in  is performed once data has been received in the Primary Database , and is first stored in the Primary Database  in normalized data form, as in the normalized data store . Extraction routines  examine the normalized data store  and rearrange the information to place it in the denormalized data form, also included in the Primary Database  of this embodiment. These changes or updates for the normalized data which are transformed into the denormalized data form are integrated into the denormalized data store . Additionally, the extraction routines  produce markup language files  which are primarily used by the information retrieval software to produce identifiers and corresponding words or terms upon which a query may be performed. These lists of key words or terms which may be searchable or retrievable and the corresponding record identifiers as included in the denormalized data store  may be stored in a list structure as included in the term list data store .","Generally, the markup language files include one file or document per business for which there is an advertisement, for example, in this particular embodiment. Each of the markup language files  includes markup language statements, such as SGML-like statements, with tags identifying key data items in the document for each business. In this particular embodiment, the information retrieval software is Verity software which uses as input markup language files . Additionally, Verity uses its own schema file by which a user indicates what key words or terms as indicated in the markup language files are searchable and which of the data fields contain retrievable information. \u201cSearchable\u201d as used herein means fields or key words and terms upon which searches may be performed, like index searching keys. \u201cRetrievable\u201d as used herein generally means fields or categories with associated data that may be retrieved. All searchable fields have a tag, such as a business name or city. Identifiers are generally produced by the information retrieval software . Verity\u2122, in this particular embodiment, produces term lists  in which there exists a list for each particular key word, term or category followed by a chain of identifiers that indicate the record number in the denormalized data store . Additionally, associated with each element in the term list which indicates a record in the denormalized data, retrievable data associated with that record may also be included. For example, if the field \u201czip code\u201d includes a tag as included in the mark-up language file  which indicates that this particular field is searchable, it may be desired that whenever a user wishes to do a search for \u201czip code\u201d what is actually retrieved or displayed to the user is the city and the state. Accordingly, in this instance, the term list and the term list data store  contain a list corresponding to the key word \u201czip code\u201d. There is a term list for each particular value of a zip code. Attached to each key word \u201czip code\u201d and the particular value may be a list or a chain of identifiers. Associated with each identifier on the chain may be associated data, such as the city and state, which may be retrieved when a particular zip code is searched.","Other types of data may also be included in other preferred embodiments of the term lists. For example, the data included in the term lists may be data that is also needed in performing search optimizations, weighted searches, or different types of searches, such as proximity searches. This data may further be stored in the various data files and caches of the Front End Server as needed in accordance with each implementation, for example in accordance with the types of searches and data upon which queries may be performed or otherwise operated upon by the Front End Server.","Referring now to , shown is a detailed description of one embodiment of an example of normalized data, as may be stored in the Backoffice component and one copy in the Primary Database . Generally, in the Primary and Secondary Databases  and , respectively, of , the Primary Database  includes both normalized and denormalized data form, and the Secondary Database  includes only denormalized data form. Normalized data is that representation of the data in which each data relation is represented independent of other relations. Generally, denormalized data is the antithesis of a normalized data in which one data relation represents all relations. Different databases may be of different degrees of normalized and denormalized data. The Backoffice component  generally stores the data in normalized data form of a certain degree. Similarly, the databases used in this server store the data in a form of a normalized form also of a certain degree and additionally in a denormalized form for search performance optimizations on performing data queries. In one embodiment, for example, the data is stored in third degree normal form. Additionally, in the denormalized form, sets of data may be stored together within a single field, such as multiple mailing addresses. Other embodiments may have one field per address. This may prove to be advantageous, for example, for high performance and better flexibility in systems subject to multiple and diverse data sources, and a high rate of modifications.","As shown in , for example, each particular business entry may have a unique identifier, (ID). Additionally, three pieces of information may be stored for each particular business. The normalized data form may look as in . In this particular example, there may be a separate table for each ID corresponding to a business and its business address . Additionally, there may be two other data tables of information also indexed by each particular business ID, such as email address  and telephone number . Generally, as indicated in , the normalized data representation for each business associated with a particular ID is represented as a separate data relation independent of the other relations.","The conceptual opposite of normalized data is denormalized data, as depicted in . Referring now to , shown is an example of denormalized data stored in table . In this example of denormalized data, for each ID associated with a business, the business address, email and telephone number, may be stored in a single record. In other words, one data relation, which is a single record in the table , represents all relations for one particular data set, such as the ID corresponding to a business. Various degrees of denormalized and normalized data as known to those skill in the art, may be used. The optimal degree of normalized and denormalized data forms may vary with each particular implementation and embodiment.","Referring back to , it may generally be noted that the Backoffice component  may include one or more database servers . A user may directly interact with the web server  included in the Backoffice component via connection  which, for example, may be a network connection of a user accessing the web server through the Internet. The user may also interact directly with the Backoffice component through the Front End Server Connection .","In this embodiment, the particular type and number of data fields may vary with embodiment. Additional structure may also be imparted to data fields, such as a telephone number may include an area code and exchange component. Additionally, interactions between the Primary Database  of the Front End Server  and the Backoffice component may be driven or controlled by the Backoffice component. For example, when there is an update to be performed to the Primary Database server , an automatic transfer of the new information may be transmitted to the Primary Database  by the Backoffice component. Data may be transmitted to the Primary Database  using connection . Additionally, connection  may be used to provide feedback or status information to the back office component , for example, regarding success or failure of a data transfer using connection .","As generally described, the PHTML files  of  are generally HTML instructions as interpreted generally by a browser with additional embedded processing instructions. Generally, the PHTML execution tree  may be implemented as a C++ applet class with various execute methods which are conditionally performed based upon the evaluation of certain conditions as indicated in the PHTML scripting language statements. Each of the PHTML files  may be expanded and evaluated in accordance with the particular conditions of the user request. The first time a PHTML file is accessed, it is expanded and the expanded version is placed in the PHTML execution tree  of . Subsequent accesses to the same PHTML file result in the conditional evaluation of the stored and expanded PHTML file in accordance with the run time performance and evaluation of a user request, as from browser .","An HTML page is generally formed and displayed to the user. For example, the HTML page may be formed by the parser after interaction with the data manager and query engine to select a specific number of items to be displayed to the user. The HTML page may be stored in the page cache . The page cache generally includes a naming convention such as a file system in which the name of the file corresponds to the arguments and parameters of the query. The technique for forming the name is described in other paragraphs of this application.","The query engine  is generally responsible for performing any required sorting of the query information or subsetting and supersetting of information. Generally, the query engine  retrieves various identifiers which act as keys into the Primary Database  or Secondary Database  for accessing particular pieces of information in response to a user query. After the query engine  formulates and retrieves various identifiers, for example as from the term lists, which correspond to a particular user query, this query information in the form of term list and retrieved information may be stored in the data query cache . A technique similar to the page cache query-to-filename mapping technique may be used to map a particular query request to a naming scheme by which data is accessed in the data query cache. The technique for forming this name is described in other sections of this application.","Additionally, data which is stored in the data query cache  may be compressed or stored in a particular format which facilitates easy retrieval as well as attempting to optimize storage of the various data queries which are cached, as discussed in other portions of this application.","In the following , shown are flowcharts of method steps of embodiments for performing processing in various components of the previously described system of .","Referring now to , shown are steps of one embodiment of a method of processing a request in the system of . At step , the Webserver engine invokes the Request Router in accordance with the .PHTML MIME (Multipurpose Internet Mail Extension). At step , the Worker thread as included in the Request Router is initially forwarded the request for processing. At step , a determination is made as to whether or not this request is serviced by this node in accordance with the information included in the configuration and load files. If, at step , a determination is made that the request is not to be serviced by this node, the request is forwarded to another server node in accordance with the load and configuration file information. If, at step , a determination is made that this request is to be serviced by this node, control proceeds to step  where the Worker thread allocates an available parser from the parser queue to process the incoming request. At step , the incoming request is passed to the designated parser for processing.","Referring now to , shown is a flowchart of one embodiment of method steps as may be performed by the parser. At step , the parse driver of the parser parses the incoming request. In this embodiment, the query request that is parsed is included as a URL parameter that is processed by the parse driver. For example, if the query includes syntax errors, the parse driver will detect and report out such errors. At step , a unique file name is determined in accordance with the query request. This filename corresponds to the display results that may be included in the page cache. It should be noted that this filename is unique for a particular user query and in accordance with \u201clook and feel\u201d parameters of the display results. For example, \u201clook and feel\u201d refers to parameters that describe the displayed results, such as number of business listings displayed in an HTML page, the particular starting point of the displayed results with regard to the resulting data set. For a given resulting data set corresponding to a user query, on a particular type of user display window, 15 items may be displayed. The same query performed by a second user from a different display window may display  items. Thus, the resulting HTML page in both cases is different even though the resulting data set used in forming each of the HMTL pages is different. The page cache may include a different HTML page for each of the 15 and 17 item displays.","A determination is made at step  as to whether the page cache includes the data in the filename determined at step . If a determination is made that the data is included in the page cache by the existence of the file, control proceeds to step  where the data in the filename is retrieved from the page cache. Control proceeds to step  where the resulting HTML including the data in display format is delivered to the user's browser.","If a determination is made at step  that the data is not in the page cache, control proceeds to step  where a determination is made as to whether or not there is a PHTML file in the PHTML execution tree. If a determination is made that the expanded PHTML representation for this request is included in the PHTML execution tree, control proceeds to step  where the expanded PHTML representation is retrieved. Control proceeds to step  where portions of the PHTML file are executed in accordance with the user query to obtain data to produce the resulting HTML page by invoking the Query engine for data results. The data results are returned to the parse driver that creates a resulting HTML file returned to the user's browser at step . Additionally, it should be noted that the resulting HTML file may be cached in the Page cache in accordance with predetermined criteria, as previously described. The resulting HTML file is communicated directly to the user's browser. If a determination is made at step  that the PHTML file is not in the PHTML cache, control proceeds to step  where the PHTML file is retrieved from the PHTML file storage and subsequently expanded. The expanded PHTML file is stored in the PHTML cache. Control proceeds to step , which is described above.","Referring now to , shown is a flowchart of the method steps of one embodiment for performing query engine processing. At step , the query engine receives an incoming request, as forwarded by the parse driver in step . At step , the data is retrieved for the \u201cnormal\u201d search results as appropriate from the data query cache, or using an alternate technique. Details of this step are described in more detail in following paragraphs describing the use of the data query cache. Generally, \u201cnormal\u201d search results refers to the resulting data set formed by business listing data associated with a well-defined geographic area. In addition to \u201cnormal\u201d search result data are other search result data that may not be associated with a single well-defined geographic area, such as virtual businesses in the Internet. These other search results that may not be associated with a single well-defined geographic area are described in more detail in paragraphs relating to the data query cache and its use. At step , other search data in addition to the \u201cnormal\u201d search data may be retrieved and integrated into the resulting data set. At step , the result data set is formulated in accordance with the user query request, such as displaying results in a particular order or beginning at a particular point. At step , the resulting data set is returned to the parse driver for formatting in a display format in an HTML file.","In this particular embodiment, the Standard Industry Classification (SIC) may be used to indicate various name categories and synonyms. These various name categories and synonyms are produced, for example, by the extraction routines which produce the markup files, as used in this particular embodiment by the information retrieval software. Other techniques may be used to facilitate name categories, and equivalents thereof, for searching in other preferred embodiments.","It should generally be noted that in the various descriptions included herein, certain portions of the data storage, such as the image repository , are updated on an incremental change or delta basis. Other preferred embodiments may have different thresholds or techniques to update various data stores included in the Front End Server . These techniques may vary with implementation.","The architecture described in  is a highly optimized, distributed, fault tolerant, collaborative architecture. The primary purpose of this architecture is to support a high volume of searches, which may be performed for example, through the Internet. In this particular embodiment, the databases may include business information, such as for specific businesses or classifications of businesses. Additionally, data queries may be performed based on characteristics of the various businesses, such as location, name, or category. Furthermore, the architecture described herein supports a flexible presentation of these businesses, based on business agreements and service offerings. The architecture described herein uses various techniques and combinations to achieve high performance while maintaining flexibility and scaleability.","The architecture as depicted in  includes a set of fully redundant server nodes in which each node is capable of responding to any search request. Each server node communicates with all the other nodes, as previously described, establishing the health and availability of each server node. Incoming requests are classified by each node, as routed by the hardware router, using a classification scheme held in common and by consensus. The nodes agree to a disjoint partitioning of requests to each of the server nodes in which one server node will service a set of classes of requests that no other node will generally service. A number of complimentary techniques, including Subsumption and Highly Redundant Caching, may be then used to adapt a particular node to a particular class of requests. Thus, the latency for request servicing by that node decreases as additional user queries are performed for each particular class of requests.","Adaptive techniques, as those performed by the Front End Server , may be most effective when dealing with repeated requests or queries similar to those previously performed. Based on the adaptive techniques used herein, an initial search request may be the most costly in terms of system resources and search time. Therefore, other techniques are used in conjunction with the adaptive techniques to further facilitate performing an optimal query in response to a user request. For example, common term optimization (CTO) is one technique which is used that generally takes advantage of a statistical bias in both submitted queries and result sets towards particular words or combinations of words. By anticipating particular word combinations or precalculated result lists that match, the CTO matches the initiating search problem.","In the embodiment described herein, the Front End Server  has a data set domain which includes electronic yellow pages and advertising requiring a high degree of flexibility in the presentation of data. Data is generally presented using the look and feel of business partners in each business listing which may have distinct requirements for presentation. Additionally, new modes of data presentation may be defined on a monthly basis requiring updates to large numbers of data stored in the back office component in the primary and secondary database. To support flexibility, the architecture described uses several techniques that also support performance requirements of the particular data domain in this embodiment and application. Generally, techniques such as the generic object and the generic presentation language may be used to facilitate rapid introduction of new services and additional presentation data in a variety of forms to a user.","Additionally, in the embodiment described in , each server may be fully redundant, and there are two additional servers that are designated database servers which have additional supporting software and hardware for facilitating database access. Other embodiments of the invention may include additional configurations of servers and databases in their particular implementation.","While including concepts and techniques described herein, for example, the different databases and packages commercially available which may be used, as known to those skilled in the art, vary with the type of data access using searches to be performed. In this particular embodiment, a relational database structure is used to store and retrieve information in the Front End Server . Other embodiments may include additional types of database storage using other commercially available packages or specialized software which facilitate each particular application.","[Generic Objects]","The PHTML files  that are provided to the parse driver  are scripts that direct the parse driver  to perform queries, view the results of queries, and provide information to the browser . In a preferred embodiment, the PHTML files  are expanded into the PHTML execution trees  the first time the parser  accesses the PHTML files . The parse driver  accesses the PHTML execution trees  during operation in a manner described in more detail below.","The scripts that are stored in the PHTML files  may include commands that are interpreted by the parse driver , C++ objects that are executed, blocks of HTML code that are provided by the parse driver  to the browser , and any other appropriate data and\/or executable statements. The PHTML scripts perform operations of objects in a way that is somewhat independent of specific attributes of the objects and thus, as described in more detail below, provide a generic mechanism for displaying and presenting many types of objects. The PHTML scripts include conventional commands to include other files (such as other PHTML files), conditional files\/text inclusion commands, switch statements, loop statements, variable assignments, random number generation, string operations, commands to sort and iterate on attributes\/fields of an object according to aspects thereof, such as the name, and logging values to files. The specific syntax used for the PHTML scripting commands is implementation-dependant but includes conventional key words (such as \u201cif\u201d and \u201cthen\u201d) and conventional arrangements of parts of the various types of statements. As described in more detail below, the scripts provided in the PHTML files  are used to construct the PHTML execution trees  that control the operation of the parse driver .","Each business listing may be represented as a document stored in the primary and secondary databases , . The documents may be manipulated as generic objects. As discussed in more detail below, representing each business listing as a generic object facilitates subsequent handling of the business listings.","Referring to , a table  illustrates data storage for a plurality of denormalized objects in the databases , . The differences between normalized and denormalized data is discussed in more detail elsewhere herein. The denormalized data format is optimized for fast performance while, perhaps, foregoing some storage compaction.","A plurality of rows , ,  represent a plurality of denormalized generic objects, each of which corresponds to a business listing. A plurality of columns , , ,  represent various attributes of the denormalized objects. In a preferred embodiment, the first attribute , corresponds to an identifier for the objects ,, and thus identifies a particular listing. Each of the attributes contains a number of fields and contains descriptor information identifying the type, size, and number of fields.","Attributes may be added to the normalized objects, or only to a specific subset thereof. A denormalized representation of any one of the objects , ,  contains the same number of attributes as any of the other one of the objects , , . This allows the denormalized objects to be transferred from the primary or secondary databases to the data manager  in a string format wherein each object can be identified. Accordingly, if values for a new attribute are added to only a subset of the objects, then the other objects, outside the subset, will contain a null value or some other conventional marker indicating that the particular attribute is not defined (or contains no data) for the objects in question. For example, assume that a new attribute  is added. Further assume that the new attribute  only contains values for the object , but is not defined for the objects , . In that case, data space for the attribute  is still added to the denormalized version of the objects , , but no value is provided in the attribute  for the objects , .","Referring to , a table  represents data stored in the generic object dictionary  corresponding to results of a search query provided by the query engine  or from the data query cache  in the case of a previous search having been performed. In the table , it is assumed that a search returns a plurality of objects corresponding to n categories and up to m listings for each of the categories. The annotation omeans the object corresponding to the jth category and the kth listing. In the case of the table  (and thus the generic object dictionary ), the objects may be object identifiers. For example, the field  may correspond to an object identifier of each of the objects , , . As discussed in more detail below, the parse driver  uses the table  provided by the generic object dictionary  along with the PHTML execution trees , to provide specific HTML code from the parse driver  to the browser  of the user .","Referring to , a diagram illustrates a portion  of the PHTML execution trees . The portion  is constructed using the scripts in the PHTML files  and consists of a plurality of nodes corresponding to the decision points set forth in the PHTML scripts and a plurality of C++ objects and HTML pages that are executed and\/or passed to the browser in response to reaching a node corresponding thereto. Thus, for example, a node  can correspond to a PHTML if-then-else statement having two possible outcomes wherein one branch from the node  corresponds to one outcome (i.e., the conditional statement evaluates to true) and another branch from the node  corresponds to another outcome (i.e., the conditional statement evaluates to false). Such a structure may be implemented in a conventional manner given a scripting language such as that described above in connection with the PHTML language. That is, implementing such a tree structure using a scripting language is straightforward to one of ordinary skill in the art using conventional techniques in a straightforward manner.","Representing the documents (business listings) of the databases ,  as generic objects facilitates modifying the documents, or a subset thereof, without modifying the parser . For example, if an attribute is added to some of the objects, then it is only necessary to modify the objects (schema and data) that will contain that attribute and to also modify the PHTML files  to include new scripting to handle that new attribute. The scripting may include statements to determine if the particular attribute exists for each object. For example, suppose the business listings were in black and white and then color was added to some of the listings. The color attribute could be added to some, but not all, of the objects only in normalized form. Once the new color attribute has been added, the denormalized versions of all of the objects would contain a data space for the attribute, but the objects that do not possess a color attribute will have a null marker. The PHTML files  can be modified to test if the color attribute is available in a particular object (e.g., to test for a null value) and to perform particular operations (such as displaying the color) if the attribute exists or, if the attribute does not exist for a particular object, displaying the object in black and white. In this way, the color attribute is added to some of the objects without modifying the parser  and without modifying existing objects that do not contain the attribute.","For each query that is presented to the query engine , the query engine  determines whether the query is found in the data query cache  or whether it is necessary to perform a query operation using the Verity software (discussed elsewhere herein) and the term list . In either instance, the results of the query are provided by the query engine  to the generic object dictionary  in a form set forth above in connection with the description of . The parse driver  and PHTML execution trees  then operate on the generic object dictionary  to determine what data is displayed to the user by the browser . In some instances, the PHTML execution trees  may require the parse driver  to obtain additional data from the databases ,  through the data manager . For example, in instances where the categories corresponding to the retrieved documents (business listings) are displayed, the PHTML execution trees  may cause the parse driver  to obtain information from the generic object dictionary  that identifies each category and the number of listing corresponding to each category. Then, the portion of the PHTML execution trees  may cause the parse driver  to use the data manager  to access additional information from the databases , , such as the names of the categories corresponding to the category identifiers provided in the generic object dictionary .","Referring to , the parse driver  is shown in more detail. An instantiator  creates the PHTML files  and constructs the PHTML execution trees  from the PHTML scripts the first time the PHTML is invoked by the parse driver . Instantiation includes reading the PHTML files and constructing trees, such as that shown in , based on the PHTML scripts provided in the PHTML files . As discussed above, constructing such trees from a scripting language is generally known in the art.","An interpreter  accesses the PHTML execution trees  and, based on the information provided therein, provides HTML data to the browser  and\/or executes a C++ object. The interpreter  also accesses a configuration file  and a state file  which keeps track of the state of various values during traversal of the PHTML execution trees . The interpreter  also receives other data that is used to traverse the PHTML execution trees  and to provide information to the browser . The other data may include, for example, data from the data manager  and data from the generic object dictionary . The state data  includes information such as the number of iterations (in the case of an iterative loop), the values of various environment and other variables from the PHTML execution trees , and the values of other variables and data necessary for performing the operations set forth in the PHTML execution trees .","The technique disclosed herein relates to a new data type which abstracts the data interpretation from the data typing by using data schemas. A novel approach is the use of this data typing for rapid service deployment in search engines for advertising services on the Internet. For example, new presentation types may be introduced by an advertiser due to the large number of possible ways to present data to a user. An advertiser may wish to change the information displayed when a user performs a query that results in displaying information regarding the advertiser's business. If there are tens of thousands of advertisers which perform this task on a monthly basis, this implies a very high rate of new presentation types which an online advertising service must be able to accommodate. Use of this generic data type in GTE Superpages\u2122 provides a flexible and efficient approach to incorporate these additional and new presentation types for large numbers of advertisers.","Generally, this technique provides for rapid integration of new data types without requiring recompilation or code changes in source code which uses instances of data that include the additional data types. This provides for the flexible and efficient introduction of data changes.","The generic data typing is optimized for performing multiple data operations by providing a small subset of possible operations or accesses upon any data of the generic data type. Therefore, these small subset of operations which are known may be optimized wherever there is a data access, for example, within the parser. This is in contrast to a non-generic data typing scheme which requires the introduction of a new data type and additional associated access patterns. In a non-generic data typing scheme there is an unlimited and unknown number of access patterns for which optimizations must be performed on an ad-hoc basis as new data types are introduced. Thus, when a new data type is introduced, the possible accesses need to be analyzed and optimized. In addition, the technique described herein provides for denormalized, flat, representations of the objects that facilitate rapid and efficient handling thereof.","The parse driver  uses a data schema description to interpret the various data attributes and fields of the generic data objects. Generally, the abstraction of the data interpretation into the data schema description enables different components of the parse driver to operate upon and use generic data objects without having these components require code changes or recompilation due to the introduction of new presentation types. Components which need to know the details of the generic data object, such as the parse driver , to perform certain functions, do this on a per component basis by using the data schema description to interpret a generic data object. This insulates code from the introduction of new presentation types which are represented as the generic data objects.","[Query Cache and Request Allocation]","When performing the routing of particular requests, such as data queries, existing systems may perform request routing to a particular server in a distributed computer system without reference to certain available factors, such as an initial partitioning of the entire domain, or an assumption that data queries will be cached in a data query cache and subsequently reused for additional searches. Generally, using the concepts which will be described in paragraphs that follow, the larger the number of queries that are performed when routed to a particular node in accordance with an initial allocation scheme, the quicker subsequent searches on this same particular node may be performed due to the use of the data query cache.","This embodiment relates to concepts that may be included in a variety of applications. One embodiment that includes these is the GTE Super Pages on-line Internet tool that may be used to perform data queries. As an example, consider using this tool to perform an on-line query of all French restaurants within thirty (30) miles of Boston. Generally, GTE Super Pages performs this query returning search results to an on-line user. Concepts which will be described in paragraphs that follow may be generally used and adapted for use in querying any search domain.","A worker thread classifies a request and performs query partitioning in accordance with the URL information. For example, this may include data from the query request such as a specified state, zip code, or area code. The request router  receives an incoming request as forwarded by the hardware router. Within the request router ,  is generally machine-executable code which embodies the concepts of an adaptive and partitioning scheme with regard to routing requests. Use of this technique allows for high performance search optimizations that leverage and ensure server node adaption to a particular class of requests. The technique of adaptive query partitioning generally increases the performance in terms of high throughput and low latency where queries include Boolean search terms. This search optimization technique may include three components: query partitioning, highly redundant caching, and subsumption.","Query partitioning is the strict classification and routing of a particular query based on its input term characteristics to a node or a particular set of nodes. This information is stored in the various configuration and load files, as described in other sections of this application. Query partitioning ensures that any adaption a node undergoes based on the characteristics of queries that it processes is maintained. Specific nodes may serve specific query partitions. Caching and result set manipulation techniques may then be used on each particular node to bias each particular node to the query partition to which it has been assigned.","Highly redundant caching is generally a technique that trades storage space against time by storing result sets along with subsets of these result sets. The highly redundant caching technique generally relies on the fact that the search time to locate an existing result is generally less than that amount of time which would result in creating the query result from a much larger search space.","One highly effective set manipulation technique, referred to as subsumption, is especially important in the adaption of a particular node. Subsumption is generally the derivation of query results from previous results, which can be either a superset of the requested result or subsets of the requested result. Subsumption is also the recognition of the relationship between queries and the determination of the shorted derivation path to a result set. That derivation may be the composition of several subsets resulting in a superset, or the extraction of a subset from a recognized result set. In subsumption, the presence of an additional conjunctive (\u201cand\u201d) search term corresponds to the formation of a subset from the superset described without the additional term. The presence of an additional disjunctive (\u201cor\u201d) search term corresponds to the identification and composition of existing subsets each described by one of the disjunctive clauses.","Consider the following example of the use of the data query cache and subsequent searches which use a subset of the data stored in the cache. For example, suppose the first request results in a query of all of the restaurants within thirty (30) miles of Boston. This query data is placed in the data query cache. A second request results in a query of all the seafood restaurants within thirty (30) miles of Boston. The second request is routed to the same node as the first request in accordance with loading configuration files, for example, as shown on . The second query is performed quickly by using the data query cache information and searching for a subset of the cached data indicating restaurants within thirty (30) miles of Boston for a subset of this first search data which indicates seafood restaurants. Subsequently, this second request query data which indicated all the seafood restaurants within thirty (30) miles of Boston is also stored as a separate data set within the data query cache.","It should generally be noted that the data included in the data query cache is placed in nonvolatile storage such that if the node were to become unavailable, data from the data cache may be fully restored once the node resumes service.","The composition query also uses the data in the data query cache. A composition query may generally be referred to as one which is a composition of several queries, for example, when using several conjunctive search terms. For example, a request of all the French restaurants in Massachusetts, Texas and California is a composition query that may reuse any existing cached data from previous queries stored individually regarding restaurants in Massachusetts, Texas and California. A composition query is generally determined by the Parse Driver, and the request router decides to which server node - within the Front End Server the composition query is sent for processing in accordance with domain weights of the configuration file.","Consider the following Configuration File information based upon the previous composition query:",{"@attributes":{"id":"p-0194","num":"0193"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["DOMAIN","SERVER","DOMAIN WEIGHT"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MA","1","1000"]},{"entry":["TX","1","2000"]},{"entry":["CA","2","4000"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In the above caching scheme, a particular domain is associated with a particular server node upon which data query caching is performed for designated domains. The domain and server weights reflect the cost associated with processing a request on each node using the data query cache. Accordingly, routing a request in accordance with these weights results in faster subsequent query times for those requests.","Reallocation of the requests when a server is unavailable is performed with a bias toward the initial allocation scheme as indicated by the Configuration File. There is an assumption that reallocation is on a transient basis and that the initial allocation scheme is the one to be maintained. Consider the following server nodes (M1-M4) and the domains initially allocated to each node as indicated below:","Domains D1 and D2 allocated to node M1.","Domains D3 and D4 allocated to node M2.","Domains D5 and D6 allocated to node M3.","Domains D7 and D8 allocated to node M4.","At a first time, node M1 becomes unavailable and the routers reallocate Domain D1 to node M2 and D2 to node M3. At a second time, node M2 also becomes unavailable. Domains D1 and D3 are reallocated to node M3 in addition to domains D5 and D6. Domain D4 is reallocated to node M4 in addition to domains D7 and D8. At a third time, node M1 is restored and node M2 is still unavailable. Domains D1 and D2 are reallocated to M1 in addition to Domain D3. Domains D5, D6 and D4 are allocated to node M3. Domains D7 and D8 are allocated to node M4. There is a bias toward restoring the initial allocation scheme when a node becomes available. This bias contributes to faster subsequent query times upon re-entry of a server node due to the use of the data query cache, and routing of subsequent requests to the particular nodes in accordance with this bias.","In paragraphs that follow, described are data query caching techniques as may be used in conjunction with the foregoing described request routing techniques.","Referring now to , shown is an example embodiment of a flowchart of method steps for performing a data query. At step , a determination is made as to whether a data set in the data query cache corresponds to the current query being made. If so, control proceeds to step  where this data is retrieved and used by the query engine in formulating the query results that are displayed to the user. At this point, the processing stops at step .","If a determination is made at step  that no data set in the data query cache corresponds to the current query being made, control proceeds to step  where parents of the data query are determined. In this embodiment, parents of the current query are determined by dropping one of the terms. For example, if the query being made is for \u201cMA AND RESTAURANTS AND FLOWERSHOPS\u201d, each of the three terms is sequentially dropped to form all combinations of two possible terms. In this instance, the set of parents is the following:\n\n","At step , a determination is made as to whether data results in the data query cache correspond to any of the parent terms. If not, control proceeds to step  where a closest ancestor may be used as a basis for starting to form the resulting data set. In one embodiment, preprocessing insures that ancestor-based geography exists. In one implementation, that ancestor is a Verity term list associated with a particular state. This implementation uses API calls to retrieve the data identifiers corresponding to the resulting data to be included in the query results.","If, at step , it is determined that there are one or more data sets in the data query cache that correspond to one or more of the parent terms, control proceeds to step  where a cost is associated with each parent. One embodiment associates a cost with each parent term in accordance with the number of listings of each parent term. This may also be normalized and used in a percentage form by dividing the number of listings in the parent domain by the total number of listings in the query domain. This percentage represents the probability of a business listing belonging to the parent data set appearing in the database. Control proceeds to step  where the parent with the minimum cost is chosen as the starting data set for formulating the data results. At step , the minimum cost derivation sequence is applied to produce the resulting data query. Generally, the minimum cost derivation sequence is obtained by operating upon the least probability terms first.","It should generally be noted that in other embodiments in which other extended parentage thresholds are used, such as grandparents, the determination of the start data set in step  may be the data set with is closest in terms of parentage and with the least number of listings in the data set. The proximity in parentage is the primary ranking basis and the number of listings being secondary in determining ranking.","Referring now to , shown is a diagram of one example used in step  for determining and applying the best derivation sequence. In this example, the query is for MA AND RESTAURANTS AND FLOWERSHOPS. As represented in state , it has been determined that MA is the starting data set which is located in the data query cache. In this example, the parentage has been extended to grandparents, and MA has been determined to be the first ranking data set in terms of parentage and number of listings in the data set. At this point, control proceeds to one of two states,  representing \u201cMA AND RESTAURANTS\u201d, or  representing \u201cMA AND FLOWERSHOPS\u201d. The state to which control is advanced depends generally on choosing the path with the minimum associated cost at each step. In this instance, the number of elements in the data sets \u201cFLOWERSHOPS\u201d (state ) and \u201cRESTAURANTS\u201d (state ) may be considered in determining cost. If the number of elements in FLOWERSHOPS is less than the number of elements in the data set RESTAURANTS, control proceeds to state  where each business listing in the data set FLOWERSHOP is examined to determine if it is also in MA. The resulting data set forms the set of all business listings in MA AND FLOWERSHOPS. In contrast, if the number of elements in the data set RESTAURANTS is less than FLOWERSHOPS, state  is entered and similar searching of the data set is performed. From either state  or , control proceeds to state  where searching of the data set elements is performed to produce the final resulting data set representing \u201cMA AND RESTAURANTS AND FLOWERSHOPS\u201d. Generally, the approach just described is to advance to the next state which has the minimum cost associated until the final resulting data set is determined.","It should also be noted that some of the determination of data sets as used in performing queries may be done as preprocessing to partition the data sets. For example, in one embodiment, the data is partitioned by states. The adaptive techniques as described with regard to the GTE Superpages application described herein include partitioning the data sets based on geography, particularly within each state. In this instance, particular server nodes are designated as primary query servers based on geographic location by state. Additionally, as part of this partitioning of requests, the data query caches and term lists of identifiers are also partitioned according to state. In this embodiment, this partitioning is done as a preprocessing step prior to servicing a request in that the identifiers are formed and placed on each dedicated server node. Similarly, other data partitioning may also be performed as part of a preprocessing step. Generally, this partitioning may be determined based on expected data queries and data sets formed accordingly, for example, by examining log files with recorded data query search histories to determine frequently searched categories or combinations of categories.","A query request, as made by a user, is generally the combination of boolean operators and search terms. In this embodiment, the general form of a term in a query request is:","key=value","in which the \u201ckey\u201d represents some category or search term, such as STATE. \u201cValue\u201d represents the value which this key has in this particular query. With regard to the previous example, \u201cS=MA\u201d may represent the query term STATE=MA. Key-value pairs or terms may be joined by the logical boolean AND operation, represented, for example, as \u201c&\u201d. The logical boolean OR operation may also be represented, for example, by another symbolic operator such as a \u201c,\u201d. For example, when looking for either cities of ACTON or BOSTON, this may be represented as:","T=ACTON,BOSTON","The number and types of \u201ckeys\u201d varies with embodiment. For example, in this embodiment, keys include: (T) City, (B) Business Listing, (S) State, (R) Sort Order, (LT) Latitude, (LO) Longitude, and (A) Area Code. In this application, for example, LT and LO may be used to calculate data sets relating to proximity searches, such as restaurants within thirty (30) miles of Boston.","The Data Query Cache , in this embodiment, generally includes a \u201chot\u201d and \u201ccold\u201d cache. In this embodiment, the caching technique implemented is the LRU (Least Recently Used) policy by which elements of the cache are selected for replacement in accordance with time from last use. These and other policies are generally known to those skilled in the art. Generally, the \u201chot\u201d cache may include the most recently used items and the cold cache the remaining items. In this embodiment, each of the data query caches and other caching elements as depicted in , may be fast memory access devices, as known to those skilled in the art, used generally for caching.","It should generally be noted that in this particular embodiment, the \u201chot\u201d cache is implemented as storing the data in random access memory. This may be distinguished from the storage medium associated with the \u201ccold\u201d cache representing those items which are determined, in accordance with caching policies such as the LRU, to be least likely to be accessed when compared with the items in the hot cache which are determined to be more likely to be accessed.","In this embodiment, a double ended queue structure is used to store cached objects, but other data structures known to those skilled in the art may be used in accordance with each implementation.","Data sets that are stored in the data query cache and page cache each correspond to a particular search query. In other words, a mapping technique may be used to map a particular query to corresponding data as stored in the data query cache and the page cache. Generally, this mapping uniquely maps a data query to a name referring to the data set of the data query. In this embodiment, this allows quick access of the data set associated with a particular query and quick determination if such a data set exists, for example, in the data query cache.","Referring now to , shown is a flowchart of an embodiment of the steps for forming a name associated with a data set, as may be stored in the data query cache or page cache. At step , a subset of query terms is determined such that a string representing a particular query is uniquely mapped to a name corresponding to a data set. In this embodiment, the subset of keys that are used in mapping a string corresponding to a query to a name of a data set include:\n\n","Generally, \u201cProximity\u201d represents the proximity in physical distance to\/from a geographic entity, such as a city. \u201cCity\u201d, \u201cState. Street\u201d, \u201cZip\u201d, \u201cArea Code\u2019, \u201cPhone Number\u201d, and \u201cBusiness Name\u201d represent what the keys semantically describe as pertaining to a business listing. \u201cCategory\u201d represents a classification as associated with each business, such as representing a type of business service. \u201cCategory Identifier\u201d is an integer identifier representing a category id. \u201cKeywords\u201d indicate an ordering priority for the resulting data set. \u201cNational Account\u201d represents a business or service level parent-child relationship where the national account indicates the parent. An example is a parent-child relationship between a parent corporation and its franchises.","At step , a query string corresponding to a particular user query is formed using the original string as formed, for example, by the Parser of . The query string includes only those terms which are included in the subset as identified in step . If the original string does not include an item that is in the subset, for example, since the user query does not include the item as a search term, that item is omitted in forming the query string corresponding to the data set. At step , this query string is used to determine if a data set is located in the data query cache that corresponds to the current user query request. In this embodiment, the data sets each correspond to a filename. Thus, a lookup as to whether a data set corresponding to a particular user query exists may be determined by performing a directory lookup, for example, using file system services as may be included in an operating system upon a device which serves as a fast memory access or other caching device.","It should be noted that this technique may be used generally within the Superpages Front End Server and Backoffice to form unique names that correspond to particular search terms. For example, one embodiment may include services for operating upon the original query string as formed by the Parser to produce parents and grandparents of the terms included in a query when performing the method steps of  if there is no exact data set match in the data query cache. This may provide the advantage of insulating other code, such as in data encapsulation, from knowing the internal structure of the query string. Generally, as known to those skilled in the art, this is a common programming technique to minimize code portions from changes in data types and structures to minimize, for example, the amount of recompilation when a new data type is introduced or existing data type modified. Other techniques, such as hashing, may be used to generate a unique identifier for the input string, as known to those skilled in the art.","It should be generally noted that a similar mapping technique is used in forming a Page Cache name. The technique used is as described for forming the Query Cache filename with additional qualifying terms in accordance with the \u201clook and feel\u201d, such as display features, used to produce the Page Cache name. For example, if the displayed resulting HTML page includes 15 listings\/page, the Page Cache name includes a parameter in forming the name uniquely identifying the filename including the result set for a query in this particular display format.","Generally, in this embodiment, the data query cache includes cache objects in which each cache object corresponds to a particular cached query resulting data set. Referring now to , shown is a block diagram of one embodiment of a data set as stored in the data query cache. Generally, each data set  includes header information  and information corresponding to one or more business listings. Generally, header information may include information describing the data query set, such as the number of business listings in the data set. Other types of information may be included in accordance with each particular application and implementation.","Each business listing  generally includes information that describes the business listing. More particularly, this information includes data that is cached as needed by other components in the Front End Server, for example, in performing various searches, data retrieval, and other operations upon data in accordance with functionality provided by the embodiment. In this instance, the following types of fields of information are stored for each business listing :","1) number of categories associated with this business listing","2) latitude","3) longitude","4) business name","5) city","6) state","7) list of categories associated with this business listing","8) database key or identifier used as an index into the databases","9) relevance information","10) advertiser priority","In the above fields, relevance information is Verity-specific information as it relates to the query. For example, this generally represents the frequency of words or terms in a document. The advertiser priority indicates a service level that may be used in presenting business listings, for example, in a particular order to a user. For example, if a first advertiser purchases \u201cgold\u201d level advertising services, and a second advertiser purchases \u201csilver\u201d level advertising services, when a user requests only 15 listings to be displayed, the \u201cgold\u201d level advertisements may be displayed prior to the other advertisements by other advertisers, such as the \u201csilver\u201d level service purchaser. Thus, a higher level of service may guarantee an advertisement be placed earlier in the displayed results.","The technique used to store the data in the data cache from memory includes object serialization and deserialization techniques, as known to those of ordinary skill in the art. These techniques transform an internal storage format, as may be stored in random access memory, to a format suitable for persistent storage in a file system, as in the data query cache. The complementary operation is also performed from persistent storage to the in-memory copy. For each of the above-named fields, object serialization, i.e., from memory to persistent storage device in cache, is performed by storing the data type, its length, and the data itself. It should be noted that the length may not be needed for each data field, for example, in fixed length data types. The complementary operation of object deserialization is generally performed by reading the fields in the same order as written to the cache.","In this embodiment, other caches may have other storage techniques. For example, the Page Cache may be implemented as HTML files in a file structure located on a disk or other storage device. The PHTML execution tree may be implemented as an in-memory linked list or other abstract data structure representation of the C++ objects.","It should be noted that in this particular embodiment, the data query cache may include different types of cached geographical data as may be used in performing different data queries. For example, the type of data cached described in the prior paragraphs is the \u201cnormal\u201d business listing data as associated with a well-defined geographic area. Other businesses, for example, such as a florist or an airline, may not be associated with a single well-defined geographic location. A business may not have any geographic bounds, such as if it is an Internet business with a virtual storefront accessible on the Internet. Also, other businesses may be located in a particular well-defined geographic area, such as an airline with a physical presence in a particular city, but the service area which corresponds to the service offered does not correspond to the location of the business itself. To include businesses with these particularities, in addition to the \u201cnormal\u201d business listing just described in which the geographic business location and service areas correspond, the concepts of multi-city and total-city placements have been included in this embodiment.","Generally, multi-city placement may be described as representing a business' service area in multiple cities when data queries are performed. An example may be a plumbing service located in three (3) cities with service areas in ten (10) cities. The total-city placement may generally be described as representing a business' service area in all cities when searches are performed. An airline is generally an example of this which services all major U.S. cities. Generally, in this embodiment, the total city and multi-city search results are cached separately from the \u201cnormal\u201d query results, but are composited with the normal search results prior to retrieving the data from the database.","It should generally be noted that in this embodiment, the total and multi-city query results are retrievable independent of the \u201cnormal\u201d search results. However, the storage format for this information, in this embodiment, may be as described for \u201cnormal\u201d query results. Generally, other embodiments may use a different format for storage than the \u201cnormal\u201d search results, for example, if other information is deemed to be important in accordance with each implementation.","The technique of performing the total and multi-city query search optimization in conjunction with the normal query caching will be described in paragraphs relating to  that follow.","Referring now to , shown is a flowchart of an embodiment of a method for integrating total-city and multi-city cache results into \u201cnormal\u201d cached search results. At step , a total-city cache name corresponding to the data query is formed. In one embodiment, the total city cache name is formed by starting with the string \u201cSCOPE=T\u201d to identify a total-city name. Additionally, the following information is extracted from the original query string, as formed by the parser:","category, category id, business name, street address, keywords, longitude, latitude","These key-value pairs are extracted from the original query string and appended to the \u201cSCOPE=T\u201d to form the total-city cache name. In one embodiment, these functions of extracting the information from the original query string and forming the total-city cache name may be performed by the same software as forming the name for the data query cache \u201cnormal\u201d query name, such as by API calls to the same routines with parameters, as known to those of ordinary skill in the art of programming.","At step , it is determined if the total-city query data set corresponding to the total-city cache name for the current query exists. If it does, control proceeds to step  where the total-city data set cached item is moved to the hot cache, if not all ready in the hot cache. A reference to this data set is saved for later retrieval in other processing steps. If at step , a determination is made that the total-city query cached data set corresponding to the total-city cache name does not exist, control proceeds to step  where a search is performed for the total-city query. At step , the search results are cached, as in the \u201chot\u201d cache. A reference to these search results are stored for use in later processing steps. Generally, an empty or null search results stored in cache may be just as important for performance as a non-null search results that is cached.","Control proceeds to step  of  where a multi-city cache name is constructed representing the multi-city cache corresponding to the current data query. In one embodiment, this multi-city cache name may be constructed by forming a string using the same fields extracted from the original data query string as formed by the parser in conjunction with forming the total-city name. Similar to forming the data query name for the \u201cnormal\u201d cached search results, the string corresponding to the cached data set for a given query uniquely identifies the data set. In forming the multi-city cache name, appended to the concatenated key-value pairs is a string of \u201cSCOPE=M rather than the string \u201cSCOPE=T\u201d, as with the total-city cache name.","At step , a determination is made as to whether there is multi-city cached data corresponding to the current multi-city cache name. If, at step , a determination is made that such a data set exists in the multi-city cache, control proceeds to step  where the data is moved to the \u201chot\u201d cache, if not all ready located there. Additionally, a reference to this location in the \u201chot\u201d cache is saved for use in later processing steps. If, at step , a determination is made that such a data set does not exist in the multi-city cache, control proceeds to step  where a search of the database is performed. The query results, if any, are cached in the \u201chot\u201d cache with a reference to the results saved for use in later processing steps.","At step , the total-city and multi-city data cache results are integrated with the \u201cnormal\u201d query results. After the \u201cnormal\u201d query is performed, but before sorting the search results, the total-city-cached results, if any, may be combined with the \u201cnormal\u201d query results. If there are no total-city cached results, the multi-city results may be included, if any.","The combined search results are then sorted such that any redundant listings are removed. Any additional processing is performed, as in accordance with the user query, for example, as producing the listings which begin with \u201cB\u201d, or only listing the top ranked fifteen (15) listings as ranked in accordance with other user specified criteria.","In all the caches, a garbage collection technique may be included to remove or delete cached objects that have been determined to be \u201cold\u201d in accordance with predetermined criteria. For example, in one embodiment using the LRU caching scheme, whenever the amount of free cache space falls below a threshold level, the garbage collection routine is invoked. The threshold level includes parameters relating to a predetermined number of cache objects and the accumulated size of the objects in the cache. In this embodiment, although there may be multiple conceptual caches, such as the \u201cnormal\u201d data query cache, the multi-city cache, and the total-city cache, the cached results may physically reside in the same \u201chot\u201d and \u201ccold\u201d caching devices. However, in this embodiment, the different types of caching results may be accessed independent of the other caching results. Other embodiments may have other organizations of the caches in accordance with other implementation and associated data requirements.","[Information Retrieval]","A variety of information retrieval techniques may be used to retrieve records stored in the Primary Database . Further details of the query engine  are presented in schematic format in . When the parse driver  of the parser  of one of the servers  delivers a parsed instruction to the query engine , the query engine  may, in an embodiment of the invention, include information retrieval software  to retrieve records from the Primary Database  that correspond to the user's query. The query engine  may include more than one form of information retrieval software. For example, the query engine, in addition including the information retrieval software  that is to be used to obtain listings in response to user queries, may further include banner ad retrieval software  for retrieving advertisements that relate to the user's query.","In an embodiment of the invention, the information retrieval software  may include functionality of software such as the Information Server Version 3.6 software commercially available from a company known as Verity. Other commercial packages of information retrieval software are available, and the techniques described herein could also be employed using proprietary software coded by the user. In an embodiment, the information retrieval software  includes the Information Server Version 3.6 software and additional extensions provided by the host of the GTE Superpages system.","Referring to , steps by which the information retrieval software  obtains results are set forth in a flow chart . The information retrieval software  may at a step  access markup language files , as depicted in , which are produced by the extraction routines  from the normalized data . In an embodiment, the markup language files consist of business listings that are stored in the Primary Database . The information retrieval software  may then, at a step  produce term lists  that are further used by the information retrieval software  to handle queries that are delivered to the query engine . The term lists  may consist of a linked list for each term that appears in one of the business listings, with the elements of the linked list including a document identifier for the business listing and certain statistics regarding the frequency of occurrence of the particular term in each document and in the document set as a whole. The banner ad retrieval software  may similarly generate and use banner ad term lists  that are further used by the banner ad retrieval software  to handle generation of appropriate banner ads. Next, at a step , the term lists, which in an embodiment are generated using Verity software, may be expanded at a step  to include synonyms for the terms appearing in the business listing. For example, if the term \u201cdiner\u201d appears in a business listing, then the term \u201crestaurant\u201d might be assigned to the file for that business listing as stored in the Primary Database . The expansion of the listings to include synonyms of the words included in the listings may be accomplished by execution of PHTML scripts or other programming techniques. The expansion may establish a hierarchical structure; for example, the term \u201crestaurant\u201d may be stored in a tree that includes the sub-category of \u201cethnic restaurant,\u201d which may further include the sub-category \u201cgreek restaurant.\u201d PHTML scripts may be provided to establish the tree structure and to operate on the tree structure to retrieve results that will be provided to the user. The steps ,  and  may be accomplished at initialization of the system, thus establishing and expanding the term lists ,  for later use.","Once the system is initialized, the system may operate to obtain results that are to be displayed to the user. The steps for obtaining results may be seen in a flow chart  displayed in . Referring to , the parse driver  may at a step  parse a user query and deliver the parsed query in suitable form for handling by the query engine . The query engine may include the information retrieval software . At a step , the query engine  may operate the information retrieval software  to take the parsed user request and expand the query, turning the user request into a detailed query. Next, at a step , the information retrieval software may operate on the expanded term lists  by identifying documents associated with the terms identified in the expanded query. In an embodiment, the term lists  are the business listings described in connection with steps ,  and  above, expanded to include synonyms and terms that are determined to be related to the words in the business listing. Identification of documents may be accomplished by a variety of information retrieval techniques. Documents may also be associated with queries by sorted relevancy ranking, clustering (automated grouping of related documents), automated document, summarization (creation of content abstracts, not simply the first few sentences of the document) and query-by-example (turning an individual document into a query in order to retrieve \u201cmore documents like this\u201d). These functions may be accomplished by software techniques, such as having a table of pointers having as an argument a tokenized version of each possible term from the expanded user query from the step . The table of pointers may point to the location of a term list  for each such term. The term list may be a linked list of documents that include the term. The linked list may include information about each document, such as the number of occurrences of the term in the document, the inverse frequency of the term in the entire set of documents, the association of the document with other documents, the association of the document with categories, and the like.","A variety of different techniques can be used to index documents for information retrieval. In embodiment, an indexing architecture such as that provided by Verity allows for incremental indexing, so that only new, updated or deleted documents require changes, avoiding the need for a complete re-index each time a document changes. Online identifiers may be provided, so that searches can continue while the identifiers are modified. This function is also provided by the Verity software.","At a step  a variety of weighting algorithms can be used to rank documents identified in the step  according to the information stored in the term lists . For example, a simple weighting algorithm might take a single term query, such as a category of information, and rank each document in a term list  in numerical order according to the product of the term frequency (the number of times a term appears in the document) and the inverse document frequency (the inverse of the number of times the term appears in the entire document set).","Once the documents are ranked, at a step  a list of the ranked documents may be further processed by the information retrieval software to provide a results page. In particular, at the step , the information retrieval software  may determine categories into which the retrieved documents fall. In an embodiment, the categories are yellow pages categories, which have been previously assigned to the documents, which are business listings, prior to entry of the business listings in the Primary Database . Thus, at the step , the information retrieval software  determines what categories are associated with the business listings retrieved by the ranking at the step . Next, at a step , the information retrieval software  may compare the categories identified at the step  to the terms in the user query. If categories are present that do not include any of the terms in the user query, then, at a step , such categories may be discarded. Thus, the user will not retrieve categories that are unrelated to the user query. Such categories might otherwise appear, for example, if the information retrieval software  retrieves a business listing that is associated with two unrelated categories, only one of which is relevant to the user query. For example, a query for a restaurant might retrieve a listing for \u201cJoe's restaurant and bowling alley.\u201d The information retrieval software  might then retrieve the categories \u201crestaurants\u201d and \u201cbowling\u201d that would have been associated with that listing. The \u201cbowling\u201d category would be discarded, because the user query for a restaurant is unrelated to the \u201cbowling\u201d category. The term comparison may use an expanded version of the terms in the query and in the categories. Thus, a category would not be discarded if it includes a synonym of a query term, even if the category does not include an exact term match.","Once the non-matching categories are discarded at the step , the information retrieval software may, at a step , determine whether there are any remaining categories. If not, then control proceeds to a step , at which the user is informed that there are no matching categories. The user may then be returned to the query screen. If, at the step , at least one category remains, then, at a step , the information retrieval software determines whether there is more than one category. If not, then at a step  the system may display the actual business listings that appear in that one category to the user. If at the step  it is determined that more than one category remains, then at a step  the system may display a results page that consists of a list of the remaining categories. The results page may further include an indication of the number of listings that are associated with each category.","The document identifiers established for information retrieval software  may maintain pointers to other documents or to sources of the documents, such as URLs or file names. Thus, the identifiers may be stored apart from the documents allowing separate, non-invasive use of the identifiers, while maintaining the integrity of the data.","[Common Term Optimization (CTO)]","In an embodiment of the information retrieval system disclosed herein, common terms may be identified in order to optimize the retrieval of information in cases where user queries employ such terms.","A series of steps may be performed as pre-processing operations in order to classify and establish query result sets for common queries. Referring to a flow chart  in , at a step  common terms may be identified prior to system initialization. Designation of common terms may be performed based on a number of different factors. For example, a single word might in theory be designated a common term, if it appears with a high frequency in result sets obtained by users. It is noted that a single word common term may offer relatively little benefit in search efficiency, because the term lists  already permit searching based on individual terms. Alternatively, common terms might consist of multiple word combinations of any length, whether bi-grams, tri-grams, or n-grams. Thus, words that co-occur in high frequency can be designated as common terms, such as in a bi-gram format. For example, the bi-gram \u201cBoston-restaurant\u201d might be designated a common term.","Next, at a step , terms may be linked to specific contexts; that is, terms may be designated or classified as common terms in part according to their context. For example, the term \u201cBoston,\u201d might be considered a common term if entered in the \u201ccity\u201d field, but it might not be considered a common term if entered in a \u201cbusiness name\u201d field or a \u201ccategory\u201d field. Similarly, the term \u201crestaurant\u201d might be a common term in the \u201ccategory\u201d field, but would not be considered a common term in the \u201ccity\u201d field. Thus, at the step , the common term sets may be structured to reflect context. Thus, the bi-gram \u201cBoston\u2014Restaurant\u201d might be stored as an expanded form that reflects both the term and the context in which it is to be treated as a common term, for example \u201cCity=Boston; Category=Restaurant.\u201d","Referring to , it may be desirable to expand, at a step , the terms that are to be designated as common terms. Thus, each term might be expanded to include both synonyms for the term and other terms that are semantically related to the common term in the established context for the term. For example, the common term \u201ccategory=restaurant\u201d might be expanded to cover results in which synonyms for restaurant are included in the results, such as \u201cdiner,\u201d \u201cbar and grill,\u201d \u201ceatery\u201d and the like. Similarly, a city term might be expanded to include suburbs or neighborhoods; thus, the term \u201cCity=New York\u201d would be expanded to include \u201cCity=Brooklyn,\u201d \u201cCity=Queens,\u201d and \u201cCity=Manhattan.\u201d Note that the synonyms for a given term might be different depending on the context. For example, the term \u201cDorchester\u201d might be a related term for \u201cCity=Boston,\u201d but it might not be a related term for \u201cbusiness name=Boston.\u201d","The pre-processing steps ,  and  might be accomplished in a different order, and other steps might be included in embodiments of the invention. Once common terms are identified, linked to contexts, and expanded at the pre-processing steps ,  and , it is possible to establish lists or identifiers at a step  that include the expanded common term n-grams. One way of dealing with common term combinations would be to generate in advance term lists  that are predicted to be used with some frequency (e.g., restaurants, Boston, New York, etc.) and to pre-calculate the intersection of the likely combinations. This approach requires substantial processing and would have to be performed frequently, given frequent changes in the identifiers. Instead, it is possible, at the step  to create special identifiers, or term lists , that represent the expanded common terms, as linked to their contexts. Thus, a term list  might consist of a linked list of documents, such as business listings, that contain the terms \u201cBoston\u201d and \u201crestaurant,\u201d (or synonyms thereof) in the contexts in which those terms are common. The term lists  may, like other term lists  described elsewhere herein, may further include information as to the term frequency of each term, synonym or related term, and the inverse document frequency of the term, synonym or related term in all documents in the set. In an embodiment, the synonyms and related terms may be included in the actual business listings that are used to generate term lists , so that those listings will be included in the generation of common term lists. In an embodiment, the listings themselves may be classified as to common terms and synonyms or related terms of those terms. Listings may be further classified as to sub-contexts, depending on the search context. Listings using identical terms should also be included in term lists, because they use identical token identifiers for such terms. For example, the term \u201cBoston\u201d should be understood in a nationwide search to include listing in both Boston, Mass. and Boston, Ky., because the token for the term \u201cBoston\u201d will be the same in each case. Result sets must be identified as tokenwise semantically related to the classifications that are possible in a search. Results are thus classified into common term groups on a listing-by-listing basis.","At a step , the common term lists  for combined terms can be stored in a designated area of the primary database , front end server , or server node - that allows a rapid search in the event common term combinations are included in the user query. The common term lists are thus assigned to a special results area for common term searches.","The steps  and  may be performed upon initialization of the system. Thus, with the pre-processing steps ,  and  and the initialization steps  and , result sets are established for common term searches, and the result sets are stored in a special location in memory for rapid retrieval.","Next, at a step , query rules may be established that direct appropriate user queries to the special location in memory established at the step . Referring to , the user might enter a query on a template  that is displayed as a page, such as markup language page, on the user's browser . The template might include fields , such as a category field , a business name field , a city field  and a state field . When the user enters a term into one or more of the fields  and initiates a query, such as by pressing \u201center\u201d on the keyboard or clicking the appropriate screen location, the query is delivered to the parser  of the server  to which that user has been routed. The query is then used, as described above in connection with , to retrieve documents. In an embodiment of the invention, the documents that are retrieved at the step  and displayed at the step  of  are a set of matching categories for the query. For example, as depicted in , if the user enters the category \u201cart supplies,\u201d the information retrieval software  may retrieve a set of matching categories that relate to art supplies. The retrieved categories may be ordered alphabetically, by order of significance, or grouped by sub-categories. The user then may select categories among the matching categories to receive either further sub-categories or documents, such as advertisements or other markup language pages, that correspond to the categories. In an embodiment, rather than matching categories, the information retrieval software  may immediately retrieve matching documents, such as specific advertisements or other markup language pages, rather than categories of documents. This direct retrieval step may be accomplished, for example, when one of the user-entered categories is an exact match to one of the categories included in the term lists .","A similar series of steps takes place if the user enters a query for a particular location in the city field  or the state field , or for a business name in the business name field . The information retrieval software  retrieves documents from the term lists  that correspond to a ranking of an expansion of the user-entered query.","When both a category and a location or a business name, or all three, are entered by the user, then the information retrieval software  may, in a conventional manner, retrieve term lists  that correspond to each of the terms of the query, such as a list corresponding to the category \u201crestaurant\u201d and a list corresponding to the city field \u201cBoston.\u201d The information retrieval software  could then perform an intersection of the two sets and perform a ranking of the related categories (e.g., Italian restaurants in Boston, French restaurants in Boston, etc.) or related listings (for specific Boston restaurants). Because the term list  for documents containing the term \u201cBoston\u201d (including all businesses in Boston) and the term list  for documents containing the term \u201crestaurant\u201d (including all restaurants, nationwide) are both very large, the processing involved in retrieving each list and performing an intersection in order to identify matching categories or documents can be substantial. Accordingly, it is desirable to reduce the processing involved.","The information retrieval software  may be programmed with query rules at the step  to recognize when a query includes a common term n-gram, such as \u201cCity=Boston; category=restaurant.\u201d That is, whatever common terms are identified at the pre-processing steps ,  and  should be recognized by the information retrieval software , so that queries that use the common terms in the appropriate contexts (or synonyms or related terms in those contexts) are designated for special processing. In particular, the information retrieval software  may be programmed to execute the search for the user's query in the special area of memory that was established for storage of the special common term lists  at the step  of .","In one embodiment of the invention, referred to as \u201cCCC-indexing,\u201d the common terms that are selected for combined common term lists and special storage are bi-grams in the form \u201cCity=xxx; category=yyy\u201d and in which the most common categories, such as restaurants, are found in the category field and the largest cities, such as New York, Boston, and the like, are found in the city field.","[Data Integration]","Referring now to , shown is one embodiment of the database included in the Backoffice component as included in . Generally, data updates included in the database come from three different sources in this particular embodiment. One source is on-line updates, as provided by users making updates or entering new information for business listing via network connections through the Backoffice component as through the Front End Server. A second source of data updates is based on foreign source updates. Generally, foreign source updates are those update records which come from a different data source than the original existing database. A third type of data integration or update source is referred to as a native source update. Generally, a native source update is when an updated version of the existing database having the same source as the existing database is provided. For example, a database copy may be provided as an update on a monthly basis using full sets of data where a data provider provides an updated version of the same data set. The native source data integration procedure integrates those changes in the new data set into the existing database. This is in contrast to a foreign source update, for example, where the existing database is provided by one vendor, and the update records for example, are provided by a different vendor. The update vendors being from a foreign source are called foreign source data integration or updates.","It should be noted in this particular embodiment that the native source update records are provided using full sets of data. In other words, the existing database is a complete database. The native source updates are provided in the form of a complete database as opposed to only providing update records. The foreign source update records are generally records obtained from a source different from the working database and are merged into the existing database.","Shown in  is a native source update database  which is integrated into the unfiltered database . Generally, this is done by performing comparisons of the records of the native source update database  and the unfiltered database records  in determining the various types of operations that need to be performed to integrate the changes from the native source update into the unfiltered database. This will be described in more detail in paragraphs that follow. Applying data enhancement techniques to the unfiltered database, these record changes are integrated into the working database . Generally, the unfiltered database  is a complete version equivalent to the working database. However, the records included in the unfiltered database  generally include raw data which has not had the benefit of the data a enhancement techniques as applied to the working database records . The on-line update records  and the foreign source update records  are integrated directly into the working database copy . It should generally be noted that the foreign source update records  are integrated or merged into the working database records  by applying data merging techniques that will be described in more detail in paragraphs that follow.","It should also be noted that the denormalized data, as included in the Backoffice component and the Front End Server, include in this particular embodiment, three tables or components of data. Generally, the three components of data include a category file, a fact file, and a business listing file. The business listing file has been previously described in conjunction with the architecture in other sections of this description. The fact file includes information additionally provided by various advertisers or business services which are generally static in nature. For example, the fact file may contain information such as hours of operation and extra attributes such as brand names or products produced by a business. This file generally does not change with updates. The third file is a category file may include a category identifier and a corresponding heading. Generally, the category identifier is a numeric quantity or other identifier that may be used in performing queries. The heading is a textual description of the various category identifiers which may be used either for performing data queries. In the various data integration and updates, as will be described in paragraphs that follow, it should be noted that the business listing file is generally what is updated when considering the techniques which will be described. However, the category file is also updated as part of the native source update, as will also be described in paragraphs that follow.","In paragraphs that follow describe general integration techniques for the foregoing types of data updates. Each of these techniques which will be described is associated with one type of data integration. However, in other preferred embodiments, each technique may be associated with and applied to other data types.","The foreign source update will be described in paragraphs that follow. However, the concepts and techniques included herein may also be applied to different types of data updates.","Generally, in the description that follows for data entries, there is one existing record or data entry per business listing. In this particular embodiment, a business listing is the atomic unit of granularity by which updates are performed. Any information and data such a phone number, name and address associated with a particular business entity is considered to be part of one logical piece of information or record. Thus, in the descriptions that follow, updates are made with regard to the information associated with one particular business listing or entity.","The techniques which will be described regarding the foreign source update generally assume that an existing database and update records are provided, and that each originate from different or foreign sources. It should generally be noted that since the sources are different, there is no general assumption made as to particular data fields or the structure of the foreign records as compared to the existing database. It is first determined whether there is a matching entry in the existing database for an entry in the updated version of the database. If no match is found in the existing database for an entry or business listing which appears in the updated version of the database, this new entry is added and integrated into the existing database. The techniques which will be described in paragraphs that follow may be adaptable, as known to those skilled in the art, to update situations in which an implementation uses something other than two complete sets of data when performing a system update.","In this embodiment, this process of foreign source update is performed in the Backoffice component  in which the existing database to be updated is generally in normalized form. The updated version of the database may be in normalized or denormalized form. Depending on the form, additional processing steps, as known to those skilled in the art, may be needed to retrieve and update the actual files that include the data, for example, associated with a particular business entity or record. In the description below, the described technique assumes that each business listing generally includes the following data items: business name, zip code, and at least one of a primary phone number or toll-free phone number. Generally, the foreign source integration technique is based on the premise that a phone number and zip code of a business are sufficiently unique to significantly reduce the matching problem to comparisons of a few listings.","In paragraphs that follow, a determination is trying to being made as to whether entries in the update and existing database match to further determine if update records are to be added, or if existing database records are to be deleted or modified.","Generally, the matching technique described for foreign source update determines a correspondence between the foreign source update records  and the records in the existing working database . The matching technique generally includes: 1) determining which records in the existing working database match which update records; 2) if more than one record in the existing database correspond to the same record in the existing working database, determining which record in the existing database is the closest match for the update record; and 3) if the foreign source update records include duplicate records such that multiple update records correspond to the same set of one or more existing database records, collapsing the duplicate foreign source update records into a single update record that is matched to a single record in the existing database.","After determining which records in the foreign source update correspond to which records in the existing working database, operations are determined and applied to the existing working database. Generally, as will be described, transactions with respect to the existing working database are determined. Generally, an update to an existing record is performed so as not to lose any existing information while also incorporating the new additional information or updated information. For example, an existing listing includes a business name and address, and phone number, but no e-mail address. A foreign source update record includes a business name and address, e-mail address, and phone number. The information from the foreign source update record is included in the existing database in union with the fields that are blank in the update record such that the e-mail address in the existing database is not removed when the updated information from the update record is applied. It should be noted that in this embodiment, no delete operations are performed with the foreign source update data integration due to the nature of combining data originating from different sources. However, other embodiments may include delete operations in addition to update and modify operations in foreign source data integration.","Referring to , at step  a comparison is made between the phone number of an update record and the phone number field of each entry in the existing database. At step , a determination is made as to whether or not the record in the latest version of the database copy is an 800 phone number. If a determination is made at step  that the phone number of the current update entry is not an 800 number, control proceeds to step . At step , the procedure \u201cmatch phone number\u201d is performed to produce a subset of one or more entries of the existing database which match the existing phone number. Control proceeds to step  where the procedure \u201cname match\u201d is performed. Generally, \u201cname match\u201d will be described in paragraphs that follow to determine whether there is a business name match for a particular entry. Control proceeds to step  where \u201cderive score\u201d is performed based on the zip code and the name match score. Generally, the result of step  produces a score representing a statistic relative to determining whether two entries in a particular database and an updated version of the database match.","After performing step , control proceeds to step  of  where a comparison or a determination is made as to whether or not the derived score is greater than 50%. If the derived score is greater than 50%, control proceeds to step  where a determination is made whether there is only one matching entry in the database for an update record. If a determination is made at step  that there is only matching entry in the database, control proceeds to step , where a determination is made that a match has been found. Alternatively, if at step  there is more than one matching entry in the database for a record in the current updated version of the database, control proceeds to step , where a determination is made whether there is only one entry with a maximum score. If there is only one entry with a maximum score, control proceeds to step , where this maximum scoring entry in the existing database is determined to be the matching entry for the updated version. If at step  there are multiple entries with the same maximum score, control proceeds to step  where additional processing is required to determine which is the matching entry, if any.","It should generally be noted that the score threshold of 50% may be tuned and varied for each particular implementation and embodiment. This value is generally a configurable threshold value that may be defined heuristically, for example, by examining data samples.","The processing of step  is generally performed off-line. It may be done manually or in an automated fashion in accordance with the types of data in the existing database. For example, at step , having multiple entries with the same maximum score may indicate that there is an error or corruption in data. For example, in one embodiment, an alternate technique is used where if any record has the same zip code, that record is considered as being a matching record.","If at step  a determination is made that the score is less than or equal to 50%, control proceeds to step . At step , a determination is made as to whether or not the difference in the name length is less than or equal to three. If the difference in the name length field is not less than or equal to three, control proceeds to step  where a determination is made in that no matching entry exists in the database. It should be generally be noted that the decision process and the comparison process performed in steps  and  are performed for each matching entry in the subset as produced from step . It should generally be noted that the threshold length of three for the name length used in step  may be varied and tuned for each particular embodiment and implementation.","At step , if a determination is made that there is at least one entry in the existing database with a name length difference less than or equal to three, control proceeds to step , where the name edit distance heuristic may be used to compute the name distance. Generally, the name edit distance is the minimum number of insertions, deletions, and substitutions at the character level to turn one name entry or string into a second name entry or string. The number of states that string A must pass through to be transformed into String B is an entry or quantity referred to herein as the name edit distance. For example, the textbook entitled \u201cText Algorithms\u201d, by Maxime Crochemore and Wojciech Rytter generally describe a technique for the name edit distance heuristic.","At step , the name edit distance is computed, for example, using dynamic programming techniques known to those skilled in the art, such as using a finite state machine, for each matching entry as in the subset produced by step . At step , if a determination is made that there are one or more entries with a distance less than 10% of the length of the update name string, then control proceeds to step  of  where a determination is made at step  as to whether or not there is only one matching entry in the subset as derived from the Step .","Referring now to , if a determination is made at step  that there is only one matching entry, control proceeds to step , where determination is made that a matching entry has been found. If at step  a determination is made that there is more than one matching entry in the existing database for a foreign source update record, control proceeds to step , where a determination is made as to whether or not there is only one matching entry with a minimum distance. If a determination is made that there is only one matching entry with a minimum at a distance, control proceeds to step  where it is determined that an entry in the existing database with the minimum distance is considered a match to the update record in the foreign source update. If at step  a determination is made that there is more than one matching entry with a minimum distance, control proceeds to step  where additional processing may be required in accordance with the types of data included in the database. The additional processing required is generally the same types of processing that may be performed in accordance with the previously described step  of .","Referring back to , if at step  a determination is made that the phone number of the updated record is an 800 phone number, control proceeds to step  where a determination is made as to whether or not the phone number, including the area code, and the zip code match one or more entries in the existing database. At step , if there is a determination that one or more entries in the existing database match the phone number and zip code of the update record, control proceeds to step  where a subset of one or more matching entries is found. Control then proceeds to point B indicated at step  in  where execution continues.","If a determination is made at step  that the phone number and zip code do not match any entries in the existing database, a determination is made at step  that no match exists in the database for the current update record.","Referring now to , shown is a flow chart of an embodiment for the \u201cmatch phone number\u201d routine as performed at step . At step , a table is used with old and new area codes and exchanges to determine if there are one or more matching entries in the existing database which match the phone number of the current update entry. Generally, the processing step of  and the decision made at step  may be used, for example, where area codes have changed due to the increased volume of phone numbers which require additional area codes to a particular locality to be added. For example, the 508 area code may be expanded to include the 781 area code. Thus, an existing phone number may be included in the database with either the 781 or the 508 area code depending on the age of the data in the database. If a determination is made at step  that either an old area code and exchange, or a new area code and exchange match, control proceeds to step  where a subset of one or more matching entries is formed. Control proceeds to step  where control returns to the calling procedure. In this instance, control returns to step  where subsequent control proceeds to step  of .","If at step  a determination is made that there is no old or new area code and exchange in the existing database which match the current entry in the updated version of the database, control proceeds to node C of the \u201csecondary search\u201d in  at step . Generally, the processing which occurs in the steps of  attempt to find semantic equivalents of the name fields indicating a possible match. At step , the name of the update record is tokenized. At step , \u201cstop words\u201d are removed from the name field. Generally, stop words may be words which may be ignored when doing a name comparison. For example, in this particular embodiment, the words \u201cand\u201d, \u201cor\u201d, \u201cthe\u201d, \u201ca\u201d, \u201can\u201d, \u201cto\u201d, \u201cin\u201d, and \u201cat\u201d are considered \u201cstop words\u201d for which a matching entry may contain any number or combination of these and the match should still succeed. Thus, at step , these words are removed and not considered when performing a name comparison.","At step , a search of the existing database is performed on the conjunction of the tokenized name field components and the zip code. Generally, the search is being performed for entries in the existing database which match zip code and the different components of the name field. At step , a determination is made as to whether or not there are more than 5 matching entries in the existing database for the current update record. If at step  a determination is made that there are more than five matching entries in the existing database, control proceeds to step  where a determination is made that no match has been found. If at step , a determination is made that there is not more than five matching entries, control proceeds to point B in the processing which is shown in , step  where these name matching entries are used as the subset upon which subsequent processing is performed.","Referring now to , shown is a flow chart of the steps of one embodiment performing a \u201cname match\u201d as part of a routine processing as invoked from step  of . Generally, the steps of  attempt to perform and find semantic equivalents of the names of a business in this particular instance. At step , for each entry in the subset formed by step , the name entries are canonized. Generally, canonization rules are a set of transformations which occur, for example, transforming abbreviations and the like to semantic equivalents allowing for a common denominator of terms to be searched for. For example, if all entries in a database use the entire work \u201cincorporated\u201d to indicate an incorporated business, then if a name entry includes the abbreviation \u201cinc\u201d, this is expanded to the full name \u201cincorporated\u201d prior to being compared. Generally, the precise canonization rules or transformations depend upon the particular data being examined in a particular application.","Control proceeds to step  where the name field is tokenized into components. At step , a setwise contents comparison of the name components of each entry is determined against the current update entry. At step , a score is computed for each name comparison of the existing database entry with a record of the updated version of the database. The score is computed as one point per matching component. At step , control returns to step  where subsequent processing resumes with step .","Generally, the processing steps of  attempt to formulate a numeric quantity or metric for determining whether two name entries match. This weighted value or concatenation is used in further comparison in combination with other field, such as the zip code, and arriving at a final quantity in determining whether or not name fields of an existing database entry and an update record match.","Referring now to , shown as a flow chart of the steps of one embodiment for performing the routine \u201cderive score\u201d, as performed from step  of . Generally, derive score attempts to produce normalized metric or score based on the name field and the zip code. At step , the score previously derived from name match for each entry is updated by one if the zip codes of an existing database entry match an updated entry. At step  this score is normalized by taking the score computed thus far and dividing it by the number of tokens in the foreign source entry name field. It should be noted that other techniques may be used to produced a normalized score as in step . At step , control returns to the point of call. In this particular instance, control returns to step  where processing resumes with step  of .","Just described with regard to  are processing techniques for determining matching entries for foreign data. What will now be described are techniques which provide for data enhancements where the two databases or two data sources being integrated are from the same source. Generally, where there is this native source processing, there will be fewer differences between the data entries due to the fact that both data sets come from the same source. Thus, the techniques which are described in paragraphs that follow may generally be referred to as data enhancements. However, similar to the processing just described with regard to foreign source integration and processing, the concepts and processing steps which will be described may be readily adaptable to other types of data updates in accordance with other particular implementation and data sets.","The update techniques for native source assumes that two full sets of data are used\u2014the updated database version, and an unfiltered or raw version  of the existing working database. Generally, the techniques that are described below with regard to native source processing are data enhancement techniques applied to the unfiltered database  to produce the working database  of .","Referring now to , at step , the computation of the data update is performed using two complete sets of data from native sources. Generally, at step , the latest set of data received such as from a data provider is submitted into the database and compared against the set that is in the existing database. All of the records in the data set are loaded in the following form. For comparison purposes, in the steps that follow there is a distinct record ID followed by a string where the string is all the fields from the record concatenated together for comparison purposes in steps that follow. In this particular instance record I.D.s are unique against the set and indexed. As a result of processing at step , the delta or difference between the two data sets is produced. Each entry in this delta or difference is classified as an insert, delete, or update operation. A record is inserted into the existing database in which identifiers are in the new version of the data set but not in the existing database. All records which have identifiers in the existing database, but not in the new version, are slated for deletion from the existing database. Records in which identifiers are in both sets, but, however have associated strings that differ are considered update records having data contents in the string that is updated for the corresponding identifiers. At step , the update records which include inserts and update transactions are applied to the existing database. At step , certain data post processing is performed as will be described further in the paragraphs that follow.",{"@attributes":{"id":"p-0305","num":"0308"},"figref":"FIGS. 46-54"},"Referring now to , shown are more detailed steps of one embodiment of step  involving the computation of the data update as pertaining to the native source business listings previously described. At step  a comparison is made between the existing database copy with the updated database copy by comparing the record identifiers and the string concatenation which represents the remainder of the records. At step  each update record is classified as one of a matching entry, an insertion, a deletion, or an update with respect to the existing database. At step , a record is determined to be matching if the record identifier and string field in the existing and updated data base copies match.","At step , a record has been classified as one to be inserted if there is a record with a record identifier in the update database which is not in the existing database. Subsequently, at step , data enhancements are performed and the record is integrated into the working database. It should be noted that the data enhancements also performed in step  is described in more detail in paragraphs that follow.","At step , a record has been classified as one to be deleted from the existing database if there is a record with the record identifier in the existing database not in the updated database. Subsequently, at step , the data operation is performed integrating the data updates into the existing working database.","At step , a record is considered an update transaction to an existing record in the existing database if the record identifiers match, but the remainder of the record represented as a string does not match. Subsequently, at step , the longitude and latitude of a record may be updated if the address has been modified. At step , data enhancements may be performed to the record, and the data update is applied to the existing working database as well as the unfiltered database.","In the case of step  where matching entries are found, no further processing may be required for existing database or the updated database record. However, at steps , , , update records or transactions are generated to modify the existing database. It should generally be noted that any of the foregoing operations which are modifications, including updates and deletions, to the existing working database records may be conditionally performed in an embodiment of the invention. A protection or locking technique may be included in the database, for example, which prevents a deletion or modification of a particular business listing included in the database regardless of the processing classifications of .","The data enhancements, as performed at steps  and , are generally data filtering steps prior to integrating the data update into the working database . The data filtering techniques generally facilitate matching corresponding records when performing updates. Data enhancements may include, for example, upper\/lower case justification, detection of synonyms and\/or acronyms, transformation of abbreviations as may be used in business names (e.g., corp., inc.), street addresses (e.g., st., pl.), and city and state names. Other embodiments may include other enhancements in accordance with the type of data and the various applications.","Referring now to , shown is an embodiment of a method for performing update computation of step  as applied to the category file. Recall that the category file in one embodiment includes a category identifier and a corresponding header that is a text description of the associated category identifier. It should generally be noted that these updates are applied in a model similar to that of the business listing files for native source updates. The updates are first applied to a \u201craw\u201d or unfiltered version of the category file, followed by data enhancements as appropriate, an then integration of the data updates into a working copy of the category file included in the working database .","At step , the current and updated category files are compared in terms of identifiers and associated headers. At step , each update record is classified as one of several types of transactions.","At step , a record in the updated category file is considered matching if the record identifier and the associated header match an entry in the current category file.","At step , an record is inserted into the existing unfiltered database and working database if the record identifier is not in the existing unfiltered database copy of the categories.","At step , data enhancements may be performed and the resulting filtered data further integrated into the existing category file in the working database . The data enhancements, as included in steps  and , are described in more detail in paragraphs that follow.","At step , a record in the existing category file is deleted if the record identifier of an existing record is not in the updated version. At step , this deletion operation may be performed to the working copy of categories included in the working database .","At step , an update record is used to update the database copies if the record identifier of an existing an update records match, but the heading names differ. At step , data enhancements are performed and the update operation is integrated into the working copy of the categories includes in working database .","The data enhancements, as performed at steps  and , upon the category listings may include processing of the headings. For example, the processing to enhance the text of the headings may include text transformations such as: upper\/lower case justification, consolidation of abbreviations, and removal of idiosynchratic and slang terminology. The function of these data enhancements is to generally filter the data to provide more accurate determination of matching or corresponding categories.","Referring now to , shown are general post processing steps for one embodiment of expanding more detailed steps of step  of . Generally, these steps may be performed to the category file as included in the working database .","At step , new categories may be added. Generally, a data vendor may not provide an integrated version of all business categories. It may be possible to enhance some record categories as additional data is added. For example, a restaurant may be a particular type of category and there may be other subdata organized in the structure of the record indicating that there is a particular type of restaurant in accordance with the various ethnic cuisines, such as French or Italian. Post-processing as in step  may be written to search the data file in accordance with recognized structural format and add additional categories in accordance with any categories and subcategories. For example, if a determination is made that there is a large number of restaurants with a subcategory of French, a new record category may be added which is \u201cFrench restaurant\u201d. Similarly, an Italian restaurant category may be added. This is generally performed in accordance with the data organization and categories of the particular data being examined in each implementation.","At step , redundant categories as stored by business are collapsed and detected by removing the equivalent categories. Generally, at step , semantically equivalent categories are determined. Generally, this includes locating equivalent categories for which the spelling might be slightly different, or those fields which may be subsets or equivalents of other fields. For example, \u201canimal doctor\u201d may be interpreted as a semantic equivalent for \u201cvet\u201d, or \u201cveterinarian\u201d. Generally, this step may be done in an automated fashion using any programming language which is commercially available and may be used with the existing database. The technique involves dropping or not including special non-alpha-numeric characters or other words, similar to the stop words. White space may be compressed and comparison may be done on a case insensitive manner. The comparison may further be done by requiring an exact character match or with some at-a-distance technique similar to those previously described with other data processing.","At step , the duplicate categories and records may be removed from the existing version as stored in the working database .","It should be noted that in general the processing of step  where there is a collapse of redundant categories by detecting and removing equivalent categories, different rules may be used to decide which category of several duplicates identified as the one to keep. For example, maybe the longest name, the shortest name, or simply the first name.","Referring now to , shown is a flowchart of one embodiment of a method of more detailed processing steps of step  for collapsing redundant categories. At step , duplicate categories are determined. A technique for determining duplicate categories is described in paragraphs that follow in conjunction with . At step , duplicate categories in the unfiltered database may be examined as a group and one of the category names or headings is chosen to be the heading included in the collapsed category record. One technique for choosing the heading is be determining which category name is most frequently used, such as by examining the business listing files for frequency determination. At step , the business listing files, as included in the unfiltered database, may be patched with the new heading and identifier corresponding to the collapsed resulting record. At step , the category file is also updated to reflect the collapsed entry. It should be noted that these are made to the existing working database.","Referring now to , shown is a flowchart of an embodiment of method steps for detecting duplicates in the category file. Generally, these steps are more detailed processing steps of step  of . At step , a first category name in the category file of the unfiltered database is tokenized. In other words, each word included in the heading or category name is associated with a token. Similarly, in step , the next record of a category is examined and also tokenized. At step , a comparison of the two tokenized names is performed to derive a score in accordance with the number of matching name components. This may also be normalized, as described in accordance with the foreign source update processing techniques. At step , a determination is made as to whether or not the score is greater than a predetermined threshold. In this instance, the threshold is 75%. If the score is greater than the threshold, control proceeds to step  where the categories are tagged as duplicates propagating any previous matching identifier tag. In other words, the transitive matching technique is used in marking matching categories. For example, if ID1=ID2. Then, it is determined that ID2=ID5, ID5 is also marked as having ID1 as a matching identifier. Similarly, subsequent matches to ID5 further propagate the value ID1. Subsequently, control proceeds to steps  for advancement to the next record. If it is determined at step  that the score is not greater than the threshold, no match is found and control proceeds to step  where the next category is advanced to. At step , a determination is made as to whether all the categories have been processed in the category file. If they have, control proceeds to step  where processing stops. Otherwise, control proceeds to step  for further comparisons and determinations of equivalent categories.","It should generally be notes that various percentages and lengths used in the foregoing data integration techniques may be tuned or varied for each particular embodiment in accordance with, for example, the data type and record lengths. Adaptive tuning of values used in making determinations may be automated, for example, by adjusting thresholds in accordance with actual data values to filter out extreme data values.","It should also be noted that the category table or file may be used by the query engine when processing a data query. For example, the category file may be used to identify valid categories specified in a user query. It may also be used to categorize information displayed to a user. In other words, a resulting data set may be partitioned in accordance with the categories as included in business listings for the resulting query. For example, if a resulting data set includes 10 listings, these listings may be categorized or grouped in accordance with whether or not particular categories are associated with each listing. The information displayed to the user for these 10 listing may be 5 listings included in category A, and 5 listings included in category B. Thus, when the category table or file is updated, the table is propagated as part of the update data to the Front End Server and, subsequently, further to the query engine.","[Multi-Media Data Transfer]","An efficient data transfer technique is used to transfer data between databases, such as between the Backoffice component  and the Primary Database  of . In this particular embodiment, the types of data that are transferred generally relate to advertisements such as those displayed to the user  of . Generally, advertisement data includes text data and non-text data. The non-text data may be referred to as \u201cblob\u201d data which includes, for example, image and audio data, as well as machine-executable programs, JAVA bytecode, and the like. The technique, which will be described in paragraphs that follow, generally uses different data channels depending on the type of data. For example, text data is transferred from the Backoffice component to the Front End Server  using a different data channel than blob data that is also transferred between the two components. A sending component may be located within the Backoffice component  which includes software that decides the type of data, the channel used to transfer the data, and how to break up the data into portions which are transferred to a receiving component located in the Front End Server , such as the primary database . Located on the receiving component, as may be included in the Primary Database , is software which decides how to synchronize or assemble data received from the Backoffice component . In this particular embodiment, the advertisement data is generally data that is displayed in response to a user query.","Generally, the text data included in this data transfer may be characterized as structured data, as included in text which is displayed to the user. The second type of data generally transferred is denoted as \u201cblob\u201d data which is generally not able to be decomposed or operated upon in different portions. For example, blob data may include a machine-executable program which is generally binary data type. Generally, the technique uses two separate data channels in which each channel transfers a different type of data. In this particular embodiment, one data channel is used to transfer the text data, and Database Link\u2122 software, as included in the commercially available Oracle\u2122 database, is used to facilitate database communication of text data. Therefore the database routines, such as those included in the Database Link software, may be used in transferring text data between databases. In this particular embodiment, the Oracle database does not support direct non-text manipulation, such as for transferring data of different types, such as blob data. Therefore, a second different data channel is used to transfer the blob data from one database to another in which the second channel is external to the database since the version of the Oracle database software used in this embodiment does not provide the needed support for direct non-text data manipulation. The blob data, which may also generally be characterized as multi-media data, is transferred asynchronously from the text data between databases.","As will be described in paragraphs that follow, the blob data in this embodiment is copied from one database to another using a C++ program with calls to vendor-supplied library routines. This is in contrast to the text data transfer which is done by a separate data channel, and the software used performs remote database copies as if they were local. In this embodiment, the text data transfer may be performed by calls to the Oracle procedures executed under the control of the Oracle database software. Generally, the data channels used to transfer both the text and the blob or multi-media data may be network connections between the databases. Other types of connections between the databases may also be possible, such as a dedicated hard line to facilitate database communication, as known to those skilled in the art. As will be described in paragraphs that follow, data is organized and associated with a particular advertisement that may be displayed to a user.",{"@attributes":{"id":"p-0332","num":"0335"},"figref":["FIG. 59","FIG. 59"],"b":["1200","1220","1200","1220","1220","1220","1220"]},"The relational mapping table  includes two columns of data. The first column  is the record ID of the child data entity. The second column  is the record ID of the parent data entity. The data table  generally includes multiple columns depending on how many data fields are required for a particular implementation. In this particular embodiment, a record identifier  is used to uniquely identify a particular data entity in a table. Also included are data fields data-1  through data-n  in which each of these data fields includes one particular type of data entity as may be displayed to the user in response to a data query.","Referring now to , shown is a more detailed diagram of the tables as used in a data transfer on a sending and receiving side using this data transfer technique. Shown in  is an example of a relational mapping table  which includes multiple advertisement pages. In this particular embodiment, one tree-like structure is used to represent one advertisement page. As shown in , two tree structures may be produced using the data described in the relational mapping table . What will be described in paragraphs that follow is the data transfer of the advertisement page associated with the root node with the identifier  which includes identifiers ,  and  in its tree-like structure.","Referring now to , shown is the tree-like structure described by the relational mapping table  for the advertisement page with the root node identifier  shown in .","Referring back to , on the receiver side of the data transfer, shown are two tables, temporary table , and ad page table . n this particular embodiment these two tables are created on the receiver side for each advertisement transferred from the sender. In the snapshot of , the two tables of data on the receiver side depict tables after the transfer of the ad page with the root node of the identifier  and prior to the transfer of the data associated with the advertisement page with the root node beginning with the root node of identifier . Generally created on the receiver side for each advertisement page is a separate ad page table . The temporary table  is filled with data during the data transfer and after the data is properly assembled on the receiver side, the temporary table  is not used until the next data transfer operation. In this particular embodiment, the table ends in a state such that no data from the data transfer having just occurred is located in the table .","Referring now to , shown is a block diagram of the data on the sender side and the receiver side as associated with the data table  previously discussed in . In the example which will be described in paragraphs that follow involving the data transfer of identifiers -, each identifier is associated with only blob data. It should be noted that this general technique and the data included in the data table  may additionally include text data associated with each identifier or row in the table. An entry in the table  may also include only text data. As previously described in this embodiment, the limitation is that only one field entry of blob data may be associated with each row in table . On the receiving side three tables are associated with transferring data which is blob data from the data table . These three tables include a blob temporary table , a blob table , and a repository table . It should generally be noted that any text data included in table  on the sender side may be transferred using the data transfer channel. What is described in  is that portion of the data included in the data table  which is blob data. In this example, only blob data is included in the advertisement page with the root node  which will be described.","The blob temporary table  is a temporary table used in the transfer of text information associated with blobs from the sending node to the receiving node. The blob table  in this particular embodiment, is an aggregate blob table which includes the blob data for multiple advertisement pages. In other words, the snapshot of the data tables of  shows that data associated with one advertisement page with the root node identifier . After the completion of the advertisement page with the root node identifier  on the receiving side, the blob table  will also include information to retrieve the blob data associated with identifiers  through . It should be noted that the contents of the blob table  do not include the actual blob data itself. Rather, as will be noted in the description that follows, the fields included in the blob table  point to and further describe the actual blob data which is contained in the repository table . The blob table  in this embodiment includes three fields per each entry associated with a blob data entity. It includes a sending record identifier , a size , and a pointer  to the actual blob data. The sending record identifier  identifies a particular blob uniquely within a particular table or advertising page in this particular embodiment. Thus, each of the entries in the record identifier column  may not be unique for all of the advertisement pages or data. Rather, the purpose of the record identifier is to map or identify the particular blob pointer associated with a unique record identifier from the sending database. The size  indicates the size in bytes of the blob described by the blob pointer field . In other embodiments, the size field may include other units to identify the size of the particular blob data. The blob pointer field  acts as an identifier or pointer into the repository  to uniquely identify within the repository a particular piece of blob data. It should be noted that other embodiments or implementations may include additional fields in the blob table  as well as in the repository  in accordance with other pieces of data that may be required in order to enable the transfer to occur in a particular implementation.",{"@attributes":{"id":"p-0339","num":"0342"},"figref":["FIGS. 62 through 66","FIG. 63","FIG. 60","FIG. 60"],"b":["1200","1216","104","1200","1216"]},"Shown in  are the tables associated with transferring the actual data from the sending side to the receiving side. The data included in the data table  is segregated into text data and non-text data. The text data is transferred using the text channel. The non-text, multimedia data, or blob data, is transferred using an external process which creates a second multimedia data transfer channel in order to send data from the sending side to the receiving side. In this particular embodiment of the data table , the id and the size fields are copied to the blob temporary table . Additionally, a global id (Gid) is generated on the sending side prior to transmitting these fields to the receiving side. This global id is transferred to the receiving side and included in each associated entry of the temporary table . Generally, the Gid is a unique identifier associated with each record uniquely identifying the record among all tables associated with database information.","The blob data from table  and the associated information in table  are transferred to an external process  located on the sending side. In this particular embodiment, an Oracle\u2122 pipe is the communication means used to transfer the data from the data table  to the external process . The external process  further transmits the data via a multimedia data channel to the receiving side. Table  may also be viewed as a temporary table which serves as a placeholder for that data which is transferred by the external process  to the receiving side. Located in temporary table  are four pieces of information including a table name, a field name, an identifier, and a global identifier associated with each blob data entity. The table name generally describes or identifies the particular table within which a piece of blob data is located or associated. In this particular embodiment, each table is associated with a particular advertisement or advertisement name. The field name identifies the type of non-text data. In this particular embodiment the field name is \u201cBlob\u201d referring to blob or multi-media data. The identifier field (Id) of table  is the unique record identifier copied from table . The global identifier (Gid) is a unique global identifier, identical to that which is produced on the sending side prior to sending the text data to the temporary blob table . This information is passed or transferred to the external process  which copies the actual blob data to the receiving side as well as the additional information described in temporary table .","It should be noted that in this particular embodiment, the external process  is a C++ program with library calls to facilitate the transfer of data between the databases. However, it should be noted that this is an external process with regard to the database. In other words, in this particular embodiment the facilities used to transfer the data from the sending side to the receiving side are external with respect to the database. In this particular embodiment, \u201cexternal\u201d generally refers to the fact that the external process  executes outside of the Oracle process space. Certain tasks must be performed by the external process in order to transfer the data from the sending side to the receiving side. For example, the external process must connect to each of the databases in order to access and transfer the data. This is in contrast to the Database Link or text channel which is internal to the database and no such connections are implied. In other words, the routines which perform the data transfer of the text are internal to the database and data copying, for example, in this embodiment, is performed between remote databases as if they were local copies. The precise way in which both the text and blob data transfers are performed within other preferred embodiments may vary with implementation and facilities available for communication and data transfer.","It should also generally be noted that the external process may copy blob data from multiple tables in which the associated field name may differ with each table. Therefore, the field name may also be included in table . The external process uses this field name to retrieve blob data to be copied. Other embodiments may communicate this field name using other mechanisms.","The external process  uses the data included in the temporary table  to fetch or access the blob data associated with a particular table name and field name to subsequently index into each particular table name using the identifier to extract the actual blob data. This blob data is copied to the repository table  on the receiving node by process . In , the repository table  includes the blob data associated with advertisement identifier . This data is appended to already existing data in the repository .","It should generally be noted that the transfer of the text data through a first data channel and the transfer of the blob data through an alternate or second multi-media data channel are performed asynchronously. When the receiving side has determined that all of the necessary data entities associated with a particular table or advertisement have been transferred successfully to the receiving side, the process of assembling the data into the advertisement page begins. It should also generally be noted that the data described in tables  and  are functionally equivalent to the data stored in table . For example, table  includes a blob pointer field which acts as an index into the repository table , whereas table  includes the actual blob data in a field. Thus, the use of the blob pointer field in table  which acts as an index into the repository table  performs the same function as the actual data in the blob data field of the data table .","What will be described in conjunction with  is the integration process of the tables of the text and the blob data for the advertisement page identified by the sending identifier . Referring now to , shown is a block diagram of an embodiment of the tables resulting from the text data integration. In particular, table  on the sending side remains the same as in previously described figures. On the receiving side, table  data has been integrated and copied into the table . The function of temporary table  is generally to hold that text data associated with the relational mapping table which is transferred from the sending side to the receiving side until all of the data entities associated with the particular advertising page or table being transferred have arrived on the receiving side. At this point, the data integration on the receiving node begins. The software on the receiving side performs a state integration process. The previously described task of integrating the data from temporary table  into table  is one such task performed by this integration software.","Referring now to , shown is a block diagram of an embodiment of the data table  whose contents have been transferred to the receiving side. The assembling software on the receiver side integrates the data from temporary table  into table . Additionally, a link is established in table  to the data in table  and the associated global identifier removed. Each entry in table  is copied into table . In particular, the Id and Size fields are copied into table  for identifiers , , and . The integration software then uses the global Id obtained from temporary table  to index into the repository  in search for a matching global identifier entry. When a matching global identifier is found in table , the repository Id from table  is copied into the blob pointer field (Blob Ptr) of table . Subsequently, the global Id in table  for the corresponding entry is reinitialized to an empty field. The resulting table  shows this process as repeated for each entry in the previously described table  from .","Referring now to , shown are method steps of one embodiment for assembling the blob data into the repository table. The steps described in  generalize the method previously described in conjunction with  wherein the data shown in  is integrated and assembled into the tables on the receiving side resulting in those as displayed in . Generally, at step , the record identifier and table size are copied from the temporary blob table to the blob table. At step , the global identifier from the temporary blob table is used as an index into the repository table to finding a matching global identifier. For this matching entry, as in step , the repository identifier is copied from the repository table to the blob pointer field of the blob table. At step , the global identifier field of the repository table is reinitialized. The end result of performing the steps as described in , result in the tables as displayed in  representing the integrated or assembled blob table in which the blob data is integrated into the repository table  as further described by the blob table . It should generally be noted that the files resulting from the copying of the text and the blob data as described in  have a particular relationship. Generally, the sending and receiving side for the text data have mirrored files. In this particular example, table  and table  are \u201cmirror images\u201d of each other. The temporary table  is used in performing the transfer as a temporary table until all of the data for this particular data transfer has arrived on the receiving side. At that point, the data is integrated from the temporary table into the final resulting table  resulting in a table  which mirrors that on the receiving side which is on the sending side in table .","Regarding the multi-media or blob data on the sending side and the receiving side, the resulting tables  and , in combination, are functionally equivalent to the data described in the sending side in table . In this particular embodiment, one of the reasons for not further merging the data of tables  and  is due to the fact that transferring blob data, including a copy of the blob data from table  to be integrated into table , requires the use of an external program in order to compress the tables further. This is due to the fact that in order to perform any transfer of data which is not text, an external program, similar to external program , is generally used since a version of the database software, as in this embodiment, may not be capable of copying and directly manipulating non-text data as needed in performing data operations.","The tables which are described in the preceding figures and associated descriptions may have a different number of entries and fields particular to each implementation of the concepts which have been described herein. What has been described is a flexible and efficient technique for performing data transfers. In this particular embodiment, the data transfer is between two databases. The techniques described may be adapted and used within other applications and a variety of environments.","The overall technique is generally to copy the text and blob or multi-media data asynchronously on two separate channels. This data is copied from a first database to a second database. Initially, the data is located on the second database in a temporary location until all of the portions of the data associated with a particular data transfer arrive at the second database. When it has been determined that all portions of the data have successfully arrived on the second database, the assembly process of copying the data from the temporary locations and merging the information into other data tables is performed on the second database.","Generally, the foregoing technique for data transfer may be used in a variety of applications, such as for the data transfer between databases. In one embodiment, this technique is included in a system for online Interactive Yellow Pages, GTE Superpages for the publication of multimedia advertisement content of GTE Superpages business customers. Generally, the GTE Superpages system includes two major components: the server component which serves versatile user requests for the information of more than 11 million businesses in the United States and (2) the Backoffice component that facilitates advertisement content, creation management and publication. Both these subsystems include databases where advertisement business information is persistently stored. The advertisement content produced or modified in the back office is published in the Superpages by virtue of its transfer from the persistent storage in the back office to the persistent storage in the server. Generally, the business advertisement includes an integrated set of structured textual information, such as business name, address, and multimedia or blob data, such as graphics, video, audio, job applets.","The data transfer technique described is generally a technique for transferring data using two data links between two databases. One of these data links is an internal data link with respect to the database, the second data link is an external data link with respect to the database. The internal data link is optimized for the structured text data transfer while the external one is optimized for the multimedia data transfer, such as the transference of data stored in binary objects in the database. This technique for data transfer generally alleviates the limitations of the existing database technology which does not provide for the transferring of multimedia objects using the internal data link. Moreover, by using the two data links to transfer the various data types, performance and stability are improved over an alternative prior art approach which uses only the external link for transferring both text and multimedia or blob data.","Generally, the transfer technique includes four collaborative processes: a process on a sending component which decomposes data structures and the like into text and non-text components assigning transient tags to the non-text components; two asynchronous transfer processes, one per data type, that each transfer, respectively, text and non-text components to a receiving component; and a process on the receiving component that reassembles transferred data and replaces transient tags with persistent unique tags.","This technique uses a multimedia data repository cable which is created and maintained in the receiving component, such as the receiving database in this embodiment. Once the data is transferred, the non-text or multimedia data items are stored in this repository with transient tags. Using the transient tags, the reassembly process correlates the text tables with the multi-media objects and replaces them with persistent unique tags, thus leading to the reintegration of the transferred data.","The previously described technique includes features which provide for efficient decomposition and reassembly of data for efficient data transfer, as between two databases. Additionally, the multimedia repository serves as a vehicle for the reassembly of decomposed data items which are reassembled on a receiving component, such as a receiving database.","[Incremental Update]","In paragraphs that follow, a description is provided of an incremental update procedure as performed upon the various databases included in the Front End Server component . The data in the Backoffice component  may be updated, for example, on a daily basis. These deltas or changes to this database in the Backoffice component are subsequently also applied to the copy of the database in the Front End Server component. It should generally be noted that in this application, as in the GTE Superpages online system, the number of transactions or updates to a database ranges from 30,000 to a half a million on a daily basis in accordance with the required data updates for the existing database. However, the techniques which will be described in paragraphs that follow may be applied to different systems with different transaction throughput and tuned in accordance with each particular implementation.","Generally, this update technique is used to provide data updates for both native and foreign sources, and on-line updates, as described in accordance with data processing techniques in other sections of this application.","Generally, data updates to the databases included in the Front End Server may first be integrated into the Backoffice component. Subsequently, these data modifications may be \u201cpushed\u201d to the Front End Server and integrated into the various data stores included therein, as will be further described in more detail in following sections. Generally, in this embodiment, data updates may originate from several sources, including native and foreign source updates, and on-line data entry, such as through an Internet connection via a browser. The native and foreign source updates may generally be characterized as larger updates or data integration efforts. These are generally described in other sections of this application. The on-line data entry technique for updating information that may be included in the Backoffice component may be performed as previously described through the menus initially displayed to a user, such as at the GTE Superpages Internet site, that provide access to the Backoffice component data information.","The data integration techniques, as related to the foreign and native source updates to integrate the data updates into the Backoffice component, are generally more detailed and involved than the integration of the on-line specified modifications. In the former case, the data updates may generally be a large number of data modifications requiring more computer resources than in the latter case. Thus, for example, the on-line modifications may be incorporated on a daily or other predetermined time period using some data enhancement techniques as described in other sections of this application. Other data updates may require additional time and computer resources and not be able to be completed, for example during non-peak usage, such as overnight on a daily basis. Thus, additional planning and different processing techniques may be used with the various types and volume of data updates as included each embodiment.","Once the data modifications are incorporated into the Backoffice component, the data updates, including the updates to advertisement data and other data associated with each business listing, may be propagated to the Front End Server component. The non-text or multimedia data, for example, as included in advertisements with image files, may be transferred to the Front End Server from the Backoffice using multimedia transfer techniques, as generally described in other sections of this description. The updates to the Primary Database included in the Front End Server may be communicated as a table of commands created in the Backoffice component and transferred, as by a network connection, to the Front End Server. Generally, in this embodiment, the table created in the Backoffice includes an application developed command language corresponding to the various types of record updates and modifications that may be included in this particular embodiment. Each of these commands may be further translated in the Front End Server into one or more actual database commands that perform the table operation. For example, an entry in the table of database update commands may be specified as follows:","COMMAND RECORD # OPTIONAL DATA","DELETE 1-5","In this above example table, three fields of data may be included. A Command field specifies the type of data command. The Record #field identifies which records in the Primary Database this command applies. The Optional Data includes data that may be related to the specified command. For example, if the command were update, the data field may specify the data which is to be included in the records specified. In the above example, the command is to delete records 1-5. This single table command may be translated, for example, by software included in the Primary Database, into 5 database commands in accordance with the particular database software. The software which builds the table in the Backoffice and translates the commands into one or more database commands may be developed using a commercially available software system that is capable of communicating with the underlying database to perform the required operations.","It should be noted also that the entire table may be transferred from the Backoffice to the Front End Server, or it may be divided into sections and updates performed for each section. Additionally, each command may be sent as a separate message in other embodiments in accordance with the number of updates and other associated computer resources and costs for each data transaction. This may vary with implementation.","Referring to , shown is an embodiment of a dependency graph for performing the various processes in an incremental update. At step , the Backoffice data transfer must complete prior to beginning the update to the database in the Front End Server component. The Backoffice data transfers is complete when multimedia and text data has been transferred from the Backoffice component, such as data required when updating an advertisement page. Additionally, other information from the Backoffice component is transferred to the Front End Server component , such as in the form of an operational table. The operational table may include information about the updated normalized data, which has been applied to the Backoffice component, and which is now to be applied in this incremental update procedure to the Primary Database copy of the normalized data.","At step , an initialization procedure may be executed to synchronize the beginning of the update procedure for the steps that will be described in paragraphs that follow. As indicated by , steps ,, and  may be performed independently and at the same time as steps  through . The coordinating point labeled DB Prep at step  serves as the coordinating point for the different procedures performed in updating the database on the Primary Database, and the local copies of necessary files, such as the Term list identifiers, located on each of the server nodes.","At step , the various advertisements are extracted from the data tables, such as those transferred from the Backoffice component in the multimedia and text data transfer. At step , the various advertisement pages are packaged and made into a complete advertisement page to be stored in the Constructed Ad Repository . At step , the constructed ads are transferred and included in the Constructed Ad Repository. It should be noted that in this embodiment the existing copy of the Constructed Ad Repository is updated in accordance with those particular ads which have changed. Thus, the Constructed Ad Repository is updated on a delta or change basis.","Simultaneously, steps  through  may be performed in conjunction with steps  through . This may be done, for example, in a parallel fashion. Steps  through  indicate that process by which the various identifiers and other files associated with the Primary and Secondary database are updated. Steps  through  reflect the updating of the Constructed Ad Repository  on an as-needed basis in accordance with changes which have occurred in the advertisements.","At step , various changes to the Term lists identifiers are extracted. In other words, it is determined at step  what identifiers in the Term lists need to be updated in accordance with the changes transferred from the Backoffice component. This is described in more detail in paragraphs that follow. At step , these various identifier updates are packaged. At step , these various identifier changes are transferred to each of the server nodes. In this embodiment, the actual data transferred at step  are the raw operational commands as may be supplied by the Backoffice component to be applied to the existing Term lists. At step , at each node, a working copy is made of the existing Term lists. At step , on each of the server nodes, the changes are made to the working copy local to each server node. At step , the updated term list is installed. At this point, the updated term list is not yet available for public use in the sense that it is published. However, a new version of the Term lists has been created which includes the updated information as supplied in the transfer step .","At step , database preparation steps are performed. Step  serves several purposes. One is a coordination point for the updates of the various ads, as well as the various term list identifiers. Secondly, step  serves as a step within which the normalized Primary Database information is propagated from the normalized copy of the Primary Database to a denormalized form in the Primary database and the denormalized form in the Secondary Database. In other words, the changes which are transmitted from the Backoffice component and reflected in the normalized Primary Database copy are now further propagated to the denormalized Primary database and the denormalized Secondary database copy. Additionally, at step  as part of the database preparation, the validity of the transactions and updates are verified such that at step  the database knows it may fully commit to performing the update to the denormalized copies as used in performing user queries.","Steps , and , and, respectively, step  may be performed in parallel. After the database preparation of step , the ads may actually be published as in step  in which the updated copies of the Constructed Ad Repository are actually made available for use. Additionally, any updated images as stored in the Image Repository are also available for use. At step , the previously installed identifiers included in the Term lists, as installed in step , are published in step . At step , the publication of the various identifiers included in the Term lists generally means that the Term lists are available for use, as by the Query Engine. At step , which may be performed in parallel with the steps of publishing the ads and publishing the identifiers, the database commits to performing the update.","It should generally be noted that steps  through  are performed independently for each server node in this embodiment. Additionally, the actual amount of processing performed on the Term lists varies in accordance with the number of updates or transactions, as will be described in conjunction with .","Referring now to , shown is one embodiment of the various method steps for performing update steps in accordance with a particular number of update transactions as sent from the Backoffice component . At step , a determination is made as to the number of update transactions. This determination involves a comparison with two threshold values each describing a particular threshold number of transactions. Generally, THRESHOLD 1 describes a relatively small number of transactions. In this particular embodiment, a relatively small number of updates generally refers to less than 30,000 update transactions. Also specified is a THRESHOLD 2 value which generally represents a second, larger number of transactions. In this particular embodiment, THRESHOLD 2 represents approximately half a million transactions or update entries which corresponds to approximately five to ten percent of the number of records included in the Primary Database. Generally, as described in conjunction with , one of three update techniques may be applied. If the number of update transactions as determined at step  is less than the THRESHOLD 1 or a relatively small number of updates, steps  and  are executed. In step , the normalized Primary Database is updated. Generally, this is performed at step  of  in which the copy of the normalized Primary Database is updated in accordance with the operational table as transferred from the Backoffice component indicating the actual database update operations. At step , due to a relatively small number of transactions required, the actual identifiers of the Term lists are updated. In other words, the Term lists are updated as opposed to being rebuilt.","At step , if a determination is made that the number of transactions is greater than or equal to THRESHOLD 1, and also less than the greater threshold, THRESHOLD2, steps  and  are executed. At step , the Primary Database is updated, as previously described in conjunction with step  in which the normalized copy of the Primary Database is updated. At step , all of the identifiers as included in the Term lists are rebuilt. In this particular embodiment, both identifiers and markup files are rebuilt due to the use of the mark-up files by the Verity Information Retrieval software. As previously described in conjunction with FIG. , the Extraction Routines are executed to again produce the markup language files and various update records needed to update the denormalized data of the Primary Database. In step , the Information Retrieval software is executed to produce entire new sets of the Term lists. Step  is in contrast to step . Rather than rebuild the Term lists as in step , the Term lists are updated in step .","If a determination is made at step  that the number of update transactions is greater than or equal to the larger threshold, THRESHOLD 2, step  is executed. At this point, a determination has been made that the number of update transactions is so large that it has been deemed more efficient to rebuild the entire database and associated files, rather than update or patch the existing database and associated files, as in updating the identifiers of the Term lists of step .","The previously described procedure of performing a multimedia data transfer is used to transfer, for example, the multimedia and text data associated with ads, as may be included in the Constructed Ad Repository  and Image Repository  of . The granularity which indicates that an advertisement page has changed requiring the entire advertisement page to be replaced in the Constructed Ad Repository is if a single component within an ad page has changed. In this case, the entire ad page is reconstructed and replaced in the Constructed Ad Repository . For other systems, a different granularity of change may be used. Generally, as previously described, the various markup files and Term lists are built as needed in accordance with the number of transactions as described in conjunction with . The actual threshold values may be determined in accordance with tuning of a particular system and the size of the database the number of transactions in each particular system. In this particular embodiment, the database as included in both the Front End Server and the Backoffice component are Oracle\u2122 databases. The Oracle\u2122 procedural language, PL\/SQL, may be used to read the operational table and perform the updates as needed to the normalized form of the data as stored in the Primary Database included in the Front End Server component. Similarly, the same procedural language in files may also used to update the denormalized Primary Database copy and the denormalized form of the data as stored in the Secondary Database. Other embodiments may employ other techniques to update both the Primary and Secondary databases in accordance with a particular implementation.","In this particular embodiment, the previously described incremental update procedure is one that is generally used to perform daily updates. However, in other embodiments, the same procedure may be used on a larger time period of transactions or updates. Due to the volume and size of the previously described embodiment, this procedure is one which performs well when performed on a daily basis. For other systems which may perform a similar number of transactions for a larger time period, the previously described techniques may also be used.","In this particular embodiment, as may be included in the Backoffice component, the various updates to a particular record or for a particular business or service may be collapsed before actually issuing the various database commands to perform the updates. In other words, within a certain amount of time, such as within five hours, a single record may be inserted, deleted and modified dozens of times. The end result of these modifications for the small time interval may result in no net modification or amendment to a particular record. Thus, one optimization, as may be included in the Backoffice component in a preferred embodiment, may collapse various updates associated with a particular record or business before actually issuing commands which perform a database update as applied to the copies in the Backoffice  and Front End Server  components. Generally, this may be determined by using a finite state machine with the states of \u201cinsert\u201d, \u201cdelete\u201d, and \u201cmodify\u201d. If the same record, for example, is modified twice and then deleted, the net result is that only a \u201cdelete\u201d database command should be issued rather than issue two updates followed by a delete.","Also, in this particular embodiment, the contents of the Page Cache  and the Query Cache  are reinitialized when an update is performed, as in performing the incremental update procedures described in conjunction with . The data included in the PHTML execution tree is also reinitialized.","A failure may occur when performing any of the steps associated with . If a failure occurs when performing certain steps, then a recovery procedure may be performed. In this particular embodiment, a failure may occur for example, when using the Information Retrieval software, as depicted in conjunction with . This may be due, for example, to a problem, such as a software bug, with the Information Retrieval software . For example, an error may occur when extracting the identifiers associated with step . Generally, step  as previously described includes building the Term lists as determined in accordance with the number of update transactions in accordance with . If an error occurs, for example, when producing or rebuilding the identifiers in the Term lists as in performing step  and step , it may be a recoverable error if another node has successfully built the identifier files, for example. In this instance, where there has been a successful build of the various identifiers on another server node, a recovery procedure may be to copy the updated version of the Term lists from one node to another node which has been unsuccessful in the building the Term lists. This copy may occur, for example, after a predetermined number of builds of the Term lists on a particular node have failed. In this particular embodiment, this has been determined to be a recoverable error with which an alternative step or technique may be applied to also achieve the end result of the updated Term lists. Other embodiments of the invention may also include other alternative techniques in accordance with those steps associated with a particular system which it determines to be recoverable.","In the previously described embodiment, the update techniques may be included in a distributed computing system having multiple data representations as stored in a plurality of server nodes. The foregoing techniques provide for synchronized updates of the various data stores in the plurality of server nodes.","[Targeted Banner Advertisements]","User query information may be used to influence the displays shown to the user by the browser . In addition to displaying matching categories or business listings, as depicted in , the information retrieval software  can be used to assist in selecting other information to be displayed to the user, based on the nature of the user's query.","In an embodiment of the invention, a banner ad  can be displayed to the user. Based on the user's query, the banner ad  may be targeted to characteristics of the user that are inferred from the user's query. For example, an advertiser might conclude that a user who has entered a query with the category \u201cart supplies\u201d is interested in art, so that an advertisement for an art show or related matter would be an appropriate banner ad . Banner ads  can also be targeted geographically, so that ads for businesses from a selected geographical area can be associated with search queries that include that geographical area as a search term. It should be understood that a system for targeting banner ads using user queries can use a range of information retrieval techniques, such as the Verity techniques described above in connection with processing of information retrieval requests using the term lists . However, in an embodiment, a separate banner ad retrieval program  is part of the query engine .","Initialization steps that permit execution of a banner ad retrieval program  are set forth in a flow chart  on . Upon initialization, at a step , the system initiates the banner ad retrieval software . At a step , the banner ad retrieval software , in a manner similar to the information retrieval software , uses extraction routines to access markup language files and extract data. The banner ad retrieval software then generates banner ad term lists . At a step , the banner ad retrieval software retrieves a list of all yellow pages categories. In an embodiment, the categories are all of the available categories of business listings, such as all available yellow pages categories. Next, at a step , the system establishes a set of super-categories. The super-categories may consist of a sub-set of the categories, or other categories. The super-categories are preferably smaller in number than the categories, as the super-categories will be used to simply assignment of targeted banner ads to particular user queries and results of the queries. Next, the system may map categories to super categories in a step . The mapping at the step  many be a many-to-many mapping. A variety of techniques may be used to map categories to super-categories. One such technique uses a combination of automatic and manual mapping. Steps for accomplishing such a technique are set forth in a flow chart  depicted in . First, at a step , it is determined for a first yellow pages category whether the category is to be manually assigned. If so, then at a step  the category is assigned to a super-category. This may be accomplished by user input in a conventional form. Next, at a step , it is determined whether any unassigned categories remain. If at the step  additional categories remain, then control returns to the step , where it is determined whether the next category is to be manually assigned. If at the step  no categories remain to be assigned, then control is control is returned, as represented by off-page connector B, to the flow chart  of .","If at the step  it is determined that the category will not be assigned manually, then it is determined, at a step , whether there remain any additional categories to be assigned. If so, then at a step , the category is skipped and processing proceeds to the next category at the step . Thus, all categories that are to be assigned manually may be assigned prior to automatic assignment of categories.","If at the step  it is determined that no additional categories exist, then all categories to be assigned manually have been assigned, and control proceeds to a step , where the system returns to the first category that was not manually assigned, and it is determined whether the category will be assigned automatically based on the manual assignments. If at the step  it is determined that the category will be assigned automatically based on the manual assignments, then, at a step , the system may compare terms that appear in the category to terms that appear in each of the manually assigned categories. The system may thus obtain a ranking of the manually assigned categories in order of the degree of co-occurrence of terms. Next, at a step , the system may assign the same super-category as was assigned the highest-ranked of the manually assigned categories. Next, at a step , the system may determine whether there are any additional categories. If not, then control passes, as depicted by off-page connector B, to the flow chart  of . If additional categories remain, then control proceeds to the step  for the next category.","If at the step  for a particular category it is determined that a category will not be automatically assigned based on the manual assignments, then at a step  a determination is made whether additional categories remain to be assigned. If so, then at a step  processing skips to the next category and control is returned to the step  for the next category. Thus, after manual assignment of all categories that are to be manually assigned is complete at the steps  through , then all categories that are to be automatically assigned based on the manual assignments may be completed at the steps  through  before control proceeds to the step .","At the step , processing returns to the first remaining category that was not previously assigned. At a step  the system may determine certain statistics regarding the co-occurrence of terms between the category and one of the super-categories (perhaps also including the terms in the categories assigned to the super-categories). A variety of co-occurrence techniques can be used. At a step  the system may assign the category to the super-category for which the highest co-occurrence is found. At a step  it is determined whether additional categories remain to be assigned. If not, then control proceeds, represented by off-page connector B, to the flow chart  of . If so, then control proceeds to the step  for processing of the next un-assigned category. Although an embodiment of a technique for mapping categories to super-categories is disclosed herein, it should be understood that other techniques are available. For example, manual mapping could be executed after all automatic mapping is completed, or the system could rely entirely on automatic mapping.","Once control has returned to the flow chart  of , meaning that all yellow pages categories have been mapped to a super-category, at a step  the banner ad retrieval software  may index the various super-categories in a banner ad term list . The banner ad term list  may take the form of a linked list of the super-categories, with each element in the list consisting of all of the terms that appear in the super-category, as well as all of the terms that appear in each of the categories that was matched to the super-category. It should be understood that these terms may be expanded, as described in connection with  above, so that synonyms and related terms are also stored with each super-category element. Storage of these terms may be in a hierarchical structure that is capable of execution using PHTML scripts or similar techniques.","Next, at a step  the system may match one or more banner advertisements to each super-category. Thus, if that super-category is found to be the appropriate super-category, the matching banner ad or ads will be displayed.","At any time after initialization of the system, the system may generate a banner ad for display to the user. The banner ads may be stored on a server, which in an embodiment is a separate banner ad server . Depending on the desires of the host, the banner ads may be either conventional banner ads or targeted banner ads. In the case of conventional banner ads, the banner ad server  may store the banner ads in a conventional manner and cycle between different ads according to a predetermined routine, such as a round-robin routine, so that when the system calls for a banner ad (such as via an appropriate URL for the banner ad server), the current banner ad is sent to the front end server  for further processing and display to the user in a banner on the user's browser .","If a targeted banner ad is desired, then the banner ad retrieval software  may be initiated. Steps that may accomplished by an embodiment of the banner ad retrieval software  are depicted in a flow chart  as shown in . First, at a step , the banner ad retrieval software  obtains the user's query. Next, at a step , the banner ad retrieval software obtains the categories that match the user's query. These categories may be the categories that are obtained by the information retrieval software  in response to a user query. For example, if the user enters a query for \u201cart supplies,\u201d as depicted in , the user might retrieve a list of matching categories, such as the eight matching categories depicted in . In an embodiment, the categories are those that were displayed as a results page in the flow chart  at the step  in . That is, the categories are yellow pages categories of each of the business listings retrieved in the information retrieval query that was executed by the system.","Once a list of categories is obtained at the step , a variety of techniques could in theory be used to identify a banner ad for the category. For example, an advertisement could be assigned to each category. Thus, referring to , the category \u201cArts & Crafts\u201d could be assigned a particular banner ad (or set of scrolling banner ads), while the category \u201cArtists Materials & Supplies\u201d could be assigned a different banner ad or ads. This approach presents a number of problems. First, the number of actual yellow pages categories is very large, more than seventeen thousand in an embodiment of the system disclosed herein, so that the process of assigning ads to categories on a one-to-one basis would be extremely time consuming and laborious. Also, because advertisements often include time-sensitive material, they are changed frequently, meaning that the ongoing process of assigning ads to category could be very difficult. Since many of the categories are quite similar to each other, as in the above example of \u201cArts & Crafts\u201d and \u201cArtists Materials & Supplies\u201d it is instead preferable to assign ads to super-categories, as was disclosed in connection with .","Another problem with an approach of matching advertisements directly to categories is that additional information about the user's preferences may be available from the user query. A system that relies only on the categories ignores any information from the user query that might permit further refinement of the advertisement selection.","Referring to , once the banner ad retrieval software  has obtained the terms in the user query and the terms in each of the matching categories, the terms may be weighted or normalized by the number of occurrences of the terms and the number of listings in which a term occurs in a step .","Next, at a step , the banner ad retrieval software  may locate the particular terms that appear in the user query and in the categories obtained at the steps  and  in the banner ad term lists . Location of a relevant term list  may be accomplished through use of a table of pointers or other conventional technique. In the case of use of a table, the argument of the table may consist of a tokenized version of the term and the table may point to the location of the linked term list  for that term in the database that stores the banner ad term lists .","Referring to , a structure for a linked banner ad term list  is depicted, in which a linked list of super-categories is depicted. One linked list may be established for each term that appears in a user's query or in a category, such as a yellow pages category, retrieved by the information retrieval software . Thus, for a given term, such as \u201crestaurant,\u201d a linked list  of super-categories was established at the initialization step  depicted in the flow chart  of . The linked list may link elements , with each element  corresponding to a document (a document in this case consisting of all of the words in a particular super-category, plus all words in the categories mapped to the super-category) that includes the term. The elements  may include sub-elements, including a document identifier  for identifying the category and certain statistics regarding the document, including the term frequency , TF, which indicates the number of times the term appears in the document, and the inverse document frequency , IDF, which indicates the inverse of the number of times the term appears in the entire set of documents that are being searched.","From the table of linked lists of super-category terms established in the step , the banner ad retrieval software  may at a step  rank the super-categories. In particular, the system at the step  may rank the documents, i.e., the super-categories, according to the appearance of the words occurring in the user query and in the categories.","The ranking may be performed by a variety of techniques. One such technique obtains a number for each term that appears in the user query and in the categories that consists of the product of the term frequency for that term and the inverse document frequency for that term. The sum of all the resulting numbers may be calculated for all super-categories, and the super-category with the highest sum may be the highest ranked document. The banner ad that was assigned to that highest ranked super-category at the step  of the flow chart  can then be displayed upon completion of the ranking step  of the flow chart .","Other techniques for weighting may also be used. For example, if a term is a high frequency term, it may not make much difference in logical significance whether the term occurs, for example, one thousand times, in the search, or whether the term occurs one million times. In order to collapse the significance of such high frequency terms, it may be desirable to use the a logarithm or related measure of the term frequency and the inverse document frequency, rather than the raw numbers. Thus, the inverse document frequency may be defined as:\n\n=log()log()\n\nwhere N is the number of documents in the document set and IDF is raw inverse document frequency number. Similarly, a statistic can be used to determine the term frequency, TF. A statistic known as Robertson's term frequency for a document is defined as follows:\n\n\/((0.5+1.5())\n\nwhere TF is the raw frequency of a term in a document, DL is the length of the document, and ADL is the average length of a document in the search.\n","These statistics may be further improved by weighting other factors. For example, it is possible to weight each term that appears in one of the categories that is retrieved upon execution of a user query and to normalize the IDF and RTF statistics over the weights. Thus, if a particular category deserves a higher weight, then it might be accorded higher weight in ranking super-categories. For example, a category that is manually mapped to a super-category might be given a higher weight than a category that is automatically mapped. The user query might be given a higher or lower weight, than other information. Categories with a large number of listings may be given higher weight. In an embodiment, each category is given a weight corresponding to the number of listings that are associated with the category, normalized by dividing the total number of listings. In an embodiment, the user query terms are each given a weight of one. In the weighting process, the weight may be multiplied by the term element in performing the sum of the product of term frequency and inverse document frequency over all terms for all documents in the super-category linked list. Thus, with the weights, a normalized version of the Robertson's term frequency statistic can be obtained, permitting improved tuning of search queries beyond what is accomplished with use of the conventional Robertson's term frequency.","Upon completion of the ranking step , the highest ranked super-category is selected, and a banner ad that was assigned to that super-category at the step  of the flow chart  of  is selected. The banner ad may be retrieved, such as via a URL, from the banner ad server , for display to the user via the browser .","On-Line Advertising","Referring back to , shown at the bottom portion of menu option section  is an option to purchase on-line advertisements (\u201cPURCHASE ADS ONLINE\u201d). When a user selects this option, as by clicking with a right mouse button, subsequently displayed to a user is a series of menus for purchasing on-line advertisements. As included in the foregoing embodiment, the purchasing of on-line advertisements may be used by a merchant or business, for example, to display advertisements or business information for goods as may be included in an on-line electronic yellow page listing. Additionally, as will be described in paragraphs that follow, advertisements may be associated with different levels of advertising services that may be purchased. The varying levels of advertising services may display different types of information, text and images to a user when they are performing a search, for example, as previously described in conjunction with .","Referring now to , shown is an embodiment of a method of steps from a user perspective when a user or merchant purchases an on-line advertisement. At step , user authorization and access to the on-line advertisement system is obtained. This type of security, as obtained at step  is necessary, for example, such that a merchant or business owner that purchases an advertisement controls subsequent accesses to advertisement information, such as controls those who may modify that advertisement. At step , a business as included in the yellow pages listing, for example, is selected. Additionally, a type of advertisement or level of advertising services is selected. Generally, as will be described in paragraphs that follow, a business listing is selected in accordance with a business telephone number. At step , an advertisement as associated with the type or level of service from step  is created. At step , an order is generated that is associated with a particular user session and activities, such as creation and purchase of the advertisement as performed in the prior steps. This order, for example, may be used to generate billing and other payment information. At step , payment authorization is obtained. Payment authorization, for example, may include obtaining payment authorization for credit card information or other payment information as may be entered on-line through a user interface menu HTML page and its data fields. At step , the advertisement is published. As previously described, advertising is \u201cpublished\u201d when the information is moved from the Backoffice database to the Front End Server. At this point, when a user performs a data query of the Front End Server, this advertisement is available for display to a user. At step , charges are reported and generated in accordance with the advertisement which has been purchased and published in step . It should be noted that the generation and the reporting of charges may be a one-time occurrence or may include several charges in accordance with the payment method selected by a merchant. Details of the foregoing method steps are described in more detail in paragraphs below.","The flowchart of the method steps described in conjunction with  is one sequence of steps in an embodiment by which an advertisement may be purchased in an on-line advertising system. Other embodiments of the SuperCommerce and Superpages system may include other methods. It should also be noted that more than one advertisement or business advertising option may be created and associated with a business listing during one session. In an example that is described in following paragraphs, for example, a user creates a fact file and an advertisement and purchases associated services.","In paragraphs that follow in conjunction with , various menus or pages as may be presented to a user connected on the Internet through the Superpages System are described.","Referring now to , shown is an example of a user interface that may be displayed once a user selects the option to purchase on-line advertisements, as appearing on  in menu selection area . The page displayed in  includes two portions,  and . Portion  includes those options associated with a first-time user or a new business for which an advertisement is to be created. Included in portion  are options for a user who is not a first-time user and already has an existing name and password. A user, for example, may log in using portion  if they have an existing advertisement in order to change the level of service or modify the existing advertisement. In the embodiment that will be described in paragraphs that follow, portion  will be used if a user were on the system for the first time and associating an existing business listing with a first advertisement.","On a display of the page shown in , a first-time user, for example, may enter a business telephone number in field . Selection is then made to advance to the next step by selecting button  on the menu or display. When this is accomplished, a different menu or screen is displayed.","Referring now to , shown is the resulting business listing displayed matching the phone number as entered in field  from . A user enters a business telephone number in field , and a query is performed of the existing database as will be described in paragraphs that follow, of the Backoffice component of the system of . The query results in this particular example display business listing . If this is correct, the user selects a business name, as by selecting the business name with a mouse device. Upon selecting the business name to signify that the correct business has been identified, a subsequent page is displayed. It should be noted that if the business phone number entered in  is incorrect resulting in an incorrect business being displayed in field , the user may reenter a phone number using the data fields .","Referring now to , shown is an example of an embodiment of a screen display for a first-time user as logging on using portion  of . At this point, a particular business listing has been selected by the user. Information used to verify subsequent log-ons to the system of  is entered in . This is for security in that any advertisements created or purchased associated with this particular business listing are protected by limiting access to those using this information. The information is entered in the data fields associated with portion . Once the information is correct, the user selects the YES button in portion . This causes the next screen to be displayed.","Referring now to , shown are various screens that are displayed subsequent to verifying that the log-in information is correct.  describe various product offerings in the form of advertising services and options that a user may purchase and associate with a particular business listing. It should generally be noted that the menus displayed at  represent three pages of information that are displayed subsequent to selecting YES in field  of . A user subsequently makes a selection of the level of advertising service that they wish to purchase. For example, referring to , a business owner may wish to create her own web site by selecting the web site option . This option allows the user to create a web page which is displayed in accordance with queries made by users on the Superpages' Front End Server. Other options may be purchased, for example, by selecting the Fact File option. Priority placement in an advertiser's section is done in which a Fact File includes information about a business which is displayed in accordance with the query results. Additional types of service of advertising may also be purchased, such as the \u201cplatinum hot link\u201d  and the \u201cgold hot link\u201d , each providing a different level of advertising reach and service in accordance with an associated fee. Other options as included in  include modifying the basic listing , and modifying the previously entered contact and log-in information .","In this particular example, a user selects to create their own web site by selecting field  in . This causes the display of the menu page in . Generally,  outlines the steps which will be performed to create a one-page web site for the particular business. In this particular embodiment that will be described, when this option is selected, the user is linked to another third party web site that hosts tools to create the web page. Upon completion of creating the webpage, the URL associated with this webpage is communicated back to the SuperCommerce engine for subsequent uses. Similarly, other embodiments may host their own tools on-line for the creation of a webpage.","Referring now to , the user is prompted for a URL which is associated with their one-page web site. The user enters the name in field , and then proceeds to the next step to submit this as the URL selected, as by clicking on button  of .","In figures that follow, various screens are displayed to the user in performing those steps outlined in portion  of .","Referring now to , shown is an example of an embodiment of a screen display as presented to a user to create a header for the web page being created and associated with the business listing. The header, as is created with , is displayed at the top of the web site page. The user may customize the header, such as by selection of colors of lines of text by using option areas  and . When the header is created to the satisfaction of the advertiser, control proceeds to the next step by selecting the button  of . This causes the display of a subsequent page of information in .","Referring now to , shown is the resulting header as created in one embodiment and selection of options as displayed in . At this point, the user may proceed to the next step by selecting the option , or proceed to recreate the header by selecting option . Upon selection of , control proceeds to the next step where a page style is selected by the user from various page style\/layout options.","Referring now to , shown is example of an embodiment of a screen displayed with various page style selections of what the web site page may look like. In this particular embodiment, there are four pages displayed from which the user may select a page style. These include a menu page , a gallery page , a graphics page , and a two-column page . It should be noted that other embodiments may have different page styles or may not offer any option at all.","Upon the selection of a page style from , the user is presented with various text fields which comprise the page layout. Various data fields are described in .","Referring now to , the user is presented with the initial portion of a screen which include instructions to complete the web page for the particular business listing associated. The user may customize a web page, for example, by putting a customized welcome text line in field  and inserting an image, such as a .gif file, by selecting field .","Referring now to , shown is contact or address information in field  associated with the particular listing. When the user is satisfied with the web page created, a SUBMIT option may be selected, as by clicking on button . This causes the display of the final product of the web page, for example, in .","Referring now to , shown is a preview of an example of a web page made in accordance with previous steps.","If the user is satisfied with the web site page displayed at , a selection is made by clicking on a mouse button to advance to the next screen as shown in . Otherwise, the user may go back and modify their existing web page which has just been created.","Referring now to , shown is an example as an embodiment of a user interface page displayed subsequent to the user creating a web page. The user is now brought back to the general advertisement selection menu. In this particular instance as displayed in , the create-a-site advertisement option  has been modified from that screen previously displayed in conjunction with , since a one-page web site has now been created for the business. Thus, it is no longer an option presented to the user as it was in field  of . At this point, the user has created the web site page and may opt to pay a monthly subscription fee of $40 in this particular embodiment to have this web page available to users performing data queries and accessing business listings on-line through the Front End Server. A user may select to have the monthly subscription by selecting the \u201cplace order\u201d button . In this particular example, the user selects to place their order by clicking on the \u201cplace order\u201d button .","Referring now to , shown is a screen which may be displayed to the user when selecting the option of placing an order, as by clicking on  of . This menu displays various types of payment information and the length of the contract as well as the various payment options and schedules available . The various payment methods, for example, in  include various types of credit cards, such as VISA and MasterCard. A payment schedule may be selected by selecting one of the buttons in the payment schedule area . In this particular embodiment, payments may be made monthly, quarterly or annually by selecting one of these options. In this particular example, the monthly option is selected by clicking on the \u201cmonthly\u201d button in field . This causes a subsequent screen to be displayed to the user of .","Referring now to , shown is an example of an embodiment of a screen which is displayed to the user in response to selection of a monthly billing for the create-a-site web page option. Field  includes various descriptions in the invoice corresponding to the purchased advertisement service for create-a-site for the particular business listing above the invoice. The bottom portion of the screen  includes an on-line contract which the user accepts or rejects, as by canceling their order. The user may choose to accept (\u201cI agree\u201d) or reject (\u201ccancel order\u201d) this contract by selecting one of the buttons in field  of . Upon the selection of the \u201cI agree\u201d button in field , the page displayed in  is displayed to the user, as on the Internet.","Referring now to , shown is an example of a page displayed to the user to obtain payment information. In this particular embodiment, the user is prompted to enter credit card information by which monthly charges will be made in accordance with the advertisement for create-a-site advertisement purchased.","In , credit card information is entered in data fields of screen portion . The user may subsequently choose to \u201cpurchase\u201d this advertisement, and have this credit card information verified, or \u201ccancel the order\u201d by selecting one of the buttons in field . Using the above information, in this example the selection is made to purchase this advertisement in accordance with the order displayed and the payment terms of . Upon selection of the \u201cpurchase\u201d option in field ,  is displayed to the user.","Referring now to , shown is an example of a screen display that is a response to the verification performed with the preceding credit card information in an attempt to purchase an advertisement with on-line payment. In this particular embodiment, the previously entered credit card entered in field  has been deemed invalid. The user may be prompted to enter a different credit card number. In this instance, should the user choose to enter a new credit card and not cancel an order, a new menu or screen may be displayed again as in .","Generally, the technique used in this embodiment to verify a credit card number is known and available in the industry. For example, commercially available are subroutines, such as provided by CyberCash, to verify a credit card number.","Referring now to , shown are screen displays as may be displayed to a user in conjunction with the creation of a fact file. A fact file, for example, may be an advertising option chosen by a user in accordance with a business listing, such as by selecting  from .","Referring to , the user is presented with various screens of information including data fields which the user enters in conjunction with the creation of a fact file. Recall, as previously described, a fact file includes information about the business, such as hours of operation, services or products offered in conjunction with the business.","Referring to , data fields associated with screen portion  include the year the business was established, as well as different payment methods accepted by the business. Additionally, at the top of portion  is a field called a \u201chot link\u201d field which may include a URL associated with the previously created web page.","Referring now to , shown is a schedule of business hours that may be associated with a particular business listing.","Referring now to , additional fact file business information includes products, brands, services, licenses and the like which are associated or offered by the business listing. At the bottom of , the user may choose to select one of the buttons in field  to \u201csubmit\u201d or to \u201cclear\u201d the fields associated with the fact file. In this particular example, the user chooses to \u201csubmit\u201d the order, as by clicking on a \u201csubmit\u201d button in field . This causes the display of .","Referring now to , the user is presented with an example of a verification page for the fact file. The information of how the fact file will appear online is presented in field . The user is presented with an option of accepting the information presented in field  as correct. The user selects either yes or no in the portion designated as  of . In this particular example, the user selects yes by clicking on the \u201cyes\u201d button in field  of . Subsequently, the user is displayed the page of . At this point, the user may select one of many options, including modifying the previously created site, as well as modifying the fact file. This may be done, for example, by clicking on the \u201cmodify\u201d portion next to the create-a-site option in field  of . At this point in the example, the user selects to \u201cplace\u201d the order by clicking on button  of . This causes the display of .","Referring now to , as a result of the session which the user has just completed with regard to creating a fact file and a web page, the invoice of  is produced and displayed on the screen. The invoice is described in the top portion . The bottom portion of the screen  includes those terms as may be included in an on-line contract regarding interactive advertising services. At the bottom of the page of , portion  includes two buttons. By selecting the \u201cI agree\u201d button, the purchaser of the advertisement agrees to the terms of the agreement, and also agrees to be charged the amount as included in the invoice. Alternatively, at this point in the transaction, the advertiser may choose to cancel the order by selecting on the \u201ccancel order\u201d button in field .","It should be noted that if a credit card transaction has been successfully authorized, the user may be presented with a screen displaying order information and confirmation that the order has been placed. The order information, for example, an order reference number, may be used by the purchaser for future reference.","Referring now to , shown is an example of an embodiment of the Backoffice component  as previously described in conjunction with the system of . As previously described, the Backoffice  includes a connection to the Front End server  as well as a connection to outside users . This embodiment of the Backoffice  includes a secure web server  by which users may access the Backoffice component . The secure web server  acts as an interface to access the SuperCommerce engine . Generally, the SuperCommerce engine is that which may be accessed by a user or advertiser in purchasing advertisements in the system of . In particular, a user uses connection  to access the secure web server  to perform the method steps shown in , and additionally, to display the steps in conjunction with  through  in producing and purchasing on-line advertisements of the system of .","The secure webserver in this embodiment uses the Secure http protocol in which the webserver interacts with a user's browser using a this protocol. Products implementing this are commercially available, such as by by Netscape\u2122. As such, any information received, such as credit card information for advertisement purchasing, as will be described in paragraphs that follow, is encypted.","The SuperCommerce engine  interacts with a database , a payment server , billing and recurring transaction reporting , and several different files or repositories. The files or repositories include query template files , and template execution files . The secure web server interacts with and accesses files in the static file repository . Generally, those files included in the static file repository are static in that they do not change from access to access. The web server may access a copy of a static file and display it to the user through connection .","In the initial paragraphs that follow in conjunction with , each of the elements will be generally described. However, more detail regarding each of these will be described in paragraphs that follow in conjunction with other figures and flowcharts.","The database  generally includes information such as business listings and associated data as well as user log-in information for purchasing an advertisement. Much of this information was previously described in conjunction with other figures regarding business listings. However, in the embodiment shown in , the database  includes additional information such as user log-in information in conjunction with purchasing an on-line advertisement as associated with a particular business listing. It should generally be noted that other information as needed in conjunction with on-line advertisement purchasing and other tasks performed by the SuperCommerce engine is included in the database .","The payment server  interacts with other facilities outside of the SuperCommerce engine to post payments for example to other credit card and financial institutions. The payment server receives its instruction as to what amount to charge a credit card, for example, or for what amount to verify a transaction from the SuperCommerce engine . The SuperCommerce engine  also interacts with the billing and recurring transaction reporting unit . The billing and recurring transaction reporting unit  is responsible for generating billing transactions. For example, if a user had selected a monthly payment option, the billing and recurring transaction reporting unit  generates a bill accordingly every month which the payment server  authorizes charges on a particular credit card.","It should be noted that in this embodiment, the credit card information received by the secure webserver is encrypted. This encrypted information is further passed to the payment server where all the credit card information is stored. This has a benefit that there is limited access to credit card information. In other words, because such information is not stored in the database internal to the SuperCommerce system, there is limited access to this information in the event, for example, of unauthorized access to the database . Other embodiments may use a different model in accordance with a particular system and implementation. Generally, in this embodiment, the user's browser encrypts information using a first public key. The secure webserver  decrypts this information using a first private key corresponding to the first public key. This information may be further encrypted, for example, if it is passed to the Payment Server. In this instance, the information may be encrypted with a second public key and is further decrypted using a corresponding second private key by the payment server.","Query template files  includes those files that are used in performing various data queries of the database . For example, different components of the SuperCommerce engine, as will be described in more detail in paragraphs that follow, perform queries using a certain format with different data filled into different fields in accordance with information provided by a user. The various components of the SuperCommerce engine  may retrieve the query template files containing the different formats for data queries and fill in the information accordingly. Thus, the query template files  include templates for performing data queries as issued to the database .","Template HTML files  are similar in function to that which is described in conjunction with the Front End server. Generally, the template HTML files include HTML code with conditional statements which are executed in accordance with various options depending on what is to be displayed to a user. For example, a template HTML file may display various types of advertising options such as those included in . However, certain portions of the HTML file may change or be conditionally displayed in accordance with different levels of services offered at different points in time to different users that may log on to the system. Template execution files  are similar in function to the PHTML execution tree files  as included in . It should be noted that the PHTML files  of  are also similar in function to the template HTML file  just described. The static file repository  may include various images for example which remain static. As an example, one HTML file may include a link to other HTML files or images which may be static. The secure web server  would retrieve these items from the static file repository  and return them to the user through the connection .","Referring now to , shown is an example of an embodiment of the SuperCommerce engine . The SuperCommerce engine  in this particular embodiment includes an order management component , a user and content management component , an authentication and access control component , a transaction management component  and a product and catalogue management component . Additionally, various connections to those components outside the SuperCommerce engine are also shown in . The connection to the web server  is used by all of the components except the authentication and access control component . In this embodiment, the authentication and access control component  accesses the web server through the user and content management component . There is a connection to the files shown in  through connection . Each of the components included in the SuperCommerce engine  are able to access all of the files as shown in . Also shown is a connection to the database  using connection . Similar to the connection to the files, all of the components of  have access to the database through connection . There is a connection to the payment server  using connection . In this particular embodiment, only the transaction management component  interacts with the payment server .","The user and content management component  is generally responsible for functions associated with user access and management of user information. For example, the user and content management component handles the function of verifying that a particular user has access to a particular advertisement, or determines if a user is a previous or new user. The information regarding user information and password, for example, are stored in a database  of . The user and content management component  accesses the database accordingly to verify user information and store or update user information. Additionally, the user and content management component  also handles the content or advertisement products available to a particular business or user.","The authentication and access control component  is generally responsible for authenticating and controlling access to the various advertisements. It interacts with the user and content management component to perform this function. If a user logs on to the system, control passes to the authentication and access control component . The user and content management component  interacts with the authentication and access control component  to keep track of the activity associated with a particular user's session.","The transaction management component  handles payment transaction responsibilities. For example, the transaction management component  obtains payment authorization for a particular credit card entered by a user such as by the HTML interface displays previously described. The transaction management component interacts with the payment server  in performing its tasks.","The product and catalogue management component  is responsible for those types of advertisements and services displayed to the user for purchase. For example, various levels of services for advertising may be offered to a user, such as Create-a-Site and the fact file. The product and catalog management component  handles the tasks of updating the various HTML files and the like in keeping such product advertisement information up to date.","The order management component  is generally responsible for the control of which services are purchased during a user's session. Generally, the order management component  is an integrator for the various items associated with a particular order then in a user's session. For example, the order management component  interacts with the transaction management component  when the user has entered credit card information for a particular order. If the user authorizes proceeding with the order, such as by clicking on a particular button from a display menu, the order management component  interacts with the transaction management component  to verify credit card information.","Control passes between the various components of the SuperCommerce engine  in accordance with user selections. For example, after a user logs on, control passes from the authentication and access control component  to the user and content management component  when an advertisement is created. The page of  may be displayed to the user to enter a business listing, or, to enter the name and password if this is not a first time user. In the event that a user name and password are entered and the log-in button  is selected, control passes from the user and content management component  to the authentication and access control component . After the authentication and access control component  verifies user name and password by accessing the database , control is then returned to the user and content management component  to proceed with further processing.","In this embodiment, control passes to the various components of the SuperCommerce engine by associating a URL with each of the components. When a user makes a particular selection, for example, the URL is sent to the webserver which subsequently transfers control to the proper component. The mechanism for this transfer is included in the webserver as previously described in conjunction with the Front End server. Additionally, as known to those skilled in the art, additional parameters may also be passed to the appropriate component as added URL parameters.","Referring now to , shown is a flowchart of an example of an embodiment of method steps for purchasing an on-line advertisement as previously described in conjunction with . It should be noted that each of the steps in  has a parallel in . Generally, the steps support in the flowchart are  mirror those steps of  and contain additional information describing what happens behind the scenes within the SuperCommerce engine in accordance with the previously described user perspective. At step , the user logs onto the SuperCommerce engine such as to purchase an advertisement or claim a business listing. At this point, control passes to the authorization and access control component and the user and content management components through the web server . At step , the user selects a business and type of advertisement. With the selection of a business and type of advertisement, control passes to the user and content management component . The user selects and creates an advertisement, control passes to the third party website which offers to serve as a host to create the advertisement. When the user is done creating the webpage, control returns to the user and content management component. At step , when the user selects the option of purchasing or ordering the service of advertisement, control passes to the order management component . At step , when credit card information is entered, payment authorization is obtained. To obtain the payment authorization, control passes to the transaction management component  which interacts with the payment server  to obtain this credit card authorization. At step , the advertisement is published during the previously described update procedures from the Backoffice to the Front End server. At step , charges regarding a particular advertisement are generated and recorded. Generally, in this particular embodiment the customer or business owner is charged when the advertisement is published thus being available to users. Reccurring charges, if any, are also generated in accordance with the payment method selected by the purchasers of the advertisement. At this point, control and processing passes to the transaction management component  to generate the post charges to a particular charges to a particular credit card using the payment service . It should be noted as will be described in paragraphs that follow that the transaction management component  interacts with the order management component  to generate recurring charges of bills, for example, on a monthly basis. This is described in more detail in paragraphs that follow.","Referring now to , shown is a flowchart including method steps of an example of performing a query of the database  in the Backoffice . Generally, the method of  maybe performed by each of the components of the Backoffice  in performing their associated functions. These will be described in more detail in paragraphs that follow.","At step , the corresponding query template is retrieved from the query template file  by the appropriate component of the SuperCommerce engine . The component of the SuperCommerce engine  places the appropriate query input data in the designated areas of query template retrieved at step . At step , a query is issued by the SuperCommerce engine  to the database . At step , the database  results are returned to the caller of the SuperCommerce engine . At step , the SuperCommerce engine component places data as appropriate into the HTML file at step . In other words, the data retrieved from the database  is placed into the appropriate data fields in a HTML file, for example, to be displayed to a user through connections . At step , the resulting HTML file with the appropriate data fields filled in as returned to the user using connection .","The above step of  may be performed, for example, by the authentication and access to control component  when retrieving user name and password information stored in the database . The user and content management component  may perform a query of the database  using the steps of  when querying for a particular business listing indexed by telephone number entered by a user. Similarly, order and product information may be maintained in the . The appropriate components in the SuperCommerce engine similarly access the database  using query template files . It should be noted that there may be no results that are returned to the user as displayed in the HTML file. Each of the components of the SuperCommerce engine  know which fields to fill in for the corresponding HTML file in accordance with the data retrieved from the database  when appropriate in accordance with various interactions with an on-line user.","Referring now to , shown is an example of an embodiment of a representation of a model used in on-line advertising. This model may be stored in a computer system as one or more connected data structures. As shown on , a user  and user authorization information is associated with one or more business listings as uniquely identified by associated phone numbers  through . The SuperCommerce engine associates a user with each of these businesses. In other words, each of these businesses  through  is considered the domain of the user . Further information associated with each of these businesses as indicated by a yellow page phone number listing may only be modified by user . In creating an advertising, the user logs onto the system, selects a business phone number, and then creates one or more advertisements or other items each associated with an advertising service purchased by the user . For example, the user  may log onto the system using a specified user name and password and select a business phone number associated with business . The user may then proceed to create one or more advertisements  through  and a fact file . Each of these items ,  and  are associated with business 1. These may be modified by user  only. Similarly, multiple businesses such as  business may also be selected by user  and have associated items such as advertisement  and fact file . Using this model, the SuperCommerce engine  controls access to various businesses and advertisements associated with those businesses as well as the services associated with the various advertisement items. Regarding security access to the various advertisements purchased, the user  is required to have a particularly specified user name and password to access any advertisement information associated with a business, such as business .","Various features may be associated with different on-line advertising services. In particular, a user or advertisement purchaser may control the way in which a company logo or other designation of a company is displayed to a user, for example, when a query is performed resulting in a business listing being displayed. For example, one of the features offered by the by the system of  is the control by an advertiser of how a business name may be displayed such as an icon. For example, referring back to  in which various business listings are displayed, an advertiser may specify that a company logo may be displayed like a small icon. This may appear for example next to the name of the company and the phone number in  when the business listing is displayed in response to a user on-line query from the front-end server.","Referring now to , shown is an example of a block diagram of an embodiment of how the SuperCommerce engine may store information identifying how a business name or other designation may be displayed in a business listing to a user in response to a query. Included in  is a hotlink table , a presentation information table , and a URL table . Generally, the hotlink is a link to a website such as that created with the Create-a-Site option in which the hotlink appears in the basic listing when a user does a query. If various levels of services are also purchased for advertising such as the platinum, gold or silver hotlink level of advertisement service described in conjunction with the previously display HTML page, the hotlink may appear in a prominent position ahead of other business listings.","Included in the hotlink table  is a business identifier . The business identifier  is a unique identifier which is unique to Superpages identifying a particular business listing. This may be, for example, the unique numeric identifier associated with a particular business. The hotlink identifier  is a pointer to an entry in the presentation information table . An entry in the presentation information table describes how a particular hotlink appears to a user when displayed in conjunction with a business listing. Blob Identifier  identifies in this particular example an iconic image of how a URL string or other designation is displayed in conjunction with a business listing. Note that it may also include a text identifier if an advertiser desires to have a particular text displayed of a name in conjunction with a business listing displayed in response to a user query. Also included in the presentation information table is a presentation identifier . The presentation identifier  points to an entry in the URL table . In this example, the presentation identifier  points to URL identifier  which identifies a URL string that will be displayed or presented to the user when a business listing appears as a result of a data query.","Referring back to , the hotlink or the URL website created with the Create-a-Site option may appear as a data field in . If, as in the previous , there is a blob identifier associated with an iconic image, this iconic image may be displayed as a button. When a user selects this button, as by clicking with a mouse device, there is a hyperlink to the URL website, as created with Create-a-Site option. If there is no blob identifier, the URL string may be displayed as a text button performing the same hyperlinking to the created website of a business listing when selected.","Referring now to  shown is an example of an embodiment of the interaction between the SuperCommerce engine and the payment server. In the , the SuperCommerce engine  interacts with the CyberCash\u2122 server . In this particular embodiment, the CyberCash server is the payment server. The CyberCash server  acts as an interface between the SuperCommerce engine  and the various financial clearing houses . For example, the CyberCash server  interacts with one or more financial institutions to process various MasterCard\u2122 and Visa\u2122 transactions.","Referring now to , shown is an example of an embodiment of how a CyberCash transaction in this particular embodiment is produced from this particular order. Generally, in one embodiment as shown in , a table of orders  is used to produce a table of one or more bills . Each record or bill that appears in the table of bills  has a corresponding CyberCash transaction . A series of one or more orders may be included in the table of orders . A particular order is identified by an order identifier. The information stored in a particular record such as  includes information corresponding to that which may be entered by the user from on-line payment options which is previously described in conjunction with HTML pages displayed to a user purchasing an on-line advertisement. The order identifier uniquely identifies a particular order. Other information that may be included includes a billing method, such as whether there is a monthly recurring charge for this particular advertisement or order as well as the effective date and customer information. The table of orders  may be maintained, for example, by the order management component  of the SuperCommerce engine . The table of orders is used by the order management component  in conjunction with the transaction management component  to produce a table of bills. The table of bills, for example, may be produced to contain monthly billing statements for customers with recurring monthly charges. For each particular order, a bill is produced. An example of a bill generated using a particular order is shown as entry  in the table of bills . Included is information such as an order ID which corresponds or identifies that particular order in a table of orders . Additionally, information such as the amount which a particular credit card is to be charged may also be included in the entry . In this particular embodiment, a pointer or an identifier to a particular CyberCash transaction  is also included in the record . The CyberCash ID identifies a CyberCash transaction  which includes that information which is needed by the CyberCash server  to process an indicated credit card transaction.","Credit card transactions for which CyberCash transactions are created include verification or authorization, and capture of payment or posting. When a user first enters credit card information on-line, for example, using the previous screen displays, a CyberCash transaction is created to verify or authorize use of that credit card for a specified amount. When the advertisement is published, another CyberCash transaction is created causing the actual posting of charges to the credit card. CyberCash transaction  may include information such as a credit card number and the amount to be charged.","Generally, the previously described technique associates a particular business listing which includes or is indexed by a telephone number with a particular geographic location or site of a business. For example, if there was one telephone number for a business, such as a cleaning business, that included five physical locations and each in one of five different cities, an advertisement is associated with each of the physical geographical locations or chain stores even though they are identified by one phone number. When a particular phone number is used to index or identify a business, the user further selects which one of the five stores they are creating an advertisement to be associated with and purchase an ad. This should also be noted that in a particular embodiment, multiple user names and passwords may be associated with allowing access to a particular business listing and advertisement.","It should also be noted that the particular described embodiment for creating a webpage with the create a site option is generally a template-based on-line ad creation tool. The template-based on-line ad creation tool may be linked to a third party site as in the previously described embodiment to create a webpage using an on-line HTML file. Alternatively, the ad creation tool may be an internal tool used and supported within the SuperCommerce engine itself.","As previously discussed, a user is charged when an advertisement is published. At this time, the transaction goes through to the payment server to actually post the credit charge to a credit card, for example. \u201cPublished\u201d, as previously described, refers to when an ad is pushed from the Backoffice to the Front-end server such as during the various update procedures.","Referring now to , shown is a flowchart of an example of an embodiment of methods steps for generating bills in the SuperCommerce engine. At step , bills are generated as included in the table of bills , CyberCash transactions in this particular embodiment are created for each bill in step . In step  these transactions are sent to the payment server. In this particular embodiment, the payment server is the CyberCash server. When these CyberCash transactions are sent to the CyberCash server, the credit card information is verified prior to the credit card transaction being posted. At step , status information is returned from the payment server to the SuperCommerce engine. Status information may include for example, that a transaction has been successfully posted to a credit card or that the transaction has failed for one of a variety of reasons. At step , the transactions are processed in accordance with their returned status in step . For example, the status is indicated as successful, information in the database may be updated to keep track of the customer has paid. Similarly, if the transaction fails, a customer records included in the database may also be duly noted such that service may be discontinued at a particular point in time or that reminder notices or telephone calls may be made by agents informing a particular advertiser as to the failed status of the bill. Similarly, notification may occur by other methods such as e-mail as well as a phone call.","As known to those skilled in the art, information of the CyberCash database is generally synchronized with information included in the database of the SuperCommerce system. This may be generalized as a database synchronization problem dealing with transactions that may require reconcilation when one of the database updates related to a transaction fails. For example, if a transaction is successfully posted to a customer's credit card, a success status is received by the SuperCommerce engine. Accordingly, an attempt is made to synchronize and update the database maintained by the SuperCommerce engine in the Backoffice. If this update fails, a note is generally made by the system to perform a synchronized updated at a later time until successful.","Referring now to , shown is an example of an embodiment of a Product Information Table. The Product Information Table generally includes information describing the product and advertising service options that a user may purchase. It should be noted that this data structure is a table format and other types of data structure may be used in accordance with each implementation of concepts of the invention. In this embodiment, a table structure is used to provide the flexibility to add or remove table entries in accordance with product offering changes.","Each entry of the Product Information Table  includes product name , product identifier , pricing information , and compatibility information . Generally, the product name includes a text description identifying an advertising service as displayed to the user. Each product name has a corresponding product identifier which may be used, for example, by the SuperCommerce engine in identifying or indexing to product information in various data structures of database records. Pricing information  generally identifies attributes regarding product pricing, such as whether or not the service is taxed or may be included as a bundled product offering in combination with one or more advertising services. Compatibility information  generally describes whether a particular product may be purchase in combination with other products. In other words, this information describes whether a product is compatible with other product offerings. For example, if a user selects to purchase a first advertising service and a second advertising service, the second advertising service may not be compatible with the first service. If the second service is a superset of the first service, the user may be instructed to purchase only the second service.","In this embodiment, the Product Information Table  may be included in the database  and stored as a table data structure or equivalent thereof in accordance with functions included in the particular implementation of the database. The table  may be maintained and accessed by the Product and Catalogue Management component .","In the previously described embodiment, it should be noted that the Internet is the main connection in which users purchase on-line advertisement as well as create advertisements. Other methods of producing advertisements such as talking to a customer representative on the phone, may also be included in this method in the previously described techniques. Additionally, concepts may be incorporated into the creation of an advertisement other than what is previously been described. For example, when a user is purchasing an ad, various degrees of \u201creaches\u201d may be associated with a particular advertisement. A reach as associated with a particular advertisement generally defines that geographic span associated with an ad with a resulting data query. In particular, \u201creach\u201d may be one of multi-city, multi-county, state-wide or nation-wide. Certain designations for reach, such as state-wide, may effect whether or not a particular business listing is displayed in accordance with a query performed with regard to a particular state. Similarly, a designation of reach nation-wide may imply that the particular business listing and advertisement is associated with a data query which is being preformed on a national level. This may be specified for example by a series of fields associated with the particular advertisement by which the user checks off what reach they want their ad to have.","The foregoing SuperCommerce engine and components included in the Backoffice in this embodiment are written in JAVA and C++. Other embodiments and implementations may be implemented in other hardware and\/or software combinations. In this particular embodiment, C++ is generally used for those components which are performance oriented such as advertisement creation. JAVA, due to its wide availability, is generally used for those portions which are not generally focused on performance but are rather concerned with reusability. Thus, these portions written in JAVA are easily ported or executed on a variety of different platforms due to JAVA's wide availability.","SuperCommerce is generally an automated electronic commerce system. It enables a unique commercial grade, comprehensive solution that allows businesses to sell on-line products and subscription based services, and provides customers with a self-service capability to create and provision their purchased services.","SuperCommerce offers the full spectrum of complex functionality required to conduct business on-line and meet various business objectives by supporting customer interaction, order entry, billing and payments, business lead tracking, report generation. SuperCommerce is included in SuperPages business, as in the system of , to open a new revenue generation channel through the sale of electronic advertising, such as advertising on the Internet. Additionally, SuperCommerce provides a significant cost reduction in operations by allowing customers and partners to manage their own advertising content without any involvement of Customer Care staff SuperCommerce also uses a unique upsell model to increase profitability. The net effect is revenue growth with larger profit margins.","SuperCommerce provides an intuitive user-friendly workflow for advertisement creation and management, state-of-the-art robust and secure on-line payment system, a comprehensive marketing, customer relationship management, billing, order entry and operations support. Generally, SuperCommerce allows SuperPages to bundle third-party services, enhancing its ability to rapidly bring custom offerings to the market. Furthermore, this flexibility enabled self-service to a variety of alternative sales channels: commission sales agents on the Web, GTE's standard Yellow Pages sales force, and advertisers.","SuperCommerce has an innovative, web-based architecture that allows access from the Internet and Extranets to advertising and listing content, and operations functions, enabling GTE to use a virtual sales and support organization. Its open architecture supports automated processing (self-service) for purchase of electronic advertising using innovative Java-template-based and http-based methods for creating or obtaining advertising content. This allows customers or GTE sales agents with little experience in web page creation to build and publish various kinds of advertising while maximizing GTE's flexibility to serve small businesses quickly.","The flexible architecture of SuperCommerce supports custom marketing to different target business segments. Different product sets can be offered to businesses accessing SuperPages through different sales channels. Special promotions can be organized for predetermined time frames. Businesses targeted can purchase the offered promotions using an express checkout option. The flexibility also aids in packaging third-party products under SuperPages brand. Thus, SuperCommerce allows GTE SuperPages to enhance their product set rapidly in response to the changing industry trends.","SuperCommerce provides a robust and flexible On-line Payment Gateway critical for electronic commerce systems because of the industry-wide low preview to purchase ration. It offers business customers a wide choice of on-line payment methods and options including credit cards to invoice billing. Additionally, payment options include one time and also recurring payments based on various schedules. SuperCommerce gives its customers freedom to switch from one payment option to another and supports credit card replacements, bill adjustments, credits and voids. SuperCommerce provides an on-line transaction reporting system that provides up-to-date information on the sales, revenues, unpaid bills, contracts to expire, etc.","SuperCommerce is a robust secure site. An embodiment may use encryption, user authentication and innovative flexible role-based access control to protect business information and to control operations granted to customers accessing SuperCommerce via various channels.","One embodiment of SuperCommerce includes a 100% pure Java component-based scalable implementation. It takes the full advantage of distributed relational database capabilities, security (SSL, firewall) features, object-oriented design and development and Web-based defacto standards.","SuperCommerce provides the full spectrum of complex functionality to offer business-business and consumer-business electronic commerce services. This includes advertising\/catalogue acquisition and management, content production, development, publishing, order entry, billing and payment, sales agent management, business lead tracking, and operations reporting. The system acts as an end-to-end self-service tool for consumers, businesses, value-added-resellers and partners.","SuperCommerce addresses needs of various groups of SuperPages' business users. Those who use SuperCommerce to perform their day-to-day activities may include customer care advocates, sales managers, content developers, finance operators, and business customers. These users may use SuperCommerce to perform the following tasks:\n\n","Self-service of advertising by business customers and advertisers using the foregoing may result in reduced staffing and operation costs. This generally allows business customers to maintain control over their own advertising and business listing content. Business customers can keep their content up to date without any interaction with Customer Care.","One embodiment of SuperCommerce was designed as an extensible, flexible architecture, which allows:\n\n","The foregoing SuperCommerce embodiment has an innovative, web-based, architecture that allows access from the Internet and Extranets to advertising and listing content, and operations functions, enabling GTE to use virtual sales and support organization. It supports automated processing (self-service) for purchasing several types of advertising, minimizing GTE's operations staff costs. It provides innovative template-based and http-based methods for creating or obtaining advertising content. This allows customers or sales agents with little experience in web site creation to build and load several kinds of advertising while maximizing GTE's flexibility to serve small businesses quickly.","Most of the electronic commerce offerings in the market follow the simple sale of goods model. Here a user selects the list of products he\/she would like to purchase and then checkout the products by paying for them. This allows for a very simple process flow in interacting with the customer. SuperPages' advertising products call for a complex process where the customer has to actually tailor the advertising service to their communication requirements. The SuperCommerce system solves this challenging problem by guiding the users through a series of workflow based tasks. Each task is deliberately designed to be simple to simplify the interfaces and to give a clear context for the users. Every task has a built in task-sensitive help information compiled and made available to the users. A series of usability tests and focus group surveys were conducted to identify the tasks, which need to be broken down to increase user effectiveness.","One embodiment of the SuperCommerce architecture is built on top of several modular and reusable components. The system may be developed using JAVA\/JDBC technology to enable rapid deployment on multiple heterogeneous platforms without any porting effort. The architecture has several component layers built on top of one another to leverage maximum flexibility and enable rapid customizations.","As previously described, payment, transaction and database services are grouped as core services on top of which other component services reside. Payment service provides multiple on-line payment technologies like Credit Cards, Electronic Checks and Electronic Cash. Since the customers of SuperCommerce include both consumers and businesses, there is a need for providing flexible payment methods to satisfy different user requirements. In one embodiment, the payment service uses CyberCash merchant server to conduct on-line transactions. The payment functionality is wrapped in a http compliant messaging server. This enables both local and remotely hosted applications to access the service.","Transaction service ensures consistency across heterogeneous systems. One of the major challenges was to provide atomic transactions across both the CyberCash system and the local repository. This challenge was overcome by developing and incorporating a unique optimistic concurrency control protocol into the transaction service.","In one embodiment, database service may be built on top of the JDBC protocol to support connection and session management. A significant performance improvement was achieved by employing connection caching and sharing across multiple request. The JDBC solution also eliminated the need to deploy the system on any particular database system.","Order management, billing and reporting functionality use previously described services to provide flexible business rule management and execution environment. Order Management provides the ability to do bundling if advertising solutions into custom packages for different target markets. Order management also consolidates the invoicing information for customers and enable them to pay using method of their choice.","Billing in SuperCommerce is more complex than the traditional electronic commerce offerings. One embodiment of the billing system also automates the calculation of taxes using a data driven model. The tax rules can be changed depending on the regulations and new business guidelines.","The presentation components use a template language, which allows User Interface designers to tailor the different interfaces to suit the needs of different users in achieving maximum effectiveness.","An advertisement purchaser is provided with a view of their purchases. In one embodiment, the list of products purchased is consolidated and presented in a simple shopping cart-like view. The customers can perform one-click checkout and pay for all their purchases. The console enables the customer to not only confirm their present status, but also to experiment with different combinations of products to select the best solutions to businesses. The customers have the advantage of being able to touch-and-feel their advertising message without going through a laborious trial and error process.","Product and catalogue management allows change in the product offering in a rule-driven model without the need to perform custom development.","Authentication and security services maintain a tight access and role management control over the functionality and the sensitive information in SuperCommerce. A username\/password-based authentication performed in an encrypted environment makes sure that the communication between the customer and the system is secure. In one embodiment, the payment information and the customer contact information may be stored using public key based encryption policies.","SuperCommerce provided a one-stop solution for the various stages of the consumer purchase process. In one embodiment of SuperCommerce, the following products may be used:\n\n","In one embodiment, there is integration with third party products. Interfaces enable integration of the foregoing system with Nextron, a third party provider of customized one-page web sites, and MapQuest, a vendor which the SuperCommerce system uses for the geographical placement of its advertisers.","The foregoing system provides for:\n\n","The payment paradigm previously described of recurring charges requires retaining and storing customers credit numbers in the system. Subsequently, SuperCommerce provides sound guarantees that the credit card numbers won't be stolen or misused by insiders or intruders. As a result, the credit numbers in one embodiment may be stored as part of CyberCash transaction orders inside the CyberCash server and query the latter for the credit card number each time the new bill is generated. Subsequently, neither Customer Care nor Operations staff can view credit card information as part of the Customer personal records.","In one embodiment of the SuperCommerce database, business, order and payment related information is stored in an Oracle database. At the same time the information about payment transactions is stored in the CyberCash Server through which they are executed. Subsequently these two systems may be synchronized to represent a consistent view on the customer payment history.","While the invention has been disclosed in connection with the preferred embodiments shown and described in detail, various modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly, the spirit and scope of the present invention is to be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The above-mentioned and other features of the invention will now become apparent by reference to the following description taken in connection with the accompanying drawings, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7","b":"440"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 9 and 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 15","FIG. 14"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 16 and 17","FIG. 3"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 18","FIGS. 16 and 17"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIGS. 19 and 20","FIG. 18"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 21","b":"20"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 22","FIG. 21"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 23","FIG. 22"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 28","FIGS. 2 and 4"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 29","FIGS. 2 and 4"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 30","FIGS. 2 and 4"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 34","FIG. 33"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIGS. 37 and 38"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 46 through 52"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIGS. 53 through 58"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 63"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 64"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 68"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 69"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 70"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 71"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 72"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 73"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 74"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 75"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIGS. 76 through 78"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 79"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 80"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 81"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 82"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIGS. 83 through 85","FIG. 82"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 86"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 87"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 88"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 89"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 90"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 91","FIG. 90"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIGS. 92 through 95"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 96"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 97"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 98"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 99"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 100","FIG. 99"]},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 101"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 102"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 103"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 104"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 105"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 106"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 107"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 108"}]},"DETDESC":[{},{}]}
