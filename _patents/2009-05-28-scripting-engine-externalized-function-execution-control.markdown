---
title: Scripting engine externalized function execution control
abstract: Various embodiments include at least one of systems, methods, software, and data structures to evaluate function calls within a host, such as a scripting or application programming interface (API) host, prior to execution. Such embodiments may determine if a called function is authorized for execution. When the function is not authorized for execution, the function is not executed. Authorized and unauthorized functions may be set in a representation including one or both of authorized and unauthorized function functions. The representation may be stored external to the host so as to be modifiable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732830&OS=08732830&RS=08732830
owner: Adobe Systems Incorporated
number: 08732830
owner_city: San Jose
owner_country: US
publication_date: 20090528
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND INFORMATION","DETAILED DESCRIPTION"],"p":["The subject matter herein relates to computer security and, more particularly, to scripting engine externalized function execution control.","Attacks against computing resources have become prevalent. New avenues of attack are being exploited at an increasing rate. Although many threats are quickly identified and remediated, some threats may not be resolved so quickly. Thus, in some circumstances, an attack may pose such a threat that the result is an inability to use an exposed system or application.","Various embodiments may include one or more of systems, methods, software, and data structures that provide an externalized representation of functions available in a scripting engine, Application Programming Interface (API), or other hardware or software element that may receive function calls. The externalized function representations provide the ability, in some embodiments, to enable and disable execution privileges at a function granularity within a portion of a hardware or software element that receives a function call, such as a scripting engine. The externalized function representations may be stored in a memory or storage device accessible when the determination of whether or not to allow a called function to execute is made, such as by a scripting engine. Through use of such embodiments, individuals, enterprises, and other users may easily and rapidly adjust execution capabilities of functions for purposes such as reducing exposure to potential or existing vulnerabilities. Such execution capability adjustments may be made with regard to specific functions that may be identified in periodic security bulletins rather than disabling an entire scripting host to reduce exposure.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","102"]},"In the example embodiment of method , when the function call  is received by a host that is to execute, or otherwise cause the function to be executed, the host performs a validation procedure prior to executing the function call . To perform this validation procedure, the host determines  if the function call is allowed. The determination, in some embodiments, includes retrieving, or otherwise obtaining, a privilege indicator with regard to the received function call . The privilege indicator may be retrieved from a source external to the host, such as a configuration setting data structure which may include one or more of a registry, a configuration file, or other repository of configuration settings. In other embodiments, the privilege indicator may be included within the host. The privilege indicator is then used by the host to perform the determination . If the function call  is not allowed, the host does not execute  the function and continues to a next function or otherwise proceeds in execution. If the function call  is determined  to be allowed, the function is executed .","In some embodiments, the determination  of whether or not the function call is allowed may consider additional information. Such additional information may include a context from which the function call  is received, such as in a batch processing context, a command line context, a context where the function call is embedded within a script or compiled application, and other context from which the function call  may be received. The additional information may also, or alternatively, include a digital signature, user ID, or other authentication information that may be received with or obtained within a computing system with regard to the function call . In such embodiments, the authentication information may be used to set permission profiles that may allow certain users, devices, or applications to make the function call  while other users, devices, or applications may not be allowed.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2","b":["200","200","204","206","204","206","206","206"]},"The application , in some embodiments, may be the ADOBE ACROBAT\u00ae application or the ADOBE READER\u00ae application developed by ADOBE SYSTEMS INCORPORATED of San Jose, Calif. However, in other embodiments, the application  may be a web browser application, a page authoring or reading application, a spreadsheet application, or other application that may include a scripting host  or API that is capable of receiving function calls from a data item, such as a document, consumed by the application or from another source. In other embodiments, the application  may be an operating system with a scripting host  included therein or added on through a plug-in or other software that may be installed to augment the functionality and or services of the operating system.","The application  is operable to receive a document  including scripts. The application  consumes the document , such as by generating a view based on at least a portion of content included in the document. One or more scripts within the document , when encountered or triggered within the application, are forwarded as function calls to the scripting host . The scripting host  receives the function calls and performs a validation for each function to validate that the respective individual functions are authorized for execution.","The scripting host , in some embodiments, upon receipt of a function call may perform the method  of . This may include retrieving a privilege indicator from a repository  of external scripting function representations and settings. The retrieving may include retrieving a single indicator based on the individual function being evaluated by the scripting host prior to execution of the function. The retrieving may instead include loading the repository  into a memory upon instantiation of the scripting host  and reading directly from the memory. In some embodiments, the repository  may be one or more tables in a database, one or more files stored on a storage device upon which the application  executes, data stored on a remote data storage device accessible over a network, or other storage location and mechanism.","In some embodiments, the document  including the scripts may be a signed document including a digital signature issued by a certificate authority . In such embodiments, the scripting host  may submit a verification request to the certificate authority  to receive an indication back as to the veracity of the digital signature. If the signature is valid, the function may be allowed to execute. In other embodiments, the repository may include function privilege information at the granularity of a digital signature, such as by a digital signature alone or a digital signature in combination with one or more other data elements. The one or more other data elements may include a function, a context from which the function was called, an application from which the function was called, a time of day, and other data elements.","In other embodiments, a user identifier (user ID) may be used instead of or in combination with a digital signature and the user ID may be verified, at least in part, through conventional user ID and password mechanisms. For example, the document  may be signed with a digital signature and be accessed by a particular user with a user ID. The repository  may include data indicating the user, according to the user ID, is allowed performance of a certain function. The scripting host may receive a function call from a document script while the user is viewing a document signed with a digital signature. The scripting host may first submit a verification request to the certificate authority . A response from the certificate authority  will be received. If authorized, the scripting host may then retrieve one or more privilege indicators from the repository  based on two or more of the digital signature, the user ID, the function called, and the context from which the function is called (i.e., from within the application while viewing the document ).","The external scripting function representations and settings stored in the repository  may be modified by a human user or by a logical user, such as an updating program or process that retrieves or receives (e.g., pushed) function representations and settings from a remote location. The human user may be a system administrator or other human user. The logical user may retrieve or receive updates on a scheduled periodic basis, upon startup of the application , upon occurrence of an event defined within the application, or at one or more of these or other times. Modification of the external scripting function representations and settings stored in the repository is performed to disable and enable specific functions for execution. Disabled functions are not allowed to execute within the scripting host .","Through the setting of function-level execution privileges, functions that are found or otherwise believed to be exploitable for nefarious purposes can be disabled. However, some embodiments also provide control mechanisms to control execution of functions that may be exploitable only under certain circumstances, such as when a function may be exploitable in one context but not others. For example, calls of an exploitable function from a particular exploitable context can be prevented while still allowing the exploitable function to be called from non-exploitable contexts or contexts where the function is unlikely to be exploited. Further, some embodiments also provide control mechanisms where function calls from, or flowing from, documents signed by trusted sources or accessed by trusted user may be executed while function calls from non-trusted sources or users are not allowed.","As briefly mentioned above, the function representations and authorization settings  may be embedded within the scripting host . However, in other embodiments, the function representations and settings  may be externalized from the scripting host , thereby allowing for easy and quick modification of the function representations and settings .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3","b":["300","300","300"]},"The example method , as illustrated, includes receiving  a script for execution within a scripting host of an application executing on a processor of a computing device and identifying  a function called within the received  script. The method  further includes retrieving , from a memory, a security setting representation of the identified  function and, based on the retrieved security setting representation indicating that the identified function is not allowed, preventing  execution of the identified  function. Preventing  execution of the identified  function may include returning an exception in the received  script or halting further execution of the received  script entirely. In other embodiments, preventing  execution of the identified  function may cause virtual execution of the identified  function. For example, the scripting host may commonly receive certain function calls that provide a predictable return or other result or action. In such instances, the scripting host may provide the predictable return or other result or action without executing the identified  function.","In some embodiments, the security setting representation includes an entry for at least one scripting host function to be prevented  from executing. The security setting representation typically includes data stored in a data structure holding configuration data for the computing device. Examples of such data structures are illustrated and described herein with regard to , , and . In one embodiment, the data structure is a registry of an operating system executable on the computing device. In other embodiments, the data structure may include one or more files, tables, or network accessible resources. The data may be stored in a textual form, such as in eXtensible Markup Language (XML) documents or character columns of database tables. In other embodiments, the data may be stored as binary representations.","In some embodiments, the method  may further include identifying a context from which the identified  function is called within the script. Such contexts may include the calling of the function from within content, such as a document, retrieved from a local storage location such as a hard disk, or from a trusted or non-trusted network location, such as a web site. The context may also be the calling of the function from a command line or scripting console of the application or from a batch program that utilizes the scripting host of the application. In such embodiments of the method , the retrieving  of the security setting representation of the identified function  may include retrieving  the representation as a function of the identified context and the identified  function.","Some embodiments of the method  may also include evaluating, within the scripting host, a document including the script to identify a source of the document, such as a particular storage location or universal resource identifier (URI) such as a universal resource locator (URL) from which the document was retrieved or received. The source may be identified by the application, metadata of the document, a digital signature or other security data included within or referenced by the document, as specified by a human user, or otherwise known or determined by the application or scripting host. Some such sources may be known as trusted sources. Trusted sources may be sources identified within an organization, by a trusted third party, specified by a user, or otherwise known. The scripting host or the application may include functionality to determine if the source of the document is trusted based on such known trusted sources, such as by querying a local or remote trusted source service or data store. In some such embodiments, when the source of the document is a trusted source, the method  may include executing all scripts in the document without retrieving the security setting representation of the identified function.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["400","400","400"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5","b":["500","500"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6","b":["600","600"]},"The data structures , ,  of , , and  include data that may be accessed by a scripting host when performing one or more of the embodiments described herein. Although the data structures , ,  of , , and  are illustrated and described in a table-like manner, the data may be stored in other manners depending on the particular embodiment. The data structures , ,  of , , and  may individually be stored locally on a computing device upon which the respective host executes or one or more other locations. Such other locations may include database servers, file servers, or other data storage locations that may be accessible by a computing device upon which the respective host executes.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7","b":["700","700","700","702","700","704","702","706","704","702","702","706","704","702","706","700","708","702","710","700"]},"In cases where the determined  source is unknown or the source is determined  to be an untrusted source, the method  include identifying  functions of the script before execution. For each identified  function, the method  obtains  a security setting representation, such as from one of the data structures ,  illustrated in  or . Based on the obtained  security setting representation, a determination  is made if the identified  function should be allowed to execute. If the identified  function is allowed, the function is executed . If the function is not allowed, the function is prevented  from executing. In either case, the method  then determines  if further functions remain in the script of the document  for execution consideration. When further functions do exist in the script, the method returns to indentifying  the next function and proceeds through the method  accordingly. When there are no further functions in the script of the document , execution of the method  ends .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 8","b":["810","802","804","812","814","804","806","808","810","806","808","812","814","810","816","818","820"]},"Machine-readable instructions stored on a machine-readable medium are executable by the one or more processing units  of the computer . A hard drive, CD-ROM, DVD-ROM, and RAM are some examples of articles including a machine-readable medium. For example, a content consuming application  with a scripting host capable of preventing execution of individual function calls included within a document or other content according external scripting function representation and settings included within a data structure . The data structure  may be stored in one or more of the memory , non-removable storage , removable storage , other memories and storage device of the computer  that are not illustrated, at a location accessible via the communication connection , or other location.","One example embodiment in the form of a machine-readable storage medium, such as non-removable storage  or removable storage  includes instructions stored thereon. When the instructions are executed by the one or more processing units , the instructions cause the computer  to receive a document in a computing application, such as the content consuming application . The received document may include a script that is executable by a scripting host of the computing application. The instructions may further cause the computer to identify a source of the document and when the source is determined to be either unknown or known, but not from a trusted source, function calls of the script are then evaluated prior to execution within the scripting host. Such evaluation may be performed by identifying a function called and obtaining a security setting representation of the identified function. When the obtained security setting representation indicates the identified function is not allowed, execution of the identified function is prevented.","In some such embodiments, obtaining the security setting representation of the identified function includes passing an identifier of the identified function to an object, which may be local to the computer or remote, and receiving, from the object, an indication of whether to allow the function to be executed. Another example embodiment is in the form of a system. The system in such embodiments includes at least one processor and at least one memory device coupled to a bus. The memory device holds a document including a script. The system further includes an application with a scripting host for processing of scripts included in documents or other data consumed by the application. The application may be held in the memory device(s) or other memory or storage device of the system. The application is executable by the processor(s) to extract scripts included within a document and provide those scripts to the scripting host as directed by the document and scripts within the document. The scripting host may then identify a function called within the script prior to execution of the function and retrieve, from the memory device(s), a security setting representation of the identified function. When the retrieved security setting representation indicates the identified function is not allowed, the scripting host prevents execution of the identified function.","Another embodiment in the form of a method includes retrieving, from a computer-readable storage medium, and executing instructions on a computing platform to retrieve security settings of functions callable within a scripting host, the computing platform including at least one processor to execute the instructions. The method further includes retrieving, from the computer-readable storage medium, and executing instructions on the computing platform to capture scripting host function calls prior to execution by the scripting host. Based on the retrieved security setting representation indicting that the captured function is not allowed, executing instructions on the computing platform to prevent execution of the captured function. In instances where there is no security setting representation for a captured function, a default setting may apply. Such as default setting specifies how to handle such unrepresented for functions. For example, the default setting may specify to allow function execution or prevent function execution. In the above description, reference is made to the accompanying drawings that form a part hereof, and in which is shown by way of illustration specific embodiments in which the inventive subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice them, and it is to be understood that other embodiments may be utilized and that structural, logical, and electrical changes may be made without departing from the scope of the inventive subject matter. The following description is, therefore, not to be taken in a limited sense, and the scope of the inventive subject matter is defined by the appended claims.","Numerous specific details are set forth herein to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses, or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter. Some portions of the description are presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is here, and generally, is considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, it is appreciated that throughout this description, discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing platform, such as a computer or a similar electronic computing device, that manipulates or transforms data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","Thus, the functions or algorithms described herein are implemented in hardware, software, or a combination of software and hardware in one embodiment. The software comprises computer executable instructions stored on computer readable media such as memory or other type of storage devices. Further, described functions, methods, and elements thereof may correspond to modules, which may be software, hardware, firmware, or any combination thereof. Multiple functions are performed in one or more modules as desired, and the embodiments described are merely examples. For example, the method  of  may include one or more modules that operate in conjunction with one another to implement the method in a system. In an example system, there is a receiving module to receive  scripts, an identification module to identify  functions called within scripts received by the receiving module, and a retrieving module to retrieve  a security setting representation of a function identified by the identification module. An execution module is also included in some such embodiments that is operable to either allow or prevent execution of an indentified function by a scripting host based on a retrieved security setting representation retrieved by the retrieving module for a function identified by the identification module.","The software, which may be in the form of a software module, is executed on a digital signal processor, ASIC, microprocessor, or other type of processor operating on a system, such as a personal computer, server, a router, or other device capable of processing data including network interconnection devices. Some embodiments implement the functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules, or as portions of an application-specific integrated circuit. Thus, the exemplary process flow is applicable to software, firmware, and hardware implementations.","In the foregoing Detailed Description, various features are grouped together in a single embodiment to streamline the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments of the inventive subject matter require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus, the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
