---
title: In-process intermediary to create virtual processes
abstract: In one embodiment, the tools and techniques can include intercepting with an intermediary module in a running non-virtual process a request from the running non-virtual process to create a requested non-virtual process. In response to the request being intercepted, an appropriate virtual process corresponding to the requested non-virtual process can be identified. In addition, a virtual environment that is configured to host the virtual process can be prepared and the virtual process can be added to the virtual environment. Finally, the request can be fulfilled with the virtual process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924963&OS=08924963&RS=08924963
owner: Microsoft Corporation
number: 08924963
owner_city: Redmond
owner_country: US
publication_date: 20090331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Application or process virtualization software can decouple applications, which can each include one or more running processes at runtime, from an underlying operating system. Thus, application virtualization can typically allow applications to be run without the need to visit a particular physical machine where the application or is installed. For example, a virtual application package that includes the application and the application's own set of virtual environment configurations may be provided on-demand over a network or on a removable storage device.","A virtual environment isolates one or more virtual applications or processes in the environment from applications or processes outside the environment (e.g., the underlying operating system and\/or one or more other applications or processes running on the operating system outside the virtual environment). A virtual environment also facilitates access by the one or more applications or processes within the virtual environment to resources outside the virtual environment, such as resources managed by the underlying operating system. Thus, application or process virtualization typically includes two aspects: isolation and resource management. Isolation typically includes keeping a namespace within the virtual environment separate from one or more namespaces outside the virtual environment. Resource management typically includes managing resources in a way that allows processes in the virtual environment to run properly despite the isolation, and the resources are typically managed in such a way that processes in the virtual environment are unaware of the virtualization.","Because of the isolation aspect of virtualization, a virtual environment can provide a layer of indirection between the underlying operating system and a virtual process in the virtual environment. Once a virtual process is running in the virtual environment, communications can be translated between the virtual and non-virtual environments, as is done with existing application virtualization software.","It can be difficult for a running non-virtual process to create a new virtual process in a natural way because there is not yet a translation or indirection scheme set up for the new virtual process. Some application virtualization software has dealt with this type of virtual process creation by having a surrogate intercept new process creation application programming interface (API) calls that have been sent from initiating non-virtual processes. If available virtual processes can fulfill the process creation calls, the surrogate can be used to invoke procedures to create the corresponding virtual processes in appropriate virtual environments.","Whatever the advantages of previous tools and techniques for creating virtual processes, they have neither recognized the virtual process creation tools and techniques described and claimed herein, nor the advantages produced by such tools and techniques.","In one embodiment, the tools and techniques can include intercepting with an intermediary module in a running non-virtual process a request from the running non-virtual process to create a requested non-virtual process. In response to the request being intercepted, an appropriate virtual process corresponding to the requested non-virtual process can be identified. In addition, a virtual environment that is configured to host the virtual process can be prepared, and the virtual process can be added to the virtual environment. Finally, the request can be fulfilled with the virtual process.","In another embodiment of the tools and techniques, a running non-virtual process can be configured to initiate a process creation request to create a requested non-virtual process. An intermediary module in the running non-virtual process can be configured to intercept the process creation request. In addition, a virtualization agent can be configured to receive from the intermediary module a notification of the process creation request, to prepare a virtual environment, and to add to the virtual environment a virtual process corresponding to the requested non-virtual process.","In yet another embodiment of the tools and techniques, a process creation request to create a non-virtual process can be initiated in a running non-virtual process. The process creation request can be intercepted with an in-process intermediary module before the request is passed from the running non-virtual process. It can also be determined whether the process creation request corresponds to an available virtual process. If the process creation request corresponds to the available virtual process, then the virtual process can be added to a virtual environment, and the process creation request can be fulfilled with the virtual process.","This Summary is provided to introduce a selection of concepts in a simplified form. The concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Similarly, the invention is not limited to implementations that address the particular techniques, tools, environments, disadvantages, or advantages discussed in the Background, the Detailed Description, or the attached drawings.","Described embodiments are directed to techniques and tools for improved creation of virtual processes from non-virtual process creation requests. Such improvements may result from the use of various techniques and tools separately or in combination.","Such techniques and tools may include intercepting a non-virtual process creation request (i.e., a process creation request for creation of a non-virtual process) while the request is still in the running process that initiated the request. The non-virtual request can be used to identify an appropriate virtual process, and the virtual process can be added to a virtual environment so that the virtual process can fulfill the non-virtual process creation request. The initiating process may initiate process creation requests in various ways and in response to various types of information, such as user input or information received from an operating system or from another process. Because the process creation request can be intercepted in the process where the request was initiated and can be used to add a corresponding virtual process to an appropriate virtual environment before the request leaves the initiating process, the request can be fulfilled with the virtual process without relying on an out-of-process surrogate.","In virtual application scenarios, a virtualization utility is typically aware of multiple namespaces, such as a non-virtual system namespace and one or more virtual environment namespaces. A virtual environment typically defines a namespace view, including namespaces that the virtual environment has access to and policies for doing the composition of names corresponding to the namespaces. A virtual process operating within such a virtual environment typically operates as if there were only a single namespace, and the virtualization software typically translates between that single namespace and other namespaces that may be used by non-virtual software, as well as virtual processes operating in other virtual environments. A virtualization agent (such as the virtualization agent in Microsoft's App-V virtualization software) typically manages the lifetime of virtual environments by preparing or creating and shutting down virtual environments, as needed.","The translation scheme between a virtual process in a virtual environment and processes outside that virtual environment is typically not operational until the virtual environment is created and the virtual process is added to the virtual environment. Thus, in existing techniques a running initiating process that initiated a process creation request is typically unable to create the virtual process without the aid of an out-of-process (i.e., outside the initiating process) surrogate. Such an out-of-process surrogate is typically used to intercept a request to create a requested process after the request leaves the process that initiates the request. Because the request has already left the initiating process, such as in the form of a create process API call, the initiating process and\/or the operating system expect the module that receives the API call to be the requested process and to behave as the requested process would behave. Because the surrogate, rather than the requested process, receives the API call, the surrogate typically mimics the behavior of the actual process that was being requested.","Such out-of-process surrogates have several drawbacks. For example, one challenge with such surrogates is trying to maintain the fidelity of what is originally intended to happen. For example, when an application launches, it can be handed information such as command line parameters, an environment block, or other parameters that are supported by an operating system in the computing environment. Thus, a surrogate typically needs to have functionality to handle those parameters. If a new extension point (i.e., a place in an operating system where code can be registered for the code to be triggered, such as a shortcut extension point, a file type association extension point, a com object extension point, a services extension point (such as an NT services extension point), etc.) is used for launching the application, the surrogate may need to be expanded to include functionality to deal with the new extension point and all the different parameters or metadata that the extension point supports. Some virtualization schemes even have a different surrogate for each extension point.","In addition, one process may directly call (and thereby request the creation of) another process without utilizing an operating system extension point. To launch a virtual process corresponding to the called process in that situation, a surrogate for that particular called process may be used. However, creating such a surrogate for every process that may be called in an application can be extremely difficult, especially for complex applications. In addition, sometimes a calling process in such a situation checks one or more attributes of the called process, such as a version number, file size, or a digital signature. Because the calling process expects the surrogate to actually be the called process, the out-of process surrogate would need to mimic such attributes, which could be very difficult to do.","The tools and techniques for virtual process creation from non-virtual requests described herein can overcome one or more of the drawbacks of using out-of-process surrogates. However, it may be possible to use the tools and techniques discussed below along with out-of-process surrogates in some situations.","The subject matter defined in the appended claims is not necessarily limited to the benefits described herein. A particular implementation of the invention may provide all, some, or none of the benefits described herein. Although operations for the various techniques are described herein in a particular, sequential order for the sake of presentation, it should be understood that this manner of description encompasses rearrangements in the order of operations, unless a particular ordering is required. For example, operations described sequentially may in some cases be rearranged or performed concurrently. Techniques described herein with reference to flowcharts may be used with one or more of the systems described herein and\/or with one or more other systems. Moreover, for the sake of simplicity, flowcharts may not show the various ways in which particular techniques can be used in conjunction with other techniques.","I. Exemplary Computing Environment",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":"100"},"The computing environment () is not intended to suggest any limitation as to scope of use or functionality of the invention, as the present invention may be implemented in diverse general-purpose or special-purpose computing environments.","With reference to , the computing environment () includes at least one processing unit () and memory (). In , this most basic configuration () is included within a dashed line. The processing unit () executes computer-executable instructions and may be a real or a virtual processor. In a multi-processing system, multiple processing units execute computer-executable instructions to increase processing power. The memory () may be volatile memory (e.g., registers, cache, RAM), non-volatile memory (e.g., ROM, EEPROM, flash memory), or some combination of the two. The memory () stores software () implementing an in-process intermediary to create virtual applications.","Although the various blocks of  are shown with lines for the sake of clarity, in reality, delineating various components is not so clear and, metaphorically, the lines of  and the other figures discussed below would more accurately be grey and fuzzy. For example, one may consider a presentation component such as a display device to be an I\/O component. Also, processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of  is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as \u201cworkstation,\u201d \u201cserver,\u201d \u201claptop,\u201d \u201chandheld device,\u201d etc., as all are contemplated within the scope of  and reference to \u201ccomputer,\u201d \u201ccomputing environment,\u201d or \u201ccomputing device.\u201d","A computing environment () may have additional features. In , the computing environment () includes storage (), one or more input devices (), one or more output devices (), and one or more communication connections (). An interconnection mechanism (not shown) such as a bus, controller, or network interconnects the components of the computing environment (). Typically, operating system software (not shown) provides an operating environment for other software executing in the computing environment (), and coordinates activities of the components of the computing environment ().","The storage () may be removable or non-removable, and may include magnetic disks, magnetic tapes or cassettes, CD-ROMs, CD-RWs, DVDs, or any other medium which can be used to store information and which can be accessed within the computing environment (). The storage () stores instructions for the software ().","The input device(s) () may be a touch input device such as a keyboard, mouse, pen, or trackball; a voice input device; a scanning device; a network adapter; a CD\/DVD reader; or another device that provides input to the computing environment (). The output device(s) () may be a display, printer, speaker, CD\/DVD-writer, network adapter, or another device that provides output from the computing environment ().","The communication connection(s) () enable communication over a communication medium to another computing entity. Thus, the computing environment () may operate in a networked environment using logical connections to one or more remote computing devices, such as a personal computer, a server, a router, a network PC, a peer device or another common network node. The communication medium conveys information such as data or computer-executable instructions or requests in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired or wireless techniques implemented with an electrical, optical, RF, infrared, acoustic, or other carrier.","The tools and techniques can be described in the general context of computer-readable media. Computer-readable media are any available media that can be accessed within a computing environment. By way of example, and not limitation, with the computing environment (), computer-readable media include memory (), storage (), and combinations of the above.","The tools and techniques can be described in the general context of computer-executable instructions, such as those included in program modules, being executed in a computing environment on a target real or virtual processor. Generally, program modules include routines, programs, libraries, objects, classes, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer-executable instructions for program modules may be executed within a local or distributed computing environment. In a distributed computing environment, program modules may be located in both local and remote computer storage media.","For the sake of presentation, the detailed description uses terms like \u201cdetermine,\u201d \u201cchoose,\u201d \u201cadjust,\u201d \u201cintercept,\u201d and \u201coperate\u201d to describe computer operations in a computing environment. These and other similar terms are high-level abstractions for operations performed by a computer, and should not be confused with acts performed by a human being, unless performance of an act by a human being (such as a \u201cuser\u201d) is explicitly noted. The actual computer operations corresponding to these terms vary depending on the implementation.","II. System and Environment for Virtual Process Creation from Non-Virtual Requests",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","200","210","210","212","210"]},"The process creation request () can be intercepted by an in-process intermediary module () (a module in the initiating process () that intercepts process creation requests to facilitate creation of virtual applications) before the request () leaves the initiating process (). For example, the request () can be intercepted before it leaves the initiating process () in the form of a process creation API call. This interception may be facilitated by including the in-process intermediary module () as a component in a call stack of the initiating process (), so that calls from the initiating process to other processes can be passed through the in-process intermediary module () before they are passed out of the initiating process (). An in-process intermediary module () may be included in multiple different processes running on a particular machine by including code for the in-process intermediary module () in general application initiation files, such as the dynamically linked list files specified in the AppInit_DLLs value commonly used in some versions of the Microsoft Windows\u00ae operating system.","When the in-process intermediary module () intercepts the process creation request (), the intermediary module () can send a virtual process query () to a virtualization agent () in the same computing environment (). The virtual process query () can include information to identify the process that the process creation request () seeks to create. For example, the virtual process query () can include a global name such as a path and filename for the process, such as c:\\Program Files\\Microsoft Office\\Office12\\WINWORD.exe for Microsoft Word word processing software. Other types of identifying information may be used in addition to or instead of such a global name. For example, in a call for an Internet Authentication Service application, the call may include an identifier, such as a globally unique identifier (GUID) that is not part of the application's path or filename. Whatever the identifying information, it can be used by the virtualization agent () to determine whether the requested process corresponds to an available virtual process, and if so, to find () a virtual package corresponding to that virtual process. For example, the identifying information can be located in a look-up table that provides information for virtual packages corresponding to particular processes. A virtual package is a package that includes the information for a virtual environment and one or more virtual processes to run in the virtual environment. However, the information for a virtual environment and\/or a virtual process may be packaged in some other manner. The virtualization agent () can include one or more virtualization modules, such as one for each subsystem that is virtualized (e.g. COM+, Windows Management Instrumentation, etc). For many subsystems, special knowledge about the subsystem process may be used to determine if the subsystem should be virtualized, and in which virtual environment. If the virtualization agent () is unable to identify the process as one that should be virtualized, it can give each virtualization module a chance to determine if the process is one that should be virtualized. If a virtualization module determines that the process is one that should be virtualized, that virtualization module can return the appropriate virtual environment identifier to the virtualization agent ().","If there is no available virtual process that corresponds to the process creation request (), then the intermediary module () can be notified of this, and the creation process (the process of creating the requested process) can be allowed to proceed with creating a non-virtual process. If an available virtual process corresponds to the requested process, then the virtualization agent () can determine whether a virtual environment () suitable to host the virtual process has already been prepared or created. If not, then the virtualization agent () can prepare or create () the virtual environment () in a standard manner. Whether the virtual environment () was already prepared, or whether it is prepared by the virtualization agent () in response to the virtual process query (), the virtualization agent () can return a virtual environment identifier () to the intermediary module () in the initiating process ().","Upon receiving the virtual environment identifier (), the intermediary module () can create and suspend () the requested new process as a non-virtual process (). Prior to the creation and suspension (), some preparatory steps for the creation may have already been taken by the initiating process () and\/or the underlying operating system, although such steps would typically not have resulted in the creation of a requested process. In one implementation, the creation and suspension () of the new non-virtual process () can proceed in a standard way, such as to produce a process creation API call (), which can be processed by a process creation module () in an operating system (). Associated parameters (), if any, can be passed to the new non-virtual process (). This creation and passing of parameters can be done in the same manner as is currently done with the creation of non-virtual processes. Once created, the new non-virtual process () can be suspended.","After the new non-virtual process () is created and suspended (), the intermediary module () can pass an add process request () to the virtualization agent (). The add process request () can prompt the virtualization agent () to add () the new non-virtual process () to the appropriate virtual environment () as a virtual process (), such as in the same way that applications are currently added to virtual environments with existing application virtualization software. The virtual process () can already include the parameters () that were passed to it previously when it was a non-virtual process (), so that it can act on those parameters when it is later resumed.","The code for the virtual environment () and the virtual process () can be provided as part of a virtual package that defines the settings and configurations for the virtual environment () and one or more virtual processes () to be run in the virtual environment. Alternatively, the code for the virtual environment () and the virtual process () may be provided in some other manner.","Adding the virtual process () to the virtual environment () can result in the computing environment () being configured so that calls to the requested non-virtual process are redirected by the virtualization software to the virtual process (). This can be done with available application virtualization software, such as Microsoft's App-V software. The virtualization agent () can pass a notification () to the intermediary module (), notifying the intermediary module () that the virtual process () was successfully added to the virtual environment (). In response to the notification (), the intermediary module () can resume () the virtual process (), if such resumption () is needed. For example, resumption () of the virtual process () may not be needed if the initiating process () had suspended the new process for some other reason, and the initiating process () was not yet ready to resume the new process. In one implementation, the resumption () of the virtual process () can proceed in a standard way, such as producing a process resume API call (), which can be processed by a process resume module () in the operating system () to resume the virtual process () in the virtual environment ().","Because the initiating process () can make the creation API call () to create the non-virtual process () that is added to the virtual environment () as the virtual process (), rather than making a call that creates a surrogate, the drawbacks associated with such surrogates can be avoided. For example, the initiating process () can interact with the virtual process () as it normally would if the associated non-virtual process were running. The initiating process () can make its normal calls to the virtual process (), verify digital signatures or other information about the virtual process (), etc. Such calls and verifications can be handled normally by the virtual process () because the virtual process () is the same process that the initiating process () intended to call (although it is running in a virtual environment ()). Accordingly, a sophisticated surrogate between the initiation process () and the virtual process () is not needed.","Each of the components (, , , , , , etc.) illustrated in  and discussed above can reside in memory, such as the memory () discussed above with reference to . In addition, each of the components (, , , , , , etc.) illustrated in  can be executed by one or more processing units, such as the processing unit () discussed above with reference to , to perform as described above. The techniques discussed below can also be executed with one or more such processing units.","While the particular environment () has been described as an example, it should be appreciated that other environments and process creation techniques may also be used. For example, the environment () may include multiple virtual environments running on a single operating system, or some other configuration of operating system(s) and virtual environment(s). In addition, the communications and processes within the environment () may be ordered or arranged differently than in the description above. As an example of this reordering or rearranging, a virtualization agent may create the virtual environment and add the virtual process to the virtual environment before returning an identifier for the virtual environment to the initiating process.","III. Techniques for Virtual Process Creation from Non-Virtual Requests","The techniques of  discussed below can be performed in an environment such as the computing environments ( and ) discussed above with reference to , or in some other environment.","Referring to , a virtual process creation technique will be discussed. A non-virtual process creation request can be intercepted () while the request is still in a process that initiated the request. For example, the request can be intercepted by an intermediary module situated in a call stack of the initiating process. A virtual process corresponding to a process requested by the process creation request can be identified (). For example, this identification () can include passing a process identifier to a virtualization agent and having the agent look up the process identifier in a look-up table. Alternatively, the identification () can be done in some other way, such as by having an intermediary module in the initiating process look up a process identifier in a look-up table. A virtual environment can be prepared (). This may be done in response to the process creation request, or the environment may have been prepared previously.","The virtual process can be added () to the virtual environment so that the process creation request can be fulfilled () by the virtual process, rather than being fulfilled by a requested non-virtual process. This fulfilling () can include running the virtual process in the virtual environment according to appropriate parameters so that the virtual process can behave as would be expected from the context of the request in the initiating process. For example, the virtual process may load an associated document or file, or launch in a particular mode.","Referring now to , another virtual process creation technique will be discussed. A process creation request for creation of a requested non-virtual process can be initiated () in an initiating process. The request can be intercepted () while the request is still in the initiating process, and it can be determined () whether the requested process corresponds to an available virtual process. If not, or if it is more preferable to launch the non-virtual process than the virtual process, then non-virtual process creation can continue (). If the requested non-virtual process does correspond to an available virtual process and it is preferable to launch that virtual process, then it can be determined () whether an appropriate virtual environment for the virtual process is already prepared. If not, then the virtual environment can be prepared (). Whether the appropriate virtual environment is prepared before or after the process creation request is intercepted (), the virtual process that corresponds to the requested process can be added () to the virtual environment. In addition, the process creation request can be fulfilled () with the virtual process in the virtual environment. For example, the initiating process can send a process creation API call, which can include associated parameters. The parameters can be received by the virtual process, which can result in the virtual process running in a particular way, such as loading a particular file, launching in a particular mode, etc. In some situations, fulfilling () may include the virtual process merely running in a default mode.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
