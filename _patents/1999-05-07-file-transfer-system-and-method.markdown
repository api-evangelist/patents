---
title: File transfer system and method
abstract: A system for transferring files between a source location and a target location can transfer different portions of the file across two or more logical channels. The portions of the file transmitted over the logical channels can be transmitted independently. In addition, the portions of the file can be transmitted over one or more logical channels asynchronously. The logic controls for managing the file transfer can be distributed over multiple systems located at separate locations and operating independently. During the transfer of the file, markers are generated that point to the location in memory where the file is stored. These markers obviate the need to store the file in a buffer or an archive log during the file transfer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06850962&OS=06850962&RS=06850962
owner: CommerceQuest, Inc.
number: 06850962
owner_city: Tampa
owner_country: US
publication_date: 19990507
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The invention relates generally to the field of file transfers, and more specifically, to a system and method for transferring files between computers asynchronously and across multiple logical connections.","The advent of the Internet has spurred the generation of a number of protocols for transferring files or, more basically, data objects between two locations. The most commonly used protocols include the file transfer protocol (FTP), the transfer control protocol\/Internet protocol (TCP\/IP) and Telnet. To transfer a file, each of these protocols uses a point to point communication link between the source location of the file being transferred and the target location to which the file is being transferred. In general, the request for the file transfer must be made from the source system. The file is then transferred across the point to point communication link according to the rules of the particular protocol. For example, the protocols may break down the file being transferred into a number of segments that are sent one after the other instead of as a single large bundle.","For each of these protocols, a file is transferred over a single logical connection, which corresponds to the communication link between the source and target systems. In addition, the transmission of the file is performed synchronously, with the target system sending a confirmation after each segment of the file is sent. In part due to the synchronous nature of the file transfer, the source and target systems must both be operating and communicating with each other for the transfer to begin processing. The communication must also stay operational for the duration of the file transfer or processing must be restarted.","When making a file transfer between two locations, the data in the file is typically stored in a disk that serves as an archive log. The purpose of archive logs is to store the data being transferred so that, in the event of a problem or an error during the transfer, the data can be resent by transferring it from the archive log. Archive logs are costly, however, and the protection of large or numerous data files can diminish system performance.","Briefly, consistent with the present invention, a system for transferring a file from a first location to a second location comprises a logic control for establishing at least two logical channels between the first and second locations and a transmission device for transmitting at least a first portion of the file over a first logical channel and for transmitting a second portion of the file over at least a second logical channel independently of the transmission of the first portion of the file.","In a further aspect of the present invention, a system for transferring a file from a source location to a target location consistent with the present invention comprises first logic control for determining the status of the transfer of the file from a source location to a target location and generating determined status information, second logic control for generating a marker which holds a pointer to the source location of the data file, and third logic control for retransmitting the file from the source location indicated by the pointer in the marker to the target location if the determined status information indicates that the transfer was incomplete.","In yet a further aspect of the invention, a file transfer system consistent with the present invention comprises a requesting computer for submitting a request to transfer a data file, a managing computer for receiving the transfer request, identifying the location of the data file, and passing the transfer request to that location, a source computer, identified as having the data file by the managing computer, for receiving the transfer request from the managing computer and transferring the data file to a target location, and a target computer, corresponding to the target location, for receiving the transferred data file from the source computer.","In another aspect of the invention, a system for transferring a file from a first location to a second location consistent with the present invention comprises a logic control for receiving a request to transfer the file from the first location to the second location, and a transmission device for transmitting at least a first portion of the file asynchronously from a transmission of a second portion of the file.","The present invention will be described in the context of a specific embodiment, but the invention is not intended to be so limited.",{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 1A","b":["100","100","10","20","22","30","50","30","32","50","52"]},"File transfer system  uses one or more logical channels across each physical channel to transfer a file from source node  to target node . The file is submitted to a message transport system, such as MQSeries (a product of IBM), which transmits the data corresponding to the file to be transferred across a physical link.",{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 2","b":["100","30","50","10","205","10","100"]},{"@attributes":{"id":"P-00023","num":"00023"},"figref":["FIG. 1B","FIG. 1B"],"b":["100","140","150","150","152","154","156","158","160","162","164","166","168","170","172","176","178"]},"FTFQMgrsInfo  identifies which queue manager, defined below with respect to , to connect to on the source or sending system, which managing node to use, and which queue managers to use on the sending and target nodes. FTFSourceFileInfo  provides all of the details of the source file, i.e., the file to be transferred. FTFTargetFileInfo  provides all of the details of the target file, which corresponds to the file that is stored after being transferred to the target node , including allocation options. FTFJobInfo  includes details regarding how the file transfer is to be processed, including binary, ASCII, compression, priority, persistence and stage options. FTFUserInfo  provides information about the user making the file transfer request.","FTFBool  is a Boolean field which determines whether a reply is to be generated and sent back to the user at the requesting node  at the end of the file transfer. FTFULong  and  identify set time periods. Where FTFULong  determines the time at which the transaction should expire, and FTFULong  determines how long the interface should await a reply. FTFChar  is a character string that identifies which configuration file to use. The configuration file is used to inform the file transfer system  what queues to use, what pool rules to use (e.g. round robin, overflow, etc.), status subsystem rules (on\/off, persistent\/non-persistent), expiration conditions, and other rules as may be necessary.","FTFLong  sets forth which exits are installed. There can be, for example, eight different exit points that are called at strategic points during a file transfer including: pre-transaction initiation; sender pre-file access security check; sender pre-file read; sender post-file submit to a message queuing system; receiver pre-file access security check; receiver pre-file write; receiver post-file write; and post-transaction completion. If an exit is specified, the exit will be called under any circumstances. The exit is given full file transfer transaction control. In other words, the users installed exit can stop the transfer or allow the transfer to continue.","Additionally, a special exit called a portal allows a customer module to bypass the internal file transfer I\/O of reading and\/or writing a file. As a result, a user does not have to be concerned with the interfacing with the message transport system, the network, data integrity or designing for performance. File transfer system  provides a simple API to submit data or to retrieve data from the file transfer.","Exits and portals work by demand loading a specified dynamic link library with a specified entry point. However, the capabilities provided by exits and portals include the internal management of resources, memory snap shots, access to the status sub-system and tracking of the users custom exit activity to maintain the integrity of the file transfer transaction.","Internally, file transfer system  creates a work area in which the exit or portal being called is registered. Additionally, all resources are audited and state information is recorded. The exit is called or an API request is received from a portal, at which time the user has the control to stop or continue the transaction. Upon receipt of this information, file transfer system  determines the now current state. All work areas are cleared based on state information. If file transfer system  receives the codes to continue, data markers are updated and processing continues. If file transfer system receives the codes to discontinue, data markers are updated and the processing will terminate with the proper failure conditions and the transaction is ended.","The exits and portals are dynamically spawned when needed and operate in the same address space as file transfer system . This creates an environment where file transfer system  and the custom exits operate as a single program versus the loosely coupled approach of interfacing with external modules.","FTFExitInfo  provides optional input data for the exits to use during processing. FTFAS400FileInfo  provides the AS\/400 personality, which is a simple way of describing the file attributes and rules that the file transfer system  will abide by when reading or writing a file. FTFChar  is a character string that serves as an identifier for the transaction. Lastly, FTFChar*cq  is a character string that sets forth where the file holding the configuration information, discussed above, is stored in a queue or in a file.","After the user enters the file transfer request, it is transferred as a control message to a designated managing node , which logs and manages the control messages corresponding to the file transfer requests (step ). Managing node  examines the received control message to determine how to process the file transfer. Based on the information in the control message, including the header data, managing node  identifies the file to be transferred, the location of the file to be transferred, and the location to which the file is being transferred (step ). The location of the file to be transferred corresponds to the source node , and the location to which the file is being transferred corresponds to the target node . Using this identified information, managing node  passes the file transfer request to source node  (step ). In addition, managing node  places a transaction marker in sync queue  located in managing node  and submits status messages to file transfer system . A system log also keeps track of all failure information.","Upon receiving the file transfer request from managing node , source node  examines the request to identify the file in source memory  to be transferred and the location to send the file (step ). Source node  then transfers the control message and the identified file, also referred to as the source file, to the identified location, which is the target node  (step ). The source file can be, for example, a data file, an executable file, an application program, or any other form of information that can be stored electronically on disk or any other form of storage media known to one skilled in the art. Source node  also maintains the status of the transfer by placing a transaction marker in a sync queue  (shown in FIG. ), replies to managing node  that is has processed the file transfer request, and generates status messages submitted to file transfer system .","To send a source file to target node , source node  can break down the file into a plurality of independent data messages, each having a message structure including header data and application data. Each data message includes a set amount of information from the file, such as 256K, which corresponds to the application data. The header data in each independent data message includes a message identification, a unique correlation identification (ID), the name of the destination of the message, and other message characteristics, such as those described above in the description of the message structure of FIG. B. The message identification, which can be stored in a header field MQMD.MessageID, associates each data message with the control message corresponding to the file transfer request. The correlation ID, which can be stored in a header field MQMD.CorrelationID, is necessary for determining the order in which the data messages are to be reassembled to form the original file. The control message and the data messages are assigned to one or more of a plurality of transmission queues present in source node , each transmission queue being assigned to a particular logical channel. The messages can be assigned to the transmission queues in any manner including, for example, filling the transmission queues in a round robin procedure, filling each transmission queue a certain amount and then filling the next one, filling a transmission queue until it is full and then filling the next one, placing messages in a transmission queue based on the quality of service (QoS) of the channel associated with that queue, or assigning messages based on a priority associated with a transmission queue or in accordance with some other convenient protocol. The manner that the messages are assigned to the queues can be determined from the FTFJobInfo field .","The messages sent by source node  are received by target node  in one or more destination queues (step ). To reconstruct the source file, target node  uses the control message to collect all of the data messages from the destination queues that are associated with the transmitted source file and extracts the file information from the application data in each data message (step ). In particular, target node  uses the control message to extract the message ID and correlation ID sequence, which can then be used to retrieve the corresponding data messages from the destination queues. Target node  then combines the file information in the proper order to create the target file based on the unique correlation IDs stored in the header data of each data message (step ). The target file is then stored in target memory  (step ).","Each of the nodes in file transfer system  can operate independently and asynchronously from the operation of any of the other nodes and can operate on different and independent systems or platforms. The independent requesting node  concept allows a first system to transfer files between any two other systems without being present at either the source or target system. The independent managing node  obviates the need to have managing functions on each of the systems in file transfer system . As a result, each system in file transfer system  only needs the sending and receiving functionality to be able to send and receive files across file transfer system . Each system also preferably includes the requesting functionality of requesting node .","In addition to being completely independent, the functionality of the nodes can be grouped together on a single system. For example, the functionality of requesting node  and managing node  can be implemented on source node  or target node . Alternatively, the functionality of requesting node  can be implemented on one of source node  and target node , and the functionality of managing node  can be implemented on the other of source node  and target node .","During the file transfer, it is possible that one or more of the data messages are not received at target node , such as due to an error or the lapse of a predetermined amount of time. By using the status information generated during the file transfer, the file transfer can be completed without resending all of the data messages. Sync messages, described in more detail below, can be used by any of the nodes involved in the file transfer to determine which, if any, of the data messages has not been received at target node . Control logic can be included at each node which processes the sync messages to determine if a data message has not been received. This control logic then generates a message indicating that the data message has not been received. In response to this message, source node  retransmits the missing data messages or all of the data messages irrespective of what has been sent, depending upon the recovery scenario.",{"@attributes":{"id":"P-00039","num":"00039"},"figref":["FIG. 3","FIG. 3"],"b":["100","30","50","10","20","30","105","110","110","112","114","110","116","118","125","130","110","130","134","136","138","118","138","70","30","50","134","132","125"]},"Queue managers  and  are responsible for providing the message queuing services for the nodes in file transfer system . Each queue manager is an amalgamation of queue definitions, configuration tables, and software components whose operation is based on these definitions. Each queue manager also includes system administration programs which provide many of the configuration and administration elements of the message queuing system. Since file transfer system  can use the message queuing system to transfer files between separate systems, file transfer system  is preferably implemented as a distributed architecture with a queue manager resident on each node of file transfer system .","File transfer applications  and  comprise an interface to initiate any commercial or user written tasks, to be performed by the queue managers  and , using any of a plurality of common programming languages including, for example, COBOL, TAL, Java, C, C, assembly\/ALC, etc. The file transfer application allows a user to select a file to be transferred from any source node  to any target node  in file transfer system .  is a flow diagram of a process for transferring a file using the message queuing system of , consistent with the present invention. For the purposes of the description of , it is assumed that the requesting and managing functionality are implemented in source node . However, it should be understood that this functionality can alternatively be implemented on target node  or implemented independently of source node  and target node .","First, a user at source node  makes a file transfer request using file transfer application  (step ). The file transfer request is processed by file transfer application  to form message  as a control message, which includes the identity of the file to be transferred and the destination to which the file is being transferred. If the file to be transferred was present in a system other than source node , the control message could also include the location of the file to be transferred.","In response to the file transfer request, file transfer application  composes one or more data messages, depending on the size of the file being transferred (step ). As discussed above, each data message generated by file transfer application  includes a portion of the file being transferred to target node , a message ID, a correlation ID, and the destination of the message. Each of the messages created by file transfer application  is passed to MQI  (step ). MQI , which serves as the interface between file transfer application  and queue manager , then passes the messages to message routing and queuing component , which places the received messages in one or more queues resident in message routing and queuing component  (step ).","The queues resident in message routing and queuing component  can be, for example, simple FIFO disk-resident buffers for holding messages, although other queue structures known to those skilled in the art can also be used. Messages that are intended for other applications running on source node , or which have been received from other nodes, are placed in local or destination queues in message routing and queuing component . On the other hand, messages destined for a remote system, such as target node , are placed on transmission queues. Accordingly, the control message and data messages resulting from a file transfer request from source node  to target node  would be placed in one or more transmission queues of message routing and queuing component .","To determine which queue to place the messages in, message routing and queuing component  looks at routing information placed in the header of each message by file transfer application . The routing information can include a queue name and a queue manager name that are used, in part, to determine in which queue to place the message. Each queue name can correspond, for example, to a different logical address of source node . The manner in which a message is placed in a queue is discussed in greater detail below with respect to .","MCP  then transfers the messages from the transmission queues in message routing and queuing component  to target node  (step ). The MCP at each node is responsible for establishing and managing the logical channels between each of its queues and the queues of remote nodes. MCP  supports several transport protocols including, for example, LU6.2, DECnet, TCP\/IP, SNA and others known to those skilled in the art. Messages that are transferred from transmission queues in source node  to destination queues in target node  are transported across one or more channels. Each channel connects one or more transmission queues in source node  to one or more destination queues in target node . The channels between the queues are established by MCP  and MCP . Accordingly, each message transmitted to target node  is received by MCP  and placed in the appropriate destination queue by message routing and queuing component  (step ). File transfer application  then processes the control message and the data messages to extract the file information from the data files and to reassemble the file information as the target file (step ). File transfer application  stores the target file in target memory  (step ).","File transfer system  can transfer a file from source node  to target node  using a single channel or logical connection in a serial fashion, such that each of the messages in a file transfer request are sent one after the other. However, file transfer system  can also transfer a file asynchronously across multiple channels.  is a block diagram of a file transfer system  for transferring a file across multiple channels consistent with the present invention.","As shown in , source node  includes a transmission pool , which includes a plurality of transmission queues (XQ) . Similarly, target node  includes a destination pool , which includes a plurality of destination queues (DQ) . Each transmission queue  in transmission pool  is connected by an independent logical channel  to a one or more of the destination queues  in destination pool . Similarly, a destination queue  can be connected by an independent logical channel  to one or more transmission queues  in transmission pool . Transmission queues  and destination queues  can be implemented, for example, as simple FIFO disk-resident buffers used to hold the messages.",{"@attributes":{"id":"P-00049","num":"00049"},"figref":["FIG. 6","FIG. 4","FIG. 6"],"b":["30","50","30","50","30","50","605","125","610"]},"The generated messages are placed in transmission queues  by message routing and queuing component  of queue manager . Message routing and queuing component  places the messages in the transmission queues  according to a scheme designated by the user or according to a default scheme (step ). As discussed above, the schemes for placing the messages in the transmission queues  include filling the transmission queues in a round robin procedure, filling each transmission queue a certain amount and then filling the next one, filling a transmission queue until it is full and then filling the next one, placing messages in a transmission queue based on the quality of service (QoS) of the channel associated with that queue, or assigning messages based on a priority associated with a transmission queue.","In addition to these schemes, a user can designate the number of logical channels over which to send the messages (step ). As shown in , the user can designate five channels over which to send the messages to target node . If the user, for example, designated that the file transfer had a high priority and to use five logical channels, queue manager  would place the messages in five separate transmission queues , each having an independent logical channel connected to a respective destination queue  in destination pool  of target node . Queue manager  would also give these transmission queues priority in processing by transmitting messages from these transmission queues prior to the transmission of messages in queues of lesser priority.","After placing the messages in respective transmission queues  of transmission pool , the messages from each queue are transferred to the respective destination queue  independently of the messages from the other queues (step ). Not only can the messages be transmitted independently, but they can also be transmitted asynchronously. For example, if the file transfer request resulted in a total of five messages corresponding to the control message and four data messages, each of the messages could be placed in one of the five designated transmission queues . The messages can then be transmitted to destination queues  in any order and at any time. Since file transfer application  reassembles the file based on the correlation IDs of each of the data messages, it does not matter if the data message corresponding to the last portion of the file being transferred is received first or last or is received an arbitrary amount of time before or after any other message associated with the file transfer.","Queue manager  reassembles the transferred file after all of the messages associated with the file transfer request have been received by destination queues  (step ). The transferred file can be reassembled as the target file by extracting the file data from each of the received data messages and ordering each data portion according to the correlation ID of the associated data message. Queue manager  then stores the reassembled file as the target file in target memory  (step ).",{"@attributes":{"id":"P-00054","num":"00054"},"figref":["FIG. 7","FIGS. 1 and 5","FIG. 7","FIG. 7"],"b":["100","10","20","14","16","20","30","36","38","34","50","46","48","44","100","12","12"]},"As discussed above, each node in file transfer system  generates status messages that are sent throughout file transfer system  and are stored by the nodes in their respective status storage. Generally, the status message generated at a particular node is sent to other nodes in file transfer system  that are designated on a distribution list. The status messages can detail the activity of all the components involved in the file transfer, in addition to standard completion codes. As a result, an analysis of the status messages can provide a trace of what has taken place with respect to the file transfer and where a problem may have occurred. Furthermore, each node in file transfer system  can be configured to submit status messages at fixed or variable times or in response to particular events.","The log file at each node, such as log files  and , keeps a log of error and other maintenance information and keeps track of every detail of the file transfer. The log records, like the status messages, can be submitted as messages that are distributed throughout file transfer system . As a result, systems can keep logs of events taking place at remote systems, which enhances the capability of an administrator to provide management and maintenance at a remote system.",{"@attributes":{"id":"P-00057","num":"00057"},"figref":["FIG. 8","FIGS. 2"],"b":["100","4","6","12","805","110","810","815","820","825","830","34","835"]},"The sync message is a transaction marker, which can have an empty or zero byte length in its data portion. Within the header portion of each sync message corresponding to a data message is a pointer to the location of the data in the source file in source memory  that corresponds to the data in the data message. In addition, each sync message stores information about the status of the transmission of its associated message. There are also sync messages that are created that provide information specific to the sender, such as exit processing, persistence and non-persistence markers. Once all of the messages have been generated, the queue manager at the source node controls the transmission of the control message, data messages and all of the sync messages pertaining to the recovery of the file transfer to the target node (step ). The sync messages sent to the target node are also stored in a sync queue, such as sync queue  (step ).","This sync queue system allows all of the data corresponding to the file being transferred to be sent in a non-persistent or non-guaranteed manner. Transmitting the file in a non-persistent manner reduces the processing load for managing a file transfer. Although the control message and begin marker can also be transmitted in a non-persistent manner, they are generally transmitted in a persistent or guaranteed manner to ensure that the target system receives notification that the target system is going to receive a file.","Using either the sync messages stored in the sync queue at the source node or the sync messages stored in the sync queue at the target node, file transfer system  can selectively retransmit any messages that were not received by the target node (step ). For example, since all of the sync messages after the begin marker are persistent, the target node would recognize that data has been lost if one or more of the sync messages associated with the data messages was not received. If the non-persistent marker, which is paired with a persistent marker, is not received at the target node, the target node would also recognize that there has been an error in the file transfer, such as the loss of data. In addition, if the source system crashes, the source system can look at the sync messages maintained in its sync queue, determine where the transmission left off, such as by analyzing the status information in the sync messages, and complete the transfer of the messages. Once the file transfer is complete, the sync queues are cleaned up by removing the sync messages from the sync queue that are associated with the completed file transfer (step ).","The foregoing description of a preferred embodiment of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed, and modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. The embodiment was chosen and described in order to explain the principles of the invention and a practical application to enable one skilled in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto, and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00010","num":"00010"},"figref":"FIG. 1A"},{"@attributes":{"id":"P-00011","num":"00011"},"figref":"FIG. 1B"},{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 4","b":"3"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
