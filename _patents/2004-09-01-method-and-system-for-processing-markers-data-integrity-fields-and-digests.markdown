---
title: Method and system for processing markers, data integrity fields and digests
abstract: A system with a host bus adapter (“HBA”) having a TCP/IP offload engine is provided. The HBA includes logic for concurrently processing markers, data integrity fields (“DIFs”) and digests by using plural counters that count words in a data stream and individual routing bits are set for markers, DIFs and digests based on the plural counter values. When a counter reaches a certain threshold value, then locator bits are set for a field and the locator bits are forwarded with the data stream. A marker counter is incremented when each word in a data stream passes by the marker counter and markers can be inserted at a programmed interval. For DIF calculation an offset of a first byte in a DMA transfer and partial cyclic redundancy code value is seeded into a DIF location counter, which is incremented for each byte of data that passes by the DIF location counter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761608&OS=07761608&RS=07761608
owner: QLOGIC, Corporation
number: 07761608
owner_city: Aliso Viejo
owner_country: US
publication_date: 20040901
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to network systems, and more particularly to, processing markers, data integrity fields and digests.","2. Background of the Invention","Storage area networks (\u201cSANs\u201d) are commonly used where plural memory storage devices are made available to various host computing systems. Data in a SAN is typically moved from plural host systems (that include computer systems, servers etc.) to a storage system through various controllers\/adapters.","Host systems often communicate with storage systems via a host bus adapter (\u201cHBA\u201d, may also be referred to as a \u201ccontroller\u201d and\/or \u201cadapter\u201d) using an interface, for example, the \u201cPCI\u201d bus interface. PCI stands for Peripheral Component Interconnect, a local bus standard that was developed by Intel Corporation\u00ae. The PCI standard is incorporated herein by reference in its entirety. Most modern computing systems include a PCI bus in addition to a more general expansion bus (e.g. the ISA bus). PCI is a 64-bit bus and can run at clock speeds of 33 or 66 MHz.","PCI-X is another standard bus that is compatible with existing PCI cards using the PCI bus. PCI-X improves the data transfer rate of PCI from 132 MBps to as much as 1 GBps. The PCI-X standard was developed by IBM\u00ae, Hewlett Packard Corporation\u00ae and Compaq Corporation\u00ae to increase performance of high bandwidth devices, such as Gigabit Ethernet standard and Fibre Channel Standard, and processors that are part of a cluster.","Various other standard interfaces are also used to move data from host systems to storage devices. Internet SCSI (iSCSI) is one such standard as defined by the Internet Engineering Task Force (IETF) maps the standard SCSI protocol on top of the TCP\/IP protocol. iSCSI (incorporated herein by reference in its entirety) is based on Small Computer Systems Interface (\u201cSCSI\u201d), which enables host computer systems to perform block data input\/output (\u201cI\/O\u201d) operations with a variety of peripheral devices including disk and tape devices, optical storage devices, as well as printers and scanners.","A traditional SCSI connection between a host system and peripheral device is through parallel cabling and is limited by distance and device support constraints. For storage applications, iSCSI was developed to take advantage of network architectures based on Fibre Channel and Gigabit Ethernet standards. iSCSI leverages the SCSI protocol over established networked infrastructures and defines the means for enabling block storage applications over TCP (Transmission Control Protocol)\/IP (Internet Protocol) networks. iSCSI defines mapping of the SCSI protocol with TCP\/IP.","Networks are generally defined as having layers of protocol. The iSCSI and TCP\/IP protocol suite consist of 4 protocol layers; the application layer (of which iSCSI is one application), the transport layer (TCP), the network layer (IP) and the link layer (i.e. Ethernet). A complete description of the TCP\/IP protocol suite is provided in \u201cTCP\/IP\u201d Illustrated, Vol. 1 by W. Richard Stevens and Volume 2 by Gary R. Wright and W. Richard Stevens published by Addison Wesley Professional Computing Series. The following provide a brief overview of TCP, iSCSI and RDMA protocol\/standards.","TCP Overview","TCP is a network protocol that provides connection-oriented, reliable, byte stream service. This means that two nodes must establish a logical connection before sending data and that TCP maintain state information regarding the data transfer. Reliable means that data is guaranteed to be delivered in the same order that it was sent. A byte stream service means that TCP views data to be sent as a continuous data stream that is sent in any way it sees fit and delivers it to the remote node as a byte stream. There is no concept of a data frame boundary in a TCP data stream.","Sequence Numbering in TCP Data Transfer","Each byte of data sent using a TCP connection is tagged with a sequence number. Each TCP segment header contains the sequence number of the first byte of data in the segment. This sequence number is incremented for each byte of data sent so that when the next segment is to be sent, the sequence number is again set for the first byte of data for that segment. The sequence numbering is used to determine when data is lost during delivery and needs to be retransmitted.","iSCSI Architecture Overview","The iSCSI architecture is based on a client\/server model. Typically, the client is a host system such as a file server that issues a read or write command. The server may be a disk array that responds to the client request.","The following introduces some of the basic terms used in an iSCSI data transfer:\n\n","In a typical iSCSI exchange, an initiator sends a \u201cread\u201d or \u201cwrite\u201d command to a target. For a read operation, the target sends the requested data to the initiator. For a write command, the target sends a \u201cReady to Transfer Protocol Data Unit (\u201cPDU\u201d)\u201d informing the initiator that the target is ready to accept the write data. The initiator then sends the write data to the target. Once the data is transferred, the exchange enters the response phase. The target then sends a response PDU to the initiator with the status of the operation. Once the initiator receives this response, the exchange is complete. The use of TCP guarantees the delivery of the PDUs.","Typically, logical units in the target process commands. Commands are sent by the host system in Command Descriptor Blocks (\u201cCDB\u201d). A CDB is sent to a specific logical unit, for example, the CDB may include a command to read a specific number of data blocks. The target's logical unit transfers the requested data block to the initiator, terminating with a status message indicating completion of the request. iSCSI encapsulates CDB transactions between initiators and targets over TCP\/IP networks.","\u201cRDMA\u201d Overview:","Remote direct memory access (RDMA), is a communications technique that allows data to be transmitted from the memory of one computer to the memory of another computer without passing through either device's central processing unit (\u201cCPU\u201d), and without calling to an operating system kernel. RDMA is a response to increasing demands for network speed. Data can be transferred faster when it does not have to pass through the CPU. The Infiniband standard (incorporated herein by reference in its entirety) is an example of a form of RDMA. Applications of RDMA include clustering and storage and networking for data centers.","Markers, Data Integrity Fields (\u201cDIFs\u201d) and Digests:","Embedded in a stream of iSCSI or RDMA data, there are three fields, which may need to be located for processing by a receiving node. These fields are referred to as: Markers, DIFs, and Digests. Each of these fields may or may not be present in a data stream regardless of the presence of the other fields. The location of each field in a data stream is unrelated, but can have an affect on locating other fields.","Markers:","Markers are inserted into a data stream periodically at a predetermined interval, starting at a given TCP sequence number. Markers are a fixed length, and indicate the offset to the start of the next protocol data unit (\u201cPDU\u201d). iSCSI markers are 8 bytes long, while RDMA markers are 4 bytes long. Insertion of iSCSI markers into the data stream is performed (logically) after insertion of digests and\/or DIFs. Thus, iSCSI markers are not included in the Cyclic Redundancy Check (CRC) calculation for either of those fields.","RDMA markers are inserted into a data stream (logically) after the insertion of DIFs, but prior to insertion of Digests. Thus, RDMA markers are not included in the calculation of the DIF CRC, but are included in the Digest CRC calculation.","DIFs:","DIFs are 8-byte fields appended to each block of data stored on a mass storage device. A DIF contains a Reference Tag, Application Tag, and a CRC value. As a DMA occurs, it is necessary to calculate the CRC for each DIF on each data block during a transfer. Depending on the application in a system, an incoming data stream may need to insert DIFs periodically into the data stream, validate and remove them from the data stream, or validate them and keep them in the data stream. These are three different modes for processing DIFs. Calculation of the DIF CRC does not include Markers or Digests.","Digests:","Digests are 4-byte fields appended to the end of a PDU, which are a CRC calculation over the data portion of the PDU. DIFs are included in the Digest calculation for both iSCSI and RDMA. Markers are not included in the iSCSI Digest calculation, but are included in the RDMA Digest calculation.","Typically when data is received from the network and is first stored at the HBA's local memory, data may not be in order and may or may not include the markers, DIFs and digests. To process the markers, DIFs and digests before data is sent to the host (or when being sent by the host) can be cumbersome and affect overall data transfer efficiency.","In conventional systems, Markers, DIFs, and Digests are processed independently at different points in a data stream transfer. This has disadvantages because there is no overlapping protection of data by both DIF and Digest and data may get corrupted. Also, iSCSI and RDMA treat calculation of digests with respect to markers differently, so logic would need to be duplicated if both protocols were to be supported.","In data transferred by a host system, markers, DIFs, and digests are typically inserted at different stages of the data path by conventional systems. This approach has problems because there is no overlapping protection of data by DIFs and Digests and data may get corrupted. Also, iSCSI and RDMA treat calculation of digests\/markers differently. In conventional systems, separate logic is needed if both protocols were to be supported. This cost of separate logic makes the overall conventional systems expensive and cumbersome.","Therefore, there is a need for a system and method that can efficiently handle markers, digests and DIFs in network data streams.","In one aspect of the present invention, a host bus adapter (\u201cHBA\u201d) with a TCP\/IP offload engine for transferring data to and from a host computing system is provided. The HBA includes logic for concurrently processing markers, data integrity fields (\u201cDIFs\u201d) and digests by using plural counters that count words in a data stream and individual routing bits are set for markers, DIFs and digests based on the plural counter values. When a counter reaches a certain threshold value, then locator bits are set for a field and the locator bits are forwarded with the data stream.","A marker counter is incremented when each word in a data stream passes by the marker counter and markers can be inserted at a programmed interval. For DIF calculation an offset of a first byte in a DMA transfer and partial cyclic redundancy code value is seeded into a DIF location counter, which is incremented for each byte of data that passes by the DIF location counter. Also, if a digest locator counter value is equal to a protocol data unit length, then digest locator bits are set for bytes in a current word.","In yet another aspect of the present invention, a system for transferring data to and from a host computing system is provided. The system includes a TCP\/IP offload engine that includes logic for concurrently processing markers, data integrity fields (\u201cDIFs\u201d) and digests by using plural counters that count words in a data stream and individual routing bits are set for markers, DIFs and digests based on the plural counter values.","In yet another aspect of the present invention, a TCP\/IP offload engine (\u201cTOE\u201d) for transferring data to and from a host computing system is provided. The TOE includes logic for concurrently processing markers, data integrity fields (\u201cDIFs\u201d) and digests by using plural counters that count words in a data stream and individual routing bits are set for markers, DIFs and digests based on the plural counter values.","In yet another aspect of the present invention a HBA with a TCP\/IP offload engine for transferring data from a host computing system is provided. The HBA includes logic for implementing a data pipeline that tags every byte of data with routing bits used to control data flow through the data pipeline and plural counters are used to control the routing bits for concurrently processing markers, data integrity fields (\u201cDIFs\u201d) and digests.","This brief summary has been provided so that the nature of the invention may be understood quickly. A more complete understanding of the invention can be obtained by reference to the following detailed description of the preferred embodiments thereof concerning the attached drawings.","To facilitate an understanding of the preferred embodiment, the general architecture and operation of a system using storage devices will be described. The specific architecture and operation of the preferred embodiment will then be described with reference to the general architecture.",{"@attributes":{"id":"p-0044","num":"0047"},"figref":"FIG. 1","b":["100","103","100","100","101","102"]},"System  according to the present invention can be used for both initiator and target applications (i.e. can be used on a host bus adapter  or with a redundant array of inexpensive disks (\u201cRAID\u201d) controller . RAID controller  is coupled to plural storage devices, for example, ,  and .","System  provides hardware assistance to improve the speed of iSCSI read and write transactions as well as a full hardware implementation of a TCP\/IP protocol stack to assure full gigabit operation. System  also includes an embedded gigabit Ethernet MAC, to connect a PCI based host to a LAN (not shown).","The present invention provides a hardware implementation of a full network protocol stack. Application Programming Interfaces (APIs) to this protocol stack are made available to allow host software to take advantage of the hardware acceleration for straight network applications.","The present invention may be used on a PCI development board with a Field Programmable gate Array (\u201cFPGA\u201d). The chip may also be integrated into an Application Specific Integrated Circuit (\u201cASIC\u201d) with an embedded serialize\/de-serializer (\u201cSERDES\u201d) and internal programmable random access memory (\u201cRAM\u201d).",{"@attributes":{"id":"p-0049","num":"0052"},"figref":"FIG. 2","b":["100","100","107","110","109"]},"In conventional systems, the main memory is coupled to the CPU via a system bus  or a local memory bus (not shown). The main memory is used to provide the CPU  access to data and\/or program information that is stored in main memory at execution time. Typically, the main memory is composed of random access memory (RAM) circuits. A computer system with the CPU and main memory is often referred to as a host system.",{"@attributes":{"id":"p-0051","num":"0054"},"figref":"FIG. 3","b":"102"},"System  includes an embedded processor  that is used to process SCSI requests into iSCSI exchanges to transfer SCSI based data. Processor  also generates completion messages for host .","iSCSI processor  includes hardware state machines\/firmware which synchronizes incoming byte streams from TCP, finds iSCSI PDU boundaries, sends data to host  via SCSI direct access memory (\u201cSDE\u201d) module .","System  also includes network operation processors \u201cNOP\u201d  that include plural state machines for different network protocols, for example, TCP, IP, and Ethernet for both traffic entering and leaving system . The state machines handle most of the data transfer without host CPU  involvement.","Local memory interface  is used by various system  components to access external memory  (in this illustration, RAM ).","Encrytion\/de-cryption engine  is used to encrypt\/de-crypt data while data is moved in and out of host , using system . Standard encryption\/de-cryption techniques may be used.","Two DMA engines (or modules) are used by NOPs  to move data to and from host . Inbound DMA module  is used to move data from system  (i.e. from local memory ) to host  memory. Buffer queue manager  maintains small and large buffers that are used by Inbound DMA engine . Outbound DMA engine  is used to move data from host  memory to system  for transmission to the network.","SCSI DMA Engine (SDE ) provides iSCSI processor  with a DMA channel from Local RAM  to Host  memory. SDE  includes a byte packer function that takes unaligned or less than 8 byte buffers and packs them into 8 byte words before sending them to Host . SDE  also includes detection\/location logic , described below with respect to  that handles markers, digests and DIFs \u201con the fly\u201d while data is being moved to host  from local memory  and vice-versa.","System  also includes request queue managers (the term manager and module are used interchangeably throughout this specification) ( and ) that are used to pass commands to chip  to perform a specific operation. SCSI request queue manager  is used for initiating SCSI based transfers, while module  is used for TCP, IP, Ethernet or any other protocol\/standard.","Completion queue managers ( and ) are used to send completion messages to host . These messages are generated to report status of inbound (i.e. from the network to system  and then to host ) to outbound (i.e. from host  to the network via system ) transfers. SCSI completion manager  handles SCSI completion messages, while non-SCSI messages are handled by module .","Register interface  provides host  access to plural system  status and control registers, as well as a channel to access local memory .","PCI\/PCI-X interface block  and PCI interface  provide a PCI\/PCI-X interface between host  and system . BIOS Read only memory  is also provided to store invariant instruction sequences such as start-up instruction sequences or basic input\/output operating system (BIOS) sequences instructions.","Data enters\/leaves system  through a serial\/de-serializer (\u201cSERDES\u201d)  that converts incoming and outgoing data into a serial and non-serial format.","Handling Markers, DIFs and Digests for Incoming PDUs:","As discussed above, incoming in this context means PDUs coming from the network destined for host  via system . Prior to describing the logic and process for handling markers, DIFs and digests, a SCSI PDU will be described with respect to .",{"@attributes":{"id":"p-0065","num":"0068"},"figref":"FIG. 5A","b":["500","509","511","500","500","509","511"]},"PDU  includes a header , with a first marker . Thereafter, markers are placed evenly, for example, every 512 KB (shown as marker ). Data itself is shown as  and . DIFs  and  follow data blocks  and , respectively. The last part of PDU  is digest . It is noteworthy that the boundaries between PDU  and  overlap, i.e., digest  may be received with a portion of PDU , shown as .",{"@attributes":{"id":"p-0067","num":"0070"},"figref":"FIG. 4","b":["400","306","400","319"]},"In , the data path is shown as A, while the control path is shown as B. In the data path A, data is moved from local memory  and a null word  is inserted if the DIF processing is to be conducted in the Append mode. Data word  is processed through multiplexer (\u201cMux\u201d) .","As the data stream progresses, DIF verification logic  and digest verification logic  process the DIF and digest values. Marker removal logic  is used to remove any markers, if enabled. DIF insertion logic  is used to insert DIF values in a data stream. Data words , , and  are shown as they are handled by logic ,  and .","Mux  outputs data word  that is then sent to host . Mux  receives an input from DIF insertion logic  and input  if the Append mode is being used.","System  includes three separate location counters ,  and  for markers, DIFs and digests, respectively. As data-words (shown as , ,  and ) in a data stream pass by, each counter (i.e., ,  and ) increments when appropriate, by an appropriate count. Separate Marker, DIF and Digest Locator bits (shown as A, A and A) are used to indicate when respective bytes in a current word belong to one of the fields (i.e., markers, DIFs and\/or digests).","When a counter (,  and\/or ) reaches an appropriate programmable threshold for a field it is used to locate, the corresponding locator bits are set for that field. The locator bits for each field is then fed back into the increment logic for each of the other field locator counters, so they can correctly increment. The locator bits are then forwarded with each data word through several stages in a pipeline where the markers, DIFs and digests are processed. The CRC calculators (not shown) use the locator bits to determine, which bytes in the current word to include in the calculation.","Marker Processing:","When host  is ready to communicate with system A, the devices negotiate whether markers will be supported. If both devices support markers, then system  removes markers from data stream, before data is sent to host  from local memory . It is noteworthy, that markers can be inserted arbitrarily and this becomes complex when received PDUs are out of order.","It is important that system  for a given data stream determines the location of the first marker in a given data stream. Normally, other markers occur at regular intervals, for example, every 512 KB. To locate markers in a data stream for a given DMA requires the offset of the first word in the DMA from the first marker (shown as ) in the data stream (shown as PDU , PDU  and PDU  () in FIG. ). The offset is shown as  in  that shows a partial view of PDU , described above with respect to .","By knowing the offset, the first marker  location in a given DMA is known. This offset value is divided by marker interval size (for example, 512 KB) and the remainder from the division is primed into the marker location counter  at the start of a DMA process. When each word passes by counter , it is incremented by the number of bytes in the word. When (marker counter modulo marker interval=0) the marker bits are set (for example, for an 8- or 4-byte marker), counter  is not incremented for bytes. Once markers are located they are removed by logic  after DIFs and digests are processed.","Processing DIFs:","Once the initial location of the DIF field is determined for a DMA (i.e. data transfer), then DIFs may be handled in three different modes by system :\n\n","The foregoing modes can be programmed and controlled by firmware of system .","Before describing how DIFs are processed, it is noteworthy that DIF boundaries and PDU boundaries are not always perfectly aligned and may often overlap.  shows three PDUs (,  and ) adjacent to each other, however, the PDUs may not be received in order by local memory  and SDE . Therefore, in one aspect of the present invention, the last number bytes that are transferred for a PDU with a partial CRC are stored so that a next PDU can be processed. For example, as shown in , to process PDU , the last few bytes of PDU  (shown as \u201cx\u201d, B) are stored with partial CRC. This is used for processing C, which also has DIF . The same is applicable for processing PDU , where block D (shown as \u201cm\u201d) is stored to process E (shown as \u201cn\u201d) with DIF A.","DIF logic  uses the offset of the first byte in a DMA from the previous DIF (for example, B), as well as the partial CRC calculation of the block to that point to locate and process a DIF. These values are seeded into logic  and the DIF CRC calculator (not shown), respectively. The DIF counter  is incremented for each byte (shown as data word ) that passes by. When the counter is equal to the DIF block size, the DIF locator bits corresponding to the DIF bytes in a current word are set and the DIF counter  is reset. Both the Marker locator bits A and the Digest locator bits A are fed into logic . If any of the bits are set, the DIF counter  is not incremented for the bytes corresponding to those bits. In the Append mode, if SDE  is to insert the calculated DIF values (shown as ) into the data stream, an empty word (shown as ) is inserted and the corresponding DIF locator bits for that word set.","Processing Digests:","Digests are located in the last few bytes (for example, 4) of a PDU. Thus, for a given DMA, the current offset into the PDU, the length of the PDU, and the DMA length determine whether the last 4 bytes of the DMA are digests, i.e., if the DMA length+PDU offset is equal to the PDU Length, then the last 4 bytes of the DMA are digests. When the digest locator counter  are equal to the PDU length, the digest locator bits A are set for the bytes in a current word corresponding to the digest. When transferring iSCSI data, marker locator bits A are also fed into the digest logic .","In one aspect of the present invention, the three fields discussed above are handled, real-time while data is being transferred. System  is also able to process the variations in how the various fields are used. For example, markers are not used for digest calculations; or three different modes may be used to process DIFs. For iSCSI transfers, markers are not used when DIFs are calculated, but markers are used for RDMA based transactions. The indicator bits for markers, DIFs and digests are used to handle different situations and requirements. Logic ,  and  are adaptive and hence process markers, DIFs and digests, based on the requirements.","The following provides an example of how SDE  processes markers, DIFs and digests, according to one aspect of the present invention:\n\n","set_marker_locator=((marker_counter==marker_interval) &&\n\n","As discussed above, outgoing in this context means any data that is sent by host  via chip . In one aspect of the present invention, markers, DIFs and digests are located and processed concurrently for both iSCSI and RDMA, reducing logic duplication and providing protection from data corruption.","In one aspect of the present invention, markers, DIFs and digests are processed concurrently by using a data pipeline that tags every byte with routing bits. The routing bits are used to control data flow through the pipeline. Counters at the first stage of the pipeline are used to control the routing bits. As bytes in the data stream pass by, each counter decrements when appropriate, by an appropriate count. When a counter reaches a certain value, for example, 0, for the field it is used to locate, then the corresponding routing bits are set for that field.","Separate Marker, DIF and Digest Routing bits are used to indicate when respective bytes in a current word belong to one of the fields. There are also separate routing bits that indicate when the last byte in each block passes and if data should be transmitted out of system . The routing bits are then carried forward with each data word through the pipeline to where Markers, DIFs and Digests are processed. The Digest (CRC) calculators use the routing bits to determine which bytes in the current word to include in the calculation. The end bits are used to determine when and where to insert a Digest into the data stream.",{"@attributes":{"id":"p-0087","num":"0121"},"figref":"FIG. 6","b":["600","600","302"]},"System A includes a data control module  that receives control data\/input C from a control state machine . Control data C includes signal\/routing bits to either pass certain bytes or ignore certain bytes. Module  also includes a DIF counter B that is described below.","Control state machine  generates output  that includes various control signals, including, a bit to set the Append mode; validate and keep mode; validate and replace mode; a bit for starting marker control logic ; a bit signifying a new data block; sequence number of a segment; a bit that initializes counters B and ; and a valid bit mask.","System A also includes ODE control module  that receives control\/data A from control state machine .","A marker control module  is provided that receives input A. Included in input A is an output of counter  that counts the number of bytes in a segment that passes through system . Marker control module  also receives a flag that signifies if the data is for iSCSI or RDMA (rdma_lcl_flag). Input A also includes the sequence number for a TCP segment, and a marker value.","Inserting Markers:","Marker control module  is coupled to a marker register  that is used to store marker values. Register  also has a bit that indicates when register  is full.","Marker insertion logic  receives input from marker control module , which includes the total number of bytes for marker insertion. Output from counter  also serves as an input for marker insertion logic . Marker insertion logic  output A is sent to multiplexer  that also receives input from register .","Insertion of markers in a data stream for a given DMA requires the offset of a first word in a DMA from the first marker in the data stream. This value is calculated from state information saved about a connection for which a transfer takes place at a given time. When each word passes by Marker counter , it is decremented by the number of bytes in the word. When the Marker counter  reaches a certain value, for example, 0, the data stream is interrupted and an 8- or 4-byte marker is inserted by marker insertion logic  depending upon whether the data stream is iSCSI or RDMA based.","Routing bits are set along with the marker to indicate DIF or Digest routing. For insertion of subsequent markers in the same TCP segment, after a marker is inserted in the data stream, the Marker counter  is set to the value of the marker interval. The routing bits are sent to the Marker counter  (input A). If the routing bits indicate that a particular byte will not be transmitted, the Marker counter  is not decremented.","DIFs:","System  verifies DIFs for every byte of data that is sent out. Since retransmission of TCP data can occur at any byte in the data stream, it is possible that data from the host  may not be transmitted. To know which bytes should be transmitted, commands to pass or ignore (in this example, number_of_bytes2_pass and number_of_bytes2_ignore) the bytes are passed to a function that counts every byte received from host . If the number of bytes received is greater than the number_of_bytes2_ignore and less than or equal to (number_of_bytes2_pass+number_of_bytes2_ignore) a routing bit is set for that byte.","DIF location is ascertained by knowing the size of a DIF data block and the DIF operating mode (i.e. Append, Validate and Remove, or Validate and Keep). Since every byte of data transmitted has it's DIF verified, data from host  begins with the first byte of data in the DMA block. Hence, all bytes from host  have the DIF routing bit set. DIF counter B (located in Data Control block ) is initially loaded with the size of the DIF data block and decremented for each byte that passes by. When counter B is equal to a certain value, for example, zero, routing bits (DIF_END) in the current word are set and the DIF counter is re-set to the size of the DIF data block. The DIF_END routing signal is used to know when to insert a DIF into the data stream, when to compare a calculated DIF in the data stream, and\/or when to remove a DIF from the data stream. If a calculated DIF needs to be inserted into the data stream, an empty word is inserted in the data stream and the corresponding DIF routing bits for that word are set.","System A includes plural registers , ,  and  as a part of the data pipeline that handles DIFs, digest and markers. Register  (Stage 0 register) is controlled by module  and data control module . Register  includes information relating to the last block data, the length of valid bytes, a bit for the append mode (for example, 0), a bit that starts sending the most and least significant bits to NOP . Register  also includes where the DIF (pci-Crc) is located and a value that indicates when the DIF ends (pci_crc-end).","Register  is the next register in the data pipeline that receives an input from Mux . Protection data from module  is added in the data stream (in the append mode) before data is placed in register . Data from register  is sent to DIF generator logic module  that also receives the relevant CRC information as input B. Module  checks\/generates CRC value(s) A that is then included in the data stream from register , which receives data through Mux .","DIF insertion logic  receives input A from control state machine . Input A enables a particular DIF mode, namely, the Append mode (i.e. the Insert Mode), Validate and Keep mode; and validate and remove mode.","If the append mode is enabled, then DIF B is inserted in the data stream through Mux . If the validate and replace mode is enabled, then CRC values are validated and then replaced. If validate and remove mode is enabled, then CRC values are removed after validation.",{"@attributes":{"id":"p-0102","num":"0136"},"figref":"FIG. 7"},"In step S, the process enables the DIF mode, i.e., the Append mode, Validate and Remove mode, or Validate and keep mode. In step S, data words are counted, as discussed above with respect to .","In step S, data is tagged based on the type of mode that is selected.","In step S, DIFs are processed based on the type of mode that is selected.","Digests:","Register  includes data where markers and DIFs have been processed, as described above. Digests are inserted after the last bytes of data are received from a DMA request. Control signals are generated for each DMA request to indicate if this data is to be included in the digest calculation and if this is the last DMA request before a digest should be inserted. This is stored in register . These signals along with the routing bits are used to set the digest routing signal for data received from host .","The DIGEST routing signal and an end bit that comes down with the data are used to set a digest end (DIGEST_END) routing bit. The bit is sent to digest generator  via logic A. When the byte with the DIGEST_END routing bit reaches the digest generator, the computed digest is inserted in the data stream (shown as output B).","Protection data A (for Append and validate\/Remove mode) from register  is routed back to Mux  that also receives an input from register . Mux  generates an output that serves as an input for digest generator .","In one aspect of the present invention, markers, digests and DIFs are handled concurrently and efficiently, which saves the cost of having separate logic and improves overall performance.","Although the present invention has been described with reference to specific embodiments, these embodiments are illustrative only and not limiting. Many other applications and embodiments of the present invention will be apparent in light of this disclosure and the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing features and other features of the present invention will now be described with reference to the drawings of a preferred embodiment. In the drawings, the same components have the same reference numerals. The illustrated embodiment is intended to illustrate, but not to limit the invention. The drawings include the following Figures:",{"@attributes":{"id":"p-0036","num":"0039"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0037","num":"0040"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0038","num":"0041"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0039","num":"0042"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0040","num":"0043"},"figref":"FIGS. 5A-5C"},{"@attributes":{"id":"p-0041","num":"0044"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0042","num":"0045"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
