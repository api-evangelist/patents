---
title: Large-scale comprehensive real-time monitoring framework for industrial facilities
abstract: A method includes associating multiple real-time applications with a framework. The real-time applications include applications for monitoring or controlling equipment in at least one industrial facility. Each application has at least one input variable and at least one output variable. The method also includes identifying relationships between the input and output variables of the applications to identify data dependencies. The method further includes receiving data updates at the framework and notifying at least one of the applications of the data updates based on the data dependencies to support data-driven operation of the framework. The data-driven operation of the framework provides data to the applications to support performance monitoring of the equipment, analysis of the equipment's operation, and/or identification of abnormal equipment conditions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09310790&OS=09310790&RS=09310790
owner: Honeywell International Inc.
number: 09310790
owner_city: Morris Plains
owner_country: US
publication_date: 20110523
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates generally to control systems. More specifically, this disclosure relates to a large-scale comprehensive real-time monitoring framework for industrial facilities.","Processing facilities are typically managed using process control systems. Example processing facilities include manufacturing plants, chemical plants, crude oil refineries, and ore processing plants. Among other things, process control systems often manage the use of industrial equipment in the processing facilities.","Various process industries have seen constant growth in automation technology. However, it is often challenging to integrate native and custom application components into a single control system. This can be due to a number of factors, such as difficulty in maintaining a sequence of calculations or rules to be evaluated during the control of a processing facility. This becomes even more problematic when dealing with a large number of applications having an even larger number of calculations or rules.","This disclosure provides a large-scale comprehensive real-time monitoring framework for industrial facilities.","In a first embodiment, a method includes associating multiple real-time applications with a framework. The real-time applications include applications for monitoring or controlling equipment in at least one industrial facility. Each application has at least one input variable and at least one output variable. The method also includes identifying relationships between the input and output variables of the applications to identify data dependencies. The method further includes receiving data updates at the framework and notifying at least one of the applications of the data updates based on the data dependencies to support data-driven operation of the framework. The data-driven operation of the framework provides data to the applications to support performance monitoring of the equipment, analysis of the equipment's operation, and\/or identification of abnormal equipment conditions.","In a second embodiment, a computer readable medium embodies a computer program. The computer program includes computer readable program code for identifying relationships between input and output variables of multiple real-time applications associated with a framework to identify data dependencies. The applications include applications for monitoring or controlling equipment in at least one industrial facility. Each application has at least one input variable and at least one output variable. The computer program also includes computer readable program code for receiving data updates at the framework and notifying at least one of the applications of the data updates based on the data dependencies to support data-driven operation of the framework. The data-driven operation of the framework is configured to provide data to the applications to support performance monitoring of the equipment, analysis of the equipment's operation, and\/or identification of abnormal equipment conditions.","In a third embodiment, a system includes at least one interface configured to receive data associated with equipment in at least one industrial facility. The system also includes at least one processing unit configured to identify relationships between input and output variables of multiple real-time applications associated with a framework to identify data dependencies. The real-time applications include applications for monitoring or controlling the equipment. Each application has at least one input variable and at least one output variable. The at least one processing unit is also configured to receive data updates at the framework and notify at least one of the applications of the data updates based on the data dependencies to support data-driven operation of the framework. The data-driven operation of the framework is configured to provide the data to the applications to support performance monitoring of the equipment, analysis of the equipment's operation, and\/or identification of abnormal equipment conditions.","Other technical features may be readily apparent to one skilled in the art from the following figures, descriptions, and claims.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 1 through 19"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","101","101","101","101","101","100"],"i":["a","b","a","b ","a","b "]},"One or more sensors  measure at least one characteristic of the process system. For example, a sensor  could measure vibrations of a pump or other equipment having a rotating component. A sensor  could measure any other or additional characteristic(s), such as temperature, pressure, material composition, or flow rate. Each sensor  includes any suitable structure for measuring one or more characteristics associated with a process system.","One or more controllers  receive data from the sensors  and use the data to control the industrial equipment . For example, a controller  could use the sensor measurements to alter a speed or other operational property of the equipment or identify problems with the equipment . Each controller  includes any suitable structure for controlling industrial equipment.","One or more networks  support communications between other components in the system . For example, a network  may communicate Internet Protocol (IP) packets, frame relay frames, Asynchronous Transfer Mode (ATM) cells, or other suitable information between network addresses. Each network  may include one or more local area networks, metropolitan area networks, wide area networks (WANs), all or a portion of a global network, or any other communication system or systems at one or more locations.","The process control system  also includes one or more wireless networks. In this example, a wireless network includes infrastructure nodes (\u201cI-nodes\u201d) -, leaf nodes -, and gateway I-nodes -. The I-nodes -and -represent wireless nodes capable of providing wireless coverage in a specified area, such as a large industrial complex. The I-nodes -are typically routing devices that receive and forward data wirelessly. The gateway I-nodes -provide the additional ability to communicate over a wired network, such as the network . The leaf nodes -generally represent endpoints that communicate over the wireless network formed by the I-nodes. Each of the nodes -, -, -could use any suitable communication technique, such as radio frequency (RF) frequency-hopping spread spectrum (FHSS) or direct sequence spread spectrum (DSSS) techniques. Each of the nodes -, -, -could also include other functionality, such as functionality for generating or using data communicated over the wireless network. For instance, the leaf nodes -may represent wireless sensors measuring one or more characteristics of the industrial equipment , which can be controlled by the controller  or a wireless controller.","One or more servers  can perform various functions in the process control system . For example, a server  could provide wireless network management and security functions. One or more operator stations  allow users to interact with the servers  and other components of the system . An operator station  could, for example, receive and display alarm messages or allow users to modify control algorithms used by the servers and controllers. Each server  or operator station  includes any suitable structure for performing the desired function(s). For example, a server  or operator station  could include at least one processing device -, such as a processor, microprocessor, microcontroller, field programmable gate array (FPGA), or other processing or control device. A server  or operator station  could also include at least one memory -storing instructions and data used, generated, or collected by the processing device(s). A server  or operator station  could further include at least one interface -for communicating with external devices and systems, such as a wired interface or a wireless transceiver.","In this example, a single network  is shown coupled to a server  and an operator station . However, these components could be replicated any number of times on any number of levels. In particular embodiments, the control system  supports the Purdue model of process control and includes multiple computing levels, each level controlling the level below it (if any).","In one aspect of operation, the servers  and\/or operator stations  execute one or more applications or otherwise provide functionality supporting a large-scale comprehensive real-time monitoring framework  for the process system. The framework  supports the integration of multiple native and custom application components while maintaining sequences of calculations, rules, and\/or programs to be evaluated during control operations. The framework  also provides tools to capture expert or experienced operator\/technician knowledge for download to an execution environment in suitable format. The framework  can provide key process indicator (KPI) integration to operators' consoles, handle large amounts of data, and leverage the use of multi-core central processing units.","Depending on the implementation, the framework  could support any combination of the following features:","an optimized data-driven approach for handling data dependencies, where updates to data trigger updates to components that use the data;","sequential processing of custom rules and calculations and the use of distinct embedded and custom processing engines to support data dependencies;","a scalable open interface;","distributed data, processing, and presentation in a location-transparent or location-insensitive manner;","data integrity maintenance;","dynamic recovery of a communication interface;","parallelization of independent processing tasks and loops;","notification of any system failures to improve application reliability; and","display of hierarchical health or fault tree of framework components, processing engines, data, or event interfaces.","The framework can help to fulfill the needs of real-time data processing and managing process industries beyond that often achieved using standard distributed control systems.","Additional details regarding the framework  are provided below. The framework  could be implemented in any suitable manner, such as by one or more computing devices executing software routines. However, the framework  could be implemented in any other suitable manner.","Although  illustrates one example of a process control system  providing a large-scale comprehensive real-time monitoring framework  for an industrial facility, various changes may be made to . For example, the system  could include any number of industrial equipment, sensors, controllers, networks (wired or wireless), I-nodes (gateway or other), leaf nodes, servers, and operator stations. Also, the functional division shown in  is for illustration only. Various components in  could be combined, subdivided, or omitted and additional components could be added according to particular needs. In addition,  illustrates one example operational environment where the framework  can be used. The framework  could be used in any other suitable system.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 2A through 2C","b":["124","124"]},"The framework  supports the use of different types of applications using a data-driven approach, which helps to ensure that functions or expressions dependent on a particular input variable are updated in response to a change in that input variable. This technique helps to provide correct output variable values for any change in a set of input variables. One challenge of a data-driven approach is to determine the relationships between data variables ahead of time.","The framework  therefore supports the use of an equation analyzer to determine variable dependencies. A variable dependency indicates that an output variable is dependent on one or more input variables. The equation analyzer therefore identifies independent and dependent variables. An independent variable denotes a variable whose value does not depend on another variable. A dependent variable denotes a variable whose value depends on at least one other variable.","As shown in , the framework  is associated with a number of real-time or other applications -. As noted above, the applications -could represent distinctly different engines or other programs. Each application -is associated with a set of input variables  and a set of output variables . One or more output variables  from one application -can be provided as input variables  to other applications -. The equation analyzer identifies relationships between these input and output variables -. The data-driven framework  uses these relationships to ensure that changes to input data are accurately provided to components in order to update output data.","In this example, the equation analyzer includes three functional units -. The functional unit uses calculations and rules to identify the relationships between the input and output variables - of the application . The calculations and rules could support any suitable logic. For instance, the functional unit could use the calculations and rules to make changes to input variables  and identify which output variables  change. The functional unit generates a dependency matrix that identifies which input variables  affect each output variable  for the application ","The functional unit uses MICROSOFT VISIO drawings or other graphical function blocks to identify the relationships between the input and output variables - of the application . In some embodiments, MICROSOFT VISIO drawings can be used to define the logic of an application, such as in the URT platform for the HONEYWELL ADVANCED PROCESS CONTROLLER. The functional unit identifies a dependency matrix for the application using the MICROSOFT VISIO drawings or other function blocks. Again, the dependency matrix identifies which input variables  affect each output variable  for the application ","In , a dependency matrix is created for an application using a loading mechanism . The loading mechanism  allows a user to manually load the dependency matrix for the application . This may be necessary if the equation analyzer is unable to analyze the application ","The functional unit of the equation analyzer uses the dependency matrices -to construct a final dependency matrix . The final dependency matrix  identifies all of the input and output variables - for all of the applications -. The final dependency matrix  also identifies all of the relationships between these input and output variables.","Each functional unit -of the equation analyzer includes any suitable hardware, software, firmware, or combination thereof for identifying relationships between input and output variables of an application. The functional unit of the equation analyzer includes any suitable hardware, software, firmware, or combination thereof for identifying relationships between input and output variables of multiple applications.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIGS. 2B and 2C","FIG. 2B"]},"The equation analyzer analyzes the applications -containing the variables in  and generates a hierarchy  shown in . The hierarchy  shows the order of dependency of the variables. The hierarchy  defines publisher-subscriber relationships in the data-driven framework . A publisher denotes an entity outputting data for use by at least one subscriber. In this case, for instance, the owner or domain of variable A acts as a publisher for the owners or domains of variables B, C, and D.","The depth or number of levels of dependency identified by the equation analyzer in the hierarchy  can be limited and configurable by a user. Also, nested expressions can be identified by the equation analyzer, either during configuration or during run time.","Although  illustrate one example of an equation analyzer for the large-scale framework  and related details, various changes may be made to . For example, the various functional units -forming the equation analyzer could be combined or further subdivided, and other or additional functional units could be added (such as functional units that identify variables' relationships in other ways). Also, the contents of  are for illustration only.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 3","b":["300","124","124"]},"In , the architecture  is divided into four general platforms -. An input\/output (IO) platform  represents components used to receive incoming data and defines multiple data streams . Each stream  can be associated with a different type of data. In this example, the streams  contain real-time field data, vibration data, historical data, data from an SQL or other database, and data from a custom adapter. Note that any other or additional data streams could be used here. Also, the incoming data could be received from any suitable source(s), such as from sensors or applications -","An execution platform  executes applications -supported by the framework . The execution platform  provides data to the applications -in various data streams , and certain functions can be invoked within the execution platform  using one or more libraries . In this example, the data streams  contain data for a vibration signal and function block engine, a calculation and rule engine, a custom engine, and an external engine. The libraries  include a fuzzy logic library, a vibration domain\/signal processing function library, a calculation function library, and a custom function library. Note that any other or additional data streams or libraries could be used here.","A notification platform  sends notifications, such as email or SMS messages, to operators or other personnel. In this example, the notification platform  includes data streams  and notification adapters . The streams  provide different types of data, such as email, SMS, or historical data. The notification adapters  generate suitable messages, such as email or SMS messages, containing the data. Note that any other or additional data streams, adaptors, and notification mechanisms could be used here.","An OLE for Process Control (OPC) platform  supports various OPC servers that act as application programming interfaces (APIs) or other interfaces for interacting with various components in the architecture. In this example, the OPC platform  includes servers  that support different OPC standards, including the OPC alarms and events (AE), data access (DA), historical data access (HDA), and unified architecture (UA) specifications. Note that any other or additional OPC or other servers could be used here.","As shown in , each platform - includes a number of different data streams. The data streams in each platform - can be managed by a thread pool and monitored by that platform -.","A data cache  stores data and messages being transported between platforms in real-time. When the data cache  receives data, the data cache  can notify the appropriate application(s) that updated data has been received. The appropriate application(s) can be identified using the data dependencies identified by the equation analyzer. The notifications can be performed by a real-time data service and made to any subscribers that have subscribed to a particular data variable. In particular embodiments, publisher calls to a subscriber can be consolidated before sending a message to that subscriber, which reduces the number of calls made. The data cache  includes any suitable structure for storing and retrieving data transported between platforms. The data cache  could hold data in an address format defined by a data model configured by a user for the framework , allowing structured data storage. Embedded and custom applications -can be inserted into the framework  and operate using the data model defined for that application.","The architecture  can provide various additional functions to support the framework . For example, the execution platform  can support the accurate reporting of data and a mechanism to propagate a data quality through the hierarchy  of variables. For example, assume that a pump's net positive suction head (NPSH) calculation uses a suction pressure, a vapor pressure, and a density of a fluid. The absence of any one of these input variables can invalidate an NPSH value, as well as the pump's health index value (which can be calculated using the NPSH value). The execution platform  can propagate the quality of the three input variables up to the NPSH value and the pump's health index value.","As another example, the architecture  can use consistent timestamps across related data variables. For example, the latest timestamp of data for an independent variable can be propagated through to any dependent variables dependent on that independent variable, even if the dependent variable values do not change. This helps to retain the latest timestamps for data in the hierarchy .","As still other examples, basic loops can be parallelized whenever possible to leverage the use of multiple processing units. Also, the platforms can be robust and integrate various I\/O sources with higher throughput (such as on the order of 10,000 data values per second or more). In addition, real-time streaming of data and messages can improve the latency of data, and independent streaming of various data sources can be used to collect, validate, and update runtime data and message.","In particular embodiments, the platforms - can be implemented as services to help simplify integration with other applications.  illustrates an example service-oriented data-driven architecture  for the large-scale framework  according to this disclosure. In this example, the architecture  is implemented in the context of an asset manager (AM) tool, which uses the framework  as described below. The architecture  could be implemented for any other suitable purpose.","As shown in , the architecture  includes application servers - that communicate and interact with a web server  over a network . Each application server - supports an IO service , an execution service , and a real-time (RT) data service . The web server  supports a data service , a notification service , a historical data service , a real-time data service , and a directory service .","The IO services  in the application servers - can support the functions of the IO platform . The execution services  in the application servers - can support the functions of the execution platform . The notification service  in the web server  can support the functions of the notification platform . The real-time data services  in the application servers - and the real-time data service  in the web server  can manage the data cache  by providing a Windows Communication Foundation (WCF) real-time data service. The data service  in the web server  supports the use of both real-time and historical data, while the directory service  supports the use of web services in the architecture .","The architecture  here supports loose coupling to enable service orchestration and distributed processing. Once again, operations can be data-driven, and distributed processing can be established by configuring the directory service  (which maintains lists of registered data services). For a subscription of data, a local data service ,  is contacted, which in turn creates a publisher-subscriber relationship with other data services ,  when the data is not owned by the local service. This way, data can be accessed in a transparent manner, regardless of its location. The architecture  further supports centralized monitoring of different location assets to leverage expertise available in a corporate office. In particular embodiments, the architecture  supports a Service Oriented Architecture (SOA).","Although  illustrate examples of a data-driven architecture  and a service-oriented data-driven architecture  for the large-scale framework , various changes may be made to . For example, the architecture  could include any number of platforms - (each with any number of data streams, servers, or other components) and data caches . Also, the architecture  could include any other or additional services to support the framework .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 5","b":["500","124","500","124"]},"As shown in , the layered model  includes a data collector layer  and a data validation layer . The data collector layer  defines the sources of data in the framework , such as vibration sensors or other data collectors. The data validation layer  validates any collected data to ensure suitable data quality. This function could be performed by any device receiving the data from the sensors or other collectors or by the collectors themselves.","The layered model  also includes a performance model or feature extraction layer . This layer  extracts useful data, such as key process indicators or other features, from the collected and validated data. The layer  could support various functions to extract useful information from the collected data. For example, the layer  could perform fast Fourier transform (FFT) or other signal processing techniques, which could be used to extract useful information from vibration data associated with rotating equipment.","The layered model  further includes a fault diagnosis layer  and a health index integration layer . The fault diagnosis layer  uses the information from the extraction layer  to identify potential faults in components of industrial equipment. For example, the fault diagnosis layer  can use vibration information from the extraction layer  to identify whether different components (subsystem or sub-domain) of rotating equipment are suffering from faults. The health index integration layer  combines faults from the layer  to provide an overall health index for a piece of industrial equipment.","The layered model  allows facility operators to plug standard or custom components into each layer of the framework , such as by using appropriate model building tools. This supports the seamless attachment and detachment of the model  to and from an asset at any level of a process control system and can reduce the need to create a custom model for each instance of an asset. Also, the layered model  supports distributed processing across multiple machines or networks and enables hierarchical modeling, with each layer - having suitable models (such as to enable fault or health monitoring on plant, unit, equipment, and sub-equipment levels to determine the health of an asset). In addition, the layered model  supports a calculation and logic execution environment. This environment could include pre-built model libraries supporting standard functions (like equipment performance calculations, instrument diagnostic parameter and limit checks, and vibration analytics modeling). Custom model libraries can be added to support additional functionality.","Examples uses of the framework  using the layered model  are shown in .  illustrates an example use of the framework  with a piece of rotating equipment  according to this disclosure. As shown in , the equipment  includes a motor  attached to a coupling , which couples rotation of the motor  to a gear mesh . The gear mesh  turns a rotor , which moves using a set of bearings . A vibration sensor  can measure vibrations for the entire piece of equipment .","Each component - of the equipment  produces its own vibration signals , which combine to form the overall time-domain vibration measurements  of the equipment . Each value in the vibration measurements  could be relatively small, such as two bytes. The vibration measurements  can undergo FFT or other signal processing  to produce a vibration spectrum . The vibration spectrum  could be represented using a relatively small amount of data, such as 4 kB. Each component - in the equipment  can generate its own vibration \u201csignature\u201d within the spectrum .","Here, the layers - can collect and validate the data from the sensor . The layer  can perform the processing , the layer  can use the spectrum  to identify faults with individual components - of the equipment , and the layer  can use the faults to identify an overall health index of the equipment .",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 7","b":["124","700","700","702","704","706","708","506","702","708","508","702","708","700","510","700"]},"In some embodiments, various processing steps related to fault detection can occur within a wireless preprocessing sensor . The sensor  can collect vibration measurements or other sensor readings for equipment and then process the sensor readings to identify one or more characteristics of the equipment. The sensor  could then transmit the identified characteristics (with or without the actual sensor measurements). The sensor  could, for example, represent a wireless preprocessing sensor disclosed in U.S. Patent Publication No. 2009\/0045940 (which is incorporated by reference). One example of this type of sensor is a HONEYWELL ONEWIRELESS EHM device.","In particular embodiments, the layer  can support the techniques disclosed in U.S. Patent Publication No. 2010\/0030492 to identify faults with bearings, such as cage, roller, outer race, and inner race defects and bearing wear. The layer  can support the techniques disclosed in U.S. Patent Publication No. 2010\/0256932 to identify faults with gears, such as gear cracks, pinion cracks, and gear\/pinion wear. The layer  can identify faults with shafts, such as misalignment, unbalance, or looseness. The layer  can support the techniques disclosed in U.S. Patent Publication No. 2010\/0256953 to identify faults with impellers, such as cavitations, impeller wear, and impeller cracks. These different faults can be detected using the techniques disclosed in U.S. patent application Ser. No. 12\/797,472, which supports the detection of faults in multiple subsystems even with overlapping vibration characteristics. All of these patent applications\/publications are hereby incorporated by reference.","The framework  allows systems like the ones shown in  to collect data from a wide variety of sources and process the data efficiently. The health indicators and other data can then be provided to an operator timely or used in any other suitable manner.","Although  illustrates one example of a layered model  for the large-scale framework , various changes may be made to . For example, the model  here is used to support analysis of vibration or other data related to rotating equipment. Other analyses and\/or equipment may be associated with other layered models. Although  illustrate example uses of the framework , the framework  could be used in any other suitable manner.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 8","b":["800","502","510","124","800","500","800","802","804","800","806","807","808","806"]},"A model is defined in the logic definition area  using the functional blocks , which can define input and outputs of a model and calculations performed within the model. The functional blocks  can be selected from one or more stencils , which identify predefined functional blocks. The functional blocks  could include blocks that execute particular mathematical calculations, define frequencies of interest, and reconstruct signals. A block properties area  identifies the properties for a particular functional block  selected in the logic definition area . A user can place functional blocks  within the logic definition area  and connect them, and the user can set certain properties of the functional blocks  within the properties area .","A variable list area  identifies the variables associated with the model being defined. For example, the variable list area  can identify the input variables for receiving data into the model and the output variables for providing data from the model. Again, the user can define the variables and their characteristics using the logic builder . In this particular example, the user is defining the logic used to collect a spectrum of vibration characteristics associated with rotating equipment and identify any problems with the rotating equipment.","Use of the logic builder  can result in higher productivity as it lowers the costs for building and maintaining the logic used in the models. It can also result in improved performance as the logic structures can be parsed and executed quickly. The use of the logic builder  can help to standardize maintenance practices, allow customers to insert expertise into solutions seamlessly, and integrate with manual data entry in the field. In addition, the logic builder  can provide support for nested models, which can be resolved recursively and evaluated at each instance level. Note that when a model is defined using the logic builder , the equation analyzer (like the functional unit ) can use information from the logic builder  to identify relationships between its input and output variables.","Although  illustrates one example of a logic builder  for building models at various levels - of the large-scale framework , various changes may be made to . For example, the logic builder  could have any other layout and any other or additional content. Also, any other suitable builder could be used to define models for the framework .",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIGS. 9 through 19","b":["124","900"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 9","b":["900","900","902","904","906","900","902","904","900","900","902","902","904","116"]},"The smart field devices  represent field devices having some form of intelligence, such as HART and FOUNDATION FIELDBUS transmitters and positioners. These field devices  typically report a wide variety of status or diagnostic events, which can relate to the health of associated processing equipment. The asset manager  uses this data to identify status and diagnostic events and associate health information with the processing equipment.","By doing this, the asset manager  integrates information from equipment in a processing facility and performs analyses using that information. The asset manager  also assesses abnormal conditions of the processing equipment and monitors the performance of the processing equipment. This supports collaboration among a number of different personnel and tools of the processing facility.","The asset manager  can collect data for monitoring, abnormal condition assessment, and analysis from any suitable sources. The data can include process data, historical data, and alerts from OPC DA, HDA, and A&E servers. The data can also include manual data (like field observations) from SQL servers or vibration spectra from HONEYWELL ONEWIRELESS devices or SKF @PTITUDE ANALYST sources. The data can be collected, processed, and made available in various representations. These representations can include a physical system representation (like one divided by equipment, instruments, servers, etc.), a functional system representation (like one divided by plant, unit, sections, etc.), or a hierarchy. Each entity (plants, units, equipment, instruments, etc.) can be assigned attributes and associated with additional data, such as linked documents, hyperlinks, and external applications.","The analyses performed by the asset manager  can include the same types of analyses discussed above, such as data validation, feature extraction, fault diagnosis, and health index integration. Other analyses could include process equipment trending and smart device fault history analysis. Abnormal condition assessment could involve the use of a standard library of fault models, as well as user-configurable models. The models can define the variables used in various calculations and logical algorithms. Visualization techniques can be used to present results of abnormal condition assessment, such as hierarchical and expandable tree maps. The performance monitoring can include comparing current operating performance parameters with expected parameters.","Collaboration is supported since the asset manager  is a common tool that can be used by operations, maintenance, and reliability personnel. The asset manager  supports repeatable recognition of equipment faults and can rate the severity\/criticality of equipment problems. Knowledge for a plant can be established and managed using the asset manager  to support equipment assessment based on performance, behavior, and condition indicators. Moreover, information about critical equipment risks can be shared using the asset manager . Collaboration can also be supported through the use of notifications, alarms, reports, and data export tools. This collaboration can help to support the rapid recognition of where problems occur. Among other things, this provides operations and maintenance personnel with a common framework for recognizing the effects of equipment conditions on production dependability.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 10","FIG. 4"],"b":["1000","900","1000","1002","1004","1006","1008","1010","1012","1014","1016","1018","1020","1022","1000"]},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIGS. 11 through 19","b":["1100","900","1100","1102","900","1102","1104","900","1102","1106","1108","1100"]},"In , a user is attempting to configure characteristics of a shell and tube asset type. The content area  includes a menu  allowing the user to configure different aspects of this asset type. In this case, the user has elected to define variables for the selected asset type, and a table  identifies existing variables and can be used to add, delete, and modify variables.","In , the user has elected to define or edit a calculation in the menu , causing a calculation definition area  to be displayed in the content area . The definition area  allows the user to define an equation in a model. Similarly, in , the user has elected to define or edit a logic block in the menu , causing a logic block definition area  to be displayed in the content area . The definition area  allows the user to define an equation in a functional logic block, as well as additional features (such as whether a notification is generated or an action is to be taken).","As shown in , the user has selected the monitoring function in the menu  and asset information links in the menu . The user has also selected an asset from the asset selection area . In this case, the GUI  presents in a list  different types of information that can be viewed. The user can select a type of information to be viewed, and asset information is then presented in a display area . Here, the user is viewing a PDF document related to a pump.","As shown in , if the user selects a monitoring view in the menu , a display  can be presented in the content area . The display  presents various performance monitoring information for a selected asset, such as the values of various variables associated with the selected asset. The display  could also present trend information for a selected variable or any other performance-related data.","As shown in , the user has selected an analysis function the menu  and an overall\/review function in the menu . A dashboard is being presented in the content area  for a selected asset. The dashboard includes a tree map , which identifies a hierarchical and expandable tree structure showing different equipment components associated with the selected asset. Different blocks  in the tree map  represent different components of the selected asset. A size of a block  could denote the relative importance of a component in the selected asset. A color, shading, or other indicator in a block  can denote whether that component or lower-level elements forming that component are reporting an abnormal condition. The tree map  allows a large number of components to be displayed in relation to other components. Other factors like rated criticality or assessed urgency can also be shown for each component.","If one of the blocks  in the tree map  is selected, data for the component associated with the selected block  is shown in a table . The table  can identify an asset\/component name, a name of a model associated with the asset\/component, and any fault for that asset\/component or its sub-elements.","As shown in , the user has selected the analysis function in the menu  and a mechanical analysis function in the menu . Different types of data are shown for a selected asset in various tables . In this example, the tables  identify a health index trend, an FFT trend, an overall peak trend, and a bearing fault energy trend for the selected asset.","As shown in , the user is viewing the fault model for a selected asset in the content area . The content area  identifies the selected fault model in a drop-down list , and faults for the selected fault model are identified in a list . Each fault in the list  is associated with an icon indicating whether that fault is confirmed, eliminated, or closed. A text box  allows the user to enter comments about the selected fault model, and a checkbox  allows the user to suppress all faults associated with the selected model.","As shown in , the user has selected to review a fault history for a selected asset. In this case, the content area  contains a table  showing the current and previous faults for a selected asset. The table  identifies each fault's name, status, start date, and end date (if any). This allows the user to view the history of faults for a particular asset.","As noted above, the asset manager  can use the framework  to provide performance monitoring, abnormal condition detection, and other functions related to industrial equipment. The asset manager  can be used by different personnel in a facility to enable more effective collaboration.","Although  illustrate details of one example of an asset manager  that uses the large-scale framework , various changes may be made to . For example, the asset manager  could be used with any other suitable components in  and include any other or additional services in  to support the framework . Also, the content and arrangement of information in the GUI  is for illustration only.","In some embodiments, various functions described above are implemented or supported by a computer program that is formed from computer readable program code and that is embodied in a computer readable medium. The phrase \u201ccomputer readable program code\u201d includes any type of computer code, including source code, object code, and executable code. The phrase \u201ccomputer readable medium\u201d includes any type of medium capable of being accessed by a computer, such as read only memory (ROM), random access memory (RAM), a hard disk drive, a compact disc (CD), a digital video disc (DVD), or any other type of memory.","It may be advantageous to set forth definitions of certain words and phrases used throughout this patent document. The term \u201ccouple\u201d and its derivatives refer to any direct or indirect communication between two or more elements, whether or not those elements are in physical contact with one another. The terms \u201capplication\u201d and \u201cprogram\u201d refer to one or more computer programs, software components, sets of instructions, procedures, functions, objects, classes, instances, related data, or a portion thereof adapted for implementation in a suitable computer code (including source code, object code, or executable code). The terms \u201ctransmit,\u201d \u201creceive,\u201d and \u201ccommunicate,\u201d as well as derivatives thereof, encompass both direct and indirect communication. The terms \u201cinclude\u201d and \u201ccomprise,\u201d as well as derivatives thereof, mean inclusion without limitation. The term \u201cor\u201d is inclusive, meaning and\/or. The phrases \u201cassociated with\u201d and \u201cassociated therewith,\u201d as well as derivatives thereof, may mean to include, be included within, interconnect with, contain, be contained within, connect to or with, couple to or with, be communicable with, cooperate with, interleave, juxtapose, be proximate to, be bound to or with, have, have a property of, or the like. The term \u201ccontroller\u201d means any device, system, or part thereof that controls at least one operation. A controller may be implemented in hardware, firmware, software, or some combination of at least two of the same. The functionality associated with any particular controller may be centralized or distributed, whether locally or remotely.","While this disclosure has described certain embodiments and generally associated methods, alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly, the above description of example embodiments does not define or constrain this disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of this disclosure, as defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of this disclosure, reference is now made to the following description, taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 2A through 2C"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 6 and 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 9 through 19"}]},"DETDESC":[{},{}]}
