---
title: Software architecture for controlling an apparatus with one or more hardware units
abstract: A software architecture is used to control an apparatus with one or more hardware units that each perform one or more corresponding functions. The software architecture includes a device group data structure for each hardware unit and one or more device data structures for each hardware unit function. In a preferred, but an example embodiment, one or more device set data structures are defined in the software architecture. Each device set data structure is associated with the device group and includes one or more device data structures. The data structures defined in the software architecture are used to control the apparatus functionality physically performed by the hardware units.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07107577&OS=07107577&RS=07107577
owner: Telefonaktiebolaget LM Ericsson (publ)
number: 07107577
owner_city: Stockholm
owner_country: SE
publication_date: 20021120
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present invention relates to computer control of an apparatus with one or more hardware units using a software architecture which performs that control independently of the actual implementation of the hardware unit functionality.","Many types of apparatus are constructed using modular components that perform certain apparatus functions. Each module may be viewed as a hardware unit that is responsible for performing one or more functions. The functions to be performed by each hardware unit can vary from minor to complex.","An example of such an apparatus is a radio base station used in, for example, a radio telecommunication system.  shows a simplified radio communication system  including a radio network controller  coupled to plural base stations and . The radio network controller  is typically coupled to other networks such as circuit-switched and packet-switched networks. In this example, both base stations are \u201cmacro\u201d base stations meaning that all of the hardware units used to perform each base station's functions are located in one physical location. Base station includes a number of replaceable hardware units that contain electrical and\/or electronic circuitry, components, power supplies, software, etc. Example base station hardware units include: one or two timing unit boards , one or two base band transmit boards , one or more random access\/receive boards , one or more transceiver boards , one or two radio frequency interface boards , one or more antenna interface boards , one or more multi-carrier power amplifier boards , a power control board, and a controller board  responsible for controlling the base station in general and each of the function boards \u2013. In operation, the base station effects radio communication with one or more mobile stations .","Accordingly, base station is an example of a modular apparatus equipped with various types of hardware units that perform different functionalities. Different types of base stations from the same base station family often support the same functionality, although different members of the base station family may use different hardware units to implement that functionality. For example, as electronic and integrated circuit manufacturing and miniaturization techniques advance, more functionality will likely be integrated into a single hardware unit. In the base station shown in , it may be desirable to combine the baseband transmit board  and the random access\/receive board  into a single board. Alternatively, it may be desirable to modify an individual board or the board configuration. For example, it may be desirable to add additional transceiver boards  to increase the capacity of the base station . Another possibility is that the processing capacity of a random access\/receive board  is increased, which can either be used to increase the capacity of the base station or to provide the same capacity with fewer random access\/receive boards. Indeed, one may foresee that each board shown in base station may require modification or elimination in the integration example explained above.","As base station technology evolves, new base station configurations and functionality will be produced. An example of a new base station configuration is a main-remote base station configuration where the main unit includes hardware units that perform baseband functions for the base station and a physically remote unit performs radio functions for the base station. At the same time, older base station configurations should still be supported. In other words, a radio communications system may well contain both old and new base station equipment that needs to be integrated.","It is an object of the present invention to provide a mechanism that supports and controls a wide range of hardware units without being tied to the implementation details of each hardware unit.","It is an object of the present invention to provide a mechanism that readily and flexibly accommodates changes to individual hardware units, changes to configuration of the hardware units, and changes to the functionality that needs to be performed.","It is an object of the present invention to provide a mechanism that supports integrating functions previously performed by multiple hardware units into a single hardware unit.","It is an object of the present invention to provide a mechanism that supports different (e.g., increased) capacities of hardware units of the same type.","It is an object of the present invention to provide a mechanism that supports integrating new functionality into the apparatus.","It is an object of the present invention to provide a mechanism that permits a standardized approach for handling all the hardware units in the apparatus.","The present invention addresses and meets these and other objectives. A software architecture is used to control an apparatus with one or more hardware units that each perform one or more corresponding functions. The software architecture includes a device group data structure for each hardware unit and one or more device data structures for each hardware unit function. In a preferred, but an example embodiment, one or more device set data structures are defined in the software architecture. Each device set data structure represents one or more device data structures. The data structures defined in the software architecture are used to control the apparatus functionality physically performed by the hardware units.","The software architecture is independent of the specific hardware unit actually implementing a function and of how the hardware unit actually performs the function. For example, the device data structure is independent from the hardware unit responsible for actually implementing the device function. As a result, an identity, configuration, or implementation of a hardware unit may be changed without having to change the associated device data structure. To achieve this independence, the hardware unit stores a \u201cmapping\u201d between each function it is responsible for performing and the device data structure corresponding to that function.","Each device group data structure is associated with device data structures of a certain type in one hardware unit and device set data structures if employed. A device set data structure can be introduced to manage a set of individual device data structures. For purposes of illustration only, it is assumed that one or more device set data structures are employed. A device group can be associated with both different types of device set data structures and multiple instances of the same device set data structure. Each device group data structure is used by a software architecture manager to bring each device set associated with that device group into service and coordinate each device set with the device group. The device group manages the device set, and the device set in turn manages the individual devices associated with that device set. If a hardware unit is changed to support a different function, the hardware unit is associated with a new device group.","The software architecture manager manages the hardware units and the apparatus using the device group, device set, and device data structures in the software architecture. In addition, a device group software interface is defined for each device group, and a device set software interface is defined for each device set\/device. These software interfaces define how the software architecture manager communicates with and manages the hardware units using the software architecture and include common procedures and signalling formats.","One of the advantages of the present invention is that functionality implemented by plural hardware units may be readily and flexibly integrated into a single, new hardware unit simply by defining a new device group data structure for the new hardware unit. That new device group data structure includes the device set and device data structures already established and associated with the \u201cold\u201d hardware units. Although a new device group software interface is defined, the device set\/device software interface already defined for the device set\/devices associated with the \u201cold\u201d hardware units are employed for the new, integrated configuration.","A non-limiting, example application of the present invention is to radio base stations. In this context, the manager uses the software architecture to start up and control the base station hardware units. The manager may also use the software architecture to flexibly expand the capacity of one or more of the base station hardware units simply by increasing the number of device data structures associated with a corresponding device set or device data structure. Moreover, the software architecture may be used to enhance one or more capabilities associated with one or more devices in the radio base station. Still further, the software architecture may be used to reconfigure a macro base station as a main-remote base station or a hybrid macro\/main-remote base station.","In the following description, for purposes of explanation and not limitation, specific details are set forth, such as particular embodiments, examples, procedures, techniques, etc. in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that the present invention may be practiced in other embodiments that depart from these specific details. For example, while the present invention is described in one non-limiting embodiment as applied to a radio base station in a radio communication system, the present invention may be used in any equipment that includes multiple hardware units.","In some instances, detailed descriptions of well-known methods, interfaces, devices, and signaling techniques are omitted so as not to obscure the description of the present invention with unnecessary detail. Moreover, individual function blocks are shown in some of the figures. Those skilled in the art will appreciate that the functions may be implemented using individual hardware circuits, using software functioning in conjunction with a suitably programmed digital microprocessor or general purpose computer, using application specific integrated circuits (ASIC's), and\/or using one or more digital signal processors (DSPs).","The present invention seeks to provide a software architecture that permits flexible management and control of equipment or other apparatus that relies on modular hardware units to perform various functions for that equipment\/apparatus. Such flexibility permits easy expansion, modification, and integration of the equipment. The function block diagram shown in  illustrates an apparatus controller  coupled to a plurality of hardware units . The controller includes a software manager  coupled to a software architecture and to software architecture interfaces . Both the manager  and the software architecture and interfaces  are implemented using appropriate software programs and data structures processed and stored using conventional data processing and data storage circuitry. A hardware unit is a physical, replaceable entity such as a board or a specific unit that is part of the apparatus equipment and supports\/performs some function of the apparatus. Hardware units can be located in one physical location, e.g., a cabinet of boards or racks, or they can be physically separated and even physically remote. The manager  controls the hardware units  operation using the software architecture and software architecture interfaces .","The software architecture  defines a framework that logically represents the functionality to be performed by the hardware units . The software architecture is supported by the manager  and by each hardware unit . From the manager's perspective, the software architecture  defines how the manager addresses each hardware unit and controls its operation. The software architecture includes software interfaces supported by both the manager  and each of the hardware units .","The software architecture  insulates the manager  from the actual implementation details of the hardware units . The software architecture and interfaces  also create uniformity in dealing with different types\/kinds of hardware units. They also permit easy and flexible adaptation to different hardware unit configurations that may change\/evolve over time.","The software architecture models functionality on two levels: the hardware unit level and the functionality level. Referring now to the function block diagram of the software architecture  shown in . The hardware unit level is represented by the software abstraction or data structure termed the \u201cdevice group.\u201d There is a one-to-one correspondence between each hardware unit and a device group data structure. The functionality level is represented by the software abstraction or data structure \u201cdevice.\u201d The device is a logical abstraction\/data structure of some processing function. A function can be defined as one or more inputs resulting in a well-defined output(s). Because multiple devices may perform the same type of function, it is also desirable (although not required) to have an intervening software abstraction\/data structure in the data software architecture referred to as a \u201cdevice set\u201d. The device set data structure represents one or more devices of a certain type for one hardware unit. Certain characteristics, functions, and\/or configurations may be common to all devices of a specific type. This commonality is handled by the device set data structure. Each of these software architecture data structures has one or more specific instantiations that represent actual, physical hardware units or functionalities. However, only device groups directly map to a hardware unit; device set and device are logical abstractions.","Consider the following non-limiting example using the base station illustrated in . A device group might correspond to the multi-carrier power amplifier (MCPA) board, which corresponds to a hardware unit. The device set might correspond to the transmit power amplifier board, which is part of that MCPA hardware unit. A device might correspond to a specific transmit power amplifier on the transmit power amplifier board. Each of the device group, device set, and device data structures includes a corresponding software interface, a set of associated data attributes, and control functionality.","A representation of the software architecture  is shown in function block form in . M device groups  are shown for M hardware units, where M is a positive, non-zero integer. Each device group may differ from the other device groups. From the manager's point of view, the device group is the functional representation of a hardware unit. Each device group  contains one or more device sets . N device sets are shown, for purposes of illustration only, where N is a positive, non-zero integer. Each device set may differ from the other device sets. The device group brings its device set(s) into service and coordinates the device set(s) within the device group. Because there is a one-to-one relationship between a hardware unit and a device group instance, if a hardware unit supports a different functionality, a new device group is associated with that hardware unit.","Each device set  includes one or more devices . P devices are shown under each device set for purposes of illustration only, where P is a positive, non-zero integer. As explained earlier, a device is a logical abstraction\/data structure of some processing function. Although each device is controlled and supervised by the manager , from the manager's point of view, it does not care how the device is implemented. In other words, the device data structure does not depend on how the device function is implemented in the hardware unit. Although it may be possible to identify a single chip or board on a hardware unit as the place where the device processing occurs, the processing may just as well be spread out over various ASIC's on that hardware unit. The device abstraction\/data structure allows for changes in the hardware unit implementation without having to change the manager . Hardware unit  is responsible for mapping the device data structure to the actual implementation\/realization of the device's processing function.","In situations where there are typical multiple devices of the same type, it is useful to have a device set data structure\/abstraction in the software architecture . A device set is particularly desirable for moving a device function to any hardware unit where the device functionality is performed. The device set data structure is used to represent one or more devices of a certain type for one hardware unit. Certain characteristics, functions, and\/or configurations that are common to these devices are handled by the device set data structure .","The device group has its own software architecture interface. Similarly, a device set and its device(s) have their own software architecture interface.  illustrates these interfaces between the manager , a device group X  and device sets A and B . The manager and the device group X communicate using a Device Group Interface-X (DGIF-X). The two device sets A and B and their respective devices  communicate with the manager  using their respective Device Set Interfaces DSIF-A and DSIF-B, respectively. These interfaces are (preferably) standardized to provide and\/or enforce a common way of control, but may also employ specific extensions. In , those extensions are represented as -X, -A, and -B.","The software architecture  is how the manager  \u201csees\u201d the functionality supported by the hardware units. To make the manager  independent from a specific hardware realization, the hardware units must adhere to the data structures in the software architecture and must support the software interfaces . The hardware unit maps a particular data structure in the software architecture  to the physical implementation. As shown in , each hardware unit  includes a controller coupled to the software architecture interface support . The controller  includes a software mapping table  which maps each procedure from the software architecture interfaces  to an executable function on the hardware unit. Although a mapping table is shown, one need not be used if the hardware unit uses some other mechanism to perform the mapping. Similar mapping is performed for the device group and device set data structures.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 6","b":["60","62","64","66","66"]},"Using the software architecture and interfaces, functionality originally realized using more than one \u201cold\u201d hardware unit can be readily integrated into one \u201cnew\u201d hardware unit. To perform this integration, a new device group is defined including a new device group interface. The device sets from the old hardware units are combined in this new device group and keep their already-defined device set interfaces.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 7","FIG. 7"],"b":["1","2","1","1"]},"The following gives a detailed example for the existing HW Units, associated Device Groups, and contained Device Sets and Devices before integration.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Device",{}]},{"entry":["HW Unit","Group","Device Set"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Timing Unit Board","TU","TIM: Timing"]},{"entry":["Baseband Transmit Board","TX","DBCC: Downlink Baseband"]},{"entry":[{},{},"CellCarrier"]},{"entry":[{},{},"DBCH: Downlink Baseband"]},{"entry":[{},{},"Channel"]},{"entry":["Random Access and Receive","RAX","UBCH: Uplink Baseband"]},{"entry":["Board",{},"Channel"]},{"entry":["Tranceiver Board","TRX","TR: Transmit\/Receive"]},{"entry":["Radio Frequency Interface","RFIF","DPCL: Dpwnlink Power"]},{"entry":["Board",{},"Clipping"]},{"entry":["Antenna Interface Unit Board","AIU","AI: Antenna Interface"]},{"entry":["Multi-Carrier Power Amplifier","MCPA","TPA: Transmit Power"]},{"entry":[{},{},"Amplifier"]},{"entry":["Antenna System Controller","ASC","TMA: Tower Mounted"]},{"entry":[{},{},"Amplifier"]},{"entry":["External Alarm Unit","XALM","ALM: Alarm"]},{"entry":[{},{},"OUT: Output"]},{"entry":["Fan Unit","FAN","FE: Fan Element"]},{"entry":["Capacitor Unit","CU","PD: Power Distributor"]},{"entry":["Power Control Unit","PCU","PS: Power Supply"]},{"entry":[{},{},"BF: Battery Fuse"]},{"entry":[{},{},"AC: AC Connector"]},{"entry":[{},{},"CL: Climate"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In this example, each device group has a Central Board Control Interface (CBCI). Each device set and its devices have a Central Device Control Interface (CDCI). Specific extensions of these interfaces are shown at the bottom of  between the manager and each of the hardware units. There are CBCI-TRX and CDCI-TR interfaces between the manager and the TRX hardware unit. CBCI-AIU and CDCI-AI interfaces are employed between the manager and the AIU hardware unit. CBCI-MCPA and CDCI-TPA interfaces are employed between the manager and the MCPA hardware unit. A CBCI interface may specify procedures for various functions such as loading, board test, subscriptions, board faults, board resets, etc. A CDCI interface on a CDCI device set level may specify procedures for various functions such as set test, subscriptions, set faults, set resets, capacity information, capability information, etc. A CDCI interface on a CDCI device level may specify procedures for various functions such as setup, release, capability information, device faults, etc.","For each specific device group, there is a specific CBCI extension that inherits the procedures from the CBCI and contains the specific extensions for that device group. For each specific device set and device, there is a CDCI extension that inherits the procedures from the CDCI and contains the specific extensions for that device set and device.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8"},"In this example reconfiguration and integration, three different hardware units corresponding to a Transceiver (TRX) hardware unit, an Antenna Interface Unit (AIU) hardware unit, and a Multi-Carrier Power Amplifier (MCPA) hardware unit have corresponding device groups. Each of these hardware units, formerly positioned at the macro base station, now is to be integrated into a single remote hardware unit coupled to the main base station by an optical link. A new device group Remote Radio Unit (RRU) is created, which contains all of the device sets from the three device groups TRX, AIU, and MCPA.","After the integration, the new RRU device group has a new CBCI interface between the manager and the new RRU hardware unit. However, the device sets and their devices employ the same CDCI interfaces as used before for the three separate hardware units. The manager needs to make only a relatively small change to support the new CBCI-RRUs interface.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 9","FIG. 8","FIG. 9"],"b":"40"},"After the functions of the three hardware units have been integrated into one RRU hardware unit, the manager operates on the RRU hardware unit in substantially the same way despite the fact that RRU unit is physically remote from the main base station unit. The RRU device group is started, and thereafter, all three device sets are started. The same CDCI interface extensions are used; it does not make a difference to the manager that the device group has changed with respect the CDCI interface level. The manager simply needs to know the specific device sets that exist below the new RRU device group. Those device sets are already identified in the software architecture.","The following gives an overview of an example CBCI interface and examples of specific extensions. The CDCI interface may have a similar list of procedures. Unless otherwise indicated, the manager initiates each procedure.",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["CBCI Procedures","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CONN_ESTABLISH","Establish connection and negotiate"]},{"entry":[{},"interface version to communicate"]},{"entry":[{},"with the HW Unit"]},{"entry":["START_UP_TEST","Execute startup test on the HW"]},{"entry":[{},"Unit"]},{"entry":["SELF_TEST","Execute self test on the HW Unit"]},{"entry":["AUDIT","Request the current state of the"]},{"entry":[{},"HW Unit. This determines the way"]},{"entry":[{},"the Manager will start-up the board"]},{"entry":["WARM_RESTART","Perform a restart of the HW Unit"]},{"entry":[{},"without having to reload it."]},{"entry":["ENABLE_OPERATION","Put the HW Unit in the operational"]},{"entry":[{},"state. It is now ready to be used."]},{"entry":["DISABLE_OPERATION","Put the HW Unit in a disabled"]},{"entry":[{},"state. It shall shutdown as much as"]},{"entry":[{},"possible to save power and prohibit"]},{"entry":[{},"interference with other boards."]},{"entry":["SUBSCRIBE_FAULTS","Subscribe on Faults. The HW Unit"]},{"entry":[{},"shall inform the Manager about"]},{"entry":[{},"outstanding Faults"]},{"entry":["UNSUBSCRIBE_FAULTS","Cancel the subscription on Faults"]},{"entry":["FAULT","Used by HW Unit to inform"]},{"entry":[{},"Manager about detected Fault"]},{"entry":["VISUAL_INDICATION","Set the LED's on the HW Unit"]},{"entry":[{},"to a certain state."]},{"entry":["GET_BOARD_INFO","Retrieve specific HW Unit"]},{"entry":[{},"characteristics."]},{"entry":["GET_RUNNING_DP_LM","Get the name of the program run-"]},{"entry":[{},"ning on the HW specific processors"]},{"entry":["SW_PRODUCT_INV","Retrieve the programs that are"]},{"entry":[{},"stored in the flash memory on"]},{"entry":[{},"the HW Unit"]},{"entry":["LOAD_DP","Load a program on the HW"]},{"entry":[{},"specific processors"]},{"entry":["LOAD_FLASH","Load a program to the flash"]},{"entry":[{},"memory on the HW Unit"]},{"entry":["MAX_LM_SIZE","Retrieve the available space on the"]},{"entry":[{},"flash memory"]},{"entry":["DELETE_LM","Delete a program from the flash"]},{"entry":[{},"memory on the HW Unit"]},{"entry":["BB_CLOCK_SV_FAULT","HW Unit informs Manager about"]},{"entry":[{},"fault with clock input"]},{"entry":["BB_CLOCK_SV_FAULTCEASE","HW Unit informs Manager that"]},{"entry":[{},"fault with clock input is gone"]},{"entry":["TEMP_SV_FAULT","HW Unit informs Manager about"]},{"entry":[{},"fault with board temperature"]},{"entry":["TEMP_SV_FAULTCEASE","HW Unit informs Manager that"]},{"entry":[{},"fault with board temperature is"]},{"entry":[{},"gone"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Besides these common procedures, a CBCI-X can contain procedures that are only applicable for that specific Device Group X. This can be any kind of procedure but will likely be only configuration of specific parameters, e.g., CONFIG_PARAM_X or CONFIG_MODE_Y.","Using the software architecture in accordance with the present invention, it is relatively easy then to expand the capacity of a hardware unit. Capacity can be extended by increasing the number of devices supported in a device set. If a device uses processing capacity from a shared pool of processing resources, the processing capacity of the pool can be extended. Consider this example. A first generation of receiver boards supports  devices in its device set. The next generation of receiver boards supports  devices in its device set. Future generations may support even more. Both generations of the receiver board may be employed in the same configuration. To accomplish this, the manager simply requests the device set associated with the hardware unit to provide the number of devices it supports.","For a small base station, it may make sense to integrate a number of hardware units into a single hardware unit. This results in a new device group with a number of device sets. If the required capacity for such a small base station is lower than what is currently configured, the capacity is easily reconfigured simply by reducing the number of devices supported in the device set. Accordingly, reduced capacity and fewer devices can be supported with very limited impact on the manager.","It is also relatively easy to change the capability of the devices. Individual device level or set level capability information is simply provided to the manager which accounts for these enhanced capabilities. In the case of device level capabilities, the user of the device in the manager can request the capabilities from the device via the device interface architecture and use the device accordingly. In the case of device set level capabilities, the same approach may be followed, although these capabilities apply to all the devices in the device set. Here as well the manager retrieves the capability information from the device set and uses the device set and devices according to the supported capabilities.","Consider the example of a device that supports a specific algorithm. A new generation of boards can support a more advanced algorithm. In the situation where two boards are used\u2014one of an old generation and one of a new generation\u2014together in the same configuration and where it is required that the same algorithms are used, the manager retrieves for both devices the algorithms each device supports and selects the algorithm that both devices support.","Using the software architecture in accordance with the present invention, it is relatively easy to handle a partly malfunctioning hardware unit. If the hardware unit detects that one of the devices in a device set is malfunctioning, it may report a fault on the CDCI interface for that device. Based on that report, the manager can take appropriate action for recovery. Faults can be handled on each level in the software architecture in the same way. Faults on a certain level effect only that level and levels below. For example, faults on a device level affect only one device instance. Faults on a device set level affect all devices within that device set. Faults on a device group level affect the whole hardware unit. Device set and device data structures not affected by the fault can still be used.","While the present invention has been described with respect to particular embodiments, those skilled in the art will recognize that the present invention is not limited to these specific example embodiments. Different formats, embodiments, and adaptations besides those shown and described as well as many variations, modifications, and equivalent arrangements may also be used to implement the invention. Accordingly, the invention is limited only by the scope of the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features, and advantages of the present invention may be more readily understood with reference to the following description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 9","FIG. 8"]}]},"DETDESC":[{},{}]}
