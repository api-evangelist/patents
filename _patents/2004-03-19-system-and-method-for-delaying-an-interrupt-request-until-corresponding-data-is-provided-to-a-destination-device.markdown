---
title: System and method for delaying an interrupt request until corresponding data is provided to a destination device
abstract: A method and system for forwarding interrupt requests from a source device to a destination device. A controller bridge receives data, from a source device, for a destination device and stores the incoming data in a data queue. An interrupt request is received from the source device for the destination device and forwarded to the destination device in response to completing a transfer of the data from the source device to the destination device. If data received from the source device for the destination device are pending in the data queue, the interrupt request is rejected and the source may resubmit the interrupt request at a later time. If additional data are received from the source device for the destination device, the data may be rejected in response to an interrupt pending in the interrupt queue from the source device for the destination device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07096297&OS=07096297&RS=07096297
owner: International Business Machines Corporation
number: 07096297
owner_city: Armonk
owner_country: US
publication_date: 20040319
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","The present invention relates in general to a system and method for forwarding interrupt requests. In particular, the present invention relates to a system and method for receiving interrupt requests from a source device and delaying delivery of the requests to a destination device until the delivery to the destination device of previously received data has been completed.","2. Description of the Related Art","Interrupt requests are a common means of communication between devices in computer systems. An interrupt is sent from a first device to a second device in order for the first device to \u201cget the attention\u201d of the second device before the first device sends instructions and\/or data to the second device.","Devices may be connected to each other directly or the devices may be connected to each other through a data bus that connects multiple devices. In some instances, devices exchanging data may be located on two or more different busses; the busses themselves may be connected though a bridge controller. Bridge controllers typically include buffers or queues and are configured to receive and store data from a first device and subsequently send the data to a second device. In high data traffic situations, the bridge may store the data in the buffer and send the data to the destination device on a first-in-first-out basis and\/or in response to an availability of the bus(ses) connecting the bridge controller to the destination device.","Interrupt requests typically are routed through direct lines between the devices, even in cases where bridge controllers control the flow of data. In the cases where a bridge (or a similar device) exists, a first device may, for example, transmit data to a second device through a bus or busses and one or more bridges, directly send an interrupt to the second device, and then send instructions (again through the bus or busses and one or more bridges)for the processing of that data. The interrupt may be sent from the first device in order to \u201cget the attention\u201d of the second device and ask the second device to process the data, for example. In many instances, however, the data may be delayed in the bridge and may reach the second device before the forwarding of the data to the second device has been completed. The second device would then receive an interrupt and wait for instructions to process data that the second device has not yet received.","What is needed, therefore, is a system and method that could better manage the delivery of interrupts and data from one device to another. The system and method should provide a way of ensuring the completion of the data delivery to a device prior to sending an interrupt request, whose action depends upon the completion of the data transfer, to the device.","It has been discovered that the aforementioned challenges can be addressed by a system and method for forwarding interrupts from a source device to a destination device through a bridge controller in response to completing a transfer of previously received data from the source device to the destination device. If the transfer of the data is not complete, the interrupt request is held until the data transfer has been completed. Any additional data received from the source device for the destination device may be rejected until the previously received data have been transferred and the interrupt has been forwarded to the second device.","A bridge controller receives data from a source device for a destination device. The incoming data may be stored in a data queue with other incoming data from other devices served by the bridge controller. Data from the data queue may be transferred to the destination device on a first-in-first-out priority and in response to an availability of a path (such as a bus or busses) from the bridge controller to the destination device. A device ID of the source device and an address of the destination device may be determined and also stored in the data queue.","An interrupt request is then received from the source device for the destination device. The interrupt may be stored in an interrupt queue and forwarded to the destination device in response to the completion of a transfer of the previously received data from the source device and intended for the destination device.","If data received from the source device and intended for the destination device are pending in the data queue, the interrupt request is held in the interrupt queue and is not forwarded to the destination device. If additional data are received from the source device for the destination device, the data may be rejected by the bridge controller if the interrupt request is still pending in the interrupt queue.","Delaying the delivery of the interrupt request from the source device to the destination device ensures that any data from the source device for the destination device (upon which data the interrupt request may depend) are delivered to the destination device before the interrupt request is delivered to the device.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention defined in the claims following the description.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 1"],"b":["120","120","120","110","120","115","135","120","130","110","120","135","120","135","110","135"]},"In one embodiment, bridge controller  is configured to receive data from a source device and forward the data to a destination device. In addition, bridge controller  is configured to receive interrupt requests from a source device and forward the requests to a destination device.","Upon receiving data from a source device, bridge controller  is configured to store the data in data queue . Data may then be transferred to the destination device on a first-in-first-out priority and in response to the availability of the bus, busses, and\/or additional bridge controllers connecting bridge controller  to the destination device. In addition, upon receiving an interrupt request, bridge controller  is configured to store the interrupt request in interrupt queue . In one embodiment, bridge controller  is configured to forward the interrupt request to the destination device if there are no data pending from the source device and intended for the destination device in data queue .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":"220"},"In one embodiment, data queue  is configured to hold the data to be transferred as well as the ID of the source device and the address destination device. In addition, data queue  may hold a data transfer status, which indicates whether the data transfer has been completed. The data transfer status may be used, for example, to determine whether to forward an interrupt request to a destination device. If there are data from the source device pending to be delivered to the destination device, an incoming interrupt from the source device for the destination device is not forwarded to the destination device.","In one embodiment, interrupt queue  is configured to hold the ID of the source device, the address of the destination device, and an interrupt pending status, which indicates whether the interrupt has been delivered to the destination device. The interrupt transfer status may be used, for example, to determine whether to accept more data from a source device. If there is an interrupt pending from a source device for a destination device, for example, the bridge controller may reject additional data transfer requests from the source device until the interrupt request has first been delivered to the destination device.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 4"],"b":["300","310","310"]},"After predefined process , processing continues at step  where the data input buffer is examined to determine whether the input buffer contains data received from a device. A determination is then made as to whether data were found in the data input buffer of the bridge controller at decision . If there are data pending in the data input buffer, decision  branches to \u201cyes\u201d branch  whereupon, at predefined process , the received data are handled. More details on the processing that takes place at predefined process  are provided in the flowchart in  and accompanying text.","On the other hand, if there are no data in the data input buffer, decision  branches to \u201cno\u201d branch  bypassing predefined process . Processing then continues at step  where the interrupt input buffer is examined to determine whether the input buffer contains interrupt requests received from a device. A determination is then made as to whether an interrupt request was found in the interrupt input buffer at decision . If no interrupt requests were found in the interrupt input buffer, decision  branches to \u201cyes\u201d branch  whereupon, at predefined process , the received interrupt is handled. More details on the processing that takes place at predefined process  are provided in the flowchart in  and corresponding text.","On the other hand, if there are no interrupts pending in the interrupt input buffer, decision  branches to \u201cno\u201d branch  bypassing step . Processing then continues at step  where the data queue is examined for data pending in the data queue to be transferred to destination devices. A determination is then made as to whether pending data were found in the data queue at decision . If there are data pending in the data queue, decision  branches to \u201cyes\u201d branch  whereupon, at step , data are transferred from the data queue to the appropriate destination device in a first-in-first-out priority. The order of the data transfer may also depend on the availability of a path (such as busses and\/or other bridges) between the bridge controller and the destination device.","On the other hand, if there are no data pending in the data queue, decision  branches to \u201cno\u201d branch  bypassing step . At step , the interrupt queue is examined to determine whether interrupt requests are pending for delivery to destination devices in the interrupt queue of the bridge controller. A determination is then made as to whether pending interrupts were found in the interrupt queue at decision . If there are pending interrupts, decision  branches to \u201cyes\u201d branch  whereupon, at step , the interrupts in the interrupt queue are delivered to the appropriate destination devices at step .","On the other hand, if there are no interrupts pending in the interrupt queue, decision  branches to \u201cno\u201d branch  bypassing step . Processing subsequently loops back to step  where the input buffers and data queues continue to be examined for data. The looping continues until the bridge controller is turned off or otherwise the bridge controller's operation is suspended.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","b":["400","410","415"]},"At step , the device's ID is received and the ID is added to bridge register . A determination is then made as to whether more devices remain to be registered at decision . If there are more devices remaining to be registered with the bridge controller, decision  branches to \u201cyes\u201d branch  whereupon, at step , the next device to be registered with the bridge is selected. Processing then loops back to step  for the newly selected device to be registered. This looping continues until there are no more devices to be registered, at which time, decision  branches to \u201cno\u201d branch  whereupon processing returns to the calling routine at .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5","b":["500","510"]},"At step , interrupt queue  is searched in order to determine whether there is an interrupt pending from the source device to the destination device. In another embodiment, interrupt queue  may be searched in order to determine whether the source device has an interrupt pending for any device. In one embodiment, interrupt requests are stored in interrupt queue  as the interrupt requests are received from the devices connected to the bridge controller. An interrupt request is removed from the queue (or marked as not pending) after the interrupt request has been forwarded to the appropriate destination device.","A determination is then made as to whether a pending interrupt from the source device intended for the destination device was found at decision . If no pending interrupt was found, decision  branches to \u201cno\u201d branch  whereupon, at step , the received data are added to data queue . In one embodiment, data are transferred to the appropriate destination devices on a first-in-first-out priority (FIFO). The priority of the transfers may also be dependent on the data traffic existing on a connection path (such as a bus) leading to the destination device from the bridge controller. Processing subsequently returns to the calling routine at .","Returning to decision , if a pending interrupt was found in the interrupt queue, decision  branches to \u201cyes\u201d branch  whereupon, at step , the incoming data are rejected and are not added to data queue . A pending interrupt request implies the existence of pending older data that must first be delivered to the destination device before the new data (whose processing most likely depends on the processing of the old data) can be delivered. The source device may at this point re-submit the data at a later time, in which case, the same test is performed (that is, it is determined whether there is an interrupt pending, and depending on whether an interrupt is pending or not, the data is handled accordingly).","Processing subsequently returns to the calling routine at .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 6","b":["600","610"]},"Processing subsequently continues at step  where data queue  is searched in order to determine whether there exist pending data in the data queue from the source device intended for the destination device. In another embodiment, data queue  may be searched in order to determine whether the source device has data pending for any device. A determination is then made as to whether pending data were found at decision . If there are no pending data, decision  branches to \u201cno\u201d branch  whereupon, at step , the interrupt request and related information is added to interrupt request queue . In one embodiment, the interrupt requests are forwarded to the appropriate destination devices on a first-in-first-out priority. Processing subsequently returns to the calling routine at .","If, on the other hand, pending data were found in the data queue, decision  branches to \u201cyes\u201d branch  whereupon, at step , the interrupt request is rejected. At this time, the source device may resubmit the interrupt request at a later time. Processing subsequently returns to the calling routine at .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 7","b":["701","701","700","702","704","702","706","708","710","700","704","708","702","708","706","702","700","730","710","712","710","714","714","710","718","714","718"]},"PCI bus  provides an interface for a variety of devices that are shared by host processor(s)  and Service Processor  including, for example, flash memory . PCI-to-ISA bridge  provides bus control to handle transfers between PCI bus  and ISA bus , universal serial bus (USB) functionality , power management functionality , and can include other functional elements not shown, such as a real-time clock (RTC), DMA control, interrupt support, and system management bus support. Nonvolatile RAM  is attached to ISA Bus . Service Processor  includes JTAG and I2C busses  for communication with processor(s)  during initialization steps. JTAG\/I2C busses  are also coupled to L2 cache , Host-to-PCI bridge , and main memory  providing a communications path between the processor, the Service Processor, the L2 cache, the Host-to-PCI bridge, and the main memory. Service Processor  also has access to system power resources for powering down information handling device .","Peripheral devices and input\/output (I\/O) devices can be attached to various interfaces (e.g., parallel interface , serial interface , keyboard interface , and mouse interface  coupled to ISA bus . Alternatively, many I\/O devices can be accommodated by a super I\/O controller (not shown) attached to ISA bus .","In order to attach computer system  to another computer system to copy files over a network, LAN card  is coupled to PCI bus . Similarly, to connect computer system  to an ISP to connect to the Internet using a telephone line connection, modem  is connected to serial port  and PCI-to-ISA Bridge .","While the computer system described in  is capable of executing the processes described herein, this computer system is simply one example of a computer system. Those skilled in the art will appreciate that many other computer system designs are capable of performing the processes described herein.","One of the preferred implementations of the invention is an application, namely, a set of instructions (program code) in a code module which may, for example, be resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, on a hard disk drive, or in removable storage such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network. Thus, the present invention may be implemented as a computer program product for use in a computer. In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps.","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended, such intent will be explicitly recited in the claim, and in the absence of such recitation no such limitation is present. For a non-limiting example, as an aid to understanding, the following appended claims contain usage of the introductory phrases \u201cat least one\u201d and \u201cone or more\u201d to introduce claim elements. However, the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles \u201ca\u201d or \u201can\u201d limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases \u201cone or more\u201d or \u201cat least one\u201d and indefinite articles such as \u201ca\u201d or \u201can\u201d; the same holds true for the use in the claims of definite articles."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference symbols in different drawings indicates similar or identical items.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
