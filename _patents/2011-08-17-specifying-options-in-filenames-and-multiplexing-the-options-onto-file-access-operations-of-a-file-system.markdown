---
title: Specifying options in filenames and multiplexing the options onto file access operations of a file system
abstract: Mechanisms are provided for accessing a file of a physical storage device of a data processing system via an intelligent file system associated with the physical storage device. The mechanisms receive, in the intelligent file system of the data processing system, a file access command specifying a file access operation and an extended filename. The extended filename comprises a full filename and one or more options multiplexed with the full filename. The mechanisms parse the file access command to identify the file access operation, the full filename, and the one or more options. The mechanisms then execute the file access operation on a file of the physical storage device corresponding to the full filename using the one or more options specified in the extended filename.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898207&OS=08898207&RS=08898207
owner: International Business Machines Corporation
number: 08898207
owner_city: Armonk
owner_country: US
publication_date: 20110817
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for specifying options in filenames and multiplexing those options onto file access operations of a file system.","File systems are an integral part of modern computing systems. The file system represents a place where files are stored and provides a mechanism by which these files may be accessed. The file system can be local to a computing system, remotely located from the computing system, i.e. provided on a different computing system, such as in the case of storage area networks (SANs) and the like, or even distributed across a plurality of computing systems with parts of the file system and its corresponding files existing on different computing systems.","Regardless of the particular type or implementation of a file system, there is one common characteristic of file systems which is that all file systems allow users, applications on the computer system, the operating system of the computing system, and the like, to access files based on the use of a filename and optionally a file location. For example, a local file system of a LINUX\u00ae operating system can have a file with a filename \/etc\/passwd, which is the \u201cpasswd\u201d file in the \u201cetc\u201d directory (file location). Similarly, \/home\/george\/profile is the file named \u201cprofile\u201d in the \u201cgeorge\u201d directory, which itself is in the \u201chome\u201d directory. In this case, \/home\/george\/profile can be described as the full filename since it comprises the full path (\/home\/george\/) and the filename (profile).","A networked file system may have a file common:\/tmp\/xyz.txt, which is the \u201cxyz.txt\u201d file in the \u201ctmp\u201d directory on the \u201ccommon\u201d computing system. In the Microsoft\u00ae Windows\u00ae operating system a file c:\\io.sys is the \u201cio.sys\u201d file in the top level directory of the \u201cc:\u201d drive of the computing system.","The illustrative embodiments described hereafter are directed to an improvement in the use of filenames with file systems to access files.","In one illustrative embodiment, a method, in a data processing system, is provided for accessing a file of a physical storage device of the data processing system via an intelligent file system associated with the physical storage device. The method comprises receiving, in the intelligent file system of the data processing system, a file access command specifying a file access operation and an extended filename. The extended filename comprises a full filename and one or more options multiplexed with the full filename. The method further comprises parsing, by the intelligent file system, the file access command to identify the file access operation, the full filename, and the one or more options. Furthermore, the method comprises executing, by the intelligent file system, the file access operation on a file of the physical storage device corresponding to the full filename using the one or more options specified in the extended filename.","In other illustrative embodiments, a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program, when executed on a computing device, causes the computing device to perform various ones of, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","In yet another illustrative embodiment, a system\/apparatus is provided. The system\/apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which, when executed by the one or more processors, cause the one or more processors to perform various ones of, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","These and other features and advantages of the present invention will be described in, or will become apparent to those of ordinary skill in the art in view of, the following detailed description of the example embodiments of the present invention.","The illustrative embodiments provide mechanisms for multiplexing options onto file access operations. The mechanisms of the illustrative embodiments multiplex options to be used when accessing a file, e.g., open, create, delete, rename, etc., with the actual filename itself. In some illustrative embodiments, this functionality is built into the file system itself or is an extension of the file system.","As discussed above, file systems are an integral part of modern computing systems and are the primary mechanism through which access to data is achieved. However, operating systems tend to provide a fairly limited standardized mechanism for creating or opening the files of a file system, e.g., using a simple application programming interface (API) call like the ISO C99 \u201copen(filespec, options)\u201d where the \u201cfilespec\u201d is the full filename of the file to be opened and the \u201coptions\u201d are usually simple fixed options from a predefined set of options recognized by the API (such as open for read, write, or both), and an initial position of the file pointer, there is no portable way to provide for more complicated options. That is, the ISO standard only allows one to open a filename in a specific mode, e.g., read, write, append, update, and that is all. There is no ability to expand upon this very limited and small set of options.","For example, the ISO C99 fopen( ) call is used for opening files and takes the form FILE *fileHandle=fopen(\u201cmyfile.txt\u201d, \u201cr+\u201d) where the \u201cr+\u201d is a mode option that specifies \u201cread and update.\u201d However, because the ISO standard mandates that one can only have two arguments with the fopen( ) call, i.e. the filename and mode, and limits the allowed mode designators, the options for performing functionality with the fopen( ) call are significantly limited.","Current solutions to this issue of limited options during file access operations invariably involve creating and using \u201cnon-standard\u201d API calls. The term \u201cstandard\u201d refers to conforming with the ISO C standard which has the limited mode argument issue described above. A \u201cnon-standard\u201d API call thus refers to operating system specific calls which are not portable across operating system implementations. An example of a non-standard API is the Microsoft Windows API called CreateFile:",{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HANDLE WINAPI","CreateFile("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_in","LPCTSTR IpFileName,"]},{"entry":[{},"_in","DWORD dwDesiredAccess,"]},{"entry":[{},"_in","DWORD dwShareMode,"]},{"entry":[{},"_in_opt","LPSECURITY_ATTRIBUTES"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lpSecurityAttributes,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_in","DWORD dwCreationDisposition,"]},{"entry":[{},"_in","DWORD dwFlagsAndAttributes,"]},{"entry":[{},"_in_opt","HANDLE hTemplateFile"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen from the complexity of the description, using non-standard APIs allows for extra details to be specified. However, it is neither standard nor amenable to easy expansion if, for example, the underlying file system provides a feature that was not anticipated. That is, the problem with non-standard APIs is that there is no standard way to use non-standard functionality provided by a file system. The non-standard APIs are specific to a particular operating system and cannot be used with other operating systems and do not allow easy expansion, i.e. the range of possible actions that can be performed by the API is limited to what was known at the time the API was created since the API is associated with the operating system, not the file system.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1A","FIG. 1A"],"b":["10","20","10","30","20","30","40","50","10","50","20","30"]},"The mechanisms of the illustrative embodiments multiplex options onto the filename which allows the mechanisms of the illustrative embodiments to be utilized with legacy systems while providing an ability to expand the functionality and options that can be used with the accessing of files of a file system. With the mechanisms of the illustrative embodiments, rather than the options and functionality being limited to what is known at the C standard library  or the operating system , the options multiplexed onto the filename may be passed all the way down to the device driver level . The device driver  receives the filename with the options multiplexed on the filename and extracts the options so as to act on them. The device driver  is intimately acquainted with the functionality of the device  and its file system (as represented by the dashed box around the device driver  and the device ). Thus, functionality that is supported by the device , of which the ISO C standard libraries  and operating system  are not aware or which is not supported by the ISO C standard libraries  and operating system , may be invoked using the mechanisms of the illustrative embodiments.","The multiplexing of the options onto the filename in the manner of the illustrative embodiments does not violate the ISO C standard since the filename in the ISO C standard is arbitrary. Thus, neither the ISO C standard nor the operating system implemented functionality or recognized options need to be changed with the mechanisms of the illustrative embodiments. The mechanisms of the illustrative embodiments bypass the ISO C standard and operating system implementation by allowing the invoking of options and functionality to be passed to the device driver level via the multiplexing of these options and functionality onto the filename passed to the device driver. Since the ISO C standard and the operating system implementation are bypassed by the mechanisms of the illustrative embodiments, functions\/options supported by the file system which are not recognized in the standard or by the operating system implementation may still be invoked using the mechanisms of the illustrative embodiments. Moreover, changes to the functionality of the file system may be made without changing the ISO C standard or operating system implementation and the functionality associated with these changes may still be invoked by the mechanisms of the illustrative embodiments, thereby providing an ability to expand the functionality of the file system. In addition, the applications and users themselves can choose options to be used with the accessing of files simply by changing the filename being opened (e.g., prefixing the filename with options).","Thus, the mechanisms of the illustrative embodiments, which may be provided as part of a file system, an extension of the file system, or the like, receive a file access command that comprises an access command identifier (e.g., open, create, delete, rename, etc.) and an extended filename defined in accordance with the illustrative embodiments. The extended filename is a combination of the full filename (e.g., either the name of the file by itself or a combination of the full path and name of the file depending on the situation) and a set of option identifier strings specifying options to be used with the accessing of the file. The options may be specified in the extended filename such that they are separated from the full filename and other options by way of a separator character that cannot be part of the full filename and\/or the option identifier strings. Of course other mechanisms other than separator characters can be used as may become apparent to those of ordinary skill in the art in view of this description, without departing from the spirit and scope of the illustrative embodiments. The key concept here is that any mechanisms that allows the full filename and the options to be distinguished from each other may be used with the mechanisms of the illustrative embodiments.","When receiving the file access command, the mechanisms of the illustrative embodiments parse the extended filename based on the separator characters. The mechanisms of the illustrative embodiments may then utilize the options identified from the extended filename to perform the requested access operation, as specified by the file access command, on the file specified in the full filename portion of the extended filename.","With the mechanisms of the illustrative embodiments, by multiplexing options onto the filename itself to generate an extended filename, applications may use standard application programming interfaces (APIs), such as ISO C fopen( ) calls or the like, to access files within a file system while still allowing for a different extra configurable options, both those anticipated now and those yet to be anticipated. Thus, one does not need to generate non-standard APIs to perform the file access operations with added options. A standard API may be used to perform an operation on a file specified as an extended filename in accordance with the mechanisms of the illustrative embodiments, and the mechanisms provided herein are able to parse the extended filename, determine the options specified therein, and implement those options when performing the file access operation specified by the standard API call.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method, or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium(s) having computer usable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Computer code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, radio frequency (RF), etc., or any suitable combination thereof.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u2122, Smalltalk\u2122, C++, or the like, and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer, or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus, or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Thus, the illustrative embodiments may be utilized in many different types of data processing environments. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments,  are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that  are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1B","b":["100","100","102","100","102"]},"In the depicted example, server  and server  are connected to network  along with storage unit . In addition, clients , , and  are also connected to network . These clients , , and  may be, for example, personal computers, network computers, or the like. In the depicted example, server  provides data, such as boot files, operating system images, and applications to the clients , , and . Clients , , and  are clients to server  in the depicted example. Distributed data processing system  may include additional servers, clients, and other devices not shown.","In the depicted example, distributed data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, the distributed data processing system  may also be implemented to include a number of different types of networks, such as for example, an intranet, a local area network (LAN), a wide area network (WAN), or the like. As stated above,  is intended as an example, not as an architectural limitation for different embodiments of the present invention, and therefore, the particular elements shown in  should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 1"],"b":["200","110"]},"In the depicted example, data processing system  employs a hub architecture including north bridge and memory controller hub (NB\/MCH)  and south bridge and input\/output (I\/O) controller hub (SB\/ICH) . Processing unit , main memory , and graphics processor  are connected to NB\/MCH . Graphics processor  may be connected to NB\/MCH  through an accelerated graphics port (AGP).","In the depicted example, local area network (LAN) adapter  connects to SB\/ICH . Audio adapter , keyboard and mouse adapter , modem , read only memory (ROM) , hard disk drive (HDD) , CD-ROM drive , universal serial bus (USB) ports and other communication ports , and PCI\/PCIe devices  connect to SB\/ICH  through bus  and bus . PCI\/PCIe devices may include, for example, Ethernet adapters, add-in cards, and PC cards for notebook computers. PCI uses a card bus controller, while PCIe does not. ROM  may be, for example, a flash basic input\/output system (BIOS).","HDD  and CD-ROM drive  connect to SB\/ICH  through bus . HDD  and CD-ROM drive  may use, for example, an integrated drive electronics (IDE) or serial advanced technology attachment (SATA) interface. Super I\/O (SIO) device  may be connected to SB\/ICH .","An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system  in . As a client, the operating system may be a commercially available operating system such as Microsoft\u00ae Windows 7\u00ae. An object-oriented programming system, such as the Java\u2122 programming system, may run in conjunction with the operating system and provides calls to the operating system from Java\u2122 programs or applications executing on data processing system .","As a server, data processing system  may be, for example, an IBM\u00ae eServer\u2122 System p\u00ae computer system, running the Advanced Interactive Executive (AIX\u00ae) operating system or the LINUX\u00ae operating system. Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors in processing unit . Alternatively, a single processor system may be employed.","Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as HDD , and may be loaded into main memory  for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit  using computer usable program code, which may be located in a memory such as, for example, main memory , ROM , or in one or more peripheral devices  and , for example.","A bus system, such as bus  or bus  as shown in , may be comprised of one or more buses. Of course, the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit, such as modem  or network adapter  of , may include one or more devices used to transmit and receive data. A memory may be, for example, main memory , ROM , or a cache such as found in NB\/MCH  in .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system, other than the SMP system mentioned previously, without departing from the spirit and scope of the present invention.","Moreover, the data processing system  may take the form of any of a number of different data processing systems including client computing devices, server computing devices, a tablet computer, laptop computer, telephone or other communication device, a personal digital assistant (PDA), or the like. In some illustrative examples, data processing system  may be a portable computing device that is configured with flash memory to provide non-volatile memory for storing operating system files and\/or user-generated data, for example. Essentially, data processing system  may be any known or later developed data processing system without architectural limitation.","As will be appreciated by those of ordinary skill in the art, a file system may be provided in either one of the data processing system environments depicted in  above. The file system may be distributed across a plurality of computing devices, such as servers , , a network attached storage device , such as in the case of a storage area network (SAN), or the like. As such, a client device, such as clients , , and , may access the file system remotely via the network . Moreover, the file system may be housed completely within a single computing device, such as data processing system  in . The mechanisms of the illustrative embodiments may be implemented with regard to any such file system, whether it be distributed, remotely accessed, or local to a client or stand-alone computing device.","As discussed above, the illustrative embodiments augment the functionality of a file system (distributed, remotely accessed, local, or the like), by providing mechanisms for using extended filenames. The extended filename is a combination of the full filename (e.g., either the name of the file by itself or a combination of the full path and name of the file depending on the situation) and a set of option identifier strings specifying options to be used with the accessing of the file. The options may be specified in the extended filename such that they are separated from the full filename and other options by way of a separator character that cannot be part of the full filename and\/or the option identifier strings.","For example, an extended filename may be of the type \u201cmyfile.txt:backup-first\u201d where the full filename \u201cmyfile.txt\u201d is specified first, followed by a separator character \u201c:\u201d, and then followed by one or more option identifier strings such as \u201cbackup-first.\u201d This is just one example of an extended filename in which the full filename is specified first followed by the option identifier strings. In such a case, the separator character may be any character that is not permitted to be part of the full filename, e.g., #, %, a space, or the like. This is to facilitate the parsing of the extended filename by the mechanisms of the illustrative embodiments so that the full filename and the individual option identifier strings may be separately distinguished.","In an alternative embodiment, the option identifier strings may be specified first followed by the full filename. For example, an extended filename may be of the type \u201c[backup-first, backup-limit=5]myfile.txt\u201d in which case the string \u201c[backup-first, backup-limit=5]\u201d represents the option identifier string and \u201cmyfile.txt\u201d represents the full filename. In this case, the option identifier string is separated from the full filename by the fact that the option identifier string is enclosed in square brackets at the start of the extended filename. Many different ways of specifying the extended filename as a combination of the full filename and the option identifier strings separated by separator characters may be used without departing from the spirit and scope of the illustrative embodiments. Moreover, the particular separator character, or combination of characters, may take many different forms without departing from the spirit and scope of the illustrative embodiments as long as they may be used to distinguish between parts of the extended filename, i.e. the full filename and the various option identifier strings.","When receiving the file access command, the mechanisms of the illustrative embodiments parse the file access command to identify the access operation to be performed and the extended filename. In addition, the mechanisms of the illustrative embodiments parse the extended filename based on the separator characters to identify the full filename and the one or more options specified by option identifier strings in the extended filename. The mechanisms of the illustrative embodiments may then correlate the option identifier strings with option code provided in the file system for performing various optional functions in conjunction with the access operation on the specified file.","It should be noted that in this scenario, the file access command may be a standard or non-standard command supported by the operating system, file system, or the like. For example, the file access command may be a standard or non-standard API call made to the operating system which may then pass the file access command to the file system. While the file access command itself may be standard or non-standard, the filename specified in the file access command complies with the extended filename of the illustrative embodiments and thus, may specify one or more options within the filename itself, i.e. the option identifier strings are multiplexed onto the full filename. In this way, existing standard and non-standard commands may make use of the mechanisms of the illustrative embodiments without modification to these standard or non-standard commands. Furthermore, the mechanisms of the illustrative embodiments, in many cases, eliminates the need to generate non-standard access commands, e.g., non-standard API calls, since the options for which such non-standard access commands are generated may be specified in the extended filename of the illustrative embodiments. However, the illustrative embodiments may be used with either or both of standard and non-standard API calls without departing from the spirit and scope of the illustrative embodiments.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 3","FIG. 3"],"b":["360","350","310","320","320","330","340"]},"The file access command may be specified using either a standard or non-standard format. That is, if the file access command is submitted as an API call, for example, the API call may be to a standard API recognized by the operating system  or it may be a customized or non-standard API that is user generated, for example, and provided to the operating system, such as in a library or the like. Alternatively, the user may input the file access command via a command prompt or other such user interface .","The operating system  receives the file access command including the extended filename in accordance with the mechanisms of the illustrative embodiments and either passes the file access command to the intelligent file system  directly or performs some processing on the file access command to generate a corresponding file access command that is sent to the intelligent file system . In either case, the file access command that is sent to the intelligent file system  comprises an identification of the access operation to be performed and the extended filename in accordance with the illustrative embodiments. It should be noted that the extended filename of the illustrative embodiments meets established standards and operating system standards such that it is passed without error to the file system .","The intelligent file system  receives the file access command and parses the file access command using the parser . It should be appreciated that the functionality of the intelligent file system  as described herein may be performed, for example, at a device driver level, i.e. below the standard library and operating system level (see  previously). As noted above, this allows for greater functionality of the file system  to be invoked using the mechanisms of the illustrative embodiments without having to modify the ISO C standard libraries or the implementation of the operating system.","The parser  identifies the access operation identifier in the file access command and the extended filename. The parser  also parses the extended filename to determine if there are any options specified in the extended filename. If there are options specified in the extended filename, the options are separately distinguished from the full filename and other options specified in the extended filename. This can be done by recognizing separator characters in the extended filename and knowing the particular convention used by the intelligent file system  for specifying extended filenames, e.g., full filename first followed by options or options specified first followed by full filename. Thus, the parser  identifies the particular parts of the file access command, i.e. the access operation identifier string and the extended filename string, and also identifies the particular parts of the extended filename, i.e. the full filename string, the option identifier strings, if any, and optionally the parameters for the option in the option identifier strings.","The option identifier strings are passed by the parser  to the option determination logic  which determines which option code  corresponds to the option identifier strings identified in the parsed file access command. The intelligent file system  then utilizes the identified option code  to perform the specified file access operation (specified by the access operation identifier string and correlated with the file access code  by the file system ) using the options corresponding to the identified option code . The order in which to perform the options is implicit in the implementation of the option code  in the file system . For example, an option of the type \u201c[backup=myfile.txt.bkp]myfile.txt\u201d would be executed before a file is opened. However, an option of the type [convert=ascii_to_ebcdic]myfile.txt would flag the file so that reads on this file would subsequently convert the data from ASCII to EBCDIC encoding. As yet another example, an option of the type \u201c[mailto=johnsmith@somewhere.com]myfile.txt\u201d would attempt to mail the file to the identified recipient via electronic mail automatically when the file is closed. Thus, the particular order in which options are performed with regard to each other and the accessing of the file is implementation specific.","The option code  may be executed using parameters specified in the option identifier string of the extended filename, if any. For example, in the above example of a file access command being \u201c[backup-first, backup-limit=5]myfile.txt\u201d, the parameter \u201cbackup-limit=5\u201d may be used to control the operation of the option code  as it is a parameter passed to this option code . The file access operation is performed on a corresponding file  in the file storage system , the particular file  being specified in the extended filename as the full filename portion.","By way of example, assume that there is a storage area network that utilizes a distributed file system, such as file system , that has the optional code for automatically backing up files before allowing a user or application to access the files. This can be a very useful feature for preventing corruption of data in the storage area network or at least allowing easy recovery after corruption has occurred. Since the filename is passed to the file system  intact, i.e. it is not changed or manipulated in any way by the operating system  when sending a file access command from the user interface  or application  to the file system , the extended filename of the illustrative embodiments is passed to the file system  intact. As a result, the mechanisms of the illustrative embodiments add extra information to the filename, to thereby make it an \u201cextended\u201d filename, which can be used to specify use of this optional feature of the file system . That is, a separate API or file access command does not need to be generated to invoke this optional feature of the file system  and standard or pre-existing non-standard APIs or file access commands may be utilized with the optional functionality of the file system  being invoked by virtue of the option being specified in the extended filename, i.e. the option being multiplexed onto the full filename. In this example, the backup functionality of the file system  may be invoked by specifying the option identifier for the backup functionality in the extended filename along with any parameters that may be used by that backup functionality.","Prior to the present invention, in order to backup a file prior to accessing the file, one would have to either input the following commands via a user interface or otherwise provide a non-standard API that would perform equivalent operations:",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"open \u201c\/dir\/xyz.txt\u201d for input as infile"]},{"entry":[{},"open \u201c\/dir\/xyz.txt-backup\u201d for output as outfile"]},{"entry":[{},"while not infile.end_of_file( ):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"block = infile.getblock( )"]},{"entry":[{},"outfile.putblock(block)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"outfile.close( )"]},{"entry":[{},"infile.close( )"]},{"entry":[{},"if error occurred:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return error"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"open \u201c\/dir\/xyz.txt\u201d for input\/output as iofile"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"With the mechanisms of the illustrative embodiments, the same functionality can be achieved using an intelligent file system  that extracts the necessary option for backup a file from the extended filename itself. For example, a file access command such as the following can be used with the mechanisms of the illustrative embodiments to achieve a same outcome as the operations listed above:\n\n","It should be noted that the backup optional functionality of an intelligent file system  is used only as an example in this description to illustrate one type of optional function that may be supported by an intelligent file system  and which may be invoked using the extended filename mechanisms of the illustrative embodiments. With that example backup optional functionality, a backup operation is performed prior to permitting access to file. The extended filename for specifying this option is of the type \u201c[backup]xyz.txt.\u201d The optional function is performed by invoking corresponding option operating code  which operates by first deleting any existing backup file for the identified file being accessed (e.g., \u201cxyz.txt-backup\u201d), copying the file (e.g., \u201cxyz.txt\u201d) to the backup file location (e.g., \u201cxyz.txt-backup\u201d), and then performing the access operation on the file xyz.txt. Many other types of optional functionality that is either known or may be later developed, may be invoked using the extended filename mechanisms without departing from the spirit and scope of the illustrative embodiments.","For example, other optional functions implemented in option operation codes  that may be provided by the intelligent file system  in addition to, or in replacement of, the backup optional functionality described above, may include a sequenced backup operation, specified by an extended filename of the type \u201c[backup, sequence, limit=5]xyz.txt\u201d. With this example option function, a sequenced backup operation is performed before permitting the access to the file by copying xyz.txt-bkp00004 to xyz.txt-bkp00005 if it exists, then zyz.txt-bkp00003 to xyz.txt-bkp00004, and so on until copying xyz.txt to xyz.txt-bkp00001. The limit parameter specifies the number of backup files to keep. Once this sequenced backup operation is performed, then the file access operation is performed on the specified file.","As another example, an encrypt on write option may be specified in an extended filename using a format such as \u201c[encrypt, password=bob]xyz.txt.\u201d This option would cause the file to be encrypted when it is written to and the encryption will use the password \u201cbob\u201d as specified in the parameter set forth in the extended filename. Similarly, another example option may be a decrypt on read option that may be specified in the extended filename using a format such as \u201c[decrypt, password=bob]xyz.txt\u201d. In this case, the file will be decrypted when the file is read using the password bob.","The various possible options that may be implemented using the mechanisms of the illustrative embodiments are too numerous to set forth in this description. Suffice it to say that any such options as may be apparent to those of ordinary skill in the art in view of the present description may be used with the mechanisms of the illustrative embodiments without departing from the spirit and scope of the illustrative embodiments. To illustrate this, and to provide even further examples of other options that may be used with the mechanisms, consider the following list of extended filename formats and their corresponding option functionality:",{"@attributes":{"id":"p-0073","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u201c[crlf_to_lf]xyz.txt\u201d","*converts Windows end of line markers to"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"UNIX style automatically."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u201c[language=greek]xyz.txt\u201d","*translates to a specific language or"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"chooses a specific language file (such as \u201cfile.txt-greek\u201d)."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u201c[encoding=utf-8]xyz.txt\u201d","* translates from (for example) Unicode"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"UCS-32 to UTF-8 format for applications that require a specific format."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u201c[notify-on-save]xyz.txt\u201d","*sends email notifications (to parties"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"that have registered an interest in the file) when the file is closed."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["[auto-compile]xyz.c","*compiles the C program automatically"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"when it is close (ideal for continuous integration)."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["[make-resident]xyz.txt","*brings the file back from offline"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"storage if it has been archived."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["340","340","340","340"]},"Thus, as a result of implementing the mechanisms of the illustrative embodiments, one is not tied to a predefined set of options or actions specifiable by standard or established commands\/APIs. If the intelligent file system  supports a particular option or action, then they may be invoked using the extended filename and the mechanisms of the illustrative embodiments. This gives existing commands and APIs additional functionality and different capabilities than previously possible using the structured and limited approach of the prior art mechanisms.","Furthermore, in some illustrative embodiments, the options specified in the extended filename may be implemented using option operation code  provided in a virtual file system that may sit as an additional layer atop the \u201creal\u201d file system. That is, intelligent file system  may be a combination of a virtual file system and a conventional file system. In such a case, the conventional file system need not be modified in any way. The virtual file system may be modified to incorporate the parser , option determination logic , and option operation code  and may perform the various operations discussed above with regard to these elements while the conventional file system may support the file access operations via file access operation code , for example. This allows an existing file system to be extended to include additional option functionality that is not otherwise supported by the existing file system. Thus, as a result of the mechanisms of the illustrative embodiments, the functionality of existing file systems may be extended by including additional options not previously supported and then invoking those options using extended filenames and the mechanisms for parsing and correlating the option identifiers in these extended filenames to option operation code provided in the extended (now intelligent) file system.",{"@attributes":{"id":"p-0076","num":"0076"},"figref":["FIG. 4","FIG. 4"],"b":["410","420","430"]},"The option identifier strings identified by the parser are then correlated with the option code of the file system (step ) and the file access operation is performed using the specified options as implemented by the option code (step ). The operation then terminates.","As noted above, it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment, the mechanisms of the illustrative embodiments are implemented in software or program code, which includes but is not limited to firmware, resident software, microcode, etc.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The invention, as well as a preferred mode of use and further objectives and advantages thereof, will best be understood by reference to the following detailed description of illustrative embodiments when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
