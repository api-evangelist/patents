---
title: Network test/measurement agent extensible with different types of network interfaces
abstract: A system or method that extends a communication test/measurement agent by providing the communication test/measurement agent with built-in functionality to allow a central communication test/measurement system to generically communicate with and operate the agent, and by providing the communication test/measurement agent with built-in functionality to allow the agent to automatically recognize and dynamically incorporate plugins that are specific to different types of communication interfaces and which allow the network test/measurement system to communicate with the respective different types of communication interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08055700&OS=08055700&RS=08055700
owner: JDS Uniphase Corporation
number: 08055700
owner_city: Milpitas
owner_country: US
publication_date: 20031031
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention is directed to the field of network agents for testing and measuring networks. More particularly, the present invention is directed to a network agent designed to communicate with a network test and management system and which can be dynamically expanded to communicate with additional interfaces without being redesigned or recoded; where the agent can be dynamically augmented with functionality for allowing the network test and management system to communicate with different types of interfaces added to the agent.","2. Description of the Related Art","Previous network agents used in a communications testing and measurement system have been designed and written specifically hardcoded to work with certain limited types of voice or network devices. A network test or troubleshooting center system (NTC) may need to communicate with various types of network devices or agents, such as a network analyzer agent, probe, a voice quality testing device, a router, and so on. Previously, these devices have been designed specifically for one type of interface. The NTC will communicate with the different types of agents independently. To date, designers of network test and measurement systems have had to redesign and recode a network agent for each new type of interface to be added to the agent and users have not been able to incrementally install different interfaces for operation with one agent.","What is needed is a method and system for extending network agents in a test and measurement setting to handle newly installed interfaces of different types without having to be redesign and recode the agents.","It is an aspect of an embodiment described herein to provide a communication test\/measurement agent that can be dynamically extended to communicate with different types of communication interfaces or application programs that drive them.","It is another aspect of an embodiment described herein to provide a communication test\/measurement system with an extensible application programming interface (API) that can be extended to accommodate dynamically added communication interfaces.","It is yet another aspect of an embodiment described herein to provide a test\/measurement agent that can provide programmatic access to different communication interfaces of different types on a single network device or analyzer (or interfaces in communication with the agent).","It is still another aspect of an embodiment described herein to provide a single network access point through which a network test\/measurement\/management system can access or control and operate the network test\/measurement functionality of different types of network test\/measurement applications and their corresponding communication interfaces.","It is another aspect of an embodiment described herein to provide a network agent architecture that can be extended by third parties.","The above aspects can be attained by a system or method that extends a communication test\/measurement agent by providing the communication test\/measurement agent with built-in functionality to allow a central communication test\/measurement system to generically communicate with and operate the agent, and by providing the communication test\/measurement agent with built-in functionality to allow the agent to automatically recognize and dynamically incorporate plugins that are specific to different types of communication interfaces and which allow the network test\/measurement system to communicate with the respective different types of communication interfaces. These together with other aspects and advantages which will be subsequently apparent, reside in the details of construction and operation as more fully hereinafter described and claimed, reference being had to the accompanying drawings forming a part hereof, wherein like numerals refer to like parts throughout.","Typically, network operators use network test\/monitor devices (test devices) to test\/monitor data communication (traffic) of a network under test. Network probes, remote monitors, etc. are examples of test devices. The test devices can be controlled locally via a local command-driven interface and\/or a graphical user interface with data input from a keyboard and\/or a display. Some test devices may not have a graphical command line interface and are controlled via an API. The network operators can also control the test devices remotely by using an Application Programming Interface (API) provided by a vendor (manufacturer) of the test devices. In particular, the network operators (i.e., customers of the test devices) use the API to develop\/build test software applications regarding the network traffic by exchanging, via the API, test device commands that remotely control the test devices to perform various testing\/monitoring\/measurement. U.S. application Ser. No. 10\/224,556, entitled a \u201cSYSTEM CONTROLLING TEST\/MEASUREMENT DEVICES ON A NETWORK USING MARKUP LANGUAGE DOCUMENTS AND METHODS THEREOF\u201d, filed on Aug. 21, 2002, by Merlin Rhoda and John Monk, and which is incorporated by reference herein, discusses how to remotely control a network device using an application programming interface technology layered between a central test system or client\/console thereof that is run by a network operator. Following is a description of how to implement an extensible agent to match API communications with corresponding interfaces, where new interfaces may be dynamically added or attached to the agent without having to recode or redesign the agent.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["20","22","24","20","22","24","26","28","30","26","28","30","26","28","30","100","32","34"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["50","52","54","56","57","58","52","52","58","50","60","62","64","66","68","70","70","26","28","30","30","74","76","50","76","50"],"i":["a","b","a","b"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":["50","57","50","56","50","50","57","50","90","54","57","92","50","50","50","94","52","54","58","50","57"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4","b":"76"},"In the network agent embodiment shown in , the agent  is preferably provided with a communication unit  for language I\/O, that is to say, software for sending and receiving API communications , such as XML documents. The agent will have plugin objects  and  that will handle requests for test\/monitor driver applications, such as applications , , and . An application communication unit , such as a CORBA pipeline, may be provided to plugins to communicate with their respective applications. Interprocess communication or communication without communication unit  is also possible. As seen in , an application may run a device  that is hosting the agent  (e.g. applications  and ), or an application (e.g. application ) may run over a network on another device  (e.g. a network probe). Preferably, each application will have a communication interface , , and , which are in communication with their respective networks , , , which may be being tested or monitored through the agent . Applications and interfaces not on the agent's device  may be discovered automatically by sending a broadcast message.","The agent  preferably has a request router object , a generic agent object  (or functionality commonly handled by the agent ), and an interface table . The request router (or equivalent functionality of the agent) routes communications between the communication unit , the generic agent object, and\u2014via the interface table \u2014the plugin objects  and . The interface table  keeps track of which interfaces are attached to the agent  and which plugin corresponds to which interface. Plugins are preferably designed for a type of communication interface and one plugin can handle the communications of more than one interface of that type. For example, in  the interface table  maps interface (IF)  and interface (IF)  to the plugin . In general, the agent  operates by receiving requests , directing them to a plugin (e.g. plugin  or ), or to a generic responder (e.g. agent object ), in accordance with the request . The generic agent object  handles a request and generates a response that is sent back through the communication unit . Depending on the nature of a request, the plugin objects  or  handle a request by either independently and\/or by forwarding the request to the interface that is the subject of the request. The plugin object  or  sends back a response accordingly.","The agent  or document\/request router  can route documents\/messages by referring to common parts of a message to determine which interface a message is intended for. The agent  or request router  then passes the message to the plugin specific to that type of interface. For convenience, it is preferable to provide the generic agent object and the plugin objects with a common interface object , which facilitates communication within the agent  and with the application communication unit . The generic functionality may include functions such as exclusionary locking\/unlocking of interfaces, queries for available interfaces, etc. The plugins may perform functions such as caching information of the interface, some of the locking, forwarding messages to respective applications\/interfaces, etc.","The dashed line  indicates a division between the base functions of the agent  and the extensible portions of the agent . The agent is preferably initially provided with the base or common components such as the communication unit  (e.g. an XML servlet), an agent plugin loader , the generic agent object , and the interface table . The agent  may then be extended with extensible portions such as the plugin objects, XML schemas, or other information that may be used to dynamically hook extensions and\/or plugin objects into the originally coded agent .","In a preferred embodiment, incoming XML documents  will have verbs that are in a language or verb set implemented by the agent . The agent  will process generic types of verbs that are not specific to a particular plugin or interface thereof. The plugins (or applications in communication therewith) will preferably implement those verbs in the language that are not implemented by the agent . In a preferred embodiment, where the language is implemented with XML, the agent  will use XML schemas to define the language that it implements. A base schema can define the verbs implemented by the agent itself (e.g. the verbs handled by the generic agent object ). When a new plugin is added by the loader , the loader  or agent  will merge a corresponding new schema with the existing schema(s), thus dynamically extending the language recognized and implemented by the agent and its applications. A diskdrive (HDD)  or other storage (including a network storage) may be used to store schemas, software for the agent and plugins, applications that reside on the agent's device , etc. Of note is the extensibility, in that whenever a command comes into the agent , the generic agent portion attempts to handle it first, and if it is not part of the generic agent's vocabulary or if the generic agent knows that it must rely on an agent plugin to process part of the command, then that command, is directed to the appropriate extension or plugin (preferably by referring to an interface key or identifier in the command).",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 5","FIG. 4"],"b":["50","140","50","142","50","50","124","50","146","50","148","150","154","156"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6","b":["160","160","164"]},"An example of a practical application of an agent  follows. Initially a user acquires a PC with a network interface card and some preloaded software (e.g. an XML\/HTTP communication component) for connecting an NTC console to a single agent on the PC, and to capture data of the interface. The user later decides to add a VQT component to that PC\/agent, so they acquire a VQT interface card and application software, install the VQT interface card, and load the new application software and corresponding plugin code\/software onto the PC. After the new plugin is incorporated into the agent, the user can use the same NTC console or some other client to connect to the agent, which will now show two interfaces, the original network interface card and the VQT interface card, and commands can be sent to both interfaces through the agent. Therefore, the agent has dynamically extended its functionality so that it can do both voice and network tests.","According to the example above, internally the agent is extended by loading new classes for the VQT plugin onto the agent's HDD . When the agent is restarted, the agent notices the new classes, loads them into memory, calls some methods to determine information such as what kind of interface card they represent, and then adds the interface to the list of known interfaces (e.g. makes a new entry type and entry in the interface table). Now, when the NTC sends a command to connect to the VQT interface card, the agent software will make some calls to the interface plugin code for the VQT card, to pass down information to initialize the new interface card, and to start communications with the new interface card. Furthermore, it should be noted that neither the network card capture plugin nor the VQT plugin need to be reprogrammed, nor do they need to be specifically programmed to work in conjunction with one another. The same plugin can be reused.","Although plugin capabilities related to different interface types are discussed above, the plugin extensibility is not limited to network interfaces. Another type of plugin can be written to add new measurement capabilities to the agent, where the new measurement capabilities may correlate data from multiple interfaces (thus the measurement capability does not belong in the interface plugin). For example, a plugin could be written to search for traffic between two endpoints in the network. Plugins can be used to add any type of functionality to the network agent, which can include functions related to the attached interfaces. Furthermore, some requests might be serviced by both plugins and the generic portion of the agent. For example, if the agent needs interface information, the generic portion can query each of the plug-ins to form a list of some or all of the available interfaces.","Finally, it should be noted that the NTC mentioned above is not a critical portion of the extensible agent. Some users may wish to use extensible agents by communicating directly with them (for example with a communication test\/measurement client) instead of by using a GUI on the NTC. The NTC is mentioned for reference, is an optional part of the overall system.","The present invention has been described with respect to a system or method that extends a communication test\/measurement agent by providing the communication test\/measurement agent with built-in functionality to allow a central communication test\/measurement system to generically communicate with and operate the agent, and by providing the communication test\/measurement agent with built-in functionality to allow the agent to automatically recognize and dynamically incorporate plugins that are specific to different types of communication interfaces and which allow the network test\/measurement system to communicate with the respective different types of communication interfaces.","Further background discussion on communication test and measurement, as well as details on how to implement an XML API for the same, may be found in U.S. patent application Ser. No. 10\/224,556, commonly owned by the assignee of the present patent.","The many features and advantages of the invention are apparent from the detailed specification and, thus, it is intended by the appended claims to cover all such features and advantages of the invention that fall within the true spirit and scope of the invention. Further, since numerous modifications and changes will readily occur to those skilled in the art, it is not desired to limit the invention to the exact construction and operation illustrated and described, and accordingly all suitable modifications and equivalents may be resorted to, falling within the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3","b":"50"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
