---
title: Method and system for identifying, fixing, and updating security vulnerabilities
abstract: The architectural set-up can allow exploits within the scanner and exploits in the express update package to function with no knowledge of each other. The user also needs no knowledge of whether the exploits are within the scanner or the express update package. Mutual authentication procedures can enable the scanner to load only legitimate express update packages, and can provide that express update packages can only be loaded into legitimate scanners.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06907531&OS=06907531&RS=06907531
owner: Internet Security Systems, Inc.
number: 06907531
owner_city: Atlanta
owner_country: US
publication_date: 20000630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS","CONCLUSION"],"p":["This invention relates to network communications for computers, and more particularly, to operating system security over open networks.","As Internet technology has advanced, users are able to access information on many different operating systems. Hackers take advantage of the open network architecture of the Internet, and attempt to gain access to operating systems without authorization. Hackers present a significant security risk to information stored on a operating system. In an effort to limit unauthorized access to operating system resources, many operating system communication security devices and techniques have been developed.","One security device and technique that has been used to secure operating system resources is an Internet scanner. A scanner enables a user to find and report security vulnerabilities in network-enabled operating systems. The scanner can run a list of checks, or exploits, that verify the presence or absence of known security vulnerabilities. The exploits' findings are displayed to the user, and reports may be generated showing the discovered security vulnerabilities and methods for fixing them.","Although scanners are very useful, they lack services that users need to adequately protect their operating systems. The release cycle of a scanner is long compared to the time required to develop and test individual security checks. New security vulnerabilities are introduced very rapidly, and must be found and addressed in real-time. Because hackers create problems in systems on a minute-to-minute basis, a scanner must be updated constantly to be most valuable to a user.","What is needed is a method and system for providing updated exploit information in a short time period. A scanner needs to have its components sufficiently separated so that individual information used in the scanner can be updated independently. A scanner's individual security exploits need to be updated and released independently of the entire scanner's release cycle. The exploit information needs to be available on an per-exploit basis so that minor, but important, modifications can be made without affecting the entire system. In addition, exploit information, including help information, needs to be updated independently of the exploit itself.","A further need in the art exists for a user-friendly scanner with the above update capability. The user needs to be able to use the system without needing to know whether the exploits are included in the scanner or are separately installed via update procedures.","A further need in the art exists for a scanner with the above update capability that includes mutual authentication procedures. Constant update packages necessitate ensuring that the scanner will only load legitimate updates, and that updates will only be loaded into legitimate scanners.","The present invention satisfies the above-described needs by providing a system and method for identifying, fixing, and updating security vulnerabilities in host computers. In an exemplary embodiment, the identifying, fixing, and updating capabilities can be done by communication between a scanner with plug-in capability, an operating system, and an express update package.","The express update package can contain exploit plug in modules, resource plug-in modules dat files, and help files. The exploit plug-in modules and the resource plug-in modules can be dynamic-link libraries (DLLs). The exploit plug-in module can contain exploit objects and the resource plug-in module can contain resource objects. The exploit objects can contain exploits and the resource objects can contain resources. An exploit can be an individual security check that is done on a computer or systems. A resource can be an individual resource that is used by the scanner, and can include data, executable code, or a network connection.","The present invention can yield an architectural solution that allows the exploits within the scanner, and the exploits in the express update package, to function with no knowledge of each other. Because the exploit objects and the resource objects can hide their implementation details behind standard interfaces, they may be managed and manipulated by the scanner without knowledge of their internal make-up. This architectural solution can allow existing exploits to be modified and incorporated into the scanner without updating the entire scanner. In addition, new exploits may be added to the scanner without updating the entire scanner. The present invention can be user-friendly in that the user needs no knowledge regarding whether the exploits are included in the scanner's installation package or are separately installed via update procedures.","The present invention can also include mutual authentication procedures. The authentication procedures can enable the scanner to load only legitimate plug-in modules, and can provide that plug-in modules can only be loaded into legitimate scanners.","The present invention can be a method of identifying, fixing, and updating security vulnerabilities in a host computer or computers. In an exemplary embodiment, the identifying, fixing, and updating capabilities can be done by communication between a scanner with plug-in capability, an operating system, and a plug-in module. Because the, exploit objects and the resource objects can hide their implementation details behind standard interfaces, they may be managed and manipulated by the scanner without knowledge of their internal make-up. This architectural solution can allow existing exploits to be modified and incorporated into the scanner without updating the entire scanner. In addition, new exploits may be added to the scanner without updating the entire scanner. Mutual authentication procedures can also be used to ensure that only legitimate scanners and express update package contents are used.",{"@attributes":{"id":"p-0033","num":"0031"},"figref":["FIG. 1","FIG. 2","FIGS. 3-7","FIGS. 8-18"]},"Although the preferred embodiment will be generally described in the context of a program and an operating system running on a personal computer, those skilled in the art will recognize that the present invention also can be implemented in conjunction with other program modules for other types of computers. Furthermore, those skilled in the art will recognize that the present invention may be implemented in a stand-alone or in a distributed computing environment. In a distributed computing environment, program modules may be physically located in different local and remote memory storage devices. Execution of the program modules may occur locally in a stand-alone manner or remotely in a client\/server manner. Examples of such distributed computing environments include local area networks of an office, enterprise-wide computer networks, and the global Internet.","The detailed description which follows is represented largely in terms of processes and symbolic representations of operations by conventional computer components, including a central processing unit (CPU), memory storage devices for the CPU, display devices, and input devices. Furthermore, these processes and operations may utilize conventional computer components in a heterogeneous distributed computing environment, including remote file servers, remote compute servers, and remote memory storage devices. Each of these conventional distributed computing components is accessible by the CPU via a communications network.","The processes and operations performed by the computer include the manipulation of signals by a CPU or remote server and the maintenance of these signals within data structures resident in one or more of the local or remote memory storage devices. Such data structures impose a physical organization upon the collection of data stored within a memory storage device and represent specific electrical or magnetic elements. These symbolic representations are the means used by those skilled in the art of computer programming and computer construction to most effectively convey teachings and discoveries to others skilled in the art.","For the purposes of this discussion, a process is generally conceived to be a sequence of computer-executed steps leading to a desired result. These steps generally require physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, compared, or otherwise manipulated. It is conventional for those skilled in the art to refer to these signals as bits, bytes, words, data, objects, properties, flags, types, identifiers, values, elements, symbols, characters, terms, numbers, points, records, images, files or the like. It should be kept in mind, however, that these and similar terms should be associated with appropriate physical quantities for computer operations, and that these terms are merely conventional labels applied to physical quantities that exist within and during operation of the computer.","It should also be understood that manipulations within the computer are often referred to in terms such as comparing, selecting, viewing, getting, giving, etc. which are often associated with manual operations performed by a human operator. The operations described herein are machine operations performed in conjunction with various input provided by a human operator or user that interacts with the computer.","In addition, it should be understood that the programs, processes, methods, etc. described herein are not related or limited to any particular computer or apparatus, nor are they related or limited to any particular communication network architecture. Rather, various types of general purpose machines may be used with program modules constructed in accordance with the teachings described herein. Similarly, it may prove advantageous to construct a specialized apparatus to perform the method steps described herein by way of dedicated computer systems in a specific network architecture with hardwired logic or programs stored in nonvolatile memory, such as read only memory.","Referring now to the drawings, in which like numerals represent like elements throughout the several figures, aspects of the present invention and the preferred operating environment will be described.","The Operating Environment",{"@attributes":{"id":"p-0042","num":"0040"},"figref":"FIG. 1","b":"1"},"The Computer Hardware",{"@attributes":{"id":"p-0044","num":"0042"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","11","10","11","12","13","11"]},"The personal computer  includes a CPU . The personal computer also includes system memory  (including read only memory (ROM)  and random access memory (RAM) ), which is connected to the CPU  by a system bus . The preferred computer  utilizes a BIOS , which is stored in ROM . Those skilled in the art will recognize that the BIOS  is a set of basic routines that helps to transfer information between elements within the personal computer . Those skilled in the art will also appreciate that the present invention may be implemented on computers having other architectures, such as computers that do not use a BIOS, and those that utilize other microprocessors, such as the \u201cMIPS\u201d or \u201cPOWER PC\u201d families of microprocessors from Silicon Graphics and Motorola, respectively.","Within the personal computer , a local hard disk drive  is connected to the system bus  via a hard disk drive interface . A floppy disk drive , which is used to read or write a floppy disk , is connected to the system bus  via a floppy disk drive interface . A CD-ROM or DVD drive , which is used to read a CD-ROM or DVD disk , is connected to the system bus  via a CD-ROM or DVD interface . A user enters commands and information into the personal computer  by using input devices, such as a keyboard  and\/or pointing device, such as a mouse , which are connected to the system bus  via a serial port interface . Other types of pointing devices (not shown in ) include track pads, track balls, pens, head trackers, data gloves and other devices suitable for positioning a cursor on a computer monitor . The monitor  or other kind of display device is connected to the system bus  via a video adapter .","The remote computer  in this networked environment is connected to a remote memory storage device . This remote memory storage device  is typically a large capacity device such as a hard disk drive, CD-ROM or DVD drive, magneto-optical drive or the like. The personal computer  is connected to the remote computer  by a network interface , which is used to communicate over the local area network .","As shown in , the personal computer  is also connected to the remote computer  by a modem , which is used to communicate over the wide area network , such as the Internet. The modem  is connected to the system bus  via the serial port interface . The modem  also can be connected to the public switched telephone network (PSTN) or community antenna television (CATV) network. Although illustrated in  as external to the personal computer , those of ordinary skill in the art will quickly recognize that the modem  may also be internal to the personal computer , thus communicating directly via the system bus . It is important to note that connection to the remote computer  via both the local area network  and the wide area network  is not required, but merely illustrates alternative methods of providing a communication path between the personal computer  and the remote computer .","Although other internal components of the personal computer  are not shown, those of ordinary skill in the art will appreciate that such components and the interconnection between them are well known. Accordingly, additional details concerning the internal construction of the personal computer  need not be disclosed in connection with the present invention.","Those skilled in the art will understand that program modules such as an operating system  and data are provided to the personal computer  via computer readable media. In the preferred computer, the computer-readable media include the local or remote memory storage devices, which may include the local hard disk drive , floppy disk , CD-ROM or DVD , RAM , ROM , and the remote memory storage device . In the preferred personal computer , the local hard disk drive  is used to store data and programs, including the operating system  and the scanner .","The focus of the express update package  is described below in a manner that relates to its use in a scanner  with plug-in capability of FIG. . This description is intended in all respects to be illustrative rather than restrictive. Alternative embodiments will be apparent to those skilled in the art.","The Internal Objects",{"@attributes":{"id":"p-0053","num":"0051"},"figref":"FIG. 2","b":["36","37","38","37","205","235","260","265","270","230","220","285","290","295"]},"An express update package  can contain exploit plug-in modules , resource plug-in modules , dat files , and help file . The exploit plug-in modules  and the resource plug-in modules  can be DLLs. An exploit plug-in module  can contain one or more exploit objects . An exploit object  can be a container for a plug-in exploit . The plug-in exploit  can be an individual exploit, or security check, that is done on the host computer or computers.","The resource plug-in module  can contain one or more resource objects . A resource object  can contain a plug-in resource . The plug-in resource  can be an individual resource that is used by the scanner . The resources may include data, executable code, or a network connection. Examples of resources are a list of known accounts on a host or an open file transfer protocol (FTP) connection. Because the plug-in exploits  that produce and consume shared resources can be added to the scanner  installation dynamically, the resources can also have plug-in capability, and can be packaged and delivered separtely from the scanner . Like the exploit objects , the resource objects  can expose standard interfaces enabling the scanner  to manage them without any knowledge of their function or purpose.","There can be several basic type of resources. A mandatory resource can be one that an exploit must have in order to perform successfully. An optional resource can be one that an exploit can use if the resource exists, but is not necessary for the exploit to function properly. A create-on-demand (C-O-D) resource can be a resource that is created the first time it is requested. Afterwards, when a requested C-O-D resource already exits, the requester will get the C-O-D resource, instead of having the resource recreated. A create-unique resource can be a resource that is always created afresh when requested, so that the requestor is guaranteed that the resource is unique and will not be accessed or used by any other requestor.","When a resource is created, it can be assigned a name space based on its scope. The scope of a resource can be an indication of its specificity, and can include host-specific resources, session-specific resources, and global resources. A host-specific resource can only be used by exploits running against the host and in the session to which a resource belongs. A session-specific resource can be used only by exploits running against a host in the scan session to which the resource belongs. A global resource can be used by any exploit in any scan session.","The separation of the resources and the exploits in the resource objects  and the exploit objects  is a key idea in the architecture, and has substantial benefits. The scanner  can be more efficient because a resource required by multiple exploits only needs to be created once, instead of once for each of the exploits. The scanner  can also be more flexible because the resources and the exploits may be updated independently of each other. In addition, because the exploit objects  and the resource objects  can hide their implementation details behind standard interfaces, they may be managed and manipulated by an application, such as the scanner , that does not know of their internal make-up. This can yield an architectural solution where the exploit need have no knowledge of the other exploits that produce or consume its resources.","The dat file  can store exploit attribute information for all of the exploits in the express update package . There can be one dat file  for each exploit plug-in module . When queried for its attribute information, the exploit reads the pertinent data from the dat file . The separation of the exploit attribute information from the exploit object  itself allows the exploit object  and the dat file  to be updated independently. This separation also allows only some dat files  to be updated if other dat files  do not need to be updated or changed.","The help file  can contain on-line help information associated with the exploit objects  that can be contained in the exploit plug-in module . When a user requests help, the scanner  can read the information from the file and display it in the UI . The separation of the exploit's help information from the exploit object  can allow the help file  and the exploit object  to be updated independently of one another.","An exploit manager  manages the exploit objects  and a resource manager  manages the resource objects . The exploit manager  and the resource manager  can access the exploit objects  contained in the exploit plug-in module  and the resource objects  contained in the resource plug-in module . The exploit manager  and the resource manager  can convey exploit objects  and resource objects  to the policy manager  and plug-in engine .","The UI  can exchange information with the user. The UI  can include a policy editor  and a policy manager . The policy editor  can allow a user to examine modify create and configure policies; acquire on-line documentation about any exploit: perform keyword searches on the on-line documentation; and alter the current presentation of information based on category choices or search results. Policy information can be a scan configuration, consisting of a set of enabled exploits and any necessary parameters for those exploits. The policy manager  can pass exploit policy information to and from the policy editor  via a scanpolicy object . In addition, the policy manager  can acquire exploit objects  from the exploit manager  and resource objects  from the resource manager , and then can create the scanpolicy objects . A scanpolicy object  can be a container for policy information, and can expose interfaces enabling the scanner  components to query it for this information. When used in a scan session, the scanpolicy object  can be stored in a session object .","The session object  can contain all information necessary to run a scan session. A scan session can run a series of exploits for one or more hosts. The engine  can query the session object . The session object  can contain: the scanpolicy object  identifying enabled exploits and their parameters; a list of hosts to scan; a master exploit list ; a master resource list , and a license file. The session object  can construct the master exploit list  and the master resource list . The scanpolicy object  can be built by the policy manager  and the scanpolicy object  can be used to construct the master exploit list  and master resource list . The master exploit list  can contain information about all the plug-in exploits  enabled for a scan session. For each plug-in exploit , the master exploit list  can contain its exploit object  and information about any resource objects  produced or consumed by the exploit. The master resource list  can contain information about the resources needed for a scan session. For each resource, the list contains its resource object , and information about any exploits that produce or consume the resource.","A session manager  can contain and manage the scan sessions as represented by session objects . The session manager  can exchange scan configuration setting information with a thread manager . The session manager  can ensure that host-scanning threads  are allocated equitably among the various session objects . The UI  and the engine  can query the session manager  for information on what host to scan, scan configuration settings, etc. The thread manager  can get information from the session manager  that describes when a new session has been created, the number of hosts in a session and scan configuration parameters. The thread manager  can also create the host-scanning threads . The host-scanning thread  can tell the thread manager  when it is finished with a scan session. Otherwise, the host-scanning thread  can communicate with the session manager  to get host information.","The engine  can run the built-in exploits. The plug-in engine  can be included in the engine  and can ran the plug-in exploits , and can contain the target object  and a copy of the master exploit list  and master resource list . The resources that are produced and consumed by various exploits can create dependencies among exploits. The plug-in engine  can run the plug-in exploits  in a particular order. There can be a plug-in engine  instance for each host. The plug-in engine  can query the session manager  and can make its own copies of the master exploit list  and the master resource list . The plug-in engine  can then use its copy of the master exploit list  and the master resource list  to run the plug-in exploits . The master exploit list  and the master resource list  can have information on each exploit and resource. In particular, these lists  and  can be used to determine the order of running the plug-in exploits .","The target objects  can be containers that provide a means of communication between the plug-in engine  and the exploit objects . The plug-in engine  can create a target object , and can reuse the same target object  for each plug-in exploit  run against a host. Before executing the plug-in exploit, the plug-in engine  can query the exploit object  for information on the resources it requires. The plug-in engine  can acquire the required resource objects  from the resource manager  and can put them into the target object . The target object  can pass the required resource objects  into the exploit object . The plug-in exploit  can then be run, and the exploit object  can pass the scan result information into the target object . The target object  can then return this scan result information to the plug-in engine , which updates the UI , the database , and the scanner log file .","The Screen Displays","Turning now to , screen displays showing the UI  component for an exemplary embodiment of the present invention are shown.",{"@attributes":{"id":"p-0069","num":"0067"},"figref":"FIG. 3","b":["305","320","310","320","37","310","310","315","325","80","8080","330"]},{"@attributes":{"id":"p-0070","num":"0068"},"figref":"FIG. 4","b":["405","36","405","410","425","410","415","420"]},"The Standard folder  can hold numerous categories of standard vulnerabilities, including Backdoors, Browser, E-mail, and Firewalls categories. The exploit details that can be shown in the Vulnerabilities folder  include: risk levels, attack names, platforms, descriptions, remedies, references, common vulnerabilities and exposures (CVE), and links to other sources.",{"@attributes":{"id":"p-0072","num":"0070"},"figref":"FIG. 5","b":["505","37","505","510"]},{"@attributes":{"id":"p-0073","num":"0071"},"figref":"FIG. 6","b":["605","37","605","205","610"]},{"@attributes":{"id":"p-0074","num":"0072"},"figref":"FIG. 7","b":["705","710","715","720","720","725","291","210","291","299","294","205","215","292"]},"The Plug-in Capability",{"@attributes":{"id":"p-0076","num":"0074"},"figref":"FIG. 8","b":["805","37","810","205","811","215","245","812","210","815","820","205","240","240","245","250","255","825","205","240","235","830","260","265","835","235","840","270","845","270","835","840"]},"Initializing a Scanner",{"@attributes":{"id":"p-0078","num":"0076"},"figref":"FIG. 9","b":["805","37","8","905","230","220","299","297","294","298","910","299","297","299","297","37","915","215"]},{"@attributes":{"id":"p-0079","num":"0077"},"figref":"FIG. 10","b":["910","299","297","37","9","1005","37","299","297","1010","230","299","220","297","37","299","297","37","299","297","299","297","1011","37","299","297","1015","230","299","37","220","297","37","1020","299","297","37","1021","299","297","37","1025","299","230","297","220"]},{"@attributes":{"id":"p-0080","num":"0078"},"figref":"FIG. 11","b":["915","215","9","1105","215","230","220","1110","230","220","285","1115","230","220","299","297","294","298","1120","215","230","220","294","298","298","1125","37","294","298","294","298","1130","230","294","220","298","230","294","220","298","215","215","294","298"]},{"@attributes":{"id":"p-0081","num":"0079"},"figref":"FIG. 12","b":["1125","294","298","11","3","1205","230","220","299","297","1206","299","297","230","220","294","298","1210","299","297","230","220","1211","230","220","299","297","294","298","1215","230","220","230","220","294","298","299","297"]},"Getting License, Policy and Host Information",{"@attributes":{"id":"p-0083","num":"0081"},"figref":"FIG. 13","b":["810","8","1305","205","1310","205","1315","205"]},{"@attributes":{"id":"p-0084","num":"0082"},"figref":"FIG. 14","b":["812","8","1410","210","1415","210"]},"Running Exploits",{"@attributes":{"id":"p-0086","num":"0084"},"figref":"FIG. 15","b":["840","8","270","275","37","1505","270","1510","275","291","1515","275","291","1520","270"]},{"@attributes":{"id":"p-0087","num":"0085"},"figref":"FIG. 16","b":["1505","1520","15","270","270","270","1605","270","1610","270","290","295","205","1615","270","1605","1610"]},{"@attributes":{"id":"p-0088","num":"0086"},"figref":"FIG. 17","b":["1510","1515","291","15","1705","240","245","250","255","1710","275","250","255","1715","275","1720","275","280","1721","275","280","1725","275","280","294","1730","275","291","1735","294","280","1740","294","280","275","1745","275","280","1750","275","290","295","205","1755","275","1721","1750"]},{"@attributes":{"id":"p-0089","num":"0087"},"figref":"FIG. 18","b":["291","275","275","250","255","250","255"]},"The master exploit list  can be divided into four sections. The first section can include the exploits that neither produce nor consume resources. In step , the plug-in engine  can first run these plug-in exploits .","The second section of the master exploit list  can include the exploits that only produce resources. In step , the plug-in engine  can run these plug-in exploits . After each exploit is run, the copied master resource list  can be updated to indicate which resources have been created.","The third section of the master exploit list  can include the -exploits that both produce and consume. In step , the plug-in engine  can run these plug-in exploits . The plug-in engine  can ask each of these exploit list  resources the exploit needs to run. For example, the copied master exploit list  can indicate that exploit  needs resources A, B, and C to run. The plug-in engine  can then go to the copied master resource list  and find out that exploits , , and  need to run to produce resources A, B, and C. Exploits ,  and  can be run, producing A, B, and C. Then exploit  can be run using A, B, and C. This procedure of scheduling exploits that produce required resources to run prior to consumers of those resources can apply to exploits , , and . To make the process run smoothly, cyclic dependencies can be disallowed. Dependencies of standard exploits on DoS exploits can also be disallowed.","The fourth section of the master exploit list  can include the exploits that only consume resources. In step , the plug-in engine  can run these plug-in exploits  last.","The present invention has been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive.","Alternative embodiments will become apparent to those skilled in the art to which the present invention pertains without departing from its spirit and scope. Accordingly, the scope of the present invention is defined by the appended claims rather than the foregoing description."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0023"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0024"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0025"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0028","num":"0026"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0029","num":"0027"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0030","num":"0028"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0031","num":"0029"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
