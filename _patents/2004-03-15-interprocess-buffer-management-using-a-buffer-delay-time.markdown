---
title: Interprocess buffer management using a buffer delay time
abstract: Interprocess buffer management is described. In an implementation, a method includes determining an amount of time to communicate a message and receive a response to the message by a first process from a second process. A buffer delay time is computed from the amount of time. Data from the first process is stored in a buffer. When the buffer delay time is reached, the buffer is sent to the second process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07421700&OS=07421700&RS=07421700
owner: Microsoft Corporation
number: 07421700
owner_city: Redmond
owner_country: US
publication_date: 20040315
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention generally relates to the field of buffers and more particularly relates to interprocess buffer management.","A process may be thought of as an instance of the execution of a program by a client, or a service started by the operating system. For example, the process includes a sequence of states of the executing program, such as the program code, data, and the state of the processor(s) that are executing the program, e.g. values in registers of the processor. Thus, the process is a \u201crunning\u201d program (either client program or a service) and a particular set of data that is associated with the program.","During execution of the process, the process may communicate information with another process, such as to exchange information, synchronize execution, and so on. Communication between processes is generally referred to as InterProcess communication (IPC). IPC includes a programming interface that may be utilized to communicate between a plurality of processes that are executed concurrently on the client or server computer. For instance, a plurality of processes may be utilized in the execution of a single program so that the program can handle a plurality of concurrent user requests. In another instance, a single user request may result in the concurrent execution of a plurality of processes. IPC is utilized to make this concurrent execution possible by providing for data communication between the processes.","During the concurrent execution of the plurality of processes, however, one of the processes may be executed more quickly than another one of the processes. If one of the processes sends data to another process, for instance, the receiving process should not impede the sender even if the receiving process is not ready to consume the data from the sending process. To optimize the communication between the processes, a buffer may be utilized. The buffer may be implemented as a storage area in memory that is shared by processes that are executed at different speeds, different priorities, and so on. The buffer, for instance, may allow each process to be executed without being dependent on another process.","When designing the buffer, the buffer designer may configure the size of the buffer and algorithms for moving data into and out of the buffer to optimize the functionality of the buffer. When configuring the buffer, the designer oftentimes is forced to make a \u201cbest guess\u201d about the buffer sizes for communication between the processes. As previously stated, however, a wide variety of processes may be executed on the client to provide a wide variety of functionality. Therefore, the buffer designer may not have sufficient information regarding the contemplated usage patterns, required communication speed, comparative rates of generating logical messages and consuming those messages by the other process. Additionally, once the buffer is designed, the buffer is generally fixed in both size, e.g. amount of data that may be stored in the buffer, and by the algorithms that are utilized to control data flow using the buffer. Therefore, the buffer management algorithms may be designed for situations that are not similar to the actual situations that the buffer encounters during operation, which may decrease the usefulness of the buffer.","Therefore, there is a continuing need to improve techniques for interprocess buffer management using adaptive algorithms.","Interprocess buffer size management, and sending delay management is described. An InterProcess Communication (IPC) manager is provided for managing buffer size and buffer delay times that are utilized to pass data between processes. The processes may include processes provided by separate programs or services. The described buffer management may be used for communication between processes on one machine, or processes running on different machines. The IPC manager may manage the buffer based on an amount of time utilized to communicate between the processes. The IPC manager is utilized to automatically control the size of the buffer, e.g. an amount of data that may be stored by the buffer, and hence communication delays between the processes. Each buffer may contain one or more logical messages. The buffer management achieves a balance between communications delays (requiring small buffers) and communication overhead (requiring bigger buffers and hence smaller number of transmissions).","In an implementation, a method includes determining an amount of time to communicate a message and receive a response to the message by a first process from a second process. A buffer delay time is computed from the amount of time. Data from the first process is stored in a buffer. When the buffer delay time is reached, the buffer is sent to the second process.","In another implementation, a system includes first and second processes, a buffer, a buffer delay time, and an IPC manager. The first process is for outputting data and the second process is for processing the data to produce a response. The buffer is for storing the data before transmission. The buffer delay time is computed from an amount of time taken to perform the outputting and to receive the response by the first process. The IPC manager is for managing the buffer such that when the buffer delay time is reached, other data stored in the buffer is accessible by the second process.","The same reference numbers are utilized in instances in the discussion to reference like structures and components.","Overview","Interprocess buffer management is described. An InterProcess Communication (IPC) manager is provided for managing buffers that are utilized to pass data between processes. The processes may include processes within a single program, processes provided by separate programs, and\/or processes that are executed on separate clients, i.e. across machine boundaries. The IPC manager may manage the buffer utilizing a buffer delay time that specifies a maximum amount of time data remains in the buffer before it is sent to another process. The IPC manager also provides for adaptive computation of this buffer delay time during which the unsent data remains in the sender's buffer. The IPC manager may also be utilized to automatically control the size of the buffer, e.g. an amount of data that may be stored by the buffer, and hence communication delays between the processes. In the following discussion, buffer size control may refer to management of memory used to keep partially-filled buffers.","In an implementation, the IPC manager manages the buffer based on an amount of time that is utilized to communicate between the processes that are utilizing the buffered communication. The IPC manager, for instance, may determine an amount of time to communicate a message and receive a response to the message. The amount of time may then be utilized to compute a buffer delay time which defines a maximum amount of time that data from the process is stored in the buffer before it is communicated to the other process.","The buffer delay time may balance divergent interests in communication between processes utilizing the buffer. For example, for each communication sent between processes there is an \u201coverhead\u201d of performing send-receive operations, and an even higher overhead of context switching (e.g., each send-receive operation may imply a context switch). The context switches may be especially expensive in some operating system implementations. To decrease this overhead, fewer communications that have a larger amount of data may be sent. By increasing the size of the communication, however, there may be an increased delay when waiting to obtain an amount of data to be sent that was requested. By computing a buffer delay time from the amount of time needed to send a message and receive a response to the message, the IPC manager may balance the response delay observed by the requestor and receiver of the message, channel throughput, and size of the allocated buffer to achieve a balance such that operation of the buffer may be optimized for the changing requirements of the processes that use the buffer.","Exemplary Environment",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["102","104","106","102","104","102","104","106","102","104","104","104"]},"The network  is illustrated as a wide area network (WAN). For example, the network  may also include a variety of networks that provide two-way communication, such as the Internet, an intranet, a wired or wireless telephone network, and so forth. The network  may also include a variety of local area networks (LANs), such as an Ethernet, wireless networks, and so forth.","The client  is illustrated as including a plurality of computer programs (programs) (), . . . , (), . . . , (N). Each of the plurality of programs ()-(N) is executable on the client  to provide one or more processes. For example, program () is illustrated as including a plurality of processes (), . . . , (), . . . , (M). As previously stated, the plurality of processes ()-(M) may be thought of as an instance of the execution of the program () by the client. For example, each of the processes ()-(M), when executed, includes a sequence of states of the executing program (), such as the program code, data, and the state of the processor(s) that are executing the program.","During execution of the plurality of processes ()-(M), one of the processes ()-(M) may communicate with another one of the processes ()-(M) through InterProcess Communication (IPC). As previously stated, IPC provides a set of programming interfaces that may be utilized to create and\/or manage the plurality of processes ()-(M) when executed concurrently on the client . One of more of the plurality of processes ()-(M) of program () may also communicate with one or more other processes (), where \u201cj\u201d is any integer between one and \u201cJ\u201d, that are executed from another program () another program. Further, one or more of the processes ()-(M) may communicate with one or more of a plurality of processes (), where \u201ck\u201d can be any integer between one and \u201cK\u201d, that are executed on the remote client . Thus, IPC may be utilized to make this concurrent execution possible by providing for data to be communicated between the pluralities of processes ()-(M), (), ().","The client  includes an IPC manager  which manages data flow utilizing one of more of the plurality of buffers (), where \u201cl\u201d can be any integer from one to \u201cL\u201d. The buffers () may be utilized to stored data from communication between processes ()-(M) of a single program (), between processes ()-(M) of the program () and processes () of another program (), and between processes ()-(M) and processes () that are executed across \u201cmachine boundaries\u201d on the remote client , which is described in greater detail in relation to .","The IPC manager , when executed on the client , dynamically controls data flow between the processes ()-(M), (), () by controlling the conditions at which the data is the buffers () is passed between the processes ()-(M), (), (). For example, the IPC manager  may specify one or more conditions for sending a partially-filled buffer () from one process to another process. One such condition may include a buffer delay time that specifies a maximum amount of time that data from the process is sent to the other process. Therefore, the other process is not forced to wait for the contents of the buffer past the buffer delay time. The buffer delay time may be computed in a variety of ways, examples of which are discussed in relation to .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","104","104","202","204","202","202","116","202","204","202","206","208","206","208","202","206","208","110","110","112","114"],"i":["l","j","k"]},"The memory  is illustrated as including the plurality of buffers (). Although a single memory  is illustrated, memory  may represent a plurality of memories. For example, a first one of the plurality of buffers () may be included on a first memory and a second one of the plurality of buffers () may be included on a second memory. A look-up table  is also illustrated as being stored in memory . The look-up table  may include a plurality of entries which are utilized to map virtual memory addresses to physical memory addresses of the memory . For example, rather than provide an actual physical address of data in the memory , the data may be given a virtual address for processing by the first and\/or second processes , . The look-up table  is utilized to convert the virtual address to the physical address to obtain and\/or store the respective data.","A buffer delay table  is also illustrated as being stored in memory . The buffer delay table  may be utilized to store one or more buffer delay times that are computed by the IPC manager . In an implementation, the buffer delay table  represents storage of a single buffer delay time. The single buffer delay time in this implementation is the most recent buffer delay time computed by the IPC manager . In another implementation, the buffer delay table  includes a plurality of buffer delay times. For example, the buffer delay table  may include the last five buffer delay times computed by the IPC manager . The IPC manager  may then utilize the entries in the buffer delay table , along with a determination of an amount of time to send a message and receive a response to compute a new buffer delay time. Further discussion of the computation of a buffer delay time from past buffer delay times may be found in relation to .","The client  also includes a timer . The timer  may be implemented in hardware, software, or a combination thereof. The IPC manager , when executed on the client , may monitor the timer  to compute the amount of time taken to send a message and receive a response to the message, as well as to determine when to send the buffer () from one process to another. Further discussion of determining an amount of time to send a message and receive a response to the message utilizing the timer  may be found in relation to . Further discussion of monitoring the timer  to determine when to send the buffer () from one process to another process may be found in relation to .","The client  further includes a buffer size table . The buffer size table  may be utilized to store one or more entries that describe the size of data (e.g., an amount of memory utilized to store the data) communicated in the buffer (). For example, the IPC manager , when executed on the client , may allocate the buffer () to store data communicated between processes having a size that correspond to the largest size of any of the \u201cZ\u201d entries stored in the buffer size table , where \u201cZ\u201d is the number of entries in the buffer size table . The buffer size table , for instance, may include five entries which respectively describe the five most recent buffer sizes that were communication. Thus, the size of the buffer () may be managed by the IPC manager  based on heuristic data, further discussion of which may be found in relation to .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["300","300","302","1","302","2","300","304","1","304","2","306","1","306","2","300","308","1","308","2","310","1","310","2","302","1","302","2"]},"The IPC mechanism  illustrates two levels of communication abstractions. The lower-level abstraction builds on the model of asymmetric channel, capable of delivering one-way messages or messages with responses. The low-level model defines commands for opening a server endpoint, connecting to the server endpoint, sending a message to an endpoint and sending a message with a response. There are additional commands for receiving asynchronous responses, canceling requests, removing endpoints and disconnecting from endpoints. In the illustrated IPC mechanism , an IPC (), () keeps communication logic in native code. The communication logic may be minimized through careful selection of the communication abstraction.","The higher-level model adds a streaming and buffer management API (), (). In the current implementation, the IPC mechanism includes automatic management of the grouping of logical messages into network packets, as well as automatic management of network packet size. The algorithm used is adaptive in nature as previously described.","The IPC mechanism  also employs platform invoke (), () for implementing the managed API (), (). The \u201cPlatform Invoke\u201d is an interoperation mechanism that may be provided in a managed code implementation. This mechanism enables interaction of native (C or C++) code with managed code, such as .NET code, C#, and so on. Through use of platform invoke (), (), the cost of managed-to-native transition is reduced and thus overall efficiency of the IPC mechanism  is improved.","Exemplary Procedures",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 1"],"b":["400","402","206","404","208","206","208","104","206","208","206","208","206","208","206","104","208","102"]},"The IPC manager  checks the timer  to determine when the message  was sent. For example, the IPC manager  may query the timer  to determine a time . In another example, the IPC manager  may initiate the timer  such that the time  starts when the message  is communicated.","At block , a response  to the message  communicated at block  is received by the first process  from the second process . The IPC manager  again checks the timer  to determine when the response  was received. For example, the IPC manager  may query the timer  to determine a time . In another example, the IPC manager  may also stop execution of the timer  that was initiated when the message  was communicated at block .","At block , the IPC manager  determines an amount of time  taken to communicate the message  and receive the response  to the message . The IPC manager , for instance, may subtract the time  queried at block  from the time  queried at block  to determine the amount of time . If the timer  was initiated by the IPC manager  when the message  was communicated, the time  is equal to the amount of time .","At block , the IPC manager  computes a buffer delay time  from the amount of time  determined at block . By utilizing the amount of time , the buffer delay time  is based on the execution of the first and second processes ,  to form the message  and the response , respectively, as well as the amount of time utilized to communicate the message  and the response  between the first and second processes . . The buffer delay time  may therefore balance divergent interests in communication between the first and second processes , . For example, as previously described for each communication sent between processes there is an \u201coverhead\u201d of an amount of time needed to perform the communication. To decrease this overhead, fewer communications that have a larger amount of data may be sent. By increasing the size of the communication, however, there may be an increased delay when waiting to obtain a requested amount of data to be sent. By computing a buffer delay time from the amount of time needed to send a message and receive a response to the message, the IPC manager may balance the response delay observed by the requester and receiver of the message, channel throughput, and size of the allocated buffer to achieve a balance. In an implementation, the computed buffer delay time  is approximately equal to twice the amount of time .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 5","FIG. 4"],"b":["500","118","206","208","502","116","118","118","116","216","216","216","216","206","208","216"],"i":["l","l","l"]},"At block , data  from the first process  is stored in the buffer (). For example, the data  may be streamed from the first process  for storage in the buffer (). At block , when the buffer delay time  is reached or exceeded, the IPC manager  passes the buffer () to the second process . The IPC manager , for instance may monitor the timer to determine when the buffer delay time  is greater than or equal to the time  indicated by the timer .","When the buffer delay time  is reached or exceed, the buffer () may be passed between the first and second processes ,  in a variety of ways. In the current implementation, the buffers are sent via RPC over LPC. In an example, the IPC manager  passes control of the buffer () from the first process  to the second process  by executing a \u201csend\u201d operation. Therefore, the data  in the buffer () is not communicated from the first process  to the second process , but rather the second process  gains control over the buffer () to obtain the data  from the buffer () itself. It should be noted that in some implementations of operating systems, actual movement of buffers is under operating system control. The RPC, which is the part of the operating system, may chose to either physically copy the buffer contents from server to receiver process, or keep the buffer in the shared memory so that the receiving process will gain access to buffer contents. In both cases, the interaction of the sender and the receiver is abstracted by send and receive operations. In another example, data  from the buffer () is communicated from the buffer () to the second process  when the buffer delay time  is reached or exceeded. The data , for instance, may be communicated from the buffer () to an address space in the memory, either virtual or actual, that is managed by the second process  such that the second process  may recognize the data  therein.","At block , the IPC manager  stores a buffer size  of the buffer () in the buffer size table . The buffer size table  is represented as including four entries that describe buffer size that were previously utilized by the IPC manager , which is represented pictorially in  as buffer size , , , . The IPC manager  may utilize a variety of techniques to determine which buffer entry to replace with a new buffer entry, e.g. buffer size . For example, the IPC manager  may include the largest buffer sizes in the buffer size table . Utilizing this technique, the size of the buffer () is maximized yet the amount of time that expires before the buffer is sent between processes still does not exceed the buffer delay time  as described in relation to block . Yet another technique is for the IPC manager  to include the smallest buffer sizes in the buffer size table . Utilizing this technique, the size of the buffer () is minimized such that the buffer is communicated between processes more quickly than if the buffer size was maximized. Therefore, the buffer () may be communicated between the first and second processes ,  before the buffer delay time  is reached in most instances.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 6","FIG. 2"],"b":["600","602","604","604","606","608","214","214"]},"At block , the IPC manager allocates another buffer based on the buffer size table. At block , data is stored in the other buffer. At decision block , the IPC manager determines whether the other buffer is full. If not, then at decision block  the IPC manager determines whether the buffer delay time is reached. If the buffer is full at decision block  or the buffer delay time was reached at block , then at block  another message is sent that includes data from the other buffer and another time is noted. At block , the IPC manager stores the size of the other buffer in the buffer size table.","At block , the IPC manager waits for a response to the message sent at block  and\/or the message sent at block . Block  may be performed by the IPC manager in parallel with the performance of blocks -. For example, the IPC manager, after noting the time at block , waits for a response at block  while allocating the other buffer (block ), storing data in the buffer (block ), performing the determinations (blocks , ), sending the other message (block ), and storing the size of the other buffer (block ). Thus, the IPC manager in this implementation continues to manage data storage from processes while waiting for the response.","At block , the IPC manager determines if there has been a communication failure between the processes. The IPC manager, for instance, may specify a maximum period of time to wait for the response. If that maximum time has been reached, then the procedure  ends at block  for that particular message. The procedure , however, may continue by sending a failure message and resending the message from block .","At block , the IPC manager receives a response to the message that was sent at block . When the response is received, the IPC manager notes the time at block . At block , the IPC manager computes a buffer delay time from the times noted at blocks , , respectively. The IPC manager, for instance computes the buffer delay time by doubling the amount of time it took to send the message at block , processes the message by the second process, and to receive a response to the message at block .","At block , the IPC manager stores the buffer delay time as an entry in the buffer delay table. In an implementation, the IPC manager stores a plurality of buffer delay times in the buffer delay table and then utilizes buffer delay table to compute a new buffer size for managing the next allocated buffer (block ). By computing the new buffer delay time from a plurality of previously utilized buffer delay times, the new buffer delay time may \u201cround-out\u201d one or more buffer delay time anomalies. For example, due to a communication interruption the most recently computed buffer delay time may have a much higher than previous buffer delay times that were utilized by the IPC manager. Therefore, the IPC manager may utilize the plurality of entries in the buffer delay table to reduce the effect of this anomaly, such as by increasing the buffer size. In another example, the buffer delay table is not utilized, but rather just the most recently computed buffer delay time is utilized. Thus, the procedure  may repeat block - such that the buffer delay time may change due to changing operational conditions of an environment that executes the procedure , such as the amount of time taken to send the message, processes the message, and\/or receive the response.","Exemplary Operating Environment","The various components and functionality described herein are implemented with a number of individual computers.  shows components of a typical example of a computer environment , including a computer, referred by to reference numeral . The computer  may be the same as or different from client  of . The components shown in  are only examples, and are not intended to suggest any limitation as to the scope of the functionality of the invention; the invention is not necessarily dependent on the features shown in .","Generally, various different general purpose or special purpose computing system configurations can be used. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, network-ready devices, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The functionality of the computers is embodied in many cases by computer-executable instructions, such as software components, that are executed by the computers. Generally, software components include routines, programs, objects, components, data structures, and so on, that perform particular tasks or implement particular abstract data types. Tasks might also be performed by remote processing devices that are linked through a communications network. In a distributed computing environment, software components may be located in both local and remote computer storage media as previously described in relation to .","The instructions and\/or software components are stored at different times in the various computer-readable media that are either part of the computer or that can be read by the computer. Programs are typically distributed, for example, on floppy disks, CD-DVD, ROMs, DVD, or some form of communication media such as a modulated signal. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory.","For purposes of illustration, programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","With reference to , the components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures.","Computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. \u201cComputer storage media\u201d includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital video discs (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more if its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or software components that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , applications , software components , and program data . The program data  may include data which is stored in a buffer allocated in the system memory  for communication between processes being executed on the processing unit . Thus, the program data  may or may not include processes ()-(M) and () of  and the first and second processes ,  of .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as data media interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface.","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer-readable instructions, data structures, software components, and other data for computer . In , for example, hard disk drive  is illustrated as storing operating system \u2032, applications \u2032, software components \u2032, and program data \u2032. Note that these components can either be the same as or different from operating system , applications , software components , and program data . Operating system \u2032, applications \u2032, software components \u2032, and program data \u2032 are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard , and pointing device (not shown), commonly referred to as a mouse, trackball, or touch pad. Other input devices may include source devices (such as a microphone  or camera  which provide streaming data), joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through an input\/output (I\/O) interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , computers may also include other rendering devices (e.g., speakers) and one or more printers, which may be connected through the I\/O interface .","The computer may operate in a networked environment using logical connections to one or more remote computers, such as a remote device . The remote device  may be the same as or different from the remote client  of . The remote device  may be a personal computer, a network-ready device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Although the WAN  shown in  is the Internet, the WAN  may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the like.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the Internet . The modem , which may be internal or external, may be connected to the system bus  via the I\/O interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote device . By way of example, and not limitation,  illustrates remote software components  as residing on remote device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Conclusion","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
