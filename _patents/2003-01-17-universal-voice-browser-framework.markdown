---
title: Universal voice browser framework
abstract: A system and method for providing voice communications over a network, including a media server having a voice rendering platform for supporting voice-based user interactions. The voice rendering platform provides prompting, information collection and validation, and audio recording and transcoding. A separate application server is responsible for performing call control actions. During a user dialog, control is passed to the media server for rendering and receiving data, and passed back to the application server for call control actions. The media server includes a script execution environment for rendering the voice components of the user dialogs. The application server is an execution platform for applications written in a procedural programming language. Voice communications over a network are provided without combining call control and voice rendering functionality into a single, script execution platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07149287&OS=07149287&RS=07149287
owner: Snowshore Networks, Inc.
number: 07149287
owner_city: Chelmsford
owner_country: US
publication_date: 20030117
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims priority under 35 U.S.C. \u00a7119(e) to provisional patent application Ser. No. 60\/349,836 filed Jan. 17, 2002, and entitled \u201cUniversal Voice Browser Framework\u201d.","N\/A","The present invention relates generally to communication systems, and more specifically to a system and method for providing voice communications over a global communication network (\u201cWeb\u201d).","A number of existing systems have been designed to provide voice communications over the Web. Recently, what has been referred to as a Voice Browser platform has been used for execution of VoiceXML (Voice extensible Markup Language) scripts in connection with various specific types of voice enabled applications executing on an application server. In a typical telephonic user interaction using such an existing architecture, a VoiceXML script executes on the Voice Browser to support a dialog with a user. During the dialog, various voice prompts may be provided, and the user provides response data that is captured and stored. In a common scenario, when the user has entered sufficient data to complete a form, a SUBMIT command is executed through the Voice Browser, causing an HTTP (HyperText Transport Protocol) transaction to occur, often resulting in another VoiceXML script being selected for execution.","The VoiceXML language processed by the Voice Browser includes many commands (\u201ctags\u201d) for supporting a user dialog. These include commands for rendering of aural data, for example by providing recorded and\/or synthesized voice prompts, as well as commands for accepting different types of input data, for example by receiving and processing voice and DTMF (DualTone Multi-Frequency) data. VoiceXML also includes a number of telephony commands relating to call control actions. Call control refers to the ability of executing scripts to control a connection with the user. Call control actions performed through VoiceXML commands executed in the Voice Browser include various types of call transfers. Call transfer actions may include simply transferring the user to another destination, transferring the user to another destination and dropping out of a call if the transfer is successful, and\/or transferring the user but staying in the call, either to retrieve the user at the end of their interaction with the remote destination, or to monitor the call for events such as the user speaking a keyword or pressing a special key.","In the existing Voice Browser architecture, both call control and voice rendering functionality are provided through execution of VoiceXML scripts within the Voice Browser platform. The VoiceXML scripting language, like similar scripting languages such as HTML (HyperText Markup Language), is well suited to rendering data. As is generally known, HTML is designed for development of scripts that are primarily used to render visual data. VoiceXML is intended for development of scripts relating to voice-driven interactions. Accordingly, many of the commands in VoiceXML are designed to support rendering and reception of voice dialog data. However, the procedural logic needed for many call control actions is not well supported using VoiceXML. For example, the syntax of the <if> command is convoluted in VoiceXML, and none of the standard structured programming constructs, such as \u201cfor\u201d, \u201cwhile\u201d, and \u201cuntil\u201d are provided. In particular, supporting the VoiceXML <transfer> command to transfer a user to a new destination, such as a remote call center, is problematic. The various state machines associated with the different call signaling mechanisms that must be supported in this regard are difficult to implement using VoiceXML. Moreover, handling error cases in VoiceXML script for such call control state machines is awkward and excessively complex.","For these reasons and others, it would be desirable to have a system for providing voice communications over a network that does not combine call control and voice rendering functionality within VoiceXML scripts executed in a Voice Browser. The system should advantageously enable the use of procedural programming constructs for supporting call control actions, while efficiently processing VoiceXML for dialog rendering purposes.","In accordance with the present invention, a system and method for providing voice communications over a network are disclosed. In the disclosed system, a media server provides a voice rendering platform for supporting voice-based user interactions. In this regard, the voice rendering platform of the disclosed media server provides voice rendering functionality such as prompting, information collection and validation, audio recording and transcoding.","Application execution in the disclosed system is performed in an application server separate from the media server. The application server is responsible for performing call control actions. During a user dialog, control is passed to the media server for rendering and receiving data, and passed back to the application server for call control actions. Accordingly, the media server includes a script execution environment for rendering the voice components of user dialogs, whereas the application server is an execution platform for applications written in a procedural programming language.","In this way, the disclosed system provides voice communications over a network without combining call control and voice rendering functionality into a single platform. The disclosed system advantageously enables the use of procedural programming constructs for dealing with call control actions, while processing VoiceXML for dialog rendering purposes. The disclosed system eliminates the need to perform call transfer actions in a VoiceXML execution environment, using the VoiceXML <transfer> command.","U.S. provisional patent application Ser. No. 60\/349,836 filed Jan. 17, 2002, and entitled \u201cUniversal Voice Browser Framework\u201d is hereby incorporated by reference.","As shown in , application and services devices  are provided to support applications and services available to a user  through access and transport devices . The user  is, for example, a person placing a telephone call that is passed through the Public Switched Telephone Network (PSTN)  to the gateway , and then received for processing by the application and services devices . The gateway  may provide support for signaling using a variety of packet protocols. The application and services devices  may, for example, be physically located within a call center facility associated with one or more voice or telephone applications or services.","During operation, the gateway  exchanges signaling messages with the voice application server , using a compatible signaling protocol. In one embodiment, the signaling protocol used by the gateway  to communicate with the voice application server  is the Session Initiation Protocol (SIP). As it is generally known, SIP is an example of an IP (Internet Protocol) telephony signaling protocol that is suitable for integrated voice-data applications. In such an embodiment, the gateway  exchanges voice data with the IP media server  using a compatible transport protocol. For example, as shown in , the gateway  may use the Real-time Transport Protocol (RTP) to exchange voice data with the IP media server . RTP is an example of an IP protocol that supports real-time transmission of voice and video and that is widely used for IP telephony. Accordingly, the gateway  in  may be embodied as any gateway that converts TDM signaling to SIP signaling, and that exchanges voice data with the IP media server  in IP packets using RTP. One such existing gateway is the Cisco\u00ae AS5350.","In an alternative embodiment, shown in , a TDM switch  may be used as a gateway between the PSTN  and the application and services devices . In the embodiment of , the TDM switch  may employ the ISUP (ISDN User Part) signaling protocol when communicating with the voice application server , and employ TDM (Time Division Multiplexing) to exchange voice data with a TDM media server . While  shows signaling information being conveyed out of band between the TDM switch  and the TDM media server , signaling information could instead be sent in band between the TDM switch  and TDM media server , in which case the signaling information would be passed from the TDM media server  to the voice application server  using the SIP protocol.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 3"],"b":["52","24","16","14","24","24","14"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["12","27","14","16","27"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5","b":["16","52","14","50"]},"Now again with reference to , the voice application server  and IP media server  communicate using SIP and HTTP, and the IP media server  further communicates using HTTP with a web server , which in turn communicates with one or more database servers  using a predetermined database management protocol. Each of the voice application server , IP media server , web server , and\/or database server  may, for example, be embodied as a physically separate computer system, including a number of processors, program memory, and input\/output (I\/O) devices. In such an embodiment, the voice application server , IP media server  and web server  would be interconnected using a communications network over which messages are exchanged using a predetermined message format and communications protocol. Alternatively, two or more of the voice application server , IP media server  and\/or web server  may be embodied as independently executing software processes within a single computer system, logically separate from one another, for example using separate execution contexts and communicating using a predetermined inter-process communications protocol.","In the illustrative embodiment of , the voice application server  includes an environment for performing telephony signaling. For example, as it is generally known, telephony signaling includes exchanging control signals that establish and disconnect calls. Accordingly, the telephony signaling performed by the application server  in the illustrative embodiment includes establishing and disconnecting calls. The application server  may further include, in order to support one or more voice application programs executing on the application server , a number of voice related programming interfaces, such as TAPIs (Telephony Application Programming Interface), ISUP (ISDN User Part) APIs, JAIN\u2122 APIs, and others. The application server  also provides a full execution environment for one or more procedural programming languages, such as Java\u2122, Perl, C, C++, or other languages. Other components associated with voice application functionality may also be included in the voice application server , such as one or more Web application servers.","The primary function of the voice application server  is to support one or more voice enabled application programs. Such programs include service logic and specific instructions to provide voice-related services. One example of a service provided through the voice application server  is unified messaging, which provides access to both electronic mail and voice mail via a common interface to the user , for example by converting electronic mail messages to speech through text to speech processing.","Another example of a voice application service that may be provided through the voice application server  is Interactive Voice Response (IVR). As it is generally known, IVR systems may be used as front ends to call centers, in order to offload calls from relatively costly human agents, and advantageously eliminate the need for human agents to answer simple, repetitive questions.","The voice application server  may also or alternatively support a conferencing service, enabling interactive communication sessions between three or more geographically separated users via telephone connections. Conferencing services provided through the voice applications server  may include real-time audioconferencing, videoconferencing, and\/or data conferencing.","One or more voice portals may also be supported through the voice application server , providing automated telephone information systems that speak to the caller with a combination of fixed voice menus and real-time data, potentially obtained from one or more databases in the database servers . In a typical interaction with a voice portal, the caller interacts with the system by pressing digits on the telephone, or by speaking words or short phrases that are recognized using voice recognition technology. Examples of currently available Voice Portal applications include banking, flight-scheduling, and automated order entry and tracking systems.","The above examples of services supported in the voice application server  are provided only as examples, and the voice application server  may be embodied including any appropriate application or service functionality.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 6","FIG. 6","FIG. 6","FIG. 6"],"b":["21","21","14","21","21","42","42","42","42","16","21","44","44","44","44","16","21","44","44","21","46","46","46","46","16","16","46","42","16","46"],"i":["a","b","a","b","a","b"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 7","FIG. 7","FIG. 1","FIG. 1","FIG. 1"],"b":["60","25","62","22","64","14","14","22"]},"At step , the voice application server  signaled by the answering gateway  maps the predetermined telephone number dialed by the user  and indicated by the answering gateway  to at least one VoiceXML script. The voice application server  further operates at step  to inform a media server, such as the media server  shown in , of the phone call. The voice application server also either provides the VoiceXML script itself, or an address of the VoiceXML script, such as a URL, to the media server .","The media server  then operates at step  to process the VoiceXML script identified by the voice application server . For example, the VoiceXML script may provide a voice dialog form to be filled out by the user  through voice or other responses. After the user has provided all information required by the script, a <submit> VoiceXML command is processed to convey the information collected using the VoiceXML script to one or more applications on the voice application server . In response to the information collected by the media server  from the user, at step , the media server  indicates to the voice application server  that a call control operation is to be performed by virtue of the receipt of the HTTP command used to honor the <submit>, i.e., HTTP POST or HTTP GET.","Alternatively, the media server  may still interpret the <transfer> tag and send an indication to the application server. This indication may be performed, for example, by the media server  throwing an event to the voice application server , indicating the specific call control action to be performed. While various call control events may be indicated, an example of a call control event to be performed by the voice application server  might be connecting the user  to a remote call center (not shown), where a call center operator would answer. Such a call control event is then performed in the voice application server  at step . In the case of a connection to a remote call center, the voice application server would operate to place a call to the remote call center, and then when that outbound call was answered at the remote call center, connecting the original user call to the remote call center.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 8","FIG. 8","FIG. 5","FIG. 8","FIG. 5","FIG. 5","FIG. 8","FIG. 5"],"b":["82","52","84","50","86","14","88","16"]},"As shown in , a user places a call  using the telephone  by dialing a number that is routed to the media gateway  by the telephone network. The media gateway  responds by issuing a routing request  to the media gateway controller . In response to the routing request , the media gateway controller determines the call is for an application, and sends a SIP INVITE  to the application server . The application server  then sends a SIP INVITE  to the media server , which includes a reference to a VoiceXML script to execute. As a result of the INVITE, the media server  sends the HTTP GET command  back to the application server , in order to obtain the VoiceXML script that is to be executed in processing the call. The application server  then sends the requested script back to the media server  in the HTTP 200 OK message . While in , for purposes of illustration, the media server  obtains the VoiceXML script from the application server , the media server  may alternatively fetch the VoiceXML script from any web server as appropriate for a given deployment of the disclosed system.","Now the media server has the VoiceXML script, it is ready to accept the call. At step , the media server  issues a 200 OK SIP command to signal the application server  that it is ready to accept the call. The application server signals the media gateway controller  that it is ready to accept the call by issuing the SIP 200 OK message . The media gateway controller  requests the media gateway  to create a connection with the media server  in the routing response .","At this point, the connection is ready, so the media gateway controller  acknowledges the connection to the application server  in the SIP ACK message . The application server  acknowledges the connection to the media server  in the SIP ACK message . This establishes the path  between the media server  and the media gateway . The media gateway  relays the audio from the caller to the media server  through the PSTN connection .","During the voice dialog over the path  and connection , the media server  executes the script it received from the application server , and collects information provided by the user, for example in DTMF form. In an embodiment that is supporting a prepaid calling card application, in which the caller is attempting to make a long distance phone call through use of a prepaid calling card, the information collected might include the card number and the number to be dialed. Alternatively, in an embodiment in which the caller is attempting to place an outbound call from an office, where all outbound calls must be associated with a client identifier, the information collected might include the identity of the caller, for example in the form of a Personal Identification Number (PIN), and a client identifier for the call. These two applications are given only for purposes of explanation, and the present invention is not limited to these applications, and may be embodied for any suitable voice application.","Following the Audio\/RTP session , the media server  passes the information it obtained from the caller during the Audio\/RTP session  to the application server  in the HTTP GET command . For example, the information provided to the application server  may include a PIN associated with the caller. The application server  may then perform various checks with regard to the information provided from the media server . Such checks may include whether or not a prepaid card has sufficient remaining prepaid time to make the requested call, or whether the caller is permitted to associate the call with the provided client code, and\/or other types of checks. The application server  may also provide additional scripts to the media server , for example indicating a failed request by the caller due to lack of authorization, or in order to obtain further information from the caller.","After all of the necessary scripts for the application have been provided by the application server  and processed by the media server , the application server  knows, from the service logic running on the application server, that a transfer call control action must be performed, for example to connect the caller with the requested long distance number, or to establish the call that is associated with the provided client code.","Alternatively, the media server  may detect a <transfer> tag in a script that it processes. The information passed from the media server  to the application server  indicates that the call transfer is to be performed, and any other details of the transfer, such as the new destination number.","At step , the original call is redirected by a SIP re-INVITE command passed from the application server  to the media gateway controller . For example, in the case of a prepaid calling card application, the SIP re-INVITE  may operate to connect the caller to the requested long distance number. Similarly, in the case of the client code entry system, the SIP re-INVITE  may also operate to connect the caller to the requested number in the event the caller was determined authorized to make the call.","Upon receiving an empty HTTP 200 OK message  from the application server , the media server  knows there will not be any more interaction with the caller. The media server  thus sends a SIP BYE message  to the application server . The media server  must send the SIP BYE message  to the application server , since the application server  may not have been the entity providing any or all of the VoiceXML scripts to the media server . Regardless of the source of a VoiceXML script provided to the media server , if processing of that VoiceXML script may result in or be followed by a transfer call control action, then that script indicates that indication of and\/or information relating to the transfer call control action should be passed from the media server  to the application server  for performance of the transfer call control action.","The application server  acknowledges the BYE message  with the SIP 200 OK response . The application server  then reroutes the call, per application logic within the application server . To reroute the call, the application server  re-INVITEs the caller to the target destination by issuing a SIP re-INVITE message  to the media gateway controller . The media gateway controller  then directs the media gateway  to redirect the stream to the appropriate endpoint. The rest of the call flow for the redirection of the call is similar to steps \u2013 of .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 9","FIG. 9","FIG. 5"],"b":["50","16","14"]},"In the embodiment shown in , the IP media server further includes software providing a VoiceXML launcher, which enables HTTP-based VoiceXML application servers to deliver services to SIP user agents without requiring the application servers to implement the SIP protocol. The VoiceXML launcher software effectively operates to turn incoming SIP calls into HTTP requests that a VoiceXML application server can accept. During operation, the VoiceXML launcher software operates as follows:","1. When the IP media server  receives a SIP INVITE that is not directed to a well-known media service (e.g. announcement, interactive voice response, conferencing, or VoiceXML dialog), the SIP INVITE is directed to a default service rather than being rejected. When VoiceXML launcher capability is desired, the default service is defined to be the VoiceXML dialog service.","2. The SIP INVITE is sent to the dialog service for processing. Normally, in the case of dialog service, there is exactly one URI parameter which identifies the script to be executed (\u201cvoicexml=\u201d). However, in this case no parameter is sent in the SIP INVITE. The VoiceXML launcher software uses a pre-provisioned script to contact the VoiceXML application server  and to pass session variables (caller, callee, diversion, time of day, etc.) to the VoiceXML application server .","3. The VoiceXML application server  then generates the appropriate script based on the session variables provided by the IP media server , and returns the next script in the HTTP response to the IP media server .","The operation of the devices shown in  is now further described with reference to the steps shown in . For purposes of illustration, the media gateway  of  corresponds to the media gateway controller  of , the media gateway controller  of  corresponds to the media gateway controller  of , the media server  of  corresponds to the IP media server  of , and the VoiceXML application server  corresponds to the voice application server  shown in . For exemplary purposes SS7 signaling is used from the PSTN. Alternatively, any suitable signaling can be used.","At step  of , a signaling gateway  sends an SS7 incoming call indication to the media gateway . When the media gateway  receives the SS7 call indication, the media gateway  makes a routing policy request  to the media gateway controller  at step , in order to determine the SIP URL to which the call should be directed. At step , the media gateway controller  returns a SIP URL to the media gateway  so that the media gateway  can direct the call to the appropriate SIP user agent. In the example of , the SIP URL is associated with the media server .","The media gateway  uses the returned SIP URL to form a SIP INVITE message to the media server  at step . The \u201cTo\u201d header in the SIP INVITE sent at step  corresponds to the called number and the \u201cFrom\u201d header corresponds to the calling number. The media server  is configured so that the dialog service (\u201cVoiceXML Launcher\u201d) is the default service. This service takes information from the SIP INVITE and uses it to populate a VoiceXML script template that has been associated with the launcher service and processes it as the initial script. In some circumstances, and for purposes of explanation, the script consists simply of a <submit> tag and a namelist which includes the called party and calling party information. Other information regarding the call may additionally or alternatively be provide, such as the current time of day. The <submit> tag includes the HTTP URL of the VoiceXML application server to be contacted. The namelist variable names could be those of the VoiceXML session variables or others which are agreed upon. The <submit> tag causes these variables to be communicated to the specified VoiceXML application server  via HTTP at step .","The VoiceXML application server  receives the called and calling numbers and uses this information to select or generate an appropriate VoiceXML script for the session. The script is returned to the media server for processing in the body of the HTTP response .","Now that the media server  has retrieved the first VoiceXML script containing user interactions, at step  it sends a positive SIP 200 OK response to the SIP INVITE from the media gateway. The media gateway  acknowledges the final response from the media server  and the end to end RTP stream is established  in connection with the TDM stream . The media server  processes the VoiceXML script to interact with the user and collect data as specified. The media server  uploads the collected information to the VoiceXML Application Server using the HTTP POST in response to the VoiceXML <submit> tag .","The VoiceXML application server then processes the namelist from the received HTTP message  in order to determine or generate the next VoiceXML script. In the example of , the script consists of a <disconnect> tag which will end the session, shown conveyed to the media server  at step . The media server  interprets the <disconnect> tag in the script and generates a SIP BYE request  to terminate the session with the media gateway . The media gateway  sends a 200 OK response at step  to the BYE request, thereby ending the session.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIGS. 7","b":["8","10"]},"Those skilled in the art should readily appreciate that programs defining the functions of the disclosed system and method can be implemented in software and delivered to a system for execution in many forms; including, but not limited to: (a) information permanently stored on non-writable storage media (e.g. read only memory devices within a computer such as ROM or CD-ROM disks readable by a computer I\/O attachment); (b) information alterably stored on writable storage media (e.g. floppy disks and hard drives); or (c) information conveyed to a computer through communication media for example using baseband signaling or broadband signaling techniques, including carrier wave signaling techniques, such as over computer or telephone networks via a modem. In addition, while the illustrative embodiments may be implemented in computer software, the functions within the illustrative embodiments may alternatively be embodied in part or in whole using hardware components such as Application Specific Integrated Circuits, Field Programmable Gate Arrays, or other hardware, or in some combination of hardware components and software components.","While the invention is described through the above exemplary embodiments, it will be understood by those of ordinary skill in the art that modification to and variation of the above described methods and system may be made without departing from the inventive concepts herein disclosed. Accordingly, the invention should not be viewed as limited except by the scope and spirit of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING","p":["The invention will be more fully understood by reference to the following detailed description of the invention in conjunction with the drawings, of which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 10","FIG. 9"]}]},"DETDESC":[{},{}]}
