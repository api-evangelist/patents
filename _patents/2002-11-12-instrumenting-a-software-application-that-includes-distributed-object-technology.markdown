---
title: Instrumenting a software application that includes distributed object technology
abstract: A method for instrumenting a compiled software application that includes distributed object technology. The method includes deriving an interface and class of an object of the compiled software application. Additionally, the interface is reconstructed to enable a client to communicate with the object once the object includes an instrumented function to measure the performance of the object. Furthermore, the object is implemented with the instrumented function. The compiled software application is enabled to utilize the object that includes the instrumented function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07287247&OS=07287247&RS=07287247
owner: Hewlett-Packard Development Company, L.P.
number: 07287247
owner_city: Houston
owner_country: US
publication_date: 20021112
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND ART","DISCLOSURE OF THE INVENTION","MODE(S) FOR CARRYING OUT THE INVENTION","Exemplary Home Reference Client Adapter Code","Exemplary Remote Reference Client Adapter Code"],"p":["Computers have become integral tools used in a wide variety of different applications, such as in finance and commercial transactions, computer-aided design and manufacturing, health care, telecommunication, education, etc. Computers are finding new applications as a result of advances in hardware technology and rapid development in software technology. Furthermore, the functionality of a computer system is dramatically enhanced by coupling these types of stand-alone devices together in order to form a networking environment. Within a networking environment, users may readily exchange files, share information stored on a common database, pool resources, and communicate via electronic mail (e-mail) and video teleconferencing. Furthermore, computers which are coupled to a networking environment like the Internet provide their users access to data and information from all over the world.","The software applications that operate on computer systems may be implemented in many different ways. For example, a programming language such as the Java\u2122 2 Platform, Enterprise Edition (J2EE\u2122) developed by Sun Microsystems may be utilized in order to create useable software applications. Within J2EE there are distributed objects which are referred to as Enterprise JavaBeans\u2122 (EJB\u2122). It should be appreciated that a software application can include multiple Enterprise JavaBeans. As such, as part of a transaction, one Enterprise JavaBean (or distributed object) of a software application can invoke or call another Enterprise JavaBean within the same or another application. Furthermore, the called Enterprise JavaBean (or object) can then call or invoke a third Enterprise JavaBean and so on: Additionally, the third Enterprise JavaBean may subsequently return a value to the second Enterprise JavaBean. Consequently, the second Enterprise JavaBean may then do some computations with the received value in order to provide a value to the first Enterprise JavaBean. It should be understood that this transaction may have been initiated by a call issued by a client computer to the software application operating on a server.","There are those individuals and\/or companies who are interested in improving or optimizing the performance of software applications. For example, by understanding where the most time is being spent during a transaction of a software application, a determination may be made of how to optimize or improve the transaction. Therefore, efforts are made to determine the elapsed time it takes to complete a software transaction along with determining how much time each distributed object of the transaction takes. In this manner, the object(s) that takes the most amount of time may be targeted for optimization. However, there are obstacles associated with measuring the completion time of each distributed object of a software transaction.","For example, one of the obstacles is that the source code of a software application may not be available to the company and\/or individual trying to evaluate the performance of the application objects. Instead, the evaluating company and\/or individual has access to the compiled version of the application. As such, the typical solution in this situation is to utilize proxy objects (or monitor objects) that work with the compiled software application. Specifically, for each object of a desired transaction, a proxy object is created that is associated with that object of the compiled application. The desired function of each proxy object is to measure the amount of time spent by its corresponding object during the transaction.","Specifically, a call to an object first goes through the proxy object before going to the desired object. So when a client makes a call to a transaction operating on a server, the call first goes through a proxy object associated with the first object of the transaction. Additionally, when the first object makes a call to a second object of the transaction, the call passes through the proxy object associated with the second object. As such, the proxy object provides some type of time measurement associated with the object of the transaction.","Depending on the software application, there are different choices for the implementation of such proxy objects. For example, the software application itself provides support for being instrumented. In this case, the proxy object may be registered with the software application and is executed within the application process. Alternatively, the software application itself provides no support for being instrumented. In this case, proxies being used to intercept the communication between distributed objects usually involves another computer program and increases the communication overhead.","However, there are disadvantages associated with both proxy object solutions. For example, one of the disadvantages associated with the first solution is that most applications do not support this approach. Hence, this first solution typically cannot be used with most applications. Another disadvantage associated with the first solution is that it usually involves coming up with a different solution for each application since each application commonly provides a different programmer's interface, e.g., API (application programming interface).","One of the disadvantages associated with the second solution is that it involves another computer program that intercepts the communication and forwards it to the subsequent object. Therefore, it introduces one more level of processing thereby adversely affecting the accuracy of the time measurements. In other words, the measurements of the elapsed time of each object within a transaction are offset by the overhead introduction by the proxy objects.","Another disadvantage associated with the second solution is that the protocol used by the client and server to exchange messages usually needs to be well understood by those desiring to measure the performance of the software application. Otherwise, it can be very difficult to implement the proxy object solution.","Accordingly, a need exists for a way to more accurately measure the amount of time spent by a distributed object during a transaction when the source code of a software application is not available and if the application does not support the registration of proxy objects to be executed within the application. A further need exists for a way that satisfies the above mentioned need and can be implemented even if the client\/server protocol for exchanging messages is not well understood.","A method for instrumenting a compiled software application that includes distributed object technology. The method includes deriving an interface and class of an object of the compiled software application. Additionally, the interface is reconstructed to enable a client to communicate with the object once the object includes an instrumented function to measure the performance of the object. Furthermore, the object is implemented with the instrumented function. The compiled software application is enabled to utilize the object that includes the instrumented function.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","102","100","100","102","100","100"]},"It is understood that the computer system that may embody the automated dynamic interface adaptation system  may be any kind of computer system. For example, the computer system may be, but is not limited to, a main-frame computer system, a super computer system, a server computer system, a workstation computer system, a personal computer system or a portable computer system.","Specifically, the automated dynamic interface adaptation system  is able to take a compiled software application  that includes distributed object technology and automatically determine where to insert instrumentation within it without having access to its source code. This is beneficial because it enables companies and\/or individuals to evaluate more easily and more accurately the performance of a software application that includes distributed object technology when its source code is unavailable.","The automated dynamic interface adaptation system  includes an extractor module  that is coupled to receive the compiled software application . The extractor module  is able to derive the home and remote interfaces and the class implementing a distributed object from the compiled application . Within one embodiment, if the distributed object was an Enterprise JavaBean\u2122 (EJB) of the J2EE, the extractor module  may utilize the deployment descriptor provided for each Enterprise JavaBean to derive the names of the classes implementing the home interface, the remote interface, and the class implementing that Enterprise JavaBean. The classes themselves are subsequently derived from the compiled software application . Once derived, the extractor module  passes the home and remote interfaces to a modifier module  and the distributed object's implementation class to a wrapper module . Both the modifier module  and the wrapper module  are coupled to the extractor module .","The modifier module  of  receives the home and remote interfaces and implementation class from the extractor module  and subsequently reconstructs the interfaces in order to produce an instrumented home interface  and an instrumented remote interface . In this manner, the instrumented home interface  and remote interface  may be substituted for the original home and remote interfaces of the distributed object of software application . Within one embodiment, the instrumented home interface  and remote interface  include new functionality that allow client devices to pass additional information related to the instrumentation to a server that has the compiled application  operating on it. The modifier module  may reconstruct the received home and remote interfaces to become instrumented in different ways in accordance with the present embodiment. For example, within J2EE, the process of Java reflection may be utilized to reconstruct the received home and remote interfaces into an instrumented home interface  and an instrumented remote interface .","The automated dynamic interface adaptation system  also includes the wrapper module  that is coupled to receive the distributed object's implementation class from the extractor module . Upon reception, the wrapper module  wraps the distributed object implementation in a wrapper to enable the software application  to utilize the instrumentation in conjunction with the distributed object. Subsequently, the wrapper module  produces a wrapped distributed object . Additionally, the wrapper module  is coupled to a class name changer module . As such, the wrapper module  outputs the wrapper class name  associated with the wrapped distributed object  to the class name changer module . It is understood that the wrapper provided by wrapper module  may be implemented in a wide variety of ways in accordance with the present embodiment. For example, an Enterprise JavaBean may be wrapped in a wrapper by the wrapper module  in order to include the desired instrumentation and also to be able to access the additional information passed to the server by clients for implementation of the instrumentation.","Within , the class name changer module  receives the wrapper class name  from the wrapper module  and is also coupled to receive the deployment descriptor associated with the distributed object from the application . Consequently, the class name changer module  replaces the original class name located within the distributed object's deployment descriptor with wrapper class name  associated with the wrapped object . As such, the class name changer module  produces an instrumented deployment descriptor  associated with the distributed object. It is appreciated that the functionality performed by the class name changer module  may be implemented in diverse ways in accordance with the present embodiment. For example, when operating with the J2EE, the class name changer module  may replace the original Enterprise JavaBean class name in its deployment descriptor with the wrapper class name  of the wrapper utilized to create the wrapped object .","The automated dynamic interface adaptation system  also includes an environment module  that is coupled to receive portion(s) of the compiled software application  in order to instrument the environment that a client executes within. It is noted that the environment module  may instrument the environment that the client executes within in different ways. For example, within J2EE, the dynamic interface adapter may instrument the javax.rmi.PortableRemoteObject.narrow function to return an adapter that adapts each non instrumented Enterprise JavaBean function in the remote interface to its instrumented counterpart and may pass additional information to the Enterprise JavaBean executed on the server. It is noted that this technique is described in more detail with reference to .","Alternatively, the environment module  of  may instrument the environment that the client operates within in another way. For example, within J2EE, the lookup functions of the Enterprise JavaBean client-side support libraries may be instrumented by the environment module  by returning an adapter in a manner similar to that previously described herein.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["200","104","200","104","200"]},"At step , the extractor module  is coupled to receive the compiled software application  and consequently it locates the deployment descriptor associated with a desired distributed object of application . It is understood that the deployment descriptor associated with the desired distributed object may be implemented in a wide variety of ways in accordance with the present embodiment. For example, the deployment descriptor may be implemented as an extensible Markup Language (XML) file as implemented within the Java 2 Platform, Enterprise Edition (J2EE).","In step  of , the extractor module  derives the names of the classes implementing the home and remote interfaces from the software application whose names are derived from the deployment descriptor associated with the desired distributed object. Subsequently, in step , the classes implementing the home and remote interfaces are derived from the compiled software application. It is understood that the home and remote interfaces are what the distributed object exposes to clients thereby enabling them to utilize the distributed object. The home and remote interfaces may be implemented in diverse ways in accordance with the present embodiment. For example, the following code illustrates an exemplary home interface for an Enterprise JavaBean. It is understood that this home interface code is provided as an example.",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface WeatherHome"]},{"entry":[{},"extends EJBHome {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Weather create( )"]},{"entry":[{},"throws javax.ejb.CreateException,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"java.rmi.RemoteException;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface Weather"]},{"entry":[{},"extends EJBobject {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int getTemp(String city)"]},{"entry":[{},"throws java.rmi.RemoteException;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At step  of , the extractor module  derives the name of the implementation class of the distributed object from its deployment descriptor. Subsequently, in step , the implementation class itself can be derived from the compiled software application . It is appreciated that within the present embodiment, the extractor module  is well suited to perform steps ,   and  in an order different than the order shown within , as long as step  is executed before step  and step  is executed before step . In step , the extractor module  outputs the extracted home and remote interfaces of the desired distributed object to the modifier module  and the distributed object's implementation class to the wrapper module . At the completion of step , the extractor module  exits flowchart .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["300","106","300","106","300"]},"In step , the modifier module  receives the home interface, remote interface and the implementing class of the desired distributed object from the extractor module . It is understood that the modifier module  may be coupled to the extractor module  as shown in .","At step  of , the modifier module  reconstructs the home and remote interfaces of the distributed object in order to generate instrumented versions of the home and remote interfaces (e.g.,  and , respectively). It is understood that the instrumented home interface  and remote interface  produced at step  may include new functionality that allows client devices to pass additional information associated with instrumentation functionality to the compiled application  operating on a server. At step , the modifier module  may reconstruct the received home and remote interfaces in diverse ways in order to produce the instrumented home and remote interfaces in accordance with the present embodiment. For example, Java reflection may be utilized within J2EE to reconstruct the received home and remote interfaces into instrumented home interface  and instrumented remote interface .","The following code illustrates an exemplary instrumented version of a home interface for an Enterprise JavaBean that may be produced by the modifier module . The exemplary code illustrates how the modifier module  may modify the home interface code (shown herein with reference to ) to produce an instrumented home interface (e.g., ). Specifically, the modifier module  at step  may instrument the home interface by extending an interface whose purpose is to indicate that the home interface has been instrumented. The following exemplary code illustrates an \u201cInstrumented\u201d home interface.",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface WeatherHome"]},{"entry":[{},"extends Instrumented, EJBHome {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Weather create( )"]},{"entry":[{},"throws javax.ejb.CreateException,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"java.rmi.RemoteException;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["106","106","110","106","304"],"figref":"FIG. 2"},{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface Weather"]},{"entry":[{},"extends Instrumented, EJBobject {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int getTemp(String city)"]},{"entry":[{},"throws java.rmi.RemoteException;"]},{"entry":[{},"int getTemp(Info info,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"String city)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throws java.rmi.RemoteException;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In step  of , the modifier module  outputs the instrumented home interface  and the instrumented remote interface  that may subsequently be utilized to assist in measuring the performance of the distributed object of compiled application . At the completion of step , the modifier module  exits flowchart .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","112","400","112","400"]},"At step , the wrapper module  receives the implementation class of the desired distributed object from the extractor module . In step , the wrapper module  \u201cwraps\u201d the desired distributed object implementation in a \u201cwrapper\u201d to include the desired management instrumentation that is utilized in conjunction with compiled application . In this manner, the wrapper module  generates a wrapped distributed object (e.g., ). It is appreciated that the wrapper provided by wrapper module  at step  may be implemented in diverse ways in accordance with the present embodiment.","For example, a wrapper generated at step  by the wrapper module  may include the desired instrumentation along with the ability to access the additional information passed to a server by clients for implementation of the instrumentation. The following code illustrates an exemplary Enterprise JavaBean wrapper that may be generated by the wrapper module  at step . It is understood that the Enterprise JavaBean wrapper code is provided as an example.",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class WrappedWeatherBean"},{"entry":"implements SessionBean {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Weather Bean aggregate=null;"]},{"entry":[{},"public WrappedWeatherBean( ) { aggregate=new WeatherBean( ); }"]},{"entry":[{},"public int hashCode( ) { return aggregate.hashCode( ); }"]},{"entry":[{},"public boolean equals(Object p0) { return aggregate.equals(p0); }"]},{"entry":[{},"public java.lang.String toString( ) { return aggregate.toString( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public void setSessionContext(javax.ejb.SessionContext p0) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"aggregate.setSessionContext(p0);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void ejbCreate( ) { aggregate.ejbCreate( ); }"]},{"entry":[{},"public void ejbRemove( ) { aggregate.ejbRemove( ); }"]},{"entry":[{},"public void ejbActivate( ) { aggregate.ejbActivate( ); }"]},{"entry":[{},"public void ejbPassivate( ) { aggregate.ejbPassivate( ); }"]},{"entry":[{},"public int getTemp(String p0) { return aggregate.getTemp(p0); }"]},{"entry":[{},"public int getTemp(Info info, String p0) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/*"]},{"entry":[{},"\u2009* report and process additional information"]},{"entry":[{},"\u2009* provided by client in info object"]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"return aggregate.getTemp(p0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"At step  of , the wrapper module  outputs the wrapped object implementation  that may subsequently be utilized to assist in measuring the performance of the distributed object of compiled software application . Additionally, at step , the wrapper module  outputs to a class name changer module (e.g., ) the wrapper class name (e.g., ) associated with the wrapped object implementation . At the completion of step , the wrapper module  exits flowchart .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 5","FIG. 1","FIG. 5"],"b":["500","118","500","118","500"]},"In step , the class name changer module  receives the wrapper class name  output by the wrapper module . At step , the class name changer module  receives the deployment descriptor associated with the desired distributed object from the compiled software application . It is understood that within the present embodiment, the class name changer module  is well suited to perform steps  and  in an order different than the order shown within .","In step  of , the class name changer module  replaces the original class name within the distributed object's deployment descriptor with the received wrapper class name . In this manner, the class name changer module  generates at step  an instrumented deployment descriptor (e.g., ) associated with the instrumented distributed object. It is appreciated that step  may be performed by the class name changer module  in a wide variety of ways in accordance with the present embodiment. For example, within J2EE, the class name changer module  may replace the class name of an Enterprise JavaBean in its deployment descriptor with the wrapper class name  created by the wrapper module .","At step , the class name changer module  outputs the newly instrumented deployment descriptor  associated with the desired distributed object that may subsequently be utilized to assist in measuring the performance of the distributed object of compiled software application . At the completion of step , the class name changer module  exits flowchart .","It is noted that the automated dynamic interface adaptation system  of  may automatically perform flowcharts , ,  and  for each distributed object of the compiled software application  that is a part of a specific transaction. In this manner, each of the distributed objects of a transaction of compiled application  may be instrumented for measuring the performance of each distributed object during the transaction that can be requested by one or more clients.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 6","FIG. 6"],"b":["600","600","600"]},"At step , the automatic dynamic interface adapter derives the home interface, the remote interface, and the implementation class of a distributed object of a compiled software application. It is understood that the home interface, the remote interface, and the implementation class of the distributed object may be located in a wide variety of places within the compiled software application. For example, if the compiled software application is implemented utilizing J2EE, the automatic dynamic interface adapter at step  may derive the names of the home interface, the remote interface, and the name of the implementation class of the distributed object from a deployment descriptor associated with the distributed object. Based on this knowledge, the corresponding implementation classes may be obtained from the software application.","In step  of , the automatic dynamic interface adapter modifies the derived home interface and remote interface of the distributed object in order to produce instrumented versions of the home interface and remote interface. It is understood that the instrumented home and remote interfaces of the distributed object enables a client or other object to communicate with the distributed object once it includes an instrumented function(s) that measures the performance of the distributed object. The automatic dynamic interface adapter is well suited to modify the home and remote interfaces in diverse ways in order to generate an instrumented home interface and an instrumented remote interface. For example, the dynamic interface adapter may generate the instrumented home and remote interfaces in any manner similar to that described herein.","At step , the automatic dynamic interface adapter enables the distributed object to include the desired instrumented function(s). The inclusion of the desired instrumented function(s) with the distributed object may be performed by the dynamic interface adapter at step  in a wide variety of ways. For example, the dynamic interface adapter includes the desired instrumented function(s) with the distributed object at step  by wrapping the implementation of the distributed object with a \u201cwrapper\u201d in any manner similar to that described herein. The wrapper also enables the compiled software application to utilize the instrumented distributed object.","In step  of , the automatic dynamic interface adapter changes the class name within the distributed object's deployment descriptor to the class name of the wrapper associated with the distributed object. In this fashion, the dynamic interface adapter produces at step  an instrumented deployment descriptor (e.g., ) associated with the instrumented distributed object. It is understood that step  may be implemented by the automatic dynamic interface adapter in any manner similar to that described herein.","At step , the automatic dynamic interface adapter determines whether there is another distributed object within the compiled software application that should be instrumented. If determined at step  that there is another distributed object within the compiled application that should be instrumented, the automatic dynamic interface adapter proceeds to the beginning of step . In this manner, the dynamic interface adapter is able to perform steps - for another distributed object of the compiled software application. However, if determined at step  that there is no more distributed objects within the compiled software application that should be instrumented, the automatic dynamic interface adapter proceeds to step .","In step  of , the automatic dynamic interface adapter instruments the environment one or more clients execute within. It is noted that the dynamic interface adapter at step  may instrument the environment that a client executes within in different ways. For example, within J2EE, the dynamic interface adapter may instrument the javax.rmi.PortableRemoteObject.narrow function to return an adapter that adapts each non instrumented Enterprise JavaBean function in the remote interface to its instrumented counterpart and may add the additional client information as shown in the following exemplary Home Reference Client Adapter code and exemplary Remote Reference Client Adapter code.",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public final class WeatherHomeAdapter"},{"entry":"implements Instrumented, WeatherHome"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WeatherHome home;"]},{"entry":[{},"public WeatherHomeAdapter(WeatherHome home) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this.home=home;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void remove(Object p0)"]},{"entry":[{},"throws java.rmi.RemoteException, javax.ejb.RemoveException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"home.remove(p0);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void remove(javax.ejb.Handle p0)"]},{"entry":[{},"throws java.rmi.RemoteException, javax.ejb.RemoveException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"home.remove(p0);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public javax.ejb.EJBMetadata getEJBMetadata( )"]},{"entry":[{},"throws java.rmi.RemoteException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return home.getEJBMetadata( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public javax.ejb.HomeHandle getHomeHandle( )"]},{"entry":[{},"throws java.rmi.RemoteException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return home.getHomeHandle( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public Weather create( )"]},{"entry":[{},"throws java.rmi.RemoteException, javax.ejb.CreateException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return new WeatherAdapter(home.create( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public final class WeatherAdapter"]},{"entry":[{},"implements Instrumented, Weather"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Weather remote;"]},{"entry":[{},"public WeatherAdapter(Weather remote)"]},{"entry":[{},"{ this.remote=remote; }"]},{"entry":[{},"public void remove( )"]},{"entry":[{},"throws java.rmi.RemoteException,"]},{"entry":[{},"javax.ejb.RemoveException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"remote.remove( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public javax.ejb.EJBHome getEJBHome( )"]},{"entry":[{},"throws java.rmi.RemoteException"]},{"entry":[{},"{ return remote.getEJBHome( ); }"]},{"entry":[{},"public javax.ejb.Handle getHandle( )"]},{"entry":[{},"throws java.rmi.RemoteException"]},{"entry":[{},"{ return remote.getHandle( ); }"]},{"entry":[{},"public Object getPrimaryKey( )"]},{"entry":[{},"throws java.rmi.RemoteException"]},{"entry":[{},"{ return remote.getPrimaryKey( ); }"]},{"entry":[{},"public boolean isIdentical(javax.ejb.EJBObject p0)"]},{"entry":[{},"throws java.rmi.RemoteException"]},{"entry":[{},"{ return remote.isIdentical(p0); }"]},{"entry":[{},"public int getTemp(String p0)"]},{"entry":[{},"throws java.rmi.RemoteException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/*"]},{"entry":[{},"\u2009* additional information is injected with new Info( )."]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"return remote.getTemp(new Info( ), p0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public int getTemp(Info info, String p0)"]},{"entry":[{},"throws java.rmi.RemoteException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return remote.getAddress(info, p0);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"612"},"Alternatively, the automatic dynamic interface adapter at step  may instrument the environment that the client executes within in another way. For example, within J2EE, the lookup functions of the Enterprise JavaBean client-side support libraries may be instrumented by the automatic dynamic interface adapter at step  by returning an adapter in a manner similar to that previously described herein.","It is noted that there are some advantages of instrumenting the environment that the client executes in instead of changing the client program. For example, it does not require the availability of the client's implementation. Additionally, even if this source code were available, the execution environment is usually less likely to be changed by vendors and thus involves less maintenance. Furthermore, the execution environment typically has well defined interfaces that can be used for instrumentation. Moreover, the execution environment is usually well documented (which typically is not the case for the client program).",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 7","FIG. 7"],"b":["700","700","700"]},"In step , the automatic dynamic interface adapter derives an interface(s) and implementation class of a distributed object of the compiled software application. It is understood that the interface(s) and the implementation class of the distributed object may be located in diverse places within the compiled software application. For example, if the compiled software application is implemented utilizing J2EE, the automatic dynamic interface adapter at step  may derive the name of the interface(s), e.g., home interface and\/or remote interface, and of the implementation class of the distributed object from a deployment descriptor associated with the distributed object and subsequently their implementation classes from the compiled software application .","At step  of , the automatic dynamic interface adapter alters the derived interface(s) of the distributed object in order to produce an instrumented version of the interface(s). The automatic dynamic interface adapter is well suited to modify the interface(s) in diverse ways in order to generate an instrumented interface(s) for the distributed object. For example, the dynamic interface adapter may generate the instrumented interface(s) in any manner similar to that described herein. It is understood that the instrumented interface(s) of the distributed object enables a client or other object to communicate with the distributed object once it includes an instrumented function(s) that measures the performance of the distributed object.","In step , the automatic dynamic interface adapter enables the distributed object to include the desired instrumented function or functions. The inclusion of the desired instrumented function(s) with the distributed object may be performed by the automatic dynamic interface adapter at step  in a wide variety of ways. For example, the dynamic interface adapter may include the desired instrumented function(s) with the distributed object at step  by wrapping the implementation of the distributed object with a wrapper in any manner similar to that described herein. The wrapper also enables the compiled software application to utilize the instrumented distributed object.","It is appreciated that steps  and  of  may be performed by the automatic dynamic interface adapter in a manner similar to that described herein with reference to steps  and  of .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 8","FIG. 8"],"b":["800","800","800"]},"It is appreciated that steps  and  of  may be performed by the automatic dynamic interface adapter in a manner similar to that described herein with reference to steps  and  of . At step  of , the automatic dynamic interface adapter implements the instrumented function(s) with the desired object of the compiled software application. In this manner, the object is able to include the instrumented function(s) that measures the performance of the object during a transaction of the compiled software application. The dynamic interface adapter may include or implement the instrumented function(s) with the object at step  in any manner similar to that described herein.","In step  of , the automatic dynamic interface adapter enables the compiled software application to utilize the object that includes the instrumented function(s). The automatic dynamic interface adapter may perform step  in diverse ways in accordance with the present embodiment. For example, the automatic dynamic interface adapter at step  may change the class name within the object's deployment descriptor to the class name of a wrapper associated with the instrumented object in a manner similar to that described herein with reference to step  of . It is understood that step  may be implemented by the automatic dynamic interface adapter in any manner similar to that described herein.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 9","b":["900","900","902","904","908","906","900","908","902","904","906","908","902","904","906","906","906"]},"It is noted that networking environment  is well suited to be implemented without network . As such, clients  and  may be communicatively coupled to server  via wired and\/or wireless communication technologies. Furthermore, networking environment  may be implemented to include more or less client devices than the two client devices (e.g.,  and ) shown in . Additionally, networking environment  may be implemented to include more server devices than the one server device (e.g., ) shown.","Accordingly, the present invention provides a way to more accurately measure the amount of time spent by a distributed object during a transaction when the source code of a software application is not available. Furthermore, the present invention also provides a way which satisfies the above accomplishment and can be implemented even if the client\/server protocol for exchanging messages is not well understood.","The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, and obviously many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
