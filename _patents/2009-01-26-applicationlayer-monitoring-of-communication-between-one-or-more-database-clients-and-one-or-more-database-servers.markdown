---
title: Application-layer monitoring of communication between one or more database clients and one or more database servers
abstract: One embodiment includes a system for application-layer monitoring of communication between one or more database clients and one or more database servers. The system includes one or more decoders residing at a decoding layer above a network layer. The decoders reside at a first network location between one or more database clients residing at one or more second network locations and one or more database servers residing at one or more third network locations. The decoders receive database messages communicated from the database clients and intended for the database servers and database messages communicated from the database servers and intended for the database clients, decode the database messages, and extract query-language statements from the database messages. The system also includes a monitoring application residing at an application layer above the decoding layer. The monitoring application resides at the first network location. The monitoring application receives query-language statements extracted at the decoders and records observations on the database messages based on the query-language statements extracted at the decoders.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07895160&OS=07895160&RS=07895160
owner: Crossroads Systems, Inc.
number: 07895160
owner_city: Austin
owner_country: US
publication_date: 20090126
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["This application is a continuation of, and claims a benefit of priority under 35 U.S.C. 120 of the filing date of U.S. patent application Ser. No. 10\/934,887 by inventors David B. Ewing and Rick A. Martindale entitled \u201cApplication-Layer Monitoring of Communication Between One or More Database Clients and One or More Database Servers\u201d filed on Sep. 3, 2004, the entire contents of which are hereby expressly incorporated by reference for all purposes.","This invention relates generally to database systems and more particularly to application-layer monitoring of communication between one or more database clients and one or more database servers.","A database server providing access to one or more database instances typically processes large numbers of queries, write messages, and other database messages from clients. Processing large numbers of database messages at the database server tends to slow response time at the database server, which in turn tends to adversely affect service at the database server to clients.","The present invention may reduce or eliminate disadvantages and problems often associated with database servers.","One embodiment includes a system for application-layer query result caching. The system includes one or more decoders residing at a decoding layer above a network layer. The decoders reside at a first network location between one or more database clients residing at one or more second network locations and one or more database servers residing at one or more third network locations. The decoders receive database messages communicated from the database clients and intended for the database servers and database messages communicated from the database servers and intended for the database clients, decode the database messages, and extract query-language statements from the database messages. The system also includes a caching application residing at an application layer above the decoding layer. The caching application resides at the first network location. The caching application receives query-language statements extracted at the decoders comprising queries, receives query-language statements extracted at the decoders comprising query results corresponding to the queries, and records the queries and the query results corresponding to the queries in a cache residing at the first network location.","Another embodiment includes a system for application-layer monitoring of communication between one or more database clients and one or more database servers. The system includes one or more decoders residing at a decoding layer above a network layer. The decoders reside at a first network location between one or more database clients residing at one or more second network locations and one or more database servers residing at one or more third network locations. The decoders receive database messages communicated from the database clients and intended for the database servers and database messages communicated from the database servers and intended for the database clients, decode the database messages, and extract query-language statements from the database messages. The system also includes a monitoring application residing at an application layer above the decoding layer. The monitoring application resides at the first network location. The monitoring application receives query-language statements extracted at the decoders and records observations on the database messages based on the query-language statements extracted at the decoders.","Yet another embodiment includes a system providing application-layer functionality between one or more database clients and one or more database servers. The system includes one or more decoders residing at a decoding layer above a network layer. The decoders reside at a first network location between one or more database clients residing at one or more second network locations and one or more database servers residing at one or more third network locations. The decoders receive database messages communicated from the database clients and intended for the database servers and database messages communicated from the database servers and intended for the database clients, decode the database messages, and extract query-language statements from the database messages. The system also includes an application residing at an application layer above the decoding layer. The application resides at the first network location. The application receives and processes query-language statements extracted at the decoders.","Particular embodiments of the present invention may provide one or more technical advantages. As an example, particular embodiments may enable application, at a logical or network location between one or more clients and one or more database servers, of application-layer functionality to communication between the clients and the database servers. The application-layer functionality at the logical or network location between the clients and the database servers may reside on top of a layer providing functionality for decoding and extracting SQL or other statements from database messages. Particular embodiments may, at a logical or network location between one or more clients and one or more database servers, cache query results from one or more database servers and respond to queries from one or more clients using cached query results. Responding to queries using cached query results may reduce time requirements associated with responding to such queries. Responding to queries using cached query results may also reduce loads on the database servers, which may in turn improve performance of the database servers. Particular embodiments may enable application-layer monitoring, at a logical or network location between one or more clients and one or more database servers, of communication between clients and database servers.","Particular embodiments of the present invention provide all, some, or none of these technical advantages. Particular embodiments may provide one or more other technical advantages, one or more of which may be readily apparent to a person skilled in the art from the figures, description, and claims herein.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["10","10","12","16","18","12","16","18","10","10","10"]},"In particular embodiments, one or more components of system  are each a stand-alone device. As an example and not by way of limitation, database appliance  may be a stand-alone device physically separate from clients  and database servers . In particular embodiments, a single device includes two or more components of system . The two or more components of system  in the single device may communicate with each other using Interprocess Communication (IPC). As an example and not by way of limitation, database appliance  may be a component of a device including one or more database servers  and may communicate with database servers  using IPC. As another example, database appliance  may be a component of a device including one or more clients  and may communicate with clients  using IPC.","In particular embodiments, a client  includes a hardware, software, or embedded-logic component or a combination of two or more such components that provide one or more users access to one or more of one or more applications at client , database appliance , and one or more database servers . As an example and not by way of limitation, client  may receive input from a user at client  and, based on the user input, execute an application instance at client . The application instance may then return one or more results, and client  may communicate to the user output based on the results from the application instance. As another example, client  may receive input from a user at client  and communicate to one or more database servers  a database message (such as, for example, a query, a query result, or a write message) based on the input from the user. Client  may then receive a response to the database message from database servers  and communicate to the user output based on the response from database servers . If client  communicates a query to one or more database servers , client  may receive a response to the query from database appliance  instead of database servers , as described below. Although a particular client  providing particular client functionality is described, the present invention contemplates any suitable client  providing any suitable client functionality.","In particular embodiments, a client  includes one or more application servers that each include a hardware, software, or embedded-logic component or a combination of two or more such components that host one or more applications, such as one or more business applications. As an example and not by way of limitation, an application server may receive a request to access an application hosted at the application server and, in response to the request, generate an instance of the application. The application server may then communicate the application instance for execution or execute the application instance and communicate one or more results of execution of the application instance for processing. Although a particular application server providing particular application-server functionality is described, the present invention contemplates any suitable application server providing any suitable application-server functionality. Client  and the applications servers may be physically separate from each other. A single device may include client  and the application servers.","In particular embodiments, database appliance  includes a hardware, software, or embedded-logic component or a combination of two or more such components that process Structured Query Language (SQL) statements communicated between clients  and database servers  and, based on such processing, provide caching, monitoring, or other functionality or a combination of such functionality at an application layer of a protocol stack, as described below. Although particular statements communicated between clients  and database servers  are described, the present invention contemplates database appliance  processing any suitable statements communicated between clients  and database servers . In particular embodiments, a rack server having a height of approximately one height unit (U) houses database appliance .","In particular embodiments, one or more clients  and one or more database servers  communicate with each other through database appliance . In such embodiments, database appliance  may be a proxy for a database server  and receive a database message from a client  intended for database server . In particular embodiments, database appliance  then processes the database message (which may include recording one or more observations on the database message) and communicates the database message to database server , as described below. In particular embodiments, database appliance  then processes the database message (which may include attempting to match the database message to a cache entry at database appliance , creating a cache entry based on contents of the database message, or both) and, according to results of such processing, either communicates the database message to database server  or communicate a response to the database messages to client  without communicating the database message to database server , as described below. In particular embodiments, one or more clients  and one or more database servers  do not communicate with each other through database appliance , but communicate with each other directly. In such embodiments, database appliance  may passively monitor communication between clients  and database servers , as described below.","In particular embodiments, to provide fault tolerance at database appliance , database appliance  includes two or more database appliances . As an example and not by way of limitation, system  may include a first database appliance  and a second database appliance  that share a virtual IP address with each other. To clients  and database servers  in system , first and second database appliances  may appear to be a single component. First database appliance  may have a primary role with respect to second database appliance , and second database appliance  may have a secondary role with respect to first database appliance . First database appliance  may process SQL statements communicated between clients  and database servers  and, based on such processing, provide caching, monitoring, or other functionality or a combination of such functionality. Second database appliance  may monitor first database appliance  and, if a failure occurs at first database appliance , automatically take over and, in place of first database appliance , process SQL statements communicated between clients  and database servers  and, based on such processing, provide caching, monitoring, or other functionality or a combination of such functionality. In particular embodiments, first database appliance  may copy data at first database appliance  over to second database appliance  so that, if a failure occurs at first database appliance  and second database appliance  takes over, second database appliance  may use such data when second database appliance takes over. First database appliance  may copy such data over to second database appliance  periodically or in response to particular events.","In particular embodiments, a database server  includes a hardware, software, or embedded-logic component or a combination of two or more such components that provide one or more clients  access to one or more database instances. As an example and not by way of limitation, a database server  may receive a query from a client  and, in response to the query, access data in one or more database instances responsive to the query and communicate the data to the client . Client  may, but need not, communicate the query to database server  in one or more acknowledged message exchange sequences. In addition, database server  may, but need not, communicate the data to the client in one or more acknowledged message exchange sequences. As another example, a database server  may receive a write message from a client  and, in response to the write message, make one or more changes to one or more database instances. As an example and not by way of limitation, in response to the write message, database server  may make one or more changes to one or more existing rows in one or more tables in or more database instances, add one or more rows to one or more tables in or more database instances, remove one or more rows from one or more tables in or more database instances, change one or more table definitions of one or more tables in or more database instances, change one or more views referencing one or more tables in or more database instances, remove one or more tables from or more database instances, or make one or more other changes to one or more database instances. A write message may, but need not, include a call to a procedure stored at database server .","In particular embodiments, database server  includes a cluster of multiple devices that each include one or more hardware, software, or embedded-logic components or a combination of two or more such components. In particular embodiments, database server  includes a mainframe computing system. Two or more database servers  in system  may, but need not, provide access to database instances that have database implementations different from each other. As an example and not by way of limitation, system  may include a first database server , a second database server , and a third database server . First database server  may provide access to a first database instance implemented according to Distributed Relational Database Architecture (DRDA), second database server  may provide access to a second database instance implemented according to Tabular Data Stream (TDS), and third database server  may provide access to a third database instance implemented according to OracleNet. A single database server  in system  may provide access to multiple database instances, and two or more of the database instances may, but need not, have database implementations different from each other. As an example and not by way of limitation, a single database server  may provide access to a first database instance implemented according to DRDA, a second database instance implemented according to TDS, and a third database instance implemented according to OracleNet. Although particular database implementations are described, the present invention contemplates any suitable database implementations.","In particular embodiments, clients  communicate with database server  at an application layer using SQL. The present invention contemplates any suitable dialect of SQL or other query language. Examples of dialects include, but are not limited too, T-SQL, XQUERY, SQL, SQL92, SQL99, SQL2003, and other dialects. Although particular dialects of particular query languages are described, the present invention contemplates any suitable dialects of any suitable query languages. Although SQL is described, the present invention contemplates clients  and database server  communicating with each other at an application layer using any suitable language.","In particular embodiments, clients  communicate with database server  at a driver layer below an application layer using a DRDA protocol, a TDS protocol, an OracleNet protocol, another protocol, or a combination of two or more such protocols. Although particular protocols are described, the present invention contemplates clients  and database server  communicating with each other at a driver layer below an application layer using any suitable protocol.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["20","16","20","16","22","24","26","28","30","22","16","22","12","18","24","16","22","16","16","12","18","24","16","22","16","26","16"]},"Decoder layer  at database appliance  receives database messages from TCP\/IP layer at database appliance , decodes and extracts SQL statements from the database messages, and communicates the extracted SQL statements to SQL layer  at database appliance . Decoder layer  includes one or more decoders that each decode and extract SQL statements from particular database messages. As an example and not by way of limitation, decoder layer  may include a first decoder, a second decoder, and a third decoder. The first decoder may decode and extract SQL statements from DRDA database messages, the second decoder may decode and extract SQL statements from TDS database messages, and the third decoder may decode and extract SQL statements from OracleNet database messages. Although particular decoders decoding and extracting SQL statements from particular database messages are described, the present invention contemplates any suitable decoders decoding and extracting SQL statements from any suitable database messages. In particular embodiments, one or more decoders in decoder layer  each include a segmentation and reassembly (SAR) unit.","In particular embodiments, SQL layer  at database appliance  receives SQL statements from decoder layer  at database appliance , normalizes and parses the SQL statements, and communicates the parsed, normalized SQL statements to application layer  at database appliance  for application-layer processing. Application layer  receives parsed, normalized SQL statements from SQL layer  at database appliance  and processes the parsed, normalized SQL statements according to an application at application layer . Application layer  includes one or more applications that each provide particular application-layer functionality. As an example and not by way of limitation, application layer  may include an application that caches query results from database servers  and uses cached query results to respond to queries from clients , as described below. As another example, application layer  may include an application that monitors and records communication between clients  and database servers , as described below. Although particular applications at application layer  providing particular query-language based functionality are described, the present invention contemplates any suitable application at application layer  providing any suitable query-language based functionality.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["16","16","32","34","36","38","40","42","16","16","16"]},"Database message interface  includes a hardware, software, or embedded logic component or a combination of two or more such components that provide an interface between database appliance  and other components of system . In particular embodiments, database message interface  is a network interface (such as a TCP\/IP interface). In particular embodiments, database message interface  is an IPC interface. In particular embodiments, database message interface  is a passive interface that enables database appliance  to monitor database messages between one or more clients  and one or more database servers  over one or more links, without reconfiguring clients  or database servers . In such embodiments, a mirrored port on a network switch on a link between a client  and a database server  may copy database messages between client  and database server  to database message interface .","In particular embodiments, database message interface  is a proxy for one or more database servers . In such embodiments, a network switch on a link between a client  and a database server  may redirect to database message interface  database messages from client  intended for database server . Database appliance  may process the redirected database messages, and database message interface  may or may not then forward the database messages to database server , as described below. The network switch may also redirect to database message interface  database messages from database server  intended for client . Database appliance  may process the redirected database messages, and database message interface  may then forward the database messages to client , as described below. In particular embodiments, database message interface  has two modes: a passive mode and a proxy mode. In such embodiments, a user may switch database message interface  from passive mode to proxy mode and vice versa. When in passive mode, database message interface  is a passive interface, as described above. When in proxy mode, database message interface  is a proxy for one or more database servers , as described above. In particular embodiments, passive mode enables database appliance  to project speedup of query response time in proxy mode and build cache  for responding to queries in proxy mode, as described below.","In particular embodiments, when database message interface  receives a database message from a client  or a database server , database message interface  notifies message event manager  that database message interface  received the database message. Message event manager  then invokes message memory manager  to write the database message to memory unit . Memory unit  may include volatile memory, nonvolatile memory, or both. In particular embodiments, to communicate a database message from memory unit  to a client  or a database server , database message interface  uses direct memory access (DMA) to access one or more frames of the database message in memory unit  according to a buffer pointing to the frames in memory unit . Database appliance  need not generate or reassemble the frames to communicate the database message to client  or database server , which may reduce clock-cycle requirements and other resource utilization associated with communicating database messages from memory unit  to client  or database server .","Message event manager  includes a hardware, software, or embedded logic component or a combination of two or more such components that process message events at database appliance . In particular embodiments, message event manager  processes message events from an event queue (which may be a first in, first out, (FIFO) queue) as described below. Example message events include, but are not limited to, database message interface  receiving a database message from a client  or a database server , data becoming available for processing at one or more components of database appliance , data becoming ready for communication from database appliance  to a client  or a database server , database appliance  establishing a new connection to a client  or a database server , database appliance  taking down a connection to a client  or a database server , and other message events. Although particular message event are described, the present invention contemplates any suitable message events. When a message event occurs at database appliance , database appliance  adds the message event to the event queue for processing. As an example and not by way of limitation, when database message interface  receives a database message from a client  or a database server , database message interface  may add an entry to the event queue corresponding to receipt of the database message. Message event manager  may pull the entry from the event queue and, in response to receipt of the database message, cause message memory manager  to write the database message to memory unit .","Message event manager  uses a single nonblocking, event-driven control thread to process message events at database appliance . In particular embodiments, when database appliance  powers up, message event manager  instantiates the control thread, which then accesses the event queue. If the event queue includes one or more message events, the control thread accesses a message event at a front of the event queue and starts to process the message event. If the event queue does not include a message event, the control thread waits until the event queue receives a message event to process, at which point the control thread accesses and starts to process the message event. If the control thread finishes processing a first message event, the control thread accesses the event queue to pull a second message event from the event queue for processing. If, while processing a first message event, the control thread reaches a point at which the control thread requires currently unavailable data from one or more components of database appliance  to continue processing the message event, the control thread instructs one or more of the components to notify message event manager  when the required data becomes available. The control thread then accesses the event queue to pull a second message event from the event queue for processing. When the required data becomes available, the one or more components instructed to notify message event manager  add an entry to the event queue indicating that the required data is available. When the control thread accesses the event queue and the entry indicating that the required data is available is at a front of the event queue, the control thread resumes processing the first message event. If, while processing a first message event, the control thread reaches a point at which the control thread requires one or more components of database appliance  to execute one or more tasks to continue processing the message event, the control thread instructs one or more of the components to notify message event manager  when the required tasks are complete. The control thread then accesses the event queue to pull a second message event from the event queue for processing. When the required tasks are complete, the components instructed to notify message event manager  add an entry to the event queue indicating that the required tasks are complete. When the control thread accesses the event queue and the entry indicating that the required tasks are complete is at a front of the event queue, the control thread resumes processing the first message event.","In particular embodiments, to process a message event, the control thread communicates a call to a component (such as, for example, database message interface , message memory manager , caching unit , or monitoring unit ) of database appliance  to invoke the component. In particular embodiments, to process a new connection established between database appliance  and a client  or a database server , the control thread instantiates a session object (such as, for example, a C++ object or a JAVA object) for the new connection. In particular embodiments, to process a database message received at database appliance  from a client  or a database server , the control thread similarly instantiates a session object for the database message. The control thread may concurrently manage multiple session objects. Message event manager  uses network interfaces that invoke callback methods on session objects, instead of network interfaces that block or otherwise wait for completion of network or other operations. In particular embodiments, network events such as data available, ready to send, new connection, and connection closed propagate through relevant session objects for database-protocol processing.","In contrast to particular embodiments, traditional database-protocol processing requires a control thread directing communication of one or more frames to hold, before resuming processing, until transmission and receipt of the frames are complete. Because of such requirement, processing multiple, concurrent database sessions according to a traditional database protocol requires use of multiple, concurrent control threads, which in turn requires mechanisms (such as, for example, semaphores or locks) for protecting shared data structures from corruption resulting from unsynchronized access. Putting into place and releasing such mechanisms to protect and access such data structures as needed increases clock-cycle and memory requirements and other resource utilization associated with processing multiple, concurrent database sessions. In particular embodiments, using a single nonblocking, event-driven control thread to process message events at database appliance  obviates such mechanisms for processing multiple, concurrent database sessions, which in turn reduces clock-cycle and memory requirements and other resource utilization associated with processing multiple, concurrent database sessions.","Message memory manager  includes a hardware, software, or embedded logic component or a combination of two or more such components that allocate memory in memory unit  for storing database messages and manage access to database messages in memory unit . In particular embodiments, when database message interface  receives a database message from a client  or a database server , database message interface  notifies message event manager  that database message interface  received the database message. Message event manager  then invokes message memory manager  to write the database message to memory unit . One or more frames (such as, for example, Ethernet frames) may include the database message. In particular embodiments, message memory manager  writes the frames of the database message to memory unit  without assembling the database message. As an example and not by way of limitation, when database message interface  receives a frame from a database client  or a database server , message memory manager  may write the frame to memory unit  without modifying the frame. Message memory manager  may write different portions of the frame to different, separately addressed memory locations in memory unit , which need not be contiguous with each other. In particular embodiments, message memory manager  also generates a buffer (an abstract data structure) including one or more pointers to one or more memory locations in memory unit  to which message memory manager  wrote the frame. To process contents of the frame, a first component of database appliance  may communicate the buffer\u2014instead of the frame itself\u2014to one or more second components of appliance . The first component need not reassemble the frame or copy the frame from one or more first, original memory locations of the frame in memory unit  to one or more second memory locations in memory unit  or elsewhere. When the first component communicates the buffer to the second components, the second components may then, using message memory manager , access the frame in memory unit  according to the buffer to process contents of the frame. Such \u201czero copy\u201d processing may reduce clock-cycle requirements and other resource utilization associated with processing the frame.","Caching unit  includes a hardware, software, or embedded logic component or a combination of two or more such components that cache query results from database servers  and use cached query results to respond to queries from clients , as described below. Monitoring unit  includes a hardware, software, or embedded logic component or a combination of two or more such components that collect and record statistics on communication between clients  and database servers , caching activity at database appliance , or both, as described below.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["40","16","40","44","46","48","50","52","54","56","58","60","62","40","40","40"]},"Cache  includes records of query results. Cache  may be volatile or nonvolatile. In particular embodiments, a record (or cache entry) in cache  includes a discriminator that uniquely identifies the record. The record also includes one or more buffers pointing to one or more memory locations in memory unit  that include one or more frames of one or more database messages including one or more query results responsive to a query. The record need not include the frames of the database messages or the query results themselves, and cache entry creation module  need not assemble or format the query results to create the record. In particular embodiments, the record also identifies a database instance and a table from which each of the query results originated. In particular embodiments, the record also indicates a date and time when the record was created and dates and times when the record was accessed. In particular embodiments, the record also identifies users who have accessed the record and indicates, for each of the users, a number of times the user has accessed the record and dates and times when the user accessed the record. In particular embodiments, cache  includes a map of records in cache  for fast lookup of such records. The map may include a red\/black search tree or other search tree including discriminators identifying records in cache . Lookup module  may use the map to look up cache entries, as described below.","A decoder  includes a hardware, software, or embedded logic component or a combination of two or more such components that decode and extract SQL statements from database messages. In particular embodiments, a decoder  resides on top of a TCP\/IP layer of a protocol stack, as described below. Decoders  each decode and extract SQL statements from particular database messages. As an example and not by way of limitation, caching unit  may include a first decoder , a second decoder , and a third decoder . First decoder  may decode and extract SQL statements from DRDA database messages, second decoder  may decode and extract SQL statements from TDS database messages, and third decoder  may decode and extract SQL statements from OracleNet database messages. Although particular decoders  decoding and extracting SQL statements from particular database messages are described, the present invention contemplates any suitable decoders  decoding and extracting SQL statements from any suitable database messages.","Decoders  are event driven and each include an interface (or function point) enabling message event manager  to invoke decoder . As an example and not by way of limitation, in response to database message interface  receiving a database message from a client  or a database server , message event manager  may communicate a call to decoder  invoking decoder  to decode and extract an SQL statement from the database message. The call may include a buffer pointing to the database message in memory unit . The call need not include the database message itself. Decoder  may access the database message according to the buffer and then decode the database message, extract an SQL statement from the database message, and communicate the SQL statement to normalization module  for normalization. In particular embodiments, decoders  include interfaces similar to each other, which may obviate message event manager  having multiple interfaces for invoking decoders . In such embodiments, message event manager  may use a single interface to invoke any one of decoders .","In particular embodiments, when database message interface  receives a database message, message event manager  selects a decoder  to decode the database message according to a port on which database message interface  received the database message. As an example and not by way of limitation, database appliance  may include a first port configured (manually or otherwise) to receive database messages intended for a DRDA database server , a second port configured to receive database messages intended for a TDS database server , and a third port configured to receive database messages intended for an OracleNet database server . When database message interface  receives a database message on the first port, message event manager  may invoke a DRDA decoder  to decode and extract an SQL statement from the database message. When database message interface  receives a database message on the second port, message event manager  may invoke a TDS decoder  to decode and extract an SQL statement from the database message. When database message interface  receives a database message on the third port, message event manager  may invoke an OracleNet decoder  to decode and extract an SQL statement from the database message.","In particular embodiments, when database message interface  receives a database message, message event manager  selects a decoder  to decode the database message according to contents of the database message. As an example and not by way of limitation, database message interface  may receive a database message from a client  or a database server . Message event manager  may read contents of the database message to determine whether the database message is a DRDA database message, a TDS database message, or an OracleNet database message. If message event manager  determines that the database message is a DRDA database message, message event manager  may invoke a DRDA decoder  to decode and extract an SQL statement from the database message. If message event manager  determines that the database message is a TDS database message, message event manager  may invoke a TDS decoder  to decode and extract an SQL statement from the database message. If message event manager  determines that the database message is an OracleNet database message, message event manager  may invoke an OracleNet decoder  to decode and extract an SQL statement from the database message.","Normalization module  includes a hardware, software, or embedded logic component or a combination of two or more such components that normalize SQL statements. Normalization of two SQL statements facilitates determination of equivalency between the two SQL statements. As an example and not by way of limitation, a decoder  may extract an SQL statement from a query and communicate the SQL statement to normalization module . Normalization module  may then normalize the SQL statement. Lookup module  may compare the normalized SQL statement with normalized query text identifying records in cache  and, if the normalized SQL statement is equivalent to normalized query text identifying a cache entry, determine that the cache entry includes one or more query results responsive to the query. In particular embodiments, to normalize an SQL statement, normalization module  capitalizes all letters in the SQL statement. In particular embodiments, to normalize an SQL statement, normalization module  reorders terms in the SQL according to a predetermined order. In particular embodiments, to normalize an SQL statement, normalization module  modifies one or more clauses in the SQL statement according to a predetermined clause equivalency. Although particular normalization of SQL statements is described, the present invention contemplates any suitable normalization of SQL statements.","Parser  includes a hardware, software, or embedded logic component or a combination of two or more such components that parse SQL statements. As an example and not by way of limitation, normalization module  may normalize an SQL statement and communicate the SQL statement to parser . Parser  may parse the SQL statement. In particular embodiments, to parse an SQL statement, parser  includes a left-to-right and rightmost derivation (LR) parser. In such embodiments, to parse an SQL statement, parser  may use predetermined state tables derived from a specified SQL grammar. Multiple state tables may be available to parser , and each of the state tables may support a particular dialect of SQL. Parser  may select a state table for parsing an SQL statement according to a database implementation (such as DRDA, TDS, or OracleNet) of an intended database instance. Although particular parsing of particular SQL statements is described, the present invention contemplates any suitable parsing of any suitable SQL statements.","Analysis module  includes a hardware, software, or embedded logic component or a combination of two or more such components that analyze SQL statements. Caching unit  may process an SQL statement according to one or more results of analysis of the SQL statement at analysis module . In particular embodiments, analysis module  analyzes an SQL statement to determine whether the SQL statement includes a query, a query result, or a write message. In particular embodiments, analysis module  analyzes an SQL statement to identify a database server , a database instance, a table in the database instance, a client , a user, or a combination of two or more of the preceding. As an example and not by way of limitation, parser  may communicate a parsed, normalized SQL statement including a query to analysis module . Analysis module  may analyze the SQL statement and, from the analysis, determine that the SQL statement includes a query. From the analysis, analysis module  may also identify an intended database server , an intended database instance, and an intended table in the database instance. From the analysis, analysis module  may also identify a user who generated and a client  that communicated the query. Because the SQL statement includes a query, analysis module  may communicate the SQL statement (and possibly one or more results of the analysis of the SQL statement) to lookup module  for lookup. If an administrator of database appliance  has disabled (or not enabled) database appliance  responding to queries according to cached query results with respect to intended database server , the intended database instance, the intended table in the database instance, the user who generated the query, or client  that communicated the query, analysis module  may withhold the SQL statement from Lookup module  so that database appliance  does not communicate a response to client  according to one or more cached query results.","As another example, parser  may communicate a parsed, normalized SQL statement including a query result to analysis module . Analysis module  may analyze the SQL statement and, from the analysis, determine that the SQL statement includes a query result. From the analysis, analysis module  may also identify an intended user and an intended client . From the analysis, analysis module  may also identify a database server  that communicated the query result and a database instance and a table in the database instance that included the query result. In particular embodiments, because the SQL statement includes a query result, analysis module  communicates to reassembly module  a buffer pointing to a database message in memory unit  including the query result. Reassembly module  may then cause database message interface  to communicate the database message including the query result from memory unit  to a client . In particular embodiments, because the SQL statement includes a query result, analysis module  communicates the SQL statement (and possibly one or more results of the analysis of the SQL statement) to cache entry creation module  for creation of a cache entry. If an administrator of database appliance  has disabled (or not enabled) database appliance  caching query results with respect to database server  that communicated the query result, the database instance that included the query result, the table in the database instance that included the query result, intended client , or the intended user, analysis module  may withhold the SQL statement from cache entry creation module  so that database appliance  does not cache the query result.","As yet another example, parser  may communicate a parsed, normalized SQL statement including a write message to analysis module . Analysis module  may analyze the SQL statement and, from the analysis, determine that the SQL statement includes a write message. From the analysis, analysis module  may also identify an intended database server , an intended database instance, and an intended table in the database instance. From the analysis, analysis module  may also identify a user who generated and a client  that communicated the write message. Because the SQL statement includes a write message, analysis module  may communicate the SQL statement (and possibly one or more results of the analysis of the SQL statement) to invalidation module  for invalidation of one or more cache entries.","Lookup module  includes a hardware, software, or embedded logic component or a combination of two or more such components that lookup cached query results. As an example and not by way of limitation, analysis module  may communicate a normalized, parsed SQL statement including a query to lookup module . Lookup module  may then use the normalized, parsed SQL statement to determine whether a record in cache  includes one or more query results responsive to the query. If a record includes one or more query results responsive to the query, lookup module  may communicate to reassembly module  a buffer pointing to one or more database messages in memory unit  that, according to the cache entry, include one or more query results responsive to the query. Reassembly module  may then cause database message interface  to communicate the database message from memory unit  to a client . If a record does not include a valid response to the query, lookup module  may communicate the query to cache entry creation module  for creation of a cache entry. Lookup module  may also communicate to reassembly module  a buffer pointing to a database message including the query. Reassembly module  may then cause database message interface  to communicate the database message from memory unit  to a database server . To look up cached query results, lookup module  may access a mapping (which may include a red\/black search tree or other tree data structure facilitating lookup) of discriminators identifying records in cache  and compare the discriminators with normalized, parsed SQL statements including queries.","In particular embodiments, if lookup module  receives a normalized, parsed SQL statement including a query and cache  does not include a record fully responsive to the query, but includes a record partially responsive to the query, lookup module  may communicate to reassembly module  a buffer pointing to one or more database messages in memory unit  that, according to the cache entry, include one or more query results partially responsive to the query. As an example and not by way of limitation, the query may request all data from all fields in rows one through 1000 in a table and the record in cache  may include query results including only data from fields in rows one through 100 in the table. In response to the buffer from lookup module , reassembly module  may cause database message interface  to communicate the database messages including the partially responsive query results from memory unit  to a client . Lookup module  may also communicate to reassembly module  a buffer pointing to a database message including the query. Reassembly module  may then cause database message interface  to communicate the database message including the query from memory unit  to a database server .","Caching unit  may subsequently receive one or more database messages communicated from database server  including one or more query results responsive to the query. As an example and not by way of limitation, caching unit  may subsequently receive database messages communicated from database server  including query results including all data from all fields in rows one through 1000 in the table, instead of just data from fields in rows one through 100 in the table. In response to caching unit  receiving database messages communicated from database server  including query results responsive to the query, caching unit  may cause database message interface  to communicate from memory unit  database messages communicated from database server  that include query results responsive to the query and not previously communicated from cache  to client . Caching unit  may also cause memory unit  to discard any database messages communicated from database server  that include query results responsive to the query and previously communicated from cache  to client . Caching unit  may also add one or more of the query results in the database messages communicated from database server  to the record partially responsive to the query.","Reassembly module  includes a hardware, software, or embedded logic component or a combination of two or more such components that direct communication of cached query results from database appliance  to clients  and direct communication of queries received at database appliance  to database servers . As an example and not by way of limitation, lookup module  may communicate to reassembly module  a buffer pointing to one or more database messages in memory unit  including one or more query results responsive to a query received at database appliance  from a client . Reassembly module  may direct database message interface  to access the database messages according to the buffer, and database message interface  may then access the database messages using DMA and communicate the database messages to client . Neither reassembly module  nor database message interface  need compound or format the database messages to communicate the database messages to client . As another example, lookup module  may communicate to reassembly module  a buffer pointing to a database message in memory unit  including a query to which no cache entries are responsive. Reassembly module  may direct database message interface  to access the database message according to the buffer, and database message interface  may then access the database message using DMA and communicate the database message to a database server . Neither reassembly module  nor database message interface  need compound or format the database message to communicate the database messages to database server .","Cache entry creation module  includes a hardware, software, or embedded logic component or a combination of two or more such components that create and maintain records of query results in cache . As described above, a record in cache  includes a discriminator that uniquely identifies the record and one or more buffers pointing to one or more memory locations in memory unit  that include one or more frames of one or more database messages including one or more query results responsive to a query. In particular embodiments, to create a record in cache , cache entry module  allocates memory in cache  for the record, generates a discriminator for the record, writes the discriminator and one or more buffers to the record, and adds a timestamp to the record indicating when cache entry creation module  created the record. As an example and not by way of limitation, lookup module  may communicate to cache entry creation module  a parsed, normalized SQL statement including a query. Cache entry creation module  may then allocate memory for a record of query results responsive to the query. Cache entry creation module  may then generate a discriminator uniquely identifying the record. In particular embodiments, the discriminator includes normalized text from the query, identifies a user who generated the query, and indicates one or more environment-variable settings influencing one or more query results in the record. Cache creation module  may hash the discriminator to facilitate fast lookup of the cache entry. Cache entry creation module  may then add the discriminator to a mapping (such as, for example, a red\/black search tree or other search tree) facilitating fast lookup of the cache entry. Cache entry creation module  may also add a timestamp to the record indicating when cache entry creation module  created the record. Later, analysis module  may communicate to cache entry creation module  a buffer pointing to a database message in memory unit  including a query result responsive to the query and one or more results (such as an intended user, an intended client , a database server  that communicated the query result, and a database instance and a table in the database instance from which the query result originated) of an analysis of a parsed, normalized SQL statement including the query result. Cache entry creation module  may then write the buffer and the results of the analysis of the SQL statement to the record.","In particular embodiments, to maintain the record in cache , cache entry creation module  adds to the record additional buffers pointing to additional database messages responsive to the query and records users who access the record, when each of the users accesses the record, and a number of times each user accesses the record.","Invalidation module  includes a hardware, software, or embedded logic component or a combination of two or more such components that invalidate entries in cache , delete entries in cache  to free up memory in cache , or both, according to particular needs. In particular embodiments, invalidation module  invalidates cache entries based on write messages. As an example and not by way of limitation, invalidation module  may receive from analysis module  a normalized, parsed SQL statement including a write message intended for a table in a database instance. Invalidation module  may also receive from analysis module  identification of the table in the database instance. Invalidation module  may then access cache  and identifies records in cache  including query results that originated from the table in the database instance. Invalidation module  may invalidate such records. In particular embodiments, to invalidate a cache entry, invalidation module  deletes the cache entry. In particular embodiments, to invalidate a cache entry, invalidation module  marks the cache entry to indicate that the cache entry is invalid, but does not delete the cache entry. In particular embodiments, invalidation module  invalidates cache entries based on aging. As an example and not by way of limitation, if a predetermined amount of time has lapsed since creation of a cache entry, invalidation module  may invalidate the cache entry based on the age of the cache entry. In particular embodiments, invalidation module  periodically or in response to input from an administrator of database appliance  scans cache  to identify entries in cache  for such invalidation. In particular embodiments, invalidation module  invalidates cache entries based on scheduling. As an example and not by way of limitation, invalidation module  may invalidate all or some entries in cache  according to a predetermined schedule (such as, for example, every day at a particular time or once a week on a particular day at a particular time). In particular embodiments, invalidation module  invalidates cache entries based on external triggers. As an example and not by way of limitation, invalidation module  may invalidate all or some entries in cache  in response to one or more external triggers (such as, for example, input from an administrator or occurrence of a predetermined event). Although particular invalidation of particular cache entries is described, the present invention contemplates any suitable invalidation of any suitable cache entries.","In particular embodiments, invalidation module  deletes cache entries in response to utilization of memory in cache  reaching a predetermined threshold, in response to utilization of memory in cache  preventing creation of new entries in cache , or both. In particular embodiments, if utilization of memory in cache  reaches a predetermined threshold or prevents creation of a new entry in cache , invalidation module  selects one or more entries in cache  for deletion based on recent usage of entries in cache . As an example and not by way of limitation, invalidation module  may select one or more least recently used entries in cache  for deletion. In particular embodiments, if utilization of memory in cache  reaches a predetermined threshold or prevents creation of a new entry in cache , invalidation module  selects one or more entries in cache  for deletion according to one or more cost-based algorithms taking into account observed network client response time and other network-derived factors. Although deletion of particular entries in cache  is described, the present invention contemplates deletion of any suitable entries in cache .","Cache statistics module  includes a hardware, software, or embedded logic component or a combination of two or more such components that collect statistics on caching activity at caching unit . In particular embodiments, cache statistics module  collects statistics on cache hits at database appliance . A cache hit is a cache entry being responsive to a query received at database appliance  from a client , which may or may not result in communication of a query result from cache  to client , as described above. As an example and not by way of limitation, cache statistics module  may track and record (1) a number of queries from a client  intended for a database server  and (2) a number of cache hits on the queries. Cache statistics module  may compare the two numbers with each other and, from the comparison, determine a percentage of cache hits on queries from client  intended for database server . Cache statistics module  may determine a percentage of cache hits on queries from each of multiple clients  intended for each of multiple database servers . Cache statistics module  may combine two or more such percentages to provide more comprehensive statistics on cache hits at database appliance . From historical statistics on cache hits at database appliance , cache statistics module  may generate a historical cache-hit rate for database appliance .","In particular embodiments, cache statistics module  collects statistics on cache entries. As an example and not by way of limitation, cache statistics module  may track and record a number of records in cache . As another example, cache statistics module  may track and record a result-set size in each of one or more records in cache . As yet another example, cache statistics module  may track and record one or more cost factors based on response time. As yet another example, cache statistics module  may, using timestamps, track and record a date and time of creation of each of one or more records in cache  and dates and times of access of each of the entries. In particular embodiments, cache statistics module  collects statistics on invalidation of entries in cache . As an example and not by way of limitation, cache statistics module  may track and record invalidated entries and, using timestamps, times and dates of invalidation of invalidated entries. Although particular statistics on caching activity at caching unit  are described, the present invention contemplates any suitable statistics on caching activity at caching unit . In particular embodiments, cache statistics module  communicates collected cache statistics to monitoring unit  for storage.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 5","b":["42","16","42","46","48","50","64","42","42","42","46","42","46","40","48","42","48","40","50","42","50","40"]},"Observation module  includes a hardware, software, or embedded logic component or a combination of two or more such components that record observations  on contents of database messages between clients  and database servers . As an example and not by way of limitation, observation module  may receive from parser  parsed, normalized SQL statements extracted from decoded database messages, access contents of the SQL statements, and record observations  on the contents of the SQL statements. As another example, observation module  may receive the decoded database messages themselves, access contents of the database messages outside the SQL statements, and record observations  on the contents of the database messages. Monitoring unit  may provide user access to observations  through a statistical, historical, tabular, graphical, or other interface or a combination of two or more such interfaces.","In particular embodiments, monitoring unit  communicates observations  to one or more computer systems (such as one or more report servers) that report observations  to users, according to particular needs. In particular embodiments, monitoring unit  communicates observations  to one or more computer systems that take action in response to observations , according to particular needs. As an example and not by way of limitation, monitoring unit  may communicate observations  to a computer system maintaining a web cache. The computer system may monitor observations  from monitoring unit  and, in response to particular observations  from monitoring unit , delete particular records in the web cache. As an example and not by way of limitation, an observation  from monitoring unit  may indicate to the computer system that a client  recently communicated a database message to a database server  modifying contents of one or more web pages. In response to observation , the computer system maintaining the web cache may delete from the web cache outdated versions of the web pages.","In particular embodiments, observations  on the contents of the SQL statements, the contents of the database messages outside the SQL statements, or both include one or more of the following: (1) information regarding subject database instances of the SQL statements; (2) information regarding vendors of database implementations of the subject database instances; (3) information regarding software and versions of the software in the database implementations; (4) information regarding network protocols and versions of the network protocols used to communicate the database messages; (5) information regarding protocol drivers at database servers , versions of the protocol drivers, and application programming interfaces (APIs) at database servers  between application layers and network layers used to communicate the database messages; (6) information regarding devices (including, for example, subprocesses and, if applicable, node clusters) hosting the subject database instances of the SQL statements; (7) information regarding hostnames, IP addresses, MAC addresses, and network ports of database servers ; (8) information regarding operating systems (OSs), versions of the OSs, and attributes of the OSs (such as, for example, patch levels) of devices hosting the subject database instances of the SQL statements; (9) information regarding protocol drivers at clients , versions of the protocol drivers, and APIs at clients  between application layers and network layers used to communicate the database messages; (10) information regarding devices (including, for example, subprocesses and, if applicable, node clusters) hosting clients ; (11) information regarding application frameworks at clients ; (12) information regarding hostnames, IP addresses, MAC addresses, and network ports of clients ; and (13) information regarding OSs, versions of the OSs, and attributes of the OSs (such as, for example, patch levels) of clients .","In particular embodiments, observations  on contents of SQL statements, contents of database messages outside the SQL statements, or both include information regarding discovered database system entities (such as for example, database servers , database processes, cluster nodes, database instances, namespaces, tables, columns, database users, database sessions, pending operations, hostnames IP addresses, and network ports) and information regarding times and dates of discovery of the database system entities; information regarding active sessions between an observed database instance and processes at clients  (such as, for example, information regarding names and addresses of client hosts, information regarding the observed database instance, information regarding a name and an address of a server host, information regarding a database user, information regarding start times and elapsed durations of the sessions); information regarding a number of queries communicated from each of clients  to each of one or more database instances (which may include information regarding a rate at which such queries are observed over time); or a combination of such information. Although particular observations  on particular contents of SQL statements and particular contents of database messages outside the SQL statements are described, the present invention contemplates any suitable observations  on any suitable contents of SQL or other statements and any suitable contents of database messages outside the SQL or other statements.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 6","b":["100","32","12","18","36","38","36","46","40","102","46","42","104","46","48","40","106","48","50","40","108","50","52"]},"At step , analysis module  analyzes the parsed, normalized SQL statement. If the parsed, normalized SQL statement includes a query, the method proceeds to step , where analysis module  communicates the parsed, normalized SQL statement and one or more results of analysis of the parsed, normalized SQL statement to lookup module  in caching unit . At step , lookup module  looks up a record in cache  including one or more query results responsive to the query. If a record in cache  includes one or more query results responsive to the query, the method proceeds to step , where lookup module  accesses the cache entry. At step , lookup module  communicates a buffer in the cache entry to reassembly module . At step , reassembly module  causes database message interface , according to the buffer, to communicate one or more frames including one or more database messages responsive to the query from memory unit  to an intended client , at which point the method ends.","Returning to step , if a record in cache  does not include one or more query results responsive to the query, the method proceeds to step , where lookup module  communicates the parsed, normalized SQL statement to cache entry creation module . At step , cache entry creation module  allocates memory in cache  for a record including query results responsive to the query and generates a discriminator for the record. At step , lookup module  communicates to reassembly module  a buffer pointing to the database message in memory unit  including the query. At step , reassembly module  causes database message interface , according to the buffer, to communicate the database message including the query from memory unit  to an intended database server , at which point the method ends.","Returning to step , if the parsed, normalized SQL statement does not include a query, the method proceeds to step . At step , if the parsed, normalized SQL statement includes a query result, the method proceeds to step . At step , analysis module  communicates a buffer pointing to the database message in memory unit  including the query result and one or more results of analysis of the parsed, normalized SQL statement to cache entry creation module . At step , cache entry creation module  writes the buffer and the analysis results to a record in cache . At step , cache entry creation module  communicates the buffer to reassembly module . At step , reassembly module  causes database message interface , according to the buffer, to communicate the database message including the query result from memory unit  to an intended client , at which point the method ends.","Returning to step , if the parsed, normalized SQL statement does not include a query result, the method proceeds to step . At step , if the parsed, normalized SQL statement includes a write message, the method proceeds to step . At step , analysis module  communicates one or more results of analysis of the parsed, normalized SQL statement (such as one or more results identifying a subject database instance and a subject table of the SQL statement) to invalidation module . At step , invalidation module  invalidates one or more records in cache  according to the results of analysis of the parsed, normalized SQL statement. At step , invalidation module  communicates to reassembly module  a buffer pointing to the database message in memory unit  including the write message. At step , reassembly module  causes database message interface , according to the buffer, to communicate the write message from memory unit  to an intended client , at which point the method ends.","Returning to step , if the parsed, normalized SQL statement does not include a write message, the method proceeds to step . At step , analysis module  communicates to reassembly module  a buffer pointing to the database message in memory unit . At step , reassembly module  causes database message interface  to communicate the database message from memory unit  to an intended client  or an intended database server . Although particular steps in the method illustrated in  are described and illustrated as occurring in a particular order, the present invention contemplates any suitable steps in the method illustrated in  occurring in any suitable order.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["200","32","12","18","36","38","36","46","42","202","46","42","204","46","48","42","206","48","50","42","208","50","64","210","64","66"]},"Although the present invention has been described with several embodiments, myriad changes, substitutions, variations, alterations, and modifications may be suggested to one skilled in the art, and it is intended that the invention encompass all such changes, substitutions, variations, alterations, and modifications as fall within the spirit and scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["To provide a more complete understanding of the present invention and the features and advantages thereof, reference is made to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
