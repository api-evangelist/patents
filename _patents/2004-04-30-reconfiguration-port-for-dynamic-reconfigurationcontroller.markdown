---
title: Reconfiguration port for dynamic reconfiguration-controller
abstract: Method and apparatus for a controller for dynamic configuration is described. The controller comprises a port interface, a read/write interface, and a plurality of flip-flops. The flip-flops, couple the port interface to the read/write interface. The port interface is configured to receive a plurality of signals, where portion of the plurality of signals are pipelined through the plurality of flip-flops responsive to a data clock signal of the plurality of signals. This facilitates reading and writing to storage elements at a rate which is at least approximately a frequency of the data clock signal while operating a device at approximately such frequency in which the controller is instantiated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07109750&OS=07109750&RS=07109750
owner: Xilinx, Inc.
number: 07109750
owner_city: San Jose
owner_country: US
publication_date: 20040430
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["One or more aspects of the invention relate generally to a reconfiguration port and more particularly, to a reconfiguration port controller for dynamic reconfiguration of an integrated circuit.","Programmable logic devices (\u201cPLDs\u201d) exist as a well-known type of integrated circuit (\u201cIC\u201d) that may be programmed by a user to perform specified logic functions. There are different types of programmable logic devices, such as programmable logic arrays (\u201cPLAs\u201d) and complex programmable logic devices (\u201cCPLDs\u201d). One type of programmable logic device, called a field programmable gate array (\u201cFPGA\u201d), is very popular because of a superior combination of capacity, flexibility, time-to-market, and cost.","An FPGA typically includes an array of configurable logic blocks (\u201cCLBs\u201d) and programmable input\/output blocks (\u201cIOBs\u201d). The CLBs and IOBs are interconnected by a programmable interconnect structure. The CLBs, IOBs, and interconnect structure are typically programmed by loading a stream of configuration data (\u201cbitstream\u201d) into internal configuration memory cells that define how the CLBs, IOBs, and interconnect structure are configured. CLBs and IOBs form the programmable part of an FPGA referred to as the \u201cFPGA fabric\u201d, which is subject to program control of the configuration memory cells.","CLBs and IOBs may be interconnected via widely distributed on-chip (\u201cglobal\u201d) routing resources or regionally specific on-chip (\u201clocal\u201d) routing resources of an FPGA, such as one or more traces. Moreover, both global and local resources may be used to distribute signals, such as clock signals. A global routing resource may be programmatically coupled to another global routing resource or a local routing resource, or a local routing resource may be programmatically coupled to another local routing resource using what is known as a programmable interconnect point (\u201cPIP\u201d). Conventionally, PIPs have been programmed or reprogrammed using an externally provided configuration bitstream to program programmable logic. Some other types of circuitry that may be included in an FPGA are transceivers, digital clock managers (\u201cDCMs\u201d), and memory controllers.","DCMs may be programmed for providing any of a variety of clock signals. For example, clock signals of different frequencies or different phase relationships may be provided from a reference clock input to a DCM. Furthermore, DCMs may be programmed for providing such a variety of clock signals. Conventionally, DCMs have been programmed or reprogrammed using an externally provided configuration bitstream to program programmable logic.","In addition to configuration memory cells, groups of system memory cells, sometimes referred to as block random access memories (\u201cBRAMs\u201d), may be included in an FPGA. Like configuration memory cells, such BRAMs conventionally are formed using a standard six transistor (\u201c6T\u201d) static random access memory (\u201cSRAM\u201d) memory cell. However, known forms of either or both static and dynamic random access memory (\u201cDRAM\u201d) memory cells, as well as magnetoresistive random access memory cells (\u201cMRAM\u201d) and flash memory cells, may be included in FPGAs. Conventionally configuration memory cells, as well as system memory cells, were programmed and reprogrammed using an externally provided configuration bitstream.","FPGAs include transceivers, which may be configured for \u201csingle-ended\u201d or \u201cdifferential\u201d signaling. A more recent trend is to provide high-speed transceivers, such as multi-gigabit transceivers (\u201cMGTs\u201d). Transceivers may be programmed to conform to any of a variety of communication standards by programming communication signaling parameters, such as duty cycle, frequency, and preemphasis, among other known communication signaling parameters. Conventionally, transceivers were programmed and reprogrammed using an externally provided configuration bitstream.","Accordingly, it should be appreciated that there are many circuits in a programmable logic device that may be programmed to provide user defined functionality. Furthermore, modern day programmable logic devices may include one or more other devices, such as one or more digital signal processors and microprocessors, among other known integrated circuit devices. For example, microprocessors may be embedded cores (\u201chard processors\u201d) or programmed into CLBs (\u201csoft processors\u201d). While instructions for such other devices may reside in embedded memory, such as one or more BRAMs, such other devices were subject to there surroundings, namely, configuration of functional blocks programmed or reprogrammed using an externally provided configuration bitstream.","As mentioned above, conventionally an FPGA is programmed by supplying an external bitstream to configure the FPGA. Classically, once an FPGA was configured, it was seldom reconfigured, including without limitation configuration of resources previously not programmed, during operation. This had at least in part to do with having a relatively slow internal access port (\u201cICAP\u201d) for reconfiguration. Notably, it should be appreciated that an ICAP conventionally may be used to configure or reconfigure an FPGA, as such an ICAP has access to all of the FPGA fabric for purposes of configuration or reconfiguration. However, an ICAP port runs at approximately one-third or less the frequency of which the FPGA may be run. Further impacting the ability to quickly achieve reconfiguration, an ICAP port has a minimum bit reconfiguration \u201cgranularity\u201d of one frame. Thus, for example, if only one bit in a 1296 bit frame had to be changed, all 1296 bits were processed to change the one bit.","Accordingly, it would be desirable and useful to provide an integrated circuit having internal dynamic reconfiguration capability that is substantially faster than that afforded by an ICAP.","An aspect of the invention is a controller in a programmable logic device, the controller comprising: a port interface; a read\/write interface; a plurality of flip-flops coupling the port interface to the read\/write interface. The port interface is configured to receive a plurality of signals, where a portion of the plurality of signals are pipelined through the plurality of flip-flops responsive to a data clock signal of the plurality of signals.","Another aspect of the invention is a method for dynamic configuration of function block logic, comprising: receiving a data clock signal, a data write signal, a data activation signal, a data address signal, and a data input signal; pipelining the data write signal, the data activation signal, the data address signal and the data input signal responsive to the data clock signal to provide pipelined versions of the data write signal, the data activation signal, the data address signal and the data input signal; and writing to storage elements responsive to the pipelined versions of the data write signal, the data activation signal, the data address signal and the data input signal at a rate which is at least approximately a frequency of the data clock signal.","Yet another aspect of the invention is a method for dynamic configuration of function block logic, comprising: receiving a data clock signal, a data activation signal and a data address signal; pipelining the data activation signal and the data address signal responsive to the data clock signal to provide pipelined versions of the data activation signal and the data address signal; and reading from storage elements responsive to the pipelined versions of the data activation signal and the data address signal at a rate which is at least approximately a frequency of the data clock signal.","In the following description, numerous specific details are set forth to provide a more thorough description of the specific embodiments of the invention. It should be apparent, however, to one skilled in the art, that the invention may be practiced without all the specific details given below. In other instances, well known features have not been described in detail so as not to obscure the invention.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 1A","b":["10","10"]},"FPGA  includes configurable logic blocks (\u201cCLBs\u201d) , programmable input\/output blocks (\u201cIOBs\u201d) , memory, such as block random access memory , delay lock loops (DLLs) and multiply\/divide\/de-skew clock circuits which collectively provide digital clock managers (DCMs) , and multi-gigabit transceivers (\u201cMGTs\u201d) . An external memory may be coupled to FPGA  to store and provide a configuration bitstream to configure FPGA , namely, to program one or more configuration memory cells to configure CLBs  and IOBs . Notably, IOBs , as well as MGTs , are disposed in a ring or ring-like architecture forming a perimeter of I\/Os around CLBs  of FPGA .","Additionally, FPGA  may include an Internal Configuration Access Port (\u201cICAP\u201d) , an embedded processor , and an embedded system monitor .","Though FPGA  is illustratively shown with a single embedded processor , FPGA  may include more than one processor . Additionally, known support circuitry, for interfacing with embedded processor  may be included in FPGA . Furthermore, rather than an embedded processor , processor  may be programmed into configurable logic such as a \u201csoft\u201d processor .","Although  illustratively shows a relatively small number of IOBs , CLBs  and BRAMs , for purposes of example, it should be understood that an FPGA  conventionally includes many more of these elements. Additionally, FPGA  includes other elements, such as a programmable interconnect structure and a configuration memory array, which are not illustratively shown in . Additional details regarding an example of an FPGA are described in \u201cVirtex-II\u2122 Pro, Platform FPGA Handbook\u201d, (Oct. 14, 2002) which includes \u201cVirtex-II Pro\u2122 Platform FPGA Documentation\u201d (Mar. 2002) \u201cAdvance Product Specification,\u201d \u201cRocket I\/O Transceiver User Guide\u201d, \u201cPPC 405 User Manual\u201d and \u201cPPC 405 Processor Block Manual\u201d available from Xilinx, Inc., 2100 Logic Drive, San Jose, Calif. 95124.","FPGA  in one embodiment may be configured and reconfigured (after initially being configured) in response to a configuration information (commands and data) bitstream, that is loaded into a configuration memory array of FPGA , either externally, from an external memory, e.g., a read-only memory (\u201cROM\u201d), via configuration interface  and configuration logic  or internally, via the ICAP  which is also connected to the configuration logic  (not shown). Configuration interface  can be, for example, a select map interface, a Joint Test Action Group (\u201cJTAG\u201d) interface, or a master serial interface.","The ICAP  is used for internal or self-reconfiguration of the FPGA . For example, after initial configuration of the FPGA by a configuration bit stream being sent by an external PROM (programmable ROM) to the configuration interface , the configured FPGA  is put in operational use. Next, part of configured FPGA  may be reconfigured under control of the embedded processor  using the ICAP . This self-reconfiguration is further discussed in a co-pending patent application, Ser. No. 10\/377,857, entitled \u201cReconfiguration of a Programmable Logic Device Using Internal Control\u201d, by Brandon J. Blodget, et. al, filed Feb. 28, 2003, which is incorporated by reference herein in its entirety.","FPGA  in another embodiment of the present invention can receive the configuration bitstream via the configuration interface  (external configuration or reconfiguration), ICAP  (internal reconfiguration), or in addition, by one or more dynamic reconfiguration ports (not shown). Each dynamic reconfiguration port (DRPORT) directly addresses its own group of configuration memory cells (via a controller) for internal reconfiguration without going through the configuration logic . This is different than using configuration interface  or ICAP , which must go though the configuration logic  to get to the configuration memory cells.","With renewed reference to , configuration memory may include columns of memory cells, where each column includes a plurality of bits. Configuration data is conventionally divided out into data frames. Configuration data may be loaded into the configuration memory array one frame at a time via configuration interface  or ICAP , or in sub-frame increments via a dynamic reconfiguration port.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIGS. 1B and 1C","FIG. 1B","FIG. 1C","FIG. 1B","FIG. 1D"],"b":["50","50","50","60","64"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIGS. 1B and 1C","b":"50"},"CLB tiles  are laid out in a two-dimensional array. In this example, each CLB tile  includes a portion of a programmable interconnect structure such that at least part of the programmable interconnect structure for FPGA  is formed by the various portions of the many CLBs when CLB tiles  are formed together for FPGA . Also illustrated are block random memory\/multiplier (BRAM\/Multiplier) tiles .","In order to provide input\/output circuitry for interfacing FPGA  to external logic, IOB tiles  are provided in, e.g., rows , A and B of FPGA . In this particular example, an input\/output interconnect tile (IOI tile) is used to couple an IOB tile to a CLB tile. Reference numeral  points to one such IOI tile. IOI tile  is disposed between an IOB tile  and a CLB tile .","Digital Signal Processors (\u201cDSPs\u201d) are placed in tile area . A generally central tile area  may be used for support circuitry. The support circuitry may include, for example, DCMs, CCMs, IOBs, configuration logic , encryption\/decryption logic, global clock driver circuitry, boundary scan circuitry and system monitor .","In this particular example, clock distribution circuitry including the backbone of the global clock tree glck  is located in area . The area  represents the bottom half of FPGA , which is shown in greater detail in .","Additional details regarding FPGA  may be found in a co-pending patent application Ser. No. 10\/683,944, entitled \u201cColumnar Architecture\u201d, by Steven P. Young, filed Oct. 10, 2003 which is incorporated by reference herein in its entirety.","With continuing reference to , columns of MGTs  may be disposed on opposite sides of FPGA . The columns of CLBs are shown by grayed areas . There are also columns of BRAM , IOBs , and DSP . There is shown an embedded processor . Center column  may include, for example, a system monitor (\u201cSYS. MON.\u201d), a digital clock manager (\u201cDCM\u201d), a clock companion module (\u201cCCM\u201d), and configuration logic (\u201cCONFIG.\u201d), and IOBs, among others.","The system monitor may include an analog-to-digital converter (ADC) to monitor parameters like temperature and voltage both on-chip and off-chip. The DCM may include circuits to perform clock de-skew, clock phase shifting, clock frequency synthesis, and other clock features. The CCM may include circuits for phase-matched binary clock division and internal clock jitter and skew measurement.","The configuration logic includes logic used to address and load configuration information into configuration memory cells, such as SRAM-based configuration memory cells, during external configuration of FPGA . The configuration logic may include configuration registers, boundary scan test circuitry, such as JTAG circuitry, and encryption and\/or decryption circuitry used to encrypt and\/or decrypt bitstreams of configuration data loaded into and read out of FPGA . In FPGAs, configuration memory is used to determine programmable interconnectivity and to specify any of a variety of conditions for functional blocks, among other configuration uses. In an FPGA, there are function blocks, such as MGTs, DCMs, and a System Monitor, among other blocks, where an ability to reprogram dynamically, namely, to change these conditions in these functional blocks while the FPGA is in operational use, would be desirable.","Conventionally, the time to initially configure the configuration memory of an FPGA and to partially reconfigure the configured FPGA is relatively long compared to the operational times of using, for example, a typical decoder formed by configuring CLBs. As an illustration from p. 387 of the Virtex-II Platform FPGA Handbook, Dec. 3, 2001 from Xilinx Inc. of San Jose, Calif. If the FPGA has 404 frames at 832 bits per a frame, then with a 50 MHz configuration clock, it takes about 84 ms to initially configure the FPGA. To reconfigure one frame (832 bits) it would take about 17 usec. If the FPGA has 404 frames at 1472 bits per a frame, then with a 50 MHz configuration clock, it takes about 1.5 ms to initially configure the FPGA. To reconfigure one frame (1472 bits) it would take about 29 usec. At p. 90 of the Virtex-II Platform FPGA Handbook the internal performance of a 16-bit address decoder is about 398 MHz. Thus in one embodiment of the present invention the internal operational clock speed for the operation of a simple design such as a decoder in a configured FPGA is about an order of magnitude faster than the configuration clock speed.","The DRPORT of an exemplary embodiment of the present invention allows reconfiguration of less than a frame of configuration memory without reconfiguring the entire frame and the reconfiguration of less than a frame is done at the internal operational clock speed rather than the configuration clock speed. Thus the data rate of reconfiguring of a group of configuration memory cells less than a frame at the internal operational clock speed of a simple configured circuit is at least one order of magnitude greater than the typical reconfiguration of a frame of configuration memory at the configuration clock speed.","\u201cDynamic reconfiguration\u201d as used herein means configuring or reconfiguring a set of one or more configuration memory cells at a data rate substantially greater than the traditional reconfiguration of a frame of configuration memory at the configuration clock speed. In one embodiment the operational data rate used by dynamic reconfiguration is at least an order of magnitude greater than the typical reconfiguration data rate.","To facilitate such dynamic reconfiguration, it would be desirable to have a separate configuration memory interface apart from the ICAP and convention configuration interface. What follows describes in several embodiments a dynamic reconfiguration port that may be used to dynamically reconfigure a set of configuration memory cells in an integrated circuit.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 2A","b":["100","100","100","100"]},"FPGA  includes an FPGA fabric , namely, a region where dedicated and programmable logic exists within an integrated circuit. FPGA fabric  includes a dynamic reconfiguration port (DRPORT), i.e., \u201creconfiguration\u201d port .","Reconfiguration port  has access to one or more regions of an integrated circuit having programmable cells. Programmable cells may include volatile memory cells, non-volatile memory cells, and like programmable cells for reconfiguration. For clarity, programmable cells are described below in terms of memory cells, or configuration memory cells, although it will be apparent that other forms of circuitry for storing state may be used.","Reconfiguration port  provides access to and from function block  and to and from configuration logic  via a function block . Configuration logic  is for controlling configuration of configurable blocks of FPGA  and frame data registers, among other circuitry as is known. A configuration bitstream feeds into configuration logic  that drives frame data registers and other known circuitry. An ICAP (not shown) connects to configuration logic . Configurable blocks of FPGA  include, but not are not limited to, one or more processors , CLBs , IOBs  and PIPs , as is known. Configurable blocks of FPGA  may be accessed through interconnect fabric of FPGA fabric . Reconfiguration port  connects to the interconnect fabric of FPGA fabric  to allow access to signals of FPGA . Thus, for example, a user may drive reconfiguration port  from a user instantiated circuit design implemented in one or more CLBs  externally through one or more IOBs , or through an embedded processor  or a soft processor, such as may be instantiated from CLBs . It should be appreciated that given sufficient space for implementing, a reconfiguration port for dynamic reconfiguration may be assigned to each function block. Thus, there are multiple function blocks  each having a controller  associated therewith for reconfiguration port  access, and there are multiple reconfiguration ports  corresponding to each controller . As is described below in additional detail, dynamically reconfigurable memory cells are dual ported. One of these memory ports is for dynamic reconfiguration via a reconfiguration port . Accordingly, each reconfiguration port  is associated with an address space, namely, configuration memory cells, for an associated function block . Though shown separately, an FPGA fabric  reconfiguration port  may be provided as an integral part of each function block . Accordingly, any function block  where dynamic reconfiguration may be advantageous may have an associated reconfiguration port. Though there are multiple function blocks  and associated reconfiguration ports, for purposes of clarity, a single reconfiguration port  associated with a single function block  is described, as it will be apparent that multiple reconfiguration ports  and function blocks  may be used.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 2B","b":["110","100","101","102","112","110"]},"Signals to and from reconfiguration port  and controller  are inverted or complemented as indicated by a \u201c_B\u201d to denote a \u201cbar\u201d. Complementing may be done when connecting through an interconnect block, such as controller . Port interface  signaling from reconfiguration port  to controller  includes data clock signal  (\u201cDCLK_B\u201d), data enable signal  (\u201cDEN_B\u201d), data write enable signal  (\u201cDWE_B\u201d), data address signals  (\u201cDADDR_B[m:]\u201d), and data input signals (\u201cDI_B[n:]\u201d), where \u201c[m:]\u201d indicates m to 0 address lines for m an integer greater than zero and \u201c[n:]\u201d indicates n to 0 data lines for n an integer greater than zero. Accordingly, addresses of length m+1 bits may be used, and data words of length n+1 bits may be used. Notably, addresses or data may be communicated serially or in parallel, though with respect to reconfiguration port  parallel address and data communication bussing is generally described herein. To facilitate user adoption, an interface with similar signal timing to a BRAM interface was created though implementation of reconfiguration port  is substantially different than a BRAM interface.","Port interface signaling from controller  to reconfiguration port  includes data output signals  (\u201cDO_B[n:]\u201d) and data ready signal  (\u201cDRDY_B\u201d). Data ready signal  is a handshaking signal provided to reconfiguration port  to indicate that controller  has completed or is about to complete the current operation and is ready for a next operation.","Reconfiguration port  is a read\/write (\u201cR\/W\u201d) port, where data ready signal  may be used for read and write wait states. Notably, in the embodiment shown, there is no read enable signal shown. This is because in this embodiment, data output signal  is maintained in an active state. In another embodiment, a read enable signal may be used.","Controller  may further be coupled to receive other signals, such as a global write enable signal and a global restore signal, among others. Such global signals may be used for added functionality, as described below in additional detail.","Controller  communicates with configuration logic  and function block logic  via R\/W interface . R\/W interface  communicates with configuration logic  and function block logic  in part to dynamically read\/write configuration\/reconfiguring data bits from\/to configuration memory cells, such as memory cells  of .","For this embodiment, configuration bits may be broken out into two general types, namely, bits that are reconfigurable via reconfiguration port  (\u201cdynamically reconfigurable configuration bits\u201d) and bits that are not reconfigurable via reconfiguration port  (\u201cnon-dynamically reconfigurable configuration bits\u201d), where the non-dynamically reconfigurable configuration bits are reconfigured via configuration logic  using, for example, the ICAP or select map interface.","Configuration bit interface  may handle both types of configuration bits  though split into two sections. One of those two sections may handle only dynamically reconfigurable (DR) configuration bits , and thus that section or those addressable bits would be accessible by controller  via R\/W interface . The other section of the two sections may handle only non-dynamically reconfigurable (NDR) bits , and thus would not have to be coupled to controller  via R\/W interface  for communication.","More particularly, R\/W interface  is coupled to memory cells , as described with reference to  where there is shown a high-level schematic diagram depicting controller  and configuration memory cells  of FPGA . R\/W interface  provides access to memory cells  of memory cells  for reading and writing dynamically reconfigurable configuration bits . Thus, memory cells  are broken out into at least two addressable spaces, namely, memory cells  for storing dynamically reconfigurable configuration bits  and memory cells  for storing non-dynamically reconfigurable configuration bits . Notably, this may be done by providing different address ranges for storing dynamically reconfigurable and non-dynamically reconfigurable configuration bits.","Notably, in  memory cells (MC)  are indicated as being part of FPGA fabric . Thus, a portion of configuration memory cells  have been set aside and modified for dynamic reconfiguration via reconfiguration port  and another potion of configuration memory cells  have been not been modified for the conventional non-dynamic reconfiguration via the configuration logic . However, it is not required that configuration memory be used for providing dynamically reconfigurable memory cells via reconfiguration port . Rather, memory cells  may be separate memory for a function block . Accordingly, memory may be dedicated memory of a function block or part of general purpose memory for an integrated circuit, such as BRAMS of an FPGA.","Thus, it should be appreciated that all of memory cells  may be configured or reconfigured though conventional non-dynamic means. However, with respect to use of reconfiguration port , only a portion of memory cells , namely, memory cells , are accessible via controller  for dynamic reconfiguration. As mentioned above, memory cells  may be any of a variety of known types of memory cells operable at relatively high frequencies, and in an embodiment is equal to or in excess of approximately 500 MHz. In one embodiment, the approximately 500 MHz, for example, is a frequency of operation with no wait states (i.e., either one read or one write per data clock cycle) for use of function block .","For clarity by way of example, memory cells  are described as having SRAM memory elements, though other known types of memory elements may be used. Memory cells  are dual ported, where one port is for conventional non-dynamic access for configuration data and address information, and the other port is for dynamic read\/write access under the control of controller . The term \u201cport\u201d as used herein includes one or more signal pins or nodes, and may refer to a particular signal pin or node.","Notably, controller  may be configured to access all memory elements of memory cells  or only a subset thereof which may depend on functionality of function block .","Returning to , it should be appreciated that with reconfiguration port , reconfigurable bits may be dynamically read from or written to function block  for dynamic reconfiguration. In other words, each memory cell used to store a reconfigurable bit may be written to or read from dynamically. This may be done at or proximal to the frequency of operation of FPGA . Furthermore, because controller  reads and writes at data word length, such as at a single data word length, and not a frame length as was conventionally done, granularity is provided for a dynamic read-modify-write configuration or reconfiguration or both, including without limitation partial configuration or reconfiguration or both, (collectively and singly referred to hereinafter as \u201creconfiguration\u201d). For example, a single memory cell may be changed within a data block by reading out only a single data word, modifying only the single memory cell of the data word read, and writing back the modified data word.","Notably, function block  has not been described in terms of a particular type of function, as any of a variety of functions may be used. Some examples of functions that may be used for function block  include without limitation a Digital Signal Processor (\u201cDSP\u201d), an MGT, a DCM, a CLB, an IOB, or a System Monitor. Furthermore, controller  may include additional functionality for one or more of such function blocks. Moreover, interconnect switch matrices and the like including one or more PIPs may be configured via a reconfiguration port .","For example, depending on function block logic , controller  may optionally include function enable(s) interface  and block status interface . Block status interface  may be a read-only port by controller , and function enable(s) interface  may be a write-only port by controller . Interfaces  and  may be in addition to R\/W interface .","Block state may be read from status signaling from function block logic, and a function may be activated by providing one or more function enables to function block logic . Block status signaling and function enable signaling may be accessed from reconfiguration port  via controller  by addressing.","For example, address space may be broken out into distinct groups for addressable memory and addressable signals. Responsive to receiving an address within an address space assigned to addressable memory, such as via data address signal , controller  accesses R\/W interface  to write to or read from a memory element of a memory cell, or respective memory elements of memory cells. Responsive to receiving an address within an address space assigned to a signals\/functions (including without limitation a block status request) controller  writes a function enable via interface  into the block or read status output. This disables reading\/writing from one or more memory cells, and causes status signaling to be read back via interface  or causes function enables to be written into registers or other blocks in function block . Notably, by increasing internal address space, functions, including without limitation test functions, may be initiated with controller  and status read out, including without limitation test results, using reconfiguration port  without the expense of dedicated function and read out ports.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 3A","FIG. 3A","FIG. 2B"],"b":["101","102","201","221"]},"On rising edge , data enable signal  at  and data write enable signal  at  are both active high causing both data address signal  and data input signal  to be sampled (e.g., \u201cbb\u201d and \u201cBB\u201d, respectively) at approximately the same time. Controller  of  decodes the sampled address from data address signal  and writes the sampled data from data input signal  to memory elements associated with the decoded address. Notably, there is a wait state  between rising edges  and  of data clock signal . At rising edge , data ready signal  is active high at  to indicate a next operation may begin. Data enable signal  may go active high again at  after data ready signal  goes active high, which may occur on the same clock cycle (as shown) or the next clock cycle of data clock signal . Notably, because writing to a memory element is signal driven, wait state  may take less time than a read wait state. In an embodiment, a write takes place within a clock cycle of data clock . In general, a write may take T clock cycles and a read may take P clock cycles, where T is less than P. For example, a T may be equal to one and P may be equal to two. In an embodiment, a design instantiated in programmable fabric, such as with one or more CLBs, may communicate with controller  ignoring data ready signal  for write operations and waiting for data ready signal  for read operations. Such a design may be instantiated any of a variety of ways, including, but not limited to, user instantiation and FPGA instantiation. When instantiated by FPGA , such instantiation may be done by an internal processor executing instructions. For processor instantiation, data ready signal  may or may not be used as a handshaking signal.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 3B","b":["101","102","211","221"]},"On rising edge , data enable signal  at  is active high causing data address signal  to be sampled (e.g., \u201caa\u201d). Controller  of  decodes the sampled address from data address signal  and reads configuration data from memory elements associated with the decoded address. Notably, there is a wait state  between rising edges  and  of data clock signal . At rising edge , data ready signal  is active high at  to indicate a next operation may begin, and for this timing, to indicate that data output signal  may be sampled responsive to data enable signal . Data enable signal  may go active high again at  after data ready signal  goes active high, which may occur on the same clock cycle (as shown) or the next clock cycle of data clock signal  to cause data output signal  to be sampled (e.g., \u201cAA\u201d). Notably, data ready signal  may be pipelined with data enable signal , as described below in additional detail.","With continuing reference to  and renewed reference to , in an embodiment memory cells  may be substantially smaller in number than memory cells . With fewer memory cells to fabricate for dual ported access, transistors of memory elements of memory cells  may be sized larger than transistors of memory elements of memory cells . Larger transistors facilitate faster reads of memory elements and thus reduce wait state .",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 4A","FIG. 2C","FIG. 2A"],"b":["300","131","300","300","300","112"]},"Dual ported memory cell  includes storage element  for storage of a dynamically reconfigurable configuration bit. Notably, storage element  may be a memory storage element, a volatile or non-volatile storage elementor any other element capable of storing a bit state. For purposes of clarity, a memory storage element is described herein.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 4B","FIG. 4B","FIG. 4A"],"b":["301","301","300"]},"Data signal (\u201cD\u201d)  is connected to a source terminal of pass transistor . An inverted version of data signal , namely, data signal (\u201cD_B\u201d) , is connected to a source terminal of pass transistor . Drain terminals of transistors  and  are respectively conventionally coupled to a cross-coupled latch of a conventional SRAM memory element. An address signal (\u201cA\u201d)  is applied to gates of pass transistors  and  for selectively coupling data signal  to an input of an inverter formed by p-type transistor  and n-type transistor , and for selectively coupling data signal  to an inverter formed by p-type transistor  and n-type transistor . These inverters are cross-coupled to form a latch. Sources of transistors  and  are coupled to a supply voltage, such as VDD , and sources of transistors  and  are coupled to a ground potential, such as ground . Output from the inverter formed of transistors  and  is output signal (\u201cQ\u201d) . Output from the inverter formed of transistors  and  is output signal (\u201cQ_B\u201d) .","It should be understood that ports for data signals  and  and output signals  and  are bi-directional, namely, they are input\/output ports. Furthermore, it should be understood that pass transistors  and  provide one port of dual ported memory cell , and the other port is provided via pass transistors  and . As memory element  is conventional, further description is omitted for purposes of clarity. R\/W interface  of  may be coupled to the other port of dual port memory cell , namely, reconfiguration memory cell port .","For access via reconfiguration memory cell port  for a write operation, a write address signal (\u201cW_A\u201d)  is provided to each gate of pass transistors  and . A source terminal of pass transistor  sources an inverted write port signal (\u201cW_P_B\u201d) , and a source terminal of pass transistor  sources a write port signal (\u201cW_P\u201d) . Drain terminals of pass transistors  and  are respectively coupled to signal paths of output signals  and  for input to memory element .","Responsive to write address signal  being at a high logic level, transistor  couples inverted write port signal  to inverted output signal  as an input to memory element , and transistor  couples write port signal  to inverted output signal  as an input to memory element  for writing any data on write port signals  and  to memory element . Thus, responsive to write address signal  being asserted, write port signals ,  cause a dynamically reconfigurable configuration bit to be written to memory element .","During a read operation via reconfiguration memory cell port , write address signal  is at a low logic level. A state stored in a latch of memory cell  is output via output signal paths for output signal , . By connecting to one of these paths, data may be read from memory element .","Data read from memory element  for one of the ports is sourced from output signal  and for reconfiguration memory cell port  is sourced from output signal . Output from output signal  is provided as an input to inverter , and output from inverter  is provided as an input to select transistors  and . Output from output signal  may optionally be provided as an input to inverter , where output from inverter  is additional output signal, namely, output signal (\u201cQ\u201d) .","Because memory element  is continuously read, except during a write operation, select circuitry, such as with n-type transistor  and p-type transistor  coupled in parallel, may be used to controllably select when data is to be readout as read port signal (\u201cR_P\u201d) . Notably, other select circuits may be used, such as a single pass transistor coupled in series with inverter  to provide read port signal (\u201cR_P\u201d) , among other known types of select circuits.","Transistors  and  are sourced with the output from inverter , and transistors  and  have their drains commonly connected to a read port node . Transistor  is gated with read address signal (\u201cR_A\u201d) , and transistor  is gated with an inverted version of read address signal , namely, inverted read address signal (\u201cR_A_B\u201d) . Responsive to read address signal  being at a high logic level and read address signal  being at a low logic level, both of transistors  and  conduct output of inverter  to read port node  to provide read port signal . Responsive to read address signal  being at a low logic level and read address signal  being at a high logic level, both of transistors  and  do not conduct output of inverter  to read port node .","Notably, read port signal  may be provided to a multiplexer, and write address  and read address  may be obtained from a decoder.","Moreover, it may be desirable to do a chip-wide check of memory cells used for non-dynamically reconfigurable bits for an inadvertent change of state, such as may be caused by a Single Event Upset (\u201cSEU\u201d) due to subatomic particles. However, memory cells used for dynamically reconfigurable configuration bits may be masked from such an SEU check, as dynamically reconfigurable configuration bits may frequently be intentionally changed. However, a user may desire to opt out of dynamic reconfiguration, in which event it may be desirable to be able to selectively enable and disable masking for SEU checking of memory cells allocated for dynamic reconfiguration. Furthermore, within a frame, a user may desire to frequently change only a fraction of the bits of the frame, in which event it may be desirable to be able to selectively enable masking out SEU checking for those bits to be frequently changed in blocks of memory cells, while allowing SEU checking for the remainder of the bits of in the frame. Masking of dynamically reconfigurable configuration bits is described below in additional detail.","Though write and read ports of memory cell  were described in terms of storing a dynamically reconfigurable configuration bit, as mentioned above write-only and read-only ports may be provided for function enable(s) and block status, respectively. Thus, a portion of addressable memory cells  may be reserved as dynamically reconfigurable memory cells, and another portion of addressable memory cells  may be reserved to provide write-only and read-only ports by connecting write and read ports of such memory cells , not to memory elements , but to status registers.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 5A","b":"400"},"Memory cell frame architecture  includes upper frame configuration bit section  and lower frame configuration bit section . Disposed between upper and lower frame sections  and  is a block of memory cells  for routing global signals with respect to frame , which may for example be used for masking, as described in additional detail in a co-pending patent application entitled \u201cDATA MONITORING FOR SINGLE EVENT UPSET IN A PROGRAMMABLE LOGIC DEVICE\u201d by Martin L. Voogel, et al., filed Mar. 22, 2004, which is incorporated by reference herein in its entirety.","Upper and lower frame sections  and  each include N blocks  of configuration memory cells, such as dual ported memory cells  of , for N a positive integer. Notably, multiple blocks  may be connected together with interconnect tiles, such as configuration bit interface  of . For example, four blocks of memory cells  of twenty memory cells each may be connected together to provide a pitch of 80 memory cells for each CLB.",{"@attributes":{"id":"p-0109","num":"0108"},"figref":["FIG. 5B","FIG. 5A","FIG. 5A"],"b":["403","400","404"]},"For a block  having 20 memory cells, 16 memory cells  may be used for storing dynamically reconfigurable configuration bits. To provide address separation or granularity, memory cells - and - have their address line electrically open (\u201cbroken\u201d) for address signal  and are partially unconnected or disconnected from memory cells . Memory cell  may be used to store a masking bit, and memory cell  may be left unused. Masking circuitry for a masking bit is described in additional detail in above-mentioned co-pending patent application entitled \u201cDATA MONITORING FOR SINGLE EVENT UPSET IN A PROGRAMMABLE LOGIC DEVICE\u201d by Martin L. Voogel, et al., which was incorporated by reference herein in its entirety. A masking bit may be used herein to prevent SEU checking of one or more memory cells in a block that stores dynamically reconfigurable configuration bit information. In the above-incorporated reference, 12 memory cells of 16 memory cells of block  are reserved to provide a checksum or like check for SEU checking. Thus, the remaining 4 memory cells may be used for another purpose like the remainder of block .","It should be understood that memory cells of frame  are configuration memory cells for configuring logic, a portion of which may be reserved for dynamically reconfigurable configuration bits for interaction with function block logic  of . However, this was done merely to reduce adding circuitry to FPGA . Alternatively, for an integrated circuit , including without limitation an FPGA, a portion of any embedded memory, for example a main memory cell array, may be used with shadow registers to copy memory cell values for dynamically reconfigurable configuration bits.","Masking bits are applied locally to a group of memory cells, such as memory cells  of block , but may depend in part upon application of the block. Accordingly, for example, masking may be done with a 16-bit granularity. Notably, masking may be at a higher level (e.g., at a frame level) instead of locally at a block level, or done at a level between a block level and a frame level depending on application.","Because memory cells, such as memory cells  of , are written to and read from in blocks of M+1 memory cells, for M+1 a positive integer, memory cells may be grouped according to functionality. In other words, sets of memory cells may be grouped based on similar functionality for function logic block  of , as these memory cells within the same block  have the same write address signal  and read address signal . Dynamically reconfigurable bits are accessed in blocks via R\/W interface . Conventional configuration bit addressing, though done on a frame basis, uses address signal  and data signals  and  of  for ports.","Again though configuration memory cells have been described in terms of an FPGA, it should be appreciated that other types of integrated circuits may be used as previously mentioned, and that cells, other than memory cells, may be used as previously mentioned and such cells may be connected to signals instead of memory elements. Moreover, though a block of 16 memory cells was described for storing dynamically reconfigurable configuration bits, it should be understood that fewer or more than 16 bits may be address separated. For example, as few as one bit may be address separated, or as many as all bits in a frame may be combined. However, with respect to providing a fine granularity for accessing one or more dynamically reconfigurable configuration bits, it should be appreciated that reconfiguration is limited to the isolated bit or bits, and not adjacent bits. With such granularity, such isolated bit or bits need not be reset during reconfiguration, though they may be reset. Moreover, with such granularity, one or only a relatively small number of bits as compared to an entire frame of bits may be changed during dynamic reconfiguration, which facilitates changing functionality while a function block is still operational. In other words, memory cells in an FPGA may be coded into software attributes for users using FPGA manufacturer provided software, for example which have heretofore generally been thought of as hard coded, approach the flexibility of off-chip input signals.","Referring to , there is shown a block diagram of memory cells  connected to a coordinate-to-address converter . Notably, memory cells , though not used, and memory cells - and -, may be coupled to receive data signals and their complements, in addition to address signal , for bits, such as bit numbers ,  and , respectively, though not shown for purposes of clarity as those cells are not used or accessible, as previously described.","Memory cells -, - are coupled to receive address signal  as a address signal input. Address local signal  from masking circuit  is provided to memory cells -, - and memory cells  as an address signal. Address signal  is provided to memory cells  and  as an address signal.","Memory cell  is coupled to receive data signal  and its complement data signal  for bit  (\u201cD<>\u201d and \u201cD_B<>\u201d) of block . Memory cells  are coupled to receive, in parallel though not specifically shown with separate lines for purposes of clarity, data signals  (\u201cD<:>\u201d) and their respective complemented data signals  (\u201cD_B<:>\u201d). Data signals  and  are related to data signal  of , and data signals  and  are related to data signal  of .","Output signals (\u201cQ<:>\u201d)  and their respective complemented output signals (\u201cQ_B<:>\u201d)  are respectively related to output signals  and  of . Optional output signals (\u201cQ<:>\u201d)  are related to optional output signal  of . Write address signals  are related to write address signal  of . Write port signals (\u201cW_P<:>\u201d)  and their respective complemented write port signals (\u201cW_P_B<:>\u201d)  are respectively related to write port signals  and  of . Read address signal (\u201cR_A\u201d)  and complemented read address signal (\u201cR_A_B\u201d)  are respectively related to read address signal  and read address signal  of . Read port signal (\u201cR_P<:>\u201d)  is related to read port signal  of .","Write address signal  and read address signals ,  are provided from coordinate-to-address converter  to memory cells . Coordinate-to-address converter  may be considered part of or separate from controller  of . Coordinate-to-address converter  decodes address signal  from data address signal  of . Coordinate signals, namely X<> signal  and Y<> signal , are a form of a data address signal for obtaining (x,y) coordinates of a memory array and are provided to coordinate-to-address converter . Notably, a zero for coordinate signals ,  is shown for addressing a memory cell of memory cells . However, it should be appreciated that for the above example of a 1296 bit frame with 16-bit blocks, other bit values for coordinate signals ,  will be present. For example coordinate signals  and  may be more generally expressed as X<:> and Y<:>. Furthermore, it should be understood that other numerical addressing schemes may be used. Additionally, it should be understood that with one unique Y address in a columnar architecture, X address are automatically rotated in a vertical address stack.","Write enable signal (\u201cWE\u201d)  is provided to coordinate-to-address converter . Responsive to write enable signal  being at a logic low level, coordinate signals ,  are for read addressing. Responsive to write enable signal  being at a logic high level, coordinate signals ,  are for write addressing.","Masking circuit  receives address signal , complemented output signal  and a complemented global masking signal (\u201cGMASK_B\u201d) , and responsive to such inputs provides address location signal .",{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIG. 7","FIG. 10","FIG. 10"],"b":["510","510","523","601","521","522","521","522","510","510","510","900","900"]},{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 10","FIG. 3A","FIG. 6","FIG. 3A","FIG. 6"],"b":["900","910","224","901","901","910","921","921","0","521","911","224","902","902","911","922","922","0","522"]},"Notably, data address signals  and  may form data address signal  of . For example, if data address signal  of  has a bit width of 6, then data address signal  may be bits  to  and data address signal  may be bits  to . Notably, other bit widths may be used, though for purposes of clarity by way of example, a bit width of 2^3 (8) bits for x and y coordinates is assumed where x and y are decoded from 3 bits each of data address signal . A seventh bit of data address signal divides address space between memory cells and status\/function enables.","Returning to , output of NAND gate  is connected to the input of inverter . Thus, responsive to write enable signal  being logic high, write address signal  obtained from the output of inverter  is logic high, and responsive to write enable signal  being logic low, write address signal  is logic low.","Coordinate signals ,  are provided to NAND gate . The output of NAND gate  is coupled to inverter  via inverter . Inverters  and  are connected in series. The output of inverter  is tapped at node  to obtain read address signal , and the output of inverter  provides inverted read address signal .",{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 8","b":["700","501","505","701","701","702","704","705","302","703","702","705","703","703","702","707","704","704","706","700","502","707"]},{"@attributes":{"id":"p-0128","num":"0127"},"figref":["FIG. 9","FIG. 8"],"b":["700","505","302","501","502","501","302","505","502","505","501","302","502","502"]},{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 11A","b":["102","102","1001","1000"]},"In this exemplary embodiment, data ready signal (\u201cDRDY\u201d)  is generated from complemented data clock signal  and data enable data ready (\u201cDEN_DRDY\u201d) signal  provided to data ready signal generator . Data ready signal generator  includes flip-flops  and  connected in series and inverter . Complemented data clock signal  is provided to an input of inverter  to provide a data clock signal  for clocking flip-flops  and .","Data enable data ready signal  is provided to a data input port of flip-flop , which in response to data enable data ready signal  and a data clock signal  input, provides an output to a data input of flip-flop . Flip-flop  in response to receiving output data from flip-flop  and a data clock signal  input provides an output which is data ready signal . Notably, having two flip-flops in series, namely, two stages of flip-flops, ensures that data ready signal  will not be earlier than at least two clock cycles of data clock signal . Data enable data ready signal , may be a pipelined signal, as described below in additional detail, thereby adding at least one other clock cycle prior to indicating that controller  is ready for a next operation. In other words, data ready signal  may be produced from at least three stages of flip-flops, which ensures at least three clock cycles of data clock signal  transpire prior to indicating controller  is ready for a next operation. However, as illustratively shown in , a data enable pulse for a next operation may or may not happen in the same clock cycle as data ready is received out.","Notably, signaling for controller  may be pipelined at or about the operating frequency of integrated circuit . During a read operation, output is driven by reading a memory element, which may take some time to be read out. With respect to write operations, they may be done within a single clock cycle as memory elements are relatively easy to flip. Furthermore, because a read-modify-write sequence to one or more memory cells may be used, a single memory cell may be changed at a time by reading  memory cells and writing the same value back into all but one of the memory cells.","Because a relatively small portion of memory cells may be used for dynamically reconfigurable configuration bits, FPGA  may be dynamically reconfigured using such portion of memory cells at speeds proximal or equal to frequency of operation of FPGA . Additionally, providing a data ready signal allows for faster data clock speeds interfacing to different blocks each of which return a data ready signal subject to their respective operating parameters.","Controller logic block  receives or outputs complemented data address signal , complemented data enable signal , complemented data output signal , complemented data input signal , complemented data write enable signal , complemented data ready signal , complemented data clock signal , write enable signal , address signal , data ready signal , write port signal , complemented write port signal , and read port signal , all of which have previously been described. Additionally, controller logic block  receives complemented configuration reset signal (\u201cCFG_RESET_B\u201d) , complemented global write enable signal (\u201cGWE_B\u201d)  and complemented global restore signal (\u201cGRESTORE_B\u201d) . In addition to use for controller logic block , these three global signals ,  and  act as a chip-wide read or write enable.","Global write enable signal  may be invoked to disable dynamic writing to all memory elements of FPGA  to allow for a conventional configuration of FPGA , whether externally though a configuration bit interface or internally through an ICAP. As mentioned above, memory elements may be coupled to registers, such as flip-flops, to store bit values. To write such stored bit values back to such registers, global restore signal  may be invoked. Global restore signal  may be provided to flip-flops  and  as a reset signal input. Configuration reset signal  may be used to reset registers or flip-flops when the entire FPGA is being reset.","Controller logic block  outputs data write enable signal  and data enable signal . Data write enable signal  and data enable signal  may be pipelined. Furthermore, address or data address signal  and data enable ready signal  may be pipelined.","Notably, different function logic blocks may use different means for obtaining a pipelined data ready signal.  is a block\/schematic diagram depicting an exemplary alternate embodiment of controller . In this embodiment, NOR gate  and inverter  have been added.","Inputs to NOR gate  are output of flip-flop  and function block logic data ready signals (\u201cFBL-DRDY\u201d) A and B. Signal A is a first (\u201c<0>\u201d) bit and signal B is a second (\u201c<1>\u201d) bit of function block logic data ready signals. Output from NOR gate  is provided to inverter , and the output of inverter  is data ready signal . Thus, function block logic control signals, such as signals A and B, may be used to provide data ready signal .",{"@attributes":{"id":"p-0139","num":"0138"},"figref":["FIGS. 12A through 12F","FIG. 11A","FIG. 12A"],"b":["102","1013","1012","1111","1111","1101"]},"With reference to , complemented data enable signal  and complemented global write enable signal  are input to NOR gate . Output of NOR gate  is data enable signal .","With simultaneous reference to , flip-flops , , , and  are in a single delay stage, namely, they are all clocked off of data clock signal . Thus, flip-flops , , , and  collectively form a pipeline, and outputs of flip-flops , , , and  are pipelined. Each of flip-flops , , , and  is reset with reset signal . Each of flip-flops , , and  has a clock enable input coupled for receiving data enable signal . Notably, because the data input to flip-flop  is data enable signal , a clock enable input need not, though may be, included with flip-flop  for receiving data enable signal . Notably, flip-flops  and  are used to implement registers. Moreover, though D-type flip-flops are illustratively shown, other known types of flip-flops may be used.","With reference to , complemented data input signal  is input to inverter , and the output of inverter  is a data input to flip-flop . The output of flip-flop  is provided as an input to inverter . The output from inverter  is tapped as complemented write port signal  and is input to inverter . The output of inverter  is write port signal . Thus, write port signals  and  in combination provide a differential write port.","With reference to , complemented data address signal  is an input to inverter . The output from inverter  is provided as a data input to flip-flop . Output of flip-flop  is address signal . Notably, address signal  input to column decoder  of  may be similarly obtained by providing an inverted data address signal, a data enable signal, a data clock signal and a reset signal to a register, such as a flip-flop configured like flip-flop .","With reference to , complemented data write enable signal  is provided as an input to inverter . The output from inverter  is provided as a data input to flip-flop . The output of flip-flop  is data write enable signal . As mentioned above, the data input to flip-flop  is data enable signal . The output of flip-flop  is data enable signal .","If a status signal output, rather than a read memory cell output is to be obtained, memory enable is disabled. This may be done by toggling a data enable data ready signal  responsive to whether either a status signal or a read memory state is to be output. Data enable signal  is provided as an input to NAND gate . Another input to NAND gate  is an address bit to indicate whether either status or memory state is to be output. Output of NAND gate  is provided as an input to inverter . The output of inverter  is data enable data ready signal .","For purposes of clarity by way of example and not limitation, a seventh bit of address signal  (recall it was assumed that address signal was seven bits <:>) may be used, namely, pipelined address signal (\u201cADDRESS<>\u201d) -, as an input to NAND gate . Of course, other addressing schemes may be used to toggle between status and memory states.","Assume that if a bit value of address signal - is a logic zero, that a status signal is to be read by controller  of . Thus, as long as memory state is to be read, address signal - will be a logic one. Accordingly, output of NAND gate  will be a logic one responsive to data enable signal  indicating that memory is to be accessed, namely, a logic one, and address signal - is held at a logic one. Thus, output of inverter  will be a logic zero indicating that data to be read from memory is enabled. If, however, address signal - is a logic zero, output from NAND gate  will be a logic one and output from inverter  will be a logic zero indicating that accessing state from memory is disabled.","Inputs to NAND gate  are pipelined data write enable signal , pipelined address signal -, pipelined data enable signal , and complemented data clock signal . The output of NAND gate  is provided as an input to inverter . The output of inverter  is write enable signal .","All inputs to NAND gate  are pipelined, except for complemented data clock signal , and thus they will be approximately synchronous with one another. Moreover, as flip-flops , , and  are clocked off of data clock signal , complemented data clock signal  will be approximately synchronous with pipelined data write enable signal , pipelined address signal -, and pipelined data enable signal .","Accordingly, when data write enable signal , address signal -, and data enable signal  are all logic one, output of NAND gate will toggle with complemented data clock signal  though it will be the inverse value. For example, if data write enable signal , address signal -, and data enable signal  are all logic one and complemented data clock signal is logic one, output of NAND gate  will be a logic zero. For example, if data write enable signal , address signal -, and data enable signal  are all logic one and complemented data clock signal is logic zero, output of NAND gate  will be a logic one. Thus, if data write enable signal , address signal -, and data enable signal  are all logic one, by obtaining write enable signal  from the output of inverter , write enable signal will be a logic one when complemented data clock signal  is a logic one. Moreover, if data write enable signal , address signal -, and data enable signal  are all logic one, by obtaining write enable signal  from the output of inverter , write enable signal will be a logic zero when complemented data clock signal  is a logic zero.","If any of data write enable signal , address signal -, and data enable signal  are a logic zero, output of NAND gate  will be a logic one. Thus, output of inverter  will be a logic zero indicating that writing is not enabled, as write enable signal  will be a logic zero.","Accordingly, it should be appreciated that by using clocked latches, such as flip-flops, for pipelining to obtain write port signals  and , data write enable signal , address signal , and data enable signal , and thus obtain write enable signal  as described above, write access of memory may be done at the same frequency of operation of the integrated circuit in which the memory is disposed.","With reference to , read port signal  is provided as an input to inverter , and the output of inverter  is provided as an input to multiplexer  and an input to inverter . The output of inverter  is provided as a feedback input to inverter  to form a relatively weak latch to prevent the read port signal  node from floating when not driven. Status port signal (\u201cS_P<:>\u201d)  is provided to an input of inverter , and the output of inverter  is provided as an input to multiplexer . Data output signal  is selected as either data read from memory cells, namely, sourced from read port signal , or status state obtained, namely, sourced from status port signal . This selection is done with an address bit, namely address bit signal (\u201cADDRESS<>\u201d) - which is input as a control signal to multiplexer . To ensure this operation is done properly, optionally address signal - may be input to inverter , and the output of inverter  may be provided as a control signal input to multiplexer  in addition to address signal -.",{"@attributes":{"id":"p-0154","num":"0153"},"figref":"FIG. 13","b":"523"},"Prior to transfer over to the pipeline, data enable signal  and data write enable signal  may be logic one state, and data address valid signal (\u201cDADDR<>\u201d) - is valid. Signals ,  and - may be clocked by an external clock signal (not shown) which may be the source of data clock signal .","Responsive to rising edge , data enable pipeline signal  and data write enable pipeline signal  transition at  from a don't care condition to a logic one state. Responsive to rising edge , data address pipeline signal - transitions at  from a don't care condition to a valid address output. Accordingly, responsive to transfer to pipelining, data enable signal  and data write enable signal  transition at  to a don't care condition, and data address signal - transitions at  to a don't care condition. Thus, data of data address signal - is now pipeline data of data address signal -.","Write enable signal  goes from an off logic low state to an on logic high state responsive to falling edge  of data clock signal . In other words, rising edge  of write enable signal  is responsive to falling edge  of data clock signal . Write enable signal  is held in a logic high state until a next rising edge  of data clock signal . In other words, falling edge  of write enable signal  is responsive to rising edge  of data clock signal . Thus, write enable signal  is active for approximately one-half of a clock cycle of data clock signal . Responsive to such next rising edge  of data clock signal , pipeline signals ,  and - transition to don't care conditions.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":["FIG. 14","FIG. 2A"],"b":["1300","104","1300","1301","1306","1310","1301","1306","1301","1306"]},"Controller  and decoder  may be at least approximately centrally located with respect to memory cells . Notably, decoder  may be considered part of controller . With respect to address, including but not limited to row address, signaling and global masking signaling, they may be done as previously described, though for this memory array architecture. For example, an address signal A<:> may be used to address blocks \u2013 where A<> for example is used to address a particular block. One unique y-bit out of column signal  of  is routed to each block \u2013 for block addressing. Write port signal  and read port signal  are shorted across all six columns of blocks \u2013.","Additional, digital clock manager logic may be used to interact with above-described data address and data ready signaling. Read data and data ready signals may be ready two clock cycles after a data enable signal.",{"@attributes":{"id":"p-0161","num":"0160"},"figref":["FIG. 15","FIG. 2A"],"b":["104","1400","1401","1408","1401","1408","1409","1409"]},"Controller  and decoder  may be at least approximately centrally located with respect to memory cells . A bit of address signal  of , such as A<>, is used to address particular blocks, such as blocks  and . Row address signal , write port signal  and read port signal  are coupled to blocks \u2013 to automatically rotate\/short through a column.","One unique y-bit out of column address signal  is routed to each block \u2013 for block addressing. Read data and data ready signals may be ready two clock cycles after a data enable signal.",{"@attributes":{"id":"p-0164","num":"0163"},"figref":["FIG. 16","FIG. 2A"],"b":["1500","104","1501","1508","1511","1501","101","1513"]},{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 17","b":["101","1600","1600","1602","1602","1500","1500","102","1500","1603","1604","1603","1604","1600"]},"Registers  and , accessed via reconfiguration port  through controller , may be initially set with default settings obtained from a configuration bitstream. Thus, system monitor  may start in a known state. Additionally, alarm values to be stored in memory cells  may be downloaded from FPGA  configuration memory.","Registers  include system monitor configuration registers, test registers and channel sequence registers. Registers  are used to hold alarm thresholds for a digital comparison and calibration coefficients for on-chip sensors.","Additional details regarding system monitor  may be found in co-pending, concurrently filed patent application entitled \u201cDYNAMIC RECONFIGURATION OF A SYSTEM MONITOR (DRPORT)\u201d by F. Erich Goetting, et. al., which is incorporated herein by reference in its entirety.","While the foregoing describes exemplary embodiment(s) in accordance with one or more aspects of the invention, other and further embodiment(s) in accordance with the one or more aspects of the invention may be devised without departing from the scope thereof, which is determined by the claim(s) that follow and equivalents thereof. It should be appreciated that the above-described dynamic reconfiguration port includes a memory interface that appears like a well-known memory interface, in particular a memory interface for a BRAM of an FPGA. This facilitates compatibility with microprocessors\/microcontrollers, whether formed of dedicated circuitry or configurable logic or any combination thereof. For example, a memory block may be mapped into memory or input\/output space of a microprocessor. Because mapping a memory block into such space is a well-known model for on-chip control of microprocessor controlled peripherals, the above-described interface is compatible with well-known on-chip interfaces of interconnecting cores, such as a CoreConnect from IBM or AMBA from ARM.","Claim(s) listing steps do not imply any order of the steps. Trademarks are the property of their respective owners."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Accompanying drawing(s) show exemplary embodiment(s) in accordance with one or more aspects of the invention; however, the accompanying drawing(s) should not be taken to limit the invention to the embodiment(s) shown, but are for explanation and understanding only.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 1B and 1C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2C","FIG. 2A"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 11A","FIG. 2A"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 11B","FIG. 2A"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 12A through 12F","FIG. 2A"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
