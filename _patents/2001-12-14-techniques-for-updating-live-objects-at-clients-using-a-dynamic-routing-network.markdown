---
title: Techniques for updating live objects at clients using a dynamic routing network
abstract: A dynamic content routing network routes update messages containing updates to properties of live objects from input sources to clients having the objects. Certain objects served to clients by a server are indicated as “live.” When the clients receive live objects, the clients identify the object IDs associated with the objects and register the object IDs with the routing network. The routing network maintains a registry of object IDs and clients. An input source provides an update message to the routing network containing the object ID and data specifying an update to a property of the object. The routing network routes the message to each client that has registered for the object ID contained in the message. Upon receipt of the message, a client updates the specified property of the live object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07043525&OS=07043525&RS=07043525
owner: Bang Networks, Inc.
number: 07043525
owner_city: San Francisco
owner_country: US
publication_date: 20011214
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","DISCLOSURE OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims the benefit under 35 U.S.C. \u00a7 119(e) of U.S. Provisional Application No. 60\/256,613, filed Dec. 18, 2000, U.S. Provisional Application No. 60\/276,847, filed Mar. 16, 2001, U.S. Provisional Application No. 60\/278,303, filed Mar. 21, 2001, U.S. Provisional Application No. 60\/279,608, filed Mar. 28, 2001, and U.S. Provisional Application No. 60\/280,627, filed Mar. 29, 2001, all of which are hereby incorporated by reference herein.","1. Field of the Invention","This invention pertains in general to transferring information through digital networks and in particular to transferring information for remotely updating content at client devices through the digital networks.","2. Background Art","The Internet is a digital network of computers. An individual computer on the Internet is typically identified by an internet protocol (IP) address. A computer on the Internet sends a packet of information to another computer by routing the packet to a logical port at the destination computer's IP address. The destination computer interprets the packet according to one of several possible protocols determined by the port to which the packet was sent.","The World Wide Web (the \u201cWeb\u201d) is a collection of technology and content available on the Internet that allows the content to be routed from server computers to particular destination computers. The Web includes a large number of web pages residing on many different servers. Web pages contain one or more files, or references to one or more files, specifying instructions for presenting the web page and content, such as text, images, applets, video, and\/or audio.","Web pages use a variety of definitional and programming languages to control how information is presented. The most fundamental of these is the Hypertext Markup Language (HTML). HTML uses a system of \u201ctags\u201d to specify how content should be displayed. Recent advances in HTML introduce \u201cstyle sheets\u201d which help separate content information from display information. HTML has also been modified and extended to provide new capabilities. For example, Extensible Markup Language (XML) adds semantic content to web pages. In addition, Dynamic HTML (DHTML) adds some dynamic content to web pages.","A web page may also include one or more programs for controlling how the web page is displayed. For example, JAVA\u00ae applets and JAVASCRIPT\u00ae scripts may be used to control the display of a web page. In addition, DHTML uses scripts to control the dynamic content. Thus, a web page designer can use applets and scripts to produce animation effects or modify the display based on user interaction. For example, the designer can write a script that changes the color of a piece of text when a user clicks on a button.","Devices that display\/execute web pages are often called \u201cclient devices\u201d or simply \u201cclients.\u201d Client devices include personal computers, web-enabled set-top boxes and televisions, cellular telephones, personal digital assistants and other handheld devices, and special-purpose web-browsing appliances. Client devices typically employ a program called a \u201cweb browser\u201d for interpreting the HTML or other display instructions in the web page and displaying the content accordingly. Most web browsers include special functionality, such as a Java Virtual Machine, for executing JAVA\u00ae applets and\/or other applets or scripts embedded in the web pages.","A client device specifies a web page or other document on the web using a Uniform Resource Locator (URL). A URL has the form \u201cservice:\/\/server\/path\/file.\u201d Here \u201cservice\u201d refers to the protocol to be used, such as the file transfer protocol (FTP) or the hypertext transport protocol (HTTP). \u201cServer\u201d is the IP address of the server containing the page, and \u201cpath\/file\u201d specifies the particular web page on the server.","The Web suffers from a substantial limitation with respect to dynamically updating content in a web page at a client device. The Web's only mode of operation is for a client device to first request a page from a server and then for the server to send the requested page to the client device. Once the server delivers the page to the client, it typically terminates its connection to the client, and does not retain any information about the client or the page that was sent. For this reason, servers are typically \u201cstateless.\u201d As a result, client devices drive and control the flow of information around the Web. While client-side control is appropriate in some situations, it does not permit efficient updating of data at the client devices. For example, if a web page contains information that may change, such as the score of a baseball game or a stock quote, the server has no way to inform the client devices that are viewing the page of the change. Instead, the client devices must ask the server for the updated information. However, the client devices do not know when the information on the web page has changed, and thus do not know to ask for the update.","There are some simple web programming techniques that attempt to update content on client device-side web pages. One approach that web designers use is to rely on the client devices to periodically re-request web pages. This updating can be performed as the result of user action (such as pressing the \u201crefresh\u201d button) or can be automated to occur on a particular schedule (such as by using the HTML Meta Refresh tag to cause the client device to request the page every \u2018X\u2019 seconds). Although this technique provides client devices with more up-to-date information, it is very wasteful of resources. In particular, the web server must resend the page even if nothing has changed, and, even when something has changed, it must resend the entire web page rather than just the updated information, which may be only a very small part of the page. Further, attempting to reduce unnecessary requests by decreasing the request rate results in decreasing the currency of the data. This is an unalterable trade off in a client-driven approach.","The performance of automatic refreshing can be improved somewhat by putting information that may change in a separate frame from information that is less likely to change, and only refreshing the separate frame. A few web designers even write custom JAVA applets to limit refreshing to individual components on a page, such as the score of a soccer game. A willingness to go to such effort illustrates the serious drain of resources caused by frequent refreshing.","Nevertheless, even custom JAVA applets are not a meaningful attack on this problem. Custom applets require a large separate development effort for each item on each page that might need to be updated. More importantly, most custom applets still update content based upon client-driven requests, although it is possible to design an applet that accepts \u201cpushed\u201d messages. This solution is not scalable to provide updated information for large numbers of client devices and for large numbers of web pages.","Therefore, there is a need in the art for an efficient way to provide dynamic content to a web page at a client device.","The above need is met by a dynamic content routing network that routes messages containing data for updating properties of live objects to clients displaying web pages or other representations of data containing the live objects. The web server that initially provides the web pages to the clients does not need to track which clients are currently displaying the live objects. Instead, the information provider or a dynamic content provider (generically referred to as an \u201cinput source\u201d) that provided the live object simply sends an update message to the routing network. The routing network maintains the mappings between the live objects and the clients that are currently displaying them. This routing utilizes bandwidth efficiently because the update messages are provided to the clients only when the live objects change.","In one embodiment, a web server associated with an input source provides web pages to clients. The web pages contain live objects identified by object IDs. An activation module at the client examines the web page and identifies the object IDs of the live objects on the web page. Then, the activation module establishes a connection with the routing network and registers for the object IDs. The routing network maintains a registry indicating which clients have registered for which live objects.","An input source provides update messages to the routing network. An update message preferably contains an object ID and data for updating a property of the identified live object. The routing network determines the clients that have registered for the identified object ID, and then routes the message to those clients. The activation modules at the clients receive the message and update the properties of the live object as specified by the data in the message.","The features and advantages described in this summary and the following detailed description are not all-inclusive, and particularly, many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings, specification, and claims hereof.","The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","100","112","114","108","116","100","112","108","114","116"]},"The server , client , information provider , dynamic content provider , and routing network  are preferably in communication via conventional communications links  such as those comprising the Internet. The communications links  include known wired communications media, such as dedicated or shared data, cable television or telephone lines, and\/or known wireless communications media, such as communications over the cellular telephone network using protocols such as the global system for mobile communications (GSM), code division multiple access (CDMA), time division multiple access (TDMA), etc.","In one embodiment, the entities may each be in communication with one or more Internet Service Providers (ISPs) (not shown) that provide each entity with access to other computers on the Internet. In addition, the server , client , information provider , dynamic content provider , and routing network  are preferably each identified by at least one Internet Protocol (IP) address such as \u201c66.35.209.224.\u201d The IP address may also have one or more domain names associated with it, such as \u201cbangnetworks.com.\u201d Alternative embodiments of the present invention may use alternative addressing schemes and\/or naming conventions instead of, or in addition to, those described herein. For example, embodiments wherein one or more of the clients are cellular telephones or other portable devices may rely on different addressing schemes.","Preferably, the information provider  provides web pages or other representations of data to the server . The web pages contain one or more \u201clive objects,\u201d which are designated to be real-time dynamically-updateable objects. Each live object is identified by an object identifier, or object ID. Preferably, the server  provides the web pages  to multiple clients . The clients  contact the routing network  and register for update messages for the object IDs on the web page. The routing network , in turn, preferably maintains a registry indicating which clients have registered for which object IDs.","The information provider  and\/or dynamic content provider  send update messages to the routing network . These messages can be sent any time the information provider  or dynamic content provider  wants to update a property of a live object. Each update message preferably identifies a live object and contains data for updating a property of the identified live object. The routing network  accesses the registry and determines which clients have registered for the identified object. Then, the routing network  routes the update message to the appropriate clients. Upon receipt of an update message, the clients  update the specified property of the live object.","The routing network  provides an efficient one-to-many mapping of objects to clients (and by inference of information, a many-to-many mapping of information providers \/dynamic content providers  to clients) through object-based routing. Messages provided by the information provider  and\/or dynamic content provider  to the routing network  are not routed to the clients  based entirely on a specified destination; more specifically, they are not routed based on the IP address of the client, as in conventional IP routing schemes. Instead, the messages are routed based on the live objects referenced by the message.","The mapping and object-based routing provided by the routing network  allow the information provider  and dynamic content provider  to update properties of live objects at a dynamically changing cross-section of clients in real-time, without requiring the information provider or dynamic content provider to track the clients or web pages being viewed by the clients. The clients , in turn, do not need to have any a priori knowledge of object IDs\u2014they \u201cdiscover\u201d which IDs they should register when they receives the web pages  from the server .","Object-based routing also allows information providers  to dynamically update content on web pages without requiring the clients  to re-request the content, and without requiring the information providers  or servers  to maintain connections with the clients. In this manner, significantly more clients can receive updated content from a given information provider  than would be possible utilizing conventional client-side request-driven transmission control protocol\/Internet Protocol (TCP\/IP) connections between the clients and the server .","Turning now to the individual entities illustrated in , the server  is preferably a conventional computer system configured to act as a web server and serves web pages  and other data representations to clients . The web pages  provided by the server  are associated with one or more information providers .","An information provider  is an entity providing one or more web pages , information contained in web pages, and\/or other representations of data served by the server . The information provider  preferably has a conventional computer system coupled to the Internet. In one embodiment, the server  is directly controlled by the information provider  (e.g., the server is physically located at the information provider and\/or is dedicated to serving only the information provider's web pages). In this embodiment, the server  and information provider  can be treated as the same entity. In an alternative embodiment, the server  serves web pages from multiple information providers.","As is known in the art, the web pages  and other content on the server  are specified by uniform resource locators (URLs) having the form \u201cservice:\/\/server\/path\/web page.\u201d Typically, web pages  are obtained via the hypertext transport protocol (HTTP) and thus an exemplary URL for retrieving the web page \u201cb1.html\u201d from the web server having the domain name \u201cwww.bangnetworks.com\u201d is \u201chttp:\/\/www.bangnetworks.com\/news\/b1.html.\u201d","As used herein, a \u201cweb page\u201d is a block of data available from the server . In the simplest case, a web page is a file written in the hypertext markup language (HTML). The web page may also contain or refer to one or more other blocks of data, such as other files, text, images, applets, video, and\/or audio. In addition, the web page may contain instructions for presenting the web page and its content, such as HTML tags and style sheets. The instructions may also be in the Extensible Markup Language (XML), which is related to HTML and adds semantic content to web pages or the Dynamic HTML (DHTML), which adds some dynamic content to web pages. Additionally, the instructions may take the form of one or more programs such as JAVA\u00ae applets and JAVASCRIPT\u00ae and\/or DHTML scripts.","As used herein, the phrase \u201cweb page\u201d also refers to other representations of data served by the server  regardless of whether these data representations include characteristics of conventional web pages. These data representations include, for example, application programs and data intended for the web browser  or other application programs residing at the clients  or elsewhere, such as spreadsheet or textual (e.g., word processing) data, etc.","In a preferred embodiment, objects at the client, such as web pages and elements of web pages, can be designated as \u201clive\u201d by the information provider . Properties of a live object can be dynamically updated in real-time at the client  by the information provider  or another entity acting on behalf of the information provider. As used herein, an \u201cobject\u201d is any datum or data at the client  that can be individually identified or accessed. Examples of objects include elements of web pages such as text characters and strings, images, frames, tables, audio, video, applets, scripts, HTML, XML, and other code forming the web page, variables and other information used by applets, scripts and\/or code, URLs embedded in the web page, etc. Application and operating system constructs are also objects. For example, cells of spreadsheets, text in word processor documents, and title bars and messages displayed by the operating system or applications are objects. Preferably, multiple objects can be grouped together into a single, logical object. Thus, an object can be defined at any desired or useful level of granularity.","Since content on a web page is conceptualized and organized by \u201cobject,\u201d the present invention essentially abstracts web pages and web page content, and other modules and\/or functionality at the client , away from the HTML code or other conventional representation. This abstraction allows the information provider  to update a property of an object without concern for the location, display format, or other specifics of how the data is being represented at the client .","Live objects have associated \u201cproperties\u201d which include any modifiable data related to the object or referenced with respect to the object. The information provider  typically, but not necessarily, provides initial settings for the properties of live objects provided to the client . The properties may or may not affect the visual representation of the object in the web page or other data representation. A property may affect an internal aspect of the object and, thus, a change to the property may not have any direct effect on a web page containing the object. For example, the property may affect whether particular aspects of the object are modifiable, how the object responds to user input or other stimuli, etc. Additionally, a property may also have a direct effect on how the object is displayed at the client . For example, the property may affect the content, color, typeface, size, formatting, or other attribute of text, images, or other data displayed by the object. Other properties may occupy parts of the spectrum between having no effect on the visible representation of the object and having a direct effect on the visible representation of the object. For example, a web page showing scores of football games may include a list of games and the current scores of the games as of the time the server  serves the web page. The list of games, subset of games to be displayed, and the scores of the games can be designated as live objects (or properties of a single live object) and updated as necessary or desired.","A property can also preferably include instantiating an instance of the object or invoking functionality of the object. For example, a property of a browser window object may include functionality for instantiating another browser window. This function can be invoked as a logical change to a property of the object. The second browser window can be referenced through the original browser window (i.e., object) or designated as a new live object.","An information provider  or other entity preferably updates a live object at a client  via an update message. In general, an update message identifies the live object and, if necessary, the property of the live object, and contains data for updating the property. In one embodiment, the data may be the actual value for the property or executable code for causing the object's property to be updated. For example, the data may be a simple numerical or textual value, e.g., \u201c4,\u201d to which the property should be set, and\/or the data may be JAVASCRIPT\u00ae code or a call to a JAVASCRIPT\u00ae function at the client that effects the desired change to the property of the object.","The update message preferably implicitly or explicitly identifies a handler at the client  for use in updating the live object's property. In one embodiment, the client  utilizes a default handler when the message implicitly specifies the handler (e.g. when the message does not identify a specific handler). In one embodiment, if the update message specifies the actual value for the property, a default handler generates JAVASCRIPT\u00ae code for changing the property to the specified value. If the data in the update message are JAVASCRIPT\u00ae code, the default handler does not perform any processing of the code. In either case, the default handlers preferably use LiveConnect to execute the JAVASCRIPT\u00ae code in a Java Virtual Machine (JVM)  at the client  and thereby update the property of the live object.","For certain objects and\/or data types, the default handlers are not appropriate. In these cases, the message preferably explicitly identifies a handler for performing the update. For example, the message may explicitly specify a function to call on the data or the message may explicitly identify the environment in which the data should be executed. For example, the data in the update message may include code for execution by a software \u201cplug-in\u201d such as MACROMEDIA FLASH\u00ae and the message may explicitly identify FLASH as the handler.","The information provider  preferably designates an object as \u201clive\u201d by including a unique identifier for the object, the object ID, in the web page or other data representation provided to the client . In one embodiment, the information provider  encodes the object ID in an object's corresponding HTML \u201cID\u201d attribute using the following HTML expression:\n\nID=\u201celementIdentifier,\u201d\n\nwhere \u201celementIdentifier\u201d is the object ID and is preferably a string. The string can encode any information desired by the information provider  or other entity establishing the object ID and in one embodiment is a simple textual and\/or numeric identifier. In one embodiment, the information provider  begins the object ID with a predefined token, such as \u201cBang$,\u201d in order to distinguish live objects from other objects that happen to have defined ID attributes. For example, an object can have the object ID \u201cBang$elementIdentifier.\u201d\n","In the preferred embodiment, each information provider  optionally encodes a unique information provider ID in its object IDs in order to prevent naming collisions between the object IDs of different information providers. In one embodiment, the information provider ID is a textual and\/or numeric identifier. The information provider  may specify the information provider ID and the object ID as part of a hierarchical namespace. For example, in one embodiment objects are named as follows: \u201c$namespace1$[namespace2$ . . . $namespaceN$]objectId,\u201d where \u201c$namespace1\u201d is the information provider ID and the \u201c$\u201d operates as the name separator and defines additional optional levels of a namespace hierarchy. One embodiment of the system  supports typical directory services functionality. For example, two dollar sign characters appearing together, \u201c$$,\u201d refers to the top level of the namespace hierarchy.","Thus, the object ID for a live object is preferably formed from a combination of the predefined token, the information provider ID namespace, and a value assigned by the information provider . For example, the object ID for a live object representing the real time price of a stock having the symbol \u201cBANG\u201d might be: \u201cBang$$informationProviderID$equities$realtime$bang.\u201d In this example, \u201cBang$\u201d is the predefined token that signifies a live object, \u201c$informationProviderID\u201d is the ID identifying the information provider, \u201c$equities$realtime$\u201d defines levels of a namespace hierarchy, and \u201cbang\u201d identifies the specific object.","In some embodiments and situations, the object ID utilizes relative names. For example, an information provider  referring to its own object IDs is implicitly in its own namespace. Accordingly, the information provider  does not need to include the information Provider ID in the object IDs it utilizes internally. In one embodiment, the information provider ID is not explicitly encoded into the object ID. Instead, the information provider ID is encoded elsewhere in the web page in order to provide scope to the page's object IDs.","In one embodiment, the object ID identifies a point (i.e., a node in a tree) in a Document Object Model (DOM) representation of a web page or other document at the client . The DOM is a platform- and language-neutral interface that represents a document as a hierarchy of objects. The DOM also provides an interface that allows programs and scripts to dynamically access and update properties of the objects. Object properties can be inherited by descendent objects.","In this embodiment, the client  preferably executes an update message in the context of the specified point in the DOM representation. The update may specify a change to a property of the object at the identified point. The update also may specify a change to a parent or descendent of the object at the identified point. In each case, the update is executed relative to the specified point in the DOM representation. In one embodiment, points in the DOM representation specify how to update properties of live objects located at those points. Thus, the same update may be interpreted differently depending upon the identified live object's location in the DOM representation.","For example, assume there is an object in the DOM representation identified as \u201cwindow.document.frame[3].ObjectID.\u201d Also assume that the object has an \u201cinnerText\u201d property located at \u201cwindow.document.frame[3].ObjectID.innerText\u201d that specifies the text displayed by the object. An update message can change the text displayed by the object by specifying \u201cObjectID\u201d and the new value for the innerText property.","An advantage of utilizing object IDs to specify objects is that the information provider  or other entity providing the update message can access and change properties of objects without knowing the object's actual location in the DOM representation. Indeed, the object may be in different locations in different DOM representations and\/or in multiple locations in the same DOM representation. In any of these cases, the update message will change the specified properties of all of the objects having the given object ID.","Depending upon the particular embodiment of the environment , the information provider  and\/or the dynamic content provider  provides update messages to the routing network . The dynamic content provider  is preferably a conventional computer system operated by an entity that provides real-time information, such as stock prices and\/or sports scores. In one embodiment, the information provider  receives updated properties for the live objects from the dynamic content provider  or another source (or generates the updated properties internally). Then, the information provider  sends an update message specifying the object ID and the change to the object property to the routing network . In this embodiment, the dynamic content provider  may be absent from the environment .","In another embodiment, the dynamic content provider  provides the object IDs for live objects to one or more information providers  and the information providers  distribute the live objects to the clients . Then, the dynamic content provider  sends messages specifying the changes to the properties of the live objects to the routing network . For example, the dynamic content provider  distributes an object ID associated with the score of a particular baseball game to the information providers . Then, the dynamic content provider  sends a message specifying the object ID and an update to a property of the object that controls the displayed score of the particular baseball game to the routing network . These two embodiments are not mutually exclusive and, therefore, some updates may be provided to the routing network  by the information provider  while others are provided by the dynamic content provider .","The client  is a device that retrieves web pages  and\/or other information from the server . In one embodiment, the client  is a conventional personal computer used by a person to access information on the Internet. In alternative embodiments, the client  is a different consumer electronic device having Internet connectivity, such as an Internet-enabled television, a cellular telephone, a personal digital assistant (PDA), a web browsing appliance, etc. The client  preferably, but not necessarily, has an associated display device.","The client  preferably executes a web browser , such as MICROSOFT INTERNET EXPLORER\u00ae, for retrieving web pages and displaying them on the display device. In embodiments where the client receives data representations from the server  other than conventional web pages, the web browser  does not necessarily share similarities with conventional web browsers. Preferably, the web browser  contains a JVM  for executing JAVA\u00ae applets and\/or scripts. The web browser  also preferably contains Dynamic HTML capabilities, such as support for JAVASCRIPT\u00ae (or another scripting language, such as VBScript) and the Document Object Model (DOM), and enables communications between JAVA\u00ae and the scripting languages. In one embodiment, the web browser  supports the LiveConnect standard for enabling communication between JAVA\u00ae applets and scripts written in the supported scripting languages. The web browser  can also be extended through software plug-ins such as MACROMEDIA FLASH\u00ae, REAL NETWORKS REALPLAYER\u00ae, and\/or APPLE QUICKTIME\u00ae. In alternative embodiments, the functionality of the JVM  and\/or other aspects of the web browser  are provided by one or more other functional units within the client . The term \u201cmodule\u201d is used herein to refer to software computer program code and\/or any hardware or circuitry utilized to provide the functionality attributed to the module. The web browser  and JVM  are examples of modules in the client .","In some embodiments, the client  does not necessarily have a display device, web browser  and\/or other components associated with a typical consumer device. The client , for example, may be a dedicated purpose device having certain aspects of web connectivity such as an embedded HTTP client in a web-enabled appliance or in a controller for an automobile, audio-visual equipment, or some other device.","A web page  provided from the server  to the client  preferably includes instructions for enabling the live objects on the web page. The instructions cause the client  to automatically and transparently (i.e., without user interaction) contact the routing network  and download an activation module  for activating the live objects. In one embodiment, the instructions comprise a URL specifying the location of the activation module  at the routing network . In an alternative embodiment, the client  obtains the activation module  from the server  or another source.","The activation module  preferably contains JAVA\u00ae instructions for execution by the JVM . However, alternative embodiments of the module  may encode the instructions in the web page  and\/or the activation module  using different languages and\/or techniques. For example, the instructions and\/or activation module  can be embedded in the web browser  or operating system, either as native code or as plug-ins. In these alternative embodiments, the web browser  does not have to download the activation module  from an external source.","The activation module  preferably registers object IDs from the web page  downloaded by the client  with the routing network  and updates the live objects in response to update messages received from the network. The routing network  records the registrations in the registry . The client's registrations preferably remain in effect as long as the client is displaying the associated web page , although other embodiments of the system  may use different criteria for determining when to terminate the client's registrations.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 2","b":["112","108","116","210","114","110","114","212","112","112","214","114","114","216","124","110","110","218","124","114","220","124","222","110","110","223","114"]},"At some point, the input source  sends  an update message to the routing network  in order to change a property of a live object at the client . In one embodiment, the message from the input source  to the routing network  contains only a single object ID and an update to a property of the identified object. In another embodiment, the message contains multiple object IDs and the corresponding property updates. In this latter embodiment, the message may have an associated \u201cBatch ID\u201d that identifies the message as having multiple object IDs and updates. Preferably, the information provider  can include a batch ID in a web page  in the same manner as including an object ID. Likewise, the client  can preferably register for a batch ID with the routing network  in the same manner as an object ID. In fact, the batch ID can be the same as the object ID so that the client  registers for both batch and non-batch messages by registering one ID. Alternatively, separate procedures can be established for registering batch messages. The client  preferably processes the component messages of a batch as if each message were delivered separately.","The routing network , in turn, routes  the message to each client  that has registered for the specified object ID, preferably by utilizing standard Internet communications protocols, such as IP addresses, etc. The activation module  at the client  processes the message and updates  the property of the identified live object. If live objects having the same object ID appear in multiple locations at the client  (e.g., at multiple locations on a web page being displayed at the client), the activation module  preferably updates each of the live objects having the specified ID. As a result, the routing network  allows live objects at the client  to be dynamically updated. Preferably, this routing and updating happens quickly enough to be considered \u201creal-time\u201d for the purposes of the input source .","This update process, indicated within the dashed box  in , can repeat an indefinite number of times and is fully asynchronous as to the information provider  and client . For example, the input source  may send regular update messages to the routing network  as the score of a sporting event changes or a stock price fluctuates, but may stop sending update messages once the sporting event ends or stock market closes. When the client  ends the display of a web page containing the live object, or otherwise no longer desires to receive update messages, the client preferably closes  the connection with the routing network . The routing network , in turn, updates  the registry  to remove the client's object registrations. In another embodiment, the client  sends messages to the routing network  that selectively register and\/or de-register the client from one or more objects yet leaves the connection open in order to receive update messages pertaining to other objects.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 3","FIG. 3"],"b":["110","210","110","110","114","210","312","312","110","312","312","312","312"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 4","FIG. 4"],"b":["110","410","412","410","412"]},"There are various ways to internally represent the games and scores in the web pages using live objects. In one embodiment, a \u201cgame\u201d object is defined having properties for the two teams involved in the game and the score associated with each team. The game object is placed at a selected position in the web page and the properties of the object cause the information about the game to be displayed on the page. In another embodiment, \u201cteam\u201d and \u201cscore\u201d objects are defined, with the team object having a property defining the name of a team and the score object having a property defining a score. In this second embodiment, the team and score objects are placed at selected locations on the page so that the proper teams and scores are aligned when the page is rendered. In yet another embodiment, an object is defined having properties for the name of one team and a score associated with that team. Then, pairs of the objects are placed in the page in the proper alignment to indicate the games and scores. In another embodiment, an object is defined having properties specifying names of two teams and a separate object is defined having properties specifying two scores. In this last embodiment, the two objects are placed in the page so that the names of the teams align with the associated scores. Obviously, additional variations of these representations are possible.","Assume for the example of  that the names of teams in a game are specified by a \u201cnames\u201d object having properties for the two team names and the scores in the game are specified by a \u201cscores\u201d object having properties for two scores. In web page , a names object  having properties set to identify the \u201cSF 49ers\u201d and the \u201cSTL Rams\u201d is located directly under the \u201cLocal Sports Scores\u201d heading. A scores object  having a property set to identify the score of the game as \u201c42\u201d to \u201c7\u201d is directly to the right of the names object . In web page , the properties of the second names object  identify the same game using slightly different terminology: \u201cSF\u201d and \u201cSTL.\u201d However, this names object  is aligned with the same scores object  as is utilized in web page .","Thus, the same scores object  is utilized in different positions in each web page , . In order to update the score of the San Francisco 49ers vs. St. Louis Rams football game on both web pages, the input source  simply sends an update message to the routing network  specifying the object ID for the scores object  and the update to the score property. The routing network  routes the update message to the appropriate clients , and the clients update the appropriate score regardless of the particular page layout.","The input source , i.e., the information provider  and\/or dynamic content provider  can use a variety of tools to generate the update messages.  is a block diagram illustrating an input source  and the tools available to it for generating the update messages. Other tools can be utilized in addition to or instead of the ones described herein.","Preferably, the tools allow the input source  to access an application programming interface (API) provided by the routing network  for accepting messages. In one embodiment, the messages sent by the input source  are in the same format as utilized by the activation module  at the client . In an alternative embodiment, the messages provided to the routing network  are in a different format and the routing network translates the messages into the format utilized by the activation module .","In one embodiment, the input source  utilizes a data pump module  to access the API. The data pump module  reads an extensible markup language (XML) file containing one or more object IDs and the new values for the identified objects at regular intervals and automatically generates API calls that send messages representing changes to object properties to the routing network . In another embodiment, the data pump module  is event-driven and reads the XML file in response to a change in the file or some other occurrence.","In another embodiment, the input source  utilizes a director console module  to access the API. Preferably, the director console module  presents an administrator with a graphical interface displaying the contents of the web page . For example, the administrator may use the director console  to edit textual data, images, and\/or any objects or properties of objects on the web page. After editing, the administrator uses a \u201csend update\u201d button or similar technique to cause the director console module  to send messages for the changed objects and properties to the routing network  via the API.","In another embodiment, the information provider  and dynamic content provider  work together as the input source  by using a content management system module  to access the API. Preferably, the content management system module  resides at the information provider  and receives object property updates from the dynamic content provider . The content management system module  preferably updates the properties of the live objects in the web page  stored at the server  and also sends messages for the changed properties to the routing network . In this manner, the web page  at the server  and the web page displayed at the client  are updated almost simultaneously. In one embodiment, the dynamic content provider  sends the update messages to the routing network  instead of to the information provider . Embodiments of the system  can also utilize any combination of the content management techniques described herein.","For example, the tools described above can generate a message having the following code for updating the text displayed by a score object to \u201c2\u201d:","LiveObject score=new LiveObject(\u201cBang$homeScoreID\u201d);","score.setProperty(\u201cinnerText\u201d, \u201c2\u201d).","This code sets the innerText property of the object having object ID \u201cBang$homeScoreID\u201d to \u201c2.\u201d The tools use the API to pass this message to the routing network .","Turning now to the actions performed at the client ,  is a flow chart illustrating the steps performed by an embodiment of the activation module . Those of skill in the art will recognize that different embodiments may perform the steps of  in different orders. The activation module  generally performs three functions: register object IDs with the routing network , handle messages received by the client  from the network in order to update the properties of live objects, and control communications between the client and the network.","In order to register object IDs, the activation module  preferably parses  the web page  received from the server  and identifies the object IDs of the live objects. In an alternative embodiment, the activation module  identifies only a subset of the object IDs, such as the IDs of only live objects that are currently being displayed by the web browser . Alternatively, a list of object IDs may be pre-encoded in the web page in addition to the objects themselves, thereby enabling easy identification by the activation module . In yet another embodiment, a user of the client  selects the object IDs to register.","The activation module  preferably opens  a connection between the client  and the routing network . The activation module  can open  this connection before or after the activation module receives and\/or parses the web page . In some cases, the client  is located behind a firewall that puts a restriction on the types of connection requests the client can make. A firewall might, for example, block all non-HTTP traffic. For this reason, the activation module  preferably wraps the connection request in an HTTP header in order to get the request to the routing network  through the firewall.","The activation module  uses the connection between the client  and routing network  to register  the object IDs by communicating to the routing network  a vector (e.g., a list or array) containing the identified object IDs. In order to accomplish this task through the firewall, the activation module  preferably puts the vector into a string, referred to as \u201cobject data,\u201d and then preferably creates an HTTP message to communicate the object data to the routing network . A schematic example is as follows:","POST\/HTTP\/1.1\\r\\n","Content-Length: <length of object data>\\r\\n","\\r\\n","<object data>","where <object data> is the object ID list. When the routing network  receives such an HTTP request, it extracts the object data and updates the registry  to indicate that the client  has registered for the identified objects.","If the web browser  loads  a new page, or otherwise terminates display of the objects on the initial page, the activation module  associated with the initial web page preferably terminates  the client's connection with the routing network . Those of skill in the art will recognize that this termination  can occur asynchronously with the other steps illustrated in . Thus, the location of steps  and  represents only one possible place in the sequence of steps where the termination may occur.","If the connection is not terminated, the activation module  preferably waits until it receives  a message from the routing network  specifying an object ID and an update to a property of the identified object. In one embodiment, this message is received as HTTP data. Upon receipt of the message, the activation module  preferably extracts  the object ID and update from the HTTP data. Then, the activation module  updates  the property of the identified object, or causes the object to be updated, as specified by the message.","The sequence of receiving messages , extracting data , and updating objects  is preferably repeated until a new page is loaded  or the connection with the routing network  is otherwise terminated. Although not shown in , in certain circumstances, such as when a user action with respect to the web page  activates a new live object, the activation module  may register new object IDs with the routing network  without first downloading and parsing a new page. In one embodiment, if the newly-loaded page contains live objects, then the process of downloading the activation module  and updating the objects as described by  is repeated. In an alternative embodiment, the activation module  remains active at the client  and, therefore, the client does not re-download the activation module from the routing network . Instead, the already-present activation module  performs the live-enabling process on the new page.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["110","110","710","110","710","710","712","110"]},"Internally, the routing network  is preferably divided into one or more clusters . In , the routing network  has three clusters A, B, C, although the number of clusters can vary depending upon the processing needs of the network. An input-side global load balancer  preferably routes messages from the input sources  to the clusters . Similarly, a client-side global load balancer  preferably routes connection requests from the clients  to the clusters . The load balancers ,  are designed to ensure that load is distributed among the clusters  according to a predetermined heuristic. For example, the load may be distributed evenly among the clusters  or a more powerful cluster may be distributed a majority of the load. In one embodiment, one load balancer performs the functions of the input-side  and client-side  load balancers and utilizes conventional Domain Name System-(DNS-) based load balancing.","Each cluster , of which cluster A is representative, preferably contains an input-side cluster load balancer A and a client-side cluster load balancer A. The cluster load balancers A, A function similarly to the corresponding global load balancers ,  in that the input-side cluster load balancer A balances and routes incoming messages among one or more gateways A and the client-side cluster load balancer A balances and routes incoming connection requests among one or more nodes A and application servers A.","In one embodiment, the functionality of the two client-side cluster load balancers A, A is provided by one component. This single-component load balancer initially determines whether an incoming request is from an input source  seeking to send a message to a gateway A, a client  seeking a connection to a node A, or a client seeking a connection to an application server A. Then, the load balancer routes the messages\/connection requests among the gateways A, nodes A, and application servers A within the cluster . In one embodiment, the single-component load balancer provides layer seven load balancing (i.e., load balancing at the application layer). Preferably, the load balancing for the nodes A and application servers A are performed by the same component since, for security reasons, most client web browsers only permit an application (e.g., the activation module ) to transparently connect to the location from which the application was downloaded.","Alternative embodiments of the routing network  may combine the global ,  and cluster A, A load balancers and\/or incorporate the functionality of the load balancers into different components within or outside of the clusters . In addition, alternative embodiments may omit one or more of these load balancers. For example, having different clusters  serve different customers might obviate the need for the global load balancers , .","The gateways A in the cluster  receive the messages from the input sources  and direct the messages to the appropriate node or nodes A. In one embodiment, each gateway A maintains a persistent TCP connection to every node  in every cluster  and directs every message to every node. Therefore, although a gateway A is located inside a cluster A and receives connections via the cluster's input-side load balancer A, the gateway's scope spans the entire routing network . This broad scope allows messages from any input source to reach any client .","In an alternative embodiment of the routing network , each gateway  maintains a persistent TCP connection to all nodes  in the same cluster  and at least one connection to at least one gateway in each of the other clusters. This embodiment reduces the number of simultaneous TCP connections maintained by each gateway . In another alternative embodiment, each cluster  also includes a gatekeeper (not shown in ) that maintains connections with the gateways  of other clusters. A gateway  forwards messages to the gatekeeper, which then distributes the messages to the gateways of other clusters .","Since a gateway  does not control the rate at which it receives messages from input sources , it is possible for the gateway to receive messages faster than it can process them (i.e., send the messages to the nodes). Therefore, each gateway  preferably maintains a queue  of messages that have been received but not yet processed in order to avoid losing messages. In one embodiment, the gateway  drops messages if the queue  becomes too long. In another embodiment, the gateway  utilizes priorities assigned to certain messages or input sources to determine which messages to drop.","The nodes  preferably transmit messages received from the gateways  to the clients  that have registered in the object IDs identified by the messages. If no clients  have registered the object ID specified by a message, the node preferably ignores the message. A node  preferably maintains an instance of the registry  as a hash table  containing the object IDs registered by clients  connected to the node. In one embodiment, the hash table  associates each object ID with a linked list containing one entry for each client  that has registered for that object ID. Each entry in the linked list preferably contains a pointer to a socket representing the connection to the corresponding client . As is known in the art, the pointer to the socket, typically called a \u201cfile descriptor,\u201d represents an address to which the node can write in order to send the message to the corresponding client. Preferably, the node  adds to the hash table  and\/or linked list every time a client  registers an interest in an object and deletes the corresponding entry from the hash table and\/or linked list when the client disconnects from the node or otherwise indicates that it is no longer interested in a particular object.","Alternative embodiments of the present invention utilize other data structures in addition to, or instead of, the hash table  and linked list, and\/or may utilize different data within the data structures. For example, one embodiment of the routing network  has a hierarchy of nodes within each cluster . Different nodes in the hierarchy may handle messages received from certain input sources , or process messages sent to different clients . In this embodiment, the linked lists may point to nodes lower in the hierarchy, instead of to sockets leading to the clients . Another embodiment lacks the node hierarchy, yet assigns certain nodes to certain input sources  or clients .","The application server  within each node  preferably serves the activation module  to the clients  in response to client requests. In addition, the application server  serves any other modules that may be required or desired to support the environment . In an alternative embodiment of the routing network, a single application server  fulfills all of the client requests. This application server  may be within a certain cluster  or independent of the clusters. However, this single-application-server embodiment is less desirable because it lacks redundancy.","Preferably, the routing network  utilizes conventional single-processor computer systems executing the Linux operating system (OS). Preferably, each component of the routing network  is implemented by a separate, dedicated computer system in order to enable the separate optimization of the components. The input\/output (I\/O) functionality of the OS is preferably enhanced through the use of a non-blocking OS package such as NBIO available from the University of California, Berkeley, Calif. Based on the assumption that connections with the nodes  are long-lived, the OS is preferably configured to not allocate resources toward monitoring idle connections. Instead, the well-known\/dev\/poll patch is preferably applied to the OS in order to provide advanced socket polling capabilities.","Moreover, the TCP\/IP stack in the OS is preferably optimized in order to quickly output messages. In one embodiment, the retransmit timer in the stack is reduced from 200 ms to 50 ms. This timer determines how long the stack waits for an acknowledgement (ack) that a sent packet was received. Due to the way the Linux kernel implements the retransmit timer, the kernel will not send pending outbound packets (even if the ack has been received) until the initial retransmit timer has expired. Reducing the retransmit value minimizes the effect of this delay. If an ack is not received before the retransmit timer expires, an embodiment of the present invention increases the retransmit value for the affected TCP connection and the unacknowledged packet is retransmitted. In addition, the TCP\/IP stack preferably utilizes Nagle's algorithm functionality to concatenate a number of small messages into a larger message, thereby reducing the number of packets sent by the routing network .",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 8","b":["726","714","724","726","810","710","726","812","726","814","710","124","712","710","124","726","710","124","726","726","816","712","726","818","712","726","726","712"]},"The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
