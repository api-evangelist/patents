---
title: Policy based processing of content objects in a content delivery network using mutators
abstract: A method for processing content objects with resources associated with a content delivery network (CDN) having a plurality of geographically distributed points of presence (POPs) is disclosed. The resources are enrolled to be accessible from the CDN. Each resource is categorized using tags that categorize the resources. Selection of a policy from a plurality of policies is received, where the plurality of policies define processes to perform on content objects. The selected policy includes an applicability criteria and a call to the resource. Metadata is received at the CDN, the metadata being related to a content object, a requester of the content object and/or a provider of the content object. It is determined that the policy is applicable through analysis of the metadata and/or applicability criteria. The resource is called according to the call in the policy to cause the resource to perform specified processing on the content object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08615577&OS=08615577&RS=08615577
owner: Limelight Networks, Inc.
number: 08615577
owner_city: Tempe
owner_country: US
publication_date: 20111223
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates in general to content delivery networks (CDNs) and, but not by way of limitation, to managing assets associated with the CDN.","Content providers (i.e., customers) offload their content delivery to CDNs for any number of reasons. CDNs specialize in a range of content delivery and hosting options optimized for performance so that end users get a desired quality of service (QoS). Different CDNs have different topologies relying on more or less points of presence (POPs) distributed geographically across the Internet. CDNs with more POPs tend to have less resources in each POP, while those with less POPs tend to have more resources in each one. The topology and asset allocation in a particular CDN is inflexible.","Customers are using CDNs and cloud services in more creative ways. Applications, storage and other services are being provided remotely. CDNs have not provided the flexibility to adapt to all the needs of customers yet have an excellent topology of distributed POPs with fast interconnectivity between those POPs. Currently, limited interfaces to the CDN with little or no customization results in lost opportunity.","In one embodiment, the present disclosure provides a method and system for flexibly processing content objects. The processing is performed with a content delivery network (CDN) having a number of geographically distributed points of presence (POPs). Content objects are ingested through landing pads and stored or otherwise processed in a flexible way where storage bricks and other resources are chosen flexibly by characterization tags. Policies are used to describe which content objects are processed by which categories of resources. A group of resources characterized by the tag are chosen when the processing is performed. When retrieving content, the content object can be stored on any storage brick found through the tag analysis process. A query is translated to addresses for the chosen storage brick(s).","In another embodiment, the present disclosure provides a method for processing content objects with a plurality of resources associated with a content delivery network (CDN) having a plurality of geographically distributed points of presence (POPs). The plurality of resources are enrolled to be accessible from the CDN. Each of the plurality of resources is categorized using a plurality of tags that categorize the plurality of resources, and the plurality of resources includes a resource. Selection of a policy from a plurality of policies is received, and the plurality of policies define processes to perform on content objects stored at the CDN. The selected policy includes an applicability criteria and a call to the resource. Metadata is received at the CDN related to the content object, a requester of the content object and\/or a provider of the content object. The content object is received for storage at the CDN. It is determined, through analysis of the metadata and\/or the applicability criteria, that the policy is applicable and that other policies are not applicable to the received content object. The resource is called according to the call in the policy to cause the resource to perform specified processing on the received content object.","In another embodiment, the present disclosure provides a content delivery network (CDN) having a plurality of geographically distributed points of presence (POPs) for processing content objects with a plurality of resources. The CDN includes a landing pad to receive a content object from a client, one or more databases comprising a list of the plurality of resources, each of the plurality of resources being associated with one or more tags, and each tag indicating a characteristic of the associated resource. The CDN also includes a policy reconciliation service (PRS) for maintaining and processing policies, the PRS being coupled to the one or more databases. The PRS includes a policy store comprising a plurality of policies, each of the plurality of policies defining specific processing of content objects, the plurality of policies including a first policy and a second policy. Each of the first policy and the second policy includes an applicability parameter indicating criteria that a content object must satisfy in order for the content object to be processed in accordance with the respective first or second policy, the criteria indicated in the first policy's applicability parameter being different from the criteria indicated in the second policy's applicability parameter. The first policy comprises a disposition parameter indicating criteria that a resource must satisfy in order for the resource to effect the first policy, and the first policy comprises one or more mutators, each mutator comprising a template for inclusion of an address of a resource and\/or a location of a received content object. The CDN also includes a policy manager configured to determine that the first policy is applicable to the received content object and that the second policy is not applicable to the received content object, the determination being based on the first policy's criteria and metadata related to the received content object, a requester of the received content object and\/or a provider of the received content object at the CDN. The policy manager is further configured to identify a resource of the plurality of resources for effecting the first policy based on the disposition parameter and a tag associated with the first policy.","In another embodiment, the present disclosure provides a content delivery network (CDN) having a plurality of geographically distributed points of presence (POPs) for processing content objects with a plurality of resources. The CDN includes two or more hardware servers programmed for enrolling the plurality of resources to be accessible from the CDN; categorizing each of the plurality of resources using a plurality of tags that categorize the plurality of resources, where the plurality of resources includes a resource; receiving selection of a policy from a plurality of policies, where the plurality of policies define processes to perform on content objects stored at the CDN, wherein the selected policy includes an applicability criteria and a call to the resource; receiving, at the CDN, metadata related to a content object, a requester of the content object and\/or a provider of the content object; receiving the content object for storage at the CDN; determining that the policy is applicable and that other policies are not applicable to the received content object through analysis of the metadata and\/or the applicability criteria; and calling the resource according to the call in the policy to cause the resource to perform specified processing on the received content object.","Further areas of applicability of the present disclosure will become apparent from the detailed description provided hereinafter. It should be understood that the detailed description and specific examples, while indicating various embodiments, are intended for purposes of illustration only and are not intended to necessarily limit the scope of the disclosure.","In the appended figures, similar components and\/or features may have the same reference label. Further, various components of the same type may be distinguished by following the reference label by a dash and a second label that distinguishes among the similar components. If only the first reference label is used in the specification, the description is applicable to any one of the similar components having the same first reference label irrespective of the second reference label.","The ensuing description provides preferred exemplary embodiment(s) only, and is not intended to limit the scope, applicability or configuration of the disclosure. Rather, the ensuing description of the preferred exemplary embodiment(s) will provide those skilled in the art with an enabling description for implementing a preferred exemplary embodiment. It is understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope as set forth in the appended claims.","Referring first to , a block diagram of an embodiment of a content distribution system  is shown. The content originator  offloads delivery of the content objects to a content delivery network (CDN)  in this embodiment. The content originator  produces and\/or distributes content objects and includes a content provider , a content site , and an origin server . The CDN  can cache, redistribute and\/or host content in various embodiments for third parties such as the content originator  to offload delivery and typically provide better quality of service (QoS).","In this embodiment, the content distribution system  locates the content objects (or portions thereof) and distributes the content objects to end user systems . A content object is any content file or content stream and could include, for example, video, pictures, data, audio, software, and\/or text. The content object could be live, delayed or stored. Throughout the specification, references may be made to a content object, content, content stream and\/or content file, but it is to be understood that those terms could be used interchangeably wherever they may appear.","Many content providers  use a CDN  to deliver the content objects over the Internet  to end users . The CDN  includes a number of points of presence (POPs) , which are geographically distributed through the content distribution system  to deliver content. Various embodiments may have any number of POPs  within the CDN  that are generally distributed in various locations around the Internet  to be proximate to end user systems . Multiple POPs  use the same IP address such that an Anycast routing scheme is used to find a POP  likely to be close, in network terms, to the end user for each request. In addition to the Internet , a wide area network (WAN)  or other backbone may couple the POPs  with each other and also couple the POPs  with other parts of the CDN .","When an end user  requests a web page through its respective end user system , the request for the web page is passed either directly or indirectly via the Internet  to the content originator . The content originator  is the source or re-distributor of content objects. The content site  is a web site accessible by the end user system . In one embodiment, the content site  could be a web site where the content is viewable with a web browser. In other embodiments, the content site  could be accessible with application software other than a web browser. In this embodiment, the content provider  directs content requests to a CDN  after they are made or formulates the delivery path to the CDN  by embedding the delivery path into the URLs for a web page. In any event, the request for content is handed over to the CDN  by using an Anycast IP address corresponding to one, two or more POPs .","Once the request for a content object is passed to the CDN , the request is associated with a particular POP  within the CDN  using the Anycast routing scheme. The particular POP  may retrieve content object from the content provider  if not already within the CDN . Alternatively, the content provider  may directly provide the content object to the CDN  and its associated POPs  through pre-population or hosting in advance of the first request. The CDN servers include edge servers that actually serve end user requests. The origin server  holds a copy of each content object for the content originator . Periodically, the content of the origin server  may be reconciled with the CDN  through a cache, hosting and\/or pre-population algorithm. Some content providers  could use an origin server within the CDN  to host the content and avoid the need to maintain an accessible copy of the content object at the origin server  of the content originator .","Once the content object is retrieved from the origin server  by the CDN , the content object is stored in a manner accessible to the CDN to allow processing by that POP  to service the end user systems . For example, the content object could be stored on a brick . Streamed content objects can have real time or near real time information or can be previously stored. The end user system  receives the content object and processes it for use by the end user . The end user system  could be a personal computer, media player, handheld computer, Internet appliance, phone, IPTV set top, web server, processing system, streaming radio or any other device that receives and\/or plays content objects. In some embodiments, a number of the end user systems  could be networked together. Although this embodiment only shows a single content originator  and a single CDN , it is to be understood that there could be many of each in various embodiments.","Storage accessible to the CDN  includes bricks  in this embodiment. A brick  is any storage medium inside or outside the CDN  that is part of a content management architecture (CMA). The storage medium includes a layer of software to accommodate commands for the brick. Any storage array, network attached storage, drive, flash media, or other non-volatile memory could act as a brick  with the proper layer of software. In this embodiment, one of the end user systems - has a brick - coupled to it. The CDN  could store content on any brick  to implement a policy, regardless of whether the brick is internal or external to the CDN .","Other resources  are available to the CDN  to process content. Resources  can be internal or external to the CDN . A brick  is just a resource, but it is broken out separately since the processing it performs is largely limited to storage. Generally, a resource  is any hardware or software function that can store or process a content object. Examples include, transcoders, cryptographic processors, compression engines, content processors (e.g., image processors, video processors or audio processors), thumbnail generators, media syndication services, video\/audio ad insertion engines, video processing services, metadata insertion engines, or anything that can process content objects and can be interfaced with an API from the CDN . In this example, there is a first resource - available to the CDN  over the Internet  and a second resource - within the CDN , but it is to be understood there could be many more resources available to the CDN .","With reference to , a block diagram of an embodiment of a POP - is shown. There are both legacy edge servers  that don't natively support the CMA and edge servers  that do in this embodiment. Legacy edge servers  use a mapper transport  that supports the CMA to gather any content requested from CDN  and present the content like an origin server. The mapper transport  makes the calls necessary to locate the content and pass it to the legacy edge server . Requests are made to bricks  by the mapper transport  that acts as a reverse proxy to return the requested content. Typically, the software on the legacy edge server  does not require any rewriting to allow integration with the CMA because of the mapper transport .","The various edge servers ,  are coupled to each other and the Internet  and WAN  using switching fabric . Edge servers ,  number in the thousands in a given POP . The edge servers ,  could be divided by function and\/or customer. Loading algorithms can be used to divide load among the edge servers ,  in any number of ways. The edge servers  perform caching, streaming, hosting, storage, and\/or other functions within the POP . An edge server ,  is typically a rack-mounted computer that could have varying levels of processing power, memory and storage. Software running on the edge server ,  includes, for example, HTTP proxy caching, media servers, Flash\u2122 servers, Java\u2122 application servers, Silverlight\u2122 servers, etc.","The switching fabric  is used for several functions. Incoming requests for content objects are routed to the edge servers ,  using the switching fabric. This could be done using routing, redirection or domain name service (DNS). Load balancing, round-robin, and\/or other techniques could be used by the switching fabric  to route requests to edge servers , . Communication within the POP  also uses the switching fabric . Edge servers ,  could have multiple software applications running that communicate with other edge servers , .","There are legacy landing pads  and landing pads  supporting CMA. The legacy landing pads  use a legacy adapter  to integrate with the CMA. The legacy adapter  includes a portable operating system interface for Unix (\u201cPOSIX\u201d) adapter to allow backward compatibility to legacy landing pads . Many applications are designed to directly interface with the AMA without requiring the POSIX functionality of the legacy adapter . A universal namespace and directory space is provided by the legacy adapter  for the CMA to abstract the legacy storage interface from the native storage. There can be multiple landing pads ,  in multiple POPs  for a given customer to provide an ingest point for content objects.","A content directory  is provided for the CMA to allow locating, processing and storing content. The content directory  includes a metadata directory  and a content mapper . The metadata directory  manages through selection of resources and bricks that are members of tag and tagset groups, which resources and bricks are selected for particular processing task. The content mapper  is just a database storing UUID and corresponding path and filename along with the brick addresses that store the file referenced by a particular UUID. The health of bricks  and resources , metadata, tags, and other information is maintained by the metadata directory . All bricks  and resources  have various tags associate with them. For each tag or tagset, the bricks  or resources  that have that tag or tagset are known to the metadata directory  to allow selection of a brick  or resource  for a particular processing task performed on a content object.","The content mapper  is a distributed database or data structure that translates path and filename to a universal unique identifier (UUID). In this embodiment, the UUID is a 256-bit number that is randomly, pseudorandomly, sequentially, or unpredictably assigned to each content object file stored in the CDN . It is extremely unlikely that two files would have the same UUID and a check could be performed prior to assignment to be sure the UUID generated hasn't already been used within the CDN .","A policy reconciliation service (PRS)  maintains and processes policies. Each policy defines processing to perform on one or more content objects. The operation of a policy is affected by criteria based upon metadata and tags\/tagsets. Where there are multiple policies applicable to content, the PRS disambiguates the situation based upon a hierarchy or by picking the lowest or highest common denominator for the applicable policies.","Within each POP  or elsewhere in the CDN, there are a number of bricks  that store content objects and resources  that process the content objects. A policy can define the classes of bricks suitable for storage and the processing that a resource  would perform on a content object. Parameters are passed to a resource  using a mutator that is part of a policy.","With reference to , a block diagram of an embodiment of a POP - is shown. The edge servers  and landing pads  in this embodiment natively support the CMA without any translation or interfaces required. Calls are made to the content directory  to find the UUID for a content object and the brick names or identifiers that hold the content object. When storing content objects, the content directory  uses the tags and metadata to choose one or more bricks  that would store a particular content object.","With reference to , a block diagram of an embodiment that shows portions of a content management architecture (CMA) using legacy edge servers . This embodiment has only legacy edge hosts  and legacy edge caches  instantiated on the legacy edge servers . Other embodiments could additionally include edge caches and\/or edge servers that natively support the CMA.","When a content object or portion thereof is not found on the legacy edge server , reference to a mapper transport  is made. The mapper transport  acts as an origin server for all the content in the CMA. The mapper transport  interacts with the lookup listeners  to get names or addresses of the bricks  that hold the content object along with its UUID. The mapper transport  then proxies the content object back to the requesting legacy edge cache  or legacy edge host . The protocol and handshaking expected by the legacy edge cache  or legacy edge host  is performed by the mapper transport.","The metadata directory  and content mapper  collectively form the content directory . The metadata directory  translates a path and filename to a UUID when originally storing a content object. To find out a UUID or brick addresses, the path and filename is sent to the content mapper , by multicasting using multiple unicast channels to some or all the lookup listeners . The namespace is divided between the lookup listeners  in addition to having multiple alternative lookup listeners . Multiple lookup listeners  that receive the request will respond, but the requester only uses the first lookup listener  to respond. Where there are multiple lookup listeners distributed around the CDN, a distributed database protocol is used to keep all of them reconciled.","The mapper cabinet  stores the UUID and brick names or addresses for each path and filename combination. The lookup listener  queries the mapper cabinet  with the path and filename, to get the UUID for that path and filename that is returned with all the brick names that hold the content file. The lookup listener  with the answer passes the UUID and brick information back to the mapper transport . Where there are multiple bricks  with the UUID, the mapper transport  chooses one and confirms it is there. Additional, bricks  could be queried if unsuccessful. The mapper transport  proxies the content object back to the requesting legacy edge cache  or legacy edge host , but other embodiments could redirect the request directly to the brick .","With reference to , a block diagram of another embodiment that shows portions of a CMA. This embodiment uses edge caches  and edge hosts  that support the CMA. Where the content object is not found locally, the edge server  will request the path and file from the content mapper . Through multicast to the lookup listeners , one with the answer returns it after a query to its respective mapper cabinet . The edge server  can make an educated guess on what lookup listeners  are likely to respond first instead of querying all of them within the CDN each time. The guess could be based upon which returned answers quickly in the past or based upon an estimate of the closest ones in a network sense.","The UUID and brick names or addresses are returned by the content mapper  to the edge server . The edge cache  or edge host  can directly request the content object from a brick address by providing it the UUID. Where there are multiple bricks with the content object, they could be queried according to different schemes, for example, querying in parallel or sequentially. The bricks  may be inside or outside the CDN . Where a name of a brick is returned instead of an address, a domain name lookup service could be used to find the address.","Referring next to , a block diagram of an embodiment of a content brick  is shown. A brick  is connected to the switching fabric  in some way to be managed the CMA. The brick daemon  is a software layer that is between the switching fabric  and the native file interface  to translate communication with the CMA to allow storage on the native storage . Since there are many native file interfaces and host platforms, the brick daemon  is customized for the host platform. This embodiment of the brick daemon  only does translation, but other embodiments could perform authentication and\/or encryption. Files are stored on the native storage  with the UUID as the file name.","Referring next to , a block diagram of an embodiment of a resource  is shown. The resource  could be any hardware or software that processes a content object. A resource API  receives mutators and other commands. The resource API  interfaces with a native resource interface  to command a native resource  to perform processing on a content object. In some cases, the resource  has a native API the is suitable for integration with the CMA without the need for a resource API layer.","With reference to , a block diagram of an embodiment of the PRS  interacting with a metadata directory  is shown. The PRS  includes a policy manager  that controls a policy compiler, a policy store , and a policy mapping store . The policy compiler  performs disambiguation to resolve conflicts when multiple policies apply to the same content object. Conflicts can be resolved by a hierarchical scheme where policies higher in the hierarchy take precedence. In another embodiment, the policy compiler chooses the most or least stringent of the conflicting policies. For example, a policy that requires all JPEG files be deleted after two weeks and another policy that requires all files to be deleted when not requested for a day could be resolved either most stringently to delete the JPEG file after not being used for a day or least stringently to be deleted after two weeks. Additionally, any syntax errors in the policies are found and identified by the policy compiler .","The policy store  holds all the policies in the CMA. The policies are applicable to many customers and each have various levels of alterations for a particular customer. There are policies for ingest, replication, hosting, transcoding, encryption, compression, thumbnailing, various workflows, aging content in\/out of system, and other processing for a content object. Each policy is a function with defined with PRS parameters that include criteria, variables, storage disposition and optional mutators. Table I below shows examples of some policies with the PRS parameters that implement the policy and the variables used. For example, a transcode policy retrieves a source URL and places it in an intake subdirectory for the transcoder. The transcoder performs any number of different transcodes on the source files as specified and stores the resulting files as the specified transcode URLs.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Ingest and Hosting Policies"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Policy","PRS Parameters","Variable(s)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Ingest","Ingest API","Origin URL, Content Tags,"]},{"entry":[{},"Information","Transcode Options,"]},{"entry":[{},{},"Storage Options, Purge Date"]},{"entry":[{},"Transcoder","Transcode Options, URL,"]},{"entry":[{},"Format(s)","Content Tags"]},{"entry":[{},"Store File(s)","File Name, Storage Options"]},{"entry":[{},"Automatic Purging","Purge Date"]},{"entry":["Replication","File Copy","Number of Copies, Content"]},{"entry":[{},{},"Tags, Infrastructure Tags"]},{"entry":["Transcode","Retrieve Source","Source URL"]},{"entry":[{},"n Transcodes","Transcode Options, Different"]},{"entry":[{},{},"Transcodes, Source URL, Content"]},{"entry":[{},{},"Tags"]},{"entry":[{},"Store Results","Transcode URLs"]},{"entry":["Host","Hosting API","Origin URL, Content Metadata,"]},{"entry":[{},"Information","Customer Metadata,"]},{"entry":[{},{},"Storage Options, Purge Date"]},{"entry":[{},"Store File(s)","Stored URL, Storage Options"]},{"entry":[{},"File Aging","Purge Date"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Policies are preformulated or custom designed by content providers or content receivers. The policy could be in any format (e.g., XML, text, etc.) and could be command line instructions, run-time executed source code or compiled into object code. Policies can age into or out of system. A PRS parameter acts as an instruction in a CDN-specific programming language. A policy can be assigned to an end user who receives content, a customer who provides content, a content object, a class of content objects, a directory, and\/or any other tag or metadata demarcation.","Criteria for a policy define its applicability to the content objects in the CMA. Criteria allow size-based processing, MIME type workflows, or any metadata or tag qualifier before performing the policy. For example, a compression policy could be applied to a particular MIME type stored in a particular POP that has not been requested for some period of time.","Each policy has PRS parameter that defines a disposition for the content object to be performed after any processing. The disposition can say what type bricks  or resources  to use. The number of copies of the content object to have and what geographic spread to place on those copies can also be defined. A deletion date can be defined in the PRS parameter.","A mutator indicates a resource  that will process the content object. The API to the resource typically includes the source path and filename for content file and any number of variable that affect processing by the resource . The mutators are in the form of a URL in this embodiment, but other embodiments could use any format. The mutator URL identifies the address of the resource , a source content object location that is being operated upon and a number of variables. The mutator URL can perform conditional actions based upon prior mutators and\/or variables.","The functionality of a policy is demonstrated with an example thumbnailing policy that uses a thumbnailing resource to create thumbnail images for an image content object. In this example, the policy would store any files which end in the file name extension is \u2018jpg\u2019 in three different locations. One of the locations is in the European Union and two are stored in the United States. Once all copies have been made, a call to the thumbnailer resource  is made, which generates a small thumbnail image of the source JPEG file that is stored in a predetermined location. The thumbnailer resource  uses the pathname of the source JPEG file as well as its size in bytes passed as variables in the mutator URL. The thumbnailer resource  is an HTTP-based API which is called with this URI: http:\/\/www.imagetransform.org\/thumbnailer?path=<full path to source image>&size=<size of image>. The resource is located at the address of the imagetransform.org domain, which may or may not be within the CDN .","In this example, all known bricks  have infrastructure tags  for their geographical locations (e.g., city, metropolitan area, country, supranational entity). For example, a brick  in London would be tagged with the tags LONDON, UK, EU, and EMEA. A brick in  Paris would be tagged with PARIS, FRANCE, EU, and EMEA. A brick  in Chicago would be tagged CHICAGO, IL, USA, NA, and AMERICAS, and so on.","The one or more databases or data structures hold the infrastructure tags and tagsets  and addresses of all bricks  or resources  that comply with each tag or tagset. The tagset could be named to be the same as the tag, by convention, i.e., LONDON, USA, etc. Tagsets could be conjunctions of two or more tags. For example, a tagset called LOND-HPERF could contain both the LONDON and HIGH-PERFORMANCE tags. A query to the metadata service  for a given tag or tagset would return all bricks  and resources  that have the tag(s).","All known bricks  or other resources  are arbitrarily grouped with a tagset having any number of tags. For geographic tags, a brick  cannot be in London and somewhere else at the same time, so generally a geographic tag are not conjoined with other geographic tags in a tagset. Not all the tags which exist need to be in a tagset\u2014some might be reserved for future use. Similarly, not all tagsets need be utilized in any policy.","This example policy is expressed in a pseudo language below as four PRS parameters. The first PRS parameter is the policy name. For the second PRS parameter, one or more criteria can be specified as positive or negative logic to test for a condition before applying the policy. In this example, the criteria defines applicability to content files of the JPG MIME type. The disposition in the third PRS parameter is the storage conditions specifying tags and the minimum number of copies.","Policy: \u201cExamplePol\u201d","Criteria: [{name=\u2018.*.jpg$\u2019}]","Disposition: [{Tagset=\u201cUSA\u201d, MinBricks=2}, {Tagset=\u201cEU\u201d, MinBricks=1}]","Thumbnail Mutator=[http:\/\/www.imagetransform.org\/thumbnailer?path=%p&size=%s]","In order to decide the applicability of this policy, the PRS  would first would look at the name extension of the file as a criteria. If it matches the regular expression \u2018.*.jpg$\u2019 (that is, it ends with the text \u2018jpg\u2019), then this policy applies. Any other files would not be deemed to be covered by this policy.","When executing the policy, the PRS  would select two bricks which have all the tags in the tagset USA, and one brick from the set which have all the tags in tagset EU. The bricks could be chosen by any criteria such as randomly, round robin, available space, cost of storage, proximity in network terms, bandwidth cost to transport the file, etc. Once three receipts come back from those bricks marked COMPLETE, the source JPEG file itself goes into the COMPLETE state, and the thumbnail mutator in the PRS parameter list gets called, substituting the metavariables % p with the full path to the object, and % s with the size in bytes of the image object. Other policies could have any number of mutators for storage, transcoding, replication, or other processing for a file or asset.","The policy mapping store  records which policies are mapped to various levels of the hierarchy. Various embodiments could map policies to the national jurisdiction, regional jurisdiction, CDN-wide, POP-applicable, customer, sub-customer, directory, sub-directory, MIME-type, individual file, etc. to achieve any level of granularity. , B and C, show embodiments of a different policy prioritization hierarchies . Each block represents a level in the hierarchy and can have a number of policies assigned to it. The policies for a particular level can be organized in a priority as between the others at that level. Policies in a higher block take precedence over those in a lower block during the disambiguation processes performed by the policy compiler . The present embodiment only has two levels in the hierarchy as illustrated in . Some policies disassociate themselves with a particular level of the hierarchy once performed. For example, a policy could be used to update coding on the content library from a legacy format where all new content is received in the updated coding. After running the policy once, it can be disassociated from the customer with a PRS parameter in the policy that removes the association in the policy mapping store .","The directory structure  for this example is illustrated in  where each customer has a directory with optional subdirectories. Each directory or subdirectory can hold file names  for content objects of the customer. The directory structure  is stored in the metadata directory  in this embodiment. Table II shows an example of a portion of the policy mapping  for the hierarchy in  and the directory structure of . The \/ZBS_Radio client has subdirectories for \/streams and \/podcasts. All the files in the \/ZBS_Radio\/streams path has both ingest and host policies that are applied, while all the files in the \/ZBS_Radio\/podcasts path has ingest, transcode and host policies that are applied.",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE II"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Policy Mapping"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Directory","Subdirectory","File","Policy"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["ABS Movie","\u2014","\u2014","Ingest, Replication,"]},{"entry":["Channel",{},{},"Host"]},{"entry":[". . .",". . .",". . .",". . ."]},{"entry":["ZBS Radio","Streams","\u2014","Ingest, Host"]},{"entry":[{},"Podcasts","\u2014","Ingest, Transcode,"]},{"entry":[{},{},{},"Host"]},{"entry":["Realure","\u2014","Silverthorne","Ingest, Replication"]},{"entry":["eBooks",{},"Trails.epub"]},{"entry":[{},{},"Keystone","Ingest, Replication"]},{"entry":[{},{},"Boarding.epub"]},{"entry":[{},{},"Aventneer.epub","Ingest"]},{"entry":[{},{},"Aventneer","Ingest, Replication,"]},{"entry":[{},{},"Audio.mp3","Transcode"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"A UUID generator  assigns a 256 bit code to each path and filename stored in the CMA. The UUID becomes the file name for content objects stored with the various bricks  associate with the CMA. The UUID is a one-way function in that the path and file name cannot be determined from the UUID alone, but a query to the mapper cabinet  can give the bricks storing a particular UUID and the path and file name.","The metadata directory  maintains metadata, tags and tagsets that are used by the policies to process content objects. There is customer metadata  describing details about the customer. The customer metadata  is entered when the customer configures their account with the CDN and includes account holding personal information, account, any sub-account(s), zone, channel, confidentiality level, etc. The directory and subdirectory structure for a customer is stored in the directory structure  in this embodiment, but could be stored with other customer metadata  in other embodiments.","Also stored is user metadata  that is discerned about the end user . Typically, the end user  does not intentionally interface with the CDN  so the user metadata  is largely discerned indirectly. Metadata includes usage habits, content preferences, demographic information, user identifier, POP location receiving request, and end user system location. The content player, IP address, cookies or other techniques may be used to discern one user from another. Privacy concerns can limit the availability of user metadata .","Infrastructure tags and tagsets  are assigned to bricks  and resources . The number of tags increase as customers want greater granularity in applying policies. Infrastructure tags include: carbon use, energy use, storage type (e.g., solid state, magnetic, optical, spinning, tape), equipment manufacturer, reliability (e.g., dual-location replication, RAID level, tape archive), write only, write once, interface speed (e.g., SATA, SAS, Ethernet, 10 Gb), retrieval latency, storage cost, physical security surrounding equipment, geographical location of content, various performance discriminators, equipment location to city, region, or country, POP, IPV4 or IPV6 compatibility, CDN hosted, user hosted, level of QoS. The tags can be applied to bricks and resources regardless of them being inside or outside the CDN .","Content metadata  relates to content objects with the CMA. The content metadata  can additionally be stored in the content object itself and\/or its file name. The content metadata includes MIME type, encoding, container format, copyright terms, cost terms, copyright year, actors, director, studio, program summary, content rating, critical review ranking, title, transcript, ad insertion locations, encryption, request popularity, etc. Some content metadata  is not stored in the database or store, but is discerned through interaction with the content file. For example, MIME type is readily discernable from the file itself without refereeing the content metadata  in the store or database.","Bricks  and resources  are expressly enrolled to work with the CMA. A registration interface  is used to enter the address or domain name for the brick  or resource  that is stored in a brick\/resource information store . The bricks  and resources  periodically report health and status information through a report interface  that is also stored in the brick\/resource information store . The metadata directory  can periodically request status and health information using the report interface  or can test the brick  or resource . Where calls to the brick  or resource  fail or perform poorly, the brick\/resource information  can be updated to reflect status.","With reference to , a swim diagram of an embodiment of a process for using the CMA to retrieve a content object with a legacy edge server  is shown. The depicted portion of the process begins in block  where the end user system  requests a file from an the legacy edge server . Where the legacy edge server  cannot fulfill the request, the file is requested from the mapper transport  in block . The request from the legacy edge server  is typically a URL which is converted by the mapper transport  in block . A multicast query is made to the lookup listeners  in block  that is received in block . To achieve parallel requests to the lookup listeners , multiple unicast requests are made overlapping in time.","In block , a query is made from the lookup listener  to the mapper cabinet . The first lookup listener  to find the result in its respective mapper cabinet , responds to the mapper transport  with the brick addresses and UUID in block  that receives them in block . The mapper transport  determines which of the brick addresses to use where there are multiple ones in block . The determination can be random or according to some other scheme. The UUID is requested from the address of the selected brick in block . If unsuccessful as determined in block , another address is attempted by looping back to block .","Where the file with the UUID for the name is found on the brick , the file is renamed and sent to the legacy edge server  in block . The file is received in block  and returned to the end user system  in block . In this way, the CMA is used like an origin server by any legacy process with the mapper transport  translating the interaction.","Referring next to , a swim diagram of another embodiment of a process for using the CMA to retrieve a content object is shown. This configuration does not use the mapper transport  as the edge server  knows how to interact with the content directory  directly. In block , a request for a file is made by the end user system  to the edge server . The path and filename is requested using multicast to the lookup listeners , where the content object is not found on the edge server  in block . The content directory  receives the request in block , determines or looks-up the UUID in block  and the brick names in block  from the mapper cabinet  to respond first with the answer.","The brick addresses and UUID are sent by the content directory  in block  and received by the edge server  in block . The edge server  determines which brick address to try first in block  before requesting that UUID from the brick  in block . If not found in block , another brick address is attempted by looping back to block . Where the file is found in block , it is renamed and returned to the end user system  in block .","With reference to , a flowchart of an embodiment of a process  for applying policies to a content object is shown. The depicted portion of the process begins in block , where the customer account, services and policies are configured, which is explained in greater detail in relation to  below. In block , a content object file is received from the customer using a landing pad ,  or other API. Some embodiments can add content object files when requested from the CDN  and are located after a cache miss. Other embodiments can designate a path that is automatically reconciled with the CDN  using a policy.","Some policies are triggered by an action such as intake, user request, or other action that would affect the content object file. Other policies are run periodically or according to a schedule, for example, checking a directory for newly encoded files and moving the file back out to the origin server  of the content originator . In any event, the potential policies are determined in block , which is explained in greater detail in relation to . The policies generally applicable to the content file is determined by analysis of all policies associated with the hierarchy  in block . Where there are more than one policy, a disambiguation process is performed by the policy compiler  to find the policy that has the highest priority.","In block , the policy is interpreted and performed. The policy is represented as a number of PRS parameters that are interpreted to perform some processing on the content object file. The functionality of block  is explained in greater detail in relation to  below. If there are more policies applicable to the content object file that are still waiting to complete as determined in block , processing loops back to block . The just performed policy may have changed the content object file such that it qualifies for more or less policies so that is reanalyzed in block . At some point, it is determined block  that all policies have been performed and the normal operation of the CDN  utilizes the content object file in its processed form is performed in block .","Upon changes to user, customer or content metadata , ,  referenced in the applicable policies or tags  associate with where a content object file is stored, the policies are run again. For each content object, the relevant input metadata , ,  or tags  used in the policies are tracked. Where there are changes to any of the metadata , , , tags  or policies as determined in block , processing loops back to block  to rerun the policies.","Referring next to , a flowchart of an embodiment of a process  for configuring a customer account is shown. The depicted portion of the process begins in block  where the customer connects to the CDN  and authenticates their identity. Certain demographic and payment options may be entered along with customer metadata . In block , a landing pad  is selected and customized. A landing pad  is an ingest point and can be configured in any number of ways to efficiently provide content objects to the CDN .","In block , the customer can choose the number of POPs and\/or their location that will host the landing pad. The customer can select that each POP would have an instantiated landing pad  or instantiate one upon request. To provide for high volume accounts, there can be a number of landing pads per POP that even scales up or down with demand. The customer can design the directory structure  for their account by renaming directories and adding sub-directories nested down any number of levels in block .","The customer can customize policy templates, design new policies or modify their existing policies in block . The policies are mapped to the hierarchy  in block . Where there are multiple policies for a particular level in the hierarchy, they are put in order of importance to allow resolving potential conflicts during disambiguation. In block , the landing pads  start normal operation at the selected POP(s) . The directory structure and loaded files for the customer can be viewed and modified through the landing pad in block .","With reference to , a flowchart of an embodiment of a process  for disambiguation of policies is shown. The process  is best understood in reference to one hierarchy from , B or C. The depicted portion of the process  begins in block  where all policies possibly applicable to the file are found throughout the hierarchy. The policies are all prioritized in block . The tags, metadata and criteria of the PRS parameters in the policies are gathered in block . Criteria can and other filters in the policies can make many policies irrelevant to a particular content file.","In block , the inapplicable and conflicting policies are removed from the list. Each policy has a criteria that may make the policy inapplicable to the file. Additionally, there can be conflicting policies where the lower priority policy is removed. The policy compiler  also checks for syntax errors or other problems in block . The invalid policies are removed from the list in block . The list of potential policies are known at the point so that the highest priority can be executed.","With reference to , a flowchart of an embodiment of a process  for performing a policy is shown. The depicted portion of the process begins in block  where the policy compiler  checks the policy for errors prior to running the policy after being loaded by the policy manager . The policy manager  checks the policy for any criteria identified in a PRS parameter. Where there is a criteria, a determination is made in block  to see if the criteria is satisfied to allow further evaluation of the policy. Should the criteria exclude further processing, processing passes from block  to block  where processing of the policy is complete.","Should the policy criteria be satisfied in block , processing continues to  to see if there is a mutator PRS parameter in the policy. Where there is no mutator, processing goes to block  where the content object a disposition PRS parameter defines how the resulting content object is stored. The storage may be dependent on variables, metadata and\/or tags. The metadata directory  can be queried for bricks  that comply with a given tag that can be specified in the disposition PRS parameter to find the one or more bricks  to use. For example, the disposition could be to store the content object in three locations with a USA tag. A query would be made to the metadata directory  and it would choose three from all the bricks  with the USA tag and specify those bricks . The policy manager  would write the content object to the addresses specified by the metadata directory . Where there is one or more mutators as determined in block , processing continues to block .","In block , the address of the resource is parsed from the mutator URL. Where the address is a domain name, that is resolved to an IP address using a domain name service (DNS). The resource  API uses a URL in this embodiment so that requesting the URL in block  passes the source file location and other embedded variables. In some embodiments, the mutator specifies a group of resources that comply with a tag. The metadata directory  is queried to choose from the group of resources with the tag and return the address of the particular resource to use. For example, the mutator may specify using a transcoder service in Russia. The metadata directory would find all transcoder services with a Russia tag and return one. The one chosen could be random, round robin, based upon loading status from the resource information database  or some other algorithm.","The resource  parses the source file location from the URL in block . The content object is retrieved by the resource  in block . In block , the resource  performs the requested processing according to any other variables passed in the URL or other API. If there is another mutator in the policy as determined in block  processing loops back to block  for processing. Where it is determined in block  that there are no additional mutators in the policy, processing goes to block  for execution of the disposition PRS parameter. In this way, a policy is performed to process a content object file.","Referring next to , a flowchart of an embodiment of a process  for enrolling a resource  or brick  into the CMA is shown. The metadata directory  knows addresses for the enrolled resources  and bricks  along with the infrastructure tags  associate with each. The depicted portion of the process  begins in block  where a new resource  or brick  is identified for inclusion in the CMA. A unique identifier or name or an address is assigned to the resource  or brick  in block . The address can be a virtual one that is resolved through DNS. Infrastructure tags for the new enrollee are entered into the CMA in block .","The resource  or brick  is added to the tag or tagset groups in block . A query for a tag or tagset can quickly return all the addresses for resources  or bricks  by arranging those groups beforehand. The resource is added to the CMA by being coupled to the switching fabric  even though it may be inside or outside the CDN . Periodically, when polled or according to a schedule, the resource  or brick  reports health and other status to the metadata directory  in block  for retention in the resource information store . The metadata directory  can avoid assigning new content objects to a resource  or brick  that is less healthy or more overloaded than the other members in the tag or tagset group.","With reference to , a flowchart of an embodiment of a process  for delivering a content object using the CMA is shown. The depicted portion of the process begins in block  where the end user system  queries for content from the CDN . Through Anycast, redirection, switching, or DNS resolution, the request finds its way to a \u2018nearby\u2019 POP . Closeness is a function of network proximity which generally corresponds to geographic proximity, but not necessarily so.","In block , a caching or hosting edge server  is assigned. Where the edge server  cannot satisfy the request locally, a request is made to the CMA for the content object. Through the process outlined in  above, the resource  or brick  is located and the content is relayed or proxied to the edge server  in block . In block , the edge server fulfils the request. The end user plays the content in block .","Referring next to , a flowchart of an embodiment of a process - for elastically managing propagation of content objects is shown. This workflow is implemented with the CMA using various policies to scale-up or scale-down the propagation of content objects in a fluid manner. The depicted portion of the process  begins in block  where a policy measures popularity content metadata  for a content object. A counter in the CDN tracks the popular content and updates the content metadata  in the metadata directory  accordingly. Popularity could be measured on a scale of one to one hundred with the most popular being at one hundred and the least popular being at one. The policy measures acceleration in popularity by keeping a number of past data points for the content objects.","In block , the quickest changes are addressed by adding the name of the content file to a list in a policy. The footprint algorithm could be run separately in each POP  to measure local popularity or could be run to measure popularity in all POPs . The footprint is a function of how many requests are likely, the size of the content object, the QoS desired for delivery, and the level of CDN service ordered by the customer. In block , the policy is passed variables that manage propagation of the content objects to accomplish a desired footprint. The variables would updates a disposition PRS parameter accordingly in the policy.","In block , the policy implementing the footprint change for the content objects experiencing the quickest changes is performed by the policy manager . The bricks  to store or delete in each tag or tagset group are determined in block . The tag and tagsets chosen as criteria define the footprint even though the metadata directory  chooses the individual bricks  that have the tag or tagset assigned to it. The policy adds or deletes copies of the content objects with the highest acceleration accordingly.","Referring next to , a flowchart of an embodiment of a process - for elastically managing propagation of content objects is shown. Unlike the embodiment of , this embodiment measures the velocity as a function of the popularity metadata. When the velocity changes, a policy triggers a reevaluation of the footprint in block . The velocity may have to change by a certain percentage before triggering the reevaluation or may be checked periodically. Other embodiments could measure poor QoS feedback from end user systems  or complaints before modifying the footprint in block . When the footprint changes, processing continues through the remainder of the blocks in a manner similar to .","With reference to , a flowchart of an embodiment of a process  for using policies to change the jurisdiction used to process a content object is shown. The POP  where the content object lands can be different from where it is processed and stored. Policies are used to accomplish customized processing for the different movements of a source file and its various processed versions. Resources  or bricks  may be less costly or underutilized in different parts of the CDN . For example, transcoder resources in India could be underused in the middle of the day in the United States due to the time differences. A policy could move transcodes to resources  in India.","The depicted portion of the process  begins in block  where the customer manually or automatically provides the content object to a landing pad  in one jurisdiction. A jurisdiction could be any legal, geographical or political boundary in this embodiment. The demarcations of a jurisdiction can be a custom geography perhaps defined in a license or other agreement. It is determined in block  that a jurisdictional policy is active and applicable to the content object. In block , the jurisdictional domain to perform the processing defined in the policy is determined. The processing could be a resource  and\/or a brick . The content object is sent to brick  and\/or resource  in target jurisdictional zone or domain. In block , the content object is processed in the chosen jurisdictional zone .","In block , the disposition PRS parameter defining how to store the content object is analyzed. The jurisdictional zone for storage of the processed file can be different from the jurisdictional zone that received the file and processed the file. Bricks  with the proper tags or tagsets of the jurisdictional zone are selected from to assign individual bricks . In other examples, the policy may require that certain files be processed in the same jurisdictional zone as received. Further, embodiments may require receipt, processing and storage to be in the same jurisdictional zone. Without a policy restricting movement, processing and storage could choose resources and bricks outside the jurisdictional zone based upon, for example, those resources and bricks being under utilized.","A number of variations and modifications of the disclosed embodiments can also be used. For example, the above embodiments have a particular arrangement of the CMA, but blocks could be combined or split in any manner to still achieve the same functionality. Additionally, portions of the CMA could reside outside of the CDN. For example, the PRS, metadata directory, and\/or content mapper could be maintained outside of the CDN.","Specific details are given in the above description to provide a thorough understanding of the embodiments. However, it is understood that the embodiments may be practiced without these specific details. For example, circuits may be shown in block diagrams in order not to obscure the embodiments in unnecessary detail. In other instances, well-known circuits, processes, algorithms, structures, and techniques may be shown without unnecessary detail in order to avoid obscuring the embodiments.","Implementation of the techniques, blocks, steps and means described above may be done in various ways. For example, these techniques, blocks, steps and means may be implemented in hardware, software, or a combination thereof. For a hardware implementation, the processing units may be implemented within one or more application specific integrated circuits (ASICs), digital signal processors (DSPs), digital signal processing devices (DSPDs), programmable logic devices (PLDs), field programmable gate arrays (FPGAs), processors, controllers, micro-controllers, microprocessors, other electronic units designed to perform the functions described above, and\/or a combination thereof.","Also, it is noted that the embodiments may be described as a process which is depicted as a flowchart, a flow diagram, a data flow diagram, a structure diagram, or a block diagram. Although a flowchart may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be re-arranged. A process is terminated when its operations are completed, but could have additional steps not included in the figure. A process may correspond to a method, a function, a procedure, a subroutine, a subprogram, etc. When a process corresponds to a function, its termination corresponds to a return of the function to the calling function or the main function.","Furthermore, embodiments may be implemented by hardware, software, scripting languages, firmware, middleware, microcode, hardware description languages, and\/or any combination thereof. When implemented in software, firmware, middleware, scripting language, and\/or microcode, the program code or code segments to perform the necessary tasks may be stored in a machine readable medium such as a storage medium. A code segment or machine-executable instruction may represent a procedure, a function, a subprogram, a program, a routine, a subroutine, a module, a software package, a script, a class, or any combination of instructions, data structures, and\/or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and\/or receiving information, data, arguments, parameters, and\/or memory contents. Information, arguments, parameters, data, etc. may be passed, forwarded, or transmitted via any suitable means including memory sharing, message passing, token passing, network transmission, etc.","For a firmware and\/or software implementation, the methodologies may be implemented with modules (e.g., procedures, functions, and so on) that perform the functions described herein. Any machine-readable medium tangibly embodying instructions may be used in implementing the methodologies described herein. For example, software codes may be stored in a memory. Memory may be implemented within the processor or external to the processor. As used herein the term \u201cmemory\u201d refers to any type of long term, short term, volatile, nonvolatile, or other storage medium and is not to be limited to any particular type of memory or number of memories, or type of media upon which memory is stored.","Moreover, as disclosed herein, the term \u201cstorage medium\u201d may represent one or more memories for storing data, including read only memory (ROM), random access memory (RAM), magnetic RAM, core memory, magnetic disk storage mediums, optical storage mediums, flash memory devices and\/or other machine readable mediums for storing information. The term \u201cmachine-readable medium\u201d includes, but is not limited to portable or fixed storage devices, optical storage devices, wireless channels, and\/or various other storage mediums capable of storing that contain or carry instruction(s) and\/or data.","While the principles of the disclosure have been described above in connection with specific apparatuses and methods, it is to be clearly understood that this description is made only by way of example and not as limitation on the scope of the disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present disclosure is described in conjunction with the appended figures:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 7 and 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 12A","b":["12","12"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 16A and 16B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
