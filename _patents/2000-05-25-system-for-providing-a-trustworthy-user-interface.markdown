---
title: System for providing a trustworthy user interface
abstract: The preferred embodiment of the invention comprises a computer system which employs a trusted display processor (), which has a trusted processor () and trusted memory () physically and functionally distinct from the processor and memory of the computer system. The trusted display processor () is immune to unauthorised modification or inspection of internal data. It is physical to prevent forgery, tamper-resistant to prevent counterfeiting, and has crypto functions () to securely communicate at a distance. The trusted display processor () interacts with a user's smartcard () in order to extract and display a trusted image, or seal (), generate a digital signature of the bitmap of a document image and control the video memory () so that other processes of the computer system cannot subvert the image during the signing process. The user interacts with the trusted display processor via a trusted switch ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07302585&OS=07302585&RS=07302585
owner: Hewlett-Packard Development Company, L.P.
number: 07302585
owner_city: Houston
owner_country: US
publication_date: 20000525
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION, & INDUSTRIAL APPLICABILITY"],"p":["The subject matter of the present application may also be related to the following U.S. patent applications: \u201cSystem for Digitally Signing a Document,\u201d Ser. No. 09\/979,904, filed Nov. 27, 2001; and \u201cIdentifying a Trusted Computing Entity,\u201d Ser. No. 10\/162,020, filed Jun. 3, 2002.","The present invention relates to apparatus and methods for providing a user interface in a system, and in particular a user interface which provides a user with a high degree of confidence that the system is operating in a trustworthy fashion.","Conventional prior art mass market computing platforms include the well-known personal computer (PC) and competing products such as the Apple Macintosh\u2122, and a proliferation of known palm-top and laptop personal computers. Generally, markets for such machines fall into two categories, these being domestic or consumer, and corporate. A general requirement for a computing platform for domestic or consumer use is a relatively high processing power, Internet access features, and multi-media features for handling computer games. For this type of computing platform, the Microsoft Windows\u2122 95 and 98 operating system products and Intel processors, so-called WinTel platforms, dominate the market.","On the other hand, for business use, there are a plethora of available proprietary computer platform solutions available aimed at organizations ranging from small businesses to multi-national organizations. In many of these applications, a server platform provides centralized data storage, and application functionality for a plurality of client stations. For business use, other key criteria are reliability, remote access, networking features, and security features. For such platforms, the Microsoft Windows NT 4.0\u2122 operating system is common, as well as the UNIX and, more recently, the Linux operating systems.","Windows-type operating systems allow a user to run separate applications in separate windows, and provide a so-called WIMP (windows, icons, menus and pointers) interface, whereby a user typically interacts with applications using a keyboard to enter data and a mouse to select options and control applications via dialog boxes and drop-down (or pull-up) menus.","With the increase in commercial activity transacted over the Internet, known as \u201ce-commerce\u201d, there has been much interest in the prior art on enabling data transactions between computing platforms, over the Internet. In particular, it is perceived to be important for users to be able to enter into binding contracts over the Internet, without the need for the current standard hand-signed paper contract. However, because of the potential for fraud and manipulation of electronic data, in such proposals, fully automated transactions with distant unknown parties on a wide-spread scale as required for a fully transparent and efficient market place have so far been held back. The fundamental issue is one of trust between users and their computer platforms, and between interacting computer platforms, for the making of such transactions.","There have been several prior art schemes which are aimed at increasing the security and trustworthiness of computer platforms. Predominantly, these rely upon adding in security features at the application level, that is to say the security features are not inherently embedded in the kernel of operating systems, and are not built in to the fundamental hardware components of the computing platform. Portable computer devices have already appeared on the market which include a smartcard, which contains data specific to a user, which is input into a smartcard reader on the computer. Presently, such smartcards are at the level of being add-on extras to conventional personal computers, and in some cases are integrated into a casing of a known computer. Although these prior art schemes go some way to improving the security of computer platforms, the levels of security and trustworthiness gained by prior art schemes may be considered insufficient to enable widespread application of automated transactions between computer platforms. Before businesses expose significant value transactions to electronic commerce on a widespread scale, they will require greater confidence in the trustworthiness of the underlying technology.","In the applicant's co-pending International Patent Applications \u2018Trusted Computing Platform\u2019 PCT\/GB 00\/00528, filed on 15 Feb. 2000, and \u2018Smartcard User Interface for Trusted Computing Platform\u2019 PCT\/GB 00\/00752, filed on 3 Mar. 2000, the entire contents of which are incorporated herein by reference, there is disclosed a concept of a \u2018trusted computing platform\u2019 comprising a computing platform which has a \u2018trusted component\u2019 in the form of a built-in hardware component. Two computing entities each provisioned with such a trusted component may interact with each other with a high degree of \u2018trust\u2019. That is to say, where the first and second computing entities interact with each other the security of the interaction is enhanced compared to the case where no trusted component is present, because:\n\n","While the concept of a trusted component as described in the co-pending application goes a long way to providing to a user with a substantial degree of trust in a computer platform, there are still times when the user requires an even higher degree of trust in his equipment, for example during an electronic transaction, such as digitally signing a document, or transferring funds from the platform to a remote platform.","As has been indicated above, the conventional method of signing a document is to physically write a signature on the medium (usually paper) upon which an image of a document is reproduced. This method has the advantages that it is clear what is being signed, and the signed image is proof of what was signed. However, it does not meet the needs of e-commerce.","Nowadays it is also possible to digitally sign a document, using a conventional computer platform and standard encryption techniques. In conventional computer platforms, however, the present inventors have appreciated that the electronic rendition of a document which is digitally signed is typically not the same rendition of the document that is visible to the user. It is therefore possible for a user to unintentionally sign data that is different from that which he intended to sign. Conversely, it is also possible for a user to intentionally sign data and later fraudulently claim that the signed data does not correspond to that displayed to him by the computer platform. Such problems would still be the present, even if a trusted platform, as described above, were used.","Conventional electronic methods of signing are well known to those skilled in the art. Essentially, digital data is compressed into a digest, for example by the use of a hash function. Then that digest is encrypted by the use of some encryption method that has been initialised by a secret key (or simply a \u2018secret\u2019). This is normally done on a computer platform, such as a PC. One implementation is to sign data using a private encryption key held secret on a user's smartcard, which is plugged into a smartcard reader attached to the computer platform. In the specific case of a textual document, the digital data may be the file produced by a word processor application, such as Microsoft's Notepad, Wordpad, or Word. As usual, the act of signing implies that the signer accepts some legal responsibility for the meaning of the data that was signed.","Hash functions are well-known in the prior art and comprise one way functions which are capable of generating a relatively small output data from a relatively large quantity of input data, where a small change in the input data results in a significant change in the output data. Thus, a data file to which is applied a hash function results in a first digest data (the output of the hash function). A small change e.g. a single bit of data in the original data file will result in a significantly different output when the hash function is reapplied to the modified data file. Thus, a data file comprising megabytes of data may be input into the hash function and result in a digital output of the order of 128 to 160 bits length, as the resultant digest data. Having a relatively small amount of digest data generated from a data file stored in the reserved directory is an advantage, since it takes up less memory space and less processing power in the trusted component.","During known signing processes, a user will typically interpret a document as it has been rendered on the computer's monitor at normal magnification and resolution. In existing applications, the user's smartcard signs data in a format that is the representation of the document by the application used to create and\/or manipulate the document. The present inventors believe, however, that there is potential for software to send data to the smartcard that has a different meaning from that understood by the user when viewing the screen. This possibility may be sufficient reason to introduce doubt into the validity of conventional methods of digitally signing electronic representations of documents that are to be interpreted by people.","The present invention aims to provide a user with greater trust during a trusted operation by providing a trusted user interface.","In accordance with a first aspect, the present invention provides a data processing system capable of operating in a trusted operating mode, the data processing system comprising:","main processing means for executing at least one application process;","a trusted component comprising means for executing a trusted process in a trusted operating mode and means for generating user feedback signals;","at least one user feedback device; and","user feedback processing means for receiving said user feedback signals and controlling the user feedback device on the basis of the signals,","wherein the trusted component comprises means for controlling the user feedback processing means to cause the user feedback device to provide an indication that the data processing system is operating in a trusted operating mode.","In preferred embodiments the data processing system comprises secure user input means, in communication with the trusted component via a secure communications path, by which a user may securely interact with the trusted process.","In a preferred embodiment of the data processing system:","the main processing means includes means to execute at least one application process and generate signals characterising a main image to be displayed;","the user feedback processing means comprises display processing means for receiving said signals and generating respective display signals for driving a visual display unit to display the main image; and","the trusted component comprises means to acquire and\/or generate trusted image data and means to control the display processing means to combine a respective trusted image with at least a portion of the main image in order to indicate to a user that the data processing system is operating in the trusted operating mode.","In preferred embodiments the data processing system further comprises a secure token reader for reading data from and\/or writing data to a removable secure token, and a removable token containing data characterising the trusted image, wherein the trusted component comprises means to receive said data from the secure token.","Other aspects and embodiments of the invention will become apparent from the following description, claims and drawings.","The preferred embodiment utilises a trusted component that most conveniently uses some of the characteristics of the \u2018trusted component\u2019 described in the applicant's co-pending European patent application number 99301100.6. In that application, the trusted component is a hardware device, comprising a processor programmed to measure an integrity metric of its host computer, compare it with a true value of the integrity metric and communicate the integrity (or otherwise) of the host computer to users or other host computers. The significant similarities between that trusted component and the trusted component in the preferred embodiment herein are:","that they both use cryptographic processes but preferably do not provide an external interface to those cryptographic processes;","that they are both tamper-resistant or tamper-detecting, so that their operation cannot be subverted, at least without the knowledge of the legitimate user; and","that they both preferably consist of one physical hardware component that is both physically and functionally independent of the host computer on which it resides.","Such independence is achieved by the trusted component having its own processing capability and memory.","Techniques relevant to tamper-resistance are well known to those skilled in the art of security. These techniques include methods for resisting tampering (such as appropriate encapsulation of the trusted device), methods for detecting tampering (such as detection of out of specification voltages, X-rays, or loss of physical integrity in the trusted device casing), and methods for eliminating data when tampering is detected. Further discussion of appropriate techniques can be found at http:\/\/www.cl.cam.ac.uk\/\u02dcmgk25\/tamper.html. It will be appreciated that, although tamper-proofing is a most desirable feature of the present invention, it does not enter into the normal operation of the invention and, as such, is beyond the scope of the present description.","In this description, the term \u2018trusted\u2019, when used in relation to a physical or logical component or an operation or process, implies that the behaviour thereof is predictable under substantially any operating condition and highly resistant to interference or subversion by external agents, such as subversive application software, viruses or physical interference.","The term \u2018host computer\u2019 as used herein refers to a data processing apparatus having at least one data processor, at least one form of data storage and some form of communications capability for interacting with external entities, such as peripheral devices, users and\/or other computers locally or via the Internet. The term \u2018host computer system\u2019 in addition to the host computer itself includes standard external devices, such as a keyboard, mouse and VDU, that attach to the host computer.","The term \u2018document\u2019, as used herein, includes any set of data that can be visualised using a host computer system. Commonly a document will be a textual document, such as a contract. However, a document may comprise graphics, or pictures, instead of, or as well as, text. In general, a document may comprise a single page or multiple pages.","The term \u2018pixmap\u2019, as used herein, is used broadly to encompass data defining either monochrome or colour (or greyscale) images. Whereas the term \u2018bitmap\u2019 may be associated with a monochrome image only, for example where a single bit is set to one or zero depending on whether a pixel is \u2018on\u2019 or \u2018off\u2019, \u2018pixmap\u2019 is a more general term, which encompasses both monochrome and colour images, where colour images may require up to 24 bits or more to define the hue, saturation and intensity of a single pixel.","As will become apparent, the trusted component according to the preferred embodiment herein provides a secure user interface and, in particular, controls at least some of the display functionality of its host computer. The trusted component herein may or may not also acquire integrity metrics according to the trusted component in applicant's co-pending patent application, although such acquisition of integrity metrics will not be considered herein.","In essence, the preferred embodiment enables a user to digitally sign a document stored on a host computer using the private key of the user's smartcard, or other form of secure token such as a cryptographic co-processor. The signing is enacted by a trusted display processor (i.e. the trusted component) of the host computer under conditions that provide the user with a high level of confidence that the document being viewed on screen is in fact the document the smartcard is signing. In particular, the smartcard carries trusted image data, or a \u2018seal\u2019, which is passed to the host computer over a secure channel and displayed by the trusted component during the signing procedure. It is in part the display of the trusted image, which is typically unique to the user, which provides the user with the confidence that the trusted component is in control of the signing operation. In addition, in the preferred embodiment, the host computer provides a trusted input device, connected directly to the trusted display processor, by which the user can interact with the host computer in a manner which cannot be subverted by other functions of the host computer.","More particularly, the trusted display processor or a device with similar properties is associated with video data at a stage in the video processing beyond the point where data can be manipulated by standard host computer software. This allows the trusted display processor to display data on a display surface without interference or subversion by the host computer software. Thus, the trusted display processor can be certain what image is currently being displayed to the user. This is used to unambiguously identify the image (pixmap) that a user is signing. A side-effect of this is that the trusted display processor may reliably display any of its data on the display surface, including, for example, the integrity metrics of the prior patent application, or user status messages or prompts.","It will be appreciated that, while the preferred embodiment is described in relation to a digital signing operation, the concept of providing a trusted user interface is far more broadly applicable to any operation for which a user needs to be able to trust his host computer system, for example during an electronic transaction.",{"@attributes":{"id":"p-0057","num":"0061"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","105","110","115","120","125","130","135","122"]},{"@attributes":{"id":"p-0058","num":"0062"},"figref":["FIG. 2","FIG. 1"]},"According to , the host computer  comprises a central processing unit (CPU) , or main processor, connected to main memory, which comprises RAM  and ROM , all of which are mounted on a motherboard  of the host computer . The CPU in this case is a Pentium\u2122 processor. The CPU is connected via a PCI (Peripheral Component Interconnect) bridge  to a PCI bus , to which are attached the other main components of the host computer . The bus  comprises appropriate control, address and data portions, which will not be described in detail herein. For a detailed description of Pentium processors and PCI architectures, which is beyond the scope of the present description, the reader is referred to the book, \u201cThe Indispensable PC Hardware Handbook\u201d, 3rd Edition, by Hans-Peter Messmer, published by Addison-Wesley, ISBN 0-201-40399-4. Of course, the present embodiment is in no way limited to implementation using Pentium processors, Windows\u2122 operating systems or PCI buses.","The other main components of the host computer  attached to the PCI bus  include: a SCSI (small computer system interface) adaptor connected via a SCSI bus  to a hard disk drive  and a CD-ROM drive ; a LAN (local area network) adaptor  for connecting the host computer  to a LAN , via which the host computer  can communicate with other host computers (not shown), such as file servers, print servers or email servers, and the Internet ; an IO (input\/output) device , for attaching the keyboard , mouse  and smartcard reader ; and a trusted display processor . The trusted display processor handles all standard display functions plus a number of further tasks, which will be described in detail below. \u2018Standard display functions\u2019 are those functions that one would normally expect to find in any standard host computer , for example a PC operating under the Windows NT\u2122 operating system, for displaying an image associated with the operating system or application software. It should be noted that the keyboard  has a connection to the IO device , as well as a direct connection to the trusted display processor .","All the main components, in particular the trusted display processor , are preferably also integrated onto the motherboard  of the host computer , although, sometimes, LAN adapters  and SCSI adapters  can be of the plugin type.",{"@attributes":{"id":"p-0062","num":"0066"},"figref":"FIG. 3","b":["260","260"]},"According to , the trusted display processor  comprises:","a microcontroller ;","non-volatile memory , for example flash memory, containing respective control program instructions (i.e. firmware) for controlling the operation of the microcontroller  (alternatively, the trusted display processor  could be embodied in an ASIC, which would typically provide greater performance and cost efficiency in mass production, but would generally be more expensive to develop and less flexible);","an interface  for connecting the trusted display processor  to the PCI bus for receiving image data (i.e. graphics primitives) from the CPU  and also trusted image data from the smartcard , as will be described;","frame buffer memory , which comprises sufficient VRAM (video RAM) in which to store at least one full image frame (a typical frame buffer memory  is 1-2 Mbytes in size, for screen resolutions of 1280\u00d7768 supporting up to 16.7 million colours);","a video DAC (digital to analogue converter)  for converting pixmap data into analogue signals for driving the (analogue) VDU , which connects to the video DAC  via a video interface ;","an interface  for receiving signals directly from the trusted switch ;","volatile memory , for example DRAM (dynamic RAM) or more expensive SRAM (static RAM), for storing state information, particularly received cryptographic keys, and for providing a work area for the microcontroller ;","a cryptographic processor , comprising hardware cryptographic accelerators and\/or software, arranged to provide the trusted display processor  with a cryptographic identity and to provide authenticity, integrity and confidentiality, guard against replay attacks, make digital signatures, and use digital certificates, as will be described in more detail below; and","non-volatile memory , for example flash memory, for storing an identifier Iof the trusted display processor  (for example a simple text string name), a private key Sof the trusted display processor , a certificate Certsigned and provided by a trusted third party certification agency, such as VeriSign Inc., which binds the trusted display processor  with a signature public-private key pair and a confidentiality public-private key pair and includes the corresponding public keys of the trusted display processor .","A certificate typically contains such information, but not the public key of the CA. That public key is typically made available using a \u2018Public Key Infrastructure\u2019 (PKI). Operation of a PKI is well known to those skilled in the art of security.","The certificate Certis used to supply the public key of the trusted display processor  to third parties in such a way that third parties are confident of the source of the public key and that the public key is a part of a valid public-private key pair. As such, it is unnecessary for a third party to have prior knowledge of, or to need to acquire, the public key of the trusted display processor .","The trusted display processor  lends its identity and trusted processes to the host computer and the trusted display processor has those properties by virtue of its tamper-resistance, resistance to forgery, and resistance to counterfeiting. Only selected entities with appropriate authentication mechanisms are able to influence the processes running inside the trusted display processor . Neither an ordinary user of the host computer, nor any ordinary user or any ordinary entity connected via a network to the host computer may access or interfere with the processes running inside the trusted display processor . The trusted display processor  has the property of being \u201cinviolate\u201d.","Originally, the trusted display processor  is initialised with its identity, private key and certificate by secure communication with the trusted display processor  after it is installed onto the motherboard of the host computer . The method of writing the certificate to the trusted display processor  is analogous to the method used to initialise smartcards by writing private keys thereto. The secure communications is supported by a \u2018master key\u2019, known only to the trusted third party (and to the manufacturer of the host computer ), that is written to the trusted display processor  during manufacture, and used to enable the writing of data to the trusted display processor . Thus, writing of data to the trusted display processor  without knowledge of the master key is not possible.","It will be apparent from  that the frame buffer memory  is only accessible by the trusted display processor  itself, and not by the CPU . This is an important feature of the preferred embodiment, since it is imperative that the CPU , or, more importantly, subversive application programs or viruses, cannot modify the pixmap during a trusted operation. Of course, it would be feasible to provide the same level of security even if the CPU  could directly access the frame buffer memory , as long as the trusted display processor  were arranged to have ultimate control over when the CPU  could access the frame buffer memory . Obviously, this latter scheme would be more difficult to implement.","A typical process by which graphics primitives are generated by a host computer  will now be described by way of background. Initially, an application program, which wishes to display a particular image, makes an appropriate call, via a graphical API (application programming interface), to the operating system. An API typically provides a standard interface for an application program to access specific underlying display functions, such as provided by Windows NT\u2122, for the purposes of displaying an image. The API call causes the operating system to make respective graphics driver library routine calls, which result in the generation of graphics primitives specific to a display processor, which in this case is the trusted display processor . These graphics primitives are finally passed by the CPU  to the trusted display processor . Example graphics primitives might be \u2018draw a line from point x to point y with thickness z\u2019 or \u2018fill an area bounded by points w, x, y and z with a colour a\u2019.","The control program of the microcontroller  controls the microcontroller to provide the standard display functions to process the received graphics primitives, specifically:","receiving from the CPU  and processing graphics primitives to form pixmap data which is directly representative of an image to be displayed on the VDU  screen, where the pixmap data generally includes intensity values for each of the red, green and blue dots of each addressable pixel on the VDU  screen;","storing the pixmap data into the frame buffer memory ; and","periodically, for example sixty times a second, reading the pixmap data from the frame buffer memory , converting the data into analogue signals using the video DAC and transmitting the analogue signals to the VDU  to display the required image on the screen.","Apart from the standard display functions, the control program includes a function to mix display image data deceived from the CPU  with trusted image data to form a single pixmap. The control program also manages interaction with the cryptographic processor and the trusted switch .","The trusted display processor  forms a part of the overall \u2018display system\u2019 of the host computer ; the other parts typically being display functions of the operating system, which can be \u2018called\u2019 by application programs and which access the standard display functions of the graphics processor, and the VDU . In other words, the \u2018display system\u2019 of a host computer  comprises every piece of hardware or functionality which is concerned with displaying an image.","As already mentioned, the present embodiment relies on interaction between the trusted display processor  and the user's smartcard . The processing engine of a smartcard suitable for use in accordance with the preferred embodiment is illustrated in . The processing engine comprises a processor  for enacting standard encryption and decryption functions, to support digital signing of data and verification of signatures received from elsewhere. In the present embodiment, the processor  is an 8-bit microcontroller, which has a built-in operating system and is arranged to communicate with the outside world via asynchronous protocols specified through ISO 7816-3, 4, T=0, T=1 and T=14 standards. The smartcard also comprises non-volatile memory , for example flash memory, containing an identifier Iof the smartcard , a private key S, used for digitally signing data, and a certificate Cert, provided by a trusted third party certification agency, which binds the smartcard with public-private key pairs and includes the corresponding public keys of the smartcard  (the same in nature to the certificate Certof the trusted display processor ). Further, the smartcard contains \u2018seal\u2019 data SEAL in the non-volatile memory , which can be represented graphically by the trusted display processor  to indicate to the user that a process is operating securely with the user's smartcard, as will be described in detail below. In the present embodiment, the seal data SEAL is in the form of an image pixmap, which was originally selected by the user as a unique identifier, for example an image of the user himself, and loaded into the smartcard  using well-known techniques. The processor  also has access to volatile memory , for example RAM, for storing state information (such as received keys) and providing a working area for the processor , and an interface , for example electrical contacts, for communicating with a smart card reader.","Seal images can consume relatively large amounts of memory if stored as pixmaps. This may be a distinct disadvantage in circumstances where the image needs to be stored on a smartcard , where memory capacity is relatively limited. The memory requirement may be reduced by a number of different techniques. For example, the seal image could comprise: a compressed image, which can be decompressed by the trusted display processor ; a thumb-nail image that forms the primitive element of a repeating mosaic generated by the trusted display processor ; a naturally compressed image, such as a set of alphanumeric characters, which can be displayed by the trusted display processor  as a single large image, or used as a thumb-nail image as above. In any of these alternatives, the seal data itself may be in encrypted form and require the trusted display processor  to decrypt the data before it can be displayed. Alternatively, the seal data may be an encrypted index, which identifies one of a number of possible images stored by the host computer  or a network server. In this case, the index would be fetched by the trusted display processor  across a secure channel and decrypted in order to retrieve and display the correct image. Further, the seal data could comprise instructions (for example PostScript\u2122 instructions) that could be interpreted by an appropriately programmed trusted display processor  to generate an image.",{"@attributes":{"id":"p-0087","num":"0091"},"figref":"FIG. 5","b":["100","260","122","100","260","122"]},"In accordance with , the host computer  includes: an application process , for example a wordprocessor process, which requests the signing of a document; document data ; an operating system process ; an API  process for receiving display calls from the application process ; a keyboard process  for providing input from the keyboard  to the application process ; a mouse process  for providing input from the mouse  to the application process ; and a graphics primitives process  for generating graphics primitives on the basis of calls received from the application process via the API  process. The API process , the keyboard process , the mouse process  and the graphics primitives process  are build on top of the operating system process  and communicate with the application process via the operating system process .","The remaining functions of the host computer  are those provided by the trusted display processor . These functions are: a control process  for coordinating all the operations of the trusted display processor , and for receiving graphics primitives from the graphics primitives process and signature requests from the application process ; a summary process  for generating a signed summary representative of a document signing procedure in response to a request from the control process ; a signature request process  for acquiring a digital signature of the pixmap from the smartcard ; a seal process  for retrieving seal data  from the smartcard ; a smartcard process  for interacting with the smartcard  in order to enact challenge\/response and data signing tasks required by the summary process , the signature request process  and the seal process ; a read pixmap process  for reading stored pixmap data  and passing it to the signature request process  when requested to do so by the signature request process ; a generate pixmap process  for generating the pixmap data  on the basis of graphics primitives and seal image data received from the control process ; a screen refresh process  for reading the pixmap data, converting it into analogue signals and transmitting the signals to the VDU ; and a trusted switch process  for monitoring whether the trusted switch  has been activated by the user. The smartcard process  has access to the trusted display processor's identity data I, private key Sdata and certificate Certdata . In practice, the smart card and the trusted display processor interact with one another via standard operating system calls.","The smartcard  has: seal data ; a display processor process  for interacting with the trusted display processor  to enact challenge\/response and data signing tasks; smartcard identity data I, smartcard private key data Sand smartcard certificate data Cert.","A preferred process for signing a document using the arrangement shown in  will now be described with reference to the flow diagram in .","Initially, in step , the user controls the application process  to initiate a \u2018signature request\u2019 for digitally signing a document. The application process  may be realised as a dedicated software program or may be an addition, for example a macro, to a standard word processing package such as Microsoft's Word. In either case, neither the signature request nor the application process  need to be secure. When the user initiates the signature request, he also specifies the document to be signed, if it is not one which is already filling the whole screen. For example, the document may be displayed across a part of the full screen area or in a particular window. Selection of a particular area on screen is a simple task, which may be achieved in several ways (using a WIMP environment), for example by drawing a user-defined box bounding the area or by simply specifying co-ordinates.","Next, in step , the application process  calls the control process  to sign the image that is being displayed (within a defined area or window) on the screen; the control process  receives the call. In parallel, although it is not shown, the control process  receives any graphics primitives from the graphics primitives process and forwards them onto the generate pixmap process . The call from the application process  to sign a document includes the co-ordinates (a,b,c,d) of the edges of the document. Note that this sending of co-ordinates generally enables the signing of the entire surface of the screen, a complete window, or of an arbitrary part of the screen. The application process  then waits for the control process  to return the signature of the image.","In response to the signature request, in step , the control process  forces the image that is to be signed to be \u2018static\u2019 from the time of the request until the process has been completed. Herein, \u2018static\u2019 means that the document image cannot be modified other than by the trusted display processor . This is so that the user can be certain that what he sees is what he is signing at all times during the process. In the present embodiment, the control process  achieves a \u2018static\u2019 display by \u2018holding-off\u2019, or not processing, any further graphics primitives. In some situations, the graphics primitives process (or equivalent) may \u2018buffer\u2019 graphics primitives until the control process  is ready to receive further graphics primitives. In other situations, graphics primitives for the image to be signed may simply be lost. Where the document image fills the whole screen, making the image static is simply a case not processing any graphics primitives. However, where the image to be signed forms only a subset, for example a window, of the full screen, the control process  needs to determine whether received graphics primitives would affect the \u2018static\u2019 area, and reject ones that would. As such, the pixmap of the static document image in the frame buffer memory  remains unchanged by any instructions from the graphics primitives process, or any other process executing on the CPU , while the document image is static.","Once the document image has been made static, in step , the control process  instructs the generate pixmap process , including in the call the co-ordinates (a,b,c,d) provided by the application process , to modify the pixmap to highlight the document to be signed, as will be described in more detail below with reference to . Then, in step , if a smartcard  is not already inserted in the smartcard  reader , as determined by the smart card process , the control process  instructs the generate pixmap process to display a graphical message asking the user to insert his smartcard . This message is accompanied by a ten second countdown timer COUNT. If the countdown timer expires (i.e. reaches zero), as a result of not receiving the smartcard , the control process cancels the signing operation in step  and returns an exception signal to the application process . In response, the application process  displays an appropriate user message in step . If the smartcard  is inserted in time, or is already present, then the process continues.","Next, in step , the control process  calls the seal process , and the seal process  calls the smartcard process , to recover the seal data  from the smartcard . Optionally, the control process  calls the generate pixmap process  to display another message indicating to the user that recovery of the seal data  is being attempted. In steps  and , the smartcard process  of the trusted display processor  and the display processor process  of the smartcard  interact using well known, \u2018challenge\/response\u2019 techniques to enact mutual authentication and pass the seal data  from the smartcard and back to the control process . The details of the mutual authentication process and passing of the seal data  will now be described with reference to .","According to , the smartcard process  sends a request REQ to the smartcard  to return the seal data SEAL . The display processor process  generates a nonce Rand sends it in a challenge to the smartcard process . The smartcard process  generates a nonce Rand concatenates it with nonce R, signs the concatenation R\u2225Rwith its private key to produce a signature sS(R\u2225R), and returns the concatenation R\u2225R, the signature sS(R\u2225R) and the certificate Certback to the display processor process  of the smartcard . The display processor process  extracts the public key of the trusted display processor  from the certificate Cert, and uses this to authenticate the nonce Rand the signature sS(R\u2225R) by comparison with the concatenation R\u2225R, to prove that the seal request came from the expected trusted display processor  and that the trusted display processor  is online.","The nonces are used to protect the user from deception caused by replay of old but genuine signatures (called a \u2018replay attack\u2019) by untrustworthy processes.","The display processor process  of the smartcard  then concatenates Rwith its seal data SEAL , signs the concatenation R\u2225SEAL using its private key Sto produce a signature sS(R\u2225SEAL), encrypts the seal data SEAL  using its private key Sto produce encrypted seal data  sS(SEAL), and sends nonce R, the encrypted seal data sS(SEAL), the signature sS(R\u2225SEAL) and the smartcard's certificate Certto the smartcard process  of the trusted display processor . The smartcard process  extracts the smartcard's public key from the certificate Certand uses this to verify nonce Rand the signature sS(R\u2225SEAL), decrypt the seal data SEAL  from the encrypted seal data  sS(SEAL) and, finally, return the seal data SEAL , via the seal process , to the control process .","Returning to , in step , when the control process  receives the seal data SEAL , it forwards the data to the generate pixmap process , and instructs the generate pixmap process  to generate a seal image and use it to highlight the document to be signed, as will be described below with reference to . Then, in step , the control process  instructs the generate pixmap process  to display a message to the user asking whether they wish to continue with the signing operation. This message is accompanied by a ten second countdown timer COUNT. If the countdown timer expires, in step , as a result of not receiving a response from the user, the control process cancels the signing operation, in step , and returns an exception signal to the application process . In response, the application process  displays an appropriate user message in step . If, in step , the user responds positively by actuating the trusted switch  within the ten second time limit, the process continues. The authorisation to continue could alternatively be supplied over an unreliable channel, rather than by using a trusted switch , or even using appropriate software routines, providing a reasonable level of authentication is used. Alternatively, it may be decided that the mere presence of an authentic smartcard may be sufficient authorisation for the signing to occur. Such an alternatives are a matter of security policy.","Next, in step , the control process  instructs the signature request process  to request the signing of the document image; the signature request process  calls the read pixmap process  to request return of a digest of the pixmap data of the document to be signed; and the read pixmap process  reads the respective pixmap data, uses a hash algorithm to generate a digest Dof the pixmap data and returns the digest to the signature request process . Additionally, the read pixmap process  generates \u2018display format data\u2019 FD, which includes information necessary to reconstruct the image from the pixmap data into a text-based document at a later time (FD is not essential, since the document text may not need to be reconstructed), and returns this also to the signature request process . For example, the display format data FD may include the number of pixels on the screen surface and their distribution, such as \u20181024 by 768\u2019, and the font type and size used for the text (if the document is text-based) in the document (at least some of this information may instead, or in addition, be contained in a document \u2018summary\u2019, as will be described below). In steps  and , the signature request process  interacts with the display processor process  of the smartcard  using well-known challenge\/response processes to generate an individual signature of the document, as will now be described in detail with reference to the flow diagram in .","According to , the smartcard process  generates a request REQ for the smartcard  to generate a signature of the digest Dand display format data FD. The display processor process  of the smartcard  responds by generating a nonce Rand sending it to the smartcard process  with a challenge to return the digest Dand the display format data FD. The smartcard process  concatenates the digest Dwith the display format data FD and nonce R, and signs the concatenation D\u2225FD\u2225Rto produce a signature sS(D\u2225FD\u2225R). The smartcard process  then sends the concatenation D\u2225FD\u2225Rand its respective signature sS(D\u2225FD\u2225R) to the display processor process  of the smartcard . The display processor process  uses the trusted display processor's public key (which it has already received in the seal data  exchange) to verify the trusted display processor's signature sS(D\u2225FD\u2225R) and nonce R, to prove that the digest is the current image digest. The display processor process  signs the digest of the pixmap Dand the display format data FD, using its private key, to produce two signatures sS(D) and sS(FD) respectively. The display processor process  of the smartcard then returns the signed digest sS(D), and signed display format data sS(FD) to the smartcard process  of the trusted display processor . The smartcard process  next verifies the digest Dand display format data FD, using the smartcard's public key (which it already has as a result of the seal data  exchange), and verifies the smartcard's signature, to prove that the smartcard is still online.","Returning to , in step , the smartcard process  of the trusted display processor  concatenates the pixmap PIX, the smartcard's signed versions of the pixmap digest sS(D) and display format data sS(FD) to form an individual signature PIX\u2225sS(D)\u2225sS(FD) of the image, and returns it, via the signature request process , to the control process , which returns the individual signature to the application process . The application process  stores the individual signature, in step , and responds with a further call to the control process  to \u2018summarise the signing\u2019 operation in step . The purpose of a summary is to complete the signature, as will be described with reference to the flow diagram in  and also the example summary below:\n\n","In step , the control process  calls the summary process  to generate a summary message SUM containing the number of images (two in the example summary above) plus the individual signatures of the images (lines 6 and 10 of the example), a label identifying the trusted display device (line 1 in the example), the current time and date (line 2 in the example) and a signed digest of the summary itself (line 14 in the example). For each image, the summary also includes the size of the image in pixels (e.g. 560\u00d7414 for image 1), the offset from the origin of the screen in pixels (e.g. 187,190 for image 1) and the display resolution in pixels (e.g. 1024\u00d7768 for image 1).","The summary process  then generates a digest of the summary Din step  and calls the smartcard process  of the trusted display processor  to interact with the smartcard  using challenge\/response processes to generate a signature of the summary digest D, as will now be described with reference to .","According to , the smartcard process  generates a request REQ for the smartcard  to generate a signature of the digest of the summary D. The display processor process  of the smartcard generates a nonce Rand sends it in a challenge to return the digest of the summary D. The smartcard process  concatenates the digest Dwith nonce Rand signs the concatenation D\u2225Rto produce a signature sS(D\u2225R). The smartcard process  of the trusted display processor  then sends the concatenation D\u2225Rand respective signature sS(D\u2225R) to the display processor process . The display processor process  then verifies the trusted display processor's signature and nonce R, using the trusted display processor's public key (which it already has from the seal data  exchange), to prove that the summary is the current summary. Next, the display processor process  signs the digest of the summary Dusing its private key and sends the signed digest sS(D) to the smartcard process . The smartcard process  of the trusted display processor  verifies the digest and verifies the smartcard's signature, using the smartcard's public key, to prove that the smartcard is still online.","Returning to , in step , the smartcard process  returns the summary SUM concatenated with the signed digest of the summary sS(D) (to form concatenation SUM\u2225sS(D)), via the summary process , to the control process , and the control process  returns the summary SUM\u2225sS(D) to the application process . The application process  receives the summary in step .","The individual signature and summary may be used by the application process , or any other process running on the host computer  in various ways outside the scope of this invention, including as proof of contract, for storage or for transmission to other entities.","Finally, in step , the control process  unfreezes the display, by recommencing receipt and processing of graphic primitives associated with the document image, and thereby in effect returns control of the display back to the application process  or other application software. Alternatively, control may not be handed back to the application process  until the user actuates the trusted switch  again, typically in response to another user message, which, this time, would not have a timeout period. This would give the user more time to review the static document image before returning the host computer to standard, non-trusted operation.","In order to verify a signed document, both the individual signature PIX\u2225sS(D)\u2225sS(FD) and the summary SUM\u2225sS(D) must be verified. Such verification methods are well known to those skilled in the art of security. For example, the signature on the digest of the pixmap sS(D) is verified using the public key of the user, which is publicly available and preferably contained within a digital certificate Certsupplied by a certification authority. The verified digest is then compared with a value obtained by re-computing the digest from the pixmap, where the digest is generated using a standard, well-known and defined hash function. If the match is exact, the signature has been verified. Other signatures, including the summary, are checked in the same way.","A preferred method of enabling a person to verify the wording of the signed document is to translate the pixmap back into an image. This requires an application, or indeed a trusted display processor , to load the pixmap data PIX into the frame buffer memory  of a respective host computer . This allows a person to view the document that the signer has signed.","The stages of highlighting a document to be signed will now be described with reference to to ","In the preferred embodiment, the seal data SEAL comprises a pixmap of a trusted image. For example, as shown in , the pixmap of the seal data  defines a \u2018smiley face\u2019 . illustrates an image  of an exemplary document Doc to be signed, in a window  of the screen (not shown). As a first highlighting step, after the image has been made static but before the seal data has been received, the trusted display processor  highlights the document to be signed by superimposing a frame  around the document image , as illustrated in . Also, where a smartcard  is not present, a user message  asking the user to insert his smartcard is displayed accompanied by a ten second countdown timer , as also illustrated in . Next, when the smiley face pixmap image is retrieved from the smartcard , the trusted display processor  embellishes the frame  with multiple instances , or a mosaic, of the smiley face, as shown in . In addition, as shown in , the trusted display processor  generates a further user message , accompanied by a ten second countdown timer , asking the user whether they wish to proceed with the signing process. This embellished frame  both indicates to the user that the correct static image area is being acted on and provides the user with a high level of confidence that the trusted display processor  is fully in control of the signing process; the presence of the user's own seal image provides confidence to the user that the message has come from the trusted display processor  rather than from some other (possibly subversive) software application or hardware device.",{"@attributes":{"id":"p-0114","num":"0133"},"figref":["FIGS. 10","FIGS. 10","FIG. 10","FIG. 10","FIG. 10"],"i":["e ","g ","c ","d","e","f","g"],"b":["10","10","1060","500","540"]},"It will be appreciated that the trusted display processor  needs to be able to display the seal image(s) and the messages in the correct places on screen. Clearly, the seal image and the message images are temporary, to the extent they appear during the signature process and disappear thereafter. There are well-known, standard display techniques for overlaying a first image with a second image, thereby obscuring a part of the first image, then removing the second image and restoring the portion of the first image that had been obscured. Such techniques are used as a matter of course in normal windows environments, for example, where multiple windows may overlap one another. The trusted display processor  is arranged to implement one of more of these standard techniques for the purposes of superimposing the seal image(s) and the message images over the standard display.","In some scenarios, it may be that a document is too large to fit all at once onto the VDU  screen and still be easily read by a person. Obviously, for the present embodiment to be practical, it is essential that a user can very clearly read the document before signing it. Therefore, the document can be split into multiple screen pages, each of which needs to be signed and cryptographically chained to the signature of the previous page, as will now be described.","First, the application process  causes the image of the first page to be displayed and makes a call to the trusted display processor  for signing as before. When the trusted display processor  returns the individual signature, instead of requesting a summary, the application process  instructs the trusted display processor  to display the image of the second page and sign the image. Clearly, in this case, the trusted display processor  is arranged to support such a request by the application process . Only after all images have been signed and returned to the application process  does the application process  issue a request for a summary. Then, the summary includes the number of images that were signed in this multi-page document, for example as illustrated in the two-page summary above.","The first page in the multi-page document is signed in the same way as a single page, resulting in return of an individual signature. When subsequent images are presented for signing, however, the trusted display processor  recognises that they are part of a multi-page document because no summary request was received after the previous signature request. As a result, the trusted display processor  displays a different message, which requests permission from the user to sign a continuation page. In response, the user who is signing a multi-page document uses the same reliable permission channel as before (for example, the trusted switch ) to confirm to the trusted display processor  that this page is associated with the previous page, and is also to be signed. When the trusted display processor  receives this multi-page confirmation, it concatenates the signature of the previous signed page with the pixmap of the current page, creates a digest of the concatenation, and sends that to the smartcard for signing. This is instead of sending a digest of just the current pixmap. This process cryptographically \u2018chains\u2019 a subsequent page to the previous page, so that pages cannot be rearranged without detection, nor can intermediate pages be inserted or deleted without detection.","The validity of the first page may be checked in exactly the same way as a single page. The validity of subsequent pages is checked using the same method as for a single page, except that the digest of the current pixmap is replaced by the digest of the concatenated previous signature and current pixmap.","It will be appreciated that there are many ways of cryptographically chaining a subsequent page to a previous page. Such ways will be obvious to those skilled in the art of security in the light of the present description.","For added security, the image of each page of a multi-page document may be arranged to include the conventional footer \u2018Page x of y, where \u2018x\u2019 is the number of the page and \u2018y\u2019 is the total number of pages. This enables ready detection by a person of a truncated document simply by reading the document.","A significant benefit of the present document signing scheme is that a signed document can be re-signed and countersigned. As such, it is preferable for the summary of a document to include an audit trail. There are many variations on re-signing and countersigning, although (obviously) an electronic integrity check should always be done before any further signing. At one extreme, the new signer could view, confirm and re-sign each signed image in turn, effectively replacing the original signature by a new one. This method could be used, for example, by a user signing a document prepared for him by someone else. At the other extreme, the new signer could simply \u2018rubber stamp\u2019 the original signature by signing the original summary, without necessarily viewing the document at all. This could be useful to a manager countersigning the work of a trusted employee.","For a re-signing operation, the application process  issues a re-signing request, and transmits an already signed document (plus the individual signature(s) and the summary) to the trusted display processor . The trusted display processor  verifies the signed document using the public key of the signer, recovers the pixmap of the document (or each page of the document) and displays each verified image in the correct order to the new user, as if they were original images from the signature request application. The user confirms the acceptance of each individual image, for example using a trusted switch  as before, and causes the images to be signed as before by a smartcard belonging to the new user. This results in a signed document that is the same as the original document, except that it has been signed by the smartcard belonging to the new user.","Similarly, for a counter-signing operation, the application process  issues a counter-signing request and transmits the signed document (plus individual signatures and the summary) to the trusted display processor . The trusted display processor  verifies the signed document and displays each verified image in the correct order to the new user, as if they were original images from the application process . The user confirms acceptance of each individual image and the trusted display processor  signs the original summary using the smartcard belonging to the new user. Optionally the new user could provide a certificate of the previous user's public key, signed by the new user, to ease the processing overhead associated with later verification of the signature.","Clearly, there are many possible variations on the theme of re-signing and countersigning, which will be apparent to the skilled person in the light of the present description.","Since a document may have a history of signing, resigning and\/or counter-signing, the present embodiment conveniently provides audit information, which forms part of the document summary. This audit information allows the signature history of the document to be traced. The audit information includes data about the previous state of the document and the actions taken by the new user to create the new state of the document. The audit information is signed by the trusted display processor , since the audit information must be independent of the user. The audit information always contains any previous summary information (including the signature on that summary information, by the previous signer). If the signed document has been created from scratch, the identity label Iof the trusted display processor  is inserted as an audit root. The audit information preferably also includes an indication of which individual images were viewed and confirmed by the new user, and whether the document was created from scratch, or was re-signed, or was countersigned by the new user. To create a summary including audit information, the smartcard is sent a digest of the audit information concatenated with the previously described contents of a summary, rather than a digest of just the previously described contents of a summary. The rest of the process is as previously described.","An enhancement to the process for signing a document is that, prior to signing the pixmap data, the trusted display processor  compresses the pixmap using a lossless compression algorithm so that the overheads associated with storing and sending the individual signature are reduced.","The pixmap may be compressed by standard compression algorithms, for example a codeword-based algorithm applying LZ-1 or LZ-2 compression. Alternatively, a technique similar to OCR (optical character recognition) may be used to compress the pixmap. In this case, the situation differs from conventional OCR in that the input data has been perfectly \u2018scanned\u2019, albeit at a lower resolution than in conventional OCR. The OCR-compressed version of the pixmap may be generated by \u2018blob-matching\u2019 to create an alphabet for the pixmap, constructing a pixmap of each character in the alphabet, and constructing a message using those characters, such that the message represents the original pixmap. This means that the pixmap can been compressed to a new alphabet and a message written in that alphabet. Since there are, obviously, no errors nor ambiguity in the pixmap data, this is a lossless compression method.","Another way of reducing the size of the image pixmap is by representing the image as a pure black and white image, requiring only a single bit\u2014set to zero or one\u2014to define whether a pixel is black or white. Otherwise, the document image is represented as a full colour image, where each pixel may typically require up to 24-bits. Obviously, this technique may be suitable for simple, black and white text-based documents. However, it would not be appropriate for colour documents or images.","At any time, the document image may be converted back into a text-based document using an OCR-type process to reconstruct a standard digital textual representation of the document. This technique cannot be used in the signature, since the textual mapping may be incorrect, but can be used by the receiver of a signed document to convert it back into a standard digital textual representation (such as ASCII) for subsequent machine manipulation. In preferred embodiments, the trusted display processor  is equipped to enact OCR document recovery.","To enact OCR, an OCR alphabet is generated in a standard fashion and is then matched to stored fonts and hence converted to a standard character set. As in conventional OCR, ambiguous matches may be retained as a pixmap and flagged for conversion by the user. (This is unlikely, particularly if font type and size information has been supplied in the display format data FD, because there is no error in the data.) In cases of extreme caution, the entire reconstructed document should be manually checked by a person against the view of the document that the signer intended to sign.","Preferably all document reconstruction processes are done by processes that are trusted.","The preferred embodiment described above relies on the premise that the trusted display processor  has direct and exclusive access to video data stored in the frame buffer memory , beyond the point where the video data can be manipulated by host computer  software, including the operating system. This implies that the video data cannot be modified unless the trusted display processor  makes the modification.","It will be appreciated that not all computer architectures are arranged in this way. For example, some computer architectures are arranged such that the frame buffer memory forms a part of the main memory, thus forming a single address space (SAS) display system. One benefit of such a system is that both the CPU and the display processor can access the frame buffer memory and share the graphics operation overhead, thereby improving graphics performance. Clearly, an implementation of the present invention in such a SAS system cannot rely on the premise that the buffer memory is safe during signing, since the CPU can still access the memory. However, there are many ways in which such a SAS system may be modified to support implementations of the present invention. For example, the memory could be provided with a control line from a trusted display processor such that, during a signing operation, the memory is prevented from being updated by data from the CPU. The memory devices themselves are preferably modified so that they include the extra logic to perform this function. Alternatively, access to memory is blocked by other logic circuits inserted into the normal control path of the memory. Such systems, therefore, rely on the modified premise that the video data in the frame buffer memory can only be modified, other than by the trusted display processor, with the permission of the trusted display processor. Clearly, this premise is as valid for secure operation as the first premise, as long as the system is truly secure.","In other architectures, for example in simple graphics environments, the functionality of a display processor may form part of the operating system itself, thereby removing the requirement for separate display processor hardware. Clearly, in this case, the graphics overhead put on the CPU will be higher than in a system with separate display processor hardware, thereby limiting the graphics performance of the platform. Clearly, there is then no place for a \u2018trusted display processor\u2019 as such. However, it will be apparent to the skilled person that the same function as provided by the trusted display processor, that of protecting the frame buffer memory and interacting with a smartcard, can be implemented using an appropriate trusted component, which controls the display system (in whatever form) during signing.","In other embodiments of the invention, the functionality of trusted switch  may be replaced by software. When the trusted switch process  is activated (as in step ), instead of waiting for operation of a dedicated switch, the trusted component  uses its random number generation capability to generate a nonce in the form of a textual string. This textual string is then displayed on the trusted display in a message of the form \u201cPlease enter <textual string> to confirm the action>. To confirm the action, the user must then enter the given textual string, using the keyboard . As the textual string will be different every time, and because no other software has access to this textual string (it passes only between the trusted processor  and the display), it will not be possible for malicious software to subvert this confirmation process.","In other embodiments of the invention, in addition or alternatively, the trusted display processor (or equivalent) includes an interface for driving a trusted display. The trusted display might be, for example, an LCD panel display. In the same way that the trusted switch provides a trusted means for a user to interact with the trusted display processor, the trusted display can provide a trusted means for feeding back information to the user other than via the standard VDU. For example, the trusted display might be used to provide user status messages, as described above, relating to a signing operation. As such, applications running on the standard host computer should not be able to access the trusted display, because the display is connected either directly to the trusted display processor or via some form of trusted channel. In essence, such a trusted display is an addition to the so-called \u2018trusted interface\u2019 described above. In practice, there is no reason why other forms of trusted feedback device, of which the trusted display is one example, could not be included in addition, or as an alternative. For example, there may be scenarios where some form of trusted sound device would be useful for providing audible feedback.","An alternative application for the invention is to provide a trusted interface during an electronic transaction. In one exemplary embodiment, the user wishes to send sensitive data to a remote computer system. The user cannot be sure that the remote computer system, or indeed the host computer he is using, is trustworthy. In order to ensure that the sensitive data is safe from interception by unauthorised parties during transmission to the remote computer system, and to ensure that only the authentic remote computer system can read the sensitive data when it is received, the user wishes to encrypt the data using the authentic remote computer system's public cryptographic key. In the embodiment, the host computer incorporates a trusted component, which interacts with the user's smart card in order to recover and display a trusted image as described in detail above. The trusted image may be displayed on the standard VDU screen or on a separate display, such as an LCD display, in order to indicate to the user that the trusted component, rather than a subversive application, is in control. The trusted component then interacts with the remote computer system in order to recover and authenticate the remote computer system's certificate containing a respective public key. With the public key, the trusted component encrypts the sensitive data, which might itself also be read from the smartcard, and transmits the encrypted data to the remote computer system.","There are many other applications, especially e-commerce applications, where the concept of a trusted user interface, providing trusted user feedback and trusted user input device(s), would be valuable. As such, the present invention should not be read as being limited to the few embodiments described above, and should only be limited by the language of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention will now be described in detail with reference to the accompanying drawings, of which:",{"@attributes":{"id":"p-0031","num":"0035"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0036"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0033","num":"0037"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0034","num":"0038"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0035","num":"0039"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0036","num":"0040"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0037","num":"0041"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0038","num":"0042"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0039","num":"0043"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0040","num":"0044"},"figref":"FIG. 10","i":"a "},{"@attributes":{"id":"p-0041","num":"0045"},"figref":"FIGS. 10","i":["b ","d "],"b":"10"},{"@attributes":{"id":"p-0042","num":"0046"},"figref":"FIGS. 10","i":["e ","g "],"b":"10"}]},"DETDESC":[{},{}]}
