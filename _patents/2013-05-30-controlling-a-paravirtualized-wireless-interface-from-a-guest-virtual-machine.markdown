---
title: Controlling a paravirtualized wireless interface from a guest virtual machine
abstract: A method, system and an apparatus to paravirtualize a wireless interface is disclosed. In one embodiment, a method receives a frame of data for a wireless service through a wireless interface of a host device using a processor. If the frame of data is associated with a first type of category, the frame of data is processed through a first standard interface. If the frame of data is associated with a second type of category, the frame is processed through a second standard interface. The method then sends the frame of data processed through the first standard interface or the second standard interface to a guest. A virtual wireless interface associated the guest that is emulating the wireless interface of the host device converts the frame of data processed through the first standard interface to the second standard of communication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09042304&OS=09042304&RS=09042304
owner: VMware, Inc.
number: 09042304
owner_city: Palo Alto
owner_country: US
publication_date: 20130530
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application claims priority to U.S. Provisional Patent Application No. 61\/655,872 entitled \u201cControlling a Paravirtualized Wireless Interface from a Guest Virtual Machine\u201d filed Jun. 5, 2012, the contents of which is incorporated herein by reference in its entirety.","A virtual machine (VM) is an abstraction of a physical computer that executes programs with some degree of isolation from the physical hardware and other VMs running on the same physical machine. This isolation is provided by virtualization software that runs on the physical machine that manages and abstracts out the physical resources for the VMs running on the system. The term \u201cvirtualization software\u201d herein refers to all software logically interposed between a VM and the underlying hardware resources. Typically, this includes a kernel for managing host resources and for each VM, a virtual machine monitor (VMM) for presenting emulated resources for guest code execution. In addition to managing and abstracting system resources, the virtualization software can also impose policy restrictions on the virtual machine such as limiting where, when, and by whom the virtual machine can run, as well as limit access to the VM's information by encrypting the software and data stored by the virtual machine. Such policy and access restrictions for a VM are described in U.S. patent application Ser. No. 11\/522,172 entitled, \u201cEnforcing Restrictions Related to a Virtualized Computer Environment\u201d and filed Sep. 14, 2006.","Software emulation is used for abstracting and sharing a physical LAN (non-wireless) network interface card (NIC) by a number of virtual machines running on a single computer system. In this case, a physical NIC is placed in \u201cpromiscuous mode,\u201d meaning that it will accept all network packets received, regardless as to whether they are addressed to the physical NIC or not. The packets are sent to a virtual network switch implemented by the virtualization software. The virtual network switch can then direct packets to destination virtual NICs assigned to any virtual machines on the system. The virtual NICs are software emulations of NIC devices and each of the virtual NICs has a unique MAC address that is distinct from each of the other virtual NICs and the physical NIC. In essence, the virtualization software implements a virtual network, connecting the virtual NICs with the physical NIC, which acts as a bridge or gateway to the outside world. It is also possible for the virtualization software to provide network address translation (NAT) capability.","In typical implementations of virtual networking devices, the physical NIC is controlled exclusively by the virtualization software. Guest virtual machines interact with the physical NIC only as a gateway or bridge through which to send network packets to the outside world. These packets typically conform to IEEE 802.3 (e.g., \u201cEthernet\u2122\u201d) standards, which do not provide for a control path for the underlying device. That is, there is only a data path, and no control path, between the guest virtual machines and the physical device. Since wireless devices require additional user control (e.g., to select and authenticate to an access point), current implementations of device virtualization are not suitable for wireless devices. As a result, a user of the VM may not be able to take advantage of the wireless capabilities of a host device. For example, a user may not be able to select a wireless network through the interface provided by the guest operating system running inside the VM. In a managed VM, where access to the host operating system may be limited, this would lead to an inability to access wireless devices.","One approach to controlling devices generally includes using a peripheral component interconnect (PCI)-passthrough connection between a guest virtual machine and a physical address. In this case, the I\/O (input\/output) messages from the guest driver are communicated directly to and from the physical device on the host without any device emulation. This approach is simple to implement for any PCI device and provides a low-overhead mechanism (in terms of resource requirements) to provide a guest virtual machine with control over the device. However, because the host lacks visibility into the state of the physical device when it is controlled by a guest operating system, this approach prevents the host from serializing or deserializing the device's state, which is necessary for migrating the virtual machine or for taking virtual machine state checkpoints or snapshots. In addition, PCI-passthrough requires that guest physical memory pages (that is, memory pages viewed as physical memory by the guest operating system, but are redirected by the host virtualization software to actual physical memory) be pinned by the host so that the guest operating system cannot program the wireless device to write to a swapped out page of memory using direct memory access (DMA). If that were to happen, an IO-MMU page fault would occur, which is costly (in terms of performance) to recover from.","Another approach for controlling a PCI device is exemplified by the single root I\/O virtualization (SR-IOV) specification developed by the industry consortium, peripheral Component Interconnect Special Interest Group (PCI-SIG). The SR-IOV specification provides for a physical device with built-in support for a plurality of virtual functions, each of which may be assigned to a different virtual machine and may be accessed directly by each virtual machine without any need for emulation by the virtualization layer. In this way, each SR-IOV compliant device can appear as many different devices. This approach requires an SR-IOV compliant device in order to implement, and such devices are not readily available, particularly for wireless communications in notebook or laptop computers.","A method, system and an apparatus to paravirtualize a wireless interface is disclosed. In one embodiment, a method receives a frame of data for a wireless service through a wireless interface of a host device using a processor. If the frame of data is associated with a first type of category, the frame of data is processed through a first standard interface. If the frame of data is associated with a second type of category, the frame is processed through a second standard interface. The method then sends the frame of data processed through the first standard interface or the second standard interface to a guest. A virtual wireless interface associated the guest that is emulating the wireless interface of the host device converts the frame of data processed through the first standard interface to the second standard of communication.","Other features of the present embodiments will be apparent from accompanying Drawings and from the Detailed Description that follows.","Referring to , a user  operates wireless device  to access some service (\u201cSVC\u201d)  located at wireless access point , which may be one of any number of wireless access points --- (only two shown). Device  may be any computer system, such as a laptop with wireless connectivity or a hand-held mobile device. Device  includes virtualization software , which runs a guest virtual machine (\u201cGUEST VM\u201d) . Software and certain internal hardware components of wireless device  are shown conceptually using boxes within wireless device . Wireless interface  may be software and hardware implementing a wireless standard such as IEEE 802.11 (e.g., Wi-Fi\u2122), BlueTooth\u2122, or the like, also referred to herein as a wireless local area network (WLAN). In one embodiment, device  may adhere to the IEEE 802.11 standard, and therefore may be capable of scanning for and identifying available access points  that are configured to advertise their presence, and access a particular available access point to form wireless connection  between device  and a user-selected access point , and therefore use service  provided at access point . For example, service  may include a network router that relays data between device  and other devices connected to a network (not shown) accessible by the router. Most digital wireless communications standards include some authentication mechanism whereby user  may authenticate himself\/herself to access point  via presentation of some shared secret such as a password or certificate, or representation thereof. Typical commodity operating systems, of which guest operating system  may be one, include an authentication module (not shown in ) for authenticating the user to a wireless access point , e.g., in accordance with the Wi-Fi Protected Access (WPA or WPA2) standards, or more broadly, IEEE 802.1X. Using the user interface presented to user  by guest operating system , user  may authenticate himself\/herself to access point  in order to access wireless service .","In one embodiment, user  is restricted by virtualization software  from interfacing with device  except through the user interface (UI) (not shown) exported by guest operating system . Thus, in this embodiment, user  must accesses a UI provided by GOS  to control wireless interface . An implementation of this embodiment may be a Client Virtualization Platform (CVP). CVP devices enable an end user to run a virtualized desktop environment on a host device, with minimal or no interaction with the host operating system or host kernel, or applications running directly thereon. CVP technology is envisioned to allow enterprises to manage virtualized desktops that run on distributed hardware (i.e., on user laptops or desktops computers) without the burden of managing (and licensing, where the host operating system is open (such as a Linux\u00ae or BSD\u00ae distribution) both the VM and a host operating system.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["200","202","200","204","206","208","212","208","202"]},"Software  resides in system memory , but is shown conceptually in  as being installed \u201con\u201d hardware platform . Software  includes virtualization software  and virtual machine . Other software may be installed as well, including additional virtual machines, but is not shown so as not to obscure salient features relevant to this description.  is ambiguous as to the dividing line between virtualization software  and virtual machine, since wireless management subsystem  can be a component of either, or distributed between the two, in various embodiments.","Virtualization software  nominally includes system level software (not distinctly shown) for performing a variety of functions such as resource management and allocation to client processes and provision of execution environment for applications, along with system application programming interfaces (APIs) for providing access, through the system level software, to client processes. Virtualization software  may be implemented using a non-hosted (Type 1) or hosted (Type 2) hypervisor (not shown). The host operating system includes a kernel for managing system resources, including memory, processor, and devices. A non-hosted hypervisor relies on a kernel (sometimes referred to as a \u201cVM kernel\u201d) that is purpose-built for supporting virtual machines. One example of a non-hosted hypervisor is embodied in the vSphere Hypervisor\u2122 available from VMware, Inc. of Palo Alto, Calif.","In one implementation, a host operating system (not shown) is provided but is hidden from or otherwise not directly accessible by the user, such that the user can only interact with the guest operating system and whatever resources the hypervisor makes available to the guest operating system. This implementation allows policy controls to be \u201cwrapped around\u201d the virtual machine, to ensure that the VM is only accessed in accordance with whatever policy the owner of the VM (e.g., an enterprise) allows. Such policies may be enforced in a manner similar to that described in U.S. patent application Ser. No. 11\/522,172, filed Sep. 14, 2006.","Virtualization software  supports virtual machine  having execution space  within which guest system software may be installed and executed. The guest system software may include guest operating system , which may be any commodity operating system such as Microsoft Windows\u00ae, Linux\u00ae, Solaris\u00ae x86, NetWare\u00ae, etc. Although only one virtual machine (\u201cVM\u201d)  is shown, any number of VMs  may be supported by virtualization software . For each VM , virtualization software  includes a virtual machine monitor (VMM) (not shown) that provides emulated hardware such as a virtual hard drive (not shown), guest physical RAM (not shown), virtual CPU (not shown), and wireless virtual NIC (\u201cwireless VNIC\u201d) .","Although typically implemented by the VMM portion of virtualization software , virtual hardware platform  is shown as part of VM  since, conceptually, the virtual hardware is often considered part of the VM. Guest operating system  includes a wireless VNIC driver  that interacts with emulated devices (e.g., wireless VNIC ) in virtual hardware platform  as if such emulated devices were actual physical devices, despite the fact that, being \u201cvirtual,\u201d wireless VNIC  is implemented entirely or primarily in software.","Guest operating system  includes an authentication module (authenticator)  that includes software routines for authenticating user  () to an access point . However, it should be recognized that wireless NIC , which resides in the hardware platform , is the entity that is authenticated to the remote access point , not wireless VNIC . Since wireless NIC  cannot be directly controlled by wireless VNIC driver , guest operating system , and hence authentication module  may not be capable of interacting directly with wireless NIC  to perform authentication routines.","In one embodiment, wireless management subsystem  is integrated with wireless VNIC . In another embodiment, wireless management subsystem  is implemented as a component of virtualization software , as further described, by way of example, in  below.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 3"],"b":["214","218","218","202"],"i":"a"},"The host operating system includes an IEEE 802.11 subsystem  (hereinafter, \u201csubsystem \u201d). For the Linux operating system, subsystem  is known as \u201cmac80211.\u201d Subsystem  includes a plurality of interfaces or APIs, including standard 802.3 data interface  (hereinafter, \u201cstandard interface \u201d) as well as what is known as cooked raw control monitor interface . Standard interface  is capable of interacting with any networking application that works with standard 802.3 packets. The standard 802.3 may be a wired standard defining the physical layer and data link layer's media access control (MAC) of wired Ethernet. Network data is passed from a guest application (not shown) in VM  to wireless VNIC driver , to wireless VNIC , to virtual switch (\u201cVSWITCH\u201d) . Network frames bound for VM  travel from virtual switch  to wireless VNIC  and to guest operating system . Similarly, network traffic can travel to and from virtual machine in a similar manner, from 802.3 application to VNIC driver , to VNIC , and on to virtual switch .","Virtual switch  operates in a manner similar to that of physical switches by routing network traffic between virtual machines , and wireless NIC . In one embodiment, virtual switch  is implemented as described in U.S. Pat. No. 7,478,173, which issued to Matthew Delco on Jan. 13, 2009. In another embodiment, the virtual switch is not used. In an embodiment that has no virtual switch, either only one VM may be supported, or multiple VMs in which traffic from one VM to the other is looped back at the wireless router or access point .","In the data link layer of computer networks, each connected device includes a data link address that is typically unique to each device on the network. For Ethernet networks, this address is referred to as the media access control, or MAC address. Each network packet includes both a source MAC address, that is, the MAC address of the sender of the network packet, and a destination MAC address, that is, the MAC address of the intended recipient. Physical wireless NIC  is assigned a MAC address by its manufacturer and is generally intended to be globally unique to the device. Software or virtual NIC devices such as wireless VNICs , can be assigned any MAC address by software. However, it is still important that each device on the network, including virtual devices, have a unique MAC address for the network protocols to function. However, for authentication purposes, as described below, wireless VNIC \u2014the VNIC that is assigned to the VM that exercises management control over wireless NIC \u2014may be assigned the same MAC address as wireless NIC . For data traffic, wireless VNIC  is a pass-through device that sends packets from the guest's network stack (not shown) through to wireless NIC driver  (through subsystem  and optionally through virtual switch  and SMAC interface ), without modification. As will be described in more detail below, this configuration allows authentication module  to authenticate wireless NIC driver  to access point .","In one embodiment, virtual switch  (if present) is connected to SMAC interface . Because wireless NIC driver  expects to send and receive packets with a consistent local MAC address, SMAC interface  substitutes the MAC address of VNIC with the MAC address of wireless NIC  for outgoing frames and vice versa for incoming. More details of the operation of SMAC interface  are described in the above referenced U.S. Pat. No. 7,478,173, where SMAC interface  is described in the referenced patent as \u201cvirtual network connector\u201d or a \u201cmapping unit.\u201d SMAC interface  is in communication between virtual switch  and standard data interface , and effectively makes virtual switch  appear as user-level network application to subsystem .","Wireless NIC driver  receives three types of packets from VMs , . The first type of packet is referred to as \u201cdata packets,\u201d which include packets destined for transmission to access point  (). The second type of packet is referred to herein as \u201ccontrol packets,\u201d which are packets that control which VM can send packets to wireless NIC . \u201cManagement packets\u201d contain instructions or information related to management operations of wireless NIC . These management operations include connection setup information, such as information for scanning for access points, selecting an access point, etc.","Wireless operations of wireless NIC driver , such as scanning for access points, selecting access point, etc., can be implemented as system software for controlling the wireless operations of wireless NIC driver . For example, a standard web browser can interact with the 802.3 interface for sending and receiving network data in the same way it would for any non-wireless NIC.","In the context of the host operating system, a typical user application (not shown) may interact with standard 802.3 interface  to send and receive network data. Also, control packets are sent through standard 802.3 interface  to control which VM controls wireless NIC . Furthermore, 802.11 management packets may be sent and received to perform management operations on wireless NIC  through cooked monitor raw control interface . As earlier described, such management operations can include scanning and listing available access points and selecting an available access point. Hence, standard 802.3 provides both a data and control path between user and system applications running on the host operating system and wireless NIC driver  and standard 802.11 provides a management path between user and system applications running on the host operating system and wireless NIC driver .","In the embodiment of , a division of flow paths is provided by the use of both the standard 802.3 data interface and cooked monitor raw control interfaces , . Standard 802.3 data interface  provides a data and control path  to wireless VNIC , which interacts with IEEE 802.11 subsystem via standard 802.3 data interface as would any application host user application. In operation, subsystem  receives raw packets from wireless NIC driver  and processes them for presentation to higher components. For example, subsystem  may be responsible for decrypting 802.11 packets, reassembling split packets, and hardware-offloading, to provide compatible 802.3 packets via standard 802.3 data interface . The compatible 802.3 packets and standard interface  are usable by any compliant application or library, i.e., applications and libraries that have no special programming for wireless networking, but understand only traditional LAN-based Ethernet protocol. Cooked monitor raw control interface  is used for management operations. For example, management frames in standard 802.11 is used in the connection set up with access point . These frames do not need to be converted by subsystem  and are sent through cooked monitor raw control interface .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4A","b":["226","352","226","354","226","360","314"]},"If the frame is not encryption exempt, then at , the frame is converted to 802.3 packets. This encrypts the frame per the 802.3 standard. At , the packets are sent to VSwitch .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4B","b":["226","362","226","320","364","226","366","314","368"]},"Referring back to , wireless VNIC  is assigned the same MAC address (\u201cMAC X\u201d) as physical wireless NIC  so that authentication with a wireless access point such as access point  can be performed by authentication module  in guest OS 104. In one embodiment, the guest VNIC is given a virtual MAC, and the hardware NIC has a physical MAC.","In another embodiment, multiple virtual machines  of the computer system  may access the physical wireless device . Virtual machine  may configure physical wireless device . The other virtual machines  may access physical wireless device  based on that configuration. Only one VM  may be assigned a physical access point . Other VMs  that are not currently assigned physical access points  are assigned \u201cfake\u201d access points . For example, access points  are emulated and assigned to other VMs  such that these VMs  believe they are connected to an access point .","Guest operating system  may include different states, such as roaming and connected states, according to one embodiment. A state machine, which may be managed by a guest driver, may have different states. The states may include a disconnected state, a roam wait state, a connecting state, a roaming state, and a connected state. The state machine may shift between the different states.","The disconnected state may be when the guest driver is deauthenticated and disassociated from the access point. The roam wait state may be when the guest driver is deauthenticated and disassociated from the access point and\/or a roaming attempt is pending. The connecting state may be when the guest driver is attempting to authenticate and associate with the access point. The roaming state may be when the guest driver is attempting to authenticate and associate as part of a roaming attempt. The connected state may be when the guest driver and the access point are authenticated and\/or associated.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["110","104","108","402","108","238","404","226","406","115","408","206","108","410"]},"Based on a probe of physical wireless device , access point  sends a response to physical wireless device  in operation . Physical wireless device  reads the data from access point  in operation . Wireless NIC driver  applies a header to a frame in operation . Wireless VNIC  copies the frame in operation . Virtual wireless driver  parses the frame in operation . Virtual wireless driver  creates a list of access points available for connecting in operation . Guest operating system  notifies a user  of the available access points in operation . A user  through a user interface of guest operating system  can select an access point  based on a wireless signal  () of access point .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 6","FIG. 1"],"b":["550","104","550","116","108","115","104"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7","b":["650","604","602","108","602","604","650","115","238","650","602"]},"Although the present embodiments have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the various embodiments. For example, the various devices, modules, analyzers, generators, etc. described herein may be enabled and operated using hardware circuitry (e.g., CMOS based logic circuitry), firmware, software and\/or any combination of hardware, firmware, and\/or software (e.g., embodied in a machine readable medium). For example, the various electrical structure and methods may be embodied using transistors, logic gates, and electrical circuits (e.g., application specific integrated (ASIC) circuitry and\/or in Digital Signal Processor (DSP) circuitry).","With the above embodiments in mind, it should be understood that one or more embodiments of the invention may employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing. Any of the operations described herein that form part of one or more embodiments of the invention are useful machine operations. One or more embodiments of the invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, such as the carrier network discussed above, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The programming modules and software subsystems described herein can be implemented using programming languages such as Flash, JAVA\u2122, C++, C, C#, Visual Basic, JavaScript, PHP, XML, HTML etc., or a combination of programming languages. Commonly available protocols such as SOAP\/HTTP may be used in implementing interfaces between programming modules. As would be known to those skilled in the art the components and functionality described above and elsewhere herein may be implemented on any desktop operating system such as different versions of Microsoft Windows, Apple Mac, Unix\/X-Windows, Linux, etc., executing in a virtualized or non-virtualized environment, using any programming language suitable for desktop software development.","The programming modules and ancillary software components, including configuration file or files, along with setup files required for providing the method and apparatus for troubleshooting subscribers on a telecommunications network and related functionality as described herein may be stored on a computer readable medium. Any computer medium such as a flash drive, a CD-ROM disk, an optical disk, a floppy disk, a hard drive, a shared drive, and storage suitable for providing downloads from connected computers, could be used for storing the programming modules and ancillary software components. It would be known to a person skilled in the art that any storage medium could be used for storing these software components so long as the storage medium can be read by a computer system.","One or more embodiments of the invention may be practiced with other computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers and the like. The invention may also be practiced in distributing computing environments where tasks are performed by remote processing devices that are linked through a network. One or more embodiments of the invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can thereafter be read by a computer system. Examples of the computer readable medium include hard drives, network attached storage (NAS), read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, DVDs, Flash, magnetic tapes, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.","While one or more embodiments of the present invention have been described, it will be appreciated that those skilled in the art upon reading the specification and studying the drawings will realize various alterations, additions, permutations and equivalents thereof. It is therefore intended that embodiments of the present invention include all such alterations, additions, permutations, and equivalents as fall within the true spirit and scope of the invention as defined in the following claims. Thus, the scope of the invention should be defined by the claims, including the full scope of equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Example embodiments are illustrated by way of example and not a limitation in the figures of accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4A","b":"226"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4B","b":"226"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
