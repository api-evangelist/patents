---
title: Object model document for obfuscating object model therein
abstract: A persisted object model is loaded from an object model document comprising a compiled executable file having an image source, a security source, and a loader. The loader is instantiated, and instantiates the object model from the image source and a security agent from the security source to control access to the instantiated object model. The loader returns to a commander a first reference to the instantiated security agent, whereby the commander in employing the first reference accesses the security agent rather than the instantiated object model. A commander issues a command to the instantiated object model by way of the first reference to the security agent, and the security agent receives and reviews same according to pre-defined rules to determine whether the object model should in fact receive the command. If so, the security agent forwards the command to the object model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07591021&OS=07591021&RS=07591021
owner: Microsoft Corporation
number: 07591021
owner_city: Redmond
owner_country: US
publication_date: 20030905
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","CONCLUSION"],"p":["This invention relates to an object model document such that the document may be executed by an appropriate application but that obfuscates the object model therein such that certain actions may not be taken with regard to the object model, such as saving the object model in a non-obfuscated form. More particularly, the invention relates to methods and mechanisms that achieve such obfuscation of such object model within the object model document.","As may be appreciated, in the computer-related art, an object model is a collection of computer-type objects that are instantiated in a memory of a computer or the like, and includes state information relating to the objects, properties of objects, methods that can be performed with regard to the objects, relationships between the objects, and other pertinent information necessary to allow the object model to function to achieve an overall goal. Such object model may be created by or in combination with a particular computer application for execution thereon, or may be created by another computer application to be executed on the particular computer application.","Categories and varieties of such object model are many and varied. For example, the object model may represent the architectural specifications for a building as created by an architectural application. Similarly, the object model may represent the electrical and plumbing specifications for such building as created by a building services application. Likewise, the object model may represent design specifications for controlling a machine to produce a particular object as created by a machine-control application.","Significantly, at least with regard to the present disclosure, an object model in a memory of a computer or the like may be persisted as an object model document. That is, the present state of an object model may be saved in the form of a computer data file or the like and then re-loaded at a later time to re-create the object model in its former state. Methods and mechanisms for persisting an object model are known or should be apparent to the relevant public and therefore need not be described herein in any detail.","Note that an object model may be persisted as an object model document by a designer of the object model who wishes to suspend designing activity and then continue with such designing activity at a later time, for example. More notably, once the object model has been designed, it may be the case that the designer or a master of the designer may wish to persist the object model document and then sell, license, or otherwise convey (hereinafter \u2018sell\u2019) the persisted object model document as the object model to one or more interested purchasers. The purchaser might then apply the corresponding application to act upon information represented by the object model document.","One way to persist an object model as an object model document is to save the object model as an extensible markup language (XML) type document. However, it is to be appreciated that an XML-type object model document is in effect human-readable source code that describes the object model, where such source code can be viewed with ease by a purchaser and perhaps modified thereby. That is, such XML-type document containing the source code for the object model is not obfuscated. As may be appreciated, then, a seller of such an object model would not likely in fact sell the object model in such non-obfuscated form, because upon examination of the source code of the object model, the steps leading to ultimate achievement of whatever it is a particular object model document is designed to achieve would become evident. Thus, in many cases it is desirable to withhold such information while providing the ability to achieve the ultimate result.","Another way to persist an object model as an object model document is to save the object model as a programming-language type document, such as for example as a C-type programming language document. Of course, it is to be appreciated that a C-type programming language object model document is, like an XML-type object model document, in effect source code that describes the object model, where such source code is non-obfuscated and can be viewed with ease. Thus, and again, a seller of such an object model would not likely in fact sell the object model in such non-obfuscated form.","However, such C-type programming language object model document can be compiled by way of an appropriate compiler into an executable file. Moreover, and significantly, such executable file contains machine code which is in fact by its nature difficult to understand\/obfuscated and if viewed or otherwise examined likely will not reveal the aforementioned source code for the object model embodied therein.","Such an executable file with the obfuscated object model embodied therein would seem to be amenable to the seller of such an object model. Critically, though, such executable file is designed to be executed upon the command of a corresponding computer application to instantiate the object model therein in a memory of a computer. More to the point, such computer application also very likely includes all functionality necessary to persist or save the instantiated object model in some non-obfuscated form, such as for example the aforementioned XML-type object model document or the aforementioned C-type programming language object model document.","Accordingly, a need exists for a method and mechanism that allows an object model to be persisted as an object model document, where the object model resides within the object model document in an obfuscated form and cannot be saved or otherwise improperly revealed in a non-obfuscated form. Moreover, a need exists for such a method and mechanism whereby the object model document with the obfuscated object model therein can be employed by any appropriate application without any special modification thereto.","The aforementioned needs are satisfied at least in part by the present invention in which a persisted object model is loaded from an object model document comprising a compiled executable file having an image source, a security source, and a loader. The loader is instantiated in a memory of a computer upon a command from a commander to execute the executable file to instantiate the persisted object model. The loader instantiates the object model in the memory from the image source, and instantiates a security agent in the memory from the security source. The security agent controls access to the object model as instantiated in the memory of the computer. The loader returns to the commander a first reference to the instantiated security agent, whereby the commander in employing the first reference accesses the security agent rather than the instantiated object model.","To process a command from a commander to the instantiated object model issued by way of the first reference to the security agent, the security agent receives such command and reviews same according to pre-defined rules therein to determine whether the object model should in fact receive the command. If so, the security agent forwards the command to the object model and the object model receives the command and executes same.","Computer Environment",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of co-processing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline(s).",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 2"],"b":["10","10","110","110","110","14","10","110"],"i":["a","b","a","b","c"]},"It can also be appreciated that an object, such as , may be hosted on another computing device  or . Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 players, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wireline or wireless systems, by local networks or widely distributed networks. Currently, many of the networks are coupled to the Internet, which provides the infrastructure for widely distributed computing and encompasses many different networks.","In home networking environments, there are at least four disparate network transport media that may each support a unique protocol such as Power line, data (both wireless and wired), voice (e.g., telephone) and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband (e.g., either DSL or Cable modem) and are accessible within the home using either wireless (e.g., HomeRF or 802.11 b) or wired (e.g., Home PNA, Cat 5, even power line) connectivity. Voice traffic may enter the home either as wired (e.g., Cat 3) or wireless (e.g., cell phones) and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short, a variety of disparate sources exist for the storage and transmission of data, and consequently, moving forward, computing devices will require ways of protecting content at all portions of the data processing pipeline.","The \u2018Internet\u2019 commonly refers to the collection of networks and gateways that utilize the TCP\/IP suite of protocols, which are well-known in the art of computer networking. TCP\/IP is an acronym for \u201cTransport Control Protocol\/Interface Program.\u201d The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide-spread information sharing, remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services, essentially without restriction.","Thus, the network infrastructure enables a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. Thus, in computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer e.g., a server. In the example of , computers , , etc. can be thought of as clients and computer , , etc. can be thought of as the server where server , , etc. maintains the data that is then replicated in the client computers , , etc.","A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.","Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example, Hypertext-Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW). Typically, a computer network address such as a Universal Resource Locator (URL) or an Internet Protocol (IP) address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example, communication can be provided over a communications medium. In particular, the client and server may be coupled to one another via TCP\/IP connections for high-capacity communication.","Thus,  illustrates an exemplary networked or distributed environment, with a server in communication with client computers via a network\/bus, in which the present invention may be employed. In more detail, a number of servers , , etc., are interconnected via a communications network\/bus , which may be a LAN, WAN, intranet, the Internet, etc., with a number of client or remote computing devices , , , , , etc., such as a portable computer, handheld computer, thin client, networked appliance, or other device, such as a VCR, TV, oven, light, heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process, store or render secure content from a trusted source.","In a network environment in which the communications network\/bus  is the Internet, for example, the servers  can be Web servers with which the clients , , , , , etc. communicate via any of a number of known protocols such as HTTP. Servers  may also serve as clients , as may be characteristic of a distributed computing environment. Communications may be wired or wireless, where appropriate. Client devices  may or may not communicate via communications network\/bus , and may have independent communications associated therewith. For example, in the case of a TV or VCR, there may or may not be a networked aspect to the control thereof. Each client computer  and server computer  may be equipped with various application program modules or objects  and with connections or access to various types of storage elements or objects, across which files may be stored or to which portion(s) of files may be downloaded or migrated. Thus, the present invention can be utilized in a computer network environment having client computers , , etc. that can access and interact with a computer network\/bus  and server computers , , etc. that may interact with client computers , , etc. and other devices  and databases .","Obfuscating an Object Model Within an Object Model Document","Referring now to , it is seen that within the context of a computer or computer system  (hereinafter \u2018computer \u2019), a developer, user, or the like has developed and\/or instantiated an object model  in a memory  with the aid of an appropriate application . As was set forth above, the object model  is a collection of computer-type objects in the memory  of the computer , and includes state information relating to the objects, properties of objects, methods that can be performed with regard to the objects, relationships between the objects, and other pertinent information necessary to allow the object model to function to achieve an overall goal. Such object model  may be any appropriate object model without departing from the spirit and scope of the present invention. For example, the object model  may represent an architectural system, an electrical system, an engineering system, a computing system, a plumbing system, etc.","As was also set forth above, the object model  in the memory  of the computer  may be persisted as an object model document  by way of the application  or by way of another application. In particular, and in one embodiment of the present invention, the object model  may be saved as a programming-language type document , such as for example as a C-type programming language document. Note, though, that the object model  may alternately be saved as any other type of programming language document or other type of document without departing from the spirit and scope of the present invention.","Again, the C-type programming language object model document is in effect source code that describes the object model , where such source code is non-obfuscated and can be viewed with ease. Thus, in one embodiment of the present invention, such document is compiled by way of an appropriate compiler  into an executable file of machine code. As a result of such compiling, such executable file is in fact obfuscated and if viewed or otherwise examined likely will not reveal the aforementioned source code for the object model  embodied therein.","However, such executable file can be executed upon the command of the application  or by way of another application to instantiate the object model  therein in the memory  of the computer . Moreover, such application  likely includes all functionality necessary to persist or save the instantiated object model  in a non-obfuscated form. Accordingly, and in one embodiment of the present invention, the compiler  compiles the C-type programming language object model document into the executable file shown in .","In particular, and turning now to , in one embodiment of the present invention, the executable file is produced by the compiler  from the document to have components including a loader , an image source  from which the object model  is to be instantiated in the memory  of the computer , and a security source  from which a security agent  is to be instantiated in the memory  of the computer .","As may be appreciated, the loader  of the executable file of the present invention instantiates the object model  upon a command from the application  or another application (hereinafter \u2018the commander \u2019) to execute the executable file . Essentially, and as is known, upon a command from the commander  to execute the executable file , the loader  is instantiated in the memory  of the computer  for the purpose of loading all necessary components including the image source  to instantiate the object model  and the security source  to instantiate the security agent . The loader  includes all necessary instructions for loading the components as set forth by the compiler , including information such as which components are to be instantiated, when such components are to be instantiated, where such components are to be instantiated, etc. Significantly, upon loading all necessary components, the loader  returns to the commander  a reference  to a location in the memory  of the computer  where the commander  may access the object model  as instantiated therein. As may be appreciated, such reference  may be a pointer or the like. The loader  may be any appropriate loader without departing from the spirit and scope of the present invention, and is known or should be apparent to the relevant public and therefore need not be described herein in any detail.","In one embodiment of the present invention, the reference  returned by the loader  to the commander  is to the location in the memory  of the computer  where the loader  has instantiated the security agent  based on the security source  of the executable file , and not the location in the memory  of the computer  where the loader  has instantiated the object model  based on the image source  of such executable file . Accordingly, and as should be appreciated, the commander  in attempting to access the object model  in actuality accesses the security agent . As may now be appreciated, and as will be disclosed in more detail below, the security agent  in effect acts as a wrapper or guard that controls access to the object model  in a manner defined by the compiler  upon producing the executable file . Thus, the commander  indirectly accesses the object model  by way of the reference  to the security agent  as received from the loader .","The object model  as instantiated by the loader  in the memory  of the computer  is thus not specially protected in any particular manner but for the fact that all access to the object model  as instantiated is by way of the instantiated security agent . Notably, inasmuch as the commander  does not have any reference directly to the object model , such commander  has no way of directly accessing the object model  and therefore cannot command the object model  to act, especially in any manner that the security agent  would not approve of.","In one embodiment of the present invention, the security agent  as instantiated by the loader  in the memory  of the computer  and as pointed to by the reference  is constructed by the compiler  to pass on each command from the commander  to the object model  as instantiated by the loader  in the memory  of the computer , unless such command is deemed to be of a type that should not be so passed on. As may be appreciated, one type of command that the security agent  should pass on to the object model  is any command that would normally be expected to be given to the object model  during the normal operation thereof and that does not act to expose the object model  in a non-obfuscated form. For example, the security agent  should allow any type of command that runs the object model  in the manner in which the object model  is expected to be run.","As may also be appreciated, and significantly, one type of command that the security agent  should not pass on to the object model  is any command that would allow the object model  to be saved in a non-obfuscated form. For example, the security agent  should \u2018intercept\u2019 or not pass on any type of command that saves the object model  as an XML-type object model document, as a C-type programming language object model document , or as any other like non-obfuscated form.","Note that other types of commands exist that the security agent  should intercept from being passed on to the object model , and the security agent  may be constructed to intercept any type of command without departing from the spirit and scope of the present invention. For example, the security agent  may be constructed to intercept print commands if so desired. Also, if desired, the security agent  may be constructed to intercept certain types of commands if deemed to expose the object model  with too fine a granularity, such as for example, a print command that prints every detail of the object model . Alternatively, the security agent  may be constructed to intercept such a fine granularity command and substitute a lesser granularity command, such as for example, a print command that prints a less detailed version of the object model .","Significantly, in the present invention, although the commander  indirectly accesses the object model  by way of the reference  to the security agent  as received from the loader , such commander  need not be aware of such indirect access, and is not aware of such indirect access unless a command therefrom is intercepted by the security agent  and thus fails. Thus the present invention may be employed without any special modification to the commander .","The security agent  as heretofore set forth is instantiated separately from the object model  by the loader  in the memory  of the computer . However, the security agent  may also be instantiated as part of the object model  without departing from the spirit and scope of the present invention. Note, though, that to do so may require the compiler  to alter the image source  of the object model  during the process of compiling same to include therein the substance of the security source  of such security agent .","Notably, in the present invention, the instantiated security agent  behaves in all regards the same as an object model , and a commander  cannot and does not need to make a distinction regarding whether a security agent  or an object model  is being accessed at any point. However, by only allowing the commander  to access the security agent , the security agent  is in a position to exercise control over access to all of or portions of the object model . For any requested access from a commander  which is not deemed allowable by the security agent , such security agent  returns an error to the commander  without having allowed access to the object model .","Turning now to , then, it is seen that in one embodiment of the present invention, the compiled executable file of  as employed by a commander  executing same operates in the following manner. Preliminarily, the commander  in fact executes the executable file (step ) and in response thereto the operating system of the computer  finds the loader  in the executable file and instantiates same in the memory  of the computer  or elsewhere (step ). Thereafter, the loader  finds the image source  in the executable file and instantiates same in the memory  as the object model  (step ), and also finds the security source  in the executable file and instantiates same in the memory  as the security agent  (step ).","Notably, the loader  in instantiating the security agent  provides same with a reference  to the location of the object model  in the memory  of the computer  (step ), and after instantiating the security agent  provides the reference  to the location of such security agent  in the memory  of the computer  to the commander  (step ). As with the reference , reference  may be a pointer or the like.","Thus, the commander  upon receiving the reference  understands that a command may be issued to the object model  by way of such reference . Note, though, that as was set forth above, upon the commander  issuing such a command by way of such reference  (step ), such command is in fact received by the security agent  (step ).","Thus, the security agent  reviews the command according to pre-defined rules therein to determine whether the object model  should in fact receive the command (step ), and if so the security agent  forwards the command to the object model  by way of the reference  (step ). Otherwise, the security agent does not forward the command to the object model , but instead takes an alternate action, such as for example responding to the commander  with a message or the like to the effect that the command cannot be issued to the object model . At any rate, upon receiving a command from the security agent , the object model  performs whatever action is required based on such command and if necessary reports back to the commander , perhaps by way of the security agent  (step ).","The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight-forward and should be apparent to the relevant programming public. Accordingly, such programming is not attached hereto. Any particular programming, then, may be employed to effectuate the present invention without departing from the spirit and scope thereof.","In the present invention, a method and mechanism are provided that allow an object model  to be persisted as an object model document , where the object model  resides within the object model document in an obfuscated form and cannot be saved or otherwise improperly revealed in a non-obfuscated form. The object model document with the obfuscated object model  therein can be employed by any appropriate application  without any special modification thereto.","It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. It should be understood, therefore, that this invention is not limited to the particular embodiments disclosed, but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of the embodiments of the present invention, will be better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there are shown in the drawings embodiments which are presently preferred. As should be understood, however, the invention is not limited to the precise arrangements and instrumentalities shown. In the drawings:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 5","FIG. 4"]}]},"DETDESC":[{},{}]}
