---
title: Protocol engine application interface
abstract: There is disclosed an interface block for providing application access to the underlying protocol engine at several different layers. These layers are preferably the application core layer, the transaction layer, and the transport layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07949772&OS=07949772&RS=07949772
owner: Nokia Corporation
number: 07949772
owner_city: Espoo
owner_country: FI
publication_date: 20020531
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND TO THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to applications which use underlying protocol engines. The invention is particularly but not exclusively related to multimedia applications, and SIP, the IP telephony signaling protocol.","Multimedia applications are increasingly utilised, particularly in mobile wireless applications.","In any such applications, an application must have access to an underlying protocol engine. A common protocol engine in IP (Internet protocol) telephony is the Session Initiation Protocol (SIP).","The most popular API specification for SIP is known as JAIN SIP API. It is a collection of Java interfaces implementing access to SIP protocol engines at a transaction level.","The JAIN SIP API is inflexible, hard to extend, underspecified and does not suit well proxy applications.","It is therefore an object of the present invention to provide an improved access for application to an underlying protocol engine, particularly but not exclusively for the case where that protocol engine is a SIP engine.","In accordance with the present invention there is provided a method of providing access from an application to an underlying protocol engine at a plurality of different layers.","Said access is preferably provided through a transaction layer.","Access may be provided through an interface of the transaction layer at a plurality of different layers.","Access may be provided at an application core layer. Said access may be to calls.","Access may be provided at a transaction layer. Access may be to transactions.","Access may be provided at a transport layer. Said access may be to a stateless message transport.","There may further additionally be provided other application core functionality.","There may further be provided session initiation protocol functionality to the application.","The application may be IP telephony.","A request message may be processed, as is well known, in dependence on a comparison of the top most Via header of the message. At least part of the request routing may implemented as part of a dialog matching code. There may be provided a failure-proof fallback code for routing and processing logic.","The application may be a multimedia application.","In accordance with the present invention there is further provided an interface adapted to provide access between an application and an underlying protocol engine at a plurality of different layers.","The interface may be formed in a transaction layer. The transaction layer may be adapted to provide an interface at the plurality of different layers.","An interface may be provided at an application core layer. The interface may be provided at a transaction layer. The interface may be provided at a transport layer.","There may further be provided means for implementing further application core functionality above the interface.","There may further be provided means below the interface functionality.","The invention is thus a software interface and underlying middleware for SIP. It provides an easy-to-use and flexible framework for creating SIP applications. Its features make it easy to create correct and robust SIP software that can make use of later protocol extensions.","The invention provides versatile means for a IP telephony application writer to add SIP functionality to their application. While the applications may be very different from each other, it is beneficial to use common middleware components implementing the core SIP protocol functionality.","The interface provides versatile access to an SIP protocol engine in particular. The application (e.g. proxy server, redirect server) can be stateful or stateless, the application can itself assemble all messages or it can let the interface complete them. The application can let the interface filter out extra messages not affecting the application state, like 100 Trying. Most function calls take extra named arguments, thus making it easy to pass extra arguments to lower layers taking care of transport or message syntax.","The applications can customize the parsing process. For example, they can avoid parsing irrelevant headers or cache the message contents if it will be forwarded. Adding new headers is trivial, and does not affect the interface.","Because implementation allows the application to create new header classes at run time, it is possible to add new headers without compiling anything.","Applications can let the interface take care of tasks belonging to the application core layer, like routing requests or responses according to DNS data, matching incoming requests with dialogs, or matching incoming requests with existing server transaction objects.","The present invention is described herein by way of reference to a particular non-limiting example. One skilled in the art will appreciate that the invention may be more broadly applicable.","The invention is described herein with particular reference to an implementation in a software for internet applications (SOFIA) implementation. A block diagram of an exemplary SOFIA architecture is shown in , including a signalling subsystem adapted in accordance with a preferred embodiment of the present invention.","It is assumed in the following discussion that the skilled reader is familiar with the well-known session initiation protocol (SIP), session description protocol (SDP) and other signalling protocols as discussed hereinbelow. The implementation of such protocols does not form part of the present invention in so far as such implementations are not described herein.","Referring to , the SOFIA architecture includes a set of applications , a signalling subsystem , a media subsystem , and an operating system abstraction layer .","The applications  include, in the example shown, a proxy server application , a registrar\/presence server application , a simple ubiquitous rich-call facilitator (SURF) server application , and media server applications such as announcement server  and conference server application .","The signalling subsystem  includes iptres, iptsec, and nea blocks ,  and  respectively, a Nokia user agent API (NUA) , a Nokia Transaction API (NTA) , a nth , a ntr , a transport block , an IP telephony utility library (IPT) , a http block , a SIP block , a RTSP block , and a protocol independent message block (MSG) . The nea block  is a Nokia event API block. The NTA module  implements the SIP dialogs and transactions. The tport module  implements message transport. The sip module  provides syntax and encoding for different SIP headers. The msg module  provides generic SMTP-like abstract syntax-and encoding primitives. The tport  and msg  modules can be shared by other protocols, like RTSP or HTTP.","The elements of the media subsystem  include a multimedia subsystem block , which realises the interface with the signalling subsystem , an SDP block  for defining session, media and codec descriptions, an RTP block  for transporting media over IP, and including a jitter buffer, packet video module  for video conferencing and an audio module . The audio module is further associated with an audio device , a codec , and an RTP block . The video module  is further associated with a codec , a video device , and an RTP block .","The operating system abstraction layer  includes an SU block  containing an SU library.","In , the signalling subsystem  may be considered to be a control part of the application, and the media subsystem may be considered to be a media part of the application.","A detailed description of a preferred embodiment of the present invention is given hereinbelow.","The NTA block  is an application programming interface (API) between an IPT application and a transaction-layer session initiation protocol (SIP) protocol engine. It should be noted that although the present invention is described by way of reference to a specific implementation which utilises the Nokia Transaction API, the skilled person reading the following description will appreciate that the functionality provided by the present invention may be more broadly applied.","The NTA block  provides means, in accordance with a preferred embodiment of the present invention, for an application to:\n\n","Referring to point 1 above, the transport protocol endpoints (also known as sockets) are established when an NTA agent object (nta_agent_t) is created. The application can control what kind of sockets are created by supplying a URL as a parameter to the NTA block . According to the URL, the sockets can be bound to well-known SIP port(s), or to ephemeral ports. Also, the URLs specify which transport protocol(s) are supported.","The NTA interface provides access to SIP protocol methods\/primitives at three different layers: dialogs at an application core layer, transactions at a transaction layer, and stateless message transport at a transport layer.","With reference to , the As shown in , there is illustrated an application block , a NTA block , a transport block , a MSG block  and a SIP block .","As also shown in , the SIP protocol is structured to five layers. The lowest layer  is the message syntax layer. The next layer  is the message transport layer. The next layer  is the transaction layer. These three layers ,, behave in an identical way in all SIP elements.","On top of transaction layer  is the application core layer , which defines three different cores: the User Agent Client (UAC) core, the User Agent Server (UAS) core and the proxy core. An application core defines common rules for basic transaction processing and dialog handling, for instance. The SIP protocol specification also defines a few logical entities: User Agent, Registrar, Redirect Server, Stateless Proxy, Stateful Proxy, and Back-to-Back User Agent. A logical entity describes a role in which a SIP application participates to a SIP operation.","Finally, the highest layer is the logical entity layer .","In accordance with the preferred embodiment of the present invention, the NTA interface block  provides an application access to the underlying protocol engine at three different layers: dialogs at the application core layer  as represented by interface ; transactions at the transaction layer as represented by interface ; and stateless message transport at the transport layer as represented by interface .","A separate piece of middleware (such as the software for Internet package (SOFIA) NUA User-Agent library) may implement the rest of the application core functionality on top of the NTA.","As shown in , in this embodiment of the invention the functionality below the NTA API block is provided by four software modules: the nta block  itself; the transport bock  tport; the SIP block  sip; and the MSG block  msg.","As explained further hereinbelow, an application can extend the functionality provided by the underlying layers without modifying or affecting the transaction layer.","Different applications use greatly varying numbers of parameters with the NTA API. For example, while the simplest application can just provide the method name and dialog when creating a transaction, a sophisticated application may include many other parameters ranging from Call-Info containing rich caller identification to overriding 100-filtering attributes. The NTA API in accordance with this embodiment of the present invention therefore provides a flexible way to include optional parameters in function call parameters.","The NTA approach preferably uses named parameters. Named parameters are passed using a special macro expanding to a tag\/value pair (this pair can be considered as a constructor). For instance, the tag item macro SIPTAG_SUBJECT_STR(sub) expands to tag siptag_subject_str and string sub. The argument lists are typesafe if the definition uses special inline function casting the value to tag_value_t as follows:",{"@attributes":{"id":"p-0060","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define SIPTAG_SUBJECT_STR(v) \u2009\\"]},{"entry":[{},"\u2003\u2002siptag_subject_str, siptag_subject_str_v(v)"]},{"entry":[{},"inline tag_value_t siptag_subject_str_v(char const *s) \u2009{"]},{"entry":[{},"\u2003return (tag_value_t)s);"]},{"entry":[{},"}"]},{"entry":[{},"extern tag_type_t siptag_subject_str;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Outside parameter lists, the tag and the value are stored in an object called tag item, (tagi_t) defined as follows:",{"@attributes":{"id":"p-0062","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct tag_type_s const *tag_type_t;"]},{"entry":[{},"typedef unsigned long tag_value_t; \u2003\/* integral type that"]},{"entry":[{},"can hold a pointer *\/"]},{"entry":[{},"typedef struct {"]},{"entry":[{},"\u2003tag_type_t t_tag;"]},{"entry":[{},"\u2003tag_value_t t_value;"]},{"entry":[{},"}\u2009 tagi_t;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The tag is a pointer to a special structure specifying the name of the tag and the type of the tag value.","A tag list can refer to another tag list, therefore making it possible to pass the argument list from one layer to another.","There are tags for SIP headers, NTA attributes, URLs, etc. An application can create its own tags to describe, for instance, a new extension header used by it.","For example, initiating an INVITE transaction in an SIP sesion with a given subject and a couple of rich caller identification URIs would look like this:",{"@attributes":{"id":"p-0067","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"orq = nta_outgoing_tcreate("]},{"entry":[{},"\u2003\u2003dialog, \u2009&process_response, &call_context,"]},{"entry":[{},"\u2003\u2003NULL,"]},{"entry":[{},"\u2003\u2003SIP_METHOD_INVITE,"]},{"entry":[{},"\u2003\u2003NULL, \u2009\/* RequestURI, From, To, Call-ID, CSeq are"]},{"entry":[{},"provided by dialog *\/"]},{"entry":[{},"\u2003\u2003SIPTAG_SUBJECT_STR(subject),"]},{"entry":[{},"\u2003\u2003SIPTAG_CALL_INFO_STR(icon_url),"]},{"entry":[{},"\u2003\u2003SIPTAG_CALL_INFO_STR(calling_card_url),"]},{"entry":[{},"\u2003\u2003SIPTAG_CONTENT_TYPE_STR(\u201capplication\/sdp\u201d),"]},{"entry":[{},"\u2003\u2003SIPTAG_PAYLOAD(sdp),"]},{"entry":[{},"\u2003\u2003NTATAG_100_TRYING(true), \/* Don't filter 100 Trying"]},{"entry":[{},"from next proxy *\/"]},{"entry":[{},"\u2003\u2003TAG_END( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Preferably, the 100 Trying messages of an SIP sesion are filtered by the NTA. In this embodiment, however, the application gives a user complete feedback for the call progress, including the first 100 Trying.","The prototype for nta_outgoing_tcreate( ) is as follows:",{"@attributes":{"id":"p-0070","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"nta_outgoing_t *"]},{"entry":[{},"nta_outgoing_tcreate(nta_leg_t *leg,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"nta_response_f *callback,"]},{"entry":[{},"nta_outgoing_magic_t *magic,"]},{"entry":[{},"url_string_t const *route_url,"]},{"entry":[{},"sip_method_t method,"]},{"entry":[{},"char const *method_name,"]},{"entry":[{},"url_string_t cont *request_uri,"]},{"entry":[{},"tag_type_t tag, tag_value_t value,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"...);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The su library provides macros (ta_list, ta_start, ta_args, ta_tags, ta_end) that implement the tag lists for different binary architectures.","Some named arguments specify the semantics followed by NTA. The overall semantic attributes are usually specified with nta_agent_set_params( ) function; in special cases, the semantic attributes can also be provided for each dialogue or transaction separately (like NTATAG100_TRYING attribute provided in the example above). The semantic attributes include:\n\n","The application  can also provide a message class as a parameter when the NTA agent object is created. The message class is an interface to the SIP message syntax layer. The application can customize the message class according its needs. Also, the transaction or transport modules can further modify the behavior of the message class if, for example, they need to provide extra debugging information. Referring to , there is further illustrated the modification of an SIP application  by way of extension . An SIP application, in this example, extends the basic SIP parser functionality beyond the basic subset required by the transaction engine.","This is an important aspect of this embodiment of the invention in an environment where either the code footprint or the performance is an issue. A mobile User Agent can reduce the code footprint by only including bare minimum parsing functionality. A high-performance SIP proxy needs only to parse those headers absolutely required by its routing functionality.","Referring to , there is illustrated the difference between the prior art and the present invention. Responding to a request using JAIN SIP API ()) and NTA (), the NTA takes care of many routine tasks on behalf of the application.","Referring to ), in the prior art in the application layer  a message is created, headers copied from the request, a status line and response headers added.","In the present invention, in the application layer  a reply is preferably made with status line, response headers.","In the prior art in the UAS core layer , it is checked that the message is complete. In the preferred implementation of the present invention, in the UAS core layer  the list is prepended with standard headers (e.g. server).","In the prior art in the transaction layer , a response is sent, and a retransmission made if required. In the preferred implementation of the present invention in the transaction layer , a message is created. Headers are copies from the request, and headers provided by the upper layers added. It is then checked that the message is complete. The response is sent, and retransmitted if required.","The agent object (nta_agent_t), a dialog object or a server transaction object act as message object factories.","Applications can obtain message objects already populated by basic headers from them, for instance. An application can also choose not to handle messages at all, but rather provide required information (request method, URI, response code, extra headers) to the NTA and let it create the message, populate it with its own headers and header provided by application, and send the message to the network.","A middleware library, for instance, UA Core library, may insert its own headers in the list of named attributes.","For instance, assume that a terminal application answers to a call as follows:",{"@attributes":{"id":"p-0084","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ua_call_acccept(&call,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003SIPTAG_CALL_INFO_STR(icon_url),"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003SIPTAG_CALL_INFO_STR(calling_card_url),"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003TAG_END( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The UA core library may then add media-processing specific headers (headers related to SDP processing), headers providing information about Supported features, User-Agent, and Contact header used for the future message within the dialog. The library could implement a ua_call_reply( ) function as follows:",{"@attributes":{"id":"p-0086","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void ua_call_accept(ua_call_t *call,"]},{"entry":[{},"\u2003\u2003\u2003\u2003tag_type_t tag, tag_value_t value,"]},{"entry":[{},"\u2003\u2003\u2003\u2003...)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003ta_list ta;"]},{"entry":[{},"\u2003..."]},{"entry":[{},"\u2003ta_start(ta, tag, value);"]},{"entry":[{},"\u2003...\u2003\u2003\u2009Do the media processing, create sdp"]},{"entry":[{},"\u2003nta_incoming_treply(call->irq,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002SIP_200_OK,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002SIPTAG_USER_AGENT_STR(call->ua->name),"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002SIPTAG_SUPPORTED(call->ua->supported),"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002SIPTAG_CONTACT(call->ua->contact),"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002SIPTAG_CONTENT_TYPE_STR(\u201capplication\/sdp\u201d),"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002SIPTAG_PAYLOAD(sdp),"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2002TAG_NEXT(ta_tags(ta)));"]},{"entry":[{},"\u2003ta_end(ta);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The NTA library may then add all the biolerplate headers to the reply, like From, To, Call-ID, CSeq, Record-Route, Timestamp, etc.","Such detail will be implementation dependent, and within the scope of one skilled in the art.","A SIP dialog is a relationship between two SIP user agents, usually but not always corresponding to an IP telephony call between these user agents. A dialog is specified by Call-ID, local name and its tag, remote name and its tag, and by the remote contact URI. A dialog also contains a route that is used to send the requests. According to the latest SIP specification, the local and remote names are ignored (so they can be modified to better reflect the real identity of call parties after a call redirection, for instance). A dialog also specifies a route to the other SIP UA. A route is a list of SIP URI that the request must traverse, at simplest it just contains the URI of the remote UA.","In addition to the fully specified dialogs (known as legs in NTA documentation), the NTA provides dialog templates (default legs). They are underspecified, i.e., they miss some or all the attributes listed above. They can be used, for example, when a call is being set up and the remote peer is not known. Other uses include routing: an application can ask NTA to route certain request URLs to a given application object. The request URI can also contain a wildcard, for example, a gateway may want to pick up all requests to a certain domain regardless of the user part (usually containing the telephone number) A default leg can also be used when an initial route is used.","NTA can also overspecify dialogs: the application can ask that only requests with certain methods are processed by the leg object.","When a dialog is created, the application must provide NTA with enough information to specify the dialog and establish the route. While the route processing is responsibility of NTA, the application must known when the dialog is established. In basic SIP, a dialog is established with a 200-series response to INVITE, but SIP extensions like 100 rel and events have their own rules for establishing a dialog.","In a preferred embodiment using signaling techniques as described hereinabove, the incoming messages are processed according to the following algorithm:","1. If the message is a request:\n\n","If no matching transaction is found, the next step is proceeded to.\n\n","If no matching transaction is found, the next step is proceeded to.\n\n","Otherwise, the next step is proceeded to.\n\n","Otherwise, the next step is proceeded to.\n\n","Otherwise, the next step is proceeded to.","Note that here, RequestURI as well as Call-ID, From or To headers may be unspecified (wildcarded).\n\n","Otherwise, the next step is proceeded to.","Note that here RequestURI may be unspecified (wildcarded)\n\n","2. If the message is a response:\n\n","Otherwise, the next step is proceeded to.\n\n","Otherwise, the next step is proceeded to.\n\n","Otherwise, the message is discarded.","3. Otherwise, if the message is not a request or a response it is discarded.\n\n","In summary, the present invention therefore provides, in the preferred embodiments, an SIP middleware that can be used in: SIP user agents (terminals, gateways); SIP proxies (stateful, stateless, session); SIP Back-to-back user agents; SIP registrars; SIP redirect servers (both stateful and stateless); SIP presence servers, etc.","It will be apparent from the description of the above example scenarios that various modifications to the invention are possible. The invention, and embodiments thereof, provides several advantages, some of which are stated hereafter.","Advantageously, the invention consistently uses URLs for addressing.","Embodiments of the invention use typesafe named argument lists. Named argument lists are used to transparently pass optional arguments through middleware layers (application core, transaction). Extension of functionality is possible without modifying intermediate software layers.","Attributes changing the NTA semantics means that the transaction function may be tailored for a particular application (UA\/proxy).","Advantageously attributes from agent and dialog are inherited.","Embodiments of the present invention provide an extensible message factory object. The parser is provided by the application. The message syntax is extensible and can be tailored for the application. The application does not have to know about the needs of underlying layers. If the application does not use a header, it can be left unparsed (and the header parsing and manipulation code can be removed). Different applications can have different view on some headers.","Step 1(c) in the method described above offers the advantage of the UA not needing to keep a hash table identical to h2, but the topmost Via.","Step 1(e) in the method described above allows part of the request routing to be implemented as a part of the dialog matching code.","Step 1(f) in the method described above allows part of the request routing to be implemented as part of the dialog matching code","Step 1(h) in the method described above provides a failure proof fallback code for routing logic.","Step 2(d) in the method described above provides a common fallback code for obscure failure cases.","The invention also advantageously provides the possibility to specify only minimum amounts of arguments when making a request or replying to it. Complexity is removed from application (potentially in many places) to the transaction function (implemented only once)","Whilst the present invention has been described herein by way of reference to particular examples, it is not limited to those examples. The scope of the invention is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is now described by way of example with reference to the accompanying figures in which:",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
