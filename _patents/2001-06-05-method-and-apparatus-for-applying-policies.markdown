---
title: Method and apparatus for applying policies
abstract: A policy handling system creates multiple policies and associates each of the multiple policies with at least one target node in an enterprise. The system then applies each of the multiple policies to the appropriate target node. The multiple policies can be event-handling policies. Each policy can be associated with a group of target nodes in which the group of target nodes share a common relationship. Domain controllers receive the multiple policies and apply the policies to the appropriate target nodes. A meta-policy is used to control the application of the multiple policies to the proper target nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07418489&OS=07418489&RS=07418489
owner: Microsoft Corporation
number: 07418489
owner_city: Redmond
owner_country: US
publication_date: 20010605
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/210,347 filed Jun. 7, 2000, the disclosure of which is incorporated by reference herein.","This application is related to U.S. patent application Ser. No. 09\/875,814 entitled \u201cMethod and Apparatus for Handling Policies In an Enterprise\u201d, to Ashvinkumar J. Sanghvi, Howard M. Hance, Lev Novik, and Fred E. Shaudys, the disclosure of which is incorporated by reference herein. That application was filed on the same date as this application (which issued as U.S. Pat. No. 7,171,459 on Jan. 30, 2007).","This application is related to U.S. patent application Ser. No. 09\/875,798 entitled \u201cMethod and Apparatus for Event Handling In an Enterprise\u201d, to Ashvinkumar J. Sanghvi, Howard M. Hance, Lev Novik, and Fred E. Shaudys, the disclosure of which is incorporated by reference herein. That application was filed on the same date as this application.","The present invention relates to computing systems and, more particularly, to the distribution and handling of various policies throughout a computing environment.","Computer systems, such as servers and desktop personal computers, are expected to operate without constant monitoring. These computer systems typically perform various tasks without the user's knowledge. When performing these tasks, the computer system often encounters events that require a particular action (such as logging the event, generating an alert for a particular system or application, or performing an action in response to the event). Various mechanisms are available to handle these events.","A computing enterprise typically includes one or more networks, services, and systems that exchange data and other information with one another. The enterprise may include one or more security mechanisms to safeguard data and authenticate users and may utilize one or more different data transmission protocols. At any particular time, one or more networks, services or systems may be down (e.g., powered down or disconnected from one or more networks). Networks, services or systems can be down for scheduled maintenance, upgrades, overload or failure. Application programs attempting to obtain event data must contend with the various networks, services, and systems in the enterprise when they are down. Additionally, application programs must contend with the security and network topology limitations of the enterprise as well as the various protocols used in the enterprise.","Existing operating system components, services, and applications generate a variety of different events. A set of event-handling policies are typically defined to describe how a particular component, service, or application responds to a particular event. In a computing environment having a large number of components, services, and applications, it may be necessary to define these policies for each of the individual components, services, and applications, even though the same policy may be used with multiple components, services, or applications. This situation results in the repeated entry of similar or identical policy information throughout the computing environment. In a large computing environment, this repeated entry of similar policy information is tedious and requires a significant amount of time by administrators or other personnel. Additionally, each time a new policy is added or an existing policy is modified, the same changes may be required on other components, services, or applications, thereby increasing the burden of modifying policies or adding new policies.","The system and method described herein addresses these limitations by providing a standardized system and method to handle various policies in a computing enterprise.","The systems and methods described herein provide for the distribution and processing of policies throughout an enterprise. The systems and methods simplify the process of applying policies to various components, services, and applications in the enterprise. Additionally, the systems and methods described herein simplify the tasks associated with applying new policies or modifying existing policies in the enterprise. Rather than entering similar policy information for multiple components, services, or applications in an enterprise, an administrator can enter the policy information once and propagate that information to all components, services, or applications that utilize the policy. This standardized policy handling simplifies policy management in an enterprise and reduces the redundant entry of information when applying or modifying policies that are associated with multiple components, services, or applications.","In one embodiment, multiple policies are created and associated with at least one target node. Each of the multiple policies are applied to the target node.","In a described embodiment, each of the multiple policies are associated with a group of target nodes in an enterprise. The group of target nodes share a common relationship, such as a common geographic location or being coupled to a common network.","In a particular embodiment, each of the multiple policies are provided to a series of domain controllers. The domain controllers apply the multiple policies to the target nodes.","In another embodiment, a meta-policy controls the application of policies to the target nodes.","The systems and methods described herein provide for the simplified handling of policies in an enterprise. An enterprise-wide policy infrastructure provides a common mechanism for defining, applying, and modifying various policies throughout the enterprise. The policy infrastructure also allows administrators to control when and how certain policies are handled using meta-policies. Policies can be applied to groups of components, services, or applications such that the administrative tasks of applying or modifying policies is simplified.","Web-Based Enterprise Management (WBEM) provides uniform access to management information throughout an enterprise. WBEM is an industry initiative to develop technology for accessing management information in an enterprise environment. This management information includes, for example, information on the state of system memory, inventories of currently installed client applications, and other information related to the status of the system. A particular embodiment of the event-handling system is implemented using Windows\u00ae Management Instrumentation (WMI) developed by Microsoft Corporation of Redmond, Wash., which provides an infrastructure to handle various events generated by event sources throughout an enterprise.","WMI technology enables systems, applications, networks, and other managed components to be represented using the Common Information Model (CIM) designed by the Distributed Management Task Force (DMTF). CIM is an extensible data model for representing objects that exist in typical management environments. CIM is able to model anything in the managed environment, regardless of the location of the data source. The Managed Object Format (MOF) language is used to define and store modeled data. In addition to data modeling, WMI provides a set of base services that include query-based information retrieval and event notification. Access to these services and to the management data is provided through a single programming interface.","WMI classes define the basic units of management. Each WMI class is a template for a type of managed object. For example, Win32_DiskDrive is a model representing a physical disk drive. For each physical disk drive that exists, there is an instance of the Win32_DiskDrive class. WMI classes may contain properties, which describe the data of the class and methods, which describe the behavior of the class.","WMI classes describe managed objects that are independent of a particular implementation or technology. WMI includes an eventing subsystem that follows the publish-subscribe model, in which an event consumer subscribes for a selection of events (generated by one or more event providers) and performs an action as a result of receiving the event. WMI also provides a centralized mechanism for collecting and storing event data. This stored event data is accessible by other systems via WMI tools and\/or application programming interfaces (APIs).","Although particular embodiments are discussed herein as using WMI, alternate embodiments may utilize any enterprise management system or application, whether web-based or otherwise. The event providers and event consumers discussed herein are selected for purposes of explanation. The teachings of the present invention can be used with any type of event provider and any type of event consumer. Additionally, the event-handling system and method described herein can be applied to any type of enterprise or other arrangement of computing devices, applications, and\/or networks.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","108","102","100","106","108","102","108","110","104"]},"WMI module  shown in  represents the managed node layer of the WMI module. As discussed below, the WMI module  may also include a central store layer, which may include user interface functionality. The different layers of WMI module  manage different types of activities and\/or perform different types of functions.","Event providers  include, for example, systems, services or applications that generate event data. An exemplary event provider is a disk drive (or an application that monitors the status of a disk drive). The disk drive may generate an event indicating the available storage capacity on the disk drive or indicating the amount of data currently stored on the disk drive. The disk drive may also generate an event indicating that the disk drive is nearly full of data (e.g., when ninety-five percent or more of the disk drive's capacity is used).","Event consumers  may request to be notified of certain events (also referred to as \u201csubscribing\u201d to an event). An example event consumer is an application that manages multiple storage devices in an enterprise. The application may request to receive events generated by any of the disk drives or other storage devices in the enterprise. The application can use this event information to distribute storage tasks among the multiple storage devices based on the available capacity of each device and\/or the quantity of read or write requests received by each storage device.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1"],"b":["150","150","106","152","152","106","106","106","162","106","104","110"]},"System  also includes a set of policies , which are accessible by WMI module . Policies  may control the configuration of one or more systems in the enterprise. Other policies may define various activities, such as event filtering, event correlation, and the forwarding of events to particular devices or applications. A database  is coupled to WMI module . Database  stores various information related to the enterprise. For example, database  can store event data (i.e., creating an event log), policy data, and enterprise configuration information.","WMI module  is also coupled to an event log . The event log  uses WMI features to provide a distributed architecture that is capable of selecting, filtering, correlating, forwarding, storing, and delivering event data in an enterprise. The event log  allows users, such as administrators, to request data related to a particular event, request data from a particular node or device in the enterprise, define the manner in which events are correlated with one another, define how certain events should be forwarded, and define how to store event data. Data requests may be accessed from the event log  using, for example, a particular UI application . The event log  uses an event provider model that allows an application, device or driver to generate events.","The event log  provides a policy-based administration of the enterprise. The policy infrastructure allows administrators to set a policy in the Directory Service (DS) and the WMI module ensures that the proper set of WMI objects (e.g., filters, bindings, correlators, consumers, and configuration objects) are delivered to the proper devices or applications in the enterprise.","Table 1 below identifies various types of event providers available in a particular embodiment. Additionally, the table includes a description of the events generated by each event provider. For example, the Win32 Provider generates events that include information related to the operating system, computer system, peripheral devices, file systems, and security for a particular device (such as a computer system) in the enterprise.",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Event Provider","Description of Events Provided"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Win32 Provider","Supplies information about the"]},{"entry":[{},{},"operating system, computer system,"]},{"entry":[{},{},"peripheral devices, file systems, and"]},{"entry":[{},{},"security."]},{"entry":[{},"WDM Provider","Supplies low-level Windows Driver"]},{"entry":[{},{},"Model (WDM) information for user"]},{"entry":[{},{},"input devices, storage devices, network"]},{"entry":[{},{},"interfaces, and communications ports."]},{"entry":[{},"Event Log Provider","Allows the reading of Windows NT"]},{"entry":[{},{},"event log entries, controls the"]},{"entry":[{},{},"configuration of event log"]},{"entry":[{},{},"administrative options, and event log"]},{"entry":[{},{},"backup."]},{"entry":[{},"Registry Provider","Allows registry keys to be created,"]},{"entry":[{},{},"read, and written. WMI events can be"]},{"entry":[{},{},"generated when specified Registry"]},{"entry":[{},{},"keys are modified."]},{"entry":[{},"Performance","Exposes the raw performance counter"]},{"entry":[{},"Counter Provider","information used to compute various"]},{"entry":[{},{},"performance values."]},{"entry":[{},"Active Directory","Acts as a gateway to information"]},{"entry":[{},"Provider","stored in Microsoft Active Directory"]},{"entry":[{},{},"services. Allows information from"]},{"entry":[{},{},"both WMI and Active Directory to be"]},{"entry":[{},{},"accessed using a single API."]},{"entry":[{},"Windows Installer","Supplies information about"]},{"entry":[{},"Provider","applications installed with the"]},{"entry":[{},{},"Windows Installer."]},{"entry":[{},"SNMP Provider","Acts as a gateway to systems and"]},{"entry":[{},{},"devices that use SNMP for"]},{"entry":[{},{},"management. Allows SNMP traps to"]},{"entry":[{},{},"be automatically mapped to WMI"]},{"entry":[{},{},"events."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["200","202","200","204","206","208"]},"At block , the procedure  determines whether a new subscription for event information has been received. The procedure  may also determine whether a request to revise an existing subscription has been received. If a new subscription (or a revised subscription) is received, the procedure continues to block  where the WMI module retrieves the requested event information and provides the information to the requesting event customer. Alternatively, the procedure may log the subscription request and notify the requesting event consumer when the next event is received that qualifies under the consumer's subscription request.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["300","300","302","304","306","308","302","304","306","326","308"]},"Four separate domain controllers , , , and  are coupled to WMI module . Each domain controller , , , and  is associated with a particular environment , , , and , respectively. The domain controllers , , , and  store policy information that is applied to one or more target nodes in the enterprise. Typically, each domain controller is responsible for providing policies to its associated environment. However, policies may be replicated across all domain controllers such that any domain controller is capable of providing any policy to a target node. As discussed below, each environment typically includes multiple nodes, such as components, services, and applications. These nodes may also be referred to as \u201ctargets\u201d or \u201ctarget nodes\u201d (i.e., the target (or recipient) of a particular policy or set of policies).","Each administrator node , , and  includes a configuration tool , a troubleshoot tool , and a planning tool . Configuration tool  communicates with domain controllers , , , and  to configure individual nodes as well as groups of nodes in the enterprise. Configuration tool  allows an administrator to define and create policies that will be applied to one or more target nodes and allows the administrator to modify or delete existing policies in the enterprise. Troubleshoot tool  allows the administrator to identify problems with policies or particular nodes, such as a failed attempt to apply a policy to a particular target node. Planning tool  uses a simulation engine to see the effects on the policies or operation of one or more target nodes if a particular policy change is implemented (e.g., modification or deletion of an existing policy, or creation of a new policy). Instead of actually implementing the change, planning tool  applies the proposed change to the simulation engine to determine the results. If the results are acceptable, the proposed change may be implemented by the configuration tool . In one embodiment, the simulation engine is located in the administrator node that is performing the simulation.","Although  illustrates an exemplary system  having three administrator nodes , , and , and four domain controllers , , , and , alternate embodiments may contain any number of administrator nodes and any number of domain controllers. Further, a particular domain controller may be associated with two or more environments and a particular environment can be associated with two or more different domain controllers.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 4","FIG. 4"],"b":["400","402","330"]},"Next, the administrator identifies one or more target nodes for each created policy (block ). For example, a particular policy may be intended to be applied to a particular target node or a group of nodes. Other policies may be enterprise-wide policies that are applied to all nodes in an enterprise.","After creating the policies and identifying target nodes associated with each policy, the administrator determines whether to test the policies before applying the policies to the target nodes (block ). If the policies are to be tested, a planning tool (such as planning tool  in ) is used along with a simulation engine to simulate the results of applying the new or modified policies to the target nodes (block ). Block  then determines whether the results of the simulation are acceptable (e.g., no errors or serious conflicts between multiple policies applied to the same target node). If the simulation results are not acceptable, then the policies are revised (block ) in an effort to eliminate the problems or potential problems identified during the simulation. The procedure  then returns to block  to determine whether to test the revised policies. A configuration tool and\/or a troubleshooting tool can be used by an administrator to revise the policies.","If the simulation was determined to be acceptable in block  or testing was not performed, the procedure  continues at block , which distributes the created policies to all domain controllers in the enterprise (e.g., domain controllers , , , and  in ). The domain controllers then provide the policies to the appropriate target nodes (block ). After applying the policies to the target nodes, the procedure determines whether any problems occurred during the application of the policies (block ). If no problems or errors were detected, then the procedure is complete. If a problem or error was detected, then the procedure activates a troubleshooting tool (block ), which allows the administrator to identify the cause of the problem or error. After identifying the cause of the problem, the administrator can revise or delete one or all of the policies and attempt to reapply the policies to the target nodes.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 6"],"b":["502","502","502","502"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 7","FIG. 4"],"b":["502","602","604","604","502","602","326","326","308","602","502","602","502","602","502","602"]},"A particular node generally retrieves multiple policies from one or more sources. For example, a particular node may retrieve policies from an associated domain controller. The node policy provider  identifies policies stored on the domain controller that apply to the particular node and disregards policies that do not apply to the particular node. The node policy provider  then merges all applicable policies together to simplify application of the policies by the node policy provider. If two or more policies are in conflict with one another, the node policy provider  resolves the conflict prior to merging the policies.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 8","b":"700"},"Initially, an administrator or other user identifies one or more policies to be managed (block ). These identified policies will be managed using a meta-policy. Management of a policy may include, for example, applying the policy, removing the policy, testing the policy, or storing the policy. Next, the procedure  determines the manner in which the identified policies are to be applied in the enterprise (block ). This determination may include the time of day that the policies can be applied, such as late in the evening when data traffic throughout the enterprise is light. Alternatively, the application of one or more policies may depend on certain traffic parameters such that the policies are only applied when network traffic is low.","Next, the procedure  creates a meta-policy to manage the identified policies (block ) based on the determinations made in block . The meta-policy is then distributed to all domain controllers in the enterprise (block ). The domain controllers use the received meta-policy to provide policies to various nodes in the enterprise (block ). In one embodiment, the meta-policy is implemented by the node. In this situation, the policy is implemented, for example, by the node policy provider. The meta-policy defines when and how particular policies are selected, retrieved, stored, applied, and removed. For example, a meta-policy may define that a laptop computer should retrieve policies each hour if it has a good connection (i.e., at least a particular bandwidth connection) to the domain controller. The meta-policy typically selects and stores policies locally. The meta-policy is applied at boot time for a particular node or system. A particular policy can be rolled back to a known good policy if a policy or an application fails.","Periodically, each managed node determines whether the proper conditions exist (based on the meta-policy) to apply a policy (block ). If so, the managed node retrieves the policy from the domain controller (block ). After applying the policy, the node determines whether additional policies remain to be retrieved and applied (block ). If additional policies need to be retrieved, the procedure returns to block  to wait until the proper conditions exist to apply another policy.","A particular type of meta-policy is referred to as a \u201cpolicy control policy\u201d. This policy control policy can be applied by an administrator or other user in the enterprise to prevent application of policies to a node or group of nodes until a later time. For example, a particular set of nodes (such as a group) is working properly, the owner of the group may want to avoid disturbance of the nodes until a later time when the set of nodes are less busy. If several administrators are applying policies throughout the enterprise, including this group of nodes, the policies may disrupt the proper operation of the group of nodes. In this situation, the owner of the group may apply a policy control policy to the group of nodes to temporarily prevent the administrators from causing new policies to be applied to any of the nodes in the group. For example, the owner may prevent the application of new policies until 2:00 a.m., when the group of nodes is not expected to be busy.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 9","b":["800","800","800","802","804","806","804","802"]},"The bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . Computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, connected to bus  via a hard disk drive interface  (e.g., a SCSI, ATA, or other type of interface); a magnetic disk drive  for reading from and writing to a removable magnetic disk , connected to bus  via a magnetic disk drive interface ; and an optical disk drive  for reading from and\/or writing to a removable optical disk  such as a CD ROM, DVD, or other optical media, connected to bus  via an optical drive interface . The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, random access memories (RAMs), read only memories (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to the processing unit  through an interface  that is coupled to the system bus (e.g., a serial port interface, a parallel port interface, a universal serial bus (USB) interface, etc.). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown) such as speakers and printers.","Computer  operates in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. In certain embodiments, computer  executes an Internet Web browser program (which may optionally be integrated into the operating system ) such as the \u201cInternet Explorer\u201d Web browser manufactured and distributed by Microsoft Corporation of Redmond, Wash.","When used in a LAN networking environment, computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via a serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Computer  typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other media which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The invention has been described in part in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.","For purposes of illustration, programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although the description above uses language that is specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
