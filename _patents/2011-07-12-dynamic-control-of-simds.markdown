---
title: Dynamic control of SIMDs
abstract: Systems and methods to improve performance in a graphics processing unit are described herein. Embodiments achieve power saving in a graphics processing unit by dynamically activating/deactivating individual SIMDs in a shader complex that comprises multiple SIMD units. On-the-fly dynamic disabling and enabling of individual SIMDs provides flexibility in achieving a required performance and power level for a given processing application. Embodiments of the invention also achieve dynamic medium grain clock gating of SIMDs in a shader complex. Embodiments reduce switching power by shutting down clock trees to unused logic by providing a clock on demand mechanism. In this way, embodiments enhance clock gating to save more switching power for the duration of time when SIMDs are idle (or assigned no work). Embodiments can also save leakage power by power gating SIMDs for a duration when SIMDs are idle for an extended period of time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311102&OS=09311102&RS=09311102
owner: Advanced Micro Devices, Inc.
number: 09311102
owner_city: Sunnyvale
owner_country: US
publication_date: 20110712
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY OF EMBODIMENTS OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION","CONCLUSION"],"p":["This patent application claims the benefit of U.S. Provisional Patent Application No. 61\/363,856, filed Jul. 13, 2010, entitled \u201cDynamic Control of SIMDs,\u201d which is incorporated herein by reference in its entirety.","1. Field","Embodiments of the present invention generally relate to control of single instruction multiple data (SIMD) units in graphics processing units (GPUs).","2. Background Art","A math unit of a graphics processor includes arithmetic logical units (ALUs) or math units configured to perform integer, logical and single\/double precision floating point operations.","Graphics processors can include an array of such math units, known as a shader core. A shader core includes a shader pipeline (SP). To achieve higher performance, multiple SPs can be configured to work together as stacked SPs. SPs can be structured as an array of quad pipes (QPs) and SIMDs. All shader units of each SIMD can conditionally execute an identical ALU instruction on different sets of primitive, vertex, or pixel values. In this way, SIMDs provide mathematical processing power to a graphics processor.","In conventional graphics processors having stacked SPs, SIMDs can be enabled or disabled statically. For example, if a SP was determined to be faulty, a fuse mask can be programmed to disable the faulty SP. Similarly a user accessible register can be programmed to disable\/enable a specific SIMD or group of SIMDs. However, such methods require flushing of a graphics pipe of the graphics processor and reprogramming of new values into the flushed graphics pipe before sending new work requests to the SIMDs.","Furthermore, in conventional approaches, clocking of all SIMD units in a shader complex is either enabled or disabled simultaneously. In many applications, not all SIMDs are assigned work. However, conventional approaches continue to actively provide clocking signals to such SIMDs. This approach can increase power consumption of a graphics processor and is inefficient.","Accordingly, systems and methods are needed that enable dynamic control of SIMDs and reduce power consumption of a graphics processor when SIMDs may not be performing processing tasks.","Embodiments of the present invention enable power saving in a graphics processing unit by dynamically activating and deactivating individual SIMDs in a shader complex that comprises multiple SIMDs. On-the-fly dynamic disabling and enabling of individual SIMDs provides flexibility in achieving a required performance and power level for a given processing application. In this way, optimal usage of the graphics processing unit can be achieved.","Embodiments of the invention also achieve dynamic (also referred to here as dynamic medium grain) clock gating of SIMDs in a shader complex. Switching power is reduced by shutting down clock trees to unused logic by providing a clock on demand mechanism. In this way, clock gating is enhanced to save more switching power for the duration of time when SIMDs are idle (or assigned no work).","Embodiments of the present invention can be used in any computing system (e.g., a conventional computer (desktop, notebook, etc.) system, computing device, entertainment system, media system, game systems, communication device, personal digital assistant), or any system using one or more processors.","Embodiments of the present invention, for example, may be used processing systems having multi-core CPUs, GPUs, and\/or GPGPUs, because code developed for one type of processor may be deployed on another type of processor with little or no additional effort. For example, code developed for execution on a GPU, also known as GPU kernels, can be deployed to be executed on a CPU, using embodiments of the present invention.","As discussed above, embodiments of the present invention enable power saving by dynamically activating and deactivating individual SIMDs in a shader complex.","Embodiments dynamically disable SIMDs for either reduced performance needs or to lower thermal design power (TDP) of a graphics processing unit. Furthermore, embodiments enable disabled SIMDs for high performance applications without having to flush a graphics pipe of the graphics processing unit. This is achieved by dynamically switching a number of SIMDs without flushing the SP. Dynamic control (or switching) is achieved, in part, by programming a set of registers appropriately.","In an embodiment, a shader pipe interpolator (SPI) assigns new work (or threads) based on registers that are configured dynamically to indicate which SIMDs are activated. In an embodiment, such dynamic configurations would take effect after current in-flight requests (or pending requests) are serviced by SIMDs that are to be disabled. Once disabled, no new requests from the SPI will go through to the disabled SIMDs and clocks of harvestable logic (e.g., sp4-vsp and texture clocks) are shut-off to reduce switching power of the graphics processing unit. When the disabled SIMDs are enabled, the SPI will again start allocating work to the enabled SIMDs providing higher performance of the graphics processing unit.","In an embodiment, activation and deactivation of the SIMDs and a number of SIMDs to be activated\/deactivated is dependent on various factors such as operating conditions (e.g., temperature, current, CAC), applications (e.g., variable utilization to conserve energy), work load, or other requirements (e.g., performance needs, power needs).","Dynamic Control of SIMDs",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1A","b":["100","100","120","122","100","130","100","100"]},"As discussed above, embodiments of the present invention dynamically switch a number of SIMDs without flushing the SP. Such dynamic control (or switching) is achieved, in part, by programming a set of registers appropriately. In an embodiment, an SPI assigns new work (or work threads) based on registers that are configured dynamically to indicate which SIMDs are activated.","The following section discusses exemplary registers that control the SIMD and QP masks.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1B"},"Similarly, \u201cRCU_CG_GC_SHADER_PIPE\u201d and the \u201cRCU_CC_GC_SHADER_PIPE1\u201d register illustrated in , are shadowed versions of the \u201cCC_GC_SHADER_PIPE_CONFIG\u201d register. These registers are programmed based on a fuse mask or microcode. The RCU_CG_GC_SHADER_PIPE register has two fields: INACTIVE_QD_PIPES and INACTIVE_SIMDS. INACTIVE_QD_PIPES is a bit-mask that represents which quad-pipes are inactive. INACTIVE_SIMDS is a bit-mask that represents which SIMDS are inactive. Similarly, the RCU_CG_GC_SHADER_PIPE1 register has two fields; INACTIVE_QD_PIPES1 and INACTIVE_SIMDS1. INACTIVE_QD_PIPES1 is a bit-mask that represents which quad-pipes are inactive. INACTIVE_SIMDS1 is a bit-mask that represents which SIMDs are inactive.","The register \u201cGC_USER_SHADER_PIPE_CONFIG,\u201d shown in , is programmable by a user to limit a number of operating SIMDs (and\/or QPs). This register can be memory mapped and shadowed by a shader engine per an index received from a graphics register bus manger (GRBM). This register has two fields: INACTIVE_QD_PIPES and INACTIVE_SIMDS. INACTIVE_QD_PIPES is a bit-mask that represents which quad-pipes are inactive. INACTIVE_SIMDS is a bit-mask that represents which SIMDs are inactive.","The register settings of \u201cCC_GC_SHADER_PIPE_CONFIG\u201d () are static in nature and are programmed once for a chip. In contrast, settings of the register \u201cGC_USER_SHADER_PIPE_CONFIG\u201d register can be programmed at any time dynamically (i.e., on-the-fly). Embodiments of the invention configure the \u201cGC_USER_SHADER_PIPE_CONFIG\u201d register for dynamic control of SIMDs.","In an embodiment, the resultant ORed value of \u201cCC_GC_SHADER_PIPE_CONFIG\u201d register and the \u201cGC_USER_SHADER_PIPE_CONFIG\u201d register is used by the SPI to determine (on the fly) enabled SIMDs to whom new threads (work) are to be assigned. In an embodiment, all other design blocks in the graphics pipe make use of the \u201cCC_GC_SHADER_PIPE_CONFIG\u201d register to statically disable themselves for inactive SIMDs\/QPs. In an embodiment, such design blocks need not review the \u201cGC_USER_SHADER_PIPE_CONFIG\u201d register when such an operation causes an undesirable \u2018freezing\u2019 of the shader pipeline.","Referring to the exemplary timing diagrams illustrated in , control of SIMDs can be achieved independent of activity in a shader engine. Even if a particular SIMD is busy executing instructions, embodiments can disable that SIMD during its active execution period. For example, referring to , SIMD0 can be disabled during its active execution period.","In an embodiment, not intended to limit the invention, the SPI does not assign work to a disabled (or de-activated) SIMD until the disabled SIMD is re-enabled. The disabled SIMD naturally drains work threads on completion of current work in it and pending work in a sequencer pipe. Once empty, medium grain clock gating (described further below) can disable clock signals to logic in the disabled SIMD. On re-enabling of a disabled SIMD, the SPI again starts submitting new threads (work requests) to the enabled SIMD. SIMD control settings are programmed through GRBM register writes and can be dynamically set by a driver or microcode.","From a system design perspective, SIMDs can be enabled or disabled at any time (i.e., on the fly). From a power savings perspective, a time of switch over from a SIMD enabled to SIMD disabled state can depend on workload pending in the SIMD pipe. The time needed to enable a disabled SIMD (or vice versa) is as fast as writing a GRBM register when an SPI is ready to allocate threads to that SIMD. As an example, for both cases, the time needed can be only a few clock cycles i.e., a few nano-seconds.","Exemplary Scenarios of Operation","The following are exemplary operational scenarios where embodiments of the invention and dynamic control of SIMDs are used.","A. Condition Based Control","Dynamic control of SIMDs can be condition dependent. Such exemplary conditions include, but are not limited to:","(1) Temperature Trip: When external sources indicate a higher processor temperature and there is a need for reduction in power consumption (or boost when applicable).","(2) Current Trip: When external sources indicate a higher processor current and there is a need for reduction in power consumption (or boost when applicable).","(3) CAC Management: When an on-chip CAC manager notices increased processing activity and makes a decision to increase performance by enabling more SIMDs or when the on-chip CAC manager notices decreased activity and makes a decision to reduce power by disabling a number of SIMDs without reduction in performance.","B. Application Based Control","Dynamic control of SIMDs can also be application dependent. Such exemplary applications include those that allow variable utilization to conserve energy. For example, a detected change in user mode of application from more processor intensive application (e.g., 3D graphics processing) to a less intensive application (e.g., DVD playback) can be used for dynamic control of SIMDs, according to the embodiments. User and application input through, for example, user interface (UI) input mechanisms or application programming interfaces (APIs) may also be employed to provide dynamic control of SIMDs. These input mechanisms can be used to set the required power level for a processing application or to achieve optimal performance\/watt for the hardware. Such input mechanisms can be enabled through software (e.g., applications or operating systems), firmware, hardware or various combinations thereof.","C. Work Load Based Control","Dynamic control of SIMDs can be work load dependent. By way of example, dynamic control of SIMDs can be triggered based on one or more of the non-limiting exemplary GPU conditions listed below.","(1) Static screen condition (No Load) (<5% of TDP)","(2) Idle condition (very Light Load) (<10% of TDP)","(3) Medium load condition (<50% of TDP)","(4) Heavy load condition (<90% of TDP)\n\n","(5) Very heavy load condition (>90% of TDP)","D. Requirement Based Control","Dynamic control of SIMDs can be requirement dependent and based on performance needs as well as power needs. A driver monitors GPU TDP and on approaching maximal TDP loads, disables SIMDs to reduce TDP. Such disabling of SIMDs can be accomplished with our without GPU frequency and voltage tuning.","The above exemplary control conditions can be detected and implemented using a driver and\/or microcode. Embodiments can also allow controls dedicated to self-controlling the number of enabled SIMDs.","Exemplary Register Settings for Enabling and Disabling SIMDs","In any of the above mentioned conditional modes (or any other scenarios), a driver can write to bit fields (e.g., bit fields [31:16]) of register \u201cGC_USER_SHADER_PIPE_CONFIG\u201d to disable and enable SIMDs. As shown in , writing \u201c0\u201d enables the SIMD and writing \u201c1\u201d disables the SIMD.","A graphics processing unit can include two or more shader engines (e.g., SE0 and SE1). In this scenario, embodiments can enable and disable different SIMDs for these shader engines. This can be achieved by programming the shader engines separately using a GRBM index register as illustrated in .","Referring to ,","(1) To write to \u201cGC_USER_SHADER_PIPE_CONFIG\u201d of SE0 (i.e., shader engine 0), the following exemplary instructions can be used:",{"@attributes":{"id":"p-0055","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"mmGRBM_GFX_INDEX = 0x40000000\u2003\u2009\/\/point to SE0"},{"entry":"mmGC_USER_SHADER_PIPE_CONFIG = 0xFF000000\u2002\u2009\/\/disable"},{"entry":"\/\/SIMD8 and SIMD9"},{"entry":"mmGRBM_GFX_INDEX = 0xC0000000\u2003\/\/restore the GRBM index"},{"entry":"\/\/register to default"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"(2) To write to \u201cGC_USER_SHADER_PIPE_CONFIG\u201d of SE0 (i.e., shader engine 0), the following exemplary instructions can be used:",{"@attributes":{"id":"p-0057","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"mmGRBM_GFX_INDEX = 0x40010000\u2003\u2003\u2003\u2003\u2003\u2003\/\/point to SE1"},{"entry":"mmGC_USER_SHADER_PIPE_CONFIG = 0xFC030000 \/\/disable"},{"entry":"\/\/SIMD1 and SIMD0"},{"entry":"mmGRBM_GFX_INDEX = 0xC0000000\u2003\u2003\u2003\/\/restore the GRBM"},{"entry":"index register to default"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"(3) To write to \u201cGC_USER_SHADER_PIPE_CONFIG\u201d of both SE0 and SE1 (i.e., shader engine 1), the following exemplary instructions can be used:",{"@attributes":{"id":"p-0059","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mmGC_USER_SHADER_PIPE_CONFIG = 0xFC0C0000"]},{"entry":[{},"\/\/disable SIMD3 & SIMD2 of both SE0 and SE1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"SIMDs enabled per shader engine (e.g., SE0, SE1, etc.) can be changed on the fly, as long as at least one SIMD is left enabled for each shader engine in each subset to which work is being applied. In other words, for example, if SIMDs are partitioned for different types of work, i.e., two SIMDs per side for tessellation shaders, and the remaining SIMDs shared between vertex and pixel work, one of the two SIMDs for tessellation shaders can be left enabled, and one of the remaining SIMDs for pixel and vertex enabled.",{"@attributes":{"id":"p-0061","num":"0063"},"figref":"FIG. 3C"},"In step , a required performance level for a given processing operation is determined. As an example, such a performance level can be application, condition, workload or requirement dependent.","In step , one or more registers are configured to enable and disable different SIMDs in shader engines. As an example, such a configuration can be achieved by programming the shader engines separately using a GRBM index register as illustrated in .","In step , one or more registers are enabled or disabled based on the registers configured in step .","The following section illustrates exemplary plots that can aid embodiments in making tradeoff decisions between performance and power savings.","Power Savings Vs Performance Impact","When a SIMD is enabled, it consumes power. With increased processing activity, the SIMD would consume even more power. Conversely, with less activity, the SIMD would consume less power. In an idle state, the SIMD would consume minimal but a measurable amount of power based on the size of the SIMD (e.g., area, cell count etc).","The plot of  shows a linear increase in core power with an increase in the number of enabled SIMDs. The plot depicts a scenario where an application is SIMD bound. In other words, the application is a power intensive application that consumes all available SIMD resources.","A general assumption is that performance of a graphics processing unit would increase with an increase in a number of SIMDs. However, this statement can generally be true for intensive processing tasks. In several scenarios, depending on load conditions, conventional approaches may waste power as they keep all SIMDs enabled even with light processing loads. An example of SIMD load balancing is described in the application entitled \u201cMethod and System for Load Optimization for Power\u201d Ser. No. 12\/839,962, which is incorporated herein by reference as though set forth in its entirety.","The following sections discuss exemplary SIMD performance per watt plots for different types of applications.","(1) Application with an Ideal Load",{"@attributes":{"id":"p-0070","num":"0072"},"figref":["FIG. 4B","FIG. 4B"]},"(2) Application with a Balanced Load",{"@attributes":{"id":"p-0071","num":"0073"},"figref":["FIG. 4C","FIG. 4C"]},"(3) Application with Realistic Loads","Often, in realistic scenarios, processing loads are such that performance per watt characteristics lie in between the characteristics for an ideal load and characteristics for a balanced load. As shown in , with increase in SIMDs, performance per watt increases at first but later saturates and either remains at a constant level or may even reduce. When performance per watt reduces, more power is consumed at a relatively lower performance gain. This can be seen from the light and medium\/heavy load plots shown in  respectively.","Savings for Each Mode of Operations","As can be seen from plots in , power savings in accordance with the embodiments would vary from application to application. In many applications, for example, embodiments save power without compromising performance. Such applications include DVD playback applications where SIMD processing load can be light.","As a purely illustrative non-limiting example, on an AMD R770 processor with \u201ceclk=875 MHz\u201d and \u201cmclk=900 MHz,\u201d a per SIMD power consumption is approximately 4.5 watts with heavy loads. With lighter loads, the power consumption would reduce due to clock gating and dynamic SIMD control, in accordance with the embodiments. For example, if it is required to clamp power to certain level then reducing the number of SIMDs at heavy loads would yield significant savings. In an embodiment, applications can also determine a number of SIMDs that are enabled or disabled in a graphics processing unit.","Dynamic Medium Grain Clock Gating","As discussed above, in conventional approaches, clocking of all SIMD units in a shader complex is either enabled or disabled simultaneously. In many applications, not all SIMDs are assigned work. However, conventional approaches continue to actively provide clocking signals to such SIMDs. This approach increases power consumption of a graphics processing unit and is inefficient. Conventional approaches can include static clock gating for shader complex blocks in which, when a request is initiated by a SPI, clocks of shader complex blocks are turned-on, one by one, with a di\/dt (i.e., rate of change of current) avoidance count delay. Once started, the clocks keep clocking for the entire shader complex even if there is no work for many blocks inside the shader complex. In other words, only a few SIMDs are active at any given time. Once work is completed by the shader complex, the clocks are shut-off automatically using the di\/dt avoidance count delay. Thus, in conventional approaches, clock gating is static in nature, and treats the shader complex as a single system.","In contrast to conventional approaches, embodiments of the invention achieve dynamic grain (e.g., dynamic medium grain) clock gating of individual SIMDs in a shader complex. Switching power is reduced by shutting down clock trees to unused logic, and by providing a clock on demand mechanism (e.g., a true clock on demand mechanism). In this way, clock gating can be enhanced to save switching power for a duration of time when SIMDs are idle (or assigned no work).","Embodiments of the present invention also include dynamic control of clocks to each SIMD in a shader complex. Each SIMD is treated as shader complex sub-system that manages its own clocks. Dynamic control for each block\/tile in an SIMD is also provided. Clocking can start before actual work arrives at SIMDs and can stay enabled until all the work has been completed by the SIMDs.","Dynamic medium grain clock gating, according to the embodiments, causes negligible performance impact to the graphics processing unit. Embodiments of the present invention can also be used to control power of SIMDs by power gating switches and thus save leakage power of SIMDs.","Various aspects of the embodiments of the invention can be implemented by software, firmware, hardware (or hardware represented by software such as, for example, Verilog or hardware description language instructions), or a combination thereof.  is an illustration of an example computer system in which the present invention, or portions thereof, can be implemented as computer-readable code. It should be noted that the simulation, synthesis and\/or manufacture of the various embodiments of this invention may be accomplished, in part, through the use of computer readable code, including general programming languages (such as C or C++), hardware description languages (HDL) such as, for example, Verilog HDL, VHDL, Altera HDL (AHDL), or other available programming and\/or schematic capture tools (such as circuit capture tools). This computer readable code can be disposed in any known computer usable medium including a semiconductor, magnetic disk, optical disk (such as CDROM, DVD-ROM) and as a computer data signal embodied in a computer usable (e.g., readable) transmission medium (such as a carrier wave or any other medium such as, for example, digital, optical, or analog-based medium). As such, the code can be transmitted over communication networks including the Internet and internets. It is understood that the functions accomplished and\/or structure provided by the systems and techniques described above can be represented in a core (such as a GPU core) that is embodied in program code and may be transformed to hardware as part of the production of integrated circuits.","It is to be appreciated that the Detailed Description section, and not the Summary and Abstract sections, is intended to be used to interpret the claims. The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated in and constitute part of the specification, illustrate embodiments of the invention and, together with the general description given above and the detailed description of the embodiment given below, serve to explain the principles of the present invention. In the drawings:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 1B-1D"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 3A-3B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 4A-4F"}]},"DETDESC":[{},{}]}
