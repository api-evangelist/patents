---
title: Enabling fast string acquisition in an operating system for efficient interoperations with various language projections
abstract: In one embodiment, a memory resource manager may pass data memory structures between application components on a computing device. A memory resource  may store a data memory structure for a holding application component . A processor  may pass a handle representing the data memory structure to a calling application component  upon access by the calling application component 
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619247&OS=09619247&RS=09619247
owner: Microsoft Technology Licensing, LLC
number: 09619247
owner_city: Redmond
owner_country: US
publication_date: 20110715
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A data memory structure is a general format for storing data in a computer memory device. The data memory structure may be a string. A string is a finite sequence of numerical values that are interpreted as computer symbols, such as characters or integers. A data memory structure may be shared by a first application component and a second application component of one or more software programs. When the second application component calls a data memory structure held by the first application component, the second application component creates a duplicate of the data memory structure, consuming memory resources.","This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Embodiments discussed below relate to a memory resource manager passing data memory structures between application components on a computing device. A memory resource may store a data memory structure for a holding application component. A processor may pass a handle representing the data memory structure to a calling application component upon access by the calling application component.","Embodiments are discussed in detail below. While specific implementations are discussed, it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the subject matter of this disclosure. The implementations may be a machine-implemented method, a tangible machine-readable medium having a set of instructions detailing a method stored thereon for at least one processor, or a memory resource manager for a computing device.","The memory resource manager may efficiently transfer string data among independent application components running in a single process. An application component is a component of a software application, such as a function or class. The memory resource manager may use a multi-tiered memory management scheme for efficiently handling immutable data, or data that is unchanging over time, in a procedural programming model. The memory resource manager may abstract away from the program when copying of the data occurs. If the data were changing over time, the inability to rationalize about when copying of the data occurs may affect the writing of correct nontrivial programs.","The memory resource manager may use a handle-based scheme. A handle is an opaque value that may be used by a calling application component to indicate to a holding application component a specific resource. Unlike with a pointer, the calling application component may use the handle for the purpose of specifying a memory resource already known to the holding application component. Each handle may be an identifier used to reference a particular instance of a string. For purposes of programming, the handle may be called HSTRING. For instance, in C++ code, HSTRING may be described as:",{"@attributes":{"id":"p-0015","num":"0014"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"HSTRING myString;",{}]},{"entry":[{},{},"bool result = CreateString(L\u201cabc\u201d, 3, &myString);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The function may create a handle to an in-memory resource containing the value \u201cabc\u201d. If another application component in the system maintains a copy of that string, that application component may implement the following function:",{"@attributes":{"id":"p-0017","num":"0016"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"bool SetStringData(HSTRING input)",{}]},{"entry":[{},{},"\u2003\u2003{",{}]},{"entry":[{},{},"\u2003\u2003return DuplicateString(input, &g_myString);",{}]},{"entry":[{},{},"\u2003\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"At this point, the resource managed by the handle input and the resource managed by the handle g_myString may have independent lifetimes as viewed by the application components. Both the calling application component and the holding application component may independently decide when to release a copy of the resource. When each application component is done with the string, the application component may call a DeleteString function, indicating to the system that the resource is no longer being used. The DeleteString function may read:",{"@attributes":{"id":"p-0019","num":"0018"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"void onExit( )",{}]},{"entry":[{},{},"{",{}]},{"entry":[{},{},"DeleteString(&g_myString);",{}]},{"entry":[{},{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The handle based-scheme may abstract away the details, allowing the underlying system to use any of a large number of memory management schemes or combinations thereof to manage the lifetime of the string. For example, the memory resource manager may use a reference counting scheme. In this scheme, the call to CreateString may allocate memory that includes an intrusive reference counting block, the string data, and a flags field used by the system. The holding application component may set the reference count to 1, set an \u201cs\u201d value in the flags field to indicate that this is a reference counted string, and may return a value that represents the location of the memory as the handle value. The call DuplicateString may increment the reference count and may supply a handle to the caller representing the same location in memory. The call DeleteString may decrement the reference count, but does not free the memory unless the reference count is zero after decrementing.","Additionally, the memory resource manager may use a fast-pass mechanism. In procedural and functional programming languages, a pervasive convention may have a caller of a function responsible for guaranteeing that data provided to that function is usable by the called function until that function returns control to the caller. Thus, in the example function SetStringData above, the function may safely assume that the resource referred to by the variable input is usable until that function finishes executing, and returns control back to the caller. Conversely, this convention also may dictate that the called function may not assume that the resources referred to by input are valid after returning control unless the function takes action to ensure that the resource remains valid. In a reference counting scheme, for example, that action may involve incrementing the reference count.","In many cases, the data being provided to a function by a caller may already reside in memory but may not be prepared in the way that the recipient of the data expects. This problem may be particularly true when dealing with a string in C and C++, as these programming languages do not define a canonical string representation. For example, a component object model (COM) application programming interface (API) may use string data provided in a format referred to as basic string (BSTR), with a null-terminated character data preceded by a 32-bit value indicating the number of characters that follow. Other non-component object model application programming interfaces do not supply or require the prefix when handling strings. This mismatch frequently may cause the software to create an extra copy of the string just to satisfy the different memory layout requirements, despite the data already being present in memory. Depending on the sequence of application components consuming the string, this duplication may lead to many copies of the same piece of data during the course of completing an operation.","The memory resource manager may mitigate the creation of these additional copies by providing a second fast-pass memory management scheme. The fast-pass mechanism specifically refers to the mechanism wherein a function that invokes another function providing a resource is managed using some other memory scheme, but appears to be in the HSTRING format to the called function. A function may use this fast pass mechanism provided the data has a very basic layout and the data is stable for the duration of time that the HSTRING representing that fast-pass string is in use. The basic layout may have a sentinel character value of 0 at the end.","An example of a fast pass C++ function may be as follows:",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void f(char* characters)",{}]},{"entry":[{},"{",{}]},{"entry":[{},"unsigned char header[OPAQUE_HEADER_SIZE];",{}]},{"entry":[{},"HSTRING str;",{}]},{"entry":[{},"CreateStringReference(characters, wcslen(characters), ",{}]},{"entry":[{},"&header, &str);",{}]},{"entry":[{},"g(str);",{}]},{"entry":[{},"h(str);",{}]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"A CreateStringReference function may allow the caller to create an HSTRING that, instead of using reference counting, instead refers to string data provided by the function itself. In this case, function f( ) may provide a basic layout by having callers provide data in the correct format. The function f( ) may provide stability by relying on the lifetime convention.","The fast-pass mechanism, implemented in CreateStringReference, may use an opaque, fixed-size buffer provided by the caller to store private data. The caller may know the size but not the contents, allowing the data to be allocated on the stack rather than the heap, which is much faster. The private data may have a flag indicating that the string is a fast-pass string, rather than a reference counted string. The fast-pass mechanism may set up a pointer to the caller's copy of the string data, rather than allocating memory and making a copy of that data. The function may then return an HSTRING to that reference. By calling CreateStringReference, the application component may set up an HSTRING without causing any additional system memory to be allocated. Within functions g( ) and h( ), the string set up by f( ) may be used the same as if it had been created using CreateString( ). Other system provided methods for operating on the string may use the flags field to determine the memory layout and access the string data.","While the function calling DuplicateString may perceive no difference in operation, the DuplicateString function may behave differently when presented with a string created using the CreateStringReference function. Because the memory containing the string has a lifetime that may not be controlled by the system string application programming interface, the DuplicateString function may use the data referred from the fast-pass HSTRING. Thus, the DuplicateString function may effectively call or perform the same operations as the CreateString function, providing to the caller the new handle resulting from the CreateString call.","Additionally, the DuplicateString function may place an HSTRING in the fast-pass string's opaque data referring to the created string. This embedded handle may allow subsequent calls to DuplicateString to re-use the same reference counted HSTRING in subsequent calls, rather than creating a new reference counted string each time. Using the example above, if function g( ) and function h( ) both call the DuplicateString function, each function may pass the fast pass string to the DuplicateString function. If the fast-pass string data does not track the fact that a copy was made, the fast-pass string may be copied twice, each time consuming more system resources. With this scheme, the first copy may update the fast pass string, so that the second DuplicateString call made by function h( ) may result in only an increment to the reference count, rather than an allocation of more system resources. The function f( ) may call the DeleteString function with the HSTRING, so that the system may remove that string's internal string when applicable.","Thus, in one embodiment, a memory resource manager may pass data memory structures between application components on a computing device. A memory resource may store a data memory structure for a holding application component. A processor may pass a handle representing the data memory structure to a calling application component upon access by the calling application component.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","100","100","110","120","130","140","150","160","170","180","110","100"]},"The processor  may include at least one conventional processor or microprocessor that interprets and executes a set of instructions. The memory  may be a random access memory (RAM) or another type of dynamic storage device that stores information and instructions for execution by the processor . The memory  may also store temporary variables or other intermediate information used during execution of instructions by the processor . The ROM  may include a conventional ROM device or another type of static storage device that stores static information and instructions for the processor . The storage device  may include any type of tangible machine-readable medium, such as, for example, magnetic or optical recording media and its corresponding drive. The storage device  may store a set of instructions detailing a method that when executed by one or more processors cause the one or more processors to perform the method.","The input device  may include one or more conventional mechanisms that permit a user to input information to the computing device , such as a keyboard, a mouse, a voice recognition device, a microphone, a headset, etc. The output device  may include one or more conventional mechanisms that output information to the user, including a display, a printer, one or more speakers, a headset, or a medium, such as a memory, or a magnetic or optical disk and a corresponding disk drive. The communication interface  may include any transceiver-like mechanism that enables processing device  to communicate with other devices or networks. The communication interface  may include a network interface or a mobile transceiver interface. The communication interface  may be a wireless, wired, or optical interface.","The computing device  may perform such functions in response to processor  executing sequences of instructions contained in a computer-readable medium, such as, for example, the memory , a magnetic disk, or an optical disk. Such instructions may be read into the memory  from another computer-readable medium, such as the storage device , or from a separate device via the communication interface .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2A","b":["200","202","204","204","202","206","208","210","212","206","208","210","202","210","202","212","202"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2B","b":["250","252","254","252","256","258","260","262","264","256","258","256","260","252","260","262","264","252"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["300","302","304","306","308","304","302","304","308","308","304","302","260","308"]},"A successor application component  may also seek to access the string . The holding application component  may pass a handle for the string  to the successor application component . The successor application component  may use the handle to access the string . The holding application component  may increment the reference counter  upon passing the handle to the successor application component . Incrementing the reference counter  may act as a promotion trigger, causing the calling application component  to promote the string  by creating a data memory structure copy.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["400","302","252","302","252","306","402","302","254","404","308","406","302","254","308","308","408","302","260","254","308","410","302","308","412","302","260","414","260","416","302","306","418"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5","b":["500","302","202","302","306","502","302","206","302","202","504","302","210","506","302","206","212","508","302","302","510","302","308","512","302","310","514","302","308","516"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 6","b":["600","308","202","202","308","306","302","602","604","308","606","308","204","308","608","308","306","610"]},"If a promotion trigger occurs (Block ), the calling application component  may create, or \u201cpromote\u201d, a data memory structure copy (Block ). The promotion trigger may be the holding application component  passing the handle to a successor application component , or the holding application component  ending use of the data memory structure. If the calling application component  is finished with the data memory structure (Block ), the calling application component  may release the data memory structure, causing a reference counter in the data memory structure to be decremented (Block ).","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms for implementing the claims.","Embodiments within the scope of the present invention may also include non-transitory computer-readable storage media for carrying or having computer-executable instructions or data structures stored thereon. Such non-transitory computer-readable storage media may be any available media that can be accessed by a general purpose or special purpose computer. By way of example, and not limitation, such non-transitory computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to carry or store desired program code means in the form of computer-executable instructions or data structures. Combinations of the above should also be included within the scope of the non-transitory computer-readable storage media.","Embodiments may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked (either by hardwired links, wireless links, or by a combination thereof) through a communications network.","Computer-executable instructions include, for example, instructions and data which cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions. Computer-executable instructions also include program modules that are executed by computers in stand-alone or network environments. Generally, program modules include routines, programs, objects, components, and data structures, etc. that perform particular tasks or implement particular abstract data types. Computer-executable instructions, associated data structures, and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.","Although the above description may contain specific details, they should not be construed as limiting the claims in any way. Other configurations of the described embodiments are part of the scope of the disclosure. For example, the principles of the disclosure may be applied to each individual user where each user may individually deploy such a system. This enables each user to utilize the benefits of the disclosure even if any one of a large number of possible applications do not use the functionality described herein. Multiple instances of electronic devices each may process the content in various possible ways. Implementations are not necessarily in one system used by all end users. Accordingly, the appended claims and their legal equivalents should only define the invention, rather than any specific examples given."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DRAWINGS","p":["In order to describe the manner in which the above-recited and other advantages and features can be obtained, a more particular description is set forth and will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments and are not therefore to be considered to be limiting of its scope, implementations will be described and explained with additional specificity and detail through the use of the accompanying drawings.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 2A-B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
