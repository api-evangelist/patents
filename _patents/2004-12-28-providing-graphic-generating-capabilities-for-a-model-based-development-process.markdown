---
title: Providing graphic generating capabilities for a model based development process
abstract: A method and system for providing a block for use in a block diagram in a graphical modeling environment which is capable of rendering a parameterized graphic annotation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07834876&OS=07834876&RS=07834876
owner: The MathWorks, Inc.
number: 07834876
owner_city: Natick
owner_country: US
publication_date: 20041228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["The present invention relates to a graphical modeling environment for modeling a dynamic system. More particularly, the present invention relates to blocks capable of inserting graphics into image data, particularly video data streams.","Many organizations are embracing the paradigm of Model Based Development in their production processes. \u201cModel Based Development\u201d refers to the practice of specifying, analyzing, and implementing systems using a common \u201cmodel\u201d consisting of a set of block diagrams and associated objects. System implementation typically consists of automatically generating code for portions of the model, particularly portions corresponding to the system's control algorithm.","Graphical modeling environments are programs that enable a user to construct and analyze a model of a process or system. Examples of graphical modeling tools include time-based block diagrams, such as Simulink from The MathWorks Inc., discrete event diagrams and reactive state machine diagrams, such as those found within Stateflow\u00ae also available from The MathWorks, Inc., data-flow diagrams, such as LabVIEW, available from National Instruments Corporation, and software diagrams and other graphical programming environments, such as Unified Modeling Language (UML) diagrams.","Some graphical modeling environments also enable simulation and analysis of models. Simulating a dynamic system in a graphical modeling environment is typically a two-step process. First, a user creates a graphical model, such as a block diagram, of the system to be simulated. A graphical model may be created using a graphical user interface, such as a graphical model editor. The graphical model depicts relationships between the systems inputs, states, parameters and outputs. After creation of the graphical model, the behavior of the dynamic system is simulated using the information entered into the graphical model. In this step, the graphical model is used to compute and trace the temporal evolution of the dynamic systems' outputs (\u201cexecute the graphical model\u201d), and automatically produce either deployable software systems or descriptions of hardware systems that mimic the behavior of either the entire model or portions of the model (code generation).","Block diagrams are graphical entities having an \u201cexecutable meaning\u201d that are created within graphical modeling environments for modeling a dynamic system, and generally comprise one or more graphical objects. For example, a block diagram model of a dynamic system is represented schematically as a first collection of graphical objects, such as nodes, which are interconnected by another set of graphical objects, generally illustrated as lines, which represent logical connections between the first collection of graphical objects. In most block diagramming paradigms, the nodes are referred to as \u201cblocks\u201d and drawn using some form of geometric object (e.g., circle, rectangle, etc.). The line segments are often referred to as \u201csignals\u201d. Signals correspond to the time-varying quantities represented by each line connection and are assumed to have values at each time instant. Each node may represent an elemental dynamic system, and the relationships between signals and state variables are defined by sets of equations represented by the nodes. Inherent in the definition of the relationship between the signals and the state variables is the notion of parameters, which are the coefficients of the equations. These equations define a relationship between the input signals, output signals, state, and time, so that each line represents the input and\/or output of an associated elemental dynamic system. A line emanating at one node and terminating at another signifies that the output of the first node is an input to the second node. Each distinct input or output on a node is referred to as a port. The source node of a signal writes to the signal at a given time instant when its system equations are solved. The destination node of this signal read from the signal when their system equations are being solved. Those skilled in the art will recognize that the term \u201cnodes\u201d does not refer exclusively to elemental dynamic systems but may also include other modeling elements that aid in readability and modularity of block diagrams.","It is worth noting that block diagrams are not exclusively used for representing time-based dynamic systems but also for other models of computation. For example, in Stateflow\u00ae, flow charts are block diagrams used to capture behavior of reactive systems and process flow. Data flow blocks are block diagrams that describe a graphical programming paradigm where the availability of data is used to initiate the execution of blocks, where a block represents an operation and a line represents execution dependency describing the direction of data flowing between blocks.","The functional attributes for a block may affect the dynamics of the model using this block. These attributes are specified for the block as a whole and the input and output ports of the block. Examples of block attributes include block sample times and restrictive flags. Block sample times specify if the block corresponds to an elemental, continuous, discrete, or hybrid dynamic system. If the block is an elemental discrete-time system, then the attribute specifies the spacing between time instants at which the block response should be traced. A restrictive flag disallows the use of blocks in certain modeling contexts. For example, one may impose the restriction that there may only be one instance of given block in a model. Attributes of block ports specify properties of the data that is either available or produced at that port. Block port attributes include dimensions, datatypes, sample rates, and direct feedthrough. Dimension attributes are individual dimensions of a multi-dimensional matrix that is used as a container for data elements. Datatype attributes are the datatype of each element of data in the data container. A complexity attribute is a flag to specify if each data element is real or complex. A sample rate attribute specifies how when the signal corresponding to an input or output port will be used.","The video data is provided as a sequence of images in time. Each time-sample of the image sequence is a video frame. The information contained in each video frame is defined over a two-dimensional spatial grid, whose elements are known as the picture elements or pixels. If the image is gray scale, a single scalar value is assigned to each pixel representing the brightness (intensity of the light) in that element. If the image is in color, a vector is assigned to each pixel containing information regarding brightness (luminance) or the color content (chrominance) or both in that element. A multidimensional array or multiple two-dimensional matrices may also be used to represent color images.","Color video data is often provided in a tri-stimulus model format. Examples of suitable tri-stimulus model formats include, but are not limited to, RGB, YUV, LAB, YIQ, and HSV. In a tri-stimulus format, three signals are provided, each representing a component of the tri-stimulus format. For example, in the RGB color coordinate system an ordered triplet is used to represent the intensity of the red, green and blue light in each pixel. Thus, a first signal provides the red intensity data, a second signal provides green intensity data, and a third signal provides blue intensity data. Other examples will be apparent to one skilled in the art given the benefit of this disclosure.","In some instances, particularly in embedded systems, a user may wish to insert or overlay graphics on image data being handled by a system. For example, in a digital camera, it is useful to insert or overlay static or dynamic graphic elements indicating the status of the camera on the image being viewed, such as cross-hairs, power indicator, light level indicator, or bounding box indicating area of interest. Currently there is no simple way of providing such capabilities when creating a system in a graphical modeling environment.","As used herein, the term image data refers to data handled by a system that represents visual images. Video data is a type of image data that represents video images, such as those provided by a video camera. The terms graphics or graphic elements are used herein in reference to image data that is generated or synthesized locally in the modeled system for addition to provided image data such as video data.","The present invention provides a block for a block diagram model that is capable of inserting or overlaying a parameterized graphic annotation into image data received by the block.","In accordance with a first aspect, in a graphical programming environment, a method comprises providing a graphic block for rendering parameterized graphic annotations; and rendering a parameterized graphic annotation.","In accordance with another aspect, in a block diagram environment, a method comprises providing an image source for providing image data; and providing a graphic block in communication with the image source for overwriting selected pixels in image data received from the image source to add a parameterized graphic annotation to the image data.","In accordance with another aspect, in a graphical modeling environment, a method comprises providing a block diagram having a graphic block capable of adding a parameterized graphic annotation image data, and passing image data through the graphic block so as to add a parameterized graphic annotation to the image data.","In accordance with another aspect, in a graphical modeling environment, a method comprises providing a block diagram, modeling an embedded system, having a graphic block capable of adding a parameterized graphic annotation to image data; and generating code from block diagram for an embedded system.","In accordance with another aspect, in a graphical modeling environment, a graphic block, for adding a parameterized graphic annotation to image data, comprises at least one input port for receiving image data, at least one output port for outputting a combined signal comprising the image data and a parameterized graphic annotation, and functionality for combining the image data received on the input port with a parameterized graphic annotation to produce a combined signal for output on the output port.","In accordance with another aspect, a medium for use with an electronic device holding instructions executable by the electronic device for performing a method, comprises the steps of providing an image source for providing image data, and providing a graphic block in communication with the image source for overwriting selected pixels in image data received from the image source to add a parameterized graphic annotation to the image data.","In accordance with another aspect, a system for generating and displaying a graphical modeling application, comprises user-operable input means for inputting data to the graphical modeling application; a display device for displaying a graphical model; and an electronic device including memory for storing computer program instructions and data, and a processor for executing the stored computer program instructions, the computer program instructions including instructions for providing an image source for providing image data; and providing a graphic block in communication with the image source for overwriting selected pixels in image data received from the image source to add a parameterized graphic annotation to the image data.","In accordance with another aspect, a system for generating and displaying a graphical modeling application, comprises a distribution server for providing to a client device, a block for overwriting pixels in image data to add a parameterized graphic annotation to the image data; and a client device in communication with the distribution server.","In accordance with another aspect, in a network having a server, executing a graphical modeling environment, and a client device in communication with the server, a method comprises the steps of providing, at the server, a block diagram model of a dynamic system; and receiving, at the server from the client device, a selection of a block, in the block diagram model, for overwriting selected pixels in image data to add a parameterized graphic annotation to the image data.","An illustrative embodiment of the present invention relates to generating and providing dynamic state information for a block in a communication system model. The present invention will be described relative to illustrative embodiments. Those skilled in the art will appreciate that the present invention may be implemented in a number of different applications and embodiments and is not specifically limited in its application to the particular embodiments depicted herein.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1A","b":["2","4","7","10","2","8","8","8","8","8"],"i":["a ","b ","c "]},"For example, the memory  holds a diagramming application  capable of creating and simulating electronic versions of system diagrams, such as block diagrams, state diagrams, signal diagrams, flow chart diagrams, sequence diagrams, UML diagrams, dataflow diagrams, circuit diagrams, ladder logic diagrams, kinematic element diagrams, or other models, which may be displayed to a user  via the display device . In the illustrative embodiment, the diagramming application  comprises a block diagram environment, such as Simulink\u00ae or another suitable other graphical modeling environment. As used herein, the terms \u201cblock diagram environment\u201d and \u201cgraphical modeling environment\u201d refer to a graphical application where a model is translated into executable instructions. Examples of suitable diagramming applications include, but are not limited to MATLAB with Simulink, from the MathWorks, LabVIEW, DasyLab and DiaDem from National Instruments Corporation, VEE from Agilent, SoftWIRE from Measurement Computing, VisSim from Visual Solutions, SystemVIEW from Elanix, WiT from Coreco, Vision Program Manager from PPT Vision, Khoros from Khoral Research, Halcon from MVTec Software, and numerous others. The memory  may comprise any suitable installation medium, e.g., a CD-ROM, floppy disks, or tape device; a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, Rambus RAM, etc.; or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory may comprise other types of memory as well, or combinations thereof.","In an alternate embodiment, the electronic device  is also interfaced with a network, such as the Internet. Those skilled in the art will recognize that the diagrams used by the diagramming application  may be stored either locally on the electronic device  or at a remote location  interfaced with the electronic device over a network. Similarly, the diagramming application  may be stored on a networked server or a remote peer.","The diagramming application  of an illustrative embodiment of the invention includes a number of generic components. Although the discussion contained herein focuses on Simulink, from The MathWorks, Inc. of, Natick Mass., those skilled in the art will recognize that the invention is applicable to other software applications. The generic components of the illustrative diagramming program  include a block diagram editor for graphically specifying models of dynamic systems. The block diagram editor allows users to perform such actions as construct, edit, display, annotate, save, and print out a graphical model, such as a block diagram, that visually and pictorially represents a dynamic system. The illustrative diagramming application  also includes graphical entities , such as signal lines and buses that represent how data is communicated between functional and non-functional units, and blocks . As noted above, blocks are the fundamental mathematical elements of a classic block diagram model. A block diagram execution engine , also implemented in the application, is used to process a graphical model to produce simulation results or to convert the graphical model to executable code. For a block diagram graphical model, the execution engine translates a block diagram to executable entities following the layout of the block diagram as provided by the user. The executable entities are compiled and executed on an electronic device, such as a computer, to implement the functionality specified by the model. Typically, the code generation preserves a model hierarchy in a call graph of the generated code. For instance, each subsystem of a model in a block diagram environment can map to a user specified function and the generated code. Real-Time Workshop from the MathWorks, Inc. of Natick, Mass. is an example of a suitable execution engine for generating code.","In the illustrative embodiment, the diagramming program  is implemented as a companion program to a technical computing program , such as MATLAB, also available from the MathWorks, Inc.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1B","b":["12","6","12","6","14","18","12","6","14","16","18","24","20","30"],"i":["a ","d ","d "]},"The block diagram editor is the user interface component that allows a user to create and modify a block diagram model representing a dynamic system, in step . The blocks in the electronic block diagram may model the behavior of specialized mechanical, circuit or software components, such as motors, servo-valves, power plants, blocks, tires, modems, receivers, and other dynamic components. The block diagram editor also allows a user to create and store data relating to graphical entities . In Simulink\u00ae, a textual interface with a set of commands allows interaction with the graphical editor. Using this textual interface, users may write special scripts that perform automatic editing operations on the block diagram. A user generally interacts with a set of windows that act as canvases for the model. There is generally more than one window for a model because models may be partitioned into multiple hierarchical levels through the use of subsystems.","A suite of user interface tools within the block diagram editor allows users to draft a block diagram model on the corresponding windows. For example, in Simulink\u00ae the user interface tools include a block palette, a wiring line connection tool, an annotation tool, a formatting tool, an attribute editing tool, a save\/load tool and a publishing tool. The block palette is a library of all the pre-defined blocks available to the user for building the block diagram. Individual users may be able to customize this palette to: (a) reorganize blocks in some custom format, (b) delete blocks they do not use, and (c) add custom blocks they have designed. The palette allows blocks to be dragged through some human-machine interface (such as a mouse or keyboard) from the palette on to the window (i.e., model canvas). The graphical version of the block that is rendered on the canvas is called the icon for the block. There may be different embodiments for the block palette including a tree-based browser view of all of the blocks.","A block diagram model of a dynamic system, created during step , is generally represented schematically as a collection of interconnected graphical objects, such as blocks, ports and lines, which represent signals.  illustrates an example of a block diagram  created using the diagramming application . Each block in the block diagram  represents an elemental dynamic system. Each signal, denoted by lines connecting the blocks, represents the input and\/or output of an elemental dynamic system. The illustrative block diagram  includes a subsystem block , a source block  and a destination block . A line emanating at one block and terminating at another signifies that the output of the first block is an input to the second block. Ports, such as input port  and output port  of the subsystem block , refer to a distinct inputs or outputs on a block. Signals correspond to the time-varying quantities represented by each line connection and are assumed to have values at each time instant. The source block  for a signal  writes to the signal at a given time instant when its system equations are solved. In the illustrative embodiment, the source block  is an image source. As shown, the signal  from the source block passes to the subsystem , which is a graphic block. The signal  outputted from the subsystem passes to the destination block . The destination block  for a signal  reads from the signal  when the system equation is being solved. As shown, the signal  represents the output of the subsystem . One skilled in the art will recognize that the block diagram  is merely illustrative of a typical application and is not intended to limit the present invention in any way.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 2A","b":["240","6","240","240","250","260","270","252","254","250","260","261","250","251","250","270","240"]},"Once a block diagram model, or other graphical model, has been constructed using the editor in step , the execution engine simulates the model by solving equations defined by the model to trace the system outputs as a function of time, in steps -. The solution of the model, which may be referred to as model execution, is carried out over a user-specified time span for a set of user-specified inputs.","The compile stage in step  marks the start of model execution and involves preparing data structures and evaluating parameters, configuring and propagating block characteristics, determining block connectivity, and performing block reduction and block insertion. The compile stage involves checking the integrity and validity of the block interconnections in the block diagram. In this stage, the engine also sorts the blocks in the block diagram into hierarchical lists that are used when creating the block method execution lists. The preparation of data structures and the evaluation of parameters create and initialize basic data-structures needed in the compile stage. For each of the blocks, a method forces the block to evaluate all of its parameters. This method is called for all blocks in the block diagram. If there are any unresolved parameters, execution errors are thrown at this point.","The compilation step also determines actual block connectivity. Virtual blocks play no semantic role in the execution of a block diagram. During compilation, the virtual blocks and signals, such as virtual bus signals, in the block diagram are optimized away (removed) and the remaining non-virtual blocks are reconnected to each other appropriately. This compiled version of the block diagram with actual block connections is used from this point forward in the execution process.","In the link stage, in step , the execution engine uses the result of the compilation stage to allocate memory needed for the execution of the various components of the block diagram. The linking stage also produces block method execution lists, which are used by the simulation or linearization of the block diagram. Included within the link stage is the initialization of the model, which consists of evaluating \u201csetup\u201d methods (e.g. block start, initialize, enable, and constant output methods). The block method execution lists are generated because the simulation and\/or linearization of a model must execute block methods by type (not by block) when they have a sample hit.","The compiled and linked version of the block diagram may be directly utilized to execute the model over the desired time-span, in step . In step , the execution engine may choose to translate the block diagram model (or portions of it) into either software modules or hardware descriptions (broadly termed code). The code may be instructions in a high-level software language such as C, C++, Ada, etc., hardware descriptions of the block diagram portions in a language such as HDL, or custom code formats suitable for interpretation in some third-party software. Alternatively, the code may be instructions suitable for a hardware platform such as a microprocessor, microcontroller, or digital signal processor, etc., a platform independent assembly that can be re-targeted to other environments, or just-in-time code (instructions) that corresponds to sections of the block diagram for accelerated performance.","Upon reaching the simulation stage , the execution engine uses a simulation loop to execute block methods in a pre-defined ordering upon a sample hit to produce the system responses they change with time.","According to an illustrative embodiment of the invention, the diagramming application  allows the use of selected blocks that are capable of rendering a parameterized graphic annotation. An example of such a block is the subsystem block , the graphic block, as shown in . Here an image source  and a graphic block  in communication with the image source are provided. The image source block  provides image data. The graphic block  is capable of overwriting selected pixels in image data received from the image source  to add a parameterized graphic annotation to the image data.","The image source  models devices such as cameras that are capable of producing image data. For example the image device may be a video camera that produces a video signal. The image source  may also be a storage device or media containing image data. Examples of such storage devices or media include but are not limited to hard drives, digital video recorders, CD-ROMS, and DVDs. Other embodiments will be apparent to one skilled in the art given the benefit of this disclosure.","The image data may be static or active. In certain embodiments it is a video signal. Preferably, the signal is provided in matrix form, for example a two dimensional matrix. Video may be provided in this manner or in higher dimensionality in any number of conventional formats such as RGB, HSV, and YUV. Video and image data may be converted for use in other applications, such as color printing, by converting to relevant color spaces such as CMYK. Other examples will be apparent to one skilled in the art given the benefit of this disclosure.","One embodiment of a graphic block is illustrated in . The graphic block  has an output port  for outputting image data having a parameterized graphic annotation . The graphic block  represents the functionality that renders the graphically parameterized graphic annotation. The rendering of a parameterized graphic annotation may be performed by generating image data having the graphic annotation or, in some embodiments, by overwriting selected pixels in provided image data  received on an input port .","Another embodiment of a graphic block is illustrated in . The graphic block  has at least one input port  and at least one output port . The input port  is for receiving image data, shown here as a video signal (V) . The output port  is for outputting image data, shown here as a video signal (V) , with an added parameterized graphic annotation. Here, The graphic block  represents the functionality that allows a rendered parameterized graphic annotation to be added to the received image data (in this case, a video signal (V) ) and output image data with an added parameterized graphic annotation (V) . This may be done by overwriting selected pixels in the received video signal (V) to add a parameterized graphic annotation to the outputted video signal (V) . As used herein, the term overwriting refers to the altering of an element of a matrix. Here the elements are pixels in a pixel matrix. There are many ways of overwriting selected pixels. For example, computations or transforms could be performed on the image data such as transparency or alpha blending. Pixel data in a matrix may also be simply replaced with new data. Other techniques will be apparent to one skilled in the art given the benefit of this disclosure.","In certain embodiments, the graphic block  may have an additional input port  for receiving parameters  for the placement of the parameterized graphic annotation in the image data. For example, if the image data received is a pixel matrix, wherein each field in the matrix corresponds to a pixel in the image, the parameters provide information regarding which pixels need to be overwritten to add the parameterized graphic annotation to the image data. In one embodiment, wherein the parameterized graphic annotation being added is a rectangle, or bounding box, the parameters may be provided in the format [R, C, R, C]wherein Rand Care the row and column in the image data pixel matrix of a first corner of a rectangle and Rand Care the row and column of a second corner diametrically opposed to the first corner. Given these two corner points the graphic block is capable of generating a rectangle defined by the diametrically opposed corner points by over writing corresponding pixels in the image data.","Other parameter formats and shapes are also possible. In many cases the format of the parameters is determined by the shape and the amount of information necessary to define the shape. For example, the format for a graphic block generating a circle may be [R, C, r]where R and C are the row and column placement of the center of the circle and r is the radius of the circle. In some embodiments, parameters for multiple shapes may be received on the input port . In some embodiments, where the graphic block is capable of generating multiple types of shapes, an identifier may also be provided, instructing the graphic block as to which type of shape is to be rendered. Other possible formats for various shapes will be apparent to one skilled in the art given the benefit of this disclosure.","In other embodiments the graphic block may have multiple input ports for receiving parameters. Each port may be for receiving a specific parameter. For example, a port for receiving row information and a port for receiving column information. The separate ports may also be used for receiving parameters for different shapes. For example, the graphic block may add multiple parameterized graphic annotations, and have separate input ports for receiving parameters for each of the multiple shapes to be added to the image data. The multiple shapes may be the same type of shape or different types of shapes. For example, a graphic block , as illustrated in  may render both rectangles and circles and have separate input ports for receiving the corresponding parameters. One port  for receiving parameters  for a rectangle and one port  for receiving parameters  for a circle. Other possible configurations will be apparent to one skilled in the art given the benefit of this disclosure.","In another embodiment, as illustrated in , the graphic block  may be provided with the graphic (G)  to be added to the image data. In this case, the graphic block  may have an additional port  for receiving a graphic  to be imported. The graphic block  then overwrites the necessary pixels in the received image data pixel matrix to add the imported graphic  to the image data. Parameters  for the placement of the imported graphic  may also be provide via a port  in a manner such as disclosed and discussed above.","The parameterized graphic annotation is added to the image data by overwriting selected pixels in the image data received by the block diagram. The parameterized graphic annotation may be a line, shape, icon, text, or any combination thereof. The graphic annotation is parameterized in that the graphic is described by the values of its parameters. The number of parameters is generally less than the total number of pixels rendered in the graphic annotation. For example, to render a circle graphic annotation, the minimum parameter set might describe the center of the circle (one parameter for each of the x and y coordinates) and a parameter for the circle radius, providing a set of 3 parameters. In another example, the circle may have additional parameters indicating the color to fill the circle, the color of the circular boundary around the perimeter of the circle, and perhaps a parameter controlling the transparency of the rendering, for a total of 6 parameters describing the graphic annotation. In another example, to draw textual font or glyph-based graphic annotations, a parameter indicating the selection of glyph (such as a letter of the alphabet or a numeral) is utilized; additional parameters describing font size, weight, position, color, and other attributes are presented as a set of parameters for rendering the graphic annotation from a block in a block diagram. Other types of graphic annotations can have different sets of parameterizations.","Examples of shapes include, but are not limited to rectangles, circles, and polygons. In certain embodiments the graphic annotation is a bounding box. Graphical effects like 3-D perspective texture mapping and image warping may also be implemented. Other shapes and icons will be apparent to one skilled in the art given the benefit of this disclosure.","The parameterized graphic annotation may be generated by the graphic block or provided by another source and imported into the graphic block for addition to the image data received by the graphic block.","The parameterized graphic annotation may be static relative to the image data it is being added to. For example, the image data might be a video signal that changes over time while the parameterized graphic annotation does not. The parameterized graphic annotation remains in the same place, the same shape and the same size over time. Alternatively, the parameterized graphic annotation may be dynamic and change position, size, shape, or any combination thereof over time.","An exemplary flow chart  of a method of operation for the graphic block is illustrated in  with a corresponding visual depiction  of the image data shown in . As depicted in , image data may be received by the graphic block, step . Then there is the optional step, for some embodiments, of receiving parameters for the parameterized graphic annotation . In certain embodiments, this step may also include the importing of a graphic annotation. Then the parameterized graphic annotation is rendered, here this done by overwriting selected pixels to add the parameterized graphic annotation to the image data, step . The image data with the added parameterized graphic annotation is then outputted, step . In , an example of the image data being received is depicted at . The image data is that of an outdoor scene. The parameterized graphic annotation to be added (a viewfinder graphic) to assist in aiming or framing a picture, is depicted at . The image data with the added parameterized graphic annotation are depicted at .","An example of a dynamic parameterized graphic annotation is shown in . Here, the graphic annotation is a power meter. The bars of the power meter change over time, as depicted in stages through , reflecting, for example, the power level of the camera.","Thus, in this manner image data, such as video, can be passed through the graphic block to add a parameterized graphic annotation, such as viewfinder or power meter, to the image data. It will be apparent to one skilled in the art, that any number of parameterized graphic annotations can be added to image data for any number of applications.","An example of a block diagram  of a modeled system is illustrated in . The block diagram  comprises an image data source , a parameter generator , a graphic block , and one or more viewers A, B. The image data source, as discussed above and shown in , provides image data to the parameter generator , viewer A, and graphic block . The parameter generator  represents functionality that can generate parameters for parameterized graphic annotations to be added to the image data. The viewers A represent a display that allows a user to view the image data without the added parameterized graphic annotation. The graphic block  receives the image data from the image data source  and parameters for a parameterized graphic annotation from the parameter generator . The graphic block  then add a parameterized graphic annotation to the image data as directed by the parameters. The combined signal of the image data and added parameterized graphic annotation outputted from the graphic block can then be viewed by a user via viewer B.","One possible use for the system illustrated in  is as a masking system. For example, systems that scan or track eye movement require a considerable amount of computer computation and processing. The amount of computer computation and processing can be reduced by limiting the amount of image data needing to be processed. One way of accomplishing this involves masking or blocking out areas of the image data that don't require processing. In this example the image data source  is a camera that generates a video stream of a persons face. A visual depiction of this image data as it would be displayed by the viewer A can be seen at  in . The video stream is then provided to parameter generator  which calculates the location of the eyes in the pixel matrix of the image data and generates parameters for circles with areas that encompass the eyes as shown at . The parameters are then provided to the graphic block  along with the video stream image data. The graphic block then renders a mask having circles encompassing the area where the eyes of the face in the videos stream would appear as shown at  of . Thus when the mask is added to the video stream image data, the mask blocks out all the image data in the pixel matrix except for the location in the pixel matrix where the eyes of the face would be located. A visual depiction of this, as would be seen by a user at viewer B, is shown at  of . With only the area of the eyes in the pixel matrix of the video stream needing to be processed, the total amount of processing and computation by the eye scanning or tracking functionality is reduced.","One particularly advantageous application of the graphic block is in embedded systems such as processors or field programmable gate arrays (FPGAs). Unlike typical graphics handling that can make use of many services available to a desktop or rely on the presence of graphic accelerators, embedded systems cannot make as many presumptions about available resources. Efficient handling of many data types including double and single-precision floating as well as integer and fixed point numerics is critical. Many embedded environments require the implementation of the algorithms to be exclusive of floating point. Such embedded systems have numerous uses in the automotive, aerospace, bio-pharmaceutical, consumer electronics, and surveillance fields.","Thus in certain embodiments the dynamic system being modeled by a block diagram having a graphic block, is an embedded system. Correspondingly, the code generated by the execution engine from the block diagram containing a graphic block is specifically designed for embedded systems. In some embodiments a graphical application program interface, such as Open GL ES, can be used. In certain embodiments, the code for embedded systems does not perform dynamic memory allocations. This is critical to ensuring stable and bounded operation in an embedded system.","The examples to this point have focused primarily on the system where the graphical modeling environment was on a local electronic device. The graphical modeling environment may of course also be implemented on a network , as illustrated in , having a server  and a client device . Other devices, such as a storage device , may also be connected to the network.","In one such embodiment a system for generating and displaying a graphical modeling application, comprises a distribution server for providing to a client device, a graphic block capable of overwriting selected pixels in image data to add a parameterized graphic annotation to the image data; and a client device in communication with the distribution server. Here the distribution server provides a client device, such as an electronic device discussed above, with a graphic block capable of overwriting selected pixels in image data to add a parameterized graphic annotation to the image data. This graphic block may be part of a block set available to the client on the server. The client may then use the graphic block, capable of overwriting selected pixels in image data to add a parameterized graphic annotation to the image data, in a block diagram for a dynamic system and pass image data through the graphic block so at to output image data incorporating a parameterized graphic annotation from the block. In certain embodiments, the client may also generate code from the graphic block for use in embedded systems.","In another embodiment, the server may execute the graphical modeling environment. A user may then interact with the graphical modeling interface on the server through the client device. In one example of such a system a server and client device are provided. The server is capable of executing a graphical modeling environment, wherein the graphical modeling environment provides a block diagram model of a dynamic system. The client device is in communication with the server over a network. A graphic block, of the block diagram of a dynamic model, capable of overwriting selected pixels in image data to add a parameterized graphic annotation to the image data, is selected at the server from the client device. The graphic block may then be provided with image data and output image data incorporating a parameterized graphic annotation. In some embodiments, parameters may also be provided to the graphic block. In certain embodiments, the server may also be used to generate code for use in and embedded system.","It will be understood by one skilled in the art that these network embodiments are exemplary and that the functionality may be divided up in any number of ways over a network.","The present invention has been described relative to illustrative embodiments. Since certain changes may be made in the above constructions without departing from the scope of the invention, it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a limiting sense.","It is also to be understood that the following claims are to cover all generic and specific features of the invention described herein, and all statements of the scope of the invention which, as a matter of language, might be said to fall therebetween."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3D"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4C","FIG. 4A"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
