---
title: Method, system, and apparatus for enabling near real time collaboration on an electronic document through a plurality of computer systems
abstract: A method, system, and apparatus are provided for collaborating on an electronic document. According to the method, a data structure may be maintained at each of the computer systems participating in the collaborative session that represents the contents of a shared document. When user input is received at one of the computer systems modifying the document, the data structure is updated to reflect the modification. In response to the modification, the changes to the data structure are periodically identified and collected as a revision that identifies only the changes made to the data structure as a result of the edits made since the previous revision was taken. The revision is packaged and transmitted to each of the participants in the sharing session. The revisions are merged into the copy of the data structure stored at the participating computer systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07818679&OS=07818679&RS=07818679
owner: Microsoft Corporation
number: 07818679
owner_city: Redmond
owner_country: US
publication_date: 20040818
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims the benefit of U.S. provisional patent application No. 60\/563,685, filed Apr. 20, 2004, which is entitled \u201cOneNote Shared Session Feature\u201d and which is expressly incorporated herein by reference.","With the advent and explosion of the Internet, network computing applications have been created that allow remote computer users to work together on a common task. For instance, applications exist that allow remote users to view a common whiteboard, to view and interact with a slide presentation, to chat with one another, and to perform other functions in a collaborative manner. This type of program typically increases productivity for users that need to collaborate but that are located in remote locations.","One shortcoming of the previous solutions for collaborating on a task via a computer network is that these previous solutions do not provide a satisfactory user experience during collaboration. For instance, the previous solutions typically suffer from reduced network performance because large amounts of data are continuously sent to all of the participants. In many cases, the application will slow drastically or even block the user from making input while data transmission is taking place. In this situation, the user will become acutely aware that the sharing process is taking place and may even become frustrated with the application.","Another reason the user experience suffers while collaborating with previous solutions stems from the fact that in a given group of collaborators there may be large discrepancies in the available network bandwidth and latency. For instance, in a given collaboration session several users may be connected to high speed local area network connections while other users may be limited to low speed dialup network connections. Utilizing the previous solutions, the users connected via dialup may have an extremely difficult time receiving and making updates to the shared document. This also can be very frustrating for a user.","It is with respect to these considerations and others that the various embodiments of the present invention have been made.","In accordance with the present invention, the above and other problems are solved by a method, system, and apparatus for near real time collaboration on an electronic document through two or more computer systems. The embodiments of the invention permit two or more users participating in a sharing session to interactively create and modify an electronic document via a computer network. Changes to the electronic document are identified, packaged, and transmitted to each user in a manner that allows collaboration to occur in near real time, even in high latency, low bandwidth network scenarios. Moreover, because changes to the document are packaged as incremental revisions and transmitted to the participants, it is not necessary to transmit large amounts of data to enable near real time collaboration.","According to one aspect of the invention a method is provided for enabling near real time collaboration on an electronic document through two or more computers. According to the method, a data structure may be maintained at each of the computer systems participating in the collaborative session that represents the contents of a shared document. When user input is received at one of the computer systems modifying the document, the data structure is updated to reflect the modification. In response to the modification, the changes to the data structure are periodically identified and collected as a revision that identifies only the changes made to the data structure as a result of the edit. A revision identifies the changes made to the core data model that is utilized to represent the document as a result of any edits.","In order to ensure a valid progression among editing states, a determination may be made prior to transmitting the revision to other participants as to whether the copy of the data structure maintained at the computer system where the edits were received is the most recent version among the participants. If the data structure is not current, the revisions needed to make the data structure current may be retrieved from the other participants and applied to the data structure. Once the data structure is current, the revision is packaged and transmitted to each of the participants in the sharing session. Revisions are taken frequently to ensure that the size of the revisions are small enough to be quickly transmitted over a computer network.","When revisions are received at the other participating computer systems, the revisions are merged into the copy of the data structure stored at the participating computer system. The data structure may then be utilized to refresh the display of the shared document, thereby indicating the modifications at each of the participating computer systems in near real time. Edits may be received at any participating computer system and transmitted to the other participants in a similar manner.","In order to further ensure the valid progression of edits among the various participants, a synchronization token may be utilized. A synchronization token is a data structure that is passed between the participants. Only the computer system owning the synchronization token is permitted to create a new revision to the data structure. Therefore, prior to making any revision, a participating computer system must first determine if it owns the synchronization token. If it owns the synchronization token, it can proceed with making a new revision and transmitting the revision to the other participants. If it does not own the synchronization token, it must request the synchronization token from the participating computer system that currently owns the token.","In order to ensure the fair passing of the synchronization token among the participating computer systems, the request for the token may include data indicating the amount of time the requesting computer system has been waiting for the token. If no response is received to the request, another request may be sent indicating the extended duration of time that the computer system has been waiting for the token. When the owner of the synchronization token receives requests for the token, it examines each request to determine the participant that has been waiting the longest to receive the token and transmits the token to that computer system.","Other mechanisms may also be utilized to ensure that one and only one token exists among all of the participants. For instance, if requests go unfulfilled for the token for a predetermined period of time, a new token may be created. This may occur, for instance, if the computer system owning the token is disconnected from the network. Alternatively, tests may be performed periodically to determine whether two or more tokens exist among the participants. If two synchronization tokens exist, a deterministic algorithm is performed at each of the computer systems owning tokens to determine the token that should be discarded.","A mechanism is also provided to ensure that computer systems connected via low bandwidth connections are granted the token in a fair manner. Multiple tokens may also exist, but efforts are taken to minimize duplicates. According to this mechanism, a determination is made when a request for the token is received as to whether the token has already been passed along to another participant. If the token has already been transmitted, a \u201ctime to live\u201d value in the request may be decremented. If the time to live value has not expired, the request may then be forwarded to the new owner of the synchronization token. In this manner, requests from participants on low bandwidth connects are effectively injected into the high bandwidth network.","The invention may be implemented as a computer process, a computing apparatus, or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process.","These and various other features, as well as advantages, which characterize the present invention, will be apparent from a reading of the following detailed description and a review of the associated drawings.","Referring now to the drawings, in which like numerals represent like elements, various aspects of the present invention will be described. In particular,  and the corresponding discussion are intended to provide a brief, general description of a suitable computing environment in which embodiments of the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer, those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems and program modules.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Referring now to , an illustrative operating environment for the several embodiments of the invention will be described. As shown in , a network  interconnects a number of computer systems A-D. It should be appreciated that the network  may comprise any type of computing network, including a local area network (\u201cLAN\u201d) or a wide area network (\u201cWAN\u201d), such as the Internet. The network  provides a medium for enabling communication between any number of computer systems A-D, and potentially other computer systems connected to or accessible through the network . According to one embodiment of the invention, the network  comprises a transmission control protocol\/internet protocol (\u201cTCP\/IP\u201d) network such as the Internet.","Each of the computer systems A-D comprises a general purpose desktop, laptop, tablet, or other type of computer capable of executing one or more application programs. In particular, according to the various embodiments of the invention, the computer  is operative to execute a note-taking application. As known to those skilled in the art, a note-taking application program provides functionality for capturing and organizing notes, which may include text, handwriting, pictures, drawings, audio, or other information.","According to embodiments of the invention, the note-taking application program also allows near real time collaboration on a document generated by the note-taking application. As described herein, near real time means that updates to the document at each computer system A-D participating in a collaborative session will be made as quickly as the network  will allow. In cases where high bandwidth network connections are utilized to connect the computer systems A-D to the network , the response time will approach real time. Where slower network connections are utilized, the response time will be slower. However, as will be described in greater detail below, mechanisms are provided to ensure that computer systems participating in a sharing session via slower connections will enjoy very responsive performance without negatively affecting the performance of participants connected by higher bandwidth connections.","One way to ensure that even users on slow connections will have a responsive experience involves the fair passing of a synchronization token . The synchronization token  is passed between the computer systems A-D participating in the sharing session. The synchronization token  is a data structure that authorizes the computer system that owns the data structure to make updates to the current state of the shared document. Ownership of the token will not prevent the user from making local changes. Additional details regarding the utilization of the synchronization token  to provide near real time collaboration will be provided below with respect to .","It should be appreciated that, according to one embodiment of the invention, the note-taking application comprises the ONENOTE note-taking application program from MICROSOFT CORPORATION of Redmond, Wash. It should be appreciated, however, that the various aspects of the invention described herein may be utilized with other note-taking application programs from other manufacturers. Moreover, although the inventive aspects described herein are presented in the context of a note-taking application program, it should be appreciated that other types of application programs may also be utilized to embody the various aspects of the invention. For instance, the various aspects of the invention may be utilized with word processing programs, spreadsheet programs, drawing programs, computer-aided design programs, presentation programs, and any other type of computer program wherein it may be desirable to collaborate with one or more other users on the contents of a document.","Referring now to , an illustrative computer architecture for a computer  utilized in the various embodiments of the invention will be described. The computer architecture shown in  illustrates a conventional desktop, laptop, or tablet computer, including a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer, such as during startup, is stored in the ROM . The computer  further includes a mass storage device  for storing an operating system , application programs, and other program modules, which will be described in greater detail below.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media provide non-volatile storage for the computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by the computer .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d), or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer .","According to various embodiments of the invention, the computer  may operate in a networked environment using logical connections to remote computers through a TCP\/IP network , such as the Internet. The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The computer  may also include an input\/output controller  for receiving and processing input from a number of other devices, including a keyboard, mouse, or electronic stylus (not shown in ). Similarly, an input\/output controller  may provide output to a display screen, a printer, or other type of output device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store a note-taking application program , as described above. As briefly described above, the note-taking application  comprises an application program for capturing and organizing notes, which may include text, handwriting, pictures, drawings, audio, or other information.","Notes may be organized by the note-taking application  into notebooks, folders, pages, and sections. Within a page, notes may be entered anywhere and later repositioned. Moreover, emphasis may be added to notes with bullet and list styles as wells as flags and highlighting. Full control may also be had over fonts, styles, sizes, and colors. When a user exits the note-taking application , the contents of the notebook may be saved in a note-taking document  on the mass storage device . Additional details regarding the operation of the ONENOTE note-taking application program are publicly available from MICROSOFT CORPORATION of Redmond, Wash.","In order to create a document sharing session, the note-taking application  utilizes a peer-to-peer (\u201cP2P\u201d) application programming interface (\u201cAPI\u201d) . The P2P API  utilizes a network sockets API  to provide media-independent networking services at the transport protocol and session protocol levels. The P2P API's media independence means that collaborative sessions can be run on TCP\/IP networks, IPX networks, and over directly connected modems and serial cables. The P2P API  can create a P2P infrastructure that includes client\/server and peer to peer networking sessions, group management, guaranteed and non-guaranteed messaging, sequenced and non-sequenced messaging, message fragmentation and reassembly, traffic throttling, message priorities, connection statistics, and session description queries.","According to one embodiment of the invention, the P2P API  comprises the DIRECTPLAY API from MICROSOFT CORPORATION. The DIRECTPLAY API is a public API and, as such, additional details regarding its use and implementation are publicly available from MICROSOFT CORPORATION. It should be appreciate the other technologies available from other manufacturers may also be utilized to create a peer to peer networking session among the computers A-D.","The mass storage device  and RAM  may also store an e-mail client application . The e-mail client application  may be utilized to send and receive electronic mail messages containing invitations to join a sharing session. For instance, a user of one of the computers A-D may begin a sharing session within the note-taking application  wherein one or more pages of the note-taking document  are shared. In order to invite other participants to the sharing session, the e-mail client application  may be utilized to create an electronic message directed to the other intended participants. The e-mail message may include as an attachment that is associated with the note-taking application program  and that includes the information necessary (internet protocol address, etc.) to connect to the sharing session.","When one of the intended recipients receives an electronic mail message from the session initiator that attachment to the message may be selected and executed. Execution of the attachment will cause the note-taking application  to execute and to connect to the sharing session utilizing the data contained in the attachment. Once connected to the sharing session, a copy is made of the shared document at each participant's computer system. In this manner, when a user joins the shared session, pages may be inserted into the notebook stored at their computer by the note-taking application . The various copies of the documents are then synchronized to one another as edits are made to the document by the various participants in the sharing session. The session initiator can specify whether users may edit the shared document on an individual or global basis.","Additional details regarding the synchronization of changes to the electronic document will be provided below. It should be appreciated that it is not necessary to transmit an e-mail invitation to the participants in the sharing session. The network address of the sharing session may be provided to the participants manually or through any other means. The network address may then be utilized to connect to the sharing session in a manual manner.","Turning now to , additional details will be provided regarding the creation of a new sharing session. As shown in , the document  includes one or more pages A-C that may be shared. When a request to start a new session is received, such as through the selection of a user interface button or menu item , a request is transmitted to a shared session API  provided by the note-taking application . The shared session API  coordinates the creation and joining of shared sessions, manages sessions, calls the P2P API  to perform communication, and performs other functions described herein.","When a new sharing session is created, the shared session API  creates a new page synchronization object A-C for each page A-C that is to be shared. Each page synchronization object A-C is linked to a corresponding shared page A-C. As will be described in greater detail below, each page synchronization object A-C is responsible for monitoring for changes to the data model underlying each page, creating revisions to the data model describing the changes, and transmitting the revisions to corresponding page synchronization objects executing at each of the participating computer systems. The page synchronization objects A-C are also responsible for receiving and merging revisions received from other computer systems and for performing other functions described herein.","Referring now to , a routine  will be described illustrating a process performed by the note-taking application program  for initiating a new document sharing session. When reading the discussion of the routines and state machines presented herein, it should be appreciated that the logical operations of the various embodiments of the present invention are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly, the logical operations illustrated in the state diagrams discussed herein, and making up the embodiments of the present invention described herein, are referred to variously as operations, structural devices, acts or modules. It will be recognized by one skilled in the art that these operations, structural devices, acts and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.","The routine  begins at operation , where a request is received, such as from a user, to share one or more pages of the current note-taking document. In response to the request the routine  continues to operation , where the shared session API  calls the P2P API  to create a new peer to peer session. From operation , the routine  continues to operation  where a new page synchronization object A-C is created for each of the pages A-C to be shared in the new session. Each page synchronization object A-C is linked to a page A-C and is connected to the new sharing session. It should be appreciated that when a participant joins a previously created session, page synchronization objects are also instantiated on the participant's computer system to control the updates for pages stored on that computer system.","From operation , the routine  continues to operation  where participants may be invited to join the new sharing session. As described above, invitations to join the sharing session may be transmitted to the other participants via electronic mail messages. Alternatively, other means may be utilized for inviting participants and for transmitting to the other participants the network address of the sharing session. From operation , the routine  continues to operation  where a determination is made as to whether other participants have joined the sharing session. It should be appreciated that the note-taking application  may be operated in a normal fashion while waiting for other participants to join the shared session and during the shared session.","If, at operation , it is determined that no other participants have joined the shared session, the routine  returns to operation  where another similar determination may be made. If, however, other users have joined the new sharing session, the routine  continues to operation . At operation , the current revision of each of the shared pages A-C are transmitted to each of the new participants. As will be described in greater detail below, a revision identifies the changes made to the core data model that is utilized to represent the document  as a result of any edits. Because no revisions have been previously transmitted to the participants, the first revision comprises the complete state of the shared document. This is transmitted to other participants at operation .","From operation , the routine  continues to operation , where changes made to the shared document by any of the participants are exchanged and synchronized. By exchanging revisions and merging the revisions into the shared document in the manner described herein, near real time collaboration may be performed on the document even for users connected to the network  via a slow network connection. Additional details regarding the synchronization of shared pages is provided below with respect to .","From operation , the routine  continues to decision operation , where a determination has been made as to whether the sharing session has ended. If the sharing session has not ended, the routine  branches back to operation , where the synchronization process continues. If the session has ended, the routine  continues to operation , where it ends.","Referring now to , additional details will be provided regarding the process for joining a previously created sharing session. As described above, an electronic mail message may be transmitted as an invitation to join a sharing session. The electronic mail message may include an attachment  that includes the session address  for the sharing session. When the attachment  is launched on a computer system, a join method  is called on the shared session API  with the session address . In response to calling the join method , the shared session API  calls the P2P API  with an instruction to join the sharing session. In response, the P2P API  is operative to connect to the sharing session via the network . Additional details regarding this process are described below with respect to .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4B","b":["400","402","400","400","28","400","406","400","414","400","406","408"]},"At operation , the current revision  to the shared document is received at the participant's computer. Because no previous revisions have been received, the first revision comprises the state of the document when the participant joins the session. Once the current revision has been received, the routine  continues to operation , where the contents of the shared pages are synchronized among all of the participants in the shared session. Additional details regarding the synchronization of the shared pages are provided below with respect to .","From operation , the routine  continues to decision operation , where a determination has been made as to whether the sharing session has ended. If the sharing session has not ended, the routine  branches back to operation , where the synchronization process continues. If the session has ended, the routine  continues to operation , where it ends. It should be appreciated that any number of participants may join the shared session in the manner described above with respect to .","Referring now to , additional details will be provided regarding the operation of the note-taking application  and the data structure utilized by the note-taking application  to represent pages.  shows an illustrative on screen display provided by the note-taking application . As shown in the example page presented in , the screen display represents a page D on which a user may make notes. In particular, a user may utilized the note-taking application  to add an outline object A to the page D. The outline object A may include one or more outline elements, such as the text A and the handwriting B. The text A may be typed utilizing a keyboard and the handwriting B may be made utilizing a stylus. A picture  may also be inserted into the page D. It should be appreciated that the display shown in  is merely illustrative and that other types of data may be entered into the page D.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 5B","FIG. 5A"],"b":["24","40","70","70","72","40","72","73","60","80","80","73","74","74","62","62","74","76","62","74","78","62","24","70","24","24"]},"Referring now to , additional details regarding the process of capturing revisions to a DAG representing a shared page will be described.  shows an illustrative page E that includes an outline object B and text C contained within the outline object. The DAG B represents the contents of the page E. In particular, the node B represents the page object, the node B represents the outline object B, and the node B represents the text C. When a new sharing session is initiated, none of the contents of the DAG have been transmitted to other participants. Accordingly, the entire DAG is considered a revision A that must be transmitted to the other participants. Once the other participants receive the DAG B, only the changes made to the DAG B are exchanged between the participants. This process is illustrated in .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 6B","FIG. 6A"],"b":["40","62","40","70","76","70","80"]},"The new revision B comprises only the portion of the DAG that was changed by a user since the last revision was taken. Accordingly, the new revision B encompasses only the node C including the newly added text. As will be described in greater detail below, once captured, the revision C may be serialized into a byte stream that is broadcast to the other participants. When the revision C is received by the other participants, its contents may be applied to the locally stored copies of the DAG B to reflect the changes made by the user at each participating computer system. The DAG B may then be utilized to render the page at each of the computer systems, thereby reflecting the change, provided the participants have the required dependent revisions for the revision. If the dependent revisions are not present, they must be requested. Because the render is incremental, it is efficient and fast. Additional details regarding the transmission, synchronization, and merging of revisions will be provided below.","Referring now to , additional details will be provided regarding the mechanism utilized to transmit and apply revisions among the various participants in a sharing session.  illustrates a computer system A and a computer system B participating in a sharing session. As described above, each of the computer systems A and B maintain copies of the shared pages F and G. Additionally, each of the computer systems A and B maintain page synchronization objects linked to the shared pages. The computer system A maintains the page synchronization objects F and G linked to the pages F and G, respectively. The computer system B maintains the page synchronization objects H and J linked to the pages F and G, respectively.","In order to simplify the communication between the participants in the sharing session, the peer to peer network is partitioned into channels. Each message exchanged between the participants is assigned a channel identification number and data identifying the channel number is transmitted with the message. Each page synchronization object \u201clistens\u201d on its own channel for messages. For instance, as shown in , the page synchronization objects F and H communicate by transmitting a channel message A on a first communications channel. Likewise, the page synchronization objects G and J communicate by transmitting a channel message B on a second communications channel. Other page synchronization objects may communicate on other channels in a similar fashion.","When a new participant joins an existing sharing session, a message is transmitted to the computer system that initiated the session. In response to receiving such a message, the host transmits the current revision to the new participant in the manner described above. Each page is transmitted on a new channel. When a participant receives a message on a channel for which it has not previously received a message, it creates a new page synchronization object for that channel. The participant also creates a new page and links the new page to the new synchronization object. When the current revision is first transmitted, it has no dependencies on other revisions, so the received revision can be utilized to replace the newly created page. In this manner, new pages and new page synchronization objects are created on each participating computer system in an automate manner.","It should also be appreciated that because page messages are transmitted on a per-channel basis, users may simultaneously edit different pages without resulting in the potential for conflicting edits and revisions. However, if users simultaneously edit the same page, the possibility arises that revisions will be taken that contain each users edits and placed on the network at the same time. This possibility results in the additional possibility for inconsistent states to be present on the network. To avoid this possibility, the various embodiments of the present invention utilize a synchronization token that is passed among the participants. The synchronization token is a data structure that authorizes the owner to make the next revision of the DAG data structure. If and only if a participant possesses the synchronization token is that participant authorized to declare a revision to the data structure. It should be appreciated that the synchronization token need not be owned for local changes to be made. The process of utilizing the synchronization token is described below with respect to .","Referring now to , an illustrative state machine will be describe that illustrates a process for specifying a new revision to the shared data structure. The state machine begins at state , where a determination is made as to whether local changes have been made to the data structure. If no changes have been made, it is not necessary to declare a new revision. Accordingly, the state returns to state  if no changes have been made. If changes have been made, the state transitions to state . At state , a predetermined period of time is spent waiting before creating a revision. This ensures that revisions will not be taken too frequently.","From state , the state transitions to state . At state , a determination is made as to whether the computer system where the edits were made is the current owner of the synchronization token. If the computer system is the current owner, the state machine transitions to state . If the computer system is not the current owner, the state machine transitions to state , where a request for the token is transmitted to the current owner of the synchronization token. The state machine then transitions to state .","At state , a determination is made as to whether the synchronization token has been received. If the token has been received, the state transitions to state . If the token has not been received, the state transitions to state . At state , the time that the computer system has been waiting to receive the synchronization token is increased. As will be described in greater detail below, the waiting time is included with the request for the synchronization token. This data is utilized by a participant when determining which computer system the synchronization token should be sent to. In particular, the computer system that has been waiting the longest for the synchronization token is given the token. More details regarding this process are described below.","From state , the state transitions to state . At state , a determination is made as to whether a predetermined period of time has elapsed without any response to the request for the synchronization token. If an extended period of time has elapsed, this may indicate that the token has been lost for instance by the owner of the token being disconnected from the network . Accordingly, if the time period has elapsed, the state machine transitions to state  where a new token is created using the current revision\/state as the basis. If the time period has not elapsed, the state transitions back to state  where another request for the synchronization token is transmitted with the updated waiting time. The token owner can also elect to deny the request, in which case a denial message will be received. The requestor will then wait a short time and then re-request again\u2014i.e. transition back to state .","From state , the state transitions to state  where a determination is made as to whether the current state of the DAG is caught up with all other revisions made by other participants. If the graph is not current, the state transitions to state , where the revisions necessary to make the data structure current are requested and received from the other participants. Once the necessary revisions have been received, the state transitions from state  back to state .","If, at state , it is determined that the data structure is current, the state machine transitions to state , where the revision is taken in the manner described above and serialized for transmission over the network . The state then transitions to state , where a reference in the form of an ID is placed in the token. The state then transitions to state , where the token and the revision is pushed to all of the participants in the sharing session. The state then returns from state  to state  if the user is not being throttled as described below. According to embodiments of the invention, a throttling mechanism exists such that a revision will only be pushed to a participant if the participant has finished processing the last revision it received. When the participant finishes processing its last revision then the most recent revision is sent. If the participant cannot keep up with the flow of revisions, then some of the revisions may be skipped. This is equivalent to lowering the \u201cframe rate\u201d for the participant. Details regarding processes for merging received revisions into the data structure, for detecting and correcting the existence of multiple tokens, and for receiving and responding to requests for the token in a fair manner are described below with respect to .","Turning now to , an illustrative state machine  will be described illustrating a process for receiving a token containing a revision. The state machine  begins at state , where a synchronization token notification is received. The token owner frequently broadcasts an indication that they are the owner of the token. If such an indication is received, the state machine  then continues to operation , where a determination is made as to whether two synchronization tokens exist among the participants in the sharing session. This determination is made by determining if the participant that received the notification already owns the token. If so, then two tokens exists. If two tokens do not exist, the state transitions to state . If two tokens do exist, the state transitions to state .","At state , a \u201ccontest\u201d is performed to determine which of the two tokens should be utilized and which should be deleted. The contest comprises a deterministic algorithm executed at both computers owning a synchronization token. For instance, the algorithm may simply compare the unique integer identification numbers assigned to each peer to determine which number is larger. The peer with the larger number wins the contest and the peer with the lower number loses the contest. It should be appreciated that other types of deterministic algorithms may also be utilized.","If, at state , it is determined that the computer system has won the contest, the state transitions to state , where an instruction is transmitted to the other peer owning a token instructing the peer to delete their token. The state then transitions to state , where it ends. In this manner, the rightful owner of the token can continue its processing in a normal fashion.","If, at state , it is determined that the computer system has lost the contest, the state transitions to state , where the received token is deleted. The state then transitions to state , where the token owner and the ID of the latest revision are recorded for future reference. This information is utilized later to know who to request the token from. From state , the state machine  transitions to state , where it ends. It should be appreciated that the processes illustrated in , , , and  are performed independently and potentially in parallel.","Turning now to , an illustrative state machine  will be described for receiving and responding to requests for the synchronization token in a fair manner. The state machine  begins at state , where a request for the synchronization token is received. The state machine transitions from state , to state , where a predetermined period of time is allowed to pass prior to continuing. The state machine then transitions to state , where a determination is made as to whether the synchronization token has already been forwarded on to another one of the peers. If the synchronization token has not yet been forwarded, the state machine  transitions to state .","At state , a determination is made if more than one request for the token has been received as to which of the requests specifies the largest amount of time waiting for the token. The state machine  then transitions to state , where the token is transmitted to the computer system that transmitted the request for the synchronization token having the longest time spent waiting. In this manner, the peer that has been waiting the longest for the token will receive the token. From state , the state machine  transitions to state , where it ends.","If, at state , it is determined that the token has already been sent to another peer, the state machine transitions to state . At state , a \u201ctime to live\u201d value set forth in the request for the synchronization token is decreased by one. The time to live value specifies the number of times the request should be forwarded to the new owner of the synchronization token before it expires. The state machine then transitions to state , where a determination is made as to whether the request has expired. If the request has expired, the state machine transitions from state  to state , where it ends. If the request has not expired, based on the time to live value, the state transitions to state , where the request (including the reduced time to live value) is forwarded to the new owner of the synchronization token. In this manner, a late request for the synchronization token may be injected into the high speed network. From state , the state machine transitions to state , where it ends.","Turning now to , an illustrative state machine  will be described showing a feature of the invention for allocating separate undo stacks to each user in a collaboration session. The state machine  begins at state , where an undo stack is maintained for each page at each computer system participating in a sharing session. The undo stack tracks the changes made to the DAG so that these changes may later be \u201cundone\u201d in response to a user request.","From state , the state machine  transitions to state , where a determination is made as to whether an undo request has been received. If no undo request has been received, the state machine  transitions back to state . If an undo request is received, the state machine transitions to state , where a reverse merge is performed on the DAG to determine the edits that should be undone. The state then transitions to state , where a new revision is created that includes the undo edits. The state machine then transitions to state , where the new revision is propagated to the other participants in the sharing session. In this manner, each edits by any individual user on any individual page may be easily undone. From state , the state machine  transitions to state , where it ends.","Referring now to , an illustrative state machine  will be described for merging revisions made to the graph. The state begins at state , where a revision is received from the network. If the revisions are the most recent revisions to the DAG (i.e. if old revisions are received, they are not applied to the DAG), then the state then transitions to state , where a determination is made as to whether local changes are present. If local changes have not been made, the state transitions to state , where the received revision is applied directly to the graph. The state then transitions to state , where it returns.","If, at state , it is determined that local changes have been made, the state transitions to state . At state , a determination is made as to whether the synchronization token is available. If the token is available, the state transitions to state , where it returns. In this manner, if a new revision is received and changes have been made to the document, the 3-way merge is performed at state  to apply the local changes to the revision that has just been received. Any local changes are transmitted to other participants n the process outlined above with respect to .","If, at state , it is determined that the token is unavailable, the state transitions to state , where a 3-way merge is performed. The inputs to the 3-way merge are: a base line, which is the last revision received from the network; an update from the network (derived from the revision); and local changes. By performing a three-way merge on the current state of the graph, the local edits, and the received revision, an up-to-date version of the graph may be computed while still maintaining the local edits as a revision for future transmission to the other participants when the token becomes available. From state , the state transitions to state , where it returns.","Based on the foregoing, it should be appreciated that the various embodiments of the invention include a method, system, apparatus, and computer-readable medium for near real time collaboration on an electronic document. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 8-12"}]},"DETDESC":[{},{}]}
