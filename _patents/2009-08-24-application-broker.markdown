---
title: Application broker
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, provide a broker for client applications. In one aspect, a method includes providing an electronic document that has a document format compatible with a document reader application. The electronic document includes a broker application and a client application. The broker application can be loaded into a virtual machine running in the document reader application on a client device. The loaded broker application loads the client application into the virtual machine, and the loaded client application provides a graphical user interface for display. In some instances, the loaded broker application receives data from the loaded client application and stores the received data as a data set in the electronic document. In some instances, the loaded broker application retrieves a data set from the electronic document and provides the retrieved data set to the loaded client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769391&OS=08769391&RS=08769391
owner: Adobe Systems Incorporated
number: 08769391
owner_city: San Jose
owner_country: US
publication_date: 20090824
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This specification relates to a broker application for running internet applications. An internet application can run on a virtual machine provided on a client device. For example, a virtual machine can interpret SWF files that include ActionScript code, Pixel Bender code, and\/or other types of internet application code. Examples of internet application platforms that include a virtual machine are Adobe Flash and Adobe AIR. Adobe Flash can execute on a client device as a standalone application or within an installed software application (e.g., a browser application, Adobe Acrobat, etc.) to run an internet application. Adobe AIR can execute in a desktop environment (e.g., provided by an operating system) to run an internet application independent of a browser application. Some Adobe AIR applications include offline functionality that allows the internet applications to operate without access to a remote server. Internet applications can be developed, for example, using Adobe Flex programming and\/or Adobe Flash programming products.","In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of providing an electronic document that has a document format compatible with a document reader application. The electronic document includes a broker application and a client application. The broker application is loaded into a virtual machine running in the document reader application on a client device. The loaded broker application loads the client application into the virtual machine, and the loaded client application provides a graphical user interface for display. In some instances, the loaded broker application receives data from the loaded client application and stores the received data as a data set in the electronic document. In some instances, the loaded broker application retrieves a data set from the electronic document and provides the retrieved data set to the loaded client application.","In one general aspect of the subject matter described in this specification, a system includes a server configured to provide an internet application to a client device by sending an electronic document to the client device over a data network. The electronic document includes the internet application and a broker application configured to load the internet application on the client device, receive information from the loaded internet application, and store the received information in the electronic document. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.","These and other embodiments can each optionally include one or more of the following features. The data received from the loaded client application includes data in a first data format, and the stored data set comprises data in a second data format. The loaded broker application generates the data set by converting the received data to the second data format. The broker application includes one or more scripts embedded in the electronic document, and the client application includes a file attached to the electronic document. The loaded broker application identifies the client application by scanning a list of items attached to the electronic document. The broker application is adapted to store the information received from the client application in the electronic document by invoking scripts of the document reader application. The graphical user interface includes a user-interactive form for information capture, and the data received from the client application includes information captured through the interactive form. The electronic document, which includes the data set, is sent to a second client device by electronic mail. The electronic document, which includes the data set, is sent to a remote application server over a data network. The client application is an internet application client. The internet application client invokes application services provided by a server application running on a remote server. The broker application emulates one or more services of the server application. The broker application is adapted to interface with multiple different client applications. The client device includes a display device that displays the graphical user interface and\/or a user interface device that receives input from a user. The system also includes a second client device and\/or a remote application server.","Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. An internet application client can be conveniently e-mailed as an attachment to an electronic document. The internet application client can execute in an offline mode in a document reader application, allowing the internet application to operate independent of communications with a remote server. Internet application output data sets can be stored in the electronic document to which the internet application client is attached, allowing the internet application client and its data set to be stored and\/or transported together. The broker application can allow a user to store and\/or access internet application data sets locally on a client machine. The broker application can be a generic application configured to interface with multiple different client applications, so that the client applications do not have to be modified to run in the document reader environment or in an offline mode. For example, in some implementations, the client application does not include any special adaptations that allow it to run in an offline mode, but rather, the broker application facilitates running the client application in offline mode.","The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1A","b":["100","100","102","104","106","108","100","102","104"]},"The client device  includes a memory that stores an electronic document , and the client device  includes a document reader application that interprets electronic documents. In some implementations, the document reader application is the document reader application  of , discussed in more detail below. As one particular example, the electronic document can be a Portable Document Format (PDF) document and the document reader application can include Adobe Reader software, available from Adobe Systems Incorporated of San Jose, Calif., which can render graphical representations of PDF documents. Other example electronic document types include XML documents, Microsoft Word documents, and others. An electronic document (which for brevity will simply be referred to as a document) may, but need not, correspond to a file. A document may be stored in a portion of a file that holds other documents, in a single file dedicated to the document in question, or in multiple coordinated files. The client device may also includes an e-mail client application, a browser application, and\/or another type of application that allows the client device  to send e-mails to and\/or receive e-mails from the client device .","The document  includes a broker application  and a client application . As shown in , the broker application  is an embedded application, where the data stream of the document  includes the broker application code and\/or a reference to the broker application code. In some implementations, an object embedded in an electronic document is integrated in the content of the electronic document. For example, a media file embedded in an electronic document forms part of the content of the electronic document. A broker application may be wholly contained within an document, or a broker application may include information stored wholly or partially in an attached file and\/or a remotely stored file. In some implementations, the broker application  is stored as a separate file and the document  includes a reference to the separate file that includes the broker application code. As shown in , the client application  is an attached application, where the client application  code is stored outside of the data stream of the document . For example, an attachment to the document  can be data object that is separate from the document  and associated with the document  by a reference stored within the document . An attachment to a document is not part of the content of the document, but rather, an attachment is an associated object that is communicated and stored with the document. The client application  may be referenced and\/or identified in a header and\/or in the metadata of the document . A client application may alternatively or additionally include information stored wholly or partially in the data stream of a document and\/or information stored wholly or partially in a separate file.","The document  includes a client application data set . The client application data set  includes output data generated by the client application  and in some cases processed by the broker application . The client application  can generate output data formatted for interpretation by a remote server application, and the broker application  can store the generated output data in the data stream of the document . For example, the output data can be received in a format that is compatible with a document reader application, and the broker application  can invoke scripts of the document reader application to store the received data in the document . In some cases, the broker application  can convert the output data to a different format. For example, the broker application can convert the output data to a format that can be stored in the data stream of the document  and\/or a format that is compatible with the document reader application running on the client device .","In one aspect of operation, the client device  sends the document  to the client device  over the network . For example, the client devices ,  may access e-mail client applications that communicate with e-mail servers in the network , and the document  can be sent as an attachment to an e-mail message. The document may be communicated between the client devices ,  in another manner. For example, the client devices ,  may have access to one or more file servers, a file sharing network, file transfer protocol applications, and\/or the document  may be transferred by physical media (e.g., a disk, and\/or another type of removable data storage).","In one aspect of operation, the client device  and\/or the client device  runs the client application  in an offline mode, independent of communications with a remote device (e.g., the server ). For example, the client device  can include a document reader application having a virtual machine, and the broker application  can be loaded on the virtual machine to facilitate the client application  running in an offline mode. For example, the virtual machine can facilitate the client application  running in an offline mode by emulating operations performed by a server application. In some implementations, the broker application  can emulate operations performed by a server application by receiving, converting and\/or storing output data from the client application . In some implementations, the broker application  can emulate operations performed by a server application by invoking functions locally on the client device  to generate an output requested by the client application .","In a particular example, the client application  is a data capture application that prompts a user for certain types of information. For example, the data capture application can present a graphical user interface that includes data entry fields, pull-down menus, selection buttons, and\/or other graphical user interface tools. The data capture application is designed to run in an online mode, where the data capture application can access functionality provided by a server application running on a remote server. For example, the data capture application can utilize the server application by sending the server application the data captured through the graphical user interface and by requesting that the server application generate a completed output \u201cform\u201d (e.g., a PDF document) based on the data. In an offline mode, the broker application  can emulate the services of the server application by receiving the data entered by the user and invoking local scripts (e.g., scripts that are stored and interpreted locally on the client device ) that generate an output PDF document based on the received data. Additionally or alternatively, the broker application  can store received data in the document  and\/or convert the received data to a data format that can be stored in the document  to be later interpreted by the server application. For example, the data received through the graphical user interface can be stored as the data set  in the document  while the client application  is running in offline mode, and the document  can later be sent to the server  so that the server  can process the data set .",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1B","b":["150","150","150"]},"Generally, the system  can include a different number of client devices and\/or a different number of application servers, and the network  can include at least a portion of multiple different data networks. Some aspects of the system  can be implemented on an enterprise scale or a web scale, allowing the system  to accommodate client devices, network resources, and application servers for hundreds, thousands, or more users.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["200","200","202","204","202","204","206"]},"The client device  includes a memory  that stores an electronic document . The document  includes an embedded broker application , an embedded application data set , and an attached client application . The memory  can store additional electronic documents and\/or other types of data, such as an additional client application .","In some implementations, the client device  runs an operating system  that manages software and\/or hardware resources of the client device . For example, the operating system  can access and\/or control aspects of the memory , processor(s), storage device(s), input\/output device(s), network communication interface(s), and\/or other hardware components that may be included in the client device . The operating system  includes and\/or has access to printing resources, network resources, file system resources, and other resources. Also, the operating system  can load software applications and expose the lower-level resources of the client device  (e.g., printing resources, network resources, memory resources, processing resources, and\/or others) to the loaded applications. In the example shown, the operating system  has loaded a document reader application  and a virtual machine . The operating system  can coordinate the allocation of resources among multiple applications loaded on the client device . In other implementations, the client device  does not require an operating system. Example operating systems include Microsoft Windows, Mac OS, Unix, Linux, Sun OS, and others. In some implementations, the client device  is a handheld wireless device, and the operating system  may be implemented using iPhone OS, BREW, Java ME, Google Android, Palm WebOS, MS Windows Mobile, and\/or another type of application platforms for a mobile device.","The client device  can include a browser application (not shown in ). The browser application is separate from the document reader application . Generally, a browser application sends requests (e.g., a Hypertext Transfer Protocol request including a Uniform Resource Locator, or another type of request) to one or more servers, interprets response(s) (e.g., a web page, or another type of response) received from the server(s), and displays the interpreted response(s). Example browser applications include Microsoft Internet Explorer, Mozilla Firefox, Google Chrome, Apple Safari, Opera, Opera mobile, Fennec, and others. Some browser applications include virtual machines for running internet applications.","The document reader application  interprets electronic documents. In some implementations, the document reader application  is an installed software application for viewing and editing electronic documents, for example, Adobe\u00ae Reader\u00ae software (available from Adobe Systems Incorporated), Adobe\u00ae Acrobat\u00ae software (available from Adobe Systems Incorporated), and\/or others. The document reader application  can receive the document  from the memory  (e.g., using the file system resources provided by the operating system ), interpret the received document , generate a graphical representation of the document , and\/or perform other operations and invoke software functions based on information included in the document . In further implementations, the reader application  can receive the document  over a network connection. For example, the graphical representation of the document  can be presented on a display device. In some cases, the graphical representation of the document  includes a graphical user interface for invoking one or more of the broker application  or the client application . For example, the graphical representation of the document  may include a button or a hyperlink selectable by a user.","The virtual machine  can be included in an application platform. The virtual machine  can interpret source code of the client application  and provide resources to the client application  by emulating lower-level protocol layers (e.g., an operating system layer and\/or physical layers), for instance. The virtual machine  can facilitate communication between client applications running on the virtual machine  and the remote application server , for example, by utilizing the network resources of the operating system .","The virtual machine  can include one or more interpreters that interpret source code of an client application. The interpreter(s) may interpret source code having one or more formats, for example, C, C++, Javascript, ActionScript, Pixel Bender, and\/or others. In some implementations, the virtual machine  can interpret bytecode based at least in part on the source code of an application. The virtual machine  can include multiple interpreters. As an example, the virtual machine  can include a first interpreter for interpreting bytecode based on ActionScript source code and a second interpreter for interpreting bytecode based on Adobe Pixel Bender source code. In some instances, the virtual machine  can generate multimedia representations, interactive graphical user interfaces, animated graphic objects, and\/or other types of output that can provide a rich user experience.","The virtual machine  can be utilized by the document reader application , for example, based on instructions in an electronic document. One example of a virtual machine  that can operate as an application platform is the Adobe Flash platform. For example, a document reader application (e.g., Adobe Acrobat, and others) may include an embedded application platform. As shown in , a virtual machine  may also be loaded directly by the operating system . As such, the virtual machine  can operate independent of a web browser application. One example of a virtual machine that can be loaded by an operating system is the Adobe AIR platform. Analogous to the virtual machine , the virtual machine  can interpret source code of client applications and provide resources to the client applications by emulating lower-level protocol layers.","A virtual machine can load multiple client applications, and in some cases, a loaded client application can load another client application onto the virtual machine by loading the other client application onto itself. For example, as shown in , the broker application  has loaded the client application  onto itself. An client application can include one or more SWF files and\/or other types of files that can be interpreted by the virtual machine. Example client applications include Adobe Form Guides (a data capture application), Adobe Buzzword (a web-based word processor), Adobe ConnectNow (a web-based meeting software), Acrobat.com Tables (a web-based spreadsheet), Acrobat.com Presentations (a web-based presentation approach), and others.","Either or both of the client applicants  and  can be internet application clients. In some cases, basic functionality of an internet application client makes substantial use of both local execution of instructions on the client device and communications with an external server over the Internet or another type of data network. For example, an internet application client may rely at least partially on the application servers  for data storage, data versioning, and\/or data update distribution. As another example, an internet application client may utilize the application server  for functionality associated with data access control, data encryption, data authentication, presence data distribution, multi-user chat, video conferencing, multi-user collaboration, and\/or other functions. Other aspects of an internet application client may be adapted to function independent of the external server, relying only on local execution of instructions on the client device. For example, an internet application client typically generates a user interface based on local execution of instructions on the client device. As another example, an internet application client can execute instructions locally to edit the content of an internet application data set, to interpret internet application data sets, to generate new internet application data sets, and\/or to perform other functions. An internet application client can provide a rich user experience, for example, by providing a dynamically updated and\/or animated graphical user interface.","The client applications  and  can generate, modify, and\/or interpret application data sets and\/or application data objects. The client applications  and  can provide a graphical representation of interpreted data. An application data set or application data object can be formatted (e.g., according to a schema) for a particular client application, and the client application can include instructions for interpreting the data set or data object. For example, the application can be a word processing application, and the application data object can be a word processing document formatted for the word processing application. As another example, the application can be a data capture application that provides a rich graphical user interface for data entry, and the application data set can include the information captured through the rich graphical user interface. The data capture application can interpret the application data set and generate an output electronic document representing the captured data. The application data set and\/or the application data object can be transmitted to an application server for processing, storage, modification, and\/or distribution.","In the example shown in , an application data set  is formatted for the client application  running on the virtual machine . The client application  can retrieve the application data set  from the application server  over the network , update and\/or modify the application data set , send the application data set  to the application server  over the network , and\/or perform other operations with respect to the application data set .","In the example shown in , an application data set  is formatted for the client application  running on the virtual machine . In some instances, the client application  can retrieve the application data set  from the application server  over the network , update and\/or modify the application data set , send the application data set  to the application server  over the network , and\/or perform other operations with respect to the application data set . In some instances (such as in the example shown in ), the broker application  receives the application data set  from the client application  and stores the application data set  in the electronic document . The broker application  can also retrieve the application data set  from document  to allow the client application  to load the application data set . In this manner, the client application  can run in an offline mode, receiving support from the broker application .","The application data set  can include data stored in an extensible markup language (XML) format, XML Forms Architecture (XFA) format, or in another data format. The data set  can include data generated by the client application . The data set may be stored in the document  using scripts defined in the document  and\/or functions of the document reader application . For example, the broker application  can invoke scripts in the document  and\/or functionality provided by the document reader application  to store and\/or convert data received from the client application . In some implementations, the broker application  can store the data set  in the document  without special or extra processing by a server device or a client device.","In an example implementation, the broker application  is an embedded SWF file, and the document  is an XFA-based PDF document that includes one or more scripts that enable communication between the PDF document and the broker application . The scripts in the document  can expose functions (e.g., functions of the reader application , and\/or other functions) that the broker application  calls in order to get and\/or put attachments, to get and\/or put data sets, to submit data sets, to open and\/or save data sets, and\/or to perform other operations. The broker application  can allow the data storage model for client application  to be schematically separate from the manner in which data is presented by the client application . The client application  can generate an XML data set based on an XML schema, an XML data set compatible with XFA, and\/or another type of data set. The data set  stored in the document  can include an XML data set based on an XML schema, an XML data set compatible with XFA, and\/or another type of data set. As an alternative, the data set  can be stored as an attachment to the document  which may allow more generic access to the data set  in some implementations. The broker application  can be configured to handle PDF javascript.","The format of the data set  stored in the document  may depend on what systems are expected to process the data set, for example, in order to leverage existing systems architecture. Data sets having XFA data format and\/or XML data format can be stored in a PDF document and\/or can be interpreted using Adobe LiveCycle software. Thus, storing the data in the XFA data format can facilitate further processing by the document reader application  and\/or a server application. Storing data as an XFA data set in the document  may allow the document  to pass certification tests. In some cases, for example in a data capture application, an output PDF document can be generated based on an XFA data set. As such, the XFA data format may facilitate generation of an output PDF document that has both web and print accessibility without requiring any changes to the document source.","In the example shown in , both client applications ,  are adapted to access the functionality of a server application running on a remote server, such as the application server . As shown in , the client application  runs in an online mode and accesses application services provided by the application server, and the client application  runs in an offline mode (for example, during a time when the client device does not have access to the network  and\/or to the application server ) independent of a remote server. For example, whereas the client application  running in online mode retrieves an application data set  from the application server , the client application  running in offline mode retrieves an application data set  from the document  stored in the local memory . In the example shown, the client application  does not include any special adaptations that allow it to run in an offline mode, but rather, the broker application  facilitates running the client application  in offline mode. For example, the broker application  can facilitate storing and\/or retrieving data sets stored in the document .","The broker application  embedded in the document  can be loaded onto the virtual machine  based on instructions included in the document  and\/or based on input received from a user (e.g., a user selection of a hyperlink, a button, or another type of user interface). The document  can be a bootstrap document that defines functions for loading the broker application . The broker application  can be an SWF file or another type of file. The broker application  can include source code formatted as C, C++, ActionScript, javascript and\/or other types of source code.","The broker application  embedded in the document  can detect an client application attached to the document . For example, the broker application  can scan a list of attachments (e.g., which may be included in the metadata and\/or in another portion of the document ) and identify one or more of the attachments as client applications. The client applications may be identified by the broker application  based at least in part on a file type, a file extension, a file name, and\/or other types of identifying information included in the attached application and\/or in the document . The broker application  may execute a SWF loader script to identify and\/or load an attached SWF file. In some implementations, the broker  can automatically load the first client application identified in the attachments to the document .","The broker application  embedded in the document  can facilitate interactions between the client application  and one or more of the virtual machine , the document reader application , the application server , and\/or the document . For example, the broker application  can utilize the resources of the document reader application  to interpret and\/or edit the document  based on data received from the client application , the broker application  can access the resources of the virtual machine  to interpret source code and\/or bytecode of the client application , the broker application  can utilize the resources of the operating system  to allow the client application  to communicate over the network , and\/or the broker application  can utilize other resources.","In some examples, the document  is a generic bootstrap PDF document that includes scripts that supports operation of any one of multiple different client applications (any of which may be attached to the document ), and the broker application  can invoke the scripts to execute the supported operations. For example, the bootstrap PDF may define scripts (e.g., functions, commands, etc.) that support interaction with multiple application programming interfaces (APIs). As a particular example, the bootstrap PDF may include scripts that support interaction with Adobe Reader's javascript API. The broker application  can invoke these scripts to broker interactions between the client application  and the document reader application  (i.e., in this example, the Adobe Reader or Adobe Acrobat applications). As another particular example, the bootstrap PDF may include scripts that support interaction with XFA javascript APIs. The broker application  can invoke these scripts to perform operations (e.g., generate, retrieve, modify, etc.) on XFA Data sets. The operations supported by the embedded scripts may include opening, printing, saving, e-mailing, and\/or other operations on attachments to the document . The operations supported by the embedded scripts may include exporting data sets, importing data set, submitting data sets and\/or other operations based on an application data set. The operations supported by the embedded scripts can be maintained using the Adobe LiveCycle Design tool. The generic bootstrap PDF can be renamed once attachments have been added, making it an internet application PDF.","In an example implementation, the client application  is a data-capture application that provides a dynamic graphical user interface that prompts a user to enter certain types of data. The broker application  can receive that data entered in the graphical user interface by a user and store the data in the document . In some implementations, the broker application  converts the data received from the client application  to a different data format, such as an XFA data set. In some implementations, the broker application  stores the data received from the client application  in the same data format in which it is received. The example application  can provide a user interface (e.g., a \u201cprint\u201d button, or another type of interface) that allows the user to request that captured data be transferred to an output documents (e.g., a completed PDF form, or another type of output document). When such a request is received by the client application , the broker application  facilitates generation of the output document and\/or passing data to the output document. When the output document is generated based on one or more XFA data sets, the output document can be dynamically created based on the data provided, or the output document may be a static document that receives the provided data. The broker application  may also facilitate importing data, exporting data, sending and\/or receiving data from a remote server application, and other operations.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 1A","FIG. 2"],"b":["300","300","122","214","300"]},"At , a document reader application running on a client device obtains an electronic document having an embedded broker application and an attached client application. The electronic document can be provided to the client device, for example, by a remote server and\/or from another client device through a data network, through a storage device, and\/or in another manner. The client application provides a graphical user interface and generates output data in a first data format. For example, the graphical user interface may include a graphical user interface having a user-interactive form for capturing information, and the output data can include information captured through the interactive form. The client application can be an internet application configured to invoke application services provided by a remote application server, and the broker application can emulate one or more services of the remote application server.","The broker can store data received from the client application in the document. The broker can also retrieve data from the document and provide the retrieved data to the client application. In some implementations, the broker application can invoke one or more functions to convert data between data formats. The broker application can be adapted to interface with multiple different client applications. As such, many different client applications can be attached to the electronic document, and the broker application may be compatible with any and\/or all of the attached client applications. Consequently, neither the electronic document nor the embedded broker application need to be modified to interface with any particular client application that can be attached to the electronic document.","At , a virtual machine running in the document reader application loads the broker application. At , the loaded broker application loads the client application on the virtual machine. In some cases, before loading the client application, the loaded broker application identifies the client application by scanning a list of items attached to the electronic document. The broker application and the client application can both be SWF files, and the broker application can load the client application onto itself. Once loaded, the client application provides a graphical user interface for display. For example, the graphical user interface can displayed to a user on a display device. At , the client application receives data from the user through the graphical user interface and generates output data.","At , the broker application stores the output data from the client application in the electronic document. In some cases, the broker application can receive output data from the loaded client application and store the received data in the document. In some cases, the received output data has the first data format, and the broker application can convert the received output data to the second data format for storage in the electronic document. The broker application can store the data in the electronic document as a document object and\/or a data set. The broker application can retrieve the stored data set and\/or another stored data set from the electronic document and provide the data set to the client application. In some implementations, the process  further includes sending the electronic to a second client device by electronic mail and\/or sending the electronic document to a remote application server over a data network. The electronic document sent to the remote client device and\/or the remote server device may include the output data set.","The techniques described herein may be implemented by a computing device configured to provide the functionality described. In various embodiments, a computing device may be any of various types of devices, including, but not limited to, a personal computer system, desktop computer, laptop, notebook, or netbook computer, mainframe computer system, handheld computer, workstation, network computer, application server, storage device, a consumer electronics device such as a camera, camcorder, set top box, mobile device, video game console, handheld video game device, a peripheral device such as a switch, modem, router, or in general any type of computing or electronic device.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 1A","FIG. 1A"],"b":["400","400","102","106","400","400"]},"The example device  includes a processor , a random access memory (RAM) , a storage device  (e.g., a writable read-only memory (ROM) and\/or another type of storage device), and an input\/output (I\/O) controller  coupled by a processor (CPU) bus . The system  can be preprogrammed and\/or it can be programmed (and reprogrammed) by loading a program from another source (e.g., from a CD-ROM, from another computer device through a data network, and\/or in another manner). The I\/O controller  is coupled to input\/output devices ,  and to a network . The input\/output devices shown include a monitor  and a printer . Additional, fewer, and\/or different input\/output devices may be included. The devices ,  receive and transmit data in analog or digital form over communication links such as a serial link, wireless link, parallel link, and\/or another type of link. The network  can include any type of data communication network. For example, the network  can include a wireless and\/or a wired network, a Local Area Network (LAN), a Wide Area Network (WAN), a private network, a public network (such as the Internet), a WiFi network, and\/or another type of data communication network.","The memory  and\/or the storage device  can store instructions (e.g., computer code) associated with an operating system, computer applications, and\/or other resources. The memory  and\/or the storage device  can also store application data and data objects that can be interpreted by one or more applications and\/or virtual machines running on the device . The processor  can execute instructions, for example, to generate output data based on data inputs. As one particular example, the processor  can generate a data set for storage in an electronic document (e.g., a PDF document) based on an internet application interpreting a data object. In examples where the device  is a client device running an internet application client, the input\/output controller  can send messages from the internet application client to a remote server through the network , and the input\/output controller  can receive responses from the remote server and\/or from another device.","Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).","The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.","The term \u201cdata processing apparatus\u201d encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.","While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
