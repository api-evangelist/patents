---
title: Method and apparatus for regulating access to a computer via a computer network
abstract: A method and apparatus for regulating access to a computer via a computer network is provided, in which a local computer has an application program, a proxy program, and a firewall program. The proxy program monitors the communication between the application program and the computer network, and is able to detect when the application program requires a remote computer to initiate a new connection to the local computer. Upon detecting such a need, the proxy program changes the settings of the firewall program so that the remote computer is able to establish the new connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07822970&OS=07822970&RS=07822970
owner: Microsoft Corporation
number: 07822970
owner_city: Redmond
owner_country: US
publication_date: 20011024
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The invention relates generally to protecting a computer from unauthorized network access and, more particularly, to the use of proxies, firewalls, and their equivalents to regulate access to a computer via a computer network.","With the increasing availability of broadband internet access, home computer users are starting to encounter many of the same security issues that corporate networks have faced for years. In particular, since broadband connections, such as DSL and cable, allow users to be connected to the Internet for extended periods of time, home users now have to consider how to prevent would-be hackers from gaining access to their computers. The most common solution to this problem is to install a firewall program. A firewall program is a type of security program that filters outbound IP and TCP communication packets before they leave the computer and travel out to a network, such as the Internet, and inbound communication packets received from the network. A firewall generally operates according its settings, which may be implemented as a set of rules. An example of a rule that might be used by a firewall is \u201cBlock all inbound packets coming from network card 001 that originate from IP address 10.0.0.1 and TCP port 3000\u201d.","To maximize security, the settings of consumer-oriented firewalls are often configured so as to block all inbound, unsolicited communication packets from the Internet. While this helps to prevent unauthorized entries by hackers, it also creates a problem for those application program that require a \u201ccall back\u201d from another computer in order to establish a communication session. An example of such an application program is a File Transfer Protocol (FTP) client. For an FTP client program to retrieve files over the Internet FTP \u201cPORT\u201d command, ask the FTP host to initiate or \u201ccall back\u201d the FTP client on a second TCP port. If the FTP client is operating behind a typically-configured firewall, the FTP host's attempts to connect back to the FTP client on the second TCP port will be blocked by the firewall, the attempt by the FTP client to transfer files will fail.","Some firewalls attempt to address this problem by maintaining data on where outbound TCP and IP packets are going and what kind of packets they are. However, because most firewalls operate down at the TCP and IP layers of the network communication stack, they have little or no knowledge about what the application programs are trying to do when they send and receive messages.","In accordance with the foregoing, a method and apparatus for regulating access to a computer via a computer network is provided. According to an embodiment of invention, a local computer has an application program, a proxy program, and a security program. The proxy program monitors the communication between the application program and the computer network, and is able to detect when the application program requires a remote computer to initiate a new connection to the local computer. Upon detecting such a need, the proxy program changes the settings of the security program so that the remote computer is able to establish the new connection. The invention allows programs such as a File Transfer Protocol (FTP) program to function while still maintaining a reasonable degree of security.","There are a variety of possible implementations for the security program, including a firewall program. According to various embodiments, the security program operates according to a set of rules, and changing the settings of the security program involves adding a new rule to a set of rules that governs the operation of the security program. For example, when the proxy program detects that a new inbound connection is required, it adds a new rule that specifies that a new inbound connection is to be permitted.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying figures.","The invention is generally directed to a method and apparatus for regulating access to a computer over a computer network. According to the invention, an application program running on a local computer communicates with a network via a proxy program residing on the local computer. The proxy program acts as an intermediary between the application program and a firewall program that also resides on the local computer. The proxy program is able to determine when the application requires an inbound connection originating from another computer on the network, and to adjust the settings of the firewall program so as to allow the inbound connection. The invention allows protocols such as FTP to function correctly while still maintaining a high level of security.","Although it is not required, the present invention may be implemented by program modules that are executed by a computer. Generally, program modules include routines, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. The term \u201cprogram\u201d as used herein may connote a single program module or multiple program modules acting in concert. The invention may be implemented on a variety of types of computers, including personal computers (PCs), handheld devices, multi-processor systems, microprocessor-based programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The invention may also be employed in distributed computing environments, where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, modules may be located in both local and remote memory storage devices.","An example of a networked environment in which this system may be used will now be described with reference to . The example network includes several computers  communicating with one another over a network , represented by a cloud. Network  may include many well-known components, such as routers, gateways, hubs, etc. and may allow the computers  to communicate via wired and\/or wireless media.","Referring to , an example of a basic configuration for a computer on which the system described herein may be implemented is shown. In its most basic configuration, the computer  typically includes at least one processing unit  and memory . Depending on the exact configuration and type of the computer , the memory  may be volatile (such as RAM), non-volatile (such as ROM or flash memory) or some combination of the two. This most basic configuration is illustrated in  by dashed line . Additionally, the computer may also have additional features\/functionality. For example, computer  may also include additional storage (removable and\/or non-removable) including, but not limited to, magnetic or optical disks or tape. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to stored the desired information and which can be accessed by the computer . Any such computer storage media may be part of computer .","Computer  may also contain communications connections that allow the device to communicate with other devices. A communication connection is an example of a communication medium. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","Computer  may also have input devices such as a keyboard, mouse, pen, voice input device, touch input device, etc. Output devices such as a display , speakers, a printer, etc. may also be included. All these devices are well known in the art and need not be discussed at length here.","An example of how access to a local computer is regulated according to an embodiment of the invention will now be described. Referring to , a local computer, generally labeled  is shown. The local computer  is communicatively linked to a network , which may be embodied as described in conjunction with the network . To help illustrate the operation of the invention, a remote computer  is also depicted in  as being communicatively linked to the network . The terms \u201clocal\u201d and \u201cremote\u201d are not meant to connote any particular distance that exists between the local computer  and remote computer , but are only meant to indicate that they are recognized as different nodes on the network . The remote computer  may be any physical distance from the local computer .","The local computer  includes a network adapter  for providing the physical link to the network . Both the local computer  and the remote computer  may have many or all of the elements described in conjunction with . The programs running on the computer  include an application program , a proxy program , a TCP\/IP stack , a firewall program , a socket layer , and one or more network drivers . The application program  may be implemented as any kind of program that sends and\/or receives messages over the network . Furthermore, the application program  may act as a server process, client process or as a peer process. The proxy program  acts as an intermediary between the application program  and the network . A dashed line helps illustrate an abstract boundary between the user mode components of the various programs and the kernel mode components that reside on the local computer .","Referring again to , the application program  communicates with the TCP\/IP stack  via a socket  defined in the socket layer . The proxy program  communicates with the TCP\/IP stack  via sockets  and , also defined in the socket layer . The proxy program  sends messages generated by the application program  to the network  in a way that is transparent to the application program . Thus, the application program  simply sends messages to the socket  as if they were going directly to the network .","The firewall program  includes a firewall engine  and a rule module  that defines a set of rules that the firewall engine uses when determining what to do with inbound and outbound communication packets. The firewall  acts to filter communication packets, such as IP packets, as they travel through the TCP\/IP stack . More specifically, all IP packets that originate from the application program , the proxy program , or that are received by the computer  via the network  are filtered by the firewall . The proxy program  calls functions of the firewall program  via an application programming interface (API) .","The firewall engine  may be implemented in a variety of ways. In one embodiment, the firewall engine  is a Network Address Translation (NAT) module. When implemented as a NAT module, the firewall engine  processes each IP packet it receives by examining the IP headers and the TCP or UDP headers to determine the source and destination IP address and the source and destination TCP or UDP ports. It then looks in the rule module  to locate a rule governing where the packet should be forwarded. The firewall engine  then edits the TCP or UDP headers and the IP headers to give the packet the destination TCP or UDP port and the destination IP address specified by the located rule.","The TCP\/IP stack  includes programs for formatting messages into IP packets. As is well-known, formatting messages into IP packets includes dividing messages into smaller parts and adding the appropriate headers, such as TCP or UDP headers and IP headers. The TCP\/IP stack  also performs the reverse function of reassembling messages that are received as IP packets. The network driver layer  includes programs for assembling IP packets into frames, such as Ethernet frames, for transmission out to the network , and for extracting individual IP packets from frames received from the network . Finally, the network adapter  is a piece of hardware that actually transmits the frames received from the network driver layer  out to the network , and passes frames received from the network  to the network driver layer . The network adapter  may be implemented in a variety of ways, including an Ethernet card, and a wireless network card.","Referring again to , an example of how data flows according to an embodiment of the invention will now be described. In this example, the application program  attempts to send a message to the computer , and the message includes a request for the computer  to initiate communication back to the application program . It is assumed that the rule module  initially includes a first rule  that all packets received from the application program  are to be forwarded to the proxy program . First, the application program  forms the message and passes it down through the socket . The message is then passed through the TCP\/IP stack , and to the firewall program  (arrow A). The firewall engine  sends the message through the TCP\/IP stack , the socket  and to the proxy program  according to the first rule  (arrow B). The proxy program  analyzes the message and determines that the application program  is requesting that some process running on the remote computer  initiate contact with the application program , and that the request is proper. Based on this determination, the proxy program  adds two new rules to the rule module  via the API  (arrow C). The first new rule specifies that firewall engine  is to allow packets originating from the remote computer  and destined for the application program  are to be permitted to pass through. The second new rule specifies that packets originating from the proxy program  and destined for the remote computer  are to be sent to the remote computer . This prevents the firewall program  from bouncing the message back to the proxy program . The proxy program  then sends the message through the TCP\/IP stack  via the socket  (arrow D). The message reaches the firewall program  in packetized form. The firewall engine  processes the packetized message according to the set of rules in the rule module . Based on the second new rule, the firewall engine  sends the message through the TCP\/IP stack , the network driver layer , the network adapter  and out to the network  (arrow E). The message eventually reaches the remote computer .","The remote computer  then responds to the message by attempting to connect back to the application program . Specifically, the remote computer  sends a connect message to the computer  over the network  (arrow F). The message is passed through the network adapter , up the network driver layer , through the TCP\/IP stack  and to the firewall program . The firewall engine  then processes the packetized message according to the first new rule. Specifically, the firewall engine  sends the message to the application program  (arrow G). After this point, the application program and the remote computer  can communicate normally. After the application program  and the remote computer  are finished communicating, the first and second new rules expires, and the firewall program  returns to its original state.","A more detailed example of how access to a computer is regulated in accordance with an embodiment of the invention will now be described with reference to . In this example, the application program  includes an FTP client, and the proxy program  includes an FTP proxy. The firewall program  also includes a connection module  that keeps track of the active connections. For each active connection, the connection module has a corresponding connection entry. When determining whether to permit or bock packets, the firewall engine  first refers to the connection module  to determine if the packets correspond to any active connection entry. If it does, then the packet is translated as specified by the corresponding connection entry and is permitted to pass. If not, then the firewall engine  refers to the rule module  to determine whether a rule applies to the packets. If a rule is found to apply, then the firewall engine  processes the packets according to the rule. In their initial state, shown in , the application program  communicates with the TCP\/IP stack  via a socket  defined for IP address 10.0.0.1, TCP port 3000 (10.0.0.1\/3000). The proxy program  communicates with the TCP\/IP stack  via a first socket  defined for address 10.0.0.1\/8000, and via a second socket  defined for address 10.0.0.1\/8001. The rule module  includes a rule  that indicates to the firewall engine  that all IP packets, regardless of their source IP address and source port, that have port 21 as their destination port are to be forwarded to address 10.0.0.1\/8000. As shown in , this rule uses the asterisk symbol as a wildcard.","Referring to , the process begins when a user (not shown) at the computer  enters the command \u201cFTP 10.0.0.5.\u201d The application program  responds by sending a request for a connection to address 10.0.0.5\/21 to the TCP\/IP stack  via the socket  (arrow A). Port 21 is a well-known port used by FTP servers to receive messages. The TCP\/IP stack  responds by generating a SYN packet having a source address of 10.0.0.1\/3000 and a destination address of 10.0.0.5\/21 (arrow B). The SYN packet is then sent to the firewall program . The firewall engine  refers to the rule module  to determine if there are any rules to use in processing the SYN packet. The firewall engine  finds the rule , and redirects the SYN packet to address 10.0.0.1\/8000 (arrow C). The firewall engine  then creates a connection entry  in the connection module  to indicate that a connection is being set up between 10.0.0.1\/3000 and 10.0.0.1\/8000. The TCP\/IP stack  responds by generating a SYN\/ACK packet having a source address of 10.0.0.1\/8000 and a destination address of 10.0.0.1\/3000 (arrow D). The SYN\/ACK packet is then sent to the firewall program . The firewall engine  then redirects the SYN\/ACK packet to address 10.0.0.1\/3000 according to the first connection entry  (arrow E). The TCP\/IP stack  responds by generating an ACK packet having a source address of 10.0.0.1\/3000 and a destination address of 10.0.0.5\/21 and sending the ACK packet to the firewall program  (arrow F). The firewall engine  redirects the ACK packet to address 10.0.0.1\/3000 according to the first connection entry  (arrow G). At this point, the TCP handshake is complete and the proxy program  accepts the connection.","The proxy program then makes a function call to the socket layer  for the purpose of finding out the source IP address and source port of the connect attempt. The proxy program  then calls the firewall program  to find out the original destination IP address and destination port of the connection attempt. The socket layer informs the proxy program  that the original source address is 10.0.0.1\/3000, and the firewall program  informs the proxy program  that the original destination address is 10.0.0.5\/21. The proxy program  responds by making a call to the firewall program  to have a new, second rule  entered into the rule module . The second rule  specifies that any packet having a source address of 10.0.0.1\/8001 and a destination address of 10.0.0.5\/21 is to be redirected to address 10.0.0.5\/21. In effect, the proxy program  tells the firewall program  to simply pass such packets to their original destination without modification. Because the second rule  is more specific than the first rule , the second rule  takes precedence over the first rule .","As shown in , the proxy program  then sends a request for a connection to address 10.0.0.5\/21 to the TCP\/IP stack  via the socket  (arrow I). The TCP\/IP layer  responds by generating a SYN packet having a source address of 10.0.0.1\/8001 and a destination address of 10.0.0.5\/21 (arrow J). The SYN packet reaches the firewall program . The firewall engine  processes the SYN packet by creating a second connection entry  in the connection module  to indicate that a connection is being established between 10.0.0.1\/8001 and IP address 10.0.0.5\/21. The firewall engine  then refers to its rule module  to determine if there are any rules to use in processing the SYN packet. The firewall engine  finds the second rule , and \u201credirects\u201d the SYN packet to remote computer  via the TCP\/IP stack  (arrow K).","Referring again to , the remote computer  responds with a SYN\/ACK packet (arrow L). The SYN\/ACK packet reaches the firewall program  via the TCP\/IP stack . The firewall engine  refers to the connection module  to determine whether there are any entries that apply to the SYN\/ACK packet. The firewall engine  finds the second connection entry  and, accordingly, allows the SYN\/ACK packet to proceed to address 10.0.0.1\/8001 (arrow M). The SYN\/ACK packet reaches the TCP\/IP stack . The TCP\/IP stack  responds by generating an ACK packet having a source IP address of 10.0.0.1\/8001 and a destination IP address of 10.0.0.5\/21, and passing the packet to the firewall program  (arrow N). The firewall engine  refers to the connection module  to determine whether there are any entries that apply to the ACK packet. The firewall engine  finds the second connection entry  and, accordingly, sends the ACK packet to the remote computer  (arrow O). At this point, this TCP\/IP handshaking between the remote computer  and the TCP\/IP layer  of the local computer  is complete.","Referring to , it is now assumed that the user enters the FTP command DIR at the computer . This command indicates that the user wishes to obtain a file directory listing from the remote computer . As is standard in FTP communication, the application program  needs the remote computer  to initiate communication back local to the computer  at a port designated by the application program  for the purpose of transmitting the directory listing to the local computer. The application program  therefore generates a PORT command and sends it to the TCP\/IP stack  via the first socket  (arrow P). The PORT command includes the IP address and TCP port number that the remote computer  is to use in contacting the application program . In this example, the application program  has chosen port number 8002. The application program  also opens a second socket  for receiving data from the remote computer  at IP address 10.0.0.1, port 8002 (10.0.0.1\/8002).","In response to receiving the PORT command from the application program , the TCP\/IP stack  wraps the PORT command into an one or more packets having a source address of 10.0.0.1\/3000 and a destination address of 10.0.0.5\/21 and sends the packets to the firewall program  (arrow Q). The firewall engine  redirects the packets to the address 10.0.0.1\/8000 in accordance with the first entry  of the connection module  (arrow R). The TCP\/IP stack  sends the contents of the packets, which include the PORT command, to the proxy program  via the socket  (arrow S). The proxy program  responds by making a call to the firewall program  to have a new, third rule  entered into the rule module . The third rule  specifies that any packet having a source IP address of 10.0.0.5 (regardless of the source port), a destination IP address of 10.0.0.1 and a destination port 8002 is to be \u201credirected\u201d to its original destination address and port. In effect, the proxy program  tells the firewall program  to simply pass such packets to their original destination without modification. The proxy program  then generates a PORT command that is identical to the one it received from the application program , and sends it to the TCP\/IP stack  via the socket  (arrow T). The TCP\/IP stack  wraps the PORT command into packets having a source address of 10.0.0.1\/8001 and a destination address of 10.0.0.5\/21 (arrow U). The packets are then sent to the remote computer  via the TCP\/IP stack  (arrow V).","Referring to , the remote computer  responds to the PORT command by attempting to connect to the local computer  at address 10.0.0.1\/8002. Accordingly, the remote computer  sends a SYN packet to the computer , having a source address of 10.0.0.5, port 20 (10.0.0.5\/20) and a destination address of 10.0.0.1, port 8002 (10.0.0.1\/8002) (arrow W). Port 20 is often used by FTP server programs as a port from which to send data, though other ports may also be used for this purpose. The SYN packet reaches the firewall program  via the TCP\/IP stack . The firewall engine  then processes the packet by referring to the connection module  to determine whether there is a current connection entry for handling this packet. Finding none, the firewall engine  refers to the rule module  to determine if there are any rules defined for handling this packet. The firewall engine  finds that the third rule  applies, and \u201credirects\u201d the SYN packet accordingly. In effect, the firewall engine  allows the SYN packet to pass unaltered to the TCP\/IP stack  (arrow X). The firewall engine  also creates a third connection entry  in the connection module  that indicates the existence of an active connection between IP address 10.0.0.5, port 20 (10.0.0.5\/20) and IP address 10.0.0.1, port 8002 (10.0.0.1\/8002).","The TCP\/IP stack  responds to the SYN packet by generating a SYN\/ACK packet having a source address of 10.0.0.1\/8002 and a destination address of 10.0.0.5\/20 (arrow Y). The SYN\/ACK packet reaches the firewall program , and processed by the firewall engine . The firewall engine  checks the connection module  and finds the third connection entry , indicating that there is a corresponding, active connection. The firewall engine  then relays the SYN\/ACK packet to the remote computer  via the TCP\/IP layer  (arrow Z). The remote computer  responds to the SYN\/ACK packet by transmitting an ACK packet to the local computer  (arrow AA). The ACK packet goes through the TCP\/IP layer  and reaches the firewall program . The firewall engine  sends the ACK packet onto the TCP\/IP layer  according to the third connection entry  of the connection module . From this point on, the firewall engine  allows communication between the remote computer  and the application program  based on the entry .","It can thus be seen that a new a useful method and apparatus for regulating access to a computer via a computer network has been provided. In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiments described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiments shown in software may be implemented in hardware and vice versa or that the illustrated embodiments can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 4-8"}]},"DETDESC":[{},{}]}
