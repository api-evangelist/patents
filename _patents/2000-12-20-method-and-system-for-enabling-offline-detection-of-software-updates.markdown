---
title: Method and system for enabling offline detection of software updates
abstract: A method and system that facilitates automatic software updates from an online source such as the Internet, wherein a connection to determine whether an update (e.g., a driver or software component) is available online is no longer necessary during detection time. Information stored for updates corresponding to driver and other software component detection is locally cached, whereby update information is available when no connection exists, eliminating potentially wasted connections and being particularly advantageous if occurring before the connection can be made. When a device is installed or software components are detected, instead of requiring a connection to enable updates, the cached information is evaluated to determine whether the update is available online. If so, the update is made when a connection is made and otherwise desired by the user. The user may defer making the connection, and the update may happen automatically and/or in the background on the next connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07574481&OS=07574481&RS=07574481
owner: Microsoft Corporation
number: 07574481
owner_city: Redmond
owner_country: US
publication_date: 20001220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","EXEMPLARY OPERATING ENVIRONMENT","OFFLINE DETECTION OF SOFTWARE UPDATES"],"p":["The present invention is generally directed to computer systems, and more particularly to updating software modules such as device drivers and software components on a computer system.","Computer users running contemporary operating systems are able to download software updates, such as device drivers for hardware devices and updated software components, from the Internet. For example, when a user installs a new hardware device on the computer, the driver on the local machine can be updated to a more recent version if that device has an updated driver available on a website. Similarly, if an operating system or application has an updated set of one or more software components available for it, that set can be downloaded to update the operating system or application.","However, while such Internet-based updating of drivers and other software components makes it far easier for a user to obtain updates, this model depends on users being connected to the Internet (online) at the time of detection. While it is sometimes possible to prompt an offline user to make a connection in order to look for a possible update, or to automatically initiate a connection on behalf of the user, such an act is an interruption to the user. Moreover, the connection may be wasted, such as when the connection is made but no updated device driver or software component is found online. As can be appreciated, unnecessarily interrupting a user, whether by prompting the user with an option to make an Internet connection, or by forcing the connection, results in a frustrating user experience. The user experience becomes even worse when, after the connection is made, it is determined that no online update exists and thus the interruption was pointless. An unwanted or unnecessary connection also unnecessarily wastes server resources.","Moreover, even when an update may be available and wanted, it may not be possible to make a connection. For example, certain operating system components need to be installed prior to making some types of connections. For example, if device detection takes place before loading of these needed operating system components, (as it does during normal booting operations), the device will be detected but it will not be possible to make the connection, and any desired driver updates will need to be remembered by the user and manually downloaded when the user later connects.","Briefly, the present invention provides a method and system wherein a connection is no longer necessary during the time of detection to determine whether a software update (e.g., a driver or software component) is available online. To this end, once the computer system has previously been connected to the Internet, (or the like, such as an appropriate set of servers in an Intranet), the information stored for driver and other software component detection is locally cached, whereby the update information is available when no connection exists. The offline information may be used to determine a user's desired updates, which are then automatically handled when the user does make a connection.","As a result of the cached update information in the offline cache, no new connection needs to be established when a device is installed, which eliminates potentially wasted connections, and is also particularly advantageous if the device is being installed before the connection can be made. Instead of requiring a connection to enable the update, the user makes a connection only when applicable updates are available, and only when and if otherwise desired. For example, the user is prompted to make a connection to the Internet only after there has been local confirmation that the desired update is indeed available on the server, (wherein as used herein and throughout the application, the term \u201cdesired\u201d with respect to an update generally refers to the update being more appropriate for the user than any other update that was found), and that the user has indicated that the update should be installed. The user may defer making the connection, and the update can happen automatically and\/or in the background on the next connection. If the machine state changes before a connection is made so that an update is no longer applicable, the offline cache can be used to give the user correct information regarding the status of updates without requiring the user to reestablish connectivity.","A special cache may be used for storing the update information offline, so that background downloading is possible, and the special cache content is not subject to expiration, flushing and\/or size requirements that may render the update information unavailable.","The present invention works with both hardware-related updates, e.g., device drivers, and software-related updates, e.g., a component or package of components such as an operating system component update. In one implementation, hardware information for hardware-related updates is efficiently tracked by the use of a bitmask and set of files that contain information about hardware devices. In this implementation, the appropriate bit in the bitmask is determined by a hash of the hardware device identifier (hardware ID). If the corresponding bit is set, a file exists that may include information about an update to the particular hardware device. The information may be organized into records that identify things such as whether an online driver exists for the device, and if so, what its version number is, so that other detected versions of that driver (e.g., on a local hard drive) can be compared against the online version to determine which is the most-recent version and\/or the \u201cbest match.\u201d For example, when no driver is installed, there may be a local driver available, but it may be a \u201cgeneric\u201d driver (e.g. a VGA Display driver). The online driver may not be more recent, but may be more specific, (e.g. something specifically provided by the manufacturer of the particular device for that device), and therefore may be determined to be a better match. In the case of software updates (i.e., non-driver updates), the most-recent update is essentially always used.","For software-related components, a component information setup file is requested from the server and locally cached. Note that for privacy reasons, the particular component information setup file that is requested may be determined at the client-side, based on platform, locale, machine specifics and so forth. The cached component information setup file is accessed and maintained by local automatic update software to determine what software components are already installed, cannot be installed (e.g., due to conflicts) and\/or are dependent upon detection of an existing installation of other software. Based on the data in the component information setup file, the automatic update software allows the user to select appropriate updates, remembers which components are selected, and updates those components the next time the computer is connected to the Internet.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through a output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","As generally represented in , a computer system such as the computer system  (OF ) acts as a client system and connects to a remote computer such as the remote computer  (OF ), wherein the remote computer  comprises generally at least one server. In one implementation, the remote computer  is an HTTP server, however as will be understood, the remote computer  can be any device or interconnected devices capable of storing information and processing requests for that information, such as one or more file, FTP, or other servers.","In general, the server (or servers)  maintains software that the client system  may want to download, including device drivers  and software components  (e.g., binary executables, DLLs, object classes, ROM updates, microcode patches, data such as antivirus information and so forth). As is known, such software is frequently updated (or at least made available a first time), and thus placing the software on a server which can be accessed by many potential clients (e.g., via an Internet website) is a desirable way to distribute the updates. As used herein, the term \u201cupdate\u201d (and its variations such as \u201cupdates\u201d) will be intended to include any software that is accessible to clients, whether or not the software is actually an update or an initial version that may or may not someday have a later version.","In accordance with one aspect of the present invention, the first time that a client  connects to the server , e.g., by connecting to the Internet, the client  downloads information from the server  that is relevant to available updates. This update information  is cached in a client cache , as generally shown in  and described below. Thereafter, each time the client  connects to the server , the server  may adjust the cached update information, that is, the server  may update the update information in the update cache . Note, however that preferably, the server does not initiate the refreshing of the cache, but rather the client requests the update\/refresh from the server, e.g., first the client checks to see whether the server information is newer, and if so, requests the actual information from the server. The offline update cache  may comprise a special cache which may be used for storing the update information offline, so that the cached content is not subject to expiration, flushing and\/or size requirements (as with conventional caches) that may render the update information unavailable.","Note that the server (e.g., having an update website) may be automatically connected to in the background, (e.g., while the user is accessing other Internet sites), and that the initial and subsequent downloading may take place in the background, generally using unused bandwidth, without the user specifically requesting the download. For example, AutoUpdate Boot software  can connect to the server and the update website via network access software , (e.g., wininet.dll called directly) to access the internet\/network and manage the initial update information download and subsequent changes thereto. In addition to the update information, the drivers  and software components  that the update information identifies as available can also be downloaded in the background when updates therefor are appropriate.","Moreover, the download may be such that it can be incrementally stopped and restarted without losing data that has already been successfully downloaded. Such background and safely interruptible downloading that is suitable for use by the present invention is generally described in U.S. patent application Ser. No. 09\/505,735 filed Feb. 16, 2000 entitled \u201cSystem and Method for Transferring Data Over a Network\u201d assigned to the assignee of the present invention and herein incorporated by reference. Further, note that once initially downloaded to the cache , subsequent downloads need not transmit the entire set of update information, but rather the downloading can be somewhat reduced by selectively downloading relevant change information (i.e., the deltas) when appropriate, thereby increasing efficiency, as described below.","To download, notification of connectivity to the Internet is given to the components that request the information for offline caching. To this end, the automatic updating feature of the present invention uses an operating system extension that periodically calls application programming interfaces (APIs) to get information about the connectivity state of the machine. If a connection is determined to be available, the other components are notified that a download is now possible. For example, this check may occur approximately every ten minutes when the user is running the system shell.","Once notified of a connection, the AutoUpdate boot loader  component of the automatic updating feature checks to see if newer information is available on the server . Note the first time this check is made, no information is available locally, and the update information is therefore automatically downloaded to the cache . As described above, when downloading, the AutoUpdate boot loader  component may use available background download functionality to download information about the device drivers available on the update website. This information is then stored in the cache  and is updated whenever newer information is published on the update website and a connection is available for the download.","Once initially downloaded, for hardware-related updates, the device manager  and code download manager  will now have this information locally available whenever new device detection is done, e.g., when the user installs a new device. Similarly, for software related updates, the AutoUpdate software , which may comprise the operating system's detection and installation engine, detects the availability of new software updates in a similar fashion, by downloading the appropriate component information setup file  from the update website, and reading it locally. If this process determines an update is available for the client machine , the user may be presented with an option to download and install the update. As can be appreciated, this is preferable to downloading an entire update (or set of updates) that may not apply to the user's machine. In addition to handling non-persistent or intermittent connectivity, the updating feature may be rescheduled to a more convenient time for the user. If the user is not connected at this time, connectivity can be forced, or the update can fail. Preferably, however, if the user is not connected at the time of a scheduled update, the mechanism waits until the user reconnects, (which is slightly different than forcing, failing or rescheduling). With the caching technique of the present invention, the necessary information is persisted (and protected from expiration or flushing) so that the user can be reminded, on schedule, without any connection. Once connectivity is reestablished, the updating\/downloading can resume as needed.","Thus, once the appropriate update information  for a given machine as requested by the client is downloaded to the cache , the client machine  is capable of handling updates regardless of whether the client machine  is connected to the server , and even before it can connect. While capable of operating before a connection can exist, it should be reiterated that the present invention may also operate when a connection can exist but does not, or when a connection does exist. Although the actual updates themselves may not take place until a later connection is available, the resulting user experience is generally consistent and appropriate, in that a prompt, dialog box or the like for selectively installing online updates will appear only when online updates are actually available. Note that prompting is optional and only provided for user convenience. Also, since the connection is not required for handling updates, automatic device detection, such as via a device manager component  or Plug and Play (PnP) component , or via a software updating service (AutoUpdate software) , (that may execute before a connection is even possible), are able to prepare for updates when a connection is later made. When later connected, the preparation ensures that the updates are automatic, without needing manual user intervention.","Thus, if a user installs a new device at anytime, the present invention enables a hardware driver to be installed for that device from the online server , either on demand if a connection exists, or at a later time if no connection exists. This requires that the hardware driver exist on the server , which is one piece of data that the cached update information maintains, as described below. Thus, if the driver does exist and is the best available version, (which also can be determined from the cached update information), and a connection is present, the driver can be downloaded and installed on demand. However, if no connection exists, the driver download information can be persisted so that the driver can be installed when there is a connection, or the user may be prompted . . . . If the machine state changes before a connection is made so that an update is no longer applicable, the update information in the offline cache  can be used to give the user correct information regarding the status of updates.","As represented in , the hardware information in a CAB (cabinet) file (e.g., the CAB file ) includes a bitmask  and bucket files \u2013. The bitmask  and each bucket file (e.g., the CAB file ) can be separately downloaded, such as based on a datestamp therein or otherwise accompanying the file (as metadata) so that only a changed bitmask or a changed or new bucket file need be downloaded. The component information setup file  is relatively small and is thus downloaded in its entirety, which in general is each time that there is a connection. However, as can be appreciated, the component information setup file  alternatively may be downloaded only if changed, and\/or only changes from a previous component information setup file may be downloaded depending on efficiency considerations and the like.","When cached, as shown in more detail in , a code download manager  of , that may be called by the device manager  component or PnP component  upon detection of a device (or devices), will use the bitmask  and bucket files \u2013to evaluate the availability of online updates for hardware drivers for that device. As generally described above, this can be automatic at each startup, in response to a plug and play request, in response to a manual user request to add a new device or update a driver, or in some other manner. An update process , described below with respect to , will be executed to use the information in the update cache  to determine the availability of a suitable update. Note that while separately shown in , the update process  may be incorporated into the code download manager  and the AutoUpdate software .","To efficiently maintain information about the many possible hardware devices capable of being installed in a system, each bit in the bitmask  indicates whether a bucket file exists that may have information about a particular hardware device. More particularly, when the update data  is configured at the server-side, the ID of any hardware device (of which an extremely large number may be possible) is hashed down to a smaller number, for example, a single value within a range of ten thousand possible numbers (0 to 9999). If a hardware driver update is available for that hardware device, a bucket file is created, (if one is not already present for that hashed value), and the correspondingly numbered bit in the bitmask is set (if not already set because the bucket file already existed). The actual hardware ID is placed in the bucket value, along with data about the driver, including version information such as a date stamp, and description information, such as the filename. The records within the bucket files can be arranged as desired, e.g., for fast searching, or simply by appending new hardware driver records thereto as new driver updates become available. For convenience, the bucket files are named by their hashed value, although if desired a map could map the hashed value to another filename.","Thus, as shown in , when downloaded into the client-side update cache , via the bitmask , the code download manager  of the client machine  can quickly and efficiently identify whether a given hardware device possibly has an update therefor by performing the same hash function as the server does for hardware device IDs. If an update possibly exists, the bit corresponding to that hash value will be set and the corresponding bucket file (normally) will be present locally. The bucket file can be searched for the full identifier of the hardware device, which will be present along with update data if an update is available.","By way of example, consider a hardware device that hashes to the value \u201c182\u201d in . The bitmask  specifies (by the zero value at bit offset ) that no bucket file exists and thus no device driver update is available online for this hardware device. Instead, as described below, the code download manager will attempt to locate a driver elsewhere, e.g., by performing actions to ask the user to load a disk. If however a different hardware device with an ID that hashes to the value \u201c5544\u201d in  is installed, there is a bucket file (5544.bkf) for that hashed value as indicated by the bit set to one at offset  in the bitmask . The bucket file is then opened (unless already open) and read to determine whether the specific hardware ID is listed therein. If not, then no update is available, but if listed, the device driver information is read and used in determining whether an update should be planned for that driver. The use of the update information for a hardware device is described below with respect to . Note that in keeping with the present invention, the online availability of the driver (as least since the computer was last connected) is determined from the cached update data, regardless of whether there is an actual connection. Note however, whenever a connection is available, information from the server is used if it is newer, i.e., whenever a connection is available, the server is checked for newer detection information before deferring to the offline cached information. When online, the bitmask and any needed or changed bucket files may be downloaded as needed, e.g., when the bitmask date stamp indicates that the cached bitmask is outdated.","For updates to software components, the AutoUpdate software  is executed from time to time, such as daily or in accordance with some other settings, such as via a task scheduler  or the like. Software updates are based on cached information in the downloaded copy of the component information setup file . When the AutoUpdate software  is considering whether a software component should be installed or updated, the AutoUpdate software  accesses the cached component information setup file  to determine whether a software component is already installed, whether it cannot be installed, or whether it requires another software component to be installed before it can be installed. For example, an updated component may be available, but only applicable if a certain version of Microsoft\u00ae Internet Explorer is present, and the updated component's installation is thus detection dependent. The component information setup file  may list such requirements for each given software component or package of components.","After determining what updates, if any, are available, the AutoUpdate software  obtains a decision from the user on whether to download and install the update. If the user elects the installation for a given update, the AutoUpdate software  persists the installation request in a state table  or the like. The state table  is accessed when the client computer  is loaded, which is when the shell is loaded, at which time the AutoUpdate and AutoUpdate boot components  and  appropriately handle the update based on conditions. For example, when the AutoUpdate and AutoUpdate boot components  and  determine a state where connectivity is not needed, e.g., when installing an update locally, then the event happens as scheduled, independent of connectivity. Also, the AutoUpdate and AutoUpdate boot components  and  may periodically check for a connection to the Internet, whereby when a download is needed and connectivity is detected, the download of the update may happen in the background, as described above.","In general, the offline mode of operation saves the inconvenience and expense of connecting (e.g., to the Internet) if there are no updates available or the user chooses not to select\/install an available update. Also, in the event of installing a new device, if the device is discovered during a restart of the system, depending on the method used to connect, it is not always possible to establish the connection, which requires the user to remember to update at a later time. The offline operation of the present invention enables the updating feature to automatically remember and handle the update when a connection is later made.","Turning to an explanation of the operation of the present invention with particular reference to the flow diagrams of ,  and A\u2013B, the update process  () is called at the various times described above, e.g., upon detection of a new device via the code download manager  or when software components are checked (e.g., daily) via the AutoUpdate software . When called, the update process  checks at step  of  whether the computer is online, e.g., connected to the Internet as described above. If so, the update process branches to step  to get the latest update information  from the server into the cache . Note that as described above, this may be less than a full download depending on the current state of the information in the cache .","If the computer system is not online, the existence and contents of the cache  are checked. The cached content may not be available if the user has not previously connected to the Internet, or if the user has somehow deleted it or its contents. In such an event, the process fails as represented by step , although the user may be given a chance to connect to the Internet if appropriate, such as if a hardware device was detected at a time when the system is capable of establishing a connection.","If the cached information is available via step  or step , the cached information can be used at step  to determine updates regardless of whether the system is online, as described above.  provides exemplary steps of how the cached update information can be used for updating a software update, while  show one way to use the cached update information for updating a hardware device\/driver.","In , at step , the AutoUpdate process selects a possibly-needed component, and evaluates its information in the cached component information setup file . If at step  it is deemed possible and desirable to update, e.g., it is not already installed, not in conflict with other software, and any detection dependencies are satisfied, the process continues to step . If the update cannot be installed, (or the same version is already installed), the process branches to step  which repeats the process for the next component, if any, until the detected set of software components has been processed.","At steps  and , the online information for this software component is checked against any locally detected software components of the same name or the like to determine whether the online version is better than any local version. If not better, there is no reason to automatically install the online version, and step  branches to step  to handle the update accordingly. For example, the user may be prompted to install a newer local version, and the update can be on demand from the local source if the user requests installation. After handling, the update process branches to step  to repeat the process for other possible components until the detected set of software components has been processed.","If step  determines that the online version is better (newer) than what is locally available and installed, the AutoUpdate process branches to step  to add the component information (e.g., an identifier thereof) to a batch list, such as maintained in the state table  (). The process continues to step  to repeat the process for the next component, if any, until the detected set of software components has been processed.","When no more detected software components remain, the user is allowed to select (or alternatively deselect) software components for online updating based on the batch list. To this end, if the batch list has updates in it at step , the process branches to step  where the user confirms the update via a checkbox provided in a dialog box or the like for each possible update. As described above, once confirmed, the updates can take place on demand if a connection is present, or the updates can be deferred by persisting the batch list and using it the next time a connection is present.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6A","b":["226","206","600","602","320","604","604","616"]},"If at step  a bucket file is present, then there is a possibility that a downloadable driver exists for this device. Step  searches the bucket file (opening it if necessary), to determine whether the hardware ID is listed therein at step . If not, then there is no driver therefor available online, and step  branches to step  to handle the installation accordingly, such as by installing it locally.","If instead the hardware ID is listed, then there is a driver therefor available for download, whereby step  branches to step  to evaluate the version information (maintained in the bucket file) for this particular device. Steps  and  represent the comparing of the online driver version to any other, locally available driver versions for this device. If the online version is better at step , the process branches to step  of  (note that again, any prompting is optional), otherwise the process branches to step  to handle the installation accordingly, such as by installing it locally, as described above.","Step  of  represents providing a prompt or the like to the user to determine whether the user wants to install the update. If not, the update is bypassed via step  by branching ahead to step . Note that the user may not be able to use the device if no earlier version driver is already installed for it.","If step  determines that the user wants the online update, step  branches to step  to test whether the system is online. If so, the installation is on demand, by branching to step  to install the update. If not online, the process handles the updating as best as possible at step , e.g., by using a locally available driver, and persisting the update request for later downloading and installing of the driver when the connection is made. The user may be prompted for instructions (including possibly to establish a connection) as desired.","Step  repeats the process for any other devices found, by returning to step  until no more detected devices exist.","As can be seen from the foregoing detailed description, the offline caching system and method of the present invention enables remote or online updates (updates from a non-local source) even when the system itself is not connected to the non-local source, deferring requested downloads until the system is online. Installation of an update may occur independent of connectivity. This provides efficiency, a consistent user experience, and facilitates automatic updating.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific form or forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 6A and 6B"}]},"DETDESC":[{},{}]}
