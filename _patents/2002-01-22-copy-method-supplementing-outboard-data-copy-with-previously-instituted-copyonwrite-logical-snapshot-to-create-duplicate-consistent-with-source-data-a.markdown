---
title: Copy method supplementing outboard data copy with previously instituted copy-on-write logical snapshot to create duplicate consistent with source data as of designated time
abstract: A copy method is disclosed to provide a duplicate copy of source data where the duplicate copy is consistent with the source data as of a designated time. The method includes creating a copy-on-write relationship between specified source data and an original image cache, utilizing an application outboard of the designated host application to copy all items of source data and their associated locations to a secondary data object without regard to whether the items source data have been updated since creating the copy-on-write relationship, and copying a specified amount of contents of the original image cache to the secondary data object. The specified amount includes contents of the original image cache as of completion of the utilizing operation. In addition, the method includes permitting copy-on-write relationship to continue during the utilizing operation and during at least part of the copying operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07072915&OS=07072915&RS=07072915
owner: International Business Machines Corporation
number: 07072915
owner_city: Armonk
owner_country: US
publication_date: 20020122
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Hardware Complnents & Interconnections","Operation","RESTORE SEQUENCE\u2014FIRST EMBODIMENT","RESTORE SEQUENCE\u2014SECOND EMBODIMENT","OTHER EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to techniques for copying digital data. More particularly, the invention concerns a copy method supplementing an outboard data copy with a previously instituted copy-on-write logical snapshot to effectively create a duplicate of source data consistent as of a specific time.","2. Description of the Related Art","The advent of fibre channel connectivity used by storage area network (SAN) technology has enabled new paradigms for accessing and copying computer data. The most prevalent copy method uses the SCSI-3 extended copy command (XCOPY) to copy SCSI blocks from one device to another under the control of a copy agent such as a SCSI fibre channel bridge or other SCSI device. The copy agent moves the data outboard from the application host that normally accesses the data.","With outboard copy operations such as the SCSI-3 XCOPY command, data movement operations are off-loaded from the application host by utilizing another process with alternative access to host disks. Some known storage systems  () implement XCOPY functionality using a hardware component in the SAN , such as a fibre-channel to SCSI bridge . Commands issued to the bridge  cause it to directly access blocks from one or more disks  attached to the SAN  and copy them to another location , such as another SAN-attached disk or tape. This copy operation  performs input\/output (I\/O) to host disks  outside the path  normally used by the file system  of the host .","When copying large amounts of data, such as file systems or large databases, the copy operation  can take some time to complete. If the data being copied is undergoing changes on the host computer  while being copied, the copied data will likely not be consistent with any point in time that actually existed on the host  because the file system I\/O  is not coordinated with the outboard copy operation .","One known technique to obtain a consistent copy is to make a \u201cphysical snapshot\u201d of the source data. In this technique, a mirrored copy (not shown) of the source data is maintained at all times. Then, at the instant when the physical snapshot is desired, the relationship between source and mirrored copy is broken. The mirrored copy thus reflects the content of the source data as of that moment in time. With this approach, an outboard data copy can be created using traditional methods, namely, by copying the (previously mirrored) physical copy. This is possible without disturbing the original data because the physical copy is now disconnected from the source data. Moreover, after creating the physical snapshot, the original file system and physical snapshot can be accessed independently. One disadvantage, however, is that well before the mirrored copy is ever needed, it occupies a significant amount of storage space, namely the same size as the source data.","Another known technique to obtain a consistent copy is the \u201clogical snapshot,\u201d illustrated in . Unlike a physical snapshot, the logical snapshot works by instantly declaring a body of secondary data  to be a duplicate of the source data . This may be done by various means, such as adjusting metadata to reflect the declaration, developing content of the secondary data that actually comprises pointers  to the source data, or another such technique. The result is a set of secondary data  that logically replicates the source data , even though the secondary data  does not yet physically contain any of the source data .","As updates are made to the source data  (), it becomes a mix of original  and modified  source data. To avoid losing the data replaced by updates, images of each \u201cold\u201d data block must be physically written from the source  to a secondary location  on an appropriate schedule. Thus, the secondary data  becomes a mix of logical data  (still unchanged in the source ) and old blocks  physically written from the source . Updates can be handled in different ways. In one case, the host continually physically writes \u201cold\u201d data from primary  to secondary storage , for example in a suitable \u201cbackground\u201d process. Alternatively, under an \u201con-demand\u201d technique, the host waits until an update to an item of original (\u201cold\u201d) data is received, and before writing the update to primary  the host physically writes the old data item to secondary storage . In this way, the secondary copy  is still preserved after the point in time at which it was taken. A \u201ccopy-on-write\u201d relationship is said to be created between primary  and secondary  storage.","The physical data  is referred to as an \u201cold block file\u201d (OBF) for implementations where data occurs in units of \u201cblocks.\u201d After the logical snapshot has been initiated, when updates to data blocks in the source  are received, their original images are copied to the OBF  before the updates are physically made to primary storage . This only needs to be done once for each distinct block that is updated on the original image. To access the logical snapshot, an entity such as a host volume manager through a device driver filter checks to see if the requested block has been updated. If it has never been updated, the block is represented by the logical secondary data , and therefore must be obtained from the original volume . Otherwise, if the requested block has been updated one or more times, the OBF  is the sole source for obtaining the original block image. The advantage of the logical snapshot approach, then, is that little additional disk space is needed, namely the disk space used to store original blocks, which is therefore dependent on the number of distinct blocks that get updated after the snapshot is taken. This is usually significantly less than twice the original disk space (the amount required by the physical snapshot).","Still, the logical snapshot techniques are not completely perfect. Accordingly, applications that are accessing the logical snapshot  need to coordinate their access to blocks in order to be assured of accessing the correct original block images, either in the OBF  or the original disk image . Conflict can arise between applications accessing the blocks  as primary data  and those applications accessing the blocks  as part of the secondary data . If a block is in the process of being copied to the OBF as a result of a source block update, then any applications accessing the secondary copy must wait for the block to be written to the secondary copy before accessing it there. This necessitates some locking or arbitration scheme. For example, a backup application that is copying data from the logical snapshot  will have to lock the file(s)  being copied so that their blocks are not updated while being copied to the backup media (not shown). This imposes overhead on the application even if the copy operations are being performed outboard from the application server.","In an attempt to address some of these concerns, some have proposed various new copy techniques, including the possible combination of the logical snapshot with outboard data movement. Unfortunately, the use of logical snapshot techniques with outboard data movement introduces complexity. One reason, referring to , is that the logical snapshot is virtualized through a device driver on the original host  and is thus not directly accessible by the outboard copy engine . Namely, a file system I\/O driver virtualizes the snapshot, so that outboard copy engine  does not know which blocks to copy in obtaining the logical snapshot image. The typical solution to this involves locking objects (files) on the host  so that their blocks cannot be changed, mapping those blocks to their constituent volumes, and then copying the mapped blocks. Although this method successfully obtains the proper blocks from the original volume and OBF, the overhead imposed on the host  during the copy operation can compromise the desired goal of performing the copy operation without substantial impact to host applications. IN any event, the locking and mapping activity does impact the application.","A different approach, considered by the present inventors yet unknown in the prior art, caches updated blocks in a new block file during the time that the file system  is being updated and the snapshot maintained. This technique, however, has certain risks because failures could leave the file system in a corrupt state or potentially lose all application updates.","Consequently, the existing copy techniques using logical snapshot copy-on-write, outboard data copy, and combinations of these are not completely adequate for all applications due to certain unsolved problems.","A bulk-copy method creates a copy-on-write relationship between specified source data and an original image cache for all updates coming from a designated host application. This copy-on-write relationship involves, responsive to at least a first update of each item of source data, writing an original image of said updated item of data and its associated address to the original image cache. An application outboard of the designated host application is utilized to copy all source data to secondary media without regard to whether the data has been updated since creating the copy-on-write relationship. A specified amount of data is copied from the original image cache to the secondary media. As a result, the secondary media contains contents of the source data as of the moment of forming the copy-on-write relationship.","The invention affords its users with a number of distinct advantages. For example, the invention provides a consistent outboard copy of a logical snapshot image with no application impact during the time that the data is being copied, thereby realizing the true goals for performing outboard copy in the first place. A physical copy of all of the data does not have to be made to form the duplicate, minimizing the amount of additional disk space that is required for the consistent snapshot. The invention also provides a number of other advantages and benefits, which should be apparent from the following description of the invention.","The nature, objectives, and advantages of the invention will become more apparent to those skilled in the art after considering the following detailed description in connection with the accompanying drawings.","Overall Structure","One aspect of the invention concerns a digital data storage system, which may be embodied by various hardware components and interconnections, with one example being described by the system  of . The system  includes a digital data processing machine , exemplified by the server . The server  receives read\/write requests from one or more hosts , and executes the requests using storage subcomponents such as the primary storage . The hosts  may comprise computing machines, application programs, or any appropriate hardware and\/or software construct. The server  includes portions \u2013devoted to primary and snapshot copies of data. The portions \u2013may comprise different applications, subroutines, processes, processing threads, processing machines, circuits, logic, or any other processing facilities. In the illustrated examples, the primary and snapshot copy portions \u2013comprise different application programs. Each portion \u2013includes a file system , and logical volume , . Each file system comprises an organizational mapping of directories, files, and their attributes to a logical or physical volume that operates to place and later locate directory and file attributes and data blocks on the logical\/physical volume. Each logical volume comprises a mapping function that operates to virtualize a single logical volume over one or more physical volumes or partitions by mapping the block addresses to physical addresses in the underlying volumes during I\/O operations.","The system  also includes a copy agent , which in the illustrated embodiment comprises an application program running on the server . Alternatively, the copy agent  may comprise a host machine, host application program, hardware device or subpart thereof, computer, user input devices or another source of instructions directed at the server , SAN , and the like. Operation of the agent  is discussed in greater detail below.","The system  also includes primary storage , secondary storage , an OBF  (also referred to as an \u201coriginal image cache\u201d), an optionally backup media . These components may be implemented by different physical storage devices or media, logical devices or media, partitions, volumes, data objects, or any other physical or logical construct. One example of the backup media  comprises a number of magnetic tape cartridges, such as a tape cartridge library.","In the illustrated embodiment, the server  is coupled to primary storage  and secondary storage  by a SAN . The primary storage  contains source data . The secondary storage  contains a physical copy of the source data , which is created by the operations discussed below. The physical copy may also be referred to as a secondary copy. The secondary storage  is coupled to the SAN  by a bridge , which comprises an application, machine, processing thread, subroutine, program, or other processing entity separate (outboard) from the server  and its components , . The bridge  is therefore outboard in that it does not access data through the data paths utilized or supported by the server . Depending upon the requirements of the application at hand, the bridge  may be part of the SAN  or a separate component.","A data path provides a path from the server  to the primary storage  including the source data . A data path couples the server  to the OBF , which is used when a copy-on-write relationship occurs. As mentioned below, the snapshot copy comprises access to the source data (via data path ) and the OBF  (via data path ).","Exemplary Digital Data Processing Apparatus","As mentioned above, data processing entities such as the server  and\/or the bridge  may be implemented in various forms. One example is a digital data processing apparatus, as exemplified by the hardware components and interconnections of the digital data processing apparatus  of .","The apparatus  includes a processor , such as a microprocessor, personal computer, workstation, or other processing machine, coupled to a storage . In the present example, the storage  includes a fast-access storage , as well as nonvolatile storage . The fast-access storage  may comprise random access memory (\u201cRAM\u201d), and may be used to store the programming instructions executed by the processor . The nonvolatile storage  may comprise, for example, battery backup RAM, EEPROM, flash ROM, one or more magnetic data storage disks such as a \u201chard drive\u201d, a tape drive, or any other suitable storage device. The apparatus  also includes an input\/output , such as a line, bus, cable, electromagnetic link, communications interface, or other means for the processor  to exchange data with other hardware external to the apparatus .","Despite the specific foregoing description, ordinarily skilled artisans (having the benefit of this disclosure) will recognize that the apparatus discussed above may be implemented in a machine of different construction, without departing from the scope of the invention. As a specific example, one of the components ,  may be eliminated; furthermore, the storage , , and\/or  may be provided on-board the processor , or even provided externally to the apparatus .","Logic Circuitry","In contrast to the digital data processing apparatus discussed above, a different embodiment of the invention uses logic circuitry instead of computer-executed instructions to implement processing entities such as the server  and\/or bridge . Depending upon the particular requirements of the application in the areas of speed, expense, tooling costs, and the like, this logic may be implemented by constructing an application-specific integrated circuit (\u201cASIC\u201d) having thousands of tiny integrated transistors. Such an ASIC may be implemented with CMOS, TTL, VLSI, or another suitable construction. Other alternatives include a digital signal processing chip (\u201cDSP\u201d), discrete circuitry (such as resistors, capacitors, diodes, inductors, and transistors), field programmable gate array (\u201cFPGA\u201d), programmable logic array (\u201cPLA\u201d), programmable logic device (\u201cPLD\u201d), and the like.","Having described the structural features of the present invention, the operational aspect of the present invention will now be described. As mentioned above, the operational aspect of the invention generally involves a copy method supplementing an outboard data copy with a previously instituted copy-on-write logical snapshot to effectively create a duplicate consistent with the source data as of a specific time.","Signal-Bearing Media","Wherever the functionality of the invention is implemented using one or more machine-executed program sequences, these sequences may be embodied in various forms of signal-bearing media. In the context of , such a signal-bearing media may comprise, for example, the storage  or another signal-bearing media, such as a magnetic data storage diskette  (), directly or indirectly accessible by a processor . Whether contained in the storage , diskette , or elsewhere, the instructions may be stored on a variety of machine-readable data storage media. Some examples include direct access storage (e.g., a conventional \u201chard drive\u201d, redundant array of inexpensive disks (\u201cRAID\u201d), or another direct access storage device (\u201cDASD\u201d)), serial-access storage such as magnetic or optical tape, electronic non-volatile memory (e.g., ROM, EPROM, or EEPROM), battery backup RAM, optical storage (e.g., CD-ROM, WORM, DVD), or other suitable signal-bearing media including analog or digital transmission media and analog and communication links and wireless communications. In an illustrative embodiment of the invention, the machine-readable instructions may comprise software object code, assembled from assembly language, compiled from a language such as C, etc.","Logic Circuitry","In contrast to the signal-bearing medium discussed above, some or all of the invention's functionality may be implemented using logic circuitry, instead of using a processor to execute instructions. Such logic circuitry is therefore configured to perform operations to carry out the method of the invention. The logic circuitry may be implemented using many different types of circuitry, as discussed above.","Copy Sequence",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 6","FIG. 6","FIG. 3"],"b":["600","300"]},"The sequence  is initiated in step , in which the logical snapshot copy is created, instituting a copy-on-write relationship between the source data and the OBF . This involves creation of the data path , so that whenever a data block of the source data is updated, the old data block is written to the OBF . Along with a block or other item of data is written the data item's address, relative position, or other locator. Although \u201cblocks\u201d are discussed to provide a representative example, other units of data are also contemplated, including but not limited to files, records, logical devices or subportions, pages, extents, address ranges, etc. To illustrate step  more specifically, the agent  issues appropriate instructions to quiesce the application that manages the source data , and thereafter institute the copy-on-write relationship. The application is quiesced in a consistent state, such as by suspending or deferring write operations. With the source data quiesced in a consistent state, the copy-on-write relationship is started and maintained by the file system , disk device driver through file system filter driver, device driver filter driver software, or other entity that ensures that the original contents and address of source data blocks have been recorded in the OBF  before they are updated in the source data ","Also in step , the agent  instructs the server  to initiate the logical snapshot copy . The logical snapshot copy comprises a logical copy of the source data , established by configuring metadata pointers to a combination of source data and OBF data  such that the original copy of the source data is pointed-to. Creation of the snapshot copy establishes the data paths , . With the copy-on-write relationship and snapshot copy established, the agent  releases the application to resume making updates to the source data ","In step  (which is optional), the agent  (or server ) creates a table of contents from the logical snapshot while it is still established, so that the relationship between file or directory objects and block numbers can be recorded. This relationship can be used at a later time to locate and restore (or copy back) individual files that reside in the file system instead of the file system in its entirety. The table of contents maps each file, object, record, page, or other data item of the snapshot copy to the addresses of its constituent blocks therein. Creation of the table of contents requires that the snapshot be visible to the copy agent .","In step , the agent  invokes the bridge  to physically copy the source data to the physical copy . Along with each item of source data, step  copies the data item's address, relative position, or other locator. This is an outboard data copy since it is performed by a processing entity separate from the application server . The bridge  copies each block of source data without regard for any update activity from the application (and hosts ) that has occurred after the logical snapshot was taken. As an example, step  may be performed using the SCSI-3 XCOPY command.","In step , after the bridge  has finished copying the source data to the physical copy , the agent  terminates the logical snapshot , and ends the copy-on-write relationship between the source data and OBF . Thus, the data path is severed and the OBF  is no longer updated. By terminating the logical snapshot , the data paths ,  are also severed. Unlike conventional snapshot programs, which automatically terminate an OBF at the conclusion of a logical snapshot, the operation  retains the OBF . For instance, destruction of the OBF  may be prevented by the agent  providing specific instructions to the server  to retain the OBF . As another example, destruction of the OBF may be prevented by ensuring that the file system blocks associated with the space allocated to the original OBF are not overwritten by new files until the original OBF information is copied. This does not necessarily require prevention of OBF erasure, but that OBF contents be preserved by not overwriting the blocks that were once used by the OBF. The operation  prevents any changes to the OBF  until its contents can be copied by step , as discussed below. At this point, the retained OBF  contains the original image of all blocks of source data that had been updated between the creation of the logical snapshot in step  and termination of the snapshot in step .","In step , the bridge  copies the OBF  into secondary storage . According to one embodiment, each data block of the OBF  is copied so as to overwrite any existing counterpart of that data block in the physical copy . In this case, step  results in an exact physical copy of the source data as of the moment that the logical snapshot was instituted, as shown by . In another embodiment, step  is performed so as to append OBF data blocks  to the outboard data copy existing in the storage , as shown by .","As an alternative to the foregoing description, step  omitted, with the copy-on-write relationship being terminated some time after step . For instance, the copy-on-write relationship may be terminated during copying of the OBF in step . In this case, however, step  does not copy all of the OBF . Rather, step  is limited to copying data present in the OBF  as of completion of the outboard copy . In this embodiment, the amount of data in the OBF  may be marked at the completion of step  by entering a marker, noting the identity of the last entry, recording the file size, etc.","In any event, various other operations  can be performed after step , as desired. For example, the OBF  may be erased. As another example, where the OBF  has been appended to the outboard data copy in step , the agent  may automatically integrate the OBF and outboard data copy during subsequent reclamation, reorganization, or other data management operations. In this way, blocks in the OBF are used to replace the salient blocks in the outboard data copy. With this embodiment, the OBF portion of the physical copy may then be discarded and the integrated block data image alone used for any subsequent restore operations. As another example, in step  the copy agent , bridge , or another component may form a backup by copying the physical copy into the backup media , thereby forming a backup copy . In the case where the physical copy is made up of components \u2013, the backup copy may comprise a replica of the data \u2013appended together, or the components \u2013may be integrated as part of the backup operation if desired.","While the invention leverages the use of logical snapshot copy-on-write technology to perform a bulk copy operation, the existence of the logical snapshot  does not need to be surfaced to the application host . In other words, the application and access paths ,  do not need to be visible to the host  and\/or applications in the server  that manage the primary copy . One exception, however, is in the case where the table of contents is created in step , in which case the snapshot copy is made visible to the table of contents creator, namely the agent  or server .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 7A","FIG. 7A","FIG. 3"],"b":["700","316","310","310","700","340","310","300","700","600","608","370","370"],"i":["a ","a","a","a ","a","b ","a. "]},"The sequence  starts in step , in which the agent  receives a restore request. This request may be received from a hierarchically superior application or host, from an operator such as a system administrator, from a process internal to the server , or another source. In the illustrated example, the restore request comes from the host . Response to the restore request, the agent  copies the outboard data portion of the physical copy to a designated restore site, for example in the source data (step ). Then, the agent  copies each data block of the OBF portion of the physical copy to the restore site; each data block from overwrites any existing counterpart data block of the outboard data copy (step ). After step  completes, the application adjusts metadata pointers as needed to point to the source data's new location in storage  (unless the source data has been restored precisely to the original address of the source data ), and then declares that the restore has been successful (step ). Thus, the restore site now constitutes the source data . After step , the source data is now restored to its previous state, as of the moment that the logical snapshot was taken back in step .","As an alternative to the foregoing description, restoration may also be performed for specifically named data blocks rather than the entire body of source data . In this case, responsive to the restore request of step , the agent  accesses a table of contents stored with the physical copy to find and then copy the requested data blocks from the outboard data portion of the physical copy to the designated restore site (step ). Then, the agent  copies each requested data block of the OBF portion of the secondary data  to the restore site, each data block overwriting any existing counterpart data block of the outboard data copy (step ). OBF blocks are only copied if they correspond to the blocks that belong to the particular files being restored, according to the table of contents. After step , the application adjusts metadata pointers as needed to point to the restored blocks' new locations in storage  (unless the primary blocks were restored precisely to their original addresses in the source data ), and then declares that the restore has been successful (step ). This declaration shows the restored data blocks to be source data, in replacement of the data blocks for which restoration was requested.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 7B","FIG. 3"],"b":["750","608","372","750","316","310","602","372","750","370","370","370","750","340","372"],"i":["a ","a ","a ","b ","a "]},"The sequence  is initiated in step , in which the agent  receives a restore request, similar to step  discussed above. If this restore request constitutes a request to restore the entire body of source data , the application copies the physical copy back into primary storage  (step ). In step , after adjusting metadata as needed to treat the copy in primary storage  as the source data, the application declares that this copy constitutes the source data . In this case, original contents of the source data are now restored to their previous state, as of the moment that the logical snapshot was taken back in step .","If the restore request constituted a request to restore certain files of the source data , then the application in step  accesses a table of contents (mapping each file in the physical copy to its constituent data blocks) to find the desired data blocks, and limits copying to those pertinent data blocks. In this case, step  makes declaration only for these data blocks, that they now constitute the source data blocks in replacement the counterparts in ","While the foregoing disclosure shows a number of illustrative embodiments of the invention, it will be apparent to those skilled in the art that various changes and modifications can be made herein without departing from the scope of the invention as defined by the appended claims. Furthermore, although elements of the invention may be described or claimed in the singular, the plural is contemplated unless limitation to the singular is explicitly stated. Additionally, ordinarily skilled artisans will recognize that operational sequences must be set forth in some specific order for the purpose of explanation and claiming, but the present invention contemplates various changes beyond such specific order."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 2A\u20132B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 7A\u20137B"}]},"DETDESC":[{},{}]}
