---
title: Framework for application monitoring and management
abstract: A system is provided for monitoring one or more applications. The system includes a data store to maintain data, such as logs stored in a log file, describing transactions involving at least one of the applications. Some of the data includes context specific information which may be of varying length or content. The system includes agents, adapters, a controller, and a console. The agents communicate the data to the data store according to a configured delivery method. The adapters receive the data from the applications and forward the data to one of the agents. The controller manages the agents and is operable to analyze the data. The console is coupled to the controller to receive command inputs from a user to provide the analysis of the data to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640337&OS=07640337&RS=07640337
owner: Sprint Communications Company L.P.
number: 07640337
owner_city: Overland Park
owner_country: US
publication_date: 20041028
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["None.","Not applicable.","Not applicable.","The present disclosure is directed to computer software, and more particularly, but not by way of limitation, to a computer software for monitoring and managing other software applications.","In the area of system and software operation and development, it is sometimes useful to monitor applications during operation. Software applications, computer programs, software subroutines, software modules, or software components (hereinafter referred to as applications) may perform transactions without leaving sufficiently detailed historical records. Historical records or other transaction diagnostic information may promote analysis of application processing and management of application operating conditions. Monitoring applications and these intermediate variables may be warranted for a number of other reasons.","The Application Response Measurement (ARM) application programming interface provided a limited framework for developers to add monitoring functions to applications during software development and to cause the applications to generate historical information. The ARM framework included standard libraries supporting a limited number of instrumentation function calls to cause historical information to be captured.","According to one embodiment, the present disclosure provides a system for monitoring one or more applications. The system includes a data store to maintain data, such as logs stored in a log file, describing transactions involving at least one of the applications. Some of the data includes context specific information which may be of varying length or content. The system includes agents, adapters, a controller, and a console. The agents communicate the data to the data store according to a configured delivery method. The adapters receive the data from the applications and forward the data to one of the agents. The controller manages the agents and is operable to analyze the data. The console is coupled to the controller to receive command inputs from a user to provide the analysis of the data to the user.","According to another embodiment, the present disclosure provides a method for monitoring and managing applications. The method includes defining context specific information to be generated by an application. The method also includes generating data including context specific information about an application, the data including a representation of a workflow. The method includes providing a configurable delivery of the generated data, and sending the data to a data store according to the configured delivery. The method provides for analyzing the data in the data store according to a user defined level of detail to generate a report on the application. The method also includes changing the configuration of the environment of the applications based on the report.","These and other features and advantages will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.","It should be understood at the outset that although an exemplary implementation of one embodiment of the present disclosure is illustrated below, the present system may be implemented using any number of techniques, whether currently known or in existence. The present disclosure should in no way be limited to the exemplary implementations, drawings, and techniques illustrated below, including the exemplary design and implementation illustrated and described herein.","The ARM application programming interface is intended to be a lightweight, quick, and efficient tool to capture information about processes or transactions executing on the same machine where ARM is located. To remain lightweight and efficient, the ARM application programming interface constrains applications to employing a minimum number of data types. This constraint may undesirably limit the information which can be captured about the on-going processing of an application. The present disclosure provides a framework for monitoring and managing applications by generating records or logs. This software framework supports the subject applications reporting context specific attributes in the records or logs that are unique to the subject applications. This framework allows an application to select one of several delivery mechanisms for the logs that best accords with the design constraints of the application. The framework provides adapters to interface to pre-existing commercial off-the-shelf (COTS) applications. The framework provides for processing of the records or logs on a host separate from the application hosts. Processing of records or logs off the application host allows more verbose records or logs to be captured by applications because processing the longer logs does not load down the application hosts.","Turning now to  a block diagram of a system  using the framework for application monitoring and management is depicted. The system  provides for monitoring a first enterprise application , a second enterprise application , a third enterprise application , and a COTS application . In another embodiment, more or fewer enterprise applications and\/or COTS applications may form a part of the system . Each enterprise application , ,  is associated with an application monitoring and management application programming interface (API)  and a logging API . The enterprise application , ,  employs the application monitoring and management API  to provide information on the state or progress of processing of the enterprise application , , . The application monitoring and management API  employs the logging API  to generate records or logs from the information on the state or progress of enterprise processing.","The logs are transported to an application monitoring and management host . The logs are moved from the application monitoring and management host  to an application monitoring and management repository  where the logs are stored and may be accessed to generate management reports. The application monitoring and management repository  may be a data store, such as a database, director services, flat text file, or other data storage system. A variety of mechanisms are employed to transport the logs to the application monitoring and management host . Each of these mechanisms is illustrated in  and will be described.","The first enterprise application  is depicted as coupled to a first message queue manager . The first enterprise application  invokes a method on the application monitoring and management API  providing processing information. In other embodiments, the application monitoring and management API  may monitor processing and transactions of the enterprise application , or other techniques may be used to identify the transactions and processing. The application monitoring and management API  invokes a method on the logging API  providing the processing information and other information necessary for the logging API  to generate a log. The logging API  sends a message encapsulating the log to the first message queue manager . The message queue manager  sends the message to a second message queue manager  on the application monitoring and management host . This may be referred to as a messaging based log delivery mechanism. A message queue agent  monitors the second message queue manager , retrieves new messages, extracts the log encapsulated in the message, and sends the log or record to the application monitoring and management repository . The IBM MQ Series message queue managers, the JAVA message service (JMS), or other messaging services known to one of ordinary skill in the art may be employed to implement the messaging based log delivery mechanism.","The second enterprise application  is depicted as coupled to a plurality of log files \u2014a first log file , a second log file , and a third log file . The second enterprise application  invokes a method on the application monitoring and management API  providing processing information. In other embodiments, the application monitoring and management API  may monitor processing and transactions of the enterprise application , or other techniques may be used to identify the transactions and processing. The application monitoring and management API  invokes a method on the logging API  providing the processing information and other information necessary for the logging API  to generate a log. The logging API  writes a record entry that encapsulates the log in one of the log files . A scheduler component  periodically reads the contents of the files  and transmits the file content to a file loader  on the application monitoring and management host . This may be referred to as a periodic file based log delivery mechanism. The file loader  extracts the logs from the file content and writes the logs to the application monitoring and management repository .","The third enterprise application  is depicted as coupled to a fourth log file . The third enterprise application  invokes a method on the application monitoring and management API  providing processing information. In other embodiments, the application monitoring and management API  may monitor processing and transactions of the enterprise application , or other techniques may be used to identify the transactions and processing. The application monitoring and management API  invokes a method on the logging API  providing the processing information and other information necessary for the logging API  to generate a log. The logging API  writes a record entry that encapsulates the log in a log file . An application monitoring and management log adapter  reads the contents of the log file  as the file is written, extracts the log from the content of the file, and transmits the log to a first log agent  on the application monitoring and management host . This may be referred to as a near real-time file based log delivery mechanism. The first log agent  writes the log to the application monitoring and management repository .","The COTS application  is depicted as coupled to an application monitoring and management COTS log adapter . The application monitoring and management COTS log adapter  receives logs generated by the COTS application  or interacts with a COTS logging API  to access logs generated by the COTS application . The application monitoring and management COTS log adapter  sends the logs to a second log agent  located on the application monitoring and management host . The second log agent  writes the log to the application monitoring and management repository . The application monitoring and management COTS log adapter  may be customized to interact with a specific COTS application . It is expected that several application monitoring and management COTS log adapters  will be provided, one for each different COTS application .","The application monitoring and management API , the logging API , message queue managers , , message queue agent , file loader , scheduler , application monitoring and management log adapter , application management and monitoring COTS log adapter , and log agents ,  may be software components that may execute on a general purpose computer system as described in greater detail hereinafter.","The first log agent  and the second log agent  perform similar functions and may be distinct executing instances of a single log agent software component. The application monitoring and management log adapters  and the application monitoring and management COTS log adapters  may be viewed as producers of logs and the log agents ,  are consumers of the logs. Generally, the relationship between the application monitoring and management log adapters  and the application monitoring and management COTS log adapters  with the log agents ,  need not be one-to-one. There may be fewer log agents ,  if the log agent ,  are capable of managing the flow of logs.","The enterprise applications , ,  may be configured to employ any of several distinct log delivery mechanisms described above. A controller  is in communication with the message queue agent , the file loader , and the log agents , . The controller  is operable to configure the log delivery mechanism for the enterprise applications , , . The controller  configures the log delivery mechanism of the enterprise applications , , and  based on inputs received from a console . Configurable delivery permits controlling the processing load placed on host machines by the application monitoring and management software. Generally speaking, the messaging based log delivery mechanism places a relatively high burden on a host machine or server machine, the near real-time file based log delivery mechanism places a relatively medium burden on a host or server machine, and the periodic file based log delivery mechanism places a relatively low burden on a host or server machine.","The application monitoring and management API  provides several methods or functions that applications , ,  may be programmed to invoke to generate monitoring information in log messages. In an embodiment, these methods may include a startProcess, a stopProcess, a startTransaction, and a stopTransaction methods. The startProcess method may be invoked at the beginning of a process in an enterprise application , ,  to initialize the application monitoring and management API  and to record the start of the process as a log message. The stopProcess method tears down the application monitoring and management API  and records the end of the process as a log message. The startTransaction method records the beginning of a monitored transaction as a log message and returns a transaction identifier that may be used for stopping the transaction.","The startTransaction method may be invoked with context specific information that is included in the log message and can be of arbitrary format and content. The context specific information may include the present value of one or more variables known to the application or process invoking the startTransaction method. The context specific information may include debugging information useful to the developer during program development and\/or troubleshooting the application when it has been put into service. The name of the transaction on which the process is operating and the parent process identifier are known to the process. When invoking the startTransaction method, the process provides the parent process identifier and the name of the transaction as arguments to the startTransaction method invocation. When the startTransaction method is invoked, the application monitoring and management API  generates a parent process\/child process identity pair. The transaction name and the parent process\/child process identity pair are included in the log message generated in association with invocation of the startTransaction method. The transaction name and the parent process\/child process identity pair support analysis of the logs stored in the application monitoring and management repository  to generate a report on a transaction which may bridge multiple processes and\/or multiple enterprise applications , , .","The stopTransaction method may be invoked with context specific information that is included in the log message and can be of arbitrary format and content. The context specific information may include the present value of one or more variables known to the application or process invoking the stopTransaction method. The context specific information may include debugging information useful to the developer during program development and\/or troubleshooting the application when it has been put into service. The name of the transaction which the process is working on and status of the transaction are also arguments provided when invoking the stopTransaction method and are included in the log message.","An enterprise transaction, for example \u201ccreate customer,\u201d may involve several enterprise applications , ,  and several processes performing intermediate steps of the transaction. For example, \u201ccreate customer\u201d may entail a first process validating a credit class of the prospective customer and a second process validating a customer address. As enterprise applications , ,  interact with one another, starting up processes to handle transactions and shutting down processes, the enterprise applications , ,  make calls to the application monitoring and management API  which generate log messages capturing the processing of the transactions between the enterprise applications , , . These log messages are conveyed from the application monitoring and management API  to the application monitoring and management repository  by the mechanisms discussed above. In the case of COTS applications, for example COTS application , the logs generated by the COTS applications are processed by the application monitoring and management COTS log adapter  to adapt the generated logs to the standard log format of the framework for application monitoring and management. In one embodiment, the logs generated by the COTS applications may not be readable, or in a format that is usable by the present system. In this case, the COTS log adapter  is operable to translate, reformat or otherwise make the COTS logs readable in the standard log format of the framework for the present system.","The controller , in response to inputs from the console , interacts with the application monitoring and management repository  to generate transaction processing reports. The console  provides a hierarchical view or display of transactions and their components. In an initial display, all transaction names are listed but no further details associated with the transactions are displayed. A user may select a transaction name, for example using a mouse or other input device, and the first level of transaction process components, recorded in the first level of child process logs, are displayed at the console .","The first level of child process logs are identified by the controller  by finding the logs containing the transaction name in the application monitoring and management repository . First level child process logs are distinguished from second level child process logs by the parent process\/child process identity pair contained by each log. The console may display the time stamp of the log messages, the processing status of the log messages, any context specific information that may be embedded in the log message, and other information. Clicking on one of the first level of child process logs causes the controller  to analyze the logs in the application monitoring and management repository  to identify the child process logs associated with the selected first level child process and to display these second level child process log messages. The controller  and the console  may be software components that may execute on a general purpose computer system.","The described system  provides end-to-end transaction visibility at user controlled levels of details. In one circumstance, an operator may be satisfied examining the process of a transaction at the first level of process logs. In another circumstance, at the user's discretion, the operator may use the system  to analyze the progress of a transaction at the third or fourth level of process logs to obtain greater detail at each level. The log analysis activity of the controller  is performed on the application monitoring and management host , thereby sparing the application server of the burden of supporting the log analysis processing.","Turning now to , an alarmer  is shown in communication with the application monitoring and management repository . The alarmer  periodically analyzes the logs contained in the application monitoring and management repository , in accordance with rules contained by an alarm rules data store . The alarmer  may, for example, determine if any transactions or application processes are experiencing abnormal delays or other difficulties for which administrative personnel may desirably receive notification. Examples of delays or difficulties include when applications get stuck in processing transactions and may need administrative intervention to progress further. The alarm rules may identify normal metrics for processes and alarm thresholds for minor, medium, major metrics. For example, a process may have a normal completion time metric of 5 minutes, have a minor processing time threshold of 7 minutes, a medium processing time threshold of 10 minutes, and a major time threshold of 20 minutes. If the alarm rules indicate that a transaction is experiencing an abnormal delay, the alarmer  encapsulates this information in a message to an alert dispatcher  that sends an appropriate notification or alarm to the responsible persons. The notifications may indicate an alarm severity level, for example a minor alarm severity, a medium alarm severity, or a major alarm severity. The alarm rules may also identify service level agreements (SLAs) for specific transactions and\/or portions of transactions, and the alarmer  may analyze the logs contained in the application monitoring and management repository  in accordance with the service level agreements contained in the rules to determine if any applications or processes are failing to meet their service level agreements. When a service level agreement is broken, the alarm  may encapsulate this information in a message to the alert dispatcher  that sends an appropriate notification or alarm to the responsible persons. The alerts described above also may be referred to as alarms. These alarms are merely examples of some of the capabilities of the present system, but other alarms of varying degrees of simplicity or complexity that involve monitoring and analysis of aspects of the applications and\/or transactions may be employed, all of which are within the spirit and scope of the present disclosure and will be apparent to those skilled in the art.","The alert dispatcher  may send an email, a voicemail message, a page, or other message, indicating the alarm severity level, to the responsible persons. The alert dispatcher  may also provide alarm text to the console  for display. The console  may display the alarm text color coded to indicate the severity level of the alarm condition. The alarmer  and alert dispatcher  are software components that execute on the application monitoring and management host . In another embodiment, the alarmer  and the alert dispatcher  may execute on a separate host machine (not shown). In an embodiment, the alert dispatcher  forms a part of the alarmer . The alarm rules data store  is depicted in  as an independent data store, but in an alternate embodiment the alarm rules data store  may be a file or a plurality of files in the file system of the application monitoring and management host . Storing the rules in a file or in a data store promotes ease of rules revision. In an embodiment, the function of the alarmer  may be provided by the controller .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["400","402"]},"The process further includes delivering the generated data from the plurality of application hosts to a monitoring host separate from the plurality of application hosts using a plurality of communication mechanisms comprising two or more elements of the group consisting of a message based communication mechanism, a log based communication mechanism, and a file based communication mechanism, wherein one of the plurality of communication mechanisms is on each of the plurality of application hosts, and wherein one of the plurality of communication mechanisms is configurable (block ). The process further includes receiving by the monitoring host separate from the plurality of application hosts, the generated data using a plurality of reception mechanisms on the monitoring host comprising two or more elements of the group consisting of a message based reception mechanism, a log based reception mechanism, and a file based reception mechanism, and wherein each of the plurality of communication mechanisms delivers the generated data to a corresponding one of the plurality of reception mechanisms (block ).","The process further includes configuring the configurable communication mechanism by a controller on the monitoring host separate from the plurality of application hosts (block ). The process further includes sending the received data to a data store according to the configured configurable communication mechanism (block ). The process further includes analyzing the data in the data store according to a user defined level of detail (block ). The process terminates thereafter.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5","FIG. 5","FIG. 4"]},"The process begins by invoking by the application a first method to initialize the collection of the data (block ). The process further includes invoking by the application a second method to record the beginning of a transaction (block ). The process further includes invoking by the application a third method to record the end of the transaction (block ). The process further includes invoking by the application a fourth method to terminate the collection of the data (block ). The process terminates thereafter.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 6","FIG. 6","FIG. 4"]},"The process begins by identifying at least one of the data that indicate the application has failed to meet a service level agreement (block ). The process further includes displaying a message on a user interface identifying the transaction of the application that has failed to meet the service level agreement, the message displayed in a color coded to the severity of the failure to meet the service level agreement (block ).",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 7","FIG. 7","FIG. 4"]},"The process begins by using the data in the data store according to the user defined level of detail to generate a report on the application (block ). The process further includes changing the configuration of the environment of the applications based on the report (block ). The process terminates thereafter.","The system described above may be implemented on any general-purpose computer with sufficient processing power, memory resources, and network throughput capability to handle the necessary workload placed upon it.  illustrates a typical, general-purpose computer system suitable for implementing one or more embodiments disclosed herein. The computer system  includes a processor  (which may be referred to as a central processor unit or CPU) that is in communication with memory devices including secondary storage , read only memory (ROM) , random access memory (RAM) , input\/output (I\/O) devices , and network connectivity devices . The processor may be implemented as one or more CPU chips.","The secondary storage  is typically comprised of one or more disk drives or tape drives and is used for non-volatile storage of data and as an over-flow data storage device if RAM  is not large enough to hold all working data. Secondary storage  may be used to store programs which are loaded into RAM  when such programs are selected for execution. The ROM  is used to store instructions and perhaps data which are read during program execution. ROM  is a non-volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage. The RAM  is used to store volatile data and perhaps to store instructions. Access to both ROM  and RAM  is typically faster than to secondary storage .","I\/O devices  may include printers, video monitors, liquid crystal displays (LCDs), touch screen displays, keyboards, keypads, switches, dials, mice, track balls, voice recognizers, card readers, paper tape readers, or other well-known input devices. The network connectivity devices  may take the form of modems, modem banks, ethernet cards, universal serial bus (USB) interface cards, serial interfaces, token ring cards, fiber distributed data interface (FDDI) cards, wireless local area network (WLAN) cards, radio transceiver cards such as Global System for Mobile Communications (GSM) radio transceiver cards, and other well-known network devices. These network connectivity devices  may enable the processor  to communicate with an Internet or one or more intranets. With such a network connection, it is contemplated that the processor  might receive information from the network, or might output information to the network in the course of performing the above-described method steps. Such information, which is often represented as a sequence of instructions to be executed using processor , may be received from and outputted to the network, for example, in the form of a computer data signal embodied in a carrier wave.","Such information, which may include data or instructions to be executed using processor  for example, may be received from and outputted to the network, for example, in the form of a computer data baseband signal or signal embodied in a carrier wave. The baseband signal or signal embodied in the carrier wave generated by the network connectivity devices  may propagate in or on the surface of electrical conductors, in coaxial cables, in waveguides, in optical media, for example optical fiber, or in the air or free space. The information contained in the baseband signal or signal embedded in the carrier wave may be ordered according to different sequences, as may be desirable for either processing or generating the information or transmitting or receiving the information. The baseband signal or signal embedded in the carrier wave, or other types of signals currently used or hereafter developed, referred to herein as the transmission medium, may be generated according to several methods well known to one skilled in the art.","The processor  executes instructions, codes, computer programs, scripts which it accesses from hard disk, floppy disk, optical disk (these various disk based systems may all be considered secondary storage ), ROM , RAM , or the network connectivity devices .","While several embodiments have been provided in the present disclosure, it should be understood that the disclosed systems and methods may be embodied in many other specified forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive, and the intention is not to be limited to the details given herein, but may be modified within the scope of the appended claims along with their full scope of equivalents. For example, the various elements or components may be combined or integrated in another system or certain features may be omitted, or not implemented.","Also, techniques, systems, subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems, modules, techniques, or methods without departing from the scope of the present disclosure. Other items shown or discussed as directly coupled or communicating with each other may be coupled through some interface or device, such that the items may no longer be considered directly coupled to each other but may still be indirectly coupled and in communication, whether electrically, mechanically, or otherwise with one another. Other examples of changes, substitutions, and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present disclosure and the advantages thereof, reference is now made to the following brief description, taken in connection with the accompanying drawings and detailed description, wherein like reference numerals represent like parts.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
