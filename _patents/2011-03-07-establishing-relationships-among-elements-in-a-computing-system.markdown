---
title: Establishing relationships among elements in a computing system
abstract: Establishing relationships among elements in a computing system, the computing system including one or more servers, one or more switches, the one or more servers and one or more switches forming one or more local area networks and also forming one or more virtual local area networks, including: identifying, for each server in the computing system, physical topology data; identifying, for each server in the computing system, virtual topology data; and creating, in dependence upon the physical topology data and the virtual topology data, a system map.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621057&OS=08621057&RS=08621057
owner: International Business Machines Corporation
number: 08621057
owner_city: Armonk
owner_country: US
publication_date: 20110307
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["1. Field of the Invention","The field of the invention is data processing, or, more specifically, methods, apparatus, and products for establishing relationships among elements in a computing system.","2. Description Of Related Art","Platform or system management applications provide a user interface for single point of management of various types of systems like switches, servers, virtual machines and hypervisors. Such system management applications present individual views of systems based on the type of device that is being monitored and based on parameters like processing utilization, memory utilization, power consumption, and so on. There is difficulty in showing connectivity between a plurality of elements in a managed computing system, along with information regarding the particular networks that an element is connected to because such connections are configured at different network interfaces in the system. Establishing some correlation between the interfaces that control an element's network connections can create a comprehensive and simpler view for a user of a system management application.","Methods, apparatus, and products for establishing relationships among elements in a computing system. The computing system includes one or more servers and one or more switches. The one or more servers and one or more switches form one or more local area networks and also form one or more virtual local area networks. The methods, apparatus, and products for establishing relationships among elements in a computing system include: identifying, for each server in the computing system, physical topology data; identifying, for each server in the computing system, virtual topology data; and creating, in dependence upon the physical topology data and the virtual topology data, a system map.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of example embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of example embodiments of the invention.","Example methods, apparatus, and products for establishing relationships among elements in a computing system in accordance with the present invention are described with reference to the accompanying drawings, beginning with .  sets forth a network diagram of a computing system () in which relationships among elements of the computing system () are established according to embodiments of the present invention. The computing system () of  includes one or more servers (, , , , , ) and one or more switches (, ). In the example of , each server (, , , , , ) is automated computing machinery for providing computational services across a network. Each server (, , , , , ) may be embodied, for example, as a blade server in a blade chassis, as a stand-alone computer, or in other ways as will occur to those of skill in the art. In the example of , each switch (, ) is automated computing machinery for connecting segments in the computing system (). Although the computing system () of  includes only servers (, , , , , ) and switches (, ), the computing system () may also include other computing components such as, for example, computer storage devices, printers, personal computers, and so on.","In the example of , the one or more servers (, , , , , ) and the one or more switches (, ) form at least one local area network (\u2018LAN\u2019) (, ). Each LAN (, ) in  is a network of computers in a particular geographic region such as, for example, an office, a home, a lab, and so on. Devices in a particular LAN (, ) may communicate with devices outside of the LAN (, ) by sending data communication messages from an entity within the LAN (, ), such as the switch (, ), to devices on another network ().","In the example of , the one or more servers (, , , , , ) and one or more switches (, ) also form at least one virtual local area network (\u2018VLAN\u2019) (). Each VLAN () in  is a network of computers that function as a LAN in spite of the fact that the computers that comprise the VLAN () may not be within the same geographic region.","In the example of , relationships among elements of the computing system are established by identifying, for each server (, , , , , ) in the computing system, physical topology data. In the example of , physical topology data is data that describes the physical devices, and the connections between such physical devices, that are part of the computing system (). Physical topology data may include an identification of physical devices in the computing system (), descriptions of the devices in the computing system (), interfaces within the physical devices in the computing system () that enable the physical devices to connect to other physical devices, and so on. Physical topology data that describes data communications interfaces in a particular device may include, for example, data that describes an interface within a particular device that enables the device to connect to a LAN, data that describes an interface within a particular device that enables the device to connect to a VLAN, data that describes an interface within a particular device that enables the device to connect to an IP network, and so on. In the example of , identifying physical topology data for each server (, , , , , ) in the computing system may be carried out by polling each server (, , , , , ) for information about the server. For example, each server (, , , , , ) may be polled to identify the IP address of the server (, , , , , ), to identify the MAC address of the server (, , , , , ), to identify a particular LAN that the server (, , , , , ) is part of, and so on.","In the example of , relationships among elements of the computing system are also established by identifying, for each server (, , , , , ) in the computing system, virtual topology data. In the example of , virtual topology data is data that describes virtual devices, such as a virtual machine, that are operating on a particular physical device in the computing system (). In the example of , a virtual machine is a software implementation of automated computing machinery, such as a computer, that executes programs like a physical machine. A virtual machine is often designed to be an efficient and isolated duplicate of a physical machine. A virtual machine as that term is used in this specification provides a complete system platform to supports the execution of a resource manager and therefore often supports a complete operating system or resources of the operation system necessary for execution of the resource manager. Such a virtual machine may be, and often is, distributed. That is, portions of virtual machines according to embodiments of the present invention may reside on multiple different physical machines.","In the example of , virtual topology data may include an identification of virtual machines that are executing on a physical device in the computing system (), as well as information describing data communications interfaces associated with virtual machines that are executing on a particular physical device. Data communications interfaces associated with virtual machines that are executing on a particular physical device may include, for example, an identifier for a virtual switch that routes data communications to virtual machines that are executing on a particular physical device, an identifier of an interface associated with a virtual machine that enables the virtual machine to establish data communications with the virtual switch, and so on. In the example of , identifying virtual topology data for each server (, , , , , ) in the computing system may be carried out, for example, by polling a hypervisor that manages the virtual machines that are executing on a physical device.","In the example of , relationships among elements of the computing system are also established by creating, in dependence upon the physical topology data and the virtual topology data, a system map. In the example of , a system map is a data structure that contains information about elements, such as the servers (, , , , , ) and switches (, ), that are in the computing system (). The system map can include, for example, an identification of each physical device in the system, an identification of each virtual device such as a virtual machine that is in the system, an identification of the physical devices and virtual devices that a particular device can communicate with, information describing the data communications interfaces that a particular device utilizes to communication with other virtual devices and physical devices, and so on. In the example of , creating a system map may be carried out by combining the physical topology data and virtual topology data for each element in the computing system. Table 1 illustrates an example of a user interface generated from a system map embodied as a table that may be created for the computing system of .",{"@attributes":{"id":"p-0023","num":"0022"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"User Interface For A System Map"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IP","VLAN",{},{}]},{"entry":["System","Interface","Interface","Subnet","VLAN"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Server 108","IP01","Ep01","Subnet 102","\u2014"]},{"entry":["Server 110","IP02","Ep02","Subnet 102","\u2014"]},{"entry":["Server 112","IP03","Ep03","Subnet 102","VL106"]},{"entry":["Switch 120","IP04","Ep01","Subnet 102","\u2014"]},{"entry":["Switch 120","IP04","Ep02","Subnet 102","\u2014"]},{"entry":["Switch 120","IP04","Ep03","Subnet 102","VL106"]},{"entry":["Server 114","IP11","Ep10","Subnet 104","VL106"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Table 1 illustrates a user interface generated from a partial system map. The first column of Table 1 is titled \u201csystem\u201d and is reserved for an identifier for the particular system element that the row in the table describes. The second column of Table 1 is titled \u201cIP Interface\u201d and is reserved for a description of the IP interface for each system in the table. As shown in the table above, each device has a unique IP interface. The third column of Table 1 is titled \u201cVLAN Interface\u201d and is reserved for an identifier of the interface of a VLAN for each device. For each server, the VLAN interface is a shadow interface of the VLAN interface for a switch that the server is connected to. The fourth column of Table 1 is titled \u201cSubnet\u201d and identifies a particular subnet that a system is part of. The fifth column of Table 1 is titled \u201cVLAN\u201d and identifies the particular VLAN that the system element if part of The system map described above is only one possible embodiment. Other embodiments may include different fields and may be embodied in entirely different data structures.","The arrangement of servers and other devices making up the example system illustrated in  are for explanation, not for limitation. Computing systems useful according to various embodiments of the present invention may include additional servers, routers, other devices, and peer-to-peer architectures, not shown in , as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols, including for example TCP (Transmission Control Protocol), IP (Internet Protocol), HTTP (HyperText Transfer Protocol), WAP (Wireless Access Protocol), HDTP (Handheld Device Transport Protocol), and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .","Establishing relationships among elements in a computing system in accordance with the present invention is generally implemented with computers, that is, with automated computing machinery. For further explanation, therefore,  sets forth a block diagram of automated computing machinery comprising an example system management server () useful in establishing relationships among elements in a computing system according to embodiments of the present invention. The system management server () of  includes at least one computer processor () or \u2018CPU\u2019 as well as random access memory () (\u2018RAM\u2019) which is connected through a high speed memory bus () and bus adapter () to processor () and to other components of the system management server ().","Stored in RAM () is a system management application (), a module of computer program instructions for establishing relationships among elements in a computing system according to embodiments of the present invention. The system management application () includes a physical topology discovery module (), a module of computer program instructions for identifying, for each server in the computing system, physical topology data. The system management application () also includes a virtual topology discovery module (), a module of computer program instructions for identifying, for each server in the computing system, virtual topology data according to embodiments of the present invention. The system management application () also includes a map generation module (), a module of computer program instructions for creating, in dependence upon the physical topology data and the virtual topology data, a system map.","Also stored in RAM () is an operating system (). Operating systems useful establishing relationships among elements in a computing system according to embodiments of the present invention include UNIX\u2122, Linux\u2122, Microsoft XP\u2122, AIX\u2122, IBM's i5\/OS\u2122, and others as will occur to those of skill in the art. The operating system (), system management application (), physical topology discovery module (), virtual topology discovery module (), and map generation module () in the example of  are shown in RAM (), but many components of such software typically are stored in non-volatile memory also, such as, for example, on a disk drive ().","The system management server () of  includes disk drive adapter () coupled through expansion bus () and bus adapter () to processor () and other components of the system management server (). Disk drive adapter () connects non-volatile data storage to the system management server () in the form of disk drive (). Disk drive adapters useful in computers for establishing relationships among elements in a computing system according to embodiments of the present invention include Integrated Drive Electronics (\u2018IDE\u2019) adapters, Small Computer System Interface (\u2018SCSI\u2019) adapters, and others as will occur to those of skill in the art. Non-volatile computer memory also may be implemented for as an optical disk drive, electrically erasable programmable read-only memory (so-called \u2018EEPROM\u2019 or \u2018Flash\u2019 memory), RAM drives, and so on, as will occur to those of skill in the art.","The example system management server () of  includes one or more input\/output (\u2018I\/O\u2019) adapters (). I\/O adapters implement user-oriented input\/output through, for example, software drivers and computer hardware for controlling output to display devices such as computer display screens, as well as user input from user input devices () such as keyboards and mice. The example system management server () of  includes a video adapter (), which is an example of an I\/O adapter specially designed for graphic output to a display device () such as a display screen or computer monitor. Video adapter () is connected to processor () through a high speed video bus (), bus adapter (), and the front side bus (), which is also a high speed bus.","The example system management server () of  includes a communications adapter () for data communications with other computers such as servers (, , , ) and switches () and for data communications with a data communications network (). Such data communications may be carried out serially through RS-232 connections, through external buses such as a Universal Serial Bus (\u2018USB\u2019), through data communications networks such as IP data communications networks, and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer, directly or through a data communications network. Examples of communications adapters useful for establishing relationships among elements in a computing system according to embodiments of the present invention include modems for wired dial-up communications, Ethernet (IEEE 802.3) adapters for wired data communications network communications, and 802.11 adapters for wireless data communications network communications.","For further explanation,  sets forth a flow chart illustrating an example method for establishing relationships among elements in a computing system () according to embodiments of the present invention. The computing system () of  includes one or more servers (, , , ) and one or more switches (, ). In the example of , each server (, , , ) is automated computing machinery for providing computational services across a network. Each server (, , , ) may be embodied, for example, as a blade server in a blade chassis, as a stand-alone computer, or in other ways as will occur to those of skill in the art. In the example of , each switch (, ) is automated computing machinery for connecting segments in the computing system (). Although the computing system () of  includes only servers (, , , ) and switches (, ), the computing system () may also include other computing components such as, for example, computer storage systems, personal computers, and so on.","In the example of , the one or more servers (, , , ) and one or more switches (, ) form at least one or more LANs (, ). Each LAN (, ) in  is a network of computers in a particular geographic region such as, for example, an office, a home, a lab, and so on. Devices in a particular LAN (, ) may communicate with devices outside of the LAN (, ) by sending data communication messages from an entity within the LAN (, ), such as the switch (, ), to devices on another network. In the example of , the one or more servers (, , , ) and one or more switches (, ) also form at least one or more VLANs (). Each VLAN () in  is a network of computers that function as a LAN in spite of that the computers that comprise the VLAN () may not be within the same geographic region. Although the example of  describes the one or more servers (, , , ) and one or more switches (, ) as being segmented into multiple LANs (, ), readers will appreciate that the one or more servers (, , , ) and one or more switches (, ) may also be segmented into one or more subnets in embodiments of the present invention. Information such as a range of IP addresses for members of the subnet, a subnet mask, a subnet number may be used to define physical topology of the elements in the computing system ().","The example of  includes identifying (), for each server (, , , ) in the computing system (), physical topology data. In the example of , physical topology data is data that describes the physical devices, and the connections between such physical devices, that are part of the computing system (). Physical topology data may include an identification of physical devices in the computing system (), descriptions of the devices in the computing system (), interfaces within the physical devices in the computing system () that enable the physical devices to connect to other physical devices, and so on. Physical topology data that describes data communications interfaces in a particular device may include, for example, data that describes an interface within a particular device that enables the device to connect to a LAN, data that describes an interface within a particular device that enables the device to connect to a VLAN, data that describes an interface within a particular device that enables the device to connect to an IP network, and so on.","In the example of , identifying () physical topology data for each server (, , , ) in the computing system () may be carried out by polling each server (, , , ) for information about the server. For example, each server (, , , ) may be polled to identify the IP address of the server (, , , ), to identify the MAC address of the server (, , , ), to identify a particular LAN that the server (, , , ) is part of, and so on. Identifying () physical topology data for each server (, , , ) in the computing system () may also be carried out by polling ports on the switches (, ) to identify a particular VLAN that the server (, , , ) is part of, and so on.","The example of  also includes identifying (), for each server (, , , ) in the computing system (), virtual topology data. In the example of , virtual topology data is data that describes virtual devices, such as a virtual machine, that are operating on a particular physical device in the computing system (). In the example of , a virtual machine is a software implementation of automated computing machinery, such as a computer, that executes programs like a physical machine. A virtual machine is often designed to be an efficient and isolated duplicate of a physical machine. A virtual machine as that term is used in this specification provides a complete system platform to supports the execution of a resource manager and therefore often supports a complete operating system or resources of the operation system necessary for execution of the resource manager. Such a virtual machine may be, and often is, distributed. That is, portions of virtual machines according to embodiments of the present invention may reside on multiple different physical machines.","In the example of , virtual topology data may include an identification of virtual machines that are executing on a physical device such as the servers (, , , ) in the computing system (), as well as information describing data communications interfaces associated with virtual machines that are executing on a particular physical device. Data communications interfaces associated with virtual machines that are executing on a particular physical device may include, for example, an identifier for a virtual switch that routes data communications to virtual machines that are executing on one of the servers (, , , ), an identifier of an interface associated with a virtual machine that enables the virtual machine to establish data communications with the virtual switch, and so on. In the example of , identifying () virtual topology data for each server (, , , ) in the computing system () may be carried out, for example, by polling a hypervisor that manages the virtual machines that are executing on one of the servers (, , , ).","The example of  also includes creating (), in dependence upon the physical topology data and the virtual topology data, a system map (). In the example of , a system map () is a data structure that contains information about elements, such as the servers (, , , ) and switches (, ), that are in the computing system (). The system map () of  can include, for example, an identification of each physical device in the system, an identification of each virtual device such as a virtual machine that is in the system, an identification of the physical devices and virtual devices that a particular device can communicate with, information describing the data communications interfaces that a particular physical device or virtual device utilizes to communicate with other virtual devices and physical devices, and so on.","In the example of , creating () a system map () may be carried out by combining the physical topology data and virtual topology data for each element in the computing system (). Combining the physical topology data and virtual topology data for each element in the computing system () may include associating physical topology data with virtual topology data such that the system map includes information describing the physical components in the computing system (), the virtual components in the computing system (), and associations between such physical components and virtual components. For example, a system map () may be created by associating various pieces of physical topology data (e.g, subnet information for a subnet that each IP interface of server is part of, a LAN interface of a server that is bound to the IP interface, a VLAN interface for a server that corresponds to the LAN interface) with various pieces of virtual topology data (e.g., an identification of the virtual machines executing on a particular physical server, an identification of networks of virtual machines executing on one or more physical servers) such that a comprehensive view of each component in the computing system () and the relationships between each component in the computing system () can be constructed.","In the example of , creating () a system map () may be carried out by creating data structures to traverse relationships between subnet and VLANs for all the elements in the computing system (). In such an example, data structures may be created such that a system, its VLAN interface, and its IP interface are connected to each other as a trio. This trio acts as a key to a subnets hashmap and a VLAN hashmap. Because the key connects these items of information, connections between a subnet and a VLAN may be established in order to identify which subnets are under a particular VLAN.","The example of  also includes rendering () the system map () in a GUI (). In the example of , rendering () the system map () in a GUI () may be carried out, for example, by depicting () all system elements in a table. In the example of , rendering () the system map () in a GUI () may alternatively be carried out, for example, by depicting () all system elements in a hierarchical structure. Examples of depicting () all system elements in a table and depicting () all system elements in a hierarchical structure are described in more detail below with reference to  and .","For further explanation,  sets forth a flow chart illustrating an example method for establishing relationships among elements in a computing system () according to embodiments of the present invention. The example of  is similar to the example of  as it also includes identifying (), for each server (, , , ) in the computing system (), physical topology data; identifying (), for each server (, , , ) in the computing system (), virtual topology data; and creating (), in dependence upon the physical topology data and the virtual topology data, a system map.","In the example of , identifying () physical topology data for each server (, , , ) in the computing system () includes identifying () all IP interfaces. In the example of , an IP interface is a data structure that includes information describing a server's (, , , ) interface to an IP network. An IP interface can include information about IP addressing such as the IP address of a particular server (, , , ), subnet information such as a subnet mask for a subnetwork that a particular server (, , , ) belongs to, and so on. Identifying () all IP interfaces may be carried out, for example, by polling a server (, , , ) for its IP address, subnet mask, or other information relating to a server's (, , , ) interface to an IP network.","In the example of , identifying () physical topology data for each server (, , , ) in the computing system () also includes identifying (), for each IP interface, a LAN interface associated with the IP interface. In the example of , a LAN interface is a data structure that includes information describing the server's (, , , ) interface to a LAN. A LAN interface can include information such as the MAC address of the server (, , , ) that connects to the LAN. Identifying (), for each IP interface, a LAN interface associated with the IP interface may be carried out, for example, by polling the server (, , , ) for its MAC address or other information relating to the server's (, , , ) interface to a LAN.","In the example of , identifying () physical topology data for each server (, , , ) in the computing system () also includes identifying (), for each LAN interface, a connected LAN interface. In the example of , a connected LAN interface is an interface that resides with a device other than the server (, , , ) that includes the LAN interface. The connected LAN interface enables the device that includes the connected LAN interface to connect to the same LAN as the server (, , , ) that includes the LAN interface. Identifying (), for each LAN interface, a connected LAN interface may be carried out, for example, through the use of the Address Resolution Protocol (\u2018ARP\u2019), Neighbor Discovery Protocol (\u2018NDP\u2019), or other mechanism for identifying link layer addresses for adjacent computing devices.","In the example of , identifying () physical topology data for each server (, , , ) in the computing system () also includes determining (), for each connected LAN interface, whether the connected LAN interface belongs to a switch. Determining (), for each connected LAN interface, whether the connected LAN interface belongs to a switch may be carried out by polling the device that includes the connected LAN interface for device information, for example, using a discovery protocol such as the Link Layer Discovery Protocol (\u2018LLDP\u2019).","In the example of , identifying () physical topology data for each server (, , , ) in the computing system () also includes identifying () a virtual LAN interface that is associated with the connected LAN interface for each connected LAN interface that belongs to a switch. In the example of , a virtual LAN interface is a data structure that includes information describing an interface between a server and a VLAN. In the example of , the virtual LAN interface resides with the switch, or a port thereon, such that identifying () a virtual LAN interface that is associated with the connected LAN interface is carried out by polling the switch. A virtual LAN interface can include information such as an identifier for the VLAN and an identifier of a particular port on the switch that connects the server to the VLAN. Identifying () a virtual LAN interface that is associated with the connected LAN interface may be carried out, for example, by polling the switch that includes the connected LAN interface for VLAN information using a discovery protocol such as LLDP.","In the example of , identifying () physical topology data for each server (, , , ) in the computing system () also includes creating (), for each virtual LAN interface, a shadow virtual LAN interface for the server (, , , ). In the example of , a shadow virtual LAN interface is a data structure that includes information describing an interface between a server and a VLAN. The shadow virtual LAN interface resides with the server and mirrors a virtual LAN interface that resides with a switch. The shadow virtual LAN interface may therefore be used to consolidate information, such an virtual LAN interface, IP interface, and LAN interface, on a single device such as the server (, , , ) rather than having this information distributed across multiple devices such as the switch and the servers (, , , ). In the example of , creating (), for each virtual LAN interface, a shadow virtual LAN interface for the server (, , , ) may be carried out, for example, by gathering information regarding each virtual LAN interface on each switch and storing such information with each server that a virtual LAN interface is associated with.","In the example of , identifying () physical topology data for each server (, , , ) in the computing system () also includes associating (), for each shadow virtual LAN interface, the shadow virtual LAN interface with the LAN interface and the IP interface. In the example of , associating (), for each shadow virtual LAN interface, the shadow virtual LAN interface with the LAN interface and the IP interface may be carried out, for example, by through the use of a table or other data structure in which a single record includes fields for specifying an identifier for a shadow virtual LAN interface, an identifier for a LAN interface, and an identifier for a IP interface such that each of the interfaces are associated with each other based on their inclusion in a single record.","For further explanation,  sets forth a flow chart illustrating an example method for establishing relationships among elements in a computing system () according to embodiments of the present invention. The example of  is similar to the examples of  and  as it also includes identifying (), for each server (, , , ) in the computing system (), physical topology data; identifying (), for each server (, , , ) in the computing system (), virtual topology data; and creating (), in dependence upon the physical topology data and the virtual topology data, a system map.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data includes identifying () each hypervisor running on the server (, , , ). In the example of , a hypervisor is a module of automated computing machinery for managing virtual machines that are executing on a particular physical device. The hypervisor is a mechanism of platform-virtualization, a module of automated computing machinery that allows multiple operating systems to run concurrently in separate virtual machines on a same host computer. Hypervisors may be embodied as native, bare metal hypervisors that run directly on a host's hardware or alternatively embodied as hosted hypervisors that run within an operating system environment. Examples of hypervisors useful or that can be improved for use in administration of virtual machine affinity in a data center according to embodiments of the present invention include IBM's zNM\u2122, VMware's vCenter\u2122, INTEGRITY\u2122 from Green Hills Software, LynxSecure\u2122 from LynuxWorks, IBM's POWER Hypervisor (PowerVM)\u2122, Oracle's VM Server\u2122, and Sun's Logical Domains Hypervisor\u2122.","In the example of , identifying () each hypervisor running on the server may be carried out, for example, by polling the server to identify hypervisors running on the server (, , , ). In some embodiments, each hypervisor must register with an operating system such that polling the server to identify hypervisors running on the server (, , , ) can include requesting from the operating system a list of processes running on the operating system and identifying those processes that correspond to a hypervisor. Alternatively, the hypervisor itself may expose an application programming interface (\u2018API\u2019) that enables calls to be made directly to the hypervisor itself so that discovery calls can be made to the hypervisor which will reveal itself in turn.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data also includes identifying (), for each hypervisor running on the server, all virtual switches. In the example of , a virtual switch is a software construct for routing data communications to a particular virtual machine that is supported by a particular hypervisor. Identifying (), for each hypervisor running on the server, all virtual switches may be carried out, for example, by polling the hypervisor and requesting the identity of such virtual switches. Alternatively, if a hypervisor is managing the operations of multiple virtual machines, it can be assumed that a virtual switch, or functionality that is similar to the functionality of a virtual switch, is operational so that data communications can be routed to one of the many virtual machines that the hypervisor is managing.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data also includes creating (), for each virtual switch, a LAN interface, a virtual LAN interface, and a port interface. In the example of , creating (), for each virtual switch, a LAN interface, a virtual LAN interface, and a port interface may be carried out, for example, by creating data structures for each interface. Each interface may include information such as an identifier of the virtual switch, an identifier of the LAN that the LAN interface can be used to connect to, and so on.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data also includes identifying (), for each hypervisor running on the server, all virtual network adapters. In the example of , a virtual network adapter is a software construct that represents a virtual machine's connection interface to a network. Identifying (), for each hypervisor running on the server, all virtual network adapters may be carried out, for example, by identifying each virtual machine that a hypervisor supports and polling each virtual machine for information describing the virtual network adapter that serves as the virtual machine's interface to a network. Such information may be stored by the hypervisor such that the hypervisor itself has access to information describing the virtual network adapter that serves as the virtual machine's interface to a network.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data also includes identifying (), for each virtual network adapter, a virtual machine that hosts the virtual network adapter. In the example of , identifying (), for each virtual network adapter, a virtual machine that hosts the virtual network adapter may be carried out by storing, in a table or other suitable data structure, information describing the virtual network adapter that serves as each virtual machine's interface to a network along with an identifier for each virtual machine.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data also includes identifying (), for each virtual network adapter, a virtual switch that is connected to the virtual network adapter. In the example of , identifying (), for each virtual network adapter, a virtual switch that is connected to the virtual network adapter may be carried out, for example, by polling a hypervisor that manages the virtual machine that the virtual network adapter is associated with to determine which virtual switch the hypervisor is connected to. In such an example the virtual switch the hypervisor is connected to may be identified as the virtual switch that is connected to the virtual network adapter.","For further explanation,  sets forth a flow chart illustrating an example method for establishing relationships among elements in a computing system () according to embodiments of the present invention. The example of  is similar to the examples of  as it also includes identifying (), for each server (, , , ) in the computing system (), physical topology data; identifying (), for each server (, , , ) in the computing system (), virtual topology data; and creating (), in dependence upon the physical topology data and the virtual topology data, a system map.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data includes identifying (), for each hypervisor running on the server, all virtual machine virtual LANs. In the example of , each virtual machine virtual LAN includes one or more virtual machines that operate as a local area network of virtual machines. In the example of , identifying (), for each hypervisor running on the server, all virtual machine virtual LANs may be carried out, for example, by polling each hypervisor for information describing a particular virtual machine virtual LAN that each virtual machine that the hypervisor manages is part of, by polling each virtual machine itself to determine which virtual machine virtual LAN the virtual machine is connected to, or by polling a virtual switch for such information. After identifying each virtual machine virtual LAN, the virtual machine virtual LAN information from the virtual switch may be ported to the virtual machine in the form of shadow virtual machine virtual LAN interfaces. That is, an interface may be created on each virtual machine that mirrors the virtual machine virtual LAN interfaces contained in the virtual switch. The shadow virtual machine virtual LAN interfaces may also be included as members of the virtual machine virtual LAN.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data also includes associating () each virtual machine virtual LAN with a virtual LAN that includes the server. In the example of , associating () each virtual machine virtual LAN with a virtual LAN that includes the server may be carried out, for example, by creating a table or other data structure whose records include a field for a virtual machine virtual LAN identifier with a virtual LAN identifier such that populating a record with an identifier for a virtual machine virtual LAN and also populating the same record with an identifier for the virtual LAN that includes the server associates the virtual machine virtual LAN with the virtual LAN that includes the server.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data may alternatively include identifying (), for each hypervisor running on the server, all virtual machine virtual LANs. In the example of , each virtual machine virtual LAN includes one or more virtual machines that operate as a local area network of virtual machines. Identifying (), for each hypervisor running on the server, all virtual machine virtual LANs may be carried out, for example, by polling each hypervisor for information describing a particular virtual machine virtual LAN that each virtual machine that the hypervisor manages is part of, by polling each virtual machine itself to determine which virtual machine virtual LAN the virtual machine is connected to, or by polling a virtual switch for such information.","In the example of , identifying (), for each server (, , , ) in the computing system (), virtual topology data may also alternatively include associating () each virtual machine virtual LAN with a LAN that includes the server. In the example of , associating () each virtual machine virtual LAN with a LAN that includes the server may be carried out, for example, by creating a table or other data structure whose records include a field for a virtual machine virtual LAN identifier with a LAN identifier such that populating a record with an identifier for a virtual machine virtual LAN and also populating the same record with an identifier for the LAN that includes the server associates the virtual machine virtual LAN with the LAN that includes the server.","In the example of , creating a system map may be carried out by creating data structures to traverse relationships between subnet and VLANs for all the elements in the computing system. In such an example, data structures may be created such that a system, its VLAN interface, and its IP interface are connected to each other as a trio. This trio acts as a key to a subnets hashmap and a VLAN hashmap. Because the key connects these items of information, connections between a subnet and a VLAN may be established in order to identify which subnets are under a particular VLAN.","For further explanation,  sets forth an example GUI in which a system map is depicted as a table according to embodiments of the present invention. In the example of , each entry in the table is collapsible or expandable so as to depict relationships between the entries in table. In the example of , the GUI indicates that the depicted system map identifies a two virtual LANs: VLAN  and VLAN .","In the example of , VLAN  includes one subnet labeled as SUBN . The subnet includes two servers labeled as SRVR  and SRVR . The first server, labeled as SRVR , includes two virtual machines and an IP interface. The second server, labeled as SRVR , also includes two virtual machines and an IP interface. The VLAN  also includes one switch labeled as SWITCH .","In the example of , VLAN  includes one subnet labeled as SUBN . The subnet includes two servers labeled as SRVR  and SRVR . The first server, labeled as SRVR , includes two virtual machines and an IP interface. The second server, labeled as SRVR , also includes two virtual machines and an IP interface. The VLAN  also includes one switch labeled as SWITCH . Each entry in the table also includes an entry labeled as \u2018Access\u2019 that identifies whether the particular element is accessible by a system management application. Each entry in the table also includes an entry labeled as \u2018Problems\u2019 that identifies problems, error conditions, and the like that may exist at the particular element that is associated with a particular entry in the table. For example, the entry in the table for SRVR  indicates that the server is experiencing a low battery' condition, and the entry for SWITCH  indicates a software-out-of-date condition indicating that some software on the switch is in need of an update.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 8","FIG. 8","FIG. 8","FIG. 8"],"b":["1","2","3","4","5","1","1","2","3","117"]},"In the example of , SRVR  also has a second IP interface labeled as 10.20.5.1. The IP interface labeled as 10.20.5.1 is part of a subnet labeled as 10.20.0.0. The subnet labeled as 10.20.0.0 also includes IP interfaces labeled as 10.20.5.10, 10.20.5.11, and 10.20.5.20, which belong to SRVR , SRVR , and SRVR , respectively. As shown in , all members of subnet 10.20.0.0 are members of VLAN  as well.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
