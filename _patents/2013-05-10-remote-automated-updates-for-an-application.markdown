---
title: Remote automated updates for an application
abstract: In one embodiment, a method updates a media program streaming application for a media program streaming service. The method downloads the application, which includes a bootstrap application, through a distribution site. The bootstrap application receives a manifest from a remote server that lists remote core files. The bootstrap application determines if a core memory contains updateable core files corresponding to the remote core files. The method determines if an updateable core file is present in the core memory that matches a remote core file and loads the updateable core file from the core memory into a memory. If an updateable core file that matches the remote core file is not present in the core memory, the method requests the remote core file from the remote server and loading the received remote core file into the memory. The method then executes the core files in the memory without recompilation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09210211&OS=09210211&RS=09210211
owner: HULU, LLC
number: 09210211
owner_city: Santa Monica
owner_country: US
publication_date: 20130510
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure claims priority to U.S. Provisional App. No. 61\/645,163, entitled \u201cRemote Automated Updates\u201d, filed May 10, 2012, the contents of which is incorporated herein by reference in its entirety.","A user may use a \u201cliving room\u201d device, such as a game console, set-top box, streaming media device, smartphone, tablet, or other computing device, to access a streaming media program service to have media programs streamed to the device. However, before accessing the service, the user must download an application for the streaming media program service to the device. In some cases, a distribution site regulates which applications a device can install. For example, an original equipment manufacturer (OEM) that sold the device may maintain an OEM distribution site that aggregates available applications that a device can install. In this case, a user of the device must go to the distribution site to download the streaming media program application from the streaming media program service. In another example, the distribution site may pre-install approved applications on the device. In either case, for the streaming media program service to have an application pre-installed on the device or be available for download on the distribution site, the streaming media service has to have the application approved by the distribution site. This usually involves an approval process in which the streaming media program service submits the application to the owner of the distribution site for approval.","After releasing the application, the streaming media program service may update the application very frequently to add features, fix bugs, etc. The update experience may be complicated and may require a user to perform many manual steps. For example, a user may launch the streaming media program service application to watch a media program. However, instead of having the streaming media program service application launched, the user encounters a modal dialog instructing the user to manually download and reinstall the streaming media program service application from a different menu. The user then has to then exit the streaming media program service application and launch another menu or application. For example, the other menu may be page for the distribution site where the user can update applications. Then, the user has to search for the streaming media program service application in the menu, select the streaming media program service application, and start the update. The update process then downloads and reinstalls the application. Once finished, the user can go back to the original streaming media program service application and re-launch the application.","In one embodiment, a method updates a media program streaming application for a media program streaming service. The method downloads the media program streaming application, which includes a bootstrap application, through a distribution site to a computing device. The initial installation of the media program streaming application is coordinated through the distribution site to approve the media program streaming application for download. Upon startup of the media program streaming application, the method runs the bootstrap application to determine if the media program streaming application on the computing device needs to be updated. The bootstrap application sends a request for a manifest to a remote server and receives the manifest from the remote server where the manifest lists a set of remote core files stored at the remote server. The bootstrap application reviews the manifest to determine if a core memory on the computing device contains a set of updateable core files that correspond to the set of remote core files. For each remote core file, the method performs: if an updateable core file is present in the core memory that matches a remote core file, loading the updateable core file from the core memory into an application execution memory and if the updateable core file that matches the remote core file is not present in the core memory, requesting the remote core file from the remote server, receiving the remote core file from the remote server, and loading the received remote core file into the application execution memory, the remote core file being received without communicating with the distribution site. The method then executes the loaded updateable core files and the received remote core files in the application memory without recompilation of the loaded updateable core files or remote core files to provide the streaming media program service.","In one embodiment, a non-transitory computer-readable storage medium contains instructions for updating a media program streaming application for a media program streaming service. The instructions, when executed, control a computer device to be configured for: downloading the media program streaming application including a bootstrap application through a distribution site, wherein initial installation of the media program streaming application is coordinated through the distribution site to approve the media program streaming application for download; upon startup of the media program streaming application, running the bootstrap application to determine if the media program streaming application needs to be updated; sending, by the bootstrap application, a request for a manifest to a remote server; receiving, by the bootstrap application, the manifest from the remote server, wherein the manifest lists a set of remote core files stored at the remote server; reviewing, by the bootstrap application, the manifest to determine if a core memory on the computing device contains a set of updateable core files that correspond to the set of remote core files; for each remote core file, performing: if an updateable core file is present in the core memory that matches a remote core file, loading the updateable core file from the core memory into an application execution memory; and if the updateable core file that matches the remote core file is not present in the core memory, requesting the remote core file from the remote server, receiving the remote core file from the remote server, and loading the received remote core file into the application execution memory, the remote core file being received without communicating with the distribution site; and executing the loaded updateable core files and the received remote core files in the application execution memory without recompilation of the loaded updateable core files or remote core files to provide the streaming media program service.","In one embodiment, a system for updating a media program streaming application for a media program streaming service is provided. The system includes: a remote server storing a remote core for the media program streaming application and a manifest listing a set of remote core files for the remote core; and a client device configured for: downloading the media program streaming application including a bootstrap application through a distribution site, wherein initial installation of the media program streaming application is coordinated through the distribution site to approve the media program streaming application for download; upon startup of the media program streaming application, running the bootstrap application to determine if the media program streaming application needs to be updated; sending, by the bootstrap application, a request for a manifest to the remote server; receiving, by the bootstrap application, the manifest from the remote server, wherein the manifest lists a set of remote core files stored at the remote server; reviewing, by the bootstrap application, the manifest to determine if a core memory on the computing device contains a set of updateable core files that correspond to the set of remote core files; for each remote core file, performing: if an updateable core file is present in the core memory that matches a remote core file, loading the updateable core file from the core memory into an application execution memory; and if the updateable core file that matches the remote core file is not present in the core memory, requesting the remote core file from the remote server, receiving the remote core file from the remote server, and loading the received remote core file into the application execution memory, the remote core file being received without communicating with the distribution site; and executing the loaded updateable core files and the received remote core files in the application execution memory without recompilation of the loaded updateable core files or remote core files to provide the streaming media program service.","The following detailed description and accompanying drawings provide a better understanding of the nature and advantages of particular embodiments.","Described herein are techniques for an automated update system. In the following description, for purposes of explanation, numerous examples and specific details are set forth in order to provide a thorough understanding of particular embodiments. Particular embodiments as defined by the claims may include some or all of the features in these examples alone or in combination with other features described below, and may further include modifications and equivalents of the features and concepts described herein.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","108","102","100","104","106"]},"Service provider  may provide a service through application . For example, service provider  provides a media program streaming service that a user can use to stream media programs to device  using application . Media programs may include videos, audio files (e.g., music), pictures, and other audio\/visual content. In one example, users use application  to select videos to stream to a media player  on device . Although the media program streaming service is described, it will be recognized that other services may be appreciated, such as application  may be providing a game, service, social networking site, etc.","Before device  can access the service, device  needs to download application . In one embodiment, the initial download of application  needs to be through distribution site . Distribution site  is maintained by an owner of distribution site , such as an original equipment manufacturer (OEM) of device , a company associated with a platform or operating system of device , or an owner of an application marketplace. Distribution site  regulates which applications can be installed on device . Thus, a user of device  cannot directly download and install application  from service provider  without going through distribution site . As discussed briefly above, to release an application  on distribution site , service provider  first provides application  to the owner of distribution site . The owner would then evaluate application  for approval. Once approved, distribution site  may offer application  for download or pre-install application on device .","At some point, a user of device  may go to distribution site  and request installation of application . In response, distribution site  allows the download of application  to device . In one example, a user of a smartphone, game console, or other living room device may open a page for distribution site  that shows various applications that can be installed. The user may then select the media program streaming service application from service provider . Device  downloads the media program streaming service application  and installs application  on device . Thereafter, the user may use application  to access the media program streaming service to have media programs streamed to device . Downloading application  from distribution site  may be different from opening a web browser and downloading a web page. Once downloaded, application  is stored on device  for future use, and will not require the user to go to distribution site  to access application  in the future. In most instances, application  will include code that is designed for device  and must be run natively. As application  is run, addition code is not downloaded from a remote source, such as a web page is not downloaded to display additional information. The use of the native application can be based on a need for additional functionality that a browser on the device cannot provide, for performance purposes, or for platforms that do not support a full web browser experience and only support native code. Application  can also be accessed offline (e.g., without a connection to the Internet).","As discussed above, distribution site  may also pre-install application  on device . In this case, device  may have the application pre-installed when a user purchases device . Although the user does not have to download application  from distribution site , service provider  still has to have application  approved by distribution site  before pre-installation.","At some point after installation on device , service provider  updates application . For example, service provider  may add new features, fix bugs, or enhance features for application . To provide the best experience, it is desirable that application  is updated with minimal disruption to the user. Particular embodiments provide users with a seamless update experience that may be optimized for their device and viewing experience. For example, when the user launches the application to view a media program, in the background, new updates for the service are detected, and the application seamlessly updates without requiring user interaction. The user may proceed to a menu of application  and start watching the media program without any disruption as the application updates are loaded (e.g., patched) in the background upon startup. In another example, some devices, such as smart televisions (TVs) require a full firmware update to update any individual application residing on the smart TV. That is, the company that owns the smart TV pushes a major update that switches out all of the code for the entire smart TV to update a single application residing on the smart TV. The company performs these updates infrequently due to the inconvenience. Thus, particular embodiments would allow updates to be performed more frequently and service provider  does not need to wait until the smart TV is updated. Also, the company may stop supporting the smart TV as the product ages. Then, it is possible that the company will refuse to push any future firmware updates to the smart TV. In these situations, particular embodiments would allow service provider  to continue to update application ","Before discussing the update process, a structure of application  will be described.  depicts an example of application  according to one embodiment. In one embodiment, application  includes user interface and application logic for the media program streaming service. As shown, application  includes bootstrap application , core , and native application . Native application  may execute bootstrap application  and core . Bootstrap application  and core  may be interpreted applications, such as interpreted Javascript\u2122 applications. An interpreted application does not need explicit compilation to run. Rather, native application  may execute bootstrap application  and core  directly without compilation of bootstrap application  and core . For example, native application  may be a native application running on device  that includes an interpreter, such as a Javascript\u2122 interpreter, that can interpret software code of bootstrap application  and core  without requiring compilation of bootstrap application  and core . Native application  may be coded in a native language (e.g., C++) supported by device  that enables the device to interpret and execute bootstrap application  and core . Native application  also provides connections between the base application programming interfaces (APIs) of device  and bootstrap application  and core .","Bootstrap application  may be logic that is executed every time application  is launched on device . For example, every time a user opens application , bootstrap application  runs. The actions of bootstrap application  will be described in more detail below.","Core  may be files that native application  executes to provide the service. For example, core  may include application logic for the user interface and other features that allow a user to stream media programs to device . Once bootstrap application  runs, native application  executes core  to provide the media program streaming service.","Particular embodiments leverage bootstrap application  to provide the update experience. For example, when the user launches application  to access the media program streaming service, native application  first executes bootstrap application . In the background, bootstrap application  may detect whether new updates for the media program streaming service are available, and update application  without requiring any user interaction or navigation to another menu. In one embodiment, bootstrap application  may load the updates (e.g., patch) to application  in the background while the user can start streaming media programs.","In one embodiment, bootstrap application  may update application  without requiring device  (or bootstrap application ) to contact distribution site . That is, bootstrap application  may contact a remote server directly to receive the updates without having to receive the updates through distribution site . This allows service provider  to provide updates without requiring the user to exit application  and open distribution site . This provides a better user experience as the user does not have to continually access distribution site  to update application . Also, service provider  can quickly deliver new features on application , fine-tune application , reduce loading time of application , optimize application  for different user profiles, immediately fix problems that are discovered for application , and reduce support costs for new updates.","To allow application  to automatically update without going through distribution site , bootstrap application  is included in the application that is initially provided to distribution site , and bootstrap application  includes logic configured to access a remote server to detect updates directly without going through distribution site . Before describing the update process, a state of device  upon initial installation will be described.  depicts an example installation of application  in device  according to one embodiment. As shown, bootstrap application  has been installed on device . Additionally, local storage  includes a local core  that includes local core files ---. Local core files ---may be files for the core of application  that were downloaded from distribution site . Distribution site  has approved native application , bootstrap application , and local core  for download and installation to device .","Local storage  may be persistent storage on device . That is, when device  is shut down or restarted, local core  is persistently stored and not deleted upon shut down or restart. Local core  cannot be modified without an update through distribution site . Additionally, a user would have to uninstall application  to delete local core  from local storage .","Device  also includes a core memory  that stores a remote core that is downloaded from a remote server. Core memory  may be persistent storage that allows the core stored within core memory  to be modified (unlike local core ). Although shown separately, core memory  may be part of local storage . In one embodiment, core memory  is where device  stores saved information for application . By using core memory  to store a core, particular embodiments may update application . As discussed above local core  cannot be modified without an update through distribution site . However, a core stored in core memory  may be updated or modified.","When application  is initially accessed for the first time, core memory  does not include a core. There also may be other times when core memory  does not include a core, such as when device  clears core memory . When core memory  does not include a core, device  may download an entire remote core from a remote server, load local core  from local storage , or load a combination of local core  and the remote core.  depicts an example of requesting a remote core from a remote server  according to one embodiment. A remote server  includes a remote core  that includes the latest updates for application . For example, remote core files ---include updated core files for application . Remote server  may be remotely located from device  and may be accessed via a wide area network (WAN). Also, in one embodiment, device  does not access remote server  through distribution site .","In addition to including remote core , remote server  includes a manifest  that lists the remote core files ---that are included in the latest remote core . For example, manifest  lists remote core files ---by filename. Manifest  may also include parameters that uniquely identify each remote core file , such as using a hash of the file contents and a size of the file. Manifest  may include other information that can be used to uniquely identify each remote core file . Although manifest  is discussed, particular embodiments may not use manifest at all. For example, bootstrap application  may just download all of remote core  or send a request for files in a folder.","To execute application , device  needs to load core files for application  into memory , which may be random access memory (RAM), cache memory, or other memory in which applications are executed. To allow for the most recent application  to be used, bootstrap application  communicates with remote server  to determine if any updates are available. In this example, device  does not include a core that is stored in core memory . In this case, bootstrap application  may load an entire core from remote server  into memory , or may load some local core files  into memory  and some files from remote core  that are missing from local core  into memory .","In one embodiment, bootstrap application , upon startup, sends a request to remote server  for manifest . Remote server  then responds to the request by sending manifest  to bootstrap application . Once receiving manifest , bootstrap application  uses manifest  to determine which core files are present within core memory . In this case, because application  is initially being used (or the core memory has been cleared), core memory  does not include any updateable core files for application . Thus, bootstrap application  requests each remote core file  from remote server  and subsequently receives these files. Bootstrap application  then can store the received remote core files  in memory . It will be understood that bootstrap application  may store remote core files  in core memory  first, and then load the core files from core memory  to memory . Subsequently, native application  can execute the received remote core files  in memory  to provide the media program streaming service.","If the received remote core files  have not already been stored in core memory , bootstrap application  stores the received remote core files  in core memory  as \u201cupdateable core files\u201d. These files are updateable at least in part because they are not stored as part of the core that was downloaded from distribution site . Also, manifest  is stored in core memory  as a stored manifest. The use of the stored manifest will be described below in case when a failure of loading a remote core occurs. By storing remote core files  in core memory , bootstrap application  does not need to load the same remote core files  from remote server  upon a subsequent startup. However, if a remote core file  at remote server  is updated or a new remote core file  is included in remote core , then bootstrap application  updates application .","At each startup, bootstrap application  may check remote server  to determine if any updates to remote core  have been performed.  depicts an example of performing an update of an updateable core  according to one embodiment. Bootstrap application  sends a request for manifest  to remote server  as described above. Remote server  then responds with manifest , which represents the latest updates to application .  depicts an example of a manifest  according to one embodiment. In a list  (e.g., an array), manifest  lists the core files included in the most recent remote core . Manifest  lists characteristics for each remote core file . The characteristics may uniquely identify a remote core file  such that bootstrap application  can determine if a similar core file is stored in core memory . For example, at , characteristics of a remote core file named \u201ccore6.js\u201d include a hash of the file contents and an overall size of the file core6.js. The hash of the contents may uniquely identify the file core6.js and the overall size of the file core6.js may measure the storage size. Manifest  may also include other characteristics that may uniquely identify the file core6.js. Manifest  further lists similar characteristics for each remote core file  included in manifest . Also, at , manifest  includes a root location to download remote core files  from.","Referring back to , bootstrap application  checks whether updateable core  includes each remote core file  listed in manifest . For example, for each file name shown in list , bootstrap application  checks if an updateable core file  includes a matching hash in core memory . In one example, core memory  may include an invoice listing  that lists the hash and size for each updateable core file . If bootstrap application  finds an updateable core file  that matches the hash and size (it should be understood that both the hash and size may not be used\u2014e.g., just the hash or the size may be used), then bootstrap application  loads the updateable core file  into memory . If bootstrap application  does not find an updateable version of remote core file , then, bootstrap application  sends a request for the missing remote core file  to remote server . Remote server  sends the requested remote core file  to device , and bootstrap application  loads the received remote core file  into memory . This process continues as bootstrap application  reviews each file in manifest  to make sure every remote core file  is loaded into memory .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5B","b":["306","410","1","2","3","5","6","406","1","2","3","4","5","6","4","1","1","403","1","409","204","1","406","506","204","4","1","306"]},"If possible, while the update process is occurring, native application  may still execute application  to allow the user to access the streaming media program service. Bootstrap application  first loads files #, #, #, and # from core memory  into memory . This may allow native application  to execute application . However, in other embodiments, application  is updated and then started.","During the update process, bootstrap application  sends a request for file #. Remote server  then retrieves remote core file # and sends that file to device . Bootstrap application  then stores remote core file # into memory . Also, bootstrap application  sends a request for file # and receives the file from remote server . Bootstrap application  also stores remote core file # into memory .","When bootstrap application  finishes updating, memory  includes core files #-# for application . Once all of the files from manifest  have been successfully included in memory , bootstrap application  may verify the loaded core. For example, bootstrap application  calls a verify function within the loaded core to have the loaded core verify itself.","Because application  is an interpreted application, recompilation of application  is not needed after the update process. That is, native application  interprets the core files #-# that are stored in memory . Once core files # and # are updated and stored in memory , native application  can immediately execute them without requiring recompilation.","When a remote core file  is retrieved from remote server , bootstrap application  stores the retrieved remote core file  in core memory  when it is received. For example, bootstrap application  stores file # in core memory . Further, bootstrap application  stores any updated files. For example, bootstrap application  stores the retrieved remote core file # in core memory . Also, any updateable core files  that were not included in manifest  may be deleted or marked for removal upon the next removal cycle. For example, the previously updateable core file # is deleted. In one embodiment, bootstrap application  updates invoice listing  with the hash and size parameters for any new, updated, or deleted core files. In other embodiments, invoice listing  may not be used. Rather, bootstrap application  may store manifest  as stored manifest , which may be used at a later time when a failure occurs when loading any part of remote core .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5C","b":["550","108","552","204","404","406","554","204","506","408","556","204","404","402","558","204","404","560","204","404","412","506","408","562","204","410","306","412","564","204","406","404","552","204","404","108","410"]},"As mentioned above, bootstrap application  may encounter a failure when loading a remote core file .  depicts a simplified flowchart  of a method for loading updateable core  in the event of a failure to load remote core  according to one embodiment. At , bootstrap application  attempts to load portions of remote core file . For example, the process as described above where bootstrap application  uses manifest  to determine which remote core files  to update is performed. At some point, however, bootstrap application  may fail to load a remote core file . For example, a failure may result because a remote core file  could not be downloaded, a file failed to be included in remote core , or a remote core  failed verification. At , bootstrap application  detects the failure. At this point, bootstrap application  may not use any portion of remote core  due to the failure. Thus, at , bootstrap application  clears any remote core files  that were downloaded from memory . In other embodiments, bootstrap application  may use some remote core files  that were downloaded already, but may not use the remote core file that resulted in the failure.","At , bootstrap application  loads stored manifest . For example, stored manifest  may be a previous manifest that was retrieved from remote server  on a previous startup. Bootstrap application  may verify stored manifest , such as by determining if expiration criteria for stored manifest  indicates the manifest has expired (i.e., stored manifest  is too old to be used). However, this discussion assumes that the manifest is valid.","At , bootstrap application  loops through the core files in stored manifest  to confirm that each updateable core file  in stored manifest  is included in updateable core . For example, bootstrap application  may verify the hashes and size of the files in stored manifest  to updateable core files . At , upon verification, bootstrap application  loads updateable core  into memory . In this case, any remote core files  that were previously retrieved are not included in the core included in memory . This may be because remote server  may be experiencing issues for the fetching of remote core files .","At , once all updateable core files  have been loaded into memory , bootstrap application  verifies the core has been loaded correctly. At , bootstrap application  may clean up core memory . For example, any updateable core files  that were not included in stored manifest  may be removed or marked for removal. After verification, bootstrap application  initializes execution of the core loaded into memory .","In some cases, bootstrap application  may need to use local core . For example, core memory  may not include an updateable core  or device  may not include a core memory . In either case, bootstrap application  loads local core  from local storage . This is the local core that was included with bootstrap application  when loaded from distribution site . Thus, in light of any failures with remote core  or updateable core , bootstrap application  falls back on local core . Unless device  does not support a local core, a user should be able to access the video streaming service. Although local core  may not be the most updated version of application , the user may still be able to access the service.","Using remote server , the media program streaming service may be able to personalize application .  depicts an example of personalization of remote core  according to one embodiment. As shown, device  may send identification information to remote server . The identification information may include a user ID for a user account, platform\/device information including what platform it is (e.g., gaming console type), a unique identifier (e.g., serial #, Media Access Control (MAC) address) for device , or other unique identification information. A version manager  in remote server  receives the identification information and can determine which version of remote cores  to use. For example, different remote cores  may be used for various purposes. In one example, a user may receive a user-specific remote core . This personalizes application  for the user. In this case, the user provides a user ID that can be used to determine the user-specific version. Additionally, other personalized uses may be providing a beta version for testing to specific users, user-specific testing of a specific remote core , or a phased rollout of a new application .","Version manager  identifies the remote core version using the identification information and sends a manifest to device  for that remote core version. Device  can then use the manifest for the remote core version to request remote core files  from that version.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 9","b":["102","102","902","904","902","906","908","910","108","910"]},"A bus  or other communication component may support communication of information within device . The processor  may be a specialized or dedicated microprocessor configured to perform particular tasks in accordance with the features and aspects disclosed herein by executing machine-readable software code defining the particular tasks. Processor memory  (e.g., random access memory (RAM) or other dynamic storage device) may be connected to the bus  or directly to the processor , and store information and instructions to be executed by a processor . The memory  may also store temporary variables or other intermediate information during execution of such instructions.","A computer-readable medium in a storage device  may be connected to the bus  and store static information and instructions for the processor ; for example, the storage device  may store the modules , ,  and  when the device  is powered off, from which the modules may be loaded into the processor memory  when the device  is powered up. The storage device  may include a non-transitory computer-readable medium holding information, instructions, or some combination thereof, for example instructions that when executed by the processor , cause the device  to perform one or more operations of a method as described herein.","A communication interface  may also be connected to the bus . The communication interface  may provide or support two-way data communication between the device  and one or more external devices, e.g., remote server , optionally via a router\/modem  and a wired or wireless connection . In the alternative, or in addition, the device  may include a transceiver  connected to an antenna , through which the client  may communicate wirelessly with a base station for a wireless communication system or with the router\/modem .","The device  may be connected (e.g., via the bus  and graphics processing unit ) to a display unit . A display  may include any suitable configuration for displaying information to a user of the device . For example, a display  may include or utilize a cathode ray tube (CRT), liquid crystal display (LCD), touchscreen LCD (e.g., capacitive display), light emitting diode (LED) display, projector, or other display device to present information to a user of the device  in a visual display.","One or more input devices  (e.g., an alphanumeric keyboard, microphone, keypad, remote controller, game controller, camera or camera array) may be connected to the bus  via a user input port  to communicate information and commands to the device . In selected embodiments, and input device  may provide or support control over the positioning of a cursor. Such a cursor control device, also called a pointing device, may be configured as a mouse, a trackball, a track pad, touch screen, gesture detection systems, cursor direction keys or other device for receiving or tracking physical movement and translating the movement into electrical signals indicating cursor movement. The cursor control device may be incorporated into the display unit , for example using a touch sensitive screen. A cursor control device may communicate direction information and command selections to the processor  and control cursor movement on the display . A cursor control device may have two or more degrees of freedom, for example allowing the device to specify cursor positions in a plane or three-dimensional space.","The device  may be used to transmit, receive, display, or the like one or more streaming video segments. In selected embodiments, such transmitting, receiving, and displaying may be in response to the processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another non-transitory computer-readable medium (e.g., a storage device ).","Execution of sequences of instructions contained in main memory  may cause a processor  to perform one or more of the procedures or steps described herein. In selected embodiments, one or more processors  in a multi-processing arrangement may also be employed to execute sequences of instructions contained in main memory . Alternatively, or in addition thereto, firmware may be used in place of, or in combination with, software instructions to implement procedures or steps in accordance with the features and aspects disclosed herein. Thus, embodiments in accordance with the features and aspects disclosed herein may not be limited to any specific combination of hardware circuitry and software.","The term \u201cnon-transitory computer-readable medium\u201d as used herein may refer to any medium that participates in holding instructions for execution by a processor , or that stores data for processing by a computer. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and temporary storage media (e.g., cache memory). Non-volatile media may include optical or magnetic disks, such as a storage device . Volatile media may include dynamic memory, such as main memory . Common forms of non-transitory computer-readable media may include, for example, a hard (magnetic media) disk, magnetic tape, or any other magnetic medium, a CD-ROM, DVD, Blu-ray or other optical disc or medium, RAM, PROM, EPROM, FLASH-EPROM, any other memory card, chip, or cartridge, or any other memory medium from which a computer can read.","As used in the description herein and throughout the claims that follow, \u201ca\u201d, \u201can\u201d, and \u201cthe\u201d includes plural references unless the context clearly dictates otherwise. Also, as used in the description herein and throughout the claims that follow, the meaning of \u201cin\u201d includes \u201cin\u201d and \u201con\u201d unless the context clearly dictates otherwise.","The above description illustrates various embodiments along with examples of how aspects of particular embodiments may be implemented. The above examples and embodiments should not be deemed to be the only embodiments, and are presented to illustrate the flexibility and advantages of particular embodiments as defined by the following claims. Based on the above disclosure and the following claims, other arrangements, embodiments, implementations and equivalents may be employed without departing from the scope hereof as defined by the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
