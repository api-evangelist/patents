---
title: Configuration dependency manager for configurable applications
abstract: In one embodiment, during runtime use of a configurable application that is used by multiple service requesters, a configuration dependency manager is integrated in the configurable application to check a set of features for one of the service requesters. The method receives a service requester configuration for the set of features. A configuration dependency manager determines a set of dependencies for the set of features that have been configured by the service requester configuration and determines a developer's configuration for a plurality of features for the configurable application. Then, the configuration dependency manager analyzes the set of dependencies with corresponding dependencies in the developer's configuration to determine when an issue exists with the service requester configuration and provides a visualization of the set of features based on the analyzing the set of dependencies, wherein the issue is shown on the visualization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09552203&OS=09552203&RS=09552203
owner: SUCCESSFACTORS, INC.
number: 09552203
owner_city: So. San Francisco
owner_country: US
publication_date: 20151001
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["In a multi-tenant enterprise software-as-a-service (SAAS) product, multiple service requesters share an instance of the product. That is, the product provider may run a single instance of the product on a server that can be used by multiple service requesters. However, each service requester's data may be separated from other service requesters' data. The product provider may attempt to provide features desired by all service requesters. However, service requesters may desire a tailor-made and highly-customized version of the product that feels\/looks like a personalized product that solves each service requester's unique problems.","To address the above customization issues, the product provider may include configurable features that service requesters can configure manually. Typically, an administrator or professional services for the service requester perform the feature configuration. This is often at a cost to the service requester. Also, many times the configuration may not be correct, which results in the feature not working in the product and application downtime. To fix any configuration issues, it is often difficult to pinpoint the problem. Typically, an engineering team needs to be contacted, which consumes engineering hours that could be used for other purposes.","In one embodiment, during runtime use of a configurable application that is used by multiple service requesters, a configuration dependency manager is integrated in the configurable application to check a set of features for one of the service requesters. The method receives a service requester configuration for the set of features of the configurable application. The service requester configuration being set by the service requester. A configuration dependency manager determines a set of dependencies for the set of features that have been configured by the service requester configuration and determines a developer's configuration for a plurality of features for the configurable application. The developer's configuration including dependencies for each of the plurality of features in a pre-defined format. Then, the configuration dependency manager analyzes the set of dependencies with corresponding dependencies in the developer's configuration to determine when an issue exists with the service requester configuration and provides a visualization of the set of features based on the analyzing the set of dependencies, wherein the issue is shown on the visualization.","In one embodiment, a non-transitory computer-readable storage medium contains instructions, that when executed, control a computer system to be configured for: during runtime use of a configurable application that is used by multiple service requesters, using a configuration dependency manager integrated in the configurable application to check a set of features for one of the service requesters by performing: receiving, by the configuration dependency manager, a service requester configuration for the set of features of the configurable application, the service requester configuration being set by the service requester; determining, by the configuration dependency manager, a set of dependencies for the set of features that have been configured by the service requester configuration; determining, by the configuration dependency manager, a developer's configuration for a plurality of features for the configurable application, the developer's configuration including dependencies for each of the plurality of features in a pre-defined format; analyzing, by the configuration dependency manager, the set of dependencies with corresponding dependencies in the developer's configuration to determine when an issue exists with the service requester configuration; and providing, by the configuration dependency manager, a visualization of the set of features based on the analyzing the set of dependencies, wherein the issue is shown on the visualization.","In one embodiment, an apparatus includes: one or more computer processors; and a non-transitory computer-readable storage medium comprising instructions, that when executed, control the one or more computer processors to be configured for: during runtime use of a configurable application that is used by multiple service requesters, using a configuration dependency manager integrated in the configurable application to check a set of features for one of the service requesters by performing: receiving, by the configuration dependency manager, a service requester configuration for the set of features of the configurable application, the service requester configuration being set by the service requester; determining, by the configuration dependency manager, a set of dependencies for the set of features that have been configured by the service requester configuration; determining, by the configuration dependency manager, a developer's configuration for a plurality of features for the configurable application, the developer's configuration including dependencies for each of the plurality of features in a pre-defined format; analyzing, by the configuration dependency manager, the set of dependencies with corresponding dependencies in the developer's configuration to determine when an issue exists with the service requester configuration; and providing, by the configuration dependency manager, a visualization of the set of features based on the analyzing the set of dependencies, wherein the issue is shown on the visualization.","The following detailed description and accompanying drawings provide a better understanding of the nature and advantages of particular embodiments.","Described herein are techniques for a configuration dependency manager for a configurable application. In the following description, for purposes of explanation, numerous examples and specific details are set forth in order to provide a thorough understanding of particular embodiments. Particular embodiments as defined by the claims may include some or all of the features in these examples alone or in combination with other features described below, and may further include modifications and equivalents of the features and concepts described herein.","Particular embodiments provide a configuration dependency manager that can automatically check a feature's configuration, such as the feature's relationship\/dependencies, during runtime of an application. The configuration dependency manager can then provide a visualization with an impact analysis of the feature configuration. If there are any issues with the configuration, the configuration dependency manager can provide a suggested fix. Also, the configuration dependency manager can disable the feature. Further, the configuration dependency manager can send notifications to users based on any issues with the feature configuration.","During the product and feature development, a developer for the company that is offering the product can capture the features' configuration and the features' relationships and dependencies in a pre-defined structured data format. The capturing of these dependencies during development will allow for the runtime analysis of feature configuration. During the runtime usage of the product by one of the service requesters, the configuration dependency manager uses the structured data captured during the development to analyze a feature's service requester configuration. The configuration dependency manager compares the service requester's configuration of a feature with the structured data to provide a visualization of the analysis of the features of the product. The visualization may also depict the health of each feature, and also describe any issues related to the feature's configuration.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","102","100","104","106","106","102","106","102","106"]},"In one embodiment, multiple service requesters may access application product  via client computers . Each service requester may configure the application product  differently and be a separate and different entity (e.g., independent companies). Each client computer  may include a user interface  that connects to server  via a network , such as the Internet. Multi-tenant application product  may be associated with a database system  that separates each service requester's data for the product. Thus, different service requesters may securely use the same application that resides on server  in application product .","In user interface , service requesters may customize various features #1-#N. The customization process may include many steps that configure dependencies for the feature. The dependencies may be settings or parameters that are needed for the feature to operate correctly.","When a service requester customizes a feature, configuration dependency manager  receives the configuration and can analyze the dependencies of the configuration to determine any issues. If any issues are found, configuration dependency manager  may output the issues, notify users, and\/or attempt to fix the issues. Further, as will be discussed in more detail below, configuration dependency manager  may provide a visualization of multiple features in product  and indicate the health of each feature based on the analysis. Configuration dependency manager  can also provide suggestions on how to fix the issue or disable the issue.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["102","102","202","106"]},"While developing the product, a developer may follow a pre-defined structured format, such as an extensible markup language (XML) structure, to define the features and the dependencies of the features. Developer configuration processor  then stores the developer's configuration in database  for later use during runtime. Having the structured data format being defined saves time for the developer. Also, having the developer input the structured data format for features during development also saves time because the developer is creating the feature configurations for the application product  at the time. Particular embodiments may require that the feature's dependencies be defined in the pre-defined structured data format before completion of the application product  for release to service requesters or at least before a respective release of a feature for service requester use. This ensures that configuration dependency manager  can be used.","During runtime, runtime configuration processor  receives a service requester configuration. Runtime configuration processor  is situated on server  so it can check the runtime configuration of application product . For example, configuration dependency manager  is integrated into multi-tenant application product  to allow configuration dependency manager  access to client configuration data and also runtime data that can be used to check feature dependencies. Runtime configuration processor  can thus access the service requester configuration and check the service requester configuration with the developer's configuration. For example, the during development phase, the developer specifies the dependencies (including the category the dependency belongs to, the place where the data for the dependency is stored, the dependency's expected value) for a given feature to work correctly, configuration dependency manager  looks for this information in the service requester's system at runtime and compares with the developer configuration for evaluating if the feature is configured correctly and is working. Then, depending on the analysis, runtime configuration processor  outputs a feature dependency visualization  of the configuration. Visualization  may start with top level various modules. The modules may include certain business objects, such as recruiting, job requisition, candidate, job application, application programming interface (API), etc. Each module may include a number of features. To determine any issues, runtime configuration processor  may check the configuration of the modules and features. Depending on the status of each module and feature, runtime configuration processor  changes the visualization .","Once providing the visualization , a service requester may use visualization  to determine where the configuration problems are and also possibly to determine how to solve the configuration problems.","To configure a feature, dependencies need to be configured.  depicts an example of categories for dependencies of a feature  according to one embodiment. The dependencies may be categorized in different categories ---. However, other categories for the dependencies may be appreciated. The dependencies in each category may be captured via the pre-defined structure data format.","At -, a file category may be properties stored in files needed for the feature to work. Examples of these dependencies include server information needed to perform specific tasks, properties required to access services provided by third parties, and the system configuration.","At -, a tables category may be the data or configuration that is stored in the database  that are needed for the feature to work correctly. These dependencies include system configurations stored in the database  or feature configurations stored in the database .","At -, the network category may be resources distributed over the network that should be available for the feature to work. Examples of these dependencies include checking if the servers configured for the feature are working as expected or not or a health check for partner systems accessible over the network for the feature.","At -, the runtime options dependencies may be a server configuration and other runtime options required by the feature. Examples of these dependencies include checking the server runtime configuration that is needed for the feature.","The features may be configured under various modules where each module may include a number of features.  depict different pre-defined structured data formats for the application product's configuration according to one embodiment.  depicts a module configuration according to one embodiment. Modules may be top-level systems that represent an independent business solution for the service requester. For example, Recruiting, Performance Management, Goals, Succession Management are all examples of modules in multi-tenant application product . At , the module identifier is provided that uniquely identifies the module. The module may be a business object or part of a business hierarchy. At , the identifier for the group of configurations for the module is provided. The module configuration contains a configuration group on which the module configuration depends. A configuration group is an identifier to multiple configuration identifiers. For example, a module or feature may depend on multiple different dependencies. Using groups allows the different dependencies to be defined with a single group and also be reused. Each module developer\/team working on a new feature for that module inputs entries to the above-mentioned configuration files clearly stating the dependencies for the new feature. The developers can make use of existing configuration groups if available to their feature entries. If new configurations are supported by the new feature, the developer needs to add the new configurations to a group to facilitate reusability.","Further, the module configuration contains the features included in the module and the configuration group the features depend on. For example, at , the identifier for a feature of the module is provided. Although one feature identifier is described, multiple feature identifiers may be provided in the module. Also, at , an identifier for the configuration group for the feature is provided. This identifier may identify a group of dependencies for the configuration group.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4B"},"At , the configuration group ID is shown. This ID may uniquely identify the configuration group. At , reference identifiers for specific configurations #1-5 are provided. This means that this group includes these five configurations. Each configuration may include the specific dependencies. Other configuration groups may include different combinations of identifiers, such as configuration IDs - or configuration IDs , , , and .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4C","FIG. 4A"],"b":["420","422","424"]},"At ---, the dependencies are defined for the configuration. At -, a network dependency is defined with a URL that is the location of the resource to be accessed over the network. Success and failure messages are also provided.","At -, a runtime dependency is defined that shows a runtime option key and a runtime option expected value when retrieving a field value. The success and failure of this runtime option is also defined.","At -, a file configuration dependency defines a file name, file path, and a key for the expected file entry for the dependency. A success and failure message is also defined.","If all of the above dependencies pass, then the configuration may pass. If one or more fail, then the configuration may fail. The input of this configuration during development time is important because the information can be easily determined by the developer. It would be harder to determine the dependencies if the configuration is determined during runtime because someone other than the developer may have to determine the dependencies, which may involve reviewing software code for multi-tenant application product . Further, the pre-defined structured data format allows the configuration to be input in a standardized format that configuration dependency manager  can later use. Using the format allows configuration dependency manager  to parse the format to determine the dependencies for the features.","Once the configuration is set, configuration dependency manager  needs to process the developer configuration so it can be evaluated based on the service requester's configuration during runtime.  depicts a simplified flowchart  of a method for processing the developer's configuration for processing according to one embodiment. At , configuration dependency manager  parses a module configuration structure from the developer's configuration to retrieve module details, configuration group references on which the module depends, features supported by the module, and configuration group references on which the features depend. As discussed above, the module may be a business object, such as recruiting.","At , configuration dependency manager  parses the configuration group structure in the developer's configuration for the module to determine the configuration groups for the module and features, and further the configuration references included in each group. This may determine all the configuration references for the module and features.","At , configuration dependency manager  parses each configuration entity structure for a configuration reference to fetch each respective different configuration. Each configuration entity may be associated with a configuration reference. The configuration entity may be in one the above-referenced categories, such as table, file, network, and runtime options. These are the specific dependencies.","At , configuration dependency manager  generates objects to store the various information fetched in -. Configuration dependency manager  knows the predefined structured data format and can parse the structured data to determine the feature configuration. The preparation of the objects allows configuration dependency manager  to evaluate the service requester's configuration at runtime.","Once the modules and features are parsed in the developer's configuration, configuration dependency manager  can verify the service requester's configuration. FIG.  depicts a simplified flowchart  for processing the service requester's configuration according to one embodiment. At , configuration dependency manager  identifies all modules to evaluate in the service requester's configuration. For discussion purposes, the first module is processed first.","At , configuration dependency manager  evaluates the module configuration. Once determining the module, configuration dependency manager  uses the objects for a corresponding module in the developer's configuration to determine a configuration group reference for the module. Then, configuration dependency manager  checks the configuration references in the group. Configuration dependency manager  may fetch the configurations pertaining to the configuration references and evaluate each configuration. For example, configuration dependency manager  compares the developer's configuration with the service requester's configuration. The evaluation may include determining what information needs to be retrieved from the service requester configuration from the developer's configuration. For example, the pre-defined structured data format may have defined the place where the data is stored for the dependency and the dependency's expected value or behavior. Configuration dependency manager  retrieves this information in the service requester's configuration at runtime and compares the information with the expected value or behavior from the developer's configuration. These comparisons to perform may be defined in the developer's configuration. Also, configuration dependency manager  can access this information and perform the comparison because it is integrated into multi-tenant application product  and this check is performed during runtime. service requesterIf the service requester's configuration is set up per the developer's configuration, then the process continues at . However, if the service requester's configuration is not correct, at , configuration dependency manager  sets the module configuration status to \u201cFAIL\u201d.","Assuming the module configuration passes, at , configuration dependency manager  identifies all features within the module to evaluate. This may begin processing at the first feature.","At , configuration dependency manager  evaluates the current feature configuration. This may check the status of each configuration reference obtained from the dependent configuration groups. For example, if a configuration group is set for a feature, the configurations in the group are retrieved and checked. In this case, a dependency for a feature in the developer's configuration is checked with the corresponding dependency in service requester's configuration. For example, configuration dependency manager  compares expected values for feature-related switches or runtime parameters of the service requester runtime configuration, checks the presence or absence of required data settings (such as links, email templates, feature-related data fields, etc.), validates user permissions, monitors the status of servers (such as uptime, sync issues, etc.). In a specific example, if one of the configuration dependencies requires an entry to be present in a particular database table, then configuration dependency manager  makes a query to this table (in the service requester's database instance) and checks to see if this entry exists or not. Configuration dependency manager  can also check the expected value for the entry. For a server health check, configuration dependency manager  may ping the server and monitoring the response, and in some cases such as search servers (which has a Master-Slave architecture), configuration dependency manager  also performs checks to identify whether the Slave is in sync with the Master. For configuration data stored in files, configuration dependency manager  accesses such files and reads the data in the files and compares the data with the developer configuration to check for correctness. If the feature configuration is not correct, at , configuration dependency manager  sets the feature configuration status as \u201cFAIL\u201d. If the feature configuration passes, then at , configuration dependency manager  sets the feature configuration status as \u201cPASS\u201d.","At , if the configuration check is not complete for all features, then at , configuration dependency manager  fetches the next feature and the process reiterates to . If all features have been checked, then at , configuration dependency manager  determines if all the features in the module are configured correctly. If not, then at , configuration dependency manager  sets the module configuration status to \u201cFAIL\u201d.","If all the features were configured correctly, then at , configuration dependency manager  sets the module configuration status to \u201cPASS\u201d.","The process then continues the check for other modules. For example, at , configuration dependency manager  determines if the configuration check is complete for all modules. If not, at , configuration dependency manager  fetches the next module and the process reiterates to .","If the configuration check is complete for all modules, then at , configuration dependency manager  sends the status data to user interface to display in a visualization.","The visualization will now be described in more detail. A service requester may use the configuration dependency manager via user interface . In one example, the user may open up a tool that includes the configuration dependency manager .  depicts an example interface for feature dependency visualization  according to one embodiment. In , the configuration dependency manager  may display a graph  including the configuration dependencies for a module. The relationships may be determined using the dependent feature checks. For example, in a hierarchical relationship, a child feature may specify a parent feature as one of its required configuration step. This would mean the child feature cannot be enabled or used unless the parent feature is enabled Graph  may be a tree structure, but other structures may be used. For example, at , a recruiting module is selected and its dependencies are shown. For example, the recruiting module may include the features of job requisition at -, candidate at -, job application at -, and API at -.","The detailed configuration can also be viewed by selecting a node in graph .  shows an example of selecting a node according to one embodiment. At -, a user has selected the job requisition feature. This causes a menu  to be displayed that show the status of dependencies that are configured in the job requisition feature. For example, at , the statuses for certain dependencies of the feature are shown. This includes the dynamic requisition listing switch is enabled in provisioning correctly, at least one valid job requisition template has been uploaded and enabled correctly, and the permission to create forms for at least one user has been provided correctly. Thus, configuration dependency manager  has analyzed the dependencies for this feature and determined they have passed.","Further, a user can navigate through and drill down into certain nodes.  depicts an example for drilling down into nodes according to one embodiment. At -, a user has selected the Candidate feature. Further nodes are now shown for the Candidate feature at ---. Also, the health of each node may be indicated visually. For example, different colors may be provided or other identifiers for the health of a node (for illustrative purposes, colors are not shown, but \u201cPASS\u201d, \u201cFAIL\u201d, \u201cWarning\u201d, or \u201cNot configured\u201d are shown in the figure). In one example, the nodes shown at - and - have the status of \u201cPASS\u201d or are the color green. The candidate search feature at - may have a warning sign as a color orange, which may mean that some features below it may not be configured correctly. For example, at - and -, the power search and the radial search features have not been configured correctly. At -, the conceptual search feature has not yet been configured and is indicated with another color, such as gray. The user can now visually see the feature dependencies and also which features have not been configured correctly.","If the user would like to see details of the features that have not passed, the user may select one of these nodes.  depicts an example of selecting one of the nodes that has a failure according to one embodiment. At -, the user has selected the power search feature. Configuration dependency manager  then outputs a menu  that describes the dependencies of the feature. Menu  may show success or failure messages that were determined by configuration dependency manager  when comparing the service requester configuration with the developer configuration. For example, at , configuration dependency manager  indicates that the power search is enabled and is provisioning successfully. However, at , configuration dependency manager  indicates that the search server URL is not correctly configured for this instance and also at  that the search server is not responding to a request because the server is not functioning or the URL is not configured. Configuration dependency manager  may have determined these failure messages based on the analyzing of the service requester configuration and the developer configuration of the dependencies. A search server URL may be based on the network dependencies or runtime option dependencies. These failure messages give a possible reason for the failure as well as a suggested solution.","The service requester may be able to fix the configuration directly from a menu in configuration dependency manager interface or directions may be provided.  depicts an example of an interface showing options to fix the configuration according to one embodiment. At , a menu showing the feature configuration status is shown for an External profile conversion feature at . At , a feature for the external to internal candidate profile conversion success notification e-mail template not being enabled in the admin tools is shown. At , a \u201cFIX IT\u201d link is provided to allow the user to directly open an interface to fix this configuration. When the user selects the FIX IT link, and then the service requester may directly fix feature from this interface.","At , a feature indicating that the conversion criteria is not set is provided. At , directions to fix this feature may be provided, which indicates that the user should go to the link shown to fix the configuration. This information may be derived from the developer's configuration.","Once a user fixes the configuration for a feature, configuration dependency manager  may check the configuration with the developer's configuration. If the configuration passes, then configuration dependency manager  may change the node to indicate the feature passes, such as by changing the node from the color red to the color green.","Although this tree structure was described, other structures may be used to provide the feature status. For example, configuration dependency manager  may provide a list of features that have a status of \u201cFAIL\u201d and allow a user to select the features to view the status.","Accordingly, configuration dependency manager  allows service requesters to configure features in a multi-tenant application product  with their customization. Configuration dependency manager  leverages the developer's configuration that is provided in a pre-defined format. This allows configuration dependency manager  to confirm the service requester configuration.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 12","FIG. 12"],"b":["102","1210","1210","1205","1201","1205","1210","1202","1205","1201","1201","1203","1203"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT) or liquid crystal display (LCD), for displaying information to a computer user. An input device  such as a keyboard and\/or mouse is coupled to bus  for communicating information and command selections from the user to processor . The combination of these components allows the user to communicate with the system. In some systems, bus  may be divided into multiple specialized buses.","Computer system  also includes a network interface  coupled with bus . Network interface  may provide two-way data communication between computer system  and the local network . The network interface  may be a digital subscriber line (DSL) or a modem to provide data communication connection over a telephone line, for example. Another example of the network interface is a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links are another example. In any such implementation, network interface  sends and receives electrical, electromagnetic, or optical signals that carry digital data streams representing various types of information.","Computer system  can send and receive information through the network interface  across a local network , an Intranet, or the Internet . In the Internet example, software components or services may reside on multiple different computer systems  or servers - across the network. The processes described above may be implemented on one or more servers, for example. A server  may transmit actions or messages from one component, through Internet , local network , and network interface  to a component on computer system . The software components and processes described above may be implemented on any computer system and send and\/or receive information across a network, for example.","Particular embodiments may be implemented in a non-transitory computer-readable storage medium for use by or in connection with the instruction execution system, apparatus, system, or machine. The computer-readable storage medium contains instructions for controlling a computer system to perform a method described by particular embodiments. The computer system may include one or more computing devices. The instructions, when executed by one or more computer processors, may be configured to perform that which is described in particular embodiments.","As used in the description herein and throughout the claims that follow, \u201ca\u201d, \u201can\u201d, and \u201cthe\u201d includes plural references unless the context clearly dictates otherwise. Also, as used in the description herein and throughout the claims that follow, the meaning of \u201cin\u201d includes \u201cin\u201d and \u201con\u201d unless the context clearly dictates otherwise.","The above description illustrates various embodiments along with examples of how aspects of particular embodiments may be implemented. The above examples and embodiments should not be deemed to be the only embodiments, and are presented to illustrate the flexibility and advantages of particular embodiments as defined by the following claims. Based on the above disclosure and the following claims, other arrangements, embodiments, implementations and equivalents may be employed without departing from the scope hereof as defined by the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
