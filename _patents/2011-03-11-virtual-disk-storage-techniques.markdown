---
title: Virtual disk storage techniques
abstract: This document describes techniques for storing virtual disk payload data. In an exemplary configuration, each virtual disk extent can be associated with state information that indicates whether the virtual disk extent is described by a virtual disk file. Under certain conditions the space used to describe a virtual disk extent can be reclaimed and state information can be used to determine how read and/or write operations directed to the virtual disk extent are handled. In addition to the foregoing, other techniques are described in the claims, figures, and detailed description of this document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146765&OS=09146765&RS=09146765
owner: Microsoft Technology Licensing, LLC
number: 09146765
owner_city: Redmond
owner_country: US
publication_date: 20110311
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Storage virtualization technology allows for the separation of logical storage from physical storage. One exemplary use case for storage virtualization is within a virtual machine. A layer of virtualizing software (typically called a hypervisor or virtual machine monitor) is installed on a computer system and controls how virtual machines interact with the physical hardware. Since guest operating systems are typically coded to exercise exclusive control over the physical hardware, the virtualizing software can be configured to subdivide resources of the physical hardware and emulate the presence of physical hardware within the virtual machines. Another use case for storage virtualization is within a computer system configured to implement a storage array. In this case, physical computer systems or virtual machines can be connected to the storage array using the iSCSI protocol, or the like.","A storage handling module can be used to emulate storage for either a virtual or physical machine. For example, a storage handling module can handle storage IO jobs issued by a virtual or physical machine by reading and writing to one or more virtual disk files, which can be used to describe, i.e., store, the extents of the virtual disk, i.e., a contiguous area of storage such as a block. Likewise, the storage handling program can respond to write requests by writing bit patterns data for the virtual disk to one or more virtual disk files and respond to read requests by reading the bit patterns stored in the one or more virtual disk files.","This document describes techniques for storing data for a virtual disk in one or more virtual disk files. In an exemplary configuration, a virtual disk extent can be associated with state information that indicates whether the virtual disk extent is described by a virtual disk file. Under certain conditions, the space used to describe the virtual disk extent can be reclaimed and state information can be used to determine how to handle subsequent read and\/or write operations directed to the virtual disk extent. Reclaimed space, e.g., an extent built from one or more ranges, can be used to describe the same or another virtual disk extent. In addition to the foregoing, other techniques are described in the claims, the detailed description, and the figures.","It can be appreciated by one of skill in the art that one or more various aspects of the disclosure may include but are not limited to circuitry and\/or programming for effecting the herein-referenced aspects; the circuitry and\/or programming can be virtually any combination of hardware, software, and\/or firmware configured to effect the herein-referenced aspects depending upon the design choices of the system designer.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail. Those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting.","The disclosed subject matter may use one or more computer systems.  and the following discussion are intended to provide a brief general description of a suitable computing environment in which the disclosed subject matter may be implemented.","The term circuitry used throughout can include hardware components such as hardware interrupt controllers, hard drives, network adaptors, graphics processors, hardware based video\/audio codecs, and the firmware used to operate such hardware. The term circuitry can also include microprocessors, application specific integrated circuits, and processors, e.g., cores of a multi-core general processing unit that perform the reading and executing of instructions, configured by firmware and\/or software. Processor(s) can be configured by instructions loaded from memory, e.g., RAM, ROM, firmware, and\/or mass storage, embodying logic operable to configure the processor to perform a function(s). In an example embodiment, where circuitry includes a combination of hardware and software, an implementer may write source code embodying logic that is subsequently compiled into machine readable code that can be executed by hardware. Since one skilled in the art can appreciate that the state of the art has evolved to a point where there is little difference between hardware implemented functions or software implemented functions, the selection of hardware versus software to effectuate herein described functions is merely a design choice. Put another way, since one of skill in the art can appreciate that a software process can be transformed into an equivalent hardware structure, and a hardware structure can itself be transformed into an equivalent software process, the selection of a hardware implementation versus a software implementation is left to an implementer.","Referring now to , an exemplary computing system  is depicted. Computer system  can include processor , e.g., an execution core. While one processor  is illustrated, in other embodiments computer system  may have multiple processors, e.g., multiple execution cores per processor substrate and\/or multiple processor substrates that could each have multiple execution cores. As shown by the figure, various computer-readable storage media  can be interconnected by one or more system busses which couples various system components to the processor . The system buses may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. In example embodiments the computer-readable storage media  can include for example, random access memory (RAM) , storage device , e.g., electromechanical hard drive, solid state hard drive, etc., firmware , e.g., FLASH RAM or ROM, and removable storage devices  such as, for example, CD-ROMs, floppy disks, DVDs, FLASH drives, external storage devices, etc. It should be appreciated by those skilled in the art that other types of computer readable storage media can be used such as magnetic cassettes, flash memory cards, and\/or digital video disks.","The computer-readable storage media  can provide non volatile and volatile storage of processor executable instructions , data structures, program modules and other data for the computer system  such as executable instructions. A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computer system , such as during start up, can be stored in firmware . A number of programs may be stored on firmware , storage device , RAM , and\/or removable storage devices , and executed by processor  including an operating system and\/or application programs. In exemplary embodiments, computer-readable storage media  can store virtual disk parser , which is described in more detail in the following paragraphs, can be executed by processor  thereby transforming computer system  into a computer system configured for a specific purpose, i.e., a computer system configured according to techniques described in this document.","Commands and information may be received by computer system  through input devices  which can include, but are not limited to, a keyboard and pointing device. Other input devices may include a microphone, joystick, game pad, scanner or the like. These and other input devices are often connected to processor  through a serial port interface that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port, or universal serial bus (USB). A display or other type of display device can also be connected to the system bus via an interface, such as a video adapter which can be part of, or connected to, a graphics processor unit . In addition to the display, computers typically include other peripheral output devices, such as speakers and printers (not shown). The exemplary system of  can also include a host adapter, Small Computer System Interface (SCSI) bus, and an external storage device connected to the SCSI bus.","Computer system  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer. The remote computer may be another computer, a server, a router, a network PC, a peer device or other common network node, and typically can include many or all of the elements described above relative to computer system .","When used in a LAN or WAN networking environment, computer system  can be connected to the LAN or WAN through network interface card . The NIC , which may be internal or external, can be connected to the system bus. In a networked environment, program modules depicted relative to the computer system , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections described here are exemplary and other means of establishing a communications link between the computers may be used. Moreover, while it is envisioned that numerous embodiments of the present disclosure are particularly well-suited for computerized systems, nothing in this document is intended to limit the disclosure to such embodiments.","Turning to , illustrated is an exemplary virtualization platform that can be used to generate virtual machines. In this embodiment, microkernel hypervisor  can be configured to control and arbitrate access to the hardware of computer system . Microkernel hypervisor  can generate execution environments called partitions such as child partition  through child partition N (where N is an integer greater than 1). Here, a child partition is the basic unit of isolation supported by microkernel hypervisor . Microkernel hypervisor  can isolate processes in one partition from accessing another partition's resources. In particular, microkernel hypervisor  can isolate kernel mode code of a guest operating system from accessing another partition's resources as well as user mode processes. Each child partition can be mapped to a set of hardware resources, e.g., memory, devices, processor cycles, etc., that is under control of the microkernel hypervisor . In embodiments, microkernel hypervisor  can be a stand-alone software product, a part of an operating system, embedded within firmware of the motherboard, specialized integrated circuits, or a combination thereof.","Microkernel hypervisor  can enforce partitioning by restricting a guest operating system's view of the memory in a physical computer system. When microkernel hypervisor  instantiates a virtual machine, it can allocate pages, e.g., fixed length blocks of memory with starting and ending addresses, of system physical memory (SPM) to the virtual machine as guest physical memory (GPM). Here, the guest's restricted view of system memory is controlled by microkernel hypervisor . The term guest physical memory is a shorthand way of describing a page of memory from the viewpoint of a virtual machine and the term system physical memory is shorthand way of describing a page of memory from the viewpoint of the physical system. Thus, a page of memory allocated to a virtual machine will have a guest physical address (the address used by the virtual machine) and a system physical address (the actual address of the page).","A guest operating system may virtualize guest physical memory. Virtual memory is a management technique that allows an operating system to over commit memory and to give an application sole access to a logically contiguous working memory. In a virtualized environment, a guest operating system can use one or more page tables, called guest page tables in this context, to translate virtual addresses, known as virtual guest addresses into guest physical addresses. In this example, a memory address may have a guest virtual address, a guest physical address, and a system physical address.","In the depicted example, parent partition component, which can also be also thought of as similar to domain 0 of Xen's open source hypervisor can include a host environment . Host environment  can be an operating system (or a set of configuration utilities) and host environment  can be configured to provide resources to guest operating systems executing in the child partitions 1-N by using virtualization service providers  (VSPs). VSPs , which are typically referred to as back-end drivers in the open source community, can be used to multiplex the interfaces to the hardware resources by way of virtualization service clients (VSCs) (typically referred to as front-end drivers in the open source community or paravirtualized devices). As shown by the figures, virtualization service clients execute within the context of guest operating systems. However, these drivers are different than the rest of the drivers in the guest in they communicate with host environment  via VSPs instead of communicating with hardware or emulated hardware. In an exemplary embodiment the path used by virtualization service providers  to communicate with virtualization service clients  and  can be thought of as the enlightened IO path.","As shown by the figure, emulators , e.g., virtualized IDE devices, virtualized video adaptors, virtualized NICs, etc., can be configured to run within host environment  and are attached to emulated hardware resources, e.g., IO ports, guest physical address ranges, virtual VRAM, emulated ROM ranges, etc. available to guest operating systems  and . For example, when a guest OS touches a guest virtual address mapped to a guest physical address where a register of a device would be for a memory mapped device, microkernel hypervisor  can intercept the request and pass the values the guest attempted to write to an associated emulator. Here, the emulated hardware resources in this example can be thought of as where a virtual device is located in guest physical address space. The use of emulators in this way can be considered the emulation path. The emulation path is inefficient compared to the enlightened IO path because it requires more CPU time to emulate devices than it does to pass messages between VSPs and VSCs. For example, several actions on memory mapped to registers are required in order to write a buffer to disk via the emulation path, while this may be reduced to a single message passed from a VSC to a VSP in the enlightened IO path, in that the drivers in the VM are designed to access IO services provided by the virtualization system rather than designed to access hardware.","Each child partition can include one or more virtual processors ( and ) that guest operating systems ( and ) can manage and schedule threads to execute thereon. Generally, the virtual processors are executable instructions and associated state information that provide a representation of a physical processor with a specific architecture. For example, one virtual machine may have a virtual processor having characteristics of an Intel x86 processor, whereas another virtual processor may have the characteristics of a PowerPC processor. The virtual processors in this example can be mapped to processors of the computer system such that the instructions that effectuate the virtual processors will be directly executed by physical processors. Thus, in an embodiment including multiple processors, virtual processors can be simultaneously executed by processors while, for example, other processor execute hypervisor instructions. The combination of virtual processors and memory in a partition can be considered a virtual machine.","Guest operating systems ( and ) can be any operating system such as, for example, operating systems from Microsoft\u00ae, Apple\u00ae, the open source community, etc. The guest operating systems can include user\/kernel modes of operation and can have kernels that can include schedulers, memory managers, etc. Generally speaking, kernel mode can include an execution mode in a processor that grants access to at least privileged processor instructions. Each guest operating system can have associated file systems that can have applications stored thereon such as terminal servers, e-commerce servers, email servers, etc., and the guest operating systems themselves. The guest operating systems can schedule threads to execute on the virtual processors and instances of such applications can be effectuated.","Referring now to , it illustrates an alternative virtualization platform to that described above in .  depicts similar components to those of ; however, in this example embodiment hypervisor  can include a microkernel component and components similar to those in host environment  of  such as the virtualization service providers  and device drivers , while management operating system  may contain, for example, configuration utilities used to configure hypervisor . In this architecture, hypervisor  can perform the same or similar functions as microkernel hypervisor  of ; however, in this architecture hypervisor  effectuates the enlightened IO path and includes the drivers for the physical hardware of the computer system. Hypervisor  of  can be a stand alone software product, a part of an operating system, embedded within firmware of the motherboard or a portion of hypervisor  can be effectuated by specialized integrated circuits.","Turning now to , it describes computer system , which illustrates a high-level block diagram of components that can be used to effect the techniques described in this document. Briefly, computer system  can include components similar to those described above with respect to .  shows virtualization system , which can be thought of as a high-level representation of the virtualization platform illustrated by  or . For example, virtualization system  can be though of as a high-level representation of the combination of features provided by microkernel hypervisor  and host environment . Alternatively, virtualization system  can be thought of as a high-level representation of hypervisor  and management OS . Thus, use of the term \u201cvirtualization system \u201d throughout this document signals that the virtual disk techniques described in the following paragraphs can be implemented within any type of virtualization software layer or in any type of virtualization platform.","Virtualization system  can include offload provider engine . Briefly, offload provider engine  can be configured to service offload read and offload write requests (sometimes called PROXY READ and PROXY WRITE) issued by, for example, application . An offload read request is a request to create a token that represents data that would have been read if the offload read had been a normal read. An offload write is a request to write the data represented by a token to a destination location. In one usage example, an offload read followed by an offload write can be used to copy data from one location to another, e.g., from computer system  to a destination computer system within a domain by using tokens that represent the data to avoid moving the data through local RAM. For example, suppose that computer system  and a destination computer system (not shown) can access a common data repository and a request to copy data from computer system to the destination is received. Instead of copying the data to the destination, application  can issue a request to offload provider engine  to issue a token that represents the data as it exists at the time the token is associated with the data. The token can be sent to the destination and used by a program running on the destination to obtain the data from the common data storage repository and write the data to the destination. Copy-offload techniques are described in more detail in co-pending U.S. patent application Ser. No. 12\/888,433, entitled \u201cOffload Reads and Writes\u201d and U.S. patent application Ser. No. 12\/938,383, entitled \u201cVirtualization and Offload Reads and Writes,\u201d the contents of which are herein incorporated by reference in their entirety to the extent they are consistent with techniques described in this document.","Virtual disk parser , which can be a module of executable instructions in a specific example embodiment, can be used to instantiate virtual disks from virtual disk files and handle storage IO on behalf of a virtual machine. As shown by the figure, virtual disk parser  can open one or more virtual disk files such as virtual disk file(s)  and generate virtual disk .","Virtual disk parser  can obtain virtual disk file(s)  from storage device  via virtualization system file system . Briefly, virtualization system file system  represents a software module that organizes computer files and data of virtualization system , such as virtual disk file(s) . Virtualization system file system  can store this data in an array of fixed-size physical extents, i.e., contiguous areas of storage on a physical storage device. In a specific example, an extent can be a cluster, which is a sequence of bytes of bits having a set length. Exemplary cluster sizes are typically a power of 2 between 512 bytes and 64 kilobytes. In a specific configuration, a cluster size can be 4 kilobytes.","When a request to open virtual disk file  is received, virtualization system file system  determines where the file is located on disk and issues an IO job to the disk device driver to read the data from one or more physical extents of the disk. The IO job issued by file system  determines a disk offset and length that describes the location of the persistent copy of virtual disk file  on storage device  and issues the IO job to storage device . Due to the semantics of how storage devices operate, a write IO job can be buffered in one or more levels of caches of volatile memory, represented by cache , until the circuitry of storage device  determines to access the location on the persistent storage unit , e.g., a platter, a flash memory cell, etc., and write the buffered bit pattern indicative of the new contents of the persistent copy of the virtual disk file(s)  to persistent storage unit .","Virtual disk parser  can obtain the bit pattern indicative of virtual disk file(s)  and expose the payload, e.g., user data, in the virtual disk file(s)  as a disk including a plurality of virtual disk extents. In an embodiment, these virtual disk extents can be a fixed-size block 512 kilobytes up to 64 megabytes in size and partitioned into a plurality of sectors; however, in another embodiment the virtual disk extents could be variable-sized extents. In an exemplary configuration, prior to booting guest operating system , resources related to an emulated or enlightened storage controller and emulated or enlightened aspects of a virtual disk are setup such that an emulated storage controller with memory mapped registers is effected within guest physical address space of the virtual machine . Boot code can run and boot guest operating system . Virtualization system  can detect an attempt to access this region of guest physical address space and return a result that causes guest operating system  to determine that a storage device is attached to the emulated storage controller. In response, guest operating system  can load a driver (either a paravirtualization driver or a regular driver) and use the driver to issue storage IO requests to the detected storage device. Virtualization system  can route the storage IO requests to virtual disk parser .","After guest operating system  is running it can issue IO jobs to virtual disk  via file system , which is similar to virtualization system file system  in that it organizes computer files and data of guest operating system  and applications installed on guest operating system . Guest operating system  can interact with virtual disk  in a way that is similar to how an operating system interacts with a physical storage device and eventually the IO jobs are routed to virtual disk parser . Virtual disk parser  can include logic for determining how to respond to the IO jobs in a way that emulates a physical storage device. For example, virtual disk parser  can read data from virtual disk file(s)  and write data to virtual disk file(s) . The data written to virtual disk file(s)  in turn is routed through virtualization system file system  and committed to a persistent copy of virtual disk file(s)  stored on or in persistent storage unit .","Referring briefly to , it illustrates an alternative architecture for implementing techniques described in this document. As shown by , virtual disk parser  can also be implemented in an operating system  such as an operating system offered by Microsoft\u00ae. In this example, virtual disk parser  can be configured to run on storage server , which could include components similar to computer system  of . In this example, storage server  could include an array of physical storage devices  and can be configured to make storage available to servers such that the storage appears as locally attached to operating system . Virtual disk parser  can operate the same as it was described with respect to ; the difference being in this configuration read\/write IO jobs issued by file system  can be routed over a network connection to virtual disk parser .","Referring briefly to , it illustrates yet another architecture for implementing techniques described in this document.  is similar to  in that virtual disk parser  is implemented in operating system  and computer system  could include components similar to computer system  of . The difference in this example; however, is that the figure illustrates a loopback-attached virtual disk . File system , including applications such as application  can be stored in virtual disk  and virtual disk file(s)  can be stored in computer system file system .","Turning attention now to virtual disk , while it can be effected by a single virtual disk file, in other configurations a group of differencing virtual disk files can be used to bring about virtual disk .  illustrates exemplary chains of virtual disk files that can be used by virtual disk parser  to effect virtual disk  as a differencing disk. Generally, a differencing virtual disk file represents the current state of a virtual disk as a set of modified extents in comparison to a parent image. The parent image can be another differencing virtual disk file or a base virtual disk file.","In an exemplary configuration, the linking between a parent virtual disk file and a child virtual disk file can be stored within the child. In particular, the child can include an identifier of the parent and a value that describes the location of the parent. When starting a virtual machine, virtual disk parser  may receive information that describes the last virtual disk file in the chain, i.e., virtual disk file  is the last in a chain that includes virtual disk files , , , and , and open this file. This file can include an identifier of its parent, i.e., virtual disk file , and a path to it. Virtual disk parser  can locate and open the parent and so on and so forth until a base virtual disk file is located and opened.","Virtual disk parser  can use information that indicates whether data is present or stored in a parent virtual disk file. Typically, the last virtual disk file in the chain is opened as read\/modify and other virtual disk files are opened as read only. Thus, writes are typically made to the last virtual disk file in the chain. Read operations are similarly directed first to the last virtual disk file in the chain and virtual disk parser  will logically search the virtual disk files in logical order from last to base until the data is found in the instance that information about where the data is located is not cached. In a specific example, a block allocation table (not shown) for a virtual disk file, e.g., virtual disk file , can include state information that indicates whether the virtual disk extent is defined by a section of the virtual disk file or if this virtual disk extent is transparent, e.g., defined by a different virtual disk file further along the chain. In one implementation, virtual disk parser  can determine whether this virtual disk extent is transparent and access the block allocation table for the next virtual disk file in the chain, e.g., virtual disk file , and so on and so forth until a virtual disk file in the chain is located that defines the data.","Referring now to , it illustrates virtual disk  described at least in part by virtual disk file , which could be similar to any virtual disk file described in  that is write\/modifiable, e.g., virtual disk file , , or , or a single virtual disk file. As shown by the figure, virtual disk  can include N extents of storage (where N is an integer greater than 0) and in this specific example virtual disk  includes 10 extents. Virtual disk  is illustrated as including the bit patterns for different files and data for guest operating system , which are differentiated by the different patterns within the virtual disk extents.","Since virtual disk  is not a physical storage device, the underlying payload data for the virtual disk extents can be \u201cdescribed by,\u201d i.e., stored in, different sections within virtual disk file . For example, virtual disk extent  is described by a section that is defined by a virtual disk file offset value 0 or the first offset that can be used to store payload data. Allocation table , which can be stored in random access memory while computer system  is in operation, can be persisted in virtual disk file  in any section and can span multiple sections. Briefly, allocation table  can include information that links virtual disk extents to sections of virtual disk file . For example, allocation table  can store information that defines the virtual disk file byte offsets that define the section of virtual disk file  that stores the data. The arrows signify the relationships stored in allocation table .","Described in more detail in the following paragraphs, allocation table  can also include state information; however, this configuration is exemplary. In alternate configurations this information can be stored in a different section of virtual disk file  and loaded into RAM . Allocation table  can include an entry for each virtual disk extent; state information indicating what state each extent is in; and a file offset indicating where in virtual disk file  each virtual disk extent is described (not illustrated). In an alternative embodiment an extent could also be defined by multiple already-mapped and contiguous (in file offset) table entries. In this configuration, reads and writes that cross block boundaries can be serviced as a single read\/write to virtual disk file  if the block payloads are contiguous in the file. In a specific example, virtual disk parser  can also store information that indicates what type of bit pattern is stored in each unused section of the virtual disk file, i.e., a free space map. In addition to the foregoing, the free-space map can allow be used by virtual disk parser  to determine which sectors of virtual disk file  are used and which are free. The free space map in this example can be configured to track free space in the file that is non-zero. In an exemplary embodiment, because using a non-zero portion of free space to describe a portion of virtual disk , which must be zero or must not disclose information from other virtual disk offsets, the free space is overwritten with zeros or a non-information disclosing pattern (typically zeros), respectively. Virtual disk parser  can use this information in order to determine what section of virtual disk file to allocate to a virtual disk extent. For example, if a virtual disk extent in the zero state is written to, virtual disk parser  can allocate a section that already has zeros in it to back the virtual disk extent.","As guest operating system  or operating system  runs it will generate data and files and issue disk writes to virtual disk  to store data. When virtual disk file  does not have any additional non-used space, virtual disk parser  can extend the end of file and use the new space to describe the virtual disk extents. Guest operating system  or operating system  may use, delete, and reuse sections of virtual disk ; however, since virtual disk parser  is merely storing data on behalf of file system , virtual disk parser  may be unable to determine whether a section of virtual disk file is still being used by guest operating system . Consequently, virtual disk parser  may hold allocated space in virtual disk file  to describe virtual disk extents that are no longer in use by file system . The result of this is that the size of virtual disk file  may grow until it reaches the size of virtual disk .","In exemplary embodiments, virtual disk parser  can be configured to reclaim unused sections of a virtual disk file and optionally reuse them. As such, the frequency at which the virtual disk file needs to be extended is reduced, and the overall size of the virtual disk file is reduced. In an example embodiment, when a file system signals that it is no longer using a virtual disk extent, virtual disk parser  can de-allocate, i.e., unlink, the virtual disk extent from the virtual disk file and associate the virtual disk extent with information that describes how read operations to the virtual disk extent should be treated. The section of the virtual disk file can then be reused to describe the same or another virtual disk extent.","In an exemplary configuration, virtual disk parser  can use TRIM, UNMAP, and\/or WRITE SAME of zero commands issued by a file system to determine when a virtual disk extent can be de-allocated from virtual disk file(s) . TRIM commands can be issued by guest operating system  or operating system . For example, as guest operating system  or operating system  runs, file system  may determine that some sectors are no longer needed and issue a TRIM command. Alternatively or additionally, virtual disk parser  can be configured to request that file system  issue TRIM commands at predetermined intervals, or when predetermined criteria are satisfied, e.g., when virtual machine  is instantiated, when virtual machine  is shut down, under light use, etc.","Briefly, a TRIM command is used to inform the data storage device as to which sectors are no longer considered in use so that the data stored therein can be optionally discarded by the data storage device. One type of TRIM command, called a free space TRIM command, can be used by file system  to signal that sectors are no longer in use by file system  and the other, called a standard TRIM command, does not. The difference between the two types of TRIM commands is that when a sector is the subject of a free space TRIM, file system  provides security for the sector by preventing user space applications and the like from reading from the sector. The fact that file system  secures access to sectors that have been trimmed in this way can be used to increase the ability to efficiency allocate virtual disk file space. This particular aspect is described in more detail in the following paragraphs.","In an exemplary configuration, virtual disk parser  can be configured to execute reclamation operations when a virtual disk extent is fully covered by a TRIM command. Or put another way, virtual disk parser  can unlink virtual disk extents from the virtual disk file in response to receipt of a TRIM command that defines a range of virtual disk sectors that identifies all of the sectors in the virtual disk extent. In the same or an alternative embodiment, when a TRIM command is received that covers a portion of a virtual disk extent, virtual disk parser  can determine what portion of the virtual disk file corresponds to the trimmed sectors and send a TRIM command for the portion of the virtual disk file to storage device . In this example, the underlying file system, e.g., virtualization system file system , storage server file system , or computer system file system  can translate the offsets of the TRIM command and send the translated offsets to storage device , reclaim space directly via internal data structure updates, or clear data from caches.","In the same or another embodiment, when a TRIM command is received that covers a portion of a virtual disk extent, virtual disk parser  can be configured to store information that indicates what sectors have been the subject of the TRIM command and whether the TRIM command was a free space trim or not. In the instance that the remainder of the virtual disk extent is trimmed, virtual disk parser  can de-allocate the virtual disk extent from the virtual disk file.","When de-allocating virtual disk extents, virtual disk parser  can associate the virtual disk extent with state information that describes how read operations directed to the virtual disk extent can be handled. Table 1 illustrates exemplary state information that virtual disk parser  can associate with virtual disk extents and use to optimize the reclamation of the virtual disk file. The ability to reclaim a virtual disk extent can be accomplished in one example by using two states (described and not described); however, since the bit pattern stored in virtual disk file  is not typically erased when the data is deleted, additional states can be used to determine when space selected to describe a virtual disk extent needs to be cleared before it can be reused or if it can be reused without overwriting the data previously stored therein. One reason for why the data is not erased upon deletion is that it costs processor cycles to erase data and since some storage devices are configured to perform write operations on a per-block basis, it is more efficient to erase data when over-writing with new data. The following states are exemplary and the disclosure is not limited to using states that are defined by the following table.",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Mapped","This state indicates that the virtual disk extent is"]},{"entry":[{},"linked to the virtual disk file."]},{"entry":["Transparent","This state indicates that the virtual disk extent is"]},{"entry":[{},"defined by a different virtual disk file."]},{"entry":["Zero","This state indicates that the virtual disk extent is not"]},{"entry":[{},"described by the virtual disk file. In addition, this state"]},{"entry":[{},"indicates that the virtual disk extent is defined as zero and"]},{"entry":[{},"that the zeros are meaningful."]},{"entry":["Unmapped","This state indicates that the virtual disk extent is not"]},{"entry":[{},"described by the virtual disk file. In an embodiment, this"]},{"entry":[{},"state can include sub-states anchored and"]},{"entry":[{},"unanchored."]},{"entry":["Uninitialized","This state indicates that the virtual disk extent is not"]},{"entry":[{},"described by the virtual disk file and that the virtual disk"]},{"entry":[{},"extent is defined as free space. In an embodiment, this"]},{"entry":[{},"state can also include sub-states anchored and unanchored."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Referring to Table 1 in conjunction with , the first state listed is the \u201cmapped\u201d state, which indicates that the virtual disk extent is described by a section of virtual disk file . For example, virtual disk extent  is an example virtual disk extent that is illustrated as being in the \u201cmapped\u201d state.","Continuing with the description of Table 1, a virtual disk extent can be associated with state information that indicates that the virtual disk extent is \u201ctransparent,\u201d that is, the virtual disk extent is described by a different virtual disk file. In the instance that a read operation is received by virtual disk parser  to a virtual disk extent in the transparent state, virtual disk parser  can refer to a different virtual disk file and check its allocation table to determine how to respond to the read. In an instance that virtual disk parser  receives a write to the virtual disk extent, virtual disk parser  can transition the virtual disk extent from the \u201ctransparent\u201d state to the \u201cmapped\u201d state.","Continuing with the description of Table 1 in conjunction with , a virtual disk extent can also be associated with the \u201cunmapped\u201d state. In this example, the virtual disk extent is not described by virtual disk file  nor is it described by any other virtual disk file in a chain. In this example, the unmapped state can be used to describe a virtual disk extent that was subject to a TRIM command that did not indicate that file system  would secure access to the virtual disk extent. Or put another way, the TRIM command used to transition this virtual disk extent to this state was a standard TRIM command. In the instance that the virtual disk extent is in the unmapped state and an IO job indicative of a read to the extent is received, virtual disk parser  can respond with zeros, the zero token, ones, a token representing all ones, or a non-information disclosing bit pattern, e.g., all zeros, all ones, or a randomly generated pattern of ones and zeros. In this example, if a section of virtual disk file  is allocated to back a virtual disk extent in this state, virtual disk parser  can write a non-information disclosing bit pattern to the section of virtual disk file  before allocating it or select a section that already includes a non-information disclosing bit pattern to describe the virtual disk extent. Virtual disk extent  of  is indicated as in the unmapped state.","In an embodiment, the data defining an unmapped or uninitialized extent can be kept and the unmapped or uninitialized state can include two sub-states: anchored, which means that the data is still present within virtual disk file , and unanchored, which means that the data may or may not be kept. In instances where these sub-states are used, virtual disk parser  can transition an unmapped but anchored extent to mapped by allocating the section or sections that store the data without zeroing the section or sections. Similarly, while virtual disk parser  is configured to treat uninitialized extents as if they were unmapped for at least a portion of virtual disk , virtual disk parser  can avoid zeroing an uninitialized but anchored extent during transition of that extent to mapped, by allocating the section or sections that store the data without zeroing the section or sections.","Table 1 additionally describes a \u201czero\u201d state. In this example, the virtual disk extent is not described by virtual disk file  nor is it described by any other virtual disk file in a chain; however, the virtual disk extent is required to read as all zeros. In this example, the zero state can be used to describe a virtual disk extent that was subject to either type of TRIM command or to describe a virtual disk extent that a program has written all zeros to. For example, suppose a deletion utility program wrote all zeros to virtual disk extent  to ensure that the data it previously stored was completely overwritten. In the instance that the virtual disk extent is in the zeroed state, and an IO job indicative of a read to the extent is received, virtual disk parser  can respond to with zeros or the zero token (in an offload read operation). In the instance that a write is directed to a virtual disk extent in this state, virtual disk parser  can zero a section of virtual disk file  and use it to describe the virtual disk extent or select a section of virtual disk file  that is already zero and allocate it to back the virtual disk extent. In this embodiment, zeroed space could be tracked using a data structure or virtual disk file . The data structure could be updated periodically, when virtual disk file  is opened, when virtual disk file  is closed, etc. A read from an extent in the unmapped or uninitialized states may optionally cause virtual disk parser  to transition the extent to the zero state in a configuration where virtual disk parser  is configured to provide sector stability for extents in the unmapped or uninitialized states.","Table 1 also describes a state called the \u201cuninitialized\u201d state. The uninitialized state indicates that the virtual disk extent is not described by virtual disk file  and file system  is securing access to the virtual disk extent. That is, file system  is configured to prevent user applications from reading sectors within this virtual disk extent. In this example, the uninitialized state can be used to describe a virtual disk extent that was subject to a free space TRIM command. In the instance that the virtual disk extent is in the uninitialized state and an IO job indicative of a read to the extent is received, virtual disk parser  can respond with any data, i.e., a bit pattern from almost anywhere else in virtual disk file , zeros, ones, a non-information disclosing bit pattern, etc., because virtual disk parser  is not providing security for the virtual disk extent, beyond the requirement that only virtual disk payload data and non-security-impacting metadata may be exposed to the virtual disk client. In the instance that a write is directed to a virtual disk extent in this state, virtual disk parser  can simply allocate a section of the virtual disk file  without having to alter any data that may be stored within the section. Consequently, this state is the most advantageous because space can be allocated within the virtual disk file without clearing it beforehand. Virtual disk extent  of  is indicated as in the uninitialized state and virtual disk file  is not backing the virtual disk extent.","Once state information is associated with each virtual disk extent, virtual disk parser  can be configured to provide additional information to an administrator or the like about how virtual disk  is arranged. In an example embodiment, virtual disk parser  can be configured to respond to offset queries that include certain parameters based on the state information. For example, a user can issue a query to iterate, starting at a given byte offset, through virtual disk  and locate ranges that satisfy a specific criteria such as \u201cmapped,\u201d \u201cunmapped,\u201d \u201ctransparent,\u201d etc. In addition, a user can select how \u201cdeep\u201d the query should go to take into account differencing virtual disk files. For example, and referring to , a user could set a depth of 2 and execute a query. In response, virtual disk parser  will execute the query on the last two virtual disk files in a chain, e.g., virtual disk files  and . Specific queries can include a query to obtain the next non-transparent range(s), the next non-zero range(s), the next defined range(s), the next initialized range(s), etc. Briefly, a query for the next defined range can be configured to return the next range(s) which contain defined data (e.g., sectors in the mapped or zeroed state, with transparent sectors resolving to the parent virtual disk file's state for that sector). A query for the next initialized range(s) can return the next range(s) which contain data in a state other than the uninitialized state, with transparent sectors resolving to the parent virtual disk file's state for that sector.","Turning now to , it illustrates a specific example of how virtual disk parser  can transition virtual disk extents from one state to another in response to a file or other data being saved to virtual disk . For example, suppose that a user uses a database management program within virtual machine  and creates a database. The user can save the database in a file and file system  can determine where on virtual disk  to save file . File system  can issue one or more disk writes to write file  to, for example, sectors that fall within virtual disk extents -. In this example, virtual disk extent  is \u201cmapped\u201d and virtual disk parser  can write the first portion of file  to the section identified by allocation table .","Virtual disk extents  and , on the other hand, are in the \u201czero\u201d and \u201cuninitialized\u201d state. In this example, virtual disk parser  can select an unused section of virtual disk file  to back virtual disk extent  and determine that virtual disk extent  is in the zeroed state. In response to this determination, virtual disk parser  can zero the section that is going to be used to describe virtual disk extent  or locate a section which is already all zeros. After locating a zeroed section or the process of zeroing the section is complete, virtual disk parser  can generate information that identifies the virtual disk file byte offset indicative of the first byte of the section that defines where virtual disk extent  is described in virtual disk file  and store it in allocation table . Virtual disk parser  can then change the state information associated with virtual disk extent  to indicate that it is \u201cmapped.\u201d Then the portion of the write to extent  can be written to the located section.","Alternatively, for a portion of a write which covers an entire extent of the virtual disk currently in the zero state, a located section of the virtual disk file may be chosen, the portion of the write may be issued to the section, and upon completion of the write the virtual disk parser  can then change the state information associated with the virtual disk extent to indicate that the extent is \u201cmapped\u201d. Alternatively, for a portion of a write which only covers part of a virtual disk extent currently in the zero state, a located section of the virtual disk file may be chosen, the portion of the write may be issued to the section, a zeroing write may be issued to the remainder of the section, and on completion of the write the virtual disk parser  can then change the state information associated with the virtual disk extent to indicate that the extent is \u201cmapped\u201d. Those skilled in the art will recognize that the given ordering of writes may be enforced using flush or write-through writes, such as force-unit-access writes.","Similarly, virtual disk parser  can select an unused section of virtual disk file  to back virtual disk extent  and determine that virtual disk extent  is in the uninitialized state by consulting allocation table . In response to this determination, virtual disk parser  can allocate the section to describe virtual disk extent  without modifying the contents of the selected section. Virtual disk parser  can generate information that identifies the virtual disk file byte offset indicative of the first byte of the section, which indicates where virtual disk extent  is described in virtual disk file  and store the file byte offset of the section in allocation table . Virtual disk parser  can then change the state information associated with virtual disk extent  to indicate that it is \u201cmapped.\u201d",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 9","b":["404","802","7","802","414","404","4","5","3","4","5","404","416","4","702","4","404","404","414","404","404","404","702","702","702"]},"Since virtual disk extent  was partially covered by the TRIM, virtual disk parser  can handle this extent in one of a variety of ways. In one configuration, virtual disk parser  may leave extent  in the mapped state. In this configuration, virtual disk parser  may transition extents when TRIM information is received for an entire extent. Alternatively, virtual disk parser  may track TRIM information that partially covers extents in the hope that more TRIM information is received that provides an indication that space describing the extent can be de-allocated.","Similarly, virtual disk extent was also partially covered by the TRIM. In this example, virtual disk parser  may leave it in the mapped state and can also be configured to send TRIM information that describes the part of virtual disk file  that is no longer in use to the underlying file system, e.g., virtualization file system , storage server file system , or computer system file system .","In addition to the deletion of file ,  shows an example where virtual disk extent  was zeroed. Virtual disk parser  can scan an IO job issued by file system  that indicates that the entire range of virtual disk extent  is zeroed. In response to this determination, virtual disk parser  can be configured to remove the linking from extent allocation table  and transition virtual disk extent  to the zero state. As shown by the figure, the previous contents of virtual disk extent  are still being stored in virtual disk file .","Turning to , it illustrates virtual disk  described at least in part by a group of virtual disk files , , , which could be similar to the chain of virtual disk files defined by virtual disk file , , and . In this exemplary embodiment, the data that represents virtual disk  is broken up across multiple virtual disk files. In this exemplary embodiment, when virtual disk parser  attempts to read virtual disk extent  and , virtual disk parser  can access the allocation table for virtual disk file  and determine that these extents are transparent. Next, virtual disk parser  can access the allocation table for virtual disk file  and determine that these extents are transparent. Finally, virtual disk parser  can access allocation table for grandparent virtual disk file  and determine that these virtual disk extents are defined.","The following are a series of flowcharts depicting operational procedures. For ease of understanding, the flowcharts are organized such that the initial flowcharts present implementations via an overall \u201cbig picture\u201d viewpoint and subsequent flowcharts provide further additions and\/or details that are illustrated in dashed lines. Furthermore, one of skill in the art can appreciate that the operational procedure depicted by dashed lines are considered optional.","Referring now to , it illustrates an operational procedure for reclaiming space within a virtual disk file including the operations , , , and . Operation  begins the operational procedure and operation  shows instantiating a virtual disk including a virtual disk extent, the virtual disk extent being dissociated from a virtual disk file. Turning briefly to ,  or , virtual disk  can be instantiated by virtual disk parser , e.g., executable instructions and associated instance data, that exposes the data stored within one or more virtual disk files as a logical hard drive, which can be configured to handle read\/write operations from file system  by emulating the behavior of a hard drive. Virtual disk file  (which could be one or more files as illustrated in ) can store what is typically found on a physical hard drive, i.e., disk partitions, file systems, etc. Turning to , virtual disk  is shown including a plurality of extents, some of which are dissociated from any sections of virtual disk file .","In a specific example, suppose the extents are blocks. In this example, allocation table , which can be loaded from one or more sections in the virtual disk file  into random access memory, can be used to store information that links virtual disk blocks in virtual disk  to extent sized (e.g., block sized) sections of virtual disk file . Allocation table  can also store state information for each virtual disk block in virtual disk . Virtual blocks that potentially include non-zero data can be associated with state information that indicates that the block is in the mapped state. That is, a section of virtual disk file  has been allocated to describe, i.e., store data for, a block of virtual disk . Virtual disk blocks - and  are examples of blocks in this state. As shown by the figure, virtual disk blocks  and , ,  and  may be valid virtual disk blocks; however, these virtual disk blocks may not have any space allocated within virtual disk file . Since file system  may write to these blocks, in an exemplary embodiment, these virtual disk blocks can be associated with information that can be used by virtual disk parser  to determine how to respond to read and\/or write operations to them.","Referring briefly back to , operation  shows that a computer system can additionally include circuitry for allocating, based on state information associated with the virtual disk, a section of the virtual disk file to describe the virtual disk extent without overwriting a preexisting bit pattern within the section of the virtual disk file. For example, and returning to , virtual disk parser  can receive an IO job to write to a portion of the virtual disk extent. In response to receipt of the write IO job, virtual disk parser  can check allocation table  and determine that space within virtual disk file  has not been allocated to describe the virtual disk extent and allocate a section of virtual disk file  to back the virtual disk extent. Thus, the data written by file system  to the virtual disk extent will be stored by virtual disk parser  in a section of virtual disk file .","In this example, virtual disk parser  may not overwrite any data already stored in the section of virtual disk file  (by writing all zeros, ones, or any other non-information disclosing bit pattern) prior to using it to describe the virtual disk extent based on the state information in allocation table . In an exemplary configuration, the state information could indicate that file system  is securing access to this virtual disk extent because the virtual disk extent is covered by file system free space. In a specific example, the state information could indicate that the virtual disk extent is in the \u201cuninitialized\u201d state. Allocating the virtual disk extent without clearing it provides an added benefit of saving processor cycles and IO jobs that would be otherwise used to overwrite the section of virtual disk file .","In a specific example of operation , and turning to , suppose that an extent is a block and file system  sends an IO job to virtual disk  to write a bit pattern indicative of file  to virtual disk blocks -. In response to receipt of such an IO job, virtual disk parser  can determine that virtual disk block  is not backed by any sections of virtual disk file  and that it is uninitialized. In response to this determination, virtual disk parser  can be configured to allocate a section of virtual disk file  to describe virtual disk block  and write a portion of the bit pattern indicative of file  therein without overwriting data that was previously stored in the portion of the section not covered by the IO job.","Turning again to , operation  shows that the computer system can additionally include circuitry configured to modify the state information associated with the virtual disk extent to indicate that the virtual disk extent is described by the virtual disk file. For example, and turning back to , virtual disk parser  can modify, e.g., overwrite in memory, the state information associated with virtual disk extent  to reflect that virtual disk file  is describing the virtual disk extent. In one configuration, the write and the modification of the state information can occur concurrently. For example, virtual disk parser  can store information in allocation table  that indicates that virtual disk extent  is \u201cmapped.\u201d Consequently, subsequent read operations directed to sectors of virtual disk extent  will be handled by virtual disk parser  by returning the bit pattern stored at the byte offset identified in allocation table . Virtual disk parser  can concurrently write data, e.g., a bit pattern associated with a write operation that triggered this procedure, to the section of virtual disk file  allocated to describe the virtual disk extent and issue an IO job to a write the bit pattern to the section of virtual disk  to virtualization system file system , storage server file system , or computer system file system . At some point in time, such as prior to completion of a subsequently issued flush command, the bit pattern will be persisted in persistent storage unit .","Turning now to , it shows additional operations that can be executed in conjunction with those illustrated by . Turning to operation , it indicates that the computer system can include circuitry for responding to an offset query command with information that identifies sectors of the virtual disk that are non-zero, sectors of the virtual disk that are in a non-transparent state, sectors of the virtual disk that are in a mapped state, and\/or sectors of the virtual disk that are in an initialized state. For example, virtual disk parser  can be configured to receive a command to generate information about virtual disk  such as the next byte offset on the virtual disk, given a starting byte offset, that is in a non-transparent state, i.e., a state other than transparent, a mapped state, i.e., sectors of the virtual disk  that include data in virtual disk file , a defined state, i.e., sectors of the virtual disk  that are mapped or zero, and\/or an initialized state, i.e., a state other than uninitialized. The command can be depth-limited, in that only a specified number of virtual disk files are examined, with any ranges remaining transparent after the specified number of virtual disk files are examined reported back to the requestor in addition to ranges indicated by the state query, regardless of which state query was requested. In response to receipt of such a command, virtual disk parser  can start at the initial byte offset on virtual disk  and build a response range or set of ranges until the range associated with the command is detected and return the desired information.","Continuing with the description of , operation  shows sending a request to a file system controlling the virtual disk file to issue at least one command selected from a group of commands including a trim command, an unmap command, a write same of zero command, and an offload write of a zero token command. Referring back to , , or , virtual disk parser  can be configured to issue a request to file system . The request in this example can be for file system  to issue a TRIM command. For example, virtual disk parser  can issue one or more requests to file system  periodically, soon after instantiation of virtual disk , and\/or prior to shutting down, hibernating, etc., virtual machine . In response to such a request, file system  can determine what sectors of virtual disk  it is no longer using and send one or more TRIM commands identifying these unused sectors to virtual disk parser . Virtual disk parser  may thereby receive trim information such as a list of ranges of sectors that are no longer in use by file system  and whether file system  is preventing reads from the ranges of sectors in order to secure access to those sectors. Virtual disk parser  can receive the information and transition virtual disk extents covered by the ranges into states where space within virtual disk file  can be reclaimed.","Continuing with the description of , operation  shows that the computer system can include circuitry for determining a portion of the virtual disk file that corresponds to a portion of a second virtual disk extent in response to receipt of a request to trim a portion of the second virtual disk extent; and circuitry for sending a trim command for the determined portion of the virtual disk file to a file system configured to store the virtual disk file on a storage device. For example, and referring to , file system  may issue a TRIM command that identifies a portion of a virtual disk extent, e.g., the TRIM command may only identify a range of sectors that corresponds to a part of the sectors that form one or more virtual disk blocks. In a specific example, suppose file system  trims the space used to store file . As such, the trim command may only identify a portion of the sectors that constitute virtual disk extent . In this example, virtual disk parser  can determine that the range of sectors covers a subsection of the virtual disk extent and use mapping information in allocation table  to determine the portion of virtual disk file  that corresponds to the trimmed sectors of the virtual disk extent. Virtual disk parser  can issue a request to trim the portion of virtual disk file  that corresponds to the trimmed sectors of the virtual disk extent to virtualization system file system  or storage server file system . Virtualization system file system  or storage server file system  may be configured to use the trim command and benefit from it by trimming a portion of the sectors backing virtual disk file , flushing data from a cache, clearing internal buffers, etc.","Alternatively, virtual disk parser  can store information indicating that a portion of the virtual disk extent was trimmed as well as information that indicates whether it was a free space trim or not. As guest operating system  or operating system  runs, it may eventually zero or trim the remainder of the virtual disk extent. In response to this occurring, virtual disk parser  can determine to transition the virtual disk extent into a state where it is not described by virtual disk file  and select a state based on how the different portions of the virtual disk extent were trimmed or zeroed. Virtual disk parser  can be configured to select the most restrictive state to transition a virtual disk extent when different portions of a virtual disk extent can be placed in different non-described states, where the zero state is the most restrictive, uninitialized is the least restrictive state, and unmapped is somewhere in between. For example, if a first portion is zeroed and the remainder is uninitialized, virtual disk parser  can transition the entire virtual disk extent to the zeroed state.","Continuing with the description of , operation  illustrates that computer system  can additionally include circuitry configured to de-allocate the virtual disk extent from the section of the virtual disk file and modify the state information associated with the virtual disk extent to indicate that the virtual disk extent has no associated space in the virtual disk file in response to receipt of a request to trim a range of sectors that covers the virtual disk extent. For example, and turning to , virtual disk parser  can remove the linking in allocation table  that ties a virtual disk extent to a section of virtual disk file . This operation has the effect of dissociating the virtual disk extent from virtual disk file . In addition to removing the link, virtual disk parser  can modify the state information associated with the virtual disk extent to indicate that the extent has no associated space within virtual disk file , i.e., virtual disk parser  can place the virtual disk extent into the unmapped, uninitialized, or zeroed state.","Virtual disk parser  can remove the linking and update the state information in response to receipt of a request to trim or zero sectors of the virtual disk extent. For example, a request to trim or zero sectors can be received that identifies a range of byte offsets that could cover one or more virtual disk extents. In response to receipt of such an IO job, virtual disk parser  can determine that the request covers the sectors of the virtual disk extent and execute the aforementioned operations for removing the linking and updating the state information.","In a specific example, suppose that the IO job indicates that the trim is a free space trim. For example, a user may have deleted file , which is stored as a bit pattern across virtual disk extents - and file system  may indicate that the space is no longer being used by file system . In response to receipt of a free space TRIM command, virtual disk parser  can access allocation table  and determine that file system  has trimmed a portion of extent ,  and all of extent . In this example, virtual disk parser  can remove the link mapping virtual disk extent  to virtual disk file  and modify the state information associated with virtual disk extent  to indicate that the virtual disk extent is uninitialized. This section of virtual disk file  can now be reused to back other virtual disk extents. In addition, virtual disk parser  can determine that virtual disk extent  and  are the subject of a partial TRIM command. In this example, virtual disk parser  can use allocation table  to discover the virtual disk file byte offsets that describe the portion of virtual disk file  that describes the trimmed portions of virtual disk extent  and  and issue a TRIM command describing the virtual disk file byte offsets to virtualization system file system , storage system file system , or computer system file system .","In another specific example, suppose that the IO job issued by file system  indicates that file  was zeroed. For example, file  could be a database file storing sensitive information such as credit card numbers and an administrator determined to zero out the contents of the file by writing all zeros to it by issuing a write command with an all-zero buffer, which will write zeros over the data existing in file . In response to receipt of such an IO job, virtual disk parser  can be configured to determine that virtual disk extent  has been zeroed and that this extent can be reclaimed. In this example, virtual disk parser  can remove the link mapping virtual disk extent  to virtual disk file  and modify the state information associated with virtual disk extent  to indicate that the virtual disk extent is zeroed. This section of virtual disk file  can now be reused to back other virtual disk extents and virtual disk parser  can respond to subsequent read operations to virtual disk extent  by replying with all zeros.","In another specific example, a user may write bulk zeros to initialize the state of file , rather than to overwrite data stored therein. In this example, a command such as a TRIM, in the instance that virtual disk parser  repots that trimmed sections read as zero, UNMAP, when virtual disk parser  reports that unmapped regions are zero, WRITE SAME of zero, and\/or an offload write of a zero token can be used to transition an extent to the zeroed state.","In a specific example, suppose that the IO job indicates that the trim is a standard trim. For example, a user may have deleted file , which is stored as a bit pattern across virtual disk extents -; however, the TRIM command may not indicate whether or not the space is being used by file system . In response to receipt of a standard TRIM command, virtual disk parser  can access allocation table  and determine that file system  has trimmed a portion of extent ,  and all of extent . In this example, virtual disk parser  can remove the link mapping virtual disk extent  to virtual disk file  and modify the state information associated with virtual disk extent  to indicate that the virtual disk extent is unmapped or zero. This section of virtual disk file  can now be reused to describe other virtual disk extents. In addition, virtual disk parser  can determine that virtual disk extent  and  are the subject of a partial TRIM command. In this example, virtual disk parser  can use allocation table  to discover the virtual disk file byte offsets that make up the portion of virtual disk file  that describes the trimmed portions of virtual disk extent  and  and issue a TRIM command specifying the virtual disk file byte offsets, typically in the form of ranges, to virtualization system file system .","Referring now to , which illustrates additional operations that can be executed in addition to operation  of . Operation  illustrates that a computer system can include circuitry for receiving a request to write data to the virtual disk extent; circuitry for zeroing an unused section of the virtual disk file based on the state information associated with the virtual disk extent, the state information indicating that the virtual disk extent was zeroed; and circuitry for allocating the unused section of the virtual disk file to describe the virtual disk extent. Referring to  for context, virtual disk parser  can receive a request to write data to the virtual disk extent, e.g., virtual disk extent  of , which in this example is associated with state information that indicates that the virtual disk extent is zeroed. For example, when virtual disk extent  was de-allocated virtual disk parser  could have determined that the virtual disk extent was zeroed, i.e., an application wrote all zeros to file  by using an offload write of a well-known zero token.","In response to determining that the virtual disk extent is in the zeroed state, virtual disk parser  can identify an unused section of virtual disk file , i.e., a section that is not actively being used to describe a virtual disk extent and not actively being used to store any allocated metadata, and use the section to back the virtual disk extent. The virtual disk parser further insures that any reads from not-yet-written sectors of the newly allocated extent read as all zeros. The virtual disk parser  can write payloads of IO write jobs to the section; update state information to indicate that the virtual disk extent is mapped; and update information in allocation table  to describe the virtual disk file byte offset that identifies the beginning of the section used to store virtual disk extent . The virtual disk parser  also can create a log entry, which insures that in the event of system failure and re-start prior to writes being flushed, not-yet-written sectors of the newly allocated extent still read as all zeros, and written sectors of the newly allocated extent read as either all zeros or the written data. Upon the first subsequent flush command, virtual disk parser  insures that a system failure subsequent to completion of the flush will result in reads from previously written sectors of the newly allocated extent reading the data that was written, and reads from not-yet-written sectors of the newly allocated extent reading zeros.","Continuing with the description of , operation  shows that a computer system can include circuitry for receiving a request to write to the virtual disk extent; and circuitry for allocating an unused section of the virtual disk file to describe the virtual disk extent without modifying contents of the unused section of the virtual disk file based on the state information associated with the virtual disk extent, the state information indicating that the file system is securing access to the virtual disk extent. Referring again to  for context, virtual disk parser  can receive an IO job to write data to the virtual disk extent, e.g., virtual disk extent  of , which in this example is associated with state information that indicates that security for the virtual disk extent is being provided by file system . In response to detecting this state information, virtual disk parser  can identify an unused section of virtual disk file ; write the payload of the IO job to the section; update state information to indicate that the virtual disk extent is mapped; and update information in allocation table  to describe the virtual disk file byte offset that identifies the beginning of the section used to store virtual disk extent .","Suppose that in this example the extent is a block and the payload for the IO job only covers a portion of the sectors in the virtual disk block. Specifically, the virtual disk block may be 512 kilobytes and the write may cover the first 500 sectors of the virtual disk block. In this example, virtual disk parser  can write data in the first 500 sectors of the allocated section of virtual disk file  without erasing the data stored in the remaining 524 sectors. Thus, if this section was examined one would find that the first 500 sectors include the payload and the remaining 524 sectors include whatever bit pattern was previously written to the section of virtual disk file . In this example, virtual disk parser  can use this section without clearing it because file system  is configured to deny read operations to sectors that are in file system free space. Since an application will be prevented from reading the remaining 524 sectors of virtual disk block, it can contain any data, which had previously been stored in the virtual disk.","Turning now to operation  of , it shows that a computer system can be configured to include circuitry for receiving a request to write to the virtual disk extent; circuitry for logically overwriting an unused section of the virtual disk file with a non-information-disclosing bit pattern based on the state information associated with the virtual disk extent, the state information indicating that the file system is not securing access to the virtual disk extent; and circuitry for allocating the overwritten section of the virtual disk file to describe the virtual disk extent. Referring again to  for context, virtual disk parser  can receive a request to write data to the virtual disk extent, which in this example is associated with state information that indicates that file system  is not securing access to the virtual disk extent. For example, virtual disk parser  may have de-allocated the virtual disk extent in response to receipt of a standard TRIM command and could have stored state information indicating that virtual disk extent is unmapped, i.e., not backed by space in virtual disk file , in allocation table .","In response to determining that the virtual disk extent is unmapped, virtual disk parser  can identify an unused section of virtual disk file  to use to describe the virtual extent and logically write a non-information disclosing bit pattern to the section to ensure that reads to the virtual disk extent do not inadvertently reveal any information. In a preferred implementation, the non-information disclosing bit pattern could be all zeros or previously-stored data. After the section is zeroed or some other non-information disclosing bit pattern is logically written to the section such as previously-stored data, virtual disk parser  can logically write the payload of an IO job to the section; update state information to indicate that the virtual disk extent is mapped; and update information in allocation table  to describe the virtual disk file byte offset that identifies the beginning of the section used to store the virtual disk extent.","Continuing with the description of , operation  shows that the computer system can include circuitry configured to send, based on state information indicating that the virtual disk extent was zeroed, a token representing zeros to a requestor in response to receipt of an offload read request associated with the virtual disk extent. For example, and referring to , offload provider engine , e.g., circuitry configured to service offload read and offload write commands, can send a token representing zeros to a requestor, e.g., application , in a response to an offload read request issued by the requestor. An offload read request can be used to efficiently copy data from one location to another by generating and sending tokens to requestors, the tokens representing the requested data instead of copying the data into the requestors' memory and then sending the data to the destination. Offload read and offload write commands can be used to achieve copy offload when the destination location recognizes the token generated by the source location and can logically write the data represented by the token to the destination. In the case of a well-known zero token generated by the source, the destination need not access the underlying storage, e.g., storage device , which could be a SAN target in this specific implementation. In this example, the offload read request can be to perform an offload read operation on one or more files that have data stored in one or more virtual disk extents, one of which is associated with state information indicating that the virtual disk extent is zeroed. In this example, the offload read request may be serviced by generating a well-known zero token value and returning that well-known zero token to the requestor.","The offload read request can be routed to offload provider engine . Offload provider engine  can receive the request and send a message to virtual disk parser  for the data stored in the virtual disk extents. Virtual disk parser  can receive the request, read the state information for the virtual disk extent, and determine, in this specific example, that the state information indicates that this virtual disk extent is zeroed. Virtual disk parser  can send a message back to offload provider engine  that indicates that the virtual disk extent is all zeros and offload provider engine  can generate a well-known token value that indicates that the requested data is all zeros, e.g., the range of sectors that describes a virtual disk block is all zeros, and send the well-known zero token to the requestor.","In a specific example, the offload request can be forward to a SAN instead of being processed by computer system , storage service , or computers system . In this example, the SAN may generate the token and return it back to virtual disk parser , which can then send the zero token to the requestor. In yet another example, when offload provider engine  receives the message that indicates that the virtual disk extent is all zeros, offload provider engine  can generate the well known-zero token, which in effect achieves logically copying the requested zero data into a separate area that is associated with the token by identifying the data as equivalent to any other zero data and sharing the area associated with the well-known zero token. In the instance that offload provider engine  subsequently receives an offload write specifying the token previously sent to the requestor, offload provider engine  can logically copy the data from the area associated with the token to offsets specified by the requestor.","Turning now to , it illustrates an operational procedure for reclaiming virtual disk file space including the operations , , , and . As shown by the figure, operation  begins the operational procedure and operation  shows that a computer system can include circuitry for receiving a signal indicating that a portion of a virtual disk extent is no longer in use, the virtual disk extent being part of a virtual disk, the virtual disk being stored in a virtual disk file. For example, and turning to , virtual disk parser  can be configured to instantiate virtual disk . File system  can send a signal indicating that it is no longer using a portion of virtual disk , e.g., a range of sectors of a virtual disk extent, to virtual disk parser . In a specific example, the signal could be a TRIM command. In a specific example, the signal received by virtual disk parser  could identify byte offset values that define a range of sectors that it is no longer using, which could be the first part of a virtual disk extent.","Continuing with the description of , operation  shows that the computer system can also include circuitry configured to identify a portion of the virtual disk file that describes the portion of the virtual disk extent. Referring back to , virtual disk parser  can receive the signal and the virtual disk byte offset values that identify, for example, the first portion of virtual disk extent . In response to receipt of the signal, virtual disk parser  can check allocation table  to determine the portion of virtual disk file  that corresponds to the virtual disk byte offset values associated with the signal.","Turning now to operation  of , it shows that the computer system can include circuitry for sending a request to trim the identified portion of the virtual disk file to a file system configured to store the virtual disk file on a storage device. For example, and again referring to , virtual disk parser  can determine that the signal identified less than the entire virtual disk extent. For example, the signal may indicate a range of sectors that does not include all of the sectors of a virtual disk extent. In response to this determination, virtual disk parser  can issue a request to trim the portion of virtual disk file  that corresponds to the trimmed portion of the virtual disk extent to a file system hosting virtual disk file , e.g., virtualization system file system . Virtualization system file system  may be configured to use the trim command and benefit from it by trimming virtual disk file , flushing data from a cache, clearing internal buffers, sending the trim to the disk on which the file system data is stored, etc.","In a specific example, virtual disk parser  can be configured to issue the TRIM command to the underlying file system in response to determining that the request to trim a portion of the virtual disk file does not cover the entire extent. For example, suppose that the signal identifies that the first 600 sectors of a virtual disk extent are no longer in use and virtual disk parser  may determine that the 600 sectors of virtual disk extent are less than the 1024 sectors that constitute the virtual disk extent. In response to this determination, virtual disk parser  can access allocation table  and determine the virtual disk file byte offsets that describe the first 600 sectors of the section of virtual disk file  that describes the virtual disk extent and send a request to trim this part of virtual disk file  to a file system that hosts virtual disk file .","Turning now to , it illustrates additional operations that can be executed in conjunction with those depicted by . Turning now to operation , it shows that the computer system can additionally include circuitry for sending, based on state information indicating that the virtual disk extent was zeroed, a token representing zeros to a requestor in response to receipt of an offload read request associated with the virtual disk extent. For example, and referring to , offload provider engine , e.g., circuitry configured to service offload read and offload write commands, can send a token representing zeros to a requestor, e.g., application , in a response to an offload read request issued by the requestor. An offload read request can be used to efficiently copy data from one location to another by generating and sending tokens to requestors, the tokens representing the requested data instead of copying the data into the requestors' memory and then sending the data to the destination. Offload read and offload write commands can be used to achieve copy offload when the destination location recognizes the token generated by the source location and can logically write the data represented by the token to the destination. In the case of a well-known zero token generated by the source, the destination need not access the underlying storage, e.g., storage device , which could be a SAN target in this specific implementation. In this example, the offload read request can be to perform an offload read operation on one or more files that have data stored in one or more virtual disk extents, one of which is associated with state information indicating that the virtual disk extent is zeroed. In this example, the offload read request may be serviced by generating a well-known zero token value and returning that well-known zero token to the requestor.","Continuing with the description of , operation  shows that the computer system can include circuitry for selecting a sub-group from the group of virtual disk files; and circuitry for generating information that identifies sectors of the sub-group that include data and sectors of the sub-group that are transparent. In an exemplary embodiment, virtual disk  can be instantiated from a plurality of virtual disk files. Or put another way, virtual disk  can be formed from M virtual disk files (where M is an integer greater than 1). In this exemplary embodiment, virtual disk parser  can be configured to receive a request from, for example, an administrator, to determine the next byte offset on virtual disk , starting at a given byte offset, that is associated with a sector defined within a subgroup of the virtual disk files. For example, and referring to , virtual disk parser  may receive a request for the next defined byte offset starting at the virtual disk offset corresponding to the first sector of virtual disk extent  and information indicating that the subgroup includes virtual disk file  and virtual disk file . In this example, virtual disk parser  can start scanning through subgroup and determine that the next defined byte offset is the sector that corresponds to the beginning of virtual disk extent . Since in this example, the data in virtual disk extent  is backed by a section of virtual disk file  it is outside of the search and is not returned as being defined.","Continuing with the description of , operation  shows that the computer system can include circuitry configured to dissociate the virtual disk extent from the virtual disk file and modify state information associated with the virtual disk extent to indicate that the virtual disk extent has been zeroed in response to determining that the virtual disk extent was zeroed. For example, and turning to , in an embodiment virtual disk parser  can determine that the virtual disk extent has been zeroed. For example, virtual disk parser  can receive a request to write data represented by a well-known zero token to the virtual disk extent, e.g., virtual disk extent . Virtual disk parser  can determine from a data structure associated with the request that the request is for the entire virtual disk extent, i.e., the byte offset values can start at the first sector of extent  and end at the last sector of extent . In response to such a determination, and instead of writing the zeros to the corresponding section of virtual disk file , virtual disk parser  can be configured to remove the link that maps virtual disk extent  to a section of virtual disk file  used to describe virtual disk extent  and associate the virtual disk extent with information that indicates that the virtual disk extent is all zeros. For example, virtual disk parser  can write eight bytes of information in allocation table  that indicates that the virtual disk extent includes all zeros. The end result of this operation is that the section of virtual disk file  can be reused to store data for other virtual disk extents and the virtual disk extent will read as if it includes all zeros, even though no portion of the virtual disk file is describing the extent on a bit-for-bit basis.","Continuing with the description of , operation  shows that the computer system can additionally include circuitry configured to dissociate the virtual disk extent from the virtual disk file and modify state information associated with the virtual disk extent to indicate that the virtual disk extent is free space in response to a determination that the virtual disk extent is considered free space by a file system. For example, and again turning to , virtual disk parser  can determine that file system  has associated the virtual disk extent with information that indicates that it is free space, i.e., space that is not used by file system . For example, virtual disk parser  can receive a signal from file system  indicating a range of sectors that covers the virtual disk extent, e.g., virtual disk extent , and information that indicates that the sectors are considered to be free space. In response to receipt of such a signal, virtual disk parser  can be configured to remove information that links the virtual disk extent to a section of virtual disk file . The result of this operation is that the section of virtual disk file  can be reused to store data for other virtual disk extents. Virtual disk parser  can additionally associate the virtual disk extent with information that indicates that the virtual disk extent includes arbitrary data, i.e., data previously stored in any part of the virtual disk, all zeros, or all ones. Consequently, read operations directed to this virtual disk extent can be handled by returning arbitrary data which was previously stored in the virtual disk. In addition, the arbitrary data can optionally change each time a read operation is received, if the virtual disk parser  is configured to allow the arbitrary data to change each time a read operation is received.","Continuing with the description of , operation  shows that the computer system can additionally include circuitry configured to dissociate the extent from the virtual disk file and modify state information associated with the virtual disk extent to indicate that the virtual disk extent includes a non-information-disclosing bit pattern in response to a determination that the virtual disk extent was trimmed. For example, and again turning to , virtual disk parser  can determine that file system  has trimmed a range of sectors that compose a virtual disk extent. In response to such a determination, virtual disk parser  can remove information in allocation table  that links the virtual disk extent to a section of virtual disk file . The result of this operation is that the section of virtual disk file  can be reused to store data for other virtual disk extents. Virtual disk parser  can additionally associate the virtual disk extent with information that indicates that the virtual disk extent includes a non-information-disclosing bit pattern, e.g., all zeros, ones, or a randomly generated bit pattern. Consequently, read operations directed to this virtual disk extent can be handled by returning the non-information-disclosing bit pattern. In a specific preferred implementation, the non-information-disclosing bit pattern can be all zeros. However, this is different than the zero state described above in that the zero state can be used to represent meaningful zeros, i.e., the instance where the virtual disk extent was intentionally zeroed.","Referring to operation , it shows that the computer system can additionally include circuitry configured to send a request to issue a trim command to a file system controlling the virtual disk. Referring back to , virtual disk parser  can be configured to issue a request that file system  issue one or more TRIM commands. In an exemplary configuration, virtual disk parser  can be configured to periodically send such a request or to send such a request based on predetermined criteria, e.g., when VM  starts or shortly before the VM is to be shut down. In response to such a request, file system  can issue one or more TRIM commands that identify the unused sectors of virtual disk  to virtual disk parser . Virtual disk parser  may then receive trim information from the TRIM commands such as the range of sectors that are no longer in use by file system  and optionally information that indicates whether the trimmed sectors are considered free space. Virtual disk parser  can receive the information and use it to update state information stored in allocation table  and to possibly reclaim unused sections of virtual disk file .","Turning now to , it illustrates an operational procedure for storing data for a virtual machine. The operational procedure begins with operation  and transitions to operation , which describes an instance where a computer system can include circuitry for executing a guest operating system including a file system within a virtual machine. For example, and referring to , virtualization system , which could be hypervisor  of  or the combination of functions executed by host environment  and microkernel hypervisor  of , can instantiate virtual machine  and run a guest operating system (such as guest operating system ) within it. In this example, guest operating system  can include file system , which can be executable instructions that organize and control data for guest operating system .","Continuing with the description of , operation  shows that the computer system can include circuitry for exposing a virtual storage device to the guest operating system, the virtual storage device including a virtual disk extent, the virtual disk extent being dissociated from a virtual disk file. Turning back to , virtualization system  can expose virtual disk  to guest operating system . For example, virtual disk parser  can be in communication with a storage virtualization service provider that is operable to communicate with a storage virtualization service client running within guest operating system . In a specific example, the storage virtualization service client could be a driver installed within guest operating system  that signals to the guest that it can communicate with a storage device. In this example, IO jobs sent by file system  are sent first to the storage virtualization service client and then to the storage virtualization service provider via a communication channel, e.g., a region of memory and cross-partition notification facility. Virtual disk  can be composed from one or more virtual disk files  that can be opened by virtual disk parser  and used to store data for virtual disk . In a specific example virtual disk  can be described at least in part by virtual disk file  of . In another specific example, and turning to , virtual disk  can be described by a group of virtual disk files (-). In either case, and returning to , virtual disk  can include a plurality of virtual disk extents and one of the virtual disk extents can dissociated, i.e., not described on a bit-for-bit basis by any space within its associated virtual disk file.","Continuing with the description of , operation  shows that the computer system can include circuitry for receiving a request to write data to the virtual disk extent. Turing back to , virtual disk parser  can receive a request to write data to the virtual disk extent that has no associated space within virtual disk file . For example, an IO job can be received that specifies an offset value indicative of the address of a virtual disk sector, which is within the virtual disk extent.","Turning back to , operation  shows that the computer system can optionally include circuitry for determining that state information associated with the virtual disk extent indicates that the virtual disk extent is free space. In response to receipt of the IO job, virtual disk parser  can access allocation table  and read state information associated with the virtual disk extent. In this example, the virtual disk extent may be associated with information that indicates that the virtual disk extent is free space, i.e., that file system  is not using the virtual disk extent and that read operations to the virtual disk extent can be answered with arbitrary data.","Referring to , operation  shows that the computer system can optionally include circuitry for allocating a section of the virtual disk file to describe the virtual disk extent without overwriting a preexisting bit pattern within the section of the virtual disk file. For example, and returning to , in response to receipt of a write IO job, virtual disk parser  can locate a section in virtual disk file  that is not being used and allocate it to store data for the virtual extent. For example, virtual disk parser  can write information in allocation table  that links the virtual disk extent to byte offset values of the allocated section of virtual disk file .","In this example, virtual disk parser  may not overwrite any bit pattern existing within the section, e.g., data from some deleted file and\/or arbitrary data, stored in the section of virtual disk file  (by writing all zeros, ones, or any other non-information-disclosing bit pattern) prior to using the section to describe the virtual disk extent because state information indicates that file system  has identified virtual disk extent  as free space. This provides an added benefit of saving processor cycles and IO jobs that would be otherwise used to overwrite the section of the virtual disk extent.","Referring to operation  of , it shows that the computer system can optionally include circuitry for modifying the state information associated with the virtual disk extent to indicate that the virtual disk extent is mapped to the allocated section of the virtual disk file. For example, and turning back to , virtual disk parser  can modify, e.g., overwrite in memory, the state information associated with the virtual disk extent to indicate that it is mapped. Consequently, subsequent read operations directed to sectors of the virtual disk extent will be handled by virtual disk parser  by returning the bit pattern stored in corresponding portions of the allocated section.","Turning now to operation  of , it shows storing the data to the allocated section of the virtual disk file. Turning back to , virtual disk parser  can write the data, e.g., a bit pattern, into virtual disk file . An IO job indicative of the write to virtual disk file  can be issued to virtualization system file system  and eventually the change can be persisted by persistent storage unit .","Turning now to , it shows additional operations that can be executed in conjunction with those illustrated by . Turning attention to operation , it shows that the computer system can optionally include circuitry for dissociating the virtual disk extent from the virtual disk file and modifying the state information associated with the virtual disk extent to indicate that the virtual disk extent has been zeroed in response to determining that the virtual disk extent was zeroed. For example, and turning to , in an embodiment virtual disk parser  can determine that the virtual disk extent has been zeroed. For example, virtual disk parser  can receive an offload write request to write data represented by a well-known zero token to the virtual disk extent, e.g., virtual disk extent . Virtual disk parser  can determine from a data structure associated with the request that the request is for the entire virtual disk extent, i.e., the byte offset values can start at the first sector of virtual disk extent  and end at the last sector of virtual disk extent . In response to such a determination, and instead of writing the zeros to the corresponding section of virtual disk file , virtual disk parser  can be configured to remove the link from the virtual disk extent to a section of virtual disk file  stored in allocation table  and associate the virtual disk extent with information that indicates that the virtual disk extent is all zeros.","Continuing with the description of , operation  shows that the computer system can optionally include circuitry for dissociating the virtual disk extent from the virtual disk file and modifying the state information associated with the virtual disk extent to indicate that the virtual disk extent includes arbitrary data in response to receipt of a signal from a file system identifying the virtual disk extent as free space. For example, and again turning to , virtual disk parser  can determine that file system  has associated the virtual disk extent with information that indicates that it is free space, i.e., space that is not used by file system . For example, virtual disk parser  can receive a signal from file system  indicating a range of sectors that covers the virtual disk extent, e.g., virtual disk extent , and information that indicates that the sectors are free space. In response to such a determination, virtual disk parser  can be configured to remove information in allocation table  that links the virtual disk extent to a section of virtual disk file  and associate the virtual disk extent with information that indicates that arbitrary data, i.e., data previously stored in any part of the virtual disk, all zeros, or all ones, can be returned in response to receipt of a read IO job.","Operation  of  shows that computer system  can optionally include circuitry for dissociating the virtual disk extent from the virtual disk file and modifying the state information associated with the virtual disk extent to indicate that the virtual disk extent includes a non-information disclosing bit pattern in response to receipt of a request to trim all the sectors of the virtual disk extent. For example, and again turning to , virtual disk parser  can determine that the sectors that compose a virtual disk extent have been trimmed. For example, virtual disk parser  can receive a trim command from file system  indicating a range of sectors that covers the virtual disk extent. In response to receipt of such a signal, virtual disk parser  can be configured to remove information in allocation table  that links the virtual disk extent to a section of virtual disk file  and associate the virtual disk extent with information that indicates that the virtual disk extent includes a non-information-disclosing bit pattern.","The foregoing detailed description has set forth various embodiments of the systems and\/or processes via examples and\/or operational diagrams. Insofar as such block diagrams, and\/or examples contain one or more functions and\/or operations, it will be understood by those skilled in the art that each function and\/or operation within such block diagrams, or examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or virtually any combination thereof.","While particular aspects of the present subject matter described herein have been shown and described, it will be apparent to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from the subject matter described herein and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of the subject matter described herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 13","FIG. 12"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 15","FIG. 14"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 17","FIG. 16"]}]},"DETDESC":[{},{}]}
