---
title: System and method for providing active menus in a communities framework
abstract: A community accessed via a portal can be provided that maintains user membership during collaboration on various projects. The members of the community can have access to and share multiple resources. A resource can have a menu associated with it wherein the menu is dynamically displayed on the portal page upon the user right clicking on the resource. Each menu can have several menu items that when selected, execute various actions associated with the resource or perform some other community function. For example, the menu item can call a page flow action, a Javascript function or make a dynamic content update. An active menu tag library can be provided that allows a developer to create customizable new menus and menu items for a given resource by including a tag and specifying tag parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08046696&OS=08046696&RS=08046696
owner: Oracle International Corporation
number: 08046696
owner_city: Redwood Shores
owner_country: US
publication_date: 20060310
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","CROSS-REFERENCED CASES","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims priority to the following U.S. Provisional Patent Applications which are hereby incorporated herein by reference:","U.S. Provisional Patent Application Ser. No. 60\/737,621, filed Nov. 17, 2005, entitled \u201cSYSTEM AND METHOD FOR PROVIDING A COMMUNITY FRAMEWORK IN A COLLABORATIVE COMPUTING ENVIRONMENT.\u201d","U.S. Provisional Patent Application Ser. No. 60\/742,186, filed Dec. 2, 2005, entitled \u201cSYSTEM AND METHOD FOR PROVIDING A COMMUNITY FRAMEWORK IN A COLLABORATIVE COMPUTING ENVIRONMENT WITH SEARCH CONTROLS.\u201d","The following applications are cross-referenced and incorporated herein by reference:","U.S. patent application Ser. No. 11\/366,268 entitled \u201cSYSTEM AND METHOD FOR PROVIDING EXTENSIBLE CONTROLS IN A COMMUNITIES FRAMEWORK\u201d by Ray Polk et al., filed Mar. 2, 2006.","U.S. patent application Ser. No. 11\/367,519 entitled \u201cSYSTEM AND METHOD FOR PROVIDING GENERIC CONTROLS IN A COMMUNITIES FRAMEWORK\u201d by Cindy McMullen et al., filed Mar. 3, 2006.","U.S. patent application Ser. No. 11\/363,635 entitled \u201cSYSTEM AND METHOD FOR PROVIDING SECURITY IN A COMMUNITIES FRAMEWORK\u201d by Cindy McMullen et al., filed Feb. 28, 2006.","U.S. patent application Ser. No. 11\/367,729 entitled \u201cSYSTEM AND METHOD FOR PROVIDING UNIQUE KEY STORES FOR A COMMUNITIES FRAMEWORK\u201d by Ray Polk et al., filed Mar. 3, 2006.","U.S. patent application Ser. No. 11\/369,545 entitled \u201cSYSTEM AND METHOD FOR PROVIDING ANALYTICS FOR A COMMUNITIES FRAMEWORK\u201d by Aaron Schram et al., filed Mar. 7, 2006.","U.S. patent application Ser. No. 11\/368,865 entitled \u201cSYSTEM AND METHOD FOR PROVIDING NOTIFICATIONS IN A COMMUNITIES FRAMEWORK\u201d by Christopher E. Bales et al., filed Mar. 6, 2006.","U.S. patent application Ser. No. 11\/370,098 entitled \u201cSYSTEM AND METHOD FOR PROVIDING TESTING FOR A COMMUNITIES FRAMEWORK\u201d by Cindy McMullen et al., filed Mar. 7, 2006.","U.S. patent application Ser. No. 11\/371,303 entitled \u201cSYSTEM AND METHOD FOR PROVIDING RESOURCE INTERLINKING FOR A COMMUNITIES FRAMEWORK\u201d by Christopher E. Bales et al., filed Mar. 8, 2006.","U.S. patent application Ser. No. 11\/371,305 entitled \u201cSYSTEM AND METHOD FOR PROVIDING DYNAMIC CONTENT IN A COMMUNITIES FRAMEWORK\u201d by Christopher E. Bales et al., filed Mar. 8, 2006.","U.S. patent application Ser. No. 11\/371,424 entitled \u201cSYSTEM AND METHOD FOR DISPLAYING HTML CONTENT FROM PORTLET AS A PAGE ELEMENT IN A COMMUNITIES FRAMEWORK\u201d by Christopher E. Bales, filed Mar. 9, 2006.","U.S. patent application Ser. No. 11\/371,767 entitled \u201cSYSTEM AND METHOD FOR PROVIDING DRAG AND DROP FUNCTIONALITY IN A COMMUNITIES FRAMEWORK\u201d by Christopher E. Bales et al., filed Mar. 9, 2006.","U.S. patent application Ser. No. 11\/373,086 entitled \u201cSYSTEM AND METHOD FOR PROVIDING SEARCH CONTROLS IN A COMMUNITIES FRAMEWORK\u201d by Cindy McMullen et al., filed Mar. 10, 2006.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The invention relates generally to menus and collaborative computing environments and in particular to providing active and customizable resource menus in a communities framework.","The popularity and demand for collaborative and distributed computing environments has increased in the recent years due to the popularity of the internet, networks and portal frameworks. A wide variety of enterprises, ranging from large corporations to small development projects, often have use for such software. For example, employees, developers and other users within an enterprise often work on projects in groups, collaborating with one another as the project progresses. Such groups of users frequently need access to the same resources, materials and information on certain topics. Thus, software designed to allow a group of users on a network to work simultaneously on a project is desirable. Present day solutions typically provide services for communicating (such as email), group document development, scheduling, and tracking. For example, groupware is a form of application software that integrates work on a single project by several concurrent users on separate workstations on a computer network.","One area where these trends have been implemented has been in the context of content frameworks referred to as portals. A portal can be thought of as a gateway or an access point for users to various types of content and other collections of information. One example of a portal server is the WebLogic\u00ae Portal product available from BEA Systems Inc. Portals are typically visually represented and often have a portal page for allowing users to navigate the data provided therein. Portals are ideal for implementations of groupware programs since multiple users can be provided a single point of access to a wide variety of information.","There are several available groupware products deployed on portal frameworks and available on the market today. Most of them allow some form of user collaboration in an effort to increase productivity. However, these solutions are often very rigid in their requirements for the data and services they provide. For example, most of such software is geared toward specific enterprises, groups or projects and allow little in terms of customization. What is needed is a more abstract, dynamic and user-friendly approach, one that would provide a more fluid and adaptable system of collaboration between users over a distributed computing environment.","Aspects of the invention are illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. It should be noted that references to \u201can,\u201d \u201cone,\u201d \u201cvarious\u201d and \u201cfurther\u201d embodiments in this disclosure is not necessarily to the same embodiment, and such references mean at least one. In the following description, numerous specific details are set forth to provide a thorough description of the invention. However, it will be apparent to one skilled in the art that the invention may be practiced without these specific details. In other instances, those features which are well-known in the art have not been described in detail so as not to obscure the invention.","In various embodiments, systems and methods for providing collaboration among users in the context of a distributed computing environment are provided. A community framework is presented for introducing a sense of memberships and communities to a portal desktop. In one embodiment, the communities framework can be implemented on a portal application server such as the WebLogic\u00ae Portal product available from BEA Systems Inc. Java\u00ae Development Kit (JDK) version 1.5 can be implemented to make use of Generics and Annotations provided therewith. A community can be provided for maintaining user membership during a collaboration project in a computing environment. A community can be thought of as a membership based desktop within a portal used to deliver user-tailored applications and workspaces. Thus, users who are members of the community, may share resources, such as documents, view resources, design and assign task lists, maintain a list of internet links, etc.","Communities can be the base level for collaboration in a portal. A community provides a sub-container within a portal to provide access to applications and content to specific groups of people, i.e. its members. In various embodiments, a community can provide a way to define access to areas of a portal. End users, developers as well as non-technical business users are provided the ability to quickly and easily define an area where they can choose the applications and content to be made available and the people who can participate\u2014without requiring experts and technical knowledge of IT. In one embodiment, the community framework is essentially a desktop with additional features to support portal resource grouping and management by end users.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 1"},"For example, a community () may be composed of various collaboration resources () and community services () as well as users (, , , , ) who are members of the community and who have access to the resources and services. A community can also have its own community properties () which can allow for its customization. Community properties can be any key value pairs that are associated with a particular community. For example, a community property () may specify the type of the community it is, the project that the community is intended for, the period of time that the community is meant to exist, or whether a community is public. Similarly, a mapping of various security roles to functional capabilities (as discussed in further detail below) can be stored as a community property. The community properties can be contained within a separate community framework database of the community framework.","Various users (, , , , ) may be accessing and making use of the community () through an interface (). The interface can be a graphical user interface (GUI) rendered on a display device, for example. Security access can be provided (as described in further detail below) by membership and functional capabilities () in the communities framework. Through such security control, users can obtain access to various community services (), collaboration resources () and community properties () and make use of these features during their collaboration over a distributed computing environment.","Collaboration resources () are various content data types that may provide assistance to the members of the community during their collaboration on some project. Typically, a collaboration resource is stored in a repository and contains some type of information about a collaboration project that members of the community are working on. Some examples of collaboration resources include documents, issues, discussions, links, events, announcements, as well as other types of files, data and services. As an illustration, developers may maintain a list of open issues that are migrated to closed issues as they are resolved. Announcement resource, on the other hand, may be displayed initially in a special section of the community header, and can be scoped to either the entire community or a list of recipients. In one embodiment, announcements can be either \u201cacknowledged\u201d (marked as having been already read) or deleted which would remove them from the header. As another illustration, the links portlet may contain a list of links to documents, portal resources and remote sites that are of interest to a user of a desktop or member of a community. The link data can be stored in the content management system and CRUD (create, retrieve, update, delete) operations on that data can be supported according to user capability. Links may be organized in groups such as \u201cNews\u201d or \u201cSports\u201d and a hierarchical relationship among the various links can be implemented. Links can subsequently be displayed in a list that supports ordering and filtering. For example, a sort by creation date, name, description, type, visibility would sort the links accordingly and display the sorted list to the user.","A community can also have multiple users (, , , , ) which are members of that community. These members should be able to share the collaboration resources in the community. Sharing a resource can be accomplished by creating a link to the resource to be shared, by copying the entire resource, or by some other means available in the art. The decision of which method is to be employed may be left up to the system administrator of an enterprise.","A community member can be defined to represent the external unified view of the user of the community. In other words, it may be a single representation of the user, one that all community services can use. For example, the community services may need to integrate with separate and distinct concepts of the user such as the portal UUP (unified user profile) and the community framework concept of the user. The notion of the community member allows all community services to integrate with various separate concepts of users. A member can also be a unified idea of a group of users. Various data can be associated with a member, such as first_name, last_name, user_name, membership (of various groups), roles (what the member can do), email address, presence (online, offline), etc.","In one embodiment, community services () are individual portlets that provide various services and functionality to the community. They may be used individually or aggregated to form a new community application. For example, a content directory service can be a portlet that provides end users with the ability to browse the content directory where they have access privileges and create and manage content items as they have privileges. An issues service can be a portlet that allows users to create lists of issues related to the project that may need to be addressed. The community search service can be implemented, allowing advanced search options for searching the community's resources such as issues, announcements, documents in the document library and so on. This service can be scoped to the search in the member's local content or across an entire enterprise repository. A rich site summary (RSS) service can be a portlet that connects to external sites that provide RSS information, retrieves news topics based on visitor preference, and displays them as clickable links. Various other services can also be implemented.","Templates may be provided for the communities framework. A community template is the pre-packaged set of collaboration resources from which a community can be built. The template provides users with the ability to create applications without the need for any coding. Thus, by employing templates, a user can readily construct a community with specific collaboration resources and add members to that community without any detailed knowledge of the programming languages involved.","In various embodiments, multiple communities can be structured hierarchically such that each community may have multiple children but only one parent. Community members may create a new community from the parent community. Such a hierarchical relationship may be useful to scope data and to organize communities. For example data may be scoped to an individual user or to the community to which the user belongs, i.e. is a member of. The definition of what a hierarchy among several communities means can be made to be configurable by a user or system administrator. For example, some projects may require that the same data be made available to members of a child community as to members of the parent community. Other projects may need to make the members of the parent community also members of the child or vice versa. The particular implementation will vary with the particular type of project or enterprise choosing to implement this feature and consequently the above examples are not intended to exhaust all of the various possibilities.","Various data in the communities framework, such as the collaboration resources () can be stored in a separate instance of a repository for each community. Alternatively, each community may get a top level node within the repository. The choice of implementation may be made configurable by a system administrator.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 2","b":["200","200","202","206","208","210","212","220","228","202","214","216","218","212","222","224","228","230","232","234","220","228"]},"In one embodiment, a Users () folder can be placed beneath the general Communities folder () and can contain all the data for each specific user, no matter which communities that user belongs to. Thus, user_A () may be the owner of link_A (), issue_B () and resource_N () and as such, these resources would be located beneath the user_A folder in the content hierarchy. Similarly, user_B () may have access to link_C (), event_C () and resource_X () while user_C may have access to issue_C (), link_B () and resource_Y (), all located beneath their own appropriate nodes.","Data within the content management system can be stored in folders and nodes as previously described. Each data type, such as the collaboration resource \u201clink\u201d for example, can be merely an object wrapper for the actual node in the content management system. Thus, during initial resource creation, a new node may be created and that new node would get assigned to the particular wrapper. For example, if a developer wants to create a new issue, a new node within the repository is created. Then that new node gets assigned to the issue wrapper. During object retrieval, such as during a method call get_all_issues( ), all nodes would be found that satisfy a certain condition, and then new issues would be instantiated dynamically, directly from those nodes that are returned. This type of system provides the ability to perform very strong typing within the content management repository. Thus, for example, a developer need not request for a specific data type, instead he or she can merely request for all data types that match a certain criteria.","The top level folders for each community can be cached so as to increase performance of the access to the data. Content uniqueness can be guaranteed by the specification of primary keys (described in detail under \u201cUnique Key Stores\u201d heading below) for each data type. Data may be scoped to either the individual user or to the entire community. For example, a user may wish to have his\/her own set of task items, but also wish to display the tasks that belong to the community.","Data such as the various collaboration resources can be marked with a visibility and ownership fields for the purposes of distinguishing it as well as for security purposes. As a non-limiting example, the \u201ccommunity\u201d and \u201cprivate\u201d data could be placed in the data hierarchy directly beneath the specific community folder. The \u201cpersonal\u201d visibility data, on the other hand, could be placed in a top-level users folder. Then the \u201cpersonal\u201d data could be made available to a user in any community. In one embodiment, data can be created with \u201ccommunity\u201d visibility by default. However, ability to override that default can also be provided, such as by a control constructor:",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Link privateLink = linksControl.create(..., Visibility.PRIVATE);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Removal of community data may take place automatically when the corresponding community is removed. Alternatively, the removal could be performed manually by the manager, owner or some other member of the community. The selection of the two implementations could be made to be configurable by a system administrator.","All community data can be made to derive from a base class (e.g. CM_Content) and the User Interface facing controls can use strong typing via Java\u00ae generics and inheritance.","Level 1 Security","Security access to the collaboration resources can be restricted based on community membership capabilities or roles. These membership capabilities can determine certain privileges that a particular member is allowed in the community. In one embodiment, the communities framework membership capabilities are mapped one-to-one to specific WebLogic\u00ae Server roles. For example, five basic memberships included in a template can be Owner, Creator, Leader, Contributor, Member. The capability of Member can be implemented to be the absence of any other capability. The definition of these membership capabilities can be changed and scoped per application or per community. These membership capabilities can be declared in a community config.xml file and can subsequently be edited by the user or system administrator of the communities framework. Customers can also create an infinite number of new community roles or membership capabilities by editing this file. Alternatively such declarations can be stored in some other manner, such as in order to protect role definitions.","The membership capabilities or roles can be mapped to a set of functional capabilities which define what a member is or is not allowed to do. These mappings can be persisted by the membership security manager service and can be customizable to each specific community. A security control can supply default mappings and it can also permit community administrators to override those mappings and\/or to define and map additional membership capability\/functional capability pairs for the community. This security control can be implemented to initialize the security for the entire community and should preferably be called from a page flow by the community administrator prior to any content access.","Examples of functional capabilities can include browse, update, view, create, delete as well as other data and resource editing abilities. Thus, every role defined in an editable file has a set of functional capabilities associated with it, which specify what a member in that role is allowed to do. For example, a role of community Creator can be allowed to create a new community, add a manager to the community, remove a manager, add a user or edit content. On the other hand, a community Manager role may be allowed to add or remove users from the community, enable or disable self-registration for a community and edit certain types of content within the community. It should be noted that these are mere examples of some definitions, many other enterprise-specific implementations are possible. A user interface can be provided in order to make it easier for developers to define what a particular membership capability is allowed to do or, in other words, what functional capabilities that role is assigned to.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 3","b":["302","304","306","308","310","312","314","316","318","302","312","304","314","306","316","308","310","318","320","322","312","316","320","322"]},"The security access control described above constitutes the security level one feature of the communities framework. Thus, if a given member is not allowed to perform a certain task by the membership capability and functional capability definitions, he or she will not even be allowed access to the repository (). If, however, the user's chosen task is allowed by the capabilities definitions, then the user will enter level two security, wherein access to the resources () in the repository () is controlled by entitlements (). This will be described in further detail below, under the heading \u201cLevel 2 Security.\u201d",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 4","b":["400","402","404","406","408","410","412","400","414","416","418","420","422","400","414","416","418","420","422","414"]},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 5","b":["506","510","508","512","508","514","516","518","520","522","500","506","508","516","528","502","508","514","516","518","520","522","524","526","528","530","532"]},"Level 2 Security","Access to the resources and data within the repository can be further restricted by entitlements and visibility. Thus, a double-layer security can be implemented for the collaboration environment-one layer at the community level and another one at the repository level. At the community level, authorization and authentication can be provided by the use of roles and functional capabilities as described above under the heading \u201cLevel 1 Security.\u201d At the repository level, on the other hand, access to data can be restricted by entitling each collaboration resource. Entitlements can have a single role called CommunityContentRole, not to be confused with the roles (membership capabilities) declared in the communities-config.xml file and implemented by level 1 security feature. Those roles preferably do not apply at security level 2.","For example, the collaboration resources in the repository can each be entitled according to the community restrictions and content visibility. An entitlement can be a combination of a resource (e.g. a node within the repository) and a security policy that is associated with that node. In other words, an entitlement can be implemented as a rule that grants or denies access to a collaboration resource.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 6","b":["612","614","600","616","618","620","622","612","610","602","604","606","608"]},"When the community instance is first created, the hierarchy of the nodes can be laid out within the content repository. Then each node is entitled according to the community to which it belongs and according to the rules contained in the CommunityContentRole.properties file. One entitlement given to a node within the repository, can also be applied to all other nodes within the hierarchy unless overridden with another entitlement.","Subsequently at runtime, when a member is requesting to perform an action on some node of a particular community, that member must first prove himself to be in the CommunityContentRole. In order to determine whether the member is in the CommunityContentRole, the system can go through the rules in the CommunityContentRole.properties, checking whether this particular member satisfies them. Thus if member_A satisfies the rules, he is considered to be within the CommunityContentRole and access can be granted to member_A. In this manner, instead of having to assign every user to a particular role right at the beginning, the communities framework need not finally determine security until that user gets ready to perform some specific action on the data within the content management repository. This provides for a more flexible, dynamic and secure approach for accessing various resources within the repository.","In one embodiment, resources (, , , ) may each have a visibility of \u201cprivate,\u201d \u201cpersonal,\u201d or \u201ccommunity.\u201d Thus, if the collaboration resource has the visibility of \u201cprivate,\u201d only the member of the community who is the owner of the data can have access to it. On the other hand, if the data has \u201ccommunity\u201d visibility, then all members of that community can be allowed to access it. Yet a third possibility is \u201cpersonal\u201d visibility which would allow the user access to data in all communities that the user is a member of, as well as any other data that the user is an owner of.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 7"},"In step , a member such as member_A requests to perform a specific task on some resource. For example, member_A may wish to update issue_A by requesting to resolve it and move it to the list of closed Issues.","In step , the system can then determine what membership capability (role) member_A has been assigned to. For example, member_A may have been assigned to the role of Contributor.","In step , the system can check which functional capabilities member_A's role is mapped to. For example, the role of Contributor may be mapped to a set of functional capabilities including browse( ), view( ), update( ), and create( ).","In step , the system can use the information obtained in steps  and  to determine whether security level one allows member_A access to the repository. Following the above example, since member_A has been assigned to Contributor role and since the Contributor role is allowed to update resources in the repository, the system can allow member_A security access to the repository and proceed to step . If the Contributor role were not mapped to the update( ) functional capability, then access would be denied to member_A at level one, thereby precluding him from getting to the repository level, as illustrated in step .","In step , security level two is entered. The system proceeds to the repository level and obtains the entitlements and visibility information for the requested resource. Following the example above, the system would obtain the visibility for issue_A and determine if member_A can have access to it based on that visibility. Similarly, it would check the entitlement for issue_A and determine if member_A fits in the community content role, i.e. can properly update issue_A based on that entitlement, as illustrated in step . If the entitlement and visibility information also allow access, then member_A would be allowed to update the resource issue_A, as illustrated in step . On the other hand, if entitlements or the visibility of issue_A preclude member_A from updating it, access would be denied as illustrated in step .","It is worth noting that member_A could be denied access at two different levels; once at security level one and once at security level two (the repository level). This is done for reasons of efficiency, simplicity and performance. For example, entitlement evaluation may not be very efficient. Furthermore, complex rules in addition to the restriction of which membership capability a user is in are not required. If a user does not pass level 1, there is no need to go on to level 2. Rather, access can be denied then and there. Once in level 2, the user is granted all CRUD operations by virtue of the role policies; level 1 filters out those requirements. Level 1 security permits the flexibility of having arbitrary sets of CRUD rights granted to any membership capability.","One advantage of such a security system is that it can reduce the number of connections to the repository, thereby improving speed and performance of data access. Another advantage is that it can provide increased and more dynamic security, making the system more resistant to unauthorized entry and other types of security breaches.","Extensible Controls and Generic Controls","Another feature that can be provided to the communities framework, is extensible controls. Extensible controls can be used to create different data types in the content management system of the communities framework. They can completely abstract away from the content management application programming interfaces (APIs) and make type creation code easier to read and write. An extensible portlet can also provided for enabling easy creation of highly configurable and flexible content types and properties at runtime. The extensible portlet can call upon various controls to implement this functionality. Generic controls, on the other hand, can further wrap the extensible controls in order to add more intuitive and flexible APIs for the developers. Resources with in the content management repository can be actually stored as nodes i.e. properties and values that describe the content as well as the content itself. These nodes are further wrapped by simple Java objects that represent the property value attributes of each particular node. Thus, an object class can be dynamically generated and cached for performance reasons. The primary keys associated with the object classes can also be cached so as to improve access time.","In one embodiment, a Generic Control deals with a node wrapper object and not the actual node. For example, a LinksControl<Link> could be created that deals with only Link objects or a IssuesControl<lssue> could be created that deals only with issues, and so on. Extensible Controls, on the other hand, can be used to perform the actual CRUD (create, read, update and delete) operations on the data, via the content management APIs. In this manner, each generic control wraps an extensible control that deals directly with the content management system. So the LinksControl<Link> can have a LinksCmxControl (extensible control) that understands how to map the link object to the node in the content management repository.","In one embodiment, a developer using extensible controls can be a more sophisticated and knowledgeable developer since extensible controls can require detailed knowledge of the content repository, node structure as well as the control structure itself. On the other hand, generic controls do not require such intimate knowledge of the repository and this developer need only be aware of certain aspects of object types in order to implement this functionality. Thus, generic controls can be conceptually easier to understand and implement than extensible controls.","Different annotations can be used to represent the properties of each content type. Users or developers can then be allowed to dynamically create new content types in the repository. Similarly, developers can also be given the ability to dynamically add, modify, or remove properties from each existing resource (i.e. content type). Node creation code can be annotated in order to create types. Rather than maintaining dual code for object and node creation a single implementation can be instituted via the use of annotations.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 8A"},"In one embodiment, community data can be contained within a repository () as discussed above, and stored in various nodes (). Content object wrappers () can be used to wrap each node in the repository containing the data. Thus, a link object wrapper can be used to wrap the data contained in the node for that particular link. An object wrapper can be a simple java object which is associated with the particular node in the repository. A control framework () can also be provided to simplify access to the community content. In one embodiment, a generic links control () can be provided to encapsulate the business logic and provide a valuable interface to the repository data. The links generic control can wrap an extensible links CmxControl () which can be responsible for performing CRUD operations on the nodes in the repository. Thus, a links control can have a links CmxControl which understands how to map the link object to the node within the content management system. A developer () can use the various controls in order to easily create and access content within the various communities by placing a call to the control within a JSP for example. Calls to the controls can also be placed within an extensible portlet.","In various embodiments, a generic control encapsulates business logic and\/or provides programmatic access to one or more resources. Generics can provide type safe arguments and returns. Implementations of common methods can allow finding nodes by expression, ids, parents, etc and creating type specific paged results. The control framework can allow a collaboration process or portlet to access the business logic or resource in a consistent, straightforward manner as though it was a simple Java\u00ae object. Controls can simplify access to common resources such as databases, Java\u00ae Message Service (JMS) queues and Enterprise JavaBeans\u2122 (EJBs). However, the present disclosure is not limited to or dependent on any particular control implementation, programming language or programming paradigm. It will be apparent to those of skill in the art that a control can be implemented in many other ways including, but not limited to, as a library, subroutine, function, method, macro, procedure, and any other suitable means for encapsulating program logic and\/or resources.","In aspects of these embodiments and by way of illustration, a control can be implemented as a Java\u00ae class and can be managed at runtime by a J2EE EJB container. The container can provide automatic transactions, asynchrony, state management and other services. In aspects of these embodiments, a control's Java\u00ae class definition includes annotations (e.g., Javadoc annotations) that define the control's runtime behavior. A control can use and be used from a web service, a pageflow, a JSP, a business process, a portlet and another control. Preferably, controls are community-scoped, since each is associated with a given community that created it.","As an illustration, code for creating a resource without the use of extensible controls can be similar to the example illustrated below.",{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/Create a property definition"},{"entry":"PropertyDefinition[ ] propDefs = {"},{"entry":"\u2003\u2003new PropertyDefinition(new ID( ), \u201cNAME\u201d, null,"},{"entry":"\u2003\u2003Property.STRING, false, false, false, false, true \/*isPrimary*\/, null)"},{"entry":"};"},{"entry":"ID typeID = new ID( );"},{"entry":"typeID.setRepositoryName(repoName);"},{"entry":"\/\/Create a type with that property definition"},{"entry":"ObjectClass oc = new ObjectClass(typeID, \u201cPERSON_TYPE\u201d,"},{"entry":"propDefs[0], propDefs);"},{"entry":"oc = typeManager.addType(cc, oc);"},{"entry":"\/\/ Create an instance of that type"},{"entry":"Property[ ] nodeProps = {new Property(\u201cNAME\u201d, \u201cRay\u201d};"},{"entry":"Node node = nodeManager.addNode(cc, parentPath +"},{"entry":"PathHelper.SEPARATOR + nodeName, ocName,"},{"entry":"nodeHierarchyContentType, nodeProps);"},{"entry":"\/\/ Create a node wrapper instance"},{"entry":"Person person = new Person(node);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, using extensible controls can enable more developer friendly and less complex code. Thus:",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/PersonCmxControl.jcx - creates type and instance"]},{"entry":[{},"@Create(node Type = \u201cPERSON_TYPE\u201d)"]},{"entry":[{},"public Person createPerson ("]},{"entry":[{},"\u2003\u2003@Property(name=\u201dNAME, isKeyField = true, isPrimary=true)"]},{"entry":[{},"String Name );"]},{"entry":[{},"\/\/In NewNodeControlImpl.jcs:"]},{"entry":[{},"@Control NewNodeCmxControlBean newNodeControl;"]},{"entry":[{},"Person person = newNodeControl.createPerson(\u201cRay\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Administration tools can also be provided to enable users and developers to create new content types and to add new property types to the existing content types all during runtime. Templates can be provided for users to add their desired properties. For example, a user may edit the provided template to change the order of the properties for a given resource. Alternatively, the user may implement a custom template laying out the resource data type in a completely different manner, customized to the specific needs of the community.","Node wrappers can also provide various benefits to data access and manipulation. Access to data can be significantly simplified. For example, a call such as \u201cgetProperty (\u201cTITLE\u201d)!=null? getProperty (\u201cTITLE\u201d).getStringValue( ): null\u201d can be abstracted into a much simpler call such as \u201cgetTitle( ).\u201d Type information as class rather than data can enable a Folders\/Beans composite pattern which can mirror the Hierarchy\/Content Nodes. Inheritance of common attributes can be supported and when used in concert with controls, node wrappers also serve to provide type safety.","Illustrated below are code examples for creating a newType, newTypeCmxControl, newTypeControl and newTypeControlImpl in accordance with various embodiments of the invention. The code included in this application is not intended in any way to restrict the scope of the invention but is merely being provided for illustrative purposes.",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/create NewType"},{"entry":"\/\/extend CommunityContent"},{"entry":"public class NewType extends CommunityContent"},{"entry":"\/\/Node Conversion Constructor"},{"entry":"public NewType(Node node) { this.node = node;}"},{"entry":"\/\/getters, setters"},{"entry":"public String getProperty( ) {return"},{"entry":"getValue(getNodeProperty(\u201cPROP\u201d)); }"},{"entry":"public void setResolution(String r) {setProperty(\u201cPROP\u201d, new Value(r));}"},{"entry":"\/\/create NewTypeCmxControl"},{"entry":"\/\/extend CmxControl and annotate"},{"entry":"@org.apache.beehive.controls.api.bean.ControlExtension"},{"entry":"@CmxControl.RepositoryInfo(repositoryName="},{"entry":"\u201cCommunity_Repository\u201d)"},{"entry":"public interface IssuesCmxControl extends CmxControl"},{"entry":"\/\/@Create"},{"entry":"@Create(nodeType=\u201cISSUE\u201d)"},{"entry":"public Issue createIssue("},{"entry":"@ParentId( ) ID parentId,"},{"entry":"@Property(name=\u201cPROP\u201d, isKeyField=true) String property)"},{"entry":") throws Exception;"},{"entry":"\/\/@FindBy (retrieve & delete)"},{"entry":"@FindBy(expression=\u201cPROP == \u2018{prop}\u2019\u201d)"},{"entry":"public NewType getNewType(String prop) throws Exception;"},{"entry":"@FindBy(expression=\u201cPROP == \u2018{prop}\u2019\u201d, removeResults=true)"},{"entry":"public NewType removeNewType(String prop) throws Exception;"},{"entry":"\/\/create newTypeControl"},{"entry":"\/\/extend CM_Control and annotate"},{"entry":"@ControlInterface"},{"entry":"public interface NewTypeControl extends CM_Control<NewType>"},{"entry":"\/\/create"},{"entry":"public NewType create(ID parentId, String prop);"},{"entry":"\/\/retrieve"},{"entry":"public NewType getNewType(String prop);"},{"entry":"\/\/create NewTypeControlImpl"},{"entry":"\/\/extend CM_Control and annotate"},{"entry":"@ControlInterface"},{"entry":"public class NewTypeControlImpl extends CM_ControlImpl<NewType>"},{"entry":"\u2003\u2003implements IssuesControl {"},{"entry":"\u2003\u2003\u2003\u2003@Control IssuesCmxControlBean issuesBeanX; . . ."},{"entry":"}"},{"entry":"\/\/create"},{"entry":"public NewType create(ID parentId, String prop) {"},{"entry":"\u2003\u2003\u2009return issuesBeanX.createIssue(parentId, prop); }"},{"entry":"public NewType create(String prop) throws Exception {"},{"entry":"\u2003\u2003\u2009return issuesBeanX.createIssue(DEFAULT_PARENT_ID, prop); }"},{"entry":"\/\/retrieve"},{"entry":"public NewType getNewType(String prop) {"},{"entry":"\u2003\u2003return issuesBeanX.getNewType(prop); }"},{"entry":"\/\/delete"},{"entry":"public NewType deleteNewType(String prop) {"},{"entry":"\u2003\u2003return issuesBeanX.removeNewType(prop); }"},{"entry":"\/\/delete"},{"entry":"public NewType deleteNewType(String prop);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 8B","b":["800","802","804","806","808","810","812"]},{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 9","FIG. 9"],"b":["914","900","902","904","906","908","910","912","914","900","914"]},"In various embodiments, the communities framework can allow users to implement existing functionality such as Search or Analytics (as discussed below) as well as others, to interoperate with the newly declared and defined resources and properties. Thus, for example, users can search through the newly created resources, sort the resources by their new user-created properties or implement Analytics to monitor trends on the new resources. Of course, other such implementations are possible and well within the scope of the present invention.","Analytics","Another feature that can be provided to the communities framework is Analytics. Analytics can provide the functionality of data mining, trend observation, and community health monitoring to the communities framework. In other words, it can allow community users and administrators to view specified statistics pertaining to their community. Analytics can provide more than a mere snapshot who is on the website or how many visitors log onto the website. It is designed to monitor various aspects of the health of the community. For example, a developer may wish to monitor how many people are visiting the enterprise's website over a specific period of time. Alternatively, a community manager may wish to monitor how many members are becoming contributors to his\/her community. Yet another member (e.g. community owner) may wish to observe how his\/her community compares to other communities on a particular scale. All this information can be displayed graphically within a portlet as part of the communities framework.",{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 10"},"In step , a new event object is created. A developer can provide the name for the desired event. The analytics information can be derived from this custom created event object which can serve as a counter for the Analytics system, carrying a very minimal payload. The event object can contain a minimum of three attributes, namely event type, membership role and community URI. All events can be made to differ via the event type attribute that is set before dispatch. This allows for the creation of new events for use by the system simple by annotating the new event type before dispatch.","In step , a developer can associate the new event with a some specific action in the communities framework. For example, the event can be associated with a particular pageflow or a Java Server Page (JSP). The analytics will then take care of counting, organizing and displaying the data associated with that event, such as for example counting the number of event occurrences.","In step , a custom event listener can be implemented to collect community events as they occur. In step , the action associated with the event (as shown in step ) may occur, thereby firing off the event. In step , the event is placed into a buffer. A buffer object can be created in order to receive events from the listener and hold them until they are persisted into the content management system as illustrated and described in steps , , and  below.","In step , the system can determine whether an event resource data type has been created that corresponds to the event that has occurred. In one embodiment, for every event object that is created, there exists a corresponding event resource within the repository. For example, every event object can have a unique event type attribute which is used to describe the corresponding node within the content management system, which holds information for that event.","In step , if no corresponding event resource exists, a new such resource can be created by the system. The new event resource node can contain the properties of description (i.e. a displayable description of the event the node contains information for), the current date, a counter and parent Id. All properties can be made to be single-valued and non-restricted. In other words, the new content management system node type can specify a displayable description of the event that the node contains information for, the current date, a counter for keeping track of the number of occurrences of the event and a parent_id. The new node can subsequently be added to the data hierarchy in the collaboration repository. In one embodiment, that new node will represent the event specified by the user or system and will keep a count of such events that have occurred. Users can also be provided with the ability to delete event information in case it gets too large.","In step , the data for the event is persisted into the repository. For example in one embodiment, the counter for the number of occurrences of the event can be incremented and committed to the repository. An extensible CMXControl can be written in order to handle all interaction with the nodes in the content management system. A data content object can be created to wrap the analytics node type. Multiple components may be implemented to handle the management of the buffer and to manage persisted analytics data and creation of analytics charts. These components can take various forms such as objects, beans or any other components that are reusable program building blocks or can be combined with other components in the same or other computers in a distributed network to form an application.","Analytics can provide users with the ability to create any event types that they choose. For example, a developer can provide an event name to the event object and place it onto the pageflow or JSP that should be associated with that event. The Analytics feature of the communities framework can then keep track of these events and organize them in the repository such that a user can display a number of events that created during the course of some time period. A portlet may be provided to display a created chart of the analytics data to the user. The user can be given an option to select a collected statistic and a time frame (e.g. week, month, year). The matching chart can then be displayed in the analytics portlet. In this fashion, analytics allows the system administrator or developer to efficiently monitor the health of a particular community, such as whether it is growing or whether it is dying off, whether members are interested in becoming contributors, or some other trend of interest.","Unique Key Stores","Another feature that can be provided to the communities framework is Unique Key Stores for the content management system. The Unique Key Stores feature can allow a user or developer to specify several properties of a resource, which can then be used to identify that resource and to make it unique. As an illustration, two different members of one community may wish to create a resource with the same name within the content management system. This may create problems because in content management systems, uniqueness of data is typically guaranteed based on the names of particular resources. Thus, if two resources have the same name, the uniqueness of data may be jeopardized. Yet it may be desirable to allow several users to create resources with identical names. The communities framework provides a way for a developer to specify a different field or several fields from which data can be guaranteed to be unique.","Content management systems are generally hierarchical in nature and define uniqueness much like a file system. In one embodiment, all entities (nodes) within a repository of content have a name. That name is typically unique within the context of its containing folder. The node is uniquely identified within that repository by its name and path of containing folders. This is analogous to a fully pathed file name such as \u201cc:\\folder1\\folder2\\fileName.txt\u201d This can be very limiting. The name field of a node in the content management system is usually of a limited size, such as 50 characters, for example. On the other hand, forcing hierarchy onto the data is not always the best idea, often more than one property of a node makes it unique. In one embodiment, to remedy this problem a unique key can be generated for a given type. Thus, a node can be uniquely identified per type\/objectClass within the content management system. The author of extensible controls can designate which of the node properties will be used to define uniqueness. As an illustration, for a link, it might be the combination of a title, description and owner properties. In one embodiment, a unique key can be generated by taking into account these properties. In an alternative embodiment, the system can dynamically perform a comparison of the two resources without the necessity of actually creating a key.","In one embodiment, two different members of the community may wish to create a collaboration resource Link and name that Link \u201clink_A.\u201d Normally, the content management system would not allow both members to create such a Link because it would not have a way of making those two Links unique from each other. Unique Key Stores, however, gives the ability to a developer to specify which fields can make that Link unique. Thus, a developer may notify the content management system to combine the Name, Visibility and the Owner properties of each Link, thereby making each Link named \u201clink_A\u201d unique as to each other. The two members would thus be allowed to create their versions of the link \u201clink_A.\u201d Other property fields may also be specified by the developer in accordance with various embodiments of the invention.",{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 11","b":["1100","1102","1104","1106","1108","1110","1112","1100","1114","1120","1116","1122","1118","1124","1108","1110"]},"Meanwhile, other collaboration resources such as an issue () could have their unique keys generated from other properties such as name (), description (), priority (), owner () and visibility (). As illustrated in , for example, a user can select only the name () field to be used in generating the unique keys for issues resources. In alternative embodiments, the properties can be dynamically compared and no actual key needs to be generated. The implementation of the two options can be made configurable. In this manner, the unique key stores feature allows for a much more flexible and user-adaptable collaboration and community customization.","Dynamic Content","Another feature that can be provided to the communities framework is dynamic content. A dynamic content tag library can be provided for allowing developers to add dynamic content functionality to a portlet, without any need for javascript coding or API editing. The dynamic content feature provides users with the ability to update a certain portion or portlet of a page or a portion of a portlet. In other words, it can allow for granular micro-interaction between the server and the browser without reloading the entire browser each time that interaction occurs.","A dynamic container can be declared to be a targeted dynamic area in the user interface which can be updatable dynamically. The dynamic container (such as an HTML table) can be specified by an id number. An update request can be executed implementing a series of actions (e.g. pageflow actions), the results of which return an HTML fragment to replace the contents of the dynamic container marked by the appropriate id number. Thus, a client request can be populated by parameter tags and executed behind the scenes, without the need to refresh the entire browser.","One advantage of updating the dynamic container in such a fashion is that the page flow actions implemented are completely normal and the Java Server Pages (JSPs) that they forward to are also completely normal, i.e. there is nothing different that must be modified in order to achieve dynamic updates. No Javascript needs to be written by the developer, the dynamic content tags provide all of the Javascript and other coding necessary. A developer can thus merely target a particular action with dynamic content tags and the rest is generated for him. A JSP can be passed a parameter to populate a certain portion of a web page with the results of a particular action. The dynamic tags can run pageflow actions which run the logic and then forward off to a JSP. The JSP can be a page fragment, a portlet fragment, a table, a table fragment or some other piece of the page that gets forwarded to by the pageflow action. Thus, the developer can use regular tags, JSPs and regular pageflow actions to implement dynamic content tag updates in a completely normal web development experience, without the requirement of in-depth knowledge of Javascript or other complex programming languages.","In one embodiment, Asynchronous JavaScript And XML (AJAX) type functionality can be provided. Thus, instead of the traditional form of client-server communication where the client sends a completed form to the server and the server responds by sending a new web page, a more modular form of interaction is possible. An AJAX application can send a request to the web server to retrieve only the data that is needed, such as by using a SOAP or XML-based web dialect. Consequently, a much more responsive interface can be achieved because the amount of data exchanged between the web server and the client is significantly reduced. In turn, a higher number of client-server transactions could be supported by one server, since dynamic content tags enable for much smaller communications between the server and each client. For example, merely a portlet can be updated instead of refreshing the entire browser. Furthermore, even more granularity can be provided with the dynamic content tags feature. Just one piece of the portlet's user interface can be updated dynamically without the need to update the entire portlet. For example, a stock trading value within a portlet can be updated via the dynamic content tags feature, without re-posting the entire browser or even the portlet. Full pages, portions of pages, tables, portions of tables as well as other pieces and segments can be updated dynamically. Such granularity of communication allows for a much more responsive user interface and data exchange. Another advantage can be reduced server workload because the server is not burdened with re-running security on every portlet, re-rendering all HTML for the entire page and re-downloading all of the Javascript every time that a communication occurs. Instead, only the necessary updates are sent via this dynamic granular interaction.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 12A","FIG. 12A"],"b":["1200","1204","1202","1206","1202"]},"In , the user has clicked on the next story link, i.e. the \u201cBennett under fire for remarks on blacks, crime\u201d link () and the dynamic container () has changed accordingly to display the text of that news story. An update request was executed behind the scenes, the results of which returned an HTML fragment to replace the contents of the dynamic container with a new news story corresponding to the link that the user has clicked on. It is important to note that while a communication occurred between the user's desktop and the CNN server, the entire page did not get re-posted. For example, the scroll bar () did not get re-sent to the top of the web page, as normally happens during a full refresh of the entire browser. Similarly, if some forms were filled out on the other parts of the page, they would not have been erased. Only the contents of the dynamic container () were updated by this piece of micro-interaction between the CNN server and the client computer.","The dynamic content feature can be implemented by various services in the communities framework. For example, during drag and drop (as described in further detail below) only the resource drop zone may be updated, instead of refreshing the entire browser. Similarly, other services and features can use the functionality of the dynamic content tags in order to provide a more dynamic and responsive user interface. The amount of data exchanged between the server and various clients can also be greatly reduced, leading to performance enhancements and ability to support more numerous users and clients per each server.","The dynamic content tags allow a hit to the same pageflow instance that the portlet is running against. For example, in a pageflow based portlet, the state of the portlet along with other variables can be maintained by the pageflow. In one embodiment, access to these variables, such as the state of the portlet, is available during the dynamic content tags based update. During a regular re-post of a page, if a user leaves the page and subsequently returns, the pageflow remembers the state, what was selected on the page and any values that may have been set or forms that may have been filled out by the user. In one embodiment, the same access to the pageflow state and other variables is available to the dynamic content tags updates. Thus, the client server can interact with the dynamic update and access to the pageflow state is provided.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 12C","b":["1230","1232","1234","1236","1238","1240"]},"As an illustration, one Java Server Page (JSP) that implements dynamic content tags can be written as follows:",{"@attributes":{"id":"p-0137","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<%@page contenType=\u201dtext\/html; charset=UTF-8\u201d language=\u201djava\u201d%>"},{"entry":"<@page import=\u201corg.apache.beehive.netui.pageflow.PageFlowUtils\u201d%>"},{"entry":"<@ taglib uri=\u201chttp:\/\/java.sun.com\/jsp\/jstl\/core\u201d prefix=\u201cc\u201d%>"},{"entry":"<@ taglib uri=\u201chttp:\/\/java.sun.com\/jsp\/jstl\/fmt\u201d prefix=\u201cfmt\u201d%>"},{"entry":"<%@ taglib uri=\u201chttp:\/\/beehive.apache.org\/netui\/tags-html-1.0\u201d prefix=\u201cne tui\u201d%>"},{"entry":"<@ taglib uri=\u201chttp:\/\/beehive.apache.org\/netui\/tags-databinding-1.0\u201d"},{"entry":"\u2003\u2003prefix=\u201cnetui-data\u201d%>"},{"entry":"<@ taglib uri=\u201chttp:\/\/www.bea.com\/servers\/portal\/tags\/netuix\/render\u201d"},{"entry":"\u2003\u2003prefix=\u201crender\u201d%>"},{"entry":"<@ taglib uri=\u201cdragdrop.tld\u201d prefix=\u201cdragdrop\u201d%>"},{"entry":"<@ taglib uri=\u201c\/WEB-INF\/tags\/wlpGroupSpace\/util\u201d"},{"entry":"\u2003\u2003prefix=\u201cwlpGroupSpaceUtils\u201d%>"},{"entry":"<@ taglib uri=\u201cdc.tld\u201d prefix=\u201cdc\u201d%>"},{"entry":"<fmt:bundle basename=\u201c${pageFlow.il8nBundlel\u201d>"},{"entry":"<fmt:message key=\u201cadd.issues.link\u201d var=\u201caddIssues\u201d\/>"},{"entry":"<fmt:message key=\u201cadd.folder.link\u201d var=\u201caddFolders\u201d\/>"},{"entry":"<fmt:message key=\u201cin.label\u201d var=\u201cinLabel\u201d\/>"},{"entry":"<\/fmt:bundle>"},{"entry":"<fmt:bundle basename=\u201ccom.bea.apps.groupspace.Common\u201d>"},{"entry":"<fmt:message key=\u201ctoggle.folders\u201d var=\u201ctoggleFolders\u201d\/>"},{"entry":"<\/fmt:bundle>"},{"entry":"<%"},{"entry":"String theHref = PageFlowUtils.getRewrittenActionURI(pageContext.getServletContext( ),"},{"entry":"request, response, \u201csearchIssues\u201d,)"},{"entry":"String[ ][ ] tabsArray = new String[2][2];"},{"entry":"tabsArray[0][0] = \u201cBrowse\u201d;"},{"entry":"tabsArray[0][1] = null;"},{"entry":"tabsArray[1][0] = \u201cSearch\u201d;"},{"entry":"tabsArray[1][1] = theHref;"},{"entry":"%>"},{"entry":"<dragdroy dragDropScript\/>"},{"entry":"<dc:script\/>"},{"entry":"<wlpGroupSpaceUtils:renderTabs tabsArray=\u201c<%=tabsArray%>\u201d\/>"},{"entry":"<br>"},{"entry":"<dragdrop:dragDropScript\/>"},{"entry":"<button onclick=\u201ctoggleFolderView(\u2018<netui:rewriteName name=\u2019treeContainer"},{"entry":"<table width=\u201c100%\u201d border=\u201c0\u201d cellspacing=\u201c0\u201d cellpadding=\u201c3\u201d>"},{"entry":"<tr>"},{"entry":"<td valign=\u201ctop\u201d width=\u201c0%\u201d id=\u201c<netui:rewriteName name=\u2018treeContainer\u2019\/>\u201d"},{"entry":"\u2003\u2003nowrap>"},{"entry":"<wlpGroupSpaceUtils:roundedBox outerColor=\u201cwhite\u201d innerColor=\u201cgraylight\u201d"},{"entry":"\u2003\u2003innerStyle=\u201cpadding:6px;padding-bottom:12px;\u201d>"},{"entry":"<wlpGroupSpaceUtils:roundedBox outerColor=\u201cgray-light\u201d innerColor=\u201cgray-dark\u201d>"},{"entry":"<dc:container dcContainerld=\u201cselectNode\u201d>"},{"entry":"<dc:containerActionScript action=\u201cselectNode\u201d initial=\u201ctrue\u201d>"},{"entry":"<\/dc:container>"},{"entry":"<\/wlpGroupSpaceUtils:roundedBox>"},{"entry":"<dc:container dcContainerld=\u201cissuesTree\u201d>"},{"entry":"<dc:containerActionScript action=\u201cdisplayIssuesTree\u201d initial=\u201ct rue\u201d async=\u201cfalse\u201d\/>"},{"entry":"<dc:containerActionScript action=\u201cmoveIssue\u201d>"},{"entry":"<dc:containerActionParam name=\u201csourceId\u201d jsEval=\u201cgetSourceId( )\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201ctargetId\u201d jsEval=\u201cgetTargetId( )\u201d\/>"},{"entry":"<\/dc:containerActionScript>"},{"entry":"<\/dc:container>"},{"entry":"<\/wlpGroupSpaceUtils:roundedBox>"},{"entry":"<\/td>"},{"entry":"<td valign=\u201ctop\u201d width=\u201c100%\u201d>"},{"entry":"<dc:container dcContainerld=\u201cissueDetails\u201d>"},{"entry":"<dc:containerActionScript action=\u201cdisplayIssueDetails\u201d initial=\u201ct rue\u201d"},{"entry":"\u2003\u2003async=\u201cfalse\u201d\/>"},{"entry":"<dc:containerActionScript action=\u201cremoveIssue\u201d async=\u201cfalse\u201d\/>"},{"entry":"<dc:containerActionScript action=\u201caddEditIssue\u201d\/>"},{"entry":"<dc:containerActionScript action=\u201ceditIssue\u201d async=\u201cfalse\u201d>"},{"entry":"<dc:containerActionParam name=\u201ctitle\u201d inputId=\u201ctitle\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cdescription\u201d inputId=\u201cdescriptio n\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cresolution\u201d inputId=\u201cresolution\u201d>"},{"entry":"<dc:containerActionParam name=\u201cstatus\u201d inputId=\u201cstatus\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cpriority\u201d inputId=\u201cpriority\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cowner\u201d inputId=\u201cowner\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cknowledgeBase\u201d inputId=\u201cknowledgeBase\u201d\/>"},{"entry":"<\/dc:containerActionScript>"},{"entry":"<dc:containerActionScript action=\u201ccreateIssue\u201d async=\u201cfalse\u201d>"},{"entry":"<dc:containerActionParam name=\u201ctitle\u201d inputId=\u201ctitle\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cdescription\u201d inputId=\u201cdescription\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cresolution\u201d inputId=\u201cresolution\u201d"},{"entry":"<dc:containerActionParam name=\u201cstatus\u201d inputId=\u201cstatus\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cpriority\u201d inputId=\u201cpriority\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cowner\u201d inputId=\u201cowner\u201d\/>"},{"entry":"<dc:containerActionParam name=\u201cknowledgeBase\u201d inputId=\u201cknowledgeBase\u201d\/>"},{"entry":"<\/dc:containerActionScript>"},{"entry":"<dc:containerActionScript action=\u201caddEditIssueFolder\u201d\/>"},{"entry":"<dc:containerActionScript action=\u201ccreateIssueFolder\u201d async=\u201cfalse\u201d>"},{"entry":"<dc:containerActionParam name=\u201ctitle\u201d inputId=\u201ctitle\u201d\/>"},{"entry":"<\/dc:containerActionScript>"},{"entry":"<dc:containerActionScript action=\u201ceditIssueFolder\u201d async=\u201cfalse\u201d>"},{"entry":"<dc:containerActionParam name=\u201ctitle\u201d inputId=\u201ctitle\u201d\/>"},{"entry":"<\/dc:containerActionScript>"},{"entry":"<dc:containerActionScript action=\u201cnextFolderChildrenPage\u201d async=\u201cfalse\u201d>"},{"entry":"<dc:containerActionScript action=\u201cprevFolderChildrenPage\u201d async=\u201cfalse\u201d>"},{"entry":"<dc:containerActionScript action=\u201clastFolderChildrenPage\u201d async=\u201cfalse\u201d>"},{"entry":"<dc:containerActionScript action=\u201cfirstFolderChildrenPage\u201d async=\u201cfalse\u201d>"},{"entry":"<\/dc:container>"},{"entry":"<\/td>"},{"entry":"<\/tr>"},{"entry":"<\/table>"},{"entry":"<script language=\u201cjavascript\u201d>"},{"entry":"\u2003\u2003function toggleFolderView(theId)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003var obj;"},{"entry":"\u2003\u2003\u2003\u2003if(obj = document.getElementById(theId)){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(obj.style.display == \u201cnone\u201d){"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003obj.style.display = \u201cblock\u201d;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003else{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003obj.style.display = \u201cnone\u201d;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2009<\/script>"},{"entry":"<\/script>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Another feature that can be provided to the communities framework is the notification system. For example, a notification manager can provide the community with the functionality of monitoring various announcements and display them as they become due. In one embodiment, the notification manager can be implemented as a work manager timer object provided by the WebLogic\u00ae Server from BEA Systems Inc. The notification manager can be set to execute every n seconds (n seconds being some arbitrary specified period of time) and during one these executions, it can determine whether there are any announcements in the repository which need to be sent to their respective recipients or some other updates that may need to be executed.",{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 13A"},"In step , the notification manager may be set by the developer or user to go off and execute every 30 seconds. At this time the notification manager would request a manager class object to provide it with a list of all the announcements for this community within the repository, as illustrated in step .","In step , the notification manager would then iterate through each announcement in the list of returned announcements to determine whether it is time for the particular announcement to be sent to its recipient. Thus, during each iteration, the notification manager would check if there are any more announcements left (step ) and if there are, it would determine whether it is time for that announcement to be sent to its recipient (step ). It could use the announcement's property of notification_date in determining whether it is time for the particular announcement to be sent. If the announcement should be sent, the notification manager can send the announcement (step ) and continue with the iteration through the announcement list. The notification manager can obtain the recipient information for the announcement from its address_to field. If there are no more announcements left in the list, the notification manager could then go back into dormant state and wait until its next execution time.",{"@attributes":{"id":"p-0142","num":"0141"},"figref":"FIG. 13B"},"As shown, notification can be provided for all announcements that are currently in effect. The servletContextListener () can be implemented for listening to the servlet context events and responding to them via an appropriate interface. The timer listener () object can be created for monitoring the timing intervals (if used) and for listening to invocations (or pings) from the client. The timer listener () can invoke the poller () object by calling upon a notifyAnnouncements( ) method. The poller () class can be responsible for notifying the proper recipients of their respective announcements. It can use the control architecture () in this endeavor. For example, the poller can implement generic pollerControl () via the notifyPendingAnnouncements( ) method. The pollerControl can have the extensible pollerCmxControl () associated with it for handling interaction with the nodes in the repository. Thus, the generic pollerControl can implement the extensible pollerCmxControl via the getEffectiveAnnouncementsToNotify( ) and pollerControl can also implement sendNotification( ) for every announcement returned. The static notificationHelper () can be responsible for creating the communityNotification () and returning the implementation of the communityNotification to the pollerControl. The pollerControl can also be responsible for setting the attributes of the notifications and sending them appropriately. The announcementNotification () and the invitationNotification () classes can inherit from the communityNotification class and can be specific for each type of resource.","In one embodiment, the notification manager can be located on a server and can be executing in response to the client pinging for notifications. Any community application or portlet can register itself with the notification service in order to communicate to registered community members changes that occur within the application. For example, the issues log portlet can allow for community members to register their interest in changes to certain specific issues or to all issues resources. Afterwards, when issues are updated or new issues are added, the appropriate members can be notified of the change. As such, pinging for notifications allows community members to be notified upon updates to any of their subscribed-to information.","In one embodiment, the client can ping the server every so often, inquiring into updates of any information that the client has subscribed to. The server can then call on the notification manager to look up relevant information for that client that it knows and then return that information to the client. In one embodiment, the notification manager can know of this information through the publish and subscribe service. Thus, the information can be updated to the client automatically, requiring no input from the user. For example, newly arrived emails, tasks that are due soon, calendar items, meeting reminders, announcements sent to the member, invitations to a meeting, as well as other information can be updated by the notifications manager. In one embodiment, the server is informed of the community member's registered interests by the publish and subscribe service and upon each ping, the notifications manager can check the relevant updates for that community member. It can then call on the notifications center service (portlet) to modify the member's UI to display updated information.","One advantage of the pinging for notifications feature is that all of its functionality can be accomplished without the need for any server push. One commonly known way to provide automatic notifications of updated information to a client without the client requesting such information, is by implementing some sort of server push. A server push is a process whereby a server maintains an open connection with a browser after the initial request for a page. The server can then force-refresh the browser on the client every time a piece of information is updated on the server. There are multiple disadvantages with this type of system. Firstly, server push works poorly over slower networks. Secondly, it is difficult to implement server push and additional technology is typically required such as a flash plugin installed or an additional applet running in the background. The present system eliminates the need for such technology by employing the pinging for notifications feature. Another advantage of this type of system is that the notification process can implement the dynamic content tags feature instead of merely notifying the user upon web page refreshes. Thus, a community member may be informed of new notifications without requiring any action on his or her part and a granular portion of a page can be updated rather than fully re-posting the entire page.",{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIG. 14"},"In step , a member of a community, such as member_A can subscribe to receive notifications of any updates of a particular collaboration resource such as all the issues for example. In another embodiment, the member can subscribe to receive notifications about other data, such as reminders about tasks due, new emails and invitations. The publish and subscribe service can provide the member with this ability.","In step , after subscribing, member_A's desktop can continuously ping the server for any updates to the presently available Issues. For example, the client computer can ping the server every fifteen seconds, requesting any available updates for member_A. The specific time amount can be configured by the user. Each ping can be implemented to send a minimum amount of information required, such as the user_id of member_A as well as any other necessary identifications (e.g. id of the community that member_A is in). By minimizing each ping, the performance of the notifications system can be significantly improved. Furthermore, the dynamic content feature (as described above) can be implemented in conjunction with the notification system so as to take advantage of more granular and dynamic client\/server interaction.","In step , the resource is modified in some manner. For example, another member_B may subsequently create a new issue and add it to the list of presently available issues. Upon receipt of the next ping, the notifications manager can then look up and update the relevant information.","Thus, in step , the server would receive a ping from member_A's desktop requesting any available updates for member_A. At this point, the server can determine who is requesting the particular update\/notification. In other words, the notification manager can determine from the ping which member is logged onto the client that sent the ping.","In step , the notifications manager (preferably located on the server) can look up what information to update for member_A. There are several ways that it can perform this function. In one embodiment the notification manager can call on the publish and subscribe service to determine which information member_A has subscribed to. For example, member_A may have previously subscribed to receive updates of a particular stock price displayed in a portlet. The notification manager would know this from the publish and subscribe service and could go out acquire the required information. In an alternative embodiment, the notification manager does not require any input and can perform its own logic determining the appropriate information to return. For example, the notification manager may know to check for any new emails, announcements and\/or invitations for member_A, all without requiring any input from the subscription service.","In step , once the server knows that member_A has subscribed to updates of all issues, it can look up the change to the list of issues. In step , the server can then return the relevant information back to the original pinging member_A. For example, the notifications manager can update the user interface portion of member_A's desktop automatically to display the updated information, without requiring any input from member_A. The notifications manager can be AJAX based. The dynamic content tags feature can be used in conjunction with the notifications manager in order to more responsively update the member's particular portlet or portion thereof. For example, a value within a portlet may be dynamically updated each time the notification manager updates it, without re-posting the entire browser. Thus, a granular and preemptive updating process is achieved, yet requiring very little or no user interaction.","Each ping can be implemented to be abstract and nonspecific so as to process the smallest possible amount of data. Thus, rather than asking the server for updates to a specific type of information (requiring the identification of that information), the client can instead send a much less complex request, such as a ping for any available information carrying the particular user's user_id. The server can then look up the relevant updates for that client which it can obtain from the publish and subscribe process discussed above and return that information to the requesting member. In other embodiments, each ping can also carry more information such as the identification of the requested info. The dynamic content tags feature can also be implemented with pinging for notifications, in order to more responsively update the user interface of the requesting member, without the need to refresh the entire page. The pinging for notifications can also be implemented with other services and portlets, enabling a more dynamic community membership experience. For example, any selected page value can be updated or notified by the pinging for notifications feature. A member can be automatically notified whenever a new email arrives addressed to him or her. In another embodiment, a member can be notified soon before a particular task becomes due as a reminder to complete that task. Whenever a member is invited to join a community, the notifications system can notify the member of this new invitation automatically. Yet in another embodiment, once an announcement is sent to multiple members, the notifications manager can notify each recipient member about the announcement and update their user interface accordingly. The notifications manager can perform all of the logic required, such as determining what kind of information needs to be looked up and when the user needs to be notified. This can free up each client from performing these tasks thereby enabling a faster and more dynamic community experience. A variety of notifications and reminders can be aggregated into one user interface, pulling various messages from multiple communities. Caching techniques may also be implemented, so as to improve access time to group projects and updates to information shared by multiple members. For example, there may be a large number of clients pinging for notifications of a specific item of data (e.g. a weather portlet update). In that scenario, it is undesirable for the server to retrieve the information repeatedly upon every ping\/request for it. The notification system can implement caching in an effort to reduce such number of retrievals. Thus, upon the first ping, the notification manager can store the weather update information in a cache and upon subsequent pings from other clients, it have access to that information without the need to retrieve it again.","In one embodiment, a notification center portlet may be implemented for providing retrieved information to the user. For example, once a member is notified of a particular announcement, he may call the notification center portlet to display, organize and browse the appropriate data. The notification center can also be implemented to call upon other portlets for displaying the relevant data. As an illustration, member_A can be notified by the notifications manager of several announcements that are directed to that particular member. The notification center portlet can be rendered on member_A's desktop, informing him that several announcements are ready for viewing. Once member_A opens the window, the notification center can then call the appropriate announcement portlet to display each specific announcement.","Resource Interlinking","Another feature that can be provided to the communities framework is resource interlinking. A collaboration resource can allow for relationships to other collaboration resources. Each collaboration resource can allow other collaboration resources to be linked or related to it by a one-to-many type of relationship. These relationships can be turned into hyperlinks that activate the correct viewer or editor portlet for the particular resource type referred to.","In one embodiment, resource interlinking could implement the link properties type feature of the content management system. Any data within the content management system can be associated with any other data in the content management system, so long as one of those pieces of content has a link properties type on it. The link properties type can be a property type that a developer adds to a piece of content. In this manner, a relationship among two or more resources can be created. The content management system typically does not imply anything about what these relationships can mean or how to take advantage of them or how to navigate between them. Content within the repository can be of different types, i.e. containing different properties. For example, one resource may have the properties author, department number, and owner, while another resource may have entirely different properties (e.g. severity, description, etc.). Furthermore, some of this data may not even be intended to be human-readable. Thus, various viewer portlets may need to be provided for displaying resource information to the user, including its properties.","Because any resource type can be linked to any other resource type, the system should preferably determine what type of resource is linked to the selected resource. The system can then determine which associated viewer portlet can best display this type of content to the user. Thus the correct portlet should be called upon to view the data for the linked resource in some coherent fashion. For example, the announcement resource may have the view_announcement portlet, the document may have its own view_document portlet and so on. The system can determine which type of resource is linked and force the portal browser to navigate to and execute the portlet associated with that resource.","A relationship amongst resources can be specified via the drag and drop feature (as discussed below), or by pasting or in some other manner as available in the art. The related resources can be displayed in a section of the user interface, where each related item has its icon and a link to itself. Thus, clicking on a related resource title can take a user to that resource in its own portlet.","As an illustration, a given collaboration resource such as an Issue can have a property called related content. A user can then specify various other resources in that field by, for example, dragging a resource into the field and dropping it there. Thus, a user can select a given document and drag it into the related content field of a selected issue, dropping it there. Consequently, the user's selected document will relate to the selected issue. The user will then be able to navigate among the two resources by simply clicking on the appropriate link within the related content field. In this manner, a kind of neural network can be created amongst the collaboration resources, allowing for a more dynamic and fluid community experience for its members. Users are able to navigate between the application and the heterogenous resources as well as bring up tools of a particular resource. A referer\/referee type of relationship can be implemented such that bi-directional navigation can be achieved between multiple resources. For example, the list of resources that the resource relates to can be labeled \u201creferences\u201d and the list of resources that relate to the resource can be labeled \u201creferenced from.\u201d It can be important to separate the references for security purposes. For example, a user may have access rights to remove links from one resource but he may not be allowed to remove links to that resource from other resources. Because the references are separated, the user can be precluded from deleting data outside of his capabilities.",{"@attributes":{"id":"p-0161","num":"0160"},"figref":"FIG. 15","b":["1502","1506","1504","1508","1510","1500","1512","1514","1516","1506","1518","1526","1520","1528"]},"The term relationship, as used herein, can also refer to something more than a mere hyperlink in one document to another. While resource interlinking does provide an ability for community members to navigate between related resources by clicking on their links, it can also allow for a more versatile functionality. Other heterogeneous resources and services can know of a particular relationship among two resources and can implement that relationship in some meaningful way. For example, a search service may implement resource interlinking in order to search all related resources to a particular resource, while other services may implement resource interlinking for their own appropriate purposes. Resource interlinking can also be related to portlet activation. For example, there may be several instances of the issues portlet and one must be selected in order to show the issue that is related to some other resource and brought up from another portlet (e.g. document library portlet). The communities framework provides for a way to determine which issue should be activated and its details brought up. As such, the resource interlinking feature can provide a much more fluid, adaptable and user-friendly collaborative environment.","A developer can be provided with the ability to specify what a relationship among several resources may mean or imply. This need not be strictly defined within the communities framework so as to allow a more customized approach to collaboration. For example, one enterprise may wish to define a relationship to be merely a navigation link, while another may wish to implement relationships in their own implementations of various communities. Other applications of resource interlinking are possible and the above examples are not intended to exhaust all of them.","Drag and Drop","Another feature that can be provided to the communities framework is drag and drop functionality. The drag and drop tag library provides for the ability of a user to drag and drop various resources and portlets from one page element to another. Upon any given drop, a Javascript function could be called, a pageflow action could be submitted or a form action could be called to perform the desired functionality.",{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 16","b":["1600","1606","1608","1610","1612","1614","1616","1618","1604","1602","1604","1600"]},{"@attributes":{"id":"p-0166","num":"0165"},"figref":["FIG. 17","FIG. 16"],"b":["1702","1704","1700"]},"Drag and drop tag library can be implemented in various ways and the above example is only intended to be one illustration. For example, users may wish to relate various other resources, or to drag a resource into a service instead of entering its identifier. Similarly, a user could drag portlets such as the RSS portlet onto the page, dropping the portlet there for further execution. The drag and drop library can provide for a highly user-friendly and fluid interface for the communities framework.","In one embodiment, three tags may be defined in the drag and drop tag library. The first tag can be called dragDropScript tag and this is the tag that can be used to include the necessary drag and drop Javascript libraries into the page. As such, it preferably should be included before any other drag and drop tags are used on the page. This tag need not take in any attributes and can be included with a simple statement such as:",{"@attributes":{"id":"p-0169","num":"0168"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<dragdrop:dragDropScript\/>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The second tag can be called draggableResource and it may specify a draggable resource on the page. It can take in such attributes as imageId, resourceId and resourceName and can be called upon as follows:",{"@attributes":{"id":"p-0171","num":"0170"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<dragdrop:draggableResource imageId=\u201d0\u201d resourceId=\u201d${id}\u201d"]},{"entry":[{},"\u2003\u2003resourceName=\u201d${name}\u201d>"]},{"entry":[{},"<img src=\u201d\/image.gif\u201d width=\u201d16px\u201d height=\u201d16px\u201d"]},{"entry":[{},"\u2003\u2003dragdrop:image=\u201dtrue\u201d\/>${name}"]},{"entry":[{},"<\/dragdrop:draggableResource>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The resourceId can be the unique identifier associated with the resource that is being dragged. Preferably, this identifier should be the same identifier that is used by the underlying business logic to uniquely identify that resource (e.g. its unique key). The resourceId value can be made accessible via a Javascript function getSourceId( ) when it is dropped onto a resource drop zone. Similarly, the resourceName attribute and the imageId specify the representative name and the image file of the resource being dragged, respectively.","The third tag can be called resourceDropZone and it identifies an area on the page where draggable resources can be dropped. This tag can take in the attributes of targetId, jsFunctionCall, pageFlowAction and formAction. The targetId attribute can be the unique identifier of the drop zone object. It should preferably be an identifier that can be used by the underlying business logic to uniquely identify what object received the drop action. The jsFunctionCall attribute can be a Javascript function that gets executed when a draggable resource is dropped onto this resourceDropZone. The pageFlowAction attribute can specify the pageflow action that will be initiated when a draggableResource is dropped on the resourceDropZone. Finally, the formAction attribute can specify a Java Server Page (JSP) or a servlet that will receive a POST action when a draggableResource is dropped on this resourceDropZone.","One example of the code to perform a drag and drop of a resource can be written as shown below. This code illustrates how a move issue action can be coded.",{"@attributes":{"id":"p-0175","num":"0174"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Jpf.Action (forwards={@Jpf.Forward(name=\u201csuccess\u201d,"]},{"entry":[{},"\u2003\u2003path=\u201cdisplayIssuesTree.do\u201d)} )"]},{"entry":[{},"protected Forward moveIssue( )"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003Forward forward = new Forward (\u201csuccess\u201d);"]},{"entry":[{},"\u2003\u2003String sourceId = getRequest( ).getParameter(\u201csourceId\u201d);"]},{"entry":[{},"\u2003\u2003String targetId = getRequest( ).getParameter(\u201ctargetId\u201d);"]},{"entry":[{},"\u2003\u2003move (sourceId, targetId);"]},{"entry":[{},"\u2003\u2003return forward;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0176","num":"0175"},"figref":"FIG. 17B"},"A developer () can use the drag and drop tags () while creating java server pages (), portlets or various other tools for the communities framework. A draggable resource () and a resource drop zone () can be displayed on the user interface () such as a typical GUI for example. The draggable resource can associated with any resource () capable of being displayed on the user interface including but not limited to users, documents, issues, discussions, announcements or other types of collaboration resources. The drop zone () can be a specific area on the page that can be specified by the developer () via one or more of the drag and drop tags (). Upon the user such as a community member (, ) selecting the draggable resource () and dragging and dropping the resource into the resource drop zone, an action () can be performed by the system. This action can be specified in the drag and drop tag and can take the form of a Javascript function (), an AJAX call () or a page flow action (). As an illustration, when a community member drops the draggable resource onto a drop zone, a dynamic content call can be made to a remote server, for updating the drop zone area of the user interface with an HTML fragment. Similarly, other implementations of the drag and drop tags are possible and are well within the scope of the present invention.","Active Menus","Another feature that can be provided to the communities framework is active menus. Active menus can provide the ability for developers to create, modify and otherwise customize menus associated with a given collaboration resource. Users and developers can be allowed to create the menu items dynamically, without the need for difficult hard coding of such features into the various APIs.","As an illustration, anyone collaborative resource can have a menu associated with it. A mouse-over or right-click can cause that menu to come up, thereby displaying various menu items. For example, the collaboration resource announcement can have menu items such as edit, delete, deliver, link, as well as others. A given menu item can run page flow actions, be a hyperlink, call a javascript function or make an dynamic content call (as previously described). A user can be allowed to create these menu items for each collaborative resource and to add them to the existing menu of that resource. For example, a developer can create a new menu item called set_time_out_value and add it to the resource announcement. Subsequently, this new menu item can be displayed along with the previous ones upon mouse-over or right click by any member of the community. Thus, a member can be provided with the ability to set an expiration time (time_out_value) for a given collaboration resource announcement by clicking on the newly created menu item. Active menus can provide for many other implementations as well, allowing a fluid and user-friendly approach to creating and using menus with any given resource.",{"@attributes":{"id":"p-0180","num":"0179"},"figref":"FIG. 18","b":["1800","1802","1804"]},{"@attributes":{"id":"p-0181","num":"0180"},"figref":"FIG. 19","b":["1900","1902","1902"]},"In one embodiment, a tag library is defined for allowing a developer to easily create new menus and menu items and associate them with various resources. Generally, JSP tag libraries can define modular functionality that can be used and re-used by a JSP page. Tag libraries can reduce the necessity to embed large amounts of Java code into JSP pages by moving the functionality of the tags into tag implementation classes.",{"@attributes":{"id":"p-0183","num":"0182"},"figref":"FIG. 20"},"A developer () can use the active menu tags () while creating java server pages (), portlets or various other tools for the communities framework. A menu () can be created using the active menu tags and this menu can be associated with a particular resource () such as a document, link, announcement, user, event, or any other type of resource. The menu can perform various actions (), such as javascript functions (), AJAX calls () or page flow actions (). The menu can have various menu items (, ) for executing each of the actions described. Active menu tags can be provided for describing each menu item. In this fashion, a developer can create new menus for resources as well as add new menu items to presently existing menus. Members of the community (, ) can subsequently access the resource menus via a user interface ().","The configuration and use of active menus will now be described in detail and with reference to examples of various implementations and code. Active menus can be configured by using a configuration file. The configuration file such as activemenus-config.xml can be set up, the results of which can produce multiple menus that consist of various different items, styles and icons. The configuration file can contain various tags such as the type tag, the typeDefault tag and the menuItem tag. The type tag can define the individual menus that are to be used within the web application. For example a statement such as:",{"@attributes":{"id":"p-0186","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<type name=\u201dfoo\u201d>"]},{"entry":[{},"<\/type>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"A typeDefault tag can define what will be displayed within the browser where the active menus stag is used. A developer can control the text displayed, the style of that text and the image shown on mouse-over (or right click) of that text. For example:",{"@attributes":{"id":"p-0188","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<typeDefault>"},{"entry":"\u2003\u2003<displayText \u2003className=\u201dcom.foo.GetUserNameFromProfile\u201d"},{"entry":"\u2003\u2003methodName=\u201dgetName\u201d\/>"},{"entry":"\u2003\u2003<displayStyle class=\u201dpopup\u201d style=\u201dcolor:#000000\u201d\/>"},{"entry":"\u2003\u2003<displayMenuImage src=\u201d\/foo\/images\/foo.gif\u201d\/>"},{"entry":"<menuStyle class=\u201dmenu\u201d style=\u201dbackground-color:#FFFFFF;"},{"entry":"border-style:dotted;\u201d\/>"},{"entry":"<\/typeDefault>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0189","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class GetUserNameFromProfile"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public static String getName (String userName)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003return \u201cXXX-\u201c + username + \u201c-XXX\u201d;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0190","num":"0189"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<activemenus display=\u201cUserName\u201d type=\u2018foo\u2019\/>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The menuItem tag can define the individual items within the popup menu. They can execute various different types of actions, such as Javascript functions, links, or submit pageflow actions. It can be left up to the developer to define which type of action will be performed. As an illustration, menu item tags can be written as follows:",{"@attributes":{"id":"p-0192","num":"0191"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<menuItem>"},{"entry":"\u2003\u2003<param name=\u201duserId\u201d\/>"},{"entry":"\u2003\u2003<xmlHttp url=\u201dGetFirstNameServlet\u201d\/>"},{"entry":"\u2003\u2003<row classs=\u201dmenuRow\u201d style=\u201dbackground-color:red\u201d\/>"},{"entry":"\u2003\u2003<text class=\u201dmenuText\u201d style=\u201dcolor:#000000\u201d\/>"},{"entry":"\u2003\u2003<rowRollover class=\u201dmenuRowRollover\u201d"},{"entry":"\u2003\u2003style=\u201dbackground-color:green\u201d\/>"},{"entry":"\u2003\u2003<textRollover class=\u201dmenuTextRollover\u201d style=\u201dcolor:#FFFFFF\u201d\/>"},{"entry":"<\/menuItem>"},{"entry":"<menuItem>"},{"entry":"\u2003\u2003<javascript>"},{"entry":"\u2003\u2003\u2003\u2003<name>Testing<\/name>"},{"entry":"\u2003\u2003\u2003\u2003<script>testing(this);<\/script>"},{"entry":"\u2003\u2003<\/javascript>"},{"entry":"<\/menuItem>"},{"entry":"<menuItem default=\u201dtrue\u201d>"},{"entry":"\u2003\u2003<link rul=\u201dhttp:\/\/www.google.com\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<name>Google<\/name>"},{"entry":"\u2003\u2003<\/link>"},{"entry":"<\/menuItem>"},{"entry":"<menuItem>"},{"entry":"\u2003\u2003<allParams\/>"},{"entry":"\u2003\u2003<action action=\u201daddEditLink\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<i18nName bundleName=\u201dcom.foo.LinksPopupMenu\u201d"},{"entry":"\u2003\u2003\u2003\u2003key=\u201dedi.link\u201d\/>"},{"entry":"\u2003\u2003<\/action>"},{"entry":"<\/menuItem>"},{"entry":"<menuItem>"},{"entry":"\u2003\u2003<allParams\/>"},{"entry":"\u2003\u2003<dcAction action=\u201dshowFeedData\u201d"},{"entry":"\u2003\u2003dcContainerId=\u201dfeedDataContainer\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<i18nName \u2003bundleName=\u201dcom.foo.LinksPopupMenu\u201d"},{"entry":"\u2003\u2003\u2003\u2003key=\u201dshow.feedData\u201d\/>"},{"entry":"\u2003\u2003<\/dcAction>"},{"entry":"<\/menuItem>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the example above, the menuItem tag defines several types of individual items within the popup menu. First such item type can be javascript, i.e. any javascript that a developer wants to run when the user clicks on this menu item. To make it more useful, values specified in the param tag can be retrieved. Another such item type can be xmlHttp, which references a servlet (which can follow all standard servlet configuration). Whatever that servlet outputs can be shown in that row of the menu. Another item type can be a link (i.e. a static URL that will open a new browser window pointed to the defined URL). Yet another type can be action type, which is the name of an action that should be available to the page or portlet that contains the active menus tag. This can run the action within the current browser so as to allow the use of forwards to control pageflow. A dcAction type can also be allowed. If you have a dynamic content container set up within the page, a menu item can be set up to call an action and have it update the dynamic content container. This can be implemented very similar to the action menu item, the difference being that a developer may need to specify the dcContainerId which corresponds to the dcContainerId that is defined within dynamic content tag feature.","When using the active menus tags, several different attributes can be placed on the tag in order to define certain tag characteristics. For example, the display attribute can define what will be displayed in the place of the tag itself. The type attribute can define what will be in the menu and should preferably match up to a type defined in the activemenus-config.xml file. The href attribute can be used to override the default anchor href for the display text of the tag. A newWindow attribute can be used to specify that the link be opened in a new browser window. A class attribute can be used to define a cascading style sheet (CSS) class to style the display text. A style attribute can define a css style to be placed on the display text. A rightclick attribute can be used to turn a menu into a right-click menu instead of a mouse-over menu. A param attribute can be used to set up parameters that can be passed in and used when defining a menu item in the activemenus-config.xml file. The param attribute can further be specified by the name and value attributes of the parameter.","Displaying HTML Content from Portlet as a Page Element","Another feature that can be provided to the communities framework is displaying HTML content from a portlet as a page element. This feature of the communities framework allows a user to add rich text, such as italics, bold, colored text to a page in the community. Additionally, it can display documents as HTML content from several different portlets as a single document.","A groupnote collaboration resource can be created to hold various forms of information for the members of the community framework. A groupnote can hold data such as images, links, text as well as other HTML content. Various groupnotes can also be linked to other groupnotes in a hierarchical relationship. This allows for a more collaborative experience, enabling a rich site of interrelated information placed by community members.","A groupnotes portlet can also be provided to enable text editing features, to display the groupnote or collection of groupnotes as a single presentation and to operate as a mini browser within the actual user interface of the member of the community. This portlet can switch into floating element display presentation mode upon which the text editing features are removed and the groupnotes can be displayed in a floating element manner. The portlet preferences can specify whether the groupnotes portlet is in display or edit presentation mode. A groupnote can be selected as the home document from which the display mode can be first rendered. An entirely different view of groupnotes may be enabled upon the display mode. Chaff and other trivial text editing matter can be removed, and other members can be denied the ability to edit the groupnote while it is in display mode. In one embodiment, only the body (HTML text, images, links, etc.) of the groupnote and its title is displayed. The borders, title bar, buttons and any other portlet material can be removed and the remaining groupnote data is displayed as a floating page element. In this manner, multiple groupnotes can be combined or appended to make them look and feel like a single document. Links to other groupnotes may also be provided within the home groupnote.","Security can be implemented in order to control access to the display or edit mode of the groupnotes portlet. Roles and capabilities (as previously discussed) of the communities framework can provide this functionality. Thus, for example, non-owners or visitors may be denied from editing or deleting groupnotes that are in display mode within the groupnotes portlet. For example, once the groupnote is in display mode, the user can be precluded from editing it unless that user satisfies certain requirements (e.g. fits into a certain membership capability).","Page flow history and state can also be enabled via the groupnotes portlet. Thus, a member can be allowed to navigate back and forth through the various groupnotes and choose to edit selected ones. Both levels of security of the community framework can be implemented with this portlet, such as in order to prevent certain members from updating or deleting particular groupnotes, discussed above. Groupnotes can be linked or related to one another as well as to other collaboration resources by the resource interlinking feature or by an HTML link within the text of the groupnote. In such fashion, the displaying HTML content from a portlet as a page element feature allows for a more user friendly and dynamic approach to collaboration.",{"@attributes":{"id":"p-0200","num":"0199"},"figref":"FIG. 21"},"In one embodiment, various users who are members (, ) of a community can use the groupnotes portlet () in order to access various types of information. This information can be contained in groupnote resources (, , ) and stored in a repository for example. The groupnotes portlet can display a plurality of groupnotes and can allow members to edit, delete and add new groupnotes to the collection. Several modes of operation can be implemented for the groupnotes portlet. One such mode can be the floating element display presentation. Another mode could be edit mode. Various groupnotes (, ) can relate or link to one another. This link can be implemented as a hyperlink in the body of the groupnote or via the resource interlinking feature as previously described. Security framework () can also be implemented in order to member access to the portlet. For example, members may be precluded from placing the groupnotes portlet into edit mode. Membership capabilities and functional capabilities can be implemented in the security framework as previously discussed. Similarly, entitlements can be placed upon groupnote data in order to control CRUD operations therein.","Test Framework","Another feature that can be provided to the communities framework is the test framework. The test framework can provide a more realistic and efficient testing of various community services by simulating a real-world type of application.","In order to create an instance of a community, regular portals should be first disassembled by creating various portal files. The test framework feature first runs regular portal instances through the d is assembler. Portals can start life as a file with an extension \u201c.portal\u201d in XML. This file typically has pages, books, portlets, layouts, placeholders and other information to render that portal on the screen. This file can be disassembled by parsing the XML code and creating all necessary objects in the database and in this manner the portal file can be turned into a desktop. Thus, in order to create a community, the portal file should preferably be disassembled first. Users and developers may be provided with various wizards in an effort to automate this process.","Each major component (e.g. Search) may have several portals associated with its series of tests. Once the community instance for that portal is created via automated disassembly, the developer can write HMTLUnit tests to access that portal as some user with any given number of membership capabilities, using the components to perform various tests. HtmlUnit is an extended testing framework that can allow developers to write tests for an application based on HTML concepts such as links, forms and tables.","In one embodiment, each major test component can have its own community that is defined by a unique portal. Each of these communities can be created automatically from those portal files by running each portal file through the disassembler. These disassembled portals can be instances of the community created for the test framework feature. Thus, all tests can be executed in a community.","Furthermore, the test framework can automatically create users, giving them memberships in a community and mapping them to various membership capabilities of that community (as discussed above below the security level one heading). All test component code can then be accessed and run in the context of a real user\/member of the community, thereby testing more realistic use cases.",{"@attributes":{"id":"p-0207","num":"0206"},"figref":"FIG. 22"},"In one embodiment, each major component () of the communities framework has multiple portals associated with its series of tests. Each of these portals can start out as a portal file (, ). These portal files can be ran through the dissassembler () in order to render the portals (, ) representing individual community instances (, ). Once the community instance is created for the portal, various HTML unit tests (, ) can be written by the developer () in order to access that portal as some user with given membership and functional capabilities. Other similar testing methodologies can be implemented in alternative embodiments instead of using HTMLUnit tests. The test framework automatically creates users (not shown) giving them membership in the community and mapping them to membership capabilities. The component code can subsequently be accessed in the context of a real user or member of the community. In this manner, a more realistic and efficient testing environment is achieved, thereby enabling a better real-world type of simulation.","Search Controls","Another feature that can be provided to the communities framework is search controls. The search controls feature can provide the use of annotations to restrict the scope of the controls such as within one community or one repository or a particular location within a single repository or across an entire enterprise. They can also provide a simple and user-friendly ability to construct search queries rather than having to deal with the search APIs or the CM expression APIs themselves. The search controls can use the content management system APIS, coupled with the security features of the communities framework in an effort to retrieve data to members, for which the membership is entitled to view.","Several options of community searches can be implemented. For example, an inter-community search can be restricted to the data in the current community and can be constrained by the security in place for that particular community. Cross-community can search across several communities which are marked with the is Searchable community property. Communities related to certain topics can be searched in this manner. Those communities not marked with the is Searchable property can still be implemented to use entitlements and security level 2 feature of the communities framework. Federated (or virtual) repository searches can also be implemented via full-text expressions to each repository to execute and then aggregate the results and filter them based on user security entitlements. Enterprise searches can be performed such as for links to web pages or content available in particular sets of directories. Such searching capabilities can provide for a much more fluid and user configurable approach to developer collaboration and can improve the amount of time and effort required for various types of projects.","Community members can be allowed to perform full text searches against the shared library. There can be a search field available in the shared library view. A community search portlet can be implemented for providing global search capabilities for a community. Users can search across any community related resource such as documents, links, events, threaded discussion groups, members of the community and pages\/books within the community. Large results sets can be paginated for ease of use, and the system can cache common searches for performance reasons. Security features (as previously discussed) of the communities framework can be employed to control user access and viewing of the various search results. Thus, result sets that are returned to the user can include only the items that the user has the right to view, as determined by the security features of the communities framework.","In one embodiment, a community member is able to search all resources within a community that he belongs to. In another embodiment, a community member is able to search for resources in all communities that he is a member of. Yet in another embodiment, users are able to search for communities that they are interested in. For example, a user may wish to find any community that is targeted at a particular interest group. These may include communities that the user is a member of as well as communities that the user is not a member of but which he may be eligible to join. These types of searches can be implemented against community meta data. Result sets could include only those communities that the user is member of or those that are public and can be organized by either relevance, date or resource type.","Developers or users can specify how many search results to return, to save a certain number of last search results and to save this search query. They can also specify the search criteria in an easy intuitive fashion and the search controls can constrict the complex search from that. The search result object can be returned and represented by something that the user can click on to access.","The searches can all be scoped according to the particular control specified by the developer. For example, community_FullTextSearchControl can search only the community repository, while RepoFullTextSearchControl can search only the non-community enterprise repositories and the EnterpriseSearchControl can search all other configured enterprise resources. The user need not explicitly specify these criteria.","In one embodiment, each search control can return the appropriate collection of search results, depending on the control. For example, community_ExpressionsSearchControl can return a collection of collaboration resources, ExpressionsSearchControl can return a collection of nodes and EnterpriseSearchControl can return a collection of Autonomy ResultDocument types.","The community-specific search controls can scope the search paths according to which community instance the search is being executed in, as well as to which user is performing the search. The developer need not specifically set the search path for the controls.","A developer can be allowed to further limit the search by specifying the object class and bean type (e.g. which type of CommunityContent) the search will be executed against. Retrieved content nodes can then be used to dynamically create that type as the nodes are iterated over.","Additional parameters on the controls, i.e. control annotations may be specified for the search, such as how many search results to return for example. The controls can be configurable by the developer in an Integrated Development Environment (IDE) so that the annotations can show up as configurable properties for the controls in the IDE.",{"@attributes":{"id":"p-0219","num":"0218"},"figref":"FIG. 23"},"In step , a developer can specify which search control is to be called upon in response to a user's request, such as by placing a call to the control within a JSP. In step , a user or member of the community can request a search to be performed. The request can be a full text search type, a search for particular objects, or another type of search. At this point a search query can be formulated by the search control. In step , the search control can scope the search to some particular location, such as a particular repository within the enterprise, a location within the repository or some other enterprise resource. In step , the search path for the query can be configured by the search control according to the community that the request was made from or according to which user has made the request. Security features (as previously discussed) can be implemented by the search controls in order to restrict search access. In step , the search control can carry out the execution of the search, such as by calling an appropriate search engine. In step , the search control can return a set of results to the user and display them in a coherent fashion, such as within a portlet.",{"@attributes":{"id":"p-0221","num":"0220"},"figref":"FIG. 24"},"In one embodiment, an enterprise () can contain various resources such as the community repository (), repositories designated for non-community use (, ) and other enterprise resources that can be configured to be searchable (). A separate search control can be implemented for each resource or group of resources. For example, a CommunityFullTextSearchControl () can be deployed so as to be responsible for searching the community repository (). A RepoFullTextSearchControl () can be responsible for performing searches in non-community repositories and an EnterpriseSearchControl () can be called upon to search other enterprise resources. Similarly, other search controls can also be implemented, such as separate controls for searching within a particular location of the community repository.","In one embodiment a developer can associate the search controls with appropriate JSPs. Users (, ) can request searches and thus call upon the search controls () via a portal () or some other form of user interface. The search controls can be responsible for formulating and executing the search requests as previously discussed. Each search control can then return an appropriate result set () as the product of executing the query. For example, the CommunityFullTextSearchControl () can return a result set of community content () (e.g. collaboration resources). Similarly, RepoFullTextSearchControl () can return a result set of repository content nodes () and the EnterpriseSearchControl () can return the result set of autonomy document type. The resulting sets of appropriate objects can then be displayed back to the requesting user via the portal page.","A sample search control is illustrated via the use of commented code and method declarations below. As illustrated, this class can perform a full text search outside the scope of the enterprise repositories.",{"@attributes":{"id":"p-0225","num":"0224"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ The use can be as follows:"},{"entry":"\/\/ Limit the scope of the search (getAvailableResources( ), setSearchResource( ))"},{"entry":"\/\/ Set the return type"},{"entry":"\/\/ Limit the number of indexed fields in the return type"},{"entry":"\/\/ Construct the full text query"},{"entry":"\/\/ Execute the query"},{"entry":"@ControlInterface"},{"entry":"public interface EnterpriseSearchControl extends FullTextSearchControl"},{"entry":"{"},{"entry":"\/\/ Set the defaults for search parameters. Possibilities are"},{"entry":"\/\/ EnterpriseScope.ALL_CONFIGURED and EnterpriseScope.NAMED_RESOURCE"},{"entry":"@PropertySet"},{"entry":"@Target({ElementType.FIELD, ElementType.TYPE})"},{"entry":"@Retention(RetentionPolicy.RUNTIME)"},{"entry":"public @interface EnterpriseSearchParams"},{"entry":"{"},{"entry":"\u2003\u2003public String DiSHServerHost( ) default \u201clocalhost\u201d;"},{"entry":"\u2003\u2003public int DiSH_aciPort( ) default 20000;"},{"entry":"\u2003\u2003public int IDOL_aciPort( ) default 9014;"},{"entry":"\u2003\u2003\/\/ all types. Could also be \u201cdoc\u201d, for example. For multiple types, it is possible to use"},{"entry":"\u2003\u2003\/\/ limitSearchToDocTypes"},{"entry":"\u2003\u2003public String limitDocType( ) default \u201c\u201d;"},{"entry":"\u2003\u2003\/\/ Return only the top N search results whose relevance weights are above this"},{"entry":"\u2003\u2003public int limitRelevanceScore( ) default 80;"},{"entry":"\u2003\u2003\/\/ Additional fields to include in the found document"},{"entry":"\u2003\u2003public String printFields( ) default \u201ctitle,author,dredate,creationdate,drefullfilename\u201d;"},{"entry":"\u2003\/\/ Additional fields to include in the found document. Default can be to sort by relevance."},{"entry":"\u2003\u2002\/\/ Note that, if that sort field does not exist on the document, it will not even be returned"},{"entry":"\u2003\u2002\/\/ by the search. Some examples are:"},{"entry":"\u2003\u2002\/\/ DATE"},{"entry":"\u2003\u2002\/\/ REVERSEDATE"},{"entry":"\u2003\u2002\/\/ RELEVANCE"},{"entry":"\u2003\u2002\/\/ MyField:numberincreasing"},{"entry":"\u2003\u2002\/\/ MyField:numberdecreasing"},{"entry":"\u2003\u2002\/\/ MyField:alphabetical"},{"entry":"\u2003\u2002\/\/ MyField:reversealphabetical"},{"entry":"\u2003\u2002\/\/ Relevance+DRETITLE:alphabetical+Date (combined, sorted in that order)"},{"entry":"\u2003\u2003\/\/public String sortString( ) default \u201cTITLE:alphabetical\u201d;"},{"entry":"\u2003\u2003public String sortString( ) default \u201c\u201d;"},{"entry":"\u2003\u2003\/\/ Page size"},{"entry":"\u2003\u2003public int pageSize( ) default 10;"},{"entry":"\u2003\u2003\/\/ Max to return is on parent class, SearchControl"},{"entry":"\u2003}"},{"entry":"\/\/ Show indexed fields that are available to search. These may be used to construct"},{"entry":"\/\/ FullTextQueryParameter expressions, eg\/\/todo: give example. For now, see Autonomy_UT"},{"entry":"\u2003\u2003\u2003public Set<String> getSearchFields( ) throws Exception;"},{"entry":"\/\/ Limit search to only those documents ending with this suffix. For example, to find all"},{"entry":"\/\/ PDF documents, the suffix would be \u201cpdf\u201d. Html oocs could be the set of suffixes: html, htm."},{"entry":"\/\/ You can search any combination of document types in this manner. These criteria will be"},{"entry":"\/\/ combined with the other criteria specified in the argumens to the findDocuments( ) methods."},{"entry":"\/\/ This can override the property ;limitDocTypes( ), which specifies a single doc type to"},{"entry":"\/\/ restrict the search to."},{"entry":"\u2003\u2003\u2003public void limitSearchToDocTypes(Set<String> docTypeSuffix) throws Exception;"},{"entry":"\/\/ Search for this text in these fields, Is not confined by searching for a particular word in the"},{"entry":"\/\/ content itself. EG, find all docs whose keywords contain \u2018foo\u2019 returns null if none found."},{"entry":"\u2003\u2003\u2003public SortableFilterablePagedResult<ResultDocument> findDocuments(String"},{"entry":"\u2003\u2003\u2003fieldText, Set<String> searchFields) throws Exception;"},{"entry":"\/\/ Contstruct a simple query that will search all the Autonomy databases for this \u2018text\u2019."},{"entry":"\/\/ returns null if none found"},{"entry":"\u2003\u2003\u2003public SortableFilterablePagedResult<ResultDocument> findDocuments(String text)"},{"entry":"\u2003\u2003\u2003throws Exception;"},{"entry":"\/\/ Contstruct a simple query that will search all the Autonomy databases for this"},{"entry":"\/\/ FullTextSearch expression."},{"entry":"\/\/ returns null if none found"},{"entry":"\u2003\u2003\u2003public \u2003\u2003SortableFilterablePagedResult<ResultDocument>"},{"entry":"\u2003\u2003\u2003findDocuments(FullTextSearch search) throws Exception;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art.","In some embodiments, the present invention includes a computer program product which is a storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include, but is not limited to, any type of disk including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. Particularly, it will be evident that while the examples described herein illustrate how the invention may be used in a WebLogic environment, other application servers may use and benefit from the invention. In addition, while the invention is described in terms of clients accessing servers, it will be evident that the invention also applies to servers accessing other servers. The code example given are presented for purposes of illustration. It will be evident that the techniques described herein may be applied using other code languages, and with different code.","The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 12B"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 12C"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 13A"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 13B"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 17B"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 24"}]},"DETDESC":[{},{}]}
