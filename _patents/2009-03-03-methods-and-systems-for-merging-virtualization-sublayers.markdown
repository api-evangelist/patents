---
title: Methods and systems for merging virtualization sublayers
abstract: A computer-implemented method may include identifying first and second sublayers of a virtualized application. The first and/or second virtualization sublayers may include a read-write sublayer, a read-only sublayer, a virtual-reset-point sublayer, and/or a patch sublayer. The computer-implemented method may also include merging an instance of the first virtualization sublayer with an instance of the second virtualization sublayer. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08407700&OS=08407700&RS=08407700
owner: Symantec Corporation
number: 08407700
owner_city: Mountain View
owner_country: US
publication_date: 20090303
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["Information Technology (IT) administrators may spend a substantial amount of time managing software applications. Managing software applications may include resolving application conflicts, repairing damaged applications, migrating to new versions of applications, installing applications, and patching applications. These tasks may be frustrating and time-consuming.","Application virtualization technologies may simplify many IT administration tasks. For example, application virtualization may allow an administrator to turn on or off a user's access to applications and data, which may reduce the time it takes to provide users with the resources they need. Application virtualization may also allow an administrator to reset broken applications to a known-good state without fear of damaging other applications. Application virtualization may ensure that each virtualized application has its own copy of DLL files that it would normally share with other applications. This eliminates conflicts that occur when two or more applications may require different versions of the same DLL, thereby rescuing administrators from a condition commonly referred to as \u201cDLL Hell.\u201d","Application virtualization may allow different versions of the same application to peacefully coexist. This means that an administrator may keep older versions intact and available while testing new versions. Even after migrating to a new version, an administrator may quickly rollback to the previous version at any time. Despite the numerous advantages of application virtualization, traditional virtualization technologies may not efficiently update and modify installed virtualized applications.","The instant disclosure is directed to methods and systems for merging sublayers of a virtualized application. Embodiments of the instant disclosure may merge any virtualization sublayer with any other virtualization sublayer of a virtualized application. For example, a read-write sublayer may be merged with a read-only sublayer. By merging a read-write sublayer with a read-only sublayer of a virtualized application, embodiments of the present disclosure may establish a new reset point for the virtualized application. In some embodiments, a new reset point for a virtualized application may be established to update a virtualized application. In other embodiments, a new reset point for a virtualized application may be established to wrap plug-ins, user-specific settings, and\/or other changes to a virtualized application into a read-only sublayer of the virtualized application.","In some embodiments, a layer-merging module may identify a virtualized application with a read-only virtualization sublayer and a read-write virtualization sublayer. The read-only virtualization sublayer may represent a first base state of the virtualized application and the read-write virtualization sublayer may store changes to the first base state of the virtualized application. The layer-merging module may merge an instance of the read-only virtualization sublayer and an instance of the read-write virtualization sublayer to create a modified read-only virtualization sublayer that comprises a second base state of the virtualized application. The second base state of the virtualized application may be a new reset point for the virtualized application.","Embodiments of the instant disclosure may also merge various other types of virtualization sublayers. For example, a first virtual-reset-point sublayer may be merged with a second virtual-reset-point sublayer. In some embodiments, a patch sublayer, a virtual-reset-point sublayer, a read-only sublayer, and\/or a read-write sublayer may be merged with any other patch sublayer, virtual-reset-point sublayer, read-only sublayer, and\/or read-write sublayer. The instant disclosure also includes various other embodiments, alternatives, and examples for merging virtualization sublayers.","Throughout the drawings, identical reference characters and descriptions indicate similar, but not necessarily identical, elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.","Embodiments of the present disclosure provide various methods and systems for merging virtualization sublayers. Various embodiments may leverage the characteristics of virtualization technologies that provide read-only sublayers, read-write sublayers, and other virtualization sublayers (i.e., sublayers of a virtualization layer) for virtualized applications. In such technologies, a read-only sublayer may provide a base state for a virtualized application and a read-write sublayer may capture changes to the base state. In some embodiments, data from a read-write sublayer of a virtualized application may be moved a read-only sublayer of a virtualized application, thereby creating a new reset point for the virtualized application. In other embodiments, data from a first virtual-reset-point sublayer may be moved to a second virtual-reset-point sublayer. In certain embodiments, data from a patch sublayer may be merged with a read-only sublayer and\/or a read-write sublayer.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 1 and 2","FIGS. 3 and 4","FIGS. 5-8","FIGS. 9 and 10"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","110","120","110","112","114","112","112","114","114"]},"In certain embodiments, one or more of modules  in  may represent one or more software applications or programs that, when executed by a computing system, may cause the computing system to perform one or more steps disclosed herein. For example, as will be described in greater detail below, one or more of modules  may represent software modules configured to run on one or more computing devices, such as computing system  in  and\/or portions of exemplary network architecture  in . One or more of modules  in  may also represent all or portions of one or more special-purpose computers configured to perform one or more tasks associated with steps disclosed herein.","As previously mentioned, system  may include a virtualized application , which may include a read-write virtualization sublayer , a read-only virtualization sublayer , a virtual-reset-point sublayer , a virtual-reset-point sublayer , and a patch sublayer . A read-only sublayer, which is also referred to herein as a read-only virtualization sublayer, may include any sublayer that one or more users is prohibited from modifying. For example, a read-only sublayer may include a sublayer that may only be modified by an administrator. A read-only sublayer may provide a base state for an application installation. In contrast, a read-write sublayer may be configured to capture application changes made by users who are prohibited from modifying the read-only sublayer.","A virtual-reset-point sublayer may include a point-in-time representation of data associated with one or more users. For example, virtual-reset-point-sublayer  may include various users' data (e.g., files, directories, registry keys, registry entries, delete entries) at a first point in time, and virtual-reset-point-sublayer  may include the users' data at a second point in time. A patch layer may include data for an update of a virtualized application. Various examples of virtualization layers and virtualized applications are provided in the discussion corresponding to .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","200","210","220","230","240","250","210","220","230","240","210","220","230","240","210","220","230","240"]},"As shown in , computing system  may include layer-merging module , deployment module , and virtualized application . Computing subsystems , , and  may each include an instance of virtualized application . For example, computing subsystem  may include a virtualized application instance , computing subsystem  may include a virtualized application instance , and computing subsystem  may include a virtualized application instance . In some embodiments, computing subsystems , , and  may also include layer-merging module .","Computing subsystems , , , and  may communicate over a network . Network  generally represents any medium or architecture capable of facilitating communications or data transfer. Network  may include, without limitation, the Internet, a Wide Area Network (WAN), a Local Area Network (LAN), a Personal Area Network (PAN), Power Line Communications (PLC), a cellular network (e.g., a GSM network), or the like. Network  may facilitate communication or data transfer using wireless and\/or wired communications.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 3"],"b":["300","100","200","310","112","120"]},"Layer-merging module  may identify sub-layers of virtualized application  in a variety of scenarios and\/or using a variety of different processes. For example, an IT administrator may use layer-merging module  to create a patch based on virtualized application . In such embodiments, the IT administrator may cause layer-merging module  to access virtualized application  for processing. In other embodiments, virtualized application  may be installed on a user's machine, and the user may want to incorporate changes in read-write virtualization sublayer  into read-only virtualization sublayer . In such embodiments, the user may cause layer-merging module  to access virtualized application  for processing.","In some embodiments, layer-merging module  may access virtualized application  in a local storage device. In other embodiments, layer-merging module  may access virtualized application  in a remote storage device. Layer-merging module  may access virtualized application  by reading data from read-write virtualization sublayer  and\/or read-only virtualization sublayer  to prepare to merge read-write virtualization sublayer  and read-only virtualization sublayer . In other embodiments, layer-merging module  may read data from any other virtualization sublayers of virtualized application  to prepare the sublayers for merging.","At step , layer-merging module  may merge an instance of a first sublayer with and instance of the second sublayer. An instance of a virtualization sublayer may include any installation or copy of the virtualization sublayer. In some embodiments, an instance of a virtualization sublayer may be the virtualization sublayer. For example, read-write virtualization sublayer  may be the instance of the first sublayer referred to in step . Similarly, read-only virtualization sublayer  may be the instance of the second virtualization sublayer referred to in step . In such embodiments, layer-merging module  may merge an instance of the read-only virtualization sublayer and an instance of the read-write virtualization sublayer by merging read-only virtualization sublayer  and read-write virtualization sublayer .","In other embodiments, the instance of the read-only virtualization sublayer referred to in step  may be in a copy or other installation of virtualized application . For example, the second virtualization sublayer referred to in step  may be a read-only virtualization sublayer of virtualized application instance , virtualized application instance , and\/or virtualized application instance . In such embodiments, the instance of the first virtualization sublayer referred to in step  may be a patch deployed by deployment module  to one or more of computing subsystems , , and\/or . The patch may represent an instance of read-write virtualization sublayer  and may be merged with a read-only sublayer of virtualized application instance , , and\/or .","In some embodiments, layer-merging module  may merge user-specific data from a first virtualization sublayer into a second virtualization sublayer. In some embodiments, merging user-specific data may be useful when a user wants to include user-specific settings and\/or other changes made by the user, such as updates or plug-ins added to an application, into a read-only virtualization sublayer of the application. By merging user-specific data into a read-only virtualization sublayer, a user may provide a virtualized application base state (i.e., reset point) that includes the user's settings.","Layer-merging module  may merge user-specific data from an instance of a read-write virtualization sublayer (or any other virtualization sublayer) into an instance of a read-only virtualization sublayer by retrieving file-system data from the instance of the read-write virtualization sublayer and copying the file-system data to a user-template region of the instance of the read-only virtualization sublayer. File-system data may include any file, directory, or other data stored in a file structure of the read-write virtualization sublayer.","A user-template region of a read-only virtualization sublayer may include any region of the sublayer that stores user-specific data. For example, a user-template region of a read-only sublayer may include files, folders, and\/or registry settings that are copied into a read-write sublayer when a virtualization layer is reset. In other words, when a virtualization layer is reset (i.e., when the read-write layer is emptied), data from the user-template region of the read-only sublayer may be copied to the read-write sublayer to establish a new baseline for the read-write sublayer after a reset.","In some embodiments, merging user-specific data from an instance of a read-write virtualization sublayer into an instance of a read-only virtualization sublayer may include retrieving registry data from the instance of the read-write virtualization sublayer and copying the registry data to a user-template region of the read-only virtualization sublayer. Registry data may include registry entries such as registry keys and\/or registry values. In some embodiments, registry data may refer to data stored in a WINDOWS operating system registry.","Merging user-specific data from an instance of a read-write virtualization sublayer into an instance of a read-only virtualization sublayer may include merging user-specific data associated with two or more different users into the read-only virtualization sublayer. For example, user-specific data stored in two different user profiles may be merged into a single read-only virtualization sublayer. In such embodiments, conflicts between different user's settings may be resolved in any suitable manner. For example, a first user may have priority over a second user (priority may be based on user groups, user titles, etc.). If the first and second users have different values for the same setting, the first user's value may be used for the setting.","In addition to and\/or instead of merging user-specific data, layer-merging module  may merge user-common data from the instance of the first virtualization sublayer into the instance of the second virtualization sublayer. User-common data may refer to data shared by multiple users and\/or data that is not specific to a particular user. In other words, user-common data may include settings and files that are general to all users on a computer. For example, user-common registry data may include registry data stored in an HKEY_LOCAL_MACHINE WINDOWS registry hive. In contrast, user-specific registry data may be stored in an HKEY_CURRENT_USER registry hive. As another example, user-common data may include files that are accessible by multiple users on a computing device. In contrast, user-specific data may include files that are only accessible by and\/or associated with a single user (e.g., associated with the user's account) of the computing device.","In some embodiments, layer-merging module  may determine a difference between the instance of the first virtualization sublayer and the instance of the second virtualization sublayer to determine which user-common file-system data to merge. For example, layer-merging module  may identify at least one file in an instance of a read-write virtualization sublayer that is not located in an instance of a read-only virtualization sublayer. Layer-merging module  may additionally or alternatively identify at least one file in the instance of the read-write virtualization sublayer that is a modified version of a corresponding file in the instance of the read-only virtualization sublayer and\/or identify at least one directory the instance of the read-write virtualization sublayer that is not located in the instance of the read-only virtualization sublayer. Layer-merging module  may copy and\/or move one or more of the files and\/or directories from the instance of the read-write virtualization sublayer into the instance of the read-only virtualization sublayer.","When merging user-common registry data, layer-merging module  may copy one or more registry keys and\/or values from a first virtualization layer registry area to a second virtualization layer registry area. For example, layer-merging module  may overwrite registry keys and\/or values in the second virtualization sublayer with keys and values from the first virtualization layer. Layer-merging module  may additionally or alternatively add registry keys and\/or values to the second virtualization sublayer.","For user-common and\/or user-specific data, layer-merging module  may identify file-system data and\/or registry data deleted from the first virtualization sublayer. In some embodiments, a virtualization system may track deleted files in one or more deleted-objects files. For example, a virtualization system may store entries for deleted files and\/or directories in a deleted-file-system-data file, such as a DELLIST.TXT file. The virtualization system may store entries for deleted registry keys and\/or values in a deleted-registry-data file, such as a DELREG.TXT file.","Layer-merging module  may parse one or more deleted-objects files and may search the second virtualization sublayer for any files, directories, registry keys, registry values, and\/or other data identified in a deleted-objects file. Layer-merging module  may remove files, directories, registry keys, and\/or registry values identified in a deleted-objects file from the second virtualization sublayer.","As previously mentioned, virtualization sublayers may be merged in a variety of contexts. In some embodiments, data from a first virtualization sublayer may be moved directly into a second virtualization sublayer. In other embodiments, a difference between first and second virtualization sublayers may be computed, and the difference may be used to merge the virtualization sublayers.","While the discussion corresponding to  focuses on examples of merging read-write sublayers with read-only sublayers, various other types of sublayers may also be merged following the processes described in the discussion of . For example, a first virtual-reset-point sublayer may be merged with a second virtual-reset-point sublayer. The first virtual-reset-point sublayer may be from a more recent point in time than the second virtual-reset-point sublayer, and merging the two sublayers may include copying data from the more recent sublayer (the first virtual-reset-point sublayer) to the older sublayer (second virtual-reset-point sublayer). In such embodiments, data for multiple users may be copied from the first virtual-reset-point sublayer to the second virtual-reset-point sublayer.","In other embodiments, a patch virtualization layer may be merged with a read-only virtualization layer. Copying the patch virtualization layer to the read-only virtualization sublayer may provide a reset point (i.e., the read-only virtualization sublayer) that includes the patch.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["400","112","114","410","114","120"]},"At step , deployment module  may determine a difference between read-only virtualization sublayer  and read-write virtualization sublayer  of virtualized application . Deployment module  may determine the difference between read-only virtualization sublayer  and read-write virtualization sublayer  in any suitable manner. For example, deployment module  may determine the difference between read-only virtualization sublayer  and read-write virtualization sublayer  by scanning the sublayers to identify files in the sublayers. Deployment module  may then compare files in the read-only virtualization sublayer  with files in the read-write virtualization sublayer . In some embodiments, determining the difference between read-only virtualization sublayer  and read-write virtualization sublayer  may include comparing a registry area in read-only virtualization sublayer  to a registry area in read-write virtualization sublayer .","In some embodiments, deployment module  may determine the difference between first and second read-only virtualization sublayers by creating a binary differential (i.e., a binary delta) between the sublayers. A binary differential between the sublayers may be created by generating the difference between registry and\/or file-system redirection areas of read-only virtualization sublayer  and read-write virtualization sublayer .","Deployment module  may use any of the processes described above to determine the difference between read-only virtualization sublayer  and read-write virtualization sublayer . The difference may identify file-system and\/or registry data to be added to the read-only virtualization sublayer. The difference may also identify file-system and\/or registry data to be deleted from the read-only virtualization sublayer.","At step , deployment module  may use the difference to create a patch configured to update an instance of the read-only virtualization sublayer with data from the read-write virtualization sublayer. The patch may represent and\/or include any difference between read-only virtualization sublayer  and read-write virtualization sublayer . For example, the patch may include a binary differential between read-only virtualization sublayer  and read-write virtualization sublayer .","Deployment module  may create a patch in any suitable manner. In some embodiments, deployment module  may create the patch by compressing the difference between the sublayers into a Virtual Patch Archive (VPA). The patch may also be formatted and\/or packaged using any other formatting and\/or packaging technologies.","At step , deployment module  may deploy the patch to a remote computing device. The remote computing device may include an instance of the read-only virtualization sublayer. The patch may be deployed using any suitable deployment and\/or transmission technologies. In some embodiments, instead of being deployed to a remote computing device, the patch may be merged with a local virtualized application.","At step , layer-merging module  may merge the patch with the instance of the read-only virtualization sublayer on the computing device. Because the patch may represent and\/or include data from read-write virtualization sublayer , the patch may be referred to as an instance of the read-write virtualization sublayer. Thus, merging an instance of the read-only virtualization sublayer and an instance of the read-write virtualization sublayer may refer to merging a patch with the instance of the read-only virtualization sublayer. In other embodiments, merging an instance of the read-only virtualization sublayer with an instance of the read-write virtualization sublayer may refer to directly merging the read-only virtualization sublayer with the read-write virtualization sublayer.","Layer-merging module  may merge the patch with the instance of the read-only virtualization sublayer in any suitable manner. Layer-merging module  may use any process described in step  above, or any other suitable process, to merge the patch with the instance of the read-only virtualization sublayer. For example, layer-merging module  may use the patch to directly modify the instance of the read-only virtualization sublayer. Such embodiments may be referred to as \u201cin-place\u201d updates or modifications. In other embodiments, layer-merging module  may create a new virtualization layer and copy one or more files and\/or settings from the read-only virtualization sublayer of the original virtualization layer to a read-only virtualization sublayer of the new virtualization layer. Layer-merging module  may merge the patch into the read-only virtualization sublayer in the new virtualization layer.","The following discussion provides an example of how the method shown in  may be implemented by components of systems  and . An administrator using computing subsystem  may want to apply an update (e.g., a security update from a vendor, a bug fix, new features, or any other modification for an application) to virtualized applications instances , , and . In some embodiments, the update may be a self-update (i.e., an update that is configured to automatically install to an application). The administrator may apply the update to read-write virtualization sublayer . In some embodiments, the administrator may perform error-checking tests and\/or other verification tests on the virtualized application to determine whether the update to read-write virtualization sublayer  caused any issues in the virtualized application.","If the virtualized application passes the verification test, the administrator may use deployment module  to create a patch, which may represent the difference between read-write virtualization sublayer  and read-only virtualization sublayer . Deployment module  may create the patch using any process presented in the disclosure corresponding to . The administrator may then use deployment module  to deploy the patch to computing subsystems , , and .","The patch may be applied to virtualized application instances , , and  using any process described herein. In some embodiments, the patch may include code programmed to automatically merge the patch with virtualized application instances , , and . Additionally or alternatively, code external to the patch (e.g., layer-merging module , which may be installed on one or more of computing subsystems , , and ) may merge the patch with instances of read-only virtualization sublayer .","As another example, a user may make numerous changes to a read-write virtualization sublayer of a virtualized application. The user may make one or more changes to user-specific and\/or user-common data in the virtualized application. The user may change settings, preferences, add bookmarks, install updates, and\/or install plugins in the virtualized application. To capture these changes as a reset point for the virtualized application, the user may merge the read-write virtualization sublayer of the virtualized application into the read-only virtualization sublayer of the virtualized application.","While the discussion corresponding to  focuses of examples of merging read-write sublayers with read-only sublayers, various other types of sublayers may also be merged following the processes described in the discussion of .","As previously noted, embodiments of the instant disclosure may provide new reset points for virtualized applications by merging sublayers of a virtualized application. As used herein, the phrase \u201creset point\u201d may refer to a base state of an application. An administrator may reset a virtualized application to the reset point (i.e., base state) by deleting the existing read-only virtualization sublayer and replacing it with a new read-only virtualization sublayer.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIGS. 5-8","FIG. 5"],"b":["500","510","510","500","508","508","506","508","506","504","506","510","512","512","501","506","502"]},"As previously mentioned, in some application-virtualization technologies, each virtualization layer may include two sublayers: a read-only sublayer and a writable sublayer. An example of a virtualization technology that utilizes read-only and read-write sublayers is SYMANTEC WORKSPACE VIRTUALIZATION (SWV).","A read-only sublayer may include an immutable base state of an application. In some embodiments, users may not\u2014even unintentionally\u2014make changes to the read-only sublayer. For example, in SVS, only administrators may be able to edit, update, and\/or delete the contents of read-only sublayers. An application may be reset by deleting the existing read-only sublayer and replacing it with a new read-only sublayer.","A read-write (i.e., writeable) sublayer may capture changes to a base state of an application. For example, when a user alters an application by changing default preferences, these changes may be written to the read-write sublayer.","Virtualized applications that include read-only sublayers and read-write sublayers may be created in any suitable manner. For example, SVS may allow a user to specify a setup program for an application the user wants to capture for purposes of virtualizing the application. SVS may launch the setup program and capture all of the applications, files, and processes, including child processes and process-induced changes, in a single Virtual Software Package (VSP). SVS may also capture MICROSOFT installer (MSI) and service control manager changes. When the setup process is complete, SVS may automatically stop the capture process. An administrator may then edit the VSP to include settings that the administrator wants to distribute to users.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 6","FIG. 6"],"b":["600","601","601","602","604","602","604","606","601","608","601","602","602","608","602","602","604","606","604","606","608","602"]},"Application  may make another file access . The virtualization system may not find a corresponding entry in layer B , but may find an entry in layer A . A third file access request  may not have a corresponding entry in layer B  or layer A , and the virtualization system may therefore return an entry from base file system .",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 7","b":["700","714","714","716","718","712","714","701","712","708","701","712"]},"Management application  may provide notices to a WINDOWS EXPLORER  indicating that the contents of a mounted file system have been changed. Other applications  may interact with the system, performing read and write operations to the file system and registry through file system filter driver . A compression library  may be provided to compress layer information.","File system filter driver  may store components of each layer and sublayer in one of two redirect areas (i.e. areas to which it redirects system calls). For example, file system filer driver  may store registry settings and attributes in a registry subsystem  and may store files in a file system subsystem .","In each sublayer's registry redirection area, file system filter driver  may store information about the state of the layer to which the sublayer belongs. File system filter driver  may also store references to the sublayer's file redirection area, reference counts, and sub-keys that\u2014through a service control manager\u2014may enable it to handle duplicate services running in multiple layers. In addition, file system filter driver  may store references to registry keys that contain user identity information, data-layer specifications, a sub-key for information about exclude entries, and a list of variables that govern the location of layer-specific files. As the name suggests, exclude entries may define application files and processes that a user may want to exclude from layers.","In the root of the file redirection area, file system filter driver  may store variable entries that abstract operating system specific file locations to enable users to deploy Virtual Software Archives (VSAs) on computers running various types of operating systems. When file system filter driver  is loaded on a user's computer, file system filter driver  may determine values for user and system variables.","File system filter driver  may store files that comprise sublayers and numbered folders under a file-redirection-area directory. File system filter driver  may use registry and file redirection areas to present to an operating system\u2014and by extension, applications and users\u2014with an aggregate view of virtualized files and data.","For example, a user may launch WINDOWS EXPLORER to view the contents of a program file folder. The user's machine may be running a virtualized application, such as MOZILLA FIREFOX, and the FIREFOX layer may be active. File system filter driver  may intercept EXPLORER's calls to the file system. From the base, which may include all files, settings, and processes that do not reside in layers on the user's machine, file system filter driver  may gather a list of non-virtualized applications that reside in the program files folder. File system filter driver  may also redirect Explorer's calls to include FIREFOX, which would normally reside in the program files folder but which, in this case, resides in the file redirection area. File system filter driver  may then respond to EXPLORER's calls with a complete list of folders that the system expects to see in the program files directory, including FIREFOX. In this example, if the FIREFOX layer were deactivated, file system filter driver  would obscure its existence.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 8","b":["802","806","802","804","806","804"],"i":["a","n","a","n","a","n ","a","n"]},"A layer may isolate an application from a base file system and may include files and a directory structure of the application's installation. The application files and directories may be shadowed or overlaid over the regular file system. Shared libraries (such as DLLs), system accessible configuration (such as registry entries), and version control may be managed by a layering subsystem.","Though each layer may be a separate and individual entity within a computing system, the application files, data, and system-accessible configuration may be presented as though they resided in their respective ordinary locations. Thus, an application stored in a layer may appear to the operating system of a computing system as if it had been installed using traditional installation techniques.","A software application installed in a virtualization layer may be an application in any commonly used meaning, including word processors, browsers, system tools, games, and the like, and the principles described herein may also extend to any other software installed on a computing system.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 9","b":["910","910","910","910","914","916"]},"Processor  generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor  may receive instructions from a software application or module. These instructions may cause processor  to perform the functions of one or more of the exemplary embodiments described and\/or illustrated herein. For example, processor  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, merging, determining, using, deploying, retrieving, copying, deleting, locating, applying, and testing steps described herein. Processor  may also perform and\/or be a means for performing any other steps, methods, or processes described and\/or illustrated herein.","System memory  generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and\/or other computer-readable instructions. Examples of system memory  include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system  may comprise both a volatile memory unit (such as, for example, system memory ) and a non-volatile storage device (such as, for example, primary storage device , as described in detail below).","In certain embodiments, exemplary computing system  may also comprise one or more components or elements in addition to processor  and system memory . For example, as illustrated in , computing system  may comprise a memory controller , an Input\/Output (I\/O) controller , and a communication interface , each of which may be interconnected via a communication infrastructure . Communication infrastructure  generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure  include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.","Memory controller  generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example, in certain embodiments memory controller  may control communication between processor , system memory , and I\/O controller  via communication infrastructure . In certain embodiments, memory controller  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps or features described and\/or illustrated herein, such as identifying, merging, determining, using, deploying, retrieving, copying, deleting, locating, applying, and testing.","I\/O controller  generally represents any type or form of module capable of coordinating and\/or controlling the input and output functions of a computing device. For example, in certain embodiments I\/O controller  may control or facilitate transfer of data between one or more elements of computing system , such as processor , system memory , communication interface , display adapter , input interface , and storage interface . I\/O controller  may be used, for example, to perform and\/or be a means for identifying, merging, determining, using, deploying, retrieving, copying, deleting, locating, applying, and testing steps described herein. I\/O controller  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Communication interface  broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system  and one or more additional devices. For example, in certain embodiments communication interface  may facilitate communication between computing system  and a private or public network comprising additional computing systems. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface  may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network or a wireless IEEE 802.11 network), a personal area network (such as a BLUETOOTH or IEEE Standard 802.15.1-2002 network), a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.","In certain embodiments, communication interface  may also represent a host adapter configured to facilitate communication between computing system  and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface  may also allow computing system  to engage in distributed or remote computing. For example, communication interface  may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments, communication interface  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, merging, determining, using, deploying, retrieving, copying, deleting, locating, applying, and testing steps disclosed herein. Communication interface  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , computing system  may also comprise at least one display device  coupled to communication infrastructure  via a display adapter . Display device  generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly, display adapter  generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure  (or from a frame buffer, as known in the art) for display on display device .","As illustrated in , exemplary computing system  may also comprise at least one input device  coupled to communication infrastructure  via an input interface . Input device  generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system . Examples of input device  include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device. In at least one embodiment, input device  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, merging, determining, using, deploying, retrieving, copying, deleting, locating, applying, and testing steps disclosed herein. Input device  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , exemplary computing system  may also comprise a primary storage device  and a backup storage device  coupled to communication infrastructure  via a storage interface . Storage devices  and  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. For example, storage devices  and  may be a magnetic disk drive (e.g., a so-called hard drive), a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface  generally represents any type or form of interface or device for transferring data between storage devices  and  and other components of computing system .","In certain embodiments, storage devices  and  may be configured to read from and\/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices  and  may also comprise other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system . For example, storage devices  and  may be configured to read and write software, data, or other computer-readable information. Storage devices  and  may also be a part of computing system  or may be a separate device accessed through other interface systems.","Storage devices  and  may also be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, identifying, merging, determining, using, deploying, retrieving, copying, deleting, locating, applying, and testing steps disclosed herein. Storage devices  and  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Many other devices or subsystems may be connected to computing system . Conversely, all of the components and devices illustrated in  need not be present to practice the embodiments described and\/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system  may also employ any number of software, firmware, and\/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable medium. The phrase \u201ccomputer-readable medium\u201d generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable media include, without limitation, transmission-type media, such as carrier waves, and physical media, such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.","The computer-readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer-readable medium may then be stored in system memory  and\/or various portions of storage devices  and . When executed by processor , a computer program loaded into computing system  may cause processor  to perform and\/or be a means for performing the functions of one or more of the exemplary embodiments described and\/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and\/or illustrated herein may be implemented in firmware and\/or hardware. For example, computing system  may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 10","FIG. 9"],"b":["1000","1010","1020","1030","1040","1045","1050","1010","1020","1030","910","1040","1045","1050"]},"As illustrated in , one or more storage devices ()-(N) may be directly attached to server . Similarly, one or more storage devices ()-(N) may be directly attached to server . Storage devices ()-(N) and storage devices ()-(N) generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. In certain embodiments, storage devices ()-(N) and storage devices ()-(N) may represent network-attached storage (NAS) devices configured to communicate with servers  and  using various protocols, such as NFS, SMB, or CIFS.","Servers  and  may also be connected to a storage area network (SAN) fabric . SAN fabric  generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric  may facilitate communication between servers  and  and a plurality of storage devices ()-(N) and\/or an intelligent storage array . SAN fabric  may also facilitate, via network  and servers  and , communication between client systems , , and  and storage devices ()-(N) and\/or intelligent storage array  in such a manner that devices ()-(N) and array  appear as locally attached devices to client systems , , and . As with storage devices ()-(N) and storage devices ()-(N), storage devices ()-(N) and intelligent storage array  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions.","In certain embodiments, and with reference to exemplary computing system  of , a communication interface, such as communication interface  in , may be used to provide connectivity between each client system , , and  and network . Client systems , , and  may be able to access information on server  or  using, for example, a web browser or other client software. Such software may allow client systems , , and  to access data hosted by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), or intelligent storage array . Although  depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and\/or illustrated herein are not limited to the Internet or any particular network-based environment.","In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), intelligent storage array , or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server , run by server , and distributed to client systems , , and  over network . Accordingly, network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, merging, determining, using, deploying, retrieving, copying, deleting, locating, applying, and testing steps disclosed herein. Network architecture  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As detailed above, computing system  and\/or one or more of the components of network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more steps of the exemplary methods described and\/or illustrated herein. For example, a computing system (e.g., computing system  and\/or one or more of the components of network architecture ) may perform a computer-implemented method for merging read-only and read-write virtualization sublayers. The computing system may identify a virtualized application comprising a read-only virtualization sublayer and a read-write virtualization sublayer. The read-only virtualization sublayer may comprise a first base state of the virtualized application. The read-write virtualization sublayer may be configured to store changes to the first base state of the virtualized application. The computing system may merge an instance of the read-only virtualization sublayer and an instance of the read-write virtualization sublayer to create a modified read-only virtualization sublayer that may comprise a second base state of the virtualized application.","In some embodiments, the computing system may determine a difference between the read-only virtualization sublayer and the read-write virtualization sublayer. The difference may represent the read-only virtualization sublayer. Furthermore, merging the instance of the read-only virtualization sublayer and the instance of the read-write virtualization sublayer may include merging the difference with the instance of the read-only virtualization sublayer.","In certain embodiments, the computing system may use the difference to create a patch configured to update the instance of the read-only virtualization sublayer with data from the instance of the read-write virtualization sublayer. The computing system may also deploy the patch to a remote computing device. The remote computing device may comprise the instance of the read-only virtualization sublayer. The patch may represent the read-write virtualization sublayer. Additionally, merging the instance of the read-only virtualization sublayer and the instance of the read-write virtualization sublayer may comprise merging the patch with the instance of the read-only virtualization sublayer.","In other embodiments, merging the instance of the read-only virtualization sublayer and the instance of the read-write virtualization sublayer may include merging user-specific data from the instance of the read-write virtualization sublayer into the instance of the read-only virtualization sublayer. In at least one embodiment, merging user-specific data from the instance of the read-write virtualization sublayer into the instance of the read-only virtualization sublayer may include retrieving file-system data from the instance of the read-write virtualization sublayer, and\/or copying the file-system data to a user-template region of the instance of the read-only virtualization sublayer.","In some embodiments, merging user-specific data from the instance of the read-write virtualization sublayer into the instance of the read-only virtualization sublayer may include retrieving registry data from the instance of the read-write virtualization sublayer, and\/or copying the registry data to a user-template region of the read-only virtualization sublayer. In other embodiments, merging user-specific data from the instance of the read-write virtualization sublayer into the instance of the read-only virtualization sublayer may include merging user-specific data associated with at least two different user profiles into the read-only virtualization sublayer. In certain embodiments, merging the instance of the read-only virtualization sublayer and the instance of the read-write virtualization sublayer may comprise merging user-common data from the instance of the read-write virtualization sublayer into the instance of the read-only virtualization sublayer.","In some embodiments, the computing system may determine a difference between the instance of the read-only virtualization sublayer and the instance of the read-write virtualization sublayer. The computing system may also copy data identified in the difference from the instance of the read-write virtualization sublayer to the instance of the read-only virtualization sublayer. In certain embodiments, determining the difference between the instance of the read-only virtualization sublayer and the instance of the read-write virtualization sublayer may include identifying at least one file in the instance of the read-write virtualization sublayer that is not located in the instance of the read-only virtualization sublayer, identifying at least one file in the instance of the read-write virtualization sublayer that is a modified version of a corresponding file in the instance of the read-only virtualization sublayer, and\/or identifying at least one directory in the instance of the read-write virtualization sublayer that is not located in the instance of the read-only virtualization sublayer.","In some embodiments, the computing system may identify a file identified in a deleted-objects file that identifies objects deleted from the instance of the read-write virtualization sublayer. The computing system may identify a directory identified in the deleted-objects file. The computing system may also delete, from the instance of the read-only virtualization sublayer, the file identified in the deleted-objects file and\/or the directory identified in the deleted-objects file.","In certain embodiments, the computing system may copy registry data from a registry in the instance of the read-write virtualization sublayer to a registry in the instance of the read-only virtualization sublayer. In other embodiments, the computing system may locate registry data identified in a deleted-objects file. The deleted-objects file may identify objects deleted from the instance of the read-write virtualization sublayer. The computing system may delete, from the instance of the read-only virtualization sublayer, the registry data identified in the deleted-objects file.","In some embodiments, the computing system may apply an update to the read-only virtualization sublayer before merging the instance of the read-only virtualization sublayer and the instance of the read-write virtualization sublayer. In other embodiments, the computing system may test the update after the update is applied and before merging to determine whether to merge the instance of the read-only virtualization sublayer and the instance of the read-write virtualization sublayer.","In at least one embodiment, the computing system may include a layer-merging module. The layer-merging module may identify a virtualized application comprising a read-only virtualization sublayer and a read-write virtualization sublayer. The read-only virtualization sublayer may comprise a first base state of the virtualized application. The read-write virtualization sublayer may be configured to store changes to the first base state of the virtualized application. The layer-merging module may merge an instance of the read-only virtualization sublayer and an instance of the read-write virtualization sublayer to create a modified read-only virtualization sublayer that may comprise a second base state of the virtualized application. The computing system may also include a processor configured to execute the layer-merging module.","In some embodiments, the computing system may include a deployment module. The deployment module may determine a difference between the read-only virtualization sublayer and the read-write virtualization sublayer. The deployment module may also use the difference to create a patch configured to update the instance of the read-only virtualization sublayer with data from the instance of the read-write virtualization sublayer. The deployment module may further deploy the patch to a remote computing device. The remote computing device may comprise the instance of the read-only virtualization sublayer and the layer-merging module.","In some embodiments, the layer-merging module may identify at least one file in the instance of the read-write virtualization sublayer that is not located in the instance of the read-only virtualization sublayer. The layer-merging module may identify at least one file in the instance of the read-write virtualization sublayer that is a modified version of a corresponding file in the instance of the read-only virtualization sublayer. The layer-merging module may also identify at least one file deleted from the instance of the read-write virtualization sublayer. The layer-merging module may further identify at least one registry entry deleted from the instance of the read-write virtualization sublayer.","The layer-merging module may copy at least one file from the instance of the read-write virtualization sublayer to the instance of the read-only virtualization sublayer. The layer-merging module may also copy at least one registry entry from the instance of the read-write virtualization sublayer to the instance of the read-only virtualization sublayer. The layer-merging module may delete at least one file from the instance of the read-only virtualization sublayer. The layer-merging module may also delete at least one registry entry from the instance of the read-only virtualization sublayer. In at least one embodiment, the layer-merging module may move data from the instance of the read-write virtualization sublayer to the instance of the read-only virtualization sublayer.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments described herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. It is desired that the embodiments described herein be considered in all respects illustrative and not restrictive and that reference be made to the appended claims and their equivalents for determining the scope of the instant disclosure.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of.\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
