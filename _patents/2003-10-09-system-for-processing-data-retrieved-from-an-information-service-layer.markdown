---
title: System for processing data retrieved from an information service layer
abstract: A system for processing data retrieved from an information service layer is provided. The system includes a requestor component to provide a request for data to the information service layer. A receiver component is operable to communicate with a client service of the information service layer to receive a response string from the information service layer. The response string includes data based on the request. An analysis component analyzes at least a portion of the response string. A writer component is operable to format the at least portion of the response string based upon a desired format. A method for processing data retrieved from the information service layer is also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865574&OS=07865574&RS=07865574
owner: Sprint Communications Company L.P.
number: 07865574
owner_city: Overland Park
owner_country: US
publication_date: 20031009
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is related to U.S. patent application Ser. No. 10\/682,505, filed Oct. 9, 2003, entitled \u201cInformation Service Layer\u201d, by Joseph G. Laura, and U.S. patent application Ser. No. 10\/681,930, filed Oct. 9, 2003, now U.S. Pat. No. 7,069,184, issued Jun. 27, 2006, entitled \u201cCentralized Monitoring and Early Warning Operations Console\u201d, by Karl W. Barger, et al. filed concurrently and incorporated herein by reference for all purposes.","Not applicable.","Not applicable.","The field of the present invention includes computer software. More particularly, embodiments of the present invention are concerned with enterprise data manipulation and formatting the results.","In a large corporate enterprise, management and operations information may be spread across multiple unrelated computer systems. It may be information from different computer programs (hereinafter referred to as applications)\u2014for example, an operations control application supplying production or service delivery information and an accounting application supplying cost information\u2014is needed to assess the performance of the enterprise at a high level. The information may be useful in calculating costs as a function of the level of performance rather than just the cost of operating. These and other calculations may be valuable to managers and executives making business decisions for the enterprise. But if the different applications are incompatible one with another this information may not be available or may not be available in a timely fashion or may not be available in a cost effective manner.","The enterprise may have two or more different mainframe computer systems, several UNIX computer systems, and many desktop computer systems which support different enterprise business applications. The different mainframe computer systems may be located at different physical locations and may be under the control of different units of the company. Each computer system may itself comprise a complex of applications, data, and databases. Some of the applications may be developed by the enterprise, while other applications may be developed by third parties. Some applications and systems may be very old.","The interface which may be used to extract information or data from one application may not work for any other application. The data format produced by one application may not be compatible with the data format produced by any other application. Attempting to communicate among different computer systems poses additional problems. The different operating systems on different computer systems may not support common communication mechanisms. For example, a UNIX computer system may support socket communications between independent machines while the mainframe computer system may not support socket communications.","To verify the successful progress of a large application, enterprise personnel may access data in files with a text editor and cut-and-paste this information directly into a commercial spreadsheet application in order to perform calculations on the progress of the application. This is a laborious and error prone process. If the process only fails 1% of the time\u2014perhaps once every three months\u2014this manual approach may be considered inefficient.","When an enterprise depends upon its deployed resources to support its production it may be desirable to be able to predict when growth will exhaust the deployed resources so additional resources can be deployed before growth is stalled.","The present embodiment provides a system for processing data retrieved from an information service layer. The system comprises a requestor component to provide a request for data to the information service layer. The system includes a receiver component operable to communicate with a client service of the information service layer to receive a response string from the information service layer, the response string including data based on the request. An analysis component to analyze at least a portion of the response string; and a writer component operable to format the at least portion of the response string based upon a desired format.","In one embodiment a system for managing operations of applications is provided comprising a requestor component operable to provide the request for data. A service layer including a control system having a registry and operable to receive the request for data, the request including a source identifier and a data identifier. A client service is operable to register with the control system and receive the request for data, the client service is further operable to communicate a requested data related to the data identifier to the requestor. A retrieval service is operable to utilize at least a portion of the source identifier to retrieve the requested data related to the data identifier and communicate the requested data to the client service. A receiver component is operable to receive a response string from the information service layer, the response string including the data based upon the request. An analysis component operable to analyze at least a portion of the response string. A writer component operable to format the at least portion of the response string based upon a desired format; and an operations console having a dashboard for selecting applications having data to monitor, the operations console operable to establish a threshold related to the data of the application and compare the threshold to the at least portion of the response string.","In one embodiment a system for data retrieval and processing is provided that comprises a requestor component operable to provide a request for data. An information service layer having a control system having a registry and operable to communicate with a requestor having a request for data, the request for data including a source identifier and a data identifier. A client service is operable to register with the control system and receive the request for data, the client service further operable to communicate a requested data related to the data identifier to the requestor. A retrieval service operable to use at least a portion of the source identifier to retrieve the requested data related to the data identifier and communicate the requested data to the client service; a receiver component operable to receive a response string from the information service layer, the response string including the data based on the request. An analysis component is operable to analyze at least a portion of the response string and a writer component formats the at least portion of the response string based upon a desired format.","These and other features and advantages will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.","It should be understood at the outset that although an exemplary implementation of one embodiment of the present invention is illustrated below, the present system may be implemented using any number of techniques, whether currently known or in existence. The present disclosure should in no way be limited to the exemplary implementations, drawings, and techniques illustrated below, including the exemplary design and implementation illustrated and described herein, but may be modified within the scope of the appended claims along with their full scope of equivalents.","Turning now to  an information service layer (ISL)  is depicted. The ISL  enables searching for and obtaining data as well as invoking commands across disparate computer systems or computer platforms in a manner which makes the differences of these systems and platforms transparent to the user of the ISL . Note that unlabeled drawing lines between labeled elements in  and subsequent figures indicate that the labeled elements may be in communication. The communication may be unidirectional or bidirectional. The communication may be supported by executing function calls, by employing inter-process communication mechanisms, by electrical conductors, or other means.","A mediator  receives requests from a requestor  for information or data stored in a computer system or for the computer system to execute commands. The mediator  may also be referred to as a control system. The requestor  may also be referred to as a request builder. The requestor  may execute on, for example, a desktop computer, a UNIX computer system, or a mainframe computer system different from the computer system on which the ISL  executes. The requestor  may execute, in some embodiments, on the computer system on which the ISL  executes. The mediator  delegates responsibility to handle the request from the requestor  to a client service .","The client service  is an application which reads through the request sent by the requestor  and acts to satisfy the request.","In some embodiments the initiating communication between the requestor  and the mediator  does not contain a request but merely a handshake to establish communications. The mediator  may hand off completion of the communications handshake to the client service . The client service  establishes communications with the requestor  and receives the request directly from the requestor  without being routed through the mediator .","The client service  communicates with a retrieval service  which is an application that interacts with a database  to access and collect the requested data or to issue commands to the database . The retrieval service  returns the requested data to the client service . The client service  returns the requested data to the mediator . The mediator  returns the requested data to the requestor .","While the embodiment depicted in  shows the retrieval service  retrieving data from a database , in other embodiments the retrieval service  may retrieve data from an active computer application, from a file system, or from some other source. While only one requestor  is depicted, the mediator  is intended to accept requests from multiple requestors . In some embodiments the mediator  may hand-off communication information to the client service  enabling the client service  to communicate directly to the requestor  and to return the requested information or data directly to the requestor  without the intervention of the mediator .","The ISL  and its components may execute on a general purpose computer system. General purpose computer systems are discussed in more detail hereinafter. The various components of the ISL  may execute on the same computer or they may execute on different and separate computers.","Turning now to  another embodiment of the ISL  is depicted. In this embodiment the mediator  includes a listening port  to which the requestor  sends its request. The listening port  is operative to receive an unscheduled communication from a requestor .","Five instantiations of the client service \u2014client service # , client service # , client service # , client service # , and client service # \u2014are illustrated as running. Each of the client services -is an instantiation of the same application which reads through the request sent by the requestor  and acts to satisfy the request. In some embodiments more than five or less than five instantiations of the client service  may be running.","The retrieval service  depicted in , in the embodiment depicted in  has been further particularized to support specific applications or computer systems. All retrieval services , however, are endowed with internal logic to accept and properly respond to requests for data and command invocations embedded in the request sent by the requestor .","A source archive (SAR) service may provide access to printout files . Printout files  may be generated by applications running on mainframe computer systems and capture information about the processing conducted by the applications. This information may be stored in text files in a format which is not readily accessible to human readers. The files may be continuously appended to as applications execute. The files may be closed when they achieve a maximum file size and a new file opened for writing. The files may be closed when a specified length of time passes and a new file opened for writing. Multiple instantiations\u2014SAR service # -, SAR service # -, and SAR service # -\u2014of the same SAR service application are illustrated as running. In some embodiments more or fewer instantiations of the SAR service may be running.","A problem management system (PMS) service may provide access to a PMS . Multiple instantiations\u2014PMS service -, PMS service -, and PMS service -\u2014of the same PMS service application are illustrated as running. In some embodiments more or fewer instantiations of the PMS service may be running. A PMS  may hold trouble tickets or other artifacts recording the details of a reported problem. The PMS  may support updating during the life of the trouble tickets as the reported problem is worked on over time and may retain trouble tickets for resolved problems for historical purposes.","A scheduler service may provide access to a scheduler . Multiple instantiations\u2014scheduler service # -, scheduler service # -, and scheduler service # -\u2014of the same scheduler service application are illustrated as running. In some embodiments more or fewer instantiations of the scheduler service may be running. In some embodiments the scheduler may be a CA-7 scheduler from Computer Associates. In one embodiment, access to this scheduling system might provide detailed information related to the sequence of tasks or jobs that have already or are planned to be executed. This information could be used in conjunction with job execution information form the source archive and problem management queries to provide current state, forecast completion, or assist in either resolving an existing failure or predicting a pending one.","ISL  is intended to accept concurrent requests from multiple requestors . The purpose of ISL  executing multiple instantiations of client service  and multiple instantiations of retrieval services  is to reduce the chance that when the requestor  sends a request that the requestor  will have to wait or be denied service and have to resubmit a request at a later time because the designated retrieval service  is busy. If the mediator  finds there is no idle client service  to handle a request, the mediator  brings an additional instantiation of client service  into operation. In some embodiments if there are no idle retrieval services , , or available to handle a request, the mediator  may bring an additional instantiation of the appropriate retrieval service into operation.","For other systems or applications additional retrieval services  may be needed to provide access to those systems or applications. Access to systems or applications may include both retrieval of data and issuing commands. An additional retrieval service  may provide access to a code control system (a code control system is a computer program which supports managing code or software changes).","A register  contains information about each instantiation of the client service  and each instantiation of the retrieval services -. The information stored in the register  is employed to pass work to and control the interworking of the client services  or retrieval services -. This information may include an indication whether the represented service is busy or idle and an indication of what action to take on completion of a task (referred to below as action-on-completion information). Each of the instantiations of client services  and retrieval services -create entries in the register  during initialization. In one embodiment the register  entries may include a process id (PID) identifying the service associated with the entry and a signal number on which the operating system will reawaken the idle or sleeping service.","An administrative services component  supports starting and stopping the various services. The administrative services component  may support bringing new retrieval services -into operation which had not previously been part of the ISL .","Turning now to  an exemplary request-response cycle of the ISL  is depicted. Note, however, that the present disclosure should not be limited by this exemplary request-response cycle. The requestor  sends a communicationRequest message  to the mediator . In some embodiments the communication with the requestor  may be via a socket communication mechanism. The requestor  may address its initiating communicationRequest message  to the known computer system and the known protocol port of the listening port . In some embodiments the operating system may not support the socket communication mechanism, and in this case another equivalent communication mechanism may be employed.","To identify an idle client service  instantiation, the mediator  sends a clientServiceLookup message  to the register . The register  searches its contents, finds an idle client service  instantiation, and sends a clientServiceFound message  to the mediator  which identifies the idle client service  instantiation. The clientServiceFound message  may contain a process identifier (PID) of the idle client service  instantiation and the signal by which the mediator  may cause the operating system to put the idle client service  instantiation into operation. In action  the mediator  activates the appropriate signal to cause the client service  instantiation to awake. In some embodiments the register  may not be intelligent and the mediator  may read through each entry of the register  using successive read requests until the mediator  reads an entry which is associated with an idle client service  instantiation. In some embodiments the operating system may not support signals, and in this case another equivalent mechanism to bring an idle client service  instantiation into operation may be employed.","The client service  instantiation awakes at label . The client service  instantiation sends a clientServiceBusy message  to the register  causing the register  entry associated with the client service  instantiation to indicate busy status. The mediator  sends a socketHandoff message  identifying the pertinent communications link information for requestor  to the client service  instantiation. The mediator  frees the listening port  to listen for other new requests. The client service  instantiation sends a socketReady message  to the requestor  establishing a socket communication link with the requestor .","The requestor  sends a requestDocument message  over the socket link to the client service  instantiation. The requestDocument message  contains a document describing the information or data request. In some embodiments the document may be in extensible markup language (XML) format. XML is preferred because it provides for the integration and collation of any data and information regardless of storage environment or document type, because it enables data interchange and is platform and application independent, because it supports customization and personalization of information, and because it is extensible. While XML format is preferred for its extensibility and its ability to describe data through tags, the relationship between data elements through the nesting of this tag, and requested criteria and functions through the content encapsulated by tags, in other embodiments an alternative document format may be employed. The term \u2018document\u2019 is conventional when referring to XML, HTML, or other tag-based markup languages and refers to a sequence of tags and enclosed data. In other embodiments some format other than a document format may be employed to send the request. In some embodiments the request is passed to the mediator , and the mediator.  forwards the request to the client service  instantiation.","The requested XML document embeds a designation of both the computer system on which to locate the data and the retrieval service  which must be employed to retrieve the data specified in the request XML document. If the designated computer system is the local computer system, in action  the client service  writes the request XML document into a file and notes the designated retrieval service .","The client service  instantiation sends a sarServiceLookup message  to the register  (this example request-response sequence assumes that a SAR data access is needed, and in the case that the request is for a different data access, an alternative service lookup would occur). The register  searches its contents, finds an idle SAR service instantiation, and sends a sarServiceFound message  to the client service  instantiation which identifies the idle SAR service instantiation. The sarServiceFound message  may contain the signal by which the client service  instantiation may cause the operating system to put the idle SAR service instantiation into operation.","The client service  instantiation sends serviceUpdate message  to the register  which causes the entry associated with the idle SAR service instantiation to be updated with the name of the request document file written by the client service  instantiation and to be updated with the signal associated with the client service  instantiation wake-up. In action  the client service  instantiation activates the appropriate signal to cause the SAR service instantiation to awake. The client service  instantiation then puts itself to sleep at label .","In some embodiments the client service  instantiation may save information about the progress the client service  instantiation has made in handling the requestor  request, write to the register  entry associated with the client service  instantiation an idle indication, and then put itself to sleep. In such an embodiment, the SAR service instantiation would signal to any idle client service  instantiation when returning data. This client service  instantiation\u2014perhaps a different client service instantiation than the one which sent the signal in action  which woke up the SAR service instantiation\u2014then accesses the saved information which indicates the progress made in handling the requestor  request. In some embodiments the operating system may not support signals: in this case another equivalent mechanism to bring an idle SAR service instantiation into operation may be employed.","The SAR service instantiation is awakened by the operating system at label . The SAR service instantiation sends a sarServiceBusy message  to the register  causing the register  entry associated with the SAR service instantiation to indicate busy status. The SAR service instantiation sends a getSAREntry message  to the register . The register  returns a putSAREntry message  to the SAR service instantiation which contains information including the name of the request document file and the action-on-completion for the SAR service instantiation.","In action  the SAR service instantiation reads the request document file or files. In action  the SAR service instantiation follows the instructions embedded in the request document file to access data out of the printout files . In some embodiments the client service  instantiation may send the request document directly to the SAR service instantiation as a message. Other communications means and pathways may be employed for access to the retrieval services .","In action  the SAR service instantiation follows the instructions embedded in the request document file to write the accessed data into a response document file. The name of the response document file is deterministically related to the name of the request document file. For example, if the request document file name is *Request.xml the response document file name may be *Response.xml. In some embodiments the response document may be in XML format. In other embodiments an alternative document format may be employed. In some embodiments actions  and  may be combined and not separate steps. In some embodiments actions  and  may be combined and not separate steps. In some embodiments actions , , and  may be combined and not separate steps. In some embodiments the response document may be returned to the client service  instantiation in a message from the SAR service instantiation to the client service  instantiation.","In action  the SAR service instantiation activates the appropriate signal to cause the client service  instantiation to awake. The SAR service instantiation sends a sarServiceIdle message  to the register  causing the register  entry associated with the SAR service instantiation to indicate idle status. The SAR service instantiation then puts itself to sleep at label .","The client service  instantiation is awakened by the operating system at label . In action  the client service  instantiation reads the response document file. The client service  instantiation sends a responseDocument message  over the socket link to the requestor  containing the response document describing the requested information or data and closes the socket communication link. In some embodiments the document may be in XML format, and in such embodiments the client service  instantiations and retrieval service -instantiations are XML operable. In other embodiments an alternative document format may be employed, and in such embodiments the client service  instantiations and retrieval service -instantiations are operable to work with this alternative document format. In some embodiments the client service  instantiation may delete the request document file and the response document file after closing the socket communication link to the requestor .","The client service  instantiation sends a clientServiceIdle message  to the register  causing the register  entry associated with the client service  instantiation to indicate idle status. The client service  instantiation then puts itself to sleep at label , completing the request-response cycle. In some requestor  requestDocument messages  multiple retrieval services  may be designated. In this case the client service  instantiation may conduct multiple retrieval service  sessions similar to the sequence  through  with a series of retrieval services .","If the computer system designated in the request XML document sent by the requestor  to the client service  is not the local computer system, the client service  instantiation in the present embodiment acts as a proxy requestor and forwards the request on to the ISL  on the remote designated computer system.","Referring now to  a local ISL  is shown forwarding a request from a requestor to a remote ISL . In this example the requestor  is illustrated as running on the same computer system  as the local ISL , though the requestor  may be running on some other computer system. The information which the requestor  requests is located on a remote computer system  which supports its own ISL .","The client service instantiation on the local computer system  may communicate with the local mediator  to obtain communication information to enable the client service  to communicate with the ISL  on the remote designated computer system. The local mediator  may look this information up in a configuration file. In some embodiments the information in the configuration file may map the name of a designated computer system to the internet protocol (IP) address of the remote computer system and the protocol port number of the listening port for the ISL  on that remote computer system. In some embodiments the protocol port number of the listening port may be hard coded and common among all deployed ISLs , and in this case there may be no need to store the protocol port number of the listening port in the configuration file. If communication mechanisms other than sockets are employed, other communications information may be stored in the configuration file such as universal reference locator (URL) or other.","The client service instantiation may be said to act as a proxy requestor. That is to say, from the viewpoint of the ISL  on the remote computer system  the client service instantiation on the local computer system  appears to be a requestor . The client service instantiation on the local computer system  follows the request protocol as a normal requestor  would follow the request protocol. In some embodiments the local client service instantiation may register with the remote register  and interact directly with the appropriate remote retrieval service -on the remote computer system .","While not depicted in , it is possible for the ISL  operating on the remote computer system  to itself act as a proxy requestor and forward the original request on to yet a further removed ISL  not shown. There is no functional limit to the depth of such a series of proxy requests.","The example description of a request-response cycle above is only exemplary and is not intended to constrain or limit the disclosure or claims in any way. The names of the messages are arbitrary and in some embodiments may be differently named and contain different information. The example described a request for data, but it may have been a request to command some action or series of actions to be taken by an application.","Any instructions or logic embedded in an XML document are viewed as data from the perspective of an XML parser. The meaning of the data embedded in an XML document is constructed by the applications which employ the XML document. An example XML document embedding an information or data request for use with the ISL  is presented below. This example will be followed by a line-by-line description of the meaning constructed upon the XML data contained within the example XML document.\n\n","An example output XML document embedding a response to the above information or data request is presented below.\n\n","These XML documents and document fragments above are only intended as an example. Those skilled in the art may readily conceive of how this example may be extended to provide the ability to request data, to request commands be executed, and to return requested data employing XML documents. While XML may be preferred, document formats other than XML may be employed to request data, to command actions, and to return requested data. In some embodiments some format other than document format may be employed for communicating requests and commands as well as communicating responses. All of these are contemplated by this embodiment of the ISL .","The ISL  described above is readily extensible to deploy support for new retrieval services . All that is needed is that the software to access the data and to request command execution in the new system, application, or database be written and designed to inter-work with the client service  as described above. The administration services component  may be employed to bring the new retrieval service  into operation on the ISL .","The ISL  described above is intended to provide service to a broad range of clients who are only constrained by needing to employ the appropriate request communication sequence and to employ the appropriate request document format. Turning now to , an information command layer (ICL)  is depicted. The ICL  may be a client, such as the requestor , of the ISL . A requestor  component is closely coupled to a receiver  component. In some embodiments these two components may not be separable but may be one functional block. The requestor  sends requests to an ISL  to collect data. The requestor  sends a requestDocument message  to the ISL  describing the data requested and the format in which to represent the response. This information is embedded in a request document\u2014also referred to as an ISL script\u2014which in some embodiments may be in XML format as previously discussed. In some embodiments a different response document format may be employed.","The receiver  receives the response returned by the ISL . The receiver receives a responseDocument message  from the ISL  containing a response document which contains the data in the format requested. The response document in some embodiments may be in XML format as previously discussed. In some embodiments a different request document format may be employed.","In some embodiments the communication between the ICL  and the ISL  may be via a socket communication mechanism. In some embodiments a different communication mechanism may be employed.","The receiver  transfers the data in the response to an analyzer  which manipulates the data. The analyzer  transfers the processed data to a writer  which formats the processed data. In some embodiments the analyzer  and writer  may not be separable but may be a single functional block. The resultant manipulated and formatted data may be written to a file or may be streamed to a client of the ICL . An application programming interface (API)  may be provided in some embodiments to allow external agents to invoke the ICL  and to receive the product of the ISL .","The analyzer  and writer  both operate upon the response data according to instructions embedded in a command document file which may be referred to as an ICL script. This ICL script may be formatted in XML format or in some other document format. The ICL script may be made available to the analyzer  and writer  by sending the ICL script as an input parameter when invoking the ICL  via the API . Alternatively, the ICL script may be made available to the analyzer  and writer  by identifying the ICL script in the API invocation of the ICL , with the ICL script file being located in the local computer system file system. A diverse set of ICL scripts may be loaded into the local computer file system as part of installing the ICL . The ISL  script may be stored in the local computer file system, may be provided as an input parameter to the API , or may be extracted from the ICL script.","The ICL  may manipulate, sum, subtract, and combine data received in a response document from the ISL . For example, the ICL  may request some billing processing data from the ISL  with a request document, receive the billing processing data from the ISL  in a response document, analyze the response document to calculate the processing rate of different billing applications (wireless services billing, consumer long distance billing, commercial long distance billing, etc.), and write the billing processing rate for each of these services into an output file or report. The ICL  may also receive its input data document from some other source, other than ISL , that adheres to the ICL  input data document format.","The ICL  and its components may execute on a mainframe, work station, or general purpose computer system. General purpose computer systems are discussed in more detail hereinafter. The various components of the ICL  may execute on the same computer or they may execute on different and separate computers.","Turning now to  a system  for monitoring applications, databases, or computer systems is depicted. A monitor  is operative to observe or monitor an application , for example to obtain application  related information and statistics. A dashboard  is operative to receive and display summary information from the monitor  on an instrument panel or on a computer screen, perhaps in association with one or more audio speakers.","The summary information display may be of the nature to indicate a value in a range\u2014such as a numeric display, a bar graph or histogram indication, a meter-type or steam-gauge type instrument, an audio volume based indication (louder means more or less of the indicated value), an audio tone based indication (higher pitch means more or less of the indicated value), or other such indication\u2014or may be of the nature to indicate that a state exists or does not exist\u2014such as a condition light or \u201cidiot-light\u201d, an alarm light, a flashing light, an audio tone, an audio on-off tone, or other such indication. The monitor  communicates with a trigger  which is operative to send an signal, event, or message to the dashboard when an operational parameter or derived parameter of the application  exceeds a defined operational limit. The signal sent by the trigger  may cause the dashboard  to generate a visual alert cue or an audio alert cue.","The system  for monitoring applications, databases, or computer systems and its components may execute on a mainframe, work station, or general purpose computer system. General purpose computer systems are discussed in more detail hereinafter. The various components of the system  may execute on the same computer or they may execute on different and separate computers.","Turning now to  a capacity management, centralized monitoring, and early warning operations console (CAMEO)  is depicted. The CAMEO  is a more fully featured embodiment of the system . The monitor  is operative to observe or monitor the application  through invoking the ICL  to produce reports on the application . The ICL  generates the reports utilizing the functionality of the ISL . It is within the scope of the present disclosure that multiple applications , not shown, may be observed or monitored concurrently by CAMEO .","The monitor  is in communication with a reporter  which allows the parameters observed by the monitor  to be accessible to the trigger , a capacity planning , a metrics verification , and an error detection . The dashboard  is operable to control and communicate with the monitor , the reporter , the trigger , the capacity planning , the metrics verification , and the error detection , as well as to receive information, reports, or signals from these components.","The error detection  is in communication with an error reports  and an error recovery . A user interface (UI)  is operative to display information and to provide user control of the CAMEO . In some embodiments the UI  may be web enabled.","The trigger  may be configured by the UI  to activate or trip or break when the parameter of interest exceeds or drops below a threshold value. Some triggers  may be hard coded with static threshold values. When the trigger  is activated some action is taken which may include sending an alert signal to the dashboard  to cause an indication to be presented via the UI  or to interact with an application  to take corrective action. An example of a trigger  may be customer bill generation falling 10 minutes behind schedule. The trigger  may serve the purpose, in some embodiments, of an early warning system so action can be taken to prevent an operational failure before the operational failure or degradation of performance occurs.","The trigger  may be configured by the UI  to latch upon activation. A trigger  which supports latching function may continue to send an active signal even after the parameter monitored by the trigger  returns to a normal value. The latching function may be disabled either by UI  acknowledgement or by passage of a default or a configurable length of time. A trigger  which supports latching function may continue to send an active signal after acknowledgement or the passage of time when the monitored parameter continues to be outside normal bounds. A trigger  which supports latching function which has activated and thereafter been acknowledged may de-activate when the monitored parameter returns to normal bounds. Some triggers  may be hard coded to support latching function.","It is contemplated that multiple triggers \u2014perhaps many triggers \u2014may be deployed concurrently in the CAMEO  system. A trigger  may depend upon periodic information updates on the parameter it is concerned with. Different triggers  may have different periods for information update. For example, a trigger  which activates when call detail record (CDR) errors exceed 10% of generated CDRs may be scheduled to update its data and analyze the CDR error rate on an hourly basis. As another example, a trigger  which activates when accounts receivable delinquency passes a 2% threshold may be scheduled to update its data and analyze accounts receivable delinquency on a daily basis.","Each different trigger  may be associated with an individual ICL  script and ISL  script which extract the information monitored, via the monitor , by the trigger . The monitor  may be responsible for scheduling the execution of the various trigger  scripts at the appropriate periodic intervals, or this scheduling may be embedded in the trigger . The reporter  may be responsible for distributing information received by the monitor  to the appropriate triggers . In some embodiments the trigger  may directly invoke the ICL  script which returns the information the trigger  requires, by-passing the monitor  and reporter  entirely.","In some embodiments, activation of the trigger  may lead to the trigger  conducting a request-response session with the ISL  to cause the application  to take corrective action including resetting its data and or restarting.","The capacity planning  of the CAMEO  is controlled by the UI  which supports these several capacity planning functions. Capacity planning  may be supported by dedicated ICL  scripts and ISL  scripts which are designed to extract the data or information needed to perform various capacity planning analyses and projections.","Capacity planning may be employed to determine the capacity of present resources, current resource utilization, and calculating or otherwise determining future resource capacity requirements to avoid exhausting the capacity of operational resources. Such functionality may permit the timely selection and deployment of new resources, and may support accurate capital budget planning, or suggest redeployment of existing resources to avoid capital expenditures.","Capacity planning  may permit analysis of hypothetical business scenarios. To support analysis of such scenarios, the CAMEO  may support feeding a XML data file which captures the data representing the hypothetical business scenario to the ICL . In some embodiments the UI  may support creation of such simulated XML data files to be used as input to the ICL . In other embodiments such simulated XML data files may be created with an editor and specified as input to the capacity planning tool via the UI . Such scenarios may be employed, for example, to determine the additional capacity required to support a new customer with 10,000 subscribers or to analyze the effect of redeploying bill generation computation resources according to a new plan. In some embodiments the ICL  scripts which support capacity planning  may be invoked directly by the capacity planning  component.","Metrics verification  is intended to check operational status. For example, a large telecommunications company may have 50 separate billing cycles which it supports every month. Completion of a morning bill generation cycle may be required before an afternoon billing cycle can begin. If the morning bill generation cycle is delayed, this delay has implications for the afternoon billing cycle and perhaps billing cycles of subsequent days. It may be valuable to analyze and evaluate the timeliness of each billing cycle. Metrics verification  is directed to support such analysis. The information generated by metrics verification  may be either a numeric value\u2014minutes behind schedule, piece-parts behind quota for time-of-day, percent of target, or other numeric value\u2014or may be a pass\/fail value, for example. The metrics verification  may support a high level view of operations as well as detailed drill-down views of sub-components of the operational flow.","The error detection  component is planned to monitor specific operational parameters, to generate error reports  when errors are discovered, to send error information to the dashboard , and in some cases to support error recovery  activities. Dedicated ICL  and ISL  scripts may be employed to provide operational information. Error detection  may also involve monitoring customer accounts and validating account policies for self-consistency when those accounts have been modified.","Error recovery  may take various forms. For example, when one of a series of batch jobs on a mainframe computer fails, error recovery  may interrupt a series of batch jobs on a mainframe computer which must run successfully end-to-end, restarting the first failed batch job, and requeueing or rescheduling the subsequent batch jobs. Error recovery  may cause ISL  scripts to execute to command the appropriate applications. The error recovery  may access the ISL  through the intermediary of the ICL , or the error recovery  may access the ISL  directly (if the error recovery  is designed to act in the capacity of a requestor ).","In another example, the error recovery  may access a list of on-call personnel and invoke an existing enterprise application to send a paging signal to the appropriate on-call employee. In another example, in the case that an account has been modified and is in an inconsistent state, the error recovery  may invoke an existing enterprise emailing application to send a notice to the last person to edit the account and may invoke an existing enterprise PMS to issue a trouble report ticket.","The information shared by error detection  with the dashboard  may support both a summary level of detail and a detail drill-down level of detail to provide error recovery assistance when error recovery may not be automated. The UI  may be employed to access summary error details and to drill-down to lower levels of detail. These lower levels of detail may be stored in the CAMEO  or they may be freshly formulated from invoking ICL  scripts. For example, if a billing application experiences a failure the UI  may show that the billing application is in a failed condition. By clicking on the billing application, the UI  may display the information about this billing application being monitored. If, for example, the billing cycle balanced parameter failed, clicking on the billing cycle balanced parameter would prompt the UI  to display the script used to monitor billing cycle balancing, to illustrate where the billing cycle was out of balance, and to display the totals associated with this part of the billing cycle.","Corrective actions taken by error recovery  may hook into preexisting capabilities of the enterprise such as automated email generation or automated trouble report generation. The error detection  capability frees personnel from constant monitoring of error-free cycles\u2014which may constitute the majority of operational cycles\u2014since they need only invest time when an actual error has occurred.","The CAMEO  is extensible and may support other operations management, reporting, or command functions. The CAMEO  may execute on a general purpose computer system. General purpose computer systems are discussed in more detail hereinafter. The various components of the CAMEO  may execute on the same computer or they may execute on different and separate computers. The various capabilities of the CAMEO  are non-intrusive, and they do not require modification of existing enterprise applications and do not place a load on those enterprise applications.",{"@attributes":{"id":"p-0095","num":"0175"},"figref":"FIG. 8","b":["170","130","10","184","200","170","130","10","184","200","156","156","170"]},"To facilitate such monitoring, the ISL  may monitor the status of applications that process billing. The bill processing statistics may reside, for example, in the database  and include records processed, or other real-time information useful to the manager. The cross-platform compatibility and functionality of the ISL  described above enables the ISL  retrieve such statistics from the database  without the need to create custom application to retrieve, process and form the desired data. The ICL  operably requests the desired data request to the ISL , which retrieves and returns the data to the ICL , substantially as described above. The ICL  formats and returns the data based on the format desired by the CAMEO . In this manner, the CAMEO  displays, via the dashboard , the billing statistics for monitoring by the manager on the UI .","The dashboard  is operable to display the statistics, real-time, as the information is retrieved, formatted and returned from the ISL  and ICL , as desired. The present system enables the manager to simply and easily select other systems of interest and retrieve relevant data quickly and efficiently. The ISL  is operable to retrieve information on otherwise incompatible system, enabling a new realm of operation management and control. Based on the present disclosure, a myriad of integrated or disparate business systems and processes may be easily selected and monitored by the CAMEO , employing the ISL  and ICL .","The software applications described above\u2014the ISL , the ICL , the system  for monitoring applications, databases, or computer systems, and CAMEO \u2014may be implemented on any general-purpose computer with sufficient processing power, memory resources, and network throughput capability to handle the workload placed upon it.  illustrates a typical, general-purpose computer system suitable for implementing one or more embodiments disclosed herein. The computer system  includes a processor  (which may be referred to as a central processor unit or CPU) that is in communication with memory devices including secondary storage , read only memory (ROM) , random access memory (RAM) , input\/output (I\/O) devices , and network connectivity devices . The processor may be implemented as one or more CPU chips.","The secondary storage  is typically comprised of one or more disk drives or tape drives and is used for non-volatile storage of data and as an over-flow data storage device if RAM  is not large enough to hold all working data. Secondary storage  may be used to store programs which are loaded into RAM  when such programs are selected for execution. The ROM  is used to store instructions and perhaps data which are read during program execution. ROM  is a non-volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage. The RAM  is used to store volatile data and perhaps to store instructions. Access to both ROM  and RAM  is typically faster than to secondary storage . The secondary storage , the RAM , and the ROM  are examples of \u201ccomputer readable medium\u201d.","I\/O devices  may include printers, video monitors, keyboards, mice, track balls, voice recognizers, card readers, paper tape readers, or other well-known input devices. The network connectivity devices  may take the form of modems, modem banks, ethernet cards, token ring cards, fiber distributed data interface (FDDI) cards, and other well-known network devices. These network connectivity devices  may enable the processor  to communicate with an Internet or one or more intranets. With such a network connection, it is contemplated that the processor  might receive information from the network, or might output information to the network in the course of performing the above-described method steps. Such information, which is often represented as a sequence of instructions to be executed using processor , may be received from and outputted to the network, for example, in the form of a computer data signal embodied in a carrier wave.","The processor  executes instructions, codes, computer programs, scripts which it accesses from hard disk, floppy disk, optical disk (these various disk based systems may all be considered secondary storage ), ROM , RAM , or the network connectivity devices .","While several embodiments have been provided in the present disclosure, it should be understood that the disclosed systems and methods may be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive, and the intention is not to be limited to the details given herein, but may be modified within the scope of the appended claims along with their full scope of equivalents. For example, the various elements or components may be combined or integrated in another system or certain features may be omitted, or not implemented.","Also, techniques, systems, subsystems and methods described and illustrated in the various embodiments as discreet or separate may be combined or integrated with other systems, modules, techniques, or methods without departing from the scope of the present disclosure. Other items shown as directly coupled or communicating with each other may be coupled through some interface or device, such that the items may no longer be considered directly coupled to each but may still be indirectly coupled and in communication with one another. Other examples of changes, substitutions, and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the presentation and the advantages thereof, reference is now made to the following brief description, taken in connection with the accompanying drawings and detailed description, wherein like reference numerals represent like parts.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
