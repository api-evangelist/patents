---
title: Integrating external voices
abstract: Integrating voice communication into a game console to minimize or eliminate voice data processing by a primary processor. Input voice data from a microphone or a network is processed by a secondary processor and stored in a circular buffer. Drift between storing and reading the processed voice data may result from differing data rates, interrupts, and other latencies. If the circular buffer, accumulates an amount of data that exceeds a predefined threshold corresponding to a human perceptible latency, a pointer in the circular buffer is reset, so that only a portion of the processed voice data is output. A stream of packet contexts each indicate a location and length of voice data in the circular buffer to be output. Preferably, the output voice data is encoded in a standard digital format, such as universal serial bus. The output voice data may be communicated to a network or a sound transducer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07395208&OS=07395208&RS=07395208
owner: Microsoft Corporation
number: 07395208
owner_city: Redmond
owner_country: US
publication_date: 20020927
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention generally relates to audio processing of multiple audio data streams on a computing device, so that minimal processing of the data streams is required of a general processor in the computing device; and more specifically, pertains to voice capture and playback of a plurality of voice streams on a game console, where the voice streams are conveyed locally and\/or over a network, using an auxiliary processor to carry out a substantial portion of the processing of the voice data.","Voice communication for gaming and other electronic activities is becoming increasingly popular, particularly for individuals connected over the Internet or other network. For those participating in multiplayer games, voice communication greatly expands the depth of enjoyment and social interaction between players of a game. Most computing devices include audio circuitry such as sound cards or audio processing modules so that they are able to produce audible sounds and handle voice communications, as well as performing other processing required when executing applications such as game software. Often, a general central processing unit (CPU) in prior art computing devices, including conventional game consoles, must carry out a substantial portion of the processing required for implementing voice communications between individuals. For example, personal computers (PCs) enable voice-over-Internet protocol (VoIP) communication over a network using software such as Microsoft Corporation's GAME VOICE\u2122, MSN MESSENGER\u2122, and NETMEETING\u2122. Whether for communication over a network or use within one machine, voice processing is typically controlled by the CPU in the PC executing a voice function software module, such as a specific application programming interface (API). For instance Microsoft Corporation's DIRECTPLAY\u2122 Voice API captures one or more voices, encodes the voice data, and sends the voice data to an output. Unfortunately, voice communication and other audio data processing are computationally intensive. Using the primary processor of the computing device to perform voice communication may substantially burden the primary processor, and reduce its efficiency for performing other tasks, which can be particularly troublesome when executing game software applications, since the quality of play can be adversely impacted if the primary processor is not able to maintain the flow of the game in real time.","To help alleviate the burden on the CPU, many computing devices also include a coprocessor, a digital signal processor (DSP), or other secondary processor on a separate plug-in card or directly on the main circuit board. For example, PCs typically include a sound card for assisting in the processing of music, voice communications, and other audio data associated with music composition and playback, games, dictation, teleconferencing, and other activities. With regard to voice communications, a microphone is usually connected to the sound card for analog voice input. The analog voice input is converted to digital voice data with an analog to digital (A\/D) converter, and a processor on the sound card routes the digital voice data to the CPU. Voice data received over a network connection is already in digital form and is routed directly to the CPU. In any case, the CPU determines whether to store the digital voice data in permanent storage, convert the data to some other form, packetize the data for transmission over the network, recognize a command, play the data through a speaker or headphone, or perform some other function determined by a related program executed by the CPU. To accomplish its function, the CPU coordinates with the device that is required for the function. For example, the CPU may instruct a processor on the sound card to pass the data through a digital to analog converter (D\/A) and out to one or more speakers, or may instruct a network interface device to transmit the digital voice data over a network.","These input and output processes require some coordination between the processors involved. The primary CPU often runs at a different clock rate than the processor on the sound card, and at a different rate than communication interfaces. Thus, the data may be buffered by the faster running processor until the slower processor can process the data. The buffering and changes in processing speed introduce latency between the input and output of the voice communication. A drifting latency may also be introduced if differing clock rates are not easily synchronized, such as by a simple multiplier. Thus, additional time cushions and control schemes may be built into the coordination process to accommodate the drift in processing that arises between multiple processors in a machine. To provide high quality, real-time voice communication, it is desirable to minimize the amount of coordination required between processors and to minimize any latency between the input and output of the voice communication.","Increases in processor capabilities and speeds have helped to reduce latency in processing audio data by different processors. However, improvement in the speed of hardware has not made the latency and coordination overhead negligible or undetectable to users. And, multimedia applications on low cost and limited capability hardware, such as game consoles, will often not include such higher cost processors. A game console typically includes a primary CPU that is relatively slower that the CPU employed on a PC, because of the need to maintain a relatively low cost for the game console. If voice communication were the only task required when executing a complex application program, such as a game, then the full capabilities of a primary CPU could readily be utilized. However in most circumstances, voice communication is just one of many functions that must be performed.","When multiple, computationally-intensive functions must be performed with limited capability processor hardware, each function must be prioritized to serve the greatest needs of the user. Typically, graphics and other primary tasks of an application program are considered to have a high priority, and these tasks consume a large amount of processor resources. Thus, sound processing and voice communication often receive a lower priority than the other tasks. Nevertheless, high quality sound is increasingly important to make a user's experience more realistic. In addition, voice processing is becoming more important to enhance the user's interaction with others. Therefore, it is desirable to reserve the CPU for executing high priority functions, yet provide voice communication with minimal latency and low overhead on a device with limited processing capabilities, such as a game console. It is further desirable to maintain a relatively low cost game console or other computing device by employing processors having somewhat limited capability, employ a minimal number of A\/D and D\/A converters, and use digital interfaces, such as the universal serial bus (USB), the Institute of Electrical and Electronics Engineers (IEEE) 1394 (e.g., FIREWIRE\u2122) interface, or other such data communication interfaces.","The present invention provides a method and system for integrating voice communication into a game console that includes a primary processor and a secondary processor, yet minimizes use of the primary processor for processing voice data. The game console receives voice data as an input from a local microphone or from network communication. Preferably, the voice data bypasses the primary processor and is routed directly to the secondary processor. The secondary processor may apply audio functions and\/or audio effects to the voice data such as mixing, sample rate conversion, filtering, reverberation, distortion, and other standard or custom functions and\/or effects. The processed voice data is stored in a memory, and the memory location is specified in a packet context. The packet context also identifies a length of the stored processed voice data that an output controller is to output to an audio transducer or to a network.","In one aspect of the invention the input voice data is supplied as pulse code modulation (PCM) data at a first data rate, and processed by the secondary processor that runs at a second data rate. The secondary processor converts the processed voice data back to the first data rate, and stores the converted voice data in a circular buffer of the memory. The converted voice data stored in the circular buffer is evaluated to determine whether an amount of the converted voice data is greater than a predefined limit. The predefined limit preferably corresponds to a human perceptible latency. If the predefined limit is exceeded, a read location in the circular buffer is advanced so that a portion of the converted voice data stored in the memory is not used in producing a stream of packets of the voice data to be output from the game console. The read location is preferably advanced an amount that avoids creating the human perceptible latency in the stream of packets of the voice data that is to be output from the game console. The primary processor accesses the converted voice data stored in the circular buffer according to the read location to produce a stream of packets of the converted voice data for output from the game console. Preferably, the primary processor encodes each read location and length of converted voice data in the packet contexts so that the output controller can access the circular buffer according to the packet contexts and output the converted voice data. The converted voice data may be encoded as USB data, Internet protocol (IP) data, infrared data, data conforming to IEEE 1394 standards, or other digital data before being output from the game console. The converted voice data may then be conveyed over a network or converted to an analog signal for driving a sound transducer.","Another aspect of the invention is directed toward additional details regarding storing and accessing the converted voice data in the circular buffer. In particular, at each write operation, the secondary processor updates a current write offset that indicates a location in the circular buffer at which the converted voice data will next be stored. Also determined is an old write offset that corresponds to a location in the circular buffer at which a first portion of the converted voice data was previously stored. If the current write offset differs from the old write offset by more than a predefined amount, the old write offset is reset to correspond to a location in the circular buffer that is within the predefined amount.","A further aspect of the invention is a memory medium having machine instructions stored thereon for carrying Out steps according to the invention. Other aspects of the invention will become clearer in light of the discussion below.","A preferred embodiment of the present invention is described below in regard to an exemplary use in providing audio for an electronic gaming system that is designed to execute gaming software distributed on a portable, removable medium. Those skilled in the art will recognize that the present invention may also be implemented in conjunction with a set-top box, an arcade game, a hand-held device, an attached high fidelity system or associated computer speaker system, and other related systems. It should also be apparent that the present invention may be practiced on a single machine, such as a PC, or in a network environment, with multiple consoles or interconnected computing devices that may be connected with one or more server computers.","Exemplary Operating Environment","As shown in , an exemplary electronic gaming system  that is suitable for practicing the present invention includes a game console  and support for up to four user input devices, such as controllers and . Game console  is equipped with an internal hard disk drive (not shown in this Figure) and a portable media drive  that supports various forms of portable optical storage media, as represented by an optical storage disc . Examples of suitable portable storage media include DVD discs and CD-ROM discs. In this gaming system, game programs are preferably distributed for use with the game console on DVD discs, but it is also contemplated that other storage media might instead be used on this or other types of systems that employ the present invention.","On a front face of game console  are four slots  for connection to supported controllers, although the number and arrangement of the slots may be modified. A power button , anid an eject button  are also positioned on the front face of game console . Power button  controls application of electrical power to the game console, and eject button  alternately opens and closes a tray (not shown) of portable media drive  to enable insertion and extraction of storage disc , so that the digital data on it can be read for use by the game console.","Game console  connects to a television or other display monitor or screen (not shown) via audio\/visual (A\/V) interface cables . A power cable plug  conveys electrical power to the game console when connected to a conventional alternating current line source (not shown). Game console  includes an Ethernet data connector  to transfer and receive data over a network (such as through a connection to a hub or a switch (not shown), or over the Internet, for example, through a connection to an xDSL interface, a cable modem, or other broadband interface (not shown). Other types of game consoles that implement the present invention may be coupled together or to a remote server, by communicating using a conventional telephone modem.","Each controller and is coupled to game console  via a lead (or alternatively through a wireless interface). In the illustrated implementation, the controllers are USB compatible and are connected to game console  via USB cables ; however, it is contemplated that other types of data interfaces may instead be employed. Game console  may be equipped with any of a wide variety of user devices for interacting with and controlling the game software. As illustrated in , each controller and is equipped with two thumbsticks and a D-pad , buttons , and two triggers . These controllers are merely representative, and other gaming unput and control devices may be substituted for or added to those shown in  for use with game console .","A removable function unit  can optionally be inserted into each controller and to provide additional features and functions. For example, a portable memory unit (MU) enables users to store game parameters and port them for play on other game consoles, by inserting the portable MU into a controller connected to the other game console. Another removable functional unit comprises a voice communication unit that enables a user to verbally communicate with other users locally and\/or over a network. Connected to the voice communication unit is a headset , which includes a boom microphone . The circuitry of the voice communication unit may alternatively be integrated into the controller and a headset with boom microphone , may be removably or permanently connected to the controller. Preferably, each controller is configured to accommodate two removable function units, although more or fewer than two removable function units or modules may instead be employed.","Gaming system  is capable of playing, for example, games, music, and videos. It is contemplated that other functions can be implemented using digital data stored on the hard disk drive or read from optical storage disc  in drive , or using digital data obtained from an online source, or from a MU. For example, gaming system  is potentially capable of playing:\n\n",{"@attributes":{"id":"p-0027","num":"0029"},"figref":"FIG. 2","b":["100","102","200","202","204","206","208","106","200","1","210","2","212","200","202"]},"As an example of one suitable implementation, CPU , memory controller , ROM , and RAM  are integrated onto a common module . In this implementation, ROM  is configured as a flash ROM that is connected to memory controller  via a PCI bus and a ROM bus (neither of which are shown). RAM  is configured as multiple double data rate synchronous dynamic RAM modules (DDR SDRAM modules) that are independently controlled by memory controller  via separate buses (not shown). Hard disk drive  and portable media drive  are connected to the memory controller via the PCI bus and an advanced technology attachment (ATA) bus .","A 3D graphics processing unit (GPU)  and a video encoder  form a video processing pipeline for high-speed and high-resolution graphics processing. Data are carried from GPU  to video encoder  via a digital video bus (not shown). An audio processing unit  and an audio encoder\/decoder (CODEC)  form a corresponding audio processing pipeline for high fidelity and stereo audio data processing. Audio data are carried between audio processing unit  and audio CODEC  via a communication link (not shown). The video and audio processing pipelines output data to an A\/V port  for transmission to the television or other display monitor. In the illustrated implementation, video and audio processing components - are mounted on module .","Also implemented on module  are a USB host controller  anid a network interface . USB host controller  is coupled to CPU  and memory controller  via a bus (e.g., the PCI bus), and serves as a host for peripheral controllers -. Network interface  provides access to a network (e.g., the Internet, home network, etc.) and may be any of a wide variety of various wire or wireless inter-face components, including an Ethernet card, a telephone modem interface, a Bluetooth module, a cable modem interface, an xDSL interface, and the like.","Game console  has two dual controller Support subassemblies and and each subassembly supports two of game controllers -A front panel input\/output (I\/O) subassembly  supports the functionality of power button  and eject button , as well as any light-emitting diodes (LEDs) or other indicators exposed on the outer surface of the game console. Subassemblies , , and  are coupled to module  via one or more cable assemblies .","Eight function units -are illustrated as being connectable to four controllers -, i.e., two function units for each controller. Each function unit  offers additional functionality or storage for games, game parameters, and other data. When an MU is inserted into a controller, the MU can be accessed by memory controller .","A system power supply module  provides power to the components of gaming system . A fan  cools the components and circuitry within game console .","To implement the present invention, a game software application  comprising machine instructions stored on a DVD or other storage media (or downloaded over the network) is loaded into RAM  and\/or caches  and\/or  for execution by CPU . Portions of software application  may be loaded into RAM only when needed, or all of the software application (depending on its size) may be loaded into RAM . Software application  and the relevant functions that it performs to implement the present invention are described below in greater detail.","Gaming system  may be operated as a stand-alone system by simply connecting the system to a television or other display monitor. In this standalone mode, gaming system  enables one or more users to play games, watch movies, or listen to music. However, with connectivity to the Internet or other network, which is made available through network interface , gaming system  may be further operated as a component of a larger network gaming community, to enable online multiplayer interaction in games that are played over the Internet or other network with players Using other gaming systems. Gaming system  can also be coupled in peer-to-peer communication with another gaming system using the network interface and appropriate cable.","Network System",{"@attributes":{"id":"p-0036","num":"0038"},"figref":"FIG. 3","b":["300","100","100","302","142","142","144","144","302","302","302"],"i":["a","n ","a","n ","a","n "]},"In addition to gaming systems , one or more online services , . . . are accessible via network  to provide various services for the participants, such as serving and\/or hosting online games, serving downloadable music or video files, hosting gaming competitions, serving streaming A\/V files, enabling exchange of email or other media communications, and the like. Network gaming environment  may further employ a key distribution center  that plays a role in authenticating individual players and\/or gaming systems  for interconnection to one another, as well as to online services , . . . Distribution center  distributes keys and service tickets to valid participants that may then be used to form game playing groups including multiple players, or to purchase services from online services , . . . ","Network gaming environment  introduces another memory source avail able to individual gaming systems , i.e., online storage. In addition to accessing data on optical storage disc , hard disk drive , and function unit , gaming system can also access data files available at remote storage locations via network , as exemplified by remote storage  at online service ","Network gaming environment  further includes a developer service  with which developers can produce media effects, updated media data, game code, and other services. Such services call be distributed between the online services and the producers of games for the gaming systems, and between other devices within, and outside of network gaming environment .","Exemplary Process","A preferred embodiment of the present invention is directed to relieving a game console's primary processor from voice communication processing by integrating voice capture and playback into the audio processing system of the game console. Voice communication is routed to the audio processing system, which treats streaming voice data similar to a stored sound file. Incoming voice data from one or more sources can optionally be mixed, enhanced, and routed to the headset of each player on the game console or to speakers attached to the game console. Similarly, outgoing voice data from a player using the game console can selectively be mixed with outgoing voice data from another player using the same game console and routed to the headset of each player on the game console, to speakers, and\/or over a network to one or more players using other game consoles.",{"@attributes":{"id":"p-0041","num":"0043"},"figref":["FIG. 4","FIG. 2"],"b":["144","142","302","144","140","140","141","224","310","302","310","224","310","226","200"]},"Audio processing unit  processes the voice PCM data in much the same manner as other audio data, such as wave data, passing the PCM data into a voice processor (VP) . VP  is a primary PCM synthesis and sub-mixing engine that comprises a fixed function DSP core in communication with a pipeline of programmable functions. VP  performs functions such as sample rate conversion (SRC), pitch shifting, enveloping, filtering, and optionally, three-dimensional (3D) audio localization. Filtering function  and SRC function are shown as examples of the functions implemented by VP . VP  may be programmed to process each stream of voice data individually, or to mix streams of voice data from multiple voice inputs and\/or to mix voice data with stored audio data. The processed voice data are stored in one or more logical voice processor mix bins, which are implemented in the physical memory of VP .","A global processor (GP)  can optionally access the VP memory and further process the voice data. GP  is another DSP and can perform audio effects on the voice data, such as applying reverberation or echo effects, distortions, amplitude modulation, gender modification, and other conventional or custom audio effects . To perform such effects, GP  preferably includes a programmable DSP core and GP memory. However, as is often the case when combining processors, GP  runs at a different clock rate than VP . In particular, VP  operates at about 8 kHz, which is the same rate as incoming PCM voice data. However, GP  operates at about 48 kHz. Similarly, decoder  may operate at a different clock rate than VP . To accommodate the various clock rates, sample rates are converted as necessary before the data are passed to the next processor. For instance, VP  converts data at its 8 kHz rate to data at the 48 kHz rate via SRC  a. After applying audio effects, GP  also preferably converts the data at 48 kHz back to data at 8 kHz via SRC , so that the processed voice data may be used for other purposes that require that rate.","In addition to being unequal, the various clock rates are not simple exact multiples of each other. Further, the various processors are often subject to interrupts and other conditions that prevent each processor from performing its operation at synchronized intervals. As a result, the transfer of data between any two processors tends to be subject to drift as a function of the characteristics of the processors and the communication scheme employed between processors.","As indicated above, GP  operates at about 48 kHz to perform effects processing, but uses SRC  b to convert the modified voice data to about 8 kHz for use by an encode . The voice data converted to about 8 kHz are stored in a circular buffer  of RAM . Encoder  reads the converted voice data from circular buffer  as quickly as possible after the converted voice data are written to circular buffer . This closely-tied write and subsequent read operation reduces the memory required for circular buffer , thereby increasing throughput and reducing the cost of the game console. However, GP  and encoder  often perform multiple tasks that do not enable the converted voice data to be immediately written and read synchronously. A complex feedback control system could be implemented to synchronize the writing and reading operations. However, such a feedback control system would require components prohibitively expensive for use in a low cost electronic device such as a game console. Instead, a simpler comparative technique is employed, as discussed in greater detail below with regard to .","As suggested above, encoder  refers to the converted voice data stored in circular buffer . For ease of implementation, encoder  was selected from an existing network encoder and an existing USB encoder comprising software executed on the CPU of the game console. However, equivalent encoder software is preferably executed on the DSP of GP . In that way, the game console CPU is not required for voice processing. Encoder  creates an output packet context . Output packet context  preferably includes a pointer to a desired address in circular buffer  from which to read a specific amount of data stored in circular buffer , and header information appropriate for the type of communication used to communicate the voice data to a desired output device or channel. For example, the header information may comprise data needed or USB communication, IEEE 1394 (e.g., FIREWIRE\u2122) communication, IP communication, or other suitable communication format.","Based on the information of output packet context , output driver software  programs the appropriate output controller hardware  to send the voice data stored in circular buffer  out to the desired hardware device. Output controller hardware  is one of the output units shown in , such as A\/V port , network interface , or USB host controller  and routes the voice data to one or more speakers , to another device connected to network , or to removable function unit . Output hardware controller  comprises a simple D\/A converter to provide analog signals to speakers , earphones of headset , or other analog output device. However, D\/A converters are typically more expensive than low cost digital communication modules, such as the USB (IEEE 1394, IP, or other type of module) indicated above. The game console preferably includes low cost components for this purpose. The optional removable function unit  includes a D\/A converter  to provide the analog voice signals for energizing the earphones of headset . Making removable function unit  as an optional voice communication module keeps the market price of the game console down. However, the same capability can be included as an integral part of the game console of each input device to facilitate the capture and playback of output from audio processing unit  on any peripheral.","To better disclose the drift compensation process introduced above,  illustrates circular buffer  in greater detail. Preferably, circular buffer  has a total size that is an integer multiple of a predefined packet length of audio data. For example, the predefined packet length may comprise a sufficient number of bytes (e.g., 32 bytes) or words to store 20 ms of audio data. A packet of audio data is not to be confused with output packet context  of . Output packet context  simply identifies a pointer or offset to an address within circular buffer  and specifies a length of data to be found in circular buffer .","In the embodiment of , GP SRC 381b writes voice data to circular buffer  at a current write offset . GP  stores current write offset  in a memory internal to GP . Encoder  reads current write offset  directly from the internal memory of GP . In this way, encoder  can determine the location of the most recently written voice data that are stored just prior to current write offset  in circular buffer . Encoder  preferably reads the most recently written voice data in a conventional ping-pong fashion. Having read the voice data from circular buffer , encoder  stores an old write offset  that corresponds to the last location of circular buffer  read by encoder . This last location is just before current write offset . Old write offset  is used for future comparison as described below with regard to .","To show further detail,  is a flow diagram illustrating logic used by the GP SRC to write voice data to the circular buffer. At a step , the GP SRC converts 48 kHz voice data to 8 kHz voice data. At a step , the GP SRC writes the 8 kHz voice data to a location in GP memory that corresponds to the current write offset of the circular buffer. The GP SRC then updates a storage location in GP memory that holds the current write offset, at a step . The GP SRC replaces the current write offset with a new offset to be used as the current write offset during a next write cycle of the GP SRC to internal GP memory. Updating the current write offset in GP memory can include specifying a write offset that corresponds to a beginning of the circular buffer after having wrapped around from the end of the circular buffer. At a step , a DSP execution kernel running on the DSP of the GP initiates a direct memory access (DMA) transfer of the converted voice data to the main RAM of the game console. Control then returns to step  to continue converting additional voice data in a stream. Note that this voice stream continues even if only silence is streamed out.","While the GP is streaming voice data to its internal memory and performing DMA transfers of that voice data to the circular buffer in RAM of the game console, the encoder reads and streams that stored voice data to the appropriate output device.  is a flow diagram illustrating logic for the encoder to read and stream data from the circular buffer to the appropriate output device. At a step , the encoder performs initialization tasks, such as setting up the circular buffer in scratch space of game console RAM that has been mapped to the GP memory, and other initialization tasks. Once initialized, the encoder enters a continuous loop, to read and stream the voice data. At a step , the encoder directly reads the GP memory location that stores the current write offset (the GP memory location storing the current write offset is not DMA transferred to the game console RAM). At a decision step , the encoder determines whether the streaming process is just beginning such that this is the first time that the encoder is to read and stream the voice data since the game console was powered on or reset. If the streaming process is just beginning, the encoder has not yet identified an old write offset relative to the current write offset. Thus, at a step , the encoder establishes an initial old write offset as the modulo of the current write offset relative to the packet size of voice data. Specifically, the initial old write offset is set as the current write offset modulo the packet size minus the packet size. Recall that the packet size is preferably approximately 20 ms of voice data.","Once an old write offset is set, the encoder determines at a decision step , whether enough data have been accumulated in the circular buffer for the encoder to process. Specifically, the encoder determines whether the absolute value of the current write offset minus the old write offset is less than the packet size. If this comparison is true, then the amount of data available are less than the required for one packet. In that case, there is insufficient data for the encoder to transfer to an output device. Thus, the encoder passes control to a decision step  that simply waits until the process of  is called again. For example, the process of  is preferably called once each video frame.","The encoder then checks at a decision step  to determine whether too much voice data have accumulated in the circular buffer since the last time voice data were read and transferred to an output device. As indicated above, processors are often not synchronized and\/or are subject to interrupts and other delays that can effect continuous streaming of data. For example, the encoder may be directed by a simulation executing on the game console to perform a number of other higher priority functions, in addition to streaming the voice data. Thus, the encoder may fall behind in processing the voice data relative to the GP. At decision step , the encoder determines whether it has been delayed by more than a predefined threshold. Specifically, the encoder determines whether the absolute value of the current write offset minus the old write offset is greater than the predefined threshold. The predefined threshold preferably corresponds to a number of packets, such as four packets of voice data. If the difference between the current write offset and the old write offset is greater than the predefined threshold, the encoder resynchronizes the old write offset, at a step . Thus, even if the GP and encoder transfer data at the same clock rate, such as 8 kHz, interrupts and other delays may cause the two processors to get out of synchronization.","Rather than implement a costly and complex feedback control system to keep the two processors synchronized, the encoder simply resets the old write offset, so that regular streaming of the voice data can continue without any latency. Specifically, the encoder sets the old write offset to the current write offset minus the packet size. As a consequence, voice data in the circular buffer between the original old write offset and the resynchronized old write offset will be lost. However, the loss of a few packets of voice data, e.g. 20-60 ms is often undetectable and\/or insignificant to the human ear. Therefore, low cost components may be used in the audio system with only negligible losses in audio quality.","When the encoder is sufficiently synchronized, the encoder prepares and submits an output packet context to the output driver software, at a step . The output packet context identifies the old write offset and an amount of voice data to read (e.g., up to the current write offset), so that the output control hardware can react the appropriate amount of voice data from the circular buffer. After the output packet context is submitted, the encoder updates the value of the old write offset by setting the old write offset equal to the old write offset plus a packet size, at step . Those skilled in the art will recognize that the old write offset may be updated to a greater or lesser extent, as appropriate for any pair of processors and number of packets read by the encoder. Once the old write offset is updated, control passes to decision step  at which the encoder waits for another call to loop back through the above process.","Although the present invention has been described in connection with the preferred form of practicing it, those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly, it is not intended that the scope of the invention in any way be limited by the above description, but instead be determined entirely by reference to the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING FIGURES","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same becomes better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
