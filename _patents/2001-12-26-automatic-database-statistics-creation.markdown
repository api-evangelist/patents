---
title: Automatic database statistics creation
abstract: A system for automatic statistics creation comprises a query optimizer which automatically generates statistics derived from data in a database and selects an executable procedure from a plurality of procedures that operate on data in a database using the automatically generated statistics. A counter is maintained of updates made to each statistic that has been automatically generated. If the counter breaches a threshold, the automatically generated statistic is removed from the database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06847978&OS=06847978&RS=06847978
owner: Microsoft Corporation
number: 06847978
owner_city: Redmond
owner_country: US
publication_date: 20011226
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This Application: is a continuation of application Ser. No. 09\/213,087 filed Dec. 16, 1998.","This application is related by subject matter to the inventions disclosed in commonly assigned U.S. patent application Ser. No. 09\/212,933, filed on even date herewith, and now U.S. Pat. No. 6,366,901, entitled \u201cAutomatic Database Statistics Maintenance and Plan Regeneration.\u201d","The present invention relates generally to database systems, and more particularly to a system for automatically generating statistics for data stored in a database.","A relational database is a collection of related data that is organized in related two-dimensional tables of columns and rows. The data stored in a relational database is typically accessed by way of a user-defined query that is constructed in a query language such as Structured Query Language (SQL). A SQL query is non-procedural in that it specifies the objective or desired result of the query in a language meaningful to a user but does not define the steps to be performed, or the order of the steps in order to accomplish the query.","When a SQL query is applied to a database, the relational database management system (RDBMS) processes the non-procedural query and develops a plurality of procedural execution plans, any one of which could be employed to implement the objectives of the SQL query. While each of the execution plans may fulfill the objectives of the SQL query, each has a different cost (in terms of processing cycles and logical I\/Os) associated with it. The relational database management system attempts to select the execution plan which is most efficient, i.e. has the least overall cost. Generally, the selection is made on the basis of statistics that are derived from the data in the database and maintained by the RDBMS. For example, a database may record the number of distinct values in a pre-designated index column along with a histogram of the values distributed across the column. Using these and other statistics, the database system makes an educated guess of the cost associated with each execution plan, selects the most efficient plan, and stores the selected plan in an area of memory sometimes referred to as an execution plan cache. On subsequent invocations of the same SQL query, rather than re-traverse the process of identifying the most efficient execution plan, the database system refers to the execution plan cache and selects the previously identified optimal execution plan.","In existing database systems, statistics are generated only for specific tables that are pre-defined by a database administrator. As a consequence, the situation often arises that statistics have not been generated that would have been used in selecting an execution plan if available. In such cases, the database system relies upon rough estimates or \u201cguesses\u201d of the statistics. Relying upon guesses rather than actual statistics introduces inaccuracies to the process and can lead to the selection of a less than optimal execution plan. As a consequence, database queries may take longer and use more resources than optimally necessary.","In existing systems, it is theoretically possible to avoid guessing as to statistics by configuring the system to build statistics on every column in the database. In reality, however, such a configuration is impracticable due to the overhead associated with maintaining statistics on such a large group of statistics. Guessing as to statistics might also be avoided by configuring the system to collect statistics which cover all predicates submitted to the database. This task would be very complex as it requires that the database administrator know a-priori the complete set of queries (workload) which would be submitted to the system. In many database systems, this problem is intractable as many users of the database system rely on tools which automatically generate queries.","Thus, there is a need in the art for a system and method whereby statistics are automatically generated as needed for data that is accessed by an execution plan. The system should automatically remove selected portions of the automatically generated statistics to avoid the accumulation of statistics across all columns in the database.","The present invention is directed toward remedying these shortcomings by automatically generating statistics as needed. According to the invention, during the process of generating an execution plan, the names are accumulated of the columns which are processed by the execution plan but for which statistics do not exist. After checking that these columns are of a type for which statistics may be generated, the system generates the statistics. Thereafter, an optimal execution plan is selected based upon the actual statistics rather than guesses.","According to another aspect of the invention, a counter is maintained for each automatically generated statistic of the number of updates made to the statistic. When the counter reaches a threshold, the automatically generated statistic is deleted.","Overview","The present invention provides a database management system wherein statistics regarding data stored in the database are automatically generated as needed during query processing. When a query is processed, the DBMS recognizes that statistics have not been generated for some component of data accessed by an execution plan. The statistics are automatically generated and the query optimization proceeds with selecting an execution plan using actual statistics where otherwise guesses may have been used. By using actual statistics as opposed to guesses, the database system is rendered more reliable and efficient.","Prior to explaining the details of the invention, it is useful to provide a description of a suitable exemplary environment in which the invention may be implemented.","Exemplary Operating Environment","1. A Computer Environment","FIG.  and the following discussion are intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a computer, such as a workstation or server. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCS, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operating environment. Further, as used herein, the term \u201ccomputer readable medium\u201d includes one or more instances of a media type (e.g., one or more floppy disks, one or more CD-ROMs, etc.).","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","2. A Network Environment",{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 2"},"The network may include client computers , a server computer , data source computers , and databases  and . The client computers and the data source computers are in electronic communication with the server computer via communications network , e.g., the Internet. Client computers and data source computers are connected to the communications network by way of communications interfaces . Communications interfaces  can be any one of the well-known communications interfaces such as Ethernet connections, modem connections, and so on.","Server computer provides management of database  by way of database server system software, described more fully below. As such, server acts as a storehouse of data from a variety of data sources and provides that data to a variety of data consumers.","In the example of , data sources are provided by data source computers Data source computers communicate data to server computer via communications network , which may be a LAN, WAN, Intranet, Internet, or the like. Data source computers store data locally in databases , , which may be relational database servers, excel spreadsheets, files, or the like. For example, database shows data stored in relational database tables , , and  which are described below with reference to FIG. . The data provided by data sources may be combined and stored in a large database such as a data warehouse maintained by server ","Client computers that desire to use the data stored by server computer can access the database  via communications network . Client computers request the data by way of SQL queries (e.g., update, insert, and delete) on the data stored in database .","3. Query Processing Generally","A database is a collection of related data. In one type of database, a relational database, data is organized in a two-dimensional column and row form called a table. A relational database typically includes multiple tables. A table may contain zero or more records and at least one field within each record. A record is a row in the table that is identified by a unique numeric called a record identifier. A field is a subdivision of a record to the extent that a column of data in the table represents the same field for each record in the table. A database generally will also include associative structures. An example of an associative structure is an index, typically, but not necessarily, in a form of B-tree or hash index. An index provides for seeking to a specific row in a table with a near constant access time regardless of the size of the table. Associative structures are transparent to users of a database but are important to efficient operation and control of the database management system. A database management system (DBMS), and in particular a relational database management system (RDBMS) is a control system that supports database features including, but not limited to, storing data on a memory medium, retrieving data from the memory medium and updating data on the memory medium.",{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 3","b":["150","152","154","156","158","160","150","158","158","152","154","154"]},"As previously noted, control and management of the tables is maintained by a DBMS, e.g., a RDBMS. An architecture for an exemplary RDBMS  is graphically depicted in FIG. . The architecture comprises essentially three layers. Layer one provides for three classes of integration with the RDBMS, comprising: (1) a SQL Server Enterprise Manager  that provides a common environment for managing several types of server software in a network and provides a primary interface for users who are administering copies of the RDBMS on the network; (2) an Applications Interface  that allows integration of a server interface into user applications such as Distributed Component Object Modules (DCOM); and (3) a Tools Interface  that provides an interface for integration of administration and configuration tools developed by Independent Software Vendors (ISV).","Layer two opens the functionality of the RDBMS to other applications by providing three application programming interfaces (API): SQL Namespace , SQL Distributed Management Objects , and Data Transformation Services . A user interface  is provided by Wizards, HTML, and so on. SQL Namespace API  exposes the user interface (UI) elements of SQL Server Enterprise Manager . This allows applications to include SQL Server Enterprise Manager UI elements such as dialog boxes and wizards.","SQL Distributed Management Objects API  abstracts the use of DDL, system stored procedures, registry information, and operating system resources, providing an API to all administration and configuration tasks for the RDBMS.","Distributed Transformation Services API  exposes the services provided by the RDBMS to aid in building data warehouses and data marts. As described more fully below, these services provide the ability to transfer and transform data between heterogeneous OLE DB and ODBC data sources. Data from objects or the result sets of queries can be transferred at regularly scheduled times or intervals, or on an ad hoc basis.","Layer three provides the heart of the RDBMS. This layer comprises a SQL Server Engine  and a SQL Server Agent  that monitors and controls SQL Server Engine  based on Events  that inform SQL Server Agent of the status of the SQL Server Engine . Server Engine  processes SQL statements, forms and optimizes query execution plans, and so on. Server Engine  may comprise a component referred to as \u201cquery optimizer\u201d  which operates to select execution plans as described in detail below with reference to FIG. .","Generally, data stored in a relational database is accessed by way of a user-defined query that is constructed in a query language such as SQL. Typically, for any given SQL query there are numerous procedural operations that need be performed on the data in order to carry out the objectives of the SQL query. For example, there may be numerous joins and table scans that need to be performed so as to accomplish the desired objective. These table joins and scans can often be executed in various different orders to arrive at the same result. A combination of procedural operations which accomplishes the desired objective is referred to as an \u201cexecution plan.\u201d There may be numerous execution plans that can be developed for any one SQL query.","A database management system must automatically select one execution plan to implement from the numerous execution plans that may exist for a SQL query. One frequently employed criteria for choosing an execution plan is to select the plan which provides the greatest efficiency, i.e. involves minimal use of system resources such as processing cycles and logical I\/O's.","In database systems which select an execution plan based on efficiency, the system considers the table scans and table joins, as well as the ordering of these, that accomplish the desired objective with use of minimal system resources. Generally, a plan that requires processing a minimal number of database records also uses minimal system resources. Thus, a key principle for selecting the most efficient execution plan is to select the plan that minimizes the number of database records that need to be processed.","Database statistics play an essential role in identifying execution plans that require processing of minimal numbers of records. Generally, database systems can be programmed to generate statistics on data stored in selected database columns. Database statistics typically include the following: the time of the last statistics collection; the number of rows in the table in which the column is stored; the approximate number of pages occupied by the data stored in the column; the average length of the data stored in the column; the distribution of values in the column (i.e. a histogram); the densities of values in the column; and the number of column values used to produce the histogram and density information.","Histogram and column density statistics provide a means to estimate the expected number of records that may be returned by a database operation and are therefore particularly useful in identifying an efficient execution plan. Density refers to the uniqueness of data values in a column. \u201cDensity\u201d is defined as 1\/reduced cardinality where reduced cardinality is the number of different values in a column after the most frequent values have been removed. Another type of density, sometimes referred to as \u201call density\u201d is defined as 1\/cardinality where cardinality is the number of different values in a column.","Generally, density provides a measure of selectivity for an index. The more selective an index, the more useful it may be in accessing only the desired records and thereby eliminating more rows from consideration. Thus, a database system considering using two alternative indexes will typically employ the more selective index as indicated by the density.","A histogram represents the distribution of values in an column. Generally, in order to create a histogram, the records in a column are sorted and divided into intervals. The beginning and ends of the intervals are defined by discrete values in the column. In an equi-height histogram, the values are evenly distributed into intervals. In a multi-height histogram, the values are irregularly distributed into intervals but the number of values in each interval are defined.",{"@attributes":{"id":"P-00055","num":"00055"},"figref":"FIG. 5","b":["150","3","162","164","162","150","162"]},{"@attributes":{"id":"P-00056","num":"00056"},"figref":["FIG. 6","FIG. 3"],"b":"170","ul":{"@attributes":{"id":"ul200001","list-style":"none"},"li":{"@attributes":{"id":"ul200002-li00002"},"ul":{"@attributes":{"id":"ul200002","list-style":"none"},"li":["SELECT D.dept_name, count(*) AS num_employees","FROM Department AS D INNER JOIN Employees AS E ON","D.dept_id=E.dept_id","WHERE D.dept_id=\u2018East Bedford\u2019","GROUP BY D.dept_id, D.dept_name"]}}}},"At step , the database management system parses the SQL query, checking for proper SQL syntax and translating the SQL commands into a database internal format that can be operated upon. In one embodiment the internal format is a sequence tree or query tree. A query tree for the above described SQL query is shown in FIG. .","At step , the database management system binds the text strings in the query tree with objects in the database and resolves information about those objects. For the above example, the strings \u201cemployee\u201d and \u201cdepartment\u201d are respectively bound to the employee and department tables in the database and the names and data types of the columns in those tables are resolved.","At step , a component of the database management system usually referred to as the \u201cquery optimizer\u201d selects an optimal execution plan. Generally this is accomplished by first generating a plurality of execution plans, any one of which would fulfill the objectives of the SQL query. Thereafter, the query optimizer selects one of the execution plans, usually the one deemed to be most efficient. This selection process typically involves analyzing statistics as described above to minimize the number of record accesses.","At step , the database system executes the execution plan that was selected at step . At step , the execution plan is stored in an area of memory referred to as the \u201cexecution plan cache.\u201d On subsequent invocations of the same SQL query, rather than re-traverse the optimization process, the previously optimized execution plan is retrieved from cache and executed.","In a database system which relies on the accuracy of database statistics to select execution plans, it is desirable to refresh the statistics when the underlying data has changed. A system which provides this capability is disclosed in commonly assigned U.S. patent application Ser. No. 09\/212\/933, entitled \u201cAutomatic Database Statistics Maintenance and Plan Regeneration\u201d the contents of which are hereby incorporated by reference in their entirety. As disclosed therein, a counter may be maintained of updates made to data for the purpose of determining when the data has sufficiently changed such that the statistics should be refreshed. In one embodiment, a counter, typically referred to as the \u201crow modification counter\u201d is maintained for each table in the database for which statistics have been generated. The row modification counter is incremented by one for every update, insert, or delete to a column in the table for which statistics are being maintained. In an alternative embodiment, the row modification counter may be maintained for every database column for which statistics are being kept. In this alternate embodiment, a row modification counter is incremented by one for every update, insert, or delete made to the particular column.","When an execution plan is implemented, the row modification counters for each table accessed by the plan are incremented for every update, insert, and delete operation performed on a column in the respective tables for which statistics are being maintained.  illustrates one method of updating a modification counter during execution of an execution plan on a database. As shown, at step  an update, insert, or delete associated with an execution plan is executed in the database. At step , it is determined if the update, insert, or delete was performed on a column for which statistics are being maintained. If a column for which statistics are being kept has been updated, at step , the row modification counter for the table in which the updated column is located is incremented.","When the row modification counter for a particular table reaches a threshold value, the statistics related to that table are updated. Threshold values are likely to vary between tables. Further, while a threshold may be a set value, it preferably is a non-constant function. For example, the modification threshold may be defined by the following function:\n\nmodification threshold=max (500, record_count *0.20)\n\nwhere record_count is the number of records in the particular table. According to this exemplary function, for a table containing 11,000 records the modification threshold would be 2,200.\n","In a database system which stores for later implementation, execution plans which were generated based upon database statistics, it is desirable to periodically update the stored execution plans to correspond to changes in the database statistics. Accordingly, the database system may determine if the execution plan is sensitive to changes in the statistics of the tables accessed by the plan. If the execution plan is sensitive to statistics on a particular table, the plan is automatically re-optimized. In one embodiment, the system maintains a version referred to as a \u201cstatistic schema version\u201d for each table for which statistics have been generated. When the statistics are updated for a particular table, the statistic schema version is automatically incremented. The statistic schema version for each table accessed by an execution plan at the time the plan is generated is stored with the execution plan. Prior to implementing an execution plan, the database system examines the execution plan to determine if the plan operates on tables for which statistics are maintained. For each table accessed by the execution plan for which statistics are maintained, the current statistic schema version is compared with the value for the statistic schema version at the time the execution plan was generated. If the statistics for the table have changed as indicated by a change in statistic schema version, the execution plan is no longer valid and a new execution plan is generated using new statistics.",{"@attributes":{"id":"P-00072","num":"00072"},"figref":"FIG. 9","b":["176","5","238","240","242","240","244"]},"When an execution plan is generated by the database system, the schema versions for all tables referenced in the plan are stored as part of the plan. At step , the schema versions of the tables accessed in the plan are checked against the current schema versions. If any of the schema versions accessed as part of the plan have changed since the execution plan was generated as indicated by a change in schema version, the plan is no longer valid, and at step  the system typically, but not necessarily, automatically discards the plan and re-submits the query to produce a new execution plan using the new schema versions.","If at step  the table schemas have not changed, at step  a determination is made as to whether the statistics for any of the tables accessed by the execution plan have changed since the plan was developed. In one embodiment this determination is made by comparing each table's statistic schema version with the statistic schema version that is stored with the execution plan. If the current statistic schema version does not match the value for the statistic schema version stored with the execution plan, this indicates that the statistics on the table have been updated since the execution plan was generated. Under this set of facts, at step  the execution plan is discarded and a new plan developed beginning at step . If at step  it is determined that the statistics have not changed for any of the tables accessed by the execution plan, the execution plan is queued for execution at step .","If at step  an execution plan is not located, or an execution plan has become outdated and discarded at step , at step  meta-data is generated. Generally, meta-data includes statistics that exist for columns that potentially may need be accessed by the execution plan. Additionally, the meta-data comprises a list of columns that need to be accessed but for which there have been no statistics generated.","At step  a determination is made as to whether the statistics for the tables have become outdated. According to one embodiment, this involves determining for each table involved in the query whether the row modification counter has breached the modification threshold for that table. If so, the statistics are out of date and the statistics for the particular table are refreshed at step . As part of refreshing the statistics for a table, the statistic schema version for the table is incremented. After refreshing the data, the meta-data is regenerated at step .","If at step  it is determined that the statistics are not out of date, i.e. for each table accessed by the execution plan the row modification counter has not reached the threshold value, at step  it is determined whether a \u201ctrivial\u201d execution plan exists that satisfies the objectives of the submitted SQL query. For some queries, the most efficient plan is easily discerned, i.e. trivial. In such cases, further processing to develop an execution plan is an inefficient use of resources. For example, if a particular SQL Query can be satisfied by a simple index lookup, it can be assumed that there is no need to investigate other potential execution plans.","If a trivial plan is identified at step , the trivial plan is queued for execution at step . If at step , however, there is no satisfactory trivial plan, at step , for any columns that may be accessed by one of the plurality of possible execution plans and which was identified in the meta-data as not having statistics generated, a guess is made as to the number of records that may be returned from the particular column. Typically, existing systems employ fixed estimates for the portion of records which qualify for each class of comparison predicate. For example, a system might assign the following selectivity (portion of records which qualify) to portions of queries for which statistics have not been generated:",{"@attributes":{"id":"P-d0e2582","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Comparison","Selectivity"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Less than","30%"]},{"entry":[{},"Greater than","30%"]},{"entry":[{},"Equal","10%"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Using the statistics that are gathered at step  and\/or guesses that are devised at step , an execution plan is devised at step . Stored with the execution plan is the statistic schema version for each statistic accessed by the execution plan. At step  the execution plan that has been selected is queued to be executed.","As noted above, relying upon guesses rather than actual statistics introduces inaccuracies to the process and can lead to the selection of a less than optimal execution plan. As a consequence, database queries may take longer and use more resources than optimally necessary.","Detailed Description of Automatic Database Statistics Creation","In a system according to the present invention, statistics are automatically generated as needed during the optimization process. According to another aspect of the invention, selected automatically generated statistics are removed from the database so as to avoid the accumulation of statistics across all rows in the database.",{"@attributes":{"id":"P-00084","num":"00084"},"figref":"FIG. 10","b":["300","302","304","306","308","306","310"]},"If at step  no execution plan was found, or the execution plan was discarded at step , at step  meta-data is generated corresponding to the user's query. At step , it is determined whether the statistics gathered as part of the meta-data are out of date. This determination may be made by comparing for each table accessed as part of the query the row modification counter with the row modification threshold corresponding to the particular table. If the statistics are found to be out of date, at step  the statistics are refreshed and at step  the statistics update counter is incremented for each automatically generated statistic defined in the meta-data. As explained in detail below, a statistic update counter is created for each automatically generated statistic and is employed in determining whether to remove the statistic from the database. At step  the meta-data is regenerated to reflect the updated statistics.","If at step , the statistics are found not to be out of date, at step  it is determined whether a trivial execution plan exists. If so, the trivial execution plan is queued for execution at step . If at step  a trivial execution plan is found not to exist, at step  statistics are automatically generated for the set of data which are identified in the meta-data as not having had statistics. At step  an execution plan is devised using the statistics generated at steps  and .","At step  a determination is made as to whether the automatically generated statistics that are accessed by the execution plan should be removed from the system. In one embodiment of the invention, this involves determining whether the statistic update counter for a statistic has breached a threshold value. The threshold value is typically, but not necessarily set at a constant value for an entire database. Alternatively, the threshold could be a function of the data. According to this method of selecting statistics to be removed, the statistics that are frequently updated and thereby add most significantly to the system overhead are most likely to be removed from the system. Of course, other criteria could be used for selecting statistics to be removed. If during future operations of the query optimizer a statistic that has been removed is needed, the statistic is re-generated using the auto-generation process described above.","If it is determined that the automatically generated statistic should be removed, at step , the statistic is removed from the system and thereafter at step  the execution plan is queued for execution. If it is determined that there are no automatically generated statistics to be removed, the execution plan is queued for execution at step .",{"@attributes":{"id":"P-00089","num":"00089"},"figref":"FIG. 11","b":["340","342","344","346"]},"If at step , it is determined that automatic generation of statistics has been enabled, at step  it is determined for each column for which statistics are needed, whether the column is a type for which statistics can be generated. For example, statistics are not generated for columns that have been marked as read-only. Also, statistics are not typically generated for columns containing text, graphs, or those containing more than 900 characters.","If at step  it is determined that a column is not one for which statistics are generated, at step , a guess is made as to the statistics for the particular column. If at step , the column is of a type for which statistics are generated, at step  statistics are generated for the particular column. At step  a statistics update counter is created for that particular statistic. The counter is used as described above in relation with step  to determine if the statistic should be removed from the database. The statistics update counter is stored with the automatically generated statistic, typically in sysindexes table .","At step , it is determined if there are other columns for which it has been requested to generate statistics. If so, at step  it is determined whether the column is of a type for which statistics are maintained. If at step  there are no additional columns, processing is returned to the parent process.","As described above, the present invention provides a system for automatic database statistics creation. A database in accordance with the present invention minimizes guessing as to statistics and thereby provides more efficient query processing.","Those skilled in the art understand that computer readable instructions for performing the above described processes can be generated and stored on a computer readable medium such as a floppy disk or CD-ROM. Further, a computer such as that described with reference to  may be arranged with other similarly equipped computers in a network, and each computer may be loaded with computer readable instructions for performing the above described processes. Specifically, referring to , microprocessor  may be programmed to operate in accordance with the above described processes.","While the invention has been described and illustrated with reference to specific embodiments, those skilled in the art will recognize that modification and variations may be made without departing from the principles of the invention as described above and set forth in the following claims. In particular, the invention may employed with any type of database including those not in relational format. Further, the invention may be employed in any database that uses statistics in any way to select a plan for processing a user defined query. Also, the statistics may be of any type and are not limited to those described above. Indeed, the statistics may be derived for single columns of data, multiple columns of data or for any other division of data. Accordingly, reference should be made to the appended claims as indicating the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other features of the invention are further apparent from the following detailed description of presently preferred exemplary embodiments of the invention taken in conjunction with the accompanying drawings, of which:",{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 9"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 10"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
