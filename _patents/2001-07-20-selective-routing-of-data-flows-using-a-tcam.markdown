---
title: Selective routing of data flows using a TCAM
abstract: The present invention relates to a method and system for supporting in a router a plurality of data flows using a ternary content addressable memory (TCAM) in which the number of accesses to write to the TCAM is optimized to improve efficiency of updating and subsequent look up. To accommodate the plurality of data flows, the TCAM is partitioned into at least two partitions in which a first portion includes indices having a higher priority and a second portion includes indices having a lower priority. For example, multiple protocol label switching (MPLS) flows and IP-Virtual Private Network (VPN) can be added to the first partition and policy based routing flows can be added to the second partition. During subsequent TCAM look-up of a prefix of an incoming packet the MPLS or IP-VPN flow will subsume any matching policy based routing flow, such as flows classified by an access control list or traffic manager flows.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07028098&OS=07028098&RS=07028098
owner: Nokia, Inc.
number: 07028098
owner_city: Irving
owner_country: US
publication_date: 20010720
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This invention relates to network communications and more particularly to selectively routing a plurality of data flows, such as, Multi-Protocol Label Switching (\u201cMPLS\u201d), Internet Protocol (IP) Virtual Private Network (\u201cVPN\u201d) data packets and policy based routing data packets, using a ternary content addressable memory (\u201cTCAM\u201d).","Network providers are interested in providing centralized network services to meet customer demands. By taking advantage of the latest advances in IP quality of service (\u201cQoS\u201d), multiprotocol label switching (\u201cMPLS\u201d), and service transformation technology (the conversion of non-IP services to IP), service providers can evolve dedicated IP infrastructures into a multi-service network architecture, as an alternative to operating separate service-specific networks.","MPLS is a standards-approved technology for speeding up network traffic flow and making it easier to manage. MPLS involves setting up a specific path for a given sequence of packets, identified by a label put in each packet, thereby saving the time needed for a router to look up the address to the next node. MPLS is called multiprotocol because it works with the Internet Protocol (\u201cIP\u201d), Asynchronous Transport Mode (\u201cATM\u201d), and various frame relay network protocols. MPLS allows most packets to be forwarded at the layer 2 (switching) level of the standard Open Systems Interconnection (\u201cOSI\u201d) rather than at the layer 3 (routing) level. In addition to moving traffic faster overall, MPLS makes it easy to manage a network for quality of service (\u201cQoS\u201d). For these reasons, the technique is expected to be readily adopted as networks begin to carry more and different mixtures of traffic.","The essence of MPLS is the generation of a short fixed-length \u201clabel\u201d that acts as a shorthand representation of an IP packet's header and the use of that label to make forwarding decisions about the packet. Typically, IP data packets are routed from source to destination through a series of routers which receive the IP data packet, read the source and\/or destination addresses and re-transmit the IP data packet either to the destination indicated as indicated by the IP destination addressed contained in the IP data packet or to another router which will forward the IP data packet until the IP data packet reaches the destination address, referred to as hop by hop routing. IP packet headers have fields for IP source and\/or destination addresses. Routing protocols such as Routing Information Protocol (\u201cRIP\u201d) and Open Shortest Path First (\u201cOSPF\u201d) enable each machine to understand which other machine in the \u201cnext hop\u201d that a packet should take toward its destination.","In MPLS, the IP packets are encapsulated with labels by the first MPLS device they encounter as they enter the network. The MPLS edge router analyses the contents of the IP header and selects an appropriate label with which to encapsulate the packet. In contrast to conventional IP routing, the router analysis can be based on more than just the destination address carried in the IP header. At all the subsequent nodes within the network the MPLS label, and not the IP header, is used to make the forwarding decision for the packet. As MPLS labeled packets leave the network, another edge router removes the labels. In MPLS terminology, the packet handling nodes or routers are called Label Switched Routers (LSRs). MPLS routers forward packets by making switching decisions based on the MPLS label. There are two broad categories of LSR: MPLS edge routers, which are high performance packet classifiers that apply (and remove) the requisite label at the edge of the network; and Core LSRs which are capable of processing the labeled packets at extremely high bandwidths.","Traditional routing solutions for efficient use of IP addressing have included using a content addressable memory (CAM) device for storing IP addresses. A CAM is a storage device that can be instructed to compare a specific pattern of comparand data with data stored in its associative CAM array. The entire CAM array, or segments thereof, are searched in parallel for a match with the comparand data. If a match exists, the CAM device indicates the match by asserting a match flag. Multiple matches may also be indicated by asserting a multiple match flag. The CAM device typically includes a priority encoder to translate the highest priority matching location into a match address or CAM index. The generally fast parallel search capabilities of CAMs have proven useful in many applications including address filtering and lookups in routers and networking equipment, policy enforcement in policy-based routers, pattern recognition for encryption\/decryption and compression\/decompression applications, and other pattern recognition applications.","Binary CAM cells are able to store two states of information: a logic one state and a logic zero state. Binary CAM cells typically include a RAM cell and a compare circuit. The compare circuit compares the comparand data with data stored in the RAM cell and drives a match line to a predetermined state when there is a match. Columns of binary CAM cells may be globally masked by mask data stored in one or more global mask registers. Ternary CAM cells are mask-per-bit CAM cells that effectively store three states of information, namely: a logic one state, a logic zero state, and a don't care state for compare operations. Ternary CAM cells typically include a second RAM cell that stores local mask data for the each ternary CAM cell. The local mask data masks the comparison result of the comparand data with the data stored in the first RAM cell such that the comparison result does not affect the match line. The ternary CAM cell offers more flexibility to the user to determine on an entry-per-entry basis which bits in a word will be masked during a compare operation.","U.S. Pat. No. 6,237,061 describes a system in which Classless Inter-Domain Routing (CIDR) addresses are pre-sorted and loaded into the ternary CAM such that the CAM entry having the longest prefix is located at the highest numerical address or index. The prefix portions of the CIDR addresses are used to set the masks cells associated with each CAM entry such that during compare operations, only the unmasked prefix portion of each CAM entry, which may correspond to a network ID field, is compared to an incoming destination address stored as the CAM search key. Since each CAM entry is masked according to an associated prefix value, the ternary CAM requires only one search operation to locate the CAM entry having the longest matching prefix.","Some other network services which are offered by network providers include Internet Protocol (IP) Virtual Private Networks (VPN) to interconnect various customer sites that are geographically dispersed. VPNs offer privacy and cost efficiency through network infrastructure sharing. U.S. Pat. No. 6,205,488 describes a virtual private network including multiple routers connected to a shared MPLS network which are configured to dynamically distribute VPN information across the shared MPLS network.","Policy-based routing services have also been described to allow customers to implement policies that selectively cause packets to take different paths. Conventional applications of policy based routing have included: source based transit provider selection for routing traffic originating from different sets of users through different Internet connections across the policy routers; quality of service (QOS) for prioritizing traffic based on the type of service; and cost savings for distributing traffic between low-bandwidth, low cost permanent paths and high-bandwidth, high cost, switched paths.","It is desirable to provide a method and system having fast search capabilities through use of a TCAM for classifying a plurality of types of data traffic and route lookup.","The present invention relates to a method and system for supporting a plurality of data flows in a router using a ternary content addressable memory (TCAM) in which the number of accesses to the TCAM is optimized to improve efficiency of updating and subsequent look up. To accommodate the plurality of data flows, the TCAM is partitioned into at least two partitions in which a first portion includes indices having a higher priority and a second portion includes indices having a lower priority. For example, multiple protocol label switching (MPLS) flows and IP-Virtual Private Network (VPN) can be added to the first partition and policy based routing flows can be added to the second partition. During subsequent TCAM look-up of a predetermined prefix of an incoming packet the MPLS or IP-VPN flow will subsume any matching policy based routing flow, such as flows classified by an access control list or traffic manager flows.","In the case of MPLS and IP-VPN flows, flows classified by connection index (CIX) and destination IP address (DA) and flows classified by CIX only are added from the top of the first partition of the TCAM and flows classified by DA only are added from the bottom of the first partition. This arrangement has the advantage that CIX and DA flows and CIX only flows subsume DA only flows at higher indices and CIX and DA flows and CIX only flows are separated from DA only flows to optimize the number of swaps needed when adding a new flow. To reduce the number of writes to the TCAM, a flow index space is used having entries corresponding to the TCAM space. Swaps are performed in the index space and only the changed entries are written to the TCAM.","The invention will be more fully described by reference to the following drawings.","Reference will now be made in greater detail to a preferred embodiment of the invention, an example of which is illustrated in the accompanying drawings. Wherever possible, the same reference numerals will be used throughout the drawings and the description to refer to the same or like parts.","Referring to  there is shown a high-level functional block diagram of the system architecture for classifying and routing flows in a router  in accordance with the teachings of the present invention. A flow is a set of data packets that obey a rule or policy identified from the content of the packet header fields of the data packets. The packet header fields can include for example the source IP address, destination IP address, source port, destination port, protocol identification, type of service (TOS), connection index (CIX) and other fields. The architecture comprises three major elements, control plane , data plane  and layer  interface . The interaction between the various elements is represented by the series of arrows between corresponding elements. Control plane  which can be implemented in software is comprised of flow manager , data plane control interface , flow core control  and IP, User Datagram Protocol (\u201cUDP\u201d) and Transmission Control Protocol (\u201cTCP\u201d) . Data plane  which can be implemented in hardware is comprised of flow classifier , IP forwarder  and label forwarder . IP traffic and IP control traffic  is received at flow classifier . Flow classifier  interacts with flow manager  and flow core control  for classifying and routing IP traffic and IP control traffic  and applying destination routes through label forwarder , in the case of MPLS flows, or IP forwarder  in the case of non-MPLS flows. Flow core control  can comprise software modules such as, for example, TEP, red manager, label manager, route watch, routing manager and FIB and an IP routing data base. While the present invention is particularly well suited for use with the AmberNetwork ASR 2000 and ASR 2020 devices as described herein, it is equally suited for use with other routers having similar capabilities and features. The AmberNetwork ASR 2000 and ASR 2020 technical manuals are incorporated herein by reference as if fully set out.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["20","15","20","30","30","30","32","32","32","32","32","32","32"],"i":["a ","n ","a ","n. "]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["33","30","34","33","30","34","33","34","33","33","30","33","30"]},"Flow manager  is used to provide data structure organization of flow TCAM . Referring to , flow manager  can partition indices  into one or more logical partitions. Flows are assigned to partitions depending on a desired priority for the type of flow. In this embodiment, indices  are partitioned into partition which partition includes lowest index and partition which partition includes highest index . A FTCAM_Partition index is located between partition and partition . In the embodiment shown in , MPLS and IP-VPN flows are determined to have the highest priority and are assigned to partition . Policy-based routing flows are determined to have lower priority and are assigned to partition . Policy based routing flows can include data classified by Access Control Lists (ACL) flows and traffic manager (TE) flows. Accordingly, MPLS flows and IP-VPN flows which have been assigned higher priority will be found in a subsequent lookup in flow TCAM  before ACL flows and TE flows which have been assigned a lower priority and MPLS flows or P VPN flows will subsume any matching ACL flows and TE flows in flow TCAM .","Flow index space  can be maintained in flow manager  to correspond to data organization of flow TCAM . All flow swapping can be performed in flow index space  and only the changed entries are written to the flow TCAM .","In an embodiment of the present invention, an array of pointers and prefix trees are used to store MPLS and IP-VPN flows in flow index space , as shown in . Flows which are classified by connection index CIX and destination IP address (DA) fields of the packet header, are stored in CIX prefix tree . Each connection index (CIX1\u2013CIX16K) is associated with node \u2013of prefix tree . A destination IP address based lookup is performed to find the longest match of a prefix stored in a respective node \u2013. Flows are maintained in order to match the correct flow during flow TCAM  look up. A variable gMaxCixDaFix is used in flow index space  to indicate the maximum flow TCAM Index of the CIX and DA flows and CIX only flows. Flows which are classified by destination IP address only are stored in DA prefix tree . Each DA is associated with node  of prefix tree .","A variable gMinDaOnlyFix is used in flow index space  to indicate the minimum flow TCAM index for DA only flows","A software module can be implemented in flow manager  for MPLS and IP-VPN flow organization of TCAM . A representative software module is illustrated in Table 1.",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef struct_flowlkuptabentry"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FM_PR_TREE *pfTreePtr;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} FM_FLOWLKUP_TABLE_ENTRY;"},{"entry":"typedef struct _lookuptable"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FM_FLOWLKUP_TABLE_ENTRY"]},{"entry":[{},"flowLkupTable[FM_MAX_CIX];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}FM_FLOWLKUP_TABLE;"},{"entry":"typedef struct _fmprtreenode"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PR_NODE\u2003\u2003prNode;\u2003\u2003\u2003\/* PR_NODE contains"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"RB_NODE + prefix and mask *\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FM_FLOW\u2003\u2003flowObject;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}FM_PR_NODE;"},{"entry":"typedef struct _fmprefixtree"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PR_TREE\u2003\u2003\u2003prTree; \/* root of prefix tree *\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} FM_PR_TREE;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 5A\u20135D","b":["30","30","36","50","50","50","50","50","50","50","34","33","30"],"i":["a ","a ","b","a ","b ","a","a","b"]},"During adding of flows classified by CIX, DA or CIX only to TCAM , a free entry in TCAM  is searched from lowest index of lower index portion . The free entry is referred to as Fix. During adding of flows classified as DA flows, a free entry in TCAM  is searched from highest index of highest index portion . An index corresponding to a maximum value of lowest index portion is established as gMaxCixDaFix and an index corresponding to minimum value of a highest index portion is established as gMinDaOnlyFix. In this manner, maximum free space  is achieved between lower index portion and higher index portion , thereby maintaining the CIX, DA flows and CIX only flows together and the DA only flows together and separately the CIX, DA flows and CIX only flows from the DA flows. During deletion of flows classified by CIX, DA or CIX only from TCAM , the entry at a corresponding index  is invalidated in flow space . Thereafter, during subsequent adding of flows classified by CIX, DA or CIX only, the invalidated entry is found during a search for free entries from lowest index of lower index portion the flow is added to re-use the previously invalidated entry. Accordingly, only if TCAM  is substantially at capacity will it be necessary to swap a DA only flow to insert a CIX, DA or CIX only flow or to swap a CIX, DA flow or CIX only flow to insert a DA only flow.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 5A\u20135B","FIGS. 5C\u20135D"],"b":["30","32","32","32","30","32"],"i":["a ","b","a ","b "]},"A software module can be implemented in flow manager  for adding CIX, DA flows and CIX only flows to TCAM . A pointer to the current flow is referred to as pflow. A pointer to the free entry is referred to as fix. The TCAM flow entry  is written to flow TCAM  by an AdjustAndWriteCixDA(pflow, fix) function, described below in order to adjust the writing at TCAM flow entry  into flow TCAM  based on local mask  of other DAs in the same CIX. A representative software module is illustrated in Table 2.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1. Begin insertCixDaFlow (pFlow)"},{"entry":"2. Starting at top of TCAM partition, searching downwards, find first"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"free FTCAM entry, say \u2018Fix\u2019."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"3. if ((gMinDaOnlyFix == 0) || (Fix < gMinDaOnlyFix))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{","\/* No <DA> only flows are present *\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* Or <DA> only flows exist, but Fix is above them *\/"]},{"entry":[{},"AdjustAndWriteCixDA (pFlow, Fix) \/* take care of subsuming"]},{"entry":[{},"issues with other DAs in same Cix, based on subnet masks *\/"]},{"entry":[{},"Set gMaxCixDaFix"]},{"entry":[{},"return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* There are DA Only flows present *\/"]},{"entry":[{},"\/* Free flow is in between the <DA> only flows *\/"]},{"entry":[{},"\/* Get Flow currently at gMinDaOnlyFix *\/"]},{"entry":[{},"pOtherFlow = GetFlowAtIndex (gMinDaOnlyFlow);"]},{"entry":[{},"AdjustAndWriteDA (pOtherFlow, Fix);"]},{"entry":[{},"\/* Write Flow to be added at gMinDaOnlyFix *\/"]},{"entry":[{},"AdjustAndWriteCixDA (pFlow, gMinDaOnlyFix);"]},{"entry":[{},"set gMaxCixDaFix"]},{"entry":[{},"set gMinDaOnlyFix"]},{"entry":[{},"Return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"4. End of insertCixDaFlow"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"During inserting of CIX, DA flows, CIX only flow and DA only flows the flows in flow TCAM  are adjusted such that flow TCAM  is ordered to have the TCAM entry with the longest prefix located at the index having highest priority which is the lowest index or lowest numerical value and the TCAM entry followed by decreasing prefix values with the shortest prefix is located at the index having lowest priority which is the highest index or highest numerical value. Tables 3 and 4 illustrate respective software modules which can be implemented in flow manager  for adjusting and writing DA only flows and adjusting and writing Fix and DA flows and which modules are used in the software module illustrated in Table 1.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1.","Begin AdjustAndWriteDA(pFlow)."]},{"entry":["2.","Using the mask length of the destination IP address in the flow, first"]},{"entry":[{},"fix the shorter-prefix flow in prefix tree 42. If a shorter prefix node is"]},{"entry":[{},"found in the <DA> only prefix tree 42, and the index of the found"]},{"entry":[{},"node is less than the index of the pFlow node, swap the two flows"]},{"entry":[{},"and write only the second flow to flow TCAM 30. Then continue"]},{"entry":[{},"search with the removed flow to locate routes that are subsumed."]},{"entry":["3.","Write the last best flow into its correct location and remember this so"]},{"entry":[{},"that it doesn't have to be re-written again below."]},{"entry":["4.","At this point pFlow is pointing to the shortest-prefix flow whose"]},{"entry":[{},"index had to be adjusted to follow a largest prefix match (LPM)"]},{"entry":[{},"property and that matched the original flow that had to be inserted in"]},{"entry":[{},"flow TCAM 30."]},{"entry":["5.","Fix the longer-prefix flows in TCAM 30. Starting from mask length"]},{"entry":[{},"32 and going downwards to current mask length, find largest flow"]},{"entry":[{},"index flow that gets subsumed."]},{"entry":["6.","If the found flows flow index is greater than the index of current"]},{"entry":[{},"flow, it means that a flow with a longer prefix to the same destination"]},{"entry":[{},"is before the current one which has a shorter prefix. In this case swap"]},{"entry":[{},"the two flows in TCAM 30 and fix the index values in the flows."]},{"entry":[{},"Write the second flow to TCAM 30."]},{"entry":["7.","Write the last best flow into its correct location. If this is same flow"]},{"entry":[{},"as that already written in step 3 above, TCAM 30 is not written again."]},{"entry":["8.","End of AdjustAndWriteDA(pFlow)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1.","Begin adjustAndWriteCixDA (pFlow, Fix)"]},{"entry":["2.","Using the mask length of the destination IP address in the flow, first"]},{"entry":[{},"fix the shorter-prefix flow in prefix tree 40. If a shorter prefix node"]},{"entry":[{},"is found and the index of the found node is less than the index of the"]},{"entry":[{},"pFlow node, swap the two flows and write only the second flow to"]},{"entry":[{},"flow TCAM 30. Then continue search with the removed flow to"]},{"entry":[{},"locate routes that are subsumed."]},{"entry":["3.","Write the last best flow into its correct location and remember this so"]},{"entry":[{},"that it doesn't have to be re-written again below."]},{"entry":["4.","At this point pFlow is pointing to the shortest-prefix flow whose"]},{"entry":[{},"index had to be adjusted to follow LPM property and that matched"]},{"entry":[{},"the original flow that had to be inserted in flow TCAM 30."]},{"entry":["5.","Fix the longer-prefix flows in TCAM 30. Starting from mask length"]},{"entry":[{},"32 and going downwards to current mask length, find largest flow"]},{"entry":[{},"index flow that gets subsumed."]},{"entry":["6.","If the found flows flow index is greater than the index of current"]},{"entry":[{},"flow, it means that a flow with a longer prefix to the same destination"]},{"entry":[{},"is before the current one which has a shorter prefix. In this case swap"]},{"entry":[{},"the two flows in the TCAM 30 and fix the index values in the flows."]},{"entry":[{},"Write the second flow to TCAM 30."]},{"entry":["7.","Write the last best flow into its correct location. If this is same flow"]},{"entry":[{},"as that already written in step 3 above, TCAM 30 is not written"]},{"entry":[{},"again."]},{"entry":["8.","End of AdjustAndWriteCIXDA(pFlow, Fix)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIGS. 6A\u20136B","FIGS. 6C\u20136D"],"b":["30","32","32","32","32"],"i":["b ","a","b ","a "]},"A software module can be implemented in flow manager  for adding DA flows to TCAM . A representative software module is illustrated in Table 5.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1. Begin insertDaOnlyFlow(pFlow)."]},{"entry":[{},"2. Starting at the bottom of the TCAM partition, searching upwards,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"find the first free FTCAM entry, say at index \u2018Fix\u2019."]},{"entry":[{},"If failed (TCAM partition is already full), return \u22121."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"3. if (Fix > gMaxCixDaFix)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{","\/* Flow index is located after both <Cix, DA> and"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Cix> only flows in the TCAM*\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* OR gMaxCixDaFix = 0, i.e. there are no"]},{"entry":[{},"<Cix, DA> flows yet *\/"]},{"entry":[{},"AdjustAndWriteCixDA (pFlow, Fix) \/* take care of"]},{"entry":[{},"subsuming issues with other DAs in same Cix, based"]},{"entry":[{},"on subnet masks *\/"]},{"entry":[{},"Set gMaxCixDaFix"]},{"entry":[{},"return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/*Fix lies in between <Cix, Da> flows*\/"]},{"entry":[{},"\/*Get flow currently at gMaxCixDaFix at flowIndex *\/"]},{"entry":[{},"pOtherFlow = GetFlowAtIndex(gMaxCixDaFix);"]},{"entry":[{},"AdjustAndWriteCixDA (pOtherFlow, Fix) \/*take care of"]},{"entry":[{},"subsuming issues with other DAs in same Cix, based on"]},{"entry":[{},"subnet masks *\/"]},{"entry":[{},"\/*Write flow to be added at gMaxCixDaFix *\/"]},{"entry":[{},"AdjustAndWriteDA (pFlow, gMaxCixOnlyFix)"]},{"entry":[{},"Set gMinDaOnlyFix"]},{"entry":[{},"Set gMaxCixDaFix"]},{"entry":[{},"Return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"4. End of insertDaOnlyFlow"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The clients of flow manager  are responsible for removing flows in TCAM  if an interface goes down. Flow manager  provides an Application Programming Interface (APIs) to withdraw routes based on the application handle. For example, if an IP circuit goes down the connection manager informs the IP task and the VPN manager receives this alarm. The VPN manager in turn withdraws the routes from flow TCAM  based on the circuit identifiers.","A software module can be implemented in flow manager  for removing flows in TCAM . A representative software module is illustrated in Table 6.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1.","Check that the flowId is within limits."]},{"entry":["2.","Get Flow corresponding to flowId: pFlow = GetFlowAtIndex(flowId)"]},{"entry":["3.","Find the node in the correct tree. If pFlow has Cix, search prefix tree"]},{"entry":[{},"40 for this Cix, else search prefix tree 42."]},{"entry":["4.","Remove found node, adjust respective tree and free up the node"]},{"entry":[{},"memory."]},{"entry":["5.","Free up Flow Space index entry."]},{"entry":["6.","if flowId == gMaxCixDaFix or gMinDaOnlyFix, modify these"]},{"entry":[{},"variables. If flow at gMaxCixDaFix index is being removed, reduce"]},{"entry":[{},"gMaxCixDaFix until it becomes the index of a valid <Cix,DA> or"]},{"entry":[{},"<Cix> only flow. If flow at gMinDaOnlyFixindex is being removed,"]},{"entry":[{},"increase gMinDaOnlyFix until it becomes the index of a valid <DA>"]},{"entry":[{},"only flow."]},{"entry":["7.","Free up the flow memory and invalidate the flow in TCAM 30."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"ACL flows and traffic manager (TE) flows are internally stored in a flow index space corresponding to the Flow TCAM by the Flow Manager , as shown in . The ACL flows and TE flows are strictly ordered based on the command line interface (CLI) defined access control lists (ACLs). ACLs are typically applied to network interfaces to permit or deny certain kinds of network traffic. All packets matching a particular ACL flow will be allowed to pass through and a network route is determined. All packets not matching the ACL flow will be dropped or a policing or shaping of type of service (\u201cTOS\u201d) operation will be performed on the packets. A global access-list is used at all interfaces.","The ACL and TE flows are maintained in order when added to flow TCAM . Flows are added to the next available index entry located in flow TCAM  starting from top  of partition . Partition is further subdivided into portions and . Portion is used for ACLs applied to interfaces and portion is used for global ACLs which will be used if no other ACL matches. A GACL_PARTITION variable can be used to define the partition size of portion and . A gMaxACLFix variable defines a maximum flow TCAM index for ACL and TE flows in portion . A gGlobalACLFix variable defines a maximum flow TCAM index for Global ACL & TE flows in portion ","Policy based ACL and TE flows are added at the location of the gMaxACLFix variable and the gMaxACLFix variable is incremented. If gMaxACLFix becomes equal to the GACL_PARTITION variable, portion is full and no more ACL flows can be added until some flows are deleted. An ACL flow can specify a range of source or destination ports. The ACL flow that specifies a range of source or destination ports is mapped to multiple flows, with a local mask  to cover a portion of the range. Accordingly, the optimal number of flows with different masks are determined to cover the specified range. For the flows which map to multiple flows in the TCAM, an application programming interface (API) can create peer flows with an assigned local mask  and add the peer flows along with the parent flow to flow TCAM  which flows can be managed by flow manager .","Global ACL flows are added at gGlobalACLFix variable and then the gGlobalACLFix variable is incremented. If the gGlobalACLFix variable becomes equal to a FM_MAX_FIX variable, then no more Global ACL flows can be added until some flows are deleted from TCAM .","Flow manager  includes software modules which are responsible for removing flows from TCAM . For single flow deletion, the flow will be removed from flow index space  and is invalidated in flow TCAM . First API  is used to delete a single flow from TCAM . If the single flow has peer flows all of the peers will also be deleted. Flows remaining in flow TCAM  are compacted immediately in order to fill up the vacant flow space. All flows after the deleted flow are moved up by one index and are written to TCAM . The value of the gMaxACLFix variable is adjusted accordingly.","For multiple flow deletion, all flows in the supplied flow list will be removed and then compaction will be performed on remaining flows. A second API  is used to delete a list of flows for deleting multiple flows from TCAM . The first empty flow space is filled first by the next available occupied flow and this is repeated until all flows are compacted such that all empty flow spaces before the gMaxACLFix variable are filled up. The value of the gMaxACLFix variable is adjusted accordingly.","In view of the foregoing description, numerous modifications and alternative embodiments of the invention will be apparent to those skilled in the art. It should be clearly understood that the particular exemplary computer code can be implemented in a variety of ways in a variety of languages, which are equally well suited for a variety of hardware platforms.","It is to be understood that the above-described embodiments are illustrative of only a few of the many possible specific embodiments which can represent applications of the principles of the invention. Numerous and varied other arrangements can be readily devised in accordance with these principles by those skilled in the art without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
