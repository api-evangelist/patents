---
title: Graphics data synchronization with multiple data paths in a graphics accelerator
abstract: A system and method for preserving the order of data items through a divergence-and-reconvergence of two or more paths in a hardware device. A host processor may write a first token to a first path in the hardware device. A convergence unit in the hardware device may receive and store the first token in a synchronization register. The host processor may poll the synchronization register to determine when the first token arrives in the synchronization register. In response to determining that the first token has arrived in the synchronization register, the host processor may safely write a sequence of one or more data items to a second path in the hardware device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06864892&OS=06864892&RS=06864892
owner: Sun Microsystems, Inc.
number: 06864892
owner_city: Santa Clara
owner_country: US
publication_date: 20020308
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates generally to the field of pipelined computation and, more particularly, to a protocol and corresponding hardware mechanism for guaranteeing a proper ordering of data processed and\/or transmitted through separate paths in a hardware device.","2. Description of the Related Art","A host computer may send data (e.g. graphics data) to a hardware device (e.g. a graphics accelerator). The hardware device may include a system of processing units. The processing units may be organized into paths or pipelines. Some of the paths may diverge. Thus, the data items received by the hardware device may get sent down different paths (e.g. some data items going down one path, and other data items going down another path and so on). At some point, the paths may merge (i.e. rejoin). Because the different paths may have different latencies, the stream of data items may have a different order after the merge point than prior to diverging. This disturbance of ordering may have adverse effects on system performance (e.g. the visual quality of the video output generated by a hardware accelerator).","One possible mechanism for preserving the order of data items after the merge point (relative to the order they had prior to the point of divergence of the paths) may be referred to as \u201cwaiting for idle\u201d. The host software may (a) write an attribute appropriate for a first data item targeted for a first path, (b) write the first data item, and (c) poll a \u201cbusy\u201d bit. When the hardware device is not busy (i.e. idle), the host computer may change attributes, i.e. may write a second attribute value appropriate for a second data item targeted for a second path.","Each processing element in a path may generate a status bit which indicates whether it is busy or idle. It may require complex logic to ensure that a path always reports busy whenever any data is in transit anywhere in the path. This complex logic may cause timing problems that limit performance. The status bit of each processing unit in a path may have a logical OR connection with a centralized busy reporting register. These connections to the centralized register take up chip space (or board space) which could have been used for other purposes. Thus, the \u201cwaiting for idle\u201d method is inefficient. Therefore, there exists a need for a more efficient mechanism of preserving the order of data items after a data merge point in a hardware device (relative to the order the data items had prior to a point of divergence).","In one set of embodiments, a method for preserving the order of data items through a divergence-and-reconvergence of two or more paths in a hardware device may be arranged as follows. A host processor may write a first token to a first path in the hardware device. A convergence unit in the hardware device may receive and store the first token in a synchronization register. The host processor may poll the synchronization register to determine when the first token arrives in the synchronization register. In response to determining that the first token has arrived in the synchronization register, the host processor may write a sequence of one or more data items to a second path in the hardware device.","In another set of embodiments, a hardware device supporting an order preservation protocol may be configured as follows. The hardware device may include a first path, a second path, and a convergence unit where the two paths merge. The convergence unit is configured to receive output data from the first path and second path. Furthermore, the convergence unit is configured to identify any token in the output data from the first path and second path, and to store the token in a synchronization register. The synchronization register is readable by an external device such as a host processor.","The hardware device may include a bus interface for receiving data items from the external device. The bus interface may be configured to send each of the data items to the first path or the second path.","In yet another set of embodiments, a graphics system may be configured as follows. The graphics system may include a raster pipe and a direct path. The raster pipe may be configured to operate on geometry data to generate samples, and the direct path may be configured to operate on pixel data. The convergence unit may be configured to merge a first data stream including samples from the raster pipe and a second data stream including the pixel data from the direct path, and to forward the merged data stream to a frame buffer. The convergence unit may be further configured to identify an occurrence of a token in the merged data stream and to store the token in a synchronization register. The synchronization register is readable by an external device such as a host processor.","In yet another set of embodiments, software writes some value to a first pipe. The software then polls (i.e. reads) the synchronization register until the expected value appears in the synchronization register. (The value propagates through the first pipe to the synchronization register.) The appearance of the expected value in the synchronization register implies that the register.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note, the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore, note that the word \u201cmay\u201d is used throughout this application in a permissive sense (i.e., having the potential to, being able to), not a mandatory sense (i.e., must).\u201d The term \u201cinclude\u201d, and derivations thereof, mean \u201cincluding, but not limited to\u201d. The term \u201cconnected\u201d means \u201cdirectly or indirectly connected\u201d, and the term \u201ccoupled\u201d means \u201cdirectly or indirectly connected\u201d.","Computer System\u2014",{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 1","b":"80"},"As shown, the computer system  includes a system unit  and a video monitor or display device  coupled to the system unit . The display device  may be any of various types of display monitors or devices (e.g., a CRT, LCD, or gas-plasma display). Various input devices may be connected to the computer system, including a keyboard  and\/or a mouse , or other input device (e.g., a trackball, digitizer, tablet, six-degree of freedom input device, head tracker, eye tracker, data glove, or body sensors). Application software may be executed by the computer system  to display graphical objects on display device .","Computer System Block Diagram\u2014",{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 2","b":["1","80","102","104","104","106","104"]},"Host processor  may include one or more processors of varying types, e.g., microprocessors, multi-processors and CPUs. The system memory  may include any combination of different types of memory subsystems such as random access memories (e.g., static random access memories or \u201cSRAMs,\u201d synchronous dynamic random access memories or \u201cSDRAMs,\u201d and Rambus dynamic random access memories or \u201cRDRAMs,\u201d among others), read-only memories, and mass storage devices. The system bus or host bus  may include one or more communication or host computer buses (for communication between host processors, CPUs, and memory subsystems) as well as specialized subsystem buses.","In , a graphics system  is coupled to the high-speed memory bus . The graphics system  may be coupled to the bus  by, for example, a crossbar switch or other bus connectivity logic. It is assumed that various other peripheral devices, or other buses, may be connected to the high-speed memory bus . It is noted that the graphics system  may be coupled to one or more of the buses in computer system  and\/or may be coupled to various types of buses. In addition, the graphics system  may be coupled to a communication port and thereby directly receive graphics data from an external source, e.g., the Internet or a network. As shown in the figure, one or more display devices  may be connected to the graphics system .","Host CPU  may transfer information to and from the graphics system  according to a programmed input\/output (I\/O) protocol over host bus . Alternately, graphics system  may access system memory  according to a direct memory access (DMA) protocol or through intelligent bus mastering.","A graphics application program conforming to an application programming interface (API) such as OpenGL\u00ae or Java 3D\u2122 may execute on host CPU  and generate commands and graphics data that define geometric primitives such as polygons for output on display device . Host processor  may transfer the graphics data to system memory . Thereafter, the host processor  may operate to transfer the graphics data to the graphics system  over the host bus . In another embodiment, the graphics system  may read in geometry data arrays over the host bus  using DMA access cycles. In yet another embodiment, the graphics system  may be coupled to the system memory  through a direct port, such as the Advanced Graphics Port (AGP) promulgated by Intel Corporation.","The graphics system may receive graphics data from any of various sources, including host CPU  and\/or system memory , other memory, or from an external source such as a network (e.g. the Internet), or from a broadcast medium, e.g., television, or from other sources.","Note while graphics system  is depicted as part of computer system , graphics system  may also be configured as a stand-alone device (e.g., with its own built-in display). Graphics system  may also be configured as a single chip device or as part of a system-on-a-chip or a multi-chip module. Additionally, in some embodiments, certain of the processing operations performed by elements of the illustrated graphics system  may be implemented in software.","Graphics System\u2014",{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 3","b":["112","112","112","14","18","20","22","24","112","26","28","14","18"]},"In some embodiments, one or more of these components may be removed. For example, the texture buffer may not be included in an embodiment that does not provide texture mapping. In other embodiments, all or part of the functionality incorporated in either or both of the media processor or the hardware accelerator may be implemented in software.","In one set of embodiments, media processor  is one integrated circuit and hardware accelerator is another integrated circuit. In other embodiments, media processor  and hardware accelerator  may be incorporated within the same integrated circuit. In some embodiments, portions of media processor  and\/or hardware accelerator  may be included in separate integrated circuits.","As shown, graphics system  may include an interface to a host bus such as host bus  in  to enable graphics system  to communicate with a host system such as computer system . More particularly, host bus  may allow a host processor to send commands to the graphics system . In one embodiment, host bus  may be a bi-directional bus.","Media Processor\u2014",{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 4","b":["14","14","112","80","80","112","14"]},"Transformation refers to the spatial manipulation of objects (or portions of objects) and includes translation, scaling (e.g. stretching or shrinking), rotation, reflection, or combinations thereof. More generally, transformation may include linear mappings (e.g. matrix multiplications), nonlinear mappings, and combinations thereof.","Lighting refers to calculating the illumination of the objects within the displayed image to determine what color values and\/or brightness values each individual object will have. Depending upon the shading algorithm being used (e.g., constant, Gourand, or Phong), lighting may be evaluated at a number of different spatial locations.","As illustrated, media processor  may be configured to receive graphics data via host interface . A graphics queue  may be included in media processor  to buffer a stream of data received via the accelerated port of host interface . The received graphics data may include one or more graphics primitives. As used herein, the term graphics primitive may include polygons, parametric surfaces, splines, NURBS (non-uniform rational B-splines), sub-divisions surfaces, fractals, volume primitives, voxels (i.e., three-dimensional pixels), and particle systems. In one embodiment, media processor  may also include a geometry data preprocessor  and one or more microprocessor units (MPUs) . MPUs  may be configured to perform vertex transformation, lighting calculations and other programmable functions, and to send the results to hardware accelerator . MPUs  may also have read\/write access to texels (i.e. the smallest addressable unit of a texture map) and pixels in the hardware accelerator . Geometry data preprocessor  may be configured to decompress geometry, to convert and format vertex data, to dispatch vertices and instructions to the MPUs , and to send vertex and attribute tags or register data to hardware accelerator .","As shown, media processor  may have other possible interfaces, including an interface to one or more memories. For example, as shown, media processor  may include direct Rambus interface  to a direct Rambus DRAM (DRDRAM) . A memory such as DRDRAM  may be used for program and\/or data storage for MPUs . DRDRAM  may also be used to store display lists and\/or vertex texture maps.","Media processor  may also include interfaces to other functional components of graphics system . For example, media processor  may have an interface to another specialized processor such as hardware accelerator . In the illustrated embodiment, controller  includes an accelerated port path that allows media processor  to control hardware accelerator . Media processor  may also include a direct interface such as bus interface unit (BIU) . Bus interface unit  provides a path to memory  and a path to hardware accelerator  and video output processor  via controller .","Hardware Accelerator\u2014","One or more hardware accelerators  may be configured to receive graphics instructions and data from media processor  and to perform a number of functions on the received data according to the received instructions. For example, hardware accelerator  may be configured to perform rasterization, 2D and\/or 3D texturing, pixel transfers, imaging, fragment processing, clipping, depth cueing, transparency processing, set-up, and\/or screen space rendering of various graphics primitives occurring within the graphics data.","Clipping refers to the elimination of graphics primitives or portions of graphics primitives that lie outside of a 3D view volume in world space. The 3D view volume may represent that portion of world space that is visible to a virtual observer (or virtual camera) situated in world space. For example, the view volume may be a solid truncated pyramid generated by a 2D view window, a viewpoint located in world space, a front clipping plane and a back clipping plane. The viewpoint may represent the world space location of the virtual observer. In most cases, primitives or portions of primitives that lie outside the 3D view volume are not currently visible and may be eliminated from further processing. Primitives or portions of primitives that lie inside the 3D view volume are candidates for projection onto the 2D view window.","Set-up refers to mapping primitives to a three-dimensional viewport. This involves translating and transforming the objects from their original \u201cworld-coordinate\u201d system to the established viewport's coordinates. This creates the correct perspective for three-dimensional objects displayed on the screen.","Screen-space rendering refers to the calculations performed to generate the data used to form each pixel that will be displayed. For example, hardware accelerator  may calculate \u201csamples.\u201d Samples are points that have color information but no real area. Samples allow hardware accelerator  to \u201csuper-sample,\u201d or calculate more than one sample per pixel. Super-sampling may result in a higher quality image.","Hardware accelerator  may also include several interfaces. For example, in the illustrated embodiment, hardware accelerator  has four interfaces. Hardware accelerator  has an interface  (referred to as the \u201cNorth Interface\u201d) to communicate with media processor . Hardware accelerator  may receive commands and\/or data from media processor  through interface . Additionally, hardware accelerator  may include an interface  to bus . Bus  may connect hardware accelerator  to boot PROM  and\/or video output processor . Boot PROM  may be configured to store system initialization data and\/or control code for frame buffer . Hardware accelerator  may also include an interface to a texture buffer . For example, hardware accelerator  may interface to texture buffer  using an eight-way interleaved texel bus that allows hardware accelerator  to read from and write to texture buffer . Hardware accelerator  may also interface to a frame buffer . For example, hardware accelerator  may be configured to read from and\/or write to frame buffer  using a four-way interleaved pixel bus.","The vertex processor  may be configured to use the vertex tags received from the media processor  to perform ordered assembly of the vertex data from the MPUs . Vertices may be saved in and\/or retrieved from a mesh buffer .","The render pipeline  may be configured to rasterize 2D window system primitives and 3D primitives into fragments. A fragment may contain one or more samples. Each sample may contain a vector of color data and perhaps other data such as alpha and control tags. 2D primitives include objects such as dots, fonts, Bresenham lines and 2D polygons. 3D primitives include objects such as smooth and large dots, smooth and wide DDA (Digital Differential Analyzer) lines and 3D polygons (e.g. 3D triangles).","For example, the render pipeline  may be configured to receive vertices defining a triangle, to identify fragments that intersect the triangle.","The render pipeline  may be configured to handle full-screen size primitives, to calculate plane and edge slopes, and to interpolate data (such as color) down to tile resolution (or fragment resolution) using interpolants or components such as:\n\n","In embodiments using super-sampling, the sample generator  may be configured to generate samples from the fragments output by the render pipeline  and to determine which samples are inside the rasterization edge. Sample positions may be defined by user-loadable tables to enable stochastic sample-positioning patterns.","Hardware accelerator  may be configured to write textured fragments from 3D primitives to frame buffer . The render pipeline  may send pixel tiles defining r, s, t and w to the texture address unit . The texture address unit  may use the r, s, t and w texture coordinates to compute texel addresses (e.g. addresses for a set of neighboring texels) and to determine interpolation coefficients for the texture filter . The texel addresses are used to access texture data (i.e. texels) from texture buffer . The texture buffer  may be interleaved to obtain as many neighboring texels as possible in each clock. The texture filter  may perform bilinear, trilinear or quadlinear interpolation. The pixel transfer unit  may also scale and bias and\/or lookup texels. The texture environment  may apply texels to samples produced by the sample generator . The texture environment  may also be used to perform geometric transformations on images (e.g., bilinear scale, rotate, flip) as well as to perform other image filtering operations on texture buffer image data (e.g., bicubic scale and convolutions).","In the illustrated embodiment, the pixel transfer MUX  controls the input to the pixel transfer unit . The pixel transfer unit  may selectively unpack pixel data received via north interface , select channels from either the frame buffer  or the texture buffer , or select data received from the texture filter  or sample filter .","The pixel transfer unit  may be used to perform scale, bias, and\/or color matrix operations, color lookup operations, histogram operations, accumulation operations, normalization operations, and\/or min\/max functions. Depending on the source of (and operations performed on) the processed data, the pixel transfer unit  may output the processed data to the texture buffer  (via the texture buffer MUX ), the frame buffer  (via the texture environment unit  and the fragment processor ), or to the host (via north interface ). For example, in one embodiment, when the pixel transfer unit  receives pixel data from the host via the pixel transfer MUX , the pixel transfer unit  may be used to perform a scale and bias or color matrix operation, followed by a color lookup or histogram operation, followed by a min\/max function. The pixel transfer unit  may then output data to either the texture buffer  or the frame buffer .","Fragment processor  may be used to perform standard fragment processing operations such as the OpenGL\u00ae fragment processing operations. For example, the fragment processor  may be configured to perform the following operations: fog, area pattern, scissor, alpha\/color test, ownership test (WID), stencil test, depth test, alpha blends or logic ops (ROP), plane masking, buffer selection, pick hit\/occlusion detection, and\/or auxiliary clipping in order to accelerate overlapping windows.","Texture Buffer ","Texture buffer  may include several SDRAMs. Texture buffer  may be configured to store texture maps, image processing buffers, and accumulation buffers for hardware accelerator . Texture buffer  may have many different capacities (e.g., depending on the type of SDRAM included in texture buffer ). In some embodiments, each pair of SDRAMs may be independently row and column addressable.","Frame Buffer ","Graphics system  may also include a frame buffer . In one embodiment, frame buffer  may include multiple memory devices such as 3D-RAM memory devices manufactured by Mitsubishi Electric Corporation. Frame buffer  may be configured as a display pixel buffer, an offscreen pixel buffer, and\/or a super-sample buffer. Furthermore, in one embodiment, certain portions of frame buffer  may be used as a display pixel buffer, while other portions may be used as an offscreen pixel buffer and sample buffer.","Video Output Processor\u2014","A video output processor  may also be included within graphics system . Video output processor  may buffer and process pixels output from frame buffer . For example, video output processor  may be configured to read bursts of pixels from frame buffer . Video output processor  may also be configured to perform double buffer selection (dbsel) if the frame buffer  is double-buffered, overlay transparency (using transparency\/overlay unit ), plane group extraction, gamma correction, psuedocolor or color lookup or bypass, and\/or cursor generation. For example, in the illustrated embodiment, the output processor  includes WID (Window ID) lookup tables (WLUTs)  and gamma and color map lookup tables (GLUTs, CLUTs) . In one embodiment, frame buffer  may include multiple 3DRAM64s  that include the transparency overlay  and all or some of the WLUTs . Video output processor  may also be configured to support two video output streams to two displays using the two independent video raster timing generators . For example, one raster (e.g., A) may drive a 1280\u00d71024 CRT while the other (e.g., B) may drive a NTSC or PAL device with encoded television video.","DAC  may operate as the final output stage of graphics system . The DAC  translates the digital pixel data received from GLUT\/CLUTs\/Cursor unit  into analog video signals that are then sent to a display device. In one embodiment, DAC  may be bypassed or omitted completely in order to output digital pixel data in lieu of analog video signals. This may be useful when a display device is based on a digital technology (e.g., an LCD-type display or a digital micro-mirror display).","DAC  may be a red-green-blue digital-to-analog converter configured to provide an analog video output to a display device such as a cathode ray tube (CRT) monitor. In one embodiment, DAC  may be configured to provide a high resolution RGB analog video output at dot rates of 240 MHz. Similarly, encoder  may be configured to supply an encoded video signal to a display. For example, encoder  may provide encoded NTSC or PAL video to an S-Video or composite video television monitor or recording device.","In other embodiments, the video output processor  may output pixel data to other combinations of displays. For example, by outputting pixel data to two DACs  (instead of one DAC  and one encoder ), video output processor  may drive two CRTs. Alternately, by using two encoders , video output processor  may supply appropriate video input to two television monitors. Generally, many different combinations of display devices may be supported by supplying the proper output device and\/or converter for that display device.","Sample-to-Pixel Processing Flow","In one set of embodiments, hardware accelerator  may receive geometric parameters defining primitives such as triangles from media processor , and render the primitives in terms of samples. The samples may be stored in a sample storage area (also referred to as the sample buffer) of frame buffer . The samples are then read from the sample storage area of frame buffer  and filtered by sample filter  to generate pixels. The pixels are stored in a pixel storage area of frame buffer . The pixel storage area may be double-buffered. Video output processor  reads the pixels from the pixel storage area of frame buffer  and generates a video stream from the pixels. The video stream may be provided to one or more display devices (e.g. monitors, projectors, head-mounted displays, and so forth) through DAC  and\/or video encoder .","The samples are computed at positions in a two-dimensional sample space (also referred to as rendering space). The sample space may be partitioned into an array of bins (also referred to herein as fragments). The storage of samples in the sample storage area of frame buffer  may be organized according to bins as illustrated in FIG. . Each bin may contain one or more samples. The number of samples per bin may be a programmable parameter.","Data Synchronization Mechanism","A central processing unit  (e.g. host processor ) may send a stream of data items to a hardware device  as suggested by FIG. . The data items may flow through two or more different paths (e.g. PathA and PathB) in the hardware device . The two or more paths may meet at (i.e. send their output to) a convergence unit . At the convergence unit , the streams of data from each of the two or more paths may merge. The merged stream may be forwarded to other units such as unit . (Unit  may be a processing unit and\/or a storage unit). For any of various reasons, there may be a motivation for preserving the order of the data items arriving at unit  relative to the order of transmission of the data items from CPU  to hardware device .","It is noted that data items may get modified, transformed, pruned, augmented or fragmented in the processing units along a path. For example, a path may be a computational pipeline. Thus, a data item may have different representations at different points along a path.","The hardware device  may include a bus interface  for communicating with the central processing unit .","In one set of embodiments, the hardware device  may support a protocol for guaranteeing the preservation of order of the data items arriving at the unit  with respect to the original order of assertion of those data items to the hardware device . The order-preservation protocol may be supported by supplying a host-readable register in the convergence unit . This host-readable register is referred to herein as the synchronization register . There may be a communication bus  (directly or indirectly) coupling the bus interface unit  to convergence unit  so that the contents of the synchronization register may be reported to the central processing unit  in an efficient fashion.","The order preservation protocol may operate as indicated in FIG. . In step , the CPU  may send a first sequence of one or more data items targeted for a given path (e.g. PathA) to the hardware device .","At the end of the first sequence of data items, the CPU  sends a token to the hardware device  as indicated in step . The token follows the first sequence of data items through PathA to the convergence unit .","The convergence unit  may receive a stream of data items from each of the two or more paths as indicated above. Convergence unit  may be configured to detect the occurrence of a token in any of the received data streams, and store the token in the synchronization register . In one set of embodiments, convergence unit  may merge the receive data streams (e.g. into a merge buffer), examine the merged data stream to detect an occurrences of a token, and store the token in the synchronization register .","After sending the token, the CPU  may start to poll the synchronization register  to determine when the token has arrived at the synchronization register  as indicated in steps  and .","The arrival of the token at the synchronization register indicates that the first sequence of data items has cleared the PathA. Thus, the CPU  may safely initiate the transmission of a second sequence of data items targeted for any other path (e.g. PathB), or, for the same path (i.e. PathA in this example), in response to detecting the arrival of the token at the synchronization register. In other words, CPU  may return to step  in response to detecting the arrival of the token in the synchronization register.","Thus, software and hardware may cooperate to perform a synchronization protocol whenever data ordering across multiple paths is required.","In some embodiments, the CPU  (running under program control) may implement a timeout mechanism for the polling of the synchronization register . Thus, in the event of a fault in hardware device  or a programming protocol violation, CPU  will not wait forever polling the synchronization register. After a period of time that is programmable by software, the CPU  may quit polling for the expected token. In this event, software may perform diagnostics or print debugging information to aid in the identification of the protocol or hardware problem.","In one set of embodiments, the hardware device  may be a graphics system such as graphics system  or a rendering chip such as hardware accelerator , and CPU  may be the host processor .",{"@attributes":{"id":"P-00093","num":"00093"},"figref":"FIG. 10","b":["18","18","102","14","510","520","520"]},"The raster pipe  may include vertex processor , render pipeline , and sample generator and evaluator . The direct path may include pixel transfer MUX  and pixel transfer unit . Texture environment  may serve in the role of convergence unit, i.e. texture environment  may store the synchronization register . Texture environment  may couple to north interface  through a bus . Host CPU  may read the synchronization register through north interface  and bus .","The direct path  may be a lower latency path than the raster pipe . Thus, without some mechanism to maintain data ordering, there may be the possibility that the initial ordering of data that gets split down the two paths  and  may be disturbed by the time the data rejoins at texture environment .","Suppose that a graphics scene includes both geometry data and pixel data in a computer's main memory (e.g. main memory ). Furthermore, suppose the different types of data are associated with different sets of attributes (such as blending factors). The geometry data may correspond to one blending factor, and the pixel data may correspond to a different blending factor. In some embodiments of hardware accelerator , both (a) the pixel data and (b) the rendered samples generated in response to the geometry data in the raster pipe  may use the same blending hardware. The blending hardware may occur after the convergence point, i.e. after the texture environment . For example, the blending hardware may be located in the frame buffer . Thus, it may be important to preserve the original reception order of data items arriving at the blending hardware. The original reception order may be defined as the order in which the data items are received at north interface  from CPU .","A token may be sent at the end of a sequence of data traveling down a path. Hardware (e.g. texture environment ) at the path join point collects tokens sent down all paths joining at that point. The hardware saves the most recent token in the synchronization register. The synchronization register is readable by host software,","Sending the token down a path is called \u201cwriting to the synchronization register\u201d. In one set of embodiments, the tokens may be assigned values that correspond to the path the token takes. Since the token follows the data down a path, software may read the synchronization register to determine if the data sent down that path has completely transited the join point.","Host software may first initialize the synchronization register to a known value. Suppose the host software wishes to use the graphics processing of the raster pipe . Before sending data down the raster pipe , the host software may send a token down the direct path  to the synchronization register. Suppose the token is assigned the value X. The software polls the synchronization register until the value X is read. In response to detecting the value X in the synchronization register, the host software may write attributes and data to the raster pipe  (including attributes meant for processing hardware past the join point of raster pipe  and the direct path ).","Next, suppose the software wants to use the processing of the direct path  as part of composing the desired graphics image. The software writes a token with the value Y down the raster pipe . The software polls the synchronization register until the value Y is read. In response to reading the value Y, the software may safely send data and attributes down the direct path .","In some embodiments, the software may send a first sequence of one or more data items to a given path followed by a first token, and then send a second set of one or more data items to the same path followed by a second token. In other words, it is not necessary for the software to switch to a different path after having sent a token for a first path. The successive tokens sent down the first path may have different values since the host software will be interested in whether or not the last set of data it sent to the first path has cleared the first pipe.","The various embodiments described herein may be used to ensure that the correct attributes are applied as intended to each part of the data at processing units or storage units in or downstream from the convergence unit (e.g. the texture environment  of hardware accelerator , or frame buffer ).","Although the embodiments above have been described in considerable detail, other versions are possible. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Note the section headings used herein are for organizational purposes only and are not meant to limit the description provided herein or the claims attached hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing, as well as other objects, features, and advantages of this invention may be more completely understood by reference to the following detailed description when read together with the accompanying drawings in which:",{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"P-00018","num":"00018"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"P-00019","num":"00019"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 8","b":"315"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 9"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 10","b":["18","180"]}]},"DETDESC":[{},{}]}
