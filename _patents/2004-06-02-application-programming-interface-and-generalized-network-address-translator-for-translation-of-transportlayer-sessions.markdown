---
title: Application programming interface and generalized network address translator for translation of transport-layer sessions
abstract: An application programming interface for translation of transport-layer sessions is presented. The system includes kernel-mode support for application-controlled network address translation and user-mode implementation of the redirect API routines. An application process may request that a network gateway modify the source and/or destination of a given network session in a manner transparent to the original source host and/or the replacement destination host. With the generalized NAT (gNAT) of the instant invention and its associated API, both the source and the destination addresses of message packets may be changed. The address changes are mapped in the gNAT, and may result in apparent sessions between different clients and servers. Depending on the protocol in use (e.g. TCP or UDP), the address translation may be made dynamically by the gNAT, under the command of the application, and take place at the kernel level.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07305477&OS=07305477&RS=07305477
owner: Microsoft Corporation
number: 07305477
owner_city: Redmond
owner_country: US
publication_date: 20040602
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED PATENT APPLICATION","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This patent application is a continuation of U.S. patent application Ser. No. 09\/519,287, filed Mar. 6, 2000, now U.S. Pat. No. 6,779,035 entitled \u201cApplication Programming Interface and Generalized Network Address Translator for Translation of Transport-Layer Sessions\u201d. The entire teachings and disclosure of this patent application are hereby incorporated in their entireties by reference thereto.","This invention relates generally to network address translation and, more particularly, relates to generalized network address translation under application program control.","As the number of computers that needed or wanted to be connected to the Internet continued to grow, it soon became obvious that this number could not be accommodated by the number of available IP addresses, known as dotted-quads. In response to this address depletion problem, a method as illustrated in  was devised whereby a number of computers C, C, etc. could be located on a \u201cprivate\u201d network  and would use private IP addresses  to communicate with each other. These private IP addresses could be reused on other private networks since no one outside the private network could see these addresses. In order to allow the computers on the private network to communicate with other computes S, S, etc. on a public network, such as the Internet , the private network utilizes one machine  to provide the gateway for all of the computers on the private network to reach the public network. Through the use of the private addresses  on the private network  and the gateway computer , the address depletion problem is at least slowed.","This gateway computer  runs a program called a network address translator (NAT) that has both a private IP address  and a public IP address . As computers on the private network attempt to establish sessions with a server on a public network (or another private network), the NAT changes the source address  of the message packets  from the private address of the client computer to its public IP address. In this way, the private IP address is not communicated on the public network. The messages all appear to have come from the public IP address of the NAT machine. The NAT maintains a mapping  of the translation from the private to the public IP address so that when messages are received from the public network in response as illustrated by line , the NAT can forward them to the proper client machine. This operation of the NAT is completely transparent to the client computers on the private network, i.e. they each believe that they are communicating directly with the public servers.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 4"],"sub":["1 ","1 ","1 ","1 ","1 ","1 "],"b":["78","80","66","82","82","84"]},"While the NAT has greatly alleviated the address depletion problem, especially for home and small business networks, its translation of source addresses is fixed within its programming. That is, the traditional NAT does not allow any application control of the address translations that it performs. Additionally, since the address translation is performed on the message packets at such a low level within the kernel , the NAT can add almost no value, other than providing the raw source address translation. The NAT cannot even provide any destination address translations. If added value is desired, such as centralized virus scanning, site blocking, white listing, etc., a proxy must be used instead.","Traditional proxies, as illustrated in , are application programs existing in the user mode  that serve as the interface between the private  and the public  network (see ). Unlike NATs, the proxy  must be addressed directly by the client machines as seen in the destination address field  of message packet , and therefore requires that the client applications C, C, etc. be setup to operate with a proxy . Many applications cannot do this, or require specific configuration changes to allow the use of a proxy, and therefore a proxy configuration may not be appropriate for all applications. When a proxy application  is used, all communications are sent to the proxy in the user mode  (see ) as illustrated by lines , . The proxy  then determines whether and to whom to forward the communication on the public network. If the proxy determines that the message may be passed to a server on the public network, the proxy establishes a second session , copies the data to the second session, changes the source and destination address, and sends out the message (see, also ). In operational terms as illustrated in , a client process Cestablishes a first session  with the proxy  requesting access to a public server S. If the proxy agrees, a second session  is established with the server Son the public network . Since all messages must pass from the kernel-mode network transport, e.g. TCP\/IP , to the user-mode proxy , be copied to a second session, transferred back down to the kernel-mode driver , and finally transmitted to the network for the network application's other session, a significant performance degradation occurs.","The instant invention overcomes these and other problems by providing an application programming interface for translation of transport-layer sessions. Specifically, the inventive concepts of the instant invention relate to a generalized network address translator (gNAT) and associated application programming interface (API) that allow both source and destination address translations to be made under application program control. This allows value to be added to the address translation. Additionally, it significantly increases the data flow speed over a traditional proxy since there is no longer a requirement that all information received at the kernel-mode be passed to the user-mode, copied to a second session, and passed back to the kernel-mode for transmission.","With the generalized NAT (gNAT) of the instant invention and its associated API, both the source and the destination addresses of message packets may be changed. The address changes are mapped in the gNAT, and may result in apparent sessions between different clients and servers. Depending on the protocol in use (e.g. TCP or UDP), the address translation may be made dynamically by the gNAT, under the command of the application, and take place at the kernel level. This significantly improves the data flow of the system by short-circuiting previously required data transfer between the kernel and user modes.","As discussed above, data transfer through a traditional proxy (a user-mode application) requires that the incoming messages from a client on a first session be transferred from the kernel-mode to the user-mode so that the proxy can deal with them. The proxy then would copy the message to a second session, and pass it back down to the kernel-mode for transmission to the server. Likewise, information from the server would arrive at the kernel level, be transmitted up to the user-mode for processing by the proxy, be copied to the other session, and be transmitted back down to the kernel-mode for transmission back to the client. Significant transmission delays were incurred as a result of all of these kernel-to-user-mode transitions.","The system of the instant invention eliminates, or at least greatly reduces, this overhead performance degradation while still adding value to the communication. Specifically, once the application, in this case a proxy, determines that a second session will be established (or a data session), it can command the generalized NAT through the API to perform an address translation at the transmission layer (kernel-mode), and therefore eliminate the transitions between kernel and user modes. The generalized NAT receives the incoming message from the client, confirms that it has a mapped translation, performs the address translation, and passes the message along to the server. Since this translation occurs at the kernel level, the data transfer performance is greatly improved.","Since the generalized NAT and associated API of the instant invention allows for destination address translation of a message packet, another advantage provided by the instant invention is server load balancing. This balancing is achieved by a server load control application that utilizes the gNAT through its associated API to command address translations away from heavily loaded servers to servers with more available capacity. Dynamic load balancing is also possible, dependent on the communication protocol used for the session. That is, a TCP session continues to address all message packets to a server once assigned thereto since the TCP protocol is connection oriented. UDP messages, on the other hand, may be dynamically redirected to an available server at the time of message delivery since UDP is message oriented.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying figures.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk , and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories, read only memories, and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more applications programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and a pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices, not shown, such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the person computer  typically includes a modem  or other means for establishing communications over the WAN . The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computer, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.","In accordance with the invention, generalized network address translation functionality is provided to application processes  by the architecture illustrated in . This functionality includes kernel-mode support for application-controlled network address translation through the generalized network address translator (gNAT) , and user-mode implementation of these redirect application programming interface (API)  routines. In this way, the system of the instant invention allows an application process  to request that a network gateway modify the source and\/or destination address of a given network session in a manner transparent to the original source host and\/or the replacement destination host. This ability made available by the instant invention allows true application-controlled arbitrary redirection on network sessions. While the application process  is illustrated in the user-mode, it should be recognized by those skilled in the art that the invention is not so limited to only user-mode applications. Indeed, a network application  using the services of the gNAT  may reside in kernel-mode. In such a situation, the API  would also exist in the kernel-mode, and such a situation is within the scope of the instant invention.","By generalizing the operation of network address translation and putting that operation under application  control, the system of the instant invention allows network applications  to achieve a number of benefits. For instance, server applications  can use the application programming interface  to make a group of servers appear to clients as a single server at a single IP address as will be described more fully below with reference to . This functionality may also be used to redirect sessions to support migration of services for enhanced availability. This functionality is unique to the system of the instant invention in that the application programming interface  allows server applications  to gain explicit control over the translation performed by the gNAT .","Further, as described above with reference to the traditional proxy, network applications that transfer information between separate network sessions typically suffer performance degradation. As discussed, this is because the network data must be received from the network for one of the network application's sessions, delivered to the user-mode network application by the kernel-mode network transport, read by the network application, written to the network application's other session, transferred to the kernel-mode driver, and transmitted to the network for the network application's other session. Instead of taking the above steps to copy data from one network session to another, the application programming interface  allows such network applications  to instruct the network gateway or generalized NAT (gNAT)  to translate one network session into another.","As may be seen from the architectural diagram of , the system of the instant invention comprises a kernel-mode translation module  that processes packets received from the network and modifies those packets in real-time, and a user-mode application programming module  that implements the interface invoked by network applications . The kernel-mode translation module  performs the functions of a generalized network address translator (gNAT). This module  is implemented in a preferred embodiment as a Windows 2000 driver that registers itself as a firewall driver with the Windows 2000 TCP\/IP driver . Of course, one skilled in the art will readily appreciate that this module may also be adapted to operate in other operating systems without undue experimentation and without departing from the scope and spirit of the instant invention. Therefore, these alternate embodiments are hereby reserved. In its registration, the module  supplies an entry-point that is called by the TCP\/IP driver  upon reception of every incoming packet and before transmission of every outgoing packet. This ensures that all packets will be observed by the kernel-mode translation module  before being sent, received, or forwarded.","Each application-requested translation is recorded by the kernel-mode translation module  as a redirect. Such a redirect consists of a description of the session to be translated, along with a description of the translation to be performed. For example, the description of the translation may state that when a session is detected with source address S and destination address D, translate it so that the source address becomes S\u2032 and the destination address becomes D\u2032. When the module  detects any new network session, it determines whether there is a redirect that applies to the session. If the module  determines that there is a redirect for this session, the redirect is activated. The network session is automatically translated and a mapping is created to ensure that the same translation is done for all packets in the session. The normal processing is then continued on the session's translated packets, causing them to be delivered locally or forwarded depending on the new source and destination.","The user-mode application programming module  is also preferably implemented as a Windows 2000 library that is loaded by network applications . As with the above, the invention is not so limited to a particular operating system, but is applicable to any operating system which allows network communication. Therefore, the exemplary embodiments described herein are by way of illustration and not by way of limitation. A network application  calls the library  to initialize the kernel-mode translation module , and then creates one or more redirects for the network sessions to be translated.","In a preferred embodiment, the library  provides routines to perform at least the initializing and shutting down of the library. The initialization ensures that the kernel-mode translation module  is loaded and registered in preparation for translating network sessions. The shutting down of the library concludes the application's use of the kernel-mode translation module, which may be unloaded if it has no other clients. Further, the library  also includes routines for creating a redirect for a network session. This operation supplies information identifying a network session, along with information describing the translation to be done for the network session. A network session is identified by its protocol, its source IP address, its source port, its destination IP address, and its destination port. The protocol indicates the transport-layer protocol of the network session, which may be either TCP or UDP. The source IP address indicates the IP address of the network session's source host, and the source port indicates the port number of the network session's source host. The destination IP address indicates the IP address of the network session's destination host, and its destination port indicates the port number of the network session's destination host. The translation to be done for the network session may replace any of the last four parameters, however the transport-layer protocol cannot be changed. Finally, the library provided routines to cancel a redirect for a network session. This operation revokes a previous translation-request issued by the application .","The operation of translating network sessions at the transport-layer is illustrated in  to which specific reference is now made. Upon establishment of a network session by the receipt of network data on session line , the data is communicated to the network application . Upon processing by the network application , this initial data is copied to a second session , and transmitted to the network by the driver . This initial operation is much like a traditional proxy, except that the gNAT  may transparently redirect the data to the network application  if the client process is not aware of the network application. Unlike a traditional proxy, the network application  is now able to utilize the API  to command (illustrated by line ) a dynamic redirect so that further data transitions from kernel-mode to user-mode are no longer required. This establishes a fast-path for proxy-like applications in which datagrams must be copied from one session to another. This fast-path transfer is ideal for data streaming applications, on-line gaming, multi-party conferencing, etc.","Once the network application  has determined that a dynamic redirect is appropriate and such has been commanded of the gNAT , it establishes a dynamic redirect mapping . All network data that is received from the network for the proper network application's session (as determined by the gNAT  in accordance with its commanded dynamic redirect ) is automatically translated by the gNAT  so that its transport-layer address matches the network application's other session. This data is then transmitted to the network for the network application's other session. Graphically, this dynamic redirection at the transport layer is illustrated by line . As may be seen from line , the communication of the data to the network server no longer requires that the data go through two kernel-user mode translations, i.e. the trip to the application  is short circuited. Likewise, return data on line  may also be dynamically redirected to the client if so commanded by the network application . The approach allows such applications to achieve a considerable improvement in their performance.","This performance improvement becomes vividly apparent if the initial communication on line  opens an ftp control session carrying an ftp get file request. Under a traditional proxy scenario, the ftp data channel created to receive the file requested would first be passed from the kernel-mode to the user-mode to the proxy, and then would be passed back down to the kernel-mode to be forwarded to the client. As may well be imagined, this process incurs significant performance degradation, especially if the file is quite large. Under the system of the instant invention, however, the network application  may open a data session which does not require any transitions to the user-mode by commanding a dynamic redirection at the transport-layer. Now, as the data is received from the ftp server, the gNAT  performs the dynamic redirection in accordance with the application's command. The destination address of the data is simply translated and passed to the client as indicated by line . Significant performance improvement is achieved in this way.","The system of the instant invention also allows session payload editing. Certain applications include addressing information within the data streams of their sessions. For instance, many streaming applications use a control session to establish a secondary data session similar to that described above. This poses a problem for a traditional NAT in its primary application, i.e. transparent sharing of a single Internet connection among multiple machines. When running on clients that are sharing a connection, such applications would send private, unreachable addressing information to remote peers, and the latter would be unable to respond to the clients' requests. To solve this problem, the system of the instant invention supports an extensible means of modifying a session's application-layer data in flight, beyond the modifications made to the session's network-layer and transport-layer addressing information. Extensibility is achieved by allowing third-party drivers to inspect the application-layer data in each packet received for a session, and to edit the application data in each packet. These editors register themselves with the gNAT of the instant invention as handlers for a specific TCP\/UDP port number, and are henceforth invoked for each message translated in matching sessions.","In operational terms, the dynamic redirection made available by the system of the instant invention is illustrated in . A client Cmay wish to establish a session with server Sby addressing messages thereto. This is the apparent session from the client C's point of view, as illustrated by the dashed line . However, when the message from Caddressed to Sis detected by the gNAT machine , it checks to determine if a dynamic redirect exists for such a session. As illustrated in , a dynamic redirect  does exist. This dynamic redirect  may include a translation of both the source and destination addresses such that the messages are actually forwarded to server Swith an indication that the source was C. From the server S's point of view, an apparent session  has been established between Sand C. The actual session  that has been established is between Cand S, although neither Cnor Sknows that this is the case. Each of the required translations is accomplished transparently.","An application of this transparent redirection of destination addresses is illustrated in  in a multiple server environment. As introduced above, server load balancing may be achieved through the dynamic redirection of the destination addresses based on the protocol of the session, i.e. TCP or UDP. Obviously, since TCP sessions are connection based these sessions cannot be dynamically redirected to another server once established if that server becomes overloaded. However, since UDP messages are not connection based, each UDP message may be dynamically redirected upon receipt to an available (lightly loaded) server. The determination of the dynamic redirect to maintain load balancing of the various servers is made by a director or server load balancing application . Information  is actively collected from each of the servers, or is maintained internally to the application  based on prior redirections. This information on server loading is used to control the redirections to maintain balance of server loading. This redirection may be based on a number of factors and on different criteria. For example, the dynamic redirection may be based on the number of clients served by a server, the processing load being handled by the server regardless of the number of clients served thereby, the type of service required (FTP, HTTP, etc.), priority servicing based on membership, access control, etc.","By using the term balance it is not meant that perfect equality of processing capacity be maintained among all servers. Indeed, it may not be possible to achieve perfect equality, e.g. in a situation where there is one heavy user, and a two light users on a network with four or more servers. In this situation, at least one server will be basically unloaded, one will be heavily loaded, and one or two will be servicing the light users. However, even in this situation, if the dynamic redirection is operating to prevent all of the requests from going to one server, the system is performing server load balancing as used herein. In the illustration of , a client Cwishes to establish a session with server S. However, the server load balancing application  has determined that server Sis loaded, and that a dynamic redirect  to server Sshould be established. The gateway machine  dynamically redirects the session transparently to server Sto maintain load balance.","All of the references cited herein, including patents, patent applications, and publications, are hereby incorporated in their entireties by reference.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
