---
title: Predictive HTTP authentication mode negotiation
abstract: A client system and a server system use a Hypertext Transfer Protocol (HTTP) authentication mode preference header to negotiate an HTTP authentication mode. The client system sends an HTTP request to the server system. In response to the HTTP request, the server system sends an HTTP response to the client system. The HTTP response includes an HTTP authentication mode preference header. The HTTP authentication mode preference header indicates whether a preferred HTTP authentication mode is connection-based HTTP authentication or request-based HTTP authentication. In subsequent HTTP requests to the server system, the client system uses the HTTP authentication mode indicated by the HTTP authentication mode preference header.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266680&OS=08266680&RS=08266680
owner: Microsoft Corporation
number: 08266680
owner_city: Redmond
owner_country: US
publication_date: 20090331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The Hypertext Transfer Protocol (HTTP) is one of the most important communications protocols in today's Internet. For example, HTTP is used to retrieve web pages and other data on the World Wide Web. There are two commonly used HTTP authentication modes. These HTTP authentication modes are connection-based authentication and request-based authentication.","When connection-based HTTP authentication is used, a client system sends a first HTTP request to a server system. The client system sends the first HTTP request to the server system using a Transmission Control Protocol (TCP) connection. The first HTTP request requests a resource, the resource being provided by the server system. If HTTP authentication is required, the server system uses the TCP connection to send a first HTTP rejection response back to the client system. The first HTTP rejection response indicates that the client system is not authorized to access the resource. In response to the HTTP rejection response, the client system generates an authorization header. The client system then generates a second HTTP request that requests a resource, the resource being provided by the server system. The second HTTP request includes an HTTP header that specifies the authorization header. After generating the second HTTP request, the client system uses the TCP connection to send the second HTTP request to the server system. Upon receiving the second HTTP request, the server system uses the authorization header in the second HTTP request to perform an authentication process. An authentication process is sequence of actions performed to authenticate a client system to a server system. If the authentication process is successful, the server system considers the TCP connection to be an authenticated connection. Furthermore, if the authentication process is successful, the server system sends a second HTTP response back to the client system. The second HTTP response contains the resource requested by the second HTTP request. The server system assumes that all subsequent HTTP requests received on the TCP connection are authentically from the client system. Consequently, when connection-based HTTP authentication is used, there is no need for the client system to include authorization headers in subsequent HTTP requests sent to the server system using the TCP connection.","When request-based HTTP authentication is used, a client system sends a first HTTP request to a server system. The client system may use a TCP connection to send the first HTTP request to the server system. The first HTTP request requests a resource, the resource being provided by the server system. If HTTP authentication is required, the server system uses the TCP connection to send a first HTTP rejection response back to the client system. The first HTTP rejection response indicates that the client system is not authorized to access the resource. In response to the HTTP rejection response, the client system generates an authorization header. The client system then generates a second HTTP request and uses the TCP connection to send the second HTTP request to the server system. The second HTTP request requests a resource, the resource being provided by the server system. The second HTTP request includes an HTTP header that specifies the authorization header. Upon receiving the second HTTP request, the server system performs an authentication process. If the authentication process is successful, the server system sends a second HTTP response back to the client system. The second HTTP response contains the resource requested by the second HTTP request. However, the server system does not assume that all subsequent HTTP requests on the TCP connection are authentically from the client system. Consequently, when request-based HTTP authentication is used, the client system must include an authorization header in each HTTP request sent to the server system on the TCP connection.","By default, many client systems are configured to use connection-based HTTP authentication. Such client systems send HTTP requests with authorization headers only when such client systems receive HTTP rejection responses. As mentioned above, when a server system is configured to use request-based HTTP authentication, the server system provides an HTTP response containing a requested resource only in response to an HTTP request containing an authorization header. Consequently, whenever the server system receives an HTTP request without an authorization header, the server system sends back an HTTP rejection response. As a result, whenever a client system configured to use connection-based HTTP authentication sends HTTP requests to a server system configured to use request-based HTTP authentication, the client system effectively sends two HTTP requests to the server system: a first HTTP request without an authorization header and a second HTTP request with an authorization header.","A client system and a server system use a Hypertext Transfer Protocol (HTTP) authentication mode preference header to negotiate an HTTP authentication mode. The client system sends an HTTP request to the server system. In response to the HTTP request, the server system sends an HTTP response to the client system. The HTTP response includes an HTTP authentication mode preference header. The HTTP authentication mode preference header indicates whether a preferred HTTP authentication mode is connection-based HTTP authentication or request-based HTTP authentication. In subsequent HTTP requests to the server system, the client system uses the HTTP authentication mode indicated by the HTTP authentication mode preference header.","This summary is provided to introduce a selection of concepts in a simplified form. These concepts are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is this summary intended as an aid in determining the scope of the claimed subject matter.","As briefly described above, a client system and a server system use a Hypertext Transfer Protocol (HTTP) authentication mode preference header to negotiate an HTTP authentication mode. This disclosure references a set of figures. The figures are included for explanatory purposes only and are not intended to limit the scope of the claimed subject matter.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["2","2"]},"As illustrated in the example of , system  includes a client system . Client system  is an electronic computing system. As used in this disclosure, an electronic computing system is a set of one or more electronic computing devices. This disclosure describes details of an example electronic computing device with reference to . Client system  may include a wide variety of different types of electronic computing devices. For example, client system  may include a personal computer, a mobile telephone, a personal digital assistant (PDA), a digital media player, a television set top box, a television, a home appliance, an industrial appliance, a device integrated into a vehicle, a video game console, an Internet kiosk, a netbook, a laptop computer, a handheld video game device, an intermediate network device, a standalone server device, a server blade device, a network storage device, an Automated Teller Machine, a wearable computing device, or another type of electronic computing device.","In addition to client system , system  includes a server system . Server system  is an electronic computing system. Like client system , server system  may include a wide variety of different types of electronic computing devices. For instance, server system  may include any of the types of electronic computing devices described above.","System  also includes a network . Network  is an electronic communication network. Network  facilitates electronic communication between client system  and server system . For example, network  may be a wide-area network, such as the Internet. In other examples, network  may be a local-area network, a metropolitan-area network, or another type of electronic communication network. Network  may include wired and\/or wireless data links. A variety of communications protocols may be used in network . Such communications protocols include, but are not limited to, Ethernet, Transmission Control Protocol (TCP), Internet Protocol (IP), HTTP, SOAP, remote procedure call protocols, user datagram protocol (UDP), IPSec, Resource Reservation Protocol (RSVP), Internet Control Message Protocol (ICMP), and\/or other types of communications protocols.","Server system  operates an HTTP server. The HTTP server is configured to receive HTTP requests from network  and to send HTTP responses on network . Client system  operates an HTTP client. The HTTP client is configured to send HTTP requests on network  and to receive HTTP responses from network .","As described in greater detail below, client system  and server system  use an HTTP authentication mode preference header to negotiate an HTTP authentication mode. Client system  sends an HTTP request to server system . In response to the HTTP request, server system  sends an HTTP response to client system . The HTTP response includes an HTTP authentication mode preference header. The HTTP authentication mode preference header indicates whether a preferred HTTP authentication mode is connection-based HTTP authentication or request-based HTTP authentication. For example, the HTTP authentication mode preference header may indicate whether an authorization header will be required for the next request on the connection based on whether the preferred server system uses connection-based HTTP authentication or request-based HTTP authentication. In subsequent HTTP requests to server system , client system  uses the HTTP authentication mode indicated by the HTTP authentication mode preference header.","When server system  is configured to use request-based HTTP authentication, use of the HTTP authentication mode preference header may reduce the number of messages that client system  and server system  must exchange for client system  to obtain a resource from server system . For example, server system  may be configured to use request-based HTTP authentication and client system  may be configured to assume that server system  uses connection-based HTTP authentication. In this example, client system  would send a first HTTP request that does not include an authorization header. An authorization header is an HTTP header containing authentication data. In response to the first HTTP request, server system  would send an HTTP rejection response. The HTTP rejection response indicates that client system  is not authorized to access the requested resource. In response to the HTTP rejection response, client system  would send a second HTTP request, the second HTTP request including an authorization header. As a result, client system  would effectively send two HTTP requests to retrieve a single resource from server system . In this example, the HTTP authentication mode preference header indicates to client system  that the preferred HTTP authentication mode is request-based HTTP authentication. Based on the HTTP authentication mode preference header, client system  uses request-based HTTP authentication in subsequent HTTP requests to server system . Because client system  uses request-based HTTP authentication in subsequent HTTP requests to server system , client system  includes authorization headers in the subsequent HTTP requests to server system . Consequently, there may be no need for server system  to send HTTP rejection responses and there may be no need for client system  to respond by sending additional HTTP requests including authorization headers.","Moreover, use of the HTTP authentication mode preference header may reduce the number of authorization headers that client system  generates. For example, server system  may be configured to use connection-based HTTP authentication and client system  may be configured to assume that server system  uses request-based HTTP authentication. In this example, client system  would generate an authorization header in each HTTP request sent to server system . However, such authorization headers would be unnecessary because server system  assumes that all HTTP requests on an authenticated TCP connection are authentic. In this example, the HTTP authentication mode preference header indicates to client system  that the preferred HTTP authentication mode is connection-based HTTP authentication. Based on the HTTP authentication preference header, client system  uses connection-based HTTP authentication in subsequent HTTP requests to server system . Because client system  uses connection-based HTTP authentication in subsequent HTTP requests to server system , client system  does not go to the unnecessary effort of generating authorization headers for HTTP requests on authenticated TCP connections.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 2"],"b":["6","6","6"]},"As illustrated in the example of , server system  includes a network interface , a Transmission Control Protocol\/Internet Protocol (TCP\/IP) module , an HTTP server module , an authentication server module , a resource repository , a configuration repository , and a connection data repository . Network interface  enables server system  to communicate on network . TCP\/IP module  receives TCP\/IP messages from network interface , extracts HTTP requests from the TCP\/IP messages, and provides the HTTP requests to HTTP server module . Furthermore, TCP\/IP module  receives HTTP responses from HTTP server module , encapsulates the HTTP responses in TCP\/IP messages, and provides the TCP\/IP messages to network interface  for transmission on network . As described in detail below with reference to , HTTP server module  receives HTTP requests from TCP\/IP module . In response to the HTTP requests, HTTP server module  retrieves requested data from resource repository , if appropriate based on configuration data in configuration repository . HTTP server module  then generates HTTP responses containing the requested data. HTTP server module  then provides the HTTP responses to TCP\/IP module  for eventual transmission on network .","HTTP server module  interacts with authentication server module  to perform an authentication process using a security protocol. A security protocol is a protocol that performs authentication and possibly additional security services on a network. In one example implementation, authentication server module  implements the Generic Security Services Application Programming Interface (GSS-API). Internet Engineering Task Force (IETF) RFC 2743 describes the GSS-API. The entire content of IETF RFC 2743 is hereby incorporated by reference. Authentication server module  may implement the GSS-API in a variety of ways. For example, authentication server module  may implement the GSS-API such that authentication server module  uses a Kerberos security protocol. In another example, authentication server module  may implement the GSS-API such that authentication server module  uses a NT LAN Manager (NTLM) security protocol. In other examples, authentication server module  may implement the GSS-API such that authentication server module  uses other security protocols.","In one example implementation, authentication server module  implements a security protocol negotiation mechanism. Client systems and server systems may support a variety of security protocols. Consequently, client systems and server systems negotiate which security protocol to use. A security protocol negotiation mechanism enables a client system and a server system to negotiate a security protocol. For example, authentication server module  may implement the Simple and Protected GSS-API negotiation mechanism (SPNEGO). IETF RFC 4178 describes SPNEGO. The entire content of IETF RFC 4178 is hereby incorporated by reference. SPNEGO enables client system  and server system  to negotiate a security protocol. SPNEGO enables client system  and server system  to negotiate a variety of security protocols. For example, SPNEGO enables client system  and server system  to negotiate the use of the Kerberos security protocol, the NTLM security protocol, and\/or other security protocols.","In another example, authentication server module  may implement the Nego2 negotiation mechanism. Like SPNEGO, the Nego2 negotiation mechanism enables client system  and server system  to negotiate a security protocol. The Nego2 negotiation mechanism may enable client system  and server system  to negotiate security protocols in addition to those that can be negotiated using SPNEGO. For example, the Nego2 negotiation mechanism may enable client system  and server system  to negotiate the use of the NegoExtender security protocol, the LiveID security protocol, the Federated SSP security protocol, and\/or other security protocols.","Resource repository  stores resources. As used in this disclosure, a resource is an entity that can be identified in a networked information system. Example types of resources include static Web pages, dynamically-generated Web pages, documents, files, scripts, applets, ActiveX controls, media streams, sockets, and other entities that can be identified in a networked information system.","Configuration repository  stores configuration information. In various example implementations, the configuration information indicates whether HTTP authentication is required to access particular resources, indicates HTTP authentication modes required to access particular resources, indicates authentication credentials, and so on.","Connection data repository  stores connection data. The connection data indicates an HTTP authentication status of each active TCP connection between server system  and client systems. For example, the connection data may indicate that successful HTTP authentication has occurred on a first TCP connection between server system  and client system . In another example, the connection data may indicate that successful HTTP authentication has not occurred on a second TCP connection between server system  and client system .","Resource repository , configuration repository , and connection data repository  may be implemented in a wide variety of ways. For example, resource repository , configuration repository , and\/or connection data repository  may be implemented as relational databases. In another example, resource repository , configuration repository , and\/or connection data repository  may be implemented as file systems. In another example, resource repository , configuration repository , and\/or connection data repository  may be implemented as directories. In another example, resource repository , configuration repository , and\/or connection data repository  may be implemented as an array of memory locations.","Network interface , TCP\/IP module , HTTP server module  and authentication server module  may be implemented in a wide variety of ways. In a first example, network interface , TCP\/IP module , HTTP server module  and\/or authentication server module  may be implemented as sets of instructions stored at a data storage system. As used in this disclosure, a data storage system is a set of one or more computer-readable data storage mediums. In this first example, a processing unit within server system  may execute the sets of instructions, thereby causing server system  to perform the behaviors associated with network interface , TCP\/IP module , HTTP server module  and\/or authentication server module . As used in this disclosure, a processing unit is a set of one or more physical electronic integrated circuits that are capable of executing instructions. In a second example, network interface , TCP\/IP module , HTTP server module  and\/or authentication server module  are implemented as one or more application specific integrated circuits (ASICs). The ASICs cause server system  to perform the behaviors associated with network interface , TCP\/IP module , HTTP server module  and\/or authentication server module . In this second example, the ASICs may be specifically designed to perform the behaviors associated with network interface , TCP\/IP module , HTTP server module  and\/or authentication server module .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIG. 3"],"b":["4","4","4"]},"As illustrated in the example of , client system  includes a network interface , a TCP\/IP module , an HTTP client module , an application , an authentication client module , and a mode preference data repository . Network interface  enables client system  to communicate on network . TCP\/IP module  receives TCP\/IP messages from network interface , extracts HTTP messages from the TCP\/IP messages, and provides the HTTP messages to HTTP client module . Furthermore, TCP\/IP module  receives HTTP messages from HTTP client module , encapsulates the HTTP messages in TCP\/IP messages, and provides the TCP\/IP messages to network interface  for transmission on network . HTTP client module  receives HTTP responses from TCP\/IP module , extracts application data from the HTTP responses, and provides the application data to application . Furthermore, HTTP client module  receives resource requests from application , generates HTTP requests requesting the resources, and provides the HTTP requests to TCP\/IP module  for eventual transmission on network .","HTTP client module  interacts with authentication client module  to perform an authentication process that uses a security protocol. In one example implementation, authentication client module  implements the GSS-API. Furthermore, authentication client module  may, for example, implement SPNEGO. In another example, authentication client module  may implement the Nego2 negotiation mechanism.","Application  may be a wide variety of different types of application. For example, application  may be a web browser application. In another example, application  may be another interface module in a protocol stack. For instance, application  may be a module that provides a remote procedure call (RPC) protocol interface.","Mode preference data repository  stores mode preference data. The mode preference data specifies preferred HTTP authentication modes. For example, the mode preference data may specify that the preferred HTTP authentication mode of server system  is connection-based HTTP authentication. Mode preference data repository  may be implemented in a wide variety of ways. For example, mode preference data repository  may be implemented in a relational database. In another example, mode preference data repository  may be implemented in a file system. In another example, mode preference data repository  may be implemented as a directory. In another example, mode preference data repository  may be implemented as an array of memory locations.","Network interface , TCP\/IP module , HTTP client module , application  and authentication client module  may be implemented in a wide variety of ways. In a first example, network interface , TCP\/IP module , HTTP client module , application  and\/or authentication client module  may be implemented as sets of instructions. In this first example, a processing unit within client system  may execute the sets of instructions, thereby causing client system  to perform the behaviors associated with network interface , TCP\/IP module , HTTP client module , application , and\/or authentication client module . In a second example, network interface , TCP\/IP module , HTTP client module , application  and\/or authentication client module  may be implemented as one or more ASICs. The ASICs cause client system  to perform the behaviors associated with network interface , TCP\/IP module , HTTP client module , application  and\/or authentication client module . In this second example, the ASICs may be specifically designed to perform the behaviors associated with network interface , TCP\/IP module , HTTP client module , application  and\/or authentication client module .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["400","6","400","6","6","400"]},"As illustrated in the example of , operation  starts when HTTP server module  receives an HTTP request from TCP\/IP module  (). The HTTP request was originally sent by a requesting client system. For example, the requesting client system may be client system . When HTTP server module  receives the HTTP request, HTTP server module  may also receive connection identification information from TCP\/IP module . The connection identification information identifies a TCP connection on which TCP\/IP module  received the HTTP request. The HTTP request requests a resource stored in resource repository . For example, HTTP server module  may receive the following HTTP request:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GET \/dir1\/index.html HTTP\/1.1"]},{"entry":[{},"Host: www.contoso.com"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"After HTTP server module  receives the HTTP request, HTTP server module  determines whether HTTP authentication is required to access the requested resource (). In one example implementation, HTTP server module  uses configuration information stored in configuration repository  to determine whether HTTP authentication is required to access the requested resource.","If HTTP server module  determines that HTTP authentication is not required to access the requested resource (\u201cNO\u201d of ), HTTP server module  retrieves the requested resource (). In one example implementation, HTTP server module  retrieves the requested resource from resource repository . Retrieval of the requested resource may require the execution of one or more programs. After retrieving the requested resource, HTTP server module  instructs TCP\/IP module  to send an HTTP response (). The HTTP response contains the requested resource.","On the other hand, if HTTP server module  determines that HTTP authentication is required to access the requested resource (\u201cYES\u201d of ), HTTP server module  identifies a required HTTP authentication mode (). The required HTTP authentication mode is the HTTP authentication mode required to access the requested resource. In one example implementation, HTTP server module  uses configuration information stored in configuration repository  to identify the required HTTP authentication mode. Next, HTTP server module  determines whether the required HTTP authentication mode is connection-based HTTP authentication ().","If the required HTTP authentication mode is connection-based HTTP authentication (\u201cYES\u201d of ), HTTP server module  determines whether the HTTP request includes an authorization header (). As described below, the content of the authorization header may vary depending on the security protocol used.","If HTTP server module  determines that the HTTP request does not include an authorization header (\u201cNO\u201d of ), HTTP server module  determines whether the TCP connection is an authenticated connection (). HTTP server module  may use connection data in connection data repository  to determine whether the TCP connection is an authenticated connection.","If HTTP server module  determines that the TCP connection is not an authenticated connection (\u201cNO\u201d of ), HTTP server module  instructs TCP\/IP module  to send an HTTP rejection response to the requesting client system (). For example, if client system  sent the HTTP request, HTTP server module  instructs TCP\/IP module  to send the HTTP rejection response to client system . The HTTP rejection response may include the status code \u201c Unauthorized.\u201d According to the HTTP protocol, the status code \u201c Unauthorized\u201d indicates that the requesting client system is not unauthorized to access the requested resource. Furthermore, the HTTP rejection response includes an authentication response header. The authentication response header specifies authentication data. The authentication data indicates an authentication scheme and may indicate a set of authentication parameters. An authentication scheme is a model for enabling a client system to authenticate to a server system. A client system and a server system using an authentication scheme perform an authentication process defined by the authentication scheme to authenticate the client system to the server system. The content of the authentication data may vary depending on how HTTP server module  is configured. For example, if HTTP server module  is configured to use SPNEGO to negotiate a security protocol, the authentication scheme specifies \u201cNegotiate\u201d and the set of authentication parameters is empty. In this example, HTTP server module  may instruct TCP\/IP module  to send the following HTTP response:",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 401 UNAUTHORIZED"]},{"entry":[{},"Date: Mon, 19 Jan 2009 14:47:54 GMT"]},{"entry":[{},"Server: IIS\/7.0 (Windows)"]},{"entry":[{},"WWW-Authenticate: Negotiate"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"If HTTP server module  determines that the HTTP request includes an authorization header (\u201cYES\u201d of ), HTTP server module  provides the authorization header to authentication server module  (). When authentication server module  receives the authorization header, authentication server module  performs one or more actions in an authentication process. Authentication server module  may be configured to perform a variety of authentication processes. For example, authentication server module  may be configured to perform an authentication process that uses a Kerberos security protocol. In this example, the authorization header in the HTTP request may include a client-to-server ticket and an authenticator. The client-to-server ticket includes a client identifier, a client network address, a validity period, and a client\/server session key. The client-to-server ticket is encrypted using the secret key of server system . The authenticator includes the client identifier and a timestamp. The authenticator is encrypted using the client\/server session key. In a second example, authentication server module  may perform an authentication process that uses a NT LAN Manager (NTLM) security protocol. In this second example, the authorization header may contain a set of flags. The set of flags indicates features supported by the requesting client system and\/or features requested by the requesting client system. In a third example, authentication server module  is configured to use SPNEGO to negotiate a security protocol. In a fourth example, HTTP server module  may perform an authentication process using a MS-CHAP security protocol. It should be appreciated that server system  may use network  to exchange one or more messages with one or more other systems (including the requesting client system) during the authentication process.","After providing the authorization header to authentication server module , HTTP server module  determines whether the authentication process was completed successfully (). The authentication process is completed successfully if HTTP server module  successfully authenticates the requesting client system. The authentication process is not completed successfully if the authentication process is not finished or if the authentication process ends without HTTP server module  successfully authenticating the requesting client system. If the authentication process was not successful (\u201cNO\u201d of ), HTTP server module  instructs TCP\/IP module  to send an HTTP rejection response to the requesting client system (). The HTTP rejection response includes an authentication response header. The authentication response header specifies authentication data generated by authentication server module  in response to the authorization header. For example, if HTTP server module  is configured to use SPNEGO to negotiate a security protocol, HTTP server  may instruct TCP\/IP module  to send the following HTTP response:",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 401 UNAUTHORIZED"]},{"entry":[{},"Date: Mon, 19 Jan 2009 14:47:54 GMT"]},{"entry":[{},"Server: IIS\/7.0 (Windows)"]},{"entry":[{},"WWW-Authenticate: Negotiate 749efa7b23409c20b92356"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"206"},"If HTTP server module  determines that the authentication process was successful (\u201cYES\u201d of ), HTTP server module  updates the connection data in connection data repository  to indicate that the TCP connection is an authenticated connection ().","After updating the connection data or after determining that the TCP connection is an authenticated connection (\u201cYES\u201d of ), HTTP server module  retrieves the requested resource from resource repository  (). As discussed above, retrieving the requested resource from resource repository  may involve the execution of one or more scripts. Such scripts dynamically generate the requested resource. After retrieving the requested resource from resource repository , HTTP server module  instructs TCP\/IP module  to send an HTTP response that includes the requested resource and an HTTP authentication mode preference header (). In this case, the HTTP authentication mode preference header indicates that the preferred HTTP authentication mode is connection-based HTTP authentication. The HTTP authentication mode preference header may indicate the preferred HTTP authentication mode in a variety of ways. In one example implementation, the HTTP authentication mode preference header indicates the preferred HTTP authentication mode using a Boolean value, i.e., true or false. The following is example HTTP response that HTTP server module  may instruct TCP\/IP module  to send:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"Date: Mon, 19 Jan 2009 14:47:54 GMT"]},{"entry":[{},"Server: IIS\/7.0 (Windows)"]},{"entry":[{},"Last-modified: Wed, 23 May 2008 08:45:01 GMT"]},{"entry":[{},"Etag: \u201c3f80f-1b5-3e1cb03b\u201d"]},{"entry":[{},"Accept-Range: bytes"]},{"entry":[{},"Content-Length: 438"]},{"entry":[{},"Connection: open"]},{"entry":[{},"Content-Type: text\/html; charset=UTF-8"]},{"entry":[{},"Persistent-Auth: true"]},{"entry":[{},"[REQUESTED RESOURCE]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"206"},"If HTTP server module  determines that the required HTTP authentication mode is not connection-based HTTP authentication (\u201cNO\u201d of ), HTTP server module  determines whether the HTTP request includes an authorization header (). If HTTP server module  determines that the HTTP request does not include an authorization header (\u201cNO\u201d of ), HTTP server module  instructs TCP\/IP module  to send an HTTP rejection response to the requesting client system (). The HTTP rejection response includes an authentication response header identifying an authentication scheme. For example, the HTTP rejection response may include an authentication response header identifying the Nego2 authentication scheme.","If HTTP server module  determines that the HTTP request includes an authorization header (\u201cYES\u201d of ), HTTP server module  provides the authorization header to authentication server module  (). When HTTP server module  provides the authorization header to authentication server module  in step , authentication server module  may perform one or more actions in the same authentication process performed in step . After providing the authorization header to authentication server module , HTTP server module  determines whether the authentication process was completed successfully ().","If HTTP server module  determines that the authentication process was completed successfully (\u201cYES\u201d of ), HTTP server module  retrieves the requested resource from resource repository  (). Next, HTTP server module  instructs TCP\/IP module  to send an HTTP response that includes the requested resource and an HTTP authentication mode preference header (). In this case, the HTTP authentication mode preference header indicates that the preferred HTTP authentication mode is request-based HTTP authentication. For example, HTTP server module  may instruct TCP\/IP module  to send the following HTTP response:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.1 200 OK"]},{"entry":[{},"Date: Mon, 19 Jan 2009 14:47:54 GMT"]},{"entry":[{},"Server: IIS\/7.0 (Windows)"]},{"entry":[{},"Last-modified: Wed, 23 May 2008 08:45:01 GMT"]},{"entry":[{},"Etag: \u201c3f80f-1b5-3e1cb03b\u201d"]},{"entry":[{},"Accept-Range: bytes"]},{"entry":[{},"Content-Length: 438"]},{"entry":[{},"Connection: open"]},{"entry":[{},"Content-Type: text\/html; charset=UTF-8"]},{"entry":[{},"Persistent-Auth: false"]},{"entry":[{},"[REQUESTED RESOURCE]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"6"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5","b":["500","4","500","4","4","400"]},"Initially, HTTP client module  receives a resource request from application  (). The resource request may specify a domain name and a resource name. For example, the resource request may specify the domain name \u201cwww.contoso.com\u201d and the resource name \u201cdirectory\/index.html.\u201d In one example implementation, HTTP client module  implements an HTTP API. In this example implementation, HTTP client module  receives the resource request when a module invokes a method of the HTTP API. HTTP client module  may receive resource requests from a variety of modules. For example, HTTP client module  may receive resource requests from application , authentication client module , and\/or other modules operating at client system  or another system.","In response to receiving the resource request, HTTP client module  determines whether a preferred HTTP authentication mode has been set for a target server system (). HTTP client module  may use mode preference data in mode preference data repository  to determine whether a preferred HTTP authentication mode has been set for the target server system. The target server system is a server system associated with the domain name specified in the resource request. For example, if the resource request specifies the domain name \u201cwww.contoso.com\u201d and if server system  is the server system associated with the domain name \u201cwww.contoso.com,\u201d HTTP client module  uses mode preference data in mode preference data repository  to determine whether a preferred HTTP authentication mode has been set for server system .","It should be appreciated that in some example implementations, HTTP client module  may determine in a variety of different ways whether a preferred HTTP authentication mode has been set. In a first example, HTTP client module  may determine whether a preferred HTTP authentication mode has been set for an individual connection to a target server system. In this first example, connection-based HTTP authentication may be the preferred HTTP authentication mode for a first TCP connection to the target server system and request-based HTTP authentication may be the preferred HTTP authentication mode for a second TCP connection to the target server system. In a second example, HTTP client module  may determine whether a preferred HTTP authentication mode has been set for individual resources provided by the target server system. In this second example, connection-based HTTP authentication may be the preferred HTTP authentication mode for a first resource provided by the target server system and request-based HTTP authentication may be the preferred HTTP authentication mode for a second resource provided by the target server system.","If a preferred HTTP authentication mode has not been set for server system  (\u201cNO\u201d of ), HTTP client module  determines whether a default HTTP authentication mode requires an authorization header (). The default HTTP authentication mode is the HTTP authentication mode that HTTP client module  uses by default. For example, an administrator may configure the default HTTP authentication mode to be connection-based HTTP authentication or may configure the default HTTP authentication mode to be request-based HTTP authentication.","If HTTP client module  determines that the default HTTP authentication mode does not require an authorization header (\u201cNO\u201d of ), HTTP client module  generates an HTTP request (). For example, if HTTP client module  determines that the default HTTP authentication mode is connection-based HTTP authentication, HTTP client module  generates an HTTP request. The HTTP request specifies the resource name and the domain name. In the example of , the HTTP request does not include an authorization header. For example, HTTP client module  may generate the following HTTP request:",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GET \/dir1\/index.html HTTP\/1.1"]},{"entry":[{},"Host: www.contoso.com"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Next, HTTP client module  instructs TCP\/IP module  to send the HTTP request to the target server system (). In one example implementation, HTTP client module  may instruct TCP\/IP module  to send the HTTP request by invoking a method of an API provided by an operating system of client system . In this example implementation, HTTP client module  may provide the HTTP request and the domain name as parameters of the method.","If a preferred HTTP authentication mode has been set for server system  (\u201cYES\u201d of ), HTTP client module  identifies a preferred HTTP authentication mode for the target server system (). HTTP client module  may use mode preference data in mode preference data repository  to identify the preferred HTTP authentication mode for the target server system. HTTP client module  then determines whether the preferred HTTP authentication mode for the target server is connection-based HTTP authentication ().","If HTTP client module  determines that the preferred HTTP authentication mode for the target server system is connection-based HTTP authentication (\u201cYES\u201d of ), HTTP client module  determines whether an authenticated TCP connection exists between client system  and the target server system (). An authenticated TCP connection may exist between client system  and the target server system when client system  has previously established a TCP connection with the target server system and has used the TCP connection to successfully perform an authentication process.","If HTTP client module  determines that an authenticated TCP connection exists between client system  and the target server system (\u201cYES\u201d of ), HTTP client module  generates an HTTP request (). The HTTP request does not include an authorization header. Next, HTTP client module  instructs TCP\/IP module  to send the HTTP request to the target server system ().","If HTTP client module  determines that the preferred HTTP authentication mode for the target server system is not connection-based HTTP authentication (\u201cNO\u201d of ) or if no authenticated TCP connection exists between client system  and the target server system (\u201cNO\u201d of ) or if HTTP client module  determines that the default HTTP authentication mode requires an authorization header (\u201cYES\u201d of ), HTTP client module  generates an authorization header (). In this disclosure, it is assumed that if the preferred HTTP authentication mode is not connection-based HTTP authentication, the preferred HTTP authentication mode must be request-based HTTP authentication. As discussed above, the content of the authorization header may depend on the type of authentication process to be used.","In one example implementation, HTTP client module  generates the authentication by first invoking a method provided by authentication client module . In response to invoking the method provided by authentication client module , HTTP client module  receives authentication data from the method. After receiving the authentication data, HTTP client module  generates an authorization header that includes the authentication data. In generating the authentication data, authentication client module  may require client system  to use network  to exchange one or more messages with one or more systems. For example, generating the authorization header may require client system  to use network  to exchange one or more messages with a Kerberos authentication server and a Kerberos ticket granting server.","After generating the authorization header, HTTP client module  generates an HTTP request that includes the authorization header (). For example, HTTP client module  may generate the following HTTP request:",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GET \/dir1\/index.html HTTP\/1.1"]},{"entry":[{},"Host: www.contoso.com"]},{"entry":[{},"Authorization: Basic 4erg454g4tyw9d87df5g4yg879t8ae8t7g54"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"304"},"Once HTTP client module  generates the HTTP request, HTTP client module  instructs TCP\/IP module  to send the HTTP request to the target server system ().",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 6","b":["600","4","600","4","4","600"]},"Initially, HTTP client module  receives an HTTP response from TCP\/IP module  (). The HTTP response is a response by a responding server system to an HTTP request for a resource. For example, the HTTP response may be a response by server system  to an HTTP request sent by client system . The HTTP response includes an HTTP header. The HTTP header includes a status code. In one example implementation, the status codes are the status codes defined in IETF RFC 2616, the entire content of which is hereby incorporated by reference.","After receiving the HTTP response, HTTP client module  determines whether the HTTP response is an HTTP rejection response (). For example, HTTP client module  may determine that the HTTP response specifies a rejection status code if the HTTP response specifies the status code \u201c Unauthorized.\u201d As mentioned above, an HTTP response including the status code \u201c Unauthorized\u201d also includes an authentication response header. The authentication response header contains authentication data.","If HTTP client module  determines that the HTTP response is an HTTP rejection response (\u201cYES\u201d of ), HTTP client module  provides authentication data to authentication client module  (). As discussed above, HTTP rejection responses include authentication response headers. An authentication response header specifies authentication data. The authentication data includes an authentication scheme identifier and may include authentication parameters. In one example implementation, HTTP client module  provides the authentication data to authentication client module  by invoking a method of authentication client module  associated with the authentication scheme indicated by the authentication scheme identifier. When invoking the method, HTTP client module  provides the authentication parameters as parameters of the method.","When authentication client module  receives the authentication data, authentication client module  may perform one or more actions in an authentication process. For example, authentication client module  may prompt a user of client system  to provide a username and password. In this example, after the authentication client module  receives the username and password, authentication client module  may send a new resource request to HTTP client module . The new resource request specifies the username and password. In response to the new resource request, HTTP client module  may perform operation  () again, using the username and password as part of a process to generate the authorization header.","In a second example, the authentication response header specifies a \u201cNegotiate\u201d authentication scheme identifier. The \u201cNegotiate\u201d authentication scheme identifier indicates that the responding server system wants to use SPNEGO to negotiate a security protocol. In this second example, HTTP client module  invokes a Negotiate method implemented by authentication client module . In response, authentication client module  negotiates a security protocol with the responding server system and then uses the negotiated security protocol to authenticate client system  to the responding server system. When negotiating the security protocol and using the negotiated security protocol, authentication client module  may use HTTP client module  to send HTTP requests to and receive HTTP responses from the responding server system.","If HTTP client module  determines that the HTTP response is not an HTTP rejection response (\u201cNO\u201d of ), HTTP client module  determines whether the HTTP response includes an authentication response header (). AN HTTP response having a status code \u201c200 Success\u201d may include an authentication response header when an authentication process is completed successfully. If HTTP client module  determines that the HTTP response includes an authentication response header (\u201cYES\u201d of ), HTTP client module  provides authentication data specified by the authentication response header to authentication client module  ().","After providing the authentication data to authentication client module  or after determining that the HTTP response does not include an authentication response header (\u201cNO\u201d of ), HTTP client module  extracts an HTTP authentication mode preference header from the HTTP response (). As discussed above, the HTTP authentication mode preference header indicates a preferred HTTP authentication mode. For instance, the HTTP authentication mode preference header may indicate that the preferred HTTP authentication mode is connection-based HTTP authentication. Alternatively, the HTTP authentication mode preference header may indicate that the preferred HTTP authentication mode is request-based HTTP authentication.","After extracting the HTTP authentication mode preference header, HTTP client module  updates mode preference data (). HTTP client module  updates the mode preference data to indicate that the preferred HTTP authentication mode for the responding server system is the HTTP authentication mode indicated by the HTTP authentication mode preference header. In one example implementation, client system  stores the mode preference data in mode preference data repository .","After updating the mode preference data, HTTP client module  extracts the requested resource from the HTTP response (). For example, HTTP client module  may extract a requested Web page from the HTTP response. Once HTTP client module  has extracted the requested resource from the HTTP response, HTTP client module  provides the requested resource to the requesting application ().",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 7","FIG. 7"],"b":["700","700","702","702","702"]},"In addition, electronic computing device  comprises a processing unit . As mentioned above, a processing unit is a set of one or more physical electronic integrated circuits that are capable of executing instructions. In a first example, processing unit  may execute software instructions that cause electronic computing device  to provide specific functionality. In this first example, processing unit  may be implemented as one or more processing cores and\/or as one or more separate microprocessors. For instance, in this first example, processing unit  may be implemented as one or more Intel Core 2 microprocessors. Processing unit  may be capable of executing instructions in an instruction set, such as the x86 instruction set, the POWER instruction set, a RISC instruction set, the SPARC instruction set, the IA-64 instruction set, the MIPS instruction set, or another instruction set. In a second example, processing unit  may be implemented as an ASIC that provides specific functionality. In an third example, processing unit  may provide specific functionality by using an ASIC and by executing software instructions.","Electronic computing device  also comprises a video interface . Video interface  enables electronic computing device  to output video information to a display device . Display device  may be a variety of different types of display devices. For instance, display device  may be a cathode-ray tube display, an LCD display panel, a plasma screen display panel, a touch-sensitive display panel, a LED array, or another type of display device.","In addition, electronic computing device  includes a non-volatile storage device . Non-volatile storage device  is a computer-readable storage medium that is capable of storing data and\/or instructions. Non-volatile storage device  may be a variety of different types of non-volatile storage devices. For example, non-volatile storage device  may be one or more hard disk drives, magnetic tape drives, CD-ROM drives, DVD-ROM drives, Blu-Ray disc drives, or other types of non-volatile storage devices.","Electronic computing device  also includes an external component interface  that enables electronic computing device  to communicate with external components. As illustrated in the example of , external component interface  enables electronic computing device  to communicate with an input device  and an external storage device . In one implementation of electronic computing device , external component interface  is a Universal Serial Bus (USB) interface. In other implementations of electronic computing device , electronic computing device  may include another type of interface that enables electronic computing device  to communicate with input devices and\/or output devices. For instance, electronic computing device  may include a PS\/2 interface. Input device  may be a variety of different types of devices including, but not limited to keyboards, mice, trackballs, stylus input devices, touch pads, touch-sensitive display screens, or other types of input devices. External storage device  may be a variety of different types of computer-readable storage media including magnetic tape, flash memory modules, magnetic disk drives, optical disc drives, and other computer-readable storage media.","In addition, electronic computing device  includes a network interface card  that enables electronic computing device  to send data to and receive data from an electronic communication network. Network interface card  may be a variety of different types of network interface. For example, network interface card  may be an Ethernet interface, a token-ring network interface, a fiber optic network interface, a wireless network interface (e.g., WiFi, WiMax, etc.), or another type of network interface.","Electronic computing device  also includes a communications medium . Communications medium  facilitates communication among the various components of electronic computing device . Communications medium  may comprise one or more different types of communications media including, but not limited to, a PCI bus, a PCI Express bus, an accelerated graphics port (AGP) bus, an Infiniband interconnect, a serial Advanced Technology Attachment (ATA) interconnect, a parallel ATA interconnect, a Fiber Channel interconnect, a USB bus, a Small Computer System Interface (SCSI) interface, or another type of communications medium.","Electronic computing device  includes several computer-readable storage media (i.e., memory unit , non-volatile storage device , and external storage device ). Together, these computer-readable storage media may constitute a single data storage system. As discussed above, a data storage system is a set of one or more computer-readable data storage mediums. This data storage system may store instructions executable by processing unit . Actions described in the above description may result from the execution of the instructions stored on this data storage system. Thus, when this description says that a particular logical module performs a particular action, such a statement may be interpreted to mean that instructions of the logical module, when executed by processing unit , cause electronic computing device  to perform the action.","The technologies of this disclosure may be realized in many ways. For example, the technologies of this disclosure may be realized as a method of negotiating an HTTP authentication mode. The method comprises receiving a first HTTP request at a server system, the first HTTP request being sent by a client system, the first HTTP request requesting a first resource, the server system receiving the first HTTP request via an electronic communication network. In addition, the method comprises in response to receiving the first HTTP request, sending an HTTP response, the HTTP response being sent to the client system, the HTTP response being sent by the server system, the HTTP response containing an HTTP authentication mode preference header, the HTTP authentication mode preference header indicating a preferred HTTP authentication mode.","In another example, the technologies of this disclosure may be realized as an electronic computing device comprising a processing unit and a data storage system. The data storage system storing instructions that, when executed by the processing unit, cause the electronic computing system to receive a Hypertext Transfer Protocol (HTTP) response, the HTTP response being sent by a server system, the HTTP response being received by the electronic computing system via an electronic communication network, the HTTP response containing an HTTP authentication mode preference header, the HTTP authentication mode preference header indicating a preferred HTTP authentication mode. The instructions also cause the electronic computing system to, in response to receiving the HTTP response, update mode preference data such that the mode preference data indicates the preferred HTTP authentication mode. After updating the mode preference data, the instructions cause the electronic computing system to use the mode preference data to identify the preferred HTTP authentication mode. In response to identifying the preferred HTTP authentication mode, the instructions cause the electronic computing system to use the preferred HTTP authentication mode in an HTTP request, the HTTP request requesting a resource, the resource being provided by the server system, the HTTP request being sent via the electronic communication network, the HTTP request being sent to the server system.","In another example, the technologies of this disclosure may be realized as a computer-readable data storage medium storing instructions that, when executed by a processing unit of a server system, cause the server system to receive a Hypertext Transfer Protocol (HTTP) request, the HTTP request being received via an electronic communication network, the HTTP request being sent by a client system, the HTTP request requesting a resource, the resource being provided by the server system. In response to receiving the HTTP request, the instructions cause the server system to determine whether HTTP authentication is required to access the resource. In response to determining that HTTP authentication is not required to access the resource, the instructions cause the server system to retrieve the resource. In response to determining that HTTP authentication is not required to access the resource, the instructions cause the server system to send a first HTTP response, the first HTTP response containing the resource, the first HTTP response being sent via the electronic communication network, the first HTTP response being sent to the client system. In response to determining that HTTP authentication is required to access the resource, the instructions cause the server system to identify a required HTTP authentication mode, the required HTTP authentication mode being an HTTP authentication mode required to access the resource. In response to identifying the required HTTP authentication mode, the instructions cause the server system to determine whether the required HTTP authentication mode is connection-based HTTP authentication. The instructions also cause the server system to send a second HTTP response, the server system sending the second HTTP response when the second HTTP authentication mode is connection-based HTTP authentication, the second HTTP response being responsive to the HTTP request, the second HTTP response containing a first HTTP authentication mode preference header, the first HTTP authentication mode preference header indicating that a preferred HTTP authentication mode is connection-based HTTP authentication, the second HTTP response being sent via the electronic communication network, the second HTTP response being sent to the client system. In response to identifying the required HTTP authentication mode, the instructions cause the server system to determine whether the required HTTP authentication mode is request-based HTTP authentication. Furthermore, the instructions cause the server system to send a third HTTP response, the server system sending the third HTTP response when the required HTTP authentication mode is request-based HTTP authentication, the third HTTP response being responsive to the HTTP request, the third HTTP response containing a second HTTP authentication mode preference header, the second HTTP authentication preference header indicating that the preferred HTTP authentication mode is request-based HTTP authentication, the third HTTP response being sent via the electronic communication network, the third HTTP response being sent to the client system.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
