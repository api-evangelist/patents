---
title: Method, apparatus and system for controlling transmission of an attachment to an email using a plurality of computers
abstract: A method, apparatus and system for controlling transmission of an attachment to an email using a plurality of computers is provided. In one aspect, a client machine and a mobile computing device are provided. The client machine is configured to execute a browser application. The mobile computing device is configured to host a web server application. When the client machine and the mobile computing device are connected, functions on the mobile computing device become available on the client machine via the interaction between the web server and the browser, specifically e-mail functionality and control of transmission of attachments. Further, updates on attachment download at the mobile computing device are sent to the client machine in response to periodic requests from the client machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08606850&OS=08606850&RS=08606850
owner: BlackBerry Limited
number: 08606850
owner_city: Waterloo, ON
owner_country: CA
publication_date: 20110330
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims priority from U.S. Provisional Application No. 61\/386,631 filed Sep. 27, 2010, the contents of which are incorporated herein by reference.","The present specification relates generally to computing devices and more particular relates to a method, apparatus and system for controlling transmission of an attachment to an email using a plurality of computers.","The evolution of computers is currently quite active in the mobile device environment. It is now well-known to including calendaring, contacts, and messaging functions in mobile devices. More recently, there has been a veritable explosion of the number and type of applications that are configured to the unique form factors and computing environments of mobile devices.","Referring now to , a system for accessing an application across a plurality of computers is indicated generally at . In a present embodiment system  comprises at least one computing device in the form of a mobile computing device  and at least one server -, - . . . -. (Generically, server , and collectively, servers . This nomenclature is used elsewhere herein).","A wireless link  connects mobile computing device  with one of a plurality of wireless base stations . In , mobile computing device  is shown as connecting to a first base station - via wireless link , but mobile computing device  can also connect to other base stations  in system . Backhaul links  connect each base station  to a network . Additional backhaul links  connect network  to each server .","Mobile computing device  can be any type of electronic device that can be used in a self-contained manner and to interact with content available on network . Interaction includes displaying of information on mobile computing device  as well as to receive input at mobile computing device  that can in turn be sent back over network . Mobile computing device  will be explained in greater detail below.","It should now be understood that the nature of network  and links ,  and  associated therewith is not particularly limited and are, in general, based on any combination of architectures that will support interactions between mobile computing device  and servers . In a present embodiment network  includes the Internet as well as appropriate gateways and backhauls to links  and . For example, backhaul links  and backhaul links  can be based on a T, T, O or any other suitable wired or wireless connections. Accordingly, the links  and  between network  and the interconnected components are complementary to functional requirements of those components.","Link  may be based on, by way of non-limiting examples, a core mobile network infrastructure, such as, by way of non-limiting examples, one or more of Global System for Mobile communications (\u201cGSM\u201d); Code Division Multiple Access (\u201cCDMA\u201d); CDMA 2000;) 3G; or Evolution-Data Optimized or Evolution-Data (\u201cEVDO\u201d); or successors thereto or hybrids or combinations thereof; or on wireless local area network (\u201cWLAN\u201d) infrastructures such as, by way of non-limiting examples, the Institute for Electrical and Electronic Engineers (\u201cIEEE\u201d) 802.11 Standard (and its variants) or Bluetooth or the like or hybrids or combinations thereof. Note that in an example variation of system  it is contemplated that link  may be a wired connection.","A client machine  also connects to mobile computing device  via a link . In a present example implementation, client machine  is a desktop, notebook, or laptop computer and link  is a direct connection effected wirelessly or wired. Where link  is wireless, then link  can be, for example, a Bluetooth\u2122 or a peer-to-peer Wi-Fi connection between client machine  and mobile computing device . Where link  is wired, then link  can be, for example, a universal serial bus (USB) or Firewire connection. Those skilled in the art will now recognize other types of wired or wireless connections that can be used to effect a direct connection for link . In variations, link  can be effected indirectly through, for example, a local area network or a Wi-Fi network, or even through a wide area network such as network .","Client machine  is initially configured to maintain or execute at least a web browser application , and need not have direct access to network , though in some cases such a direct connection to network  would be possible through a link . Accordingly, client machine  can be based on any computing environment that provides web browsing functionality. For example, such a computing environment can be based on an Intel\u2122 or AMD\u2122 or other microprocessor, with accompanying volatile storage (e.g. random access memory) and non-volatile storage (e.g. Flash, Hard disc drive), read only memory (ROM), network interface card(s), video cards that connect to one or more displays, a keyboard, a mouse (or other pointing device). Any operating system may be used, including, for example, an operating system offered by Microsoft\u2122, or a Linux\u2122 operating system, or an operating system offered by Apple Computer. Browser application  can be any browser application that is executable on a respective operating system, including Firefox\u2122, Internet Explorer\u2122, Chrome\u2122, Opera\u2122 or Safari\u2122. Typically, though not necessarily, client machine  will have a display or a keyboard or both that are larger than that provided on mobile computing device . Client machine  may also have another configuration, such as a tablet computing device.","Servers  can be based on any well-known server environment including a module that houses one or more central processing units, volatile memory (e.g. random access memory), persistent memory (e.g. hard disk devices) and network interfaces to allow servers  to communicate over network . For example, each server  can be a ProLiant\u00ae Server from Hewlett-Packard Company, 3000 Hanover Street Palo Alto, Calif. 94304-1185 USA having a plurality of central processing units and having several gigabytes of random access memory. However, it is to be emphasized that this particular server is merely a non-limiting example, and a vast array of other types of computing environments for each server  is contemplated. Furthermore, it is contemplated that each server  may be implemented as a plurality of interconnected servers, in a so-called server farm, which are mirrored or otherwise configured for load balancing or failover or high availability or any or all of those.","As will be discussed further below, each server  maintains a different networking application . Networking applications  can be any application whereby a corresponding client-side application executes on mobile computing device  which accesses data or any other server functions on a given server . Networking applications  can be, by way of non-limiting examples, personal information management applications, social networking applications, or messaging applications. Non-limiting examples of personal information management applications include calendaring and contact management applications. Non-limiting examples of social networking application include Facebook\u2122, Twitter\u2122, LinkedIn\u2122, and MySpace\u2122. Networking applications  can also comprise message applications such email, BlackBerry Messenger, AOL instant messenger (AIM), Yahoo Messenger (YM), Google Talk (Gtalk), Lotus Connections, Windows Live Messenger. There are many others.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2","FIG. 3"],"b":["54","54","54"]},"Referring to , in a present, non-limiting example, device  comprises a chassis  that supports a display . Display  can comprise one or more light emitters such as an array of light emitting diodes (LED), liquid crystals, plasma cells, or organic light emitting diodes (OLED). Other types of light emitters are contemplated. Chassis  also support a keyboard . It is to be understood that this specification is not limited to any particular structure, spacing, pitch or shape of keyboard , and the depiction in  is an example. For example, full or reduced \u201cQWERTY\u201d keyboards are contemplated. Other types of keyboards are contemplated. (In variations, device  may also be a touch-screen device with no physical keyboard.) Device  also comprises a pointing device  which can be implemented as a touch-pad, joystick, trackball, track-wheel, or as a touch sensitive membrane on display . Device  may also comprise a speaker  for generating audio output, and a microphone  for receiving audio input.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 3"],"b":["154","154","162","164","168","176","162","164","168","176","100","100","100","104","108","154","104","100","108"]},"Processor  in turn is also configured to control display , speaker  and flash , also in accordance with different programming instructions and optionally responsive to different input received from the input devices. Fewer, additional, or alternative output devices are contemplated.","Processor  also connects to a network interface , which can be implemented in a present embodiment as one or more radios configured to communicate over link  and link . Network interface  can thus be generalized as a further input\/output device that can be utilized by processor  to fulfill various programming instructions. It will be understood that interface  is configured to correspond with the network architecture that defines each link  and link . It is also contemplated that each network interface  can include multiple radios to accommodate the different protocols that may be used to implement different types of links where the network architecture for each link  differs between base stations , or where link  may be based on different architectures. For example, link  may also be a wired link (e.g. USB) in which case it may not have a radio at all.","In a present embodiment, device  is also configured to maintain, within non-volatile storage , a host application , and one or more client applications  such as an email application -, a contact manager application -, a calendar application -, an instant messenger application - or one or more of a plurality of additional applications -. Non-limiting examples of additional applications  can comprise, without limitation, one or more of social networking client applications, e.g., Twitter, Facebook, MySpace, LinkedIn; other applications associated with online communities e.g., Flickr, Gtalk, etc; document tools such as Google Docs. Any one or more of host application  and client applications  can be pre-stored in non-volatile storage  upon manufacture of device , or downloaded via network interface  and saved on non-volatile storage  at any time subsequent to manufacture of device . Each application  is also configured to interact with its corresponding network application  as needed.","Processor  is configured to execute each application , making use of input from input devices and controlling display  to generate output based on that input and according to the programming instructions of each application . In general, each application  can be based on any existing or future application  that can be executed entirely on a device such as device , even when link  is not active and device  is disconnected from client machine . For example, email application - can be a standard electronic mail application that is already commonly deployed on various devices such as device  and entirely usable on device , without any connection to client machine , and while accessing servers  as needed. Likewise contact manager application -, calendar application -, instant messenger application - and any of the additional applications -can be based on such applications that are already commonly deployed, or may be deployed in the future, and entirely usable on device  without any connection to client machine , and while accessing servers  as needed.","Processor  is also configured to execute host application  to permit access to client applications  via client machine , when link  is active, as will be explained further below.","Referring briefly to , a variation on device  is indicated generally as device . Device comprises many of the same components as device , and therefore like components bear like references except followed by the suffix \u201ca\u201d. Of note is that device excludes keyboard  and pointing device . Instead, device comprises a touch screen which provides the combined functionality of keyboard  and pointing device . Further variations on device  will now occur to those skilled in the art, but for convenience, further discussion of the present specification will focus on device  as described above. As will become apparent from further discussion herein, the lack of a full keyboard in device presents certain limitations for providing input to device , and those limitations may be mitigated by the present specification.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 5","FIG. 5","FIG. 1"],"b":["124","88","128","128","60","124","300","304","300","88","128","304","304","300","128","304","128","300","88","86","128","128","128","88","128","88","304","128","304","128"]},"Referring now to , a flow-chart depicting a method for provisioning a client machine to interact with a mobile electronic device is indicated generally at . Method  can be implemented using system , and for purposes of explaining method  it will be assumed that method  is performed using system . However, it is to be understood that variations are contemplated to both method  and system  and such variations are within the scope of this specification. Method  is not strictly required, but in a present implementation method  provides a proxy on client machine  such that web service  is addressable and reachable from the address bar in browser . Method  also assumes that link  is a direct link between client machine  and mobile electronic device . Again, such a direct connection for link  can be a peer-to-peer Bluetooth\u2122 connection whereby client machine  and device  are \u201cpaired\u201d using known Bluetooth\u2122 hardware and network protocols. Such a direct connection for link  can also be a USB cable connection. Other means for implementing link  will now occur to those skilled in the art. In a present implementation, it is assumed that link  is a Bluetooth\u2122 connection.","Block  comprises receiving an instruction to install a proxy application. Block  can be implemented in different ways. One factor that affects how block  is implemented is the location where the installation file for the proxy application is stored. In one implementation, the proxy application is stored on a server (possibly one or more of servers , though not necessarily) connected to network , in which case installation initiation may be effected by entering a uniform resource locator (URL) into browser  that points to the network  address of the server that stores the proxy application. In another implementation, the proxy application is stored as a data file within persistent storage  of device . In this implementation, non-volatile storage  of device  is configured to appear as an external hard-disk when link  is active\u2014this type of configuration being inherent in many operating systems and devices such as device , where link  is a USB connection. Thus, once device  appears as a hard-disk, the data file containing the proxy application can be downloaded via link  onto client machine . In variations, the proxy could be provided on a CD or other removable media.","Block  comprises receiving the proxy application for which installation was initiated at block . When proxy application is stored on network , then block  comprises downloading the proxy application via network  and link . When proxy application is stored on device , then the proxy application is transferred via link  to client machine .","Those skilled in the art will now recognize other means of effecting block  and block .","Block  comprises installing the proxy application that was received at block . At this point it will be appreciated that the form in which proxy application is originally stored and received can vary according to the level of sophistication to be employed in the actual installation of the proxy application. It is presently contemplated that the proxy application will be an executable application that invokes an installation wizard, or the like, so that a simple series of key strokes on client machine  are all that is required to actually install the proxy application. However, proxy application can be received at block  in other forms.","Block  comprises registering the proxy application installed at block . Such registration is local to the client machine and serves to identify a URL or Internet Protocol (IP) address redirect such that entry of that URL or IP addresses that causes browser  to access web service . A representation of portions of system  is shown in , which itself is a variation on .  is thus substantially the same as , except that a proxy application  is shown as being installed on client machine  and sitting between browser  and web service  on device . Expressed another way, proxy application  configures client machine  so that entry of a given URL or other address in the address bar of browser  directs browser  to connect with web service  and to generate a web page on the display of client machine  that corresponds to a web page being offered by web service . An example of such a URL may be, http:\/\/localhost, provided such a URL is not already reserved for another proxy application on client machine . Thus, upon entry of http:\/\/localhost, browser  will be directed to proxy  and in turn browser  will connect to web service . Returning to the example where link  is based on Bluetooth\u2122, then proxy application  sits between browser  and the Bluetooth service and drivers executing on client machine , and forms a virtual connection with device  according to the Bluetooth pairing that has been registered on the Bluetooth service of device . In turn, web service  is configured to respond to HTTP requests received via the Bluetooth service that is resident on device .","At this point it is to be reiterated that method  and the use of proxy application  is not needed in all implementations contemplated by this specification, and accordingly, certain of the following discussions may not make reference to proxy application  and . However, it is also to be understood that the following discussion is also applicable to configurations that utilize proxy application .","Referring now to , a flow-chart depicting a method for accessing an application across a plurality of computers is indicated generally at . Method  can be implemented using system , and for purposes of explaining method  it will be assumed that method  is performed using system . However, it is to be understood that variations are contemplated to both method  and system  and such variations are within the scope of this specification. Performance of method  presumes that link  is active between device  and client machine .","Block  comprises opening a web browser. In system , block  is effected at client machine  whereby browser  is opened in the usual manner. Block  comprises receiving a web services address. Block  is effected by typing an address (e.g. http:\/\/localhost) into the address bar of browser . In system , the address received at block  corresponds to the address of web service  of host application . In variations, it is contemplated that system  may be configured so that browser  is automatically launched and directed to the appropriate address in a single step: for example via a desktop shortcut on client machine .","Block  comprises loading a web page from the web service. In system , and during the initial performance of block , block  can comprise loading a webpage in the form of a menu that can be used to select invocation of any one of applications . An example of performance of this initial performance of block  is shown in , where browser  is open on the display of client machine , and a URL pointing to the web service  of host application  is open. Block  comprises generating the web page that was loaded at block . As can be seen in , host application  is serving a menu web page, which offers web-based access to the applications  that are available on device . Thus, as shown on the display of client machine  in , menu item one reads \u201cEmail\u201d, which is offering access to email application -; menu item two reads \u201cContact Manager\u201d, which is offering access to contact manager application -; menu item three reads \u201cCalendar\u201d, which is offering access to contact manager application -; and menu item four reads \u201cInstant Messenger\u201d, which is offering access to instant message application -. For simplicity, application -is not shown in .","Block  comprises sending any local input to the web service. Block  is effected through browser  which accepts local input from the keyboard or the mouse that is connected to client machine . As part of that locally received input, any input that is responsive to forms or links or other input that can be entered into the page generated at block  is sent to the web service that originally served the page generated at block .","According to the example in , input can be received that selects one of the four menu items being generated on the display of client machine . To give a specific example, it can be assumed that menu item one is selected, indicating an instruction to access email application -. Again, such selection can be effected via keyboard input, or by bringing a cursor into focus over the desired selection using a mouse, and then clicking the mouse to effect the selection.","Block  comprises determining whether an instruction has been received to close the web service. Such a determination can be based on closing browser , or it can be based on entry of another URL in the address bar of browser , or it can based on any other instruction or event that instructs closing of the web service. A yes determination ends method .","A no determination leads to a return to block  where any updates to the web page are loaded. Thereafter, method  continues performance as previously described. To give further explanation, and continuing with the example above where the menu selection for email was made, then during this performance of block  and block , a web page that provides web-access to email application - will be loaded and generated. This non-limiting example is shown in , where browser application  is shown as accessing the address http:\/\/localhost\/email, which is hosted by host application  in order to provide access to email application -. When system  is configured using plug-ins , then block  and block  may likewise make appropriate use of plug-in - from  in order to generate the display shown in .","When the display shown in  is active, then block  can comprise receiving any input that is relevant to email application -. For example, such input may comprise selecting \u201cNew Message\u201d, to thereby cause generation of a dialogue box on the display of client machine  which can be used to compose a new email message. In this example, a subsequent cycle through block  and block  would result in generation of such a dialogue box for composition of a new email message. Note that such generation is effected by host application  creating a web page with such a dialogue box, based on host application  interacting with email application -, again making use of plug-in - from  when such a plug-in is employed.","In general, those skilled in the art will now appreciate that the data generated on the display of client machine  is under the control of device  and that client machine  is effectively a web-client while device  acts as a web-server. Furthermore, device  also makes use of link  to access the appropriate server  and application , as part of determining what data to display on the display of client machine . Again, in the example of email, email application - accesses application - on server - in order to send new emails generated using client machine  and by the same token, email application - accesses application - in order to receive new emails, which are in turn generated on the display of client machine . Any other functions normally associated with email application - are likewise reflected on the display of client machine  and appropriate access to server - is effected accordingly. In addition to static web pages, browser  may be configured to receive code (e.g. JavaScript code) from host application . While executing this code, browser  may, from time to time, (e.g. possibly in response to user input or some other condition), request additional resources from host application  in order to update the page currently on the display without loading an entirely new page.","In order to configure browser  to respond to changes that occur on device , or on server , an \u201copen-get\u201d or equivalent programming function is employed so that browser  will automatically receive and respond to such changes. For example, assume that a new email message arrives on server -, and that same new email message automatically arrives on device . The \u201copen-get\u201d function running on browser  will result in browser  also ascertaining the arrival of the new email message and result in the display of client machine  being updated accordingly to reflect the arrival of the new email message.","To help further illustrate the present specification,  shows a non-limiting example of the result of selecting contact manager application -. In , the URL http:\/\/localhost\/contacts is active and accordingly the web service  of host application  is accessing contact manager - so that input relative to contact manager application - can be received via client machine , and likewise, the display of client machine  can be controlled to display content relative to contact manager application . Again, changes to the contact database can be made on client machine , or they can be made on device . Such changes can then be propagated to server - in the usual manner.","Those skilled in the art will now recognize how the foregoing can extend to calendar application -, instant messenger application - and other applications -","Various advantages will now be apparent. For example, it is common that communications between device  and servers  may be effected via encrypted links. Accordingly, when link  is active, a full browsing experience, complete with full size display and full size keyboard, can be used to interact with various applications on device  but such interactions will be encrypted and secure. Furthermore, in certain situations link  may not be available, or of limited use, due to security restrictions, usage fees, or of low bandwidth and accordingly accessing data on servers  from client machine  via link  may not be possible or may be impractical. Nonetheless, it may be desired to use client machine  for such interactions, rather than device , due to the availability of the full keyboard, mouse and regular display that is available on client machine . Accordingly, the present specification may be most useful when device  is near enough to a given client machine  in order to establish link . Such client machines  are ubiquitous in air port lounges, hotel rooms, Internet cafes and other locations. Accordingly, for at least these reasons, this specification can be used to provide access to various applications from such client machines  in a novel, inventive and useful manner. It should also be noted that client machine  may have different configurations, and could include, for example, a tablet computer.","Variations, subsets, enhancements and combinations of the foregoing are contemplated. For example, none of the screen shots shown in ,  or  should be construed as being limiting as to exactly how data is generated on the display of client machine .","Furthermore, in relation to proxy application  in , it may be unlikely that publicly available client machines  will have proxy application  pre-installed, so as noted proxy application  may be stored in non-volatile storage  on client device . Further, it should be noted that non-volatile storage , itself, can be implemented as a removable storage media such as an SD card. Using a USB connection that proxy application  may be downloaded from the SD card to the client machine . Device  may also be configured so that it includes an auto-executable file which immediately executes on client machine  upon connection to client machine , and automatically copies proxy application  to the client machine . (Alternatively, device  can be configured so this installation is performed manually). After proxy application  has started, link  may be implemented via the USB connection or Bluetooth pairing or by other means. In the case of Bluetooth, the pairing step with client machine  could happen in a number of ways. For example, a scan for Bluetooth devices may be initiated from either device  or client machine  or both in the usual way. Alternatively, as part of proxy application , the client machine  may be configured to display a barcode that can be scanned using optical capture unit . The barcode data may comprise configuration information usable by device  to establish pairing with client machine .","When a \u201cyes\u201d decision is reached at block , client machine  may be configured to clear ifs browser cache to ensure that private data has been cleared from the client machine's  memory. The \u201cyes\u201d determination at block  may be reached a number of ways: device  may be manually logged off from client machine ; link  may be terminated by unplugging a USB cable used to establish link ; link  may be a Bluetooth connection. An inactivity timer may be used to reach the \u201cyes\u201d determination at bock .","Alternatively, client machine  may operate in a no-cache mode when connected to device . In this mode, performance may be somewhat degraded since browser  may download content more often.","As noted above, device  runs a host application  that may be configured to listen to a real time communication channel, such an instant messaging conversation via instant message application -. JavaScript may be executing on browser , such JavaScript having been provided by host application . This JavaScript maintains an open connection with the host application . When an event occurs in application -, it is returned to the JavaScript so that corresponding changes occur on the display of client machine  under the control of browser . If an instant message reply is sent from the browser , then a separate parallel connection is opened and the commands are sent to host application  which then injects them into the ongoing conversation within instant message application -.","In general, it can be noted that there are many applications  (with corresponding data sources and networking applications ) on devices like device , including without limitation email, contacts, calendar, etc. Using this specification, each application  and its data may be rendered using browser  in a customized manner. Also, newly-installed and newly-created applications  may be readily added as available through browser  by creating a new application plug-in  for each new application . Host application  is configured to allow for ongoing registrations of new plug-ins . In effect, device  provides an application programming interface (API) associated with host application  that allows any application  running on the device  to register as a data source. Each application  can be assigned its own URL prefix and a handler class that implements a particular interface. All hypertext transfer protocol (HTTP) requests from client machine  for URLs with that prefix may be given to the handler class to be processed. The HTTP handler may respond to each request in any way that it sees fit, so it is in control of the data rendering. Because registration of applications  with host application  may be dynamic, it is not needed to compile host application  to be limited to only those applications  installed at the same time as host application  is installed. Newly-installed applications can register at which point they will dynamically appear as being available through browser . Host application  can also dynamically enumerate all of the registered applications  at the time of creating a menu screen such as the menu screen shown in .","Referring now to  a system for providing event notifications across a plurality of computers is indicated generally at . System is a variation on system  and thus like elements bear like references to their counterparts in system , except followed by the suffix \u201ca\u201d. System can be built on system  and its variants, and thus the particular variations of system will become clearer in the following discussion.","Such variations become clearer in . , which is a variation on , shows a block diagram of an example an implementation of host application and its virtual connections to browser and applications . It can be noted that, according to the variation in , host application may be modified to more permanently include application plug-ins or applications themselves, or all of them within host application , thereby foregoing the modularity of plug-ins ","In , browser is shown as including one or more asynchronous request modules , and web service is shown as including an asynchronous response module and a queue manager . It is to be understood by those skilled in the art that the term \u201cmodule\u201d need not be construed in a limiting sense, and can comprise various software structures (e.g. objects, libraries, classes, applets, functions, combinations thereof, etc.) that may be incorporated directly into, or connected to, other software components discussed herein.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 13","b":["303","300","303","104","108","303","301","302","300","54"],"i":["a ","a","a ","a ","a","a","a","a. "]},"As will be discussed further below, a queue is provided respective to each request module , and the existence of queue assumes that a given queue has been created and is active.","Asynchronous request module(s) may be implemented using one or more web development techniques, such as that group of techniques generally referred to Asynchronous JavaScript and extensible Markup Language (XML) (AJAX). Making asynchronous requests via asynchronous request module allows browser to continue running while browser is waiting for responses to arrive. For example, assume that the page corresponding to http:\/\/localhost\/email as shown in  is being generated on client machine . Asynchronous request module(s) may execute while the display of client machine  shown in  is being generated, without interrupting the appearance of display on client machine . An example of asynchronous request that could be handled by asynchronous request module would involve requesting whether any new email has arrived that should be generated on the display of client machine . Responses to such requests would result in new email appearing on the inbox shown on the display of client machines  shown in , thereby giving the effect of email being pushed to the client machine .","As another example, assume that the page corresponding to http:\/\/localhost\/contacts as shown in  is being generated on client machine . Asynchronous request module(s) may execute while the display of client machine  shown in  is being generated, without interrupting the appearance of display on client machine . An example of asynchronous request that could be handled by asynchronous request module would involve requesting whether any changes to the contact database have occurred that should be generated on the display of client machine . Responses to such requests would result in such changes to the contact database to appear show in on the display of client machines  shown in , thereby giving the appearance of such database changes being pushed to the client machine .","Other example for uses of asynchronous request modules will now occur to those skilled in the art.","It can also be noted that multiple web browsers, or multiple tabs within a web browser, may be open on client machine . For example, multiple instances of web browser , or multiple tabs with web browser may be open to http:\/\/localhost\/email. In this circumstance, multiple asynchronous request modules can be active for each instance of the web page corresponding to http:\/\/localhost\/email. As will be discussed further below, asynchronous response module and queue manager are configured so that each instance is updated for new events so that the display of each instance remains substantially identical, but without sending duplicate copies of a response to a given instance.","In order to coordinate requests between a request module and a response module , each request module is configured to generate a unique identifier that is used in communications with the response module . One way of generating such a unique identifier is to configure request module to select a random integer from a large range, which will result in a unique identifier with high probability, which thereby avoids any complex request module registration protocol, although if desired such a complex registration protocol may be employed.","Response module is configured so that when it receives a request from request module , response module will determine whether a queue exists related to the provided unique identifier. If no queue exists, then response module creates a queue related to that unique identifier associated with the originating request module . Response module is configured to then check whether there are any events present in the related queue. If so, in one implementation, response module is configured to remove the first event from the queue and returns the data for that event to the originating request module . If the queue is empty, then the response module holds the request open, waiting for an event to arrive in the related queue. When an event arrives, the response module removes the event from the queue and returns the data for that event to the client.","Each application  that is executing may be configured to generate events which are returned to a request module respective to a given application . When an application  generates an event it is placed in an appropriate queue response module which examines all of existing queues and places the data for that event in any appropriate target queue.","Queue manager , which is configured to work in conjunction with response module , is configured to determine whether each particular queue is active, and if not active, then queue manager will delete the queue . The queue may be determined to be active if, for example, one of the following conditions is met: a request module is currently waiting for an event to arrive in queue; or the elapsed time since an event was returned from that queue to request module is below a particular threshold. This second condition is provided so as to account for the fact that a request module may not currently be waiting for an event if it is currently processing the last event that was returned to it. Thus the threshold is set to a value that reflects the amount of time expected to process an event by browser In the event, however, each request module is expected make a subsequent request to the server within a relatively short period of time to issue a request for the next event.","In general, response module and queue manager are configured to place events into appropriate active queues , while queue manager is configured to remove every inactive queue from its list of queues . Queued events are returned to request modules as described above.","Referring now to , a method of providing event notifications across a plurality of computers is depicted in the form of a flow chart that is indicated generally at . Method  can be implemented on system , or a variant thereon. However, method  is described for illustrative purposes in relation to system , and thus those blocks of method  that are performed by request module are denoted by a stippled-line box encircling those blocks. By the same token, those blocks of method  that are performed by response module are denoted by a stippled-line box encircling those blocks.","Method  can be performed as a part of performance of block  of method .","Block  comprises creating a unique identifier. In a present example, block is performed by a request module that is respective to a given web page that is open client machine  that is respective to a given application . As noted above, one way of generating a unique identifier is to select a random integer from a large range, which will result in a unique identifier with high probability.","Block  comprises sending an asynchronous request with the identifier from block . Again, the nature of the request is not particularly limited, and can generally correspond to any aspect of a particular application where events within that application are ultimately relevant to the web page on client machine that initiates method . To help illustrate, however,  shows the generation of a web page on the display of client machine that corresponds to email application -, having the URL http:\/\/localhost\/email. The request at block , in this example, is a check for whether any new email messages have been received in device  that should be made available on client machine . Thus, the asynchronous request in  is labeled at block .","When the request is received at device , then block  commences. Block  comprises determining if an event queue for the identifier associated with the request at block  exists. If no queue exists, then at block  such a queue is created so that future events which are received at device for the relevant application  can be stored in that queue. In the example in relation to , the future events comprise the receipt of new email messages.","Block  comprises determining if any events corresponding to the queue associated with the identifier from block  exists. A \u201cno\u201d determination results in a \u201cwait\u201d state where block  continues to be invoked until an event is received. While not shown in  for ease of illustration, it is to be understood that interrupt modules are typically employed so that on a termination event occurring during the loop at block  will result in termination of the loop. Termination events are discussed below in relation to block , but may comprise, by way of non-limiting example, any breakage of link , or a closure of the web page that resulted in the original generation of the request at block .","A \u201cyes\u201d determination at block  leads to block . A \u201cyes\u201d determination is reached when one or more events are found within the queue contemplated at block .","The means by which the queue is populated with an event is not particularly limited. However, an illustrative example of populating of a queue in relation to email application - is represented in  and . In this case, the event is the arrival of a new email, and the data associated with the event is the email itself. In , an email is shown located at server - in conjunction with application -. However since that email has not been delivered to device , the queue contemplated in  remains empty. In , email is shown as having been received by email application -, and is therefore, via application plug-in - working in conjunction with response module and queue manager , placed within a queue that is accessible by response module ","Block  comprises retrieving and sending the next event in the queue. In a present implementation, it is contemplated that where the queue has multiple events stored therein, only the first item in the queue would be retrieved and sent, leaving the remaining items in the queue for subsequent cycling through method . Example performance of block  is shown in , where email is sent from device to client machine ","Block  comprises receiving and processing the event. Block  thus responds to the event sent at block , and upon its receipt, is processed locally at the receiving client machine according to the programming instructions associated with the web page associated with request module . Example performance of block  is shown in , where email is shown as a newly received email within the \u201cinbox\u201d on the display of client machine , as a new email with the date \u201cJan. 1, 08\u201d, and from \u201cB. NuYear\u201d, with the subject \u201cResolution\u201d and having a size of \u201c12 k\u201d.","Block  comprises determining if a termination event has occurred, in which case method  ends. Block  can be performed by either client machine or device or both of them and it is for this reason that block  is not illustrated in association with either. What constitutes a termination event is not particularly limited, and can comprise, by way of non-limiting example, termination of link , closing of web browser , powering off of device . Also as noted is that block  can be performed in parallel with any of the other blocks in method .","Where a termination event does not occur, then a \u201cNo\u201d determination is made at block  and method  returns to block  at which point another asynchronous request is sent, which reuses the identifier generated at block . Assuming a queue corresponding to that identifier exists, then asynchronous response module will directly traverse from block  to block , bypassing block .","It will now be more apparent that the requests generated at block  can be asynchronous in relation to the populating of the corresponding queue . Where the queue is empty, then the wait state at block  is effected until the queue is populated. Conversely, if the queue contains more than one entry, then each individual event in the queue is sent, one at a time, once during every pass through block , until the queue is empty. However, at the speed at which method  can be configured to occur, even considering for the asynchronicity, very little time need actually pass between the arrival of an event (e.g. an email message) at device , and the appearance of that event (e.g. a new email in the inbox) on the display of client machine . The amount of time that actually passes can, in certain configurations, be in the order of a few milliseconds.","Queue manager is provided to help further manage queues . As discussed above, applications running on device generate events which are populated into any active queues . Queue manager examines all of the queues to determine if they are active. Queue manager determines that a particular queue is \u201cactive\u201d if one of the following conditions is met:","1) a request module is currently waiting for an event to arrive in a respective queue . This condition corresponds to method  remaining at the wait state at block .","2) the elapsed time since an event was returned from that queue to a client is below a particular threshold. This condition corresponds to a period of time since block  was commenced. Note that this second condition is provided to account for the fact that block  may be occurring, since browser may actually be handling the event received at block . Thus, at block , browser may not currently be waiting for an event since it is currently processing the last event that was returned to it. In that case, however, queue manager still expects a further invocation of block , involving a subsequent request to response module , within a relatively short period of time. If this time period is exceeded, then a determination is made that the particular queue is not active.","In the event that a given queue is determined to be active, then queue manager places the event into every active queue corresponding to that application.","In the event that a given queue is determined to be inactive, then queue manger removes that queue from its list of queues.","Various circumstances may arise leading to termination of the cycles of requests and response. For example, if request module is waiting for response, but the underlying data connection is lost (e.g. link  is terminated), then response module will abandon queues created responsive to requests generated by request modules ","Various advantages will now be apparent. For example, dynamic creation of queues and deletion of those queues makes efficient use of processor resources. More specifically, each request module has the ability to cause the creation a new queue of events that will be returned to the unique request module , and once the client has stopped making requests, the queue will be removed automatically. This can obviate or mitigate the need for complicated registration protocols and accommodates connections that are dropped without any formal handshake. The determination of whether a queue is active, and the fact that response module can be configured to examine whether a request module is waiting, reduces the likelihood of race conditions between events arriving within host application and requests from request modules . Taken together, these techniques allow any number of individual request modules associated with different instances of web pages on client machine  to reliably receive pushed events one at a time, and in an orderly manner.","Attention is now directed to , which is substantially similar to  with like elements having like numbers, however, it is appreciated that a further e-mail (email ) has been received within the \u201cinbox\u201d on the display of client machine , as a new email with the date \u201c01\/02\/08 \u201d, and from \u201cA. Bennett\u201d, with the subject \u201cResolution\u201d, having a size of \u201c820k\u201d and associated with an attachment  as indicated by indicator . It is further appreciated that while e-mail  has been received, attachment  has not been transmitted with e-mail , but rather an indication of attachment  was received with e-mail , triggering display of indicator . Hence, attachment  can be downloaded or not as desired. Furthermore, attachment  is stored at server -. Alternatively, attachment  can be stored at an attachment server (not depicted) or any other suitable server.","Attention is now directed to , which depicts a method  for controlling transmission of an attachment to an email using a plurality of computers. Method  can be implemented on system , or a variant thereon. However, method  is described for illustrative purposes in relation to system , and thus those blocks of method  that are performed by computing machine are denoted by a stippled-line box encircling those blocks. By the same token, those blocks of method  that are performed by mobile computing device are denoted by a stippled-line box encircling those blocks. Furthermore, method  presumes that connection has been established between computing machine and mobile computing device , mobile computing device in communication with server storing attachment .","At block  a request  to download attachment  is transmitted from computing machine to mobile computing device . In some implementations, request  (depicted in ) can be initiated when indicator  is selected at computing machine . Request  is then generated via method , for example at blocks -.","At block , mobile computing device received request , and in turn requests attachment  from server - via a request  transmitted via link at block .","At block , attachment  is received in a plurality of pieces, . . . N, for example in packets transmitted from server - to mobile computing device , as depicted in . Pieces . . . N are assembled into attachment  by e-mail application - or any other suitable element at mobile computing device ","At blocks , once request  is transmitted at block , computing machine requests updates relating to downloading of attachment  via requests . It is appreciated that requests  can be asynchronous requests as per method  described above. It is appreciated that blocks - of method , described hereafter, are implemented in parallel with blocks  to . Hence, once download of attachment  commences, mobile computing device monitors download of attachment  such that responses to requests  can be generated in order to provide computing machine with updates on the progress of the download of attachment . For example, at block , in response to receiving a request  at block , an update  comprising progress data on the downloading of attachment  is transmitted to computing machine . It is further appreciated that requests  can be received at mobile computing device via host application ","At block , updates  are received via link . As will be described below with reference to , browser can be updated to provide an indication of the progress of the download of attachment  at mobile computing device based on updates .","In any event, at block , computing machine determines whether download of attachment  is complete. If not, anther request  for an update is transmitted at block . Further, as described above with reference to method , requests  can be generated at any suitable interval.","However, when it is determined at computing machine that download of attachment  is complete, at block  browser provides an indicator that the download is complete with an option to begin transfer of attachment  from mobile computing device to computing machine , as will be described below with reference to .","Presuming that the option to begin transfer of attachment  from mobile computing device to computing machine is actuated and\/or selected at computing machine , at block  a request  (as depicted in FIG. ) is transmitted to mobile computing device . At block , mobile computing device receives request  and at block  transmits attachment  to computing machine via link . Attachment  can then be viewed at computing machine , for example using browser or any other suitable application at computing machine ","Attention is now directed to , which depict non-limiting implementations of a Graphic User Interface (GUI)  provided at browser . A list  of e-mails received is provided, each of which can be highlighted: for example, an e-mail from \u201cSteve Brown\u201d, the subject of which is \u201cFollow up from Beth\u201d is highlighted in depicted implementations. In some implementations (e.g. as in  described below), associated text can be displayed in a panel . Furthermore, meta-data associated with a highlighted e-mail can be provided in area .","In particular, it is appreciated from indicator  in area  of  that e-mail is associated with an attachment \u201cimage001.png\u201d, of a size \u201c9 KB\u201d. An icon  is also provided adjacent indicator  for initiating download of the associated attachment: for example, icon  can be selected via an input device at computing machine to initiate the download. However, it is appreciated that download of the attachment can be initiated in any suitable manner. For example, in alternative implementations, indicator  can be selected via an input device at computing machine and the download initiated using a double click.","In any event, when download of the attachment is initiated, method  is initiated and request  is transmitted to mobile computing device , as described above. Requests  are then transmitted from computing device to mobile computing device and updates  are received. Initiation of the download of the associated attachment can be indicated in GUI  via text \u201cStarting Download . . . \u201d as depicted in . Progress of the download of the attachment at mobile computing device can be indicated in progress bar  adjacent indicator , as depicted in . In some implementations, progress of the download can be indicated using any suitable indicator such as percentage downloaded, amount of data downloaded or the like. Indeed, any suitable indication of progress is contemplated.","Once the download is complete (i.e. block  progresses to block  in method ), an indicator  is provided indicating that the associated attachment has been downloaded to mobile computing device and is available for transfer to computing machine . In depicted implementations, indicator  comprises a line drawn under indicator . Further, in some implementations, indicator  can change colour and\/or change to a different font and\/or a combination, or the like. In any event, indicator  indicates that indicator  can be selected to initiate transfer of the associated attachment to computing device (i.e. blocks  to  of method  are executed) such that the associated attachment can be viewed and\/or stored at computing machine . In other words, indicator  can appear as a clickable \u201clink\u201d (e.g. as in an HTML document) providing access to the associated attachment.","In some implementations, once transfer of the associated attachment to computing machine has been initiated, a further indicator (not depicted) can be provided that indicates that the associated attachment is being transferred over link ; such a further indicator can include a warning not to sever link until the transfer is complete, as well as an indication of when the transfer is complete.","Hence, a two phase download of an attachment to an e-mail is provided. In a first phase, the attachment is downloaded to mobile computing device , the download being initiated at computing machine . Progress of the download can be provided to computing machine upon request. In a second phase, once the download is complete, the downloaded attachment can be transferred to computing machine , for example upon request from computing machine , however in other implementations transfer of the downloaded attachment can occur automatically once the download is complete. Furthermore, a copy of the downloaded attachment can be stored at mobile computing device and accessed, for example, via e-mail application -. Hence, the downloaded attachment and the associated e-mail, can be viewed at both computing machine and mobile computing device ","Attention is now directed to optional icon  in  provided in list  adjacent to given e-mails. Optional icon  can be provided to indicate that the given e-mails have not yet been downloaded to computing machine ","Attention is now directed to , which are substantially similar to  with like elements having like numbers, however in these implementations, browser is being used to compose an e-mail  for transmittal to a destination computing device. Hence, in  an outgoing e-mail  is being initiated at computing machine . Further, before e-mail  is sent, a document, or the like, can be attached to e-mail  as attachment , while e-mail  is being composed: for example, the document titled \u201cSalesReports.pdf\u201d. Once attachment  is associate with e-mail , computing machine initiates transfer of attachment  to mobile computing device via link while e-mail  continues to be composed. Attachment  is generally appreciated to be transferred in a plurality of pieces, hence, it takes a period of time to complete the transfer of attachment  to mobile computing device . It is appreciated that in , browser further comprises a virtual send button  for initiating sending of e-mail .","Once composition of e-mail  is complete, as in , and assuming transfer of attachment  to mobile computing device is complete, then e-mail  can be sent to mobile computing device via link , for example upon actuation of send button . Mobile computing device then transmits both the e-mail and the associated attachment to server - via link for forwarding to a final destination (e.g. a destination computing device). A copy of attachment  and e-mail  is then hence available at both computing machine and mobile computing device ","However, if the transfer of attachment  to mobile computing device is not complete when composition of e-mail  is complete, then sending of e-mail  is delayed until the transfer of attachment  is complete. Such a situation can occur when a time period for transferring attachment  to mobile computing device is larger than a time period used for completing e-mail . In these implementations, it is desirable not to send e-mail  until transfer\/upload of attachment  is complete. It is further desirable not to sever link until transfer\/upload of attachment  is complete and\/or e-mail  is transmitted. To address this, in some implementations, send button  can be disabled until attachment  is uploaded to mobile computing device , effectively delaying sending of e-mail  until the upload of attachment  is complete.","Alternatively, a dialog box  can be provided, as in  (substantially similar to  with like elements having like numbers) indicating that e-mail  can't be sent until the upload is finished. Alternatively, as in  (substantially similar to  with like elements having like numbers) an outbox  can be provided once send button  is actuated showing e-mail  is in a pending state until upload of attachment  is finished.","Various advantages will now be apparent. For example, mobile computing device acts as an intermediary for upload and download of attachments to computing machine . Hence, copies of e-mails and attachments are stored at both computing machine and mobile computing device , obviating a need for a later synchronization process. Furthermore, as mobile computing device is generally understood to be enabled to connect to a wide variety of mail servers, by virtue of mobile computing device act as an intermediary between computing machine and server -, as well as other e-mail servers, for receiving and sending of attachments and e-mails, a need to configure computing machine with similar functionality is obviated. Hence, the system of computing machine is simplified, memory at computing machine is conserved for storage of other data and processing resources at computing machine are conserved.","Other variations, combinations, and subsets will now occur to those skilled in the art."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of the various embodiments described herein and to show more clearly how they may be carried into effect, reference will now be made, by way of example only, to the accompanying drawings in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 7","FIG. 6","FIG. 5"],"b":"50"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 9","FIG. 1","FIG. 8"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 10","FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 11","FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 13","FIG. 5","FIG. 12"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 15","FIG. 12","FIG. 14"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 16","FIG. 12","FIG. 14"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 17","FIG. 12","FIG. 14"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 18","FIG. 12","FIG. 14"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 19","FIG. 12"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 21","FIG. 12","FIG. 20"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 22","FIG. 12","FIG. 20"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 23","FIG. 12","FIG. 20"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 24","FIG. 20"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 25","FIG. 20"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 26","FIG. 20"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 27","FIG. 20"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 28","FIG. 12"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 29","FIG. 12"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 30","FIG. 12"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 31","FIG. 12"]}]},"DETDESC":[{},{}]}
