---
title: Method for providing feedback on windows, messages and dialog boxes
abstract: A method to globally place a feedback button in every dialog box, message box, and top-level window in every application and message box in an operating system to provide a user with the opportunity to provide feedback for the dialog box, message box, or top-level window. The system checks a setting to determine if and what type of box/window that a feedback button will be placed and if the setting is enabled, a feedback button with customizable text will be placed on the box/window when the box/window is displayed if the type of window being displayed matches the type specified as having a feedback button. The system loads a program file that provides instructions to the user on how to provide feedback to a developer or system administrator when the user selects the feedback button. Once the user enters feedback, this feedback is sent to wherever the program file designated the information to be sent. Information about the box/window being displayed, including information about how the application got to the point of displaying the box/window, is sent along with the feedback. The user may also be sent to a website to allow the user to see what other people have reported about the box/window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06874125&OS=06874125&RS=06874125
owner: Microsoft Corporation
number: 06874125
owner_city: Redmond
owner_country: US
publication_date: 20000503
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to networked communications, and more particularly to a system and method to allow a user to provide feedback on a dialog box or message box the user sees.","Continued advances in computer processor technology have led to not only increased performance, but also increased performance expectations by the users of such computer equipment. These increased user expectations extend not only to the computer equipment, but also to the applications and operating systems installed on the computer equipment. The industry has responded by creating applications and operating systems that take full advantage of these performance enhancements. However, as additional functionality was added, these applications generally became more complex, increasing the likelihood of the user seeking help and errors occurring. In response, developers added additional error messages and dialog boxes and other windows (messages\/windows) in an effort to help the user and also to notify the user that an error had occurred or that more information is needed, etc.","As programs and operating systems evolved, these error messages and dialog boxes often became irrelevant and unintelligible to the average user. In addition, an application working on one version of an operating system often would produce unintelligible messages on an upgraded version of the operating system. As a result, both the error messages and the dialog boxes often ended up irritating and confusing the user. Many users provided comments and other feedback to the developer or a system administrator about these messages\/windows in the hope that this information would be used to fix the problems in the application. However, quite often, this feedback was of no use to the developer\/administrator as the developer\/administrator did not know which message\/window about which the user was commenting or the sequence of events that led the user to see the message\/window.","Recently, some industry members began placing buttons within the error messages that allow the user to provide feedback for that particular error message by clicking on the button. When the button is pressed, the user is provided a dialog box in which to enter comments. The comments are then sent to the developer or administrator along with an identification of the particular error message on which the user is commenting. These buttons require the application developer to add additional code to the core software for each error message on which the developer wants feedback. In view of the number of error messages that may occur, the amount of feedback code becomes significant.","While this approach provides advantages over the prior methods of providing user feedback, the inability of this approach to support existing applications and the effort of coding and debugging the required messages\/windows to provide this functionality has become apparent. In order for this approach to work for an existing application, the application must be upgraded with the additional code to add the buttons. If the developer misses putting a button on an error message, there is often no way to know which error message is being commented on by the user. As a result of these problems, developers are not getting valuable feedback that would allow them to fix problems in the code.","In view of the above described problems existing in the art, the present invention provides a system that provides a way for a user to give feedback to developers and system administrators on any application. The system provides a mechanism for globally or selectively placing a feedback icon in every dialog box, message box, and top-level window in every application and message box in the system to provide the user with the opportunity to provide feedback for the dialog box, message box, or top-level window. A key feature of the instant invention is that the feedback icon can be placed in an existing application without requiring any changes to the existing application.","In order to provide this mechanism, the operating system is modified to provide the feedback icon or button in the message box, dialog box, or top-level window (hereinafter box\/window) being displayed. The system checks a setting and if the setting is enabled, a feedback icon will be placed on the box\/window when the box\/window is displayed. The setting can be selectively set by developers or globally set by the operating system. The text in the feedback button can be customized through provision of a custom dll.","When a user logs on or when an application is started, the system checks to see if the feedback icon setting is enabled and determines the text to be displayed within the feedback button. The system also determines in what type of box\/window the feedback icon will be placed. If the type of window being displayed matches the type specified as requiring a feedback icon, the system adds the feedback icon into the caption bar of the window being displayed.","If the user clicks on the feedback icon, the system loads a program file that provides instructions to the user on how to provide feedback to a developer or system administrator. Once the user enters feedback, this feedback is sent to wherever the program file designated the information be sent. Information about the box\/window being displayed, including information about how the application got to the point of displaying the box\/window, is sent along with the feedback. Additionally, the user may also be sent to a website to allow the user to see what other people have reported about the box\/window. In addition to user comments, the system retrieves stack trace information. This detailed feedback, including the trace information on how the program came to display the box\/window, provides a significant benefit to the developer and the user. The developer obtains useful information on how to improve the application and the user obtains a more useful application after the developer fixes the problems.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments which proceeds with reference to the accompanying figures.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk , and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories, read only memories, and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more applications programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and a pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices, not shown, such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the person computer  typically includes a modem  or other means for establishing communications over the WAN . The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computer, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.",{"@attributes":{"id":"P-00025","num":"00025"},"figref":["FIG. 2","FIG. 1"],"b":["100","100","102","104","106","106","100","104","20","104","46"]},"In the exemplary operating system, an I\/O subsystem  supervises both file storage and other input\/output devices and facilities. Requests for file or I\/O services are routed between an application program or other source and hardware devices such as  and  via one or more layers of device drivers such as  and  respectively. Device  might be a hardware module such as a memory. Device  is a monitor with its video adapter . Filter drivers such as  and  can intercept data, file handles, and other information, based upon certain characteristics or events. Filter drivers can also process data internally as shown at . They can also pass information back and forth to programs such as , which can be located within the operating system kernel layer or at any other point in the software architecture of system . Components can be dedicated to a single function, or, more often, can be programmed to carry out multiple functions, either sequentially or concurrently. A digital signal processor, for example, can execute many different functions such as frequency filtering, gain change, and acoustic effects.","I\/O manager  controls the flow of information, symbolized at  and , with stack  of control packets each associated with different items of information, or with packages for those items. Each packet, called an I\/O request packet (IRP) is an entry in the stack . I\/O manager  executes them at the appropriate times for transporting the data or other information among the attached drivers, programs, and hardware devices. A control packet is like a job order directing a module to perform a specified task upon designated data frames. Stack  represents a region of reserved memory in system memory  () in which applications  store status data such as procedure and function call addresses, passed parameters, and sometimes local variables. Stack  is continually updated as applications perform tasks.","Window manager  implements the subsystem that builds and controls the common visual aspects of windows in the exemplary operating system . The window is the basic building block for displaying information in the graphical environment of the exemplary operating system . Window manager  manages how each window relates to all other windows in terms of visibility, ownership, and parent\/child relationship and uses this information when creating, displaying, and destroying a window. Window manager  creates and displays message boxes, dialog boxes, and windows at the request of the application program  or at the request of other components of operating system .","When the operating system  initializes, window manager  creates a window known as the desktop window. The desktop window is sized to cover the entire display area on monitor . All other windows are displayed upon the desktop window. The operating system  classifies windows in a parent\/child form of relationship. The desktop window is at the top of the window hierarchy. The next level of window in the window hierarchy of the operating system  is called a top-level window and is a child window of the desktop window. Top-level windows have only one parent window and that is the desktop window. Windows inside of a top-level window are child windows. For example, when an application  is loaded, the main window of that application is a top-level window. All other windows within the main window are child windows. Other windows classified as top-level windows include hard error message boxes, message boxes, and dialog boxes.","There are several types of windows that window manager  creates, displays and destroys. The type of window that most applications use as their main window is a window that has a caption and a border. Pop-up windows such as dialog boxes and message boxes also may have a caption bar and a border.  shows a window  having a caption bar  and a border . Windows with captions have a title field  and may also have a minimize box  that minimizes the window when a user clicks on it, a maximize box  that maximizes the window when the user clicks on it, a close box  that closes the window when the user clicks on it, and a system menu box  that provides the user with an interface to specified system commands. These commands include restore a minimized window, move the window with the keyboard, size the window with the keyboard, minimize the window, maximize the window, and close the window. The remaining portion of the window is an application area  for the application  to use. Within the application area  are the application's toolbars, document window, menu system, etc.","Whenever a top-level window is to be displayed within the desktop window, the window manager  checks to determine if a feedback icon or button is to be added to the window. In the illustrative operating system , window manager  checks within the registry  to see if a feedback icon should be shown in the window . Note that a feedback or comments button could also be used. In one embodiment, the feedback icon can be displayed on only hard error messages, message boxes, dialog boxes, on all top-level windows or on no windows. Window manager  checks the registry  to determine in which type of window to add a feedback button and what text should be displayed in the feedback button. Any user having system administrator privileges can provide and set the registry settings that enable the feedback icon to be displayed and the type of box, message, or window in which to display the feedback icon. It should be noted that the text is customizable and is configured within the registry . If the type of window being created by the window manager  matches one of the type specified in the registry  as having a feedback button, the window manager will add a feedback button  in the caption bar  as illustrated in FIG. .",{"@attributes":{"id":"P-00032","num":"00032"},"figref":"FIG. 5","b":["162","176","134","104","160","134","154","162","134","136","104","100","164","134","166","136","168","136","154","170"]},"When window manager  detects when the user selects the comment button , window manager  looks for and loads an external program file and an application programming interface (API) (step ). The external program file, which is a dynamic link library (dll) in the exemplary operating system , contains instructions and text on what should be presented to the user to obtain her feedback. A default file is provided by the operating system . Note that this file can be enhanced, replaced, customized, etc. by the developer or system administrator. The operating system  also provides a default API. The default API sends any comments provided by the user and other information to a central server for analysis. This API can be enhanced, replaced, customized, etc. by the developer or system administrator. The screen cursor shape may be changed when the user moves the cursor over the comment button . The window manager  provides the dll with the handle to the window being displayed and a stack trace. The stack trace describes the steps the application  and operating system  took to get to the point of displaying the window. It describes the procedure and function call addresses, passed parameters, and local variables stored in stack . With the window handle, the component that provided the resources for the message or dialog box to be loaded and the program that created the window can be determined. The developer or system administrator can provide a dll that has program specific instructions. One situation where this might arise is when there are multiple programs in various stages of development or when the developer or system administrator wants to provide a different message depending on the skill level of the user. The dll may be also programmed to gather any other information the developer or system administrator considers relevant. This could include a machine's configuration such as what video card, audio card, etc. are on the machine as some error messages may only show up on a particular machine configuration.","In one embodiment, this external program file is named, for example, comments_button.dll and it displays a dialog box  (see ) asking the user to enter comments and feedback on that specific message or window being displayed. Once the user enters her comments, this information, along with the information about the window, is sent back to a server for analysis by the developer or system administrator via the default API.","In an alternative embodiment, the dll in conjunction with the API sends the user to a web site that collects data about the message or window being displayed. The dll and API also allows the user to see what other users have reported about the message or window being displayed, which potentially gives the user more information on the particular message or window.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
