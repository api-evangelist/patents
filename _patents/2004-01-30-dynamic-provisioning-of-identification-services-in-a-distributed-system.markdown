---
title: Dynamic provisioning of identification services in a distributed system
abstract: Systems and methods provide identification services over a distributed network. Systems and methods provide the tools to receive data from reader devices, process the received data, and provide the processed data to users. Enhanced event handling and dynamic service provisioning enable robust and flexible deployment of identification services in a distributed network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07756969&OS=07756969&RS=07756969
owner: Oracle America, Inc.
number: 07756969
owner_city: Redwood Shores
owner_country: US
publication_date: 20040130
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","DESCRIPTION OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation-in-part of U.S. patent application Ser. No. 09\/947,528 for Dynamic Provisioning of Service Components in a Distributed System, filed Sep. 7, 2001, now abandoned which is incorporated herein by reference. This application is related to U.S. patent application Ser. No. 09\/947,549 for Distributed Metric Discovery and Collection in a Distributed System, filed Sep. 7, 2001, and U.S. patent application Ser. No. 10\/390,895 for Systems and Methods for Providing Dynamic Quality of Service for a Distributed System, filed Mar. 19, 2003, which are relied upon and incorporated by reference.","1. Field of the Invention","This invention relates to techniques for providing identification services in a distributed system and, more particularly, to methods and systems for provisioning services to process identification data received from a device.","2. Background of the Invention","Distributed systems today enable a device connected to a communications network to take advantage of services available on other devices located throughout the network. Each device in a distributed system may have its own internal data types, its own address alignment rules, and its own operating system. To enable such heterogeneous devices to communicate and interact successfully, developers of distributed systems can employ a remote procedure call (RPC) communication mechanism.","RPC mechanisms provide communication between processes (e.g., programs, applets, etc.) running on the same machine or different machines. In a simple case, one process, i.e., a client, sends a message to another process, i.e., a server. The server processes the message and, in some cases, returns a response to the client. In many systems, the client and server do not have to be synchronized. That is, the client may transmit the message and then begin a new activity, or the server may buffer the incoming message until the server is ready to process the message.","The Java\u2122 programming language is an object-oriented programming language frequently used to implement such a distributed system. A program written in the Java programming language is compiled into a platform-independent format, using a bytecode instruction set, which can be executed on any platform supporting the Java virtual machine (JVM). The JVM may be implemented on any type of platform, greatly increasing the ease with which heterogeneous machines can be federated into a distributed system.","The Jini\u2122 architecture has been developed using the Java programming language to enable devices in a distributed system to share services using remote method invocation (RMI). Traditional Jini systems use RMI to enable a client device to request and receive a service provided by a server device on a remote machine. While conventional Jini systems provide a basic architecture for providing services in a distributed system, they do not provide tools specifically directed to providing complex services. Current systems do not address provisioning a service, such as application software, to make it available to the distributed system in the first place. Furthermore, conventional systems do not consider the requirements of a specific service before provisioning the service to make it available in the distributed system.","For example, one such distributed system may include reader devices using Radio Frequency Identification (RFID) technology, services that receive and process identification data from the reader devices, and applications that store and manage the processed data. Although RFID technology is well known, conventional RFID systems do not operate satisfactorily in a distributed system, where network changes, such as the failure of a computer resource or the introduction of a new resource, are common. It is therefore desirable to provide RFID systems that operate in a distributed, robust, reliable, scalable manner.","Methods and systems consistent with the present invention provide identification services over a distributed network. Systems and methods provide the tools to receive data from reader devices, process the received data, and provide the processed data to users. Enhanced event handling and dynamic service provisioning enable robust and flexible deployment of identification services in a distributed network.","According to an aspect of the invention, a method provides an identification service in a distributed system, comprising providing service elements, each service element including an adapter, a filter, and a logger and receiving, by a first adapter, identification data from a reader. The identification data is provided by the first adapter to a first filter and the first filter processes the identification data. The processed data is provided by the first filter to a first logger, and the first logger notifies a recipient of the processed data. The service elements are monitored to determine whether any service element fails.","In accordance with another aspect of the invention, a method provides an identification service in a distributed system by creating an application corresponding to each of a plurality of service elements, the service elements including an adapter, a filter, and a logger. The adapter application receives identification information corresponding to an item from a reader and provides the identification information to the filter application. The filter application processes the identification information application to create processed information including at least an identification code for the item and provides the processed information to the logger application. The logger application provides the processed information to a recipient. The application corresponding to each service is monitored to determine whether any application fails.","According to another embodiment of the present invention, a system provides a distributed identification service comprising a reader service having service elements comprising an adapter that receives identification information from a reader, a filter that processes the identification information, and a logger that notifies a user of the processed information. The system further comprises a registry service that establishes the reader service and its service elements and a monitor service that determines whether the reader service or any of the service elements fails.","Additional features of the invention will be set forth in part in the description which follows, and in part will be obvious from the description, or may be learned by practice of the invention.","The following description of embodiments of this invention refers to the accompanying drawings. Where appropriate, the same reference numbers in different drawings refer to the same or similar elements.","A. Introduction","Systems consistent with the present invention provide identification services over a distributed network through a collection of service components that interface with identification devices and process data received from the devices. For example, items may be uniquely identified by an electronic product code (EPC) encoded in RFID tags. A reader device may detect the presence of an RFID tag and scan the EPC and any other information contained in the RFID tag. The data may then be used by applications such as an inventory system or a retail system to track and manage the items. One such identification network is described in the Auto-ID Savant Specification 1.0, available at www.autoidcenter.org.","An identification service consistent with an embodiment of the present invention provides a distributed middleware component between reader devices and users of identification data such as applications, databases, etc. By its nature, an identification service using RFID technology is typically widely distributed. Readers may be separated by a great distance from the users of identification data. For example, an international retailer may need to track inventory in stores around the world using computer systems located in a central headquarters. In another example, a shipping company may use RFID readers throughout a series of processing facilities and transportation hubs to track shipments.","One embodiment of the present invention can be implemented using the Rio\u2122 architecture developed by Sun Microsystems and described in greater detail below. Rio uses tools provided by the Jini\u2122 architecture, such as discovery and event handling, to provision and monitor complex services, such as identification services, in a distributed system. Systems consistent with the present invention provide identification services that may be deployed in a distributed system, including tools to deconstruct a complex identification service into service elements, provision service elements that are needed to make up the complex identification service, and monitor the service elements to ensure that the complex identification service is supported in a dynamic, robust fashion.","B. Exemplary Distributed System",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","104","106","108","102","104","106","108","100","100"]},"The computers and devices of distributed system  provide services to one another. A \u201cservice\u201d is a resource, data, or functionality that can be accessed by a user, program, device, or another service. Typical services include devices, such as reader devices, printers, displays, and disks; software, such as applications or utilities; and information managers, such as databases and file systems. These services may appear programmatically as objects of the Java programming environment and may include other objects, software components written in different programming languages, or hardware devices. As such, a service typically has an interface defining the operations that can be requested of that service.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":["102","100","104","106","102","202","204","206","208","210","202","212","214","216","216","218","220","204","222"]},"Memory  can be, for example, a random access memory. Secondary storage device  can be, for example, a CD-ROM. CPU  can support any platform compatible with JVM . Input device  can be, for example, a keyboard or mouse. Output device  can be, for example, a printer.","JVM  acts like an abstract computing machine, receiving instructions from programs in the form of bytecodes and interpreting these bytecodes by dynamically converting them into a form for execution, such as object code, and executing them. RMI  facilitates remote method invocation by allowing objects executing on one computer or device to invoke methods of an object on another computer or device. Lookup Service  and Discovery Server  are described in detail below. Java space  is an object repository used by programs within distributed system  to store objects. Programs use Java space  to store objects persistently as well as to make them accessible to other devices within distributed system .","The Jini environment enables users to build and maintain a network of services running on computers and devices. Jini is an architectural framework provided by Sun Microsystems that provides an infrastructure for creating a flexible distributed system. In particular, the Jini architecture enables users to build and maintain a network of services on computers and\/or devices. The Jini architecture includes Lookup Service  and Discovery Server  that enable services on the network to find other services and establish communications directly with those services.","Lookup Service  defines the services that are available in distributed system . Lookup Service  contains one object for each service within the system, and each object contains various methods that facilitate access to the corresponding service. Discovery Server  detects when a new device is added to distributed system  during a process known as boot and join, or discovery. When a new device is detected, Discovery Server  passes a reference to the new device to Lookup Service . The new device may then register its services with Lookup Service , making the device's services available to others in distributed system . One skilled in the art will appreciate that exemplary distributed system  may contain many Lookup Services and Discovery Servers.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["302","304","306","302","304","306","102","104","106"]},"Service provider  discovers and joins lookup service , making the services provided by service provider  available to other computers and devices in the distributed system. When service consumer  requires a service, it discovers lookup service  and sends a lookup request specifying the needed service to lookup service . In response, lookup service  returns a proxy that corresponds to service provider  to service consumer . The proxy enables service consumer  to establish contact directly with service provider . Service provider  is then able to provide the service-to-service consumer  as needed. An implementation of the lookup service is explained in \u201cThe Jini\u2122 Lookup Service Specification,\u201d contained in Arnold et al., , Addison-Wesley, 1999, pp. 217-231.","Distributed systems that use the Jini architecture often communicate via an event handling process that allows an object running on one Java virtual machine (i.e., an event consumer or event listener) to register interest in an event that occurs in an object running on another Java virtual machine (i.e., an event generator or event producer). An event can be, for example, a change in the state of the event producer. When the event occurs, the event consumer is notified. This notification can be provided by, for example, the event producer.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4","b":["402","404","406","408","410"],"i":"The Jini\u2122 Specification"},"D. Overview of Rio\u2122 Architecture","The Rio architecture enhances the basic Jini architecture to provision and monitor complex services by considering a complex service as a collection of service elements. To provide the complex service, the Rio architecture instantiates and monitors a service instance corresponding to each service element. A service element might correspond to, for example, an application service or an infrastructure service. In general, an application service is developed to solve a specific application problem, such as processing identification information, word processing, or spreadsheet management. An infrastructure service, such as the Jin lookup service, provides the building blocks on which application services can be used. One implementation of the Jin lookup service is described in U.S. Pat. No. 6,185,611, for \u201cDynamic Lookup Service in a Distributed System,\u201d which is incorporated herein by reference.","Consistent with the present invention, a complex service can be represented by an operational string.  depicts an exemplary operational string  that includes one or more service elements  and another operational string B . Operational string B  in turn includes additional service elements (, , . . . n) . For example, operational string  might represent an identification service. Service element  might be an interface with a reader device and service element  might be an interface with a user of identification data. Operational string B might be a service to process data received from the reader device. Service element  might then be a filter to remove unnecessary data, service element  might be a queue storing filtered data, etc. In an embodiment of the present invention, an operational string can be expressed as an XML document. It will be clear to one of skill in the art that an operational string can contain any number of service elements and operational strings.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 6","b":["506","602","604","602","506","604","506"]},"E. Jini\u2122 Service Beans","A Jini\u2122 Service Bean (JSB) is a Java object that provides a service in a distributed system. As such, a JSB implements one or more remote methods that together constitute the service provided by the JSB. A JSB is defined by an interface that declares each of the JSB's remote methods using Jini\u2122 Remote Method Invocation (RMI) conventions. In addition to its remote methods, a JSB may include a proxy and a user interface consistent with the Jini architecture.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 7","b":["702","704","706","702","704","706","702","706","702","708","706","706","708","702","710","706","702","706","102","702","106"]},"F. Cybernode Processing","A JSB is created and receives fundamental life-cycle support from an infrastructure service called a \u201ccybernode.\u201d A cybernode runs on a compute resource, such as a computer or other data processing device. In one embodiment of the present invention, a cybernode runs as a Java virtual machine, such as JVM , on a computer, such as computer . Consistent with the present invention, a compute resource may run any number of cybernodes at a time and a cybernode may support any number of JSBs.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8","b":["801","802","804","801","806","808","808","801"]},"Service instantiator object  is used by cybernode  to register its availability to support JSBs and to receive requests to instantiate JSBs. For example, using the Jini event handling process, service instantiator object  can register interest in receiving service provision events from a service provisioner, discussed below. A service provision event is typically a request to create a JSB. The registration process might include declaring QoS capabilities  to the service provisioner. These capabilities can be used by the service provisioner to determine what compute resource, and therefore what cybernode, should instantiate a particular JSB, as described in greater detail below. In some instances, when a compute resource is initiated, its capabilities are declared to the cybernode  running on the compute resource and stored as QoS capabilities .","Service bean instantiator object  is used by cybernode  to create JSBs  when service instantiator object  receives a service provision event. Using JSB attributes contained in the service provision event, cybernode  instantiates the JSB, and ensures that the JSB and its corresponding service remain available over the network. Service bean instantiator object  can be used by cybernode  to download JSB class files from a code server as needed.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 9","b":["902","801","906","908","801","801","902","906","801","902","906","906","902","801"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 10","b":["801","902","906","1002","801","906","801","1004","801","906","1006","801","908","1008","908","801","1010"]},"As described above, JSBs and cybernodes comprise the basic tools to provide a service corresponding to a service element in an operational string consistent with the present invention. A service provisioner for managing the operational string itself will now be described.","G. Dynamic Service Provisioning","A service provisioner is an infrastructure service that provides the capability to deploy and monitor operational strings. As described above, an operational string is a collection of service elements that together constitute a complex service in a distributed system. To manage an operational string, a service provisioner determines whether a service instance corresponding to each service element in the operational string is running on the network. The service provisioner dynamically provisions an instance of any service element not represented on the network. The service provisioner also monitors the service instance corresponding to each service element in the operational string to ensure that the complex service represented by the operational string is provided correctly.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 11","b":["906","1102","1102","1102","406","1104"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 12","b":["906","1202","502","504","906","906","902","1204","1206","906","1208","1210"]},"If an instance of the next service is not running on the network (step ), then service provisioner  determines a target cybernode that matches the next service (step ). The process of matching a service instance to a cybernode is discussed below. Service provisioner  fires a service provision event to the target cybernode requesting creation of a JSB to perform the next service (step ). In one embodiment, the service provision event includes service bean attributes object  from service element . Service provisioner  then uses a lookup service to discover the newly instantiated JSB (step ) and starts a monitor corresponding to that JSB (step ).","Once a service instance is running, service provisioner  monitors it and directs its recovery if the service instance fails for any reason. For example, if a monitor detects that a service instance has failed, service provisioner  may issue a new service provision event to create a new JSB to provide the corresponding service. In one embodiment of the present invention, service provisioner  can monitor services that are provided by objects other than JSBs. The service provisioner therefore provides the ability to deal with damaged or failed resources while supporting a complex service.","Service provisioner  also ensures quality of service by distributing a service provision request to the compute resource best matched to the requirements of the service element. A service, such as a software component, has requirements, such as hardware requirements, response time, throughput, etc. In one embodiment of the present invention, a software component provides a specification of its requirements as part of its configuration. These requirements are embodied in service provision management object  of the corresponding service element. A compute resource may be, for example, a computer or a device, with capabilities such as CPU speed, disk space, connectivity capability, bandwidth, etc.","In one implementation consistent with the present invention, the matching of software component to compute resource follows the semantics of the Class.isAssignable( )method, a known method in the Java programming language. If the class or interface represented by QoS class object of the software component is either the same as, or is a superclass or superinterface of, the class or interface represented by the class parameter of the QoS class object of the compute resource, then a cybernode resident on the compute resource is invoked to instantiate a JSB for the software component. Consistent with the present invention, additional analysis of the compute resource may be performed before the \u201cmatch\u201d is complete. For example, further analysis may be conducted to determine the compute resource's capability to process an increased load or adhere to service level agreements required by the software component.","H. Enhanced Event Handling","Systems consistent with the present invention may expand upon traditional Jini event handling by employing flexible dispatch mechanisms selected by an event producer. When more than one event consumer has registered interest in an event, the event producer can use any policy it chooses for determining the order in which it notifies the event consumers. The notification policy can be, for example, round robin notification, in which the event consumers are notified in the order in which they registered interest in an event, beginning with the first event consumer that registered interest. For the next event notification, the round robin notification will begin with the second event consumer in the list and proceed in the same manner. Alternatively, an event producer could select a random order for notification, or it could reverse the order of notification with each event.","In an embodiment of the present invention, a service provisioner is an event producer and cybernodes register with it as event consumers. When the service provisioner needs to have a JSB instantiated to complete an operational string, the service provisioner fires a service provision event to all of the cybernodes that have registered, using an event notification scheme of its choosing.","I. Identification Service",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 13","b":["1302","1302","1304","1306","1306"]},"Readers  may be, for example, any type of device that reads or senses data, such as identification data. For example, readers  may be conventional RFID readers such as the Alien Nanoscanner Reader, the ThingMagic Mercury 3 RFID Reader, or the Matrics Advanced Reader. A large identification system may have hundreds or even thousands of readers, so readers  are typically simple, inexpensive devices that perform only basic data processing. Identification service  may provide extensive data processing to transform the largely untouched scanned data from readers  into useful data customized to meet the preferences and requirements of user . One skilled in the art will appreciate that the system of  may include any number of readers , identification services , and users . Consistent with the present invention, readers  may also include devices that sense data, such as motion sensors, proximity sensors, or temperature sensors. Other types of devices may also be used without departing from the spirit and scope of the present invention.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 14","FIG. 13"],"b":["1304","1304","1402","1404","1402","1302","1404","1306"]},"Identification service  may also include a monitor service , a registry service , and a code server  to support the provisioning of service components for identification service . In one embodiment of the present invention, monitor service may be a Rio\u2122 monitor implemented, for example, by service provisioner . As discussed above, a Rio\u2122 monitor may detect when a service fails to ensure robust service provision. In this embodiment, registry service  may be implemented as a Jini lookup service , described above, that enables services to establish communications with other services, and code server  may be implemented as a code server , described above, that stores Java code files. Although  shows two reader services , one application service , one monitor service , one registry service , and one code server , one skilled in the art will appreciate that identification service  may have any number, including zero, of each of these components.","Using the Rio architecture, identification service  may be implemented using an operational string as described above. Service elements of the operational string may be reader service  and application service . In this way, monitor service , registry service , and code server  may be used to provision and monitor identification service  to ensure a robust and flexible distributed implementation.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 15","b":["1402","1402","1502","1504","1506","1502","1302","1504","1502","1506","1306","1402","1508"]},"Application service  may be implemented using similar components to those described in reader service . Application service may include, for example, adapter , filter , logger , and\/or queue  (not shown) to facilitate interaction with user . As discussed above, user  may be, for example, an application or a database.","Adapter  may be, for example, a device adapter to interface with any type of reader device. This increases the feasibility and economy of identification service . In an embodiment of the present invention, adapter  may link to other components, such as filter , logger , or queue  (not shown), as an event producer using the enhanced event handling described above. An adapter may include a unique name, a Java class that implements the adapter, a set of properties, and a set of outputs. The properties may be, for example, a sequence of name value pairs that are passed to the adapter's constructor. The outputs may be, for example, a sequence of component names to be registered as event listeners to the adapter. The outputs may designate, for example, filter , logger , or queue  (not shown). The following is program code for an exemplary configuration of adapter  written as an XML document:","<ems:adapter>\n\n","<\/ems:adapter>","In an embodiment of the invention, filter  may be used to process data received from reader . RFID tags generate a much larger amount of data than traditional bar codes. Much of this data is often considered to be \u201cnoise,\u201d meaning that it is of little or no use. Filter  is designed to separate useful data from noise. Filter  may also detect and remove data from mis-read RFID tags, increasing the accuracy of the resulting data. Filter  may link to other components as an event listener, using the enhanced event handling described above. A filter may include a unique name, a Java\u2122 class that implements the filter, a set of properties, and a set of outputs. The properties may be, for example, a sequence of name value pairs that are passed to the filter's constructor. The outputs may be, for example, a sequence of component names that will be registered as event listeners to the filter. The outputs may designate, for example, other filters , logger , or queue  (not shown). The following is program code for an exemplary configuration of filter  written as an XML document:","<ems:filter>\n\n","<\/ems:filter>","A queue  (not shown) may be implemented as both an event listener and an event producer. In this way, for example, queue  may receive events from adapter  and send events to filter  or logger . Queue  may include a unique name, a Java\u2122 class that implements the filter, a set of properties, and a set of outputs. The properties may be, for example, a sequence of name value pairs that are passed to the queue's constructor. The outputs may be, for example, a sequence of component names that will be registered as event listeners and\/or event producers to the queue. The outputs may designate, for example, adapters , filters , or loggers . The following is program code for an exemplary configuration of queue  written as an XML document:","<ems:queue>\n\n","<\/ems:queue>","In an embodiment of the present invention, logger  may be implemented to notify user  of data from readers . Logger  may notify user  of RFID and non-RFID events using a protocol specified by user , for example, by logging information to a file system, a JMS queue, or a XML\/HTTP file. Logger  may function as an event listener (e.g., for data from filters) and\/or an event producer (e.g., for data for users). Logger  may include, for example, a unique name, a Java\u2122 class that implements the logger, and a set of properties. The properties may be, for example, a sequence of name value pairs that are passed to the logger's constructor. The following is program code for an exemplary configuration of logger  written as an XML document:","<ems:logger>\n\n","<\/ems:logger>","In a distributed system, an identification service may be implemented using the Rio architecture described above to provide robust and efficient processing of data from a reader device for a user. Additional services may also be provided, such as an enterprise gateway including service interfaces to enable applications to register and receive identification data in useful ways. For example, a user of the enterprise gateway may request notification of the number of items at a particular location, the location of a specific item, or the path an item has taken. The gateway may be implemented, for example, as a web interface.","The foregoing description of an implementation of the invention has been presented for purposes of illustration and description. It is not exhaustive and does not limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practicing of the invention. Additional modifications and variations of the invention may be, for example, the described implementation includes software but the present invention may be implemented as a combination of hardware and software or in hardware alone. The invention may be implemented with both object-oriented and non-object-oriented programming systems.","For example, identification services consistent with the present invention be implemented using, for example, the Java Management Extensions (JMX) technology to provide identification services that are accessible by management and monitoring applications. JMX Managed Beans may be created to implement components of the identification service and registered with a Jini lookup service. In this way, the JMX Managed Beans could be discovered and accessed by management applications. The JMX technology is described further at http:\/\/java.sun.com\/products\/JavaManagement\/. The JMX technology may be implemented, for example, using the Java Dynamic Management Kit (JDMK).","Identification services consistent with embodiments of the present invention may also be implemented using Simple Network Management Protocol (SNMP) Management Beans that may be accessible to network management systems such as Openview, Tivoli, and BMC Patrol. In this way, an identification service may be provided with unique management and monitoring capabilities.","Furthermore, one skilled in the art would recognize the ability to implement the present invention in many different situations. For example, the present invention can be applied to the telecommunications industry. A complex service, such as a telecommunications customer support system, may be represented as a collection of service elements such as customer service phone lines, routers to route calls to the appropriate customer service entity, and billing for customer services provided. The present invention could also be applied in any event processing system."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as claimed. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate several embodiments of the invention and together with the description, serve to explain the principles of the invention. In the drawings:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
