---
title: Labeling of input device components
abstract: The automated labeling system provides access to the input mechanism axes and button semantic information to applications running in a windowing environment. This enables the applications to not have to have specific information or interface with the low level drivers of the input mechanism and can rely exclusively on the windowing system and its API to interface with the input devices attached to the computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069630&OS=09069630&RS=09069630
owner: Red Hat, Inc.
number: 09069630
owner_city: Raleigh
owner_country: US
publication_date: 20091102
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the invention relate to a system for automatically labeling the axes and buttons of an input device. Specifically, embodiments of the invention relate to a graphical driver for automatically labeling the axes and buttons of an input device within the windowing environment.","Applications in the X Window System do not have access to information about the buttons and axes of available input devices. As a result, these applications must be manually configured or rely on assumptions of the configuration of the input mechanisms of input devices to provide access to the functionality of the connected input device. For example, an application may know that a connected mouse has three input buttons. The application may assume based on convention that the three buttons are a right button, a middle button and a left button. However, the type and function of each button is not known. If the mouse has a non-conventional configuration of buttons, then the functionality of these buttons cannot be known or correctly mapped onto the functionality of the application. Relying solely on conventions is not a reliable manner in which to interface with a connected device. To gain access to reliable information, the application would have to directly access the low level drivers or the input mechanism data stored in the operating system kernel. Nevertheless, applications are not typically granted access to these types of operating system resources and it is not practical for an application to be able to access all types of low level drivers due to the large and constantly changing number of such drivers. For an application to access a low level driver, the application requires specific information about the composition and function of these drivers. If a device driver is not known to the application, then the application is unable to access the information.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1","b":["101","103","101","101","103","101","103"]},"The input devices  can include any type or number of input devices having any number of axes and buttons or similar input mechanisms. The input devices  can include joysticks, gamepads, drawing tablets, scanners, mice, keyboards or similar input devices. The input mechanism axes  can be tied to any type of directional input mechanism including track balls, mouse balls, optical movement sensors (e.g., sensors used in an optical mouse), mini-stick, directional pad, stylus or similar directional input mechanisms. Input devices  can also include any number or type of button mechanisms . An input device can have multiple buttons each of which are either analog or digital. In some cases, the buttons can be considered as an input mechanism having an axis where a range of button depression is detectable.","The computer system  includes an operating system , windowing system , set of applications , automated labeling module  and a set of input device drivers . A \u2018set,\u2019 as referred to herein, refers to any positive whole number of items including one item.","The input device drivers  are a set of low level drivers that directly interface with the input device  and interpret the signals or data from the input device . Each input device driver  is specific to the individual input device , that is, each input device  uses a separate input device driver . The input device driver  transfers configuration data received from the input device  to the operating system  to provide the operating system  with the configuration information. In one embodiment, the configuration information or device information received from the input device includes human interface device (HID) data or more specifically USB-HID data. The configuration information is utilized by the operating system  to determine how input received from the input device  is managed or processed. The operating system  and input device drivers  typically interact through an interrupt system or similar event handling system.","The operating system  can be any operating system including the Linux operating system or more specifically Fedora\u00ae by Red Hat of Raleigh, N.C., the Windows\u00ae operating system by Microsoft Corporation of Redmond, Wash., OS X\u00ae by Apple, Inc. of Cupertino, Calif. or similar operating system. The operating system  can include a kernel  such as the Linux kernel, which is the core operating system code that manages the execution of processes and threads on a processor and similar resources of the system. The operating system  can also include a data structure to store input device configuration data and related data. The input device configuration data can include input mechanism axes and button information and descriptive information about each axis and each button of an input device. This descriptive material is referred to herein as a label. This axis and button label information is retrieved or received by the operating system  from the input device driver . In one embodiment, the input device driver  receive HID or similar data from the input device  that identifies input device  and provides configuration information about the input device . This HID data or similar configuration data can be provided to and stored by the operating system . The HID data or configuration data is accessible through a configuration application programming interface (API) such as an event interface or similar interface of the operating system  or kernel . The configuration API is a set of functions and related data structures that allow access to and modification of the configuration data maintained by the operating system.","The automated labeling module  serves as a generic driver for all input devices  for the windowing system  and the applications  executing in the windowed environment by providing the configuration information necessary to use all input devices . In one embodiment, the automated labeling module  accesses this input mechanism configuration data through the configuration API or similar interface of the operating system  or kernel  and copies this information to the windowing system . The windowing system stores this information as a set of input mechanism data  including the labels for the individual input mechanisms . The automatic labeling module  can execute during the initialization of the windowing system  or can continuously operate during the operation of the windowing system  to transfer the input device configuration data from the operating system  or kernel  into the input mechanism data structure  as it becomes available or as is updated. Transferring the input device configuration data from the operating system  to the windowing system  makes it available to the applications  that are executing in the windowing environment. Otherwise, the applications  would not have access to this information.","The automated labeling module  can initiate the transfer of the configuration data including labeling data from the operating system  or kernel  to the windowing system  by calling functions of the configuration API to retrieve the individual data configuration entries stored therein. The automated labeling module  retrieves axes and button parameter data. This can be an iterative process where the automated labeling module  requests the parameters for the axes and buttons including absolute and relative input mechanism data. The label data for each of the axes and buttons is also retrieved. The label data is semantic data describing each of the axes and buttons. The label data can be any code or indicator having a known or defined semantic value. For example, the label can be a code indicating that an axis is an x-axis, y-axis, or z-axis of a joystick or mouse ball, a mouse wheel, a stylus tip pressure indicator, or similar input mechanism. This data is then transferred to the windowing system by an interface such as an API where function calls are made to update the input mechanism data structure  to include the configuration data including the labels.","The windowing system  can be any type of windowing system including the X Window System. The windowing system  provides a set of user interface functions and data structures that provide a windows based environment for applications to be accessed and utilized by a user of the computer system . The input mechanism data structure  is created and maintained by the windowing system . The input mechanism data structure  can be accessed by applications running in the windowing environment through a specific or general purpose access API . This access API  provides the applications with a set of functions for accessing the information in the input mechanism data structure  including the label data . This label data  is the semantic information regarding the individual axes and buttons for each input device. The functions of the access API  that provide the labels enable the applications to determine the type or function of each axes and button of each available input device such that any application  can make use of all axes and buttons of each input device connected to the computer system. The label data  enables the applications  to properly interpret the parameter data for each axis and button stored in the input mechanism data structure . For example, the parameter data can include a range of input values for an axis of an input device that cannot be reliably utilized without the label information indicating that the axis is a y-axis.","The applications  can be any type of applications including business applications, productivity applications, gaming applications or similar applications that run in a windowed environment. These applications  can utilize any type of input device  and can access the configuration information for the input mechanisms or the input device  through the access API  of the windowing system . This access API  can be generic to any input mechanism and input device  to provide access to the input mechanism data structure  and labeling data  stored by the windowing system .",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2","b":["201","203"]},"The input device driver can provide the HID or similar identification and configuration information regarding the input device as well as the input mechanisms including the axes and input buttons to the kernel or operating system (Block ). The automatic labeling module accesses this input device configuration and identification data through a configuration API or similar interface of the operating system or kernel (Block ). This can occur during the initialization of the operating system, windowing system, in response to the detection of any new input device, in response to an update of the device data at the operating system or any combination of these events.","The automated labeling module transfers this information to a data structure of the windowing system (Block ). The automated labeling module can call an API of the windowing system or similar interface of the windowing system to provide the data obtained from the operating system including the label information for a specific input device or any number of input devices. This data is then used to populate an input mechanism data structure in the windowing system. The windowing system then exposes this information through an access API to the applications running in the windowing environment (Block ). In other embodiments, the windowing system can store this information in any sort of data structure or combination of data structures. The applications that need to utilize the input devices can access specific configuration information about that input device by use of the access API (Block ). The information available to the applications includes input mechanism parameters for each axis and button and labels for each input mechanism.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3","b":"300"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, or dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a secondary memory  (e.g., a data storage device in the form of a drive unit, which may include fixed or removable computer-readable medium), which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device  may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Processing device  is configured to execute the automated labeling module  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)) connected to the computer system through a graphics port and graphics chipset, an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The secondary memory  may include a machine-readable storage medium (or more specifically a computer-readable storage medium)  on which is stored one or more sets of instructions (e.g., the automated labeling module ) embodying any one or more of the methodologies or functions described herein. The automated labeling module  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting machine-readable storage media. The automated labeling module  may further be transmitted or received over a network  via the network interface device .","The machine-readable storage medium  may also be used to store the automated labeling module  persistently. While the machine-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-readable storage medium\u201d and also \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The terms \u201cmachine-readable storage medium\u201d and \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The terms \u201cmachine-readable storage medium\u201d and \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","The automated labeling module  can also be a discrete component  that performs the functions described herein. The automated labeling component  can be any type of special purpose or programmed device in communication with the computer system over the bus or through a network connection.","In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cmanaging,\u201d \u201cproviding,\u201d \u201cstoring,\u201d \u201cobtaining,\u201d \u201cresponding,\u201d \u201caccessing,\u201d or the like, refer to the actions and processes of a computer system, or similar electronic computing device that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories, registers or other such information storage, transmission or display devices.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, Flash memory devices including universal serial bus (USB) storage devices (e.g., USB key devices) or any type of media suitable for storing electronic instructions, each of which may be coupled to a computer system bus.","The algorithms presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems appears in the description above. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","A computer readable medium includes any mechanism for storing information in a form readable by a computer. For example, a computer readable medium includes read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media; optical storage media, flash memory devices or other type of machine-accessible storage media.","Thus, a method and apparatus for an automated labeling module has been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like references indicate similar elements. It should be noted that different references to \u201can\u201d or \u201cone\u201d embodiment in this disclosure are not necessarily to the same embodiment, and such references mean at least one.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
