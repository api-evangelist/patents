---
title: System and method enabling hierarchical execution of a test executive subsequence
abstract: Individual test executive sequences may correspond to individual sub-components of a hierarchical system. To test a system sub-component directly without testing “upper” sub-components in the hierarchy, a first test executive sequence corresponding to that system sub-component may be executed directly, without requiring execution of test executive sequences above the first test executive sequence in the hierarchy, or requiring only partial execution of test executive sequences above the first test executive sequence in the hierarchy. Another embodiment of the invention comprises a system and method for enabling propagation or inheritance of test executive sequence local variables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06868508&OS=06868508&RS=06868508
owner: National Instruments Corporation
number: 06868508
owner_city: Austin
owner_country: US
publication_date: 20010831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to the field of test executive software for organizing and executing test executive sequences. In particular, the invention relates to a system and method enabling hierarchical execution of a test executive subsequence.","Test executive software is specialized software that allows a user to organize and execute sequences of reusable test modules to test units under test (UUTs). For example, the test modules may interact with one or more hardware instruments to test the UUT(s). The test modules often have a standard interface and typically can be created in a variety of programming environments. The test executive software operates as a control center for the automated test system. More specifically, the test executive software allows the user to create, configure, and\/or control test sequence execution for various test applications, such as production and manufacturing test applications. Text executive software typically includes various features, such as test sequencing based on pass\/fail results, logging of test results, and report generation, among others.","Test executives include various general concepts. The following comprises a glossary of test executive nomenclature, as used herein:","Code Module\u2014A program module, such as a Windows Dynamic Link Library (.dll), LabVIEW VI (.vi), ActiveX component, or other type of program module or component, that implements one or more functions that perform a specific test or other action.","Test Module\u2014A code module that performs a test of a UUT.","Step\u2014An action that the user can include within a sequence of other actions. A step may call a test module to perform a specific test.","Step Module\u2014The code module that a step calls.","Sequence\u2014A series of steps that the user specifies for execution in a particular order. Whether and when a step is executed can depend on the results of previous steps.","Sequence File\u2014A file that contains the definition of one or more sequences.","Sequence Editor\u2014A program that provides a graphical user interface for creating, editing, and debugging sequences.","Run-time Operator Interface\u2014A program that provides a graphical user interface for executing sequences on a production station. A sequence editor and run-time operator interface can be separate application programs or different aspects of the same program.","Test Executive Engine\u2014A module or set of modules that provide an API for creating, editing, executing, and debugging sequences. A sequence editor or run-time execution operator interface uses the services of a test executive engine.","Application Development Environment (ADE)\u2014A programming environment such as LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, etc., in which the user can create test modules and run-time operator interfaces.","Unit Under Test (UUT)\u2014The device or component that is being tested.","Thus, the user may use the sequence editor to construct a test executive sequence comprising a plurality of steps. The test executive sequence may then be executed to perform tests of a system or UUT. In many cases, the system under test can be logically or physically divided into sub-components that can be tested in a hierarchical manner. For example, consider a computer system having a chassis with several expansion slots and expansion boards attached to the expansion slots. Each expansion board may in turn have various elements, such as I\/O channels, etc. In this example, the system as a whole may be viewed as a hierarchy of sub-components, e.g., the expansion slots, the various boards connected to the slots, I\/O channels and other elements on the expansion slots, etc.","In a system comprising a hierarchy of sub-components such as described above, test developers often desire to organize test software in such a way as to mimic the system hierarchy. For example, one technique for achieving this is to create a hierarchy of test executive sequences, where each sequence maps to a sub-component of the system. Thus, in the example above, a first test executive sequence may be responsible for testing an expansion slot, e.g., physical connections for the slot. During execution of the first test executive sequence, the first test executive sequence may call a second test executive sequence to test an expansion board connected to the slot. This second test executive sequence may in turn call one or more additional test executive sequences to test the various sub-components of the expansion board.","One problem that test developers have faced in the past is how to test only a portion of a hierarchical system. For example, it may take hours or days to entirely test a very complex system. Thus, it would be very desirable to provide an ability to test or re-test only the sub-component(s) of interest. However, in the prior art, the user cannot simply select a test executive sequence corresponding to the sub-component of interest and request to execute that particular sequence. This is due in part to interactions among the test executive sequences. For example, when a first test executive sequence calls a second test executive sequence, the second test executive sequence often uses data that is set by the first test executive sequence. Therefore, without the first test executive sequence executing first to set this data correctly, the second test executive sequence may not execute correctly. Thus, it would be desirable to provide a test executive system that overcomes this problem.","One embodiment of the present invention comprises a system and method enabling a first test executive sequence within a test executive sequence hierarchy to be specified, wherein execution is desired to begin at the first test executive sequence, such that the first test executive sequence executes correctly, wherein it is not necessary to execute the sequences above the first test executive sequence in the hierarchy.","According to one embodiment of the method, a plurality of test executive sequences may first be created in response to user input. For example, the user may utilize a sequence editor that provides a graphical user interface for creating the test executive sequences. In one embodiment, the sequence editor may enable the user to specify a hierarchy among the test executive sequences, e.g., wherein the hierarchy of test executive sequences is operable to test a hierarchical system such as described above. For example, each test executive sequence may map to a sub-component of the system and may be operable to test the respective sub-component. In one embodiment, the sequences may be displayed graphically in a hierarchical manner, such as in a tree view.","In one method of operation, the hierarchy of test executive sequences may be executed according to the entire hierarchy, wherein a top-level sequence in the hierarchy is executed first, followed by child sequences, etc.","The method may also enable a test executive sequence from the plurality of test executive sequences to be \u201chierarchically called\u201d, such that the test executive sequence is called directly, independent of its location within the hierarchy. As used herein, the term \u201chierarchically calling\u201d a test executive sequence means that the test executive sequence is called directly, wherein the test executive sequence may be a child sequence of another sequence in the hierarchy, such that execution begins at the called sequence. If the hierarchically called sequence has one or more child sequences in the hierarchy, then execution may then proceed to these child sequences. In one embodiment, test executive sequences that are above the hierarchically called sequence in the hierarchy are not executed at all. In another embodiment, these test executive sequences may be executed only partially, as described below.","For example, a first test executive sequence may be hierarchically called, wherein the first test executive sequence is operable to test a first system sub-component of a first level in the system hierarchy, wherein the first level is not the top level of the system hierarchy. In response, the first test executive sequence may be executed. In one embodiment, execution of the first test executive sequence may be performed without executing test executive sequences that map to system sub-components above the first system sub-component in the hierarchy.","In one embodiment, the hierarchy of test executive sequences may comprise a chain of test executive sequences, wherein the chain of test executive sequences includes one top-level test executive sequence and one or more non-top-level (lower level) test executive sequences. To test a system sub-component directly without testing \u201cupper\u201d sub-components in the hierarchy, a first test executive sequence corresponding to that system sub-component may be executed directly, without requiring execution of the test executive sequences that come before the first test executive sequence in the chain.","As noted above, in one embodiment, in addition to execution of a hierarchically called first test executive sequence, a partial execution of one or more test executive sequences above the first test executive sequence in the hierarchy may be performed. The partial execution of these sequences may be performed, for example, to initialize data values used by the first test executive sequence and\/or to properly initialize the system to enable testing of the desired sub-component.","In various embodiments, such partial execution may be performed in any of various ways, e.g., depending on the details of how the test executive software structures or organizes test executive sequences. For example, in one embodiment, test executive sequences may be organized in step groups. For example, a test executive sequence may comprise a setup group of steps, a main group of steps, a cleanup group of steps, etc. In this case, partial execution of the test executive sequences may comprise executing steps of the setup group, but not steps from the main group.","In one embodiment, a user may specify the first test executive sequence by interacting with a graphical user interface of the test executive software. For example, as described above, the hierarchy of test executive sequences may be graphically displayed, e.g., as a set of sequences organized in a hierarchy, such as in a tree view of the sequences. In this case, the user may select the desired first test executive sequence from the list, e.g., by clicking on the first test executive sequence with a mouse, and may then request to begin execution starting with the selected first test executive sequence, e.g., by utilizing a menu option to request this. In response, the first test executive sequence may be hierarchically executed as described above.","In another embodiment, the hierarchical execution of the first test executive sequence may be programmatically specified. For example, the test executive software may provide an application programming interface (API) including a function or method for requesting the hierarchical execution. One embodiment of a NewHierarchicalExecution method is described. In this embodiment, the NewHierarchicalExecution method has a sequenceCallSteps parameter, which is an array of sequence call steps. The array represents a call stack to recreate while only executing steps in setup groups from the sequences on the stack.","Variable Propagation (Inheritance)","In one embodiment, the test executive sequences may utilize local variables to store data relevant to the execution of the sequence. An API may be used to access local variables from code modules that steps call in the sequence. Also, local variables may be passed by value or by reference to any step in the sequence that calls a subsequence.","A method for enabling propagation or inheritance of test executive sequence local variables is described. Sequence local variables may have a Boolean option, referred to as \u201cPropagate to Subsequence\u201d. The default value of the option may be False. For example, the option may appear as a checkable menu item in a context menu for a local variable. The option may also be accessible as a PropertyObject flag in an API of the test executive software.","If the user enables the Propagate to Subsequence option for a sequence local variable, the variable also exists at run-time as a local variable in subsequences that the sequence calls. The variable may continue to propagate as the call chain extends. Sequence local variables may have a second Boolean option, referred to as \u201cPermit Propagation from Caller\u201d. The default value of this option may be False. The Permit Propagation from Caller option may also appear as a checkable menu item in the local variable context menu and may also be accessible as a PropertyObject flag in an API of the test executive software.","The test executive may use the Permit Propagation from Caller option to determine which variable takes precedence when a subsequence defines a variable with the same name as a variable that the calling sequence propagates. If Permit Propagation from Caller is False, the test executive may preserve the subsequence local variable. If Permit Propagation from Caller is True, the test executive may replace the subsequence variable with the variable the caller propagates.","The user may set the Permit Propagation from Caller option to True to specify that a propagated variable will override the sequence variable. The user may set the Permit Propagation from Caller option to False to specify that the propagated variable does not replace the sequence variable. The user may use the False setting to achieve a traditional nested scoping of variables. In one embodiment, the sequence editor may show variables that a sequence inherits at run-time.","When a propagated variable overrides an existing sequence variable, the test executive may generate an error if the data types of the variables do not match.","In one embodiment, the above-described method for enabling propagation or inheritance of test executive sequence local variables may be utilized in implementing the ability to hierarchically call a test executive sequence. For example, where partial execution occurs of higher-level sequences above a hierarchically-called first sequence, variables set by the higher-level sequences (e.g., variables set by steps in setup groups of the higher-level sequences) may be propagated to the hierarchically-called first sequence to enable the first sequence to execute correctly.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Incorporation by Reference","The following references are hereby incorporated by reference in their entirety as though fully and completely set forth herein.","U.S. patent application Ser. No. 09\/259,162 titled \u201cTest Executive System and Method Including Step Types for Improved Configurability,\u201d filed Feb. 26, 1999.","U.S. patent application Ser. No. 09\/944,546 titled \u201cSystem and Method Enabling Execution Stop and Restart of a Test Executive Sequence(s),\u201d filed Aug. 31, 2001.","FIG. \u2014Instrumentation System",{"@attributes":{"id":"P-00053","num":"00053"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","102","102","150","102"]},"The one or more instruments may include a GPIB instrument  and associated GPIB interface card , a data acquisition board  and associated signal conditioning circuitry , a VXI instrument , a PXI instrument , a video device  and associated image acquisition card , a motion control device  and associated motion control interface card , and\/or one or more computer based instrument cards , among other types of devices.","The GPIB instrument  may be coupled to the computer  via a GPIB interface card  provided by the computer . In a similar manner, the video device  may be coupled to the computer  via the image acquisition card , and the motion control device  may be coupled to the computer  through the motion control interface card . The data acquisition board  may be coupled to the computer , and optionally interfaces through signal conditioning circuitry  to the UUT. The signal conditioning circuitry  preferably comprises an SCXI (Signal Conditioning EXtensions for Instrumentation) chassis comprising one or more SCXI modules .","The GPIB card , the image acquisition card , the motion control interface card , and the DAQ card  are typically plugged in to an I\/O slot in the computer , such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer . However, these cards , ,  and  are shown external to computer  for illustrative purposes. The cards , ,  and  may also be implemented as external devices coupled to the computer , such as through a serial bus.","The VXI chassis or instrument  may be coupled to the computer  via a serial bus, MXI bus, or other serial or parallel bus provided by the computer . The computer  preferably includes VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis . The PXI chassis or instrument is preferably coupled to the computer  through the computer's PCI bus.","A serial instrument (not shown) may also be coupled to the computer  through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer . In typical systems an instrument will not be present of each interface type, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments.","The instruments are coupled to the unit under test (UUT) or process , or are coupled to receive field signals, typically generated by transducers. Other types of instruments or devices may be connected to the system, as desired.","The computer system  preferably includes a memory medium on which test executive software according to one embodiment of the present invention is stored. The test executive software may allow a user to create, configure, and\/or control test executive sequence execution for various test applications, such as production and manufacturing test applications. As described in detail below, the test executive software may include functionality for hierarchical execution of a test executive sequence. Also as described below, the test executive software may also include functionality for enabling propagation or inheritance of test executive sequence local variables.","The term \u201cmemory medium\u201d is intended to include an installation medium, e.g., a CD-ROM, floppy disks , or tape device; a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, Rambus RAM, etc.; or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer that connects to the first computer over a network, such as the Internet. In the latter instance, the second computer may provide program instructions to the first computer for execution. The host computer CPU executing code and data from the memory medium may comprise a means for implementing the methods described below.","FIG. \u2014Computer System Block Diagram",{"@attributes":{"id":"P-00063","num":"00063"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":"1"},"The computer  includes at least one central processing unit or CPU  that is coupled to a processor or host bus . The CPU  may be any of various types, including an \u00d786 processor, e.g., a Pentium class, a PowerPC processor, a CPU from the SPARC family of RISC processors, as well as others. Main memory  is coupled to the host bus  by means of memory controller .","The main memory  may store software according to one embodiment of the present invention, such as test executive software with functionality as described above with reference to FIG. . The main memory  may also store operating system software as well as other software for operation of the computer system, as well known to those skilled in the art.","The host bus  is coupled to an expansion or input\/output bus  by means of a bus controller  or bus bridge logic. The expansion bus  is preferably the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus  includes slots for various devices such as the data acquisition board  (of ) and a GPIB interface card  that provides a GPIB bus interface to the GPIB instrument  (of FIG. ). The computer  further comprises a video display subsystem  and hard drive  coupled to the expansion bus .","As shown, a reconfigurable instrument  may also be connected to the computer . The reconfigurable instrument  may include a functional unit, also referred to as configurable logic, such as a programmable logic device (PLD), e.g., an FPGA, or a processor and memory, which may execute a real time operating system. Program instructions may be downloaded and executed on the reconfigurable instrument . In one embodiment, at least a portion of the test executive software described herein may execute on the reconfigurable instrument . In various embodiments, the functional unit may be comprised on an instrument or device connected to the computer through means other than an expansion slot, e.g., the instrument or device may be connected via an IEEE 1394 bus, USB, or other type of port. Also, the functional unit may be comprised on a device such as the data acquisition board  or another device shown in FIG. .","Test Executive Software Components",{"@attributes":{"id":"P-00069","num":"00069"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["202","202","202"]},"The test executive software of  also includes a sequence editor  for creating and editing test executive sequences. The sequence editor  and the operator interface programs  interface to the test executive engine . One or more process models  couple to the test executive engine . The test executive engine  interfaces through an adapter interface  to one or more adapters . The adapters shown in  include the LabVIEW standard prototype adapter, the C\/CVI prototype adapter, the DLL flexible prototype adapter, and the sequence adapter. The LabVIEW standard prototype adapter interfaces to program modules having a .VI extension, i.e., LabVIEW graphical programs. The C\/CVI prototype adapter interfaces to program modules having a .dll, .lib, .obj, or .c extension. The DLL flexible prototype adapter interfaces to program modules having a .dll extension. The sequence adapter interfaces to sequence files.","The test executive engine  manages the execution of test executive sequences. Sequences comprise steps that may call external code modules. By using module adapters  that have the standard adapter interface , the test executive engine  can load and execute different types of code modules. Thus, the test executive may be independent from particular application development environments (ADEs) used to create the code modules. In one embodiment, the test executive may use a special type of sequence called a process model to direct the high-level sequence flow. The test executive engine  may implement an API used by the sequence editor  and run-time operator interfaces .","Test Executive Sequence Editor","The sequence editor  may be an application program in which the user creates, modifies, and\/or debugs test executive sequences. The sequence editor  may have a graphical user interface (GUI) enabling a user to efficiently create a test executive sequence for testing a system or unit under test. For example, the sequence editor  may provide the user with easy access to test executive features, such as step types, step properties, sequence parameters, step result collection, etc.",{"@attributes":{"id":"P-00074","num":"00074"},"figref":["FIG. 4","FIG. 4","FIG. 5"],"b":["212","5"]},"In many cases, test executive sequences may be created to test a system that includes a plurality of sub-components. Often, the system sub-components may be conceptualized as a hierarchy of sub-components, e.g., as in the example given above with sub-components of expansion slots, expansion boards, elements on the expansion boards, etc. To test such a system, a user may utilize the sequence editor  to create a plurality of test executive sequences. Each test executive sequence may map to a sub-component of the system. (In some cases, only a portion of the system under test may be conceptualized as a hierarchical system; in this case the plurality of test executive sequences may map to the plurality of sub-components in this portion of the system.) Thus, in one embodiment, the plurality of test executive sequences may also be seen as a hierarchy analogous to the hierarchy of the system. It is noted, however, that in some embodiments there may not be an exact mapping of test executive sequences to system sub-components. For example, some of the test executive sequences may be operable to perform tests that do not specifically test a system sub-component. These test executive sequences may not have a corresponding system sub-component. However, the hierarchy of test executive sequences may still mimic the system hierarchy, at least loosely.","In one embodiment, the hierarchy of test executive sequences may be structured in a tree form, wherein each child test executive sequence in the tree is called by a parent test executive sequence. For example, when a test executive sequence at the root of the tree is executed, this root test executive sequence may call its child test executive sequences, which then call their child test executive sequences, etc. The tree may be traversed to execute the test executive sequences. It is noted that in other embodiments, the plurality of test executive sequences may be structured using any of various other hierarchical techniques, instead of as a tree structure.","In one embodiment, the sequence editor  may enable users to structure and display the plurality of test executive sequences hierarchically in a GUI of the sequence editor. For example,  illustrates a GUI display of a tree of test executive sequences. In this example, the root test executive sequence is named \u201cAsync Markov Call\u201d. As illustrated, sequences named \u201cPreset Bits\u201d and \u201cSector 1\u201d are located one level below the root test executive sequence. The \u201cSector 1\u201d sequence has child sequences named \u201cPrset Markov Call\u201d, \u201cSynchronization Step\u201d, \u201cSimulate Forward Users\u201d, and \u201cCEM slot 1\u201d, etc.","In other embodiments, the plurality of test executive sequences may execute in a hierarchical manner, but the sequence editor  may not necessarily provide the ability to display the sequences hierarchically. As an example, a hierarchy or chain of three test executive sequences, sequence A, sequence B, and sequence C may be created, wherein sequence A calls sequence B, and sequence B calls sequence C. In this example, each of these three sequences may be created independently, and the sequence editor  may not provide the ability to visually indicate the sequence hierarchy.","In one embodiment, the sequence editor  may also include an execution window that provides debugging tools, such as those found in application development environments such as LabVIEW, LabWindows\/CVI, Microsoft Visual C\/C++, Microsoft Visual Basic, etc. These may include features such as breakpoints, single stepping, tracing, a variable display, and a watch window.","In one embodiment, in the sequence editor , the user may start multiple concurrent executions. Multiple instances of the same sequence can be executed, and different sequences can be executed at the same time, e.g., as separate threads in a multi-threaded system. Each execution instance has its own execution window. In trace mode, the execution window may display the steps in the currently executing sequence. When execution is suspended, the execution window may display the next step to execute and provide single-stepping options. As described below, the user may utilize the sequence editor  to interactively create a test executive sequence that asynchronously calls another test executive sequence.","Test Executive Engine","The test executive engine  may be used when creating, editing, executing, and debugging test executive sequences. The test executive engine  may also provide a test executive engine application programming interface (API) that enables another program to interface with the test executive engine  in order to perform these actions. In one embodiment, the test executive engine  may export an object-based or component-based API, which in one embodiment may be an ActiveX Automation API. The sequence editor  and run-time operator interfaces  may use the test executive engine API. The engine API may be called from any programming environment able to use the API. For example, where the API comprises an ActiveX Automation API, the engine API may be called from any programming environment that supports access to ActiveX Automation servers. Thus, in various embodiments, the engine API may be called from test modules written in various programming environments, including test modules that are written in LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, Java, etc.","One task performed by the test executive engine  is to manage the execution of test executive sequences. Executing a sequence may comprise executing steps included in the sequence. Not all steps in the sequence are necessarily executed. For example, the user may configure some steps to be skipped, e.g., depending on execution results of previous steps. For a step that references a user-supplied code module, executing the step may comprise executing the respective code module. In addition to these user-supplied code modules being executed, for each step, additional program instructions may be executed, wherein these additional program instructions implement additional functionality specified for the step. These additional program instructions may be specified by the test executive software, rather than being defined by the respective user-supplied code module for the step. As one example, when including a step in a sequence, the user may configure execution results of the step to be collected. In this example, when the step is executed, program instructions to store the step results accordingly may be executed in addition to the program instructions of a user-supplied code module that the step references. It is noted that not all steps may reference a user-supplied code module. For example, the test executive may provide some step types that primarily affect various aspects of sequence execution and are not designed to reference user-supplied code modules.","FIG. \u2014Directly Calling a Test Executive Sequence within a Hierarchy",{"@attributes":{"id":"P-00085","num":"00085"},"figref":"FIG. 7"},"In step , a hierarchical view of a test executive sequence hierarchy may be displayed on a display of a computer system, as described above. For example,  illustrates one example of a GUI display of a tree of test executive sequences.","In step , user input requesting hierarchical execution of a first test executive sequence displayed in the hierarchy may be received. This may involve the user selecting one of the displayed test executive sequences and requesting hierarchical execution of the selected sequence. For example, in the  illustration, the user may click on the \u201cCEM Slot 1\u201d test executive sequence with a mouse device and then utilize a context menu item to request hierarchical execution of the \u201cCEM Slot 1\u201d test executive sequence.","In step , the specified first test executive sequence may be hierarchically executed in response to the user input. This may involve executing the first test executive sequence without executing test executive sequences above the first test executive sequence in the hierarchy. For example, if hierarchical execution of the \u201cCEM Slot 1\u201d test executive sequence is requested as described above, then execution of the \u201cAsync Markov Call\u201d test executive sequence (and its child sequences) and execution of the \u201cSector 1\u201d test executive sequence (and its child sequences other than the \u201cCEM Slot 1\u201d sequence) may not be performed. In another embodiment, only a partial execution of these higher-level sequences may be performed.","However, hierarchical execution of the \u201cCEM Slot 1\u201d sequence preferably does comprise executing child sequences of the \u201cCEM Slot 1\u201d sequence, i.e., the \u201cChannel Element 1\u201d sequence (and its child sequences), the \u201cChannel Element 2\u201d sequence (and its child sequences), etc. In other words, execution effectively begins at the first test executive sequence and continues from that point. Thus, hierarchical execution of the first test executive sequence may result in testing only a portion of a system under test, i.e., that portion which the first test executive sequence (and its child sequences) are operable to test.","As noted above, in one embodiment, in addition to execution of the hierarchically called first test executive sequence, a partial execution of one or more test executive sequences above the first test executive sequence in the hierarchy may be performed. The partial execution of these sequences may be performed, for example, to initialize data values used by the first test executive sequence and\/or to properly initialize the system to enable testing of the desired sub-component.","In various embodiments, such partial execution may be performed in any of various ways, e.g., depending on the details of how the test executive software structures or organizes test executive sequences. For example, in one embodiment, test executive sequences may be organized in step groups. For example, a test executive sequence may comprise a setup group of steps, a main group of steps, a cleanup group of steps, etc. In this case, partial execution of the test executive sequences may comprise executing steps of the setup group, but not steps from the main group.","In the above description, a test executive sequence hierarchy is displayed, and the user interactively selects a desires test executive sequence from the hierarchy for which hierarchical execution is desired. In another embodiment, hierarchical execution of a test executive sequence may be programmatically requested. For example, as described above, the test executive software may provide an application programming interface (API). This API may include a function or method for requesting the hierarchical execution of a test executive sequence. One embodiment of a \u201cNewHierarchicalExecution\u201d method is described below. In this embodiment, the NewHierarchicalExecution method has a \u201csequenceCallSteps\u201d parameter, which is an array of sequence call steps. The array represents a call stack to recreate while only executing steps in setup groups from the sequences on the stack.","FIG. \u2014Testing a Sub-Component of a Hierarchical System",{"@attributes":{"id":"P-00094","num":"00094"},"figref":"FIG. 8"},"In step , a plurality of test executive sequences may be created in response to user input, wherein each test executive sequence maps to a sub-component of a hierarchy of system components and is operable to test the respective sub-component.","In step , a first test executive sequence may be called to test a first system sub-component of a first level in the hierarchy, wherein the first level is not the top level of the hierarchy.","In step , the first test executive sequence may be executed without executing test executive sequences that map to system sub-components above the first sub-component in the hierarchy.","It is noted that in one embodiment the hierarchy of test executive sequences may not necessarily be used to test a hierarchical system. A hierarchy of test executive sequences may be created to test any of various types of units under test systems. The methods described herein may still extend to such systems. In other words, a first test executive sequence may still be directly called and executed without executing (or only partially executing) sequences above the first sequence in the hierarchy.","FIG. \u2014Sequence Local Variable Propagation","In one embodiment, test executive sequences may utilize local variables to store data relevant to the execution of the sequences.  is a flowchart diagram illustrating one embodiment of a method for enabling propagation or inheritance of test executive sequence local variables.","In step , a first test executive sequence having a first local variable may be created.","In step , a second test executive sequence having a second local variable of the same name as the first local variable may be created, wherein the second test executive sequence is a subsequence of the first test executive sequence (i.e., the first test executive sequence calls the second test executive sequence).","In step , the first test executive sequence may be executed. In one embodiment, the value of the first local variable may be set during execution of the firs test executive sequence. In another embodiment, the value of the first local variable may be initialized to a default value before execution of the first test executive sequence.","In step , the first local variable is propagated to the second test executive sequence, i.e., the second local variable inherits the first value.","The method of  may be implemented in any of various ways. In one embodiment, sequence local variables may have a Boolean option, referred to as \u201cPropagate to Subsequence\u201d. The default value of the option may be False. For example, the option may appear as a checkable menu item in a context menu for a local variable. The option may also be accessible as a PropertyObject flag in an API of the test executive software.","If the user enables the Propagate to Subsequence option for a sequence local variable, the variable also exists at run-time as a local variable in subsequences that the sequence calls. The variable may continue to propagate as the call chain extends. Sequence local variables may have a second Boolean option, referred to as \u201cPermit Propagation from Caller\u201d. The default value of this option may be False. The Permit Propagation from Caller option may also appear as a checkable menu item in the local variable context menu and may also be accessible as a PropertyObject flag in an API of the test executive software.","The test executive may use the Permit Propagation from Caller option to determine which variable takes precedence when a subsequence defines a variable with the same name as a variable that the calling sequence propagates. If Permit Propagation from Caller is False, the test executive may preserve the subsequence local variable. If Permit Propagation from Caller is True, the test executive may replace the subsequence variable with the variable the caller propagates.","The user may set the Permit Propagation from Caller option to True to specify that a propagated variable will override the sequence variable. The user may set the Permit Propagation from Caller option to False to specify that the propagated variable does not replace the sequence variable. The user may use the False setting to achieve a traditional nested scoping of variables. In one embodiment, the sequence editor may show variables that a sequence inherits at run-time.","When a propagated variable overrides an existing sequence variable, the test executive may generate an error if the data types of the variables do not match.","In one embodiment, the method of  may be employed in hierarchically executing a test executive sequence. For example, consider a system having a sub-component A and a sub-component B, wherein sub-component B is a child sub-component of sub-component A in the system hierarchy, and wherein a test executive sequence A is operable to test sub-component A, and a test executive sequence B is operable to test sub-component B. Thus, test executive sequence A calls test executive sequence B. In one embodiment, the way test executive sequence B \u201cknows\u201d that is that it is called from test executive sequence A is that test executive sequence A passes down relevant information about sub-component A needed to test sub-component B. For example, such context information may be passed by propagating a local variable from test executive sequence A to test executive sequence B, according to the method of FIG. .","Exemplary API Call for Requesting Hierarchical Execution of a Test Executive Sequence","As described above, the test executive software may provide one or more API functions or methods to programmatically request hierarchical executions of test executive sequences. In one embodiment, a hierarchical execution function or method might have a prototype similar to the following:",{"@attributes":{"id":"P-d0e2161","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Engine.NewHierarchicalExecution(sequenceCallSteps,"]},{"entry":[{},"hierarchicalExecutionFlags, sequenceFileParam, sequenceName,"]},{"entry":[{},"processModelParam, breakAtFirstStep, executionTypeMaskParam [,"]},{"entry":[{},"sequenceArgsParam]  [, editArgsParam] [, InteractiveArgsParam])"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The NewHierarchicalExecution method accepts inputs that specify the hierarchy path to the test executive sequence to execute. Local variables of sequences in the path may propagate down to the starting sequence as if execution had proceeded from the root sequence to the starting sequence, as described above with reference to the method of FIG. .","Also, the NewHierarchicalExecution method allows the developer to specify whether the test executive executes the setup and cleanup step groups for sequences along the hierarchy path to the selected starting sequence.","The following describes implementation details of the NewHierarchicalExecution method.","Return Type: Execution; creates and returns a new Execution object.","The execution creates a call stack specified as a parameter without executing on the call stack the \u201cmain\u201d steps of the sequences of the specified path. To specify the call stack to create, an array of sequence call steps is passed as the \u201csequenceCallSteps\u201d parameter. When the execution reaches the sequence that contains the first sequence call step that the sequenceCallSteps parameter specifies, the execution follows the execution path that the array of sequence call steps defines. Execution resumes normally in the sequence that the last sequence call step in the array calls. The steps in the sequences that contain the sequence call steps do not execute. However, local variables propagate normally according to their propagation options.",{"@attributes":{"id":"P-d0e2271","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter:","sequenceCallSteps"]},{"entry":["Type:","Safe Array"]},{"entry":["Description:","Pass an array of sequence call steps. The array"]},{"entry":[{},"represents a call stack to recreate while only executing"]},{"entry":[{},"the setup steps from the sequences on the stack. Except"]},{"entry":[{},"for the first step, each step in the array should be a"]},{"entry":[{},"step that resides in the sequence that the previous step"]},{"entry":[{},"in the array calls"]},{"entry":["Parameter:","hierarchicalExecutionFlags"]},{"entry":["Type:","Long"]},{"entry":["Description:","Pass 0 for the default behavior or pass one or more"]},{"entry":[{},"HierarchicalExecMask constants. Use the bitwise-OR"]},{"entry":[{},"operator to pass multiple constants. See"]},{"entry":[{},"HierarchicalExecutionFlags constants below for"]},{"entry":[{},"more information."]},{"entry":["Parameter:","sequenceFileParam"]},{"entry":["Type:","SequenceFile"]},{"entry":["Description:","Pass the sequence file object that contains the sequence to"]},{"entry":[{},"execute. If the execution uses a process model, pass the"]},{"entry":[{},"client sequence file object."]},{"entry":["Parameter:","sequenceName"]},{"entry":["Type:","String"]},{"entry":["Description:","Pass the name of the sequence or process model entry point"]},{"entry":[{},"to execute"]},{"entry":["Parameter:","processModelParam"]},{"entry":["Type:","SequenceFile"]},{"entry":["Description:","Pass the process model sequence file object if you want to"]},{"entry":[{},"execute a process model entry point. Otherwise, pass a"]},{"entry":[{},"NULL dispatch pointer in MFC, a NULL object reference"]},{"entry":[{},"in LabVIEW, 0 in LabWindows\/CVI, or the Nothing"]},{"entry":[{},"keyword in Visual Basic."]},{"entry":["Parameter:","breakAtFirstStep"]},{"entry":["Type:","Boolean"]},{"entry":["Description:","Pass True to suspend execution before executing the"]},{"entry":[{},"first step."]},{"entry":["Parameter:","executionTypeMaskParam"]},{"entry":["Type:","Long"]},{"entry":["Description:","Pass 0 for the default beahvior or pass one or more"]},{"entry":[{},"ExecutionTypeMask constants. Use the bitwise OR"]},{"entry":[{},"operator to pass multiple constants."]},{"entry":["Parameter:","sequenceArgsParam"]},{"entry":["Type:","Variant"]},{"entry":["Description:","Pass a PropertyObject object that contains the"]},{"entry":[{},"arguments to the sequence you want to execute. Each"]},{"entry":[{},"subproperty of the PropertyObject object represents"]},{"entry":[{},"a parameter to the sequence. The subproperties must"]},{"entry":[{},"appear in the same order as the sequence"]},{"entry":[{},"parameters. This parameter is optional."]},{"entry":["Parameter:","editArgsParam"]},{"entry":["Type:","Variant"]},{"entry":["Description:","Pass an EditArgs object that indicates which items are"]},{"entry":[{},"currently selected in the operator interface. This is"]},{"entry":[{},"required only for process model points."]},{"entry":["Parameter:","InteractiveArgsParam"]},{"entry":["Type:","Variant"]},{"entry":["Description:","Pass an InteractiveArgs object that indicates which steps are"]},{"entry":[{},"currently selected in the operator interface and contains"]},{"entry":[{},"looping information necessary for an interactive execution."]},{"entry":[{},"Pass this parameter only for interactive executions."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"HierarchicalExecMask_DontRunSetupAndCleanup\u2014(Value: 0\u00d72) Specifies that a hierarchical execution does not run setup or cleanup steps when it generates a call stack. This flag applies to the sequences that contain the sequence call steps you pass to the sequenceCallSteps parameter of NewHierarchicalExecution.","HierarchicalExecMask_IgnorePreconditions\u2014(Value: 0\u00d78): Specifies that when the NewHierarchicalExecution method creates the call stack that its arguments specify, it does not check the preconditions of the sequence call steps that comprise the call stack.","HierarchicalExecMask_RunRemainingSequence\u2014(Value: 0\u00d74) Specifies that execution continues normally when the call stack unwinds. When the sequence call steps return from the call stack that the execution generates, the remaining steps execute normally in the sequences that contain the calls.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"P-00038","num":"00038"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00039","num":"00039"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"P-00040","num":"00040"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00041","num":"00041"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00044","num":"00044"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00045","num":"00045"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00046","num":"00046"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
