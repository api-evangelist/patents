---
title: License management system and method with license balancing
abstract: A system for balancing a distribution of allocations for protected software over a communication network is disclosed. The system is comprised of at least one client computer and a pool of license servers coupled to the communication network. The client computers request authorizations to use the protected software, while a distribution of allocations is managed among the pool of servers for tracking and managing available allocations for using the protected software. One license server in the pool is designated as the current leader server. When a particular license server does not have a selectable minimum amount of available allocations, the current leader server re-assigns, where possible, the allocations within the pool by updating memory containing the distribution tables of license servers in the pool, to give at least one additional allocation to the particular license server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716348&OS=07716348&RS=07716348
owner: SafeNet, Inc.
number: 07716348
owner_city: Belcamp
owner_country: US
publication_date: 20000825
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["Embodiments of the present invention claim priority from Provisional Application Ser. No. 60\/152,785, filed Sep. 3, 1999, and are related to U.S. utility patent applications entitled \u201cLicense Management System And Method With Multiple License Servers\u201d Ser. No. 09\/648,697, filed Aug. 25, 2000, now U.S. Pat. No. 7,035,918; \u201cSystem and Method For Selecting A Server In A Multiple Server License Management System\u201d Ser. No. 09\/648,853, filed Aug. 25, 2000, now U.S. Pat. No. 6,842,896; and \u201cLicense Management System And Method For Commuter Licensing\u201d Ser. No. 09\/648,502, filed Aug. 25, 2000, now U.S. Pat. No. 6,968,384. The contents of each of these applications are incorporated by reference herein.","1. Field of the Invention","The present invention relates, generally, to license management systems and processes for managing licenses on a computer network and, in preferred embodiments, to such systems and processes involving a pool of license servers for managing software licenses among one or more users on the network, and for balancing the management load among the servers in the pool.","2. Description of Related Art","The increasing popularity of computer usage in homes and businesses, as well as in governmental, research and education institutions, has brought about a world-wide demand for greater software variety and sophistication. Indeed, the software development industry in most industrialized countries has shown substantial growth in recent years and is expected to show continued growth through the next decade.","However, as software sophistication increases, development costs associated with such software also tend to increase. Modern software programs can require months or even years of development, often involving expensive resources and teams of highly skilled engineers and programmers, before a product may be readied for sale or license. Thus, software development companies are often required to make large investments early in the development of their products, in the hope that the products will provide a volume of sales or license revenues sufficient to cover their development investments and generate profits.","Illegal software usage and piracy have become a significant problem to software development companies. Because of the nature of computer software, illegal usage and illegal copying of proprietary software programs can be difficult to detect or deter. The increasing usage of computer networks has added to the problem. Computer networks can allow multiple users to access and copy software stored by a common network program server or copy and pass software between each other, over the network. A legitimately purchased or licensed copy of a software program available on a network could result in many illegitimate usages or copies by unauthorized or unlicensed users having access to the network.","Various forms of encryption techniques have been developed to inhibit usage of encrypted software by unauthorized users that do not possess a decryption program or key. However, such techniques typically require each authorized users to obtain or be passed a decryption program or key, in advance of usage of the encrypted program. Accordingly, such techniques can be prohibitively inconvenient for some computer and network environments, where it is difficult or impractical to supply each authorized user with a decryption program or key or to decrypt a program for each user or usage.","Other software protection techniques have required legitimate or authorized users to have a special hardware device or circuit installed in or plugged into their computer, prior to usage of the protected software. See, e.g., U.S. Pat. No. 4,446,519 to Thomas. Again, such techniques can be prohibitively inconvenient for some computer and network environments. For example, if the network environment is such that the authorized user must use multiple computers on the network, then each computer must be provided with the special hardware device. Moreover, if the environment is such that computers having the special hardware device are not located in secure facilities, then unauthorized users may be able to access the protected software by using the non-secure computer in which the special hardware device is installed.","Accordingly, more sophisticated license management software has been developed for managing software licenses for computer networks, which do not require encryption of the protected software or special hardware devices in each authorized user's computer. For example, the assignee of the present invention, Rainbow Technologies, Inc., has marketed versions of a license management system under the trademark, SENTINELLM\u2122. The SENTINELLM\u2122 systems operate with a license server connected to a network of users. The license server stores and manages software licenses for the network users, in accordance with a license management program stored on the server. Each copy of a protected software program on the network is accompanied by a program code corresponding to a shell (also known as \u201cwrapper\u201d) or library of Application Program Interface (API) functions, which communicates with the license management program on the server. When a user starts to run the protected software program, the shell code or library of API functions provided with the program communicates a request to use a license to the license server, over the network. The server, under the control of the license management software, responds to the request to determine whether it is storing an available license for the protected software program. If so, the server communicates an authorization message to the user and decrements a count of available licenses stored by the server. If not, the server communicates another message to the user, indicating that no licenses are available. In this manner, licenses are always stored and managed on a network license server. Each network user may have a copy of a protected software program, but must communicate with the license server for authorization to use the protected program.","License management systems which employ a license server, as discussed above, provide significant advantages with respect to the freedom to readily add, delete or change authorized users on the network, and the ability to readily control and alter licensing schemes (for example, to add or delete licenses or change conditions for licenses) by modifying only the license server files or programs. However, if all licenses are stored and managed in a single license server, failure of that server can result in a failure of the entire license management system. Accordingly, prior versions of the SENTINELLM\u2122 systems include multiple license server capabilities, wherein two or more license servers are provided on the network, each having a pre-loaded license file and a license management program. One of the servers may be designated as a primary license server, while the others are designated as backup servers. If the primary server cannot be reached by a user, for example, because the primary server has crashed or otherwise gone down, the user may then communicate with a backup server to obtain an authorization message. The backup server, having a pre-loaded copy of the license file and the license management program, may then take over the license management functions.","Alternatively, in other prior versions of SENTINELLM\u2122 systems, a shell program or library of API functions could be configured to send a general poll to all servers coupled to the communication channel on which the poll is sent. In response to a general poll, any server computer having a license file containing license information corresponding to the protected software program (whether or not the license information indicated that a license is available) would send a reply to the requesting client computer. The shell program or library of API functions associated with the requesting client computer would then respond to the first reply received from a license server having a license file storing license information for the protected software program. If the replying license server contains an available license for the protected software program, the replying license server provides an authorization message to the requesting client computer. If the replying license server does not contain an available license for the protected software program, the replying license server provides a message to the requesting client computer indicating that authorization to run the protected software program has not been granted. Such a system provides a degree of protection against system failure, in the event that one of the license servers crashes or goes down. The down server computer would not respond to the poll, but other server computers having appropriate license information in their license file would respond to the poll, thus, allowing the client computer to continue to seek authorization to run the protected software program, even though one of the servers was down.","While the above SENTINELLM\u2122 systems have operated well in many contexts, each license server operates somewhat independent of other license servers. Accordingly, there is a need in the industry for improvements in connection with management and coordination of multiple license servers (or a pool of license servers) in software license management systems for computer networks.","Therefore, it is an advantage of embodiments of the present invention to provide a license management system and method for managing licenses on a network using multiple license servers that allows allocations to be distributed among the license servers and then re-assigned between license servers by updating the distribution tables of the license servers to facilitate a dynamic balancing of allocations among license servers based on actual or expected usage.","It is a further advantage of embodiments of the present invention to provide a system and method for managing licenses on a network using multiple license servers that allows allocations to be re-assigned from a nonfunctional (down) license server to a functioning license server by updating the distribution table of the functioning license server to facilitate a dynamic balancing of allocations among license servers based on actual or expected usage.","It is a further advantage of embodiments of the present invention to provide a system and method for managing licenses on a network using multiple license servers that allows a network administrator to change the initial distribution of allocations, add allocations, or add license codes for protected software.","These and other advantages are accomplished according to a system for balancing a distribution of allocations for protected software over a communication network. The system is comprised of at least one client computer and a pool of license servers coupled to the communication network. The client computers request authorizations to use the protected software, while a distribution of allocations is managed among the pool of servers for tracking and managing available allocations for using the protected software. One license server in the pool is designated as the current leader server. When a particular license server does not have a selectable minimum amount of available allocations, the current leader server re-assigns, where possible, the allocations within the pool by updating the distribution tables of license servers in the pool, to give at least one additional allocation to the particular license server.","These and other objects, features, and advantages of embodiments of the invention will be apparent to those skilled in the art from the following detailed description of embodiments of the invention, when read with the drawings and appended claims.","In the following description of preferred embodiments, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the preferred embodiments of the present invention.","Preferred embodiments of the invention relate to a system and process involving a pool of license servers for managing licenses to, for example, one or more protected software programs, files or other data structures, among one or more users on the network. Protected software may include, but is not limited to, for example, a software program, such as a word-processing program, a graphics program, a computer game, etc., a proprietary file or other data structure, such as a data-base or other form of data, as well as other software encoded information or instructions, for which the control of user access is desired. For purposes of simplifying the present disclosure, the protected software used in the following examples is one or more proprietary software programs.","According to a preferred embodiment of the present invention, the plurality of license servers are managed in accordance with a server pool scheme, as controlled by a license management program associated with each license server computer and the shell program or library of API functions associated with each copy of the protected software program. In preferred embodiments, the pool of license servers comprises three to 11 servers. However, it should be noted that alternative embodiments of the present invention are not limited to any particular maximum number of license servers. In addition, in further alternative embodiments, multiple pools of license servers can reside on a single network. However, for purposes of illustration only, embodiments of the present invention will be described herein with reference to a pool of three license servers.","An example hardware environment for an embodiment of the present invention is illustrated, generally, in . With reference to , a computer network  includes a plurality of user or client computers  and three license servers , each coupled for communication over a communication network link, generally referenced at . The plurality of client computers  are identified as \u201cClient \u201d, \u201cClient \u201d, and \u201cClient N\u201d, and the plurality of license servers  are labeled as \u201cLic. Server A\u201d, \u201cLic. Server B\u201d, and \u201cLic. Server C.\u201d Embodiments may employ any suitable number of client computers  and any suitable number of license servers . Also, while not shown in , the network  may include additional components, including one or more program or file servers, routers and\/or other well known network devices and resources.","Each client computer  preferably includes a suitable processor and associated transient memory, such as an RAM, for running a protected software program. The client computer may be part of a standard personal computer (PC), network terminal, workstation or the like. In one preferred embodiment, each client computer  is coupled to a persistent program storage memory device , which may include, but is not limited to, a hard disc drive, floppy disc drive, tape drive, CD-ROM or the like, having a computer readable medium on which the protected software program is stored. Also stored as part of the protected software program is additional program code, such as code corresponding to a shell or library of API functions as discussed above, for communicating with the server computers which are under control of a license management program, in accordance with communication functions discussed below.","Each license server  preferably includes a suitable processor and associated transient memory, such as an RAM, for running a license management program as described herein. In addition, each license server  is coupled to one or more persistent program storage memory devices , which may include, but is not limited to, a hard disc drive, floppy disc drive, tape drive, CD-ROM or the like, having a computer readable medium on which a license management program  and a redundant license file (RLF)  are stored.","An example embodiment of an RLF  is shown in  as containing license codes  for proprietary software programs A, B, C, etc. Each license code , in one example embodiment, comprises a string of data relating to license policy and the software program to which the license policy applies. In preferred embodiments, license codes  for software produced by more than one vendor may reside within the same RLF  of the same license server , and may be managed with a single process (execution of the license management software) running on a single license server . Thus, any given licenser server  does not need to have multiple license management processes running to manage licenses for multiple protected vendor applications. Instead, only one license management program needs to be running on a given license server , to manage licenses for protected vendor applications managed by that license server.","In the example embodiment of , a license code  comprises a data string defining multiple records or fields R, R, R . . . RN, wherein each record corresponds to an attribute associated with the license policy, the software program to which the license policy applies, or other information. In preferred embodiments, each license code  includes at least one attribute associated with a license policy, the number of allocations for using the protected software program, and at least one other attribute associated with the identity of the protected software program. The number of allocations for using the protected software program is the maximum number of users that can be running the protected software program at any one time, and is also referred to as the ceiling or hard limit. Data associated with a license policy preferably includes data representing the expiration date or expiration time of the license, as granted by the licensee (e.g., the protected software program's owner or developer).","For purposes of illustration only, in the example of  only one fictional license code , identified as \u201cApplication v1.0,\u201d is stored in the RLF  of a license server , with a hard limit of 100 total allocations distributable across all license servers  (see reference character ). In preferred embodiments, another attribute of the RLF  is the IP address  for each license server . Another attribute of the RLF  is the distribution of the 100 allocations across all the license servers . This distribution is identified as the initial distribution , and is configurable by the network administrator. In the example of , an initial distribution  of A:, B:, C:, indicates that 39 allocations will initially be assigned to license server A, 30 allocations will initially be assigned to license server B, and 30 allocations will initially be assigned to license server C. This initial distribution  also signifies that the pool will comprise three license servers.","In preferred embodiments of the present invention, each RLF  stored in each license server  is an exact copy of every other RLF  of license servers in the pool. Thus, attributes of the license code  such as the expiration date or number of allocations need not be passed between license servers  in response to a request for authorization to used a protected software program from a client computer , because an exact copy of the license code  has already been stored on the hard disk of each license server  prior to the startup of that license server .","Each license server  operates, under the control of its associated license management program , to perform license management functions in association with data contained in the RLF , as described herein. Thus, when a particular license server  is started, the license server  loads the contents of its RLF  into a license table  in RAM or other memory and reads the license table , which identifies that server as a license server . It should be noted that in preferred embodiments, the license table  is never modified. In addition, the contents of the RLF  is loaded into a distribution table  in RAM or other memory, and the initial distribution  is further copied into another record, distinct from the license code , identified as a current distribution . Unlike the license table , the distribution table  changes its current distribution  over time, to keep track of current allocations.","It should be noted that in the example of , only 99 of the 100 allocations have been initially assigned by the network administrator. If the network administrator makes an initial distribution that does not equal the hard limit of allocations (see reference character ), in preferred embodiments of the present invention the extra allocations will be put into a free pool  maintained within the distribution table . Thus, in the example of , one allocation is put into free pool . If, on the other hand, the network administrator makes no initial distribution  of allocations in the RLF , preferred embodiments will divide the allocations evenly over the number of servers in the pool, and any extras will be put in the free pool . For example (but not illustrated in ), if no initial distribution  was assigned by the network administrator, information representing an even distribution of A:, B:, and C: would be stored in the initial distribution attribute  of the RLF , and when a particular license server  is started, the RLF  would load an even distribution of A:, B:, and C: into the current distribution attribute  of distribution table , and would load a value of one into the free pool .","For purposes of illustration only,  illustrates an example of the distribution tables  for a three server pool consisting of license servers A, B, and C. Assume, for this illustration, that all three license servers have been started up, and that license server A has been designated as the leader server, and B and C as the follower servers. Further assume that the hard limit of allocations for the software program Application v1.0 is 100, as indicated by the hard limit record  associated with the license code  for Application v1.0 within each distribution table . In addition, assume that the current distribution of allocations is 39 on leader server A, 30 on follower server B, 30 on follower server C, and one in the free pool, as indicated in the current distribution record  and the free pool  associated with the license code  for Application v1.0 within each distribution table .","Note also that in the embodiment of , associated with each license code  is a record for available allocations for each server in the pool (see reference character ), a record for available allocations for all servers in the pool (see reference character ), and a record for allocations currently in use for each server in the pool (see reference character ). The allocations in these records are values which are incremented or decremented as authorizations are issued, returned, or borrowed. It should be understood that the records identified by reference characters , , , , and  in  are associated with a particular license code , but are distinct from it.","As indicated in , in preferred embodiments of the present invention, the structure of the distribution tables  will be the same for both the leader server A and follower servers B and C, but only the distribution table  for leader server A (the leader distribution table) will reflect the allocation status of the other license servers  in the server pool. In contrast, the distribution tables  for follower servers B and C (the follower distribution tables) will only reflect the allocation status of that particular follower server, as indicated by the X (don't care) designations in portions of the follower distribution tables.","When a user at a client computer  desires to run Application v1.0 from a follower server, such as follower server B, for example, the client computer  may first load some or all of the protected program into the transient memory of the client computer , along with the program code corresponding to a shell or library of API functions. Alternatively, the protected program may remain in persistent memory  until and unless the server computer communicates an authorization signal to the shell program or library of API functions. Selection of a follower server from which to request authorization is described in a related U.S. utility application Ser. No. 09\/648,853 entitled \u201cSystem and Method for Selecting a Server in a Multiple Server License Management System,\u201d filed Aug. 25, 2000, the contents of which are incorporated by reference herein. Alternatively, the protected program may remain in persistent memory  until and unless the server computer communicates an authorization signal to the shell program or library of API functions. Loading of the shell program or library of API functions is preferably transparent to the user on the client computer  and, preferably, occurs in response to the user inputting a command to open the protected software (for example, by clicking a mouse button on an icon associated with the protected software).","As part of the function of the shell or library of API functions, a request is then sent from the client computer  to follower server B for one or more authorizations to run the protected program. For purposes of this example, assume that client computer  requested only one authorization. Follower server B, under the control of the license management software, responds to the request by looking at its distribution table  to determine whether it has available allocations for Application v1.0. In the example of , follower server B has 30 allocations available, as represented by the available allocations record for each server in the pool (reference character ) in the distribution table  for follower server B. Because it has available allocations, follower server B communicates an authorization message to the client computer . As illustrated in , once the authorization message is sent, the distribution table  is updated so that the available allocations record  for follower server B decreases to 29, and the allocations in use record  for follower server B increases to one.","As noted above, in preferred embodiments of the present invention the leader server always has a global picture of the distribution of allocations in the whole server pool. Thus, in the present example any changes to the distribution table of follower server B must be communicated to leader server A. In preferred embodiments, follower server B can determine the IP address for the leader server A from a leader priority list , which is configurable by the network administrator. It should be noted that in preferred embodiments, the IP address of all license servers  in the server pool are stored in the leader priority list , a data structure separate from the license codes , to facilitate faster lookup. However, in alternative embodiments the IP addresses may be stored in a record associated with the license codes . In any case, after determining the IP address of the leader server A, follower server B communicates the fact that its available allocations count has dropped to 29 to leader server A, and the distribution table of leader server A will be updated accordingly. Thus, as illustrated in , the distribution table  of leader server A reflects that the available allocations record  for follower server B has dropped to 29, the allocations in use record  for follower server B has increased to 1, and that the record for allocations available for all servers in the pool (see reference character ) has dropped to 99.","Dynamic license balancing will be described next according to embodiments of the present invention. In preferred embodiments, license server  stores a value for a borrowing threshold that can be set, for example, by the network administrator. Fundamentally, the borrowing threshold is an indicator that the number of available allocations for a particular protected software program assigned to a particular license server  has reached an unacceptably low level. The network administrator can independently set the borrowing threshold for each license server  such that borrowing, or license balancing, may be enabled when a certain percentage of the allocations assigned to a particular license server  are in use. In preferred embodiments of the present invention the borrowing threshold can be set to a value of between 1% and 90%. However, in alternative embodiments, the borrowing threshold can be set to as high as 100%.","Generally, any time the borrowing threshold is exceeded, a borrow request to the leader server will be initiated. Continuing the example of  for purposes of illustration only, assume that the borrowing threshold has been set to 90%, and a cluster of client computers  have requested 27 more authorizations for Application v1.0 from follower server B. As illustrated in , once the authorization messages have been sent by follower server B, the available allocations record  for follower server B decreases to two, and the allocations in use record  for follower server B increases to 28. This change is then communicated to leader server A, whose distribution table  will reflect that the available allocations record  for follower server B has decreased to two, the allocations in use record  for follower server B has increased to 28, and that the record for allocations available for all servers in the pool (see reference character ) has decreased to 72. It should be noted in  that the distribution tables  for follower servers B and C keep track of changes to their own allocations, but do not keep track of changes to the allocations of other license servers. At this point in time, greater than 90% of the allocations for follower server B are in use. Because the borrowing threshold of 90% has been exceeded, follower server B will then initiate a borrow request.","In preferred embodiments of the present invention, borrowing always occurs through the leader server because the leader server always maintains a complete picture of the current distribution of allocations within the server pool. However, before a borrow request can be processed, the number of allocations to be borrowed must be determined. In preferred embodiments, the number of allocations to be borrowed is dependent on (1) the number of allocations needed to drop below the borrowing threshold, and (2) the borrowing threshold itself. Generally, the number of allocations to be borrowed is equivalent to the number of allocations needed to drop below the borrowing threshold, plus a number of extra allocations inversely related to the borrowing threshold. If the borrowing threshold is generally lower, it may be exceeded more frequently, and thus the number of extra allocations is set higher. If the borrowing threshold is generally higher, it may be exceeded less frequently, and thus the number of extra allocations is set lower.","In the example of , follower server B will determine that, with 28 allocations in use, two available allocations are needed to drop below the borrowing threshold. (If only one available allocation was borrowed, for a total allocation of 31, then 28\u00f731=90.3%, which still exceeds the borrowing threshold of 90%. However, if two available allocations are borrowed, for a total allocation of 32, then 28\u00f732=87.5%, and the borrowing threshold is not exceeded.) Moreover, because the borrowing threshold of 90% is relatively high and may be exceeded less frequently, no extra allocations will be borrowed. Thus, in the example of , assume that a total of two allocations will be borrowed.","When leader server A receives the borrow request from follower server B, in preferred embodiments of the present invention leader server A looks within its own memory\u2014first at the free pool , then to the allocation of any down license servers, and finally to its own current allocation\u2014to locate an available allocation. However, in alternative embodiments, other sequences may be employed. In the example of , leader server A will determine that one allocation is available from the free pool , no license servers  are down, and that one allocation is available from the current allocation of leader server A. Leader server A will then borrow (re-assign) one allocation each from free pool  and leader server A to follower server B.","As illustrated in , after the borrowing has occurred, the distribution table  for leader server A will reflect the re-assignment of allocations caused by the borrowing. In the distribution table for leader server A, the current distribution  of leader server A has changed to A:, B:, C:, the available allocations record  for follower server B has increased to four, and the free pool  for leader server A has decreased to zero.","In preferred embodiments of the present invention, after the distribution table  for leader server A has been updated, leader server A sends a distribution criteria sync message to follower servers B and C to change their distribution tables . As illustrated in , after the distribution criteria sync message has been received by follower servers B and C, the distribution table  for follower server B reflects the new current distribution  of A:, B:, C:, and a new available allocations record  of four. The distribution table  for follower server C also reflects the new current distribution  of A:, B:, C:. It should be noted that even though a successful borrow request will change the assignment of allocations within the server pool, the initial distribution  in the RLFs  and license tables  (see ) do not change.","In the example of , the leader server A was able to borrow (re-assign) one allocation each from free pool  and leader server A to follower server B. However, if an insufficient number of available allocations were available from free pool  and leader server A, leader server A will send a borrow request to follower server C on behalf of follower server B, while saving the original borrow request from follower server B. If follower server C has available allocations, leader server A will decrement the number of allocations in follower server C by the appropriate amount, and increment the number of allocations in follower server B by the same amount. After the distribution table  for leader server A is updated, leader server A will send a distribution criteria sync message to follower servers B and C to change their distribution tables . However, if follower server C does not have a sufficient number of available allocations, it will decline the borrow request from leader server A. Leader server A will then send a borrow response back to follower server B, indicating that no authorizations could be granted.","Because the borrowing process may take a relatively long time, it is possible that while a server is in the process of borrowing allocations, but before any allocations have actually been re-assigned, a new request from another client computer for one or more authorizations may be received. In preferred embodiments of the present invention, the affected server will examine its distribution table, and even though the borrowing threshold is currently exceeded, will grant authorizations to the requesting client computer if there are enough allocations available to satisfy the entire request. However, if there are an insufficient number of available allocations to satisfy the entire request, the affected server will send a denial message back to the requesting client computer.","In preferred embodiments of the present invention, because the re-assignment of allocations in the distribution tables  of the license servers  as a result of a borrow request is not reversed when the re-assignment of allocations is no longer needed, borrowing has the result of dynamically altering the distribution of allocations for each license server  in the server pool. Thus, license servers  that receive a large number of requests for authorizations may eventually accumulate a large number of allocations as compared to license servers  that receive fewer requests. In this way, the current distribution of allocations may, over time, settle into a distribution that is optimized for the utilization of the specific network.","However, in addition to the re-assignment of allocations as a result of borrowing, the distribution of allocations may also be changed by the network administrator. Although the RLF  contains the initial distribution , a network administrator may later decide to change the current distribution . Preferred embodiments of the present invention provide a utility, triggered by a change distribution criteria message, that enables a leader server to make changes to the current distribution  of allocations for the pool of license servers.","Using the example three server pool discussed in  for purposes of illustration only, if the network administrator, using a client computer , sends a change distribution criteria message including a new current distribution  to follower server B, follower server B will pass this message to leader server A along with the new current distribution . As this example illustrates, in preferred embodiments all change distribution criteria messages, if not initially sent to the leader server, must be forwarded to the leader server so that the leader server always has a global picture of the current distribution of allocations  in the server pool. In addition, follower server B will send a \u201cmessage forwarded to leader server\u201d message back to client computer .","Once leader server A receives a change distribution criteria message, leader server A will then change its current distribution record  in its distribution table  and send a distribution criteria sync message to follower servers B and C. Again, it should be noted that a change distribution criteria message will only change the current distribution  of the server pool, not the RLFs . An advantage of this utility is that a network administrator can use any license server  to make the change.","In the case where the network administrator uses a client computer to send a change distribution criteria message directly to the leader server, after the leader server changes the distribution table and a distribution criteria sync message has been sent to the follower servers in the pool, the leader server will send a message back to the client computer indicating that the distribution criteria has changed.","In addition to changing the current distribution of allocations in the server pool, in embodiments of the present invention allocations can also be added to the server pool by the network administrator. Through a client computer, for example, the network administrator can run a utility that requests the addition of allocations to an existing license code by adding a \u201cnew\u201d license code. The overall hard limit of the existing license code is thereby increased by the hard limit of the new license code. The new license code should accompany a distribution criteria specifying a desired allocation for each server in the pool. If no distribution criteria is specified, the allocation is equally divided among the servers in the pool, with any remainder being placed in the free pool.","If the add allocations message is directed to a follower server, the follower server will forward the message to the leader server. Thus, an advantage of this utility is that a network administrator can use any license server to make the change. Once the leader server receives an add allocations message, the leader server will then change its hard limit of allocations record for the proper license code in its distribution table and send a distribution criteria sync message to the follower servers. Once the hard limit of allocations record has been changed in all license servers, the leader server will send a message back to the client computer through the follower server (but only if the add allocations message was initially sent to the follower server) indicating that the hard limit of allocations has been changed. Again, it should be noted that an add allocations message will only change the hard limit of allocations in the server pool, not the RLFs.","In embodiments of the present invention a new license code  can be added to the server pool by the network administrator. Through a client, the network administrator can run a utility that requests the addition of a new license code  to a particular license server. Using the example three server pool discussed in  for purposes of illustration only, if the network administrator, using a client computer , sends an add license code message to follower server B, follower server B will pass this message to leader server A along with the new license code . As this example illustrates, in preferred embodiments all add license code messages, if not initially sent to the leader server, must be forwarded to the leader server so that the leader server always has a global picture of the license codes  in the server pool.","Once leader server A receives an add license code message, leader server A will then add the license code  to its distribution table  and send a distribution criteria sync message to follower servers B and C. Once the license code  has been added to the distribution table  of all license servers , leader server A sends a message back to the client computer  through follower server B (only if the add license code message was initially sent to follower server B) indicating that the license code has been added. Again, it should be noted that an add license code message will only add the license code  to the distribution tables  of license servers  in the server pool, not the RLFs . In addition, an add allocations message must be separately sent to add allocations to the new license code . An advantage of this utility is that a network administrator can use any license server  to make the change.","It should be noted that the discussion hereinabove has been limited to redundant license codes , which are defined herein as license codes  having allocations that may be re-assigned to any license server  in the server pool. However, in preferred embodiments of the present invention, it is also possible to add non-redundant license codes, which are defined herein as license codes that can be run only on a particular server. Thus, one attribute of a license code  is whether it is non-redundant. If an add license code message for a non-redundant license code for follower server B is sent to follower server B, for example, the distribution table  of follower server B would be updated, but the change would not be forwarded to leader server A. Thus, leader server A would have no knowledge of the existence of the non-redundant license code.","To successfully receive an authorization message to run a program licensed under a non-redundant license code  in follower server B, a client computer  must request the authorization from follower server B. No other license server , including the leader server A, will know of the existence of the non-redundant license code . Thus, if a request is made to leader server A or follower server C for the non-redundant license code  in follower server B, a denial will be sent back to the client computer . No borrow request will be initiated. In addition, if follower server B goes down, the allocations for this non-redundant license code will not be re-assigned to follower server C or leader server A.","Dynamic license balancing after a license server  has gone down will be described next according to embodiments of the present invention. Continuing the example of  for purposes of illustration only, assume that a client computer A has requested authorization to use a protected software program and has received an authorization message from leader server A, so that the distribution tables  for the three license servers  are as illustrated in . In embodiments of the present invention, the license servers  periodically communicate with (ping) each other so that license servers  know which other license servers  are down or up. The communication, or pinging, may be in the form of a periodic signal (heartbeat) sent from the follower servers to the leader server.","Now assume that leader server A goes down. Because all license servers  are periodically pinging each other, the two follower servers B and C will soon determine that leader server A has gone down. An election process is then triggered, and a new leader server is elected from among the functioning follower servers. Election of a new leader server is described in a related U.S. utility application Ser. No. 09\/468,853 entitled \u201cSystem and Method for Selecting a Server in a Multiple Server License Management System,\u201d filed Aug. 25, 2000, the contents of which are incorporated by reference herein.","New leader server B will already have its own RLF , license table , and distribution table , which includes the current distribution of allocations . However, new leader server B does not have the global allocation information maintained by the old leader server A. Therefore, upon becoming the new leader server, license server B must now receive this information from the other license servers. As illustrated in , because license server A is now down, within the distribution table  for new leader server B, the allocations in use record for license server A (see reference character ) is set to zero, and the allocations available record (see reference character ) is set to 38. When new leader server B sends a heartbeat to follower server C, the heartbeat contains information which identifies B as the leader server. Follower server C will send an \u201cack\u201d in response to the heartbeat from new leader server B, and in the process, will provide information on the allocations in use record and the allocations available record for follower server C. Once this information is received, within the distribution table  for new leader server B, the allocations in use record for license server C (see reference character ) is set to zero, and the allocations available record (see reference character ) is set to 30. In addition, the record for allocations available for all servers in the pool (see reference character ) is set to 72. In this manner, new leader server B receives a global picture of the status of all license servers in the server pool.","Meanwhile, because of the periodic communication, or pinging, between client computers  connected to a particular license server  and that particular license server , client computer A will soon determine that leader server A went down. Client computer A knows that it has received authorization to run a protected program from leader server A, and therefore knows that it must enter a fail-over mode and look for a new license server  from which to receive authorization. Because client computer A receives leader priority list  from a license server  whenever client computer A receives an authorization, client computer A knows the IP address of every license server  in the server pool. Client computer A then sends a heartbeat to the remaining license servers  in turn, in the order designated in leader priority list , until it finds a server with an available allocation.","In preferred embodiments of the present invention, each license server  maintains a key table containing a list of all client computers  that currently have authorizations issued by that license server , even for non-redundant license codes. Thus, when new leader server B receives a heartbeat from client computer A, new leader server B will determine from the key table that it did not previously issue an authorization message for client computer A. Thus, new leader server B will convert the heartbeat to a request, and will issue a new authorization message for client computer A, provided it has an available allocation. In this manner, as client computers  formerly connected to old leader server A locate and ping new leader server B, new leader server B will issue authorization messages and adjust its distribution table  to include allocations previously managed by old leader server A. The distribution table  of new leader server B will then change accordingly.","However, if client computer A, in fail-over mode, sends a heartbeat to new leader server B, but new leader server B doesn't have an available allocation, new leader server B will first look for an available allocation in the free pool , and then in the available allocation record for old leader server A. However, in alternative embodiments, other sequences may be employed. New leader server B can determine the available allocation record of old leader server A from its own distribution table . If an available allocation is located in either of these sources, the available allocation is re-assigned to new leader server B, and the distribution tables  of new leader server B and follower server C are updated accordingly.","An example of fail-over will now be presented. Continuing the example of  presented herein for purposes of illustration only, assume that client computer A, in fail-over mode, sends a heartbeat to new leader server B. Because new leader server B has four allocations available, new leader server B will issue an authorization to client computer A. The distribution table  of new leader server B will then be modified as shown in , where the record for allocations available for all servers in the pool (see reference character ) is decreased to 71, the allocations in use record for new leader server B (see reference character ) is increased to 29, and the allocations available record for new leader server B (see reference character ) is decreased to three.","Thereafter, because the borrowing threshold has now been exceeded (29\u00f732=90.6%), new leader server B will attempt to borrow allocations from other sources. New leader server B therefore first looks for an available allocation in the free pool , but no available allocations are in the free pool . New leader server then looks for an available allocation in the available allocation record for old leader server A, and finds that 38 allocations are available. An allocation is then re-assigned from old leader server A to new leader server B, resulting in the distribution tables  within new leader server B and follower server C as illustrated in . It should be noted that in preferred embodiments, new leader server B does not immediately update its distribution table  and re-assign all of the allocations from old leader server A to new leader server B. Rather, allocations are re-assigned as needed. This is advantageous, because if old leader server A should come back up, it will receive whatever allocation remained in old leader server A from the distribution table  of new leader server B. If new leader server B immediately took all allocations from old leader server A, then old leader server A would receive no allocations when it came back up.","In preferred embodiments of the present invention, if no available allocations are found in the free pool  or the allocation of old leader server A, new leader server B will attempt to borrow an allocation from follower server C. If follower server C has an available allocation, the distribution tables  in follower server C and new leader server B are updated so that the available allocation is re-assigned to new leader server B. An advantage of re-assigning allocations from the old leader server A, if possible, before re-assigning allocations from follower server C, is that because follower server C is still up and working, it can send authorization messages to other client computers  that request authorization directly from follower server C, provided follower server C has available allocations. In contrast, the allocations of old leader server A will go unused unless the allocations of old leader server A are re-assigned. It should be noted that in alternative embodiments, borrowing is a utility that can be turned on or off by the network administrator.","Therefore, embodiments of the present invention provide a system and method for managing licenses on a network using multiple license servers that allows allocations to be distributed among the license servers and then re-assigned between license servers by updating the distribution tables of the license servers to facilitate a dynamic balancing of allocations among license servers that is based on actual usage. Embodiments of the present invention also allow allocations to be re-assigned from a nonfunctional (down) license server to a functioning license server to facilitate a dynamic balancing of allocations among license servers that is based on actual usage, and allow a network administrator to change the initial distribution of allocations, add allocations, or add license codes for protected software."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 12","FIG. 10"]}]},"DETDESC":[{},{}]}
