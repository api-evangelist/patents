---
title: Trusted secure desktop
abstract: Systems and methods for simultaneously protecting software components () installed on a computer system () against malware. The methods involve executing a first end user application () to the computer system () which execute in user mode on a trusted secure desktop (). The trusted secure desktop is configured to run simultaneously with an unsecure desktop (). The methods also involve performing a security service operation to protect the first end user application against malware. The security service operations include a keylogger prevention service operation, a code injection prevention service operation, a screen scraper protection service operation, a process termination prevention service operation, or a Domain Name System service operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08225404&OS=08225404&RS=08225404
owner: Wontok, Inc.
number: 08225404
owner_city: Palm Beach Gardens
owner_country: US
publication_date: 20090121
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This non-provisional U.S. patent application claims the benefit of U.S. Provisional Patent Application No. 61\/022,685 entitled \u201cTRUSTED SECURE DESKTOP\u201d filed on Jan. 22, 2008 by inventors Helmuth Freericks, Oleg Kouznetsov, and John C. Sharp.","1. Statement of the Technical Field","The invention concerns computing systems. More particularly, the invention concerns computing systems and methods for providing a trusted secure desktop.","2. Description of the Related Art","Data can be used and stored on a user computer or a server computer that is accessible via the Internet for a variety of purposes. Such purposes include, but are not limited to, online banking, stock trading, and social data exchange. There is an increasing need to ensure a sufficient high level of security whenever such data is created, updated, viewed, or transferred to another medium without such actions being compromised by hackers and malware. Such malware can include, but is not limited to, keyloggers, rootkits, screen scrapers, and viruses. The method often used by hackers and malware compromises the use of a keyboard, a display screen, or windows clipboard rather than files. This is because the access of files and the transfer of files from an end-user device are typically well protected by traditional anti-malware software.","Notably, conventional computer security software is typically reactive in nature, and therefore requires regular updates. As such, a possibility exists that hackers, viruses, spyware, malware and malicious software may penetrate the defenses put in place to protect the end-user from harm. In view of the forgoing, there is a need for a system that facilitates data security when data is accessed locally or over the Internet.","Prevention of the above described threats poses a very serious problem for computer security software vendors. This is due to the increasing complexity of threats to which end-user devices are exposed. In general, conventional security solutions provided by computer security software vendors address certain aspects of the overall security requirements and often assume that the computer is protected by traditional anti-virus or anti-malware solutions. As such, there is a need for a system that facilitates comprehensive protection of data used on an end-user device and across a network (e.g., the Internet).","This summary is provided to comply with 37 C.F.R. \u00a71.73, presenting a summary of the invention briefly indicating the nature and substance of the invention. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.","Embodiments of the present invention concern methods for simultaneously protecting software components installed on a computer system against malware. The methods involve executing a trusted secure desktop simultaneously with an unsecure desktop of a computer system. The methods also involve executing one or more first end user applications (e.g., a web browser application) installed on the computer system. Each of the first end user applications executes in user mode on the trusted secure desktop. The methods further involve performing one or more security service operations at the client computer to protect the first end user applications against malware.","The security service operations are performed by the trusted secure desktop and\/or an underlying security software. The security software includes an underlying user mode software operative to communicate with the trusted secure desktop. The security software also includes an underlying kernel mode software operative to communicate with the underlying user mode software and an operating system of the computer system. The security service operations can include, but are not limited to, a keylogger prevention service operation, a code injection prevention service operation, a screen scraper protection service operation, a process termination prevention service operation, and\/or a Domain Name System (DNS) service operation.","According to an aspect of the present invention, the first end user application is a web browser application. The web browser application can be stored in a storage device of the computer system in an encrypted form. In such a scenario, the web browser application is decrypted prior to being executed on the trusted secure desktop.","According to an aspect of the present invention, the keylogger prevention service operation comprises: temporarily breaking all connections between the operating system of the computer system and first keyboard device drivers of the computer system; providing a second keyboard device driver that has been verified to be an unpatched or untampered device driver; and establishing a connection between the second keyboard device driver and the operating system of the computer system. The keylogger prevention service operation also comprises: intercepting at least one function used to patch memory images of the second keyboard device driver; and preventing the function from succeeding if the function is being used by malware. The code injection prevention service operation comprises: monitoring code injection functions being performed by the computer system; and preventing at least one of the code injection functions from succeeding if the code injection function is being used by malware.","The screen scraper protection service operation comprises: monitoring functions performed by the computer system used to intercept or redirect information communicated to and from a keyboard, a mouse, and a display screen; intercepting the plurality of functions; preventing at least one of the functions from succeeding if the function is a non-display screen function and is determined to be utilized by malware or a second end-user application running on the second desktop; and performing the function against a screen size of a height of zero pixels and a width of zero pixels if the function is a display screen function and is determined to be utilized by malware or the second end-user application running on the second desktop.","The DNS service operation comprises generating a DNS resolution request at the computer system and communicating the DNS resolution request from the computer system to a DNS server computer system for translation of a domain name for a network site to a numerical identifier. The DNS service operation also comprises receiving the numerical identifier at the computer system.","According to another aspect of the present invention, the methods involve scanning data stored in a memory device of the computer system associated with user mode and kernel mode applications running on the unsecure desktop for malware prior to launching the trusted secure desktop and the first end user application. The methods also involve preventing the trusted secure desktop and\/or the first end user application from launching if the data includes the malware. The methods further involve running an anti-virus\/spyware software on the unsecure desktop to identify and remove the malware from the computer system. The trusted secure desktop and\/or the first end user application are allowed to be launched subsequent to the removal of the malware from the client computer.","Embodiments of the present invention also concern computer systems implementing the above described methods. The computer systems include a computer readable medium having instructions stored thereon and a processing device communicatively coupled to the computer readable medium. The processing device is configured for executing the instructions that cause the computer system to execute the trusted secure desktop simultaneously with an unsecure desktop, execute the first end user application on the trusted secure desktop, and performing one or more security service operations to protect the first end user application against malware.","According to an aspect of the present invention, the first end user application can include a web browser application. If the web browser application is stored in the computer system in an encrypted format, the processing device decrypts the web browser application prior to being executed on the trusted secure desktop.","According to another aspect of the present invention, the processing device is configured for scanning data stored in the computer system associated with the user mode and kernel mode applications running on the unsecure desktop for malware prior to launching the trusted secure desktop and the first end user application. The processing device is also configured for preventing the trusted secure desktop and\/or the first end user application from launching if the data includes the malware. The processing device is further configured for launching an anti-virus\/spyware software on the unsecure desktop to identify and remove the malware from the computer system. The trusted secure desktop and\/or the first end user application are allowed to be launched subsequent to the removal of the malware from the client computer.","Embodiments of the present invention further concern a computer readable medium stored with a program for causing a computer to function as a server computer. The server computer is to be attached to a network including at least one client computer. The server computer includes a responding part for when receiving a security software download request from the client computer obtaining files for the security software and communicating the files to the client computer.","The present invention is described with reference to the attached figures, wherein like reference numbers are used throughout the figures to designate similar or equivalent elements. The figures are not drawn to scale and they are provided merely to illustrate the instant invention. Several aspects of the invention are described below with reference to example applications for illustration. It should be understood that numerous specific details, relationships, and methods are set forth to provide a full understanding of the invention. One having ordinary skill in the relevant art, however, will readily recognize that the invention can be practiced without one or more of the specific details or with other methods. In other instances, well-known structures or operation are not shown in detail to avoid obscuring the invention. The present invention is not limited by the illustrated ordering of acts or events, as some acts may occur in different orders and\/or concurrently with other acts or events. Furthermore, not all illustrated acts or events are required to implement a methodology in accordance with the present invention.","The word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is if, X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances.","Referring now to , there is provided a schematic illustration of a system  for providing a Secure Desktop according to an embodiment of the present invention. As shown in , the system  comprises a client computer , a network , a server computer , and an optional secure Domain Name System (DNS) server . Each of the computers ,  can operate as a single standalone device or can be connected (e.g., using the network ) to other computing devices to perform various tasks in a distributed fashion. Each of the computers , ,  can comprise various types of computing systems and devices, including a personal computer (PC), a tablet PC, a laptop computer, a desktop computer, or any other device capable of executing a set of instructions (sequential or otherwise) that specifies actions to be taken by that device. It is to be understood that a device of the present disclosure also includes any electronic device that provides voice, video or data communication. Further, while a single client computer  is illustrated in , the phrases \u201cclient computer\u201d and \u201ccomputer system\u201d shall be understood to include any collection of computing devices that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.","The computers , ,  are communicatively coupled to one another through respective connections to the network . According to an embodiment of the present invention, the network  comprises an Internet. However, it should be appreciated that the network  can also comprise a Local Area Network (LAN), a Wide Area Network (WAN) or any other suitable network for connecting the computers , .","The computers , ,  can be any multimode communication device capable of supporting wire line and\/or wireless communication technologies. Such multimode communication devices include, but are not limited to, cell phones, personal computers, laptops, and personal digital assistants. In the case of wire line communications, the computers , ,  can utilize xDSL, cable, or public switch telephone network (PSTN) telephony interfaces for communicating over the network , which can include hybrid technologies that support circuit-switched packet-switched communications. The computers , ,  can also support accessory interfaces (e.g., universal serial buses, Firewires, and other connectivity technologies).","The computers , ,  can further support any number of wireless communication protocols. Such communication protocols include, but are not limited to, 802.xx protocols defined by the Institute of Electrical and Electronics Engineers (IEEE). For instance, the computers , ,  can utilize long-range wireless access technologies (e.g., cellular, software defined radio and WiMAX) and\/or short-range wireless technologies to communicate with the network . Cellular access technologies include, but are not limited to, CDMA-1X, UMTS\/HSDPA, GSM\/GPRS, TDMA\/EDGE, EV\/DO, and next generation technologies as they emerge. Short-range wireless technologies include, but are not limited to, WiFi, Bluetooth, Zigbee, and cordless communications (e.g., digital enhanced cordless telecommunications).","A number of software components utilized by the computers , ,  are shown in . In particular, the client computer  includes an operating system  for controlling the operation of a networked desktop or laptop computer. Similarly, the server computer  includes an operating system  for controlling the operation of a networked server computer. Likewise, the secure DNS server computer  includes an operating system  for controlling the operation of a networked DNS server computer and software  for performing secure DNS functions (which will be described in relation to ). Operating systems are well known to those having ordinary skill in the art, and therefore will not be described herein. However, it should be understood that any operating system can be employed by the computers , , .","The client computer  also includes a secure web browser application  (also referred to herein as a \u201cSecure Browser\u201d). The Secure Browser  is generally operative to establish a connection with a web server application  executing on the server computer , request resources (e.g., web pages) from the server computer  through the connection, receive content (e.g., HTML content) from the server computer  through the connection, and execute the content (e.g., display a web page to a user of the client computer ). The connection between the Secure Browser  and the web server application  can be established using the secure DNS functions provided by the secure DNS server computer  to resolve a domain name of the server computer  and translate it to a numerical identifier. As should be understood, a resource can require a user authentication. After a user (not shown) has been authenticated, a session is initiated. The user authentication typically involves obtaining confidential data from the user (not shown) of the client computer , communicating the confidential data (e.g., a user identification and\/or a password) to the server computer , and verifying at the server computer  the user's identity using the confidential data. The Secure Browser  will be described in more detail below in relation to .","The secure DNS server computer  communicates with the client computer  via a secure connection (or a secure communication link) established therebetween. The secure connection can be, but is not limited to, a Secure Socket Layer (SSL) connection. SSL connections are well known to those having ordinary skill in the art, and therefore will not be described herein. The secure DNS server computer  can also receive encoded DNS requests from the client computer , decode the received encoded DNS requests, and process the decoded DNS requests for obtaining secure Internet Protocol (IP) addresses for network equipment of network sites (e.g., a network site (not shown) including the server computer ). The secure DNS server computer  can further securely resolve Internet links and IP addresses. In this regard, the secure DNS server computer  provides a hierarchical naming system for computer, services, or any resource participating in a network. The hierarchical naming system associates various information with the domain name assigned to the server computer  and other similar server computers on the network. Accordingly, the secure DNS server computer  translated human meaningful domain names to numerical (e.g., binary) identifiers associated with networking equipment for purposes of locating and addressing the networking equipment.","Referring now to , there is provided a block diagram of an exemplary hardware architecture  for the client computer . As shown in , the hardware architecture  comprises a system interface , a user interface , a central processing unit , a system bus , a memory  connected to and accessible by other portions of client computer  through system bus , and hardware entities  connected to system bus . At least some of the hardware entities  perform actions involving access to and use of memory , which may be a random access memory (RAM), a disk driver, and\/or a compact disc read only memory (CD-ROM).","User interface  is comprised of input devices, output devices, and software routines configured to allow a user to interact with and control software applications installed on the client computer . Such input and output devices include, but are not limited to, a display screen , a speaker (not shown), a keypad (not shown), a directional pad (not shown), a directional knob (not shown), and a microphone (not shown). As such, user interface  can facilitate a user-software interaction for launching web browser applications and other types of applications installed on the client computer .","System interface  allows the client computer  to communicate directly or indirectly with sever computer  (described above in relation to ) and\/or the secure DNS server computer . If the client computer  is communicating indirectly with the server computers  and\/or , then the client computer  is sending and receiving communications through the common communications network .","Hardware entities  may include microprocessors, application specific integrated circuits (ASICs), and other hardware. Hardware entities  may include a microprocessor programmed for providing a Secure Desktop (e.g., a Secure Desktop  of ). In this regard, it should be understood that the microprocessor can access and run a Trusted Secure Extensions (TSX) Core software program, a SDS software program, and\/or TSX Client Applications installed on the client computer . Alternatively, the microprocessor can have the TSX Core software program, the SDS software program, and\/or the TSX Client Applications installed thereon. The TSX Core software program, SDS software program, and\/or TSX Client Applications will be described below in relation to . However, it should be noted that the SDS software program can include a VERO\u2122 software program available from Authentium, Inc. of Palm Beach Gardens, Fla. Hardware entities  may further include a microprocessor programmed for simultaneously displaying Unsecure Desktops (e.g., the Unsecure Desktop  shown in ) and Secure Desktops (e.g., a Secure Desktop  of ) to a user via a display screen . Hardware entities  may include a decryption device (not shown) for decrypting all or a portion of the SDS software program prior to launching of the same.","As shown in , the hardware entities  can include a disk drive unit  comprising a computer-readable storage medium  on which is stored one or more sets of instructions  (e.g., software code) configured to implement one or more of the methodologies, procedures, or functions described herein. The instructions  can also reside, completely or at least partially, within the memory  and\/or within the CPU  during execution thereof by the client computer . The memory  and the CPU  also can constitute machine-readable media.","While the computer-readable storage medium  is shown in an exemplary embodiment to be a single storage medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure.","The term \u201ccomputer-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories such as a memory card or other package that houses one or more read-only (non-volatile) memories, random access memories, or other re-writable (volatile) memories; magneto-optical or optical medium such as a disk or tape; as well as carrier wave signals such as a signal embodying computer instructions in a transmission medium; and\/or a digital file attachment to e-mail or other self-contained information archive or set of archives considered to be a distribution medium equivalent to a tangible storage medium. Accordingly, the disclosure is considered to include any one or more of a computer-readable medium or a distribution medium, as listed herein and to include recognized equivalents and successor media, in which the software implementations herein are stored.","Referring now to , there is provided an exemplary software architecture  for the client computer . As shown in , the software architecture  can include levels of software programs. The software architecture  includes device drivers , , . . . , , keyboard filter drivers , (not shown), . . . , , a trusted keyboard filter driver , Input\/Output (I\/O) Driver Stack software , an operating system (OS) , platform device\/provider\/service (PDPS) software , software applications , , . . . , , and Trusted Secure software . The Trusted Secure software  can include a mechanism to inject the required functions to use secure DNS into each application. The software components , , . . . , , , , , (not shown), . . . , of software architecture  are well known to persons having ordinary skill in the art. Thus, the software components , , . . . , , , , , (not shown), . . . , will not be described in detail herein. However, a brief description of the software architecture  is provided to assist a reader in understanding the present invention.","A device driver , ,. . . , typically is software the OS  uses to facilitate communications between hardware components (e.g., hardware components , , , ,  described above in relation to ). A device driver , , . . . , can include code for managing access to hardware components, setting hardware component parameters, and transmitting data between hardware components.","Each of the keyboard filter driver software programs , (not shown), . . . , is a particular type of device driver software program that the OS  uses to facilitate communications between keyboard hardware . Each of the keyboard filter driver software programs , (not shown), . . . , connects to the keyboard hardware  via a respective connection , . The Keyboard Filter Driver software programs , (not shown), . . . , communicate with the OS  via the I\/O Driver Stack software . The I\/O Driver Stack software  interfaces the OS , which passes key strokes to an Unsecured Desktop (e.g., the Unsecured Desktop  shown in ) and applications , , . . . , running on the Unsecured Desktop. As should be understood the Unsecured Desktop can be provided by Unsecured Desktop software (not shown in ), which is well known to those having ordinary skill in the art, and therefore will not be described herein.","The Trusted Keyboard Filter Driver software program  provides an anti-key logging feature to the client computer . If the anti-key logging feature of the client computer  is active, then the connections and are temporarily broken between the Keyboard Filter Driver software programs , (not shown), . . . , and the keyboard hardware . In such a scenario, only the Keyboard Filter Driver software program  can communicate with the OS  via the I\/O Driver Stack software . The Trusted Keyboard Filter Driver software program  can be a standard driver provided by a publisher of the OS , and thus can be verified against information published by the publisher of the OS .","OS  is system software responsible for the direct control and management of the client computer  hardware (e.g., hardware components , , , ,  described above in relation to ). Typically, OS  manages basic client computer system  operations, such as loading and running software applications. OS  is also system software responsible for enabling a user to control hardware coupled to the client computer system . OS  can also include instructions to install, launch, and manage applications. OS  is typically stored in memory (e.g., memory  described above in relation to ) which may be a ROM, hard drive, or other storage device.","The PDPS software programs  can include a desktop configuration provider (not shown), a communications provider (not shown), and other providers\/services known in the art. The desktop configuration provider (not shown) is software responsible for the direct control and management of desktop configurations. Desktop configurations are well known to those having ordinary skill in the art, and therefore will not be described herein. Software applications , , . . . , typically include programs designed for end users. Software applications , , . . . , are typically installed on the client computer .","The Trusted Secure software  includes TSX Core software , SDS software , and TSX Client applications . The TSX Core software  includes user mode software  and kernel mode software . The TSX Core software  generally performs user event mode monitoring operations, kernel mode event monitoring operations, user mode event interception operations, and kernel mode event interception operations. The TSX Core software  includes System Monitor Toolkit (SMT) Client Manager software , SMT Provider Manager software , and SMT Provider software , (not shown), . . . , . The SMT Client Manager software  is executed in user mode. The SMT software , , (not shown), . . . , is executed in kernel mode. The phrase \u201cuser mode\u201d, as used herein, refers to a state in which a process runs application code (e.g., end-user application code) rather than kernel code (e.g., device driver code and platform service code). The phrase \u201ckernel mode\u201d, as used herein, refers to a state in which a process runs kernel code (e.g., device driver code, platform service code, and other kernel code that allows full access to the client computer  system).","The SMT Provider software , (not shown), . . . , can generally be standalone software modules which execute in kernel mode while providing interception of specific kernel mode events. Each of the SMT Provider software , (not shown), . . . , components respectively intercept kernel mode events that belong to the same or similar class. For example, the SMT Provider software is classified as File System SMT Provider software that can intercept Network Input\/Output (I\/O) requests. Embodiments of the present invention are not limited in this regard. The SMT Provider software , (not shown), . . . , can include C Libraries of Binary Interception and Instrumentation (not shown) and C Run-Time Libraries (not shown). C Libraries of Binary Interception and Instrumentation (not shown) are well known to those having ordinary skill in the art, and therefore will not be described herein. Similarly, C Run-Time Libraries (not shown) are well known to those having ordinary skill in the art, and therefore will not be described herein.","The SMT Provider Manager software  is a driver or other software component that executes in kernel mode while performing registration operations for registration of the SMT Provider software , (not shown), . . . , and un-registration operations for un-registration of the SMT Provider software , (not shown), . . . , . The SMT Provider Manager software  supplies the SMT Provider software , (not shown), . . . , with a unified interface for intercepting kernel mode events, accessing a Common Information Model (CIM) library, accessing a CIM repository, delivering intercepted kernel mode events to the TSX Client applications , and receiving processed data about the intercepted kernel mode events from the TSX Client applications . The phrase \u201cCommon Information Model\u201d, as used herein, refers to an object oriented information model that provides a conceptual framework for describing management data, as specified by the Distributed Management Task Force, Inc.'s (DMTF) Common Information Model (CIM) Standard. The DMTF CIM Standard is well known to those having ordinary skill in the art, and therefore will not be described herein.","The SMT Client Manager software  is a service or other software component that executes in user mode while managing various TSX Client applications . The SMT Client Manager software  communicates with the TSX Client applications  via predefined protocols, such as Local Procedure Calls (LPCs) or Transmission Control Protocols\/Internet (TCP\/IP) protocols. PLCs and TCP\/IP protocols are well known to those having ordinary skill in the art, and therefore will not be described herein.","One or more of the TSX Client applications  can simultaneously and\/or concurrently execute in user mode. The TSX Client applications  use information provided by the OS  in real-time while having the ability to employ a wide range of functionality. The wide range of functionality include, but are not limited to, monitoring File I\/O kernel mode requests, granting File I\/O kernel mode requests, denying File I\/O kernel mode requests, and accessing registries. The TSX Client applications  can operate in Secure Desktop environment provided by the SDS software .","If the OS  is a Windows operating system, then the TSX Client applications  can be standard WIN32 or WIN64 applications. WIN32 and WIN64 applications are well known to those having ordinary skill in the art, and therefore will not be described herein. The TSX Client applications  can directly interface the TSX Core software  using a TSX Application Programming Interface (API). APIs are well known to those having ordinary skill in the art, and therefore will not be described herein. The TSX Client applications  can provide additional functionalities to the end-user independently from the Secure Desktop software . The additional functionalities can include, but are not limited to, non-security software features (e.g., data input functions, spreadsheet functions, or word processor functions). The phrase \u201cend-user\u201d, as used herein, refers to a person or persons using a device the enables him or them to use the present invention. The TSX Client applications  can be validated against a required digital signature before being allowed to interface with the TSX Core software .","The SDS software  provides a Secure Desktop environment for one more SDS Client applications , (not shown), . . . , and\/or TSX Client applications  installed on the client computer . The SDS software  includes Secure Desktop software  and Secure Browser software , (not shown), . . . , that can execute on the client computer . The Secure Desktop software  can communicate with the TSX Core software  via an Application Programming Interface (API) using predefined protocols. The predefined protocols can include, but are not limited to, LPCs and TCP\/IP protocols.","The Secure Desktop software  provides security services to the SDS Client applications , (not shown), . . . , and the Secure Browser software , (not shown), . . . , , The security services include, but are not limited to, an ability to protect a range of registry keys and files from being modified and\/or deleted, an ability to prevent code injection into a running SDS Client application , , . . . , and\/or running Secure Browser software , (not shown), . . . , , an ability to prevent a termination of a running process, an ability to protect against keyloggers, an ability to protect against screen scrapers, and an ability to protect against other malware. The term \u201ckeylogger\u201d, as used herein, refers to a special type of malware that attempts to capture private data from a user of a computer system by capturing key stokes and mouse clicks from a user interface (e.g., user interface  of ) of the computer system (e.g., the client computer  of ). The phrase \u201cscreen scraper\u201d, as used herein, refers to a special type of malware that attempts to capture private data from a user of a computer system by capturing information as it is displayed on a display screen (e.g., the display screen  of ) of the computer system (e.g., the client computer  of ). The term \u201cmalware\u201d, as used herein, refers to software executing on a computer system that performs operations solely to the benefit of an unauthorized party or otherwise harmful to the computer system.","The Secure Browser software , (not shown), . . . , is a special form of a SDS Client application that is further protected against tampering by means of encryption. In this regard, it should be understood that the Secure Browser software , (not shown), . . . , is stored in an encrypted format within a memory (e.g., the memory  of ) of the client computer . In such a scenario, the Secure Browser software , (not shown), . . . , is decrypted each time the SDS software  is launched. The encryption and decryption of the Secure Browser software , (not shown), . . . , ensures that the Secure Browser software , (not shown), . . . , cannot be tampered with when the SDS software  is inactive. The Secure Browser software , (not shown), . . . , can connect to one or more server computers (e.g., the server computer  of ) via a network (e.g., the network  of ). The Secure Browser software , (not shown), . . . , can be disabled or terminated via user actions. Subsequent to being disabled, the Secure Browser software , (not shown), . . . , and associated files are deleted.","Notably, the Secure Browser software , (not shown), . . . , is fully protected against tampering by hackers with access to the client computer  and malware operating on the client computer . In effect, the Secure Browser software , (not shown), . . . , is uniquely positioned to perform operations on data accessed over the network (e.g., the network  of ) or on the client computer .","The SDS Client applications , (not shown), . . . , execute in user mode. At least a first one of the SDS Client applications , (not shown), . . . , can be a standard WIN32 application or a standard WIN64 application. WIN32 and WIN64 applications are well known to those having ordinary skill in the art, and therefore will not be described herein. The SDS Client application , (not shown), . . . , can be launched on a Secure Desktop (e.g., the Secure Desktop  shown in ) after the SDS Client applications , (not shown), . . . , have been deemed trusted applications. The phrase \u201ctrusted application\u201d, as used herein, refers to an application that is an un-tampered, well known application.","At least a second one of the SDS Client applications , (not shown), . . . , can provide the Secure Desktop environment from which other applications and programs can be launched while being fully protected against tampering and monitoring by malware. This malware protection is facilitated by registry key protection, kernel mode level file protection, code injection protection, and screen scraper protection. The registry key protection and kernel mode level file protection will be described in detail below in relation to . The code injection protection will be described in detail below in relation to . The screen scraper protection will be described in detail below in relation to .","The SDS Client applications , , . . . , simultaneously and concurrently execute in user mode. If the SDS Client applications , , . . . , employ security measures (e.g., security measures of granting or denying File I\/O kernel mode requests related to the SDS Client applications , , . . . , ), then malware trying to compromise (i.e., gather or manipulate) data used by the SDS Client applications , , . . . , is locked out. In effect, the overall security of the client computer  is increased as compared to conventional client computer systems.","The SDS Client applications , , . . . , simultaneously use monitoring, interception, and redirection of operating system events to provide application security functions. The application security functions can include, but are not limited to, anti spyware functions, anti virus functions, on-the-fly data encryption functions, firewall functions, network related functions, file software related functions, and registry related software functions. Notably, the monitoring, interception, and redirection of operating system events is enabled by the TSX Core software .","The SDS software  can scan hardware (e.g., memory) and running software for viruses and malware using an Anti-Virus and\/or Malware Scan Engine code . In such a scenario, the SDS software  can take appropriate actions to ensure that any detected malware is neutralized prior to starting the Secure Desktop software .","According to embodiments of the present invention, the SDS software , TSX Core software , and TSX Client applications  are installed on the client computer , uninstalled from the client computer , activated, and\/or disabled via user actions. The SDS software  can be validated against a trusted license upon activation. Once activated, no other applications are permitted to start. However, running applications are allowed to continue to execute provided that the running applications have been deemed to be non-malicious software. The SDS software  and the TSX Core software  collectively provide the client computer  with persistent security features. The phrase \u201cpersistent security features\u201d, as used herein, means that one or more security features remain active between restarting of the OS . For example, if the OS  starts the TSX Core software  during a boot process, then a number of security features as pre-defined through policies during a previous session of a Secure Desktop or a secure application will be in place prior to any new session of the SDS software  and\/or selected applications. In effect, the persistent security features prevent tampering with critical components of the SDS software  and selected applications when the SDS software  is not active. Embodiments of the present invention are not limited in this regard.","In view of the forgoing, it should be emphasized that the TSX Client applications , the Secure Desktop software , and the SDS Client applications , (not shown), . . . , communicate with the TSX Core software  using an inter process communications based on predefined protocols (e.g., LPCs and TCP\/IP protocols). In effect, the SDS software  controls actions taken by the OS  when certain kernel mode events occur. For example, access to certain registry keys or files may be blocked on behalf of the SDS Client applications , (not shown), . . . , or the TSX Client applications .","Notably, the system  of  implements a method  for providing a Secure Desktop (e.g., the Secure Desktop  shown in ) to a client computer (e.g., the client computer  of ). The following  and accompanying text illustrate such a method  for providing a Secure Desktop (e.g., the Secure Desktop  shown in ). It should be appreciated, however, that the method disclosed herein is provided for purposes of illustration only and that embodiments of the present invention are not limited solely to the method shown.","Referring now to , the method  begins with step  and continues to step . In step , Trusted Secure Software  is downloaded from a server computer (e.g., the server computer  of ) to a client computer (e.g., the client computer  of ). The term \u201cdownload\u201d, as used herein, refers a process to transfer files from a first computer to a second computer via a network. Accordingly, the server computer includes a responding part (not shown in  for purposes of simplicity) for when receiving a security software download request from the client computer obtaining files for the security software and communicating the files to the client computer. Thereafter, a decision step  is performed where it is determined if a user of the client computer has sufficient rights to install the Trusted Secure Software . If the user is determined to have sufficient rights to install the Trusted Secure Software  [:YES], then step  is performed where the Trusted Secure Software  is automatically installed on the client computer. Subsequently, the method  continues with an optional step , which will be described below.","If the user is determined not to have sufficient rights to install the Trusted Secure Software  [:NO], then steps  and  are performed. Step  involves instructing the user of the client computer to install the Trusted Secure Software  as an Administrator. Step  involves installing the Trusted Secure Software  on the client computer in response to one or more user actions. The user actions can include, but are not limited to, entering a user name, entering a password, and clicking a software installation button. After installing the Trusted Secure Software , an optional step  is performed.","In optional step , an updating process is performed to update all or a portion of the Trusted Secure Software . Next, the TSX Core software  of the Trusted Secure Software  is automatically launched in step . As noted above, the TSX Core software  protects data files, data, and various software components of a client computer software architecture (e.g., the software architecture  of ) against tampering. This tampering protection is facilitated by the performance of kernel mode file protection operations, registry protection operations, process protection operations, and\/or code injection prevention operations which begin functioning in step . The registry and file protection operations can include, but are not limited to, monitoring user-mode events, determining if the user-mode events are Registry or File System events, and allowingiblocking the Registry or File System events based on a predefined policy. The code injection prevention operations can include, but are not limited to, monitoring functions used to inset code into software components (e.g., the software components , , . . . , , , , , , . . . , , , (not shown), . . . , , , , and\/or  of ) of a software architecture (e.g., the client computer software architecture  of ), intercepting these functions, and preventing these functions from succeeding if they are determined to be used by malware or an application running in an Unsecured Desktop (e.g., the Unsecured Desktop  shown in ). Step  can also involve optionally injecting code into each application as part of SDS or use TSX functions to provide secure DNS for all SDS applications which access the network (or Internet).","Upon completing step , the method  continues with step . Step  involves launching the SDS software  in response to one or more user actions. The user actions can include, but are not limited to, moving a mouse until a mouse cursor is on top of a SDS software icon (not shown) displayed on an Unsecured Desktop (e.g., the Unsecured Desktop  shown in ) and clicking a right button of the mouse. In response to launching the SDS software , step  is performed where the client computer communicates with a server computer (e.g., the server computer  of ) via a network (e.g., the network  of ) to validate a user license. The user license can be validated using a mechanism that uniquely identifies the client computer. This mechanism can employ a unique key generated at the client computer. Such a unique key mechanism can facilitate the tailoring of configurations and updates to the client computer.","If the user license has not been validated [:NO], then the method  continues with an optional step . Optional step  involves displaying a message on a display screen (e.g., the display screen  of ) indicating that the user license is inactive. The SDS software  is also terminated in step . Subsequently, step  or step  is performed. In step , the Trusted Secure Software  is uninstalled in response to one or more user actions. In step , the user license is reactivated in response to one or more user actions. Also, an optional updating process is performed to update all or a portion of the Trusted Secure Software . After reactivating the user license and\/or performing the optional updating process, step  is performed where the method returns to step  and\/or subsequent processing is resumed.","If the user license has been validated [:YES], then the method  continues with step  of . Step  involves preventing non-running applications (e.g., applications , , . . . , of ) from thereafter being launched during the remaining period during which the SDS software continues to execute. In the next step , an Anti-Virus and\/or Malware Scan Engine code (e.g., the Anti-Virus and\/or Malware Scan Engine code  of ) is utilized to scan running processes and associated data for viruses and\/or malware. The data associated with running processes can be stored in a memory (e.g., the memory  of ) of the client computer. If any of the running software components includes malware and\/or a virus [:YES], then steps - are performed. Step  involves optionally displaying a message on a display screen (e.g., the display screen  of ) of the client computer indicating that malicious software resides in the client computer. In step , an Anti-Virus\/Spyware software installed on the client computer is optionally launched. The Anti-Virus\/Spyware software can indentify and\/or facilitate the removal of malware and\/or virus from the client computer. The Anti-Virus\/Spyware software can include, but is not limited to, NORTON ANTIVIRUS\u2122 software available from Symantec Corporation of Cupertino, Calif. Thereafter, step  is performed where the SDS software  is automatically terminated. In step , the method  returns to step  or subsequent processing is resumed. It should be noted that steps - advantageously provide a client computer  in which malware can be identified and neutralized prior to launching the Secure Desktop software , Secure Browsers , , . . . , , and\/or the SDS Client applications , , . . . , .","If any of the running software components does not include malware and\/or a virus [:NO], then the method  continues with step  where the running applications are allowed to continue to execute. Subsequent to completing step , a decision step  is performed. If malicious code has been injected into one or more device drivers (e.g., the device drivers , , . . . , , , , . . . , , and\/or  of ), then steps - are performed. As noted above, the method  returns to step  or subsequent processing is resumed in step . In effect, a keyboard and mouse security feature has been provided to the client computer. For example, if a driver for a keyboard and\/or a mouse includes malicious code injected therein by malware, then the SDS software  is prevented from running until the malicious code is removed therefrom.","If malicious code has not been injected into one or more device drivers (e.g., the device drivers , , . . . , , , , . . . , , and\/or  of ), then the method  continues with a decision step  of  where it is determined whether the SDS Client applications (e.g., the SDS Client applications , , . . . , of ) are tampered or un-tampered applications. This determination is made by verifying that a digital signature of a file is intact and valid. The digital signature can be, but is not limited to, a Verisign level 3 digital signature which is well known to those having ordinary skill in the art. This determination is also made by comparing memory images of the SDS Client applications installed on the client computer  against disk images of the SDS Client applications on the client computer .","If the SDS Client applications (e.g., the SDS Client applications , , . . . , of ) are un-tampered applications or tampering is being blocked by TSX Core software installed on the client computer  [:YES], then the method  continues with step  (which will be described below). If the SDS Client applications are not un-tampered applications [:NO], then steps  and  are performed. In step , the tampered SDS Client applications are prevented from being run on a Secure Desktop (e.g., the Secure Desktop  shown in ). Step  involves optionally displaying a message on a display screen (e.g., the display screen  of ) of the client computer indentifying the SDS Client application(s) that is(are) tampered applications. Next, step  is performed where Secure Browser software (e.g., the Secure Browser software , (not shown), . . . , of ) components of the SDS software is automatically decrypted.","Upon completing the decryption of the Secure Browser software, it is launched in step . The Secure Browser software can be launched automatically or in response to one or more user actions. In response to launching the Secure Browser software, steps  and  are performed. In step , keyboard security operations are performed if a keylogger prevention feature of the Secure Desktop software is enabled. The keyboard security operations will be described below in relation to . Step  involves displaying a Secure Desktop on the display screen of the client computer. A schematic illustration of an exemplary Secure Desktop  displayed on a display screen  is provided in .","As shown in , the Secure Desktop  is displayed on top of an Unsecure Desktop . The Secure Desktop  is configured to simultaneously run with the Unsecure Desktop . The Secure Desktop  provides a desktop environment in which end-user actions are performed while an underlying security software (e.g., the TSX Core software  of ) protects all local software (e.g., the Secure Browsers , , . . . , and SDS Client applications , , . . . , of ). The Secure Desktop  includes at least one icon  for launching a Secure Browser and at least one icon  for launching a SDS Client application. The term \u201cicon\u201d, as used herein, means a small pictogram which represents a file, folder, application or device on a computer operating system. The Secure Desktop  can also include a taskbar at the bottom thereof. The term \u201ctaskbar\u201d, as used herein, means an application desktop bar which is to launch and monitor applications running on the desktop. The Unsecure Desktop  provides a desktop environment for an operating system (e.g. MICROSOFT WINDOWS\u2122 and Mac OS X) in which applications can be launched and files can be open. Accordingly, the Unsecure Desktop  includes at least one icon  for deleting files and\/or documents, at least one icon  for launching SDS software, and at least one icon  for launching an Unsecure Web Browser. Embodiments of the present invention are not limited in this regard. For example, the Unsecure Desktop  and Secure Desktop  can include any number of icons selected in accordance with a particular computer application.","Referring again to , the method  continues with step  where one or more Secure Browsers , (not shown in ), . . . , are launched in response to one or more user actions. The user actions can include, but are not limited to, moving a mouse (not shown) until a mouse cursor (not shown) resides on top of an icon and clicking a button of the mouse (not shown). Subsequent to launching the Secure Browser(s) , (not shown in ), . . . , , step  is performed where optional DNS operations are perform. The optional DNS operations generally involve communicating a DNS resolution request for obtaining an IP address for a network site from a client computer (e.g., the client computer  of ) to a secure DNS server computer (e.g., the secure DNS server computer  of ). In response to receiving the DNS resolution request, the secure DNS server computer translates the domain name of the network site into an IP address and communicates the IP address to the client computer. The IP address can be encrypted prior to communication from the secure DNS server computer to the client computer. In such a scenario, the client computer can decrypt the IP address after receipt of the same from the secure DNS server computer.","Step  can also involve communicating a resource request for a pre-selected secure resource from the client computer to the server computer. The pre-selected secure resource can be, but is not limited to, a webpage for a website hosted by a particular entity (e.g., an online banking organization, an online stock trading organization, and\/or an online social data exchange organization). Step  can also involve obtaining content for the pre-selected secure resource and executing the content so as to display the content to the user of the client computer. Thereafter, step  can be performed where one or more SDS Client applications , (not shown in ), . . . , are optionally launched in response to one or more user actions.","Next, the method  continues with a plurality of malware protection operations. These malware protection operations are performed in steps - of  if respective protection features of the Secure Desktop software  are enabled. For example, operations are performed in step  by the client computer to protect registry keys and\/or files from being modified and\/or deleted if a registry key protection feature of the Secure Desktop software  is enabled. The registry key and\/or file protection operations will be described below in relation to . In step , operations are performed by the client computer to prevent code injection into the running Secure Browser(s) , (not shown in ), . . . , and\/or SDS Client applications , (not shown in ), . . . , if a code injection prevention feature of the Secure Desktop software  is enabled. The code injection prevention operations will be described below in relation to . Operations are also performed in step  by the TSX Core software  on the client computer  to prevent manipulation of running Secure Browser or Secure Desktop processes (e.g., process termination actions or other actions affecting the normal operation of the Secure Browser or Secure Desktop processes on the client computer). In step , operations are performed by the client computer to prevent screen scrapers from capturing information displayed on the Secure Desktop if a screen scraper protection feature of the Secure Desktop software  is enabled. The screen scraper prevention operations will be described below in relation to .","Once the user is finished performing operations in the Secure Desktop environment, steps - are performed. In step , the SDS Client applications , (not shown in ), . . . , running on the Secure Desktop are terminated. The SDS Client applications , (not shown in ), . . . , can be terminated in response to one or more user actions. Similarly, the Secure Browser(s) , (not shown in ), . . . , are terminated in step . The Secure Browser(s) , (not shown in ), . . . , can be terminated in response to one or more user actions. After terminating the Secure Browser(s) , (not shown in ), . . . , , step  is performed where the decrypted software and\/or files associated with the Secure Browser(s) , (not shown in ), . . . , are automatically deleted from the client computer. In steps  and , the Secure Desktop software  and the SDS software  running on the client computer are terminated. The software ,  can be terminated in response to a user action. Thereafter, the SDS software , TSX Core software , and TSX Client applications  can be optionally disabled or un-installed in step . In step , the method  returns to step  of  or subsequent processing is performed.","In view of the forgoing, it should be noted that the TSX Core software  is active even when the SDS software  is not being used by the user of the client computer. In effect, the client computer is ensured maximum security against malware. Certain security functions (e.g., keylogger protection functions) of the TSX Core software  can be disabled or enabled by a user of the client computer at any time.","Referring now to , there is provided a flow diagram of an exemplary method  for providing keyboard security features according to embodiment of the present invention. Notably, the method  can be performed in step  of . As shown in , the method  begins with step  and continues to step . In step , connections between Keyboard Filter Driver software programs (e.g., the Keyboard Filter Driver software programs , (not shown in ), . . . , of ) and keyboard hardware (e.g., the keyboard hardware  shown in ) are temporarily broken. Thereafter, a Trusted Keyboard Filter Driver software program (e.g., the Trusted Keyboard Filter Driver software program  of ) is provided in step . Connections are established in step  between the Trusted Keyboard Filter Driver software program and an I\/O Driver Stack software (e.g., the I\/O Drive Stack software  of ). Similarly, connections are established in step  between the Trusted Keyboard Filter Driver software program and keyboard hardware.","In step , the Trusted Keyboard Filter Driver software can be verified against information published by a publisher of an operating system of the client computer. If the Trusted Keyboard Filter Driver software includes information that conflicts with the publisher's information, then SDS software  can be terminated. Similarly in step , a memory image of the Trusted Keyboard Filter Driver software can be verified to determine if it has been patched or otherwise tampered with by comparing memory images of the Trusted Filter Driver software with the disk image of the Trusted Filter Driver software. In addition, a digital signature of the Trusted Filter Driver software can be verified to be intact. It should be understood that steps  and  can be performed prior to (not shown) or subsequent to (as shown in ) steps  and .","Upon completing step , the method  continues with a decisions step . If the memory image of the Trusted Keyboard Filter Driver software has been patched or otherwise tampered with [:YES], then step  is performed where the SDS software  is terminated. In contrast, if the memory image of the Trusted Keyboard Filter Driver software program has not been patched or otherwise tampered with [:NO], the step  is performed. In step , functions used to patch memory images of device drivers are intercepted. Thereafter, step  is performed where the functions are prevented from succeeding if they are being used by malware or other applications not running on the Secure Desktop. In a next step , the method  returns to step  or subsequent processing is resumed.","Referring now to , there is provided a flow diagram of an exemplary method  for protecting registry keys and\/or files from being modified and\/or deleted according to an embodiment of the present invention. The method  can be performed in step  of  and\/or in step  of . The method  can be performed by the TSX Core software  of .","As shown in , the method  begins with step  and continues to step . In step , user-mode and\/or kernel mode events are monitored. If a monitored event is a Registry event [:YES], then step  is performed where the Registry event is allowed or blocked based on a predefined Registry Event policy. The phrase \u201cRegistry event\u201d, as used herein, refers to events that involve changes in registry keys (e.g., a write event changing a value of a registry key or a delete event deleting a registry key). The phrase \u201cRegistry Event policy\u201d, as used herein, refers to a pre-defined rule to be applied to one or more registry keys as enumerated in a policy that is being accessed by software running on a computer system (e.g., a Registry key A allows read, block write, or delete). Subsequent to allowing or blocking the Registry event, step  is performed where the method returns to step  or subsequent processing is performed. If a monitored event is not a Registry event [:NO], then a decision step  is performed for determining if the monitored event is a File System event.","If the monitored event is a File System event [:YES], then step  is performed where the File System event is allowed or blocked based on a predefined File System Event policy. The phrase \u201cFile System event\u201d, as used herein, refers to events that involve changes in files (e.g., a write event modifying a file or a delete event deleting a file). The phrase \u201cFile System Event policy\u201d, as used herein, refers to a pre-defined rule to be applied to one or more files as enumerated in a policy that is being accessed by software running on a computer system (e.g., a pre-defined rule allows read operations, block write operation, or delete operations). Thereafter, step  is performed where the method  returns to step  or subsequent processing is resumed.","If the monitored event is not a File System event [:NO], then a decision step  is performed where a decision is made as to whether the monitored event is a process related event. If the monitored event is a process related event [:YES], then step  is performed. Step  involves allowing or blocking process related events based on process event policy. Upon completing step , step  is performed where the method  returns to step  or subsequent processing is resumed. If the monitored event is not a process related event [:NO], then the method  returns to step  or subsequent processing is resumed.","Referring now to , there is provided a flow diagram of an exemplary method  for preventing code from being injected into a running Secure Browser and\/or a running SDS Client Application according to an embodiment of the present invention. The method  can be performed in step  of  and\/or in step  of . The method  is at least partially performed by the TSX Core software  of .","As shown in , the method  begins with step  and continues to step . In step , functions related to code injections or process terminations are monitored. These functions are well known to those having ordinary skill in the art, and therefore will not be described in detail herein. However, it should be understood that the code injection functions can include, but are not limited to, Structured Query Language (SQL) code injection functions to arbitrarily modify stored data, exploitation functions to exploit code injection vulnerabilities in web browsers and\/or web browser plugins when a user of a client computer visits a malicious website, and exploitation functions to exploit shell injection vulnerabilities in a service (e.g., services  of ), and Hyper Text Markup Language\/Script injection functions to steal sessions and\/or cookies from web browsers.","Subsequent to step , a decision step  is performed where a determination is made as to whether a monitored function is being used by malware or an application running on an Unsecured Desktop. This determination is made by the TSX Core software which tracks monitored functions through various interception methods and access origin verification methods when software on the client computer  tries to use the monitored functions. An access origin verification method can generally involve tracing back into a process by reversing on a path of software that is trying to use the monitored functions of an operating system. For example, a caller points to a process in memory and a process in memory points to a disk image. The disk image points to a publisher if it is an authentic program (not malware). Malware typically does not refer to a publisher. Accordingly, if a disk image does not point to a publisher, then the monitored function is deemed to be a monitored function being used by malware.","If the monitored function is not being used by malware or an application running on an Unsecured Desktop (e.g., the Unsecured Desktop  shown in ) [:NO], then step  is performed again. If the monitored function is being used by malware or an application running on an Unsecured Desktop (e.g., the Unsecured Desktop  shown in ) [:YES], then step  is performed where the monitored function is prevented from succeeding. Thereafter, step  is performed where the method  returns to step  or subsequent processing is resumed.","Referring now to , there is provided a flow diagram of an exemplary method  for preventing screen scrapers from capturing information displayed on a Secure Desktop according to an embodiment of the present invention. The method  can be performed in step  of . The method  can also be performed by the TSX Core software  of .","As shown in , the method  begins with step  and continues to step . In step , all functions used to intercept and\/or redirect information communicated to and from certain hardware is monitored. These functions are well known to those having ordinary skill in the art, and therefore will not be described herein. However, it should be understood that the code injection functions can include, but are not limited to, I\/O interception functions and I\/O redirection functions. The hardware can include, but is not limited to, a keyboard (not shown), a mouse (not shown), and a display screen (e.g., the display screen  of ).","Subsequent to completing step , the method  continues with a decision step  where a determination is made as to whether a monitored function is being used by malware or an application running on an Unsecure Desktop. This determination is made by the TSX Core software which tracks monitored functions through various interception methods and access origin verification methods when software on the client computer  tries to use the monitored functions. As described above, an access origin verification method can generally involve tracing back into a process by reversing on a path of software that is trying to use the monitored functions of an operating system. For example, a caller points to a process in memory and a process in memory points to a disk image. The disk image points to a publisher if it is an authentic program (not malware). Malware typically does not refer to a publisher. Accordingly, if a disk image does not point to a publisher, then the monitored function is deemed to be a monitored function being used by malware.","If a monitored function is being used by malware or an application running on an Unsecure Desktop (e.g., the Unsecure Desktop  of ) [:YES], then the method  continues with a decision step . In contrast, if the monitored function is not being used by malware or an application running on an Unsecure Desktop [:NO], then step  is performed again.","The decision step  involves determining if the monitored function is a display screen function. This determination is made by the TSX Core software  which tracks monitored functions through various interception methods and access origin verification methods when software on the client computer  tries to use the monitored functions. Monitored display screen functions can include, but are not limited to, print screen functions, save screen to clipboard functions, and copy screen to remote desktop of another computer system functions. If the monitored function is not a display screen function [:NO], then step  is performed where the monitored function is prevented from succeeding. If the monitored function is a display screen function [:YES], then step  is performed. In step , the display screen function is performed against a screen size of a height of zero (0) pixels by a width of zero (0) pixels. Accordingly, the display screen appears to a screen scraping means as being absent of displayed data. In effect, the screen scraping means has been effectively disabled. Upon completing step , step  is performed where the method  returns to step  or subsequent processing is performed.","In light of the forgoing description of the invention, it should be recognized that the present invention can be realized in hardware, software, or a combination of hardware and software. A method for providing a trusted secure desktop according to the present invention can be realized in a centralized fashion in one processing system, or in a distributed fashion where different elements are spread across several interconnected processing systems. Any kind of computer system, or other apparatus adapted for carrying out the methods described herein, is suited. A typical combination of hardware and software could be a general purpose computer processor, with a computer program that, when being loaded and executed, controls the computer processor such that it carries out the methods described herein. Of course, an application specific integrated circuit (ASIC), and\/or a field programmable gate array (FPGA) could also be used to achieve a similar result.","Applicants present certain theoretical aspects above that are believed to be accurate that appear to explain observations made regarding embodiments of the invention. However, embodiments of the invention may be practiced without the theoretical aspects presented. Moreover, the theoretical aspects are presented with the understanding that Applicants do not seek to be bound by the theory presented.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. Numerous changes to the disclosed embodiments can be made in accordance with the disclosure herein without departing from the spirit or scope of the invention. Thus, the breadth and scope of the present invention should not be limited by any of the above described embodiments. Rather, the scope of the invention should be defined in accordance with the following claims and their equivalents.","Although the invention has been illustrated and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art upon the reading and understanding of this specification and the annexed drawings. In addition, while a particular feature of the invention may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. Furthermore, to the extent that the terms \u201cincluding\u201d, \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description and\/or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d","Unless otherwise defined, all terms (including technical and scientific terms) used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. It will be further understood that terms, such as those defined in commonly used dictionaries, should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments will be described with reference to the following drawing figures, in which like numerals represent like items throughout the figures, and in which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 4A-4D"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 9","FIG. 2"]}]},"DETDESC":[{},{}]}
