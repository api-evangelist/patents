---
title: Computer-automated logbook of condition-based data for machinery management
abstract: Multiple personal computers are each situated aboard its own ship and are each communicatively connected to an electronic depository of information for purposes of effecting real time management of engines and other shipboard machinery. Information is electronically communicated back and forth between each onboard computer and the electronic depository, such as via File Transfer Protocol (FTP), e-mail or compact disk (CD). The electronic depository takes information from all of the onboard computers, and each onboard computer records information including that which is entered therein by a user and that which derives from the electronic depository. Each onboard computer executes import and export routines for communicating with the electronic depository, and executes start-up routines for displaying user-interactive formal screens that are individually tailored for the user's input and viewing of particular types of information, such as involving maintenance, repair, logistics, inspection and/or operation of the machinery.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08396958&OS=08396958&RS=08396958
owner: The United States of America as represented by the Secretary of the Navy
number: 08396958
owner_city: Washington
owner_country: US
publication_date: 20031202
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT OF GOVERNMENT INTEREST","BRIEF DESCRIPTION OF THE COMPUTER PROGRAM LISTING APPENDIX","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","LISTING 1","LISTING 2","LISTING 2"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/434,598, filed 18 Dec. 2002, inventor Edward L. Hilferty, entitled \u201cComputer-Automated Logbook of Condition-Based Data for Machinery Management,\u201d incorporated herein by reference.","The invention described herein may be manufactured and used by or for the Government of the United States of America for governmental purposes without the payment of any royalties thereon or therefor.","Incorporated herein by reference is a Computer Program Listing Appendix, setting forth inventive embodiments of computer source code. This Computer Program Listing Appendix is contained as text documents that were created on 10 Nov. 2003 in a CD-R compact disc that is now situated in the application file. The CD-R compact disc contains three data files in ASCII file format, entitled \u201cautolog.logbook.prg\u201d (about 6 KB), \u201cautolog.bupout.prg\u201d (about 45 KB) and \u201cautolog.import.prg\u201d (about 8 KB). These files entitled \u201cautolog.logbook.prg,\u201d \u201cautolog.bupout.prg\u201d and \u201cautolog.import.prg\u201d are also set forth as printout copies, as appendices \u201cA\u201d (5 pages), \u201cB\u201d (25 pages) and \u201cC\u201d (5 pages), respectively, in the aforementioned U.S. Provisional Application No. 60\/434,598, filed 18 Dec. 2002, incorporated herein by reference.","The present invention relates to data entry and\/or data tracking, more particularly to computerized methodologies for entering and\/or tracking data pertaining to operation, maintenance and\/or configuration of objects such as machinery equipment.","All gas turbine ships in the U.S. Navy fleet are required to maintain a Marine Gas Turbine Equipment Logbook (MGTEL) containing official Marine Gas Turbine Equipment Service Records (MGTESR) for each main propulsion and auxiliary power engine. These logbooks track operating, maintenance and configuration data. The records are not only essential in maintaining proper operational efficiency of the units by the ships, but are also essential for engineering analyses and logistics support.","Current MGTEL\/MGTESR practices represent a carryover from U.S. Navy aviation practices. When gas turbines were selected for use on the U.S. Navy's surface ships, a variety of program practices from the aviation community were adopted and incorporated into the Marine Gas Turbine (MGT) programs. One such practice has been the maintenance of gas turbine logbooks to maintain configuration, component, maintenance and operational data. Ships use a pen-and-paper product (MGTEL) to maintain this type of data and to provide data updates, via naval message, to U.S. Navy offices. This data is then used to maintain two separate, automated data repositories, viz., CSA (configuration tracking system) and OPHRS (operating hours). Both databases are resident on mainframe computers and cost in excess of $600 thousand per year (FY 98 dollars) to maintain.","The above-described gas turbine data-tracking systems currently in place have their drawbacks. These multiple and separate data-tracking systems are redundant within and across platforms and with resultant discrepancies. Furthermore, these data-tracking systems are costly, inefficient, error-prone and largely inaccessible. The only way that off-ship activities can access the MGTEL\/MGTESR data is for portions of the data to be copied into message format and transmitted via a paper document.","The U.S. Navy has customarily predicated its ship maintenance systems on time-directed preventive maintenance principles. Recently, the U.S. Navy has been transitioning in favor of condition-based maintenance (CBM) principles, with a view toward increasing readiness, decreasing maintenance and decreasing manning requirements. It would be desirable to practice a gas turbine logbook methodology that is consistent with CBM values.","In view of the foregoing, it is an object of the present invention to provide an improved logbook methodology for operation, maintenance and configuration of machinery such as gas turbines used aboard naval vessels.","The present inventor styles his invention the \u201cAUTOLOG\u201d (Automated Logbook). The present invention's AUTOLOG is a software product that automates the MGTEL\/MGTESR. In addition to an automated platform for tracking the data by ship's force, AUTOLOG has built-in capabilities to transmit and receive data via the Internet. It has backup capabilities to upload data via a CD or disc and download data to a file for e-mail transmittal, thus obviating separate reporting. The AUTOLOG makes all of the logbook data accessible in real time. Furthermore, the AUTOLOG helps eliminate the need for separate databases by making one database accessible to all, thereby helping eliminate discrepancies associated with multiple databases with the same data due to multiple re-inputting.","In accordance with typical embodiments of the present invention, an automated logging system comprises a host computer and one or plural local computers. Each local computer is connected to the host computer and has resident in memory a computer program product that includes a computer useable medium having computer program logic recorded thereon. The computer program logic includes (i) means for enabling importation of information received from the host computer and (ii) means for enabling exportation of information for receipt by the host computer. Each local computer performs record keeping based on the reciprocal transmission of information between the host computer and every local computer. Each local computer includes a human interface, the computer program logic further including means for enabling display of information via the interface so as to facilitate human use of the local computer. The display is indicative of information entered by the human user and of information received from the host computer. According to usual inventive practice, the means for enabling display of information includes means for enabling variable display of information in accordance with the nature of the information. Many inventive applications involve machinery, wherein the record keeping is characterized by generally continual updating of information for tracking machinery. The display of information varies in accordance with categories of information, such categories including maintenance, repair, logistics, inspection, and operation, each display of information being associated with at least one category.","As a matter of course, the U.S. Navy has kept a hardcopy MGTEL\/MGTESR logbook. The present invention's AUTOLOG, more generally referred to as the Marine Gas Turbine Information System (MGTIS), is an electronic, automated version of a hardcopy MGTEL\/MGTESR logbook. The inventive AUTOLOG is a user-friendly program that can replace the hardcopy logbooks. The present invention's \u201cAUTOLOG 2000\u201d test version began prototype testing in November and December 1999 on four test platforms (CG's, 52, 56, 67 and DDG 67) with excellent reviews. Starting January 2002, U.S. Navy ships are receiving onboard and beginning to implement a perfected version of the inventive AUTOLOG. U.S. Navy ships are being provided a User's Manual along with the inventive AUTOLOG software. The U.S. Navy's transition to the inventive AUTOLOG is eased by that fact that the format of the inventive AUTOLOG is similar to that of the hardcopy logbook.","The AUTOLOG is borne of the U.S. Navy's realization of the existence of current logbook problems and the need to upgrade and reduce reporting requirements. The Naval Surface Warfare Center, Carderock Division (NSWCCD), reassessed the data requirements of the gas turbine fleet and life cycle management, and thus the entire process, from ship to report, has been overhauled, the result being the Marine Gas Turbine Information System (MGTIS) which is built around a ship's stand-alone, computer-based MGTEL application, viz., the present invention's AUTOLOG. The AUTOLOG is the foundation of the U.S. Navy's new MGTIS system, which is itself critical to the performance of life cycle management functions in the current operating environment, which is characterized by declining budgets, an aging MGT population, parts obsolescence, escalating program costs, U.S. Navy fleet downsizing and reduced support infrastructure, over-worked ships' personnel, and the need to make ships \u201csmarter.\u201d","The AUTOLOG is a run-time application, providing all of the application programming needed. The minimum operating requirements for the ships are 133 MH Pentiums, 32 MB RAM, 20 MB hard drive space, Windows 95 or better, CD ROM drive, and Y2K compliance. Ships with Internet capability will be able to more fully utilize the AUTOLOG system's web-based application to transfer data and receive system upgrades.","The AUTOLOG format is similar to that of the hardcopy logbook, thus easing transition and providing an intuitive operating environment for logbook custodians. AUTOLOG requires data to be entered only once and eliminates the need for redundant independent record keeping by ship's force and the NSWCCD. AUTOLOG modifies and reduces ship's force data recording and reporting requirements (e.g., automating GGTB 4 compliance), and it is estimated that AUTOLOG will reduce these efforts by two-thirds on ship's force and by one-half on the NAVSEA side.","The MGTIS's AUTOLOG makes data more timely, flexible and reliable. Moreover, the AUTOLOG is more accessible with its data-view access through queries, reports and OBDC link capability, thus facilitating data retrieval, summary and analysis. The AUTOLOG is expected to result in a cost avoidance of 400K per year in NAVSEA database management and operating costs alone. The AUTOLOG puts all of the main data players on the same playing field, using one database, albeit different interface applications. Included among the main data players are repair and overhaul facilities, MGT logistics control activities, and shipbuilding contractors. Future enhancements to the AUTOLOG, as embodied for U.S. implementation, may include an ICAS link to electronically fed operating data (either directly to the AUTOLOG or the main database) and\/or a link to the 3-M system.","The embodiment of the inventive AUTOLOG that is presently being instituted by the U.S. Navy is described in detail hereinbelow with reference to the drawings and appendices. In accordance therewith, upon the selection of a logbook category, a pull-down window for each section of the logbook category appears. When clicked, a section window opens to pages that are very similar to the hardcopy pages. As each section window opens, new information can be added to the service record via an \u201cAdd\u201d function located at the bottom of the page. An existing entry can be edited by double-clicking such entry. \u201cMaintenance Options\u201d is where logbooks and\/or new engines can be added. Once an entry is saved, it can be deleted or be modified. The edit-and-add screen remains the same.","A preferred embodiment of AUTOLOG (such as that which is described in detail hereinbelow) is, in essence, a data-entry and data-tracking FoxPro application. The present invention's AUTOLOG typically is a run time FoxPro engineering application, providing all the application programming needed to track engine maintenance and repair, logistic, inspection and operating data through a user interface. The minimum operating requirements for the ships are a computer with 133 MHz Pentium, 32 MB RAM, 20 MB hard drive space, Windows 95 or better, and CD ROM drive. The AUTOLOG has built-in forms that present database interface between the user and the data tables and programs. The forms present a more user-friendly way to move data in and out of tables. They allow multiple processing and have been built with the end-user in mind. They are formatted to be familiar to current, hardcopy logbook custodians. The form interface is segmented to track different types of gas turbine data similarly as are the hardcopy logbooks. However, the entire AUTOLOG \u201clogbook,\u201d with all subsections, is accessible from one screen so that the user is able to select any of the subsections from the same screen.","The present invention's user interface is provided through specifically programmed and designed forms. Engine data is posted into various forms with the user tabbing between forms for viewing and editing. Different types of data are posted to different forms. Different data edit and input capabilities are provided on the forms with drop downs in some case, allowing choices of specific update data or choice of logical operators or values. Between different fields on the various forms the types of data may vary, with some restricted to particular data types and choices or some open ended to allow any data input. Certain fields require input and will produce a programmed error message if left blank. A user can select a record on the main form for edit by simply double clicking with the left mouse key. This generates a secondary form to allow data changes. An action button is available on all the main forms to allow for adding of new records. Hitting the action button generates the same secondary form the edit did, but with no returned data, thereby allowing the input of new data. Hitting an action button runs programming to carry out the defined action.","The present invention's programming runs on various levels of data update, depending on the action selected and the form being used. The programming may re-index, recalculate totals, append records, copy records, etc. These forms then are a user-friendly way to move data in and out of tables and allow multiple processing. They are segmented to allow for different types of data to be accessed separately so as not to cause confusion. Though technical and specific in the type of data these forms track, they are also broad and comprehensive in the level and variety of engine operating data handled, and could therefore have broader commercial applications, as well. Of great importance in inventive practice are the applications startup procedure programs and the data import and export programs. The export programming extracts all data table updates based on the last export run date and the dates of the record updates or additions and then extracts the new records into a specified format. The built-in File Transfer Protocol (FTP) Utility then allows the user to transmit the update file to a directory on the main data server. There are different levels of file import functionality, each with its own programming, with the main one being the ability to import new engine data.","According to a recent upgrade to the U.S. Navy's AUTOLOG embodiment, a copy-and-paste operation, reduces input effort on a particular form by allowing updates for an engine to carry over to the engine companion assembly, if wanted, and having any newly entered data in the Technical Directives to carry over to all like engines, if wanted. The upgrade further enables AUTOLOG to automatically calculate hours remaining on time-directed inspections, and flag the operator on remaining hours when the application is executed. In addition, the new AUTOLOG upgrade available delivers a maintenance capability enabling the operator to make data file backups and import them if the AUTOLOG needs to be reinstalled. An important capability is the ability to import new engine data that will simply replace the data for the old engine. It is an import and replace utility that writes over old data and re-indexes.","The inventive programs to process the user input represent critical aspects of the present invention's AUTOLOG. In some cases, non-user entered data is added to the tables, calculations are performed, data is transformed, coding is added, updated data (e.g., updated dates) are added, etc. Of primary importance are the startup procedure programs and the data export and import programs. The import\/export programs link the application indirectly to a main database. They minimize user effort with the ability to update tables directly from an outside source and make data available effortlessly beyond the bounds of the application itself, in a format directly readable into the U.S. Navy (e.g., NAVSEA) database.","The inventive AUTOLOG program was designed by the inventor using Microsoft Visual FoxPro. AUTOLOG is a database application that collects data entered into the MGTEL\/MGTESR logbooks. This data can then be exported to a master database and can easily be accessed by other necessary applications. Also, this allows logbook data to be entered directly into the master database (e.g., by naval depot organizations, etc.), from which it can be exported and formatted in a manner allowing direct import of Engine Data, Ship Data and Data Backups into an \u201cAutoLog\u201d or Automated Logbook. The AUTOLOG embodiment currently practiced by the U.S. Navy essentially represents an automated MGTEL (Marine Gas Turbine Equipment Logbook), which contains official MGTESR (Marine Gas Turbine Equipment Service Records) for each main propulsion and auxiliary power engine.","The following article, incorporated herein by reference, was authored by the inventor and appears in a U.S. Navy periodical: Hilferty, Edward L., \u201cAUTOLOG 2000 Revolutionizes the Maintenance of Gas Turbine Logbooks,\u201d Wavelengths, Naval Surface Warfare Center, Carderock Division, December 1999, page 31. Also incorporated herein by reference is the following conference paper authored by the inventor: Hilferty, Edward L., \u201cCondition Based Maintenance, Life Cycle Management, and AUTOLOG,\u201d 11th International Conference on Computer Applications in Shipbuilding (ICCAS 2002), Malmoe, Sweden, 9-12 Sep. 2002.","The U.S. Navy is in the process of moving toward \u201ccondition-based\u201d (or \u201ccondition-directed\u201d) maintenance. In furtherance of condition-based maintenance goals, the inventive AUTOLOG is expected to play an important role in terms of providing automated reasoning and decision-making models for data tracking such as that which involves the monitoring of equipment operations. The objective of the U.S. Navy's \u201cCondition Based Maintenance\u201d (CBM) is to transform from time-directed preventive maintenance to condition-directed maintenance. It is hoped that this transition will optimize readiness while reducing maintenance and manning requirements.","The underlying concept of CBM is that the utilization of sensors, algorithms and automated reasoning and decision-making models to monitor equipment operations will provide critical analyses to operators that will help prevent impending failure. \u201cRed flags\u201d will appear to operators so that maintenance efforts can focus limited resources on areas most needed to ensure safety and mission readiness, while at the same time minimizing operating costs, labor and risk of mission-degrading failure. It is anticipated, at optimal capacity, CBM technology will: detect and classify impending failures; predict the remaining life cycle of equipment; interface with the control system to take action; provide support in performing corrective maintenance; provide data to life cycle management activities; and, update logistics support system. The expectation is that significant improvements in safety, reliability and affordability will ensue.","Incorporated herein by reference is an updated version of the (hereinafter referred to as the \u201c\u201d), containing 133 pages, issued to Navy personnel for Navy use by the Department of the Navy, Naval Sea Systems Command (NAVSEA), Naval Surface Warfare Center Carderock Division (NSWCCD), Auxiliary Gas Turbine Branch, Code 935. The was written and prepared by the present inventor, Edward L. Hilferty, an engineering statistician employed by NSWCCD in Code 9354 at the Philadelphia location. The is available on the Internet at the U.S. Navy Marine Gas Turbines website, www.navygasturbines.org. The Autolog User's Guide may be found by clicking, as appropriate, starting on the main page, http:\/\/www.navygasturbines.org\/index.html; or by going directly to http:\/\/www.navygasturbines.org\/prognewsmgt.asp and clicking, as appropriate; or by going directly to http:\/\/www.navygasturbines.org\/pdf\/UGAutolog.pdf. A previous version of the (the version thereof as originally appeared on the Internet in 2002) is included, as a print copy (120 pages), in the aforementioned U.S. Provisional Application No. 60\/434,598, filed 18 Dec. 2002, which is incorporated herein by reference.","Incorporated herein by reference is an updated version of the , containing 58 pages, issued to Navy personnel for Navy use by the Department of the Navy, Naval Sea Systems Command (NAVSEA), Naval Surface Warfare Center Carderock Division (NSWCCD), Auxiliary Gas Turbine Branch, Code 935. The Autolog Training Guide was written and prepared by the present inventor, Edward L. Hilferty. The is available on the Internet at the U.S. Navy Marine Gas Turbines website, www.navygasturbines.org. The may be found by clicking, as appropriate, starting on the main page, http:\/\/www.navygasturbines.org\/index.html; or by going directly to http:\/\/www.navygasturbines.org\/prognewsmgt.asp and clicking, as appropriate; or by going directly to http:\/\/www.navygasturbines.org\/autotrain.pdf. A previous version of the (the version thereof as originally appeared on the Internet in 2002) is included, as a black-and-white (grayscale) printout copy (58 pages), in the aforementioned U.S. Provisional Application No. 60\/434,598, filed 18 Dec. 2002, which is incorporated herein by reference.","Other objects, advantages and features of this invention will become apparent from the following detailed description of the invention when considered in conjunction with the accompanying drawings.","Reference now being made to the figures, the AUTOLOG format is similar to a hardcopy logbook in both layout and data tracked, thereby easing transition and providing an intuitive operating environment for logbook custodians. Once the AUTOLOG is opened, the user uses a drop down to select an engine to work on, and then uses an action button to retrieve all the data for the engine. This data is then posted into various forms for viewing and editing. Different types of data are posted to different forms. The user tabs between these forms that were designed and built to track specific engine operating data. There are separate forms to track engine operating hours and starts, engine installation history, technical directive accomplishment, etc. The types of data my be restricted to particular data types and choices or may be open ended to allow any data input. For example, the operating hour form requires that a date be input in a specific date format, the monthly hours and starts be input in numeric format, an engine status code be selected from a closed list of choices displayed in a drop down, and also provides a narrative text field for user input of any alpha-numeric text desired.","Certain fields require input and will produce a programmed error message if left blank. A user can select a record on the form for edit by simply double clicking with the left mouse key. This generates a secondary form to allow data changes. An action button is available on all the forms to allow for adding of new records. Hitting the action button generates the same secondary form the edit did, but with no returned data, thereby allowing the input of new data. Hitting an action button runs programming to carry out the defined action. Hitting a save button after adding new data, for example, will run programming that will append the record to the appropriate data table, add the necessary record identification number, add a new record input date, make the required hierarchical record linkage, update the index files, and so on. In some cases the data input will trigger even more programming. For example, adding a new monthly hours record will trigger multiple level programming that will both add the same newly input data to the engine's companion assembly and readjust the engine hour and start totals for both the engine and its companion assembly, thereby limiting the data input requirement for the user. These forms thus are a user-friendly way to move data in and out of tables and allow multiple processing. They are segmented to allow for different types of data to be accessed separately's as not to cause confusion. Though technical and specific in the type of data these forms track, they are also broad and comprehensive in the level and variety of engine operating data handled, and could therefore have broader commercial applications, as well.","The applications startup procedure programs and the data import and export programs are crucial. The export programming extracts all data table updates based on the last export run date and the dates of the record updates or additions, and then extracts the new records into a specified format. The built-in File Transfer Protocol (FTP) Utility then allows the user to transmit the update file to a directory on the MGTIS server. There are different levels of file import functionality, each with its own programming, with the main one being the ability to import new engine data. Once the operator hits the \u201cMaintenance\u201d and \u201cAdd Engine\u201d action buttons, he\/she uses a drop down to select the old engine to be replaced and hits the \u201cReplace\u201d action button. The program will display a screen for him to specify the location of the new data. Then, hitting the next \u201cReplace\u201d action button on this screen will activate a program to overwrite all the old designated engine data will the new data. The index files must be adjusted and are done so automatically.","The inventive AUTOLOG, as presently implemented by the U.S. Navy, requires data to be entered only once by the ship and then transmitted to NSWC (Naval Surface Warfare Center), and eliminates the need for redundant independent record keeping by ship's force and NSWC. It modifies and reduces ship's force data recording and reporting requirements, and is estimated to reduce this effort on ship's force by two-thirds and by one-half on the NSWC side. The estimated savings by ship's force is due to automated processing at various levels of the AUTOLOG. For example, hours and starts recorded on one engine can be carried over automatically to the companion assembly. The custodian will no longer be required to do math by summing hours and starts for a completed page, generate new engine totals, and then carry them over to a new page. He or she will no longer have to make and validate hour\/start entries in the companion assembly, unless there is a removal, nor make extensive corrections to the monthly or total values based on feedback from the NSWC.","A new upgrade available within the U.S. Navy reduces the effort in recording Technical Directives (TDs) by allowing updates for an engine to carry over to the companion assembly if wanted and having newly entered TDs carry over to all like engines if wanted, reducing the entry effort in this section by up to seven-eighths. The upgrade further enables AUTOLOG to automatically calculate hours remaining on special inspections (time directed) and flag the operator on remaining hours. The total since installation time will be calculated automatically on all selected components of the engine that are currently tracked in the log records, and eliminates the need to have data cards for each component, which were very often incomplete, inaccurate, or missing all together and thereby necessitated reconstruction or correction by ship's force. These Selected Component Record cards, which followed a component, were particularly burdensome to maintain by the fleet. With the component data tracked in a database and only updated at installation or removal by ship's force, these cards could be eliminated. In addition, some of the data previously maintained in the hard copy records (for example, blade serial numbers) will no longer by tracked in the AUTOLOG, but rather directly in the MGTIS by other activities. Further, having data in an electronic format that can be easily transmitted to the NSWC eliminates the need altogether of the ship's force having to extract log data on a quarterly basis from their hard copy log records to reconstruct six months of operating, TD, and configuration change data into a message format (General Gas Turbine Bulletin #4, GGTB4) and sending it to the NSWC.","Electronic data transmitted to the NSWC for review and then direct download into the MGTIS eliminates the need for the NSWC to process the message data and then convert and input the data into two different mainframe databases. This effort was labor intensive and redundant to some degree. There would be input errors and discrepancies between the databases causing some confusion. The databases were not linked and not directly accessible to any other activities, very expensive to house and maintain, particularly database management support at the mainframe locations, and very difficult to institute programmatic changes in either database management or to satisfy evolving customer needs.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 20","FIG. 21","FIG. 22","FIG. 22"]},"As previously described herein, the data extracted by AUTOLOG are all of the updates input since the last time an update file was created. This would include any updates from all sections of the AUTOLOG. As such, not only does it provide data in a readily downloadable electronic format, but provides much more data than previously available, especially the Miscellaneous History section that provides narrative maintenance information, with little effort by ship's force in preparing and transmitting the data.","In addition, the U.S. Navy's new AUTOLOG upgrade delivers a maintenance capability enabling the operator to make data file backups and import them if the AUTOLOG needs to be reinstalled. They can create a new \u201clog book\u201d within AUTOLOG for a new engine if they desire. The can import an entirely new AUTOLOG if need be. A critical capability is the ability to import new engine data that will simply replace the data for the old engine. It's a simple import and replace function whereby the operator simply identifies the unit to be replaced, the source of the new engine data, and then uses the import utility to replace the old data. This process not only eliminates manual effort of data input, but also helps maintain data reliability. This new engine data is available from a number of sources. A CD containing the engine data should accompany the unit in the engine can. In addition, the data can be e-mailed to the ship if need be, or can be made available directly from a web site for download.","Upgrades to the AUTOLOG operating system can be accomplished by having ship's \u201ccopy\u201d and \u201cpaste\u201d upgrade applications into their AUTOLOG directory that replaces the older version. AUTOLOG received SPAWAR certification and CINCFLT endorsement with distribution and implementation promulgated in GGTB #3 and a CINCFLT endorsed Fielding Plan. To date, the main implementation issue encountered involves unstable IT platforms on some of the ships. This has caused loss of data, and in some cases loss of AUTOLOG functionality. Though the new upgrade backup and recovery capability does in part mitigate this, it does require user interface. It should be noted that the fleet, due to limitations on Internet access by the fleet on a 24\/7 basis, required a stand-alone application. It was required that each ship maintain a log record in some format on the ship without any requirement for outside access.","The present invention's AUTOLOG is the foundation of the new MGTIS system, which is itself critical to the performance of life cycle management functions in an operating environment of declining budgets, an aging gas turbine population, parts obsolescence, escalating program costs, fleet downsizing and reduced support infrastructure, over-worked ships personnel, and the need to make ships \u201csmarter.\u201d The new MGTIS system includes data support activities such as fleet, new construction, overhaul and logistics, and reports and queries on line. The data tracked in AUTOLOG is the same data tracked in the original, hardcopy MGTELs and encompasses, in essence, operating times, logistic changes, technical directive compliance for modifications and inspections, and repair and maintenance data.","The AUTOLOG lists all of the engines and ancillary sections on the ship. Once a particular unit is selected, the operator is taken to the log records for the selected unit. The first two sections, Service Record and Custody and Transfer, track the installation and custodial history of the unit. A new feature of the AUTOLOG Custody and Transfer section is the ability of operators to select codes indicating the reason for an engine removal. This would supplement information provided in the Miscellaneous History section described hereinbelow.","The Operating Log section tracks the monthly hours and starts on the unit, as well as notes any unusual operating condition(s). The Inspection Record tracks all special (time base or bulletin mandate) or conditional (event driven) inspections of the engine. This basically is inspection identification data such as bulletin number, activity, dates started and completed, and, if applicable, engine hours at which the inspection was done and when it is next due. Results of the inspections are recorded in the Miscellaneous History section. The Record of Rework section provides basic information (dates and activities) of engine repair work. The basic nature of the repair is recorded in the Miscellaneous History section.","The Technical Directives (TDs) section records the status of all configuration change requirements or mandated inspections. Technical Directives are used when an action required affects an integral part of the Marine Gas Turbine Equipment. It is critical to know if and when such mandated changes or inspections are done. Heavily involved in this are safety, performance; logistics, and costs issues. For example, some TDs have an urgent category classification because safety may be an issue. In addition, knowing how many engines still need a TD accomplished enables a more accurate count on the number of kits that will need to be purchased and stocked in order to finish the installation across the fleet. This is a big cost issue. In this section is recorded TD type, status, category, TD number, dates, and a verifying name.","The Selected Component section tracks various components on an engine, such as starters, fuel controls, PLA actuators, etc. It records serial numbers, part numbers, dates, engine hours at installation and removal, and removal causes. The Miscellaneous History section is one of the most critical sections, and one that the life cycle managers did not previously have ready access to. It records, in narrative format, supporting data\/history of operational events, maintenance actions, inspections, or troubleshooting activities. It serves to record information for which no other place has been provided. Specifically, its to record details and circumstances of significant engine or component damage, abnormal operating conditions, details of troubleshooting and repairs, unscheduled or non-routine component replacement, inspection results, special test data, yard periods, engine lay-up procedures, etc.","The MGTIS stores data in an ORACLE 8.0.5 database and is edited through a Java Applet Interface. The applet uses swing components and retrieves and sends data through a JDBC thin client connection. Reports are generated on the web through use of Pearl scripts accessing the MGTIS. While direct access to the MGTIS is restricted to needed update activities, access to the reports on a separate query site will make the gas turbine data available to a broader gas turbine community. MGTIS not only makes data more timely, flexible, and reliable, it is more accessible with data view access through queries, reports, and OBDC link capability, for data retrieval, summary, and analysis. It is expected to result in a cost avoidance of 400K per year in NSWC database management and operating costs alone. It puts all the main data players on the same playing field, using one database, though different interface applications. Included are repair facilities, MGT logistics control activities, and ship building contractors.","The success of AUTOLOG, as practiced by the U.S. Navy, will depend on AUTOLOG's ability to transmit data reliably and easily from the ship to the shore support life cycle engineers, and the NSWC's ability to provide the ship AUTOLOG updates when the ship receives a new gas turbine or new maintenance requirements. The data transmittal loop is shown in . While AUTOLOG provides neither diagnostic nor prognostic analyses back to the operator based on embedded algorithms, nor eliminates the manually intensive process of ship force personnel monitoring the gas turbines and taking necessary corrective actions, AUTOLOG does enhance the process of CBM performance by automating large segments of data and making it more readily and easily analyzable. It is noted that CBM works on a number of levels, including monitoring, detecting, diagnosis, prognosis, prescribing and executing. But the complementary capability of providing data to all of the necessary personnel cannot, and must not, be overlooked.","Though intuitive, it must be emphasized that the data provided must be in a useable format. Often in the past, gas turbine monitored data has been in a raw data format that, in-and-of itself, was not useful. Part of AUTOLOG's utility lies in providing more real-time CBM data to a broad base of support activities in an easily understandable and familiar format. This data, besides providing more immediate feedback to the life cycle engineers on the gas turbine condition, will allow much easier metrics analyses than the current, multiple data source methods\u2014such analyses being necessary to assemble all the data that is also recorded in the logbooks. This is an extremely tedious time and labor-intensive effort but produces vital information. It allows trending and identification of emergent issues.","The U.S. Navy's AUTOLOG conversion involved no change in data tracking requirements and no new hardware requirements. Training requirements were minimal for personnel familiar with the hard copy MGTEL. The computerized format and automatic update features within AUTOLOG have made logbook update less labor-intensive. The update file generation and file transmission features enable an almost effortless capability to provide all AUTOLOG updates on a regular basis. Though much less labor-intensive than previous logbook maintenance, the AUTOLOG currently requires manual data input. While, as stated hereinabove, some of the update process is automatic, the very nature of the type of data recorded in other sections precludes an easy automatic update procedure.","For example, as previously noted herein, in the Miscellaneous History section of the AUTOLOG is recorded in narrative form all results of significant engine\/component damage or abnormal characteristics, maintenance actions, trouble shooting, inspection results, failure or downtime causes, operational events, unscheduled and non-routine component replacement, and, in general, anything else related to the gas turbine for which no other place has been provided. Similarly, in the Technical Directive section is recorded compliance with the directives that may or may not involve a configuration change to the equipment itself. Clearly, however, some of the manually recorded data is amenable to automation; the Operating Log section is a prime example of this. Recorded in the Operating section are operating hours and starts for the gas turbine based on specified criteria for determining a successful start.","The present invention's AUTOLOG application as embodied for U.S. Navy use\u2014a preferred embodiment of the present invention's AUTOLOG\u2014is more specifically described hereinbelow. Provided for certain aspects of the present invention are samples of the AUTOLOG program code. Provided for other aspects of the present invention are the entire AUTOLOG programs pertaining thereto. In any event, for each important aspect of the AUTOLOG, the programming logic is provided hereinbelow. The following \u201ctable of contents,\u201d which lists headings, subheadings and subsubheadings, represents the organizational scheme of the remaining portion of the instant detailed description:","1.0. Main Form","2.0. Navigation to Data Editing Screens","3.0. Performing Maintenance\n\n","4.0. Generating Reports","5.0. Editing Module and Engine Data\n\n","Referring now to , the present invention's AUTOLOG program opens with a main form entitled \u201cAutomated Logbook\u201d from which the user can navigate to desired data editing and maintenance tasks. Displayed on this form is the name, uic and hull information about the ship for which data has been loaded into the program. These fields are displayed in read-only text boxes, and the information is obtained from the one record in the main_location table.","It is noted that the AUTOLOG actually begins by executing the Logbook.prg. This program is responsible for declaring public variables and setting their default values, error handling, and starting the entryform.scx (the first form in AUTOLOG), which prompts the user for a user name and password. Reference is hereby made to the Computer Program Listing Appendix, wherein the Logbook.prg program is presented as a txt file entitled \u201cautolog.logbook.prg.\u201d","2.0. Navigation to Data Editing Screens","As shown in , located on the Automated Logbook Form, directly beneath ship data fields, is a drop-down box labeled \u201cPick a Log Book,\u201d where specific logbooks can be chosen for editing. The dropdown box is populated from the comptp12 table and displays ciasn, nomen, and loc information for each engine and module on the ship. After making a module or engine selection from the dropdown box, the user clicks on the \u201cGO\u201d button to the right of the dropdown box to open the module or the engine information forms for editing. This is accomplished by populating the temporary table (section) with the desired module or engine information and then opening forms modbook or bigbook4 for modules or engines respectively. Further explanation in this regard is provided hereinbelow in the \u201cEditing Module and Engine Data\u201d section.","3.0. Performing Maintenance","Editing and adding information specific to a logbook must be done at the Automated Logbook Form level for each Module and Engine so information will trickle down to all of the associated tables. Similarly, information that is imported into or exported from the database is also done at the Automated Logbook Form level. It is done at this level because the import and export procedures are only implemented for entire database export and import, backup procedures, and engine import. Due to these constraints, maintenance options are available by clicking on the \u201cMaintenance\u201d button on the bottom left-hand corner of the Automated Logbook Form shown in . Clicking on the Maintenance button will open the Maintenance Options dialog box. With reference to , the Maintenance Options dialog box contains six buttons by which all features described above are executed.","3.1. Send File Option","Clicking on the \u201cSend File\u201d button opens an external File Transfer Protocol (FTP) program that performs an upload of the user specified file to an FTP site. AUTOLOG allows the user to create a text file containing user added or modified data. To create an export file, the user must, in order: (1) click \u201cMaintenance\u201d button on the main form; (2) click \u201cSend file\u201d; (3) click \u201cExport file\u201d; (4) type the exact location and name of the file he\/she wants to be created; finally, (5) click \u201cExport.\u201d","Step (3) starts the output.prg program that is responsible for obtaining the file name and location (Steps 4 and 5, above) and creating the export file. To avoid exporting of the same data multiple times, AUTOLOG stores the last export date (actually the day before the last export date) in the table exportdate.dbf. This date is updated if the user completes step (5) above and the file is successfully created, in which case AUTOLOG executes:","sele exportdate","replace exportdate.date with date( )-1","The actual exporting of records from all tables is done in the same manner: (1) create a temporary table containing user added or modified records for this table; (2) write the header for this table to the export file; (3) go through all records in the temporary table; (4) parse and assign them to a string variable and then write that created string into the export file. A code example is set forth in and . The user is notified via a message box when download is complete.","3.2. Edit Log Books Option","With reference to , clicking on the \u201cEdit Log Books\u201d button opens the \u201cLogbook Edit Screen.\u201d The screen opens and displays the values for the first Logbook listed in the \u201cPick a Log Book\u201d dropdown box from the Automated Logbook Form. Navigation through the current Log Books is conducted by clicking on the \u201cNext\u201d button to view the next Log Book (from top to bottom) in the aforementioned dropdown on the Automated Logbook Form. The Logbook Edit Screen allows the user to change information with regard to each Log Book.","Users are permitted to change the \u201cAsn\u201d, \u201cLoc\u201d and \u201cMsn\u201d text boxes. These fields update to the comptp12 table to fields asn, loc and msn respectively. Also, when the Asn value changes, the Ciasn value will change to the current ci from the comptp12 table concatenated with the newly changed asn value. If the Log Book is for an engine, the comp_sn will also be updated to the new Asn value. Read-only text boxes (\u201cCiasn\u201d, \u201cComp_sn\u201d, \u201cUic\u201d, \u201cNomen\u201d, \u201cEngine\u201d and \u201cTname\u201d are all populated from the current field of the Comptp12 table of the same name. The \u201cSave\u201d button saves changes made to the current Log Book, the \u201cReset\u201d button resets the form to the original values for the current Log Book, and the \u201cExit\u201d button closes the Logbook Edit Screen form.","3.3. Add to Log Book Option","With reference to , clicking on the \u201cAdd to Log Book\u201d button opens the Logbook Add Screen. The fields are the same as for the \u201cEdit Log Book\u201d Screen (see 3.2. Edit Log Books Option) with the exception of two dropdown boxes for ci (populated with the ci field from the citemp table) and the corresponding tan selection (populated with fields tan, tname, tan_class and engine from the temptan table). The tan dropdown box is directly linked to the ci dropdown, and as such, ci must be chosen before the tan dropdown is populated.","After a tan is chosen, the fields (tan_record, tname, nomen, engine, tan_class, comp_type, icmc, tan, main_recor, main_record, uic and ciasn) are populated in the comptp12 table and their corresponding text boxes (if they are represented on the form) are updated to reflect their values. An asn must also be entered before saving the Log Book, it will populate both the asn and comp_sn fields of the comptp12 table and their corresponding text boxes on the form. The \u201cSave\u201d button saves changes made to the newly added Log Book, the \u201cReset\u201d button resets the form, and the \u201cExit\u201d button closes the \u201cLogbook Add Screen\u201d form.","3.4. Receive File Option","Clicking on the \u201cReceive File\u201d button opens an external Receive AUTOLOG Files program that performs a download of a user specified file from an FTP site.","The import program allows the user to append data from any delimited ASCII file into a predefined AUTOLOG database file. The intent is to read in memo field data, but the program will also address files with varying delimiters. This program assumes that the target database file is currently in use, used exclusively, and in the current work area.","To create an import file, the user must complete these steps in order: (1) click \u201cMaintenance\u201d button on the main form; (2) click \u201cReceive file\u201d; (3) click \u201cImport file\u201d; (4) type the exact location and name of the file he\/she wants to be imported; finally, (5) click \u201cImport.\u201d","If the user completes step (5) above and the file is available to read, the AUTOLOG executes the import.prg program which is responsible for deleting data currently in database tables, reading data from import file and writing it to the tables.","The actual importing of records is done in the following manner:","(1) Deleting existing records from database tables:","use comptp12 exclusive","delete from comptp12","pack","(2) Lists tables data could be imported into:","IF CurrentTable=\u201cComptp6\u201d or CurrentTable=\u201cRework\u201d or CurrentTable=\u201cTransfer\u201d or CurrentTable=\u201cInspect\u201d or CurrentTable=\u201cEcptd Inst\u201d or CurrentTable=\u201cMischist\u201d or CurrentTable=\u201cEng_Components\u201d or CurrentTable=\u201cEng0 phours\u201d or CurrentTable=\u201cComptp3\u201d or CurrentTable=\u201cComptp12\u201d or CurrentTable=\u201cMain Location\u201d or CurrentTable=\u201cServrec\u201d or CurrentTable=\u201cComptp7\u201d or CurrentTable=\u201cComptp7da\u201d","Reference is now made to , which illustrates the reading of records from the import file and the appending of them to an appropriate table.","After finishing the import of the data, the import.prg exits and a message box notifies the user that the user must restart the AUTOLOG program, allowing the database to close and release all forms.","3.5. Edit Ship Option","With reference to , clicking on the \u201cEdit Ship\u201d button opens the \u201cEdit Ship\u201d dialog box. Here the user can change the name, uic, and hull that appear on the Automated Logbook form (See 1.0. Main Form; ) and are stored in the main_location table.","3.6. Add Engine Option","With reference to , clicking on the \u201cAdd Engine\u201d button opens a \u201cReplace Engine\u201d dialog box. Using the dropdown box, the user must select an engine to replace, and then click on the \u201cReplace\u201d button. Clicking on the \u201cReplace\u201d button, prompts the user to verify they have a file to import, and gives them a chance to cancel. If they choose to continue, they are shown a file selection dialog box to choose their engine import file. After a file is chosen the import takes place.","The Import Engine (engimportexp.prg) program allows users to replace existing engines as well as the data for them with information for a new engine and its associated records. In order to do so, the program deletes all the records for the selected engine to be replaced and appends data for the new engine into a predefined AUTOLOG database file. The data for the new engine is contained in a delimited ASCII file specified by the user. This is the same as the Import.prg program.","Once the user hits the \u201cImport\u201d button, the program checks for the existence of the file chosen by the user, and if it exists it executes the engimportexp.prg program. The engimportexp.prg program is responsible for deleting data currently in the database tables for the old engine the user has selected to replace, then reading the data from the import file and putting it in the database. After finishing the importing of the data, the engimportexp.prg program exits and creates a message box informing the user that they must restart the AUTOLOG program to allow the database to close and release all forms.","The actual importing of records from the Oracle database, as well as the parsing and creation of import files (whether for an engine or a ship), is performed by PERL programs.","3.7. Generating Backups","AUTOLOG allows the user to create a text backup file containing all of the AUTOLOG data. To create a backup file the user should, in order: (1) click the \u201cMaintenance\u201d button on the main form; (2) click \u201cSend File\u201d; (3) click \u201cMake Backup File\u201d; (4) type the location and name of the file that he\/she wants the backup data written to; finally, (5) click \u201cExport.\u201d","Step (3) starts the bupout.prg program, which is very similar in form to the output.prg program used for export of user entered\/modified data. The output of the bupout.prg file is formatted so it can be imported straight back into AUTOLOG, while the output.prg file is formatted for PERL scripts for importing into the Oracle database. The importing of backed-up data is performed by the import.prg program. These two programs are shown in txt format, designated \u201cautolog.bupout.prg\u201d and \u201cautolog.import.prg,\u201d respectively, in the Computer Program Listing Appendix.","4.0. Generating Reports","Reports are generated for data stored within the AUTOLOG program by clicking on the \u201cReports\u201d button located to the right of the \u201cMaintenance\u201d button on the bottom of the Automated Logbook form shown in . With reference to , clicking on the Reports button opens the \u201cShip Reports\u201d dialog box.",{"@attributes":{"id":"p-0114","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Report Subject","FoxPro Report File"]},{"entry":[{},"Service Records","serv.frx"]},{"entry":[{},"Inspection Records","inspection.frx"]},{"entry":[{},"Rework Records","rework.frx"]},{"entry":[{},"Technical Directives","technical.frx"]},{"entry":[{},"Miscellaneous History Records","misc.frx"]},{"entry":[{},"Selected (sub) Component","selectedcomp.frx"]},{"entry":[{},"Records",{}]},{"entry":[{},"Custody and Transfer Records","transfer.frx"]},{"entry":[{},"Operating Records","operating.frx"]},{"entry":[{},"Compressor Rotor Records","compressor.frx"]},{"entry":[{},"Turbine Rotor Records","turbine.frx"]},{"entry":[{},"Abnormal Temperature and\/or","Turbine_abn.frx"]},{"entry":[{},"Overseed Data"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Prior to generating the report, the user must select a Module or Engine from the \u201cPlease Select Component\u201d dropdown box, then choose a report subject from the \u201cPlease Select Report Subject\u201d dropdown box, and finally select either the \u201cAll Component(s) Data\u201d option or a date range. Table 1, above, provides a listing of Report Subjects and associated FoxPro report files. Once these steps are taken, the report may be either shown in Print Preview by clicking the \u201cReport\u201d button, or saved to a file by clicking the \u201cDownload\u201d button.","5.0. Editing Module and Engine Data","With reference to , the Module and Engine edit forms are reached by choosing a module or engine and clicking \u201cGO\u201d on the Automated Logbook form shown in . These edit forms are also used to edit data associated with each module or engine (remember module and engine serial numbers, and tans are set on one of the Logbook Edit forms (See 3.2. Edit Log Books Option; 3.3. Add to Log Book Option). Data associated with a module is grouped by type and listed separately under tabs (in a tabular section). As shown in , this controls the display portion of the bottom of the form.","As discussed hereinabove (See 3.0. Performing Maintenance), when the \u201cGO\u201d button is clicked, the section table is populated with the appropriate data from the comptp12 table for the selected module or engine. As such, the edit forms are based on this record from the section table and when the edit form opens the Module or Engine tab is the default selection displaying CI, Engine, Serial Number and Module information on the tab section of the form; these fields are read-only and update to the ci, engine, comp_sn, and msn or asn of the section table respectively.","Also, visible regardless of the tab selected on the bottom portion of the form are \u201cEquipment Name,\u201d \u201cEquipment Module Type,\u201d \u201cPosition\u201d and \u201cFull Logbook Number.\u201d These fields are across the top portion of the form and are read-only. They update to the nomen, engine, loc and ciasn fields of the section table, respectively. The remaining tabs on the Module edit form associate records from their respective table to the section table by each table's ciasn field.","5.1. Module\/Engine Tabular Sections","Most tabs of the Edit Form display a section that consists of two controls. The only exception is the Operating Hours section, which is only available on the Engine edit form (See 5.1.1. Operating Log Tab). The first control is a scrolling grid that contains records from the table containing the data for that tab section. The second control is an \u201cAdd . . . Record\u201d button (appropriately named for each section respectively). The grid is populated with data from the appropriate table for each respective section where records match by ciasn with the current record contained in the section table (See above in 5.0. Editing Module and Engine Data). Double clicking on any field of a record in the grid opens the edit form for that record and tab section. Similarly, clicking the \u201cAdd . . . Record\u201d appends a blank record to the table for that section and then opens the appropriate edit form (See 5.2. Add and Edit Module\/Engine Data Forms). Refer to Table 2, below, for descriptions of tabular sections, tables and field listings for their grids.",{"@attributes":{"id":"p-0120","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Tabular Title","Table","Grid Field Titles","Table Fields to Grid Titles"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Service Record","Servrec","Hull Type","hulltype"]},{"entry":[{},{},"Date","ycompinstd"]},{"entry":[{},{},"By (Activity)","by"]},{"entry":["Inspection Record","Ins","Special Conditions","sp"]},{"entry":[{},{},"Authority","au"]},{"entry":[{},{},"Date Commenced","dtcm"]},{"entry":[{},{},"Date Completed","dtcp"]},{"entry":[{},{},"Activity","activit"]},{"entry":[{},{},"Verified By","signat"]},{"entry":[{},{},"Type of Inspection","desc"]},{"entry":[{},{},"TSN","tsn"]},{"entry":[{},{},"Next Due","nextdue"]},{"entry":["Record of Rework","rework","Date Inducted","Ydt_ind"]},{"entry":[{},{},"Date Completed","Ydt_comp"]},{"entry":[{},{},"Description","Desc"]},{"entry":[{},{},"Authorization","Authori"]},{"entry":[{},{},"Activity","Activit"]},{"entry":[{},{},"Verified By","Signat"]},{"entry":["Technical Directives","Tds","Type","Tp"]},{"entry":[{},{},"TdNo","Nm"]},{"entry":[{},{},"Title","Tt"]},{"entry":[{},{},"Status","Status _cod"]},{"entry":[{},{},"Category","Category_td"]},{"entry":[{},{},"Activity","Activit"]},{"entry":[{},{},"Install. Date","Dt"]},{"entry":[{},{},"Verified By","Signat"]},{"entry":["Miscellaneous History","mischist","Date","Ydt_misc"]},{"entry":[{},{},"Title or Reference","Remarks"]},{"entry":["Module Component","comptp12","Nomenclature","Nomen"]},{"entry":["Record",{},"Serial #","Comp_sn"]},{"entry":["Or",{},"Part Number","Prtnbr"]},{"entry":["Selected Components",{},"Date Installed","Ydt_inst"]},{"entry":["(For Engines)",{},"Total Count","Totcnti"]},{"entry":[{},{},"(Installed)",{}]},{"entry":[{},{},"Date Removed","Ydt_ remov"]},{"entry":[{},{},"Total Count","Totcntr"]},{"entry":[{},{},"(Removed)",{}]},{"entry":[{},{},"Tsr","Tsr"]},{"entry":["Module Component","comptp 12","Tsn","Tottsnb"]},{"entry":["Record",{},"Ftc","Ftc"]},{"entry":["Or",{},"Pfp","Pfp"]},{"entry":["Selected Components",{},"Fcc","Fcc"]},{"entry":["(For Engines)",{},"Notes","Notes"]},{"entry":["Custody & Transfer","transfer","Date of Transfer","ydt_trnsf"]},{"entry":["Record",{},"From","fromb"]},{"entry":["(Engine edit only)",{},"To","tob"]},{"entry":[{},{},"Authority","authori"]},{"entry":[{},{},"Date Received","ydt_recvd"]},{"entry":[{},{},"Verified By","signat"]},{"entry":["Operating Log","eng_ophours","Mo\/Year","Yophours_dt"]},{"entry":["(Engine edit only)",{},"Hours per month","Hrs _mo"]},{"entry":[{},{},"Starts per month","Strt_ mo"]},{"entry":[{},{},"Remarks","Notes"]},{"entry":["Compressor Rotor Assy","comptp6","Serial Number","Comp_sn"]},{"entry":["(Engine edit only)",{},"Location","Nomen"]},{"entry":[{},{},"Date","Ycomp_instd"]},{"entry":[{},{},"Stage No.","Stage"]},{"entry":[{},{},"Hours Rotor\/Shaft","Hoursrs"]},{"entry":[{},{},"Hours Disk","Hoursd"]},{"entry":[{},{},"Hours Blade","Hoursb"]},{"entry":[{},{},"Activity","Iactivity"]},{"entry":[{},{},"Verified By","Isignature"]},{"entry":[{},{},"Date","Ydt_maint"]},{"entry":[{},{},"Maintenance Notes","Notes"]},{"entry":[{},{},"Activity","Mactivity"]},{"entry":[{},{},"Verified By","Msignature"]},{"entry":["Turbine - Installation","comptp7da","Serial Number","Comp_sn"]},{"entry":["(Engine edit only)",{},"Location","Nomen"]},{"entry":[{},{},"Date","Ycomp_inst"]},{"entry":[{},{},"Hours Rotors","Hoursrs"]},{"entry":[{},{},"Activity","Iactivit"]},{"entry":[{},{},"Verified By","Isignat"]},{"entry":["Turbine - Abnormal ","comptp7","Diameter","Diameter"]},{"entry":["Temperature and \/or",{},"Date","Adate"]},{"entry":["Overseed Data",{},"Engine hrs","Aenghrs"]},{"entry":["(Engine edit only)",{},"Rotor hrs","Arhrs"]},{"entry":[{},{},"Temp\/Speed","Atemps"]},{"entry":[{},{},"Time Over Limit","Atimeo"]},{"entry":[{},{},"Acause","Acause"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The \u201cOperating Log\u201d section has a few added controls. They display an \u201cEquipment Operation Summary\u201d in the bottom right portion of the form. The \u201cEquipment Operation Summary\u201d consists of four read-only text boxes in a two column by two row grid. The column headings are \u201cOperating Time\u201d and \u201cNo. Starts,\u201d and the row headings are \u201cSince New\u201d and \u201cSince Rework,\u201d The data displayed in the grid is calculated upon form activation. The logic for these calculations is show below in Listing 1.","Query: Rew","select sum(eng.hrs_mo) as tot_hrsmo, sum(eng.strt_mo) as tot_strtmo","from eng_ophours eng","where eng.ciasn=section.ciasn .and. testcell=\u201cR\u201d","Query: New","select sum(eng.hrs_mo) as tot_hrsmo, sum(eng.strt_mo) as tot_strtmo","from eng_ophours eng","where eng.ciasn=section.ciasn .and. testcell< >\u201cT\u201d","Query: Tot","select sum(eng.tempsnhrs) as temphrs, sum(eng.tempsnstrt) as tempstrt,","sum(eng.temprwhrs) as temprhrs, sum(eng.temprestrt) as temprstrt","from eng_ophours eng","where eng.ciasn=section.ciasn","Since New\/Operating Time=New.tot_hrsmo+Tot.temphrs","Since New\/No. Starts=New.tot_strtmo+Tottempstrt","Since Rework\/Operating Time=Rew.tot_hrsmo+Tot.temprhrs","Since Rework\/No. Starts=Rew.tot_strtmo+Tot.temprstrt","5.2. Add and Edit Module\/Engine Data Forms","After clicking on the \u201cAdd . . . Record\u201d button or double clicking on a record in a grid in a tabular section, an appropriate edit form opens to allow the user to either add a new record or edit an existing record. Across the top of each form are Equipment Name, Equipment Module Type, Position and Full Logbook Number. These fields are read-only and load from the nomen, engine, loc and ciasn fields of the section table respectively. Note that these are a mirror of the fields present on the Module and Engine edit forms. Also on each form, there is a drop-down box labeled \u201cMark for Deletion\u201d populated with options \u201cOK\u201d and \u201cDEL,\u201d and updates to the mdel field of the forms respective update table. Note that when exiting the AUTOLOG, all records that have a \u201cDEL\u201d value in the mdel field are deleted from their respective tables in the database.","All add and edit forms share similar steps. The Init( ) method for a form checks whether it is adding or editing a record. If it is editing a record it displays the previous non-user entered data into the form blanks. If adding, it only fills in the known data for an engine\/module the user is working on (from the section.dbf table, as discussed herein in 5.0. Editing Module and Engine Data). illustrates an example from the Inspection form.","Each form has a set of required data fields the user must enter. If the user does not fill out all the required forms and tries to save the record a message box appears alerting the user that he\/she must enter that data. A list of the required fields is provided in ","5.2.1. Add\/Edit Service Record Form","With reference to , Adding and Editing a Service Record is performed using the \u201cEdit the Service Record\u201d form. In addition to the standard four read-only boxes on Add\/Edit forms, the Edit Service Record form has a read-only textbox loaded from the hulltype field of the servrec table that displays the current \u201cHull Type\u201d of the logbook. It also has four text boxes for data entry labeled \u201cInstallation Date\u201d, \u201cBy (Activity)\u201d, \u201cVerified By\u201d and \u201cNotes\u201d, which updates to ycomp_instd, by, signature and notes fields respectively in the servrec table.","There are three buttons on the form labeled \u201cAdd\u201d, \u201cUndo\u201d and \u201cCancel\u201d. Clicking on the \u201cSave\u201d button executes code that checks for a valid \u201cInstallation Date\u201d, for a \u201cBy (Activity)\u201d value, and for a \u201cVerified By\u201d field. If any of these checks fail, the user is notified that he\/she must enter valid data for the respective field. If all of the checks pass, changes to the fields on the form are updated to the servrec table and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","5.2.2. Add\/Edit Custody and Transfer Record Form","With reference to , Adding and Editing a Transfer Record is done using the \u201cAdd Custody and Transfer Record\u201d form. The form has one read-only text box labeled \u201cSerial Number\u201d loaded from the ciasn field of the transfer table, and three read-only textboxes per \u201cFrom\u201d and \u201cTo\u201d location dropdown box. The \u201cFrom\u201d and \u201cTo\u201d dropdown boxes are populated during form initialization from a recordset containing the fields name, uic, shipdepo and main_reco from the mloc table (although only the name field is visible in the dropdown). Upon clicking on the \u201cFrom\u201d dropdown box, the three read-only fields directly above are populated with the name, uic and shipdepo values from left to right. The left-most read-only text box and the dropdown box selection update to the fromb and mrec_from (using the main_reco value) fields, respectively, of the transfer table. The editable text box fields on the form are labeled \u201cDate,\u201d \u201cVerified Date,\u201d \u201cAuthority,\u201d \u201cVerified By,\u201d \u201cCause\u201d and \u201cMemorandum or Narrative.\u201d These editable fields update to the ydt_trnsf, ydt_recvd, authori, signal, remv_reason and tremarks of the transfer table, respectively. Also, there is a third dropdown box labeled \u201cCause\u201d which is populated from a recordset (query: select rc.reason from itemsaera rc where rc.tan_record=section.tan_record order by rc.reason) and updates to the remv_reason of the transfer table.","There are three buttons on the form; they are labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that checks for a valid \u201cDate,\u201d for a \u201cTo\u201d selection, an \u201cAuthority,\u201d and a \u201cVerified By.\u201d If any of these checks fail, the user is notified that he\/she must enter valid data for the respective field. If the checks all pass, changes to the fields on the form are updated to the transfer table and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","5.2.3. Add\/Edit Inspection Record Form","With reference to , Adding and Editing an Inspection Record is done using the \u201cEdit the T.I. Engine Inspection\u201d form. It has eight text boxes for data entry, and they are labeled \u201cInspection Type,\u201d \u201cAuthorization,\u201d \u201cDate Commenced,\u201d \u201cDate Completed,\u201d \u201cActivity,\u201d \u201cVerified By,\u201d \u201cTSN Done (Hours)\u201d and \u201cNext Due (Hours).\u201d These text boxes update to the desc, authori, ydt_comm, ydt_comp, activit, signal, tsn, and nextdue fields, respectively, in the inspect table. Also, there is a dropdown box labeled \u201cSpecial Conditions\u201d that is populated with thiscond, desc from the specialc table. When a selection is made from the \u201cSpecial Conditions\u201d dropdown box it is updated to the specond field of the inspect table.","There are three buttons on the form, labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that checks for a valid \u201cCompletion Date,\u201d an \u201cInspection Type,\u201d an \u201cActivity,\u201d a \u201cVerified By\u201d and for a \u201cSpecial Condition\u201d value. If any of these checks fail, the user is notified that he\/she must enter valid data for the respective field. If the checks all pass, changes to the fields on the form are updated to the inspect table and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","5.2.4. Add\/Edit Rework Record Form","With reference to , Adding and Editing a Service Record is done using the \u201cEdit the Record of Rework\u201d form. It has six text boxes for data entry labeled \u201cDate Inducted,\u201d \u201cDate Completed,\u201d \u201cDescription,\u201d \u201cAuthority,\u201d \u201cActivity\u201d and \u201cVerified By.\u201d These labels update to the ydt_ind, ydt_comp, desc, authori, activit, and signal fields, respectively, in the rework table.","There are three buttons on the form, labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that updates changes to the fields on the form to the rework table, and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","5.2.5. Add\/Edit Miscellaneous History Form","With reference to , Adding and Editing a Miscellaneous History Record is performed using the \u201cEdit Logbook Working History\u201d form. In addition to the standard four read-only boxes on Add\/Edit forms, the \u201cEdit Miscellaneous History\u201d form has a read-only textbox labeled \u201cComponent Serial Number\u201d (CSN). The CSN is loaded from the comp_sn field of the mischist table. It also has three text boxes for data entry labeled \u201cDate.\u201d \u201cTitle or Reference\u201d and \u201cMemorandum or Narrative\u201d which update to the ydt_misc, remarks and mremarks fields respectively in the mischist table.","There are three buttons on the form, labeled \u201cAdd.\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that checks for a valid \u201cTitle or Reference\u201d entry. If this check fails, the user is notified that he\/she must enter valid data for the field. If the check passes, changes to the fields on the form are updated to the mischist table and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","5.2.6. Add\/Edit Technical Directives Form","With reference to , Adding and Editing a Technical Directive Record is accomplished using the \u201cEdit Technical Directive\u201d form. It has six text boxes for data entry labeled \u201cNo.,\u201d \u201cTitle,\u201d \u201cActivity,\u201d \u201cDate Installed,\u201d \u201cVerified By\u201d and \u201cRevision No.\u201d The text boxes update to the numtd, title, activit, ydate_inst, signal and rev fields, respectively, in the ecptd_inst table. Also, there are three dropdown boxes labeled \u201cType,\u201d \u201cStatus,\u201d and \u201cCategory\u201d that are updated to the type, status_cod and categorytd fields, respectively, in the ecptd_inst table. The \u201cType\u201d dropdown is populated with options (AYC, AYB, ECP, GTC, GTB, IAC, ITC); the \u201cStatus\u201d dropdown is populated with options (C, INC, NA, NINC, NIS); and, the \u201cCategory\u201d dropdown is populated with options (R, U).","There are three buttons on the form, labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that checks for a valid \u201cDate Installed,\u201d a TD \u201cNo.,\u201d a \u201cTitle,\u201d an \u201cActivity,\u201d a \u201cVerified By,\u201d a \u201cType\u201d selection, a \u201cStatus\u201d selection and a \u201cCategory\u201d selection. If any of these checks fail, the user is notified that he\/she must enter valid data for the respective field. If the checks all pass, changes to the fields on the form are updated to the ecptd_inst table, and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.",{"@attributes":{"id":"p-0142","num":"0168"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CI","Cascading CI"]},{"entry":[{},"GPM","CTM"]},{"entry":[{},{},"IHM"]},{"entry":[{},"CTM","GPM"]},{"entry":[{},{},"IHM"]},{"entry":[{},"GGA","PTA"]},{"entry":[{},"PTA","GGA"]},{"entry":[{},"GTA","HOT"]},{"entry":[{},"HOT","GTA"]},{"entry":[{},"MOD","MOD"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"With reference to the above Table 3, if \u201cYes\u201d is selected in the \u201cAdd to All?\u201d dropdown box, then changes to the current TD (for all fields but \u201cRevision No\u201d for adding and for fields \u201cStatus,\u201d \u201cActivity,\u201d \u201cDate Installed\u201d for editing) are cascaded to engines of the same type for that TD by matching the first three digits of the ciasn (or ci) value using Table 3. These companion assembly update processes are spelled out in more detail hereinbelow.","5.2.6.1. Adding a Technical Directive","Besides adding technical directives (TD) to an engine entry, the user may choose to have the TD carry over to other engines. When the user chooses to carry over the data, then the TD is applied to other engines that satisfy the criteria set forth in the following paragraph.",{"@attributes":{"id":"p-0145","num":"0171"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Associated CIs"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CI","Cascading to CI"]},{"entry":[{},"GPM","CTM"]},{"entry":[{},{},"IHM"]},{"entry":[{},"CTM","GPM"]},{"entry":[{},{},"IHM"]},{"entry":[{},"IHM","CTM"]},{"entry":[{},{},"GPM"]},{"entry":[{},"GGA","PTA"]},{"entry":[{},"PTA","GGA"]},{"entry":[{},"GTA","HOT"]},{"entry":[{},"HOT","GTA"]},{"entry":[{},"MOD","MOD"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Firstly, it is required that the engines be the same type. For example, TD's for LM2500 engines are only applied to other LM2500's, not to 501K's. Secondly, with reference to the above Table 4, it is required that the engines have the same or associated CI's. For example, a new TD input for a GGA would create a new TD record for all GGA's and all PTA's on a ship. The list of associated CIs is contained in Table 4.","5.2.6.2. Modifying a Technical Directive","When modifying a TD, the user may choose to have the modification carried over to other engines. The other engines the modification is carried over to must satisfy the same two requirements as listed for adding a TD above, viz., (i) the engines are the same type, and (ii) the engines have the same or associated CI's. In addition, third and fourth requirements must be satisfied. Thirdly, it is required that the engine be in the same location. For instance, a modification done to a TD for an engine in position A carries over to the other engine in position A. Fourthly, it is required that the two engines already share the same TD (e.g., the companion unit shows a TD with the same TD Number and TD type).","If these requirements are not met or the user does not select to have the modifications carried over, then the modification only applies to the current engine.","5.2.6.3. Code Implementation","With reference to and , if the user selects the carry-over option, then the first operation done is to assign the Associated CIs to variables:","if substr(section.ciasn,1,3)=\u201cCTM\u201d","have_ci=\u201cCTM\u201d","addto_ci=\u201cIHM\u201d","or_ci=\u201cGPM\u201d","endif","Secondly, the CIASN's for those engine records added to (or modified) get selected into an array.","Referring to , procedures addtd( ), edittd( ) already \u201cknow\u201d which engine a record should be added to or modified. Its CIASN is stored to the nxt_ciasn variable from the example shown in and ","If the user does not select to carry over changes, then additions or modifications only apply to the engine the user is currently working on.","5.2.7. Add\/Edit Selected Component Record Form","With reference to , Adding and Editing a Component Record is performed using the \u201cEdit Engine Components\u201d form. It has eight text boxes for data entry, labeled \u201cComponent Serial Number,\u201d \u201cPart Number,\u201d \u201cDate Installed,\u201d \u201cTotal Count on This Engine\u201d (under \u201cInstallation Data\u201d label), \u201cDate Removed,\u201d \u201cTotal Count on This Engine\u201d (under \u201cRemoval Data\u201d label), \u201cTSN Baseline\u201d and \u201cRemarks,\u201d which update to the comp_sn, prtnbr, ydt_inst, totcnti, ydt_remov, totcntr, tsnb and notes fields, respectively, in the comptp3 table.","There are also four dropdown boxes, labeled \u201cNomenclature,\u201d \u201cFailure Type (FTC),\u201d \u201cFailed Part (PFP)\u201d and \u201cFailure Cause (FCC),\u201d that update to the nomen, ftc, pfp and fcc. The \u201cNomenclature\u201d dropdown box is populated with the tname field of the tn table which is created during form initialization and populated with information from the tan_master table that are of the engine type of the current logbook record (from the section table) and the appropriate comp_type (3 for engines and 4 for modules). When a record is selected in the \u201cNomenclature\u201d dropdown box, it is not only updated to the nomen field as stated above, but program code is also executed to update the corresponding tan, tan_record and tan_class fields of the tn table to the comptp3 table. The \u201cFailure Type (FTC)\u201d dropdown box is populated with the ftc and described fields from the typeftc table. The \u201cFailed Part (PFP)\u201d dropdown box is populated with the pfp and described fields from the partpfp table. The \u201cFailure Cause (FCC)\u201d dropdown box is populated with the fcc and described fields from the causefcc table.","There are three buttons on the form, labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that checks for a valid \u201cInstallation Date\u201d and a \u201cNomenclature\u201d selection; if a \u201cDate Removed\u201d is entered, fields \u201cTotal Count . . . \u201d (removed), \u201cFTC,\u201d \u201cPFP\u201d and \u201cFCC\u201d are checked for values. If any of these checks fail, the user is notified that he\/she must enter valid data for the respective field. If the checks all pass, changes to the fields on the form are updated to the comptp3 table, and before the form closes calculations are performed and additional fields (tsn, tsr, ylast_updat, ycomp_instd, tottsnb) are updated.","Referring to the below Listing 2, wherein the logic for tsn and tottsnb is listed, ylast_update is set to the current date, tsr is set to the difference between totcntr and totcnti and ycomp_instd is set to ydt_inst. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","IF totcntr=0 THEN\n\n","ELSE\n\n","END IF","IF totcntr=0 AND totcnti>=1 THEN\n\n","ELSE IF totcnti=0 AND totcntr>=1 THEN","tottsnb=tsnb","END IF","IF totcnti>=1 AND totcntr>=1 THEN","tottsnb=tsnb+(totcntr\u2212totcnti)","END IF","5.2.8. Add\/Edit Compressor Rotor Assembly Record Form","With reference to , Adding and Editing a Edit Compressor Rotor Assembly Record is done using the \u201cEdit the Compressor Rotor Components\u201d form. In addition to the standard four read-only boxes on Add\/Edit forms, the Edit Service Record form also has two read-only textboxes that are loaded with data during tan selection and represent information stored in the tan and tname fields of the comptp6 table. Tan selection is performed using the dropdown box next to the Serial Number text box. The tan selection drop-down box is populated during form initialization with fields tan, title1, tname and tan_record (from the tan_master) table where comp_type is equal to 5 or 6. When a record is selected in the dropdown box, program code is executed to update the corresponding tan, tname, nomen and tan_record fields of the selected record to the comptp6 table.","The \u201cEdit the Compressor Rotor Components\u201d form has twelve text boxes for data entry in two sections. Under the first section labeled \u201cInstallation Data\u201d there are eight fields, labeled \u201cSerial Number,\u201d \u201cStage No.,\u201d \u201cVerified By,\u201d \u201cDate,\u201d \u201cHours Rotor\/Shaft,\u201d \u201cHours Disc,\u201d \u201cHours Blade\u201d and \u201cActivity,\u201d which update to the comp_sn, stage, isignature, ycomp_instd, hoursrs, hoursd, hoursb and iactivity fields, respectively, in the comptp6 table. Under the second section labeled \u201cMaintenance\u201d there are four fields, labeled \u201cMaintenance Notes\u201d, \u201cMaintenance Date\u201d, \u201cActivity\u201d and \u201cVerified By,\u201d which update to the notes, ydt_maint, mactivity and msignature fields, respectively, in the comptp6 table.","There are three buttons on the form, labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel,\u201d Clicking on the \u201cSave\u201d button executes code that checks for a \u201cSerial Number\u201d and for a tan selection. If either of these checks fails, the user is notified that he\/she must enter valid data for the respective field. If the checks pass, changes to the fields on the form are updated to the comptp6 table and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","5.2.9. Add\/Edit Turbine Rotor Component (Installation) Record Form","With reference to , Adding and Editing a Turbine Rotor Component Record is done using the \u201cEdit the Turbine Rotor Components\u201d form. In addition to the standard four read-only boxes on Add\/Edit forms, the Edit Turbine Rotor Components form has two read-only textboxes that are loaded with data during tan selection and represent information stored in the tan and tname fields of the comptp7 table. Tan selection is performed using the drop-down box next to the Serial Number text box. The tan selection drop-down box is populated during form initialization with fields tan, title1, tname and tan_record from the tan_master table where comp_type is equal to 5 or 6. When a record is selected in the drop-down box, program code is executed to update the corresponding tan, tname, nomen and tan_record fields of the selected record to the comptp7 table.","There are six text boxes for data entry, labeled \u201cSerial Number,\u201d \u201cDate,\u201d \u201cHours Rotor\/Shaft,\u201d \u201cActivity,\u201d \u201cVerified By\u201d and \u201cMaintenance Date.\u201d They update to the comp_sn, ycomp_inst, hoursrs, iactivity, isignature and ydt_maint fields, respectively, in the comptp7 table. There are three buttons on the form, labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that checks for a \u201cSerial Number\u201d and for a tan selection. If either of these checks fails, the user is notified that he\/she must enter valid data for the respective field. If the checks pass, changes to the fields on the form are updated to the comptp7 table and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","5.2.10. Add\/Edit Abnormal Temp Data Form","With reference to , Adding and Editing Abnormal Temp Data is done using the \u201cEdit the Abnormal Temp Data\u201d form. The form has six text boxes for data entry, labeled \u201cRadial Measurement,\u201d \u201cTotal Eng Hrs,\u201d \u201cTotal Rotor Hrs,\u201d \u201cTempSpeed,\u201d \u201cTime Over Limit\u201d and \u201cCause,\u201d which update to the diameter, aenghrs, arhrs, atemps, atimeo and acause fields, respectively, in the comptp7da table.","There are three buttons on the form, labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that updates changes to the fields on the form to the comptp7da table, and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form.","5.2.11. Add\/Edit Hours and Starts Form","With reference to , Adding and Editing an Hours and Starts record is done using the \u201cEdit Engine Hours and Starts\u201d form. It has four text boxes for data entry, labeled \u201cDate Recorded,\u201d \u201cHours per month,\u201d \u201cStarts per month\u201d and \u201cNotes.\u201d They update to the yophours_dt, hrs_mo, strt_mo and notes fields, respectively, in the eng_ophours table.","Additionally, there is a grid of text fields representing operating time and number of starts, for since new and since rework. It is basically a two-row by two-column grid where each column consists of two text boxes per row, one for data entry and one which is a calculated read-only field (For example, there is a data entry text box and a read-only text box in the \u201cOperating Time\u201d column of the \u201cSince New\u201d row). The data entry text boxes in the \u201cSince New\u201d row update to the tempsnhrs and tempsnstrt fields of the eng_ophours table, and the data entry text boxes in the \u201cSince Rework\u201d row update to the temprwhrs and temprestrt fields of the eng_ophours table, respectively for the \u201cOperating Time\u201d and \u201cNo. Starts\u201d columns. The read-only text boxes in the grid are obtained from the corresponding read-only fields on the Ophours Tabular section of the Module or Engine data entry form (See 5.1.1. Operating Log Tab Section).","The form has three buttons, labeled \u201cAdd,\u201d \u201cUndo\u201d and \u201cCancel.\u201d Clicking on the \u201cSave\u201d button executes code that checks for a valid \u201cDate Recorded\u201d and for values greater than zero for \u201cHours per month,\u201d \u201cStarts per month,\u201d \u201cOperating Time\/Since New,\u201d \u201cNo. Starts\/Since New,\u201d \u201cOperating Time\/Since Rework\u201d and \u201cNo. Starts\/Since Rework.\u201d If any of these checks fail, the user is notified that he\/she must enter valid data for the respective field. If the checks all pass, changes to the fields on the form are updated to the eng_ophours table, and the form closes. Clicking on the \u201cUndo\u201d button executes code that resets the form to its original state and refreshes the form. Clicking on the \u201cCancel\u201d button sets the form to its original state and closes the form. More detail is given hereinbelow.","5.2.11.1. Operational Hours","While adding monthly values for operational hours, some of the data the user enters could be carried over to engine(s) satisfying the following criteria. Firstly, it is required that the engine be in the same position. Secondly, it is required that the engine have an associated CI.","Clicking on the \u201cSave\u201d button executes the pertinent code. Associated CIs are standard and are assigned to the variables by using an \u201cIF\u201d statement. The list of associated CIs is set forth in Table 5, below.",{"@attributes":{"id":"p-0183","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Associated CIs"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CI","Cascading to CI"]},{"entry":[{},"GPM","CTM"]},{"entry":[{},{},"IHM"]},{"entry":[{},"CTM","GPM"]},{"entry":[{},{},"IHM"]},{"entry":[{},"IHM","CTM"]},{"entry":[{},{},"GPM"]},{"entry":[{},"GGA","PTA"]},{"entry":[{},"PTA","GGA"]},{"entry":[{},"GTA","HOT"]},{"entry":[{},"HOT","GTA"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"A code example is presented in . Two procedures called from the code example shown in are shown in ","5.2.11.1.1. Adding Operational Hours","The user input engine \u201cStatus\u201d is not carried over to the associated companion assembly. However, this value still needs to be set. To do so, the application finds the latest (by date) record for which the engine has a status code and copies it to the newly added record. In cases where no previous record can be found or all previous records were test records (status is \u201cT\u201d), status in a new record gets set to \u201cN\u201d (New) as a default. According to the present invention's AUTOLOG, this part is effected in a manner such as shown in ","5.2.11.1.2. Modifying Operational Hours","Associated engines are found by the same rule as in Adding (I). Matching a particular record for modification on each of these engines is effected by matching Date Recorded, monthly value for hours and starts (If the record which has the same data on the associated engine does not exist, then no changes will be made). When the user opens the hours form for modification, Date Recorded, Hours Per Month, and Starts Per Month are assigned to variables (Init( ) procedure of enghoure.scx form):","oldhrs=eng_ophours.hrs_mo","oldstrts=eng_ophours.strt_mo","olddt=eng_ophours.yophours_dt","Even if the user could modify those values, \u201cold\u201d values might be needed if user would like to carry over changes to associated engine to match a particular record in order to update it with new values. This is performed in an edit related( ) procedure by running a query:","sele ophours_re from eng_ophours;","where loc_type=m.myloc.and.yophours_dt=olddt.and.;","hrs_mo=oldhrs.and.strtmo=oldstrts.and.substr(ciasn,1,3)=addto_ci into array c","Variables used in this query are described above. The variable ophours_re is a column containing the key to the record that would be used in order to update a particular record. If the query generates no results, then no records will be updated.","Other embodiments of the present invention will be apparent to those skilled in the art from a consideration of this specification or practice of the invention disclosed herein. Various omissions, modifications and changes to the principles described herein may be made by one skilled in the art without departing from the true scope and spirit of the present invention, which is indicated by the following claims."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order that the present invention may be clearly understood, it will now be described, by way of example, with reference to the accompanying drawings, wherein like numbers indicate the same or similar components, and wherein:",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"i":["a","b ","c "]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 2"],"i":["a ","b "]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 8","i":"a "},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 8","i":"b "},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 9","FIG. 1"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 10","FIG. 1"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 11","FIG. 1"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 12","FIG. 1"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 13","FIG. 1"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 14","FIG. 1"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 14","FIG. 14","FIG. 14"],"i":["a ","b ","c"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 15","FIG. 1"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 16","FIG. 1"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 17","FIG. 1"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 18","FIG. 1"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 19","FIG. 1"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 19","FIG. 19","FIG. 19"],"i":["a","b ","c "]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
