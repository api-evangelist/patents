---
title: Generalized WBEM/CIM indication provider simulation engine
abstract: A simulator of WBEM/CIM indication providers conforming to the CIM Indication Provider object specification simulates both the CIM indication provider and the means to drive the associated CIM events. The simulator comprises three functionally unique pieces: one or more CIM indication provider drivers, one or more CIM event trigger drivers, and a control application. This modularization creates flexibility in configuring the simulator to stress test different aspects of an operating system's underlying support for CIM indications. Modularization also makes the simulator design operating system independent. Provision is made in the simulation for generation of additional CIM events as background activity on the operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945918&OS=07945918&RS=07945918
owner: International Business Machines Corporation
number: 07945918
owner_city: Armonk
owner_country: US
publication_date: 20070629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","This invention relates to a method and apparatus for simulating an indication provider, especially a WBEM\/CIM indication provider for the purpose of testing a computer operating system's underlying support for such indication providers.","2. Description of the Related Art","The Common Information Model (CIM) is an open standard that, according to its promulgator, the Distributed Management Task Force (DMTF), \u201cprovides a common definition of management information for systems, networks, applications and services, and allows for vendor extensions\u201d; its common definitions \u201cenable vendors to exchange semantically rich management information between systems throughout the network\u201d. CIM has been developed in conjunction with Web-Based Enterprise Management (WBEM), characterized by the same promulgator as \u201ca set of management and Internet standard technologies developed to unify the management of distributed computing environments\u201d; WBEM \u201cprovides the ability for the industry to deliver a well-integrated set of standard-based management tools, facilitating the exchange of data across otherwise disparate technologies and platforms\u201d. Current versions of CIM and WBEM are well known in the art and are described on Web pages published by DMTF. The basic relationship between the two standards is that CIM provides underlying support for WBEM.","WBEM and CIM have the notion of \u2018indication providers\u2019. An indication provider is a mechanism (implemented in software) that allows an end user or controlling program to monitor for the occurrence of \u2018CIM event(s)\u2019 of interest on a target computer system and to be notified when the event has occurred. In the WBEM architecture, the end user or controlling program is operating system independent (at a source code or application programming interface (API) level), while the indication provider is operating system dependent. In addition, the end user or controlling program may be executing on the target operating system or on a remote system.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","104","106","104","108","110","112","104","114","116","114"]},"As depicted in , the CIM indication provider  on the target operating system  makes use of the underlying operating system-specific support  to detect the occurrence of an actual CIM event. Some currently available CIM testing tools do allow for functional validation of CIM indication providers  and the underlying operating system support . They typically do this by simulating an end user or controlling program , as shown in . Because of this approach they are lacking in their ability to easily drive high levels of stress on the underlying operating system-specific indication provider support . Such stress testing is desired in a software system-level test, as it uncovers a different class of problems than is exposed by functional-level testing that focuses on coverage of all code paths.","In general, the present invention contemplates a method and apparatus for simulating an indication provider to test operating system support functionality therefor as defined in the appended independent claims. Preferred embodiments thereof are defined in the subclaims. The invention is preferably implemented as a software program, more particularly, a computer program product stored on a computer usable medium, comprising computer readable program means for causing a computer to perform the invention.","More particularly, the present invention contemplates an indication provider simulator, preferably a CIM indication provider simulator (CIPS), that combines a platform-independent control application with small replaceable platform-dependent drivers of the underlying operating system indication provider support. The control application contains functionality to support the concepts (e.g., WBEM\/CIM concepts) basic to indication providers on any operating system platform.","Preferably, the platform-dependent drivers are divided into two sets. The first set of drivers consists of drivers associated with operating system-specific application programming interfaces (APIs) that monitor for CIM events. These APIs are used in a manner consistent with a real CIM indication provider object so that the underlying operating system indication provider support is exercised in a manner consistent with a real-world usage.","The second set of drivers consists of drivers associated with causing the system activity needed to trigger a CIM event. The amount of stress on the operating system's indication provider infrastructure is a function of the rate of triggering-related system events. This trigger rate is dynamically controllable by the end user of the simulator of the present invention.","Dividing the operating system-dependent drivers into two parts allows for multiple instances of simulators to cooperate in a test to allow additional control over the amount of stress placed on the target operating system indication provider support.","Furthermore, the simulator of the present invention is able to generate additional CIM event triggers that are not being monitored for by any CIM indication provider. This tests the underlying operating system indication provider support's ability to filter only events of interest.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"],"b":["200","220","220","112","114","116"]},"Simulator  tests the operating system indication provider support  by allowing that support to be isolated from the overall WBEM\/CIM architecture (elements ,  and  in ) and driven directly. This is accomplished by dividing the simulator  into three subcomponents as depicted in . Referring to that figure, the simulator  comprises one or more CIM indication provider drivers , one or more CIM event trigger drivers , and a control application .","Such an arrangement provides the following advantages. The control application  is platform independent (like the end user or controlling program , at a source code or API level) and can be used to test various operating systems besides the target operating system . This is especially important, as WBEM is intended to be a platform-independent architecture. The rate of stress on the target operating system  is dynamically determined by the tester via control of the rate of triggering events, as described below. Dividing the operating system-dependent drivers into two sets  and  allows for multiple instances of the simulator  to cooperate in a test with the intent of allowing additional control over the amount of stress placed on the target operating system.","Tables 1, 2, and 3 describe the set of functions implemented by each of the three simulator subcomponents.","The CIM indication provider drivers  respond to requests for the functions related to monitoring for CIM events that are listed in Table 1. These functions map directly to the required methods of a CIM indication provider as described by Open Pegasus CIM Indication Provider object specification. Background information on these functions may be found in the document entitled \u201cPEGASUS Public APIs\u201d, version 1.01, Oct. 30, 2003, Pegasus 2.3, especially the page for the class CIMIndicationProvider, available online from the Web site of The Open Group and incorporated herein by reference.","Because the indication provider driver  conforms to the Open Pegasus CIM Indication Provider object specification, it is feasible that an existing CIM indication provider object could be used directly as a CIPS indication provider driver. In practice, it is preferable that a specific driver be written for this purpose that is more generic in nature than an existing CIM indication provider.","Each function calls the operating system API or APIs  () that are appropriate to accomplish the intended functionality. It is important to note that a particular operating system may or may not provide APIs that correspond to these functions on a one-to-one basis. (For instance the z\/OS operating system requires a \u2018connect\u2019 function prior to the first \u2018subscribe\u2019 request. Also, it does not have an API that allows modification of an existing event.)",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CIM indication provider driver functions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Function","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["createSubscription","Invokes the OS-specific indication provider"]},{"entry":[{},"API(s) necessary to monitor for a specific"]},{"entry":[{},"event."]},{"entry":["deleteSubscription","Invokes the OS-specific indication provider"]},{"entry":[{},"API(s) necessary to stop monitoring for a"]},{"entry":[{},"specific event."]},{"entry":["modifySubscription","Invokes the OS-specific indication provider"]},{"entry":[{},"API(s) necessary to modify some specific"]},{"entry":[{},"attributes of a previous subscribe request."]},{"entry":["enableIndications","Invokes the OS-specific indication provider"]},{"entry":[{},"API(s) necessary to allow the flow of events"]},{"entry":[{},"to the simulator."]},{"entry":["disableIndications","Invokes the OS-specific indication provider"]},{"entry":[{},"API(s) necessary to stop the flow of events"]},{"entry":[{},"to the simulator."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The CIM event trigger drivers  respond to requests for the functions listed in Table 2 related to triggering a specific CIM event. Each function calls the operating system API or APIs that are appropriate to accomplish the intended functionality. As in the case of the indication provider drivers , the operating system  may or may not provide APIs that correspond to these functions on a one-to-one basis. This applies especially to the \u2018generate\u2019 and \u2018monitor\u2019 functions. The \u2018validate\u2019 function is called directly by the simulator  (in response to a \u2018receive\u2019 of CIM indication data) and should preferably always be implemented.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CIM event trigger driver functions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Function","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["generate","Invokes the OS-specific services necessary to trigger the"]},{"entry":[{},"desired CIM event."]},{"entry":["monitor","Use OS-specific indication provider API(s) to be notified"]},{"entry":[{},"when the triggered event has occurred. This allows for"]},{"entry":[{},"any required transformation or further filtering of the"]},{"entry":[{},"CIM event data prior to its being sent as a CIM event to"]},{"entry":[{},"the indication provider driver. (Such is the case with the"]},{"entry":[{},"z\/OS operating system.)"]},{"entry":["validate","Validate the CIM event information returned by the"]},{"entry":[{},"operating system against the expected information"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The CIPS control application  provides a central point of control for the indication provider drivers  and event trigger drivers . One possible set of end user controls are listed in Table 3. These controls would typically (but not necessarily) be implemented as commands. Any suitable means may be used to enter these commands, such as a UNIX command line.","Most of the commands listed in Table 3 correspond directly to driving the functions defined for the CIM indication provider drivers  and the CIM event trigger driver . Two exceptions should be noted. The \u2018noise\u2019 and \u2018unnoise\u2019 commands are provided to control triggering events for which the simulator  is not subscribed. This is useful in testing the ability of the operating system indication provider support to filter only events of interest. The \u2018statistics\u2019 command allows for collection and reporting of data related to a specific event.",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Simulator user commands"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Function","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["subscribe","Prepares the simulator for generation and tracking of a"]},{"entry":[{},"CIM event and then invokes \u2018createSubscription\u2019 on the"]},{"entry":[{},"indication provider driver. For any one CIM event"]},{"entry":[{},"\u2018subscribe\u2019 is mutually exclusive with \u2018noise\u2019."]},{"entry":["modify","Updates the simulator to change some of the attributes of"]},{"entry":[{},"an event that was previously subscribed to and then"]},{"entry":[{},"invokes \u2018modifySubscription\u2019 on the indication provider"]},{"entry":[{},"driver."]},{"entry":["unsubscribe","Invokes \u2018deleteSubscription\u2019 on the indication provider"]},{"entry":[{},"driver and performs any necessary cleanup in the"]},{"entry":[{},"simulator."]},{"entry":["enable","Prepares the simulator to begin receiving CIM events"]},{"entry":[{},"and then invokes \u2018enablelndications\u2019 on the indication"]},{"entry":[{},"provider driver. One or more \u2018subscribe\u2019(s) must precede"]},{"entry":[{},"the \u2018enable\u2019."]},{"entry":["disable","Invokes \u2018disableIndications\u2019 on the indication provider"]},{"entry":[{},"driver and performs any necessary cleanup in the"]},{"entry":[{},"simulator."]},{"entry":["noise","Prepares the simulator for generation and tracking of a"]},{"entry":[{},"CIM event. The \u2018createSubscription\u2019 indication driver"]},{"entry":[{},"function is not invoked. For any one CIM event \u2018noise\u2019 is"]},{"entry":[{},"mutually exclusive with \u2018subscribe\u2019."]},{"entry":["unnoise","Performs any necessary cleanup in the simulator."]},{"entry":["start","Instructs the simulator to begin calling \u2018generate\u2019 on the"]},{"entry":[{},"CIM event trigger driver for an event that was defined on"]},{"entry":[{},"a previous \u2018subscribe\u2019 or \u2018noise\u2019 command. Input options"]},{"entry":[{},"to the \u2018start\u2019 function provide control for the rate of"]},{"entry":[{},"triggering events."]},{"entry":["stop","Instructs the simulator to stop calling \u2018generate\u2019 on the"]},{"entry":[{},"CIM event trigger driver."]},{"entry":["status","Causes the simulator to report the statistics for a specific"]},{"entry":[{},"CIM event (number of events generated, number of"]},{"entry":[{},"events received, etc.)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},"Next, the OS indication provider function  detects the event and determines that the simulator  is subscribed. It passes information about the event to the \u2018monitor\u2019 interface () of the event trigger driver . The monitor then returns to the OS indication provider function , which passes the event information to the waiting \u2018receive\u2019 function in the control application .","The final step is to pass the received event information to \u2018validate\u2019 (by invoking the \u2018validate\u2019 function of the event trigger driver ) to be checked for accuracy.","The amount of stress on the OS indication provider support  is determined by the number and rate of different events being driven by the simulator .","The command set for the simulator  allows it to utilize only the functions of the indication provider drivers , only the functions of the CIM event trigger drivers , or the functions of both drivers  and  together. This allows the simulator  to run in several configurations as shown in . The different configurations allow for stressing different facets of the operation system's indication provider infrastructure, as shown in the examples described below.","In , a single simulator instance  similar to simulator  in  is configured to utilize both its indication provider drivers  and its event trigger drivers . In this configuration, instance  simulates a single indication provider listening for one or more types of events. It is a balanced test in that the occurrence of one CIM event results in an event notification being delivered to a single indication provider.","In , three simulator instances -, each of which is similar to simulator  in , are used to simulate multiple indication providers listening for a single type of CIM event. The first simulator instance is configured to utilize only its event trigger drivers , while the other two simulator instances and are configured to utilize only their indication provider drivers .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 6","FIG. 5","FIG. 2"],"b":["620","620","220","620"],"i":["a ","b","c "]},"In , only the CIM event trigger driver of a single simulator  similar to simulator  in  is used. In this configuration, the event listener is a real CIM indication provider  hosted on a CIM Object Manager (CIMOM) server . CIMOM server  may be either on the same or a different system than the target operating system .","While particular embodiments have been shown and described, it will be apparent to those skilled in the art that various modifications may be made without departing from the invention as defined in the appended claims. Thus, while the invention has been described in the environment of the IBM z\/OS operating system running on an IBM System z server, the invention is not limited to any particular hardware\/software platform. Further, while the invention has been described in the context of a WBEM\/CIM environment, in its broadest aspects it is not necessarily so limited. Still other variations and modification will be apparent to those skilled in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
