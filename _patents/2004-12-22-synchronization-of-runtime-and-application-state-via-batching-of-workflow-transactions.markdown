---
title: Synchronization of runtime and application state via batching of workflow transactions
abstract: Workflow management for maintaining consistency of persisted state across communicating components via batching of uncommitted work. A workflow component defines a workflow containing work items to be performed by service provider components. The workflow component assigns the work items to the service provider components, and the service provider components acknowledge the assigned work items. The workflow component appends the assigned work items to a work batch. The workflow component creates a transaction containing the batched work items. The workflow component commits to the workflow by requesting the service provider components to perform the work items. The workflow component checks the state of the execution of the work items and stores the state in a persistent storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07665093&OS=07665093&RS=07665093
owner: Microsoft Corporation
number: 07665093
owner_city: Redmond
owner_country: US
publication_date: 20041222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","APPENDIX A"],"p":["Embodiments of the present invention relate generally to the field of workflow modeling. In particular, embodiments of this invention relate to maintaining consistency of persisted state across communicating components via batching of uncommitted work.","Existing software systems attempt to map business problems to high-level workflows by modeling the business problem. In general, the workflow process involves a series of tasks or actions, the order in which they must be performed, permissions defining who can perform them, and script that is executed for each action. Workflow may also be described in terms of states and events. A workflow engine, which may be a component of a software system that enables workflow, enforces the workflow definition and executes workflow actions.","The workflow engine has three main functions. First, it verifies whether a change is valid for the current workflow state. Second, it checks if the current user has permission to execute the workflow event. Third, if the event is valid and the user has permission to execute the event, the workflow engine permits execution. For example, in managing a series of tasks, such as those involved in publishing a news article, a series of work items must be performed. In this example, tasks include writing the article, editing the written article, reviewing the edited article, and publishing the edited article. A typical workflow engine may request that different service provider components (e.g., Write component, Edit component, Review component, and Publish component) perform these work items or tasks.","The workflow engine\/component of a software system regularly communicates with other components (e.g., Write component, Edit Component, or the like) to monitor the states of the various work items. At the same time, these components may also monitor or checkpoint the states of these work items. Unfortunately, these components have no mechanism for keeping their persisted states consistent.","For example, the workflow engine may call different components to execute a number of work items during execution of a workflow. The workflow engine may send several messages to these components to determine the states of the work items. Each message that is sent invokes a messaging service provider component. Because the messaging component is required to maintain consistent and durable state with respect to the workflow, messages should not be sent out unless the workflow states can be successfully persisted.","Unfortunately, this type of vertically integrated software system design approach (i.e., execution of work items substantially upon arrival of data) has many shortcomings. For example, while one component is performing a particular task or work item, other components may not know the state of that particular work item (e.g., completed, executing, or abandoned). In addition, when there is a failure in executing one or more work items in a workflow to be performed, the workflow engine may be required to re-execute the entire workflow due to a lack of state knowledge.","Accordingly, improvements in workflow management for synchronizing runtime and application state of work items via a mechanism for batching of workflow transactions and for enabling the workflow engine, through batching of transactions, to delay execution of work items and to maintain consistency of persisted state of work items across communicating components are desired to address one or more of these and other disadvantages.","Embodiments of the present invention facilitate components sharing in the persistence transaction. In other words, these embodiments permit committing workflow states and the outstanding messaging states to persistent storage in a single transaction, which ensures that \u201ccheckpointed\u201d states are consistent across all components. Embodiments of the present invention include a workflow component that floats a work batch object in the thread call context in all of its calls or assignments to service provider components. The service provider components can choose to add work to this batch, which at commit time would treat all actions as a single transaction.","In accordance with one aspect, a method manages state in a workflow. One or more work items to be executed are defined. The one or more defined work items are assigned to one or more service provider components for execution. The one or more assigned work items are batched to the one or more service provider components at a later time. A state of the one or more batched work items is persisted. The one or more service provider components commit to execute the one or more batched work items when the one or more service provider components execute the one or more committed work items.","According to another aspect, one or more computer-readable media have computer-executable components for managing state in a workflow. A workflow component assigns one or more work items to be executed. The workflow component defines the one or more work items and the workflow component batches one or more assigned work items at a later time. One or more service provider components commit to execute the one or more batched work items.","In accordance with yet another aspect, a system maintains persistent states of services. A workflow engine assigns one or more work items to be executed. The workflow engine defines the one or more work items, and the workflow batches one or more assigned work items at a later time. A service provider component commits to execute the one or more assigned work items.","In a further aspect, a method manages workflow of one or more work items executable by a first host environment. An assignment to execute one or more work items is received at the first host environment. The one or more assigned work items are appended to a batch at the first host environment, indicating that the one or more assigned work items are to be executed by the first host environment at a later time. A request to execute the one or more assigned work items is received at the first host environment. The first host environment executes the one or more requested work items.","Alternatively, the invention may comprise various other methods and apparatuses.","Other features will be in part apparent and in part pointed out hereinafter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","Referring first to , a block diagram illustrates a system  for maintaining consistency of persisted state across communicating components via batching of uncommitted work according to an embodiment of the invention. The system  includes, but is not limited to, a workflow component , one or more service provider components , and a persistent storage . In one embodiment, the system  is a software system comprising one or more components (e.g., workflow component , service provider component , or the like). In another embodiment, the system  is an integrated software application system comprising one or more applications and\/or software systems that include embodiments of the invention, such as an enterprise application integration system.","The workflow component  manages work in the form of tasks performed by service provider components  (e.g., - to -N).","The service provider components - to -N in  are components that provide various services or work items. For example, service provider component - may be a component that provides a web service such as receiving a user search query, receiving an online order of a product, or the like. In one embodiment, service provider components  are part of the system , also known as a host environment, and service provider components  are hosts. In another embodiment, some or all of service provider components  are outside of the system . For example, service provider component - may be in a separate software application or system from that of service provider component -. In yet another embodiment, examples of work items performed by service provider components  may include, but not limited to, messaging, instance, transaction, persistence, threading, timer, roles, tracking, or the like.","While workflow component  and service provider components  as illustrated in  are part of the system , it is to be understood that these components (i.e. workflow component , service provider components , and\/or persistent storage  ) may be part of separate systems (e.g., separate host environments). For example, workflow component  may be in a stand-alone software application while service provider component - and\/or service provider component - may be in a separate software, such as a word processing software, a spreadsheet software, or the like.","Initially, workflow component  has a series of work items for execution. For example, in a system providing web services, a series of work items may be required for composing a new web page for selling a new product. The work items or tasks include, but are not limited to, providing a picture of the product, providing a description of the product, searching for the product availability, or the like. In this example, service provider components - to -N provide services that perform or execute all or part of these work items. As shown in , service provider components  may also interact with persistent storage  rather than solely with workflow component  directly.","Given this series of work items, workflow component  first defines the execution of these work items. In the above example of composing a new web page, workflow component  defines the sequence of execution of work items, such as providing a picture of the product before providing a description of the product, and so on. In addition, workflow component  defines other rules, such as deadlines and\/or other business rules. For example, workflow component  may impose a deadline for completion of the composing of the new page and\/or a discount for the first two days when the new product is available for online customers, and the like. It is to be understood that other rules and\/or definitions for execution of work items may be provided to workflow component .","Once these series of work items are defined, workflow component  assigns these work items to one or more service provider components . Referring now to , a flow diagram illustrates batching of work items from service provider components  according to an embodiment of the invention. For example, before invoking a service provider component, workflow component  creates a work batch at  for a series of work items. At -, workflow component  assigns a work item (e.g., providing a picture of the new product) by sending a message to the service provider component A (e.g., service provider component -). In other words, workflow component  attaches the batch to the invocation of an operation on the service provider component A. In turn, the service provider component A creates a first work item and appends it to the work batch. Similarly, workflow component  assigns another work (e.g., providing a description of the new product) to a service provider component B (e.g., service provider component -) via -. In one embodiment, workflow component  assigns the work items to the service provider component A by requesting the service provider component A to delay execution of the work items. For example, workflow component  requests the service provider component A to perform a work item until workflow component  instructs the service provider component A to perform. In another embodiment, workflow component  may create one or more work batches, each of which contains a series of work items to be performed by various service provider components .","It is to be understood that workflow component  may request service provider component A to perform a work item and service provider component A appends one aspect of the assigned work item to the work batch, rather than the entire work item. For example, a work item appended to the work batch by service provider component A may be the database element of a request from workflow component . In another example, a work item appended to the work batch by service provider component B may be a different aspect of the same request from workflow component .","It is also to be understood that multiple interactions between workflow component  and each service provider component (e.g., service provider component A) may take place. For example, workflow component  may assign more than one work items to service provider component A via - (or to service provider component B via -), and service provider component A appends the one or more assigned work items to the work batch via - (or service provider component B appends the one or more assigned work items to the work batch -).","In another embodiment, workflow component  creates a work batch associating with work items assigned to a particular service provider component. For example, workflow component  may create a work batch for work items from service provider component A and another work batch for work items from service provider component B. As such, workflow component  creates work batches for each service provider component as needed.","The service provider component A responds to workflow component  via - by appending or adding the assigned work item to the work batch. Similarly, the service provider component B appends the work item to the work batch via -. For example, using the example above, service provider component - sends a message to workflow component  that it is able to provide a picture of the new product for composing the new web page. Similarly, service provider component - sends a message to workflow component  that it is able to provide a description of the new product. It is contemplated that workflow component  may not know the details of how a particular service provider component  executes a particular work item. Using the above example of composing a new web page for a new product, service provider component - may be required to access a database containing numerous product pictures to locate the picture of the new product. Similarly, service provider component - may be required to access a database containing descriptions of products and\/or may be required to have a human intervention to provide a new description if not available in the database.","Although only two service provider components A and B are shown in , it is to be understood that additional work items may be assigned to these and other service provider components. It is also to be understood that service provider components  may decline to perform the assigned work items from workflow component .","Upon receiving messages from service provider components , workflow component  creates a transaction containing the batched work items for persisting the state of the work items at . For example, workflow component  may create a transaction at a scheduled point or time. At -, workflow component  requests the service provider component A to persist the batched work item (e.g., providing a picture of the new product). In other words, workflow component  requests the service provider component A as to the state of execution of the batched work item. The service provider component A at - responds to workflow component  by indicating a state of the batched work item, such as \u201cnot executed\u201d, \u201ccompleted\u201d, \u201cexecuting\u201d, \u201cabandoned\u201d, or the like. It is to be understood that one or more other state that corresponds to the particular work item may be provided to workflow component . Similarly, workflow component  requests service provider component B (e.g., service provider component -) to persist the state of execution of the batched work item (e.g., providing a description of the new product) at -, and the service provider component B responds to the request at -.","It is also to be understood that workflow component  may send multiple requests (e.g., -) to service provider component A as to the state of execution of another batched work item. Likewise, service provider component A may respond to workflow component  (e.g., at - ) to indicate the state of the another requested batched work item.","According to one embodiment of the invention, workflow component  creates a transaction to persist states. The workflow component  iterates over the work batch and collects all of the work items for service provider component A. In this instance, workflow component  maintains order among the work items to create a specific work batch. At a commit point, workflow component  passes the transaction and work batch when it invokes the operation of service provider component A. The service component A adds the work items in the work batch to the transaction. In other words, the work items are persisted. These processes may be repeated for all components with items in the work batch. Upon success of the commit notifications or messages, workflow component  commits the transaction. Then, upon successful commit of the transaction, workflow component  iterates over the batch and collects all work items per component (as before with respect to service provider component A).","The workflow component  next stores the states of the work items in persistent storage  provided by service provider components . For example, service provider components  provide their entire resource environments, such as persistent storage , for workflow component  to store the states of work items. Similarly, the interaction (e.g., arrows between service provider component -N and persistent storage  in ) is an example showing that service provider component -N accessing persistent storage  for workflow component  to store the state of work items. It is also to be understood that, although only one persistent storage  is shown in , multiple persistent storages may be available to workflow component  to store the states of work items. Persistent storage  may be a volatile and nonvolatile, removable and non-removable media for storage of information such as computer readable instructions, data structures, program modules, or other data (e.g., system memory  in ). With the stored persistent states of work items, workflow component  is able to maintain a consistency of work items. In other words, workflow component  checkpoints regularly the work items and stores the states of the work items at the checkpoints so as to maintain persistent states of all work items.","At , workflow component  commits the transaction. In other words, workflow component  requests service provider components  to commit the execution of the batched work items. Referring again to the above example of composing a new web page for a new product, after workflow component  assigned all the work need to complete the task, workflow component  requests the service provider components to provide a picture of the new product, provide a description of the new product, and the like. It is to be understood that through this assigning, batching and committing of work items, workflow component  assists in resolving the disadvantages and shortcomings of a vertically integrated model in which work items are executed\/performed upon assignment. By providing this delayed execution, workflow component  manages when work items are required for execution\/performance while maintaining a consistent state of the work items. At the same time, each of service provider components  also has a consistent view of the state of work items other service provider components  have in a particular batch or transaction.","By way of example and not limitation, a \u201cSend\u201d message in the messaging service provider component may result in the construction of an object containing ad hoc SQL (structured query language). In this example, the messaging service provider component adds the object, namely, a Work Item, to the work batch. At a scheduled commit point determined by the workflow component, a transaction is created. Moreover, all outstanding assigned work items are given the transaction and the service provider components are instructed to commit to execute\/perform the work items. At this point, for example, the messaging service provider component performs whatever actions are appropriate to execute the SQL as part of the transaction. The transaction is then committed.","Referring now to , a block diagram illustrates a transaction  with one or more appended work items according to an embodiment of the invention. As discussed, workflow component  creates a transaction containing one or more batches of the batched work items. In one embodiment, the transaction  is a long running transaction that contains one or more transactions  (e.g., - to -N) and takes a substantial long period of time to complete (e.g., several months). In other words, transactions  may be batched into another long running transaction, such as the transaction . Each of the transactions  are organized according to a transaction boundary, as depicted in  showing each transaction  in a separate block. For example, the transaction - (e.g., atomic transaction ) has a boundary separate from the transaction - (e.g., atomic transaction ). By defining the transactions  with their separate boundaries, workflow component  may checkpoint the transactions  to determine the state\/status of the transactions . For example, workflow component  checks or monitors the state of the transaction - at . Similarly, workflow component  checks the state of the transaction - at . By checkpointing the state of the transactions , workflow component  maintains a persistent state of the work items in the transactions .","In another example, each transaction  includes one or more batches containing one or more work items. For example, atomic transaction - includes a batch (or a scope batch)  including one or more work items (not shown). Similarly, atomic transaction - includes a batch (or a scope batch)  including one or more work items. It is to be understood that while only one batch  is shown in atomic transaction - in , each transaction  may contain one or more batches or inner scope batches.","In another embodiment, in the event that one or more work items or the entire transaction is not executed because of fault, workflow component  would only need to abandon the work items in the faulted transaction with other transactions unaffected due to the defined transaction boundary. Workflow component  first identifies all of the work items related to the faulting scope (e.g., scope batch  in atomic transaction -) and constructs a fault work batch. Workflow component  then invokes the \u201ccomplete\u201d state of each unique pending work item with completed status set to \u201cfalse\u201d for all work in the fault work batch. Moreover, workflow component  abandons all work in this work batch. The runtime in this embodiment maintains reference to all remaining work batch items after recovery from the fault. The work may then be committed at a future persistence point.","In the foregoing example of composing a new web page, suppose service provider component - is unable to provide a picture of the new product after committing to execute the work item in the transaction. In maintaining the persistent state of the transaction, workflow component  determines that the particular work item (e.g., providing a picture of the new product) is abandoned or incomplete. The workflow component  next abandons part or all the work items in this transaction (i.e. composing a new web page) while other transactions (e.g., taking orders for other items, or the like) are unaffected by this faulted transaction. In one embodiment, upon completing the other work items in other transactions or upon recovery from the fault, workflow component  may maintain reference (e.g., the batched work items, the work item definitions, or the like) of the faulted transaction so that workflow component  may request service provider components  to commit to the work item again at a later time.","In yet another embodiment, service provider component - may notify or send a message to workflow component  indicating that it is unable to complete execution of the committed work item. As a result, workflow component  may abandon the work item in response to the received message.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4","b":["102","402","102","102","104","1","404","102","104","406","104","102","408","102","404"]},"If the determination is negative, workflow component  creates a transaction at . Alternatively, workflow component  may create a transaction at a scheduled time or point. At , workflow component  collects the batched work items to the transaction. At , workflow component  persists the state of the work items. The workflow component  next commits to the execution of the transaction at . That is, workflow component  requests service provider components  to execute\/perform the assigned work. It is to be understood that after service provider components  commit to the execution of work items, workflow component  continues to persist the state of the work items by storing the state of the work items in persistent storage  of .","At , workflow component  determines whether there is any fault occurred during the execution of the committed work items by periodically checkpoints the state of the work items\/transactions. In another embodiment, service provider components  send a message or notify workflow component  that a fault has occurred. If workflow component  determines that there is no execution fault, workflow component  proceeds to complete the execution of the transaction at .","Alternatively, if workflow component  determines there is an execution fault or, in another embodiment, a service provider component indicates there is an execution fault, workflow component  abandons batch(s) that are associated with the faulted work items\/transaction at . In other words, workflow component  abandons all of the items in the inner batch (of the faulted scope) and workflow component  maintains the work items in the surrounding scopes for a later commit point in this embodiment. At , workflow component  completes the execution of the non-faulted work items. The workflow component  maintains reference of the work associated with the faulted work items at , and may continue to have service provider components  to commit the faulted work items at a later time (as shown by the dashed lines). Appendix A provides an exemplary protocol for workflow transactional batching.","The present invention provides advantages over conventional workflow system design and modeling by implementing a batch containing work items that embodies at least some of the features of the invention. In operation, a software system containing one or more components or software systems comprises a workflow component that manages the workflows. The workflow component initially defines a workflow (e.g., composing a new web page for a new product) to be performed by one or more service provider components. For example, the workflow for composing a new web page may include work items such as providing a picture of the new product, providing a description of the new product, determining the new product availability, and the like. It is to be understood that the service provider components may be in a separate software system, application, or package from the workflow component.","The workflow component creates a work batch and sends a message assigning the work items to the service provider components. The service provider components determine whether the assigned work items may be executed\/performed. If the determination is positive, the service provider components append the work item in the work batch. It is to be understood that by this batching process, the workflow component delays a substantially simultaneous execution of the assigned work items.","The workflow component next creates a transaction containing the batched work items. The workflow component periodically persists the state of the work items by checkpoint the transaction\/work items and stores the state of the work items in the persistent storage. In so doing, the workflow component maintains a consistency of the persisted state of the work items in various transactions. The workflow component commits the transaction by requesting the service provider components to execute\/perform the work items.","In the event that an execution fault occurs, the workflow component abandons the faulted work items. The workflow component continues to complete the execution of non-faulted work items. In one embodiment, the service provider components send a message to the workflow component indicating an execution fault has occurred. Upon recovery from the faulted execution or after completing execution of the non-faulted work items, the workflow component may commit the faulted work items at a later time.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 5","b":["130","130","132","134","136","134","132","136"]},"The computer  typically has at least some form of computer readable media. Computer readable media, which include both volatile and nonvolatile media, removable and non-removable media, may be any available medium that may be accessed by computer . By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. For example, computer storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal, which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media, are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.","The system memory  includes computer storage media in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory. In the illustrated embodiment, system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. For example,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media. FIG. also shows a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that may be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a non-volatile memory interface, such as interface .","The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components may either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into computer  through input devices or user interface selection devices such as a keyboard  and a pointing device  (e.g., a mouse, trackball, pen, or touch pad). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to processing unit  through a user input interface  that is coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video interface . In addition to the monitor , computers often include other peripheral output devices (not shown) such as a printer and speakers, which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. LAN  and\/or WAN  may be a wired network, a wireless network, a combination thereof, and so on. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and global computer networks (e.g., the Internet).","When used in a local area networking environment, computer  is connected to the LAN  through a network interface or adapter . When used in a wide area networking environment, computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device (not shown). By way of example, and not limitation,  illustrates remote application programs  as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.","For purposes of illustration, programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks. It is recognized, however, that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although described in connection with an exemplary computing system environment, including computer , the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover, the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, mobile telephones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","An interface in the context of a software architecture includes a software module, component, code portion, or other sequence of computer-executable instructions. The interface includes, for example, a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include, in one example, application programming interfaces (APIs) such as provided by operating systems, component object model (COM) interfaces (e.g., for peer-to-peer application communication), and extensible markup language metadata interchange format (XMI) interfaces (e.g., for communication between web services).","The interface may be a tightly coupled, synchronous implementation such as in Java 2 Plafform Enterprise Edition (J2EE), COM, or distributed COM (DCOM) examples. Alternatively or in addition, the interface may be a loosely coupled, asynchronous implementation such as in a web service (e.g., using the simple object access protocol). In general, the interface includes any combination of the following characteristics: tightly coupled, loosely coupled, synchronous, and asynchronous. Further, the interface may conform to a standard protocol, a proprietary protocol, or any combination of standard and proprietary protocols.","The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further, the interfaces may include additional or less functionality than illustrated or described herein.","The order of execution or performance of the methods illustrated and described herein is not essential, unless otherwise specified. That is, elements of the methods may be performed in any order, unless otherwise specified, and that the methods may include more or less elements than those disclosed herein. For example, it is contemplated that executing or performing a particular element before, contemporaneously with, or after another element is within the scope of the invention.","When introducing elements of the present invention or the embodiment(s) thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","In view of the above, it will be seen that the several objects of the invention are achieved and other advantageous results attained.","As various changes could be made in the above products and methods without departing from the scope of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.","Workflow Transactional Batching","During execution of an exemplary workflow, runtime calls into its services to do work. For example, a send workflow activity is a call to a messaging service. The messaging service processes the send request and maintains certain state associated with the send. One of the requirements of the transaction\/persistence model is to maintain consistency between states maintained by the different services and workflow runtime. When the workflow reaches a commit point, the runtime invokes the persistence service and hands out its workflow instance state. This instance state and other services work may be batched and committed to durable resource managers (RMs) enlisted in one single transaction.","If Band Bare separate batches of work (e.g., see transaction  and atomic transaction -N in ), at commit point the entire work collection {B, B} needs to be committed in transaction. On failure of the transaction, the requirement is, the work associated with Bshould be thrown away. The work associated with Bshould continue to exist for the subsequent point.","According to an embodiment of the invention, in order to facilitate providers sharing in the same transaction, the Runtime floats a WorkBatch object in its thread call context in all calls to its Services. Services can choose to add work to this batch. For example, a Send method in the messaging service may result in the construction of an object containing ad hoc SQL. The messaging service can then add the object to the WorkBatch. At the schedule's commit point, the messaging service IPendingWork.Complete method is invoked and all of its pending work is handed back to it. The service can then perform whatever actions are appropriate to execute the SQL as part of the transaction.","For example, Namespace:Microsoft.Workflow.Runtime:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public sealed class WorkBatch"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public void Add(IPendingWork work, object workItem);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"An Add method may be used to add pending work items to a work batch. The provider tags work added to the batch with a reference to an object that implements the IPendingWork interface. This object will handle the eventual commit of the work. In the example below, the persistence provider itself implements the IPendingWork interface.","The interface IPendingWork is defined as:",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IPendingWork"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void Commit(ITransaction transaction,IList<object> items);"]},{"entry":[{},"void Complete(bool succeeded, IList<object> items);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In a Commit method, the list of work items are committed to the database using the transaction object.","A Complete method performs necessary cleanup. This method is called by the runtime when it is finished processing the work in the item list. If the work was successfully completed then succeeded=true, otherwise succeeded=false.","Further to this example, the sequence of actions at Commit Point include:","a. The runtime invokes PersistenceService::Save method.","b. The runtime invokes TransactionService::Create method and gets System.ICommitableTransaction","c. The runtime iterates over its work collection and collects all items that reference the same IPendingWork object. It then invokes the Commit method of each unique IPendingWork object one time, passing the Transaction and a list of all of its outstanding work.","d. On success of the Commit notifications, the runtime invokes ICommittableTransaction::Commit","e. On success of the transaction the runtime invokes the Complete method of each unique IPendingWork object one time, passing succeeded=true and a list of all of its outstanding work.","An exemplary sequence of actions on Workflow Fault includes:","a. The runtime, based on workflow model semantics (atomic scopes), decides to abandon IPendingWork objects related to the faulting scope.","b. The runtime invokes the Complete method of each unique IPendingWork with completed status=false for all abandoned work.","c. The runtime maintains reference to any work that its semantics tell it is still valid after recovery from the fault. That work may then be committed at a future persistence point."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
