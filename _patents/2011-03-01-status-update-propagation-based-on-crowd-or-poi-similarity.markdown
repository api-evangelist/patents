---
title: Status update propagation based on crowd or POI similarity
abstract: Systems and methods are provided for following status updates of users. In one embodiment, a requestor selects a crowd of users. In response, one or more crowds of users that match the selected crowd of users to at least a predefined threshold degree are identified. Status updates sent by users in at least one of the one or more matching crowds of users are then delivered to the requestor. In another embodiment, a requestor selects a Point of Interest (POI). In response, one or more POIs that match the selected POI to at least a predefined threshold degree are identified. Status updates sent by users located at one or more POIs of the one or more matching POIs are delivered to the requestor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898288&OS=08898288&RS=08898288
owner: Waldeck Technology, LLC
number: 08898288
owner_city: Wilmington
owner_country: US
publication_date: 20110301
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE DISCLOSURE","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of provisional patent application Ser. No. 61\/309,903, filed Mar. 3, 2010, the disclosure of which is hereby incorporated herein by reference in its entirety.","The present disclosure relates to status updates and more specifically relates to following status updates sent by users in crowds that match a select crowd and\/or following status updates sent by users at a Point of Interest (POI) that matches a select POI.","Services such as the Twitter\u00ae micro-blogging and social networking service and the Yammer\u00ae micro-blogging and social networking service provide users the ability to easily provide status updates (e.g., answer a simple question such as \u201cwhat are you doing right now?\u201d or \u201cwhat are you working on right now?\u201d). These services also allow other people to \u201cfollow\u201d specific users in which they are interested to thereby receive status updates sent by those users. One issue with these services is that when the follower-followee graph becomes large and sparse, it is very difficult for users to sort the status updates by importance and\/or relevance.","The recent release of the Twitter\u00ae Geo Application Programming Interface (API), which allows status updates to be tagged with the latitude\/longitude from which the status updates were sent, creates an opportunity to view, search, and organize status updates via location. However, viewing status updates by location, for example within a set of map boundaries, still suffers from not being able to effectively organize all of the potentially relevant status updates available to the user. A map-based status update query will generally show too many irrelevant status updates within the map boundary and no status updates sent from locations beyond the map boundary regardless of their relevance. As such, there is a need for a system and method that enables users to obtain relevant status updates.","The present disclosure provides systems and methods for following status updates of users. In one embodiment, a requestor selects a crowd of users. In response, one or more crowds of users that match the selected crowd of users to at least a predefined threshold degree are identified. Status updates sent by users in at least one of the one or more matching crowds of users are then delivered to the requestor. In another embodiment, a requestor selects a Point of Interest (POI). In response, one or more POIs that match the selected POI to at least a predefined threshold degree are identified. Status updates sent by users located at one or more POIs of the one or more matching POIs are delivered to the requestor. In one embodiment, the status updates sent by the users at the one or more POIs and delivered to the requestor are status updates sent by users in one or more crowds of users located at the one or more POIs.","Those skilled in the art will appreciate the scope of the present disclosure and realize additional aspects thereof after reading the following detailed description of the preferred embodiments in association with the accompanying drawing figures.","The embodiments set forth below represent the necessary information to enable those skilled in the art to practice the embodiments and illustrate the best mode of practicing the embodiments. Upon reading the following description in light of the accompanying drawing figures, those skilled in the art will understand the concepts of the disclosure and will recognize applications of these concepts not particularly addressed herein. It should be understood that these concepts and applications fall within the scope of the disclosure and the accompanying claims.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["10","10","10","10","12","14","16","18","1","18","18","18","20","1","20","20","20","22","24","26","28","28","28","28","18","28"]},"As discussed below in detail, the MAP server  operates to obtain current locations, including location updates, and user profiles of the users  of the mobile devices . The current locations of the users  can be expressed as positional geographic coordinates such as latitude-longitude pairs, and a height vector (if applicable), or any other similar information capable of identifying a given physical point in space in a two-dimensional or three-dimensional coordinate system. Using the current locations and user profiles of the users , the MAP server  is enabled to provide a number of features such as, but not limited to, forming crowds of users using current locations and\/or user profiles of the users , generating aggregate profiles for crowds of users, and tracking crowds. Note that while the MAP server  is illustrated as a single server for simplicity and ease of discussion, it should be appreciated that the MAP server  may be implemented as a single physical server or multiple physical servers operating in a collaborative manner for purposes of redundancy and\/or load sharing.","In general, the one or more profile servers  operate to store user profiles for a number of persons including the users  of the mobile devices . For example, the one or more profile servers  may be servers providing social network services such as the Facebook\u00ae social networking service, the MySpace\u00ae social networking service, the LinkedIN\u00ae social networking service, or the like. As discussed below, using the one or more profile servers , the MAP server  is enabled to directly or indirectly obtain the user profiles of the users  of the mobile devices . The location server  generally operates to receive location updates from the mobile devices  and make the location updates available to entities such as, for instance, the MAP server . In one exemplary embodiment, the location server  is a server operating to provide Yahoo!'s FireEagle service.","The mobile devices  may be mobile smart phones, portable media player devices, mobile gaming devices, or the like. Some exemplary mobile devices that may be programmed or otherwise configured to operate as the mobile devices  are the Apple\u00ae iPhone\u00ae, the Palm Pre\u00ae, the Samsung Rogue\u2122, the Blackberry Storm\u2122, the Motorola Droid or similar phone running Google's Android\u2122 Operating System, an Apple\u00ae iPad\u00ae, and the Apple\u00ae iPod Touch\u00ae device. However, this list of exemplary mobile devices is not exhaustive and is not intended to limit the scope of the present disclosure.","The mobile devices - through -N include MAP clients - through -N (generally referred to herein collectively as MAP clients  or individually as MAP client ), MAP applications - through -N (generally referred to herein collectively as MAP applications  or individually as MAP application ), third-party applications - through -N (generally referred to herein collectively as third-party applications  or individually as third-party application ), and location functions - through -N (generally referred to herein collectively as location functions  or individually as location function ), respectively. The MAP client  is preferably implemented in software. In general, in the preferred embodiment, the MAP client  is a middleware layer operating to interface an application layer (i.e., the MAP application  and the third-party applications ) to the MAP server . More specifically, the MAP client  enables the MAP application  and the third-party applications  to request and receive data from the MAP server . In addition, the MAP client  enables applications, such as the MAP application  and the third-party applications , to access data from the MAP server .","The MAP application  is also preferably implemented in software. The MAP application  generally provides a user interface component between the user  and the MAP server . More specifically, among other things, the MAP application  enables the user  to initiate requests for crowd data from the MAP server  and present corresponding crowd data returned by the MAP server  to the user  as well as enable the user  to follow status updates sent by users in desired crowds and\/or status updates sent by users at desired POIs. The MAP application  also enables the user  to configure various settings. For example, the MAP application  may enable the user  to select a desired social networking service (e.g., Facebook\u00ae, MySpace\u00ae, LinkedIN\u00ae, etc.) from which to obtain the user profile of the user  and provide any necessary credentials (e.g., username and password) needed to access the user profile from the social networking service.","The third-party applications  are preferably implemented in software. The third-party applications  operate to access the MAP server  via the MAP client . The third-party applications  may utilize data obtained from the MAP server  in any desired manner. As an example, one of the third-party applications  may be a gaming application that utilizes crowd data to notify the user  of POIs or Areas of Interest (AOIs) where crowds of interest are currently located. It should be noted that while the MAP client  is illustrated as being separate from the MAP application  and the third-party applications , the present disclosure is not limited thereto. The functionality of the MAP client  may alternatively be incorporated into the MAP application  and the third-party applications .","The location function  may be implemented in hardware, software, or a combination thereof. In general, the location function  operates to determine or otherwise obtain the location of the mobile device . For example, the location function  may be, or include, a Global Positioning System (GPS) receiver. In addition or alternatively, the location function  may include hardware and\/or software that enables improved location tracking in indoor environments such as, for example, shopping malls. For example, the location function  may be part of, or compatible with, the InvisiTrack Location System provided by InvisiTrack and described in U.S. Pat. No. 7,423,580 entitled \u201cMethod and System of Three-Dimensional Positional Finding\u201d which issued on Sep. 9, 2008, U.S. Pat. No. 7,787,886 entitled \u201cSystem and Method for Locating a Target using RFID\u201d which issued on Aug. 31, 2010, and U.S. Patent Application Publication No. 2007\/0075898 entitled \u201cMethod and System for Positional Finding Using RF, Continuous and\/or Combined Movement\u201d which published on Apr. 5, 2007, all of which are hereby incorporated herein by reference for their teachings regarding location tracking.","The subscriber device  is a physical device such as a personal computer, a mobile computer (e.g., a notebook computer, a netbook computer, a tablet computer, etc.), a mobile smart phone, or the like. The subscriber  associated with the subscriber device  is a person or entity. In general, the subscriber device  enables the subscriber  to access the MAP server  via a web browser  to obtain various types of data, preferably for a fee. For example, the subscriber  may pay a fee to have access to crowd data such as aggregate profiles for crowds located at one or more POIs and\/or located in one or more AOIs, pay a fee to track crowds, or the like. Note that the web browser  is exemplary. In another embodiment, the subscriber device  is enabled to access the MAP server  via a custom application.","Lastly, the status update service  is a service that enables the users  to send and receive status updates. As used herein, a status update is a message provided by a user for publication via a status update, or micro-blogging, service such as, for example, the Twitter\u00ae micro-blogging and social networking service or the Facebook\u00ae social networking service. The status update may include a text-based status update, an audio status update, a video status update, an image status update, or any combination thereof. As an example, a status update may be a tweet provided by a user of the Twitter\u00ae micro-blogging and social networking service or a post made by a user of the Facebook\u00ae social networking service, which are two exemplary status update services. As discussed below in detail, requestors (e.g., the users  or the subscriber ) are enabled to follow status updates from the users  in desired crowds of users and\/or follow status updates from the users  at desired POIs or the users  in crowds of users at desired POIs.","Before proceeding, it should be noted that while the system  of  illustrates an embodiment where the one or more profile servers , the location server , and the status update service  are separate from the MAP server , the present disclosure is not limited thereto. In an alternative embodiment, the functionality of the one or more profile servers , the location server , and\/or the status update service  may be implemented within the MAP server . Further, while the profile servers , the location server , and the status update service  are separate in the embodiment of , in another embodiment, the functionality of the profile servers , the location server , and\/or the status update service  may be implemented in a single service.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 1"],"b":["12","12","40","42","44","40","46","48","50","46","24","12","48","12","30","18","50","26","12"]},"The business logic layer  includes a profile manager , a location manager , a crowd analyzer , an aggregation engine , a matching function , and a status update function  each of which is preferably implemented in software. The profile manager  generally operates to obtain the user profiles of the users  directly or indirectly from the one or more profile servers  and store the user profiles in the persistence layer . The location manager  operates to obtain the current locations of the users  including location updates. As discussed below, the current locations of the users  may be obtained directly from the mobile devices  and\/or obtained from the location server .","The crowd analyzer  operates to form crowds of users. In one embodiment, the crowd analyzer  utilizes a spatial crowd formation algorithm. However, the present disclosure is not limited thereto. In addition, the crowd analyzer  may further characterize crowds to reflect degree of fragmentation, best-case and worst-case degree of separation (DOS), and\/or degree of bidirectionality. Still further, the crowd analyzer  may also operate to track crowds. The aggregation engine  generally operates to provide aggregate profile data. The aggregate profile data may be aggregate profile data for crowd(s) of users. For additional information regarding the operation of the profile manager , the location manager , the crowd analyzer , and the aggregation engine , the interested reader is directed to U.S. Patent Application Publication No. 2010\/0198828, entitled FORMING CROWDS AND PROVIDING ACCESS TO CROWD DATA IN A MOBILE ENVIRONMENT, which published on Aug. 5, 2010; U.S. Patent Application Publication No. 2010\/0197318, entitled ANONYMOUS CROWD TRACKING, which published on Aug. 5, 2010; U.S. Patent Application Publication No. 2010\/0198826, entitled MAINTAINING A HISTORICAL RECORD OF ANONYMIZED USER PROFILE DATA BY LOCATION FOR USERS IN A MOBILE ENVIRONMENT, which published on Aug. 5, 2010; U.S. Patent Application Publication No. 2010\/0198917, entitled CROWD FORMATION FOR MOBILE DEVICE USERS, which published on Aug. 5, 2010; U.S. Patent Application Publication No. 2010\/0198870, entitled SERVING A REQUEST FOR DATA FROM A HISTORICAL RECORD OF ANONYMIZED USER PROFILE DATA IN A MOBILE ENVIRONMENT, which published on Aug. 5, 2010; U.S. Patent Application Publication No. 2010\/0198862, entitled HANDLING CROWD REQUESTS FOR LARGE GEOGRAPHIC AREAS, which published on Aug. 5, 2010; and U.S. Patent Application Publication No. 2010\/0197319, entitled MODIFYING A USER'S CONTRIBUTION TO AN AGGREGATE PROFILE BASED ON TIME BETWEEN LOCATION UPDATES AND EXTERNAL EVENTS, which published on Aug. 5, 2010; all of which have been incorporated herein by reference in their entireties.","As discussed below in detail, the matching function  and the status update function  enable requestors, such as but not limited to the users  and the subscriber , to follow status updates from users in desired crowds of users and\/or follow status updates from users at desired POIs. In general, in one embodiment, one or more crowds that match a select crowd of users are identified on behalf of a requestor. Status updates sent by users in one or more of these matching crowds are obtained and returned to the requestor. In another embodiment, one or more POIs that match a select POI are identified on behalf of a requestor. Status updates sent by users at one or more of these matching POIs are obtained and returned to the requestor. The status updates from users at one or more of the matching POIs may be status updates from users in one or more crowds of users located at the one or more matching POIs. Alternatively, the status updates from users at one or more of the matching POIs may be status updates from any users at the one or more matching POIs.","The persistence layer  includes an object mapping layer  and a datastore . The object mapping layer  is preferably implemented in software. The datastore  is preferably a relational database, which is implemented in a combination of hardware (i.e., physical data storage hardware) and software (i.e., relational database software). In this embodiment, the business logic layer  is implemented in an object-oriented programming language such as, for example, Java. As such, the object mapping layer  operates to map objects used in the business logic layer  to relational database entities stored in the datastore . Note that, in one embodiment, data is stored in the datastore  in a Resource Description Framework (RDF) compatible format.","In an alternative embodiment, rather than being a relational database, the datastore  may be implemented as an RDF datastore. More specifically, the RDF datastore may be compatible with RDF technology adopted by Semantic Web activities. Namely, the RDF datastore may use the Friend-Of-A-Friend (FOAF) vocabulary for describing people, their social networks, and their interests. In this embodiment, the MAP server  may be designed to accept raw FOAF files describing persons, their friends, and their interests. These FOAF files are currently output by some social networking services such as LiveJournal\u00ae and Facebook\u00ae. The MAP server  may then persist RDF descriptions of the users  as a proprietary extension of the FOAF vocabulary that includes additional properties desired for the system .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 1"],"b":["30","30","66","68","70","66","32","34","30","68","30","32","34","18","12","70","30","12"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 1"],"b":["10","20","18","12","20","18","1000","18","14","1000","12","1000","12","14","1000","20","12","14","14","12","1000","14","30","18","1000"]},"At some point after authentication is complete, a user profile process is performed such that a user profile of the user  is obtained from the profile server  and delivered to the MAP server  (step ). In this embodiment, the MAP client  of the mobile device  sends a profile request to the profile server  (step A). In response, the profile server  returns the user profile of the user  to the mobile device  (step B). The MAP client  of the mobile device  then sends the user profile of the user  to the MAP server  (step C). Note that while in this embodiment the MAP client  sends the complete user profile of the user  to the MAP server , in an alternative embodiment, the MAP client  may filter the user profile of the user  according to criteria specified by the user . For example, the user profile of the user  may include demographic information, general interests, music interests, and movie interests, and the user  may specify that the demographic information or some subset thereof is to be filtered, or removed, before sending the user profile to the MAP server .","Upon receiving the user profile of the user  from the MAP client  of the mobile device , the profile manager  of the MAP server  processes the user profile (step D). More specifically, in the preferred embodiment, the profile manager  includes social network handlers for the social network services supported by the MAP server  that operate to map the user profiles of the users  obtained from the social network services to a common format utilized by the MAP server . This common format includes a number of user profile categories, or user profile slices, such as, for example, a demographic profile category, a social interaction profile category, a general interests category, a music interests profile category, and a movie interests profile category. For example, if the MAP server  supports user profiles from Facebook\u00ae, MySpace\u00ae, and LinkedIN\u00ae, the profile manager  may include a Facebook handler, a MySpace handler, and a LinkedIN handler. The social network handlers process user profiles from the corresponding social network services to generate user profiles for the users  in the common format used by the MAP server . For this example assume that the user profile of the user  is from Facebook\u00ae. The profile manager  uses a Facebook handler to process the user profile of the user  to map the user profile of the user  from Facebook\u00ae to a user profile for the user  for the MAP server  that includes lists of keywords for a number of predefined profile categories, or profile slices, such as, for example, a demographic profile category, a social interaction profile category, a general interests profile category, a music interests profile category, and a movie interests profile category. As such, the user profile of the user  from Facebook\u00ae may be processed by the Facebook handler of the profile manager  to create a list of keywords such as, for example, liberal, High School Graduate, 35-44, College Graduate, etc. for the demographic profile category; a list of keywords such as Seeking Friendship for the social interaction profile category; a list of keywords such as politics, technology, photography, books, etc. for the general interests profile category; a list of keywords including music genres, artist names, album names, or the like for the music interests profile category; and a list of keywords including movie titles, actor or actress names, director names, movie genres, or the like for the movie interests profile category. In one embodiment, the profile manager  may use natural language processing or semantic analysis. For example, if the Facebook\u00ae user profile of the user  states that the user  is 20 years old, semantic analysis may result in the keyword of 18-24 years old being stored in the user profile of the user  for the MAP server .","After processing the user profile of the user , the profile manager  of the MAP server  stores the resulting user profile for the user  (step E). More specifically, in one embodiment, the MAP server  stores user records for the users  in the datastore  (). The user profile of the user  is stored in the user record of the user . The user record of the user  includes a unique identifier of the user , the user profile of the user , and, as discussed below, a current location of the user . Note that the user profile of the user  may be updated as desired. For example, in one embodiment, the user profile of the user  is updated by repeating step  each time the user  activates the MAP application .","Note that while the discussion herein focuses on an embodiment where the user profiles of the users  are obtained from the one or more profile servers , the user profiles of the users  may be obtained in any desired manner. For example, in one alternative embodiment, the user  may identify one or more favorite websites. The profile manager  of the MAP server  may then crawl the one or more favorite websites of the user  to obtain keywords appearing in the one or more favorite websites of the user . These keywords may then be stored as the user profile of the user .","At some point, a process is performed such that a current location of the mobile device  and thus a current location of the user  is obtained by the MAP server  (step ). In this embodiment, the MAP application  of the mobile device  obtains the current location of the mobile device  from the location function  of the mobile device . The MAP application  then provides the current location of the mobile device  to the MAP client , and the MAP client  then provides the current location of the mobile device  to the MAP server  (step A). Note that step A may be repeated periodically or in response to a change in the current location of the mobile device  in order for the MAP application  to provide location updates for the user  to the MAP server .","In response to receiving the current location of the mobile device , the location manager  of the MAP server  stores the current location of the mobile device  as the current location of the user  (step B). More specifically, in one embodiment, the current location of the user  is stored in the user record of the user  maintained in the datastore  of the MAP server . Note that, in the preferred embodiment, only the current location of the user  is stored in the user record of the user . In this manner, the MAP server  maintains privacy for the user  since the MAP server  does not maintain a historical record of the location of the user . Any historical data maintained by the MAP server  is preferably anonymized in order to maintain the privacy of the users .","In addition to storing the current location of the user , the location manager  sends the current location of the user  to the location server  (step C). In this embodiment, by providing location updates to the location server , the MAP server  in return receives location updates for the user  from the location server . This is particularly beneficial when the mobile device  does not permit background processes. If the mobile device  does not permit background processes, the MAP application  will not be able to provide location updates for the user  to the MAP server  unless the MAP application  is active. Therefore, when the MAP application  is not active, other applications running on the mobile device  (or some other device of the user ) may directly or indirectly provide location updates to the location server  for the user . This is illustrated in step  where the location server  receives a location update for the user  directly or indirectly from another application running on the mobile device  or an application running on another device of the user  (step A). The location server  then provides the location update for the user  to the MAP server  (step B). In response, the location manager  updates and stores the current location of the user  in the user record of the user  (step C). In this manner, the MAP server  is enabled to obtain location updates for the user  even when the MAP application  is not active at the mobile device .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 5","FIG. 1"],"b":["10","20","18","12","20","18","1100","18","12","1100","12","14","1100","20","12","14","14","12","1100","12","30","18","1100"]},"At some point after authentication is complete, a user profile process is performed such that a user profile of the user  is obtained from the profile server  and delivered to the MAP server  (step ). In this embodiment, the profile manager  of the MAP server  sends a profile request to the profile server  (step A). In response, the profile server  returns the user profile of the user  to the profile manager  of the MAP server  (step B). Note that while in this embodiment the profile server  returns the complete user profile of the user  to the MAP server , in an alternative embodiment, the profile server  may return a filtered version of the user profile of the user  to the MAP server . The profile server  may filter the user profile of the user  according to criteria specified by the user . For example, the user profile of the user  may include demographic information, general interests, music interests, and movie interests, and the user  may specify that the demographic information or some subset thereof is to be filtered, or removed, before sending the user profile to the MAP server .","Upon receiving the user profile of the user , the profile manager  of the MAP server  processes the user profile (step C). More specifically, as discussed above, in the preferred embodiment, the profile manager  includes social network handlers for the social network services supported by the MAP server . The social network handlers process user profiles to generate user profiles for the MAP server  that include lists of keywords for each of a number of profile categories, or profile slices.","After processing the user profile of the user , the profile manager  of the MAP server  stores the resulting user profile for the user  (step D). More specifically, in one embodiment, the MAP server  stores user records for the users  in the datastore  (). The user profile of the user  is stored in the user record of the user . The user record of the user  includes a unique identifier of the user , the user profile of the user , and, as discussed below, a current location of the user . Note that the user profile of the user  may be updated as desired. For example, in one embodiment, the user profile of the user  is updated by repeating step  each time the user  activates the MAP application .","Note that while the discussion herein focuses on an embodiment where the user profiles of the users  are obtained from the one or more profile servers , the user profiles of the users  may be obtained in any desired manner. For example, in one alternative embodiment, the user  may identify one or more favorite websites. The profile manager  of the MAP server  may then crawl the one or more favorite websites of the user  to obtain keywords appearing in the one or more favorite websites of the user . These keywords may then be stored as the user profile of the user .","At some point, a process is performed such that a current location of the mobile device  and thus a current location of the user  is obtained by the MAP server  (step ). In this embodiment, the MAP application  of the mobile device  obtains the current location of the mobile device  from the location function  of the mobile device . The MAP application  then provides the current location of the user  of the mobile device  to the location server  (step A). Note that step A may be repeated periodically or in response to changes in the location of the mobile device  in order to provide location updates for the user  to the MAP server . The location server  then provides the current location of the user  to the MAP server  (step B). The location server  may provide the current location of the user  to the MAP server  automatically in response to receiving the current location of the user  from the mobile device  or in response to a request from the MAP server .","In response to receiving the current location of the mobile device , the location manager  of the MAP server  stores the current location of the mobile device  as the current location of the user  (step C). More specifically, in one embodiment, the current location of the user  is stored in the user record of the user  maintained in the datastore  of the MAP server . Note that, in the preferred embodiment, only the current location of the user  is stored in the user record of the user . In this manner, the MAP server  maintains privacy for the user  since the MAP server  does not maintain a historical record of the location of the user . As discussed below in detail, historical data maintained by the MAP server  is preferably anonymized in order to maintain the privacy of the users .","As discussed above, the use of the location server  is particularly beneficial when the mobile device  does not permit background processes. As such, if the mobile device  does not permit background processes, the MAP application  will not provide location updates for the user  to the location server  unless the MAP application  is active. However, other applications running on the mobile device  (or some other device of the user ) may provide location updates to the location server  for the user  when the MAP application  is not active. This is illustrated in step  where the location server  receives a location update for the user  from another application running on the mobile device  or an application running on another device of the user  (step A). The location server  then provides the location update for the user  to the MAP server  (step B). In response, the location manager  updates and stores the current location of the user  in the user record of the user  (step C). In this manner, the MAP server  is enabled to obtain location updates for the user  even when the MAP application  is not active at the mobile device .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 6","FIG. 6"],"b":["56","56"]},"First, the crowd analyzer  establishes a bounding box for the crowd formation process (step ). Note that while a bounding box is used in this example, other geographic shapes may be used to define a bounding region for the crowd formation process (e.g., a bounding circle). In one embodiment, if crowd formation is performed in response to a specific request, the bounding box is established based on the POI or the AOI of the request. If the request is for a POI, then the bounding box is a geographic area of a predetermined size centered at the POI. If the request is for an AOI, the bounding box is the AOI. Alternatively, if the crowd formation process is performed proactively, the bounding box is a bounding box of a predefined size.","The crowd analyzer  then creates a crowd for each individual user in the bounding box (step ). More specifically, the crowd analyzer  queries the datastore  of the MAP server  to identify users currently located within the bounding box. Then, a crowd of one user is created for each user currently located within the bounding box. Next, the crowd analyzer  determines the two closest crowds in the bounding box (step ) and determines a distance between the two crowds (step ). The distance between the two crowds is a distance between crowd centers of the two crowds. Note that the crowd center of a crowd of one is the current location of the user in the crowd. The crowd analyzer  then determines whether the distance between the two crowds is less than an optimal inclusion distance (step ). In this embodiment, the optimal inclusion distance is a predefined static distance. If the distance between the two crowds is less than the optimal inclusion distance, the crowd analyzer  combines the two crowds (step ) and computes a new crowd center for the resulting crowd (step ). The crowd center may be computed based on the current locations of the users in the crowd using a center of mass algorithm. At this point the process returns to step  and is repeated until the distance between the two closest crowds is not less than the optimal inclusion distance. At that point, the crowd analyzer  discards any crowds with less than three users (step ). Note that throughout this disclosure crowds are only maintained if the crowds include three or more users. However, while three users is the preferred minimum number of users in a crowd, the present disclosure is not limited thereto. The minimum number of users in a crowd may be defined as any number greater than or equal to two users.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIGS. 7A through 7D","FIG. 6","FIGS. 7A through 7D","FIG. 7A","FIG. 7B","FIG. 7C","FIG. 7D"],"b":["72","56","74","82","72","74","82","74","82","56","76","78","76","78","76","78","78","76","76","56","74","76","56","74","76","56","74","76","74","76","76","56","80","82","76"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIGS. 8A through 8D","b":["20","20","56","20","1300","56","20","1302","20","56","20","1304","20","1306","20","1300","20"]},"Next, the crowd analyzer  determines whether the new and old bounding boxes overlap (step ). If so, the crowd analyzer  creates a bounding box encompassing the new and old bounding boxes (step ). For example, if the new and old bounding boxes are 40\u00d740 meter regions and a 1\u00d71 meter square at the northeast corner of the new bounding box overlaps a 1\u00d71 meter square at the southwest corner of the old bounding box, the crowd analyzer  may create a 79\u00d779 meter square bounding box encompassing both the new and old bounding boxes.","The crowd analyzer  then determines the individual users and crowds relevant to the bounding box created in step  (step ). The crowds relevant to the bounding box are crowds that are within or overlap the bounding box (e.g., have at least one user located within the bounding box). The individual users relevant to the bounding box are users that are currently located within the bounding box and not already part of a crowd. Next, the crowd analyzer  computes an optimal inclusion distance for individual users based on user density within the bounding box (step ). More specifically, in one embodiment, the optimal inclusion distance for individuals, which is also referred to herein as an initial optimal inclusion distance, is set according to the following equation:",{"@attributes":{"id":"p-0070","num":"0069"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mrow":[{"mi":["initial_optimal","_inclusion","_dist"],"mo":["\u2062","\u2062"]},{"mi":"a","mo":"\u00b7","msqrt":{"mfrac":{"msub":{"mi":"A","mrow":{"mi":["Bounding","Box"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mrow":{"mi":["number_of","_users"],"mo":"\u2062"}}}}],"mo":"="},"mo":","}},{"mrow":{"mi":"Eqn","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mn":"1"}}}]}}}},"br":{},"sub":"BoundingBox "},"The crowd analyzer  then creates a crowd for each individual user within the bounding box that is not already included in a crowd and sets the optimal inclusion distance for the crowds to the initial optimal inclusion distance (step ). At this point, the process proceeds to  where the crowd analyzer  analyzes the crowds relevant to the bounding box to determine whether any of the crowd members (i.e., users in the crowds) violate the optimal inclusion distance of their crowds (step ). Any crowd member that violates the optimal inclusion distance of his or her crowd is then removed from that crowd (step ). The crowd analyzer  then creates a crowd of one user for each of the users removed from their crowds in step  and sets the optimal inclusion distance for the newly created crowds to the initial optimal inclusion distance (step ).","Next, the crowd analyzer  determines the two closest crowds for the bounding box (step ) and a distance between the two closest crowds (step ). The distance between the two closest crowds is the distance between the crowd centers of the two closest crowds. The crowd analyzer  then determines whether the distance between the two closest crowds is less than the optimal inclusion distance of a larger of the two closest crowds (step ). If the two closest crowds are of the same size (i.e., have the same number of users), then the optimal inclusion distance of either of the two closest crowds may be used. Alternatively, if the two closest crowds are of the same size, the optimal inclusion distances of both of the two closest crowds may be used such that the crowd analyzer  determines whether the distance between the two closest crowds is less than the optimal inclusion distances of both of the two closest crowds. As another alternative, if the two closest crowds are of the same size, the crowd analyzer  may compare the distance between the two closest crowds to an average of the optimal inclusion distances of the two closest crowds.","If the distance between the two closest crowds is not less than the optimal inclusion distance, then the process proceeds to step . Otherwise, the two closest crowds are combined or merged (step ), and a new crowd center for the resulting crowd is computed (step ). Again, a center of mass algorithm may be used to compute the crowd center of a crowd. In addition, a new optimal inclusion distance for the resulting crowd is computed (step ). In one embodiment, the new optimal inclusion distance for the resulting crowd is computed as:",{"@attributes":{"id":"p-0074","num":"0073"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":{"mi":"average","mo":"=","mrow":{"mfrac":{"mn":"1","mrow":{"mi":"n","mo":"+","mn":"1"}},"mo":"\u00b7","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mi":["initial_optimal","_inclusion","_dist"],"mo":["\u2062","\u2062"]},{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","msub":{"mi":["d","i"]}}],"mo":"+"}}}},"mo":","}},{"mrow":{"mi":"Eqn","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mn":"2"}}}]},{"mtd":[{"mrow":{"mrow":[{"mi":["optimal_inclusion","_dist"],"mo":"\u2062"},{"mi":"average","mo":"+","msqrt":{"mrow":{"mo":["(",")"],"mrow":{"mfrac":{"mn":"1","mi":"n"},"mo":"\u00b7","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","msup":{"mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["d","i"]},"mo":"-","mi":"average"}},"mn":"2"}}}}}}],"mo":"="}},{"mrow":{"mi":"Eqn","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mn":"3"}}}]}]}}},"br":{},"sub":"i "},"At this point, the crowd analyzer  determines whether a maximum number of iterations have been performed (step ). The maximum number of iterations is a predefined number that ensures that the crowd formation process does not indefinitely loop over steps  through  or loop over steps  through  more than a desired maximum number of times. If the maximum number of iterations has not been reached, the process returns to step  and is repeated until either the distance between the two closest crowds is not less than the optimal inclusion distance of the larger crowd or the maximum number of iterations has been reached. At that point, the crowd analyzer  discards crowds with less than three users, or members (step ) and the process ends.","Returning to step  in , if the new and old bounding boxes do not overlap, the process proceeds to  and the bounding box to be processed is set to the old bounding box (step ). In general, the crowd analyzer  then processes the old bounding box in much the same manner as described above with respect to steps  through . More specifically, the crowd analyzer  determines the individual users and crowds relevant to the bounding box (step ). The crowds relevant to the bounding box are crowds that are within or overlap the bounding box (e.g., have at least one user located within the bounding box). The individual users relevant to the bounding box are users that are currently located within the bounding box and not already part of a crowd. Next, the crowd analyzer  computes an optimal inclusion distance for individual users based on user density within the bounding box (step ). More specifically, in one embodiment, the optimal inclusion distance for individuals, which is also referred to herein as an initial optimal inclusion distance, is set according to the following equation:",{"@attributes":{"id":"p-0077","num":"0076"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mrow":[{"mi":["initial_optimal","_inclusion","_dist"],"mo":["\u2062","\u2062"]},{"mi":"a","mo":"\u00b7","msqrt":{"mfrac":{"msub":{"mi":"A","mrow":{"mi":["Bounding","Box"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mrow":{"mi":["number_of","_users"],"mo":"\u2062"}}}}],"mo":"="},"mo":","}},{"mrow":{"mi":"Eqn","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mn":"4"}}}]}}}},"br":{},"sub":"BoundingBox "},"The crowd analyzer  then creates a crowd of one user for each individual user within the bounding box that is not already included in a crowd and sets the optimal inclusion distance for the crowds to the initial optimal inclusion distance (step ). At this point, the crowd analyzer  analyzes the crowds for the bounding box to determine whether any crowd members (i.e., users in the crowds) violate the optimal inclusion distance of their crowds (step ). Any crowd member that violates the optimal inclusion distance of his or her crowd is then removed from that crowd (step ). The crowd analyzer  then creates a crowd of one user for each of the users removed from their crowds in step  and sets the optimal inclusion distance for the newly created crowds to the initial optimal inclusion distance (step ).","Next, the crowd analyzer  determines the two closest crowds in the bounding box (step ) and a distance between the two closest crowds (step ). The distance between the two closest crowds is the distance between the crowd centers of the two closest crowds. The crowd analyzer  then determines whether the distance between the two closest crowds is less than the optimal inclusion distance of a larger of the two closest crowds (step ). If the two closest crowds are of the same size (i.e., have the same number of users), then the optimal inclusion distance of either of the two closest crowds may be used. Alternatively, if the two closest crowds are of the same size, the optimal inclusion distances of both of the two closest crowds may be used such that the crowd analyzer  determines whether the distance between the two closest crowds is less than the optimal inclusion distances of both of the two closest crowds. As another alternative, if the two closest crowds are of the same size, the crowd analyzer  may compare the distance between the two closest crowds to an average of the optimal inclusion distances of the two closest crowds.","If the distance between the two closest crowds is not less than the optimal inclusion distance, the process proceeds to step . Otherwise, the two closest crowds are combined or merged (step ), and a new crowd center for the resulting crowd is computed (step ). Again, a center of mass algorithm may be used to compute the crowd center of a crowd. In addition, a new optimal inclusion distance for the resulting crowd is computed (step ). As discussed above, in one embodiment, the new optimal inclusion distance for the resulting crowd is computed as:",{"@attributes":{"id":"p-0081","num":"0080"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":{"mi":"average","mo":"=","mrow":{"mfrac":{"mn":"1","mrow":{"mi":"n","mo":"+","mn":"1"}},"mo":"\u00b7","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mi":["initial_optimal","_inclusion","_dist"],"mo":["\u2062","\u2062"]},{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","msub":{"mi":["d","i"]}}],"mo":"+"}}}},"mo":","}},{"mrow":{"mi":"Eqn","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mn":"5"}}}]},{"mtd":[{"mrow":{"mrow":[{"mi":["optimal_inclusion","_dist"],"mo":"\u2062"},{"mi":"average","mo":"+","msqrt":{"mrow":{"mo":["(",")"],"mrow":{"mfrac":{"mn":"1","mi":"n"},"mo":"\u00b7","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","msup":{"mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["d","i"]},"mo":"-","mi":"average"}},"mn":"2"}}}}}}],"mo":"="}},{"mrow":{"mi":"Eqn","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mn":"6"}}}]}]}}},"br":{},"sub":"i "},"At this point, the crowd analyzer  determines whether a maximum number of iterations have been performed (step ). If the maximum number of iterations has not been reached, the process returns to step  and is repeated until either the distance between the two closest crowds is not less than the optimal inclusion distance of the larger crowd or the maximum number of iterations has been reached. At that point, the crowd analyzer  discards crowds with less than three users, or members (step ). The crowd analyzer  then determines whether the crowd formation process for the new and old bounding boxes is done (step ). In other words, the crowd analyzer  determines whether both the new and old bounding boxes have been processed. If not, the bounding box is set to the new bounding box (step ), and the process returns to step  and is repeated for the new bounding box. Once both the new and old bounding boxes have been processed, the crowd formation process ends.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIGS. 9A through 9D","FIGS. 8A through 8D","FIG. 9A","FIG. 9B"],"b":["56","84","84","56","84","84","86","84","56","88","92","88","92","56","84"]},"The crowd analyzer  then identifies the two closest crowds  and  in the new bounding box  and determines a distance between the two closest crowds  and . In this example, the distance between the two closest crowds  and  is less than the optimal inclusion distance. As such, the two closest crowds  and  are merged and a new crowd center and new optimal inclusion distance are computed, as illustrated in . The crowd analyzer  then repeats the process such that the two closest crowds  and  in the new bounding box  are again merged, as illustrated in . At this point, the distance between the two closest crowds  and  is greater than the appropriate optimal inclusion distance. As such, the crowd formation process is complete.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIGS. 10A through 10F","FIGS. 8A through 8D","FIG. 10A"],"b":["56","56","94","96","98","94","100","96"]},"Since the old bounding box  and the new bounding box  overlap, the crowd analyzer  creates a bounding box  that encompasses both the old bounding box  and the new bounding box , as illustrated in . In addition, the crowd analyzer  creates crowds  through  for individual users currently located within the bounding box . The optimal inclusion distances of the crowds  through  are set to the initial optimal inclusion distance computed by the crowd analyzer  based on the density of users in the bounding box .","Next, the crowd analyzer  analyzes the crowds , , and  through  to determine whether any members of the crowds , , and  through  violate the optimal inclusion distances of the crowds , , and  through . In this example, as a result of the user leaving the crowd  and moving to his new location, both of the remaining members of the crowd  violate the optimal inclusion distance of the crowd . As such, the crowd analyzer  removes the remaining users from the crowd  and creates crowds  and  of one user each for those users, as illustrated in .","The crowd analyzer  then identifies the two closest crowds in the bounding box , which in this example are the crowds  and . Next, the crowd analyzer  computes a distance between the two crowds  and . In this example, the distance between the two crowds  and  is less than the initial optimal inclusion distance and, as such, the two crowds  and  are combined. In this example, crowds are combined by merging the smaller crowd into the larger crowd. Since the two crowds  and  are of the same size, the crowd analyzer  merges the crowd  into the crowd , as illustrated in . A new crowd center and new optimal inclusion distance are then computed for the crowd .","At this point, the crowd analyzer  repeats the process and determines that the crowds  and  are now the two closest crowds. In this example, the distance between the two crowds  and  is less than the optimal inclusion distance of the larger of the two crowds  and , which is the crowd . As such, the crowd  is merged into the crowd  and a new crowd center and optimal inclusion distance are computed for the crowd , as illustrated in . At this point, there are no two crowds closer than the optimal inclusion distance of the larger of the two crowds. As such, the crowd analyzer  discards any crowds having less than three members, as illustrated in . In this example, the crowds , , , and  have less than three members and are therefore removed. The crowd  has three or more members and, as such, is not removed. At this point, the crowd formation process is complete.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIGS. 11A through 11E","FIGS. 8A through 8D","FIG. 11A"],"b":["56","116","118","120","122","116","124","118","116","118","56","116","118"]},"More specifically, as illustrated in , as a result of the movement of the user from the old location to the new location, the remaining users in the crowd  no longer satisfy the optimal inclusion distance for the crowd . As such, the remaining users in the crowd  are removed from the crowd , and crowds  and  of one user each are created for the removed users as shown in . In this example, no two crowds in the old bounding box  are close enough to be combined. As such, crowds having less than three users are removed, and processing of the old bounding box  is complete, and the crowd analyzer  proceeds to process the new bounding box .","As illustrated in , processing of the new bounding box  begins by the crowd analyzer  creating a crowd  of one user for the user. The crowd analyzer  then identifies the crowds  and  as the two closest crowds in the new bounding box  and determines a distance between the two crowds  and . In this example, the distance between the two crowds  and  is less than the optimal inclusion distance of the larger crowd, which is the crowd . As such, the crowd analyzer  combines the crowds  and  by merging the crowd  into the crowd , as illustrated in . A new crowd center and new optimal inclusion distance are then computed for the crowd . At this point, the crowd formation process is complete. Note that the crowd formation processes described above with respect to  are exemplary. The present disclosure is not limited thereto. Any type of crowd formation process may be used.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 12","b":["10","20","18","24","22","18","20","12","1400","20","20","32","18","20","32","20","20","32","20","20"]},"In response to receiving the crowd match request, the matching function  identifies one or more matching crowds (step ). The one or more matching crowds are one or more crowds that match the select crowd identified by the crowd match request at least to a predefined threshold degree. In one embodiment, one or more matching rules are predefined. The one or more matching rules may be defined by the user  (i.e., the requestor) or may be system defined. If defined by the user , the one or more matching rules may be included in the crowd match request or may be defined by the user  prior to sending the crowd match request and stored in the user account for the user  maintained by the MAP server .","The one or more matching rules are generally one or more rules that must be satisfied in order for a crowd to be determined to match the select crowd identified in the crowd match request and\/or one or more criteria that when satisfied result in a determination that a crowd does not match the select crowd identified in the crowd match request. The one or more matching rules are based on crowd data that describes the crowds being compared such as, for example, aggregate profiles of the crowds and\/or characteristics of the crowds. The characteristics of the crowds may include, for example, the sizes of the crowds (i.e., the number of users in the crowds), the geographic locations of the crowds (e.g., crowd centers of the crowds), degree of fragmentation of the crowds, best-case average degree of separation, worst-case average degree of separation, or degree of bidirectionality. For more information regarding degree of fragmentation of the crowds, best-case average degree of separation, worst-case average degree of separation, or degree of bidirectionality, the interested reader is directed to the published U.S. Patent Applications incorporated by reference above.","For example, for each crowd, the aggregate profile of the crowd may include a list of interests, or keywords, that occur in the user profiles of the users  in that crowd and, for each interest, either a number of user matches for that interest in the user profiles of the users  in the crowd or a ratio of the number of user matches for that interest in the user profiles of the users  in the crowd over the total number of users in the crowd. Thus, if the interest \u201cSports\u201d is in the user profiles of 3 of 5 users in a crowd and the interest \u201cCars\u201d is in the user profiles of 2 of the 5 users in the crowd, then the aggregate profile of the crowd may include a list of interests for the crowd that includes \u201cSports,\u201d \u201cCars,\u201d and any other interests in the user profiles of the users  in the crowd. In addition, the aggregate profile of the crowd may include the number of user matches for the interests \u201cSports\u201d and \u201cCars,\u201d which are 3 and 2 respectively. Alternatively, the aggregate profile of the crowd may include the ratio of user matches to total number of users for the interests \u201cSports\u201d and \u201cCars,\u201d which are \u2157 and \u2156 respectively. The one or more matching rules may be defined such that a crowd matches the select crowd identified by the crowd match request if at least 3 out of the 5 top interests (e.g., the interests having the 5 highest numbers of user matches or the interests having the 5 highest ratios of numbers of user matches to total number of users in the crowd) for the two crowds match. Notably, in one embodiment, two interests may be determined to match if the two interests, or keywords, exactly match or are otherwise determined to match at least to a predefined threshold degree via natural language processing or some similar technique. For instance, the interests of \u201cNC State\u201d and \u201cNorth Carolina State University\u201d would preferably be determined to be matching interests even though the string representation of the two interests are not an exact match.","As another example, the one or more matching rules may include a first matching rule that states that at least 75% of the interests in the aggregate profiles of two crowds must match, a second matching rule that states that the two crowds must be within a defined distance from one another (e.g., 5 miles), a third matching rule that states that the sizes of the two crowds must match to within 10% of the size of the select crowd, and a fourth rule that states that the degree of fragmentation of the other crowd is to be less than or equal to that of the select crowd. Notably, while the exemplary matching rules above are positive rules that define conditions under which two crowds are determined to match, the one or more matching rules may alternatively be or include one or more negative rules that define conditions under which two crowds are determined not to match. Further, the exemplary matching rules given above are exemplary and are not intended to limit the scope of the present disclosure.","In another embodiment, the one or more matching crowds are identified by generating matching scores that represent the degree of similarity between the select crowd identified by the crowd match request and at least some of the other crowds formed by the MAP server . For a particular pair of crowds, the matching score for the pair of crowds may be a function of a comparison of the aggregate profiles of the crowds and\/or characteristics of the crowds (e.g., crowd size, crowd location, degree of fragmentation, best-case average degree of separation, worst-case average degree of separation, or degree of bidirectionality).","Next, in this embodiment, the matching function  of the MAP server  returns the one or more matching crowds to the mobile device  (step ). More specifically, the matching function  returns information that identifies and potentially describes the one or more matching crowds to the mobile device . For example, the matching function  may return crowd identifiers (IDs) of the one or more matching crowds and, optionally, the aggregate profiles of the one or more matching crowds and\/or one or more characteristics of the one or more matching crowds. In this embodiment, the MAP application  of the mobile device  then presents the one or more matching crowds to the user  (step ). In one embodiment, the one or more matching crowds are presented as a list of matching crowds. In another embodiment, the one or more matching crowds are presented on a map that shows the geographic locations of the one or more matching crowds. In either case, the additional information about the one or more matching crowds (e.g., aggregate profiles and\/or crowd characteristics) may also be presented to the user .","Next, the MAP application  receives user input from the user  that selects a desired crowd from the one or more matching crowds (step ). While only one desired crowd is selected in this example, note that the user  may be enabled to select one or more desired crowds from the one or more matching crowds. The MAP application  then sends the desired crowd, or more specifically information that identifies the desired crowd, to the MAP server  (step ). In response, the status update function  of the MAP server  identifies the users  in the desired crowd (step ). In one embodiment, the MAP server  maintains a crowd record for each crowd of users formed by the MAP server , where the crowd record of a crowd includes a list of users that are currently in the crowd. Thus, the status update function  is enabled to identify the users  in the desired crowd using the crowd record stored for the desired crowd.","The status update function  then sends a status update request to the status update service  for status updates sent by the users  in the desired crowd (step ). In response, the status update service  returns status updates sent by the users  in the desired crowd to the MAP server  (step ). More specifically, in this embodiment, the status update service  records the MAP server  as a follower of the users  in the desired crowd. Thereafter, as status updates are received from the users  in the desired crowd, the status updates are returned to the MAP server . In addition, the status update service  may return status updates previously received from the users  in the desired crowd for some defined time period prior to the current time (e.g., the previous hour). However, in an alternative embodiment, the status update service  may record the user  of the mobile device  (i.e., the requestor) as a follower of the users  in the desired crowd. Thereafter, as status updates are received from the users  in the desired crowd, the status update service  may return the status updates directly to the mobile device  of the user  or return the status updates to the mobile device  of the user  via the MAP server . In addition, the status update service  may return status updates previously received from the users  in the desired crowd for some defined time period prior to the current time (e.g., the previous hour).","In this embodiment, once the status updates from the users  in the desired crowd are received by the MAP server , the status update function  of the MAP server  returns the status updates to the mobile device  (step ). Then, the MAP application  of the mobile device  presents the status updates to the user  (step ). Notably, in this embodiment, the user  selects a desired crowd for which status updates are to be obtained and returned to the mobile device . However, the present disclosure is not limited thereto. In an alternative embodiment, after the matching function  identifies the one or more matching crowds in step , the status update function  sends one or more status update requests to the status update service  for status updates sent by the users  in the one or more matching crowds. The status update service  may then return the status updates sent by the users  in the one or more matching crowds to the MAP server  or, alternatively, to the mobile device , as described above. In this alternative embodiment, the MAP application  may then present all of the status updates from the users  in the one or more matching crowds to the user  at the mobile device  or enable the user  to filter the status updates based on, for example, crowd. For instance, while all of the status updates sent by the users  in the one or more matching crowds may be returned to the mobile device , the MAP application  may enable the user  to select one or more desired crowds from the matching crowds such that only the status updates from the users  in the desired crowd(s) are presented to the user . In a similar manner, the user  may be enabled to filter the status updates based on other parameters such as, for example, crowd characteristics (e.g., crowd location, crowd size, etc.) and\/or interests included in the aggregate profiles of the crowds.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIGS. 13A and 13B","FIG. 12","FIG. 13A"],"b":["10","60","26","60","12","20","18","20","1500","32","18","20","20","32","18","12","1502","60","12","1504","20","60","12","26","1506","26","26","1508","20","18","12","20"]},{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 13B","FIG. 13A","FIG. 12"],"b":["60","20","18","24","22","18","20","12","1600","59","1602","1604","32","18","20","1606","32","20","1608","32","12","1610"]},"In response, the status update function  of the MAP server  identifies the users  in the desired crowd (step ). In one embodiment, the MAP server  maintains a crowd record for each crowd of users formed by the MAP server , where the crowd record of a crowd includes a list of users that is currently in the crowd. Thus, the status update function  may identify the users  in the desired crowd using the crowd record of the desired crowd. The status update function  then obtains status updates sent by the users  in the desired crowd (step ) and returns the status updates to the mobile device  of the user  (step ). More specifically, in one embodiment, the user  of the mobile device  is recorded as a follower of the users  in the desired crowd. Thereafter, as the status update function  receives status updates from the users  in the desired crowd, the status update function  sends the status updates to the mobile device  of the user . In addition, the status update function  may obtain status updates previously received from the users  in the desired crowd for some defined time period prior to the current time (e.g., the previous hour) from local storage and return those status updates to the mobile device  of the user .","Next, the MAP application  of the mobile device  presents the status updates to the user  (step ). Notably, in this embodiment, the user  selects a desired crowd for which status updates are to be obtained and returned to the mobile device . However, the present disclosure is not limited thereto. In an alternative embodiment, after the matching function  identifies the one or more matching crowds in step , the status update function  obtains status updates sent by the users  in the one or more matching crowds. The status update function  may then return the status updates sent by the users  in the one or more matching crowds to the mobile device . In this alternative embodiment, the MAP application  may then present all of the status updates from the users  in the one or more matching crowds to the user  at the mobile device  or enable the user  to filter the status updates based on, for example, crowd. For instance, while all of the status updates sent by the users  in the one or more matching crowds may be returned to the mobile device , the MAP application  may enable the user  to select one or more desired crowds from the matching crowds such that only the status updates from the users  in the desired crowd(s) are presented to the user . In a similar manner, the user  may be enabled to filter the status updates based on other parameters such as, for example, crowd characteristics (e.g., crowd location, crowd size, etc.) and\/or interests included in the aggregate profiles of the crowds.",{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 14","b":["10","12","20","20","18","24","22","18","20","12","1700","20","20","32","18","20","32","20","20","32","20","20"]},"In response to receiving the POI match request, the matching function  of the MAP server  identifies one or more matching POIs (step ). The one or more matching POIs are one or more POIs that match the select POI identified by the POI match request at least to a predefined threshold degree. In one embodiment, one or more matching rules are predefined. The one or more matching rules may be defined by the user  (i.e., the requestor) or may be system defined. If defined by the user , the one or more matching rules may be included in the POI match request or may be defined by the user  prior to sending the POI match request and stored in the user account for the user  maintained by the MAP server .","The one or more matching rules are generally one or more rules that must be satisfied in order for a POI to be determined to match the select POI identified in the POI match request and\/or one or more criteria that when satisfied result in a determination that a POI does not match the select POI identified in the POI match request. The one or more matching rules are based on data that describes the POIs being compared such as, for example, data that describes POI type (e.g., restaurant, sports bar, dance club, or the like), a name of the POI (e.g., Sam's Steakhouse, Kegler's Sports Bar, or the like), data that describes an event being held at the POI (e.g., data that describes a concert being held at a stadium\/POI such as the name of the music artist or group), a geographic location of the POI, a number of users at the POI, and\/or a number of crowds at the POI.","For example, the one or more matching rules may be defined such that a POI matches the select POI identified by the POI match request if the POI is of the same POI type as the select POI. As another example, the one or more matching rules may include a first POI matching rule that states that the two POIs must be of the same POI type, a second POI matching rule that states that the two POIs must be within a defined distance from one another (e.g., 1 mile), and a third POI matching rule that states that the number of users and\/or crowds at the POI must not exceed the number of users and\/or crowds at the select POI. Notably, while the exemplary matching rules above are positive rules that define conditions under which two POIs are determined to match, the one or more matching rules may alternatively be or include one or more negative rules that define conditions under which two POIs are determined not to match. Further, the exemplary matching rules given above are exemplary and are not intended to limit the scope of the present disclosure.","Next, in this embodiment, the matching function  of the MAP server  returns the one or more matching POIs to the mobile device  (step ). More specifically, the matching function  returns information that identifies and potentially describes the one or more matching POIs to the mobile device . For example, the status update function  may return the names, locations, and POI types for the one or more matching POIs. In this embodiment, the MAP application  of the mobile device  then presents the one or more matching POIs to the user  (step ). In one embodiment, the one or more matching POIs are presented as a list of matching POIs. In another embodiment, the one or more matching POIs are presented on a map that shows the geographic locations of the one or more matching POIs. In another embodiment, the matching function  may also return information about any crowds present at the matching POIs. The MAP application  may then filter the list of matching POIs based on the presence or absence of crowds, or the characteristics of the crowds present at the POIs, before presenting the list to the user . In either case, additional information about the one or more matching POIs (e.g., POI type, event data, information about the crowds present at the POI, or the like) may also be presented to the user .","Next, the MAP application  receives user input from the user  that selects a desired POI from the one or more matching POIs (step ). While only one desired POI is selected in this example, note that the user  may be enabled to select one or more desired POIs from the one or more matching POIs. The MAP application  then sends the desired POI, or more specifically information that identifies the desired POI, to the MAP server  (step ). In response, the status update function  of the MAP server  identifies the users  in one or more crowds located at the desired POI (step ). In one embodiment, the MAP server  maintains a crowd record for each crowd of users formed by the MAP server , where the crowd record of a crowd includes a list of users that is currently in the crowd and data that defines the location of the crowd (e.g., a crowd center). More specifically, in one embodiment, POIs are defined as a geographic location (e.g., a latitude and longitude coordinate pair or a street address). In this case, a crowd is determined to be at a POI when the crowd is located within a predefined geographic area that is centered at or otherwise encompasses the POI. A crowd may be determined to be located within the predefined geographic area if, for example, the crowd center of the crowd is within the predefined geographic area, at least one of the users  in the crowd is located within the predefined geographic area, or if the boundary of the crowd overlaps the predefined geographic area. The predefined geographic area may be a system-defined shape and size that is used for all POIs or for a particular class of POIs. In another embodiment, POIs are defined as geographic areas (e.g., a circular geographic area defined by a latitude and longitude pair and a radius). In this case, a crowd is located at a POI if, for example, the crowd center of the crowd is within the geographic area for the POI, at least one of the users  in the crowd is located within the geographic area for the POI, or if the boundary of the crowd overlaps the geographic area for the POI. Alternatively, or in addition, a crowd is considered to be located at a POI if one or more of the users  in the crowd are determined to be at the POI from, for instance, the users' check-in information.","Next, the status update function  sends a status update request to the status update service  for status updates sent by the users  in the one or more crowds at the desired POI (step ). In response, the status update service  returns status updates sent by the users  in the one or more crowds at the desired POI to the MAP server  (step ). More specifically, in this embodiment, the status update service  records the MAP server  as a follower of the users  in the one or more crowds at the desired POI. Thereafter, as status updates are received from the users  in the one or more crowds at the desired POI, the status updates are returned to the MAP server . In addition, the status update service  may return status updates previously received from the users  in the one or more crowds at the desired POI for some defined time period prior to the current time (e.g., the previous hour). However, in an alternative embodiment, the status update service  may record the user  of the mobile device  (i.e., the requestor) as a follower of the users  in the one or more crowds at the desired POI. Thereafter, as status updates are received from the users  in the one or more crowds at the desired POI, the status update service  may return the status updates directly to the mobile device  of the user  or return the status updates to the mobile device  of the user  via the MAP server . In addition, the status update service  may return status updates previously received from the users  in the one or more crowds at the desired POI for some defined time period prior to the current time (e.g., the previous hour).","In this embodiment, once the status updates from the users  in the one or more crowds at the desired POI are received by the MAP server , the status update function  of the MAP server  returns the status updates to the mobile device  (step ). Then, the MAP application  of the mobile device  presents the status updates to the user  (step ). Notably, in this embodiment, the user  selects a desired POI for which status updates are to be obtained and returned to the mobile device . However, the present disclosure is not limited thereto. In an alternative embodiment, after the matching function  identifies the one or more matching POIs in step , the status update function  sends one or more status update requests to the status update service  for status updates sent by the users  in one or more crowds at the one or more matching POIs. The status update service  may then return the status updates sent by the users  in the one or more crowds at the one or more matching POIs to the MAP server  or, alternatively, to the mobile device , as described above. In this alternative embodiment, the MAP application  may then present all of the status updates from the users  in the one or more crowds at the one or more matching POIs to the user  at the mobile device  or enable the user  to filter the status updates based on, for example, POI. For instance, while all of the status updates sent by the users  in the one or more crowds at the one or more matching POIs may be returned to the mobile device , the MAP application  may enable the user  to select one or more desired POIs from the matching POIs such that only the status updates from the users  in the crowd(s) at the desired POI(s) are presented to the user . In a similar manner, the user  may be enabled to filter the status updates based on other parameters such as, for example, POI type, POI location, or other data that describes the matching POIs.","In the embodiment described above, the MAP server  identifies the users  in one or more crowds at the desired POI. However, in an alternative embodiment, the MAP server  may identify the users , rather than the crowds, at the desired POI. The MAP server  may then operate such that status updates sent by the users  at one or more desired POIs, or alternatively all of the matching POIs, are obtained and returned to the mobile device  of the user  in a manner similar to that described above.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":["FIGS. 15A and 15B","FIG. 14","FIG. 15A","FIG. 13A"],"b":["10","60","26","60","12","20","18","20","1800","32","18","20","20","32","18","12","1802","60","12","1804","20","60","12","26","1806","26","26","1808","20","18","12","20"]},{"@attributes":{"id":"p-0117","num":"0116"},"figref":["FIG. 15B","FIG. 15A","FIG. 14"],"b":["60","20","18","24","22","18","20","12","1900","59","1902","1904","32","18","20","1906","32","20","1908","32","12","1910"]},"In response, the status update function  of the MAP server  identifies the users  in one or more crowds at the desired POI (step ). In one embodiment, the MAP server  maintains a crowd record for each crowd of users formed by the MAP server , where the crowd record of a crowd includes a list of users that is currently in the crowd and the location of the crowd (e.g., a crowd center). The status update function  identifies the users  in the one or more crowds at the desired POI using the crowd records of those crowds. The status update function  then obtains status updates sent by the users  in the one or more crowds at the desired POI (step ) and returns the status updates to the mobile device  of the user  (step ). More specifically, in one embodiment, the user  of the mobile device  is recorded as a follower of the users  in the one or more crowds at the desired POI. Thereafter, as the status update function  receives status updates from the users  in the one or more crowds at the desired POI, the status update function  sends the status updates to the mobile device  of the user . In addition, the status update function  may obtain status updates previously received from the users  in the one or more crowds at the desired POI for some defined time period prior to the current time (e.g., the previous hour) and return those status updates to the mobile device  of the user .","Next, the MAP application  of the mobile device  presents the status updates to the user  (step ). Notably, in this embodiment, the user  selects a desired POI for which status updates are to be obtained and returned to the mobile device . However, the present disclosure is not limited thereto. In an alternative embodiment, after the matching function  identifies the one or more matching POIs in step , the status update function  obtains and returns status updates sent by the users  in the one or more crowds at the one or more matching POIs to the mobile device , as described above. In this alternative embodiment, the MAP application  may then present all of the status updates from the users  in the one or more crowds at the one or more matching POIs to the user  at the mobile device  or enable the user  to filter the status updates based on, for example, POI. For instance, while all of the status updates sent by the users  in the one or more crowds at the one or more matching POIs may be returned to the mobile device , the MAP application  may enable the user  to select one or more desired POIs from the matching POIs such that only the status updates from the users  in the crowd(s) at the desired POI(s) are presented to the user . In a similar manner, the user  may be enabled to filter the status updates based on other parameters such as, for example, POI type, POI location, or other data that describes the matching POIs.","In the embodiment described above, the MAP server  identifies the users  in one or more crowds at the desired POI. However, in an alternative embodiment, the MAP server  may identify the users , rather than the crowds, at the desired POI. The MAP server  may then operate such that status updates sent by the users  at one or more desired POIs, or alternatively all of the matching POIs, are obtained and returned to the mobile device  of the user .",{"@attributes":{"id":"p-0121","num":"0120"},"figref":["FIG. 16","FIG. 2","FIG. 2","FIG. 1"],"b":["12","12","132","134","136","138","140","132","132","40","42","62","134","132","64","136","136","138","12","28","138"]},{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIG. 17","FIG. 1"],"b":["18","18","18","142","144","146","148","36","150","142","142","30","32","34","144","142","36","146","18","28","146","148"]},{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 18","FIG. 1","FIG. 1"],"b":["22","22","152","154","156","158","160","162","152","152","38","154","152","156","158","22","28","158","160"]},{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 19","FIG. 1"],"b":["164","26","164","164","166","168","170","172","174","176","166","166","26","168","166","170","172","164","28","172","174"]},"Those skilled in the art will recognize improvements and modifications to the preferred embodiments of the present disclosure. All such improvements and modifications are considered within the scope of the concepts disclosed herein and the claims that follow."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING FIGURES","p":["The accompanying drawing figures incorporated in and forming a part of this specification illustrate several aspects of the disclosure, and together with the description serve to explain the principles of the disclosure.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIGS. 7A through 7D","FIG. 6"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 8A through 8D"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIGS. 9A through 9D","FIGS. 8A through 8D"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 10A through 10F","FIGS. 8A through 8D"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIGS. 11A through 11E","FIGS. 8A through 8D"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 12","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 13A and 13B","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 14","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIGS. 15A and 15B","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 16","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 17","FIG. 1"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 18","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 19","FIG. 1"]}]},"DETDESC":[{},{}]}
