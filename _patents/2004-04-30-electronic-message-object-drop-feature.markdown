---
title: Electronic message object drop feature
abstract: A user is aided in using an application program. A method may include receiving an input in a computer system upon a user dropping an electronic message object in a graphical user interface of an application program. Upon receiving the input, an information portion is extracted from the electronic message object. An operation is performed in the application program with the extracted information portion as a parameter, wherein the electronic message object is not stored in association with the application program. When the performed operation includes a data repository query, a learning function or an ambiguity-resolving feature may be used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589492&OS=08589492&RS=08589492
owner: SAP AG
number: 08589492
owner_city: Walldorf
owner_country: DE
publication_date: 20040430
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This description relates to a user dropping an electronic message object in an application program.","Many software application programs require a user to perform one or more operations to obtain a specific output from the program. Such operations are often aided by features shown in a graphical user interface (GUI) for the application program. To search a database, for example, the user typically has to type a query into a search field and click a button to execute the search. To create a new record in a database, the user typically has to provide a name for the record and click a button to execute the creation and saving of the new record. Other software-based operations may require the user to make different kinds of inputs.","A common situation in today's office environment is that a user has access to a business-specific program such as a database management program that contains records used in the daily activities of the office. In addition, the user often has access to an application program that handles electronic messages, e.g., an email program. The user may receive emails from persons who have questions or other issues that require use of the business-specific program. When receiving such an email, the user typically launches the business-specific program or switches to a separate window where it is running, reviews or creates a particular record therein, and thereafter returns to the email program to respond to the sender. The user may have to make a certain entry in the business-specific program to locate (or create) the sought record, and this entry often relates to the sender of the email or to information contained in the email.","The task of using a keyboard to enter information can be tedious for the user, particularly if the user is charged with performing a similar operation many times a day. Also, manually typing characters in input fields can lead to errors, especially when the task is repetitive for the user. Moreover, it may be disruptive if the user after typing must move her hand from the keyboard to a pointing device to click a button that initiates the desired operation.","The invention relates to aiding a user in using an application program. In a first general aspect, a method comprises receiving an input in a computer system upon a user dropping an electronic message object in a graphical user interface of an application program. Upon receiving the input, an information portion is extracted from the electronic message object. An operation is performed in the application program with the extracted information portion as a parameter. The electronic message object is not stored in association with the application program.","In selected embodiments, performing the operation may comprise storing the extracted information portion. In selected embodiments, performing the operation may comprise creating a record in the computer system, the record being associated with the extracted information portion. In selected embodiments, performing the operation may comprise opening a record stored in the computer system that is associated with the extracted information portion. In selected embodiments, performing the operation may comprise using the extracted information portion in searching a data repository.","In a second general aspect, a graphical user interface comprises a drop area where a user can drop an electronic message object to have an information portion be extracted from the electronic message object and an operation performed in the application program with the extracted information portion as a parameter. The electronic message object is not stored in association with the application program.","In selected embodiments, the drop area may extend throughout the graphical user interface. In selected embodiments, the drop area may not be visible.","In selected embodiments, the graphical user interface may comprise several drop areas. In embodiments with several drop areas, at least two of the several drop areas may correspond to extracting different categories of information portions from electronic message objects dropped in the at least two drop areas. In embodiments with several drop areas, at least two of the several drop areas may correspond to performing different operations in the application program.","Advantages of the systems and techniques described herein may include any or all of the following. Providing that a user can initiate performance of an operation in an application program by dropping an electronic message object therein. Providing a more efficient use of an application program that is not integrated with an email program. Aiding a user in responding to an email by providing that the user can conveniently enter the sender's name in another application program.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","Like reference numerals in the various drawings indicate like elements.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 1A-C","b":["100","110","120","110","120","140","140","110"]},"The programs  and  support drag and drop technology. It will be described below that a user may drag an electronic message object and drop it on the program . This may trigger the system to extract an information portion from the electronic message object and perform an operation in the program  with the extracted information portion as a parameter. Unlike existing drag and drop features, the purpose of dropping the electronic message on the program  is not to persistently store it there but may be to have the specific operation performed in that program. Accordingly, the electronic message object is not stored in association with the program .","The program  includes displayed content  that relates to one or more operations that can be performed therein. For example, the displayed content may include a data repository search function and a display area for presenting results of a search.","Assume that the electronic message object  contains a question for the person that uses the GUI. The question may require the user to access a specific record available through the program  and review information stored in that record. For example, the electronic message object is sent to a Human Resources (HR) department of a company by an employee wondering about some aspect of her HR record.","The user drags the electronic message object on top of the GUI view of the program , as indicated in  by an arrow . This may involve the drag and drop technology supported by the programs  and . A phantom representation  of the electronic message object may be visible during the dragging. The user drops (releases) the electronic message object on top of the program . The program  is configured to recognize that an electronic message object is being dropped and to take specific action in response thereto. In this example, the entire GUI view of the program  is a potential drop target for dragged objects and the user therefore can drop the electronic message object anywhere on the program .","The user dragging and subsequent dropping the electronic message object creates a specific input in the computer system. Upon receiving the input, the system extracts an information portion from the electronic message object. For example, the system extracts the first and last name of the sender. The electronic message program is configured such that the \u201coriginal\u201d electronic message object  remains therein while the user performs the dragging indicated by arrow .","The system thereafter performs an operation in the program . This may involve a search in a data repository. For example, if the sender's first and last name are extracted from the electronic message object they may be used to query a data repository for a record associated with the sender. Results of the data repository query may be displayed subsequently. For example, in  the appearance of the content  has changed to conceptually indicate that the GUI now is presenting results of the performed operation.","In the HR example, then, the described features lets the user access the HR record of the person who sent the electronic message object by dragging that electronic message object onto the program . When the user is done reviewing the HR record, she can return to the electronic message program and respond to the received electronic message. Accordingly,  show an example of the user accessing a record associated with the electronic message sender without typing that person's name or any other identifier in the program .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["100","200","110","210","120","200","210","100","100"]},"The view of the email program  that is being displayed in the GUI  includes an email object presentation area  in which email objects ,  and  are currently being displayed. For example, the area  is part of an \u201cInbox\u201d function in the program . The email program may be capable of displaying any or all of the emails - in a separate window, for example if the user clicks on them in the area . Key data from emails listed in area  is currently displayed under respective \u201cFrom,\u201d \u201cSubject\u201d and \u201cReceived\u201d headings in a header bar .","The program  performs one or more business-specific operations, such as managing a data repository wherein company records are stored. In such implementations, program  may be the primary tool for an employee to access records stored in the data repository, and to create new records to be stored therein. Here, the program  includes a search function, a record creation function and another arbitrary function.","The search function includes an input field  and a \u201cSearch\u201d input command . The user can search the associated data repository by entering a search term in the field  and selecting the command . Similarly, the function for creating a record includes an input field  and a \u201cCreate\u201d input command . The user can create a new record in the data repository by entering a name for it in the field  and selecting the command . The third function may include additional features for the program , as schematically illustrated by the input field  and the associated \u201cPerform Function\u201d command . For example, this may involve updating an employment record for an identified email sender function. Here, only a simple example of the program  is shown for clarity, and in other implementations it may include many different and\/or more sophisticated features.","The programs  and  support drag and drop functionality. Regarding the email program, a user can drag any email object presented in the area  and drop it in any location that is recognized as a drop target. Examples of such email programs include MICROSOFT OUTLOOK 2000 SR-1 and other Microsoft products. A user may drag an email object from the program  to store it in a specific location, for example as the user has here done with an email object  which is currently displayed as an icon on a desktop  in the GUI.","The program , in turn, is configured to support email objects being dragged on top of it in the GUI  and dropped. Particularly, when a user drags an email onto the program  without dropping it (e.g., without releasing a mouse button after the dragging), the program  may recognize that a drag and drop action is being performed. In response, the program may confirm that it is capable of being a target for drag and drop actions. In contrast, a program that does not support drag and drop may in the same situation generate a response that changes the pointer from an arrow to the familiar \u201cNot available as a drop target\u201d shape.","One or more drop areas may be included in the program . A drop area defines the portion(s) of the GUI representation of program  where an email object can be dropped. A drop area may be visible or invisible. A drop area may extend throughout the entire GUI representation of the program  or a portion thereof. For example, a drop area for searching the data repository may include the field  or the command  or both. Similarly, a drop area for creating a new record may include the field  or the command  or both, as another example.","Assume now that the user drags the email object  and drops it on the field  (or another portion of the program  designated as a drop area for searching the data repository). This creates a specific input that is recognized as a drag and drop action. In response to the input, an information portion is extracted from the email object . For example, the sender email address may be extracted. That is, the program  includes instructions for identifying the string of information in an email object that corresponds to the sender's email address and for extracting this information upon the email object being dropped.","Following the extraction, an operation is performed in the program  with the extracted information portion as a parameter. In this example, a search operation is performed to identify in the data repository containing the extracted email address records. The outcome of the performed operation (i.e., any hits in this example) may be presented in an area  of the program . Here, four records (labeled #- in  for clarity) were found. Thus, the outcome of the performed operation may be the same as if the user had placed the mouse cursor (or insertion point) in the field , typed the sender's email address on a keyboard and then selected the command  using a mouse. However, all the user had to do in this example was drag the email object  and drop it on top of the program . This may simplify a user's task when a person sends an email that prompts the user to look up that person's record in a data repository.","Other functions than querying a data repository may be performed. For example, a new record may be created upon the user dropping an email object on the field  or the command  (or on any other area of the program  so defined). In such an implementation, the extracted information portion may be used as an identifier or name for the created record. Accordingly, performing the operation may involve storing the extracted information portion.","One or more categories of information may be extracted from email objects. For example, in the most recent example above where dropping the email object created a new record, it may be desirable to have the new record associated with the sender's first and last name rather than the sender's email address. Many emails include this information and it is often displayed in the email program where the email object is received. For example, the \u201cFrom\u201d column in this exemplary email program  lists the short form \u201cAddress #,\u201d and so on, for the respective email objects instead of their corresponding sender email addresses.","It may be possible to find the sender first and last name in a listing of detailed information about a particular email. For example, by clicking the right mouse button in a Microsoft Outlook application one can view a \u201cMessage Options\u201d screen for a selected email object. An \u201cInternet headers\u201d area of that screen may contain information categorized by various tags or subtitles, such as information on how the email was received, its subject line, its sender and recipient information, and so on. Accordingly, information categories, such the sender name, sender email address, a recipient name, a recipient electronic message address (optionally distinguished between \u201cTo:\u201d recipients and \u201cCc:\u201d recipients), contents from the subject line and\/or message body or non-displayed content of the email object may be extracted. The information portion may be extracted using a technique that searches for a specific character string in the entire email object or in any portion(s) thereof. For example, an identifier that conforms to a special format can be located in the email object and be extracted therefrom.","If there is more than one drop area in the program , they may correspond to similar operations being performed. For example, there may be more than one drop area in the program  for searching the data repository. A drop area including either of the field  and the command , or both, may extract the sender email address for performing a search. In contrast, another drop area that may include either of the field  and the command , or both, may extract an identifier from the subject line for performing a search. Accordingly, at least two drop areas may correspond to extracting different categories of information from email objects.","Two or more drop areas in the program  may correspond to performing different operations. These different operations are sometimes performed using the same extracted information category from email objects. For example, a drop area including either of the field  and the command , or both, may extract the sender's first and last name for performing a search. Another drop area that includes either of the field  and the command , or both, may extract the sender's first and last name for creating a new record for the sender.","The user may drag an email object onto the program  using any suitable input device. For example, the user may use a mouse, pointing device, trackball or a data glove to perform this action. In implementations where the GUI  is generated on a touch screen or other touch sensitive surface, the user may use a finger, a stylus or any other suitable tool. In some embodiments, programs  and  may support drag and drop operations using arrow keys on a keyboard, as another example.","Any email object may be dragged directly from the email program to the program , such as if the user were to drag any of the emails - from their current location. An email object may be dragged from another location that is not associated with the email program. For example, the user may drag the email object  from the desktop  to the program .","In some situations, the information extracted for a search operation may not yield any hit in the data repository. For example, the sender's email address is extracted and used as a search parameter, but no record in the data repository is associated with it. It may then be possible to extract another category of information from the email object to search the data repository. For example, if the sender's email address yields no hit, the sender's first and last name may be used in searching. The extraction of the sender's name may be done before or after the first extracted information yields no hit. That is, more than one information category may be extracted as a backup in case one of them does not yield a hit (or yields multiple hits). Optionally, if using the sender's first and last name scores a hit, the data repository may be updated to include the sender's email address such that the record can thereafter be identified by extracting the email address for the search. Moreover, any system can be configured to permit such a \u201clearned\u201d association between an email address and a retrievable record to be deleted at the user's request, for example if the user realizes that the email address was inadvertently associated with the wrong record.","As another example, information extracted elsewhere may be used. For example, it is possible that the email program  includes information about senders and recipients of emails that are not necessarily included in the email objects themselves. For example, the email program may know the first and last name of the sender although this information is not included in the email object. In such situations, performing the operation (such as a data repository search) may involve accessing the email program  with a suitable interface. For example, it may be possible to access a Microsoft email program using the Messaging Application Programming Interface (MAPI) to extract information relating to an email that currently has focus in the email program. That is, the program  may be configured to extract information from the email program  using MAPI, and the extracted information may be used in the current operation.","The exemplary search described above yielded four hits (labeled #- in area ). In such a situation, the user may select any of the listed hits with a pointing device to view that record in its entirety. The system may include a learning function that registers which of the displayed records the user selects. Then, the data repository may be updated to provide that the selected record is the one displayed the next time the user drops an equivalent email object on the program . For example, the extracted information portion may be the sender's name and running a search on this name in the data repository yields the four hits #- because there are four persons in the organization with the same name. After the user selects one of the records, the data repository may be updated to associate the sender's email address with the one of records #- that the user selects.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIGS. 3-5","FIG. 3","FIG. 4","FIG. 4","FIG. 5"],"b":"300"},"As shown in , method  may include the following steps:","Receiving, in step , an input in a computer system upon a user dropping an electronic message object in a GUI of an application program. For example, the input may be received upon the user dropping any of the email objects - and  in the application program . The program  may include one or more drop areas.","Extracting, in step  and upon receiving the input, an information portion from the electronic message object. For example, the sender name, sender email address, subject line content, message body content, non-displayed content and combinations thereof may be extracted.","Performing, in step , an operation in the application program with the extracted information portion as a parameter, wherein the electronic message object is not stored in association with the application program. For example, a search operation in a data repository may be performed. As another example, a new data repository record may be created. As yet another example, an employee record in a data repository may be updated in a given way (such as by adding a specific benefit).","Optional steps  and  relate to an implementation where the step  involves searching a data repository. If searching the data repository yields several records, the method  may comprise presenting, in optional step , identifiers for the several records for user selection. For example, identifiers for the records #- may be presented in area . The user may select any of the listed records to view its contents. If the user selects one of the several records, the method  may comprise updating, in optional step , the data repository such that the selected record is identified if the extracted information portion is thereafter used in searching the data repository. For example, if the user selects the record #, the data repository may be updated to associate the sender's email address with the selected record. The next time an email object from that sender is dropped on the program , the selected record may be identified using the email address.","As shown in , method  may include the following steps:","Steps - may be performed substantially as described with regard to .","Optional step  relates to an implementation where the step  involves searching a data repository. If the extracted information does not yield a hit in the data repository, the method  may comprise using, in optional step , another extracted information portion in searching the data repository. For example, if the sender's email address does not yield a hit, the sender's first and last name may be used for searching. The sender's first and last name in this example may be extracted from the email object in connection with extracting the sender's email address or upon determining that the email address does not yield a hit. For example, the extraction may occur in connection with step  or in connection with step .","As shown in , method  may include the following steps:","Steps - may be performed substantially as described with regard to .","Optional step  relates to an implementation where the step  involves searching a data repository. If the extracted information does not yield a hit in the data repository, the method  may comprise extracting, in optional step , another information portion from an electronic message application program. For example, another information portion (such as a sender's first and last name) may be extracted from the email program . In certain implementations, extracting the other information portion may involve using a specific interface such as MAPI. The other extracted information portion may be used in searching the data repository.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 6","b":["600","600","610","620","630","640","610","620","630","640","650","610","600","610","610","610","620","630","640"]},"The memory  stores information within the system . In one embodiment, the memory  is a computer-readable medium. In one embodiment, the memory  is a volatile memory unit. In another embodiment, the memory  is a non-volatile memory unit.","The storage device  is capable of providing mass storage for the system . In one embodiment, the storage device  is a computer-readable medium. In various different embodiments, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device.","The input\/output device  provides input\/output operations for the system . The input\/output device  may include a keyboard and\/or pointing device. The input\/output device  may include a display device. For example, the GUI  described above may be produced by the input\/output device .","The invention can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Apparatus of the invention can be implemented in a computer program product tangibly embodied in a machine-readable storage device for execution by a programmable processor; and method steps of the invention can be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the invention can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The invention can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of embodiments of the invention have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. Accordingly, other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 1A-C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 3","b":["4","5"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
