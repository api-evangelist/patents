---
title: Methods and computer programs for database structure comparison
abstract: Methods and computer programs for comparing database structures such as database schemas and descriptions of application programming interfaces are disclosed. The methods involve identifying incompatibilities between information repositories such as relational databases and byte code repositories by extracting a first database structure from a first information repository, extracting a second database structure from a second information repository, filtering relevant sections from each database structure, asymmetrically comparing the relevant sections, and identifying any incompatibilities between database schemas or byte code repositories.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07788282&OS=07788282&RS=07788282
owner: International Business Machines Corporation
number: 07788282
owner_city: Armonk
owner_country: US
publication_date: 20040916
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DESCRIPTION OF VARIOUS EMBODIMENTS"],"p":["The present teaching relates to methods and computer programs for comparing database schemas and\/or comparing libraries or repositories of byte codes.","The use of computer-implemented databases and application programming interfaces (\u201cAPIs\u201d) is now fundamental in the archival and use of various types of information, such as relational databases and program code libraries. Data structures that provide the data definitions for relational databases and APIs are referred to herein generally as \u201cdatabase structures\u201d and include but are not limited to data descriptions of database schemas for relational databases, for example, and APIs, for example, in JAVA archive databases (\u201cJARs\u201d). As a result of their ubiquity, database structures comprise primary elements of a wide array of software packages and are instrumental in many aspects of compiling, cataloging, sorting, and retrieving information and for controlling aspects of program execution. However, the use of upgraded database structures is often limited by problems encountered when upgrading or changing the database structures or software designs. Specifically, a fully functional database system or other application that properly functions under an original database structure often fails to function under an upgraded database structure due to changes within the database structure. Similarly, software or applications that rely upon an original database structure for functional or operational support often fail to function properly under an upgraded database structure due to changes within the design of the database structure. Moreover, when the upgraded data includes a library of byte codes, such as a JAR, incompatibilities in the upgraded JAR can cause operating problems in the preexisting application. Thus, every time an original database structure is upgraded there is a risk that databases or applications which functioned under the original database structure will not function properly under the upgraded database structure.","For instance, if a DB2 database functions properly under a first set of database definitions it may not function at all if the DB2 database is upgraded to utilize an upgraded set of definitions which vary in some respect from the first set of definitions.","Similar problems exist when upgrading JARs, which include a plurality of APIs. Specifically, an application may function properly under a first JAR which utilizes a first set of APIs but not function at all under a second JAR which utilizes a second set of APIs that vary in some respect from the first set, such as by changing class constructors or method signature information including, for example, the number and order of arguments.","Existing methods are known for comparing database structures, including database schemas, JARs, APIs, and other data structures, but these conventional methods lack the ability to specifically identify the important differences between the two database structures. For example, a conventional method may identify that two database schemas are different, but cannot identify how they are different such that a database may be changed to function accordingly. By way of another example, known methods involve completely decompiling two JARs and comparing the two decompiled outputs. However, such comparisons fail to provide useful information about the relevant differences between the two JARs. Thus, known database structure comparison methods are unable to identify the forward and backward compatibility of two database structures in a particular application.","Additionally, known methods lack accurate comparison means and often inaccurately generate a plurality of non-existent incompatibilities based on an inaccurate comparison. For instance, known database structure comparison methods utilize standard symmetrical comparison which compares two database structures character by character or line by line to determine if the two structures are the same. Thus, two database structures may be functionally identical, but if one database includes an extra embedded white space, or any other element that is not dependent on the database structure and that is not relevant to the database structure, conventional comparison methods would identify the two database structures as being different. Similarly, two database structures may be functionally equivalent by containing identical components, but conventional comparison methods would identify the two database structures as being different if the components are positioned at different locations within each database structure.","In various embodiments, the present teachings provide methods and computer programs that are capable of identifying the structural differences between two databases.","In various embodiments, the present teachings provide methods and computer programs that are capable of accurately comparing two database structures by comparing only relevant portions of the database structures.","In various embodiments, the present teachings provide methods and computer programs that are capable of comparing two database structures such that the location of segments within each database structure does not effect the results of the comparison.","It should be understood that the above-listed advantages need not all be accomplished by the invention claimed herein. Further advantages of the present invention will be apparent from the detailed description of the preferred embodiment, the claims, and the drawing figures.","Accordingly, in various embodiments, methods are provided for comparing database structures. The database comparison methods comprise extracting a first database structure from a first information repository, extracting a second database structure from a second information repository, filtering structure independent data from each database structure, asymmetrically comparing the first database structure and second database structure, and identifying incompatibilities between the first information repository and the second information repository based on the comparison.","In various embodiments, a method for comparing database structures is provided. The method involves extracting a first schema from a first relational database including a first plurality of relevant sections. Next a second schema is extracted from a second relational database, including a second plurality of relevant sections. Then relevant data from the first and second schemas is filtered by identifying relevant sections within the first and second schemas and disregarding irrelevant sections. Next, the identified relevant sections of the first and second schemas are asymmetrically compared to identify relevant differences included within one schema but not another, where a position of the relevant sections within the first and second schemas does not effect results of the asymmetrical comparison. Further, any incompatibilities between the first and second relational databases are identified based on the asymmetrical comparison, and a forward and backward compatibility of the first and second relational databases is determined based on any identified incompatibilities.","In various embodiments, a method is provided for comparing byte code repositories. The method involves decompiling and filtering a first set of objects from a first byte code repository based on a description of objects to extract and decompiling and filtering a second set of objects from a second byte code repository based on the description of objects to extract. Then a first set of object characterizers are formatted based on the first set of objects. Next, a second set of object characterizers is formed based on the second set of objects. Further, the first and second sets of object characterizers are asymmetrically compared to identify relevant differences between the first and second sets of objects, and any incompatibilities between the first and second byte code repositories are identified based on the asymmetrical comparison.","It is understood that both the foregoing general description and the following description of various embodiments are exemplary and explanatory only and are not restrictive of the invention as claimed. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate some embodiments, and together with the description serve to explain the principles of the embodiments described herein.","Reference will now be made in detail to some embodiments, examples of which are illustrated in the accompanying drawings. Wherever possible, the same reference numbers are used throughout the drawings to refer to the same or like parts.","Referring initially to , the present invention involves a computer-implemented method for comparing database structures. Steps - in  outline an exemplary computer-implemented comparison scheme. The method described herein can be programmed and stored on a device readable by a standard computing device, such as a personal computer or computer network. Suitable program storage devices include, for example, CDs, DVDs, internal computer hard drives, and external network hard drives. Similarly, the method described herein may be executed by a standard computing device or be separately executed by a plurality of computing devices residing on a computing network.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["10","12","14","12","14","10","12","14","10","16","12","14","18","18","16","16"]},"The comparison module  includes an asymmetric comparator  to compare the filtered databases or byte code repositories ,  and to identify structural differences between the databases or byte code repositories , . The comparison module  stores the identified differences or incompatibilities in a computer-readable comparison output . In various embodiments, the comparison module  performs an asymmetric comparison of relevant portions of two database schemas. In various other embodiments, the comparison module performs an asymmetric comparison of object characterizers relating to various objects in a byte code repository. As used herein \u201cobject characterizer\u201d refers generally to a description of the characteristics of an object for purposes such as identifying API compatibility. An \u201cobject characterizer\u201d includes but is not limited to an ASCII representation of the names of an objects methods, the number, order, and type of the method's arguments, exceptions thrown, return value type, and method accessibility of the object's methods.","In various embodiments the comparison output is a comparison file. It is understood that the comparison output  can be implemented in a number of ways including as an ASCII formatted text file. More detailed operations of the comparison module  are described in more detail below. It will be appreciated that the method described herein may be performed by computer programs other than the exemplary database comparison module  without departing from the spirit or scope of the present teachings.","Returning to , in steps  and , the database comparison module  accesses the databases or code repositories ,  through any convenient means and extracts a first database structure from the first database or byte code repository  and a second database structure from the second database or byte code repository . The database structures may be extracted from an existing database, such as the databases or code repositories , , or the database structures may be otherwise provided such as by accessing a stored database structure which is not extracted from a database. Each database structure includes a plurality of data definition or code sections which describe or define the functionality or operation of the database structure in any convenient format such as in SQL or JAVA programming language representations. In one embodiment, the databases or byte code repositories ,  are DB2 databases and the database structures are data definition languages (DDLs) represented in SQL. In a second embodiment, the databases or byte code repositories ,  are JARs and the database structures are APIs represented in the JAVA programming language.","DB2 is a database management system provided by IBM Corporation. DB2 databases are commonly structured according to DDLs which enable the structure and instances of a database to be defined in a human, and machine-readable form. The DB2 databases utilized by the present invention may include a single DDL or a plurality of DDLs. DDLs include a plurality data definitions allow the definition of tables and associated elements and also include SQL keywords that facilitate the storage, retrieval, comparison, and sorting of data. However, the present teachings may be utilized with any type of database, including unconventional DDL or SQL database structures, and is not limited to database structures as described herein.","A JAR is a library including at least one API upon which various applications can be developed. For instance, a programmer may develop an application by relying on functions provided in a particular API or a plurality of APIs provided in a particular JAR. The JARs utilized in connection with the present teachings may include a single API or a plurality of APIs. Furthermore, each API includes a plurality of objects that enable a desired functionality. Specific JAVA programming language or application functionality provided by a given API or JAR does not limit the scope of the present teachings. Additionally, the present teachings can be utilized with any type of programming language or API and is not limited to conventional or standardized forms as described herein.","In various embodiments, the database structures are preferably extracted from the databases or byte code repositories , utilizing relational database schema extractors (in the case of relational databases) and decompilers, for example, in the case of JARs. It is understood that other database extractors can be used without departing from the scope of the present teachings, such as decompilers for compiled C#. It is understood that various computer-implemented tools are available to extract DDLs from a DB2 database, such as DB2LOOK from IBM Corporation. Moreover, decompilers are available to extract specific APIs and associated objects from JARs. In various embodiments, the extracted database structures are stored in a computer-readable format such that they are accessible to the comparison module  as described below.","In step , the extracted database structures are filtered by the filter module . Specifically, structure-independent data is filtered from each database structure by identifying relevant data definition or code sections within the database structures and removing generic sections from the database structures. \u201cStructure independent data,\u201d as defined herein, is data included within a database structure which is not relevant to the structure of a database or to the forward and backward compatibility of the database to which the database structure corresponds. It will be appreciated that it is common for database structures to include structure independent data to perform various functions unrelated to database structure, such as API-non-specific sections including comments describing the functionality of the database structure, user specific information pertaining only to a specific and unique database implementation, dynamic information relating only to the present state of a specific database, etc.","It is desirable to filter or otherwise remove structure independent data from the extracted database structures to provide a more accurate comparison of the databases or byte code repositories ,  as structure independent data generally varies between database structures even if the database structures are functionally equivalent. For instance, code sections including user specific information and dynamic information are generally specific to a particular database structure and would differ if applied to another functionally equivalent database structure. Thus, the filtering of structure independent data from the extracted database structures allows the functional equivalence of the extracted database structures to be accurately determined.","The database structures are filtered according to the filter parameters . In various embodiments the filter parameters  are regular expressions that are used to parse the important parts of a database schema, or in the case of API comparison to extract only the relevant objects from the byte code archive with the decompiler. The filter parameters  are utilized to identify relevant sections present in each database structure. The identification of relevant sections facilities comparison through, for example regular expressions makes the inventive comparison tools flexible. Thus, the present teachings may be applied to a plurality of information repositories and database structures without expending the time and effort required to generate a custom filter for each specific database structure.","The filter parameters  may be automatically provided by the comparison module  or may be provided and customized by a user of the module . The filter parameters  are preferably based on the nature of the data included within the databases ,  and may be dynamically customized by the comparison module  or the user after a comparison is preformed to optimize the filter parameters  such that a maximum amount of structure independent data is removed from each database structure. For instance, if the results of a comparison are undesirable, such as if the comparison indicates an amount of incompatibilities beyond what is reasonable, the filter parameters may be dynamically customized to filter additional information from each database structure to reduce the amount of incompatibilities to a reasonable amount.","In various embodiments related to database structures associated with relational databases, the filter parameters  preferably instruct the filter  to identify relevant data definition sections with each DDL, ignoring for example irrelevant data definition sections. The relevant data definition sections can include DDL patterns that are specific to a particular application and not to user customizations, for example. Thus, the relevant data definition sections can include utilized DDL patterns including function, index, table, trigger, unique index, and view elements. The relevant sections may include other or additional data definition sections based on the particular code sections utilized within the DDL.","In various other embodiments related to database structures associated with byte code repositories, the filter parameters  preferably instruct the filter , which can be implemented as a selective, regular-expression-based byte code decompiler, to identify and extract relevant sections within each APIs. In various embodiments, the regular-expression-based byte code decompiler receives at least one regular expression based on which matching objects are decompiled from the byte code repository. In various embodiments, regular expressions are employed to avoid unnecessary decompilation of irrelevant portions of the byte code repository. In various embodiments, irrelevant sections include: (i) actual semantics in the decompiled methods and\/or functions; (ii) API signatures of private methods (i.e. number, order; and types of arguments); (iii) embedded utility classes; (iv) and private data members, for example.","In various embodiments, the relevant sections generally include JAVA programming language elements that relate to the functionality of public aspects of the API. In various embodiments, the relevant code sections typically include JAVA programming language methods, constructors, arguments, order of arguments, argument types, exceptions thrown by the method, return value, and accessibility modifies of the method. The relevant sections may additionally include other or additional JAVA programming language features based on the particular code sections utilized within each API. In various embodiments, the relevant sections are then distilled into object characterizers. In various embodiments the object characterizers correspond to one-line ASCII representations corresponding to the methods, including the method's signature of number of arguments, order of arguments, argument type, exceptions thrown, return value types, and method accessibility.","The filter module  identifies and filters out sections of the database structure that have been identified as relevant. The unidentified sections and are not relevant to the forward and backward compatibility of the databases , .","In various embodiments dealing with database schemas, the irrelevant sections may include embedded white spaces, dynamic database information, SQL sequence numbers, user defined table references, and user defined index references. In various other embodiments related to comparison of byte code repositories, the irrelevant sections may include private functions, or public functions intended to operate as private functions, which are not commonly utilized or accessible by the general public in the API. However, it will be appreciated that the irrelevant sections may include any features or combination of features depending on the filter parameters  and the relevant code sections.","The identified structure independent data may either be removed from the extracted database structures or be masked such that the identified structure independent data is not utilized in the comparison, as described below. Thus, the filter module  may filter structure independent data from each database structure to suit the needs of a particular user or database, such as masking structure independent data to preserve the original structure of a database or structure or deleting structure independent data when the original structure of a database is not important.","In step , the filtered data is compared by the asymmetrical comparator  to identify functional differences between the database structures. Specifically, each section of the filtered data is compared to identify code sections which are present in one filtered database structure but not in the other. Filtered database structures that do not include the same sections are not compatible. Additionally, if the databases ,  include more than two databases structures, the additional database structures may be compared in the same manner as described below. Thus, the present invention may compare two or more database structures relating to two or more databases and determine the incompatibilities of each database structure and the forward and backward compatibility of each database.","The asymmetrical comparator  differs from conventional computer-assisted comparison methods, such as the Unix tools diff and comp, and the Windows tools fc and WINDIFF, in that the specific location of code sections within each database structure does not effect an asymmetrical comparison but does effect a conventional comparison. For instance, utilizing conventional comparison methods, if a first database structure includes code section A on line , and a second database structure includes code section A on line , code section A will be identified by the conventional comparison method as a structural difference between the first and second database structure, even through code section A is common to both structures and both structures are functionally equivalent. In contrast, asymmetrical comparison, such as the comparison utilized by the comparator , would not identify code section A as a difference between the database structures and would identify the two databases as functionally equivalent.","Asymmetric comparison utilizes the relationship between elements, such as elements within a database structure, to determine if two elements are equal. In contrast, conventional comparison methods merely compare two database structures line-by-line or byte by byte to determine where the structures differ. For example, in an asymmetric comparison, if a first database structure includes section X, and a second database structure includes code section Y, X equals Y if X (R) Y and Y (R) X, where (R) is a relation such as greater than, less than, etc., regardless of the location of X and Y within the database structures. Thus, the specific location, such as line number or character position of code sections X and Y within the database structures does not effect the comparison. It will be appreciated that the exemplary code sections X and Y may be a singular element, or a plurality of elements such as a plurality of data definition sections, a function block, or a class structure. In various embodiments, the asymmetrical comparison is performed using set operation methods provided in connection with the JAVA programming language. But it is understood that any asymmetrical comparison operations can be employed without departing from the spirit or scope of the present teachings.","Preferably, the comparator  compares each code section within the first database structure to each code section within the second database structure to determine if the elements are the same. As a result, the specific ordering or position of each element within the database structures does not effect the results of the comparison as the ordering of the elements is not utilized in the asymmetrical comparison of the database structures.","In step , incompatibilities between the databases ,  are identified based on code sections that are present in one database structure but not the other. Sections that are present in one database structure but not in the other are stored in the comparison file  as incompatibilities. In addition to storing the identified incompatibles, the comparison file  also provides the specific incompatibilities of each database structure by indicating the various elements or code sections each database structure lacks. For instance, if a first database includes code section A and a second database lacks code section A, the comparison file  would indicate code section A as an incompatibility of the second database. Similarly, if more than two database structures or more than two databases are compared, the specific incompatibilities of each database structure are also provided.","In step , the compatibility of each database ,  is determined based on the identified incompatibilities. The database  is compatible with the database , and vice versa, when the database  includes database structures having code sections that are also contained within the database . The forward and backward compatibility of each database , depends on the sequence of the databases , . For example, if the database  includes each code section present in the database , the database  is backward compatible with database  and the database  is forward compatible with database . In situations where multiple databases are compared, a similar hierarchy of forward and backward compatibility may be established based on the various incompatibilities of each database.","The identified incompatibilities stored within the comparison file  may be sorted or otherwise categorized such that a user or other computer program may easily determine the forward and backward compatibility of the compared database structures. For example, a table or grid may be assembled and stored in a computer-readable format to illustrates the forward and backward compatibility of each compared database by indicating the common and unique database structures or code sections of each database structure.","The comparison file  may also be utilized to modify an incompatible database structure such that the incompatible database structure properly functions with a desired database. For instance, if a updated database version is to replace a previous database version, but the updated database version lacks code section A within its structure, the comparison file  would indicate as such and code section A may be easily added to the updated database version such that databases or applications which functioned under the previous database version will function under the updated database version.","While the present teachings are described in conjunction with various embodiments, it is not intended that the present teachings be limited to such embodiments. On the contrary, the present teachings encompass various alternatives, modifications, and equivalents, as will be appreciated by those of skill in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The skilled artisan will understand that the drawings, described below, are for illustration purposes only. The drawings are not intended to limit the scope of the present teachings in any way.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"]}]},"DETDESC":[{},{}]}
