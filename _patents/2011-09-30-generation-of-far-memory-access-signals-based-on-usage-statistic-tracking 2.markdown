---
title: Generation of far memory access signals based on usage statistic tracking
abstract: A method is described that entails receiving an address for a read or write transaction to a non volatile system memory device. The method further involves determining a usage statistic of the memory device for a set of addresses of which the address is a member. The method further involves determining a characteristic of a signal to be applied to the memory device for the read or write transaction based on the usage statistic. The method further involves generating a signal having the characteristic to perform the read or write transaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600407&OS=09600407&RS=09600407
owner: Intel Corporation
number: 09600407
owner_city: Santa Clara
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION","INTRODUCTION","An Exemplary System Memory Allocation Scheme","Exemplary PCM Bus and Packaging Configurations","Far Memory Signaling Based on Usage Statistic(s) Tracking"],"p":["This patent application is a U.S. National Phase Application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US 2011\/054379, filed Sept. 30, 2011, entitled GENERATION OF FAR MEMORY ACCESS SIGNALS BASED ON USAGE STATISTIC TRACKING.","Field of the Invention","This invention relates generally to the field of computer systems. More particularly, the invention relates to an apparatus and method for implementing a multi-level memory hierarchy including a non-volatile memory tier.","Description of the Related Art","A. Current Memory and Storage Configurations","One of the limiting factors for computer innovation today is memory and storage technology. In conventional computer systems, system memory (also known as main memory, primary memory, executable memory) is typically implemented by dynamic random access memory (DRAM). DRAM-based memory consumes power even when no memory reads or writes occur because it must constantly recharge internal capacitors. DRAM-based memory is volatile, which means data stored in DRAM memory is lost once the power is removed. Conventional computer systems also rely on multiple levels of caching to improve performance. A cache is a high speed memory positioned between the processor and system memory to service memory access requests faster than they could be serviced from system memory. Such caches are typically implemented with static random access memory (SRAM). Cache management protocols may be used to ensure that the most frequently accessed data and instructions are stored within one of the levels of cache, thereby reducing the number of memory access transactions and improving performance.","With respect to mass storage (also known as secondary storage or disk storage), conventional mass storage devices typically include magnetic media (e.g., hard disk drives), optical media (e.g., compact disc (CD) drive, digital versatile disc (DVD), etc.), holographic media, and\/or mass-storage flash memory (e.g., solid state drives (SSDs), removable flash drives, etc.). Generally, these storage devices are considered Input\/Output (I\/O) devices because they are accessed by the processor through various I\/O adapters that implement various I\/O protocols. These I\/O adapters and I\/O protocols consume a significant amount of power and can have a significant impact on the die area and the form factor of the platform. Portable or mobile devices (e.g., laptops, netbooks, tablet computers, personal digital assistant (PDAs), portable media players, portable gaming devices, digital cameras, mobile phones, smartphones, feature phones, etc.) that have limited battery life when not connected to a permanent power supply may include removable mass storage devices (e.g., Embedded Multimedia Card (eMMC), Secure Digital (SD) card) that are typically coupled to the processor via low-power interconnects and I\/O controllers in order to meet active and idle power budgets.","With respect to firmware memory (such as boot memory (also known as BIOS flash)), a conventional computer system typically uses flash memory devices to store persistent system information that is read often but seldom (or never) written to. For example, the initial instructions executed by a processor to initialize key system components during a boot process (Basic Input and Output System (BIOS) images) are typically stored in a flash memory device. Flash memory devices that are currently available in the market generally have limited speed (e.g., 50 MHz). This speed is further reduced by the overhead for read protocols (e.g., 2.5 MHz). In order to speed up the BIOS execution speed, conventional processors generally cache a portion of BIOS code during the Pre-Extensible Firmware Interface (PEI) phase of the boot process. The size of the processor cache places a restriction on the size of the BIOS code used in the PEI phase (also known as the \u201cPEI BIOS code\u201d).","B. Phase-Change Memory (PCM) and Related Technologies","Phase-change memory (PCM), also sometimes referred to as phase change random access memory (PRAM or PCRAM), \u201cPCME\u201d, Ovonic Unified Memory, or Chalcogenide RAM (C-RAM), is a type of non-volatile computer memory which exploits the unique behavior of chalcogenide glass. As a result of heat produced by the passage of an electric current, chalcogenide glass can be switched between two states: crystalline and amorphous. Recent versions of PCM can achieve two additional distinct states.","PCM provides higher performance than flash because the memory element of PCM can be switched more quickly, writing (changing individual bits to either 1 or 0) can be done without the need to first erase an entire block of cells, and degradation from writes is slower (a PCM device may survive approximately 100 million write cycles; PCM degradation is due to thermal expansion during programming, metal (and other material) migration, and other mechanisms).","In the following description, numerous specific details such as logic implementations, opcodes, means to specify operands, resource partitioning\/sharing\/duplication implementations, types and interrelationships of system components, and logic partitioning\/integration choices are set forth in order to provide a more thorough understanding of the present invention. It will be appreciated, however, by one skilled in the art that the invention may be practiced without such specific details. In other instances, control structures, gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art, with the included descriptions, will be able to implement appropriate functionality without undue experimentation.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","In the following description and claims, the terms \u201ccoupled\u201d and \u201cconnected,\u201d along with their derivatives, may be used. It should be understood that these terms are not intended as synonyms for each other. \u201cCoupled\u201d is used to indicate that two or more elements, which may or may not be in direct physical or electrical contact with each other, co-operate or interact with each other. \u201cConnected\u201d is used to indicate the establishment of communication between two or more elements that are coupled with each other.","Bracketed text and blocks with dashed borders (e.g., large dashes, small dashes, dot-dash, dots) are sometimes used herein to illustrate optional operations\/components that add additional features to embodiments of the invention. However, such notation should not be taken to mean that these are the only options or optional operations\/components, and\/or that blocks with solid borders are not optional in certain embodiments of the invention.","Memory capacity and performance requirements continue to increase with an increasing number of processor cores and new usage models such as virtualization. In addition, memory power and cost have become a significant component of the overall power and cost, respectively, of electronic systems.","Some embodiments of the invention solve the above challenges by intelligently subdividing the performance requirement and the capacity requirement between memory technologies. The focus of this approach is on providing performance with a relatively small amount of a relatively higher-speed memory such as DRAM while implementing the bulk of the system memory using significantly cheaper and denser non-volatile random access memory (NVRAM). Embodiments of the invention described below define platform configurations that enable hierarchical memory subsystem organizations for the use of NVRAM. The use of NVRAM in the memory hierarchy also enables new usages such as expanded boot space and mass storage implementations, as described in detail below.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 1","FIG. 1"],"b":["120","121","106","107","109","122"]},"A. Non-Volatile Random Access Memory (\u201cNVRAM\u201d)","There are many possible technology choices for NVRAM, including PCM, Phase Change Memory and Switch (PCMS) (the latter being a more specific implementation of the former), byte-addressable persistent memory (BPRAM), storage class memory (SCM), universal memory, Ge2Sb2Te5, programmable metallization cell (PMC), resistive memory (RRAM), RESET (amorphous) cell, SET (crystalline) cell, PCME, Ovshinsky memory, ferroelectric memory (also known as polymer memory and poly(N-vinylcarbazole)), ferromagnetic memory (also known as Spintronics, SPRAM (spin-transfer torque RAM), STRAM (spin tunneling RAM), magnetoresistive memory, magnetic memory, magnetic random access memory (MRAM)), and Semiconductor-oxide-nitride-oxide-semiconductor (SONOS, also known as dielectric memory).","NVRAM has the following characteristics:","(1) It maintains its content even if power is removed, similar to FLASH memory used in solid state disks (SSD), and different from SRAM and DRAM which are volatile;","(2) lower power consumption than volatile memories such as SRAM and DRAM;","(3) random access similar to SRAM and DRAM (also known as randomly addressable);","(4) rewritable and erasable at a lower level of granularity (e.g., byte level) than FLASH found in SSDs (which can only be rewritten and erased a \u201cblock\u201d at a time\u2014minimally 64 Kbyte in size for NOR FLASH and 16 Kbyte for NAND FLASH);","(5) used as a system memory and allocated all or a portion of the system memory address space;","(6) capable of being coupled to the processor over a bus using a transactional protocol (a protocol that supports transaction identifiers (IDs) to distinguish different transactions so that those transactions can complete out-of-order) and allowing access at a level of granularity small enough to support operation of the NVRAM as system memory (e.g., cache line size such as 64 or 128 byte). For example, the bus may be a memory bus (e.g., a DDR bus such as DDR3, DDR4, etc.) over which is run a transactional protocol as opposed to the non-transactional protocol that is normally used. As another example, the bus may one over which is normally run a transactional protocol (a native transactional protocol), such as a PCI express (PCIE) bus, desktop management interface (DMI) bus, or any other type of bus utilizing a transactional protocol and a small enough transaction payload size (e.g., cache line size such as 64 or 128 byte); and","(7) one or more of the following:\n\n","As mentioned above, in contrast to FLASH memory, which must be rewritten and erased a complete \u201cblock\u201d at a time, the level of granularity at which NVRAM is accessed in any given implementation may depend on the particular memory controller and the particular memory bus or other type of bus to which the NVRAM is coupled. For example, in some implementations where NVRAM is used as system memory, the NVRAM may be accessed at the granularity of a cache line (e.g., a 64-byte or 128-Byte cache line), notwithstanding an inherent ability to be accessed at the granularity of a byte, because cache line is the level at which the memory subsystem accesses memory. Thus, when NVRAM is deployed within a memory subsystem, it may be accessed at the same level of granularity as the DRAM (e.g., the \u201cnear memory\u201d) used in the same memory subsystem. Even so, the level of granularity of access to the NVRAM by the memory controller and memory bus or other type of bus is smaller than that of the block size used by Flash and the access size of the I\/O subsystem's controller and bus.","NVRAM may also incorporate wear leveling algorithms to account for the fact that the storage cells at the far memory level begin to wear out after a number of write accesses, especially where a significant number of writes may occur such as in a system memory implementation. Since high cycle count blocks are most likely to wear out in this manner, wear leveling spreads writes across the far memory cells by swapping addresses of high cycle count blocks with low cycle count blocks. Note that most address swapping is typically transparent to application programs because it is handled by hardware, lower-level software (e.g., a low level driver or operating system), or a combination of the two.","B. Far Memory","The far memory  of some embodiments of the invention is implemented with NVRAM, but is not necessarily limited to any particular memory technology. Far memory  is distinguishable from other instruction and data memory\/storage technologies in terms of its characteristics and\/or its application in the memory\/storage hierarchy. For example, far memory  is different from:\n\n","Far memory  may be used as instruction and data storage that is directly addressable by a processor  and is able to sufficiently keep pace with the processor  in contrast to FLASH\/magnetic disk\/optical disc applied as mass storage. Moreover, as discussed above and described in detail below, far memory  may be placed on a memory bus and may communicate directly with a memory controller that, in turn, communicates directly with the processor .","Far memory  may be combined with other instruction and data storage technologies (e.g., DRAM) to form hybrid memories (also known as Co-locating PCM and DRAM; first level memory and second level memory; FLAM (FLASH and DRAM)). Note that at least some of the above technologies, including PCM\/PCMS may be used for mass storage instead of, or in addition to, system memory, and need not be random accessible, byte addressable or directly addressable by the processor when applied in this manner.","For convenience of explanation, most of the remainder of the application will refer to \u201cNVRAM\u201d or, more specifically, \u201cPCM,\u201d or \u201cPCMS\u201d as the technology selection for the far memory . As such, the terms NVRAM, PCM, PCMS, and far memory may be used interchangeably in the following discussion. However it should be realized, as discussed above, that different technologies may also be utilized for far memory. Also, that NVRAM is not limited for use as far memory.","C. Near Memory","\u201cNear memory\u201d  is an intermediate level of memory configured in front of a far memory  that has lower read\/write access latency relative to far memory and\/or more symmetric read\/write access latency (i.e., having read times which are roughly equivalent to write times). In some embodiments, the near memory  has significantly lower write latency than the far memory  but similar (e.g., slightly lower or equal) read latency; for instance the near memory  may be a volatile memory such as volatile random access memory (VRAM) and may comprise a DRAM or other high speed capacitor-based memory. Note, however, that the underlying principles of the invention are not limited to these specific memory types. Additionally, the near memory  may have a relatively lower density and\/or may be more expensive to manufacture than the far memory .","In one embodiment, near memory  is configured between the far memory  and the internal processor caches . In some of the embodiments described below, near memory  is configured as one or more memory-side caches (MSCs) - to mask the performance and\/or usage limitations of the far memory including, for example, read\/write latency limitations and memory degradation limitations. In these implementations, the combination of the MSC - and far memory  operates at a performance level which approximates, is equivalent or exceeds a system which uses only DRAM as system memory. As discussed in detail below, although shown as a \u201ccache\u201d in , the near memory  may include modes in which it performs other roles, either in addition to, or in lieu of, performing the role of a cache.","Near memory  can be located on the processor die (as cache(s) ) and\/or located external to the processor die (as caches -) (e.g., on a separate die located on the CPU package, located outside the CPU package with a high bandwidth link to the CPU package, for example, on a memory dual in-line memory module (DIMM), a riser\/mezzanine, or a computer motherboard). The near memory  may be coupled in communicate with the processor  using a single or multiple high bandwidth links, such as DDR or other transactional high bandwidth links (as described in detail below).",{"@attributes":{"id":"p-0061","num":"0068"},"figref":"FIG. 1","b":["101","109","116","119","100","101","104","101","104","101","104","100","105"],"i":["a","a ","b","b"]},"The caches - illustrated in  may be dedicated to a particular system memory address range or a set of non-contiguous address ranges. For example, cache  is dedicated to acting as an MSC for system memory address range #  and caches  and  are dedicated to acting as MSCs for non-overlapping portions of system memory address ranges #  and # . The latter implementation may be used for systems in which the SPA space used by the processor  is interleaved into an address space used by the caches - (e.g., when configured as MSCs). In some embodiments, this latter address space is referred to as a memory channel address (MCA) space. In one embodiment, the internal caches - perform caching operations for the entire SPA space.","System memory as used herein is memory which is visible to and\/or directly addressable by software executed on the processor ; while the cache memories - may operate transparently to the software in the sense that they do not form a directly-addressable portion of the system address space, but the cores may also support execution of instructions to allow software to provide some control (configuration, policies, hints, etc.) to some or all of the cache(s). The subdivision of system memory into regions - may be performed manually as part of a system configuration process (e.g., by a system designer) and\/or may be performed automatically by software.","In one embodiment, the system memory regions - are implemented using far memory (e.g., PCM) and, in some embodiments, near memory configured as system memory. System memory address range # represents an address range which is implemented using a higher speed memory such as DRAM which may be a near memory configured in a system memory mode (as opposed to a caching mode).",{"@attributes":{"id":"p-0065","num":"0072"},"figref":["FIG. 2","FIG. 1"],"b":["140","144","140","150","150","101","105","150","151","151","174","151","152","152","152","142","153","170","172","173"]},"As indicated, near memory  may be implemented to operate in a variety of different modes including: a first mode in which it operates as a cache for far memory (near memory as cache for FM B); a second mode in which it operates as system memory A and occupies a portion of the SPA space (sometimes referred to as near memory \u201cdirect access\u201d mode); and one or more additional modes of operation such as a scratchpad memory  or as a write buffer . In some embodiments of the invention, the near memory is partitionable, where each partition may concurrently operate in a different one of the supported modes; and different embodiments may support configuration of the partitions (e.g., sizes, modes) by hardware (e.g., fuses, pins), firmware, and\/or software (e.g., through a set of programmable range registers within the MSC controller  within which, for example, may be stored different binary codes to identify each mode and partition).","System address space A  in  is used to illustrate operation when near memory is configured as a MSC for far memory B. In this configuration, system address space A  represents the entire system address space (and system address space B  does not exist). Alternatively, system address space B  is used to show an implementation when all or a portion of near memory is assigned a portion of the system address space. In this embodiment, system address space B  represents the range of the system address space assigned to the near memory A and system address space A  represents the range of the system address space assigned to NVRAM .","In addition, when acting as a cache for far memory B, the near memory  may operate in various sub-modes under the control of the MSC controller . In each of these modes, the near memory address space (NMA) is transparent to software in the sense that the near memory does not form a directly-addressable portion of the system address space. These modes include but are not limited to the following:","(1) Write-Back Caching Mode: In this mode, all or portions of the near memory acting as a FM cache B is used as a cache for the NVRAM far memory (FM) B. While in write-back mode, every write operation is directed initially to the near memory as cache for FM B (assuming that the cache line to which the write is directed is present in the cache). A corresponding write operation is performed to update the NVRAM FM B only when the cache line within the near memory as cache for FM B is to be replaced by another cache line (in contrast to write-through mode described below in which each write operation is immediately propagated to the NVRAM FM B).","(2) Near Memory Bypass Mode: In this mode all reads and writes bypass the NM acting as a FM cache B and go directly to the NVRAM FM B. Such a mode may be used, for example, when an application is not cache friendly or requires data to be committed to persistence at the granularity of a cache line. In one embodiment, the caching performed by the processor caches A and the NM acting as a FM cache B operate independently of one another. Consequently, data may be cached in the NM acting as a FM cache B which is not cached in the processor caches A (and which, in some cases, may not be permitted to be cached in the processor caches A) and vice versa. Thus, certain data which may be designated as \u201cuncacheable\u201d in the processor caches may be cached within the NM acting as a FM cache B.","(3) Near Memory Read-Cache Write Bypass Mode: This is a variation of the above mode where read caching of the persistent data from NVRAM FM B is allowed (i.e., the persistent data is cached in the near memory as cache for far memory B for read-only operations). This is useful when most of the persistent data is \u201cRead-Only\u201d and the application usage is cache-friendly.","(4) Near Memory Read-Cache Write-Through Mode: This is a variation of the near memory read-cache write bypass mode, where in addition to read caching, write-hits are also cached. Every write to the near memory as cache for FM B causes a write to the FM B. Thus, due to the write-through nature of the cache, cache-line persistence is still guaranteed.","When acting in near memory direct access mode, all or portions of the near memory as system memory A are directly visible to software and form part of the SPA space. Such memory may be completely under software control. Such a scheme may create a non-uniform memory address (NUMA) memory domain for software where it gets higher performance from near memory  relative to NVRAM system memory . By way of example, and not limitation, such a usage may be employed for certain high performance computing (HPC) and graphics applications which require very fast access to certain data structures.","In an alternate embodiment, the near memory direct access mode is implemented by \u201cpinning\u201d certain cache lines in near memory (i.e., cache lines which have data that is also concurrently stored in NVRAM ). Such pinning may be done effectively in larger, multi-way, set-associative caches.",{"@attributes":{"id":"p-0075","num":"0082"},"figref":"FIG. 2","b":["142","172","170","172","101","104","170","115","173"]},"Thus, as indicated, the NVRAM  may be implemented to operate in a variety of different modes, including as far memory B (e.g., when near memory  is present\/operating, whether the near memory is acting as a cache for the FM via a MSC control  or not (accessed directly after cache(s) A- and without MSC control )); just NVRAM system memory  (not as far memory because there is no near memory present\/operating; and accessed without MSC control ); NVRAM mass storage A; BIOS NVRAM ; and TPM NVRAM . While different embodiments may specify the NVRAM modes in different ways,  describes the use of a decode table .",{"@attributes":{"id":"p-0077","num":"0084"},"figref":["FIG. 3","FIG. 3"],"b":["300","300","310","380","142","142","300","142","142","151","152","173","173","142"]},"By way of example, operation while the near memory as cache for FM B is in the write-back caching is described. In one embodiment, while the near memory as cache for FM B is in the write-back caching mode mentioned above, a read operation will first arrive at the MSC controller  which will perform a look-up to determine if the requested data is present in the near memory acting as a cache for FM B (e.g., utilizing a tag cache ). If present, it will return the data to the requesting CPU, core - or I\/O device through I\/O subsystem . If the data is not present, the MSC controller  will send the request along with the system memory address to an NVRAM controller . The NVRAM controller  will use the decode table  to translate the system memory address to an NVRAM physical device address (PDA) and direct the read operation to this region of the far memory B. In one embodiment, the decode table  includes an address indirection table (AIT) component which the NVRAM controller  uses to translate between system memory addresses and NVRAM PDAs. In one embodiment, the AIT is updated as part of the wear leveling algorithm implemented to distribute memory access operations and thereby reduce wear on the NVRAM FM B. Alternatively, the AIT may be a separate table stored within the NVRAM controller .","Upon receiving the requested data from the NVRAM FM B, the NVRAM controller  will return the requested data to the MSC controller  which will store the data in the MSC near memory acting as an FM cache B and also send the data to the requesting processor core -, or I\/O Device through I\/O subsystem . Subsequent requests for this data may be serviced directly from the near memory acting as a FM cache B until it is replaced by some other NVRAM FM data.","As mentioned, in one embodiment, a memory write operation also first goes to the MSC controller  which writes it into the MSC near memory acting as a FM cache B. In write-back caching mode, the data may not be sent directly to the NVRAM FM B when a write operation is received. For example, the data may be sent to the NVRAM FM B only when the location in the MSC near memory acting as a FM cache B in which the data is stored must be re-used for storing data for a different system memory address. When this happens, the MSC controller  notices that the data is not current in NVRAM FM B and will thus retrieve it from near memory acting as a FM cache B and send it to the NVRAM controller . The NVRAM controller  looks up the PDA for the system memory address and then writes the data to the NVRAM FM B.","In , the NVRAM controller  is shown connected to the FM B, NVRAM mass storage A, and BIOS NVRAM  using three separate lines. This does not necessarily mean, however, that there are three separate physical buses or communication channels connecting the NVRAM controller  to these portions of the NVRAM . Rather, in some embodiments, a common memory bus or other type of bus (such as those described below with respect to ) is used to communicatively couple the NVRAM controller  to the FM B, NVRAM mass storage A, and BIOS NVRAM . For example, in one embodiment, the three lines in  represent a bus, such as a memory bus (e.g., a DDR3, DDR4, etc, bus), over which the NVRAM controller  implements a transactional protocol to communicate with the NVRAM . The NVRAM controller  may also communicate with the NVRAM  over a bus supporting a native transactional protocol such as a PCI express bus, desktop management interface (DMI) bus, or any other type of bus utilizing a transactional protocol and a small enough transaction payload size (e.g., cache line size such as 64 or 128 byte).","In one embodiment, computer system  includes integrated memory controller (IMC)  which performs the central memory access control for processor , which is coupled to: 1) a memory-side cache (MSC) controller  to control access to near memory (NM) acting as a far memory cache B; and 2) a NVRAM controller  to control access to NVRAM . Although illustrated as separate units in , the MSC controller  and NVRAM controller  may logically form part of the IMC .","In the illustrated embodiment, the MSC controller  includes a set of range registers  which specify the mode of operation in use for the NM acting as a far memory cache B (e.g., write-back caching mode, near memory bypass mode, etc, described above). In the illustrated embodiment, DRAM  is used as the memory technology for the NM acting as cache for far memory B. In response to a memory access request, the MSC controller  may determine (depending on the mode of operation specified in the range registers ) whether the request can be serviced from the NM acting as cache for FM B or whether the request must be sent to the NVRAM controller , which may then service the request from the far memory (FM) portion B of the NVRAM .","In an embodiment where NVRAM  is implemented with PCMS, NVRAM controller  is a PCMS controller that performs access with protocols consistent with the PCMS technology. As previously discussed, the PCMS memory is inherently capable of being accessed at the granularity of a byte. Nonetheless, the NVRAM controller  may access a PCMS-based far memory B at a lower level of granularity such as a cache line (e.g., a 64-bit or 128-bit cache line) or any other level of granularity consistent with the memory subsystem. The underlying principles of the invention are not limited to any particular level of granularity for accessing a PCMS-based far memory B. In general, however, when PCMS-based far memory B is used to form part of the system address space, the level of granularity will be higher than that traditionally used for other non-volatile storage technologies such as FLASH, which can only perform rewrite and erase operations at the level of a \u201cblock\u201d (minimally 64 Kbyte in size for NOR FLASH and 16 Kbyte for NAND FLASH).","In the illustrated embodiment, NVRAM controller  can read configuration data to establish the previously described modes, sizes, etc. for the NVRAM  from decode table , or alternatively, can rely on the decoding results passed from IMC  and I\/O subsystem . For example, at either manufacturing time or in the field, computer system  can program decode table  to mark different regions of NVRAM  as system memory, mass storage exposed via SATA interfaces, mass storage exposed via USB Bulk Only Transport (BOT) interfaces, encrypted storage that supports TPM storage, among others. The means by which access is steered to different partitions of NVRAM device  is via a decode logic. For example, in one embodiment, the address range of each partition is defined in the decode table . In one embodiment, when IMC  receives an access request, the target address of the request is decoded to reveal whether the request is directed toward memory, NVRAM mass storage, or I\/O. If it is a memory request, IMC  and\/or the MSC controller  further determines from the target address whether the request is directed to NM as cache for FM B or to FM B. For FM B access, the request is forwarded to NVRAM controller . IMC  passes the request to the I\/O subsystem  if this request is directed to I\/O (e.g., non-storage and storage I\/O devices). I\/O subsystem  further decodes the address to determine whether the address points to NVRAM mass storage A, BIOS NVRAM , or other non-storage or storage I\/O devices. If this address points to NVRAM mass storage A or BIOS NVRAM , I\/O subsystem  forwards the request to NVRAM controller . If this address points to TMP NVRAM , I\/O subsystem  passes the request to TPM  to perform secured access.","In one embodiment, each request forwarded to NVRAM controller  is accompanied with an attribute (also known as a \u201ctransaction type\u201d) to indicate the type of access. In one embodiment, NVRAM controller  may emulate the access protocol for the requested access type, such that the rest of the platform remains unaware of the multiple roles performed by NVRAM  in the memory and storage hierarchy. In alternative embodiments, NVRAM controller  may perform memory access to NVRAM  regardless of which transaction type it is. It is understood that the decode path can be different from what is described above. For example, IMC  may decode the target address of an access request and determine whether it is directed to NVRAM . If it is directed to NVRAM , IMC  generates an attribute according to decode table . Based on the attribute, IMC  then forwards the request to appropriate downstream logic (e.g., NVRAM controller  and I\/O subsystem ) to perform the requested data access. In yet another embodiment, NVRAM controller  may decode the target address if the corresponding attribute is not passed on from the upstream logic (e.g., IMC  and I\/O subsystem ). Other decode paths may also be implemented.","The presence of a new memory architecture such as described herein provides for a wealth of new possibilities. Although discussed at much greater length further below, some of these possibilities are quickly highlighted immediately below.","According to one possible implementation, NVRAM  acts as a total replacement or supplement for traditional DRAM technology in system memory. In one embodiment, NVRAM  represents the introduction of a second-level system memory (e.g., the system memory may be viewed as having a first level system memory comprising near memory as cache B (part of the DRAM device ) and a second level system memory comprising far memory (FM) B (part of the NVRAM ).","According to some embodiments, NVRAM  acts as a total replacement or supplement for the flash\/magnetic\/optical mass storage B. As previously described, in some embodiments, even though the NVRAM A is capable of byte-level addressability, NVRAM controller  may still access NVRAM mass storage A in blocks of multiple bytes, depending on the implementation (e.g., 64 Kbytes, 128 Kbytes, etc.). The specific manner in which data is accessed from NVRAM mass storage A by NVRAM controller  may be transparent to software executed by the processor . For example, even through NVRAM mass storage A may be accessed differently from Flash\/magnetic\/optical mass storage A, the operating system may still view NVRAM mass storage A as a standard mass storage device (e.g., a serial ATA hard drive or other standard form of mass storage device).","In an embodiment where NVRAM mass storage A acts as a total replacement for the flash\/magnetic\/optical mass storage B, it is not necessary to use storage drivers for block-addressable storage access. The removal of storage driver overhead from storage access can increase access speed and save power. In alternative embodiments where it is desired that NVRAM mass storage A appears to the OS and\/or applications as block-accessible and indistinguishable from flash\/magnetic\/optical mass storage B, emulated storage drivers can be used to expose block-accessible interfaces (e.g., Universal Serial Bus (USB) Bulk-Only Transfer (BOT), 1.0; Serial Advanced Technology Attachment (SATA), 3.0; and the like) to the software for accessing NVRAM mass storage A.","In one embodiment, NVRAM  acts as a total replacement or supplement for firmware memory such as BIOS flash  and TPM flash  (illustrated with dotted lines in  to indicate that they are optional). For example, the NVRAM  may include a BIOS NVRAM  portion to supplement or replace the BIOS flash  and may include a TPM NVRAM  portion to supplement or replace the TPM flash . Firmware memory can also store system persistent states used by a TPM  to protect sensitive system information (e.g., encryption keys). In one embodiment, the use of NVRAM  for firmware memory removes the need for third party flash parts to store code and data that are critical to the system operations.","Continuing then with a discussion of the system of , in some embodiments, the architecture of computer system  may include multiple processors, although a single processor  is illustrated in  for simplicity. Processor  may be any type of data processor including a general purpose or special purpose central processing unit (CPU), an application-specific integrated circuit (ASIC) or a digital signal processor (DSP). For example, processor  may be a general-purpose processor, such as a Core\u2122 i3, i5, i7, 2 Duo and Quad, Xeon\u2122, or Itanium\u2122 processor, all of which are available from Intel Corporation, of Santa Clara, Calif. Alternatively, processor  may be from another company, such as ARM Holdings, Ltd, of Sunnyvale, Calif., MIPS Technologies of Sunnyvale, Calif., etc. Processor  may be a special-purpose processor, such as, for example, a network or communication processor, compression engine, graphics processor, co-processor, embedded processor, or the like. Processor  may be implemented on one or more chips included within one or more packages. Processor  may be a part of and\/or may be implemented on one or more substrates using any of a number of process technologies, such as, for example, BiCMOS, CMOS, or NMOS. In the embodiment shown in , processor  has a system-on-a-chip (SOC) configuration.","In one embodiment, the processor  includes an integrated graphics unit  which includes logic for executing graphics commands such as 3D or 2D graphics commands. While the embodiments of the invention are not limited to any particular integrated graphics unit , in one embodiment, the graphics unit  is capable of executing industry standard graphics commands such as those specified by the Open GL and\/or Direct X application programming interfaces (APIs) (e.g., OpenGL 4.1 and Direct X 11)","The processor  may also include one or more cores -, although a single core is illustrated in , again, for the sake of clarity. In many embodiments, the core(s) - includes internal functional blocks such as one or more execution units, retirement units, a set of general purpose and specific registers, etc. If the core(s) are multi-threaded or hyper-threaded, then each hardware thread may be considered as a \u201clogical\u201d core as well. The cores - may be homogenous or heterogeneous in terms of architecture and\/or instruction set. For example, some of the cores may be in order while others are out-of-order. As another example, two or more of the cores may be capable of executing the same instruction set, while others may be capable of executing only a subset of that instruction set or a different instruction set.","The processor  may also include one or more caches, such as cache  which may be implemented as a SRAM and\/or a DRAM. In many embodiments that are not shown, additional caches other than cache  are implemented so that multiple levels of cache exist between the execution units in the core(s) - and memory devices B and B. For example, the set of shared cache units may include an upper-level cache, such as a level 1 (L1) cache, mid-level caches, such as level 2 (L2), level 3 (L3), level 4 (L4), or other levels of cache, an (LLC), and\/or different combinations thereof. In different embodiments, cache  may be apportioned in different ways and may be one of many different sizes in different embodiments. For example, cache  may be an 8 megabyte (MB) cache, a 16 MB cache, etc. Additionally, in different embodiments the cache may be a direct mapped cache, a fully associative cache, a multi-way set-associative cache, or a cache with another type of mapping. In other embodiments that include multiple cores, cache  may include one large portion shared among all cores or may be divided into several separately functional slices (e.g., one slice for each core). Cache  may also include one portion shared among all cores and several other portions that are separate functional slices per core.","The processor  may also include a home agent  which includes those components coordinating and operating core(s) -. The home agent unit  may include, for example, a power control unit (PCU) and a display unit. The PCU may be or include logic and components needed for regulating the power state of the core(s) - and the integrated graphics unit . The display unit is for driving one or more externally connected displays.","As mentioned, in some embodiments, processor  includes an integrated memory controller (IMC) , near memory cache (MSC) controller, and NVRAM controller  all of which can be on the same chip as processor , or on a separate chip and\/or package connected to processor . DRAM device  may be on the same chip or a different chip as the IMC  and MSC controller ; thus, one chip may have processor  and DRAM device ; one chip may have the processor  and another the DRAM device  and (these chips may be in the same or different packages); one chip may have the core(s) - and another the IMC , MSC controller  and DRAM  (these chips may be in the same or different packages); one chip may have the core(s) -, another the IMC  and MSC controller , and another the DRAM  (these chips may be in the same or different packages); etc.","In some embodiments, processor  includes an I\/O subsystem  coupled to IMC . I\/O subsystem  enables communication between processor  and the following serial or parallel I\/O devices: one or more networks  (such as a Local Area Network, Wide Area Network or the Internet), storage I\/O device (such as flash\/magnetic\/optical mass storage B, BIOS flash , TPM flash ) and one or more non-storage I\/O devices  (such as display, keyboard, speaker, and the like). I\/O subsystem  may include a platform controller hub (PCH) (not shown) that further includes several I\/O adapters  and other I\/O circuitry to provide access to the storage and non-storage I\/O devices and networks. To accomplish this, I\/O subsystem  may have at least one integrated I\/O adapter  for each I\/O protocol utilized. I\/O subsystem  can be on the same chip as processor , or on a separate chip and\/or package connected to processor .","I\/O adapters  translate a host communication protocol utilized within the processor  to a protocol compatible with particular I\/O devices. For flash\/magnetic\/optical mass storage B, some of the protocols that I\/O adapters  may translate include Peripheral Component Interconnect (PCI)-Express (PCI-E), 3.0; USB, 3.0; SATA, 3.0; Small Computer System Interface (SCSI), Ultra-640; and Institute of Electrical and Electronics Engineers (IEEE) 1394 \u201cFirewire;\u201d among others. For BIOS flash , some of the protocols that I\/O adapters  may translate include Serial Peripheral Interface (SPI), Microwire, among others. Additionally, there may be one or more wireless protocol I\/O adapters. Examples of wireless protocols, among others, are used in personal area networks, such as IEEE 802.15 and Bluetooth, 4.0; wireless local area networks, such as IEEE 802.11-based wireless protocols; and cellular protocols.","In some embodiments, the I\/O subsystem  is coupled to a TPM control  to control access to system persistent states, such as secure data, encryption keys, platform configuration information and the like. In one embodiment, these system persistent states are stored in a TMP NVRAM  and accessed via NVRAM controller .","In one embodiment, TPM  is a secure micro-controller with cryptographic functionalities. TPM  has a number of trust-related capabilities; e.g., a SEAL capability for ensuring that data protected by a TPM is only available for the same TPM. TPM  can protect data and keys (e.g., secrets) using its encryption capabilities. In one embodiment, TPM  has a unique and secret RSA key, which allows it to authenticate hardware devices and platforms. For example, TPM  can verify that a system seeking access to data stored in computer system  is the expected system. TPM  is also capable of reporting the integrity of the platform (e.g., computer system ). This allows an external resource (e.g., a server on a network) to determine the trustworthiness of the platform but does not prevent access to the platform by the user.","In some embodiments, I\/O subsystem  also includes a Management Engine (ME) , which is a microprocessor that allows a system administrator to monitor, maintain, update, upgrade, and repair computer system . In one embodiment, a system administrator can remotely configure computer system  by editing the contents of the decode table  through ME  via networks .","For convenience of explanation, the remainder of the application sometimes refers to NVRAM  as a PCMS device. A PCMS device includes multi-layered (vertically stacked) PCM cell arrays that are non-volatile, have low power consumption, and are modifiable at the bit level. As such, the terms NVRAM device and PCMS device may be used interchangeably in the following discussion. However it should be realized, as discussed above, that different technologies besides PCMS may also be utilized for NVRAM .","It should be understood that a computer system can utilize NVRAM  for system memory, mass storage, firmware memory and\/or other memory and storage purposes even if the processor of that computer system does not have all of the above-described components of processor , or has more components than processor .","In the particular embodiment shown in , the MSC controller  and NVRAM controller  are located on the same die or package (referred to as the CPU package) as the processor . In other embodiments, the MSC controller  and\/or NVRAM controller  may be located off-die or off-CPU package, coupled to the processor  or CPU package over a bus such as a memory bus (like a DDR bus (e.g., a DDR3, DDR4, etc)), a PCI express bus, a desktop management interface (DMI) bus, or any other type of bus.",{"@attributes":{"id":"p-0106","num":"0113"},"figref":["FIGS. 4A-M","FIGS. 4A-M"]},"While some of the same numerical designations are used across multiple figures in , this does not necessarily mean that that the structures identified by those numerical designations are always identical. For example, while the same numbers are used to identify an integrated memory controller (IMC)  and CPU  in several figures, these components may be implemented differently in different figures. Some of these differences are not highlighted because they are not pertinent to understanding the underlying principles of the invention.","While several different system platform configuration approaches are described below, these approaches fall into two broad categories: split architecture, and unified architecture. Briefly, in the split architecture scheme, a memory side cache (MSC) controller (e.g., located in the processor die or on a separate die in the CPU package) intercepts all system memory requests. There are two separate interfaces that \u201cflow downstream\u201d from that controller that exit the CPU package to couple to the Near Memory and Far Memory. Each interface is tailored for the specific type of memory and each memory can be scaled independently in terms of performance and capacity.","In the unified architecture scheme a single memory interface exits the processor die or CPU package and all memory requests are sent to this interface. The MSC controller along with the Near and Far Memory subsystems are consolidated on this single interface. This memory interface must be tailored to meet the memory performance requirements of the processor and must support a transactional, out-of-order protocol at least because PCMS devices may not process read requests in order. In accordance with the above general categories, the following specific platform configurations may be employed.","The embodiments described below include various types of buses\/channels. The terms \u201cbus\u201d and \u201cchannel\u201d are used synonymously herein. The number of memory channels per DIMM socket will depend on the particular CPU package used in the computer system (with some CPU packages supporting, for example, three memory channels per socket).","Additionally, in the embodiments described below which use DRAM, virtually any type of DRAM memory channels may be used including, by way of example and not limitation, DDR channels (e.g., DDR3, DDR4, DDR5, etc). Thus, while DDR is advantageous because of its wide acceptance in the industry, resulting price point, etc., the underlying principles of the invention are not limited to any particular type of DRAM or volatile memory.",{"@attributes":{"id":"p-0112","num":"0119"},"figref":["FIG. 4A","FIG. 4A"],"b":["403","406","401","450","451","407","401","403","406","310","331","124","124","331"]},"The DIMMs - use DDR slots and electrical connections defining a DDR channels  with DDR address, data and control lines and voltages (e.g., the DDR3 or DDR4 standard as defined by the Joint Electron Devices Engineering Council (JEDEC)). The PCM devices on the DIMMs - provide the far memory capacity of this split architecture, with the DDR channels  to the CPU package  able to carry both DDR and transactional protocols. In contrast to DDR protocols in which the processor  or other logic within the CPU package (e.g., the IMC  or MSC controller ) transmits a command and receives an immediate response, the transactional protocol used to communicate with PCM devices allows the CPU  to issue a series of transactions, each identified by a unique transaction ID. The commands are serviced by a PCM controller on the recipient one of the PCM DIMMs, which sends responses back to the CPU package , potentially out of order. The processor  or other logic within the CPU package  identifies each transaction response by its transaction ID, which is sent with the response. The above configuration allows the system to support both standard DDR DRAM-based DIMMs (using DDR protocols over DDR electrical connections) and PCM-based DIMMs configurations (using transactional protocols over the same DDR electrical connections).",{"@attributes":{"id":"p-0114","num":"0121"},"figref":"FIG. 4B","b":["452","440","310","331","124","453","442","401","453","442","401","452","453"]},{"@attributes":{"id":"p-0115","num":"0122"},"figref":"FIG. 4C","b":["403","406","401","407","403","406","310","331","124","455","454","455"]},{"@attributes":{"id":"p-0116","num":"0123"},"figref":"FIG. 4D","b":["452","440","310","331","124","455","454","455","401","440","452"]},{"@attributes":{"id":"p-0117","num":"0124"},"figref":"FIG. 4E","b":["456","454","310","331","124","456"]},{"@attributes":{"id":"p-0118","num":"0125"},"figref":"FIG. 4F","b":["458","457","458","458","124","458","457","457"]},{"@attributes":{"id":"p-0119","num":"0126"},"figref":"FIG. 4G","b":["124","310","410","411","411","410","411","411"],"i":["a ","b ","a ","b"]},{"@attributes":{"id":"p-0120","num":"0127"},"figref":"FIG. 4H","b":["461","461","124","460","470","461","462","461","461","470"],"i":["a ","b "]},{"@attributes":{"id":"p-0121","num":"0128"},"figref":"FIG. 4I","b":["464","401","471","463","463","124","460","470","462","463","463","463","470"],"i":["a","b ","b "]},{"@attributes":{"id":"p-0122","num":"0129"},"figref":"FIG. 4J","b":["465","465","462","401","124","465"]},{"@attributes":{"id":"p-0123","num":"0130"},"figref":"FIG. 4K","b":["466","470","401","124","466"]},{"@attributes":{"id":"p-0124","num":"0131"},"figref":"FIG. 4L","b":["464","471","310","331","124","467","468","401","467"]},{"@attributes":{"id":"p-0125","num":"0132"},"figref":"FIG. 4M","b":["469","469","468","401","469","469","124"]},"In some of the embodiments described above, such as that illustrated in , the DRAM DIMMS and PCM-based DIMMS reside on the same memory channel. Consequently the same set of address\/control and data lines are used to connect the CPU to both the DRAM and PCM memories. In order to reduce the amount of data traffic through the CPU mesh interconnect, in one embodiment, a DDR DIMM on a common memory channel with a PCM-based DIMM is configured to act as the sole MSC for data stored in the PCM-based DIMM. In such a configuration, the far memory data stored in the PCM-based DIMM is only cached in the DDR DIMM near memory within the same memory channel, thereby localizing memory transactions to that particular memory channel.","Additionally, to implement the above embodiment, the system address space may be logically subdivided between the different memory channels. For example, if there are four memory channels, then \u00bc of the system address space may be allocated to each memory channel. If each memory channel is provided with one PCMS-based DIMM and one DDR DIMM, the DDR DIMM may be configured to act as the MSC for that \u00bc portion of the system address space.","The choice of system memory and mass storage devices may depend on the type of electronic platforms on which embodiments of the invention are employed. For example, in a personal computer, tablet computer, notebook computer, smartphone, mobile phone, feature phone, personal digital assistant (PDA), portable media player, portable gaming device, gaming console, digital camera, switch, hub, router, set-top box, digital video recorder, or other devices that have relatively small mass storage requirements, the mass storage may be implemented using NVRAM mass storage A alone, or using NVRAM mass storage A in combination with a flash\/magnetic\/optical mass storage B. In other electronic platforms that have relatively large mass storage requirements (e.g., large-scale servers), the mass storage may be implemented using magnetic storage (e.g., hard drives) or any combination of magnetic storage, optical storage, holographic storage, mass-storage flash memory, and NVRAM mass storage A. In such a case, system hardware and\/or software responsible for storage may implement various intelligent persistent storage allocation techniques to allocate blocks of persistent program code and data between the FM B\/NVRAM storage A and a flash\/magnetic\/optical mass storage B in an efficient or otherwise useful manner.","For example, in one embodiment a high powered server is configured with a near memory (e.g., DRAM), a PCMS device, and a magnetic mass storage device for large amounts of persistent storage. In one embodiment, a notebook computer is configured with a near memory and a PCMS device which performs the role of both a far memory and a mass storage device (i.e., which is logically partitioned to perform these roles as shown in ). One embodiment of a home or office desktop computer is configured similarly to a notebook computer, but may also include one or more magnetic storage devices to provide large amounts of persistent storage capabilities.","One embodiment of a tablet computer or cellular telephony device is configured with PCMS memory but potentially no near memory and no additional mass storage (for cost\/power savings). However, the tablet\/telephone may be configured with a removable mass storage device such as a flash or PCMS memory stick.","Various other types of devices may be configured as described above. For example, portable media players and\/or personal digital assistants (PDAs) may be configured in a manner similar to tablets\/telephones described above, gaming consoles may be configured in a similar manner to desktops or laptops. Other devices which may be similarly configured include digital cameras, routers, set-top boxes, digital video recorders, televisions, and automobiles.","As alluded to above, the storage cells of various far memory technologies, such as PCMS, may have various reliability concerns that are a function of their usage. For example, the appropriate read and\/or write low level access signals applied to a far memory storage cell (e.g., pulse width, voltage amplitude, current amplitude, etc.) may change as a function of the number of times it has been written to. Moreover, the appropriate read threshold voltage for a far memory storage cell (which also may be viewed as an analog access signal) may change as a function of the length of time that has elapsed since the storage cell was last written to.","As mentioned previously, in order to account for these reliability concerns, wear leveling algorithms may be used to \u201cspread out\u201d accesses to the cells in an attempt to keep the low level signaling characteristics approximately the same across a PCMS storage device's storage cells. Wear leveling algorithms, however, may be costly to implement. For example, wear leveling algorithms may temporarily suspend far memory accesses during time periods in which the data of heavily utilized storage cells and minimally used storage cells are \u201cswapped\u201d. This has the effect of reducing far memory performance. Moreover, the logic circuitry needed to implement the wear leveling function may consume scores of logic gates that, if implemented proximate to the far memory storage devices themselves (e.g., on a same DIMM card or within a same SSD package) may exceed or otherwise challenge the power and surface area constraints of a peripheral platform that the far memory devices are affixed on.","It therefore may be beneficial to de-emphasize, or avoid altogether, the use of wear leveling in a system having far memory technology.","According to one possible approach, one or more usage statistics of a specific set of far memory storage addresses is tracked, and, the appropriate low level signaling properties applied to that set of addresses is determined as a function of the tracked accesses. Here, the usage statistics are tracked and utilized during normal system operation rather than at only system bring up, system test diagnostics and\/or in response to a system failure. The appropriate low level signals are then applied. Notably, however, the specific characteristics of the appropriate low level signals (e.g., specific waveform shapes, specific analog parameters such as specific voltages and currents), and the particular values for the tracked parameters that the appropriate signals are determined from (e.g., the specific number of write accesses and\/or specific amount of time that has elapsed since a last write), should be dependent on the specific far memory technology employed (e.g., type of PCMS, generation of PCMS, etc).","It therefore behooves system designers to implement a generic platform capable of applying appropriate signals as a function of tracked parameters irrespective of the storage device's particular technology. That is, a platform that essentially supports the ability to \u201cprogram\u201d into the system's NVRAM circuitry  specific low level access signal characteristics (e.g., specific pulse widths, specific voltage amplitudes, specific current amplitudes, specific read threshold voltages, etc.) and the specific tracked value parameters (e.g., a specific number of writes, a specific amount of time since a last write) that such signal values are determined from, where, the specific signal characteristics and tracked values are a function of the specific type of far memory technology resident in the system.",{"@attributes":{"id":"p-0137","num":"0144"},"figref":["FIGS. 5 and 6","FIG. 5","FIG. 6","FIG. 5"],"b":["532","532","532","532","532"]},"A first correlation is instantiated that tracks certain usage parameters _ to _N for each of N sets of address space _ to _N of a memory core . Memory core  may be implemented, for example, with PCMS devices coupled to a same memory channel and the address space of the PCMS devices is broken down into N address sets _ to _N. Said another way, the address space of the memory storage supported by the memory channel can be viewed as being arranged into N address sets _ to _N.","Here, if X bits are used to specify an address to memory core , there are 2unique addresses. If there are N address sets, each unique address set will therefore correspond to 2\/N unique addresses. For example, if a memory channel uses 24 bits of address to access the memory core  there are 2=16,777,216 unique memory addresses supported by the memory channel. If the memory address space of the memory channel is configured into N=2=16,384 unique address sets _ to _N, each address set will correspond to 2\/2=2=1,024 unique addresses supported by the memory channel. The sets may represent contiguous address space but they do not need to be organized in this manner. For example, some form of interleaving may be used so that consecutive addresses in a same set have a numerical offset of N or value based on N. Further still, the strategy for determining which addresses belong in which set may be based on the structural and\/or wiring architecture of the memory core . A more thorough discussion of possible address set definition schemes are described further below.","Whatever scheme is used to organize the specific addresses into distinct address sets is incorporated into address decoder . Here, address decoder  receives  the address of a read or write transaction targeted to the memory core  as an input, and, in response, produces  an identifier  of the specific set that the address belongs to as an output. Here, N may be programmable and may be an input term provided to the address decoder .","In response to the address decoder  identifying the particular address set that an incoming address belongs to, the tracking statistics for that address set are looked-up  from a first level of look-up circuitry  (such as content addressable memory (CAM) circuitry). In an embodiment, two tracking statistics are kept for each set of addresses: 1) total number of write accesses ; and, 2) time of last write operation . In a further embodiment, these statistics are updated for a write transaction targeted to the memory core  but are not updated  for a read transaction targeted to the memory core  (if updated, they are eventually written back to the first level storage circuitry ). Specifically, if the incoming transaction is a write transaction, the number of write accesses  is incremented by 1 and the time of last write operation  is updated to be the current time.","A fetched (and possibly updated) usage statistic is then used as a look-up parameter to a second look-up level  to retrieve  a digital representation (e.g., a plurality of bits) of an appropriate low level signaling characteristic (or characteristics set or \u201csignature\u201d) for the implicated address set . For example, as observed in the embodiment of , the total number of writes statistic  that was retrieved for the implicated address set is used as a look up parameter to storage circuit  (which may also be implemented with CAM circuitry) to retrieve low level signature . The low level signaling signature  is essentially a digital code or other representation from which the appropriate low level signaling (e.g., any one or more of waveform shape, voltage amplitude, current amplitude, etc.) for the memory core  for the particular transaction (read or write) and implicated address set can be determined. The signature  as contained within its storage circuit  (e.g., CAM) may have a read signature and write signature and any appropriate one of these is used depending on the type of transaction at hand. Here, it is worthwhile to note that various types of PCMS devices may actually perform a \u201cpre-read\u201d prior to a write, hence, a write transaction may actually be implemented with both a read operation and write operation. In this case, both a read signature and a write signature would be included in the total signature information used to implement the transaction. Notably, as observed in , the storage circuit  has X entries which corresponds to the granularity at which the tracked statistic used as the look-up parameter (e.g., total number of writes) is designed to affect specific low level signals applied to the memory core  for the transaction.","Additionally, as observed in the embodiment of , in the case of a read operation, another lookup is performed in the second look-up level  (e.g., in another CAM circuit ). Here, the time of last write operation statistic  that was fetched in the first look-up is used by logic circuitry  to calculate an amount of time that has elapsed since the last write operation . The elapsed time since the last write operation  is then used as a look-up parameter into storage circuit  to fetch a signature of the appropriate read threshold voltage  to apply when reading the targeted storage cell. The applicable signatures ,  are then provided to low level memory access circuitry  having digital-to-analog converters and\/or wave shaping circuitry that assist in effecting the correct analog signals applied to the memory core .","In an embodiment, the second level look-up storage circuitry ,  defines its search key column(s) entries with ranges. A hit is recognized when an input term falls within one of the ranges. For example, the entries of the search column for look-up table  may consist of different, consecutive ranges of total numbers of write operations (e.g., 0 to 1,000 for the first entry; 1,001 to 10,000 for the second entry, etc.). When a total number of write operations for the applicable address set is fetched from the first look-up level , it will hit within one of the ranges of the search column of table , which, in turn, will identify the appropriate analog signal signature for the transaction.","According to various approaches, the individual address sets _ through _N are composed of contiguous addresses (address ranges) and address decoder  contains binning logic that can determine which address range a particular address is associated with. For example, logic circuitry  may be informed of, or calculate, the appropriate address ranges for N contiguous address ranges and may further populate 2N registers with the minimum and maximum address for each set\/range. With comparison logic circuitry coupled to the registers for a set\/range (e.g., for a same set\/range, \u201cgreater than\u201d comparison circuitry coupled to the minimum address value register and \u201cless than\u201d comparison circuitry coupled to the maximum address value register), logic circuitry can determine which set a received address belongs to (e.g., both the greater than and less than comparison circuits signify a logical \u201ctrue\u201d).","In a simpler approach, the address set identifier  may be the transaction address or a portion of the transaction address (e.g., a row component or a column component of the address, or portions thereof). Here, the individual address sets _ to _N in the first level of look-up  may be defined by address (or address portion) ranges.","In other approaches, rather than have contiguous address ranges, the address sets are composed of interleaved addresses having a fixed offset with respect to one another (e.g., each address in a set has an offset of N with respect to its neighboring address in the same set). In this case, address decoder  may include division logic circuitry that divides the incoming address by a value based on N and examines the remainder to identify what set the address belongs to.","The approach for determining the address sets, as designed into address decoder , may also take into account the structure of the memory core  itself. For instance, storage cells coupled to a same row or a same column may be grouped into a same set because such cells are coupled to a common, critical node within the memory core (e.g., a same row node or a same column node) whose applicable pulse widths, voltage\/current amplitudes, etc. stress the cells in like fashion. As such, tracking the usage of these cells as a group and determining the appropriate low level signals to apply to them as a group is largely consistent with a more ideal (but less practical) scheme that tracks usage and applies signals to the cells on an individual cell-by-cell basis. To further reduce the amount of data that is tracked, addresses from different rows\/columns of the core may be grouped into a same set if their wiring is deemed proximate to one another and\/or there is some other structural relationship within the memory core that leads to a belief that they may receive same low level signaling as a function of the accesses made to the group as a whole.","Different hardware platform architectures than that depicted in  may also exist. For example, the architecture of  indicates that both low level signaling signatures ,  are determined from the same address set definition. In alternate approaches, the signatures ,  may be driven by different address set definitions, which, in turn, corresponds to the grouping of different parts of the memory core architecture. For example, the low level signaling signature  for a write operation or a read operation (other than the read threshold voltage in the case of a read operation) may be determined from the total number of times the address's column component has been written to (or other first grouping of memory core wiring and\/or structure).","By contrast, the read threshold voltage  for a read operation may be determined from the time elapsed since the last write to the address's corresponding row component (or other, different, second grouping of core wiring and\/or structure). This would correspond to different types of set identifiers  (one for read transactions and one for write transactions) and potentially two separate look-up circuits in the first level look-up  (a first CAM used for reads and a second CAM used for writes). Again, those of ordinary skill can determine from the low level design details of the structure of the memory core  what groupings of addresses are appropriate to permit same application of signals as a function of accesses made to the group as a whole, as well as what tracked statistics are pertinent, whether the type of transaction is pertinent (read or write) and what the specific low level signaling should be.","In another possible embodiment, for a single input transaction address, addresses associated with a same row (or other first address grouping) are identified in a first address set, and, addresses associated with a same column (or other second address grouping) are identified is a second address set. Total number of writes and time of last write are tracked for all the sets so that the system tracks the total number of writes and the time of last write for each row and each column in the system (or, more generally, the two different groupings). In this case, two sets of tracked statistics (e.g., two sets of total number of write accesses) are produced for a single transaction address input. The tracked statistics may be added or mathematically combined in some fashion (e.g., each weighted equally or one weighted more heavily than other) to establish, for example, a total number of write addresses for the targeted cell based on the combined perspective of the two address groupings (e.g. a combined row and column perspective). The total number may then be used as a look-up parameter into the second stage look-up  to produce an analog signaling signature based on this combined perspective.","Again, in order to reduce the amount of information tracked, the \u201crows\u201d or \u201ccolumns\u201d described above may instead be larger, different groupings of memory core structure and\/or wiring where same low level signaling is appropriate based on accesses to the corresponding groups as a whole.","In order for the address decoder  to configure itself to properly identify the correct address set for any transaction address input, information identifying the type of memory core, the address sets for the type of memory core, or the applicable function(s) for determining the address sets (e.g., contiguous ranges, interleaved, etc.) for the memory core are provided to the NVRAM controller . According to one approach, this information is communicated to the NVRAM controller  by the memory core  (e.g., having the information pre-programmed therein). According to another approach this information is kept in system BIOS and provided to the NVRAM controller . In either approach the information may be provided to the NVRAM controller  at system bring-up. The information is then used by the NVRAM controller  to internally configure the address decoder  so that it can subsequently determine the correct address set for any given read or write transaction address.",{"@attributes":{"id":"p-0154","num":"0161"},"figref":["FIGS. 7-","FIGS. 7-"],"b":["701","702","703","702","716","717","716","717","716","701","701","717","717"]},"Here, the storage devices  of can be viewed as the memory core  referred to above with respect to . As observed in FIG. , the D\/A circuitry and\/or waveform circuitry that converts the received signatures into an actual low level signal are located in the interface circuit (and\/or the memory device(s) ). All other roles\/responsibilities of the above described techniques may be implemented entirely on the memory controller , entirely on the interface circuit , or may be partially implemented on both.","At one extreme, as observed in , all of the remaining roles\/responsibilities are implemented entirely on the memory controller . That is, each of the address decoder , the first level look-up storage circuitry and the second level look-up storage circuitry and any logic in between reside on the memory controller . In this case the, for a read or write command sent to the far interface circuit , the memory controller also sends the applicable low level signaling signature(s) (e.g., which may further include a read threshold voltage signature for read operations) to the interface circuitry .","At the other extreme, as observed in , all of these roles\/responsibilities , , are instead implemented on the interface circuitry . As such, for both read and write transactions, the memory controller sends a read or write command with the address but any additional information used to determine the applicable low level signaling signature is not sent to the interface circuitry because all determinations as to the appropriate low level signaling can be made locally on the platform where the storage device(s)  reside.","In cases where the roles\/responsibilities are shared across the channel, as observed in , the memory controller sends to the interface circuitry information related to and used for the determination of the low level signaling signature\u2014other than the signatures themselves.","For instance, according to the approach observed in , the memory controller , includes the address decoder so that it can determine which address set or set(s) are implicated by the transaction address. The memory controller then sends an identifier of the implicated address set to the interface circuit . The interface circuit , which includes the first and second level look-up circuitry , then determines the applicable low level signaling signature from the address set information (e.g., by performing both the first and second stage look-ups).","According to another approach, observed in , the memory controller includes the address decoder and determines the appropriate address set for the transaction's address. The memory controller also includes the first level look-up circuitry and looks up the information that is tracked for the address set. The tracked information (e.g., total number of writes and\/or time of last write or time elapsed since last write) is then sent to the interface circuit which uses the information to determine the applicable low level signaling signature. Depending on implementation, in the case of read operations the memory controller may include logic to determine time elapsed since the last write, or, such logic may be located on the interface circuit ."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following description and accompanying drawings are used to illustrate embodiments of the invention. In the drawings:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4E"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4F"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4G"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4H"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4I"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4J"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4K"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4L"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4M"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 7A-7D","FIG. 5"]}]},"DETDESC":[{},{}]}
