---
title: Efficiently exporting local device access onto a system area network using a direct-call interface
abstract: A novel module system solution is provided for direct, transparent access to I/O storage devices connected to a host server within a system area network cluster for efficient sharing of resources and databases among all clustered servers. An exemplary driver system comprises a host driver module which may reside on and which may interface to a host operating system, and which establishes service connections with remote data processors on the system area network and provides direct access to the local storage devices while bypassing protocol stacks of the host operating system; an input/output platform (IOP) including a device driver module which may reside on and which may interface the local storage devices for controlling an array of local storage devices; and a local bus which connects and transports messages and data between the host driver module and the input/output platform (IOP). The host driver module may be a software stack which includes a Local Transport for providing an interface to the input/output platform (IOP) on the local bus and communicating with the input/output platform (IOP) across the local bus; a Remote Transport for providing an interface to other nodes of the system area network; and a Connection Manager for providing connection services and coordinating functions responsible for creating a direct call path between the Local Transport and the Remote Transport. The input/output platform (IOP) includes a communication layer which defines an open, standard mechanism for communication between the host driver module and the device driver module. Both the host driver module and the device driver module may constitute a single device that is portable across a plurality of operating systems (OSs) and host network platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06965911&OS=06965911&RS=06965911
owner: Intel Corporation
number: 06965911
owner_city: Santa Clara
owner_country: US
publication_date: 19981221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to a direct-call interface between local and remote transports in a device driver for efficiently exporting local device access to a network.","A computer network is a system designed to link together computers, servers, peripherals, storage devices, and communication devices for communications. Examples of such a computer network include a local area network (LAN), a wide are network (WAN), a campus area network (CAN), a metropolitan area network (MAN), and global area network (GAN). The central characteristics of a computer network is sharing, whether that be sharing of cost, resources, or data bases, while at the same time insuring a high degree of data privacy.","As high-speed and high-performance communications become necessary for many applications such as data warehousing, decision support, and transaction processing, many companies have adopted clustering technology for ability to provide availability and scalability for these applications. A cluster is a group of servers, workstations, and\/or storage devices that are linked together to operate as a single system to deliver high performance, low latency, and extreme reliability. Clustering offers three primary benefits: scalability, availability, and manageability. Scalability is obtained by allowing servers to work together and to allow additional services to be added for increased processing as needed. The cluster combines the processing power of all servers within the cluster to run a single logical application (such as a database server). Availability is obtained by allowing servers to \u201cback each other up\u201d in the case of failure. Likewise, manageability is obtained by allowing the cluster to be utilized as a single, unified computer resource, that is, the user sees the entire cluster (rather than any individual server) as the provider of services and applications.","High-performance network technologies known as system area networks (SANs) have recently been developed for linking servers and network-connected storage devices within a cluster. Virtual Interface (VI) Architecture is designed to enable applications to communicate over a system area network (SAN). Basically, the VI Architecture provides a transport service which allows a collection of independent standards-based servers to be utilized as a highly scalable cluster to meet the performance and capacity requirements of the largest and most demanding enterprise applications. Its fast server-to-server communications can enhance an application's scalability and performance in a variety of ways\u2014from allowing a single application to run efficiently across dozens of clustered nodes, to speeding up the exchange of data between distributed application modules running on different application servers.","One of the inherent challenges of the system area network (SAN) is to design a data transport mechanism that can deliver a large amount of data between nodes in the cluster (\u201chigh bandwidth\u201d), and that can exchange messages quickly between nodes in the cluster (\u201clow latency\u201d). Traditional data transports between nodes in a cluster are done through the network infrastructure provided by a host operating system (OS). The operating system (OS) structure requires large amount of system processing overhead and extended processing time with respect to each message.","In particular, for a specific application such as access of a storage device of a remote server in a cluster, standard interfaces provided by the host operating system (OS) such as file system application program interfaces (API) are used to access a network file system (NFS). However, direct access to storage devices of remote servers within a cluster through input\/output (I\/O) subsystems was not performed transparently. Each request for a data transfer in the traditional data transports incurred a large amount of processing overhead of operating system (OS) stacks on both the local and remote servers of the cluster. This overhead limits input\/output (I\/O) bandwidth, increases input\/output (I\/O) latency, and increases the response time to the application.","Current alternative to high network overhead is for another application to generate special application-to-application messages to the remote node in order to access a remote server in a cluster. A remote application running on the remote node must issue an input\/output (I\/O) request to the remote operating system (OS) on behalf of the local application. This way the operating system (OS) overhead on the local server is avoided, but there are still a great deal of coordination between cooperating applications of the local server and the remote server.","Therefore, there is an urgent need for providing a direct, transparent access to storage devices connected to a host server within a network for efficient sharing of resources and databases among all network members.","Accordingly, the present invention is designed to provide an exemplary input\/output platform (IOP) access module in a host system for providing input\/output device access between a host system and another system. An exemplary input\/output platform (IOP) access module includes a Local Transport arranged to provide an interface to an input\/output platform (IOP) supporting an array of input\/output devices; a Remote Transport arranged to provide an interface to another system; and a Connection Manager arranged to establish connection services and to create a direct call path between the Local Transport and the Remote Transport so as to provide access to input\/output devices.","While the following detailed description focuses on an exemplary implementation providing a connection arrangement between an input\/output platform (IOP) of a host server and other remote servers of a system area network (SAN), the present invention is not limited thereto. More particularly, the present invention may be equally applicable for implementation with other types of networks or other types of device interconnections (e.g., non-networked and\/or non-clustered devices), and between other types of devices.","Reference is now made to exemplary arrangements and particularly to  which illustrates an exemplary background cluster of a host server  and remote servers , ,  connected to a system area network (SAN) . Each server is an autonomous system which can include one or more processors, memory, one or more input\/output platforms and other local I\/O resources. Examples of such a server include desktop computers (PCs) and workstations. As shown in , each server such as a host server  can include at least one SAN network interface card (NIC)  attached to a local bus, an input\/output (I\/O) platform (IOP)  of one or more input\/output (I\/O) processors, and an array of disk storage devices .","Further, each server, as shown in , can include one or more processors , a primary memory  containing application programs , a system manager , an operating system (OS) , and I\/O driver modules  all interconnected to the I\/O platform  of one or more I\/O processors via a local bus . The operating system (OS)  provides traditional network infrastructure for data transports between nodes in a cluster using an industry standard Internet protocol (TCP\/IP) and network file system (NFS) protocol stacks, although any other industry standard such as an Open Systems Interconnection (OSI) protocol stack may also be used for networking purposes. General descriptions of these software protocol stacks, particularly, the TCP\/IP and NFS protocol stacks can be found in Tanenbaum, \u201c\u201d (Second Edition, Prentice Hall: 1988).","However, the exemplary background host operating system (OS) structure requires a large amount of system processing overhead and an extended processing time to process and send each message between the local and remote servers in a cluster. This overhead limits the I\/O bandwidth and increases the I\/O latency of the cluster. While there are alternatives to avoiding the operating system (OS) overhead on local and remote servers, such as coordinating special application-to-application messages between the local and remote servers, more effective solutions for providing direct, transparent access to storage devices connected to servers within a system area network cluster are needed without incurring the overhead of the operating system (OS) protocol stack and without coordinating special application-to-application messages between nodes in a system area network (SAN) cluster.","Attention now turns to  which illustrates an exemplary driver system solution for providing a direct, transparent access to I\/O storage devices connected to a host server  within a system area network (SAN)  cluster for efficient sharing of resources and databases among all clustered servers , ,  according to the principles of the present invention. Each server as intended by the present invention is an autonomous system which may include one or more processors, a memory, one or more input\/output platforms and other local I\/O resources, such as a desktop computer (PC) or a workstation. The exemplary driver system according to the present invention is designed to avoid using special application-to-application messages between nodes within a SAN cluster and to bypass the layers of OS protocol stacks, thereby avoiding the overhead of the traditional network infrastructure in the operating system (OS) while concomitantly increasing the number of CPU cycles available for other data processes. The host server  as intended has a host operating system (OS) (not shown), and a host driver module  installed and dynamically configured to accept communication requests from remote servers  and  through a SAN network interface card (NIC) . Such a host driver module  (alternatively known as an input output platform (IOP) access module) may be provided as any one of a hardware module, a combined hardware\/software module, and a software module. A software or partial software implementation is advantageous in that upgrades can be easily downloaded (e.g., from a tangible medium such as a disk, or via the internet) for flexible\/easy reconfiguration of the host driver module  and the host server .","As shown in , the exemplary driver system may include a host driver module  which resides on and which may interface with the host operating system (OS), a local bus  such as a Peripheral Component Interconnect (PCI) bus, and an Input\/Output Platform (IOP)  for controlling an array of storage devices . Other popular bus varieties such as Extended Industry Standard Architecture (EISA), Video Electronics Standards Association (VESA) may be used for transporting data from the host device driver module  to the local IOP  and, vice versa. The disk storage devices  may include, for example, a magnetic storage device and\/or an optical storage device for storing programs and databases. The Input\/Output Platform (IOP)  may include at least one input\/output (I\/O) processor (not shown).","The IOP  contains a device driver module  which resides on and interfaces with the particular controller and storage devices, and a communication layer  which defines an open, standard mechanism for communication between the host driver module  and the device driver module . The device driver module  is responsible for control and data transfer of the hardware devices, such as storage devices. The communication layer  may include a message layer which sets up a communication session, and a transport layer which defines how information will be shared. Collectively, the communication layer  may be responsible for managing all requests, and providing a set of Application Programming Interfaces (APIs) for delivering messages, along with a set of support routines that process them.","The driver system, as shown in , may be designed in accordance with the Intelligent Input\/Output (IO) Architecture Specification for allowing input\/output (I\/O) subsystems such as storage devices to operate independently from both the specific device being controlled and the host operating system (OS). Both the driver module  and the device driver module  of the IOP  may be provided as separate modules, or may be provided via a single device driver that is portable across a plurality of operating systems (OSs) and host network platforms, and may be designed to work interoperably with different combinations of I\/O storage devices and operating systems (OSs). Typically, the host driver module  is the host OS-specific portion of the driver system that interfaces with the host OS, whereas the device driver module  is a device-specific portion of the driver system that interfaces with the particular controllers and I\/O devices.","Again, the host driver module  as intended by an exemplary embodiment of the present invention is software including the following device driver components: a Connection Manager , a Local Transport , and a Remote Transport . However, hardware or mixed hardware\/software equivalent devices may be optionally installed to perform the same functions of the host driver module  including the Connection Manager , the Local Transport , and the Remote Transport . In one exemplary embodiment of the present invention, the Local Transport  provides an interface to the IOP  on the PCI bus  and communicates with the IOP  across the PCI bus . The Remote Transport  provides an interface to other nodes such as remote servers  and  within the SAN cluster . The Connection Manager  provides connection services and the coordinating function responsible for creating a direct call path between the Local Transport  and the Remote Transport .","The host server  and the exemplary driver system as shown in  may power-up and initialize independently with respect to other nodes such as remote servers  and  within the SAN cluster . The host server  is initialized by the specific OS software. When the exemplary driver system is initialized, the Local Transport  scans the PCI bus  to locate and initialize all local IOPs  (assuming more than one I\/O processor is installed) and builds an opaque \u201ccontext\u201d structure for each IOP found, as will be later described in conjunction with . The Remote Transport  prepares to accept requests from a remote server through the SAN network interface card (NIC) . The Connection Manager  then queries the Local Transport  to determine the number of IOPs and builds a descriptor structure for each IOP. This IOP descriptor structure, as shown in , includes an exported table of function call pointers and the context required by the Local Transport  to communicate with each IOP. Next, the Connection Manager  establishes a SAN management communication channel through the Remote Transport , and waits for an external connection from a remote server on a SAN for exporting local device access onto the SAN  by way of a direct call interface between the Local Transport  and the Remote Transport .","Refer now to  which illustrates data structures established during initialization for a direct call interface between Local Transport  and Remote Transport  by the Connection Manager  for an inbound message from a remote SAN server for direct access to local IOP  in the exemplary driver system according to the present invention. The Local Transport  builds a list of different IOP context structures if different IOPs are available in the host server . Each IPO context structure includes different designations for direct access to each IOPs. However, since only one IOP  is illustrated for purposes of discussion, a corresponding opaque IOP context structure is set for communication with the local IOP . In addition, the Local Transport  also has a send handler function which is a program interface to receive an inbound message from a remote SAN server for direct access to local IOP .","The Connection Manager  builds an IOP descriptor structure for each IOP found. Each IOP descriptor structure includes an exported table of function call pointers such as IOP context pointer and send handler function pointer required by the Local Transport  to communicate with the IOP . The Remote Transport  builds an IOP connection structure including at least an IOP descriptor pointer which refers to the IOP descriptor structure of the Connection Manager  for making a direct call to the Local Transport  through the send handler function. In addition, the Remote Transport  also has a receive handler function which is a program interface to receive an inbound message from a remote server on a SAN for direct access to local IOP  and to deliver an outbound message to a remote server on a SAN. For an outbound message to a remote server on a SAN, data structures established for a direct call interface between Local Transport  and Remote Transport  by the Connection Manager  as shown in  remain the same. However, the communication directions between the send handler function in the Local Transport  and the receive handler function in the Remote Transport  are reversed.","After initialization, the exemplary driver system as shown in  is prepared for providing a direct, transparent access to I\/O storage devices within a system area network (SAN) cluster that bypasses the traditional OS protocol stacks for efficient sharing of resources so as to avoid incurring the overhead of the OS stack and coordinating special application-to-application messages between nodes of a SAN cluster. An exemplary direct call interface between the Local Transport  and the Remote Transport  of the host driver module  established for the purpose of exporting device access to host servers on a system area network (SAN) will be described in detail with reference to ,  and  hereinbelow.","First, in order to establish a service connection to an IOP , that is a logical connection of an IOP to a remote server for the purpose of sending messages and transporting data therebetween, a remote server  or  in a system area network (SAN) connects to and exchanges messages with the Connection Manager . Messages exchanged between the Connection Manager  of the exemplary driver system and the remote server are based on a protocol specified by the network used and\/or the Intelligent I\/O Architecture. The Connection Manager  next advertises the presence of local IOPs that are available for external use. In the exemplary embodiment of the present invention as shown in , only one IOP  is illustrated for purposes of discussion. Additional IOPs may be connected to PCI bus .","When a remote server  or  requests a service connection to an IOP , the Connection Manager  passes the address of an IOP descriptor structure as shown in  to the Remote Transport  to establish the service connection. The IOP descriptor structure provides the Remote Transport  access to the function call pointers and context required by the Local Transport  to communicate directly with the IOP .","When a service connection to a local IOP  is established by remote server  or  and the Connection Manager  of the host server , low latency and high-bandwidth messages passing between nodes is obtained by bypassing the layers of OS protocol stacks when sending and receiving messages. Data structure pointers are exchanged to establish a direct call relationship between software modules on the host server  within a system area network (SAN) . To deliver an inbound message from a remote server on a system area network (SAN) , the receive handler function in the Remote Transport  simply refers to the IOP descriptor structure of the Connection Manager  to make a direct call to the send handler function in the Local Transport , providing the function with the IOP context and the message frame pointer. Likewise, an outbound message from the Local Transport  is delivered to a send handler function (not shown) in the Remote Transport . However, the outbound message includes a pointer to a structure containing the function address and context required by the Remote Transport  to send the message to a remote server  or  within a system area network (SAN) .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5","b":["340","350","314","316","312","316","510","316","520","312"]},"Next, a context field in the inbound message frame is saved and replaced with a new context field for the Remote Transport  at step . The pointer to the IOP descriptor structure of the Connection Manager  is retrieved from the IOP connection structure at step . Then, the send handler function pointer and the IOP context pointer are read from the IOP descriptor structure of the Connection Manager  at step . The send handler function in the Local Transport  is called in order to pass the inbound message frame using the IOP context pointer in step .","Likewise,  illustrates an exemplary step-by-step process of routing an outbound message or data from a local I\/O platform (IOP)  of an exemplary driver system to a remote server of a system area network (SAN) according to the principles of the present invention. Again, each message is transmitted in a series of message frames. When an outbound message is routed to a remote server on a system area network (SAN), an outbound message frame is delivered to the send handler function in the Local Transport  at step . The context field in the outbound message frame is read at step . This context is a pointer to a callback object structure in the Remote Transport  which contains the address of the Remote Transport IOP connection structure for a service connection.","Next, the callback function is called, passing the callback context pointer and the outbound message frame as outgoing parameters at step . At the Remote Transport , an outgoing message frame and the IOP connection structure address are delivered to the send handler function at step . A context field in the outgoing message frame is replaced with the saved context from the original inbound message frame as described with reference to , at step . Then, the outgoing message frame is sent out the service connection to a remote server on a SAN at step .","As described, the present invention provides a sophisticated driver system of a server system that is designed to bypass the layers of OS protocol stacks without incurring the overhead of the traditional network infrastructure in the operating system (OS), and to avoid using special application-to-application messages between nodes within a SAN cluster. The driver system may be configured in accordance with an Intelligent Input\/Output (IO) Architecture specification with a host driver module and a device driver module interconnected by a communication layer for available operations with different combinations of I\/O storage devices and operating systems (OSs).","While there have been illustrated and described what are considered to be exemplary embodiments of the present invention, it will be understood by those skilled in the art and as technology develops that various changes and modifications may be made, and equivalents may be substituted for elements thereof without departing from the true scope of the present invention. In addition, many modifications may be made to adapt a particular situation to the teachings of the present invention without departing from the central scope thereof. Therefore, it is intended that the present invention not be limited to any particular exemplary embodiment disclosed, but that the present invention includes all embodiments falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete appreciation of exemplary embodiments of the present invention, and many of the attendant advantages of the present invention, will become readily apparent as the same becomes better understood by reference to the following detailed description when considered in conjunction with the accompanying drawings in which like reference symbols indicate the same or similar components, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
