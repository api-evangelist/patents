---
title: Method and apparatus for generating encryption stream ciphers
abstract: A method and an apparatus for generating encryption stream ciphers are based on a recurrence relation designed to operate over finite fields larger than GF(2). A non-linear output can be obtained by using one or a combination of non-linear processes to form an output function. The recurrence relation and the output function can be selected to have distinct pair distances such that, as the shift register is shifted, no identical pair of elements of the shift register are used twice in either the recurrence relation or the output function. Under these conditions, the recurrence relation and the output function also can be chosen to optimize cryptographic security or computational efficiency.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06888941&OS=06888941&RS=06888941
owner: Qualcomm, Inc.
number: 06888941
owner_city: San Diego
owner_country: US
publication_date: 20020513
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is a continuation application of U.S. application Ser. No. 09\/143,441, filed Aug. 28, 1998 now U.S. Pat. No. 6,490,357 entitled \u201cMethod and Apparatus for Generating Encryption Stream Ciphers,\u201d and currently assigned to the assignee of the present application.","I. Field of the Invention","The present invention relates to encryption. More particularly, the present invention relates to a method and apparatus for generating encryption stream ciphers.","II. Description of the Related Art","Encryption is a process whereby data is manipulated by a random process such that the data is made unintelligible by all but the targeted recipient. One method of encryption for digitized data is through the use of stream ciphers. Stream ciphers work by taking the data to be encrypted and a stream of pseudo-random bits (or encryption bit stream) generated by an encryption algorithm and combining them, usually with the exclusive-or (XOR) operation. Decryption is simply the process of generating the same encryption bit stream and removing the encryption bit stream with the corresponding operation from the encrypted data. If the XOR operation was performed at the encryption side, the same XOR operation is also performed at the decryption side. For a secured encryption, the encryption bit stream must be computationally difficult to predict.","Many of the techniques used for generating the stream of pseudo-random numbers are based on linear feedback shift register (LFSR) over the Galois finite field of order 2. This is a special case of the Galois Finite field of order 2where n is a positive integer. For n=1, the elements of the Galois field comprise bit values zero and one. The register is updated by shifting the bits over by one bit position and calculating a new output bit. The new bit is shifted into the register. For a Fibonacci register, the output bit is a linear function of the bits in the register. For a Galois register, many bits are updated in accordance with the output bit just shifted out from the register. Mathematically, the Fibonacci and Galois register architectures are equivalent.","The operations involved in generating the stream of pseudo-random numbers, namely the shifting and bit extraction, are efficient in hardware but inefficient in software or other implementations employing a general purpose processor or microprocessor. The inefficiency increases as the length of the shift register exceeds the length of the registers in the processor used to generate the stream. In addition, for n=0, only one output bit is generated for each set of operations which, again, results in a very inefficient use of the processor.","An exemplary application which utilizes stream ciphers is wireless telephony. An exemplary wireless telephony communication system is a code division multiple access (CDMA) system. The operation of CDMA system is disclosed in U.S. Pat. No. 4,901,307, entitled \u201cSPREAD SPECTRUM MULTIPLE ACCESS COMMUNICATION SYSTEM USING SATELLITE OR TERRESTRIAL REPEATERS,\u201d assigned to the assignee of the present invention, and incorporated by reference herein. The CDMA system is further disclosed in U.S. Pat. No. 5,103,459, entitled \u201cSYSTEM AND METHOD FOR GENERATING SIGNAL WAVEFORMS IN A CDMA CELLULAR TELEPHONE SYSTEM,\u201d assigned to the assignee of the present invention, and incorporated by reference herein. Another CDMA system includes the GLOBALSTAR communication system for world wide communication utilizing low earth orbiting satellites. Other wireless telephony systems include time division multiple access (TDMA) systems and frequency division multiple access (FDMA) systems. The CDMA systems can be designed to conform to the \u201cTIA\/EIA\/IS-95 Mobile Station-Base Station Compatibility Standard for Dual-Mode Wideband Spread Spectrum Cellular System,\u201d hereinafter referred to as the IS-95 standard. Similarly, the TDMA systems can be designed to conform to the TIA\/EIA\/IS-54 (TDMA) standard or to the European Global System for Mobile Communication (GSM) standard.","Encryption of digitized voice data in wireless telephony has been hampered by the lack of computational power in the remote station. This has led to weak encryption processes such as the Voice Privacy Mask used in the TDMA standard or to hardware generated stream ciphers such as the A5 cipher used in the GSM standard. The disadvantages of hardware based stream ciphers are the additional manufacturing cost of the hardware and the longer time and larger cost involved in the event the encryption process needs to be changed. Since many remote stations in wireless telephony systems and digital telephones comprise a microprocessor and memory, a stream cipher which is fast and uses little memory is well suited for these applications.","The present invention is a novel and improved method and apparatus for generating encryption stream ciphers. In accordance with the present invention, the recurrence relation is designed to operate over finite fields larger than GF(2). The linear feedback shift register used to implement the recurrence relation can be implemented using a circular buffer or sliding a window. In the exemplary embodiment, multiplications of the elements of the finite field are implemented using lookup tables. A non-linear output can be obtained by using one or a combination of non-linear processes. The stream ciphers can be designed to support multi-tier keying to suit the requirements of the applications for which the stream ciphers are used.","It is an object of the present invention to generate encryption stream ciphers using architectures which are simple to implement in a processor. In particular, more efficient implementations can be achieved by selecting a finite field which is more suited for the processor. The elements and coefficients of the recurrence relation can be selected to match the byte or word size of the processor. This allows for efficient manipulation of the elements by the processor. In the exemplary embodiment, the finite field selected is the Galois field with 256 elements (GF(2)). This results in elements and coefficients of the recurrence relation occupying one byte of memory which can be efficiently manipulated. In addition, the use of a larger finite field reduces the order of the recurrence relation. For a finite field GF(2), the order k of the recurrence relation which encodes the same amount of states is reduced by a factor of n (or a factor of 8 for the exemplary GF(2)).","It is another object of the present invention to implement field multiplications using lookup tables. In the exemplary embodiment, a multiplication (of non-zero elements) in the field can be performed by taking the logarithm of each of the two operands, adding the logarithmic values, and exponentiating the combined logarithmic value. The logarithmic and exponential tables can be created using an irreducible polynomial. In the exemplary embodiment, the tables are pre-computed and stored in memory. Similarly, a field multiplication with a constant coefficient can be performed using a simple lookup table. Again, the table can be pre-computed using the irreducible polynomial and stored in memory.","It is yet another object of the present invention to remove linearity in the output of a linear feedback shift register by the use of one or a combination of the following processes: irregular stuttering (sometimes referred to as decimation), non-linear function, multiple shift registers and combining outputs from the registers, variable feedback polynomial on one register, and other non-linear processes. In the exemplary embodiment, the non-linear output can be used to randomly control the stuttering of the shift register. Additionally, a non-linear output can be derived by performing a non-linear operation on selected elements of the shift register. Furthermore, the output from the non-linear function can be XORed with a set of constants such that the non-linear output bits are unpredictably inverted.","It is yet another object of the present invention to implement the linear feedback shift register using a circular buffer or a sliding window. With the circular buffer or sliding window implementation, the elements are not shifted within the buffer. Instead, a pointer or index is used to indicate the location of the most recently computed element. The pointer is moved as new elements are computed and shifted into the circular buffer or sliding window. The pointer wraps around when it reaches an edge.","It is yet another object of the present invention to provide stream ciphers having multi-tier keying capability. In the exemplary embodiment, the state of the shift register is first initialized with a secret key. For some communication systems, wherein data are transmitted over frames, a stream cipher can be generated for each frame such that erased or out of sequence frames do not disrupt the operation of the encryption process. A second tier keying process can be initialized for each frame using a frame key initialization process.","It is yet another object of the present invention to utilize a recurrence relation of maximal length so that the sequence covers a maximal number of states before repeating.","It is yet another object of the present invention to utilize a recurrence relation and output equation having distinct pair differences. Distinct pair differences ensure that, as the shift register used to implement the recurrence relation shifts, no particular pair of elements of the shift register is used twice in either the recurrence relation or in the non-linear output equation. This property removes linearity in the output from the output equation.","It is yet another object of the present invention to selectively optimize cryptographic security and computational efficiency according to the requirements of an application while maintaining distinct pair differences.","Linear feedback shift register (LFSR) is based on a recurrence relation over the Galois field, where the output sequence is defined by the following recurrence relation:\n\n\u2003\u2003(1)\n\nwhere Sis the output element, Cis a constant coefficient, k is the order of the recurrence relation, and n is an index in time. The state variables S and coefficients C are elements of the underlying finite field. Equation (1) is sometimes expressed with a constant term which is ignored in this specification.\n","A block diagram of an exemplary implementation of the recurrence relation in equation (1) is illustrated in FIG. . For a recurrence relation of order k, register  comprises k elements Sto S. The elements are provided to Galois field multipliers  which multiply the elements with the constants C. The resultant products from multipliers  are provided to Galois field adders  which sum the products to provide the output element.","For n=1, the elements of GF(2) comprise a single bit (having a value of 0 or 1) so that the and implementation of equation (1) requires many bit-wise operations. In this case, the implementation of the recurrence relation using a general purpose processor is inefficient because a processor which is designed to manipulate byte or word sized objects is utilized to perform many operations on single bits.","In the present invention, the linear feedback shift register is designed to operate over finite fields larger than GF(2). In particular, more efficient implementations can be achieved by selecting a finite field which is more suited for a processor. In the exemplary embodiment, the finite field selected is the Galois field with 256 elements (GF(2)) or other Galois fields with 2elements, where n is the word size of the processor.","In the preferred embodiment, a Galois field with 256 elements (GF(2)) is utilized. This results in each element and coefficient of the recurrence relation occupying one byte of memory. Byte manipulations can be performed efficiently by the processor. In addition, the order k of the recurrence relation which encodes the same amount of states is reduced by a factor of n, or 8 for GF(2).","In the present invention, a maximal length recurrence relation is utilized for optimal results. Maximal length refers to the length of the output sequence (or the number of states of the register) before repeating. For a recurrence relation of order k, the maximal length is N\u22121, where N is the number of elements in the underlying finite field, and N=256 in the preferred embodiment. The state of all zeros is not allowed.","An exemplary block diagram of a stream cipher generator utilizing a processor is shown in FIG. . Controller  connects to processor  and comprises the set of instructions which directs the operation of processor . Thus, controller  can comprise a software program or a set of microcodes. Processor  is the hardware which performs the manipulation required by the generator. Processor  can be implemented as a microcontroller, a microprocessor, or a digital signal processor designed to perform the functions described herein. Memory element  connects to processor  and is used to implement the linear feedback shift register and to store pre-computed tables and instructions which are described below. Memory element  can be implemented with random-access-memory or other memory devices designed to perform the functions described herein. The instructions and tables can be stored in read-only memory, so that only the memory for the register itself needs to be modified during the execution of the algorithm.","I. Generating Non-Linear Output Stream","The use of a linear feedback shift register for stream ciphers can be difficult to implement properly. This is because any linearity remaining in the output stream can be exploited to derive the state of the register at a point in time. The register can then be driven forward or backward as desired to recover the output stream. A number of techniques can be used to generate non-linear stream ciphers using a linear feedback shift register. In the exemplary embodiment, these non-linear techniques comprise stuttering (or unpredictable decimation) of the register, the use of a non-linear function on the state of the register, the use of multiple registers and non-linear combination of the outputs of the registers, the use of variable feedback polynomials on one register, and other non-linear processes. These techniques are each described below. Some of the techniques are illustrated by the example below. Other techniques to generate non-linear stream ciphers can be utilized and are within the scope of the present invention.","Stuttering is the process whereby the register is clocked in a variable and unpredictable manner. Stuttering is simple to implement and provides good results. With stuttering, the output associated with some states of the register are not provided at the stream cipher, thus making it more difficult to reconstruct the state of the register from the stream cipher.","Using a non-linear function on the state of the shift register can also provide good results. For a recurrence relation, the output element is generated from a linear function of the state of the register and the coefficients, as defined by equation (1). To provide non-linearity, the output element can be generated from a non-linear function of the state of the register. In particular, non-linear functions which operate on byte or word sized data on general purpose processors can be utilized.","Using multiple shift registers and combining the outputs from the registers in a non-linear fashion can provide good results. Multiple shift registers can be easily implemented in hardware where additional cost is minimal and operating the shift registers in parallel to maintain the same operating speed is possible. For implementations on a general purpose processor, a single larger shift register, which implements a function similar to the function of the multiple shift registers, can be utilized since the larger shift register can be updated in a constant time (without reducing the overall speed).","Using a variable feedback polynomial that which changes in an unpredictable manner on one register can also provide good results. Different polynomials can be interchanged in a random order or the polynomial can be altered in a random manner. The implementation of this technique is simple if properly designed.","II. Operations on Elements of Larger Order Finite Fields","The Galois field GF(2) comprises 256 elements. The elements of Galois field GF(2) can be represented in one of several different ways. A common and standard representation is to form the field from the coefficients modulo  of all polynomials with degree less than 8. That is, the element \u03b1 of the field can be represented by a byte with bits (a, a, . . . , a) which represent the polynomial:\n\nax+ax+ . . . +ax+a.\u2003\u2003(2)\n\nThe bits are also referred to as the coefficients of the polynomial. The addition operation on two polynomials represented by equation (2) can be performed by addition modulo two for each of the corresponding coefficients (a, a, . . . , a). Stated differently, the addition operation on two bytes can be achieved by performing the exclusive-OR on the two bytes. The additive identity is the polynomial with all zero coefficients (0, 0, . . . , 0).\n","Multiplication in the field can be performed by normal polynomial multiplication with modulo two coefficients. However, multiplication of two polynomials of order n produces a resultant polynomial of order (2n\u22121) which needs to be reduced to a polynomial of order n. In the exemplary embodiment, the reduction is achieved by dividing the resultant polynomial by an irreducible polynomial, discarding the quotient, and retaining the remainder as the reduced polynomial. The selection of the irreducible polynomial alters the mapping of the elements of the group into encoded bytes in memory, but does not otherwise affect the actual group operation. In the exemplary embodiment, the irreducible polynomial of degree 8 is selected to be:\n\nx+x+x+x+1.\u2003\u2003(3)\n\nOther irreducible monic polynomials of degree 8 can also be used and are within the scope of the present invention. The multiplicative identity element is (a, a, . . . , a)=(0, 0, . . . , 1).\n","Polynomial multiplication and the subsequent reduction are complicated operations on a general purpose processor. However, for Galois fields having a moderate number of elements, these operations can be performed by lookup tables and more simple operations. In the exemplary embodiment, a multiplication (of non-zero elements) in the field can be performed by taking the logarithm of each of the two operands, adding the logarithmic values modulo , and exponentiating the combined logarithmic value. The reduction can be incorporated within the lookup tables.","The exponential and logarithm tables can be generated as follows. First, a generator g of the multiplicative subgroup GF(2) is determined. In this case, the byte value g=2 (representing the polynomial x) is a generator. The exponential table, shown in Table 1, is a 256-byte table of the values g, for i=0, 1, . . . 2\u22121. For g(considered as an integer) of less than 256, the value of the exponential is as expected, as evidenced by the first eight entries in the first row of Table 1. Since g=2, each entry in the table is twice the value of the entry to the immediate left (taking into account the fact that Table 1 wraps to the next row). However, for each ggreater than 255, the exponential is reduced by the irreducible polynomial shown in equation (3). For example, the exponential x(first row, ninth column) is reduced by the irreducible polynomial x+x+x+x+1 to produce the remainder \u2212x\u2212x\u2212x\u22121. This remainder is equivalent to x+x+x+1 for modulo two operations and is represented as 77 (2+2+2+1) in Table 1. The process is repeated until gfor all index i=0 to 255 are computed.","Having defined the exponential table, the logarithm table can be computed as the inverse of the exponential table. In Table 1, there is a unique one to one mapping of the exponential value gfor each index i which results from using an irreducible polynomial. For Table 1, the mapping is i\u21c42, or the value stored in the i-th location is 2. Taking logof both sides results in the following: log(i)\u21c4i. These two mappings indicate that if the content of the i-th location in the exponential table is used as the index of the logarithm table, the log of this index is the index of the exponential table. For example, for i=254, the exponential value 2=2=166 as shown in the last row, fifth column in Table 1. Taking logof both sides yields 254=log(166). Thus, the entry for the index i=166 in the logarithmic table is set to 254. The process is repeated until all entries in the logarithmic table have been mapped. The log of 0 is an undefined number. In the exemplary embodiment, a zero is used as a place holder.","Having defined the exponential and logarithmic tables, a multiplication (of non-zero elements) in the field can be performed by looking up the logarithmic of each of the two operands in the logarithmic table, adding the logarithmic values using modulo , and exponentiating the combined logarithmic value by looking up the exponential table. Thus, the multiplication operation in the field can be performed with three lookup operations and a truncated addition. In the exemplary Galois field GF(2), each table is 255 bytes long and can be pre-computed and stored in memory. In the exemplary embodiment, the logarithm table has an unused entry in position 0 to avoid the need to subtract 1 from the indexes. Note that when either operand is a zero, the corresponding entry in the logarithmic table does not represent a real value. To provide the correct result, each operand needs to be tested to see if it is zero, in which case the result is 0, before performing the multiplication operation as described.","For the generation of the output element from a linear feedback shift register using a recurrence relation, the situation is simpler since the coefficients Care constant as shown in equation (1). For efficient implementation, these coefficients are selected to be 0 or 1 whenever possible. Where Chave values other than 0 or 1, a table can be pre-computed for the multiplication t=C\u00b7i, where i=0, 1, 2, . . . , 2\u22121. In this case, the multiplication operation can be performed with a single table lookup and no tests. Such a table is fixed and can be stored in read-only memory.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exponential Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"11"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"11","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i","xx0","xx1","xx2","xx3","xx4","xx5","xx6","xx7","xx8","xx9"]},{"entry":{"@attributes":{"namest":"1","nameend":"11","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"11"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"9","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"11","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["00x","1","2","4","8","16","32","64","128","77","154"]},{"entry":["01x","121","242","169","31","62","124","248","189","55","110"]},{"entry":["02x","220","245","167","3","6","12","24","48","96","192"]},{"entry":["03x","205","215","227","139","91","182","33","66","132","69"]},{"entry":["04x","138","89","178","41","82","164","5","10","20","40"]},{"entry":["05x","80","160","13","26","52","104","208","237","151","99"]},{"entry":["06x","198","193","207","211","235","155","123","246","161","15"]},{"entry":["07x","30","60","120","240","173","23","46","92","184","61"]},{"entry":["08x","122","244","165","7","14","28","56","112","224","141"]},{"entry":["09x","87","174","17","34","68","136","93","186","57","114"]},{"entry":["10x","228","133","71","142","81","162","9","18","36","72"]},{"entry":["11x","144","109","218","249","191","51","102","204","213","231"]},{"entry":["12x","131","75","150","97","194","201","223","243","171","27"]},{"entry":["13x","54","108","216","253","183","35","70","140","85","170"]},{"entry":["14x","25","50","100","200","221","247","163","11","22","44"]},{"entry":["15x","88","176","45","90","180","37","74","148","101","202"]},{"entry":["16x","217","255","179","43","86","172","21","42","84","168"]},{"entry":["17x","29","58","116","232","157","119","238","145","111","222"]},{"entry":["18x","241","175","19","38","76","152","125","250","185","63"]},{"entry":["19x","126","252","181","39","78","156","117","234","153","127"]},{"entry":["20x","254","177","47","94","188","53","106","212","229","135"]},{"entry":["21x","67","134","65","130","73","146","105","210","233","159"]},{"entry":["22x","115","230","129","79","158","113","226","137","95","190"]},{"entry":["23x","49","98","196","197","199","195","203","219","251","187"]},{"entry":["24x","59","118","236","149","103","206","209","239","147","107"]},{"entry":["25x","214","225","143","83","166"]},{"entry":{"@attributes":{"namest":"1","nameend":"11","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Logarithmic Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"11"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"11","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i","xx0","xx1","xx2","xx3","xx4","xx5","xx6","xx7","xx8","xx9"]},{"entry":{"@attributes":{"namest":"1","nameend":"11","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"11"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"9","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"11","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["00x","0","0","1","23","2","46","24","83","3","106"]},{"entry":["01x","47","147","25","52","84","69","4","92","107","182"]},{"entry":["02x","48","166","148","75","26","140","53","129","85","170"]},{"entry":["03x","70","13","5","36","93","135","108","155","183","193"]},{"entry":["04x","49","43","167","163","149","152","76","202","27","230"]},{"entry":["05x","141","115","54","205","130","18","86","98","171","240"]},{"entry":["06x","71","79","14","189","6","212","37","210","94","39"]},{"entry":["07x","136","102","109","214","156","121","184","8","194","223"]},{"entry":["08x","50","104","44","253","168","138","164","90","150","41"]},{"entry":["09x","153","34","77","96","203","228","28","123","231","59"]},{"entry":["10x","142","158","116","244","55","216","206","249","131","111"]},{"entry":["11x","19","178","87","225","99","220","172","196","241","175"]},{"entry":["12x","72","10","80","66","15","186","190","199","7","222"]},{"entry":["13x","213","120","38","101","211","209","95","227","40","33"]},{"entry":["14x","137","89","103","252","110","177","215","248","157","243"]},{"entry":["15x","122","58","185","198","9","65","195","174","224","219"]},{"entry":["16x","51","68","105","146","45","82","254","22","169","12"]},{"entry":["17x","139","128","165","74","91","181","151","201","42","162"]},{"entry":["18x","154","192","35","134","78","188","97","239","204","17"]},{"entry":["19x","229","114","29","61","124","235","232","233","60","234"]},{"entry":["20x","143","125","159","236","117","30","245","62","56","246"]},{"entry":["21x","217","63","207","118","250","31","132","160","112","237"]},{"entry":["22x","20","144","179","126","88","251","226","32","100","208"]},{"entry":["23x","221","119","173","218","197","64","242","57","176","247"]},{"entry":["24x","73","180","11","127","81","21","67","145","16","113"]},{"entry":["25x","187","238","191","133","200","161"]},{"entry":{"@attributes":{"namest":"1","nameend":"11","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"When implemented in hardware, shifting bits is a simple and efficient operation. Using a processor and a shift register larger than the registers of the processor makes shifting bits an iterative procedure, which is very inefficient. When the units to be shifted are bytes or words, shifting becomes simpler because there is no carry between bytes. However, the shifting process is still iterative and inefficient.","In the exemplary embodiment, the linear feedback shift register is implemented with a circular buffer or a sliding window. The diagrams showing the contents of circular buffer at time n at time n+1 are shown in , respectively. For circular buffer , each element of the shift register is stored in a corresponding location in memory. A single index, or pointer , maintains the memory location of the most recent element stored in memory, which is Sin FIG. A. At time n+1, the new element Sis computed and stored over the oldest element Sin memory, as shown in FIG. B. Thus, instead of shifting all elements in memory, pointer  is moved to the memory location of the new element S. When pointer  reaches the end of circular buffer , it is reset to the beginning (as shown in FIGS. A and B). Thus, circular buffer acts as if it is a circle and not a straight line.","Circular buffer can be shifted from left-to-right, or right-to-left as shown in . Correspondingly, pointer  can move left-to-right, or right-to-left as shown in . The choice in the direction of the shift is a matter of implementation style and does not affect the output result.","To generate an output element in accordance with a recurrence relation, more than one element is typically required from memory. The memory location associated with each required element can be indicated by a separate pointer which is updated when the register is shifted. Alternatively, the memory location associated with each required element can be computed from pointer  as necessary. Since there is a one-to-one mapping of each element to a memory location, a particular element can be obtained by determining the offset of that element from the newest element (in accordance with the recurrence relation), adding that offset to pointer , and addressing the memory location indicated by the updated pointer. Because of the circular nature of the memory, the calculation of the updated pointer is determined by an addition modulo k of the offset to pointer . Addition modulo k is simple when k is a power of two but is otherwise an inefficient operation on a processor.","In the preferred embodiment, the shift register is implemented with sliding window as shown in FIG. C. Sliding window is at least twice as long as circular buffer and comprises two circular buffers and arranged adjacent to each other. Each of circular buffers and behaves like circular described above. Circular buffer is an exact replica of circular buffer . In normal operation, buffer contains meaningful values. Values stored in buffer are then calculated from the values in buffer . Thus, each element of the shift register is stored in two corresponding locations in memory, one each for circular buffers and . Pointer  maintains the memory location of the most recent element stored in circular buffer , which is Sin FIG. C. In the exemplary embodiment, pointer  starts at the middle of sliding window , moves right-to-left, and resets to the middle again when it reaches the end on the left side.","From , it can be observed that no matter where in circular buffer pointer  appears, the previous k\u22121 elements can be addressed to the right of pointer . Thus, to address an element in the shift register in accordance with the recurrence relation, an offset of k\u22121 or less is added to pointer . Addition modulo k is not required since the updated pointer is always to the right of pointer  and computational efficiency is obtained. For this implementation, sliding window can be of any length at least twice as long as circular buffer , with any excess bytes being ignored. Furthermore, the update time is constant and short.","IV. Exemplary Stream Cipher Based on LFSR Over GF(2)","The present invention can be best illustrated by an exemplary generator for a stream cipher based on a linear feedback shift register over GF(2). The stream cipher described below uses the byte operations described above over the Galois field of order 8 with the representation of {circle around (+)} and {circle around (\u00d7)} for operations of addition and multiplication, respectively, over the Galois field. In the exemplary embodiment, table lookup is utilized for the required multiplication with constants C. In the exemplary embodiment, a sliding window is used to allow fast updating of the shift register.","A block diagram of the exemplary generator is shown in FIG. . In the exemplary embodiment, linear feedback shift register  is 17 octets (or 136 bits) long which allows shift register  to be in 2\u22121 (or approximately 8.7\u00d710) states. The state where the entire register is 0 is not a valid state and does not occur from any other state. The time to update register  with a particular number of non-zero elements in the recurrence relation is constant irrespective of the length of register . Thus, additional length for register  (for higher order recurrence relation) can be implemented at a nominal cost of extra bytes in memory.","In the exemplary embodiment, linear feedback shift register  is updated in accordance with the following recurrence relation:","\u2003=(100)\u2295\u2295(141),\u2003\u2003(4)","where the operations are defined over GF(2), \u2295 is the exclusive-OR operation on two bytes represented by Galois adders , and {circle around (\u00d7)} is a polynomial modular multiplication represented by Galois multipliers  (see FIG. ). In the exemplary embodiment, the modular multiplications on coefficients  are implemented using byte table lookups on pre-computed tables as described above. In the exemplary embodiment, the polynomial modular multiplication table is computed using the irreducible polynomial defined by equation (3). The recurrence relation in equation (4) was chosen to be maximal length and to have few non-zero coefficients, so that the shift register elements used were distinct from the ones used for the non-linear functions below.","In the exemplary embodiment, to disguise the linearity of shift register , two of the techniques described above are used, namely stuttering and using a non-linear function. Additional non-linearity techniques are utilized and are described below. In the exemplary embodiment, non-linearity is introduced by performing a non-linear operation on multiple elements of shift register . In the exemplary embodiment, four of the elements of shift register  are combined using a function which is non-linear. An exemplary non-linear function is the following:\n\n=()\u00d7(),\u2003\u2003(5)\n\nwhere Vis the non-linear output (or the generator output), {circle around (\u00d7)} is the addition truncated modulo  represented by arithmetic adders , and {circle around (\u00d7)} is the multiplication modulo  represented by modular multiplier  as described below. In the exemplary embodiment, the four bytes used are S, S, Sand S, where Sis the oldest calculated element in the sequence according to the recurrence relation in equation (4). These elements are selected such that, as the register shifts, no two elements are used in the computation of two of the generator outputs. The pairwise distances between these elements are distinct values. For example, Sis not combined with S, S, nor Sagain as it is shifted through register . This property is referred to as a \u201cfull positive difference set.\u201d\n","Simple byte addition, with the result truncated modulo , is made non-linear in GF(2) by the carry between bits. In the exemplary embodiment, two pairs of elements in the register {(Sand S) and (Sand S)} are combined using addition modulo  to yield two intermediate results. However, addition modulo  is not ideal since the least significant bits have no carry input and are still combined linearly.","Another non-linear function which can be computed conveniently on a processor is multiplication. However, truncation of a normal multiplication into a single byte may not yield good results because multiplication modulo  does not form a group since the results are not well distributed within the field. A multiplicative group of the field of integers modulo the prime number 257 can be used. This group consists of integers in the range of 1 to 256 with the group operation being integer multiplication reduced modulo . Note that the value 0 does not appear in the group but the value 256 does. In the exemplary embodiment, the value of 256 can be represented by a byte value of 0.","Typically, processors can perform multiplication instructions efficiently but many have no capability to perform, or to perform efficiently, divide or modulus instructions. Thus, the modulo reduction by 257 can represent a performance bottleneck. However, reduction modulo  can be computed using computation modulo , which in the case of n=8 is efficient on common processors. It can be shown that for a value X in the range of 1 to 2\u22121 (where X is the result of a multiplication of two 8th order operands), reduction modulo  can be computed as: \n\n\nwhere Xis the reduction modulo  of X and Xis the reduction modulo  of X. Equation (6) indicates that reduction modulo  of a 16-bit number can be obtained by subtracting the 8 most significant bits (X\/256) from the 8 least significant bits (X). The result of the subtraction is in the range of \u2212255 and 255 and may be negative. If the result is negative, it can be adjusted to the correct range by adding 257. In the alternative embodiment, reduction modulo  can be performed with a lookup table comprising 65,536 elements, each 8 bits wide.\n","Multiplication of the two intermediate results is one of many non-linear functions which can be utilized. Other non-linear functions, such as bent functions or permuting byte values before combining them, can also be implemented using lookup tables. The present invention is directed at the use of these various non-linear functions for producing non-linear output.","In the exemplary embodiment, stuttering is also utilized to inject additional non-linearity. The non-linear output derived from the state of the linear feedback shift register as described above may be used to reconstruct the state of the shift register. This reconstruction can be made more difficult by not representing some of the states at the output of the generator, and choosing which in an unpredictable manner. In the exemplary embodiment, the non-linear output is used to determine what subsequent bytes of non-linear output appear in the output stream. When the generator is started, the first output byte is used as the stutter control byte. In the exemplary embodiment, each stutter control byte is divided into four pairs of bits, with the least significant pair being used first. When all four pairs have been used, the next non-linear output byte from the generator is used as the next stutter control byte, and so on.","Each pair of stutter control bits can take on one of four values. In the exemplary embodiment, the action performed for each pair value is tabulated in Table 3.",{"@attributes":{"id":"p-0069","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Pair",{}]},{"entry":["Value","Action of Generator"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["(0, 0)","Register is cycled but no output is produced"]},{"entry":["(0, 1)","Register is cycled and the non-linear output XOR with"]},{"entry":[{},"the constant (0 1 1 0 1 0 0 1)becomes the output of the"]},{"entry":[{},"generator. Register is cycled again."]},{"entry":["(1, 0)","Register is cycled twice and the non-linear output"]},{"entry":[{},"becomes the output of the generator."]},{"entry":["(1, 1)","Register is cycled and the non-linear output XOR with"]},{"entry":[{},"the constant (1 1 0 0 0 1 0 1)becomes the output of the"]},{"entry":[{},"generator."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As shown in Table 3, in the exemplary embodiment, when the pair value is (0, 0), the register is cycled once but no output is produced. Cycling of the register denotes the calculation of the next sequence output in accordance with equation (4) and shifting this new element into the register. The next stutter control pair is then used to determine the action to be taken next.","In the exemplary embodiment, when the pair value is (0, 1) the register is cycled, and the non-linear output is generated in accordance with equation (5).","The non-linear output is XORed with the constant (0 1 1 0 1 0 0 1), and the result is provided as the generator output. The register is then cycled again. In , the XORed function is performed by XOR gate , and the constant is selected by multiplexer (MUX)  using the stutter control pair from buffer . The output from XOR gate  is provided to switch  which provides the generator output and the output byte for stutter control in accordance with the value of the stutter control pair. The output byte for stutter control is provided to buffer .","In the exemplary embodiment, when the pair value is (1, 0) the register is cycled twice and the non-linear output generated in accordance with equation (5) is provided as the generator output.","In the exemplary embodiment, when the pair value is (1, 1) the register is cycled and the non-linear output generated in accordance with equation (5). The non-linear output is then XORed with the constant (1 1 0 0 0 1 0 1), and the result is provided as the generator output.","In the exemplary embodiment, the constants which are used in the above steps are selected such that when a generator output is produced, half of the bits in the output are inverted with respect to the outputs produced by the other stutter control pairs. For stutter control pair (1, 0), the non-linear output can be viewed as being XORed with the constant (0 0 0 0 0 0 0 0). Thus, the Hamming distance between any of the three constants is four. The bit inversion further masks the linearity of the generator and frustrates any attempt to reconstruct the state based on the generator output. The present invention supports a multi-tier keying structure. A stream cipher which supports multi-tier keying structure is especially useful for wireless communication systems, wherein data are transmitted in frames which may be received in error or out-of-sequence. An exemplary two-tier keying structure is described below.","In the exemplary embodiment, one secret key is used to initialize the generator. The secret key is used to cause the generator to take an unpredictable leap in the sequence. In the exemplary embodiment, the secret key has a length of four to k\u22121 bytes (or 32 to 128 bits for the exemplary recurrence relation of order 17). Secret keys of less than 4 bytes are not preferred because the initial randomization may not be adequate. Secret keys of greater than k\u22121 bytes can also be utilized but are redundant, and care should be taken so that a value for the key does not cause the register state to be set to all 0, a state which cannot happen with the current limitation.","A flow diagram of an exemplary secret key initialization process is shown in FIG. . The process starts at block . In the exemplary embodiment, at block , the state of the shift register is first initialized with the Fibonacci numbers modulo . Thus, elements S, S, S, S, S, S, and so on, are initialized with 1, 1, 2, 3, 5, 8, and so on, respectively. Although Fibonacci numbers are used, any set of non-zero numbers which are not linearly related in the Galois field can be used to initialize the register. These numbers should not have exploitable linear relationship which can be used to reconstruct the state of the register.","Next, the loop index n is set to zero, at block . The secret key initialization process then enters a loop. In the first step within the loop, at block , the first unused byte of the key material is added to S. Addition of the key material causes the generator to take an unpredictable leap in the sequence. The key is then shifted by one byte, at block , such that the byte used in block  is deleted. The register is then cycled, at block . The combination of blocks  and  effectively performs the following calculation:\n\n=(100)\u2295\u2295(141{circle around (\u00d7)}()),\u2003\u2003(7)\n\nwhere K is the first unused byte of the key material. The loop index n is incremented, at block . A determination is then made whether all key materials have been used, at block . If the answer is no, the process returns to block . Otherwise, the process continues to block .\n","In the exemplary embodiment, the length of the key is added to S, at block . Addition of the length of the key causes the generator to take an additional leap in the sequence. The process then enters a second loop. In the first step within the second loop, at block , the register is cycled. The loop index n is incremented, at block , and compared against the order k of the generator, at block . If n is not equal to k, the process returns to block . Otherwise, if n is equal to k, the process continues to block  where the state of the generator is saved. The process then terminates at block .","In addition to the secret key, a secondary key can also be used in the present invention. The secondary key is not considered secret but is used in an exemplary wireless telephony system to generate a unique cipher for each frame of data. This ensures that erased or out-of-sequence frames do not disrupt the flow of information. In the exemplary embodiment, the stream cipher accepts a per-frame key, called a frame key, in the form of a 4-octet unsigned integer. The per-frame initialization is similar to the secret key initialization above, but is performed for each frame of data. If the use of the stream cipher is such that it is unnecessary to utilize per-frame key information, for example, for file transfer over a reliable link, the per-frame initialization process can be omitted.","A flow diagram of an exemplary per-frame initialization process with the frame key is shown in FIG. A. The process starts at block . In the exemplary embodiment, at block , the state of the generator is initialized with the state saved from the secret key initialization process as described above. Next, the loop index n is set to zero, at block . The per-frame initialization process then enters a loop. In the first step within the loop, at block , the least significant byte of the frame key is added modulo  to S. The frame key is then shifted by three bits, at block , such that the three least significant bits used in block  are deleted. The register is then cycled, at block . In the exemplary embodiment, the loop index n is incremented at block  and compared against value \u201811\u2019 at block . The value of \u201811\u2019, as used in block , corresponds to the 32 bits used as the frame key and the fact that the frame key is shifted three bits at a time. Different selections of the frame key and different numbers of bits shifted at a time can result in different comparison values used in block . If n is not equal to \u201811\u2019, the process returns to block . Otherwise, if n is equal to \u201811\u2019, the process continues to block  and the register is cycled again. The loop index n is incremented, at block , and compared against 2k, at block . If n is not equal to 2k, the process returns to block . Otherwise, if n is equal to 2k, the process terminates at block .","The present invention has been described for the exemplary Galois finite field having 256 elements. Different finite fields can also be utilized such that the size of the elements matches the byte or word size of the processor used to manipulate the elements and\/or the memory used to implement the shift register, or having other advantages. Thus, various finite fields having more than two elements can be utilized and are within the scope of the present invention.","The example shown above utilizes a variety of non-linear processes to mask the linearity of the recurrence relation. Other generators can be designed utilizing different non-linear processes, or different combinations of the above described non-linear processes and other non-linear processes. Thus, the use of various non-linear processes to generate non-linear outputs can be contemplated and is within the scope of the present invention.","The example shown above utilizes a recurrence relation having an order of 17 and defined by equation (4). Recurrence relation having other orders can also be generated and are within the scope of the present invention. Furthermore, for a given order, various recurrence relations can be generated and are within the scope of the present invention. In the present invention, a maximal length recurrence relation is preferred for optimal results.","V. A Second Exemplary Stream Cipher Based on LFSR Over GF(2)","Both the recurrence relation and the non-linear function access elements of the shift register. Just which elements are accessed are chosen so that the distances between the elements form a \u201cfull positive difference set\u201d (\u201cOn Security of Nonlinear Filter Generators\u201d, J. Dj. Golic, in Proceedings of Fast Software Encryption 1996 Cambridge Workshop, Springer-Variag 1996.) These elements are then portioned between the recurrence relation and the nonlinear function to maximize the spread for each. Under these constraints, the present invention can be further developed to enhance cryptographic security and computational efficiency. The second exemplary embodiment provides improved cryptographic security as compared with the first exemplary embodiment.","The LFSR over GF(2) is equivalent, mathematically, to eight parallel shift registers over GF(2) of length 136, each with the same recurrence relation. The exemplary embodiment of the present invention includes a recurrence relation over GF(2), which is equivalent to a binary recurrence relation whose characteristic polynomial has 51 non-zero coefficients. The three tap positions in the recurrence are determined by the criterion outlined above (i.e., \u201cfull positive difference set\u201d).","Ideally, the degree 136 polynomial over GF(2), for best strength against cryptanalysis and maximum diffusion, should have approximately half of its coefficients as 1. There are many polynomials over GF(2) which have three coefficients which approach this goal, but all three of the coefficients are greater than 1. This means that using such polynomials would require three lookup tables and references, which is less efficient than the current implementation of the present invention. Such polynomials would, however, be perfectly acceptable on the grounds of theoretical security.","With a goal of getting the best possible equivalent binary polynomial while retaining the current structure with a coefficient of 1 (which avoids a multiplication table and lookup), analysis indicates that the use of 65 non-zero binary coefficients can provide a preferred embodiment that nearly achieves the goal of 68 non-zero coefficients. There are 16 polynomials over GF(2) meeting these criteria. There are always groups of 8 polynomials over GF(2) which have the same equivalent binary polynomial; these are just shifted bit positions in the byte. (Each equivalent binary polynomial can be found, for example, by the Berlekamp-Massey algorithm.) Thus, as shown in Table 4, there are two distinct types of polynomials meeting this criterion. For the second exemplary embodiment of the present invention, the first set of coefficient in Table 4 was used.",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Recurrence Coefficients"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"S","S","S","Type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"99","1","206","1"]},{"entry":[{},"106","1","201","1"]},{"entry":[{},"142","1","126","1"]},{"entry":[{},"148","1","214","1"]},{"entry":[{},"203","1","146","1"]},{"entry":[{},"210","1","19","1"]},{"entry":[{},"213","1","195","1"]},{"entry":[{},"222","1","136","1"]},{"entry":[{},"40","1","109","2"]},{"entry":[{},"45","1","38","2"]},{"entry":[{},"46","1","159","2"]},{"entry":[{},"57","1","129","2"]},{"entry":[{},"110","1","209","2"]},{"entry":[{},"117","1","63","2"]},{"entry":[{},"32","1","219","2"]},{"entry":[{},"140","1","97","2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"A block diagram of the second exemplary generator is shown in FIG. . In this exemplary embodiment, linear feedback shift register  is 17 octets long although other lengths for register  (for different order recurrence relation) be implemented and are within the scope of the present invention. A recurrence relation of order 17 is well suited for applications using up to 128-bit key material. In this exemplary embodiment, linear feedback shift register  is updated in accordance with the following recurrence relation:\n\n=(206)\u2295\u2295(99)\u2003\u2003(8)\n\nwhere the operations are defined over GF(2), {circle around (+)} is the exclusive-OR operation on two bytes represented by Galois adders , and {circle around (\u00d7)} is a polynomial modular multiplication represented by Galois multipliers  (see FIG. ). In this exemplary embodiment, the modular multiplications on coefficients  are implemented using byte table lookups on pre-computed tables as described above. The recurrence relation in equation (8) was chosen to be maximal length.\n","In this exemplary embodiment, to disguise the linearity of shift register , two of the techniques described above are used, namely stuttering and using a non-linear function. Additional non-linear techniques are described elsewhere in the present specification.","In this exemplary embodiment, non-linearity is introduced by combining four of the elements of shift register  using a function (or output equation) which is non-linear with respect to the linear operation over GF(2). In this exemplary embodiment, the four bytes used are S, S, Sand S, where Sis the oldest calculated element in the sequence according to the recurrence relation in equation (8).","Much of the cryptographic security of the present invention comes from the use of the non-linear function to defeat attacks against the stuttering phase so that it is desirable to make this function as strong, that is, as non-linear, as possible.","Numerous possible functions have been tried so as to compare the non-linear function to its nearest linear approximation in each bit position, and calculating the mean absolute deviation and root-mean-square deviation from 0.5, which is the theoretically perfect result. Studies have indicated that superior solutions result from rotating partial sums, a process which has carry effects in the high order bits, so that these bits are combined with the least significant bits of other elements.","On a microprocessor, the addition function will generally accept only two operations at a time, so the best apparent strategy will be to rotate after one intermediate addition. Denoting the rotation operation as ROTL(x), meaning the result of rotating the bits of x to the left by 1 position, a far superior non-linear function is:\n\n=ROTL()+\u2003\u2003(9)\n\nHere V, is the non-linear output and +is addition truncated modulo  (with the overflow discarded) represented by arithmetic adders . ROTL denotes the rotation operator .\n","An additional rotation after adding S, does not appear to yield a better result. As discussed elsewhere in the present specification, using lookup tables which implement explicitly non-linear permutations provides another alternative, but would significantly degrade the computational efficiency of the present invention.","In this exemplary embodiment, the bytes used for recurrence relation (8) comprise S, S, and Sand the bytes used for output equation (9) comprise S, S, Sand S. In this exemplary embodiment, these bytes are selected to have distinct pair distances. For recurrence relation equation (8), the three bytes used have pair distances of 4 (the distance between Sand S), 11 (the distance between Sand S), and 15 (the distance between Sand S). Similarly, for output equation (9), the four bytes used have pair distances of 2 (the distance between Sand S), 3 (the difference between Sand S), 5 (the distance between Sand S), 7 (the distance between Sand S), 10 (the distance between Sand S), and 12 (the distance between Sand S). The pair distances in recurrence relation (8) (i.e., 4, 11, and 15) are unique (or distinct) within that first respective group and that the pair differences in output equation (9) (i.e., 2, 3, 5, 7, 10, and 12) are also distinct within that second respective group. Furthermore, the pair distances in recurrence relation (8) are distinct from the pair distances in output equation (9). Distinct pair distances ensure that, as shift register  shifts, no particular pair of elements of shift register  are used twice in either recurrence relation (8) or the non-linear output equation (9). This property removes linearity in the subsequent output equation (9).","In this exemplary embodiment, multiplexer (MUX) , XOR gate , switch , and buffer  in  operate in the manner described above for MUX , XOR gate , switch , and buffer  in FIG. .","A flow diagram of a second exemplary per frame initialization process is shown in , which is a modification of the flow diagram of FIG. A.","This embodiment uses the non-linear function during the secondary key-loading process so as to mix the key information in more quickly than before, thereby allowing a shorter mixing run before generating output. This feature prevents the register state from being a linear subspace of the total set of states of the register.","The key bytes are added in to the 15byte of the register, rather than the zeroth so as to speed diffusion, this being one of the recurrence relation elements. When the \u201cframe\u201d is being loaded, 8 bits are put in at a time. In addition to adding the octet from \u201cframe\u201d, this approach also adds the output from \u201cnltap\u201d. After \u201cframe\u201d has been loaded, this approach continues cycling the register and adding the output for some number of cycles.","Thus, in comparing  with , block  is modified so that the frame is shifted by 8 bits to remove the 8 least significant bits. New block  adds the output from the non-linear function. And finally the value check in block  is changed from 11 to 4.","VI. A Third Exemplary Stream Cipher Based on LFSR Over GF(2)","As discussed above, the present invention can be further developed to enhance cryptographic security and computational efficiency while maintaining a \u201cfull positive difference set.\u201d The third exemplary embodiment provides improved computational efficiency as compared with the first exemplary embodiment.","Simpler recurrence relations can be used, at the cost of having simpler binary equivalent polynomials, which may make cryptanalysis easier. Firstly, given the constraints of the full positive difference set, by allowing the coefficients of Sand to both be 1, a multiplication table and corresponding table lookup can be avoided. There are 8 such recurrences, with the same equivalent binary polynomial with 35 non-zero coefficients. These have as the coefficients of S: 40, 45, 46, 57, 110, 117, 132 and 140, respectively.","Even simpler polynomials are possible, if some internal coefficients are permitted to be zero. In this case, not only the multiplication, but the entire reference to the extra term can be removed. There are 32 such recurrences; 8 have an equivalent binary polynomial with 11 non-zero coefficients, while the other 24 have three equivalent binary polynomials with 13 non-zero coefficients. Of these, 8 have the coefficient of 1 associated with the Sterm, while the other 16 have it associated with the Sterm. The equivalent binary polynomial for the former 8 appears, visually, to have the non-zero coefficients more \u201cspread out\u201d than the others, so for a minimum time implementation of the present invention, those recurrences would be used. The coefficients of the Sterm can be any of 79, 83, 166, 187, 225, 239, 243 and 252. For the third exemplary embodiment of the present invention, the first coefficient was used. The recurrence relation then becomes:\n\n=79.\u2003\u2003(1)\n","On a common 8-bit microprocessors, references to the elements of the shift register are relatively expensive. Removing one of these references entirely would seem possible, without affecting the security too much. The element Sis chosen to be removed, to \u201cspread\u201d the values as much as possible. It is still advantageous to rotate the intermediate sum however, as the non-linearity of the less significant bits is still not as good as would be desired. In fact, the optimum rotation in this case is by four places. Many microprocessors implement a \u201cnybble-swap\u201d instruction which achieves this operation. Using the notation SWAP( ) to mean rotating the byte by four places, the non-linear function becomes:\n\n=SWAP ()+\u2003\u2003(12)\n","A block diagram of the third exemplary generator is shown in FIG. . In this exemplary embodiment, linear feedback shift register  is 17 octets long, although other lengths for register  (for different order recurrence relation) can be implemented and are within the scope of the present invention. A recurrence relation of order 17 is well suited for applications using up to 128-bit key material. In this exemplary embodiment, linear feedback shift register  is updated in accordance with the following recurrence relation (11), where the operations are defined over GF(2), \u2295 is the exclusive-OR operation on two bytes represented by Galois adders , and {circle around (\u00d7)} is a polynomial modular multiplication represented by Galois multipliers . In this exemplary embodiment, the modular multiplications on coefficient  are implemented using byte table lookups on pre-computed tables as described above. The recurrence relation in equation (11) was chosen to be maximal length.","Here Vis the non-linear output and + is addition truncated modulo  (with the overflow discarded) represented by arithmetic adders . SWAP denotes the swap operator .","In this exemplary embodiment, switch  and buffer  in  operate in the manner described above for switch  and buffer  in FIG. .","During the stuttering phase, the nonlinear outputs are, in two cases, XORed with constant terms. (See Table 3) In this embodiment, these calculations are omitted.","The previous description of the preferred embodiments is provided to enable any person skilled in the art to make or use the present invention. The various modifications to these embodiments will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments without the use of the inventive faculty. Thus, the present invention is not intended to be limited to the embodiments shown herein, but is to be accorded the widest scope consistent with the principles and novel features disclosed herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features, objects, and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify correspondingly throughout and wherein:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
